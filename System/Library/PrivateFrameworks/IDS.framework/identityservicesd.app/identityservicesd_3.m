uint64_t sub_10044CD08(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  __n128 v6;
  void v8[7];
  uint64_t v9;
  v3 = *a1;
  v2 = a1[1];
  v9 = *a2;
  KeyPath = swift_getKeyPath(&unk_100719C60);
  v8[2] = v9;
  v8[3] = v3;
  v8[4] = v2;
  v5 = sub_10040A2B0( &qword_1009BA000,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSRegistrationEvent,  (uint64_t)&unk_10071A8F8);
  v6 = swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v9,  KeyPath,  sub_10045A208,  v8,  (char *)&type metadata for () + 8,  v5,  v6);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_10044CDCC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, uint64_t (*a6)(uint64_t), uint64_t a7)
{
  uint64_t KeyPath = swift_getKeyPath(a4);
  v16[0] = a2;
  v16[1] = a3;
  uint64_t v13 = sub_10040A2B0(a5, a6, a7);
  uint64_t v14 = sub_10045119C( &qword_1009B9ED0,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, v16, v13, v14);
  return swift_release(KeyPath);
}

uint64_t sub_10044CE7C( uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v20 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  sub_10044CF30(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  return v20;
}

void *sub_10044CF30( uint64_t a1, uint64_t a2, uint64_t a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  v12 = v11;
  uint64_t v68 = a7;
  uint64_t v69 = a8;
  uint64_t v65 = a5;
  uint64_t v66 = a6;
  v74 = a4;
  uint64_t v67 = a3;
  uint64_t v62 = a1;
  uint64_t v71 = a10;
  uint64_t v72 = a11;
  uint64_t v70 = a9;
  uint64_t v15 = *v11;
  uint64_t v73 = type metadata accessor for Date(0LL);
  uint64_t v64 = *(void *)(v73 - 8);
  __chkstk_darwin(v16, v17);
  v19 = (char *)&v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v63 = sub_1003F5CB4(&qword_1009BC130);
  __chkstk_darwin(v20, v21);
  v23 = (char *)&v61 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v12[6] = sub_1003F5CB4(&qword_1009BA008);
  uint64_t v24 = sub_10040A2B0( &qword_1009BC540,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSRegistrationEvent,  (uint64_t)&unk_10071A7F8);
  v77[0] = v15;
  v77[1] = v15;
  v77[2] = v24;
  uint64_t v78 = v24;
  v12[7] = swift_getOpaqueTypeConformance2( v77,  &opaque type descriptor for <<opaque return type of static PersistentModel.createBackingData<A>()>>,  1LL);
  sub_10040B2A8(v12 + 3);
  uint64_t v25 = static PersistentModel.createBackingData<A>()(v15, v15, v24, v24);
  *((_WORD *)v12 + 8) = 257;
  *((_BYTE *)v12 + 18) = 1;
  ObservationRegistrar.init()(v25);
  sub_100401ACC((uint64_t)(v12 + 3), (uint64_t)v77);
  uint64_t v27 = v78;
  uint64_t v26 = v79;
  sub_10040A238(v77, v78);
  uint64_t KeyPath = swift_getKeyPath(&unk_100719B70);
  uint64_t v75 = v62;
  uint64_t v76 = a2;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)( KeyPath,  &v75,  &type metadata for String,  &protocol witness table for String,  v27,  v26);
  swift_bridgeObjectRelease(a2);
  swift_release(KeyPath);
  sub_10040A648(v77);
  sub_100455A7C(a3, (uint64_t)v23);
  sub_100401ACC((uint64_t)(v12 + 3), (uint64_t)v77);
  uint64_t v29 = v78;
  uint64_t v30 = v79;
  sub_10040A238(v77, v78);
  uint64_t v31 = swift_getKeyPath(&unk_100719B98);
  uint64_t v32 = sub_1004559B0( &qword_1009B9FA8,  &qword_1009BAD00,  (uint64_t)&protocol conformance descriptor for Date,  (uint64_t)&protocol conformance descriptor for <A> A?);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v31, v23, v63, v32, v29, v30);
  swift_release(v31);
  sub_100455970((uint64_t)v23);
  sub_10040A648(v77);
  *((_BYTE *)v12 + 16) = 0;
  uint64_t v33 = v64;
  uint64_t v34 = v73;
  (*(void (**)(char *, char *, uint64_t))(v64 + 16))(v19, v74, v73);
  sub_100401ACC((uint64_t)(v12 + 3), (uint64_t)v77);
  uint64_t v35 = v78;
  uint64_t v36 = v79;
  sub_10040A238(v77, v78);
  uint64_t v37 = swift_getKeyPath(&unk_100719BC0);
  uint64_t v38 = sub_10040A2B0( &qword_1009BAD00,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  uint64_t v39 = v34;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v37, v19, v34, v38, v35, v36);
  swift_release(v37);
  v40 = *(void (**)(char *, uint64_t))(v33 + 8);
  v40(v19, v39);
  sub_10040A648(v77);
  sub_100401ACC((uint64_t)(v12 + 3), (uint64_t)v77);
  uint64_t v41 = v78;
  uint64_t v42 = v79;
  sub_10040A238(v77, v78);
  uint64_t v43 = swift_getKeyPath(&unk_100719BE8);
  uint64_t v75 = v65;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)( v43,  &v75,  &type metadata for Int,  &protocol witness table for Int,  v41,  v42);
  swift_release(v43);
  sub_10040A648(v77);
  sub_100401ACC((uint64_t)(v12 + 3), (uint64_t)v77);
  uint64_t v44 = v78;
  uint64_t v45 = v79;
  sub_10040A238(v77, v78);
  uint64_t v46 = swift_getKeyPath(&unk_100719C10);
  uint64_t v75 = v66;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)( v46,  &v75,  &type metadata for UInt,  &protocol witness table for UInt,  v44,  v45);
  swift_release(v46);
  sub_10040A648(v77);
  sub_100401ACC((uint64_t)(v12 + 3), (uint64_t)v77);
  uint64_t v47 = v78;
  uint64_t v48 = v79;
  sub_10040A238(v77, v78);
  uint64_t v49 = swift_getKeyPath(&unk_100719C38);
  uint64_t v50 = v69;
  uint64_t v75 = v68;
  uint64_t v76 = v69;
  uint64_t v51 = sub_1003F5CB4(&qword_1009B9A38);
  uint64_t v52 = sub_10045119C( &qword_1009B9ED0,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <A> A?);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v49, &v75, v51, v52, v47, v48);
  swift_release(v49);
  swift_bridgeObjectRelease(v50);
  sub_10040A648(v77);
  *((_BYTE *)v12 + 17) = 0;
  sub_100401ACC((uint64_t)(v12 + 3), (uint64_t)v77);
  uint64_t v53 = v78;
  uint64_t v54 = v79;
  sub_10040A238(v77, v78);
  uint64_t v55 = swift_getKeyPath(&unk_100719C60);
  uint64_t v56 = v71;
  uint64_t v75 = v70;
  uint64_t v76 = v71;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v55, &v75, v51, v52, v53, v54);
  swift_release(v55);
  swift_bridgeObjectRelease(v56);
  sub_10040A648(v77);
  *((_BYTE *)v12 + 18) = 0;
  sub_100401ACC((uint64_t)(v12 + 3), (uint64_t)v77);
  uint64_t v57 = v78;
  uint64_t v58 = v79;
  sub_10040A238(v77, v78);
  uint64_t v59 = swift_getKeyPath(&unk_100719B48);
  uint64_t v75 = v72;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)( v59,  &v75,  &type metadata for UInt,  &protocol witness table for UInt,  v57,  v58);
  swift_release(v59);
  sub_10040A648(v77);
  v40(v74, v73);
  sub_100455970(v67);
  return v12;
}

uint64_t sub_10044D4B8(uint64_t a1)
{
  return sub_100441DEC(a1, (void (*)(uint64_t))sub_10044D4C4);
}

void *sub_10044D4C4(void *a1)
{
  v2 = v1;
  uint64_t v4 = *v1;
  v2[6] = sub_1003F5CB4(&qword_1009BA008);
  uint64_t v5 = sub_10040A2B0( &qword_1009BC540,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSRegistrationEvent,  (uint64_t)&unk_10071A7F8);
  *(void *)&__int128 v9 = v4;
  *((void *)&v9 + 1) = v4;
  uint64_t v10 = v5;
  uint64_t v11 = v5;
  v2[7] = swift_getOpaqueTypeConformance2( &v9,  &opaque type descriptor for <<opaque return type of static PersistentModel.createBackingData<A>()>>,  1LL);
  sub_10040B2A8(v2 + 3);
  uint64_t v6 = static PersistentModel.createBackingData<A>()(v4, v4, v5, v5);
  *((_WORD *)v2 + 8) = 257;
  *((_BYTE *)v2 + 18) = 1;
  ObservationRegistrar.init()(v6);
  *((_WORD *)v2 + 8) = 0;
  *((_BYTE *)v2 + 18) = 0;
  sub_100401ACC((uint64_t)a1, (uint64_t)&v9);
  swift_beginAccess(v2 + 3, v8, 33LL, 0LL);
  sub_10040A648(v2 + 3);
  sub_10043D79C(&v9, (uint64_t)(v2 + 3));
  swift_endAccess(v8);
  sub_10040A648(a1);
  return v2;
}

uint64_t sub_10044D5E4()
{
  return sub_10044D5F0(OBJC_IVAR____TtCOO17identityservicesd26SDPersistenceMigrationPlan21SDPersistenceSchemaV120IDSRegistrationEvent___observationRegistrar);
}

uint64_t sub_10044D5F0(void *a1)
{
  v3 = (char *)v1 + *a1;
  uint64_t v4 = type metadata accessor for ObservationRegistrar(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v4 - 8) + 8LL))(v3, v4);
  return swift_deallocClassInstance(v1, *(unsigned int *)(*v1 + 48LL), *(unsigned __int16 *)(*v1 + 52LL));
}

uint64_t sub_10044D648()
{
  uint64_t v6 = v0;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719C88);
  uint64_t v2 = sub_10040A2B0( &qword_1009BA010,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071AA14);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  uint64_t v3 = swift_getKeyPath(&unk_100719C88);
  uint64_t v4 = sub_10040A2B0( &qword_1009BC4D0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071A914);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for String);
  swift_release(v3);
  return v6;
}

uint64_t sub_10044D724@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  v9[0] = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719C88);
  uint64_t v4 = sub_10040A2B0( &qword_1009BA010,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071AA14);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_100719C88);
  uint64_t v6 = sub_10040A2B0( &qword_1009BC4D0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071A914);
  PersistentModel.getValue<A>(forKey:)(v9, v5, v6, &protocol witness table for String);
  uint64_t result = swift_release(v5);
  uint64_t v8 = v9[1];
  *a2 = v9[0];
  a2[1] = v8;
  return result;
}

uint64_t sub_10044D808(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v9 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719C88);
  v8[2] = v9;
  v8[3] = v3;
  v8[4] = v2;
  uint64_t v5 = sub_10040A2B0( &qword_1009BA010,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071AA14);
  __n128 v6 = swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v9,  KeyPath,  sub_10045A1F4,  v8,  (char *)&type metadata for () + 8,  v5,  v6);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_10044D8CC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, uint64_t (*a6)(uint64_t), uint64_t a7)
{
  uint64_t KeyPath = swift_getKeyPath(a4);
  v15[0] = a2;
  v15[1] = a3;
  uint64_t v13 = sub_10040A2B0(a5, a6, a7);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, v15, v13, &protocol witness table for String);
  return swift_release(KeyPath);
}

uint64_t sub_10044D960()
{
  uint64_t v6 = v0;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719CB0);
  uint64_t v2 = sub_10040A2B0( &qword_1009BA010,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071AA14);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  uint64_t v3 = swift_getKeyPath(&unk_100719CB0);
  uint64_t v4 = sub_10040A2B0( &qword_1009BC4D0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071A914);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for Int);
  swift_release(v3);
  return v6;
}

uint64_t sub_10044DA3C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v8 = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719CB0);
  uint64_t v4 = sub_10040A2B0( &qword_1009BA010,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071AA14);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_100719CB0);
  uint64_t v6 = sub_10040A2B0( &qword_1009BC4D0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071A914);
  PersistentModel.getValue<A>(forKey:)(&v8, v5, v6, &protocol witness table for Int);
  uint64_t result = swift_release(v5);
  *a2 = v8;
  return result;
}

uint64_t sub_10044DB20(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v8 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719CB0);
  v7[2] = v8;
  v7[3] = v2;
  uint64_t v4 = sub_10040A2B0( &qword_1009BA010,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071AA14);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v8,  KeyPath,  sub_100459F9C,  v7,  (char *)&type metadata for () + 8,  v4,  v5);
  return swift_release(KeyPath);
}

uint64_t sub_10044DBC4(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath = swift_getKeyPath(&unk_100719CB0);
  uint64_t v6 = a2;
  uint64_t v4 = sub_10040A2B0( &qword_1009BC4D0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071A914);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, &v6, v4, &protocol witness table for Int);
  return swift_release(KeyPath);
}

uint64_t sub_10044DC44()
{
  uint64_t v6 = v0;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719CD8);
  uint64_t v2 = sub_10040A2B0( &qword_1009BA010,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071AA14);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  uint64_t v3 = swift_getKeyPath(&unk_100719CD8);
  uint64_t v4 = sub_10040A2B0( &qword_1009BC4D0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071A914);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for Int);
  swift_release(v3);
  return v6;
}

uint64_t sub_10044DD20@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v8 = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719CD8);
  uint64_t v4 = sub_10040A2B0( &qword_1009BA010,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071AA14);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_100719CD8);
  uint64_t v6 = sub_10040A2B0( &qword_1009BC4D0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071A914);
  PersistentModel.getValue<A>(forKey:)(&v8, v5, v6, &protocol witness table for Int);
  uint64_t result = swift_release(v5);
  *a2 = v8;
  return result;
}

uint64_t sub_10044DE04(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v8 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719CD8);
  v7[2] = v8;
  v7[3] = v2;
  uint64_t v4 = sub_10040A2B0( &qword_1009BA010,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071AA14);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v8,  KeyPath,  sub_100459F88,  v7,  (char *)&type metadata for () + 8,  v4,  v5);
  return swift_release(KeyPath);
}

uint64_t sub_10044DEA8(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath = swift_getKeyPath(&unk_100719CD8);
  uint64_t v6 = a2;
  uint64_t v4 = sub_10040A2B0( &qword_1009BC4D0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071A914);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, &v6, v4, &protocol witness table for Int);
  return swift_release(KeyPath);
}

uint64_t sub_10044DF28()
{
  uint64_t v6 = v0;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719D00);
  uint64_t v2 = sub_10040A2B0( &qword_1009BA010,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071AA14);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  uint64_t v3 = swift_getKeyPath(&unk_100719D00);
  uint64_t v4 = sub_10040A2B0( &qword_1009BC4D0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071A914);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for Int);
  swift_release(v3);
  return v6;
}

uint64_t sub_10044E004@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v8 = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719D00);
  uint64_t v4 = sub_10040A2B0( &qword_1009BA010,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071AA14);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_100719D00);
  uint64_t v6 = sub_10040A2B0( &qword_1009BC4D0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071A914);
  PersistentModel.getValue<A>(forKey:)(&v8, v5, v6, &protocol witness table for Int);
  uint64_t result = swift_release(v5);
  *a2 = v8;
  return result;
}

uint64_t sub_10044E0E8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v8 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719D00);
  v7[2] = v8;
  v7[3] = v2;
  uint64_t v4 = sub_10040A2B0( &qword_1009BA010,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071AA14);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v8,  KeyPath,  sub_100459F74,  v7,  (char *)&type metadata for () + 8,  v4,  v5);
  return swift_release(KeyPath);
}

uint64_t sub_10044E18C(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath = swift_getKeyPath(&unk_100719D00);
  uint64_t v6 = a2;
  uint64_t v4 = sub_10040A2B0( &qword_1009BC4D0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071A914);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, &v6, v4, &protocol witness table for Int);
  return swift_release(KeyPath);
}

uint64_t sub_10044E20C()
{
  uint64_t v6 = v0;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719D28);
  uint64_t v2 = sub_10040A2B0( &qword_1009BA010,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071AA14);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  uint64_t v3 = swift_getKeyPath(&unk_100719D28);
  uint64_t v4 = sub_10040A2B0( &qword_1009BC4D0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071A914);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for Int);
  swift_release(v3);
  return v6;
}

uint64_t sub_10044E2E8@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v8 = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719D28);
  uint64_t v4 = sub_10040A2B0( &qword_1009BA010,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071AA14);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_100719D28);
  uint64_t v6 = sub_10040A2B0( &qword_1009BC4D0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071A914);
  PersistentModel.getValue<A>(forKey:)(&v8, v5, v6, &protocol witness table for Int);
  uint64_t result = swift_release(v5);
  *a2 = v8;
  return result;
}

uint64_t sub_10044E3CC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v8 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719D28);
  v7[2] = v8;
  v7[3] = v2;
  uint64_t v4 = sub_10040A2B0( &qword_1009BA010,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071AA14);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v8,  KeyPath,  sub_100459F60,  v7,  (char *)&type metadata for () + 8,  v4,  v5);
  return swift_release(KeyPath);
}

uint64_t sub_10044E470(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath = swift_getKeyPath(&unk_100719D28);
  uint64_t v6 = a2;
  uint64_t v4 = sub_10040A2B0( &qword_1009BC4D0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071A914);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, &v6, v4, &protocol witness table for Int);
  return swift_release(KeyPath);
}

uint64_t sub_10044E4F0()
{
  uint64_t v6 = v0;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719D50);
  uint64_t v2 = sub_10040A2B0( &qword_1009BA010,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071AA14);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  uint64_t v3 = swift_getKeyPath(&unk_100719D50);
  uint64_t v4 = sub_10040A2B0( &qword_1009BC4D0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071A914);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for Int);
  swift_release(v3);
  return v6;
}

uint64_t sub_10044E5CC@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v8 = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719D50);
  uint64_t v4 = sub_10040A2B0( &qword_1009BA010,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071AA14);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_100719D50);
  uint64_t v6 = sub_10040A2B0( &qword_1009BC4D0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071A914);
  PersistentModel.getValue<A>(forKey:)(&v8, v5, v6, &protocol witness table for Int);
  uint64_t result = swift_release(v5);
  *a2 = v8;
  return result;
}

uint64_t sub_10044E6B0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v8 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719D50);
  v7[2] = v8;
  v7[3] = v2;
  uint64_t v4 = sub_10040A2B0( &qword_1009BA010,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071AA14);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v8,  KeyPath,  sub_100459F4C,  v7,  (char *)&type metadata for () + 8,  v4,  v5);
  return swift_release(KeyPath);
}

uint64_t sub_10044E754(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath = swift_getKeyPath(&unk_100719D50);
  uint64_t v6 = a2;
  uint64_t v4 = sub_10040A2B0( &qword_1009BC4D0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071A914);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, &v6, v4, &protocol witness table for Int);
  return swift_release(KeyPath);
}

uint64_t sub_10044E7D4()
{
  uint64_t v6 = v0;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719D78);
  uint64_t v2 = sub_10040A2B0( &qword_1009BA010,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071AA14);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  uint64_t v3 = swift_getKeyPath(&unk_100719D78);
  uint64_t v4 = sub_10040A2B0( &qword_1009BC4D0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071A914);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for Int);
  swift_release(v3);
  return v6;
}

uint64_t sub_10044E8B0@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v8 = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719D78);
  uint64_t v4 = sub_10040A2B0( &qword_1009BA010,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071AA14);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_100719D78);
  uint64_t v6 = sub_10040A2B0( &qword_1009BC4D0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071A914);
  PersistentModel.getValue<A>(forKey:)(&v8, v5, v6, &protocol witness table for Int);
  uint64_t result = swift_release(v5);
  *a2 = v8;
  return result;
}

uint64_t sub_10044E994(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v8 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719D78);
  v7[2] = v8;
  v7[3] = v2;
  uint64_t v4 = sub_10040A2B0( &qword_1009BA010,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071AA14);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v8,  KeyPath,  sub_100459F38,  v7,  (char *)&type metadata for () + 8,  v4,  v5);
  return swift_release(KeyPath);
}

uint64_t sub_10044EA38(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath = swift_getKeyPath(&unk_100719D78);
  uint64_t v6 = a2;
  uint64_t v4 = sub_10040A2B0( &qword_1009BC4D0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071A914);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, &v6, v4, &protocol witness table for Int);
  return swift_release(KeyPath);
}

uint64_t sub_10044EAB8()
{
  uint64_t v6 = v0;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719DA0);
  uint64_t v2 = sub_10040A2B0( &qword_1009BA010,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071AA14);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  uint64_t v3 = swift_getKeyPath(&unk_100719DA0);
  uint64_t v4 = sub_10040A2B0( &qword_1009BC4D0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071A914);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for Int);
  swift_release(v3);
  return v6;
}

uint64_t sub_10044EB94@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v8 = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719DA0);
  uint64_t v4 = sub_10040A2B0( &qword_1009BA010,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071AA14);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_100719DA0);
  uint64_t v6 = sub_10040A2B0( &qword_1009BC4D0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071A914);
  PersistentModel.getValue<A>(forKey:)(&v8, v5, v6, &protocol witness table for Int);
  uint64_t result = swift_release(v5);
  *a2 = v8;
  return result;
}

uint64_t sub_10044EC78(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v8 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719DA0);
  v7[2] = v8;
  v7[3] = v2;
  uint64_t v4 = sub_10040A2B0( &qword_1009BA010,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071AA14);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v8,  KeyPath,  sub_100459F24,  v7,  (char *)&type metadata for () + 8,  v4,  v5);
  return swift_release(KeyPath);
}

uint64_t sub_10044ED1C(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath = swift_getKeyPath(&unk_100719DA0);
  uint64_t v6 = a2;
  uint64_t v4 = sub_10040A2B0( &qword_1009BC4D0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071A914);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, &v6, v4, &protocol witness table for Int);
  return swift_release(KeyPath);
}

uint64_t sub_10044ED9C()
{
  uint64_t v6 = v0;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719DC8);
  uint64_t v2 = sub_10040A2B0( &qword_1009BA010,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071AA14);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  uint64_t v3 = swift_getKeyPath(&unk_100719DC8);
  uint64_t v4 = sub_10040A2B0( &qword_1009BC4D0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071A914);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for Int);
  swift_release(v3);
  return v6;
}

uint64_t sub_10044EE78@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v8 = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719DC8);
  uint64_t v4 = sub_10040A2B0( &qword_1009BA010,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071AA14);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_100719DC8);
  uint64_t v6 = sub_10040A2B0( &qword_1009BC4D0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071A914);
  PersistentModel.getValue<A>(forKey:)(&v8, v5, v6, &protocol witness table for Int);
  uint64_t result = swift_release(v5);
  *a2 = v8;
  return result;
}

uint64_t sub_10044EF5C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v8 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719DC8);
  v7[2] = v8;
  v7[3] = v2;
  uint64_t v4 = sub_10040A2B0( &qword_1009BA010,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071AA14);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v8,  KeyPath,  sub_100459F10,  v7,  (char *)&type metadata for () + 8,  v4,  v5);
  return swift_release(KeyPath);
}

uint64_t sub_10044F000(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath = swift_getKeyPath(&unk_100719DC8);
  uint64_t v6 = a2;
  uint64_t v4 = sub_10040A2B0( &qword_1009BC4D0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071A914);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, &v6, v4, &protocol witness table for Int);
  return swift_release(KeyPath);
}

uint64_t sub_10044F080()
{
  uint64_t v6 = v0;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719DF0);
  uint64_t v2 = sub_10040A2B0( &qword_1009BA010,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071AA14);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  uint64_t v3 = swift_getKeyPath(&unk_100719DF0);
  uint64_t v4 = sub_10040A2B0( &qword_1009BC4D0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071A914);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for Int);
  swift_release(v3);
  return v6;
}

uint64_t sub_10044F15C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v8 = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719DF0);
  uint64_t v4 = sub_10040A2B0( &qword_1009BA010,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071AA14);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_100719DF0);
  uint64_t v6 = sub_10040A2B0( &qword_1009BC4D0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071A914);
  PersistentModel.getValue<A>(forKey:)(&v8, v5, v6, &protocol witness table for Int);
  uint64_t result = swift_release(v5);
  *a2 = v8;
  return result;
}

uint64_t sub_10044F240(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v8 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719DF0);
  v7[2] = v8;
  v7[3] = v2;
  uint64_t v4 = sub_10040A2B0( &qword_1009BA010,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071AA14);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v8,  KeyPath,  sub_100459EFC,  v7,  (char *)&type metadata for () + 8,  v4,  v5);
  return swift_release(KeyPath);
}

uint64_t sub_10044F2E4(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath = swift_getKeyPath(&unk_100719DF0);
  uint64_t v6 = a2;
  uint64_t v4 = sub_10040A2B0( &qword_1009BC4D0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071A914);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, &v6, v4, &protocol witness table for Int);
  return swift_release(KeyPath);
}

uint64_t sub_10044F364()
{
  uint64_t v6 = v0;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719E18);
  uint64_t v2 = sub_10040A2B0( &qword_1009BA010,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071AA14);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  uint64_t v3 = swift_getKeyPath(&unk_100719E18);
  uint64_t v4 = sub_10040A2B0( &qword_1009BC4D0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071A914);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for Int);
  swift_release(v3);
  return v6;
}

uint64_t sub_10044F440@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v8 = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719E18);
  uint64_t v4 = sub_10040A2B0( &qword_1009BA010,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071AA14);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_100719E18);
  uint64_t v6 = sub_10040A2B0( &qword_1009BC4D0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071A914);
  PersistentModel.getValue<A>(forKey:)(&v8, v5, v6, &protocol witness table for Int);
  uint64_t result = swift_release(v5);
  *a2 = v8;
  return result;
}

uint64_t sub_10044F524(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v8 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719E18);
  v7[2] = v8;
  v7[3] = v2;
  uint64_t v4 = sub_10040A2B0( &qword_1009BA010,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071AA14);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v8,  KeyPath,  sub_100459EE8,  v7,  (char *)&type metadata for () + 8,  v4,  v5);
  return swift_release(KeyPath);
}

uint64_t sub_10044F5C8(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath = swift_getKeyPath(&unk_100719E18);
  uint64_t v6 = a2;
  uint64_t v4 = sub_10040A2B0( &qword_1009BC4D0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071A914);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, &v6, v4, &protocol witness table for Int);
  return swift_release(KeyPath);
}

uint64_t sub_10044F648( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v20 = swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  sub_10044F6FC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
  return v20;
}

void *sub_10044F6FC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13 = v12;
  uint64_t v18 = *v12;
  v13[5] = sub_1003F5CB4(&qword_1009BA018);
  uint64_t v19 = sub_10040A2B0( &qword_1009BC4D0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071A914);
  v60[0] = v18;
  v60[1] = v18;
  v60[2] = v19;
  uint64_t v61 = v19;
  v13[6] = swift_getOpaqueTypeConformance2( v60,  &opaque type descriptor for <<opaque return type of static PersistentModel.createBackingData<A>()>>,  1LL);
  sub_10040B2A8(v13 + 2);
  uint64_t v20 = static PersistentModel.createBackingData<A>()(v18, v18, v19, v19);
  ObservationRegistrar.init()(v20);
  sub_100401ACC((uint64_t)(v13 + 2), (uint64_t)v60);
  uint64_t v21 = v61;
  uint64_t v22 = v62;
  sub_10040A238(v60, v61);
  uint64_t KeyPath = swift_getKeyPath(&unk_100719C88);
  v59[0] = a1;
  v59[1] = a2;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)( KeyPath,  v59,  &type metadata for String,  &protocol witness table for String,  v21,  v22);
  swift_bridgeObjectRelease(a2);
  swift_release(KeyPath);
  sub_10040A648(v60);
  sub_100401ACC((uint64_t)(v13 + 2), (uint64_t)v60);
  uint64_t v24 = v61;
  uint64_t v25 = v62;
  sub_10040A238(v60, v61);
  uint64_t v26 = swift_getKeyPath(&unk_100719CB0);
  v59[0] = a3;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)( v26,  v59,  &type metadata for Int,  &protocol witness table for Int,  v24,  v25);
  swift_release(v26);
  sub_10040A648(v60);
  sub_100401ACC((uint64_t)(v13 + 2), (uint64_t)v60);
  uint64_t v27 = v61;
  uint64_t v28 = v62;
  sub_10040A238(v60, v61);
  uint64_t v29 = swift_getKeyPath(&unk_100719CD8);
  v59[0] = a4;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)( v29,  v59,  &type metadata for Int,  &protocol witness table for Int,  v27,  v28);
  swift_release(v29);
  sub_10040A648(v60);
  sub_100401ACC((uint64_t)(v13 + 2), (uint64_t)v60);
  uint64_t v30 = v61;
  uint64_t v31 = v62;
  sub_10040A238(v60, v61);
  uint64_t v32 = swift_getKeyPath(&unk_100719D00);
  v59[0] = a5;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)( v32,  v59,  &type metadata for Int,  &protocol witness table for Int,  v30,  v31);
  swift_release(v32);
  sub_10040A648(v60);
  sub_100401ACC((uint64_t)(v13 + 2), (uint64_t)v60);
  uint64_t v33 = v61;
  uint64_t v34 = v62;
  sub_10040A238(v60, v61);
  uint64_t v35 = swift_getKeyPath(&unk_100719D28);
  v59[0] = a6;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)( v35,  v59,  &type metadata for Int,  &protocol witness table for Int,  v33,  v34);
  swift_release(v35);
  sub_10040A648(v60);
  sub_100401ACC((uint64_t)(v13 + 2), (uint64_t)v60);
  uint64_t v36 = v61;
  uint64_t v37 = v62;
  sub_10040A238(v60, v61);
  uint64_t v38 = swift_getKeyPath(&unk_100719D50);
  v59[0] = a7;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)( v38,  v59,  &type metadata for Int,  &protocol witness table for Int,  v36,  v37);
  swift_release(v38);
  sub_10040A648(v60);
  sub_100401ACC((uint64_t)(v13 + 2), (uint64_t)v60);
  uint64_t v39 = v61;
  uint64_t v40 = v62;
  sub_10040A238(v60, v61);
  uint64_t v41 = swift_getKeyPath(&unk_100719D78);
  v59[0] = a8;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)( v41,  v59,  &type metadata for Int,  &protocol witness table for Int,  v39,  v40);
  swift_release(v41);
  sub_10040A648(v60);
  sub_100401ACC((uint64_t)(v13 + 2), (uint64_t)v60);
  uint64_t v42 = v61;
  uint64_t v43 = v62;
  sub_10040A238(v60, v61);
  uint64_t v44 = swift_getKeyPath(&unk_100719DA0);
  v59[0] = a9;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)( v44,  v59,  &type metadata for Int,  &protocol witness table for Int,  v42,  v43);
  swift_release(v44);
  sub_10040A648(v60);
  sub_100401ACC((uint64_t)(v13 + 2), (uint64_t)v60);
  uint64_t v45 = v61;
  uint64_t v46 = v62;
  sub_10040A238(v60, v61);
  uint64_t v47 = swift_getKeyPath(&unk_100719DC8);
  v59[0] = a10;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)( v47,  v59,  &type metadata for Int,  &protocol witness table for Int,  v45,  v46);
  swift_release(v47);
  sub_10040A648(v60);
  sub_100401ACC((uint64_t)(v13 + 2), (uint64_t)v60);
  uint64_t v48 = v61;
  uint64_t v49 = v62;
  sub_10040A238(v60, v61);
  uint64_t v50 = swift_getKeyPath(&unk_100719DF0);
  v59[0] = a11;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)( v50,  v59,  &type metadata for Int,  &protocol witness table for Int,  v48,  v49);
  swift_release(v50);
  sub_10040A648(v60);
  sub_100401ACC((uint64_t)(v13 + 2), (uint64_t)v60);
  uint64_t v51 = v61;
  uint64_t v52 = v62;
  sub_10040A238(v60, v61);
  uint64_t v53 = swift_getKeyPath(&unk_100719E18);
  v59[0] = a12;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)( v53,  v59,  &type metadata for Int,  &protocol witness table for Int,  v51,  v52);
  swift_release(v53);
  sub_10040A648(v60);
  return v13;
}

uint64_t sub_10044FC38(uint64_t a1)
{
  return sub_100441DEC(a1, (void (*)(uint64_t))sub_10044FC44);
}

void *sub_10044FC44(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  v2[5] = sub_1003F5CB4(&qword_1009BA018);
  uint64_t v5 = sub_10040A2B0( &qword_1009BC4D0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071A914);
  *(void *)&__int128 v9 = v4;
  *((void *)&v9 + 1) = v4;
  uint64_t v10 = v5;
  uint64_t v11 = v5;
  v2[6] = swift_getOpaqueTypeConformance2( &v9,  &opaque type descriptor for <<opaque return type of static PersistentModel.createBackingData<A>()>>,  1LL);
  sub_10040B2A8(v2 + 2);
  uint64_t v6 = static PersistentModel.createBackingData<A>()(v4, v4, v5, v5);
  ObservationRegistrar.init()(v6);
  sub_100401ACC((uint64_t)a1, (uint64_t)&v9);
  swift_beginAccess(v2 + 2, v8, 33LL, 0LL);
  sub_10040A648(v2 + 2);
  sub_10043D79C(&v9, (uint64_t)(v2 + 2));
  swift_endAccess(v8);
  sub_10040A648(a1);
  return v2;
}

uint64_t sub_10044FD4C()
{
  return sub_10044FD58(OBJC_IVAR____TtCOO17identityservicesd26SDPersistenceMigrationPlan21SDPersistenceSchemaV125IDSQualifiedContactsCount___observationRegistrar);
}

uint64_t sub_10044FD58(void *a1)
{
  uint64_t v3 = (char *)v1 + *a1;
  uint64_t v4 = type metadata accessor for ObservationRegistrar(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v4 - 8) + 8LL))(v3, v4);
  return swift_deallocClassInstance(v1, *(unsigned int *)(*v1 + 48LL), *(unsigned __int16 *)(*v1 + 52LL));
}

uint64_t sub_10044FDB4()
{
  return Schema.Version.init(_:_:_:)(1LL, 0LL, 0LL);
}

uint64_t sub_10044FDC4()
{
  uint64_t v0 = sub_1003F5CB4(&qword_1009B9EB8);
  uint64_t v1 = swift_allocObject(v0, 48LL, 7LL);
  *(_OWORD *)(v1 + 16) = xmmword_1007184C0;
  unint64_t v2 = sub_10043E3FC();
  *(void *)(v1 + 3sub_10040A648(v1 + 2) = &type metadata for SDPersistenceMigrationPlan.SDPersistenceSchemaV1;
  *(void *)(v1 + 40) = v2;
  return v1;
}

void *sub_10044FE18()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t sub_10044FE24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10044FFD0(a1, a2, a3, (void (*)(uint64_t))sub_10043FA14);
}

uint64_t sub_10044FE34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1004508AC(a1, a2, a3, (void (*)(uint64_t, void *))sub_10043D79C);
}

void (*sub_10044FE40(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[16] = v1;
  swift_beginAccess(v1 + 24, v3 + 10, 0LL, 0LL);
  sub_100401ACC(v1 + 24, (uint64_t)v3);
  return sub_10044FEA8;
}

void sub_10044FEA8(uint64_t *a1, char a2)
{
}

uint64_t sub_10044FEBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10040A2B0( &qword_1009BC840,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable,  (uint64_t)&unk_100719F18);
  return PersistentModel.hash(into:)(a1, a2, v4);
}

uint64_t sub_10044FF18(uint64_t a1)
{
  uint64_t v2 = sub_10040A2B0( &qword_1009BC840,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable,  (uint64_t)&unk_100719F18);
  return PersistentModel.id.getter(a1, v2);
}

uint64_t sub_10044FF70(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  uint64_t v5 = sub_10040A2B0( &qword_1009BC840,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable,  (uint64_t)&unk_100719F18);
  return static PersistentModel.== infix(_:_:)(v3, v4, v2, v5);
}

uint64_t sub_10044FFC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10044FFD0(a1, a2, a3, (void (*)(uint64_t))sub_100441E34);
}

uint64_t sub_10044FFD0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v7 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  a4(a1);
  return v7;
}

uint64_t sub_100450018@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + 24;
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return sub_100401ACC(v3, a1);
}

uint64_t sub_100450064(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10040A2B0( (unint64_t *)&unk_1009BC900,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A034);
  return PersistentModel.hash(into:)(a1, a2, v4);
}

uint64_t sub_1004500BC(uint64_t a1)
{
  uint64_t v2 = sub_10040A2B0( (unint64_t *)&unk_1009BC900,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A034);
  return PersistentModel.id.getter(a1, v2);
}

uint64_t sub_100450114(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  uint64_t v5 = sub_10040A2B0( (unint64_t *)&unk_1009BC900,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A034);
  return static PersistentModel.== infix(_:_:)(v3, v4, v2, v5);
}

uint64_t sub_100450168(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10044FFD0(a1, a2, a3, (void (*)(uint64_t))sub_100444160);
}

uint64_t sub_100450178(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100450A24(a1, a2, a3, (void (*)(uint64_t, void *))sub_10043D79C);
}

void (*sub_100450184(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x88uLL);
  *a1 = v3;
  v3[16] = v1;
  swift_beginAccess(v1 + 16, v3 + 10, 0LL, 0LL);
  sub_100401ACC(v1 + 16, (uint64_t)v3);
  return sub_1004501EC;
}

void sub_1004501EC(uint64_t *a1, char a2)
{
}

uint64_t sub_1004501FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10040A2B0( &qword_1009B9F70,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A150);
  return PersistentModel.hash(into:)(a1, a2, v4);
}

uint64_t sub_100450254(uint64_t a1)
{
  uint64_t v2 = sub_10040A2B0( &qword_1009B9F70,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A150);
  return PersistentModel.id.getter(a1, v2);
}

uint64_t sub_1004502AC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  uint64_t v5 = sub_10040A2B0( &qword_1009B9F70,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A150);
  return static PersistentModel.== infix(_:_:)(v3, v4, v2, v5);
}

uint64_t sub_100450300(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10044FFD0(a1, a2, a3, (void (*)(uint64_t))sub_100445418);
}

uint64_t sub_10045030C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + 16;
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return sub_100401ACC(v3, a1);
}

uint64_t sub_100450358(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10040A2B0( &qword_1009B9F88,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDPublicIdentity,  (uint64_t)&unk_10071A26C);
  return PersistentModel.hash(into:)(a1, a2, v4);
}

uint64_t sub_1004503B0(uint64_t a1)
{
  uint64_t v2 = sub_10040A2B0( &qword_1009B9F88,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDPublicIdentity,  (uint64_t)&unk_10071A26C);
  return PersistentModel.id.getter(a1, v2);
}

uint64_t sub_100450408(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  uint64_t v5 = sub_10040A2B0( &qword_1009B9F88,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDPublicIdentity,  (uint64_t)&unk_10071A26C);
  return static PersistentModel.== infix(_:_:)(v3, v4, v2, v5);
}

uint64_t sub_10045045C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10044FFD0(a1, a2, a3, (void (*)(uint64_t))sub_1004460E0);
}

uint64_t sub_10045046C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10040A2B0( &qword_1009B9FA0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDShortHandle,  (uint64_t)&unk_10071A388);
  return PersistentModel.hash(into:)(a1, a2, v4);
}

uint64_t sub_1004504C4(uint64_t a1)
{
  uint64_t v2 = sub_10040A2B0( &qword_1009B9FA0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDShortHandle,  (uint64_t)&unk_10071A388);
  return PersistentModel.id.getter(a1, v2);
}

uint64_t sub_10045051C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  uint64_t v5 = sub_10040A2B0( &qword_1009B9FA0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDShortHandle,  (uint64_t)&unk_10071A388);
  return static PersistentModel.== infix(_:_:)(v3, v4, v2, v5);
}

uint64_t sub_100450570(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10044FFD0(a1, a2, a3, (void (*)(uint64_t))sub_100449AE4);
}

uint64_t sub_100450580(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10040A2B0( &qword_1009B9FC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A4A4);
  return PersistentModel.hash(into:)(a1, a2, v4);
}

uint64_t sub_1004505D8(uint64_t a1)
{
  uint64_t v2 = sub_10040A2B0( &qword_1009B9FC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A4A4);
  return PersistentModel.id.getter(a1, v2);
}

uint64_t sub_100450630(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  uint64_t v5 = sub_10040A2B0( &qword_1009B9FC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A4A4);
  return static PersistentModel.== infix(_:_:)(v3, v4, v2, v5);
}

uint64_t sub_100450688(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10040A2B0( &qword_1009B9FE0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSGroupEncryptionKeyRollIndex,  (uint64_t)&unk_10071A5C0);
  return PersistentModel.hash(into:)(a1, a2, v4);
}

uint64_t sub_1004506E0(uint64_t a1)
{
  uint64_t v2 = sub_10040A2B0( &qword_1009B9FE0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSGroupEncryptionKeyRollIndex,  (uint64_t)&unk_10071A5C0);
  return PersistentModel.id.getter(a1, v2);
}

uint64_t sub_100450738(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  uint64_t v5 = sub_10040A2B0( &qword_1009B9FE0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSGroupEncryptionKeyRollIndex,  (uint64_t)&unk_10071A5C0);
  return static PersistentModel.== infix(_:_:)(v3, v4, v2, v5);
}

uint64_t sub_10045078C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10044FFD0(a1, a2, a3, (void (*)(uint64_t))sub_10044B58C);
}

uint64_t sub_10045079C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10040A2B0( (unint64_t *)&unk_1009BC920,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSOffGridDeliveryDonatedHandle,  (uint64_t)&unk_10071A6DC);
  return PersistentModel.hash(into:)(a1, a2, v4);
}

uint64_t sub_1004507F4(uint64_t a1)
{
  uint64_t v2 = sub_10040A2B0( (unint64_t *)&unk_1009BC920,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSOffGridDeliveryDonatedHandle,  (uint64_t)&unk_10071A6DC);
  return PersistentModel.id.getter(a1, v2);
}

uint64_t sub_10045084C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  uint64_t v5 = sub_10040A2B0( (unint64_t *)&unk_1009BC920,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSOffGridDeliveryDonatedHandle,  (uint64_t)&unk_10071A6DC);
  return static PersistentModel.== infix(_:_:)(v3, v4, v2, v5);
}

uint64_t sub_1004508A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10044FFD0(a1, a2, a3, (void (*)(uint64_t))sub_10044D4C4);
}

uint64_t sub_1004508AC(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, void *))
{
  uint64_t v7 = (void *)(v4 + 24);
  swift_beginAccess(v7, v9, 33LL, 0LL);
  sub_10040A648(v7);
  a4(a1, v7);
  return swift_endAccess(v9);
}

uint64_t sub_100450914(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10040A2B0( &qword_1009BC540,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSRegistrationEvent,  (uint64_t)&unk_10071A7F8);
  return PersistentModel.hash(into:)(a1, a2, v4);
}

uint64_t sub_10045096C(uint64_t a1)
{
  uint64_t v2 = sub_10040A2B0( &qword_1009BC540,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSRegistrationEvent,  (uint64_t)&unk_10071A7F8);
  return PersistentModel.id.getter(a1, v2);
}

uint64_t sub_1004509C4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  uint64_t v5 = sub_10040A2B0( &qword_1009BC540,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSRegistrationEvent,  (uint64_t)&unk_10071A7F8);
  return static PersistentModel.== infix(_:_:)(v3, v4, v2, v5);
}

uint64_t sub_100450A18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10044FFD0(a1, a2, a3, (void (*)(uint64_t))sub_10044FC44);
}

uint64_t sub_100450A24(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, void *))
{
  uint64_t v7 = (void *)(v4 + 16);
  swift_beginAccess(v7, v9, 33LL, 0LL);
  sub_10040A648(v7);
  a4(a1, v7);
  return swift_endAccess(v9);
}

Swift::Int sub_100450A8C(uint64_t a1, uint64_t a2)
{
  v6[9] = *v2;
  Hasher.init(_seed:)(v6, 0LL);
  dispatch thunk of Hashable.hash(into:)(v6, a1, a2);
  return Hasher._finalize()();
}

uint64_t sub_100450AEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10040A2B0( &qword_1009BC4D0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071A914);
  return PersistentModel.hash(into:)(a1, a2, v4);
}

Swift::Int sub_100450B44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v7[9] = *v3;
  Hasher.init(_seed:)(v7, a1);
  dispatch thunk of Hashable.hash(into:)(v7, a2, a3);
  return Hasher._finalize()();
}

uint64_t sub_100450BA0(uint64_t a1)
{
  uint64_t v2 = sub_10040A2B0( &qword_1009BC4D0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071A914);
  return PersistentModel.id.getter(a1, v2);
}

uint64_t sub_100450BF8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  uint64_t v5 = sub_10040A2B0( &qword_1009BC4D0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071A914);
  return static PersistentModel.== infix(_:_:)(v3, v4, v2, v5);
}

void sub_100450C4C(uint64_t a1, uint64_t a2)
{
  v3[3] = &type metadata for Data;
  v3[4] = &protocol witness table for Data;
  v3[0] = a1;
  v3[1] = a2;
  uint64_t v2 = (char *)&loc_100450CB0 + dword_100450E54[sub_10040A238(v3, (uint64_t)&type metadata for Data)[1] >> 62];
  __asm { BR              X10 }

uint64_t sub_100450CC0()
{
  uint64_t v5 = v2;
  __int16 v6 = v3;
  char v7 = BYTE2(v3);
  char v8 = BYTE3(v3);
  char v9 = BYTE4(v3);
  char v10 = BYTE5(v3);
  sub_1004028CC(v1, v0);
  Data._Representation.append(contentsOf:)(&v5, (char *)&v5 + BYTE6(v3));
  return sub_10040A648(&v11);
}

uint64_t sub_100450E64(uint64_t a1, uint64_t a2)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v5 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }

    v5 += a1 - result;
  }

  BOOL v6 = __OFSUB__(a2, a1);
  uint64_t v7 = a2 - a1;
  if (v6)
  {
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v8 = __DataStorage._length.getter();
  if (v8 >= v7) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = v8;
  }
  uint64_t v10 = v5 + v9;
  if (v5) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0LL;
  }
  return Data._Representation.append(contentsOf:)(v5, v11);
}

uint64_t sub_100450EF4()
{
  uint64_t v0 = sub_1003F5CB4(&qword_1009BCEF0);
  uint64_t v1 = swift_allocObject(v0, 192LL, 7LL);
  *(_OWORD *)(v1 + 16) = xmmword_100719100;
  uint64_t v2 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice(0LL);
  uint64_t v3 = sub_10040A2B0( (unint64_t *)&unk_1009BC900,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A034);
  *(void *)(v1 + 3sub_10040A648(v1 + 2) = v2;
  *(void *)(v1 + 40) = v3;
  uint64_t v4 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable(0LL);
  uint64_t v5 = sub_10040A2B0( &qword_1009BC840,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable,  (uint64_t)&unk_100719F18);
  *(void *)(v1 + 48) = v4;
  *(void *)(v1 + 56) = v5;
  uint64_t v6 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession(0LL);
  uint64_t v7 = sub_10040A2B0( &qword_1009B9F70,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A150);
  *(void *)(v1 + 64) = v6;
  *(void *)(v1 + 7sub_10040A648(v1 + 2) = v7;
  uint64_t v8 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDPublicIdentity(0LL);
  uint64_t v9 = sub_10040A2B0( &qword_1009B9F88,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDPublicIdentity,  (uint64_t)&unk_10071A26C);
  *(void *)(v1 + 80) = v8;
  *(void *)(v1 + 88) = v9;
  uint64_t v10 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution(0LL);
  uint64_t v11 = sub_10040A2B0( &qword_1009B9FC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A4A4);
  *(void *)(v1 + 96) = v10;
  *(void *)(v1 + 104) = v11;
  uint64_t v12 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSGroupEncryptionKeyRollIndex(0LL);
  uint64_t v13 = sub_10040A2B0( &qword_1009B9FE0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSGroupEncryptionKeyRollIndex,  (uint64_t)&unk_10071A5C0);
  *(void *)(v1 + 11sub_10040A648(v1 + 2) = v12;
  *(void *)(v1 + 120) = v13;
  uint64_t v14 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDShortHandle(0LL);
  uint64_t v15 = sub_10040A2B0( &qword_1009B9FA0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDShortHandle,  (uint64_t)&unk_10071A388);
  *(void *)(v1 + 128) = v14;
  *(void *)(v1 + 136) = v15;
  uint64_t v16 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSOffGridDeliveryDonatedHandle(0LL);
  uint64_t v17 = sub_10040A2B0( (unint64_t *)&unk_1009BC920,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSOffGridDeliveryDonatedHandle,  (uint64_t)&unk_10071A6DC);
  *(void *)(v1 + 144) = v16;
  *(void *)(v1 + 15sub_10040A648(v1 + 2) = v17;
  uint64_t v18 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSRegistrationEvent(0LL);
  uint64_t v19 = sub_10040A2B0( &qword_1009BC540,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSRegistrationEvent,  (uint64_t)&unk_10071A7F8);
  *(void *)(v1 + 160) = v18;
  *(void *)(v1 + 168) = v19;
  uint64_t v20 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount(0LL);
  uint64_t v21 = sub_10040A2B0( &qword_1009BC4D0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071A914);
  *(void *)(v1 + 176) = v20;
  *(void *)(v1 + 184) = v21;
  return v1;
}

uint64_t type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable( uint64_t a1)
{
  return sub_100402020( a1,  qword_1009C3BA0,  (uint64_t)&nominal type descriptor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable);
}

uint64_t sub_100451104()
{
  return sub_10044D8CC( v0[2],  v0[3],  v0[4],  (uint64_t)&unk_1007191C0,  &qword_1009BC840,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable,  (uint64_t)&unk_100719F18);
}

uint64_t sub_100451150()
{
  return sub_10044D8CC( v0[2],  v0[3],  v0[4],  (uint64_t)&unk_1007191E8,  &qword_1009BC840,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable,  (uint64_t)&unk_100719F18);
}

uint64_t sub_10045119C(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = sub_100401A88(&qword_1009B9A38);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_1004511FC()
{
  return sub_10044CDCC( v0[2],  v0[3],  v0[4],  (uint64_t)&unk_100719210,  &qword_1009BC840,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable,  (uint64_t)&unk_100719F18);
}

uint64_t sub_100451248()
{
  return sub_10044CDCC( v0[2],  v0[3],  v0[4],  (uint64_t)&unk_100719238,  &qword_1009BC840,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable,  (uint64_t)&unk_100719F18);
}

unint64_t sub_100451294()
{
  unint64_t result = qword_1009BC680;
  if (!qword_1009BC680)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_1009BC680);
  }

  return result;
}

uint64_t sub_1004512D8(unint64_t *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = sub_100401A88(&qword_1009B9EE0);
    a2();
    uint64_t result = swift_getWitnessTable(a3, v7);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_100451340()
{
  unint64_t result = qword_1009BC670;
  if (!qword_1009BC670)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_1009BC670);
  }

  return result;
}

uint64_t sub_100451384()
{
  return sub_10043F4C4( v0[2],  v0[3],  v0[4],  (uint64_t)&unk_100719260,  &qword_1009BC840,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable,  (uint64_t)&unk_100719F18);
}

uint64_t type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice( uint64_t a1)
{
  return sub_100402020( a1,  (uint64_t *)&unk_1009C3BB8,  (uint64_t)&nominal type descriptor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice);
}

unint64_t sub_1004513E4()
{
  unint64_t result = qword_1009B9F00;
  if (!qword_1009B9F00)
  {
    uint64_t v1 = sub_100401A88(&qword_1009B9EF8);
    sub_1004021DC(&qword_1009B9F08, &qword_1009B9F10);
    sub_10040A2B0( (unint64_t *)&unk_1009BC900,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A034);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1009B9F00);
  }

  return result;
}

uint64_t sub_100451478()
{
  return sub_10043F8C0(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void *sub_1004514A0( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9)
{
  uint64_t v10 = v9;
  *(void *)&__int128 v59 = a7;
  *((void *)&v59 + 1) = a8;
  *(void *)&__int128 v58 = a5;
  *((void *)&v58 + 1) = a6;
  uint64_t v12 = *v9;
  v10[6] = sub_1003F5CB4(&qword_1009B9F18);
  uint64_t v13 = sub_10040A2B0( &qword_1009BC840,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable,  (uint64_t)&unk_100719F18);
  uint64_t v63 = v12;
  uint64_t v64 = v12;
  uint64_t v65 = v13;
  uint64_t v66 = v13;
  v10[7] = swift_getOpaqueTypeConformance2( &v63,  &opaque type descriptor for <<opaque return type of static PersistentModel.createBackingData<A>()>>,  1LL);
  sub_10040B2A8(v10 + 3);
  static PersistentModel.createBackingData<A>()(v12, v12, v13, v13);
  sub_100401ACC((uint64_t)(v10 + 3), (uint64_t)&v63);
  uint64_t v14 = v66;
  uint64_t v15 = v67;
  sub_10040A238(&v63, v66);
  uint64_t KeyPath = swift_getKeyPath(&unk_100719210);
  __int128 v62 = 0uLL;
  uint64_t v17 = sub_1003F5CB4(&qword_1009B9A38);
  uint64_t v53 = sub_10045119C( &qword_1009B9ED0,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <A> A?);
  uint64_t v54 = v17;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(KeyPath, &v62, v17, v53, v14, v15);
  swift_release(KeyPath);
  sub_10040A648(&v63);
  *((_BYTE *)v10 + 16) = 0;
  sub_100401ACC((uint64_t)(v10 + 3), (uint64_t)&v63);
  uint64_t v18 = v66;
  uint64_t v19 = v67;
  sub_10040A238(&v63, v66);
  uint64_t v20 = swift_getKeyPath(&unk_100719238);
  __int128 v62 = 0uLL;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v20, &v62, v17, v53, v18, v19);
  swift_release(v20);
  sub_10040A648(&v63);
  *((_BYTE *)v10 + 17) = 0;
  sub_100401ACC((uint64_t)(v10 + 3), (uint64_t)&v63);
  uint64_t v21 = v66;
  uint64_t v22 = v67;
  sub_10040A238(&v63, v66);
  uint64_t v23 = swift_getKeyPath(&unk_100719260);
  __int128 v62 = xmmword_1007190F0;
  uint64_t v56 = sub_1003F5CB4(&qword_1009B9EE0);
  uint64_t v55 = sub_1004512D8( &qword_1009B9EE8,  (void (*)(void))sub_100451294,  (uint64_t)&protocol conformance descriptor for <A> A?);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v23, &v62, v56, v55, v21, v22);
  swift_release(v23);
  sub_10040A648(&v63);
  *((_BYTE *)v10 + 18) = 0;
  sub_100401ACC((uint64_t)(v10 + 3), (uint64_t)&v63);
  uint64_t v24 = v66;
  uint64_t v25 = v67;
  sub_10040A238(&v63, v66);
  uint64_t v26 = swift_getKeyPath(&unk_100719288);
  *(void *)&__int128 v62 = _swiftEmptyArrayStorage;
  uint64_t v27 = sub_1003F5CB4(&qword_1009B9EF8);
  uint64_t v28 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice(0LL);
  unint64_t v29 = sub_1004513E4();
  dispatch thunk of BackingData.setValue<A, B>(forKey:to:)(v26, &v62, v27, v28, v29, v24, v25);
  swift_release(v26);
  uint64_t v30 = sub_10040A648(&v63);
  *((_BYTE *)v10 + 19) = 0;
  ObservationRegistrar.init()(v30);
  sub_100401ACC((uint64_t)(v10 + 3), (uint64_t)&v63);
  uint64_t v31 = v66;
  uint64_t v32 = v67;
  sub_10040A238(&v63, v66);
  uint64_t v33 = swift_getKeyPath(&unk_1007191C0);
  *(void *)&__int128 v62 = a1;
  *((void *)&v62 + 1) = a2;
  swift_bridgeObjectRetain(a2);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)( v33,  &v62,  &type metadata for String,  &protocol witness table for String,  v31,  v32);
  swift_bridgeObjectRelease(a2);
  swift_release(v33);
  sub_10040A648(&v63);
  sub_100401ACC((uint64_t)(v10 + 3), (uint64_t)&v63);
  uint64_t v34 = v66;
  uint64_t v35 = v67;
  sub_10040A238(&v63, v66);
  uint64_t v36 = swift_getKeyPath(&unk_1007191E8);
  *(void *)&__int128 v62 = a3;
  *((void *)&v62 + 1) = a4;
  swift_bridgeObjectRetain(a4);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)( v36,  &v62,  &type metadata for String,  &protocol witness table for String,  v34,  v35);
  swift_bridgeObjectRelease(a4);
  swift_release(v36);
  sub_10040A648(&v63);
  sub_100401ACC((uint64_t)(v10 + 3), (uint64_t)&v63);
  uint64_t v37 = v66;
  uint64_t v38 = v67;
  sub_10040A238(&v63, v66);
  uint64_t v39 = swift_getKeyPath(&unk_100719210);
  __int128 v62 = v58;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v39, &v62, v54, v53, v37, v38);
  swift_release(v39);
  swift_bridgeObjectRelease(*((void *)&v58 + 1));
  sub_10040A648(&v63);
  *((_BYTE *)v10 + 16) = 0;
  sub_100401ACC((uint64_t)(v10 + 3), (uint64_t)&v63);
  uint64_t v40 = v66;
  uint64_t v41 = v67;
  sub_10040A238(&v63, v66);
  uint64_t v42 = swift_getKeyPath(&unk_100719238);
  __int128 v62 = v59;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v42, &v62, v54, v53, v40, v41);
  swift_release(v42);
  swift_bridgeObjectRelease(*((void *)&v59 + 1));
  sub_10040A648(&v63);
  *((_BYTE *)v10 + 17) = 0;
  sub_100401ACC((uint64_t)(v10 + 3), (uint64_t)&v63);
  uint64_t v43 = v66;
  uint64_t v44 = v67;
  sub_10040A238(&v63, v66);
  uint64_t v45 = swift_getKeyPath(&unk_100719260);
  __int128 v62 = a9;
  sub_100439780(a9, *((unint64_t *)&a9 + 1));
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v45, &v62, v56, v55, v43, v44);
  swift_release(v45);
  sub_10040AD00(a9, *((unint64_t *)&a9 + 1));
  sub_10040A648(&v63);
  *((_BYTE *)v10 + 18) = 0;
  uint64_t v63 = a1;
  uint64_t v64 = a2;
  swift_bridgeObjectRetain(a2);
  v46._countAndFlagsBits = a3;
  v46._object = a4;
  String.append(_:)(v46);
  swift_bridgeObjectRelease(a4);
  swift_bridgeObjectRelease(a2);
  uint64_t v48 = v63;
  uint64_t v47 = v64;
  sub_100401ACC((uint64_t)(v10 + 3), (uint64_t)&v63);
  uint64_t v49 = v66;
  uint64_t v50 = v67;
  sub_10040A238(&v63, v66);
  uint64_t v51 = swift_getKeyPath(&unk_100719198);
  *(void *)&__int128 v62 = v48;
  *((void *)&v62 + 1) = v47;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)( v51,  &v62,  &type metadata for String,  &protocol witness table for String,  v49,  v50);
  swift_bridgeObjectRelease(v47);
  swift_release(v51);
  sub_10040A648(&v63);
  return v10;
}

uint64_t sub_100451AB8()
{
  uint64_t v0 = type metadata accessor for Schema.Relationship.DeleteRule(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v2, v3);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_1003F5CB4(&qword_1009BAA80);
  uint64_t v7 = *(void *)(type metadata accessor for Schema.PropertyMetadata(0LL) - 8);
  uint64_t v8 = swift_allocObject( v6,  ((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
       - *(void *)(v7 + 72)
       + 8LL * *(void *)(v7 + 72),
         *(unsigned __int8 *)(v7 + 80) | 7LL);
  *(_OWORD *)(v8 + 16) = xmmword_100719110;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719198);
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  uint64_t v10 = sub_1003F5CB4(&qword_1009BAA88);
  uint64_t v11 = type metadata accessor for Schema.Attribute.Option(0LL);
  uint64_t v12 = swift_allocObject( v10,  ((*(unsigned __int8 *)(*(void *)(v11 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v11 - 8) + 80LL))
        + *(void *)(*(void *)(v11 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v11 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v12 + 16) = xmmword_1007184C0;
  static Schema.Attribute.Option.unique.getter();
  uint64_t v13 = type metadata accessor for Schema.Attribute(0LL);
  swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  uint64_t v14 = Schema.Attribute.init(_:originalName:hashModifier:)(v12, 0LL, 0LL, 0LL, 0LL);
  *((void *)&v25 + 1) = v13;
  uint64_t v26 = sub_10040A2B0( &qword_1009BAA90,  (uint64_t (*)(uint64_t))&type metadata accessor for Schema.Attribute,  (uint64_t)&protocol conformance descriptor for Schema.Attribute);
  *(void *)&__int128 v24 = v14;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0x5565636976726573LL,  0xEA00000000004952LL,  KeyPath,  &v27,  &v24);
  uint64_t v15 = swift_getKeyPath(&unk_1007191C0);
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  uint64_t v26 = 0LL;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0x65636976726573LL,  0xE700000000000000LL,  v15,  &v27,  &v24);
  uint64_t v16 = swift_getKeyPath(&unk_1007191E8);
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  uint64_t v26 = 0LL;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(6910581LL, 0xE300000000000000LL, v16, &v27, &v24);
  uint64_t v17 = swift_getKeyPath(&unk_100719210);
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  uint64_t v26 = 0LL;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0xD00000000000001BLL,  0x80000001008408C0LL,  v17,  &v27,  &v24);
  uint64_t v18 = swift_getKeyPath(&unk_100719238);
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  uint64_t v26 = 0LL;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0x6E614874726F6873LL,  0xEB00000000656C64LL,  v18,  &v27,  &v24);
  uint64_t v19 = swift_getKeyPath(&unk_100719260);
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  uint64_t v26 = 0LL;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0x7865746E6F43746BLL,  0xED00006174614474LL,  v19,  &v27,  &v24);
  uint64_t v20 = swift_getKeyPath(&unk_100719288);
  *((void *)&v28 + 1) = sub_1003F5CB4(&qword_1009BAAA0);
  *(void *)&__int128 v27 = &_swiftEmptyArrayStorage;
  (*(void (**)(char *, void, uint64_t))(v1 + 104))( v5,  enum case for Schema.Relationship.DeleteRule.nullify(_:),  v0);
  uint64_t v21 = type metadata accessor for Schema.Relationship(0LL);
  swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  uint64_t v22 = Schema.Relationship.init(_:deleteRule:minimumModelCount:maximumModelCount:originalName:inverse:hashModifier:)( &_swiftEmptyArrayStorage,  v5,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL);
  *((void *)&v25 + 1) = v21;
  uint64_t v26 = sub_10040A2B0( &qword_1009BAAA8,  (uint64_t (*)(uint64_t))&type metadata accessor for Schema.Relationship,  (uint64_t)&protocol conformance descriptor for Schema.Relationship);
  *(void *)&__int128 v24 = v22;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0x73656369766564LL,  0xE700000000000000LL,  v20,  &v27,  &v24);
  return v8;
}

uint64_t sub_100451F08()
{
  return sub_10044D8CC( v0[2],  v0[3],  v0[4],  (uint64_t)&unk_1007192D8,  (unint64_t *)&unk_1009BC900,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A034);
}

uint64_t sub_100451F54()
{
  return sub_100447794( v0[2],  v0[3],  v0[4],  (uint64_t)&unk_100719300,  (unint64_t *)&unk_1009BC900,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A034);
}

uint64_t sub_100451FA0()
{
  return sub_100447794( v0[2],  v0[3],  v0[4],  (uint64_t)&unk_100719328,  (unint64_t *)&unk_1009BC900,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A034);
}

uint64_t sub_100451FEC()
{
  return sub_100448758( *(void *)(v0 + 16),  *(_BYTE *)(v0 + 24),  (uint64_t)&unk_100719350,  (unint64_t *)&unk_1009BC900,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A034);
}

uint64_t sub_100452038()
{
  return sub_100448758( *(void *)(v0 + 16),  *(_BYTE *)(v0 + 24),  (uint64_t)&unk_100719378,  (unint64_t *)&unk_1009BC900,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A034);
}

uint64_t sub_100452084()
{
  return sub_10044CDCC( v0[2],  v0[3],  v0[4],  (uint64_t)&unk_1007193A0,  (unint64_t *)&unk_1009BC900,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A034);
}

uint64_t sub_1004520D0()
{
  return sub_100448758( *(void *)(v0 + 16),  *(_BYTE *)(v0 + 24),  (uint64_t)&unk_1007193C8,  (unint64_t *)&unk_1009BC900,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A034);
}

uint64_t sub_10045211C()
{
  return sub_10043F4C4( v0[2],  v0[3],  v0[4],  (uint64_t)&unk_1007193F0,  (unint64_t *)&unk_1009BC900,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A034);
}

uint64_t sub_100452168()
{
  return sub_10043F4C4( v0[2],  v0[3],  v0[4],  (uint64_t)&unk_100719418,  (unint64_t *)&unk_1009BC900,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A034);
}

unint64_t sub_1004521B4()
{
  unint64_t result = qword_1009B9F28;
  if (!qword_1009B9F28)
  {
    unint64_t result = swift_getWitnessTable( &unk_100719E68,  &type metadata for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.DeviceIdentityContainer);
    atomic_store(result, (unint64_t *)&qword_1009B9F28);
  }

  return result;
}

unint64_t sub_1004521F8()
{
  unint64_t result = qword_1009B9F30;
  if (!qword_1009B9F30)
  {
    unint64_t result = swift_getWitnessTable( &unk_100719E40,  &type metadata for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.DeviceIdentityContainer);
    atomic_store(result, (unint64_t *)&qword_1009B9F30);
  }

  return result;
}

uint64_t sub_10045223C()
{
  return sub_100441840(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t *sub_100452264(uint64_t *a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[5];
  uint64_t v7 = a1[6];
  uint64_t v8 = a1[7];
  uint64_t v9 = a1[8];
  uint64_t v10 = a1[9];
  uint64_t v11 = a1[10];
  uint64_t v13 = a1[12];
  uint64_t v14 = a1[11];
  a2(*a1, a1[1]);
  a2(v4, v5);
  a2(v6, v7);
  a2(v8, v9);
  a2(v10, v11);
  a2(v14, v13);
  return a1;
}

unint64_t sub_100452310()
{
  unint64_t result = qword_1009B9F40;
  if (!qword_1009B9F40)
  {
    uint64_t v1 = sub_100401A88(&qword_1009B9F38);
    sub_1004021DC(&qword_1009B9F48, &qword_1009B9F50);
    sub_10040A2B0( &qword_1009BC840,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable,  (uint64_t)&unk_100719F18);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1009B9F40);
  }

  return result;
}

uint64_t sub_1004523A4()
{
  return sub_100441B80(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void *sub_1004523CC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, char a8, __int128 a9, char a10, __int128 a11, __int128 a12, __int128 *a13)
{
  uint64_t v14 = v13;
  *(void *)&__int128 v91 = a5;
  *((void *)&v91 + 1) = a6;
  *(void *)&__int128 v95 = a3;
  *((void *)&v95 + 1) = a4;
  uint64_t v15 = v13 + 3;
  uint64_t v16 = *v13;
  v14[6] = sub_1003F5CB4(&qword_1009B9F58);
  uint64_t v17 = sub_10040A2B0( (unint64_t *)&unk_1009BC900,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A034);
  *(void *)&__int128 v97 = v16;
  *((void *)&v97 + 1) = v16;
  *(void *)&__int128 v98 = v17;
  *((void *)&v98 + 1) = v17;
  v14[7] = swift_getOpaqueTypeConformance2( &v97,  &opaque type descriptor for <<opaque return type of static PersistentModel.createBackingData<A>()>>,  1LL);
  sub_10040B2A8(v15);
  static PersistentModel.createBackingData<A>()(v16, v16, v17, v17);
  sub_100401ACC((uint64_t)v15, (uint64_t)&v97);
  uint64_t v18 = *((void *)&v98 + 1);
  uint64_t v19 = v99;
  sub_10040A238(&v97, *((uint64_t *)&v98 + 1));
  uint64_t KeyPath = swift_getKeyPath(&unk_100719350);
  LOBYTE(v104) = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)( KeyPath,  &v104,  &type metadata for Bool,  &protocol witness table for Bool,  v18,  v19);
  swift_release(KeyPath);
  sub_10040A648(&v97);
  sub_100401ACC((uint64_t)v15, (uint64_t)&v97);
  uint64_t v21 = *((void *)&v98 + 1);
  uint64_t v22 = v99;
  sub_10040A238(&v97, *((uint64_t *)&v98 + 1));
  uint64_t v23 = swift_getKeyPath(&unk_100719378);
  LOBYTE(v104) = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)( v23,  &v104,  &type metadata for Bool,  &protocol witness table for Bool,  v21,  v22);
  swift_release(v23);
  sub_10040A648(&v97);
  sub_100401ACC((uint64_t)v15, (uint64_t)&v97);
  uint64_t v25 = *((void *)&v98 + 1);
  uint64_t v24 = v99;
  sub_10040A238(&v97, *((uint64_t *)&v98 + 1));
  uint64_t v26 = swift_getKeyPath(&unk_1007193A0);
  __int128 v104 = 0uLL;
  uint64_t v90 = sub_1003F5CB4(&qword_1009B9A38);
  uint64_t v89 = sub_10045119C( &qword_1009B9ED0,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <A> A?);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v26, &v104, v90, v89, v25, v24);
  swift_release(v26);
  sub_10040A648(&v97);
  *((_BYTE *)v14 + 16) = 0;
  sub_100401ACC((uint64_t)v15, (uint64_t)&v97);
  uint64_t v27 = *((void *)&v98 + 1);
  uint64_t v28 = v99;
  sub_10040A238(&v97, *((uint64_t *)&v98 + 1));
  uint64_t v29 = swift_getKeyPath(&unk_1007193C8);
  LOBYTE(v104) = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)( v29,  &v104,  &type metadata for Bool,  &protocol witness table for Bool,  v27,  v28);
  swift_release(v29);
  sub_10040A648(&v97);
  sub_100401ACC((uint64_t)v15, (uint64_t)&v97);
  uint64_t v30 = *((void *)&v98 + 1);
  uint64_t v31 = v99;
  sub_10040A238(&v97, *((uint64_t *)&v98 + 1));
  uint64_t v32 = swift_getKeyPath(&unk_1007193F0);
  __int128 v104 = xmmword_1007190F0;
  uint64_t v33 = sub_1003F5CB4(&qword_1009B9EE0);
  uint64_t v87 = sub_1004512D8( &qword_1009B9EE8,  (void (*)(void))sub_100451294,  (uint64_t)&protocol conformance descriptor for <A> A?);
  uint64_t v88 = v33;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v32, &v104, v33, v87, v30, v31);
  swift_release(v32);
  sub_10040A648(&v97);
  *((_BYTE *)v14 + 17) = 0;
  sub_100401ACC((uint64_t)v15, (uint64_t)&v97);
  uint64_t v34 = *((void *)&v98 + 1);
  uint64_t v35 = v99;
  sub_10040A238(&v97, *((uint64_t *)&v98 + 1));
  uint64_t v36 = swift_getKeyPath(&unk_100719418);
  __int128 v104 = xmmword_1007190F0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v36, &v104, v33, v87, v34, v35);
  swift_release(v36);
  sub_10040A648(&v97);
  *((_BYTE *)v14 + 18) = 0;
  sub_100401ACC((uint64_t)v15, (uint64_t)&v97);
  uint64_t v37 = *((void *)&v98 + 1);
  uint64_t v38 = v99;
  sub_10040A238(&v97, *((uint64_t *)&v98 + 1));
  uint64_t v39 = swift_getKeyPath(&unk_100719468);
  *(void *)&__int128 v104 = _swiftEmptyArrayStorage;
  uint64_t v40 = sub_1003F5CB4(&qword_1009B9F38);
  uint64_t v41 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable(0LL);
  unint64_t v42 = sub_100452310();
  dispatch thunk of BackingData.setValue<A, B>(forKey:to:)(v39, &v104, v40, v41, v42, v37, v38);
  swift_release(v39);
  uint64_t v43 = sub_10040A648(&v97);
  *((_BYTE *)v14 + 19) = 0;
  ObservationRegistrar.init()(v43);
  sub_100401ACC((uint64_t)v15, (uint64_t)&v97);
  uint64_t v44 = *((void *)&v98 + 1);
  uint64_t v45 = v99;
  sub_10040A238(&v97, *((uint64_t *)&v98 + 1));
  uint64_t v46 = swift_getKeyPath(&unk_1007192D8);
  *(void *)&__int128 v104 = a1;
  *((void *)&v104 + 1) = a2;
  swift_bridgeObjectRetain(a2);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)( v46,  &v104,  &type metadata for String,  &protocol witness table for String,  v44,  v45);
  swift_bridgeObjectRelease(a2);
  swift_release(v46);
  sub_10040A648(&v97);
  sub_100401ACC((uint64_t)v15, (uint64_t)&v97);
  uint64_t v47 = *((void *)&v98 + 1);
  uint64_t v48 = v99;
  sub_10040A238(&v97, *((uint64_t *)&v98 + 1));
  uint64_t v49 = swift_getKeyPath(&unk_100719300);
  __int128 v104 = v95;
  sub_1004028CC(v95, *((unint64_t *)&v95 + 1));
  unint64_t v86 = sub_100451294();
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v49, &v104, &type metadata for Data, v86, v47, v48);
  swift_release(v49);
  sub_100402A84(v95, *((unint64_t *)&v95 + 1));
  sub_10040A648(&v97);
  sub_100401ACC((uint64_t)v15, (uint64_t)&v97);
  uint64_t v50 = *((void *)&v98 + 1);
  uint64_t v51 = v99;
  sub_10040A238(&v97, *((uint64_t *)&v98 + 1));
  uint64_t v52 = swift_getKeyPath(&unk_100719328);
  __int128 v104 = v91;
  sub_1004028CC(v91, *((unint64_t *)&v91 + 1));
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v52, &v104, &type metadata for Data, v86, v50, v51);
  swift_release(v52);
  sub_100402A84(v91, *((unint64_t *)&v91 + 1));
  sub_10040A648(&v97);
  sub_100401ACC((uint64_t)v15, (uint64_t)&v97);
  uint64_t v53 = *((void *)&v98 + 1);
  uint64_t v54 = v99;
  sub_10040A238(&v97, *((uint64_t *)&v98 + 1));
  uint64_t v55 = swift_getKeyPath(&unk_100719350);
  LOBYTE(v104) = a7;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)( v55,  &v104,  &type metadata for Bool,  &protocol witness table for Bool,  v53,  v54);
  swift_release(v55);
  sub_10040A648(&v97);
  sub_100401ACC((uint64_t)v15, (uint64_t)&v97);
  uint64_t v56 = *((void *)&v98 + 1);
  uint64_t v57 = v99;
  sub_10040A238(&v97, *((uint64_t *)&v98 + 1));
  uint64_t v58 = swift_getKeyPath(&unk_100719378);
  LOBYTE(v104) = a8;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)( v58,  &v104,  &type metadata for Bool,  &protocol witness table for Bool,  v56,  v57);
  swift_release(v58);
  sub_10040A648(&v97);
  sub_100401ACC((uint64_t)v15, (uint64_t)&v97);
  uint64_t v59 = *((void *)&v98 + 1);
  uint64_t v60 = v99;
  sub_10040A238(&v97, *((uint64_t *)&v98 + 1));
  uint64_t v61 = swift_getKeyPath(&unk_1007193A0);
  __int128 v104 = a9;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v61, &v104, v90, v89, v59, v60);
  swift_release(v61);
  swift_bridgeObjectRelease(*((void *)&a9 + 1));
  sub_10040A648(&v97);
  *((_BYTE *)v14 + 16) = 0;
  sub_100401ACC((uint64_t)v15, (uint64_t)&v97);
  uint64_t v62 = *((void *)&v98 + 1);
  uint64_t v63 = v99;
  sub_10040A238(&v97, *((uint64_t *)&v98 + 1));
  uint64_t v64 = swift_getKeyPath(&unk_1007193C8);
  LOBYTE(v104) = a10;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)( v64,  &v104,  &type metadata for Bool,  &protocol witness table for Bool,  v62,  v63);
  swift_release(v64);
  sub_10040A648(&v97);
  sub_100401ACC((uint64_t)v15, (uint64_t)&v97);
  uint64_t v65 = *((void *)&v98 + 1);
  uint64_t v66 = v99;
  sub_10040A238(&v97, *((uint64_t *)&v98 + 1));
  uint64_t v67 = swift_getKeyPath(&unk_1007193F0);
  __int128 v104 = a11;
  sub_100439780(a11, *((unint64_t *)&a11 + 1));
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v67, &v104, v88, v87, v65, v66);
  swift_release(v67);
  sub_10040AD00(a11, *((unint64_t *)&a11 + 1));
  sub_10040A648(&v97);
  *((_BYTE *)v14 + 17) = 0;
  sub_100401ACC((uint64_t)v15, (uint64_t)&v97);
  uint64_t v68 = *((void *)&v98 + 1);
  uint64_t v69 = v99;
  sub_10040A238(&v97, *((uint64_t *)&v98 + 1));
  uint64_t v70 = swift_getKeyPath(&unk_100719418);
  __int128 v104 = a12;
  sub_100439780(a12, *((unint64_t *)&a12 + 1));
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v70, &v104, v88, v87, v68, v69);
  swift_release(v70);
  sub_10040AD00(a12, *((unint64_t *)&a12 + 1));
  sub_10040A648(&v97);
  *((_BYTE *)v14 + 18) = 0;
  sub_100401ACC((uint64_t)v15, (uint64_t)&v104);
  uint64_t v71 = v105;
  uint64_t v72 = v106;
  sub_10040A238(&v104, v105);
  uint64_t v73 = swift_getKeyPath(&unk_100719440);
  __int128 v74 = a13[5];
  __int128 v101 = a13[4];
  __int128 v102 = v74;
  uint64_t v103 = *((void *)a13 + 12);
  __int128 v75 = a13[1];
  __int128 v97 = *a13;
  __int128 v98 = v75;
  __int128 v76 = a13[3];
  __int128 v99 = a13[2];
  __int128 v100 = v76;
  sub_100452264((uint64_t *)a13, (void (*)(uint64_t, uint64_t))sub_100439780);
  unint64_t v77 = sub_1004521B4();
  dispatch thunk of BackingData.setValue<A>(forKey:to:)( v73,  &v97,  &type metadata for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.DeviceIdentityContainer,  v77,  v71,  v72);
  swift_release(v73);
  sub_100452264((uint64_t *)a13, (void (*)(uint64_t, uint64_t))sub_10040AD00);
  sub_10040A648(&v104);
  sub_10040AD34(a1, a2, v95, *((uint64_t *)&v95 + 1));
  uint64_t v79 = v78;
  unint64_t v81 = v80;
  swift_bridgeObjectRelease(a2);
  sub_100401ACC((uint64_t)v15, (uint64_t)&v97);
  uint64_t v82 = *((void *)&v98 + 1);
  uint64_t v83 = v99;
  sub_10040A238(&v97, *((uint64_t *)&v98 + 1));
  uint64_t v84 = swift_getKeyPath(&unk_1007192B0);
  *(void *)&__int128 v104 = v79;
  *((void *)&v104 + 1) = v81;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v84, &v104, &type metadata for Data, v86, v82, v83);
  swift_release(v84);
  sub_100402A84(v79, v81);
  sub_10040A648(&v97);
  return v14;
}

uint64_t sub_100452DA0()
{
  uint64_t v0 = type metadata accessor for Schema.Relationship.DeleteRule(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v2, v3);
  uint64_t v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_1003F5CB4(&qword_1009BAA80);
  uint64_t v7 = type metadata accessor for Schema.PropertyMetadata(0LL);
  uint64_t v8 = swift_allocObject( v6,  ((*(unsigned __int8 *)(*(void *)(v7 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v7 - 8) + 80LL))
       + 12LL * *(void *)(*(void *)(v7 - 8) + 72LL),
         *(unsigned __int8 *)(*(void *)(v7 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v8 + 16) = xmmword_100719120;
  uint64_t KeyPath = swift_getKeyPath(&unk_1007192B0);
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  uint64_t v10 = sub_1003F5CB4(&qword_1009BAA88);
  uint64_t v11 = type metadata accessor for Schema.Attribute.Option(0LL);
  uint64_t v12 = swift_allocObject( v10,  ((*(unsigned __int8 *)(*(void *)(v11 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v11 - 8) + 80LL))
        + *(void *)(*(void *)(v11 - 8) + 72LL),
          *(unsigned __int8 *)(*(void *)(v11 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v12 + 16) = xmmword_1007184C0;
  static Schema.Attribute.Option.unique.getter();
  uint64_t v13 = type metadata accessor for Schema.Attribute(0LL);
  swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  uint64_t v14 = Schema.Attribute.init(_:originalName:hashModifier:)(v12, 0LL, 0LL, 0LL, 0LL);
  *((void *)&v31 + 1) = v13;
  uint64_t v32 = sub_10040A2B0( &qword_1009BAA90,  (uint64_t (*)(uint64_t))&type metadata accessor for Schema.Attribute,  (uint64_t)&protocol conformance descriptor for Schema.Attribute);
  *(void *)&__int128 v30 = v14;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0xD000000000000010LL,  0x80000001008407E0LL,  KeyPath,  &v33,  &v30);
  uint64_t v15 = swift_getKeyPath(&unk_1007192D8);
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  uint64_t v32 = 0LL;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0x65636976726573LL,  0xE700000000000000LL,  v15,  &v33,  &v30);
  uint64_t v16 = swift_getKeyPath(&unk_100719300);
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  uint64_t v32 = 0LL;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0x656B6F5468737570LL,  0xE90000000000006ELL,  v16,  &v33,  &v30);
  uint64_t v17 = swift_getKeyPath(&unk_100719328);
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  uint64_t v32 = 0LL;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0xD000000000000010LL,  0x8000000100840800LL,  v17,  &v33,  &v30);
  uint64_t v18 = swift_getKeyPath(&unk_100719350);
  *((void *)&v34 + 1) = &type metadata for Bool;
  LOBYTE(v3sub_10040A648(v1 + 3) = 0;
  uint64_t v32 = 0LL;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0xD000000000000015LL,  0x8000000100840820LL,  v18,  &v33,  &v30);
  uint64_t v19 = swift_getKeyPath(&unk_100719378);
  *((void *)&v34 + 1) = &type metadata for Bool;
  LOBYTE(v3sub_10040A648(v1 + 3) = 0;
  uint64_t v32 = 0LL;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0x6C6261706143746BLL,  0xE900000000000065LL,  v19,  &v33,  &v30);
  uint64_t v20 = swift_getKeyPath(&unk_1007193A0);
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  uint64_t v32 = 0LL;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0xD000000000000012LL,  0x8000000100840840LL,  v20,  &v33,  &v30);
  uint64_t v21 = swift_getKeyPath(&unk_1007193C8);
  *((void *)&v34 + 1) = &type metadata for Bool;
  LOBYTE(v3sub_10040A648(v1 + 3) = 0;
  uint64_t v32 = 0LL;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0xD000000000000012LL,  0x8000000100840860LL,  v21,  &v33,  &v30);
  uint64_t v22 = swift_getKeyPath(&unk_1007193F0);
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  uint64_t v32 = 0LL;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0x746E6543656D6167LL,  0xEE00617461447265LL,  v22,  &v33,  &v30);
  uint64_t v23 = swift_getKeyPath(&unk_100719418);
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  uint64_t v32 = 0LL;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0xD000000000000012LL,  0x8000000100840880LL,  v23,  &v33,  &v30);
  uint64_t v24 = swift_getKeyPath(&unk_100719440);
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  uint64_t v32 = 0LL;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0xD000000000000017LL,  0x80000001008408A0LL,  v24,  &v33,  &v30);
  uint64_t v25 = swift_getKeyPath(&unk_100719468);
  *((void *)&v34 + 1) = sub_1003F5CB4(&qword_1009BAAA0);
  *(void *)&__int128 v33 = &_swiftEmptyArrayStorage;
  uint64_t v26 = swift_getKeyPath(&unk_100719288);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))( v5,  enum case for Schema.Relationship.DeleteRule.nullify(_:),  v0);
  uint64_t v27 = type metadata accessor for Schema.Relationship(0LL);
  swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
  uint64_t v28 = Schema.Relationship.init(_:deleteRule:minimumModelCount:maximumModelCount:originalName:inverse:hashModifier:)( &_swiftEmptyArrayStorage,  v5,  0LL,  0LL,  0LL,  0LL,  0LL,  0LL,  v26,  0LL,  0LL);
  *((void *)&v31 + 1) = v27;
  uint64_t v32 = sub_10040A2B0( &qword_1009BAAA8,  (uint64_t (*)(uint64_t))&type metadata accessor for Schema.Relationship,  (uint64_t)&protocol conformance descriptor for Schema.Relationship);
  *(void *)&__int128 v30 = v28;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0x6173736572646461LL,  0xEC00000073656C62LL,  v25,  &v33,  &v30);
  return v8;
}

BOOL sub_1004533BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (v5 >> 60 == 15)
  {
    if (v7 >> 60 != 15) {
      goto LABEL_10;
    }
  }

  else
  {
    if (v7 >> 60 == 15) {
      goto LABEL_10;
    }
    sub_100439780(*(void *)a1, v5);
    sub_100439780(v6, v7);
    sub_100410288(v4, v5);
    char v9 = v8;
    sub_10040AD00(v6, v7);
    sub_10040AD00(v4, v5);
    if ((v9 & 1) == 0) {
      return 0LL;
    }
  }

  uint64_t v4 = *(void *)(a1 + 16);
  unint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a2 + 16);
  unint64_t v7 = *(void *)(a2 + 24);
  if (v5 >> 60 == 15)
  {
    if (v7 >> 60 != 15) {
      goto LABEL_10;
    }
  }

  else
  {
    if (v7 >> 60 == 15) {
      goto LABEL_10;
    }
    sub_100439780(*(void *)(a1 + 16), *(void *)(a1 + 24));
    sub_100439780(v6, v7);
    sub_100410288(v4, v5);
    char v14 = v13;
    sub_10040AD00(v6, v7);
    sub_10040AD00(v4, v5);
    if ((v14 & 1) == 0) {
      return 0LL;
    }
  }

  if (*(unsigned __int16 *)(a1 + 32) != *(unsigned __int16 *)(a2 + 32)
    || *(unsigned __int8 *)(a1 + 34) != *(unsigned __int8 *)(a2 + 34))
  {
    return 0LL;
  }

  uint64_t v4 = *(void *)(a1 + 40);
  unint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a2 + 40);
  unint64_t v7 = *(void *)(a2 + 48);
  if (v5 >> 60 == 15)
  {
    if (v7 >> 60 != 15) {
      goto LABEL_10;
    }
  }

  else
  {
    if (v7 >> 60 == 15) {
      goto LABEL_10;
    }
    sub_100439780(*(void *)(a1 + 40), *(void *)(a1 + 48));
    sub_100439780(v6, v7);
    sub_100410288(v4, v5);
    char v16 = v15;
    sub_10040AD00(v6, v7);
    sub_10040AD00(v4, v5);
    if ((v16 & 1) == 0) {
      return 0LL;
    }
  }

  uint64_t v4 = *(void *)(a1 + 56);
  unint64_t v5 = *(void *)(a1 + 64);
  uint64_t v6 = *(void *)(a2 + 56);
  unint64_t v7 = *(void *)(a2 + 64);
  if (v5 >> 60 == 15)
  {
    if (v7 >> 60 != 15) {
      goto LABEL_10;
    }
  }

  else
  {
    if (v7 >> 60 == 15) {
      goto LABEL_10;
    }
    sub_100439780(*(void *)(a1 + 56), *(void *)(a1 + 64));
    sub_100439780(v6, v7);
    sub_100410288(v4, v5);
    char v18 = v17;
    sub_10040AD00(v6, v7);
    sub_10040AD00(v4, v5);
    if ((v18 & 1) == 0) {
      return 0LL;
    }
  }

  uint64_t v4 = *(void *)(a1 + 72);
  unint64_t v5 = *(void *)(a1 + 80);
  uint64_t v6 = *(void *)(a2 + 72);
  unint64_t v7 = *(void *)(a2 + 80);
  if (v5 >> 60 == 15)
  {
    if (v7 >> 60 == 15) {
      goto LABEL_31;
    }
LABEL_10:
    sub_100439780(v4, v5);
    sub_100439780(v6, v7);
    sub_10040AD00(v4, v5);
    uint64_t v10 = v6;
    unint64_t v11 = v7;
LABEL_11:
    sub_10040AD00(v10, v11);
    return 0LL;
  }

  if (v7 >> 60 == 15) {
    goto LABEL_10;
  }
  sub_100439780(*(void *)(a1 + 72), *(void *)(a1 + 80));
  sub_100439780(v6, v7);
  sub_100410288(v4, v5);
  char v20 = v19;
  sub_10040AD00(v6, v7);
  sub_10040AD00(v4, v5);
  if ((v20 & 1) == 0) {
    return 0LL;
  }
LABEL_31:
  uint64_t v22 = *(void *)(a1 + 88);
  unint64_t v21 = *(void *)(a1 + 96);
  uint64_t v24 = *(void *)(a2 + 88);
  unint64_t v23 = *(void *)(a2 + 96);
  if (v21 >> 60 == 15)
  {
    if (v23 >> 60 == 15) {
      return 1LL;
    }
LABEL_35:
    sub_100439780(v22, v21);
    sub_100439780(v24, v23);
    sub_10040AD00(v22, v21);
    uint64_t v10 = v24;
    unint64_t v11 = v23;
    goto LABEL_11;
  }

  if (v23 >> 60 == 15) {
    goto LABEL_35;
  }
  sub_100439780(v22, v21);
  sub_100439780(v24, v23);
  sub_100410288(v22, v21);
  char v26 = v25;
  sub_10040AD00(v24, v23);
  sub_10040AD00(v22, v21);
  return (v26 & 1) != 0;
}

unint64_t sub_100453764()
{
  unint64_t result = qword_1009C1DE8;
  if (!qword_1009C1DE8)
  {
    unint64_t result = swift_getWitnessTable( &unk_10071AFD0,  &type metadata for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.DeviceIdentityContainer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009C1DE8);
  }

  return result;
}

uint64_t sub_1004537A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1003F5CB4(&qword_1009B9EE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1004537F0(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x626167676F4C746BLL && a2 == 0xEE0061746144656CLL)
  {
    unint64_t v5 = 0xEE0061746144656CLL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x626167676F4C746BLL, 0xEE0061746144656CLL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0xD000000000000011LL && a2 == 0x80000001008404B0LL)
  {
    unint64_t v7 = 0x80000001008404B0LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x80000001008404B0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0x69737265566D676ELL && a2 == 0xED0000746E496E6FLL)
  {
    unint64_t v8 = 0xED0000746E496E6FLL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x69737265566D676ELL, 0xED0000746E496E6FLL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_20;
  }

  if (a1 == 0xD000000000000010LL && a2 == 0x80000001008404D0LL)
  {
    unint64_t v9 = 0x80000001008404D0LL;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x80000001008404D0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
    goto LABEL_26;
  }

  if (a1 == 0xD00000000000001ELL)
  {
    unint64_t v10 = 0x80000001008404F0LL;
    if (a2 == 0x80000001008404F0LL) {
      goto LABEL_31;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ELL, 0x80000001008404F0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4LL;
  }

  if (a1 == 0xD000000000000021LL && a2 == 0x8000000100840510LL)
  {
    unint64_t v11 = 0x8000000100840510LL;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000021LL, 0x8000000100840510LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v11 = a2;
    goto LABEL_37;
  }

  if (a1 == 0xD00000000000001FLL && a2 == 0x8000000100840540LL)
  {
    unint64_t v12 = 0x8000000100840540LL;
LABEL_43:
    swift_bridgeObjectRelease(v12);
    return 6LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001FLL, 0x8000000100840540LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v12 = a2;
    goto LABEL_43;
  }

  if (a1 == 0xD00000000000001ELL && a2 == 0x8000000100840560LL)
  {
    swift_bridgeObjectRelease(0x8000000100840560LL);
    return 7LL;
  }

  else
  {
    char v13 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ELL, 0x8000000100840560LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v13 & 1) != 0) {
      return 7LL;
    }
    else {
      return 8LL;
    }
  }

uint64_t sub_100453B44@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = sub_1003F5CB4(&qword_1009BAA98);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v7, v8);
  unint64_t v10 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  sub_10040A238(a1, v11);
  unint64_t v13 = sub_100453764();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.DeviceIdentityContainer.CodingKeys,  &type metadata for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.DeviceIdentityContainer.CodingKeys,  v13,  v11,  v12);
  uint64_t v63 = a1;
  if (v2)
  {
    uint64_t v62 = v2;
    uint64_t v64 = 0LL;
    sub_10040A648(v63);
    sub_10040AD00(0LL, 0xF000000000000000LL);
    sub_10040AD00(0LL, 0xF000000000000000LL);
    sub_10040AD00(0LL, 0xF000000000000000LL);
    sub_10040AD00(0LL, 0xF000000000000000LL);
    sub_10040AD00(v64, 0xF000000000000000LL);
    return sub_10040AD00(0LL, 0xF000000000000000LL);
  }

  else
  {
    uint64_t v61 = a2;
    char v68 = 0;
    unint64_t v14 = sub_100451340();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v65,  &type metadata for Data,  &v68,  v5,  &type metadata for Data,  v14);
    uint64_t v17 = v65;
    unint64_t v16 = v66;
    char v68 = 1;
    sub_100439780(v65, v66);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v65,  &type metadata for Data,  &v68,  v5,  &type metadata for Data,  v14);
    uint64_t v59 = v17;
    unint64_t v60 = v16;
    uint64_t v18 = v65;
    unint64_t v19 = v66;
    LOBYTE(v65) = 2;
    uint64_t v20 = v18;
    sub_100439780(v18, v66);
    int v21 = KeyedDecodingContainer.decode(_:forKey:)(&v65, v5);
    uint64_t v57 = v20;
    unint64_t v58 = v19;
    LOBYTE(v65) = 3;
    int v56 = KeyedDecodingContainer.decode(_:forKey:)(&v65, v5);
    int v67 = v21;
    char v68 = 4;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v65,  &type metadata for Data,  &v68,  v5,  &type metadata for Data,  v14);
    char v68 = 5;
    unint64_t v54 = v66;
    uint64_t v55 = v65;
    sub_100439780(v65, v66);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v65,  &type metadata for Data,  &v68,  v5,  &type metadata for Data,  v14);
    uint64_t v23 = v65;
    unint64_t v22 = v66;
    char v68 = 6;
    sub_100439780(v65, v66);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v65,  &type metadata for Data,  &v68,  v5,  &type metadata for Data,  v14);
    unint64_t v53 = v22;
    uint64_t v24 = v23;
    char v68 = 7;
    uint64_t v64 = v65;
    unint64_t v25 = v66;
    sub_100439780(v65, v66);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &v65,  &type metadata for Data,  &v68,  v5,  &type metadata for Data,  v14);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
    uint64_t v62 = 0LL;
    uint64_t v27 = v65;
    unint64_t v26 = v66;
    sub_100439780(v65, v66);
    sub_10040AD00(0LL, 0xF000000000000000LL);
    sub_100439780(v59, v60);
    unint64_t v28 = v58;
    sub_100439780(v57, v58);
    unint64_t v30 = v54;
    uint64_t v29 = v55;
    sub_100439780(v55, v54);
    uint64_t v31 = v24;
    uint64_t v32 = v24;
    uint64_t v50 = v24;
    unint64_t v33 = v53;
    sub_100439780(v32, v53);
    uint64_t v34 = v64;
    sub_100439780(v64, v25);
    unint64_t v51 = v26;
    uint64_t v52 = v27;
    sub_100439780(v27, v26);
    sub_10040AD00(v27, v26);
    sub_10040AD00(v34, v25);
    uint64_t v35 = v31;
    unint64_t v36 = v33;
    sub_10040AD00(v35, v33);
    unint64_t v37 = v30;
    sub_10040AD00(v29, v30);
    uint64_t v38 = v57;
    sub_10040AD00(v57, v28);
    uint64_t v39 = v59;
    unint64_t v40 = v60;
    sub_10040AD00(v59, v60);
    sub_10040A648(v63);
    sub_10040AD00(v39, v40);
    sub_10040AD00(v38, v28);
    sub_10040AD00(v29, v37);
    uint64_t v41 = v50;
    unint64_t v42 = v36;
    sub_10040AD00(v50, v36);
    unint64_t v43 = v25;
    sub_10040AD00(v34, v25);
    unint64_t v44 = v51;
    uint64_t v45 = v52;
    uint64_t result = sub_10040AD00(v52, v51);
    uint64_t v46 = v61;
    unint64_t v47 = v60;
    *uint64_t v61 = v59;
    v46[1] = v47;
    unint64_t v48 = v58;
    v46[2] = v38;
    v46[3] = v48;
    *((_WORD *)v46 + 16) = v67;
    *((_BYTE *)v46 + 34) = v56;
    v46[5] = v29;
    v46[6] = v37;
    v46[7] = v41;
    v46[8] = v42;
    v46[9] = v34;
    v46[10] = v43;
    v46[11] = v45;
    v46[12] = v44;
  }

  return result;
}

uint64_t type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession( uint64_t a1)
{
  return sub_100402020( a1,  (uint64_t *)&unk_1009C3BC8,  (uint64_t)&nominal type descriptor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession);
}

uint64_t sub_10045423C()
{
  return sub_10044D8CC( v0[2],  v0[3],  v0[4],  (uint64_t)&unk_1007194B8,  &qword_1009B9F70,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A150);
}

uint64_t sub_100454288()
{
  return sub_10044D8CC( v0[2],  v0[3],  v0[4],  (uint64_t)&unk_1007194E0,  &qword_1009B9F70,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A150);
}

uint64_t sub_1004542D4()
{
  return sub_10044D8CC( v0[2],  v0[3],  v0[4],  (uint64_t)&unk_100719508,  &qword_1009B9F70,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A150);
}

uint64_t sub_100454320()
{
  return sub_100447794( v0[2],  v0[3],  v0[4],  (uint64_t)&unk_100719530,  &qword_1009B9F70,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A150);
}

uint64_t sub_10045436C()
{
  return sub_100447794( v0[2],  v0[3],  v0[4],  (uint64_t)&unk_100719558,  &qword_1009B9F70,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A150);
}

uint64_t sub_1004543B8()
{
  return sub_10044C1F8( *(void *)(v0 + 16),  *(void *)(v0 + 24),  (uint64_t)&unk_100719580,  &qword_1009B9F70,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A150);
}

uint64_t sub_100454400()
{
  return sub_10044C1F8( *(void *)(v0 + 16),  *(void *)(v0 + 24),  (uint64_t)&unk_1007195A8,  &qword_1009B9F70,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A150);
}

uint64_t sub_100454448()
{
  return sub_100444004(*(double *)(v0 + 24));
}

uint64_t *sub_100454474( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, void *a6, uint64_t a7, unint64_t a8, double a9, uint64_t a10, unint64_t a11, char *a12, char *a13)
{
  uint64_t v86 = a7;
  uint64_t v87 = a6;
  uint64_t v90 = a3;
  uint64_t v91 = a5;
  uint64_t v88 = a4;
  uint64_t v89 = a2;
  uint64_t v84 = a1;
  v92 = a13;
  v93 = a12;
  unint64_t v82 = a11;
  uint64_t v81 = a10;
  uint64_t v17 = *v13;
  uint64_t v80 = type metadata accessor for Date(0LL);
  uint64_t v83 = *(void *)(v80 - 8);
  __chkstk_darwin(v18, v19);
  int v21 = (char *)&v78 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v13[5] = sub_1003F5CB4(&qword_1009B9F78);
  uint64_t v22 = sub_10040A2B0( &qword_1009B9F70,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A150);
  uint64_t v96 = v17;
  uint64_t v97 = v17;
  uint64_t v98 = v22;
  uint64_t v99 = v22;
  v13[6] = swift_getOpaqueTypeConformance2( &v96,  &opaque type descriptor for <<opaque return type of static PersistentModel.createBackingData<A>()>>,  1LL);
  v85 = v13;
  sub_10040B2A8(v13 + 2);
  static PersistentModel.createBackingData<A>()(v17, v17, v22, v22);
  sub_100401ACC((uint64_t)(v13 + 2), (uint64_t)&v96);
  uint64_t v23 = v99;
  uint64_t v24 = v100;
  sub_10040A238(&v96, v99);
  uint64_t KeyPath = swift_getKeyPath(&unk_1007195D0);
  uint64_t v94 = 0LL;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)( KeyPath,  &v94,  &type metadata for Double,  &protocol witness table for Double,  v23,  v24);
  swift_release(KeyPath);
  uint64_t v26 = sub_10040A648(&v96);
  ObservationRegistrar.init()(v26);
  sub_100401ACC((uint64_t)(v13 + 2), (uint64_t)&v96);
  uint64_t v28 = v99;
  uint64_t v27 = v100;
  sub_10040A238(&v96, v99);
  uint64_t v29 = swift_getKeyPath(&unk_1007194B8);
  uint64_t v94 = a1;
  uint64_t v30 = v89;
  unint64_t v95 = v89;
  swift_bridgeObjectRetain(v89);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)( v29,  &v94,  &type metadata for String,  &protocol witness table for String,  v28,  v27);
  swift_bridgeObjectRelease(v30);
  swift_release(v29);
  sub_10040A648(&v96);
  sub_100401ACC((uint64_t)(v13 + 2), (uint64_t)&v96);
  uint64_t v31 = v99;
  uint64_t v32 = v100;
  sub_10040A238(&v96, v99);
  uint64_t v33 = swift_getKeyPath(&unk_1007194E0);
  uint64_t v34 = v88;
  uint64_t v94 = v90;
  unint64_t v95 = (unint64_t)v88;
  swift_bridgeObjectRetain(v88);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)( v33,  &v94,  &type metadata for String,  &protocol witness table for String,  v31,  v32);
  swift_bridgeObjectRelease(v34);
  swift_release(v33);
  sub_10040A648(&v96);
  sub_100401ACC((uint64_t)(v13 + 2), (uint64_t)&v96);
  uint64_t v35 = v99;
  uint64_t v36 = v100;
  sub_10040A238(&v96, v99);
  uint64_t v37 = swift_getKeyPath(&unk_100719508);
  uint64_t v38 = v87;
  uint64_t v94 = v91;
  unint64_t v95 = (unint64_t)v87;
  swift_bridgeObjectRetain(v87);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)( v37,  &v94,  &type metadata for String,  &protocol witness table for String,  v35,  v36);
  swift_bridgeObjectRelease(v38);
  swift_release(v37);
  sub_10040A648(&v96);
  sub_100401ACC((uint64_t)(v13 + 2), (uint64_t)&v96);
  uint64_t v39 = v99;
  uint64_t v40 = v100;
  sub_10040A238(&v96, v99);
  uint64_t v41 = swift_getKeyPath(&unk_100719530);
  uint64_t v42 = v86;
  uint64_t v94 = v86;
  unint64_t v95 = a8;
  unint64_t v79 = a8;
  sub_1004028CC(v86, a8);
  unint64_t v43 = sub_100451294();
  unint64_t v78 = v43;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v41, &v94, &type metadata for Data, v43, v39, v40);
  swift_release(v41);
  sub_100402A84(v42, a8);
  sub_10040A648(&v96);
  sub_100401ACC((uint64_t)(v13 + 2), (uint64_t)&v96);
  uint64_t v44 = v99;
  uint64_t v45 = v100;
  sub_10040A238(&v96, v99);
  uint64_t v46 = swift_getKeyPath(&unk_100719558);
  uint64_t v47 = v81;
  unint64_t v48 = v82;
  uint64_t v94 = v81;
  unint64_t v95 = v82;
  sub_1004028CC(v81, v82);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v46, &v94, &type metadata for Data, v43, v44, v45);
  swift_release(v46);
  sub_100402A84(v47, v48);
  sub_10040A648(&v96);
  uint64_t v49 = v83;
  uint64_t v50 = *(void (**)(char *, uint64_t, uint64_t))(v83 + 16);
  uint64_t v51 = v80;
  v50(v21, (uint64_t)v93, v80);
  sub_100401ACC((uint64_t)(v13 + 2), (uint64_t)&v96);
  uint64_t v52 = v99;
  uint64_t v53 = v100;
  sub_10040A238(&v96, v99);
  uint64_t v54 = swift_getKeyPath(&unk_100719580);
  uint64_t v55 = sub_10040A2B0( &qword_1009BAD00,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v54, v21, v51, v55, v52, v53);
  swift_release(v54);
  int v56 = *(void (**)(char *, uint64_t))(v49 + 8);
  v56(v21, v51);
  sub_10040A648(&v96);
  v50(v21, (uint64_t)v92, v51);
  sub_100401ACC((uint64_t)(v13 + 2), (uint64_t)&v96);
  uint64_t v57 = v99;
  uint64_t v58 = v100;
  sub_10040A238(&v96, v99);
  uint64_t v59 = swift_getKeyPath(&unk_1007195A8);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v59, v21, v51, v55, v57, v58);
  swift_release(v59);
  v56(v21, v51);
  sub_10040A648(&v96);
  sub_100401ACC((uint64_t)(v13 + 2), (uint64_t)&v96);
  uint64_t v60 = v99;
  uint64_t v61 = v100;
  sub_10040A238(&v96, v99);
  uint64_t v62 = swift_getKeyPath(&unk_1007195D0);
  uint64_t v94 = *(void *)&a9;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)( v62,  &v94,  &type metadata for Double,  &protocol witness table for Double,  v60,  v61);
  swift_release(v62);
  sub_10040A648(&v96);
  uint64_t v63 = v89;
  uint64_t v96 = v84;
  uint64_t v97 = v89;
  swift_bridgeObjectRetain(v89);
  v64._countAndFlagsBits = v90;
  uint64_t v65 = v88;
  v64._object = v88;
  String.append(_:)(v64);
  swift_bridgeObjectRelease(v65);
  swift_bridgeObjectRelease(v63);
  uint64_t v66 = v97;
  swift_bridgeObjectRetain(v97);
  v67._countAndFlagsBits = v91;
  char v68 = v87;
  v67._object = v87;
  String.append(_:)(v67);
  swift_bridgeObjectRelease(v66);
  swift_bridgeObjectRelease(v68);
  uint64_t v69 = v97;
  sub_10040AD34(v96, v97, v86, v79);
  uint64_t v71 = v70;
  unint64_t v73 = v72;
  swift_bridgeObjectRelease(v69);
  sub_100401ACC((uint64_t)(v13 + 2), (uint64_t)&v96);
  uint64_t v74 = v99;
  uint64_t v75 = v100;
  sub_10040A238(&v96, v99);
  uint64_t v76 = swift_getKeyPath(&unk_100719490);
  uint64_t v94 = v71;
  unint64_t v95 = v73;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v76, &v94, &type metadata for Data, v78, v74, v75);
  swift_release(v76);
  sub_100402A84(v71, v73);
  sub_10040A648(&v96);
  v56(v92, v51);
  v56(v93, v51);
  return v85;
}

uint64_t sub_100454B6C()
{
  uint64_t v0 = sub_1003F5CB4(&qword_1009BAA80);
  uint64_t v1 = type metadata accessor for Schema.PropertyMetadata(0LL);
  uint64_t v2 = swift_allocObject( v0,  ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80LL))
       + 9LL * *(void *)(*(void *)(v1 - 8) + 72LL),
         *(unsigned __int8 *)(*(void *)(v1 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v2 + 16) = xmmword_100719130;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719490);
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  uint64_t v4 = sub_1003F5CB4(&qword_1009BAA88);
  uint64_t v5 = type metadata accessor for Schema.Attribute.Option(0LL);
  uint64_t v6 = swift_allocObject( v4,  ((*(unsigned __int8 *)(*(void *)(v5 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v5 - 8) + 80LL))
       + *(void *)(*(void *)(v5 - 8) + 72LL),
         *(unsigned __int8 *)(*(void *)(v5 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v6 + 16) = xmmword_1007184C0;
  static Schema.Attribute.Option.unique.getter();
  uint64_t v7 = type metadata accessor for Schema.Attribute(0LL);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  uint64_t v8 = Schema.Attribute.init(_:originalName:hashModifier:)(v6, 0LL, 0LL, 0LL, 0LL);
  *((void *)&v19 + 1) = v7;
  uint64_t v20 = sub_10040A2B0( &qword_1009BAA90,  (uint64_t (*)(uint64_t))&type metadata accessor for Schema.Attribute,  (uint64_t)&protocol conformance descriptor for Schema.Attribute);
  *(void *)&__int128 v18 = v8;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0xD000000000000012LL,  0x80000001008407A0LL,  KeyPath,  &v21,  &v18);
  uint64_t v9 = swift_getKeyPath(&unk_1007194B8);
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  uint64_t v20 = 0LL;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0x65636976726573LL,  0xE700000000000000LL,  v9,  &v21,  &v18);
  uint64_t v10 = swift_getKeyPath(&unk_1007194E0);
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  uint64_t v20 = 0LL;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0x4952556D6F7266LL,  0xE700000000000000LL,  v10,  &v21,  &v18);
  uint64_t v11 = swift_getKeyPath(&unk_100719508);
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  uint64_t v20 = 0LL;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0x4952556F74LL,  0xE500000000000000LL,  v11,  &v21,  &v18);
  uint64_t v12 = swift_getKeyPath(&unk_100719530);
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  uint64_t v20 = 0LL;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0x6E656B6F546F74LL,  0xE700000000000000LL,  v12,  &v21,  &v18);
  uint64_t v13 = swift_getKeyPath(&unk_100719558);
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  uint64_t v20 = 0LL;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0x546E6F6973736573LL,  0xEC0000006E656B6FLL,  v13,  &v21,  &v18);
  uint64_t v14 = swift_getKeyPath(&unk_100719580);
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  uint64_t v20 = 0LL;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0x6974617269707865LL,  0xEE00657461446E6FLL,  v14,  &v21,  &v18);
  uint64_t v15 = swift_getKeyPath(&unk_1007195A8);
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  uint64_t v20 = 0LL;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0x4468736572666572LL,  0xEB00000000657461LL,  v15,  &v21,  &v18);
  uint64_t v16 = swift_getKeyPath(&unk_1007195D0);
  *((void *)&v22 + 1) = &type metadata for Double;
  *(void *)&__int128 v21 = 0LL;
  uint64_t v20 = 0LL;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0xD000000000000011LL,  0x80000001008407C0LL,  v16,  &v21,  &v18);
  return v2;
}

uint64_t type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDPublicIdentity( uint64_t a1)
{
  return sub_100402020( a1,  (uint64_t *)&unk_1009C3BD8,  (uint64_t)&nominal type descriptor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDPublicIdentity);
}

uint64_t sub_100454F98()
{
  return sub_10044D8CC( v0[2],  v0[3],  v0[4],  (uint64_t)&unk_100719620,  &qword_1009B9F88,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDPublicIdentity,  (uint64_t)&unk_10071A26C);
}

uint64_t sub_100454FE4()
{
  return sub_100447794( v0[2],  v0[3],  v0[4],  (uint64_t)&unk_100719648,  &qword_1009B9F88,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDPublicIdentity,  (uint64_t)&unk_10071A26C);
}

uint64_t sub_100455030()
{
  return sub_10044D8CC( v0[2],  v0[3],  v0[4],  (uint64_t)&unk_100719670,  &qword_1009B9F88,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDPublicIdentity,  (uint64_t)&unk_10071A26C);
}

uint64_t sub_10045507C()
{
  return sub_100447794( v0[2],  v0[3],  v0[4],  (uint64_t)&unk_100719698,  &qword_1009B9F88,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDPublicIdentity,  (uint64_t)&unk_10071A26C);
}

uint64_t sub_1004550C8()
{
  return sub_10044C1F8( *(void *)(v0 + 16),  *(void *)(v0 + 24),  (uint64_t)&unk_1007196C0,  &qword_1009B9F88,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDPublicIdentity,  (uint64_t)&unk_10071A26C);
}

uint64_t *sub_100455110( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, void *a6, uint64_t a7, unint64_t a8)
{
  uint64_t v58 = a7;
  unint64_t v59 = a8;
  int v56 = a6;
  uint64_t v57 = a1;
  uint64_t v64 = a3;
  uint64_t v65 = a5;
  uint64_t v12 = *v8;
  uint64_t v61 = type metadata accessor for Date(0LL);
  uint64_t v63 = *(void *)(v61 - 8);
  __chkstk_darwin(v13, v14);
  uint64_t v60 = (char *)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = (uint64_t)(v8 + 2);
  v8[5] = sub_1003F5CB4(&qword_1009B9F90);
  uint64_t v62 = v8;
  uint64_t v17 = sub_10040A2B0( &qword_1009B9F88,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDPublicIdentity,  (uint64_t)&unk_10071A26C);
  uint64_t v68 = v12;
  uint64_t v69 = v12;
  uint64_t v70 = v17;
  uint64_t v71 = v17;
  v8[6] = swift_getOpaqueTypeConformance2( &v68,  &opaque type descriptor for <<opaque return type of static PersistentModel.createBackingData<A>()>>,  1LL);
  sub_10040B2A8(v8 + 2);
  uint64_t v18 = static PersistentModel.createBackingData<A>()(v12, v12, v17, v17);
  ObservationRegistrar.init()(v18);
  sub_100401ACC((uint64_t)(v8 + 2), (uint64_t)&v68);
  uint64_t v19 = v71;
  uint64_t v20 = v72;
  sub_10040A238(&v68, v71);
  uint64_t KeyPath = swift_getKeyPath(&unk_100719620);
  uint64_t v66 = a1;
  unint64_t v67 = a2;
  swift_bridgeObjectRetain(a2);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)( KeyPath,  &v66,  &type metadata for String,  &protocol witness table for String,  v19,  v20);
  swift_bridgeObjectRelease(a2);
  swift_release(KeyPath);
  sub_10040A648(&v68);
  sub_100401ACC((uint64_t)(v8 + 2), (uint64_t)&v68);
  uint64_t v22 = v71;
  uint64_t v23 = v72;
  sub_10040A238(&v68, v71);
  uint64_t v24 = swift_getKeyPath(&unk_100719648);
  uint64_t v25 = v64;
  uint64_t v66 = v64;
  unint64_t v67 = a4;
  unint64_t v26 = a4;
  unint64_t v55 = a4;
  sub_1004028CC(v64, a4);
  unint64_t v27 = sub_100451294();
  unint64_t v54 = v27;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v24, &v66, &type metadata for Data, v27, v22, v23);
  swift_release(v24);
  sub_100402A84(v25, v26);
  sub_10040A648(&v68);
  sub_100401ACC((uint64_t)(v8 + 2), (uint64_t)&v68);
  uint64_t v28 = v71;
  uint64_t v29 = v72;
  sub_10040A238(&v68, v71);
  uint64_t v30 = swift_getKeyPath(&unk_100719670);
  uint64_t v31 = v56;
  uint64_t v66 = v65;
  unint64_t v67 = (unint64_t)v56;
  swift_bridgeObjectRetain(v56);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)( v30,  &v66,  &type metadata for String,  &protocol witness table for String,  v28,  v29);
  swift_bridgeObjectRelease(v31);
  swift_release(v30);
  sub_10040A648(&v68);
  sub_100401ACC((uint64_t)(v8 + 2), (uint64_t)&v68);
  uint64_t v32 = v71;
  uint64_t v33 = v72;
  sub_10040A238(&v68, v71);
  uint64_t v34 = swift_getKeyPath(&unk_100719698);
  uint64_t v36 = v58;
  unint64_t v35 = v59;
  uint64_t v66 = v58;
  unint64_t v67 = v59;
  sub_1004028CC(v58, v59);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v34, &v66, &type metadata for Data, v27, v32, v33);
  swift_release(v34);
  sub_100402A84(v36, v35);
  uint64_t v37 = sub_10040A648(&v68);
  uint64_t v38 = v60;
  Date.init()(v37);
  sub_100401ACC((uint64_t)(v8 + 2), (uint64_t)&v68);
  uint64_t v39 = v71;
  uint64_t v40 = v72;
  sub_10040A238(&v68, v71);
  uint64_t v41 = swift_getKeyPath(&unk_1007196C0);
  uint64_t v42 = sub_10040A2B0( &qword_1009BAD00,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  uint64_t v43 = v61;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v41, v38, v61, v42, v39, v40);
  swift_release(v41);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v38, v43);
  sub_10040A648(&v68);
  uint64_t v68 = v57;
  uint64_t v69 = a2;
  swift_bridgeObjectRetain(a2);
  v44._countAndFlagsBits = v65;
  v44._object = v31;
  String.append(_:)(v44);
  swift_bridgeObjectRelease(v31);
  swift_bridgeObjectRelease(a2);
  uint64_t v45 = v69;
  sub_10040AD34(v68, v69, v64, v55);
  uint64_t v47 = v46;
  unint64_t v49 = v48;
  swift_bridgeObjectRelease(v45);
  sub_100401ACC(v16, (uint64_t)&v68);
  uint64_t v50 = v71;
  uint64_t v51 = v72;
  sub_10040A238(&v68, v71);
  uint64_t v52 = swift_getKeyPath(&unk_1007195F8);
  uint64_t v66 = v47;
  unint64_t v67 = v49;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v52, &v66, &type metadata for Data, v54, v50, v51);
  swift_release(v52);
  sub_100402A84(v47, v49);
  sub_10040A648(&v68);
  return v62;
}

uint64_t sub_1004555A8()
{
  uint64_t v0 = sub_1003F5CB4(&qword_1009BAA80);
  uint64_t v1 = type metadata accessor for Schema.PropertyMetadata(0LL);
  uint64_t v2 = swift_allocObject( v0,  ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80LL))
       + 6LL * *(void *)(*(void *)(v1 - 8) + 72LL),
         *(unsigned __int8 *)(*(void *)(v1 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v2 + 16) = xmmword_100719140;
  uint64_t KeyPath = swift_getKeyPath(&unk_1007195F8);
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  uint64_t v4 = sub_1003F5CB4(&qword_1009BAA88);
  uint64_t v5 = type metadata accessor for Schema.Attribute.Option(0LL);
  uint64_t v6 = swift_allocObject( v4,  ((*(unsigned __int8 *)(*(void *)(v5 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v5 - 8) + 80LL))
       + *(void *)(*(void *)(v5 - 8) + 72LL),
         *(unsigned __int8 *)(*(void *)(v5 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v6 + 16) = xmmword_1007184C0;
  static Schema.Attribute.Option.unique.getter();
  uint64_t v7 = type metadata accessor for Schema.Attribute(0LL);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  uint64_t v8 = Schema.Attribute.init(_:originalName:hashModifier:)(v6, 0LL, 0LL, 0LL, 0LL);
  *((void *)&v16 + 1) = v7;
  uint64_t v17 = sub_10040A2B0( &qword_1009BAA90,  (uint64_t (*)(uint64_t))&type metadata accessor for Schema.Attribute,  (uint64_t)&protocol conformance descriptor for Schema.Attribute);
  *(void *)&__int128 v15 = v8;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0x5565636976726573LL,  0xEF6E656B6F544952LL,  KeyPath,  &v18,  &v15);
  uint64_t v9 = swift_getKeyPath(&unk_100719620);
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  uint64_t v17 = 0LL;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0x65636976726573LL,  0xE700000000000000LL,  v9,  &v18,  &v15);
  uint64_t v10 = swift_getKeyPath(&unk_100719648);
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  uint64_t v17 = 0LL;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0x656B6F5468737570LL,  0xE90000000000006ELL,  v10,  &v18,  &v15);
  uint64_t v11 = swift_getKeyPath(&unk_100719670);
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  uint64_t v17 = 0LL;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)(6910581LL, 0xE300000000000000LL, v11, &v18, &v15);
  uint64_t v12 = swift_getKeyPath(&unk_100719698);
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  uint64_t v17 = 0LL;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0xD000000000000012LL,  0x8000000100840780LL,  v12,  &v18,  &v15);
  uint64_t v13 = swift_getKeyPath(&unk_1007196C0);
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  uint64_t v17 = 0LL;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0x6574736973726570LL,  0xED00006574614464LL,  v13,  &v18,  &v15);
  return v2;
}

uint64_t type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDShortHandle( uint64_t a1)
{
  return sub_100402020( a1,  (uint64_t *)&unk_1009C3BE8,  (uint64_t)&nominal type descriptor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDShortHandle);
}

uint64_t sub_1004558D8()
{
  return sub_10044D8CC( v0[2],  v0[3],  v0[4],  (uint64_t)&unk_1007196E8,  &qword_1009B9FA0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDShortHandle,  (uint64_t)&unk_10071A388);
}

uint64_t sub_100455924()
{
  return sub_10044D8CC( v0[2],  v0[3],  v0[4],  (uint64_t)&unk_100719710,  &qword_1009B9FA0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDShortHandle,  (uint64_t)&unk_10071A388);
}

uint64_t sub_100455970(uint64_t a1)
{
  uint64_t v2 = sub_1003F5CB4(&qword_1009BC130);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1004559B0(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v9 = sub_100401A88(&qword_1009BC130);
    sub_10040A2B0(a2, (uint64_t (*)(uint64_t))&type metadata accessor for Date, a3);
    uint64_t result = swift_getWitnessTable(a4, v9);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_100455A34()
{
  return sub_100448144( *(void *)(v0 + 16),  *(void *)(v0 + 24),  (uint64_t)&unk_100719738,  &qword_1009B9FA0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDShortHandle,  (uint64_t)&unk_10071A388);
}

uint64_t sub_100455A7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1003F5CB4(&qword_1009BC130);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100455AC4()
{
  uint64_t v0 = sub_1003F5CB4(&qword_1009BAA80);
  uint64_t v1 = type metadata accessor for Schema.PropertyMetadata(0LL);
  uint64_t v2 = swift_allocObject( v0,  ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80LL))
       + 3LL * *(void *)(*(void *)(v1 - 8) + 72LL),
         *(unsigned __int8 *)(*(void *)(v1 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v2 + 16) = xmmword_100718500;
  uint64_t KeyPath = swift_getKeyPath(&unk_1007196E8);
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  uint64_t v4 = sub_1003F5CB4(&qword_1009BAA88);
  uint64_t v5 = type metadata accessor for Schema.Attribute.Option(0LL);
  uint64_t v6 = swift_allocObject( v4,  ((*(unsigned __int8 *)(*(void *)(v5 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v5 - 8) + 80LL))
       + *(void *)(*(void *)(v5 - 8) + 72LL),
         *(unsigned __int8 *)(*(void *)(v5 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v6 + 16) = xmmword_1007184C0;
  static Schema.Attribute.Option.unique.getter();
  uint64_t v7 = type metadata accessor for Schema.Attribute(0LL);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  uint64_t v8 = Schema.Attribute.init(_:originalName:hashModifier:)(v6, 0LL, 0LL, 0LL, 0LL);
  *((void *)&v13 + 1) = v7;
  uint64_t v14 = sub_10040A2B0( &qword_1009BAA90,  (uint64_t (*)(uint64_t))&type metadata accessor for Schema.Attribute,  (uint64_t)&protocol conformance descriptor for Schema.Attribute);
  *(void *)&__int128 v12 = v8;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 6910581LL,  0xE300000000000000LL,  KeyPath,  &v15,  &v12);
  uint64_t v9 = swift_getKeyPath(&unk_100719710);
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  uint64_t v14 = 0LL;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0x6E614874726F6873LL,  0xEB00000000656C64LL,  v9,  &v15,  &v12);
  uint64_t v10 = swift_getKeyPath(&unk_100719738);
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  uint64_t v14 = 0LL;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0x6574736973726570LL,  0xED00006574614464LL,  v10,  &v15,  &v12);
  return v2;
}

uint64_t type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution( uint64_t a1)
{
  return sub_100402020( a1,  (uint64_t *)&unk_1009C3BF8,  (uint64_t)&nominal type descriptor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution);
}

uint64_t sub_100455D04()
{
  return sub_100447794( v0[2],  v0[3],  v0[4],  (uint64_t)&unk_100719788,  &qword_1009B9FC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A4A4);
}

uint64_t sub_100455D50()
{
  return sub_100447794( v0[2],  v0[3],  v0[4],  (uint64_t)&unk_1007197B0,  &qword_1009B9FC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A4A4);
}

uint64_t sub_100455D9C()
{
  return sub_10044D8CC( v0[2],  v0[3],  v0[4],  (uint64_t)&unk_1007197D8,  &qword_1009B9FC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A4A4);
}

uint64_t sub_100455DE8()
{
  return sub_10044D8CC( v0[2],  v0[3],  v0[4],  (uint64_t)&unk_100719800,  &qword_1009B9FC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A4A4);
}

uint64_t sub_100455E34()
{
  return sub_100447794( v0[2],  v0[3],  v0[4],  (uint64_t)&unk_100719828,  &qword_1009B9FC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A4A4);
}

uint64_t sub_100455E80()
{
  return sub_10044C1F8( *(void *)(v0 + 16),  *(void *)(v0 + 24),  (uint64_t)&unk_100719850,  &qword_1009B9FC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A4A4);
}

uint64_t sub_100455EC8()
{
  return sub_100447794( v0[2],  v0[3],  v0[4],  (uint64_t)&unk_100719878,  &qword_1009B9FC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A4A4);
}

uint64_t sub_100455F14()
{
  return sub_100448758( *(void *)(v0 + 16),  *(_BYTE *)(v0 + 24),  (uint64_t)&unk_1007198A0,  &qword_1009B9FC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A4A4);
}

uint64_t sub_100455F60()
{
  return sub_100448758( *(void *)(v0 + 16),  *(_BYTE *)(v0 + 24),  (uint64_t)&unk_1007198C8,  &qword_1009B9FC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A4A4);
}

uint64_t sub_100455FAC()
{
  return sub_100448144( *(void *)(v0 + 16),  *(void *)(v0 + 24),  (uint64_t)&unk_1007198F0,  &qword_1009B9FC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A4A4);
}

uint64_t sub_100455FF4()
{
  return sub_100448758( *(void *)(v0 + 16),  *(_BYTE *)(v0 + 24),  (uint64_t)&unk_100719918,  &qword_1009B9FC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A4A4);
}

uint64_t sub_100456040()
{
  return sub_100448758( *(void *)(v0 + 16),  *(_BYTE *)(v0 + 24),  (uint64_t)&unk_100719940,  &qword_1009B9FC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A4A4);
}

uint64_t sub_10045608C()
{
  return sub_100448144( *(void *)(v0 + 16),  *(void *)(v0 + 24),  (uint64_t)&unk_100719968,  &qword_1009B9FC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A4A4);
}

uint64_t sub_1004560D4()
{
  return sub_10044CDCC( v0[2],  v0[3],  v0[4],  (uint64_t)&unk_100719990,  &qword_1009B9FC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A4A4);
}

uint64_t sub_100456120()
{
  return sub_100448144( *(void *)(v0 + 16),  *(void *)(v0 + 24),  (uint64_t)&unk_1007199B8,  &qword_1009B9FC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A4A4);
}

uint64_t sub_100456168()
{
  return sub_100448144( *(void *)(v0 + 16),  *(void *)(v0 + 24),  (uint64_t)&unk_1007199E0,  &qword_1009B9FC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A4A4);
}

uint64_t sub_1004561B0()
{
  return sub_100448144( *(void *)(v0 + 16),  *(void *)(v0 + 24),  (uint64_t)&unk_100719A08,  &qword_1009B9FC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A4A4);
}

void *sub_1004561F8( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, unint64_t a10, char *a11, uint64_t a12, unint64_t a13, unsigned __int8 a14, unsigned __int8 a15, unsigned __int8 a16, unsigned __int8 a17)
{
  __int128 v18 = v17;
  unint64_t v89 = a8;
  uint64_t v88 = a7;
  unint64_t v86 = a6;
  uint64_t v85 = a5;
  unint64_t v84 = a4;
  int v99 = a16;
  int v100 = a17;
  int v98 = a15;
  int v95 = a14;
  uint64_t v93 = a12;
  unint64_t v94 = a13;
  __int128 v104 = a11;
  unint64_t v90 = a10;
  uint64_t v102 = a9;
  uint64_t v22 = *v17;
  uint64_t v103 = type metadata accessor for Date(0LL);
  uint64_t v92 = *(void *)(v103 - 8);
  __chkstk_darwin(v23, v24);
  uint64_t v91 = (char *)&v84 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = (uint64_t)(v18 + 3);
  v18[6] = sub_1003F5CB4(&qword_1009B9FD0);
  uint64_t v27 = sub_10040A2B0( &qword_1009B9FC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A4A4);
  v108[0] = v22;
  v108[1] = v22;
  v108[2] = v27;
  uint64_t v109 = v27;
  v18[7] = swift_getOpaqueTypeConformance2( v108,  &opaque type descriptor for <<opaque return type of static PersistentModel.createBackingData<A>()>>,  1LL);
  sub_10040B2A8(v18 + 3);
  uint64_t v28 = static PersistentModel.createBackingData<A>()(v22, v22, v27, v27);
  __int128 v101 = v18;
  *((_DWORD *)v18 + 4) = 16843009;
  *((_WORD *)v18 + 10) = 257;
  ObservationRegistrar.init()(v28);
  sub_100401ACC((uint64_t)(v18 + 3), (uint64_t)v108);
  uint64_t v30 = v109;
  uint64_t v29 = v110;
  sub_10040A238(v108, v109);
  uint64_t KeyPath = swift_getKeyPath(&unk_100719788);
  uint64_t v106 = a1;
  unint64_t v107 = a2;
  uint64_t v96 = a1;
  unint64_t v97 = a2;
  sub_1004028CC(a1, a2);
  unint64_t v32 = sub_100451294();
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(KeyPath, &v106, &type metadata for Data, v32, v30, v29);
  swift_release(KeyPath);
  sub_100402A84(a1, a2);
  sub_10040A648(v108);
  sub_100401ACC(v26, (uint64_t)v108);
  uint64_t v33 = v109;
  uint64_t v34 = v110;
  sub_10040A238(v108, v109);
  uint64_t v35 = swift_getKeyPath(&unk_1007197B0);
  unint64_t v36 = v84;
  uint64_t v106 = a3;
  unint64_t v107 = v84;
  sub_1004028CC(a3, v84);
  unint64_t v37 = v32;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v35, &v106, &type metadata for Data, v32, v33, v34);
  swift_release(v35);
  sub_100402A84(a3, v36);
  sub_10040A648(v108);
  sub_100401ACC(v26, (uint64_t)v108);
  uint64_t v38 = v109;
  uint64_t v39 = v110;
  sub_10040A238(v108, v109);
  uint64_t v40 = swift_getKeyPath(&unk_1007197D8);
  unint64_t v41 = v86;
  uint64_t v106 = v85;
  unint64_t v107 = v86;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)( v40,  &v106,  &type metadata for String,  &protocol witness table for String,  v38,  v39);
  swift_bridgeObjectRelease(v41);
  swift_release(v40);
  sub_10040A648(v108);
  sub_100401ACC(v26, (uint64_t)v108);
  uint64_t v42 = v109;
  uint64_t v43 = v110;
  sub_10040A238(v108, v109);
  uint64_t v44 = swift_getKeyPath(&unk_100719800);
  unint64_t v45 = v89;
  uint64_t v106 = v88;
  unint64_t v107 = v89;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)( v44,  &v106,  &type metadata for String,  &protocol witness table for String,  v42,  v43);
  swift_bridgeObjectRelease(v45);
  swift_release(v44);
  sub_10040A648(v108);
  sub_100401ACC(v26, (uint64_t)v108);
  uint64_t v46 = v109;
  uint64_t v47 = v110;
  sub_10040A238(v108, v109);
  uint64_t v48 = swift_getKeyPath(&unk_100719828);
  uint64_t v49 = v102;
  unint64_t v50 = v90;
  uint64_t v106 = v102;
  unint64_t v107 = v90;
  sub_1004028CC(v102, v90);
  unint64_t v51 = v37;
  unint64_t v87 = v37;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v48, &v106, &type metadata for Data, v37, v46, v47);
  swift_release(v48);
  sub_100402A84(v49, v50);
  sub_10040A648(v108);
  uint64_t v52 = v92;
  uint64_t v53 = v91;
  uint64_t v54 = v103;
  (*(void (**)(char *, char *, uint64_t))(v92 + 16))(v91, v104, v103);
  sub_100401ACC(v26, (uint64_t)v108);
  uint64_t v55 = v109;
  uint64_t v56 = v110;
  sub_10040A238(v108, v109);
  uint64_t v57 = swift_getKeyPath(&unk_100719850);
  uint64_t v58 = sub_10040A2B0( &qword_1009BAD00,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v57, v53, v54, v58, v55, v56);
  swift_release(v57);
  unint64_t v59 = *(void (**)(char *, uint64_t))(v52 + 8);
  v59(v53, v54);
  sub_10040A648(v108);
  sub_100401ACC(v26, (uint64_t)v108);
  uint64_t v60 = v109;
  uint64_t v61 = v110;
  sub_10040A238(v108, v109);
  uint64_t v62 = swift_getKeyPath(&unk_100719878);
  uint64_t v64 = v93;
  unint64_t v63 = v94;
  uint64_t v106 = v93;
  unint64_t v107 = v94;
  sub_1004028CC(v93, v94);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v62, &v106, &type metadata for Data, v51, v60, v61);
  swift_release(v62);
  sub_100402A84(v64, v63);
  sub_10040A648(v108);
  sub_100401ACC(v26, (uint64_t)v108);
  uint64_t v65 = v109;
  uint64_t v66 = v110;
  sub_10040A238(v108, v109);
  uint64_t v67 = swift_getKeyPath(&unk_1007198A0);
  LOBYTE(v106) = v95;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)( v67,  &v106,  &type metadata for Bool,  &protocol witness table for Bool,  v65,  v66);
  swift_release(v67);
  sub_10040A648(v108);
  sub_100401ACC(v26, (uint64_t)v108);
  uint64_t v68 = v109;
  uint64_t v69 = v110;
  sub_10040A238(v108, v109);
  uint64_t v70 = swift_getKeyPath(&unk_1007198C8);
  LOBYTE(v106) = v98;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)( v70,  &v106,  &type metadata for Bool,  &protocol witness table for Bool,  v68,  v69);
  swift_release(v70);
  sub_10040A648(v108);
  sub_100401ACC(v26, (uint64_t)v108);
  uint64_t v71 = v109;
  uint64_t v72 = v110;
  sub_10040A238(v108, v109);
  uint64_t v73 = swift_getKeyPath(&unk_100719918);
  LOBYTE(v106) = v99;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)( v73,  &v106,  &type metadata for Bool,  &protocol witness table for Bool,  v71,  v72);
  swift_release(v73);
  sub_10040A648(v108);
  sub_100401ACC(v26, (uint64_t)v108);
  uint64_t v74 = v109;
  uint64_t v75 = v110;
  sub_10040A238(v108, v109);
  uint64_t v76 = swift_getKeyPath(&unk_100719940);
  LOBYTE(v106) = v100;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)( v76,  &v106,  &type metadata for Bool,  &protocol witness table for Bool,  v74,  v75);
  swift_release(v76);
  sub_10040A648(v108);
  uint64_t v106 = v96;
  unint64_t v107 = v97;
  sub_1004028CC(v96, v97);
  uint64_t v77 = v102;
  sub_1004028CC(v102, v50);
  sub_100450C4C(v77, v50);
  sub_100402A84(v77, v50);
  uint64_t v78 = v106;
  unint64_t v79 = v107;
  sub_100401ACC(v26, (uint64_t)v108);
  uint64_t v80 = v109;
  uint64_t v81 = v110;
  sub_10040A238(v108, v109);
  uint64_t v82 = swift_getKeyPath(&unk_100719760);
  v105[0] = v78;
  v105[1] = v79;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v82, v105, &type metadata for Data, v87, v80, v81);
  swift_release(v82);
  sub_100402A84(v78, v79);
  sub_10040A648(v108);
  v59(v104, v103);
  return v101;
}

uint64_t sub_1004569A0()
{
  uint64_t v0 = sub_1003F5CB4(&qword_1009BAA80);
  uint64_t v1 = type metadata accessor for Schema.PropertyMetadata(0LL);
  uint64_t v2 = swift_allocObject( v0,  ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80LL))
       + 18LL * *(void *)(*(void *)(v1 - 8) + 72LL),
         *(unsigned __int8 *)(*(void *)(v1 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v2 + 16) = xmmword_100719150;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719760);
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  uint64_t v4 = sub_1003F5CB4(&qword_1009BAA88);
  uint64_t v5 = type metadata accessor for Schema.Attribute.Option(0LL);
  uint64_t v6 = swift_allocObject( v4,  ((*(unsigned __int8 *)(*(void *)(v5 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v5 - 8) + 80LL))
       + *(void *)(*(void *)(v5 - 8) + 72LL),
         *(unsigned __int8 *)(*(void *)(v5 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v6 + 16) = xmmword_1007184C0;
  static Schema.Attribute.Option.unique.getter();
  uint64_t v7 = type metadata accessor for Schema.Attribute(0LL);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  uint64_t v8 = Schema.Attribute.init(_:originalName:hashModifier:)(v6, 0LL, 0LL, 0LL, 0LL);
  *((void *)&v28 + 1) = v7;
  uint64_t v29 = sub_10040A2B0( &qword_1009BAA90,  (uint64_t (*)(uint64_t))&type metadata accessor for Schema.Attribute,  (uint64_t)&protocol conformance descriptor for Schema.Attribute);
  *(void *)&__int128 v27 = v8;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0x6B6F54444979656BLL,  0xEA00000000006E65LL,  KeyPath,  &v30,  &v27);
  uint64_t v9 = swift_getKeyPath(&unk_100719788);
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  uint64_t v29 = 0LL;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0x444979656BLL,  0xE500000000000000LL,  v9,  &v30,  &v27);
  uint64_t v10 = swift_getKeyPath(&unk_1007197B0);
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  uint64_t v29 = 0LL;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0x6174614479656BLL,  0xE700000000000000LL,  v10,  &v30,  &v27);
  uint64_t v11 = swift_getKeyPath(&unk_1007197D8);
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  uint64_t v29 = 0LL;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0x52557265646E6573LL,  0xE900000000000049LL,  v11,  &v30,  &v27);
  uint64_t v12 = swift_getKeyPath(&unk_100719800);
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  uint64_t v29 = 0LL;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0x7265766965636572LL,  0xEB00000000495255LL,  v12,  &v30,  &v27);
  uint64_t v13 = swift_getKeyPath(&unk_100719828);
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  uint64_t v29 = 0LL;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0xD000000000000011LL,  0x8000000100840700LL,  v13,  &v30,  &v27);
  uint64_t v14 = swift_getKeyPath(&unk_100719850);
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  uint64_t v29 = 0LL;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0x4164657461657263LL,  0xE900000000000074LL,  v14,  &v30,  &v27);
  uint64_t v15 = swift_getKeyPath(&unk_100719878);
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  uint64_t v29 = 0LL;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0x7A696C6169726573LL,  0xEF65746174536465LL,  v15,  &v30,  &v27);
  uint64_t v16 = swift_getKeyPath(&unk_1007198A0);
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  uint64_t v29 = 0LL;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0xD000000000000012LL,  0x8000000100840720LL,  v16,  &v30,  &v27);
  uint64_t v17 = swift_getKeyPath(&unk_1007198C8);
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  uint64_t v29 = 0LL;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0xD000000000000014LL,  0x8000000100840740LL,  v17,  &v30,  &v27);
  uint64_t v18 = swift_getKeyPath(&unk_1007198F0);
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  uint64_t v29 = 0LL;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0xD000000000000014LL,  0x8000000100840760LL,  v18,  &v30,  &v27);
  uint64_t v19 = swift_getKeyPath(&unk_100719918);
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  uint64_t v29 = 0LL;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0x6569776574537369LL,  0xEF656C6261706143LL,  v19,  &v30,  &v27);
  uint64_t v20 = swift_getKeyPath(&unk_100719940);
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  uint64_t v29 = 0LL;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0x646E6553646964LL,  0xE700000000000000LL,  v20,  &v30,  &v27);
  uint64_t v21 = swift_getKeyPath(&unk_100719968);
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  uint64_t v29 = 0LL;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0x656C65446C6C6977LL,  0xEC00000074416574LL,  v21,  &v30,  &v27);
  uint64_t v22 = swift_getKeyPath(&unk_100719990);
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  uint64_t v29 = 0LL;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0x44495547746E6573LL,  0xE800000000000000LL,  v22,  &v30,  &v27);
  uint64_t v23 = swift_getKeyPath(&unk_1007199B8);
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  uint64_t v29 = 0LL;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0x7441746E6573LL,  0xE600000000000000LL,  v23,  &v30,  &v27);
  uint64_t v24 = swift_getKeyPath(&unk_1007199E0);
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  uint64_t v29 = 0LL;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0x697463417473616CLL,  0xEC00000074416576LL,  v24,  &v30,  &v27);
  uint64_t v25 = swift_getKeyPath(&unk_100719A08);
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  uint64_t v29 = 0LL;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0x73654D497473616CLL,  0xEF74416465676173LL,  v25,  &v30,  &v27);
  return v2;
}

uint64_t type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSGroupEncryptionKeyRollIndex( uint64_t a1)
{
  return sub_100402020( a1,  (uint64_t *)&unk_1009C3C08,  (uint64_t)&nominal type descriptor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSGroupEncryptionKeyRollIndex);
}

uint64_t sub_1004570A0()
{
  return sub_100449E74(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1004570C8()
{
  return sub_10044A15C(*(void *)(v0 + 16), *(_DWORD *)(v0 + 24));
}

uint64_t sub_1004570F4()
{
  return sub_10044C1F8( *(void *)(v0 + 16),  *(void *)(v0 + 24),  (uint64_t)&unk_100719A80,  &qword_1009B9FE0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSGroupEncryptionKeyRollIndex,  (uint64_t)&unk_10071A5C0);
}

uint64_t sub_10045713C()
{
  uint64_t v0 = sub_1003F5CB4(&qword_1009BAA80);
  uint64_t v1 = type metadata accessor for Schema.PropertyMetadata(0LL);
  uint64_t v2 = swift_allocObject( v0,  ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80LL))
       + 3LL * *(void *)(*(void *)(v1 - 8) + 72LL),
         *(unsigned __int8 *)(*(void *)(v1 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v2 + 16) = xmmword_100718500;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719A30);
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  uint64_t v4 = sub_1003F5CB4(&qword_1009BAA88);
  uint64_t v5 = type metadata accessor for Schema.Attribute.Option(0LL);
  uint64_t v6 = swift_allocObject( v4,  ((*(unsigned __int8 *)(*(void *)(v5 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v5 - 8) + 80LL))
       + *(void *)(*(void *)(v5 - 8) + 72LL),
         *(unsigned __int8 *)(*(void *)(v5 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v6 + 16) = xmmword_1007184C0;
  static Schema.Attribute.Option.unique.getter();
  uint64_t v7 = type metadata accessor for Schema.Attribute(0LL);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  uint64_t v8 = Schema.Attribute.init(_:originalName:hashModifier:)(v6, 0LL, 0LL, 0LL, 0LL);
  *((void *)&v13 + 1) = v7;
  uint64_t v14 = sub_10040A2B0( &qword_1009BAA90,  (uint64_t (*)(uint64_t))&type metadata accessor for Schema.Attribute,  (uint64_t)&protocol conformance descriptor for Schema.Attribute);
  *(void *)&__int128 v12 = v8;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0x7069636974726170LL,  0xED00004449746E61LL,  KeyPath,  &v15,  &v12);
  uint64_t v9 = swift_getKeyPath(&unk_100719A58);
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  uint64_t v14 = 0LL;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0x65646E496C6C6F72LL,  0xE900000000000078LL,  v9,  &v15,  &v12);
  uint64_t v10 = swift_getKeyPath(&unk_100719A80);
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  uint64_t v14 = 0LL;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0x656D69546C6C6F72LL,  0xE800000000000000LL,  v10,  &v15,  &v12);
  return v2;
}

void *sub_10045736C(void *a1)
{
  uint64_t v2 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSGroupEncryptionKeyRollIndex(0LL);
  __n128 v3 = (void *)swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  void v3[5] = sub_1003F5CB4(&qword_1009B9FE8);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9FE0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSGroupEncryptionKeyRollIndex,  (uint64_t)&unk_10071A5C0);
  *(void *)&__int128 v8 = v2;
  *((void *)&v8 + 1) = v2;
  uint64_t v9 = v4;
  uint64_t v10 = v4;
  v3[6] = swift_getOpaqueTypeConformance2( &v8,  &opaque type descriptor for <<opaque return type of static PersistentModel.createBackingData<A>()>>,  1LL);
  sub_10040B2A8(v3 + 2);
  uint64_t v5 = static PersistentModel.createBackingData<A>()(v2, v2, v4, v4);
  ObservationRegistrar.init()(v5);
  sub_100401ACC((uint64_t)a1, (uint64_t)&v8);
  swift_beginAccess(v3 + 2, v7, 33LL, 0LL);
  sub_10040A648(v3 + 2);
  sub_10043D79C(&v8, (uint64_t)(v3 + 2));
  swift_endAccess(v7);
  sub_10040A648(a1);
  return v3;
}

uint64_t type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSOffGridDeliveryDonatedHandle( uint64_t a1)
{
  return sub_100402020( a1,  (uint64_t *)&unk_1009C3C18,  (uint64_t)&nominal type descriptor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSOffGridDeliveryDonatedHandle);
}

uint64_t sub_1004574A0()
{
  return sub_10044D8CC( v0[2],  v0[3],  v0[4],  (uint64_t)&unk_100719AD0,  (unint64_t *)&unk_1009BC920,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSOffGridDeliveryDonatedHandle,  (uint64_t)&unk_10071A6DC);
}

uint64_t sub_1004574EC()
{
  return sub_10044D8CC( v0[2],  v0[3],  v0[4],  (uint64_t)&unk_100719AF8,  (unint64_t *)&unk_1009BC920,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSOffGridDeliveryDonatedHandle,  (uint64_t)&unk_10071A6DC);
}

uint64_t sub_100457538()
{
  return sub_10044B1B8(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100457560()
{
  uint64_t v0 = sub_1003F5CB4(&qword_1009BAA80);
  uint64_t v1 = type metadata accessor for Schema.PropertyMetadata(0LL);
  uint64_t v2 = swift_allocObject( v0,  ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80LL))
       + 4LL * *(void *)(*(void *)(v1 - 8) + 72LL),
         *(unsigned __int8 *)(*(void *)(v1 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v2 + 16) = xmmword_100718C70;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719AA8);
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  uint64_t v4 = sub_1003F5CB4(&qword_1009BAA88);
  uint64_t v5 = type metadata accessor for Schema.Attribute.Option(0LL);
  uint64_t v6 = swift_allocObject( v4,  ((*(unsigned __int8 *)(*(void *)(v5 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v5 - 8) + 80LL))
       + *(void *)(*(void *)(v5 - 8) + 72LL),
         *(unsigned __int8 *)(*(void *)(v5 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v6 + 16) = xmmword_1007184C0;
  static Schema.Attribute.Option.unique.getter();
  uint64_t v7 = type metadata accessor for Schema.Attribute(0LL);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  uint64_t v8 = Schema.Attribute.init(_:originalName:hashModifier:)(v6, 0LL, 0LL, 0LL, 0LL);
  *((void *)&v14 + 1) = v7;
  uint64_t v15 = sub_10040A2B0( &qword_1009BAA90,  (uint64_t (*)(uint64_t))&type metadata accessor for Schema.Attribute,  (uint64_t)&protocol conformance descriptor for Schema.Attribute);
  *(void *)&__int128 v13 = v8;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0x6F546D6F7266LL,  0xE600000000000000LL,  KeyPath,  &v16,  &v13);
  uint64_t v9 = swift_getKeyPath(&unk_100719AD0);
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  uint64_t v15 = 0LL;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0x4952556F74LL,  0xE500000000000000LL,  v9,  &v16,  &v13);
  uint64_t v10 = swift_getKeyPath(&unk_100719AF8);
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  uint64_t v15 = 0LL;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0x4952556D6F7266LL,  0xE700000000000000LL,  v10,  &v16,  &v13);
  uint64_t v11 = swift_getKeyPath(&unk_100719B20);
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  uint64_t v15 = 0LL;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0x797469726F697270LL,  0xE800000000000000LL,  v11,  &v16,  &v13);
  return v2;
}

uint64_t type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSRegistrationEvent( uint64_t a1)
{
  return sub_100402020( a1,  (uint64_t *)&unk_1009C3C28,  (uint64_t)&nominal type descriptor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSRegistrationEvent);
}

uint64_t sub_1004577D4()
{
  return sub_10044B904(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1004577FC()
{
  return sub_10044D8CC( v0[2],  v0[3],  v0[4],  (uint64_t)&unk_100719B70,  &qword_1009BC540,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSRegistrationEvent,  (uint64_t)&unk_10071A7F8);
}

uint64_t sub_100457848()
{
  return sub_100448144( *(void *)(v0 + 16),  *(void *)(v0 + 24),  (uint64_t)&unk_100719B98,  &qword_1009BC540,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSRegistrationEvent,  (uint64_t)&unk_10071A7F8);
}

uint64_t sub_100457890()
{
  return sub_10044C1F8( *(void *)(v0 + 16),  *(void *)(v0 + 24),  (uint64_t)&unk_100719BC0,  &qword_1009BC540,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSRegistrationEvent,  (uint64_t)&unk_10071A7F8);
}

uint64_t sub_1004578D8()
{
  return sub_10044C4F0(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100457900()
{
  return sub_10044C7D4(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100457928()
{
  return sub_10044CDCC( v0[2],  v0[3],  v0[4],  (uint64_t)&unk_100719C38,  &qword_1009BC540,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSRegistrationEvent,  (uint64_t)&unk_10071A7F8);
}

uint64_t sub_100457974()
{
  return sub_10044CDCC( v0[2],  v0[3],  v0[4],  (uint64_t)&unk_100719C60,  &qword_1009BC540,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSRegistrationEvent,  (uint64_t)&unk_10071A7F8);
}

uint64_t sub_1004579C0()
{
  uint64_t v0 = sub_1003F5CB4(&qword_1009BAA80);
  uint64_t v1 = type metadata accessor for Schema.PropertyMetadata(0LL);
  uint64_t v2 = swift_allocObject( v0,  ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80LL))
       + 8LL * *(void *)(*(void *)(v1 - 8) + 72LL),
         *(unsigned __int8 *)(*(void *)(v1 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v2 + 16) = xmmword_100719160;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719B48);
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  uint64_t v4 = sub_1003F5CB4(&qword_1009BAA88);
  uint64_t v5 = type metadata accessor for Schema.Attribute.Option(0LL);
  uint64_t v6 = swift_allocObject( v4,  ((*(unsigned __int8 *)(*(void *)(v5 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v5 - 8) + 80LL))
       + *(void *)(*(void *)(v5 - 8) + 72LL),
         *(unsigned __int8 *)(*(void *)(v5 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v6 + 16) = xmmword_1007184C0;
  static Schema.Attribute.Option.unique.getter();
  uint64_t v7 = type metadata accessor for Schema.Attribute(0LL);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  uint64_t v8 = Schema.Attribute.init(_:originalName:hashModifier:)(v6, 0LL, 0LL, 0LL, 0LL);
  *((void *)&v18 + 1) = v7;
  uint64_t v19 = sub_10040A2B0( &qword_1009BAA90,  (uint64_t (*)(uint64_t))&type metadata accessor for Schema.Attribute,  (uint64_t)&protocol conformance descriptor for Schema.Attribute);
  *(void *)&__int128 v17 = v8;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0xD000000000000012LL,  0x80000001008406C0LL,  KeyPath,  &v20,  &v17);
  uint64_t v9 = swift_getKeyPath(&unk_100719B70);
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  uint64_t v19 = 0LL;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0x79654B676162LL,  0xE600000000000000LL,  v9,  &v20,  &v17);
  uint64_t v10 = swift_getKeyPath(&unk_100719B98);
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  uint64_t v19 = 0LL;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0x5374736575716572LL,  0xEC00000074726174LL,  v10,  &v20,  &v17);
  uint64_t v11 = swift_getKeyPath(&unk_100719BC0);
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  uint64_t v19 = 0LL;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0x6974656C706D6F63LL,  0xEE00656D69546E6FLL,  v11,  &v20,  &v17);
  uint64_t v12 = swift_getKeyPath(&unk_100719BE8);
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  uint64_t v19 = 0LL;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0x6F43746C75736572LL,  0xEA00000000006564LL,  v12,  &v20,  &v17);
  uint64_t v13 = swift_getKeyPath(&unk_100719C10);
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  uint64_t v19 = 0LL;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0x6361667265746E69LL,  0xE900000000000065LL,  v13,  &v20,  &v17);
  uint64_t v14 = swift_getKeyPath(&unk_100719C38);
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  uint64_t v19 = 0LL;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0x69486B6E756C7073LL,  0xEA0000000000746ELL,  v14,  &v20,  &v17);
  uint64_t v15 = swift_getKeyPath(&unk_100719C60);
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  uint64_t v19 = 0LL;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0xD000000000000010LL,  0x80000001008406E0LL,  v15,  &v20,  &v17);
  return v2;
}

uint64_t type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount( uint64_t a1)
{
  return sub_100402020( a1,  qword_1009C3C38,  (uint64_t)&nominal type descriptor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount);
}

uint64_t sub_100457D9C()
{
  return sub_10044D8CC( v0[2],  v0[3],  v0[4],  (uint64_t)&unk_100719C88,  &qword_1009BC4D0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071A914);
}

uint64_t sub_100457DE8()
{
  return sub_10044DBC4(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100457E10()
{
  return sub_10044DEA8(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100457E38()
{
  return sub_10044E18C(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100457E60()
{
  return sub_10044E470(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100457E88()
{
  return sub_10044E754(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100457EB0()
{
  return sub_10044EA38(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100457ED8()
{
  return sub_10044ED1C(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100457F00()
{
  return sub_10044F000(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100457F28()
{
  return sub_10044F2E4(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100457F50()
{
  return sub_10044F5C8(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100457F78()
{
  uint64_t v0 = sub_1003F5CB4(&qword_1009BAA80);
  uint64_t v1 = type metadata accessor for Schema.PropertyMetadata(0LL);
  uint64_t v2 = swift_allocObject( v0,  ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80LL))
       + 11LL * *(void *)(*(void *)(v1 - 8) + 72LL),
         *(unsigned __int8 *)(*(void *)(v1 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v2 + 16) = xmmword_100719170;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719C88);
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  uint64_t v4 = sub_1003F5CB4(&qword_1009BAA88);
  uint64_t v5 = type metadata accessor for Schema.Attribute.Option(0LL);
  uint64_t v6 = swift_allocObject( v4,  ((*(unsigned __int8 *)(*(void *)(v5 - 8) + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v5 - 8) + 80LL))
       + *(void *)(*(void *)(v5 - 8) + 72LL),
         *(unsigned __int8 *)(*(void *)(v5 - 8) + 80LL) | 7LL);
  *(_OWORD *)(v6 + 16) = xmmword_1007184C0;
  static Schema.Attribute.Option.unique.getter();
  uint64_t v7 = type metadata accessor for Schema.Attribute(0LL);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  uint64_t v8 = Schema.Attribute.init(_:originalName:hashModifier:)(v6, 0LL, 0LL, 0LL, 0LL);
  *((void *)&v21 + 1) = v7;
  uint64_t v22 = sub_10040A2B0( &qword_1009BAA90,  (uint64_t (*)(uint64_t))&type metadata accessor for Schema.Attribute,  (uint64_t)&protocol conformance descriptor for Schema.Attribute);
  *(void *)&__int128 v20 = v8;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0xD000000000000010LL,  0x8000000100840580LL,  KeyPath,  &v23,  &v20);
  uint64_t v9 = swift_getKeyPath(&unk_100719CB0);
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  uint64_t v22 = 0LL;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0xD000000000000015LL,  0x80000001008405A0LL,  v9,  &v23,  &v20);
  uint64_t v10 = swift_getKeyPath(&unk_100719CD8);
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  uint64_t v22 = 0LL;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0xD000000000000013LL,  0x80000001008405C0LL,  v10,  &v23,  &v20);
  uint64_t v11 = swift_getKeyPath(&unk_100719D00);
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  uint64_t v22 = 0LL;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0x4373656C646E6168LL,  0xEC000000746E756FLL,  v11,  &v23,  &v20);
  uint64_t v12 = swift_getKeyPath(&unk_100719D28);
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  uint64_t v22 = 0LL;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0xD000000000000019LL,  0x80000001008405E0LL,  v12,  &v23,  &v20);
  uint64_t v13 = swift_getKeyPath(&unk_100719D50);
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  uint64_t v22 = 0LL;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0xD00000000000001CLL,  0x8000000100840600LL,  v13,  &v23,  &v20);
  uint64_t v14 = swift_getKeyPath(&unk_100719D78);
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  uint64_t v22 = 0LL;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0xD000000000000015LL,  0x8000000100840620LL,  v14,  &v23,  &v20);
  uint64_t v15 = swift_getKeyPath(&unk_100719DA0);
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  uint64_t v22 = 0LL;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0xD000000000000017LL,  0x8000000100840640LL,  v15,  &v23,  &v20);
  uint64_t v16 = swift_getKeyPath(&unk_100719DC8);
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  uint64_t v22 = 0LL;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0xD00000000000001ALL,  0x8000000100840660LL,  v16,  &v23,  &v20);
  uint64_t v17 = swift_getKeyPath(&unk_100719DF0);
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  uint64_t v22 = 0LL;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0xD000000000000013LL,  0x8000000100840680LL,  v17,  &v23,  &v20);
  uint64_t v18 = swift_getKeyPath(&unk_100719E18);
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  uint64_t v22 = 0LL;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  Schema.PropertyMetadata.init(name:keypath:defaultValue:metadata:)( 0xD000000000000012LL,  0x80000001008406A0LL,  v18,  &v23,  &v20);
  return v2;
}

uint64_t sub_100458414()
{
  return sub_10040A2B0( &qword_1009B9EC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable,  (uint64_t)&unk_10071A018);
}

uint64_t sub_100458440()
{
  return sub_10040A2B0( &qword_1009BA020,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable,  (uint64_t)&unk_100719F78);
}

uint64_t sub_10045846C()
{
  return sub_10040A2B0( &qword_1009BA070,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable,  (uint64_t)&unk_100719FB8);
}

uint64_t sub_100458498()
{
  return sub_10040A2B0( &qword_1009BA078,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable,  (uint64_t)&unk_100719FF0);
}

uint64_t sub_1004584C4()
{
  return sub_10040A2B0( &qword_1009BA080,  (uint64_t (*)(uint64_t))&type metadata accessor for PersistentIdentifier,  (uint64_t)&protocol conformance descriptor for PersistentIdentifier);
}

uint64_t sub_1004584F0()
{
  return sub_10040A2B0( &qword_1009B9F20,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A134);
}

uint64_t sub_10045851C()
{
  return sub_10040A2B0( &qword_1009BA028,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A094);
}

uint64_t sub_100458548()
{
  return sub_10040A2B0( &qword_1009BA088,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A0D4);
}

uint64_t sub_100458574()
{
  return sub_10040A2B0( &qword_1009BA090,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A10C);
}

uint64_t sub_1004585A0()
{
  return sub_10040A2B0( &qword_1009B9F68,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A250);
}

uint64_t sub_1004585CC()
{
  return sub_10040A2B0( &qword_1009BA030,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A1B0);
}

uint64_t sub_1004585F8()
{
  return sub_10040A2B0( &qword_1009BA098,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A1F0);
}

uint64_t sub_100458624()
{
  return sub_10040A2B0( &qword_1009BA0A0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A228);
}

uint64_t sub_100458650()
{
  return sub_10040A2B0( &qword_1009B9F80,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDPublicIdentity,  (uint64_t)&unk_10071A36C);
}

uint64_t sub_10045867C()
{
  return sub_10040A2B0( &qword_1009BA038,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDPublicIdentity,  (uint64_t)&unk_10071A2CC);
}

uint64_t sub_1004586A8()
{
  return sub_10040A2B0( &qword_1009BA0A8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDPublicIdentity,  (uint64_t)&unk_10071A30C);
}

uint64_t sub_1004586D4()
{
  return sub_10040A2B0( &qword_1009BA0B0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDPublicIdentity,  (uint64_t)&unk_10071A344);
}

uint64_t sub_100458700()
{
  return sub_10040A2B0( &qword_1009B9F98,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDShortHandle,  (uint64_t)&unk_10071A488);
}

uint64_t sub_10045872C()
{
  return sub_10040A2B0( &qword_1009BA040,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDShortHandle,  (uint64_t)&unk_10071A3E8);
}

uint64_t sub_100458758()
{
  return sub_10040A2B0( &qword_1009BA0B8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDShortHandle,  (uint64_t)&unk_10071A428);
}

uint64_t sub_100458784()
{
  return sub_10040A2B0( &qword_1009BA0C0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDShortHandle,  (uint64_t)&unk_10071A460);
}

uint64_t sub_1004587B0()
{
  return sub_10040A2B0( &qword_1009B9FC0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A5A4);
}

uint64_t sub_1004587DC()
{
  return sub_10040A2B0( &qword_1009BA048,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A504);
}

uint64_t sub_100458808()
{
  return sub_10040A2B0( &qword_1009BA0C8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A544);
}

uint64_t sub_100458834()
{
  return sub_10040A2B0( &qword_1009BA0D0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A57C);
}

uint64_t sub_100458860()
{
  return sub_10040A2B0( &qword_1009B9FD8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSGroupEncryptionKeyRollIndex,  (uint64_t)&unk_10071A6C0);
}

uint64_t sub_10045888C()
{
  return sub_10040A2B0( &qword_1009BA050,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSGroupEncryptionKeyRollIndex,  (uint64_t)&unk_10071A620);
}

uint64_t sub_1004588B8()
{
  return sub_10040A2B0( &qword_1009BA0D8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSGroupEncryptionKeyRollIndex,  (uint64_t)&unk_10071A660);
}

uint64_t sub_1004588E4()
{
  return sub_10040A2B0( &qword_1009BA0E0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSGroupEncryptionKeyRollIndex,  (uint64_t)&unk_10071A698);
}

uint64_t sub_100458910()
{
  return sub_10040A2B0( &qword_1009B9FF0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSOffGridDeliveryDonatedHandle,  (uint64_t)&unk_10071A7DC);
}

uint64_t sub_10045893C()
{
  return sub_10040A2B0( &qword_1009BA058,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSOffGridDeliveryDonatedHandle,  (uint64_t)&unk_10071A73C);
}

uint64_t sub_100458968()
{
  return sub_10040A2B0( &qword_1009BA0E8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSOffGridDeliveryDonatedHandle,  (uint64_t)&unk_10071A77C);
}

uint64_t sub_100458994()
{
  return sub_10040A2B0( &qword_1009BA0F0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSOffGridDeliveryDonatedHandle,  (uint64_t)&unk_10071A7B4);
}

uint64_t sub_1004589C0()
{
  return sub_10040A2B0( &qword_1009BA000,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSRegistrationEvent,  (uint64_t)&unk_10071A8F8);
}

uint64_t sub_1004589EC()
{
  return sub_10040A2B0( &qword_1009BA060,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSRegistrationEvent,  (uint64_t)&unk_10071A858);
}

uint64_t sub_100458A18()
{
  return sub_10040A2B0( &qword_1009BA0F8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSRegistrationEvent,  (uint64_t)&unk_10071A898);
}

uint64_t sub_100458A44()
{
  return sub_10040A2B0( &qword_1009BA100,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSRegistrationEvent,  (uint64_t)&unk_10071A8D0);
}

uint64_t sub_100458A70()
{
  return sub_10040A2B0( &qword_1009BA010,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071AA14);
}

uint64_t sub_100458A9C()
{
  return sub_10040A2B0( &qword_1009BA068,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071A974);
}

uint64_t sub_100458AC8()
{
  return sub_10040A2B0( &qword_1009BA108,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071A9B4);
}

uint64_t sub_100458AF4()
{
  return sub_10040A2B0( &qword_1009BA110,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071A9EC);
}

ValueMetadata *type metadata accessor for SDPersistenceMigrationPlan()
{
  return &type metadata for SDPersistenceMigrationPlan;
}

ValueMetadata *type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1()
{
  return &type metadata for SDPersistenceMigrationPlan.SDPersistenceSchemaV1;
}

uint64_t sub_100458B40()
{
  return type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable(0LL);
}

uint64_t sub_100458B48(uint64_t a1)
{
  v4[0] = (char *)&value witness table for () + 64;
  v4[1] = (char *)&value witness table for () + 64;
  v4[2] = (char *)&value witness table for () + 64;
  v4[3] = (char *)&value witness table for Builtin.Int8 + 64;
  v4[4] = (char *)&value witness table for Builtin.Int8 + 64;
  v4[5] = (char *)&value witness table for Builtin.Int8 + 64;
  v4[6] = (char *)&value witness table for Builtin.Int8 + 64;
  v4[7] = "(";
  uint64_t result = type metadata accessor for ObservationRegistrar(319LL);
  if (v3 <= 0x3F)
  {
    v4[8] = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 9LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable._SwiftDataNoType()
{
  return &type metadata for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable._SwiftDataNoType;
}

uint64_t sub_100458BF4()
{
  return type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice(0LL);
}

uint64_t sub_100458BFC(uint64_t a1)
{
  v4[0] = (char *)&value witness table for () + 64;
  v4[1] = (char *)&value witness table for () + 64;
  v4[2] = (char *)&value witness table for () + 64;
  v4[3] = (char *)&value witness table for () + 64;
  v4[4] = (char *)&value witness table for () + 64;
  v4[5] = (char *)&value witness table for () + 64;
  v4[6] = (char *)&value witness table for Builtin.Int8 + 64;
  v4[7] = (char *)&value witness table for () + 64;
  v4[8] = (char *)&value witness table for Builtin.Int8 + 64;
  void v4[9] = (char *)&value witness table for Builtin.Int8 + 64;
  v4[10] = (char *)&value witness table for () + 64;
  v4[11] = (char *)&value witness table for Builtin.Int8 + 64;
  v4[12] = "(";
  uint64_t result = type metadata accessor for ObservationRegistrar(319LL);
  if (v3 <= 0x3F)
  {
    v4[13] = *(void *)(result - 8) + 64LL;
    return swift_updateClassMetadata2(a1, 256LL, 14LL, v4, a1 + 80);
  }

  return result;
}

ValueMetadata *type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice._SwiftDataNoType()
{
  return &type metadata for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice._SwiftDataNoType;
}

uint64_t *destroy for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.DeviceIdentityContainer( uint64_t *result)
{
  uint64_t v1 = result;
  unint64_t v2 = result[1];
  if (v2 >> 60 != 15) {
    uint64_t result = (uint64_t *)sub_100402A84(*result, v2);
  }
  unint64_t v3 = v1[3];
  if (v3 >> 60 != 15) {
    uint64_t result = (uint64_t *)sub_100402A84(v1[2], v3);
  }
  unint64_t v4 = v1[6];
  if (v4 >> 60 != 15) {
    uint64_t result = (uint64_t *)sub_100402A84(v1[5], v4);
  }
  unint64_t v5 = v1[8];
  if (v5 >> 60 != 15) {
    uint64_t result = (uint64_t *)sub_100402A84(v1[7], v5);
  }
  unint64_t v6 = v1[10];
  if (v6 >> 60 != 15) {
    uint64_t result = (uint64_t *)sub_100402A84(v1[9], v6);
  }
  unint64_t v7 = v1[12];
  if (v7 >> 60 != 15) {
    return (uint64_t *)sub_100402A84(v1[11], v7);
  }
  return result;
}

uint64_t initializeWithCopy for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.DeviceIdentityContainer( uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = a2[1];
  if (v4 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }

  else
  {
    uint64_t v5 = *a2;
    sub_1004028CC(*a2, a2[1]);
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v4;
  }

  unint64_t v6 = a2 + 2;
  unint64_t v7 = a2[3];
  if (v7 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v6;
  }

  else
  {
    uint64_t v8 = *v6;
    sub_1004028CC(*v6, a2[3]);
    *(void *)(a1 + 16) = v8;
    *(void *)(a1 + 24) = v7;
  }

  *(_WORD *)(a1 + 3sub_10040A648(v1 + 2) = *((_WORD *)a2 + 16);
  *(_BYTE *)(a1 + 34) = *((_BYTE *)a2 + 34);
  uint64_t v9 = a2 + 5;
  unint64_t v10 = a2[6];
  if (v10 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 40) = *(_OWORD *)v9;
  }

  else
  {
    uint64_t v11 = *v9;
    sub_1004028CC(*v9, a2[6]);
    *(void *)(a1 + 40) = v11;
    *(void *)(a1 + 48) = v10;
  }

  uint64_t v12 = a2 + 7;
  unint64_t v13 = a2[8];
  if (v13 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 56) = *(_OWORD *)v12;
  }

  else
  {
    uint64_t v14 = *v12;
    sub_1004028CC(*v12, a2[8]);
    *(void *)(a1 + 56) = v14;
    *(void *)(a1 + 64) = v13;
  }

  uint64_t v15 = a2 + 9;
  unint64_t v16 = a2[10];
  if (v16 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 7sub_10040A648(v1 + 2) = *(_OWORD *)v15;
  }

  else
  {
    uint64_t v17 = *v15;
    sub_1004028CC(*v15, a2[10]);
    *(void *)(a1 + 7sub_10040A648(v1 + 2) = v17;
    *(void *)(a1 + 80) = v16;
  }

  uint64_t v18 = a2 + 11;
  unint64_t v19 = a2[12];
  if (v19 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 88) = *(_OWORD *)v18;
  }

  else
  {
    uint64_t v20 = *v18;
    sub_1004028CC(*v18, v19);
    *(void *)(a1 + 88) = v20;
    *(void *)(a1 + 96) = v19;
  }

  return a1;
}

uint64_t assignWithCopy for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.DeviceIdentityContainer( uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(void *)(a1 + 8) >> 60 == 15LL)
  {
    if (v4 >> 60 != 15)
    {
      uint64_t v5 = *(void *)a2;
      sub_1004028CC(*(void *)a2, *(void *)(a2 + 8));
      *(void *)a1 = v5;
      *(void *)(a1 + 8) = v4;
      goto LABEL_8;
    }

    goto LABEL_6;
  }

  if (v4 >> 60 == 15)
  {
    sub_100459204(a1);
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }

  uint64_t v6 = *(void *)a2;
  sub_1004028CC(*(void *)a2, *(void *)(a2 + 8));
  uint64_t v7 = *(void *)a1;
  unint64_t v8 = *(void *)(a1 + 8);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v4;
  sub_100402A84(v7, v8);
LABEL_8:
  uint64_t v9 = (uint64_t *)(a2 + 16);
  unint64_t v10 = *(void *)(a2 + 24);
  if (*(void *)(a1 + 24) >> 60 == 15LL)
  {
    if (v10 >> 60 != 15)
    {
      uint64_t v11 = *v9;
      sub_1004028CC(*v9, *(void *)(a2 + 24));
      *(void *)(a1 + 16) = v11;
      *(void *)(a1 + 24) = v10;
      goto LABEL_15;
    }

    goto LABEL_13;
  }

  if (v10 >> 60 == 15)
  {
    sub_100459204(a1 + 16);
LABEL_13:
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v9;
    goto LABEL_15;
  }

  uint64_t v12 = *v9;
  sub_1004028CC(*v9, *(void *)(a2 + 24));
  uint64_t v13 = *(void *)(a1 + 16);
  unint64_t v14 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = v12;
  *(void *)(a1 + 24) = v10;
  sub_100402A84(v13, v14);
LABEL_15:
  *(_WORD *)(a1 + 3sub_10040A648(v1 + 2) = *(_WORD *)(a2 + 32);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  uint64_t v15 = (uint64_t *)(a2 + 40);
  unint64_t v16 = *(void *)(a2 + 48);
  if (*(void *)(a1 + 48) >> 60 == 15LL)
  {
    if (v16 >> 60 != 15)
    {
      uint64_t v17 = *v15;
      sub_1004028CC(*v15, *(void *)(a2 + 48));
      *(void *)(a1 + 40) = v17;
      *(void *)(a1 + 48) = v16;
      goto LABEL_22;
    }

    goto LABEL_20;
  }

  if (v16 >> 60 == 15)
  {
    sub_100459204(a1 + 40);
LABEL_20:
    *(_OWORD *)(a1 + 40) = *(_OWORD *)v15;
    goto LABEL_22;
  }

  uint64_t v18 = *v15;
  sub_1004028CC(*v15, *(void *)(a2 + 48));
  uint64_t v19 = *(void *)(a1 + 40);
  unint64_t v20 = *(void *)(a1 + 48);
  *(void *)(a1 + 40) = v18;
  *(void *)(a1 + 48) = v16;
  sub_100402A84(v19, v20);
LABEL_22:
  __int128 v21 = (uint64_t *)(a2 + 56);
  unint64_t v22 = *(void *)(a2 + 64);
  if (*(void *)(a1 + 64) >> 60 == 15LL)
  {
    if (v22 >> 60 != 15)
    {
      uint64_t v23 = *v21;
      sub_1004028CC(*v21, *(void *)(a2 + 64));
      *(void *)(a1 + 56) = v23;
      *(void *)(a1 + 64) = v22;
      goto LABEL_29;
    }

    goto LABEL_27;
  }

  if (v22 >> 60 == 15)
  {
    sub_100459204(a1 + 56);
LABEL_27:
    *(_OWORD *)(a1 + 56) = *(_OWORD *)v21;
    goto LABEL_29;
  }

  uint64_t v24 = *v21;
  sub_1004028CC(*v21, *(void *)(a2 + 64));
  uint64_t v25 = *(void *)(a1 + 56);
  unint64_t v26 = *(void *)(a1 + 64);
  *(void *)(a1 + 56) = v24;
  *(void *)(a1 + 64) = v22;
  sub_100402A84(v25, v26);
LABEL_29:
  __int128 v27 = (uint64_t *)(a2 + 72);
  unint64_t v28 = *(void *)(a2 + 80);
  if (*(void *)(a1 + 80) >> 60 == 15LL)
  {
    if (v28 >> 60 != 15)
    {
      uint64_t v29 = *v27;
      sub_1004028CC(*v27, *(void *)(a2 + 80));
      *(void *)(a1 + 7sub_10040A648(v1 + 2) = v29;
      *(void *)(a1 + 80) = v28;
      goto LABEL_36;
    }

    goto LABEL_34;
  }

  if (v28 >> 60 == 15)
  {
    sub_100459204(a1 + 72);
LABEL_34:
    *(_OWORD *)(a1 + 7sub_10040A648(v1 + 2) = *(_OWORD *)v27;
    goto LABEL_36;
  }

  uint64_t v30 = *v27;
  sub_1004028CC(*v27, *(void *)(a2 + 80));
  uint64_t v31 = *(void *)(a1 + 72);
  unint64_t v32 = *(void *)(a1 + 80);
  *(void *)(a1 + 7sub_10040A648(v1 + 2) = v30;
  *(void *)(a1 + 80) = v28;
  sub_100402A84(v31, v32);
LABEL_36:
  uint64_t v33 = (uint64_t *)(a2 + 88);
  unint64_t v34 = *(void *)(a2 + 96);
  if (*(void *)(a1 + 96) >> 60 != 15LL)
  {
    if (v34 >> 60 != 15)
    {
      uint64_t v36 = *v33;
      sub_1004028CC(*v33, v34);
      uint64_t v37 = *(void *)(a1 + 88);
      unint64_t v38 = *(void *)(a1 + 96);
      *(void *)(a1 + 88) = v36;
      *(void *)(a1 + 96) = v34;
      sub_100402A84(v37, v38);
      return a1;
    }

    sub_100459204(a1 + 88);
    goto LABEL_41;
  }

  if (v34 >> 60 == 15)
  {
LABEL_41:
    *(_OWORD *)(a1 + 88) = *(_OWORD *)v33;
    return a1;
  }

  uint64_t v35 = *v33;
  sub_1004028CC(*v33, v34);
  *(void *)(a1 + 88) = v35;
  *(void *)(a1 + 96) = v34;
  return a1;
}

uint64_t sub_100459204(uint64_t a1)
{
  return a1;
}

__n128 initializeWithTake for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.DeviceIdentityContainer( uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 3sub_10040A648(v1 + 2) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  __int128 v5 = a2[4];
  __int128 v6 = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.DeviceIdentityContainer( uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v5 = *(void *)(a2 + 8);
  if (v5 >> 60 == 15)
  {
    sub_100459204(a1);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_6;
  }

  uint64_t v6 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  sub_100402A84(v6, v4);
LABEL_6:
  uint64_t v7 = (_OWORD *)(a2 + 16);
  unint64_t v8 = *(void *)(a1 + 24);
  if (v8 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)(a1 + 16) = *v7;
    goto LABEL_11;
  }

  unint64_t v9 = *(void *)(a2 + 24);
  if (v9 >> 60 == 15)
  {
    sub_100459204(a1 + 16);
    goto LABEL_9;
  }

  uint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)v7;
  *(void *)(a1 + 24) = v9;
  sub_100402A84(v10, v8);
LABEL_11:
  *(_WORD *)(a1 + 3sub_10040A648(v1 + 2) = *(_WORD *)(a2 + 32);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  uint64_t v11 = (_OWORD *)(a2 + 40);
  unint64_t v12 = *(void *)(a1 + 48);
  if (v12 >> 60 == 15)
  {
LABEL_14:
    *(_OWORD *)(a1 + 40) = *v11;
    goto LABEL_16;
  }

  unint64_t v13 = *(void *)(a2 + 48);
  if (v13 >> 60 == 15)
  {
    sub_100459204(a1 + 40);
    goto LABEL_14;
  }

  uint64_t v14 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = *(void *)v11;
  *(void *)(a1 + 48) = v13;
  sub_100402A84(v14, v12);
LABEL_16:
  uint64_t v15 = (_OWORD *)(a2 + 56);
  unint64_t v16 = *(void *)(a1 + 64);
  if (v16 >> 60 == 15)
  {
LABEL_19:
    *(_OWORD *)(a1 + 56) = *v15;
    goto LABEL_21;
  }

  unint64_t v17 = *(void *)(a2 + 64);
  if (v17 >> 60 == 15)
  {
    sub_100459204(a1 + 56);
    goto LABEL_19;
  }

  uint64_t v18 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = *(void *)v15;
  *(void *)(a1 + 64) = v17;
  sub_100402A84(v18, v16);
LABEL_21:
  uint64_t v19 = (_OWORD *)(a2 + 72);
  unint64_t v20 = *(void *)(a1 + 80);
  if (v20 >> 60 == 15)
  {
LABEL_24:
    *(_OWORD *)(a1 + 7sub_10040A648(v1 + 2) = *v19;
    goto LABEL_26;
  }

  unint64_t v21 = *(void *)(a2 + 80);
  if (v21 >> 60 == 15)
  {
    sub_100459204(a1 + 72);
    goto LABEL_24;
  }

  uint64_t v22 = *(void *)(a1 + 72);
  *(void *)(a1 + 7sub_10040A648(v1 + 2) = *(void *)v19;
  *(void *)(a1 + 80) = v21;
  sub_100402A84(v22, v20);
LABEL_26:
  uint64_t v23 = (void *)(a2 + 88);
  unint64_t v24 = *(void *)(a1 + 96);
  if (v24 >> 60 != 15)
  {
    unint64_t v25 = *(void *)(a2 + 96);
    if (v25 >> 60 != 15)
    {
      uint64_t v26 = *(void *)(a1 + 88);
      *(void *)(a1 + 88) = *v23;
      *(void *)(a1 + 96) = v25;
      sub_100402A84(v26, v24);
      return a1;
    }

    sub_100459204(a1 + 88);
  }

  *(_OWORD *)(a1 + 88) = *(_OWORD *)v23;
  return a1;
}

uint64_t getEnumTagSinglePayload for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.DeviceIdentityContainer( uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xC && *(_BYTE *)(a1 + 104)) {
    return (*(_DWORD *)a1 + 12);
  }
  uint64_t v3 = *(void *)(a1 + 8) >> 60;
  if (((4 * (_DWORD)v3) & 0xC) != 0) {
    int v4 = 14 - ((4 * v3) & 0xC | (v3 >> 2));
  }
  else {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.DeviceIdentityContainer( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xB)
  {
    *(_OWORD *)(result + 7sub_10040A648(v1 + 2) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 12;
    if (a3 >= 0xC) {
      *(_BYTE *)(result + 104) = 1;
    }
  }

  else
  {
    if (a3 >= 0xC) {
      *(_BYTE *)(result + 104) = 0;
    }
    if (a2)
    {
      *(void *)__n128 result = 0LL;
      *(void *)(result + 8) = (unint64_t)((4 * (a2 ^ 0xF)) | ((a2 ^ 0xF) >> 2)) << 60;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.DeviceIdentityContainer()
{
  return &type metadata for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.DeviceIdentityContainer;
}

uint64_t sub_100459534()
{
  return type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession(0LL);
}

uint64_t sub_10045953C(uint64_t a1)
{
  v4[0] = (char *)&value witness table for () + 64;
  v4[1] = (char *)&value witness table for () + 64;
  v4[2] = (char *)&value witness table for () + 64;
  v4[3] = (char *)&value witness table for () + 64;
  v4[4] = (char *)&value witness table for () + 64;
  v4[5] = (char *)&value witness table for () + 64;
  v4[6] = (char *)&value witness table for () + 64;
  v4[7] = (char *)&value witness table for () + 64;
  v4[8] = (char *)&value witness table for () + 64;
  void v4[9] = "(";
  uint64_t result = type metadata accessor for ObservationRegistrar(319LL);
  if (v3 <= 0x3F)
  {
    v4[10] = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 11LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession._SwiftDataNoType()
{
  return &type metadata for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession._SwiftDataNoType;
}

uint64_t sub_1004595E0()
{
  return type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDPublicIdentity(0LL);
}

uint64_t sub_1004595E8(uint64_t a1)
{
  v4[0] = (char *)&value witness table for () + 64;
  v4[1] = (char *)&value witness table for () + 64;
  v4[2] = (char *)&value witness table for () + 64;
  v4[3] = (char *)&value witness table for () + 64;
  v4[4] = (char *)&value witness table for () + 64;
  v4[5] = (char *)&value witness table for () + 64;
  v4[6] = "(";
  uint64_t result = type metadata accessor for ObservationRegistrar(319LL);
  if (v3 <= 0x3F)
  {
    v4[7] = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 8LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDPublicIdentity._SwiftDataNoType()
{
  return &type metadata for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDPublicIdentity._SwiftDataNoType;
}

uint64_t sub_100459688()
{
  return type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDShortHandle(0LL);
}

uint64_t sub_100459690(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100459790(a1, a2, a3, (uint64_t)&value witness table for Builtin.Int8 + 64);
}

ValueMetadata *type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDShortHandle._SwiftDataNoType()
{
  return &type metadata for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDShortHandle._SwiftDataNoType;
}

uint64_t sub_1004596B0()
{
  return type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution(0LL);
}

uint64_t sub_1004596B8(uint64_t a1)
{
  v4[0] = (char *)&value witness table for () + 64;
  v4[1] = (char *)&value witness table for () + 64;
  v4[2] = (char *)&value witness table for () + 64;
  v4[3] = (char *)&value witness table for () + 64;
  v4[4] = (char *)&value witness table for () + 64;
  v4[5] = (char *)&value witness table for () + 64;
  v4[6] = (char *)&value witness table for () + 64;
  v4[7] = (char *)&value witness table for () + 64;
  void v4[8] = (char *)&value witness table for () + 64;
  void v4[9] = (char *)&value witness table for () + 64;
  v4[10] = (char *)&value witness table for Builtin.Int8 + 64;
  void v4[11] = (char *)&value witness table for () + 64;
  v4[12] = (char *)&value witness table for () + 64;
  v4[13] = (char *)&value witness table for Builtin.Int8 + 64;
  void v4[14] = (char *)&value witness table for Builtin.Int8 + 64;
  v4[15] = (char *)&value witness table for Builtin.Int8 + 64;
  v4[16] = (char *)&value witness table for Builtin.Int8 + 64;
  v4[17] = (char *)&value witness table for Builtin.Int8 + 64;
  v4[18] = "(";
  uint64_t result = type metadata accessor for ObservationRegistrar(319LL);
  if (v3 <= 0x3F)
  {
    v4[19] = *(void *)(result - 8) + 64LL;
    return swift_updateClassMetadata2(a1, 256LL, 20LL, v4, a1 + 80);
  }

  return result;
}

ValueMetadata *type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution._SwiftDataNoType()
{
  return &type metadata for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution._SwiftDataNoType;
}

uint64_t sub_100459778()
{
  return type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSGroupEncryptionKeyRollIndex(0LL);
}

uint64_t sub_100459780(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100459790(a1, a2, a3, (uint64_t)&value witness table for () + 64);
}

uint64_t sub_100459790(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v7[0] = (char *)&value witness table for () + 64;
  v7[1] = (char *)&value witness table for () + 64;
  v7[2] = a4;
  v7[3] = "(";
  uint64_t result = type metadata accessor for ObservationRegistrar(319LL);
  if (v6 <= 0x3F)
  {
    v7[4] = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 5LL, v7, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSGroupEncryptionKeyRollIndex._SwiftDataNoType()
{
  return &type metadata for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSGroupEncryptionKeyRollIndex._SwiftDataNoType;
}

uint64_t sub_100459828()
{
  return type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSOffGridDeliveryDonatedHandle(0LL);
}

uint64_t sub_100459830(uint64_t a1)
{
  v4[0] = (char *)&value witness table for () + 64;
  v4[1] = (char *)&value witness table for () + 64;
  v4[2] = (char *)&value witness table for () + 64;
  v4[3] = (char *)&value witness table for () + 64;
  v4[4] = "(";
  uint64_t result = type metadata accessor for ObservationRegistrar(319LL);
  if (v3 <= 0x3F)
  {
    v4[5] = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 6LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSOffGridDeliveryDonatedHandle._SwiftDataNoType()
{
  return &type metadata for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSOffGridDeliveryDonatedHandle._SwiftDataNoType;
}

uint64_t sub_1004598CC()
{
  return type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSRegistrationEvent(0LL);
}

uint64_t sub_1004598D4(uint64_t a1)
{
  v4[0] = (char *)&value witness table for () + 64;
  v4[1] = (char *)&value witness table for () + 64;
  v4[2] = (char *)&value witness table for Builtin.Int8 + 64;
  v4[3] = (char *)&value witness table for () + 64;
  v4[4] = (char *)&value witness table for () + 64;
  v4[5] = (char *)&value witness table for () + 64;
  void v4[6] = (char *)&value witness table for Builtin.Int8 + 64;
  v4[7] = (char *)&value witness table for Builtin.Int8 + 64;
  void v4[8] = "(";
  uint64_t result = type metadata accessor for ObservationRegistrar(319LL);
  if (v3 <= 0x3F)
  {
    void v4[9] = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 10LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSRegistrationEvent._SwiftDataNoType()
{
  return &type metadata for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSRegistrationEvent._SwiftDataNoType;
}

uint64_t sub_100459984()
{
  return type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount(0LL);
}

uint64_t sub_10045998C(uint64_t a1)
{
  v4[0] = (char *)&value witness table for () + 64;
  v4[1] = (char *)&value witness table for () + 64;
  v4[2] = (char *)&value witness table for () + 64;
  v4[3] = (char *)&value witness table for () + 64;
  v4[4] = (char *)&value witness table for () + 64;
  v4[5] = (char *)&value witness table for () + 64;
  void v4[6] = (char *)&value witness table for () + 64;
  v4[7] = (char *)&value witness table for () + 64;
  void v4[8] = (char *)&value witness table for () + 64;
  void v4[9] = (char *)&value witness table for () + 64;
  void v4[10] = (char *)&value witness table for () + 64;
  void v4[11] = "(";
  uint64_t result = type metadata accessor for ObservationRegistrar(319LL);
  if (v3 <= 0x3F)
  {
    v4[12] = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 13LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount._SwiftDataNoType()
{
  return &type metadata for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount._SwiftDataNoType;
}

uint64_t getEnumTagSinglePayload for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.DeviceIdentityContainer.CodingKeys( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 7 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 7) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 7;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }

uint64_t storeEnumTagSinglePayload for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.DeviceIdentityContainer.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF8) {
    return ((uint64_t (*)(void))((char *)&loc_100459B10 + 4 * byte_10071918D[v4]))();
  }
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_100459B44 + 4 * byte_100719188[v4]))();
}

uint64_t sub_100459B44(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100459B4C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100459B54LL);
  }
  return result;
}

uint64_t sub_100459B60(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100459B68LL);
  }
  *(_BYTE *)uint64_t result = a2 + 7;
  return result;
}

uint64_t sub_100459B6C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100459B74(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_100459B80(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.DeviceIdentityContainer.CodingKeys()
{
  return &type metadata for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.DeviceIdentityContainer.CodingKeys;
}

unint64_t sub_100459B9C()
{
  unint64_t result = qword_1009C3D50[0];
  if (!qword_1009C3D50[0])
  {
    unint64_t result = swift_getWitnessTable( &unk_10071AFA8,  &type metadata for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.DeviceIdentityContainer.CodingKeys);
    atomic_store(result, qword_1009C3D50);
  }

  return result;
}

unint64_t sub_100459BE4()
{
  unint64_t result = qword_1009C3E60;
  if (!qword_1009C3E60)
  {
    unint64_t result = swift_getWitnessTable( &unk_10071AF18,  &type metadata for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.DeviceIdentityContainer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009C3E60);
  }

  return result;
}

unint64_t sub_100459C2C()
{
  unint64_t result = qword_1009C3E68[0];
  if (!qword_1009C3E68[0])
  {
    unint64_t result = swift_getWitnessTable( &unk_10071AF40,  &type metadata for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.DeviceIdentityContainer.CodingKeys);
    atomic_store(result, qword_1009C3E68);
  }

  return result;
}

uint64_t sub_100459C70()
{
  return sub_100459E40( (uint64_t)&unk_100719AA8,  (unint64_t *)&unk_1009BC920,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSOffGridDeliveryDonatedHandle,  (uint64_t)&unk_10071A6DC);
}

uint64_t sub_100459CA4()
{
  return sub_100459D74( (uint64_t)&unk_100719760,  &qword_1009B9FC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A4A4);
}

uint64_t sub_100459CD8()
{
  return sub_100459D74( (uint64_t)&unk_1007195F8,  &qword_1009B9F88,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDPublicIdentity,  (uint64_t)&unk_10071A26C);
}

uint64_t sub_100459D0C()
{
  return sub_100459D74( (uint64_t)&unk_100719490,  &qword_1009B9F70,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A150);
}

uint64_t sub_100459D40()
{
  return sub_100459D74( (uint64_t)&unk_1007192B0,  (unint64_t *)&unk_1009BC900,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A034);
}

uint64_t sub_100459D74(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v8 = *(void *)(v4 + 24);
  uint64_t v9 = *(void *)(v4 + 32);
  uint64_t KeyPath = swift_getKeyPath(a1);
  v14[0] = v8;
  v14[1] = v9;
  uint64_t v11 = sub_10040A2B0(a2, a3, a4);
  unint64_t v12 = sub_100451294();
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, v14, v11, v12);
  return swift_release(KeyPath);
}

uint64_t sub_100459E0C()
{
  return sub_100459E40( (uint64_t)&unk_100719198,  &qword_1009BC840,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable,  (uint64_t)&unk_100719F18);
}

uint64_t sub_100459E40(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v8 = *(void *)(v4 + 24);
  uint64_t v9 = *(void *)(v4 + 32);
  uint64_t KeyPath = swift_getKeyPath(a1);
  v13[0] = v8;
  v13[1] = v9;
  uint64_t v11 = sub_10040A2B0(a2, a3, a4);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, v13, v11, &protocol witness table for String);
  return swift_release(KeyPath);
}

uint64_t sub_100459ED4()
{
  return sub_100455A34();
}

uint64_t sub_100459EE8()
{
  return sub_100457F50();
}

uint64_t sub_100459EFC()
{
  return sub_100457F28();
}

uint64_t sub_100459F10()
{
  return sub_100457F00();
}

uint64_t sub_100459F24()
{
  return sub_100457ED8();
}

uint64_t sub_100459F38()
{
  return sub_100457EB0();
}

uint64_t sub_100459F4C()
{
  return sub_100457E88();
}

uint64_t sub_100459F60()
{
  return sub_100457E60();
}

uint64_t sub_100459F74()
{
  return sub_100457E38();
}

uint64_t sub_100459F88()
{
  return sub_100457E10();
}

uint64_t sub_100459F9C()
{
  return sub_100457DE8();
}

uint64_t sub_100459FB0()
{
  return sub_100457900();
}

uint64_t sub_100459FC4()
{
  return sub_1004578D8();
}

uint64_t sub_100459FD8()
{
  return sub_100457890();
}

uint64_t sub_100459FEC()
{
  return sub_100457848();
}

uint64_t sub_10045A000()
{
  return sub_1004577D4();
}

uint64_t sub_10045A014()
{
  return sub_100457538();
}

uint64_t sub_10045A028()
{
  return sub_1004570F4();
}

uint64_t sub_10045A03C()
{
  return sub_1004570C8();
}

uint64_t sub_10045A050()
{
  return sub_1004570A0();
}

uint64_t sub_10045A064()
{
  return sub_1004561B0();
}

uint64_t sub_10045A078()
{
  return sub_100456168();
}

uint64_t sub_10045A08C()
{
  return sub_100456120();
}

uint64_t sub_10045A0A0()
{
  return sub_10045608C();
}

uint64_t sub_10045A0B4()
{
  return sub_100456040();
}

uint64_t sub_10045A0C8()
{
  return sub_100455FF4();
}

uint64_t sub_10045A0DC()
{
  return sub_100455FAC();
}

uint64_t sub_10045A0F0()
{
  return sub_100455F60();
}

uint64_t sub_10045A104()
{
  return sub_100455F14();
}

uint64_t sub_10045A118()
{
  return sub_100455E80();
}

uint64_t sub_10045A12C()
{
  return sub_1004550C8();
}

uint64_t sub_10045A140()
{
  return sub_100454448();
}

uint64_t sub_10045A154()
{
  return sub_100454400();
}

uint64_t sub_10045A168()
{
  return sub_1004543B8();
}

uint64_t sub_10045A17C()
{
  return sub_1004523A4();
}

uint64_t sub_10045A190()
{
  return sub_10045223C();
}

uint64_t sub_10045A1A4()
{
  return sub_1004520D0();
}

uint64_t sub_10045A1B8()
{
  return sub_100452038();
}

uint64_t sub_10045A1CC()
{
  return sub_100451FEC();
}

uint64_t sub_10045A1E0()
{
  return sub_100451478();
}

uint64_t sub_10045A1F4()
{
  return sub_100457D9C();
}

uint64_t sub_10045A208()
{
  return sub_100457974();
}

uint64_t sub_10045A21C()
{
  return sub_100457928();
}

uint64_t sub_10045A230()
{
  return sub_1004577FC();
}

uint64_t sub_10045A244()
{
  return sub_1004574EC();
}

uint64_t sub_10045A258()
{
  return sub_1004574A0();
}

uint64_t sub_10045A26C()
{
  return sub_1004560D4();
}

uint64_t sub_10045A280()
{
  return sub_100455EC8();
}

uint64_t sub_10045A294()
{
  return sub_100455E34();
}

uint64_t sub_10045A2A8()
{
  return sub_100455DE8();
}

uint64_t sub_10045A2BC()
{
  return sub_100455D9C();
}

uint64_t sub_10045A2D0()
{
  return sub_100455D50();
}

uint64_t sub_10045A2E4()
{
  return sub_100455D04();
}

uint64_t sub_10045A2F8()
{
  return sub_100455924();
}

uint64_t sub_10045A30C()
{
  return sub_1004558D8();
}

uint64_t sub_10045A320()
{
  return sub_10045507C();
}

uint64_t sub_10045A334()
{
  return sub_100455030();
}

uint64_t sub_10045A348()
{
  return sub_100454FE4();
}

uint64_t sub_10045A35C()
{
  return sub_100454F98();
}

uint64_t sub_10045A370()
{
  return sub_10045436C();
}

uint64_t sub_10045A384()
{
  return sub_100454320();
}

uint64_t sub_10045A398()
{
  return sub_1004542D4();
}

uint64_t sub_10045A3AC()
{
  return sub_100454288();
}

uint64_t sub_10045A3C0()
{
  return sub_10045423C();
}

uint64_t sub_10045A3D4()
{
  return sub_100452168();
}

uint64_t sub_10045A3E8()
{
  return sub_10045211C();
}

uint64_t sub_10045A3FC()
{
  return sub_100452084();
}

uint64_t sub_10045A410()
{
  return sub_100451FA0();
}

uint64_t sub_10045A424()
{
  return sub_100451F54();
}

uint64_t sub_10045A438()
{
  return sub_100451F08();
}

uint64_t sub_10045A44C()
{
  return sub_100451384();
}

uint64_t sub_10045A460()
{
  return sub_100451248();
}

uint64_t sub_10045A474()
{
  return sub_1004511FC();
}

uint64_t sub_10045A488()
{
  return sub_100451150();
}

uint64_t sub_10045A49C()
{
  return sub_100451104();
}

CFIndex sub_10045A4B0()
{
  Boolean keyExistsAndHasValidFormat = 0;
  uint64_t v0 = (__CFString *)String._bridgeToObjectiveC()();
  __int16 v1 = (__CFString *)String._bridgeToObjectiveC()();
  CFIndex AppIntegerValue = CFPreferencesGetAppIntegerValue(v0, v1, &keyExistsAndHasValidFormat);

  if (keyExistsAndHasValidFormat) {
    return AppIntegerValue;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10045A55C()
{
  Boolean keyExistsAndHasValidFormat = 0;
  uint64_t v0 = (__CFString *)String._bridgeToObjectiveC()();
  __int16 v1 = (__CFString *)String._bridgeToObjectiveC()();
  int AppBooleanValue = CFPreferencesGetAppBooleanValue(v0, v1, &keyExistsAndHasValidFormat);

  if (keyExistsAndHasValidFormat) {
    return AppBooleanValue != 0;
  }
  else {
    return 2LL;
  }
}

uint64_t sub_10045A610()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 80LL))();
}

uint64_t sub_10045A630()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 88LL))();
}

id sub_10045A63C( uint64_t a1, char a2, char a3, char a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  id v21 = objc_allocWithZone(v10);
  return sub_10045A6DC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

id sub_10045A6DC( uint64_t a1, char a2, char a3, char a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  *(double *)&v10[OBJC_IVAR____TtC17identityservicesd31IDSGroupEncryptionConfiguration_previousPreKeyExpirationDuration] = a5;
  *(double *)&v10[OBJC_IVAR____TtC17identityservicesd31IDSGroupEncryptionConfiguration_preKeyExpirationDuration] = a6;
  *(double *)&v10[OBJC_IVAR____TtC17identityservicesd31IDSGroupEncryptionConfiguration_preKeyRequestDelayDuration] = a7;
  *(double *)&v10[OBJC_IVAR____TtC17identityservicesd31IDSGroupEncryptionConfiguration_preKeyRequestTimeout] = a8;
  *(double *)&v10[OBJC_IVAR____TtC17identityservicesd31IDSGroupEncryptionConfiguration_mkmExpirationDuration] = a9;
  *(double *)&v10[OBJC_IVAR____TtC17identityservicesd31IDSGroupEncryptionConfiguration_mkmRollDuration] = a10;
  *(void *)&v10[OBJC_IVAR____TtC17identityservicesd31IDSGroupEncryptionConfiguration_numberOfCachedMKMsToBroadcast] = a1;
  v10[OBJC_IVAR____TtC17identityservicesd31IDSGroupEncryptionConfiguration_allowQUICMaterialExchange] = a2;
  v10[OBJC_IVAR____TtC17identityservicesd31IDSGroupEncryptionConfiguration_allowPushMaterialExchange] = a3;
  v10[OBJC_IVAR____TtC17identityservicesd31IDSGroupEncryptionConfiguration_isRatchetEnabled] = a4;
  v12.receiver = v10;
  v12.super_class = (Class)type metadata accessor for IDSGroupEncryptionConfiguration();
  return objc_msgSendSuper2(&v12, "init");
}

uint64_t type metadata accessor for IDSGroupEncryptionConfiguration()
{
  return objc_opt_self(&OBJC_CLASS____TtC17identityservicesd31IDSGroupEncryptionConfiguration);
}

id sub_10045A85C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for IDSGroupEncryptionConfiguration();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for IDSGroupEncryptionConfigurationDefaults()
{
  return objc_opt_self(&OBJC_CLASS____TtC17identityservicesd39IDSGroupEncryptionConfigurationDefaults);
}

uint64_t sub_10045A8AC(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    swift_unknownObjectRetain(a1, a2);
    NSString v5 = String._bridgeToObjectiveC()();
    id v6 = [a1 objectForKey:v5];

    swift_unknownObjectRelease(a1, v7);
    if (v6)
    {
      _bridgeAnyObjectToAny(_:)(&v68, v6);
      swift_unknownObjectRelease(v6, v8);
    }

    else
    {
      __int128 v68 = 0u;
      __int128 v69 = 0u;
    }

    sub_10045B0E0((uint64_t)&v68, (uint64_t)&v70);
    if (*((void *)&v71 + 1))
    {
      int v13 = swift_dynamicCast(&v68, &v70, (char *)&type metadata for Any + 8, &type metadata for UInt, 6LL);
      unint64_t v15 = v68;
      if (!v13) {
        unint64_t v15 = 0LL;
      }
      unint64_t v66 = v15;
      int v16 = v13 ^ 1;
    }

    else
    {
      sub_10040E008((uint64_t)&v70);
      unint64_t v66 = 0LL;
      int v16 = 1;
    }

    int v65 = v16;
    swift_unknownObjectRetain(a1, v14);
    NSString v17 = String._bridgeToObjectiveC()();
    id v18 = [a1 objectForKey:v17];

    swift_unknownObjectRelease(a1, v19);
    if (v18)
    {
      _bridgeAnyObjectToAny(_:)(&v68, v18);
      swift_unknownObjectRelease(v18, v20);
    }

    else
    {
      __int128 v68 = 0u;
      __int128 v69 = 0u;
    }

    sub_10045B0E0((uint64_t)&v68, (uint64_t)&v70);
    if (*((void *)&v71 + 1))
    {
      int v21 = swift_dynamicCast(&v68, &v70, (char *)&type metadata for Any + 8, &type metadata for UInt, 6LL);
      unint64_t v23 = v68;
      if (!v21) {
        unint64_t v23 = 0LL;
      }
      unint64_t v64 = v23;
      int v24 = v21 ^ 1;
    }

    else
    {
      sub_10040E008((uint64_t)&v70);
      unint64_t v64 = 0LL;
      int v24 = 1;
    }

    int v63 = v24;
    swift_unknownObjectRetain(a1, v22);
    NSString v25 = String._bridgeToObjectiveC()();
    id v26 = [a1 objectForKey:v25];

    swift_unknownObjectRelease(a1, v27);
    if (v26)
    {
      _bridgeAnyObjectToAny(_:)(&v68, v26);
      swift_unknownObjectRelease(v26, v28);
    }

    else
    {
      __int128 v68 = 0u;
      __int128 v69 = 0u;
    }

    sub_10045B0E0((uint64_t)&v68, (uint64_t)&v70);
    if (*((void *)&v71 + 1))
    {
      int v29 = swift_dynamicCast(&v68, &v70, (char *)&type metadata for Any + 8, &type metadata for Double, 6LL);
      if (v29) {
        double v9 = *(double *)&v68;
      }
      else {
        double v9 = 0.0;
      }
      int v10 = v29 ^ 1;
    }

    else
    {
      sub_10040E008((uint64_t)&v70);
      double v9 = 0.0;
      int v10 = 1;
    }

    swift_unknownObjectRetain(a1, v30);
    NSString v31 = String._bridgeToObjectiveC()();
    id v32 = [a1 objectForKey:v31];

    swift_unknownObjectRelease(a1, v33);
    if (v32)
    {
      _bridgeAnyObjectToAny(_:)(&v68, v32);
      swift_unknownObjectRelease(v32, v34);
    }

    else
    {
      __int128 v68 = 0u;
      __int128 v69 = 0u;
    }

    sub_10045B0E0((uint64_t)&v68, (uint64_t)&v70);
    if (*((void *)&v71 + 1))
    {
      else {
        double v11 = 1200.0;
      }
    }

    else
    {
      sub_10040E008((uint64_t)&v70);
      double v11 = 1200.0;
    }

    swift_unknownObjectRetain(a1, v35);
    NSString v36 = String._bridgeToObjectiveC()();
    id v37 = [a1 objectForKey:v36];

    swift_unknownObjectRelease(a1, v38);
    if (v37)
    {
      _bridgeAnyObjectToAny(_:)(&v68, v37);
      swift_unknownObjectRelease(v37, v39);
    }

    else
    {
      __int128 v68 = 0u;
      __int128 v69 = 0u;
    }

    sub_10045B0E0((uint64_t)&v68, (uint64_t)&v70);
    if (*((void *)&v71 + 1))
    {
      else {
        double v12 = 600.0;
      }
    }

    else
    {
      sub_10040E008((uint64_t)&v70);
      double v12 = 600.0;
    }

    swift_unknownObjectRetain(a1, v40);
    NSString v41 = String._bridgeToObjectiveC()();
    id v42 = [a1 objectForKey:v41];

    swift_unknownObjectRelease(a1, v43);
    if (v42)
    {
      _bridgeAnyObjectToAny(_:)(&v68, v42);
      swift_unknownObjectRelease(v42, v44);
    }

    else
    {
      __int128 v68 = 0u;
      __int128 v69 = 0u;
    }

    sub_10045B0E0((uint64_t)&v68, (uint64_t)&v70);
    if (*((void *)&v71 + 1))
    {
      else {
        int v45 = 2;
      }
      goto LABEL_52;
    }
  }

  else
  {
    __int128 v70 = 0u;
    __int128 v71 = 0u;
    sub_10040E008((uint64_t)&v70);
    __int128 v70 = 0u;
    __int128 v71 = 0u;
    sub_10040E008((uint64_t)&v70);
    __int128 v70 = 0u;
    __int128 v71 = 0u;
    sub_10040E008((uint64_t)&v70);
    __int128 v70 = 0u;
    __int128 v71 = 0u;
    sub_10040E008((uint64_t)&v70);
    __int128 v70 = 0u;
    __int128 v71 = 0u;
    sub_10040E008((uint64_t)&v70);
    double v9 = 0.0;
    unint64_t v66 = 0LL;
    unint64_t v64 = 0LL;
    __int128 v70 = 0u;
    __int128 v71 = 0u;
    int v10 = 1;
    double v11 = 1200.0;
    double v12 = 600.0;
    int v65 = 1;
    int v63 = 1;
  }

  sub_10040E008((uint64_t)&v70);
  int v45 = 2;
LABEL_52:
  uint64_t v46 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t, unint64_t))(*(void *)a2 + 80LL))( 0x6C7070612E6D6F63LL,  0xED00007364692E65LL,  0xD000000000000015LL,  0x8000000100840A40LL);
  if (v46 >= 0) {
    uint64_t v48 = v46;
  }
  else {
    uint64_t v48 = v46 + 1;
  }
  uint64_t v49 = v48 >> 1;
  if ((v47 & 1) == 0)
  {
    double v12 = (double)v49;
    double v11 = (double)v46;
  }

  if (!a1)
  {
    __int128 v70 = 0u;
    __int128 v71 = 0u;
LABEL_65:
    sub_10040E008((uint64_t)&v70);
    goto LABEL_66;
  }

  swift_unknownObjectRetain(a1, v47);
  NSString v50 = String._bridgeToObjectiveC()();
  id v51 = [a1 objectForKey:v50];

  swift_unknownObjectRelease(a1, v52);
  if (v51)
  {
    _bridgeAnyObjectToAny(_:)(&v68, v51);
    swift_unknownObjectRelease(v51, v53);
  }

  else
  {
    __int128 v68 = 0u;
    __int128 v69 = 0u;
  }

  sub_10045B0E0((uint64_t)&v68, (uint64_t)&v70);
  if (!*((void *)&v71 + 1)) {
    goto LABEL_65;
  }
  if ((swift_dynamicCast(&v68, &v70, (char *)&type metadata for Any + 8, &type metadata for Int, 6LL) & 1) != 0)
  {
    uint64_t v54 = v68;
    goto LABEL_67;
  }

uint64_t sub_10045B0E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1003F5CB4(&qword_1009B92B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

id sub_10045B128()
{
  __int16 v1 = (id *)(v0 + OBJC_IVAR___IDSSenderKeyDistributionManager_persistenceManager);
  swift_beginAccess(v0 + OBJC_IVAR___IDSSenderKeyDistributionManager_persistenceManager, v3, 0LL, 0LL);
  return *v1;
}

void sub_10045B16C(void *a1)
{
  int v3 = (void **)(v1 + OBJC_IVAR___IDSSenderKeyDistributionManager_persistenceManager);
  swift_beginAccess(v3, v5, 1LL, 0LL);
  uint64_t v4 = *v3;
  void *v3 = a1;
}

uint64_t (*sub_10045B1BC(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

uint64_t sub_10045B200()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR___IDSSenderKeyDistributionManager_service);
  swift_beginAccess(v0 + OBJC_IVAR___IDSSenderKeyDistributionManager_service, v4, 0LL, 0LL);
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t sub_10045B254(uint64_t a1, uint64_t a2)
{
  NSString v5 = (void *)(v2 + OBJC_IVAR___IDSSenderKeyDistributionManager_service);
  swift_beginAccess(v5, v8, 1LL, 0LL);
  uint64_t v6 = v5[1];
  *NSString v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease(v6);
}

uint64_t (*sub_10045B2B0(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

void sub_10045B2F4()
{
  uint64_t v0 = (void *)objc_opt_self(&OBJC_CLASS___IDSPushHandler);
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 sharedInstanceWithPortName:v1];

  if (v2)
  {
    id v3 = [v2 pushToken];

    if (v3)
    {
      static Data._unconditionallyBridgeFromObjectiveC(_:)(v3);
    }
  }

  else
  {
    __break(1u);
  }

void *sub_10045B3BC()
{
  unint64_t result = [(id)objc_opt_self(IDSDAccountController) sharedInstance];
  if (!result)
  {
    __break(1u);
    goto LABEL_7;
  }

  id v2 = result;
  unint64_t result = [(id)objc_opt_self(IDSDServiceController) sharedInstance];
  if (!result)
  {
LABEL_7:
    __break(1u);
    return result;
  }

  id v3 = result;
  (*(void (**)(void))((swift_isaMask & *v0) + 0xC0LL))();
  uint64_t v5 = v4;
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v5);
  id v7 = [v3 serviceWithIdentifier:v6];

  id v8 = [v2 registeredAccountsOnService:v7];
  if (!v8) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v9 = sub_10041D3C4(0LL, (unint64_t *)&unk_1009BABE0, &off_1008F3650);
  uint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v8, v9);

  return (void *)v10;
}

void *sub_10045B4F8()
{
  return &unk_10071B118;
}

uint64_t sub_10045B504(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = OBJC_IVAR___IDSSenderKeyDistributionManager____lazy_storage___rollKeysTimer;
  uint64_t v4 = *(void *)&v2[OBJC_IVAR___IDSSenderKeyDistributionManager____lazy_storage___rollKeysTimer];
  if (v4)
  {
    uint64_t v5 = *(void *)&v2[OBJC_IVAR___IDSSenderKeyDistributionManager____lazy_storage___rollKeysTimer];
  }

  else
  {
    sub_10045B568(v2);
    uint64_t v5 = v6;
    uint64_t v7 = *(void *)&v2[v3];
    *(void *)&v2[v3] = v6;
    swift_unknownObjectRetain(v6, v8);
    swift_unknownObjectRelease(v7, v9);
    uint64_t v4 = 0LL;
  }

  swift_unknownObjectRetain(v4, a2);
  return v5;
}

void sub_10045B568(void *a1)
{
  uint64_t v53 = a1;
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v58 = *(void *)(v1 - 8);
  uint64_t v59 = v1;
  __chkstk_darwin(v2, v3);
  double v57 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v55 = *(void *)(v5 - 8);
  uint64_t v56 = v5;
  __chkstk_darwin(v6, v7);
  uint64_t v54 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v51 = *(void *)(v9 - 8);
  uint64_t v52 = v9;
  __chkstk_darwin(v10, v11);
  int v13 = (uint64_t *)((char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v14, v15);
  NSString v17 = (uint64_t *)((char *)&v49 - v16);
  uint64_t v18 = type metadata accessor for DispatchTime(0LL);
  uint64_t v49 = *(void *)(v18 - 8);
  uint64_t v50 = v18;
  __chkstk_darwin(v19, v20);
  char v60 = (char *)&v49 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = type metadata accessor for OS_dispatch_source.TimerFlags(0LL);
  uint64_t v23 = *(void *)(v22 - 8);
  __chkstk_darwin(v24, v25);
  uint64_t v27 = (char *)&v49 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = sub_10041D3C4(0LL, (unint64_t *)&unk_1009BB170, &OBJC_CLASS___OS_dispatch_source_ptr);
  id v30 = (id)im_primary_queue(v28, v29);
  aBlock[0] = &_swiftEmptyArrayStorage;
  uint64_t v31 = sub_10040A2B0( (unint64_t *)&unk_1009BC3E0,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_source.TimerFlags,  (uint64_t)&protocol conformance descriptor for OS_dispatch_source.TimerFlags);
  uint64_t v32 = sub_1003F5CB4((uint64_t *)&unk_1009BB180);
  uint64_t v33 = sub_10047E23C(&qword_1009BC3F0, (uint64_t *)&unk_1009BB180, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v32, v33, v22, v31);
  uint64_t v34 = static OS_dispatch_source.makeTimerSource(flags:queue:)(v27, v30);

  uint64_t v35 = v27;
  NSString v36 = v60;
  (*(void (**)(char *, uint64_t))(v23 + 8))(v35, v22);
  uint64_t ObjectType = swift_getObjectType(v34);
  static DispatchTime.now()(ObjectType);
  double v38 = sub_100478920();
  if ((~*(void *)&v38 & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }

  if (v38 <= -9.22337204e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  if (v38 < 9.22337204e18)
  {
    *NSString v17 = (uint64_t)v38;
    uint64_t v40 = v51;
    uint64_t v39 = v52;
    NSString v41 = *(void (**)(void *, void, uint64_t))(v51 + 104);
    v41(v17, enum case for DispatchTimeInterval.seconds(_:), v52);
    *int v13 = 0LL;
    v41(v13, enum case for DispatchTimeInterval.nanoseconds(_:), v39);
    OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v36, v17, v13, ObjectType);
    id v42 = *(void (**)(void *, uint64_t))(v40 + 8);
    v42(v13, v39);
    v42(v17, v39);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v36, v50);
    uint64_t v43 = swift_allocObject(&unk_100906B78, 24LL, 7LL);
    uint64_t v44 = v53;
    *(void *)(v43 + 16) = v53;
    aBlock[4] = sub_10047E27C;
    uint64_t v62 = v43;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1003F8400;
    aBlock[3] = &unk_100906B90;
    int v45 = _Block_copy(aBlock);
    id v46 = v44;
    uint64_t v47 = v54;
    static DispatchQoS.unspecified.getter(v46);
    uint64_t v48 = v57;
    sub_10045B964();
    OS_dispatch_source.setEventHandler(qos:flags:handler:)(v47, v48, v45, ObjectType);
    _Block_release(v45);
    (*(void (**)(char *, uint64_t))(v58 + 8))(v48, v59);
    (*(void (**)(char *, uint64_t))(v55 + 8))(v47, v56);
    swift_release(v62);
    return;
  }

uint64_t sub_10045B964()
{
  uint64_t v0 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v5 = &_swiftEmptyArrayStorage;
  uint64_t v1 = sub_10040A2B0( (unint64_t *)&unk_1009BAC40,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v2 = sub_1003F5CB4((uint64_t *)&unk_1009B9870);
  uint64_t v3 = sub_10047E23C( (unint64_t *)&qword_1009BAC50,  (uint64_t *)&unk_1009B9870,  (uint64_t)&protocol conformance descriptor for [A]);
  return dispatch thunk of SetAlgebra.init<A>(_:)(&v5, v2, v3, v0, v1);
}

uint64_t sub_10045BA18(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + OBJC_IVAR___IDSSenderKeyDistributionManager____lazy_storage___rollKeysTimer);
  *(void *)(v2 + OBJC_IVAR___IDSSenderKeyDistributionManager____lazy_storage___rollKeysTimer) = a1;
  return swift_unknownObjectRelease(v3, a2);
}

uint64_t (*sub_10045BA30(uint64_t *a1, uint64_t a2))(uint64_t *a1, uint64_t a2)
{
  a1[1] = v2;
  *a1 = sub_10045B504((uint64_t)a1, a2);
  return sub_10045BA64;
}

uint64_t sub_10045BA64(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = *(void *)(v2 + OBJC_IVAR___IDSSenderKeyDistributionManager____lazy_storage___rollKeysTimer);
  *(void *)(v2 + OBJC_IVAR___IDSSenderKeyDistributionManager____lazy_storage___rollKeysTimer) = v3;
  return swift_unknownObjectRelease(v4, a2);
}

id sub_10045BA7C()
{
  uint64_t v1 = OBJC_IVAR___IDSSenderKeyDistributionManager____lazy_storage___unsentRateLimiter;
  uint64_t v2 = *(void **)((char *)v0 + OBJC_IVAR___IDSSenderKeyDistributionManager____lazy_storage___unsentRateLimiter);
  if (v2)
  {
    id v3 = *(id *)((char *)v0 + OBJC_IVAR___IDSSenderKeyDistributionManager____lazy_storage___unsentRateLimiter);
LABEL_5:
    id v7 = v2;
    return v3;
  }

  uint64_t v4 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x2E8LL))();
  id result = [objc_allocWithZone(IDSRateLimiter) initWithLimit:v4 timeLimit:(*(double (**)(void))((swift_isaMask & *v0) + 0x2F0))()];
  if (result)
  {
    __n128 v6 = *(void **)((char *)v0 + v1);
    *(void *)((char *)v0 + v1) = result;
    id v3 = result;

    uint64_t v2 = 0LL;
    goto LABEL_5;
  }

  __break(1u);
  return result;
}

void sub_10045BB3C(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR___IDSSenderKeyDistributionManager____lazy_storage___unsentRateLimiter);
  *(void *)(v1 + OBJC_IVAR___IDSSenderKeyDistributionManager____lazy_storage___unsentRateLimiter) = a1;
}

void (*sub_10045BB50(id *a1))(uint64_t *a1, uint64_t a2)
{
  a1[1] = v1;
  *a1 = sub_10045BA7C();
  return sub_10045BB84;
}

void sub_10045BB84(uint64_t *a1, uint64_t a2)
{
}

id sub_10045BB90()
{
  uint64_t v1 = OBJC_IVAR___IDSSenderKeyDistributionManager____lazy_storage___iMessageReceiveRateLimiter;
  uint64_t v2 = *(void **)((char *)v0 + OBJC_IVAR___IDSSenderKeyDistributionManager____lazy_storage___iMessageReceiveRateLimiter);
  if (v2)
  {
    id v3 = *(id *)((char *)v0 + OBJC_IVAR___IDSSenderKeyDistributionManager____lazy_storage___iMessageReceiveRateLimiter);
LABEL_5:
    id v7 = v2;
    return v3;
  }

  uint64_t v4 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x2F8LL))();
  id result = [objc_allocWithZone(IDSRateLimiter) initWithLimit:v4 timeLimit:(*(double (**)(void))((swift_isaMask & *v0) + 0x300))()];
  if (result)
  {
    __n128 v6 = *(void **)((char *)v0 + v1);
    *(void *)((char *)v0 + v1) = result;
    id v3 = result;

    uint64_t v2 = 0LL;
    goto LABEL_5;
  }

  __break(1u);
  return result;
}

void sub_10045BC50(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR___IDSSenderKeyDistributionManager____lazy_storage___iMessageReceiveRateLimiter);
  *(void *)(v1 + OBJC_IVAR___IDSSenderKeyDistributionManager____lazy_storage___iMessageReceiveRateLimiter) = a1;
}

void (*sub_10045BC64(id *a1))(uint64_t *a1, uint64_t a2)
{
  a1[1] = v1;
  *a1 = sub_10045BB90();
  return sub_10045BC98;
}

void sub_10045BC98(uint64_t *a1, uint64_t a2)
{
}

id sub_10045BCA4()
{
  uint64_t v1 = OBJC_IVAR___IDSSenderKeyDistributionManager____lazy_storage___lastActiveRateLimiter;
  uint64_t v2 = *(void **)((char *)v0 + OBJC_IVAR___IDSSenderKeyDistributionManager____lazy_storage___lastActiveRateLimiter);
  if (v2)
  {
    id v3 = *(id *)((char *)v0 + OBJC_IVAR___IDSSenderKeyDistributionManager____lazy_storage___lastActiveRateLimiter);
LABEL_5:
    id v7 = v2;
    return v3;
  }

  uint64_t v4 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x308LL))();
  id result = [objc_allocWithZone(IDSRateLimiter) initWithLimit:v4 timeLimit:(*(double (**)(void))((swift_isaMask & *v0) + 0x310))()];
  if (result)
  {
    __n128 v6 = *(void **)((char *)v0 + v1);
    *(void *)((char *)v0 + v1) = result;
    id v3 = result;

    uint64_t v2 = 0LL;
    goto LABEL_5;
  }

  __break(1u);
  return result;
}

void sub_10045BD64(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR___IDSSenderKeyDistributionManager____lazy_storage___lastActiveRateLimiter);
  *(void *)(v1 + OBJC_IVAR___IDSSenderKeyDistributionManager____lazy_storage___lastActiveRateLimiter) = a1;
}

void (*sub_10045BD78(id *a1))(uint64_t *a1, uint64_t a2)
{
  a1[1] = v1;
  *a1 = sub_10045BCA4();
  return sub_10045BDAC;
}

void sub_10045BDAC(uint64_t *a1, uint64_t a2)
{
}

id sub_10045BDB8()
{
  uint64_t v1 = OBJC_IVAR___IDSSenderKeyDistributionManager____lazy_storage___lastIMessagedRateLimiter;
  uint64_t v2 = *(void **)((char *)v0 + OBJC_IVAR___IDSSenderKeyDistributionManager____lazy_storage___lastIMessagedRateLimiter);
  if (v2)
  {
    id v3 = *(id *)((char *)v0 + OBJC_IVAR___IDSSenderKeyDistributionManager____lazy_storage___lastIMessagedRateLimiter);
LABEL_5:
    id v7 = v2;
    return v3;
  }

  uint64_t v4 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x320LL))();
  id result = [objc_allocWithZone(IDSRateLimiter) initWithLimit:v4 timeLimit:(*(double (**)(void))((swift_isaMask & *v0) + 0x328))()];
  if (result)
  {
    __n128 v6 = *(void **)((char *)v0 + v1);
    *(void *)((char *)v0 + v1) = result;
    id v3 = result;

    uint64_t v2 = 0LL;
    goto LABEL_5;
  }

  __break(1u);
  return result;
}

void sub_10045BE78(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + OBJC_IVAR___IDSSenderKeyDistributionManager____lazy_storage___lastIMessagedRateLimiter);
  *(void *)(v1 + OBJC_IVAR___IDSSenderKeyDistributionManager____lazy_storage___lastIMessagedRateLimiter) = a1;
}

void (*sub_10045BE8C(id *a1))(uint64_t *a1, uint64_t a2)
{
  a1[1] = v1;
  *a1 = sub_10045BDB8();
  return sub_10045BEC0;
}

void sub_10045BEC0(uint64_t *a1, uint64_t a2)
{
}

void sub_10045BECC(uint64_t *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = *(void **)(v3 + *a3);
  *(void *)(v3 + *asub_10040A648(v1 + 3) = v4;
}

unint64_t sub_10045BEE0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_1003F5CB4(&qword_1009BB158);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  __n128 v6 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v7 = *v6;
    id v8 = (id)*(v6 - 1);
    swift_bridgeObjectRetain(v7);
    unint64_t result = sub_100433024((uint64_t)v8);
    if ((v10 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v11 = 8 * result;
    *(void *)(v4[6] + v11) = v8;
    *(void *)(v4[7] + v11) = v7;
    uint64_t v12 = v4[2];
    BOOL v13 = __OFADD__(v12, 1LL);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v4[2] = v14;
    v6 += 2;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10045BFE8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_1003F5CB4(&qword_1009BB110);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  __n128 v6 = (void *)(a1 + 48);
  while (1)
  {
    __int128 v15 = *((_OWORD *)v6 - 1);
    uint64_t v7 = *v6;
    id v8 = (id)v15;
    id v9 = *((id *)&v15 + 1);
    swift_retain(v7);
    unint64_t result = sub_10046D590(v8, v9);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    *(_OWORD *)(v4[6] + 16 * result) = v15;
    *(void *)(v4[7] + 8 * result) = v7;
    uint64_t v12 = v4[2];
    BOOL v13 = __OFADD__(v12, 1LL);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v4[2] = v14;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10045C120(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_1003F5CB4(&qword_1009BB0E8);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  __n128 v6 = (void **)(a1 + 48);
  while (1)
  {
    uint64_t v7 = (uint64_t)*(v6 - 2);
    uint64_t v8 = (uint64_t)*(v6 - 1);
    id v9 = *v6;
    swift_bridgeObjectRetain(v8);
    id v10 = v9;
    unint64_t result = sub_100417D94(v7, v8);
    if ((v12 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    BOOL v13 = (uint64_t *)(v4[6] + 16 * result);
    *BOOL v13 = v7;
    v13[1] = v8;
    *(void *)(v4[7] + 8 * result) = v10;
    uint64_t v14 = v4[2];
    BOOL v15 = __OFADD__(v14, 1LL);
    uint64_t v16 = v14 + 1;
    if (v15) {
      goto LABEL_11;
    }
    v4[2] = v16;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10045C238(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_1003F5CB4(&qword_1009BB090);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  __n128 v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v7 = *(v6 - 2);
    uint64_t v8 = *(v6 - 1);
    uint64_t v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_unknownObjectRetain(v9, v10);
    unint64_t result = sub_100417D94(v7, v8);
    if ((v12 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    BOOL v13 = (uint64_t *)(v4[6] + 16 * result);
    *BOOL v13 = v7;
    v13[1] = v8;
    *(void *)(v4[7] + 8 * result) = v9;
    uint64_t v14 = v4[2];
    BOOL v15 = __OFADD__(v14, 1LL);
    uint64_t v16 = v14 + 1;
    if (v15) {
      goto LABEL_11;
    }
    v4[2] = v16;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

id sub_10045C350@<X0>(void *a1@<X8>)
{
  return sub_10045C388(&OBJC_CLASS___IMSystemMonitor_ptr, &qword_1009BABD0, (uint64_t)&off_1009064E8, a1);
}

id sub_10045C36C@<X0>(void *a1@<X8>)
{
  return sub_10045C388(&off_1008F3A18, &qword_1009BABD8, (uint64_t)&off_100906508, a1);
}

id sub_10045C388@<X0>(void *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  id result = [(id)objc_opt_self(*a1) sharedInstance];
  if (result)
  {
    id v9 = result;
    id result = (id)sub_10041D3C4(0LL, a2, a1);
    a4[3] = result;
    a4[4] = a3;
    *a4 = v9;
  }

  else
  {
    __break(1u);
  }

  return result;
}

void *sub_10045C400(void *a1, uint64_t a2, unint64_t a3)
{
  id v7 = objc_allocWithZone(v3);
  return sub_10045C448(a1, a2, a3);
}

void *sub_10045C448(void *a1, uint64_t a2, unint64_t a3)
{
  void (*v17)(uint64_t *__return_ptr);
  uint64_t v18;
  uint64_t v19;
  void (*v20)(void *, uint64_t, uint64_t);
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(void *, uint64_t, uint64_t);
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  os_log_s *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  char *v43;
  uint64_t v46;
  uint64_t v47[3];
  uint64_t v48;
  uint64_t v49;
  objc_super v50;
  uint64_t v5 = &v3[OBJC_IVAR___IDSSenderKeyDistributionManager_logger];
  __n128 v6 = v3;
  uint64_t v43 = v5;
  sub_10048ADB4(0xAu);
  uint64_t v7 = OBJC_IVAR___IDSSenderKeyDistributionManager____lazy_storage___rollKeysTimer;
  *(void *)&v6[OBJC_IVAR___IDSSenderKeyDistributionManager____lazy_storage___rollKeysTimer] = 0LL;
  uint64_t v8 = OBJC_IVAR___IDSSenderKeyDistributionManager____lazy_storage___unsentRateLimiter;
  *(void *)&v6[OBJC_IVAR___IDSSenderKeyDistributionManager____lazy_storage___unsentRateLimiter] = 0LL;
  uint64_t v9 = OBJC_IVAR___IDSSenderKeyDistributionManager____lazy_storage___iMessageReceiveRateLimiter;
  *(void *)&v6[OBJC_IVAR___IDSSenderKeyDistributionManager____lazy_storage___iMessageReceiveRateLimiter] = 0LL;
  uint64_t v10 = OBJC_IVAR___IDSSenderKeyDistributionManager____lazy_storage___lastActiveRateLimiter;
  *(void *)&v6[OBJC_IVAR___IDSSenderKeyDistributionManager____lazy_storage___lastActiveRateLimiter] = 0LL;
  uint64_t v11 = OBJC_IVAR___IDSSenderKeyDistributionManager____lazy_storage___lastIMessagedRateLimiter;
  *(void *)&v6[OBJC_IVAR___IDSSenderKeyDistributionManager____lazy_storage___lastIMessagedRateLimiter] = 0LL;
  id v42 = OBJC_IVAR___IDSSenderKeyDistributionManager_recoveryWorkItems;
  *(void *)&v6[v42] = sub_10045BFE8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v12 = OBJC_IVAR___IDSSenderKeyDistributionManager_deviceUpdateWorkItems;
  *(void *)&v6[v12] = sub_10045BFE8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v13 = OBJC_IVAR___IDSSenderKeyDistributionManager_firstDataProtectionLockQueue;
  *(void *)&v6[OBJC_IVAR___IDSSenderKeyDistributionManager_firstDataProtectionLockQueue] = _swiftEmptyArrayStorage;
  if (a1)
  {
    *(void *)&v6[OBJC_IVAR___IDSSenderKeyDistributionManager_persistenceManager] = a1;
    uint64_t v14 = (uint64_t *)&v6[OBJC_IVAR___IDSSenderKeyDistributionManager_service];
    *uint64_t v14 = a2;
    v14[1] = a3;
    BOOL v15 = a1;
    swift_bridgeObjectRetain(a3);

    v50.receiver = v6;
    v50.super_class = (Class)type metadata accessor for SenderKeyDistributionManager(0LL);
    uint64_t v16 = objc_msgSendSuper2(&v50, "init");
    NSString v17 = *(void (**)(uint64_t *__return_ptr))((swift_isaMask & *v16) + 0x190LL);
    a1 = v16;
    v17(v47);
    uint64_t v18 = v48;
    __n128 v19 = v49;
    sub_10040A238(v47, v48);
    __n128 v20 = *(void (**)(void *, uint64_t, uint64_t))(v19 + 8);
    uint64_t v21 = a1;
    v20(a1, v18, v19);

    uint64_t v22 = sub_10040A648(v47);
    (*(void (**)(uint64_t *__return_ptr, uint64_t))((swift_isaMask & *v21) + 0x1B0LL))(v47, v22);
    uint64_t v23 = v48;
    __n128 v24 = v49;
    sub_10040A238(v47, v48);
    __n128 v25 = *(void (**)(void *, uint64_t, uint64_t))(v24 + 8);
    uint64_t v26 = v21;
    v25(a1, v23, v24);

    sub_10040A648(v47);
    uint64_t v27 = swift_allocObject(&unk_1009061D8, 24LL, 7LL);
    swift_unknownObjectWeakInit(v27 + 16, v26);
    uint64_t v28 = swift_retain(v27);
    id v30 = sub_100481CA8(v28, v29);
    registerSysdiagnoseBlock(title:queue:block:)( 0x646E65532D534449LL,  0xEE0079654B2D7265LL,  (uint64_t)v30,  (uint64_t)sub_10046A1A4,  v27);

    swift_release_n(v27, 2LL);
    swift_bridgeObjectRetain(a3);
    uint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
    uint64_t v33 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v35 = swift_slowAlloc(32LL, -1LL);
      v47[0] = v35;
      *(_DWORD *)uint64_t v34 = 136315138;
      swift_bridgeObjectRetain(a3);
      id v46 = sub_1003FFBB0(a2, a3, v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, v47, v34 + 4, v34 + 12);
      swift_bridgeObjectRelease_n(a3, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v32,  v33,  "Successfully initialized SenderKeyDistributionManager with service %s",  v34,  0xCu);
      swift_arrayDestroy(v35, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1LL, -1LL);
      swift_slowDealloc(v34, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(a3, 2LL);
    }

    uint64_t v39 = (*(uint64_t (**)(void))((swift_isaMask & *v26) + 0xE8LL))();
    swift_getObjectType(v39);
    OS_dispatch_source.resume()();

    swift_unknownObjectRelease(v39, v40);
  }

  else
  {
    swift_bridgeObjectRelease(a3);
    NSString v36 = type metadata accessor for Logger(0LL);
    (*(void (**)(char *, uint64_t))(*(void *)(v36 - 8) + 8LL))(v43, v36);
    swift_unknownObjectRelease(*(void *)&v6[v7], v37);

    swift_bridgeObjectRelease(*(void *)&v6[v42]);
    swift_bridgeObjectRelease(*(void *)&v6[v12]);
    swift_bridgeObjectRelease(*(void *)&v6[v13]);

    double v38 = type metadata accessor for SenderKeyDistributionManager(0LL);
    swift_deallocPartialClassInstance( v6,  v38,  *(unsigned int *)((swift_isaMask & *(void *)v6) + 0x30LL),  *(unsigned __int16 *)((swift_isaMask & *(void *)v6) + 0x34LL));
  }

  return a1;
}

uint64_t type metadata accessor for SenderKeyDistributionManager(uint64_t a1)
{
  return sub_100402020( a1,  (uint64_t *)&unk_1009C4E80,  (uint64_t)&nominal type descriptor for SenderKeyDistributionManager);
}

uint64_t sub_10045C8E0()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

id sub_10045C950()
{
  (*(void (**)(void *__return_ptr))((swift_isaMask & *v0) + 0x190LL))(v12);
  uint64_t v1 = v13;
  uint64_t v2 = v14;
  sub_10040A238(v12, v13);
  uint64_t v3 = *(void (**)(void *, uint64_t, uint64_t))(v2 + 16);
  uint64_t v4 = v0;
  v3(v0, v1, v2);

  uint64_t v5 = sub_10040A648(v12);
  (*(void (**)(void *__return_ptr, uint64_t))((swift_isaMask & *v4) + 0x1B0LL))(v12, v5);
  uint64_t v6 = v13;
  uint64_t v7 = v14;
  sub_10040A238(v12, v13);
  uint64_t v8 = *(void (**)(void *, uint64_t, uint64_t))(v7 + 16);
  uint64_t v9 = v4;
  v8(v0, v6, v7);

  sub_10040A648(v12);
  v11.receiver = v9;
  v11.super_class = (Class)type metadata accessor for SenderKeyDistributionManager(0LL);
  return objc_msgSendSuper2(&v11, "dealloc");
}

id sub_10045CB64(uint64_t a1)
{
  uint64_t v2 = (void *)objc_opt_self(&OBJC_CLASS___IDSQueryUtilities);
  uint64_t v3 = sub_10045B3BC();
  sub_10041D3C4(0LL, (unint64_t *)&unk_1009BABE0, &off_1008F3650);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v3);
  sub_10041D3C4(0LL, (unint64_t *)&unk_1009BC270, &OBJC_CLASS___IDSURI_ptr);
  Class v5 = Array._bridgeToObjectiveC()().super.isa;
  id v6 = [v2 accountToQueryFrom:isa fromURI:a1 destinationURIs:v5 allowLocalAccount:0];

  return v6;
}

uint64_t sub_10045CC3C( void *a1, uint64_t a2, void *a3, int64_t a4, uint64_t a5, uint64_t a6, void *a7, void (*a8)(__n128), uint64_t a9)
{
  v119._countAndFlagsBits = a6;
  v119._object = a7;
  uint64_t v12 = swift_allocObject(&unk_100906200, 24LL, 7LL);
  *(void *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_10045BEE0((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v148 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v122 = swift_allocObject(&unk_100906228, 24LL, 7LL);
  *(void *)(v122 + swift_unknownObjectWeakDestroy(v0 + 16) = _swiftEmptyArrayStorage;
  v123 = (uint64_t *)(v122 + 16);
  uint64_t v13 = sub_1003F5CB4((uint64_t *)&unk_1009BABF0);
  uint64_t inited = swift_initStackObject(v13, v147);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10071B0D0;
  *(void *)(inited + 3sub_10040A648(v1 + 2) = a3;
  unint64_t aBlock = inited;
  specialized Array._endMutation()(inited);
  id v129 = a3;
  swift_bridgeObjectRetain(a2);
  sub_1004694BC(v15, (uint64_t (*)(uint64_t, void, uint64_t))sub_1004776D8);
  int64_t v16 = aBlock;
  if (aBlock >> 62) {
    goto LABEL_70;
  }
  uint64_t v17 = *(void *)((aBlock & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (1)
  {
    uint64_t v136 = v12;
    int64_t v128 = a4;
    if (!v17) {
      break;
    }
    int64_t v126 = v16;
    id v127 = (id)objc_opt_self(&OBJC_CLASS___IDSIDStatusQueryController);
    unint64_t v130 = v16 & 0xC000000000000001LL;
    uint64_t v18 = 4LL;
    id v124 = (id)v17;
    while (1)
    {
      id v22 = v130
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v18 - 4, v16)
          : *(id *)(v16 + 8 * v18);
      uint64_t v23 = v22;
      uint64_t v12 = (uint64_t)v129;
      if (__OFADD__(v18 - 4, 1LL)) {
        break;
      }
      id v132 = (id)(v18 - 3);
      id v24 = [v127 sharedInstance];
      if (!v24)
      {
        __break(1u);
LABEL_82:
        __break(1u);
LABEL_83:
        __break(1u);
        goto LABEL_84;
      }

      __n128 v25 = v24;
      id v26 = v23;
      NSString v27 = String._bridgeToObjectiveC()();
      unsigned int v28 = [v25 cachedIDStatusForID:v26 fromURI:v129 fromService:v27 respectExpiry:1];

      id v29 = [(id)objc_opt_self(IDSPeerIDManager) sharedInstance];
      if (!v29) {
        goto LABEL_82;
      }
      id v30 = v29;
      id v31 = v26;
      NSString v32 = String._bridgeToObjectiveC()();
      unsigned __int8 v33 = [v30 hasPeerTokensForURI:v31 fromURI:v129 service:v32];

      id v34 = v31;
      uint64_t v35 = v34;
      if ((v33 & 1) != 0 || v28 == 2)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v34);
        unint64_t v20 = *(void *)((v148 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        unint64_t v19 = *(void *)((v148 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        if (v20 >= v19 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1LL);
        }
      }

      else
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v34);
        unint64_t v20 = *(void *)((*v123 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        unint64_t v36 = *(void *)((*v123 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        if (v20 >= v36 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v20 + 1, 1LL);
        }
      }

      uint64_t v21 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v20, v35);
      uint64_t v12 = v136;
      a4 = v128;
      specialized Array._endMutation()(v21);

      ++v18;
      int64_t v16 = v126;
      if (v132 == v124) {
        goto LABEL_19;
      }
    }

uint64_t sub_10045D7D4(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v3 = 0x657571655279656BLL;
    }
    else {
      unint64_t v3 = 0xD000000000000012LL;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xEA00000000007473LL;
    }
    else {
      unint64_t v4 = 0x8000000100840CC0LL;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        unint64_t v6 = 0x657571655279656BLL;
      }
      else {
        unint64_t v6 = 0xD000000000000012LL;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xEA00000000007473LL;
      }
      else {
        unint64_t v7 = 0x8000000100840CC0LL;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }

  else
  {
    unint64_t v3 = 0x727473694479656BLL;
    unint64_t v4 = 0xEF6E6F6974756269LL;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }

  unint64_t v6 = 0x727473694479656BLL;
  unint64_t v7 = 0xEF6E6F6974756269LL;
  if (v3 != 0x727473694479656BLL)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v6, v7, 0LL);
    goto LABEL_22;
  }

uint64_t sub_10045D900(char a1, char a2)
{
  uint64_t v2 = 8LL * a1;
  uint64_t v3 = *(void *)&aVersion_3[v2];
  uint64_t v4 = *(void *)&aMessagetkeyinf[v2 + 24];
  uint64_t v5 = 8LL * a2;
  uint64_t v6 = *(void *)&aVersion_3[v5];
  uint64_t v7 = *(void *)&aMessagetkeyinf[v5 + 24];
  if (v3 == v6 && v4 == v7) {
    char v9 = 1;
  }
  else {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v6, *(void *)&aMessagetkeyinf[8 * a2 + 24], 0LL);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v7);
  return v9 & 1;
}

uint64_t sub_10045D984(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v26 = *(void *)(type metadata accessor for SenderKeyInfo(0LL) - 8);
  __chkstk_darwin(v7, v8);
  uint64_t v25 = (uint64_t)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = __chkstk_darwin(v10, v11);
  uint64_t v14 = (char *)v22 - v13;
  uint64_t v15 = _swiftEmptyArrayStorage;
  NSString v27 = _swiftEmptyArrayStorage;
  uint64_t v24 = *(void *)(a3 + 16);
  if (v24)
  {
    unint64_t v16 = 0LL;
    uint64_t v17 = _swiftEmptyArrayStorage;
    v22[1] = a2;
    uint64_t v23 = a3;
    v22[0] = a1;
    while (v16 < *(void *)(a3 + 16))
    {
      unint64_t v18 = (*(unsigned __int8 *)(v26 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
      uint64_t v15 = *(void **)(v26 + 72);
      sub_1003F5FC8(a3 + v18 + (void)v15 * v16, (uint64_t)v14, type metadata accessor for SenderKeyInfo);
      char v19 = a1(v14);
      if (v3)
      {
        sub_1003F6050((uint64_t)v14, type metadata accessor for SenderKeyInfo);
        swift_release(v17);
        swift_bridgeObjectRelease(a3);
        return (uint64_t)v15;
      }

      if ((v19 & 1) != 0)
      {
        sub_1003F600C((uint64_t)v14, v25, type metadata accessor for SenderKeyInfo);
        if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0) {
          sub_10046EA38(0, v17[2] + 1LL, 1);
        }
        uint64_t v17 = v27;
        unint64_t v21 = v27[2];
        unint64_t v20 = v27[3];
        if (v21 >= v20 >> 1)
        {
          sub_10046EA38(v20 > 1, v21 + 1, 1);
          uint64_t v17 = v27;
        }

        v17[2] = v21 + 1;
        uint64_t result = sub_1003F600C(v25, (uint64_t)v17 + v18 + v21 * (void)v15, type metadata accessor for SenderKeyInfo);
        a3 = v23;
        a1 = (uint64_t (*)(char *))v22[0];
      }

      else
      {
        uint64_t result = sub_1003F6050((uint64_t)v14, type metadata accessor for SenderKeyInfo);
      }

      if (v24 == ++v16)
      {
        uint64_t v15 = v27;
        goto LABEL_15;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_15:
    swift_bridgeObjectRelease(a3);
    return (uint64_t)v15;
  }

  return result;
}

uint64_t sub_10045DB9C( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, unsigned int a8, uint64_t a9)
{
  uint64_t v11 = a4;
  uint64_t v12 = a9;
  uint64_t v13 = *(void *)(a1 + 40);
  unint64_t v36 = *(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, void, uint64_t))(a1 + 32);
  if (a3)
  {
    uint64_t v15 = sub_10041D3C4(0LL, (unint64_t *)&unk_1009BC270, &OBJC_CLASS___IDSURI_ptr);
    uint64_t v16 = sub_10041D3C4(0LL, (unint64_t *)&unk_1009BACA0, &OBJC_CLASS___NSNumber_ptr);
    uint64_t v17 = sub_100438928( (unint64_t *)&unk_1009BAC00,  (unint64_t *)&unk_1009BC270,  &OBJC_CLASS___IDSURI_ptr);
    uint64_t v34 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a3, v15, v16, v17);
    if (!v11) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }

  uint64_t v34 = 0LL;
  if (a4)
  {
LABEL_3:
    uint64_t v18 = sub_10041D3C4(0LL, (unint64_t *)&unk_1009BC270, &OBJC_CLASS___IDSURI_ptr);
    uint64_t v19 = sub_10041D3C4(0LL, (unint64_t *)&unk_1009BACA0, &OBJC_CLASS___NSNumber_ptr);
    uint64_t v20 = sub_100438928( (unint64_t *)&unk_1009BAC00,  (unint64_t *)&unk_1009BC270,  &OBJC_CLASS___IDSURI_ptr);
    uint64_t v11 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v11, v18, v19, v20);
  }

uint64_t sub_10045DE5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void *, uint64_t, uint64_t))((swift_isaMask & *v6) + 0x1D8LL))( a1,  a2,  a3,  a4,  0LL,  &_swiftEmptyArrayStorage,  a5,  a6);
}

id sub_10045DF9C( uint64_t a1, void *a2, uint64_t a3, unint64_t a4, char a5, uint64_t a6, uint64_t (*a7)(void), uint64_t a8)
{
  void (*v50)(uint64_t *__return_ptr);
  void *v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  char **v59;
  char *v60;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  os_log_s *v66;
  os_log_type_t v67;
  uint8_t *v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  os_log_type_t v75;
  uint64_t v76;
  os_log_s *log;
  id v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  uint64_t (*v83)(void);
  uint64_t (*v84)(void);
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  char v89;
  void (*v90)(id);
  uint64_t v91;
  uint64_t v92[3];
  uint64_t v93;
  uint64_t v94;
  swift_bridgeObjectRetain_n(a1, 2LL);
  id v16 = a2;
  swift_bridgeObjectRetain_n(a4, 2LL);
  swift_bridgeObjectRetain_n(a6, 2LL);
  id v17 = v16;
  uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v19 = static os_log_type_t.default.getter();
  uint64_t v85 = a4;
  if (os_log_type_enabled(v18, v19))
  {
    id v75 = v19;
    log = v18;
    unint64_t v79 = a6;
    uint64_t v81 = a8;
    uint64_t v83 = a7;
    unint64_t v86 = a3;
    uint64_t v20 = swift_slowAlloc(52LL, -1LL);
    uint64_t v21 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v76 = swift_slowAlloc(128LL, -1LL);
    v92[0] = v76;
    *(_DWORD *)uint64_t v20 = 136316162;
    uint64_t v22 = sub_10041D3C4(0LL, (unint64_t *)&unk_1009BC270, &OBJC_CLASS___IDSURI_ptr);
    swift_bridgeObjectRetain(a1);
    uint64_t v24 = Array.description.getter(v23, v22);
    unint64_t v26 = v25;
    swift_bridgeObjectRelease(a1);
    uint64_t v91 = sub_1003FFBB0(v24, v26, v92);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, v92, v20 + 4, v20 + 12);
    swift_bridgeObjectRelease(v26);
    swift_bridgeObjectRelease_n(a1, 2LL);
    *(_WORD *)(v20 + 1sub_10040A648(v1 + 2) = 2112;
    uint64_t v91 = (uint64_t)v17;
    char v27 = a5;
    unint64_t v28 = a4;
    id v29 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, v92, v20 + 14, v20 + 22);
    uint64_t v78 = v17;
    *uint64_t v21 = v17;
    uint64_t v30 = v21;

    *(_WORD *)(v20 + 2sub_10040A648(v1 + 2) = 2080;
    swift_bridgeObjectRetain(v28);
    uint64_t v91 = sub_1003FFBB0(v86, v28, v92);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, v92, v20 + 24, v20 + 32);
    unint64_t v31 = v28;
    a5 = v27;
    swift_bridgeObjectRelease_n(v31, 3LL);
    *(_WORD *)(v20 + 3sub_10040A648(v1 + 2) = 2080;
    if (v27)
    {
      if (v27 == 1) {
        uint64_t v32 = 0x657571655279656BLL;
      }
      else {
        uint64_t v32 = 0xD000000000000012LL;
      }
      if (v27 == 1) {
        unint64_t v33 = 0xEA00000000007473LL;
      }
      else {
        unint64_t v33 = 0x8000000100840CC0LL;
      }
    }

    else
    {
      unint64_t v33 = 0xEF6E6F6974756269LL;
      uint64_t v32 = 0x727473694479656BLL;
    }

    a6 = v79;
    uint64_t v34 = v88;
    uint64_t v91 = sub_1003FFBB0(v32, v33, v92);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, v92, v20 + 34, v20 + 42);
    swift_bridgeObjectRelease(v33);
    *(_WORD *)(v20 + 4sub_10040A648(v1 + 2) = 2080;
    swift_bridgeObjectRetain(v79);
    uint64_t v36 = Array.description.getter(v35, &type metadata for String);
    unint64_t v38 = v37;
    swift_bridgeObjectRelease(v79);
    uint64_t v91 = sub_1003FFBB0(v36, v38, v92);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, v92, v20 + 44, v20 + 52);
    swift_bridgeObjectRelease(v38);
    swift_bridgeObjectRelease_n(v79, 2LL);
    _os_log_impl( (void *)&_mh_execute_header,  log,  v75,  "generateAndSendKeyIfNeeded called with toURIs: %s fromURI: %@ context: %s keyMessageType: %s requestedKeyIDs: %s",  (uint8_t *)v20,  0x34u);
    uint64_t v39 = sub_1003F5CB4(&qword_1009B92C8);
    swift_arrayDestroy(v30, 1LL, v39);
    swift_slowDealloc(v30, -1LL, -1LL);
    swift_arrayDestroy(v76, 4LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v76, -1LL, -1LL);
    swift_slowDealloc(v20, -1LL, -1LL);

    a8 = v81;
    a7 = v83;
    a3 = v86;
    id v17 = v78;
  }

  else
  {

    swift_bridgeObjectRelease_n(a1, 2LL);
    swift_bridgeObjectRelease_n(a4, 2LL);
    swift_bridgeObjectRelease_n(a6, 2LL);
    uint64_t v34 = v88;
  }

  uint64_t v40 = v34;
  uint64_t v41 = (uint64_t)sub_100478A84(a1);

  id result = [v17 prefixedURI];
  if (result)
  {
    id v43 = result;
    if (([result _appearsToBeDSID] & 1) != 0
      || ([v43 _appearsToBePseudonymID] & 1) != 0
      || ([v43 _appearsToBeTemporaryID] & 1) != 0)
    {

LABEL_17:
      swift_bridgeObjectRelease(v41);
      return (id)a7(0LL);
    }

    id v89 = a5;
    id v44 = v17;
    id v45 = [v17 tokenFreeURI];

    if (!v45) {
      goto LABEL_17;
    }
    if ((unint64_t)v41 >> 62)
    {
      if (v41 < 0) {
        uint64_t v73 = v41;
      }
      else {
        uint64_t v73 = v41 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v41);
      uint64_t v74 = _CocoaArrayWrapper.endIndex.getter(v73);
      swift_bridgeObjectRelease(v41);
      if (!v74) {
        goto LABEL_17;
      }
    }

    else if (!*(void *)((v41 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
      goto LABEL_17;
    }

    uint64_t v46 = v17;
    uint64_t v47 = (*(uint64_t (**)(id, uint64_t))((swift_isaMask & *v40) + 0x1C0LL))(v17, v41);
    if (!v47)
    {
      uint64_t v65 = swift_bridgeObjectRelease(v41);
      unint64_t v66 = (os_log_s *)Logger.logObject.getter(v65);
      uint64_t v67 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v66, v67))
      {
        BOOL v68 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)BOOL v68 = 0;
        _os_log_impl((void *)&_mh_execute_header, v66, v67, "Failed to find a sending account - aborting", v68, 2u);
        swift_slowDealloc(v68, -1LL, -1LL);
      }

      return (id)a7(0LL);
    }

    uint64_t v48 = (void *)v47;
    uint64_t v49 = swift_allocObject(&unk_1009062A0, 89LL, 7LL);
    *(void *)(v49 + swift_unknownObjectWeakDestroy(v0 + 16) = v40;
    *(void *)(v49 + 24) = v48;
    *(void *)(v49 + 3sub_10040A648(v1 + 2) = v41;
    *(void *)(v49 + 40) = v44;
    *(void *)(v49 + 48) = a3;
    *(void *)(v49 + 56) = v85;
    *(void *)(v49 + 64) = a7;
    *(void *)(v49 + 7sub_10040A648(v1 + 2) = a8;
    *(void *)(v49 + 80) = a6;
    *(_BYTE *)(v49 + 88) = v89;
    uint64_t v84 = a7;
    unint64_t v50 = *(void (**)(uint64_t *__return_ptr))((swift_isaMask & *v40) + 0x190LL);
    unint64_t v87 = a3;
    uint64_t v82 = v46;
    swift_bridgeObjectRetain(v85);
    swift_bridgeObjectRetain(a6);
    unint64_t v51 = v40;
    swift_bridgeObjectRetain(v41);
    swift_retain(a8);
    BOOL v52 = v48;
    v50(v92);
    unint64_t v53 = a8;
    int64_t v54 = v93;
    uint64_t v55 = v94;
    sub_10040A238(v92, v93);
    uint64_t v56 = (*(uint64_t (**)(uint64_t, uint64_t))(v55 + 24))(v54, v55);
    uint64_t v57 = sub_10040A648(v92);
    if ((v56 & 1) != 0)
    {
      swift_bridgeObjectRelease(v41);
      uint64_t v58 = swift_allocObject(&unk_1009062F0, 32LL, 7LL);
      *(void *)(v58 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_100479328;
      *(void *)(v58 + 24) = v49;
      id v59 = (char **)((char *)v51 + OBJC_IVAR___IDSSenderKeyDistributionManager_firstDataProtectionLockQueue);
      swift_beginAccess( (char *)v51 + OBJC_IVAR___IDSSenderKeyDistributionManager_firstDataProtectionLockQueue,  v92,  33LL,  0LL);
      unint64_t v60 = *v59;
      swift_retain(v49);
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v60);
      *id v59 = v60;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        unint64_t v60 = sub_1003FFAA4(0LL, *((void *)v60 + 2) + 1LL, 1, v60);
        *id v59 = v60;
      }

      int v63 = *((void *)v60 + 2);
      id v62 = *((void *)v60 + 3);
      if (v63 >= v62 >> 1)
      {
        unint64_t v60 = sub_1003FFAA4((char *)(v62 > 1), v63 + 1, 1, v60);
        *id v59 = v60;
      }

      *((void *)v60 + sub_10040A648(v1 + 2) = v63 + 1;
      unint64_t v64 = &v60[16 * v63];
      *((void *)v64 + 4) = sub_10040A51C;
      *((void *)v64 + 5) = v58;
      swift_endAccess(v92);

      return (id)swift_release(v49);
    }

    else
    {
      (*(void (**)(uint64_t))((swift_isaMask & *v51) + 0xC0LL))(v57);
      os_log_type_t v80 = v69;
      unint64_t v70 = swift_allocObject(&unk_1009062C8, 88LL, 7LL);
      *(void *)(v70 + swift_unknownObjectWeakDestroy(v0 + 16) = v84;
      *(void *)(v70 + 24) = v53;
      *(void *)(v70 + 3sub_10040A648(v1 + 2) = v82;
      *(void *)(v70 + 40) = v51;
      *(void *)(v70 + 48) = v87;
      *(void *)(v70 + 56) = v85;
      *(void *)(v70 + 64) = a6;
      *(_BYTE *)(v70 + 7sub_10040A648(v1 + 2) = v89;
      *(void *)(v70 + 80) = v52;
      unint64_t v90 = *(void (**)(id))((swift_isaMask & *v51) + 0x1C8LL);
      char v71 = v82;
      swift_bridgeObjectRetain(v85);
      swift_bridgeObjectRetain(a6);
      v51;
      swift_retain(v53);
      uint64_t v72 = v52;
      v90(v72);
      swift_release(v70);
      swift_bridgeObjectRelease(v80);

      swift_release(v49);
      return (id)swift_bridgeObjectRelease(v41);
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10045E838(char a1)
{
  if (!a1) {
    return 0x727473694479656BLL;
  }
  if (a1 == 1) {
    return 0x657571655279656BLL;
  }
  return 0xD000000000000012LL;
}

void sub_10045E8A4(uint64_t a1)
{
  uint64_t v2 = a1 + 56;
  uint64_t v3 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v4 = -1LL;
  if (v3 < 64) {
    uint64_t v4 = ~(-1LL << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 56);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t v7 = 0LL;
  while (v5)
  {
    unint64_t v8 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    unint64_t v9 = v8 | (v7 << 6);
LABEL_22:
    uint64_t v13 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v9);
    uint64_t v14 = *v13;
    unint64_t v15 = v13[1];
    id v16 = objc_allocWithZone(&OBJC_CLASS___IDSPushToken);
    sub_1004028CC(v14, v15);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v18 = [v16 initWithData:isa];

    uint64_t v19 = sub_100402A84(v14, v15);
    if (v18)
    {
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v19);
      unint64_t v21 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      unint64_t v20 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x18);
      if (v21 >= v20 >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1LL);
      }
      uint64_t v22 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v21, v18);
      specialized Array._endMutation()(v22);
    }
  }

  int64_t v10 = v7 + 1;
  if (__OFADD__(v7, 1LL))
  {
    __break(1u);
    goto LABEL_28;
  }

  if (v10 >= v6) {
    goto LABEL_26;
  }
  unint64_t v11 = *(void *)(v2 + 8 * v10);
  ++v7;
  if (v11) {
    goto LABEL_21;
  }
  int64_t v7 = v10 + 1;
  if (v10 + 1 >= v6) {
    goto LABEL_26;
  }
  unint64_t v11 = *(void *)(v2 + 8 * v7);
  if (v11) {
    goto LABEL_21;
  }
  int64_t v7 = v10 + 2;
  if (v10 + 2 >= v6) {
    goto LABEL_26;
  }
  unint64_t v11 = *(void *)(v2 + 8 * v7);
  if (v11) {
    goto LABEL_21;
  }
  int64_t v7 = v10 + 3;
  if (v10 + 3 >= v6) {
    goto LABEL_26;
  }
  unint64_t v11 = *(void *)(v2 + 8 * v7);
  if (v11)
  {
LABEL_21:
    unint64_t v5 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v7 << 6);
    goto LABEL_22;
  }

  int64_t v12 = v10 + 4;
  if (v12 >= v6)
  {
LABEL_26:
    swift_release(a1);
    return;
  }

  unint64_t v11 = *(void *)(v2 + 8 * v12);
  if (v11)
  {
    int64_t v7 = v12;
    goto LABEL_21;
  }

  while (1)
  {
    int64_t v7 = v12 + 1;
    if (__OFADD__(v12, 1LL)) {
      break;
    }
    if (v7 >= v6) {
      goto LABEL_26;
    }
    unint64_t v11 = *(void *)(v2 + 8 * v7);
    ++v12;
    if (v11) {
      goto LABEL_21;
    }
  }

void sub_10045EAB8( uint64_t a1, void (*a2)(uint64_t), uint64_t a3, void *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, uint64_t a10)
{
  uint64_t v10 = *(void *)(a1 + 16);
  if (!v10)
  {
LABEL_39:
    a2(v10 & 1);
    return;
  }

  uint64_t v12 = a1;
  uint64_t v39 = a2;
  id v13 = a4;
  unint64_t v14 = sub_100433024((uint64_t)v13);
  if ((v15 & 1) != 0)
  {
    uint64_t v41 = *(void **)(*(void *)(v12 + 56) + 8 * v14);
    swift_bridgeObjectRetain(v41);
  }

  else
  {
    uint64_t v41 = _swiftEmptyArrayStorage;
  }

  uint64_t v16 = v12 + 64;
  uint64_t v17 = 1LL << *(_BYTE *)(v12 + 32);
  uint64_t v18 = -1LL;
  if (v17 < 64) {
    uint64_t v18 = ~(-1LL << v17);
  }
  unint64_t v19 = v18 & *(void *)(v12 + 64);
  int64_t v47 = (unint64_t)(v17 + 63) >> 6;
  swift_bridgeObjectRetain(v12);
  char v40 = 0;
  int64_t v20 = 0LL;
  uint64_t v42 = v12 + 64;
  uint64_t v43 = v12;
  while (1)
  {
    if (v19)
    {
      unint64_t v21 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      unint64_t v22 = v21 | (v20 << 6);
      goto LABEL_25;
    }

    int64_t v23 = v20 + 1;
    if (__OFADD__(v20, 1LL))
    {
      __break(1u);
      goto LABEL_41;
    }

    if (v23 >= v47) {
      goto LABEL_38;
    }
    unint64_t v24 = *(void *)(v16 + 8 * v23);
    ++v20;
    if (!v24)
    {
      int64_t v20 = v23 + 1;
      if (v23 + 1 >= v47) {
        goto LABEL_38;
      }
      unint64_t v24 = *(void *)(v16 + 8 * v20);
      if (!v24)
      {
        int64_t v20 = v23 + 2;
        if (v23 + 2 >= v47) {
          goto LABEL_38;
        }
        unint64_t v24 = *(void *)(v16 + 8 * v20);
        if (!v24) {
          break;
        }
      }
    }

uint64_t sub_10045EE44(id a1, void *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5 = v4;
  if (qword_1009C3F00 != -1) {
    swift_once(&qword_1009C3F00, sub_10046CE9C);
  }
  BOOL v10 = qword_1009C76B0 == a3 && *(void *)algn_1009C76B8 == a4;
  if (v10
    || (uint64_t v11 = 0LL,
        (_stringCompareWithSmolCheck(_:_:expecting:)(a3, a4, qword_1009C76B0, *(void *)algn_1009C76B8, 0LL) & 1) != 0))
  {
    id v12 = [a1 prefixedURI];
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    uint64_t v15 = v14;

    id v16 = [a2 prefixedURI];
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    uint64_t v19 = v18;

    uint64_t v44 = v17;
    uint64_t v45 = v19;
    uint64_t v42 = v13;
    uint64_t v43 = v15;
    __n128 v20 = swift_bridgeObjectRetain(v15);
    uint64_t v42 = String.init<A>(_:)( &v42,  &type metadata for String,  &protocol witness table for String,  &protocol witness table for String,  v20);
    uint64_t v43 = v21;
    String.append<A>(contentsOf:)(&v44, &type metadata for String, &protocol witness table for String);
    swift_bridgeObjectRelease(v15);
    swift_bridgeObjectRelease(v19);
    uint64_t v22 = v43;
    int64_t v23 = (os_log_s *)String._bridgeToObjectiveC()();
    uint64_t v24 = swift_bridgeObjectRelease(v22);
    int64_t v25 = *(uint64_t (**)(void))((swift_isaMask & *v5) + 0x118LL);
    uint64_t v26 = (void *)((uint64_t (*)(uint64_t))v25)(v24);
    unsigned int v27 = [v26 underLimitForItem:v23];

    if ((v27 & 1) != 0)
    {
      uint64_t v28 = (void *)v25();
      [v28 noteItem:v23];
      uint64_t v29 = v23;
      int64_t v23 = (os_log_s *)v28;
    }

    else
    {
      id v30 = a1;
      id v31 = a2;
      id v32 = v30;
      id v33 = v31;
      uint64_t v29 = (os_log_s *)Logger.logObject.getter(v33);
      os_log_type_t v34 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v29, v34))
      {
        os_log_type_t type = v34;
        uint64_t v35 = swift_slowAlloc(22LL, -1LL);
        char v40 = (void *)swift_slowAlloc(16LL, -1LL);
        *(_DWORD *)uint64_t v35 = 138412546;
        uint64_t v44 = (uint64_t)v32;
        id v36 = v32;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v35 + 4, v35 + 12);
        *char v40 = v32;

        *(_WORD *)(v35 + 1sub_10040A648(v1 + 2) = 2112;
        uint64_t v44 = (uint64_t)v33;
        id v37 = v33;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v35 + 14, v35 + 22);
        v40[1] = v33;

        _os_log_impl( (void *)&_mh_execute_header,  v29,  type,  "Too many attempts to generateAndSendKeyIfNeeded on iMessageReceive for fromURI: %@ toURI: %@ - aborting",  (uint8_t *)v35,  0x16u);
        uint64_t v38 = sub_1003F5CB4(&qword_1009B92C8);
        swift_arrayDestroy(v40, 2LL, v38);
        swift_slowDealloc(v40, -1LL, -1LL);
        swift_slowDealloc(v35, -1LL, -1LL);
      }

      else
      {
      }
    }

    uint64_t v11 = v27 ^ 1;
  }

  return v11;
}

void sub_10045F1A4( void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v18 = type metadata accessor for UUID(0LL, a2);
  uint64_t v92 = *(void *)(v18 - 8);
  uint64_t v93 = v18;
  __chkstk_darwin(v19, v20);
  uint64_t v91 = (char *)&v82 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((swift_isaMask & *v9) + 0x290LL);
  int v94 = a5;
  uint64_t v23 = v22(a4, a5, a6, a7, a8);
  if (v24 >> 60 == 15)
  {
    id v25 = a2;
    id v26 = a3;
    id v27 = v25;
    id v95 = v26;
    Class v28 = (Class)Logger.logObject.getter(v95);
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled((os_log_t)v28, v29))
    {

      return;
    }

    uint64_t v30 = swift_slowAlloc(22LL, -1LL);
    id v31 = (void *)swift_slowAlloc(16LL, -1LL);
    *(_DWORD *)uint64_t v30 = 138412546;
    uint64_t aBlock = (uint64_t)v27;
    id v32 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v97, v30 + 4, v30 + 12);
    *id v31 = v27;

    *(_WORD *)(v30 + 1sub_10040A648(v1 + 2) = 2112;
    uint64_t aBlock = (uint64_t)v95;
    id v33 = v95;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v97, v30 + 14, v30 + 22);
    v31[1] = v95;

    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v28,  v29,  "Failed to serialize message to send to URI: %@ fromURI: %@",  (uint8_t *)v30,  0x16u);
    uint64_t v34 = sub_1003F5CB4(&qword_1009B92C8);
    swift_arrayDestroy(v31, 2LL, v34);
    swift_slowDealloc(v31, -1LL, -1LL);
    swift_slowDealloc(v30, -1LL, -1LL);
    goto LABEL_28;
  }

  uint64_t v35 = v23;
  unint64_t v36 = v24;
  unint64_t v87 = a2;
  uint64_t v88 = v9;
  uint64_t v99 = (uint64_t)&_swiftEmptySetSingleton;
  uint64_t aBlock = a8;
  uint64_t v89 = a6;
  swift_bridgeObjectRetain(a6);
  uint64_t v90 = a7;
  swift_bridgeObjectRetain(a7);
  swift_bridgeObjectRetain(a8);
  swift_bridgeObjectRetain(a9);
  sub_1004694BC(v37, (uint64_t (*)(uint64_t, void, uint64_t))sub_1004778F4);
  uint64_t v38 = aBlock;
  if (!((unint64_t)aBlock >> 62))
  {
    uint64_t v39 = *(void *)((aBlock & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v39) {
      goto LABEL_6;
    }
LABEL_23:
    uint64_t v58 = swift_bridgeObjectRelease(v38);
    uint64_t v59 = (uint64_t)&_swiftEmptySetSingleton;
    goto LABEL_24;
  }

  if (aBlock < 0) {
    unint64_t v78 = aBlock;
  }
  else {
    unint64_t v78 = aBlock & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(aBlock);
  uint64_t v39 = _CocoaArrayWrapper.endIndex.getter(v78);
  swift_bridgeObjectRelease(v38);
  if (!v39) {
    goto LABEL_23;
  }
LABEL_6:
  uint64_t v83 = a1;
  uint64_t v84 = a3;
  uint64_t v85 = v35;
  unint64_t v86 = v36;
  id v95 = (id)objc_opt_self(&OBJC_CLASS___IDSDestination);
  if (v39 >= 1)
  {
    uint64_t v40 = 0LL;
    unint64_t v41 = v38 & 0xC000000000000001LL;
    uint64_t v42 = v38;
    uint64_t v43 = v39;
    do
    {
      if (v41) {
        id v44 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v40, v38);
      }
      else {
        id v44 = *(id *)(v38 + 8 * v40 + 32);
      }
      uint64_t v45 = v44;
      ++v40;
      id v46 = [v44 URI];
      id v47 = [v46 prefixedURI];

      static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
      uint64_t v49 = v48;

      id v50 = [v45 pushToken];
      uint64_t v51 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v50);
      unint64_t v53 = v52;

      NSString v54 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v49);
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      id v56 = [v95 destinationWithAlias:v54 pushToken:isa];
      sub_100402A84(v51, v53);

      id v57 = v56;
      sub_100470ECC(&aBlock, v57);

      uint64_t v38 = v42;
    }

    while (v43 != v40);
    uint64_t v58 = swift_bridgeObjectRelease(v42);
    uint64_t v59 = v99;
    uint64_t v35 = v85;
    unint64_t v36 = v86;
    a1 = v83;
    a3 = v84;
    if ((v99 & 0xC000000000000001LL) != 0)
    {
LABEL_13:
      if (v59 < 0) {
        uint64_t v60 = v59;
      }
      else {
        uint64_t v60 = v59 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v59);
      uint64_t v61 = __CocoaSet.count.getter(v60);
      uint64_t v58 = swift_bridgeObjectRelease(v59);
      if (v61) {
        goto LABEL_17;
      }
      goto LABEL_25;
    }

void sub_10045F8C4( char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, void *a7, void *a8, uint64_t a9, uint64_t a10)
{
  LODWORD(v14sub_10040A648(v1 + 3) = a6;
  uint64_t v139 = a4;
  uint64_t v16 = *(void *)(type metadata accessor for SenderKeyInfo(0LL) - 8);
  __chkstk_darwin(v17, v18);
  __n128 v20 = (char *)&v129 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v21, v22);
  unint64_t v24 = (char *)&v129 - v23;
  __chkstk_darwin(v25, v26);
  Class v28 = (char *)&v129 - v27;
  a3 += 16LL;
  swift_beginAccess(a3, &v146, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a3);
  if (Strong)
  {
    uint64_t v30 = (void *)Strong;
    uint64_t v138 = v16;
    uint64_t v140 = a10;
    uint64_t v141 = a5;
    uint64_t v142 = a9;
    if ((a1 & 1) != 0 && !a2)
    {
      uint64_t v31 = v142;
      swift_bridgeObjectRetain_n(v142, 4LL);
      unint64_t v32 = v141;
      swift_bridgeObjectRetain_n(v141, 2LL);
      id v33 = a7;
      id v34 = a8;
      uint64_t v35 = v140;
      swift_bridgeObjectRetain_n(v140, 2LL);
      unint64_t v36 = (uint64_t *)v33;
      uint64_t v37 = (uint64_t *)v34;
      uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
      int v39 = static os_log_type_t.default.getter();
      BOOL v40 = os_log_type_enabled(v38, (os_log_type_t)v39);
      uint64_t v136 = v37;
      uint64_t v137 = v30;
      v135 = v36;
      if (v40)
      {
        int v130 = v39;
        uint64_t v41 = swift_slowAlloc(72LL, -1LL);
        int64_t v133 = (uint64_t **)swift_slowAlloc(16LL, -1LL);
        uint64_t v131 = swift_slowAlloc(128LL, -1LL);
        uint64_t v145 = v131;
        *(_DWORD *)uint64_t v41 = 136316674;
        swift_bridgeObjectRetain(v32);
        v144 = (os_log_s *)sub_1003FFBB0(v139, v32, &v145);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145, v41 + 4, v41 + 12);
        swift_bridgeObjectRelease_n(v32, 3LL);
        unint64_t v134 = (_WORD *)v41;
        *(_WORD *)(v41 + 1sub_10040A648(v1 + 2) = 2080;
        id v132 = v38;
        if ((_BYTE)v143)
        {
          else {
            uint64_t v42 = 0xD000000000000012LL;
          }
          else {
            unint64_t v43 = 0x8000000100840CC0LL;
          }
        }

        else
        {
          uint64_t v42 = 0x727473694479656BLL;
          unint64_t v43 = 0xEF6E6F6974756269LL;
        }

        id v76 = v134;
        v144 = (os_log_s *)sub_1003FFBB0(v42, v43, &v145);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145, v76 + 7, v76 + 11);
        swift_bridgeObjectRelease(v43);
        v76[11] = 2112;
        id v77 = v135;
        v144 = (os_log_s *)v135;
        unint64_t v78 = v135;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145, v76 + 12, v76 + 16);
        uint64_t v79 = v133;
        *int64_t v133 = v77;

        v76[16] = 2112;
        os_log_type_t v80 = v136;
        v144 = (os_log_s *)v136;
        uint64_t v81 = v136;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145, v76 + 17, v76 + 21);
        v79[1] = v80;

        v76[21] = 2048;
        uint64_t v82 = v142;
        uint64_t v83 = *(os_log_s **)(v142 + 16);
        swift_bridgeObjectRelease(v142);
        v144 = v83;
        id v129 = &v145;
        uint64_t v31 = v82;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145, v76 + 22, v76 + 26);
        swift_bridgeObjectRelease(v82);
        v76[26] = 2080;
        if (v83)
        {
          uint64_t v84 = v82 + ((*(unsigned __int8 *)(v138 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v138 + 80));
          v143 = *(uint64_t **)(v138 + 72);
          swift_bridgeObjectRetain(v31);
          uint64_t v85 = _swiftEmptyArrayStorage;
          do
          {
            sub_1003F5FC8(v84, (uint64_t)v28, type metadata accessor for SenderKeyInfo);
            Swift::String v86 = Data.base64EncodedString(options:)(0LL);
            sub_1003F6050((uint64_t)v28, type metadata accessor for SenderKeyInfo);
            if ((swift_isUniquelyReferenced_nonNull_native(v85) & 1) == 0) {
              uint64_t v85 = sub_10046D484(0LL, v85[2] + 1LL, 1, v85);
            }
            unint64_t v88 = v85[2];
            unint64_t v87 = v85[3];
            if (v88 >= v87 >> 1) {
              uint64_t v85 = sub_10046D484((void *)(v87 > 1), v88 + 1, 1, v85);
            }
            v85[2] = v88 + 1;
            *(Swift::String *)&v85[2 * v88 + 4] = v86;
            v84 += (uint64_t)v143;
            uint64_t v83 = (os_log_s *)((char *)v83 - 1);
          }

          while (v83);
          uint64_t v31 = v142;
          swift_bridgeObjectRelease(v142);
        }

        else
        {
          uint64_t v85 = _swiftEmptyArrayStorage;
        }

        uint64_t v89 = (uint8_t *)v134;
        uint64_t v90 = Array.description.getter(v85, &type metadata for String);
        unint64_t v92 = v91;
        swift_bridgeObjectRelease(v85);
        v144 = (os_log_s *)sub_1003FFBB0(v90, v92, &v145);
        uint64_t v93 = v129;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, v129, v89 + 54, v89 + 62);
        swift_bridgeObjectRelease_n(v31, 2LL);
        swift_bridgeObjectRelease(v92);
        *((_WORD *)v89 + 31) = 2080;
        uint64_t v94 = v140;
        swift_bridgeObjectRetain(v140);
        uint64_t v96 = Array.description.getter(v95, &type metadata for String);
        unint64_t v98 = v97;
        swift_bridgeObjectRelease(v94);
        v144 = (os_log_s *)sub_1003FFBB0(v96, v98, &v145);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, v93, v89 + 64, v89 + 72);
        swift_bridgeObjectRelease_n(v94, 2LL);
        swift_bridgeObjectRelease(v98);
        uint64_t v99 = v132;
        _os_log_impl( (void *)&_mh_execute_header,  v132,  (os_log_type_t)v130,  "Successfully sent sender key message with GUID: %s of type %s to URI: %@ fromURI: %@ key count: %ld keyIDs: %s requestedKeyIDs: %s",  v89,  0x48u);
        uint64_t v100 = sub_1003F5CB4(&qword_1009B92C8);
        unint64_t v101 = v133;
        swift_arrayDestroy(v133, 2LL, v100);
        swift_slowDealloc(v101, -1LL, -1LL);
        uint64_t v102 = v131;
        swift_arrayDestroy(v131, 4LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v102, -1LL, -1LL);
        swift_slowDealloc(v89, -1LL, -1LL);

        unint64_t v60 = v141;
        uint64_t v61 = v138;
        id v62 = v136;
        uint64_t v63 = *(void *)(v31 + 16);
        if (!v63) {
          goto LABEL_43;
        }
      }

      else
      {
        swift_bridgeObjectRelease_n(v35, 2LL);

        swift_bridgeObjectRelease_n(v32, 2LL);
        swift_bridgeObjectRelease_n(v31, 4LL);
        unint64_t v60 = v32;
        uint64_t v61 = v138;
        id v62 = v37;
        uint64_t v63 = *(void *)(v31 + 16);
        if (!v63)
        {
LABEL_43:
          uint64_t v67 = _swiftEmptyArrayStorage;
LABEL_44:
          id v103 = v137;
          (*(void (**)(void *, uint64_t *, uint64_t *, uint64_t, unint64_t))((swift_isaMask & *v137)
                                                                                            + 0x200LL))( v67,  v62,  v135,  v139,  v60);
          swift_bridgeObjectRelease(v67);

          return;
        }
      }

      uint64_t v64 = v31 + ((*(unsigned __int8 *)(v61 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80));
      uint64_t v65 = v31;
      uint64_t v66 = *(void *)(v61 + 72);
      swift_bridgeObjectRetain(v65);
      uint64_t v67 = _swiftEmptyArrayStorage;
      do
      {
        sub_1003F5FC8(v64, (uint64_t)v24, type metadata accessor for SenderKeyInfo);
        uint64_t v68 = *((void *)v24 + 2);
        unint64_t v69 = *((void *)v24 + 3);
        sub_1004028CC(v68, v69);
        sub_1003F6050((uint64_t)v24, type metadata accessor for SenderKeyInfo);
        if ((swift_isUniquelyReferenced_nonNull_native(v67) & 1) == 0) {
          uint64_t v67 = sub_10046D170(0LL, v67[2] + 1LL, 1, v67);
        }
        unint64_t v71 = v67[2];
        unint64_t v70 = v67[3];
        if (v71 >= v70 >> 1) {
          uint64_t v67 = sub_10046D170((void *)(v70 > 1), v71 + 1, 1, v67);
        }
        v67[2] = v71 + 1;
        uint64_t v72 = &v67[2 * v71];
        v72[4] = v68;
        v72[5] = v69;
        v64 += v66;
        --v63;
      }

      while (v63);
      swift_bridgeObjectRelease(v142);
      unint64_t v60 = v141;
      id v62 = v136;
      goto LABEL_44;
    }

    uint64_t v44 = v142;
    swift_bridgeObjectRetain(v142);
    uint64_t v45 = v141;
    swift_bridgeObjectRetain(v141);
    id v46 = a7;
    id v47 = a8;
    uint64_t v48 = v140;
    swift_bridgeObjectRetain(v140);
    swift_errorRetain(a2);
    swift_bridgeObjectRetain(v44);
    swift_bridgeObjectRetain(v45);
    uint64_t v49 = (os_log_s *)v46;
    uint64_t v50 = v48;
    uint64_t v51 = v49;
    unint64_t v52 = (os_log_s *)v47;
    swift_bridgeObjectRetain(v50);
    uint64_t v53 = swift_errorRetain(a2);
    NSString v54 = (uint64_t *)Logger.logObject.getter(v53);
    int v55 = static os_log_type_t.error.getter();
    uint64_t v136 = v54;
    if (os_log_type_enabled((os_log_t)v54, (os_log_type_t)v55))
    {
      LODWORD(v13sub_10040A648(v1 + 3) = v55;
      uint64_t v56 = swift_slowAlloc(72LL, -1LL);
      id v57 = (uint64_t *)swift_slowAlloc(24LL, -1LL);
      uint64_t v58 = swift_slowAlloc(128LL, -1LL);
      uint64_t v145 = v58;
      *(_DWORD *)uint64_t v56 = 138413826;
      if (a2)
      {
        swift_errorRetain(a2);
        uint64_t v59 = _swift_stdlib_bridgeErrorToNSError(a2);
        v144 = (os_log_s *)v59;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145, v56 + 4, v56 + 12);
      }

      else
      {
        v144 = 0LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145, v56 + 4, v56 + 12);
        uint64_t v59 = 0LL;
      }

      unint64_t v73 = v141;
      *id v57 = v59;
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      *(_WORD *)(v56 + 1sub_10040A648(v1 + 2) = 2080;
      swift_bridgeObjectRetain(v73);
      v144 = (os_log_s *)sub_1003FFBB0(v139, v73, &v145);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145, v56 + 14, v56 + 22);
      swift_bridgeObjectRelease_n(v73, 3LL);
      *(_WORD *)(v56 + 2sub_10040A648(v1 + 2) = 2080;
      uint64_t v137 = v30;
      unint64_t v134 = (_WORD *)v58;
      v135 = v57;
      id v132 = v52;
      if ((_BYTE)v143)
      {
        else {
          uint64_t v74 = 0xD000000000000012LL;
        }
        else {
          unint64_t v75 = 0x8000000100840CC0LL;
        }
      }

      else
      {
        uint64_t v74 = 0x727473694479656BLL;
        unint64_t v75 = 0xEF6E6F6974756269LL;
      }

      uint64_t v104 = v140;
      v144 = (os_log_s *)sub_1003FFBB0(v74, v75, &v145);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145, v56 + 24, v56 + 32);
      swift_bridgeObjectRelease(v75);
      *(_WORD *)(v56 + 3sub_10040A648(v1 + 2) = 2112;
      v144 = v51;
      uint64_t v105 = v51;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145, v56 + 34, v56 + 42);
      id v106 = v135;
      v135[1] = (uint64_t)v51;

      *(_WORD *)(v56 + 4sub_10040A648(v1 + 2) = 2112;
      uint64_t v107 = v132;
      v144 = v132;
      v108 = v132;
      v143 = &v145;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, &v145, v56 + 44, v56 + 52);
      v106[2] = (uint64_t)v107;

      *(_WORD *)(v56 + 5sub_10040A648(v1 + 2) = 2080;
      uint64_t v109 = v142;
      uint64_t v110 = *(void *)(v142 + 16);
      if (v110)
      {
        uint64_t v141 = v56;
        uint64_t v111 = v142 + ((*(unsigned __int8 *)(v138 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v138 + 80));
        uint64_t v112 = *(void *)(v138 + 72);
        swift_bridgeObjectRetain(v142);
        uint64_t v113 = _swiftEmptyArrayStorage;
        do
        {
          sub_1003F5FC8(v111, (uint64_t)v20, type metadata accessor for SenderKeyInfo);
          Swift::String v114 = Data.base64EncodedString(options:)(0LL);
          sub_1003F6050((uint64_t)v20, type metadata accessor for SenderKeyInfo);
          if ((swift_isUniquelyReferenced_nonNull_native(v113) & 1) == 0) {
            uint64_t v113 = sub_10046D484(0LL, v113[2] + 1LL, 1, v113);
          }
          unint64_t v116 = v113[2];
          unint64_t v115 = v113[3];
          if (v116 >= v115 >> 1) {
            uint64_t v113 = sub_10046D484((void *)(v115 > 1), v116 + 1, 1, v113);
          }
          v113[2] = v116 + 1;
          *(Swift::String *)&v113[2 * v116 + 4] = v114;
          v111 += v112;
          --v110;
        }

        while (v110);
        uint64_t v109 = v142;
        swift_bridgeObjectRelease(v142);
        uint64_t v104 = v140;
        uint64_t v56 = v141;
      }

      else
      {
        uint64_t v113 = _swiftEmptyArrayStorage;
      }

      uint64_t v117 = Array.description.getter(v113, &type metadata for String);
      unint64_t v119 = v118;
      swift_bridgeObjectRelease(v113);
      v144 = (os_log_s *)sub_1003FFBB0(v117, v119, &v145);
      v120 = v143;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, v143, v56 + 54, v56 + 62);
      swift_bridgeObjectRelease_n(v109, 2LL);
      swift_bridgeObjectRelease(v119);
      *(_WORD *)(v56 + 6sub_10040A648(v1 + 2) = 2080;
      swift_bridgeObjectRetain(v104);
      uint64_t v122 = Array.description.getter(v121, &type metadata for String);
      unint64_t v124 = v123;
      swift_bridgeObjectRelease(v104);
      v144 = (os_log_s *)sub_1003FFBB0(v122, v124, &v145);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, v120, v56 + 64, v56 + 72);
      swift_bridgeObjectRelease_n(v104, 2LL);
      swift_bridgeObjectRelease(v124);
      id v125 = v136;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v136,  (os_log_type_t)v133,  "Failed to send sender key message with error: %@ GUID: %s of type %s to URI: %@ fromURI: %@ keyIDs: %s requestedKeyIDs: %s",  (uint8_t *)v56,  0x48u);
      uint64_t v126 = sub_1003F5CB4(&qword_1009B92C8);
      id v127 = v135;
      swift_arrayDestroy(v135, 3LL, v126);
      swift_slowDealloc(v127, -1LL, -1LL);
      int64_t v128 = v134;
      swift_arrayDestroy(v134, 4LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v128, -1LL, -1LL);
      swift_slowDealloc(v56, -1LL, -1LL);
    }

    else
    {

      swift_errorRelease(a2);
      swift_errorRelease(a2);
      swift_bridgeObjectRelease_n(v50, 2LL);
      swift_bridgeObjectRelease_n(v44, 2LL);

      swift_bridgeObjectRelease_n(v45, 2LL);
    }
  }

void sub_100460634(uint64_t a1, uint64_t a2, void *a3)
{
  int64_t v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  swift_retain(v5);
  id v7 = a3;
  v6(a2, a3);
  swift_release(v5);
}

void sub_100460694(os_log_s *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  unint64_t v119 = a1;
  sub_1003F5CB4((uint64_t *)&unk_1009BAC20);
  __chkstk_darwin(v7, v8);
  BOOL v10 = (char *)&v109 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v115 = type metadata accessor for SenderKeyInfo(0LL);
  uint64_t v11 = *(void *)(v115 - 8);
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (os_log_s *)((char *)&v109 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v16, v17);
  uint64_t v112 = (uint8_t *)&v109 - v18;
  __chkstk_darwin(v19, v20);
  uint64_t v111 = (uint64_t)&v109 - v21;
  uint64_t v24 = __chkstk_darwin(v22, v23);
  __n128 v26 = (char *)&v109 - v25;
  unint64_t v124 = &_swiftEmptySetSingleton;
  uint64_t v27 = (void *)(*(uint64_t (**)(uint64_t))((swift_isaMask & *v3) + 0xA8LL))(v24);
  sub_1004EEF6C(a3);
  unint64_t v118 = v28;

  uint64_t v122 = (uint64_t)_swiftEmptyArrayStorage;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0) {
      uint64_t v108 = a3;
    }
    else {
      uint64_t v108 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v29 = _CocoaArrayWrapper.endIndex.getter(v108);
  }

  else
  {
    uint64_t v29 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(a3);
  }

  unint64_t v116 = v10;
  uint64_t v117 = v11;
  uint64_t v113 = (uint64_t *)v15;
  if (v29)
  {
    if (v29 < 1)
    {
      __break(1u);
      return;
    }

    id v114 = a2;
    for (uint64_t i = 0LL; i != v29; ++i)
    {
      if ((a3 & 0xC000000000000001LL) != 0) {
        id v32 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a3);
      }
      else {
        id v32 = *(id *)(a3 + 8 * i + 32);
      }
      id v33 = v32;
      id v34 = [v32 pushTokenObject];

      if (v34)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v35);
        unint64_t v37 = *(void *)((v122 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        unint64_t v36 = *(void *)((v122 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        if (v37 >= v36 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1LL);
        }
        uint64_t v31 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v37, v34);
        specialized Array._endMutation()(v31);
      }
    }

    swift_bridgeObjectRelease(a3);
    uint64_t v38 = (void *)v122;
    a2 = v114;
  }

  else
  {
    swift_bridgeObjectRelease(a3);
    uint64_t v38 = _swiftEmptyArrayStorage;
  }

  int v39 = v119;
  BOOL v40 = (os_log_s *)sub_100465F40(v119, a2);
  char v42 = v41;
  swift_bridgeObjectRetain(v40);
  sub_100479AEC(v43);
  swift_bridgeObjectRelease(v40);
  uint64_t v44 = *((void *)v40 + 2);
  if (!v44)
  {
    swift_bridgeObjectRelease(v40);
    if ((v42 & 1) != 0)
    {
      swift_bridgeObjectRelease(v38);
    }

    else
    {
      char v100 = (*(uint64_t (**)(os_log_s *, void *, void *))((swift_isaMask & *v4) + 0x250LL))(v39, a2, v38);
      swift_bridgeObjectRelease(v38);
      if ((v100 & 1) == 0
        && ((*(uint64_t (**)(os_log_s *, void *))((swift_isaMask & *v4) + 0x2B8LL))(v39, a2) & 1) == 0)
      {
        swift_bridgeObjectRelease(v118);
        uint64_t v107 = v124;
        sub_10046D898((uint64_t)v124);
        swift_bridgeObjectRelease(v107);
        return;
      }
    }

    uint64_t v101 = (uint64_t)v116;
    (*(void (**)(os_log_s *, void *, uint64_t))((swift_isaMask & *v4) + 0x268LL))(v39, a2, a3);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v117 + 48))(v101, 1LL, v115) == 1)
    {
      sub_10040A274(v101, (uint64_t *)&unk_1009BAC20);
    }

    else
    {
      uint64_t v102 = v111;
      sub_1003F600C(v101, v111, type metadata accessor for SenderKeyInfo);
      id v103 = v113;
      sub_1003F5FC8(v102, (uint64_t)v113, type metadata accessor for SenderKeyInfo);
      uint64_t v104 = (uint64_t)v112;
      sub_10046F660((uint64_t)v112, v103);
      sub_1003F6050(v104, type metadata accessor for SenderKeyInfo);
      sub_1003F6050(v102, type metadata accessor for SenderKeyInfo);
    }

    uint64_t v105 = v118;
    id v106 = sub_100465B14((uint64_t)v39, (uint64_t)a2, (uint64_t)v118);
    swift_bridgeObjectRelease(v105);
    sub_100479AEC((uint64_t)v106);
    swift_bridgeObjectRelease(v106);
    unint64_t v87 = v124;
    sub_10046D898((uint64_t)v124);
    goto LABEL_38;
  }

  swift_bridgeObjectRelease(v118);
  swift_bridgeObjectRelease(v38);
  unint64_t v118 = v4;
  uint64_t v45 = (char *)v4 + OBJC_IVAR___IDSSenderKeyDistributionManager_logger;
  id v46 = v39;
  id v47 = a2;
  swift_bridgeObjectRetain(v40);
  uint64_t v48 = v46;
  id v49 = v47;
  uint64_t v50 = (os_log_s *)Logger.logObject.getter(v49);
  int v51 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v50, (os_log_type_t)v51))
  {
    int v110 = v51;
    uint64_t v113 = (uint64_t *)v50;
    unint64_t v116 = v45;
    uint64_t v52 = swift_slowAlloc(32LL, -1LL);
    uint64_t v53 = (os_log_s **)swift_slowAlloc(16LL, -1LL);
    uint64_t v111 = swift_slowAlloc(32LL, -1LL);
    uint64_t v122 = v111;
    *(_DWORD *)uint64_t v52 = 138412802;
    unint64_t v119 = v40;
    uint64_t v120 = (uint64_t)v48;
    NSString v54 = v48;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, &v121, v52 + 4, v52 + 12);
    uint64_t v115 = (uint64_t)v48;
    *uint64_t v53 = v48;

    *(_WORD *)(v52 + 1sub_10040A648(v1 + 2) = 2112;
    uint64_t v120 = (uint64_t)v49;
    id v55 = v49;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, &v121, v52 + 14, v52 + 22);
    id v114 = v49;
    uint64_t v109 = v53;
    v53[1] = (os_log_s *)v49;

    uint64_t v112 = (uint8_t *)v52;
    *(_WORD *)(v52 + 2sub_10040A648(v1 + 2) = 2080;
    uint64_t v56 = (char *)v119 + ((*(unsigned __int8 *)(v117 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v117 + 80));
    uint64_t v57 = *(void *)(v117 + 72);
    swift_bridgeObjectRetain(v119);
    uint64_t v58 = _swiftEmptyArrayStorage;
    do
    {
      sub_1003F5FC8((uint64_t)v56, (uint64_t)v26, type metadata accessor for SenderKeyInfo);
      Swift::String v59 = Data.base64EncodedString(options:)(0LL);
      sub_1003F6050((uint64_t)v26, type metadata accessor for SenderKeyInfo);
      if ((swift_isUniquelyReferenced_nonNull_native(v58) & 1) == 0) {
        uint64_t v58 = sub_10046D484(0LL, v58[2] + 1LL, 1, v58);
      }
      unint64_t v61 = v58[2];
      unint64_t v60 = v58[3];
      if (v61 >= v60 >> 1) {
        uint64_t v58 = sub_10046D484((void *)(v60 > 1), v61 + 1, 1, v58);
      }
      v58[2] = v61 + 1;
      *(Swift::String *)&v58[2 * v61 + 4] = v59;
      v56 += v57;
      --v44;
    }

    while (v44);
    id v62 = v119;
    swift_bridgeObjectRelease(v119);
    uint64_t v63 = v112;
    uint64_t v64 = Array.description.getter(v58, &type metadata for String);
    unint64_t v66 = v65;
    swift_bridgeObjectRelease(v58);
    uint64_t v120 = sub_1003FFBB0(v64, v66, &v122);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, &v121, v63 + 24, v63 + 32);
    swift_bridgeObjectRelease_n(v62, 2LL);
    swift_bridgeObjectRelease(v66);
    os_log_t v67 = (os_log_t)v113;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v113,  (os_log_type_t)v110,  "Not regenerating for senderURI: %@ receiverURI: %@ - we have unsent keys to send: %s",  v63,  0x20u);
    uint64_t v68 = sub_1003F5CB4(&qword_1009B92C8);
    unint64_t v69 = v109;
    swift_arrayDestroy(v109, 2LL, v68);
    swift_slowDealloc(v69, -1LL, -1LL);
    uint64_t v70 = v111;
    swift_arrayDestroy(v111, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v70, -1LL, -1LL);
    swift_slowDealloc(v63, -1LL, -1LL);

    uint64_t v48 = (os_log_s *)v115;
    id v49 = v114;
  }

  else
  {
    swift_bridgeObjectRelease_n(v40, 2LL);
  }

  id v71 = -[os_log_s prefixedURI](v48, "prefixedURI");
  uint64_t v72 = static String._unconditionallyBridgeFromObjectiveC(_:)(v71);
  uint64_t v74 = v73;

  id v75 = [v49 prefixedURI];
  uint64_t v76 = static String._unconditionallyBridgeFromObjectiveC(_:)(v75);
  uint64_t v78 = v77;

  uint64_t v122 = v76;
  uint64_t v123 = v78;
  uint64_t v120 = v72;
  uint64_t v121 = v74;
  __n128 v79 = swift_bridgeObjectRetain(v74);
  uint64_t v120 = String.init<A>(_:)( &v120,  &type metadata for String,  &protocol witness table for String,  &protocol witness table for String,  v79);
  uint64_t v121 = v80;
  String.append<A>(contentsOf:)(&v122, &type metadata for String, &protocol witness table for String);
  swift_bridgeObjectRelease(v74);
  swift_bridgeObjectRelease(v78);
  uint64_t v81 = v121;
  NSString v82 = String._bridgeToObjectiveC()();
  uint64_t v83 = swift_bridgeObjectRelease(v81);
  uint64_t v84 = *(uint64_t (**)(void))((swift_isaMask & *v118) + 0x100LL);
  uint64_t v85 = (void *)((uint64_t (*)(uint64_t))v84)(v83);
  [v85 noteItem:v82];

  Swift::String v86 = (void *)v84();
  LODWORD(v85) = [v86 underLimitForItem:v82];

  unint64_t v87 = v124;
  if ((_DWORD)v85)
  {
    sub_10046D898((uint64_t)v124);

LABEL_38:
    swift_bridgeObjectRelease(v87);
    return;
  }

  swift_bridgeObjectRelease(v124);
  unint64_t v88 = v48;
  id v89 = v49;
  uint64_t v90 = v88;
  id v91 = v89;
  unint64_t v92 = (os_log_s *)Logger.logObject.getter(v91);
  os_log_type_t v93 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v92, v93))
  {
    uint64_t v94 = swift_slowAlloc(22LL, -1LL);
    uint64_t v95 = (os_log_s **)swift_slowAlloc(16LL, -1LL);
    *(_DWORD *)uint64_t v94 = 138412546;
    uint64_t v122 = (uint64_t)v90;
    uint64_t v96 = v90;
    unint64_t v119 = v92;
    unint64_t v97 = v96;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, &v123, v94 + 4, v94 + 12);
    *uint64_t v95 = v90;

    *(_WORD *)(v94 + 1sub_10040A648(v1 + 2) = 2112;
    uint64_t v122 = (uint64_t)v91;
    id v98 = v91;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, &v123, v94 + 14, v94 + 22);
    v95[1] = (os_log_s *)v91;

    unint64_t v92 = v119;
    _os_log_impl( (void *)&_mh_execute_header,  v119,  v93,  "Too many attempts to send unsent keys for senderURI: %@ receiverURI: %@ - aborting send",  (uint8_t *)v94,  0x16u);
    uint64_t v99 = sub_1003F5CB4(&qword_1009B92C8);
    swift_arrayDestroy(v95, 2LL, v99);
    swift_slowDealloc(v95, -1LL, -1LL);
    swift_slowDealloc(v94, -1LL, -1LL);
  }

  else
  {
  }
}

void *sub_10046112C(uint64_t a1)
{
  if (*(void *)(a1 + 16)) {
    return (void *)(*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x348LL))();
  }
  else {
    return &_swiftEmptyArrayStorage;
  }
}

void sub_10046115C(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  if (*(void *)(a1 + 16))
  {
    id v11 = (id)(*(uint64_t (**)(void))((swift_isaMask & *v5) + 0xA8LL))();
    sub_1004F17CC(a2, a3, a1, a4, a5, 0LL, 0LL);
  }

void sub_10046120C(void *a1, void *a2, id a3)
{
  uint64_t v4 = v3;
  id v7 = [a3 prefixedURI];
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  uint64_t v10 = v9;

  id v32 = a2;
  id v11 = [a2 prefixedURI];
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  uint64_t v14 = v13;

  uint64_t v36 = v12;
  uint64_t v37 = v14;
  uint64_t v34 = v8;
  uint64_t v35 = v10;
  __n128 v15 = swift_bridgeObjectRetain(v10);
  uint64_t v34 = String.init<A>(_:)( &v34,  &type metadata for String,  &protocol witness table for String,  &protocol witness table for String,  v15);
  uint64_t v35 = v16;
  String.append<A>(contentsOf:)(&v36, &type metadata for String, &protocol witness table for String);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v14);
  uint64_t v17 = v35;
  NSString v18 = String._bridgeToObjectiveC()();
  uint64_t v19 = swift_bridgeObjectRelease(v17);
  __n128 v20 = *(uint64_t (**)(void))((swift_isaMask & *v4) + 0x130LL);
  uint64_t v21 = (void *)((uint64_t (*)(uint64_t))v20)(v19);
  LODWORD(v8) = [v21 underLimitForItem:v18];

  if ((_DWORD)v8)
  {
    id v22 = a1;
    __n128 v23 = (os_log_s *)Logger.logObject.getter(v22);
    os_log_type_t v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v31 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v25 = 138412290;
      uint64_t v36 = (uint64_t)v22;
      id v26 = v22;
      id v27 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v25 + 4, v25 + 12);
      *uint64_t v31 = v26;

      id v22 = v26;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Noting last active peer token: %@", v25, 0xCu);
      uint64_t v28 = sub_1003F5CB4(&qword_1009B92C8);
      swift_arrayDestroy(v31, 1LL, v28);
      swift_slowDealloc(v31, -1LL, -1LL);
      swift_slowDealloc(v25, -1LL, -1LL);
    }

    else
    {
    }

    uint64_t v29 = (void *)v20();
    [v29 noteItem:v18];

    uint64_t v30 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v4) + 0xA8LL))();
    sub_1004F1D68(v22, v32, a3);
  }
}

void sub_10046156C(void *a1, void *a2, id a3)
{
  uint64_t v4 = v3;
  id v7 = [a3 prefixedURI];
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  uint64_t v10 = v9;

  id v32 = a2;
  id v11 = [a2 prefixedURI];
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  uint64_t v14 = v13;

  uint64_t v36 = v12;
  uint64_t v37 = v14;
  uint64_t v34 = v8;
  uint64_t v35 = v10;
  __n128 v15 = swift_bridgeObjectRetain(v10);
  uint64_t v34 = String.init<A>(_:)( &v34,  &type metadata for String,  &protocol witness table for String,  &protocol witness table for String,  v15);
  uint64_t v35 = v16;
  String.append<A>(contentsOf:)(&v36, &type metadata for String, &protocol witness table for String);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v14);
  uint64_t v17 = v35;
  NSString v18 = String._bridgeToObjectiveC()();
  uint64_t v19 = swift_bridgeObjectRelease(v17);
  __n128 v20 = *(uint64_t (**)(void))((swift_isaMask & *v4) + 0x148LL);
  uint64_t v21 = (void *)((uint64_t (*)(uint64_t))v20)(v19);
  LODWORD(v8) = [v21 underLimitForItem:v18];

  if ((_DWORD)v8)
  {
    id v22 = a1;
    __n128 v23 = (os_log_s *)Logger.logObject.getter(v22);
    os_log_type_t v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v31 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v25 = 138412290;
      uint64_t v36 = (uint64_t)v22;
      id v26 = v22;
      id v27 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v25 + 4, v25 + 12);
      *uint64_t v31 = v26;

      id v22 = v26;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Noting last iMessaged peer token: %@", v25, 0xCu);
      uint64_t v28 = sub_1003F5CB4(&qword_1009B92C8);
      swift_arrayDestroy(v31, 1LL, v28);
      swift_slowDealloc(v31, -1LL, -1LL);
      swift_slowDealloc(v25, -1LL, -1LL);
    }

    else
    {
    }

    uint64_t v29 = (void *)v20();
    [v29 noteItem:v18];

    uint64_t v30 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v4) + 0xA8LL))();
    sub_1004F1DBC(v22, v32, a3);
  }
}

os_log_s *sub_1004618CC(void *a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  void (*v51)(__int128 *__return_ptr, uint64_t, unint64_t);
  uint64_t *v52;
  uint64_t v53;
  os_log_s *v54;
  os_log_s *v55;
  id v56;
  id v57;
  id v58;
  void *v59;
  os_log_s *v60;
  int v61;
  BOOL v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  void *v69;
  unint64_t v70;
  id v71;
  unint64_t v72;
  void *v73;
  unint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  os_log_s *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  id v88;
  id v89;
  id v90;
  os_log_s *v91;
  os_log_type_t v92;
  uint64_t v93;
  void *v94;
  id v95;
  id v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  id v101;
  id v102;
  id v103;
  id v104;
  os_log_s *v105;
  os_log_type_t v106;
  BOOL v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  id v111;
  id v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  os_log_s *result;
  os_log_s *v118;
  void *v119;
  void *v120;
  id v121;
  void *v122;
  void *v123;
  id v124;
  id v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  id v131;
  os_log_s *v132;
  os_log_type_t v133;
  BOOL v134;
  uint64_t v135;
  uint8_t *v136;
  os_log_s *v137;
  os_log_s *v138;
  uint64_t v139;
  uint64_t v140;
  __n128 v141;
  uint64_t v142;
  uint64_t *v143;
  unint64_t v144;
  uint64_t v145;
  id v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char v151;
  uint64_t v152;
  id v153;
  uint64_t v154;
  os_log_s *v155;
  os_log_type_t v156;
  uint64_t v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t *v173;
  uint64_t v174;
  uint64_t v175;
  void *v176;
  uint64_t v177;
  unint64_t v178;
  objc_class *v179;
  char *v180;
  char *v181;
  uint64_t v182;
  double v183;
  os_log_s *v184;
  os_log_s *v185;
  os_log_s *v186;
  os_log_s *v187;
  os_log_type_t v188;
  uint8_t *v189;
  uint64_t v190;
  unint64_t v191;
  void *v192;
  char v193;
  uint64_t v194;
  unint64_t v195;
  Swift::String v196;
  os_log_s *v197;
  unint64_t v198;
  unint64_t v199;
  os_log_s *v200;
  uint64_t v201;
  uint64_t v202;
  id v203;
  os_log_s *v204;
  os_log_type_t v205;
  uint64_t v206;
  void *v207;
  Swift::String v208;
  os_log_s *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  os_log_s *v213;
  uint64_t v214;
  uint64_t v215;
  int v216;
  uint64_t v217;
  __n128 v218;
  os_log_s *v219;
  os_log_s *v220;
  void *v221;
  __n128 v222;
  os_log_s *v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  void *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  char *v234;
  char *v235;
  id v236;
  void *v237;
  uint64_t v238;
  uint64_t *v239;
  uint64_t v240;
  __int128 aBlock;
  uint64_t (*v242)(uint64_t);
  void *v243;
  uint64_t (*v244)();
  void *v245;
  char v246[24];
  uint64_t v247[2];
  objc_super v248;
  void *v249;
  char v250[8];
  os_log_s *v251;
  uint64_t v252;
  os_log_s *v253;
  __int128 v254;
  v233 = a6;
  v232 = a5;
  type metadata accessor for SymmetricKey(0LL);
  __chkstk_darwin(v11, v12);
  v235 = (char *)&v214 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v14.n128_f64[0] = type metadata accessor for PaddyIncomingSymmetricRatchet(0LL);
  __chkstk_darwin(v14, v15);
  v234 = (char *)&v214 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v229 = type metadata accessor for SenderKeyAndState(0LL);
  __chkstk_darwin(v17, v18);
  v226 = (uint64_t)&v214 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v20, v21);
  v228 = (uint64_t)&v214 - v22;
  __chkstk_darwin(v23, v24);
  v230 = (uint64_t)&v214 - v25;
  v238 = type metadata accessor for SenderKeyInfo(0LL);
  v240 = *(void *)(v238 - 8);
  __chkstk_darwin(v26, v27);
  v239 = (uint64_t *)((char *)&v214 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v29 = type metadata accessor for DispatchWorkItemFlags(0LL);
  v237 = *(void **)(v29 - 8);
  __chkstk_darwin(v30, v31);
  id v33 = (char *)&v214 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v34 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v35 = *(os_log_s **)(v34 - 8);
  __chkstk_darwin(v36, v37);
  int v39 = (char *)&v214 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a4 >> 60 == 15)
  {
    id v40 = a1;
    id v41 = a2;
    id v42 = v40;
    id v43 = v41;
    uint64_t v44 = (os_log_s *)Logger.logObject.getter(v43);
    os_log_type_t v45 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v44, v45))
    {
      uint64_t v46 = swift_slowAlloc(22LL, -1LL);
      id v47 = (void *)swift_slowAlloc(16LL, -1LL);
      *(_DWORD *)uint64_t v46 = 138412546;
      *(void *)&uint64_t aBlock = v42;
      id v48 = v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 8, v46 + 4, v46 + 12);
      *id v47 = v42;

      *(_WORD *)(v46 + 1sub_10040A648(v1 + 2) = 2112;
      *(void *)&uint64_t aBlock = v43;
      id v49 = v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 8, v46 + 14, v46 + 22);
      v47[1] = v43;

      _os_log_impl( (void *)&_mh_execute_header,  v44,  v45,  "Received nil messageData remoteURI: %@ localURI: %@",  (uint8_t *)v46,  0x16u);
      uint64_t v50 = sub_1003F5CB4(&qword_1009B92C8);
      swift_arrayDestroy(v47, 2LL, v50);
      swift_slowDealloc(v47, -1LL, -1LL);
      swift_slowDealloc(v46, -1LL, -1LL);
    }

    else
    {
    }

    return (os_log_s *)_swiftEmptyArrayStorage;
  }

  v236 = a1;
  int v51 = *(void (**)(__int128 *__return_ptr, uint64_t, unint64_t))((swift_isaMask & *v6) + 0x298LL);
  sub_1004028CC(a3, a4);
  v225 = a3;
  v51(&aBlock, a3, a4);
  uint64_t v52 = &qword_1009C7000;
  if (!v243)
  {
    v224 = a4;
    sub_10040A274((uint64_t)&aBlock, &qword_1009B92B8);
    unint64_t v87 = v236;
    unint64_t v88 = a2;
    id v89 = v87;
    uint64_t v90 = v88;
    id v91 = (os_log_s *)Logger.logObject.getter(v90);
    unint64_t v92 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v91, v92))
    {
      os_log_type_t v93 = swift_slowAlloc(22LL, -1LL);
      uint64_t v94 = (void *)swift_slowAlloc(16LL, -1LL);
      *(_DWORD *)os_log_type_t v93 = 138412546;
      *(void *)&uint64_t aBlock = v89;
      uint64_t v95 = v89;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 8, v93 + 4, v93 + 12);
      *uint64_t v94 = v89;

      *(_WORD *)(v93 + 1sub_10040A648(v1 + 2) = 2112;
      *(void *)&uint64_t aBlock = v90;
      uint64_t v96 = v90;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 8, v93 + 14, v93 + 22);
      v94[1] = v90;

      _os_log_impl( (void *)&_mh_execute_header,  v91,  v92,  "Failed to de-serialize message remoteURI: %@ localURI: %@",  (uint8_t *)v93,  0x16u);
      unint64_t v97 = sub_1003F5CB4(&qword_1009B92C8);
      swift_arrayDestroy(v94, 2LL, v97);
      swift_slowDealloc(v94, -1LL, -1LL);
      swift_slowDealloc(v93, -1LL, -1LL);
    }

    else
    {
    }

    uint64_t v115 = v225;

    sub_10040AD00(v115, v224);
    return (os_log_s *)_swiftEmptyArrayStorage;
  }

  v227 = v6;
  sub_10040DAE8(&aBlock, &v254);
  v253 = (os_log_s *)_swiftEmptyArrayStorage;
  sub_10040A668((uint64_t)&v254, (uint64_t)&aBlock);
  if (!swift_dynamicCast( &v249,  &aBlock,  (char *)&type metadata for Any + 8,  &type metadata for SenderKeyMessage,  6LL))
  {
    sub_10040A668((uint64_t)&v254, (uint64_t)&aBlock);
    id v98 = sub_1003F5CB4(&qword_1009BAC30);
    uint64_t v99 = swift_dynamicCast(&v249, &aBlock, (char *)&type metadata for Any + 8, v98, 6LL);
    if ((v99 & 1) == 0)
    {
      id v132 = (os_log_s *)Logger.logObject.getter(v99);
      int64_t v133 = static os_log_type_t.error.getter();
      unint64_t v134 = os_log_type_enabled(v132, v133);
      v135 = v225;
      if (v134)
      {
        uint64_t v136 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v136 = 0;
        _os_log_impl((void *)&_mh_execute_header, v132, v133, "Invalid serialization received - aborting", v136, 2u);
        swift_slowDealloc(v136, -1LL, -1LL);
      }

      sub_10040AD00(v135, a4);
      sub_10040A648(&v254);
      swift_bridgeObjectRelease(v253);
      return (os_log_s *)_swiftEmptyArrayStorage;
    }

    char v100 = v249;
    uint64_t v101 = v236;
    uint64_t v102 = a2;
    id v103 = v101;
    uint64_t v104 = v102;
    uint64_t v105 = (os_log_s *)Logger.logObject.getter(v104);
    id v106 = static os_log_type_t.default.getter();
    uint64_t v107 = os_log_type_enabled(v105, v106);
    v224 = a4;
    if (v107)
    {
      uint64_t v108 = swift_slowAlloc(32LL, -1LL);
      v237 = v100;
      uint64_t v109 = v108;
      int v110 = (void *)swift_slowAlloc(16LL, -1LL);
      *(_DWORD *)uint64_t v109 = 134218498;
      swift_beginAccess(&v253, v246, 0LL, 0LL);
      *(void *)&uint64_t aBlock = *((void *)v253 + 2);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 8, v109 + 4, v109 + 12);
      *(_WORD *)(v109 + 1sub_10040A648(v1 + 2) = 2112;
      *(void *)&uint64_t aBlock = v103;
      uint64_t v111 = v103;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 8, v109 + 14, v109 + 22);
      *int v110 = v103;

      *(_WORD *)(v109 + 2sub_10040A648(v1 + 2) = 2112;
      *(void *)&uint64_t aBlock = v104;
      uint64_t v112 = v104;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 8, v109 + 24, v109 + 32);
      v110[1] = v104;

      _os_log_impl( (void *)&_mh_execute_header,  v105,  v106,  "Processing keyInfos with key count: %ld remoteURI: %@ localURI: %@",  (uint8_t *)v109,  0x20u);
      uint64_t v113 = sub_1003F5CB4(&qword_1009B92C8);
      swift_arrayDestroy(v110, 2LL, v113);
      swift_slowDealloc(v110, -1LL, -1LL);
      id v114 = v109;
      char v100 = v237;
      swift_slowDealloc(v114, -1LL, -1LL);
    }

    else
    {
    }

    int v130 = v225;
    unint64_t v116 = (uint64_t)v239;

    swift_beginAccess(&v253, &aBlock, 1LL, 0LL);
    uint64_t v138 = v253;
    v253 = (os_log_s *)v100;
    swift_bridgeObjectRelease(v138);
    uint64_t v131 = v236;
    goto LABEL_36;
  }

  v218.n128_u64[0] = v34;
  v219 = v35;
  v224 = a4;
  LODWORD(v231) = v250[0];
  NSString v54 = v251;
  uint64_t v53 = v252;
  id v55 = v253;
  v253 = v251;
  swift_bridgeObjectRetain(v251);
  swift_bridgeObjectRelease(v55);
  swift_bridgeObjectRetain_n(v53, 3LL);
  swift_bridgeObjectRetain_n(v54, 2LL);
  uint64_t v56 = v236;
  uint64_t v57 = a2;
  uint64_t v58 = v56;
  Swift::String v59 = v57;
  unint64_t v60 = (os_log_s *)Logger.logObject.getter(v59);
  unint64_t v61 = static os_log_type_t.default.getter();
  v223 = v60;
  id v62 = os_log_type_enabled(v60, (os_log_type_t)v61);
  v222.n128_u64[0] = (unint64_t)v58;
  v221 = v59;
  if (v62)
  {
    v216 = v61;
    v215 = v53;
    uint64_t v63 = swift_slowAlloc(52LL, -1LL);
    uint64_t v64 = (unint64_t *)swift_slowAlloc(16LL, -1LL);
    v217 = swift_slowAlloc(64LL, -1LL);
    *(void *)&uint64_t aBlock = v217;
    *(_DWORD *)uint64_t v63 = 136316162;
    unint64_t v65 = 0x8000000100840CC0LL;
    unint64_t v66 = 0xD000000000000012LL;
    if ((_DWORD)v231 == 1)
    {
      unint64_t v66 = 0x657571655279656BLL;
      unint64_t v65 = 0xEA00000000007473LL;
    }

    if ((_DWORD)v231) {
      os_log_t v67 = v66;
    }
    else {
      os_log_t v67 = 0x727473694479656BLL;
    }
    if ((_DWORD)v231) {
      uint64_t v68 = v65;
    }
    else {
      uint64_t v68 = 0xEF6E6F6974756269LL;
    }
    v249 = (void *)sub_1003FFBB0(v67, v68, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v249, v250, v63 + 4, v63 + 12);
    swift_bridgeObjectRelease(v68);
    *(_WORD *)(v63 + 1sub_10040A648(v1 + 2) = 2048;
    unint64_t v69 = (void *)*((void *)v54 + 2);
    v220 = v54;
    swift_bridgeObjectRelease(v54);
    v249 = v69;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v249, v250, v63 + 14, v63 + 22);
    swift_bridgeObjectRelease(v54);
    *(_WORD *)(v63 + 2sub_10040A648(v1 + 2) = 2112;
    uint64_t v70 = v222.n128_u64[0];
    v249 = (void *)v222.n128_u64[0];
    id v71 = (id)v222.n128_u64[0];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v249, v250, v63 + 24, v63 + 32);
    *uint64_t v64 = v70;

    *(_WORD *)(v63 + 3sub_10040A648(v1 + 2) = 2112;
    uint64_t v72 = (unint64_t)v221;
    v249 = v221;
    uint64_t v73 = v221;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v249, v250, v63 + 34, v63 + 42);
    v64[1] = v72;
    uint64_t v74 = v64;

    *(_WORD *)(v63 + 4sub_10040A648(v1 + 2) = 2080;
    id v75 = v215;
    swift_bridgeObjectRetain(v215);
    uint64_t v77 = Array.description.getter(v76, &type metadata for String);
    __n128 v79 = v78;
    swift_bridgeObjectRelease(v75);
    v249 = (void *)sub_1003FFBB0(v77, v79, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v249, v250, v63 + 44, v63 + 52);
    uint64_t v80 = v79;
    uint64_t v81 = v75;
    swift_bridgeObjectRelease(v80);
    swift_bridgeObjectRelease_n(v75, 2LL);
    NSString v82 = v223;
    _os_log_impl( (void *)&_mh_execute_header,  v223,  (os_log_type_t)v216,  "Processing key message of type: %s key count: %ld remoteURI: %@ localURI: %@ requestedKeyIDs: %s",  (uint8_t *)v63,  0x34u);
    uint64_t v83 = sub_1003F5CB4(&qword_1009B92C8);
    swift_arrayDestroy(v74, 2LL, v83);
    swift_slowDealloc(v74, -1LL, -1LL);
    uint64_t v84 = v217;
    swift_arrayDestroy(v217, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v84, -1LL, -1LL);
    swift_slowDealloc(v63, -1LL, -1LL);

    NSString v54 = v220;
    uint64_t v52 = &qword_1009C7000;
  }

  else
  {
    swift_bridgeObjectRelease_n(v54, 2LL);

    uint64_t v85 = swift_bridgeObjectRelease_n(v53, 2LL);
    uint64_t v81 = v53;
  }

  unint64_t v116 = (uint64_t)v239;
  if ((_DWORD)v231 != 1 || !*(void *)(v81 + 16))
  {
    swift_bridgeObjectRelease_n(v81, 2LL);
    swift_bridgeObjectRelease(v54);
    int v130 = v225;
    uint64_t v131 = v236;
LABEL_37:
    swift_beginAccess(&v253, &v249, 0LL, 0LL);
    uint64_t v139 = *((void *)v253 + 2);
    if (!v139)
    {
      v213 = v253;
      swift_bridgeObjectRetain(v253);
      sub_10040AD00(v130, v224);
      swift_bridgeObjectRelease(v213);
      uint64_t v137 = (os_log_s *)_swiftEmptyArrayStorage;
LABEL_76:
      sub_10040A648(&v254);
      swift_bridgeObjectRelease(v253);
      return v137;
    }

    v231 = (char *)v227 + v52[222];
    uint64_t v140 = (uint64_t)v253
         + ((*(unsigned __int8 *)(v240 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v240 + 80));
    v237 = *(void **)(v240 + 72);
    v219 = v253;
    uint64_t v141 = swift_bridgeObjectRetain(v253);
    v240 = 0LL;
    v223 = (os_log_s *)_swiftEmptyArrayStorage;
    v141.n128_u64[0] = 136315394LL;
    v222 = v141;
    v221 = (void *)((char *)&type metadata for Any + 8);
    v141.n128_u64[0] = 138412546LL;
    v218 = v141;
    while (1)
    {
      sub_1003F5FC8(v140, v116, type metadata accessor for SenderKeyInfo);
      v143 = (uint64_t *)(v116 + *(int *)(v238 + 28));
      uint64_t v145 = *v143;
      v144 = v143[1];
      uint64_t v146 = objc_msgSend(v131, "prefixedURI", swift_bridgeObjectRetain(v144).n128_f64[0]);
      v147 = static String._unconditionallyBridgeFromObjectiveC(_:)(v146);
      v149 = v148;

      if (v145 == v147 && v144 == v149)
      {
        swift_bridgeObjectRelease(v144);
        v152 = v240;
      }

      else
      {
        v151 = _stringCompareWithSmolCheck(_:_:expecting:)(v145, v144, v147, v149, 0LL);
        swift_bridgeObjectRelease(v149);
        v152 = v240;
        if ((v151 & 1) == 0)
        {
          v153 = v131;
          swift_bridgeObjectRetain(v144);
          v155 = (os_log_s *)Logger.logObject.getter(v154);
          v156 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v155, v156))
          {
            v157 = swift_slowAlloc(22LL, -1LL);
            v158 = (void *)swift_slowAlloc(8LL, -1LL);
            v159 = swift_slowAlloc(32LL, -1LL);
            v247[0] = v159;
            *(_DWORD *)v157 = v222.n128_u32[0];
            swift_bridgeObjectRetain(v144);
            *(void *)(v157 + 4) = sub_1003FFBB0(v145, v144, v247);
            swift_bridgeObjectRelease_n(v144, 3LL);
            *(_WORD *)(v157 + 1sub_10040A648(v1 + 2) = 2112;
            *(void *)(v157 + 14) = v153;
            *v158 = v236;

            _os_log_impl( (void *)&_mh_execute_header,  v155,  v156,  "Received a key but senderURI: %s and remoteURI: %@ don't match - dropping! This should never happen.",  (uint8_t *)v157,  0x16u);
            v160 = sub_1003F5CB4(&qword_1009B92C8);
            swift_arrayDestroy(v158, 1LL, v160);
            swift_slowDealloc(v158, -1LL, -1LL);
            swift_arrayDestroy(v159, 1LL, v221);
            swift_slowDealloc(v159, -1LL, -1LL);
            swift_slowDealloc(v157, -1LL, -1LL);
          }

          else
          {

            swift_bridgeObjectRelease_n(v144, 2LL);
          }

          unint64_t v116 = (uint64_t)v239;
          v179 = (objc_class *)type metadata accessor for SenderKeyDistributionManager.SenderKeyURIMismatchMetric();
          v180 = (char *)objc_allocWithZone(v179);
          v181 = &v180[OBJC_IVAR____TtCC17identityservicesd28SenderKeyDistributionManagerP33_E220278C37BF7A52CA212AA0DEF6BDED26SenderKeyURIMismatchMetric_messageGUID];
          v182 = v233;
          *(void *)v181 = v232;
          *((void *)v181 + 1) = v182;
          v248.receiver = v180;
          v248.super_class = v179;
          *(void *)&v183 = swift_bridgeObjectRetain(v182).n128_u64[0];
          v184 = (os_log_s *)objc_msgSendSuper2(&v248, "init", v183);
          v185 = (os_log_s *)[(id)objc_opt_self(IDSCoreAnalyticsLogger) defaultLogger];
          if (v185)
          {
            v186 = v185;
            -[os_log_s logMetric:](v185, "logMetric:", v184);
          }

          else
          {
            v187 = (os_log_s *)Logger.logObject.getter(0LL);
            v188 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v187, v188))
            {
              v189 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
              *(_WORD *)v189 = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v187,  v188,  "Failed to initialize CoreAnalyticsLogger.",  v189,  2u);
              swift_slowDealloc(v189, -1LL, -1LL);
              v186 = v187;
            }

            else
            {
              v186 = v184;
              v184 = v187;
            }
          }

          uint64_t v131 = v236;

          goto LABEL_40;
        }
      }

      swift_bridgeObjectRelease(v144);
      type metadata accessor for SenderKeyUtils();
      v161 = sub_1004C8F00(v145, v144, v143[2], v143[3]);
      if (v162 >> 60 == 15) {
        break;
      }
      v163 = v161;
      v164 = v162;
      unint64_t v116 = (uint64_t)v239;
      v165 = v239[1];
      v247[0] = *v239;
      v247[1] = v165;
      sub_1004028CC(v247[0], v165);
      v166 = v235;
      SymmetricKey.init<A>(data:)(v247, &type metadata for Data, &protocol witness table for Data);
      sub_1004028CC(v163, v164);
      v167 = (uint64_t)v234;
      v168 = PaddyIncomingSymmetricRatchet.init(senderKey:conversationDST:)(v166, v163, v164);
      if (v152)
      {
        sub_10040AD00(v163, v164);
        swift_errorRelease(v152);
        v240 = 0LL;
        goto LABEL_40;
      }

      v240 = 0LL;
      v169 = PaddyIncomingSymmetricRatchet.serializedData()(v168);
      v171 = v170;
      sub_10040AD00(v163, v164);
      sub_1003F6050(v167, (uint64_t (*)(void))&type metadata accessor for PaddyIncomingSymmetricRatchet);
      v172 = v228;
      sub_1003F5FC8(v116, v228, type metadata accessor for SenderKeyInfo);
      v173 = (uint64_t *)(v172 + *(int *)(v229 + 20));
      *v173 = v169;
      v173[1] = v171;
      v174 = v230;
      v175 = sub_1003F600C(v172, v230, type metadata accessor for SenderKeyAndState);
      v176 = v227;
      v177 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v227) + 0xD8LL))(v175);
      if (v178 >> 60 == 15)
      {
        sub_1003F6050(v174, type metadata accessor for SenderKeyAndState);
LABEL_71:
        sub_1003F6050(v116, type metadata accessor for SenderKeyInfo);
        uint64_t v131 = v236;
        goto LABEL_42;
      }

      v190 = v177;
      v191 = v178;
      v192 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v176) + 0xA8LL))();
      v193 = sub_1004F318C(v174, v190, v191);

      if ((v193 & 1) == 0)
      {
        sub_10040AD00(v190, v191);
        sub_1003F6050(v174, type metadata accessor for SenderKeyAndState);
        unint64_t v116 = (uint64_t)v239;
        goto LABEL_71;
      }

      v194 = *(void *)(v174 + 16);
      v195 = *(void *)(v174 + 24);
      sub_1004028CC(v194, v195);
      v196 = Data.base64EncodedString(options:)(0LL);
      sub_100402A84(v194, v195);
      v197 = v223;
      if ((swift_isUniquelyReferenced_nonNull_native(v223) & 1) == 0) {
        v197 = (os_log_s *)sub_10046D484(0LL, *((void *)v197 + 2) + 1LL, 1, v197);
      }
      v223 = v197;
      v199 = *((void *)v197 + 2);
      v198 = *((void *)v197 + 3);
      uint64_t v131 = v236;
      if (v199 >= v198 >> 1) {
        v223 = (os_log_s *)sub_10046D484((void *)(v198 > 1), v199 + 1, 1, v223);
      }
      v200 = v223;
      *((void *)v223 + sub_10040A648(v1 + 2) = v199 + 1;
      *((Swift::String *)v200 + v199 + sub_10040A648(v1 + 2) = v196;
      v201 = v230;
      v202 = v226;
      sub_1003F5FC8(v230, v226, type metadata accessor for SenderKeyAndState);
      v203 = v131;
      v204 = (os_log_s *)Logger.logObject.getter(v203);
      v205 = static os_log_type_t.default.getter();
      v220 = v204;
      if (os_log_type_enabled(v204, v205))
      {
        v206 = swift_slowAlloc(22LL, -1LL);
        v207 = (void *)swift_slowAlloc(8LL, -1LL);
        v217 = swift_slowAlloc(32LL, -1LL);
        v247[0] = v217;
        *(_DWORD *)v206 = v218.n128_u32[0];
        *(void *)(v206 + 4) = v203;
        *v207 = v131;

        *(_WORD *)(v206 + 1sub_10040A648(v1 + 2) = 2080;
        v208 = Data.base64EncodedString(options:)(0LL);
        *(void *)(v206 + 14) = sub_1003FFBB0(v208._countAndFlagsBits, (unint64_t)v208._object, v247);
        swift_bridgeObjectRelease(v208._object);
        sub_1003F6050(v202, type metadata accessor for SenderKeyAndState);
        v209 = v220;
        _os_log_impl( (void *)&_mh_execute_header,  v220,  v205,  "Successfully unpacked and saved received sender key from uri: %@ keyID: %s",  (uint8_t *)v206,  0x16u);
        v210 = sub_1003F5CB4(&qword_1009B92C8);
        swift_arrayDestroy(v207, 1LL, v210);
        swift_slowDealloc(v207, -1LL, -1LL);
        v211 = v217;
        swift_arrayDestroy(v217, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v211, -1LL, -1LL);
        swift_slowDealloc(v206, -1LL, -1LL);
        sub_10040AD00(v190, v191);

        v212 = v230;
      }

      else
      {
        sub_10040AD00(v190, v191);

        sub_1003F6050(v202, type metadata accessor for SenderKeyAndState);
        v212 = v201;
      }

      sub_1003F6050(v212, type metadata accessor for SenderKeyAndState);
      unint64_t v116 = (uint64_t)v239;
      uint64_t v142 = (uint64_t)v239;
LABEL_41:
      sub_1003F6050(v142, type metadata accessor for SenderKeyInfo);
LABEL_42:
      v140 += (uint64_t)v237;
      if (!--v139)
      {
        sub_10040AD00(v225, v224);
        swift_bridgeObjectRelease(v219);
        uint64_t v137 = v223;
        goto LABEL_76;
      }
    }

    unint64_t v116 = (uint64_t)v239;
LABEL_40:
    uint64_t v142 = v116;
    goto LABEL_41;
  }

  v220 = v54;
  id result = (os_log_s *)(id)im_primary_queue(v85, v86);
  if (result)
  {
    unint64_t v118 = result;
    unint64_t v119 = (void *)swift_allocObject(&unk_100906368, 48LL, 7LL);
    uint64_t v120 = v227;
    v119[2] = v227;
    v119[3] = v81;
    uint64_t v121 = v221;
    uint64_t v122 = (void *)v222.n128_u64[0];
    v119[4] = v221;
    v119[5] = v122;
    v244 = sub_100479C3C;
    v245 = v119;
    *(void *)&uint64_t aBlock = _NSConcreteStackBlock;
    *((void *)&aBlock + 1) = 1107296256LL;
    v242 = sub_1003F8400;
    v243 = &unk_100906380;
    uint64_t v123 = _Block_copy(&aBlock);
    unint64_t v124 = v122;
    id v125 = v121;
    static DispatchQoS.unspecified.getter(v120);
    v249 = _swiftEmptyArrayStorage;
    uint64_t v126 = v81;
    id v127 = sub_10040A2B0( (unint64_t *)&unk_1009BAC40,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    int64_t v128 = sub_1003F5CB4((uint64_t *)&unk_1009B9870);
    id v129 = sub_10047E23C( (unint64_t *)&qword_1009BAC50,  (uint64_t *)&unk_1009B9870,  (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v249, v128, v129, v29, v127);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v39, v33, v123);
    _Block_release(v123);

    swift_bridgeObjectRelease(v220);
    swift_bridgeObjectRelease(v126);
    ((void (*)(char *, uint64_t))v237[1])(v33, v29);
    (*((void (**)(char *, unint64_t))v219 + 1))(v39, v218.n128_u64[0]);
    swift_release(v245);
    int v130 = v225;
    uint64_t v131 = v236;
    unint64_t v116 = (uint64_t)v239;
LABEL_36:
    uint64_t v52 = &qword_1009C7000;
    goto LABEL_37;
  }

  __break(1u);
  return result;
}

void sub_10046321C(void *a1, void *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v9 = type metadata accessor for DispatchTime(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v11, v12);
  __n128 v14 = &v157[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v15, v16);
  __n128 v18 = &v157[-v17];
  id v170 = (id)type metadata accessor for DispatchWorkItemFlags(0LL);
  __chkstk_darwin(v19, v20);
  v168 = &v157[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  v172 = v4;
  uint64_t v22 = (char *)v4 + OBJC_IVAR___IDSSenderKeyDistributionManager_logger;
  id v23 = a1;
  id v24 = a2;
  swift_bridgeObjectRetain_n(a3, 2LL);
  swift_bridgeObjectRetain_n(a4, 2LL);
  id v25 = v23;
  id v26 = v24;
  v173 = v22;
  __n128 v27 = (os_log_s *)Logger.logObject.getter(v26);
  os_log_type_t v28 = static os_log_type_t.default.getter();
  int v29 = v28;
  v171[0] = v27;
  BOOL v30 = os_log_type_enabled(v27, v28);
  v166 = v18;
  uint64_t v167 = v9;
  uint64_t v165 = v10;
  v164 = v14;
  id v169 = v26;
  if (v30)
  {
    uint64_t v31 = swift_slowAlloc(42LL, -1LL);
    LODWORD(v16sub_10040A648(v1 + 2) = v29;
    uint64_t v32 = v31;
    id v33 = (os_log_s *)swift_slowAlloc(16LL, -1LL);
    v163 = (void **)swift_slowAlloc(64LL, -1LL);
    uint64_t aBlock = v163;
    *(_DWORD *)uint64_t v32 = 138413058;
    id v34 = v25;
    uint64_t v178 = (uint64_t)v25;
    id v35 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v178, v179, v32 + 4, v32 + 12);
    *(void *)id v33 = v25;
    v161 = v33;

    *(_WORD *)(v32 + 1sub_10040A648(v1 + 2) = 2112;
    uint64_t v178 = (uint64_t)v26;
    id v36 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v178, v179, v32 + 14, v32 + 22);
    *((void *)v33 + 1) = v26;

    *(_WORD *)(v32 + 2sub_10040A648(v1 + 2) = 2080;
    swift_bridgeObjectRetain(a3);
    uint64_t v38 = Array.description.getter(v37, &type metadata for String);
    unint64_t v40 = v39;
    swift_bridgeObjectRelease(a3);
    uint64_t v178 = sub_1003FFBB0(v38, v40, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v178, v179, v32 + 24, v32 + 32);
    swift_bridgeObjectRelease(v40);
    swift_bridgeObjectRelease_n(a3, 2LL);
    *(_WORD *)(v32 + 3sub_10040A648(v1 + 2) = 2080;
    swift_bridgeObjectRetain(a4);
    uint64_t v42 = Array.description.getter(v41, &type metadata for String);
    unint64_t v44 = v43;
    swift_bridgeObjectRelease(a4);
    uint64_t v178 = sub_1003FFBB0(v42, v44, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v178, v179, v32 + 34, v32 + 42);
    unint64_t v45 = v44;
    id v25 = v34;
    swift_bridgeObjectRelease(v45);
    swift_bridgeObjectRelease_n(a4, 2LL);
    os_log_t v46 = v171[0];
    _os_log_impl( (void *)&_mh_execute_header,  v171[0],  (os_log_type_t)v162,  "triggerKeyRecovery called with toURI: %@ fromURI: %@ keysToSend: %s keysToRequest: %s",  (uint8_t *)v32,  0x2Au);
    uint64_t v47 = sub_1003F5CB4(&qword_1009B92C8);
    id v48 = v161;
    swift_arrayDestroy(v161, 2LL, v47);
    swift_slowDealloc(v48, -1LL, -1LL);
    id v49 = v163;
    swift_arrayDestroy(v163, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v49, -1LL, -1LL);
    swift_slowDealloc(v32, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a3, 2LL);
    swift_bridgeObjectRelease_n(a4, 2LL);
  }

  uint64_t v50 = a3;
  if (!*(void *)(a3 + 16) && !*(void *)(a4 + 16)) {
    return;
  }
  v171[0] = (os_log_t)a4;
  int v51 = (void **)((char *)v172 + OBJC_IVAR___IDSSenderKeyDistributionManager_recoveryWorkItems);
  swift_beginAccess((char *)v172 + OBJC_IVAR___IDSSenderKeyDistributionManager_recoveryWorkItems, &v178, 0LL, 0LL);
  uint64_t v52 = *v51;
  uint64_t v53 = *((void *)*v51 + 2);
  id v54 = v25;
  id v55 = v169;
  v163 = v51;
  if (!v53) {
    goto LABEL_11;
  }
  swift_bridgeObjectRetain(v52);
  unint64_t v56 = sub_10046D590(v54, v55);
  if ((v57 & 1) == 0)
  {
    swift_bridgeObjectRelease(v52);
LABEL_11:
    id v74 = v54;
    id v169 = v55;
    id v75 = v55;
    uint64_t v76 = (void **)v74;
    uint64_t v77 = (void **)v75;
    uint64_t v78 = (os_log_s *)Logger.logObject.getter(v77);
    os_log_type_t v79 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v78, v79))
    {
      uint64_t v80 = swift_slowAlloc(22LL, -1LL);
      uint64_t v81 = swift_slowAlloc(16LL, -1LL);
      id v162 = v54;
      NSString v82 = (void *)v81;
      *(_DWORD *)uint64_t v80 = 138412546;
      uint64_t aBlock = v76;
      v161 = v78;
      uint64_t v83 = v76;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v176, v80 + 4, v80 + 12);
      *NSString v82 = v76;

      *(_WORD *)(v80 + 1sub_10040A648(v1 + 2) = 2112;
      uint64_t aBlock = v77;
      uint64_t v84 = v77;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v176, v80 + 14, v80 + 22);
      v82[1] = v77;

      uint64_t v85 = v161;
      _os_log_impl( (void *)&_mh_execute_header,  v161,  v79,  "Scheduling new recovery work item for toURI: %@ fromURI: %@",  (uint8_t *)v80,  0x16u);
      uint64_t v86 = sub_1003F5CB4(&qword_1009B92C8);
      swift_arrayDestroy(v82, 2LL, v86);
      unint64_t v87 = v82;
      id v54 = v162;
      swift_slowDealloc(v87, -1LL, -1LL);
      swift_slowDealloc(v80, -1LL, -1LL);
    }

    else
    {
    }

    unint64_t v88 = v168;
    id v55 = v169;
    goto LABEL_17;
  }

  uint64_t v58 = *(void *)(v52[7] + 8 * v56);
  swift_retain(v58);
  swift_bridgeObjectRelease(v52);
  id v59 = v54;
  id v60 = v55;
  unint64_t v61 = (void **)v59;
  v161 = (os_log_s *)v60;
  id v62 = (os_log_s *)Logger.logObject.getter(v161);
  os_log_type_t v63 = static os_log_type_t.default.getter();
  int v64 = v63;
  if (os_log_type_enabled(v62, v63))
  {
    uint64_t v65 = swift_slowAlloc(22LL, -1LL);
    id v162 = v54;
    uint64_t v66 = v65;
    os_log_t v67 = (void ***)swift_slowAlloc(16LL, -1LL);
    *(_DWORD *)uint64_t v66 = 138412546;
    uint64_t v160 = v58;
    int v158 = v64;
    uint64_t aBlock = v61;
    id v169 = v55;
    uint64_t v68 = v61;
    v159 = v62;
    unint64_t v69 = v68;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v176, v66 + 4, v66 + 12);
    *os_log_t v67 = v61;

    *(_WORD *)(v66 + 1sub_10040A648(v1 + 2) = 2112;
    uint64_t v70 = v161;
    uint64_t aBlock = (void **)v161;
    id v71 = v161;
    id v55 = v169;
    id v62 = v159;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v176, v66 + 14, v66 + 22);
    v67[1] = (void **)v70;

    uint64_t v58 = v160;
    _os_log_impl( (void *)&_mh_execute_header,  v62,  (os_log_type_t)v158,  "Cancelling existing recovery work item for toURI: %@ fromURI: %@",  (uint8_t *)v66,  0x16u);
    uint64_t v72 = sub_1003F5CB4(&qword_1009B92C8);
    swift_arrayDestroy(v67, 2LL, v72);
    swift_slowDealloc(v67, -1LL, -1LL);
    uint64_t v73 = v66;
    id v54 = v162;
    swift_slowDealloc(v73, -1LL, -1LL);
  }

  else
  {

    uint64_t v70 = v161;
  }

  unint64_t v88 = v168;

  dispatch thunk of DispatchWorkItem.cancel()(v89);
  swift_beginAccess(v51, &aBlock, 33LL, 0LL);
  uint64_t v90 = v61;
  id v91 = v70;
  uint64_t v92 = sub_10046DB8C(v90, v91);
  swift_endAccess(&aBlock);

  swift_release(v58);
  swift_release(v92);
LABEL_17:
  uint64_t v93 = swift_allocObject(&unk_1009061D8, 24LL, 7LL);
  swift_unknownObjectWeakInit(v93 + 16, v172);
  uint64_t v94 = (void *)swift_allocObject(&unk_1009063B8, 72LL, 7LL);
  v94[2] = v93;
  v94[3] = v54;
  v94[4] = v55;
  v94[5] = v50;
  unint64_t v95 = (unint64_t)v171[0];
  v94[6] = v171[0];
  v94[7] = v54;
  v94[8] = v55;
  v176[3] = sub_100479EE0;
  v177 = v94;
  uint64_t aBlock = _NSConcreteStackBlock;
  v176[0] = 1107296256LL;
  v176[1] = sub_1003F8400;
  v176[2] = &unk_1009063D0;
  uint64_t v96 = _Block_copy(&aBlock);
  v174 = _swiftEmptyArrayStorage;
  uint64_t v97 = v50;
  uint64_t v98 = sub_10040A2B0( (unint64_t *)&unk_1009BAC40,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  id v99 = v54;
  id v100 = v55;
  id v101 = v99;
  id v102 = v100;
  swift_bridgeObjectRetain(v97);
  swift_bridgeObjectRetain(v95);
  swift_retain(v93);
  uint64_t v103 = sub_1003F5CB4((uint64_t *)&unk_1009B9870);
  uint64_t v104 = sub_10047E23C( (unint64_t *)&qword_1009BAC50,  (uint64_t *)&unk_1009B9870,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v174, v103, v104, v170, v98);
  uint64_t v105 = type metadata accessor for DispatchWorkItem(0LL);
  swift_allocObject(v105, *(unsigned int *)(v105 + 48), *(unsigned __int16 *)(v105 + 52));
  uint64_t v106 = DispatchWorkItem.init(flags:block:)(v88, v96);
  swift_release(v177);
  swift_release(v93);
  uint64_t v107 = v163;
  swift_beginAccess(v163, &aBlock, 33LL, 0LL);
  id v108 = v101;
  uint64_t v109 = v106;
  id v110 = v108;
  id v111 = v102;
  swift_retain(v109);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v107);
  v174 = *v107;
  *uint64_t v107 = (void *)0x8000000000000000LL;
  sub_10046E558(v109, v110, v111, isUniquelyReferenced_nonNull_native);
  uint64_t v113 = *v107;
  *uint64_t v107 = v174;
  swift_bridgeObjectRelease(v113);
  id v170 = v110;

  id v169 = v111;
  uint64_t v114 = swift_endAccess(&aBlock);
  id v116 = (id)im_primary_queue(v114, v115);
  if (!v116) {
    goto LABEL_47;
  }
  uint64_t v117 = v116;
  unint64_t v118 = v164;
  uint64_t v119 = static DispatchTime.now()(v116);
  (*(void (**)(uint64_t))((swift_isaMask & *v172) + 0x228LL))(v119);
  uint64_t v120 = v166;
  + infix(_:_:)(v118);
  uint64_t v121 = *(void (**)(_BYTE *, uint64_t))(v165 + 8);
  uint64_t v122 = v118;
  uint64_t v123 = v167;
  v121(v122, v167);
  v168 = (_BYTE *)v109;
  OS_dispatch_queue.asyncAfter(deadline:execute:)(v120, v109);

  uint64_t v124 = ((uint64_t (*)(_BYTE *, uint64_t))v121)(v120, v123);
  id v125 = (os_log_s *)Logger.logObject.getter(v124);
  os_log_type_t v126 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v125, v126))
  {
    id v127 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)id v127 = 0;
    _os_log_impl((void *)&_mh_execute_header, v125, v126, "Currently scheduled key recovery work items:", v127, 2u);
    swift_slowDealloc(v127, -1LL, -1LL);
  }

  int64_t v128 = *v107;
  uint64_t v129 = *((void *)*v107 + 8);
  v172 = (char *)*v107 + 64;
  uint64_t v130 = 1LL << v128[32];
  uint64_t v131 = -1LL;
  if (v130 < 64) {
    uint64_t v131 = ~(-1LL << v130);
  }
  unint64_t v132 = v131 & v129;
  int64_t v133 = (unint64_t)(v130 + 63) >> 6;
  __n128 v134 = swift_bridgeObjectRetain(v128);
  int64_t v135 = 0LL;
  v134.n128_u64[0] = 138412546LL;
  *(__n128 *)v171 = v134;
  while (1)
  {
    if (v132)
    {
      unint64_t v139 = __clz(__rbit64(v132));
      v132 &= v132 - 1;
      unint64_t v140 = v139 | (v135 << 6);
      goto LABEL_41;
    }

    int64_t v141 = v135 + 1;
    if (__OFADD__(v135, 1LL))
    {
      __break(1u);
      goto LABEL_46;
    }

    if (v141 >= v133) {
      goto LABEL_43;
    }
    unint64_t v142 = v172[v141];
    ++v135;
    if (!v142)
    {
      int64_t v135 = v141 + 1;
      if (v141 + 1 >= v133) {
        goto LABEL_43;
      }
      unint64_t v142 = v172[v135];
      if (!v142)
      {
        int64_t v135 = v141 + 2;
        if (v141 + 2 >= v133) {
          goto LABEL_43;
        }
        unint64_t v142 = v172[v135];
        if (!v142) {
          break;
        }
      }
    }

double sub_1004640A0()
{
  return 60.0;
}

void sub_1004640AC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = v3;
  if (a1)
  {
    id v7 = (void *)a1;
    if (!*(void *)(a1 + 16)) {
      return;
    }
  }

  else
  {
    id v7 = _swiftEmptyArrayStorage;
  }

  id v8 = a2;
  id v9 = a3;
  swift_bridgeObjectRetain_n(a1, 2LL);
  id v10 = v8;
  id v11 = v9;
  __n128 v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    os_log_type_t type = v13;
    uint64_t v14 = swift_slowAlloc(32LL, -1LL);
    __n128 v15 = (void *)swift_slowAlloc(16LL, -1LL);
    uint64_t v26 = swift_slowAlloc(32LL, -1LL);
    uint64_t v28 = (uint64_t)v10;
    uint64_t v29 = v26;
    *(_DWORD *)uint64_t v14 = 138412802;
    __n128 v27 = v4;
    log = v12;
    id v16 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v14 + 4, v14 + 12);
    *__n128 v15 = v10;

    *(_WORD *)(v14 + 1sub_10040A648(v1 + 2) = 2112;
    uint64_t v28 = (uint64_t)v11;
    id v17 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v14 + 14, v14 + 22);
    v15[1] = v11;

    *(_WORD *)(v14 + 2sub_10040A648(v1 + 2) = 2080;
    swift_bridgeObjectRetain(a1);
    uint64_t v18 = Array.description.getter(v7, &type metadata for Data);
    unint64_t v20 = v19;
    swift_bridgeObjectRelease(v7);
    uint64_t v21 = v18;
    uint64_t v4 = v27;
    uint64_t v28 = sub_1003FFBB0(v21, v20, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v14 + 24, v14 + 32);
    swift_bridgeObjectRelease_n(a1, 2LL);
    swift_bridgeObjectRelease(v20);
    _os_log_impl( (void *)&_mh_execute_header,  log,  type,  "Resetting key state for senderURI: %@ receiverURI: %@ keyIDs: %s",  (uint8_t *)v14,  0x20u);
    uint64_t v22 = sub_1003F5CB4(&qword_1009B92C8);
    swift_arrayDestroy(v15, 2LL, v22);
    swift_slowDealloc(v15, -1LL, -1LL);
    swift_arrayDestroy(v26, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1LL, -1LL);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(a1, 2LL);
  }

  id v23 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v4) + 0xA8LL))();
  sub_1004F2D3C(v10, v11, a1);
}

void sub_100464414(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchTime(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v8, v9);
  id v148 = (char *)&v139 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (char *)&v139 - v13;
  v149.n128_u64[0] = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v17 = __chkstk_darwin(v15, v16);
  id v151 = (char *)&v139 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v19 = (void *)(*(uint64_t (**)(uint64_t))((swift_isaMask & *v2) + 0xA8LL))(v17);
  char v20 = sub_1004E9CDC(a1, a2);

  uint64_t v21 = (char *)v3 + OBJC_IVAR___IDSSenderKeyDistributionManager_logger;
  id v22 = a1;
  id v23 = a2;
  id v24 = (void **)v22;
  v152 = (void **)v23;
  id v25 = (os_log_s *)Logger.logObject.getter(v152);
  os_log_type_t v26 = static os_log_type_t.default.getter();
  BOOL v27 = os_log_type_enabled(v25, v26);
  if ((v20 & 1) == 0)
  {
    if (v27)
    {
      uint64_t v33 = swift_slowAlloc(22LL, -1LL);
      id v34 = (void ***)swift_slowAlloc(16LL, -1LL);
      *(_DWORD *)uint64_t v33 = 138412546;
      uint64_t aBlock = v24;
      id v35 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v155, v33 + 4, v33 + 12);
      *id v34 = v24;

      *(_WORD *)(v33 + 1sub_10040A648(v1 + 2) = 2112;
      uint64_t aBlock = v152;
      id v36 = v152;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v155, v33 + 14, v33 + 22);
      v34[1] = v152;

      _os_log_impl( (void *)&_mh_execute_header,  v25,  v26,  "Unknown {remoteURI: %@ localURI: %@} for key distribution - not handling remote device update",  (uint8_t *)v33,  0x16u);
      uint64_t v37 = sub_1003F5CB4(&qword_1009B92C8);
      swift_arrayDestroy(v34, 2LL, v37);
      swift_slowDealloc(v34, -1LL, -1LL);
      swift_slowDealloc(v33, -1LL, -1LL);
    }

    else
    {
    }

    return;
  }

  id v150 = v21;
  id v146 = v14;
  uint64_t v147 = v6;
  uint64_t v145 = v7;
  if (v27)
  {
    uint64_t v28 = swift_slowAlloc(22LL, -1LL);
    uint64_t v29 = (void ***)swift_slowAlloc(16LL, -1LL);
    *(_DWORD *)uint64_t v28 = 138412546;
    uint64_t aBlock = v24;
    BOOL v30 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v155, v28 + 4, v28 + 12);
    *uint64_t v29 = v24;

    *(_WORD *)(v28 + 1sub_10040A648(v1 + 2) = 2112;
    uint64_t aBlock = v152;
    uint64_t v31 = v152;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v155, v28 + 14, v28 + 22);
    v29[1] = v152;

    _os_log_impl( (void *)&_mh_execute_header,  v25,  v26,  "Handling remote device update for remoteURI: %@ localURI: %@",  (uint8_t *)v28,  0x16u);
    uint64_t v32 = sub_1003F5CB4(&qword_1009B92C8);
    swift_arrayDestroy(v29, 2LL, v32);
    swift_slowDealloc(v29, -1LL, -1LL);
    swift_slowDealloc(v28, -1LL, -1LL);
  }

  else
  {
  }

  uint64_t v38 = (void *)((char *)v3 + OBJC_IVAR___IDSSenderKeyDistributionManager_deviceUpdateWorkItems);
  swift_beginAccess((char *)v3 + OBJC_IVAR___IDSSenderKeyDistributionManager_deviceUpdateWorkItems, v157, 0LL, 0LL);
  uint64_t v39 = *v38;
  uint64_t v40 = *(void *)(*v38 + 16LL);
  uint64_t v41 = v24;
  uint64_t v42 = v152;
  if (!v40) {
    goto LABEL_13;
  }
  swift_bridgeObjectRetain(v39);
  unint64_t v43 = sub_10046D590(v41, v42);
  if ((v44 & 1) == 0)
  {
    swift_bridgeObjectRelease(v39);
LABEL_13:
    v152 = (void **)v3;
    id v62 = v41;
    os_log_type_t v63 = v42;
    int v64 = v62;
    uint64_t v65 = v63;
    uint64_t v66 = (os_log_s *)Logger.logObject.getter(v65);
    os_log_type_t v67 = static os_log_type_t.default.getter();
    int v68 = v67;
    if (os_log_type_enabled(v66, v67))
    {
      uint64_t v69 = swift_slowAlloc(22LL, -1LL);
      uint64_t v70 = (void ***)swift_slowAlloc(16LL, -1LL);
      *(_DWORD *)uint64_t v69 = 138412546;
      int64_t v143 = v41;
      uint64_t aBlock = v64;
      LODWORD(v14sub_10040A648(v1 + 2) = v68;
      id v71 = v64;
      uint64_t v144 = v42;
      uint64_t v72 = v71;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v155, v69 + 4, v69 + 12);
      *uint64_t v70 = v64;

      *(_WORD *)(v69 + 1sub_10040A648(v1 + 2) = 2112;
      uint64_t aBlock = v65;
      uint64_t v73 = v65;
      uint64_t v41 = v143;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v155, v69 + 14, v69 + 22);
      v70[1] = v65;

      uint64_t v42 = v144;
      _os_log_impl( (void *)&_mh_execute_header,  v66,  (os_log_type_t)v142,  "Scheduling new device update work item for remoteURI: %@ localURI: %@",  (uint8_t *)v69,  0x16u);
      uint64_t v74 = sub_1003F5CB4(&qword_1009B92C8);
      swift_arrayDestroy(v70, 2LL, v74);
      swift_slowDealloc(v70, -1LL, -1LL);
      swift_slowDealloc(v69, -1LL, -1LL);
    }

    else
    {
    }

    id v75 = v151;
    uint64_t v3 = v152;
    goto LABEL_19;
  }

  uint64_t v45 = *(void *)(*(void *)(v39 + 56) + 8 * v43);
  swift_retain(v45);
  swift_bridgeObjectRelease(v39);
  os_log_t v46 = v41;
  uint64_t v47 = v42;
  id v48 = v46;
  unint64_t v142 = v47;
  id v49 = (os_log_s *)Logger.logObject.getter(v142);
  os_log_type_t v50 = static os_log_type_t.default.getter();
  BOOL v51 = os_log_type_enabled(v49, v50);
  int64_t v143 = v48;
  if (v51)
  {
    uint64_t v52 = swift_slowAlloc(22LL, -1LL);
    uint64_t v53 = swift_slowAlloc(16LL, -1LL);
    uint64_t v144 = v42;
    id v54 = (void *)v53;
    *(_DWORD *)uint64_t v52 = 138412546;
    uint64_t v141 = v45;
    uint64_t aBlock = v48;
    v152 = (void **)v3;
    id v55 = v48;
    unint64_t v140 = v49;
    unint64_t v56 = v55;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v155, v52 + 4, v52 + 12);
    *id v54 = v48;

    *(_WORD *)(v52 + 1sub_10040A648(v1 + 2) = 2112;
    char v57 = v142;
    uint64_t aBlock = v142;
    uint64_t v58 = v142;
    uint64_t v3 = v152;
    id v49 = v140;
    id v59 = v57;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v155, v52 + 14, v52 + 22);
    v54[1] = v57;

    uint64_t v45 = v141;
    _os_log_impl( (void *)&_mh_execute_header,  v49,  v50,  "Cancelling existing device update work item for remoteURI: %@ localURI: %@",  (uint8_t *)v52,  0x16u);
    uint64_t v60 = sub_1003F5CB4(&qword_1009B92C8);
    swift_arrayDestroy(v54, 2LL, v60);
    unint64_t v61 = v54;
    uint64_t v42 = v144;
    swift_slowDealloc(v61, -1LL, -1LL);
    swift_slowDealloc(v52, -1LL, -1LL);
  }

  else
  {

    id v59 = v142;
  }

  id v75 = v151;

  dispatch thunk of DispatchWorkItem.cancel()(v76);
  swift_beginAccess(v38, &aBlock, 33LL, 0LL);
  uint64_t v77 = v143;
  uint64_t v78 = v59;
  uint64_t v79 = sub_10046DB8C(v77, v78);
  swift_endAccess(&aBlock);

  swift_release(v45);
  swift_release(v79);
LABEL_19:
  uint64_t v80 = swift_allocObject(&unk_1009061D8, 24LL, 7LL);
  swift_unknownObjectWeakInit(v80 + 16, v3);
  uint64_t v81 = (void *)swift_allocObject(&unk_100906408, 56LL, 7LL);
  v81[2] = v80;
  v81[3] = v41;
  v81[4] = v42;
  v81[5] = v41;
  v81[6] = v42;
  v155[3] = sub_10047A3AC;
  uint64_t v156 = v81;
  uint64_t aBlock = _NSConcreteStackBlock;
  v155[0] = 1107296256LL;
  v155[1] = sub_1003F8400;
  v155[2] = &unk_100906420;
  NSString v82 = _Block_copy(&aBlock);
  os_log_type_t v153 = _swiftEmptyArrayStorage;
  uint64_t v83 = sub_10040A2B0( (unint64_t *)&unk_1009BAC40,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v84 = v41;
  uint64_t v85 = v42;
  uint64_t v86 = v84;
  unint64_t v87 = v85;
  swift_retain(v80);
  uint64_t v88 = sub_1003F5CB4((uint64_t *)&unk_1009B9870);
  uint64_t v89 = sub_10047E23C( (unint64_t *)&qword_1009BAC50,  (uint64_t *)&unk_1009B9870,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v153, v88, v89, v149.n128_u64[0], v83);
  uint64_t v90 = type metadata accessor for DispatchWorkItem(0LL);
  swift_allocObject(v90, *(unsigned int *)(v90 + 48), *(unsigned __int16 *)(v90 + 52));
  uint64_t v91 = DispatchWorkItem.init(flags:block:)(v75, v82);
  swift_release(v156);
  swift_release(v80);
  swift_beginAccess(v38, &aBlock, 33LL, 0LL);
  uint64_t v92 = v86;
  uint64_t v93 = v87;
  swift_retain(v91);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v38);
  os_log_type_t v153 = (void *)*v38;
  *uint64_t v38 = 0x8000000000000000LL;
  sub_10046E558(v91, v92, v93, isUniquelyReferenced_nonNull_native);
  uint64_t v95 = *v38;
  *uint64_t v38 = v153;
  swift_bridgeObjectRelease(v95);
  uint64_t v144 = v92;

  int64_t v143 = v93;
  uint64_t v96 = swift_endAccess(&aBlock);
  id v98 = (id)im_primary_queue(v96, v97);
  if (!v98) {
    goto LABEL_49;
  }
  id v99 = v98;
  id v100 = v148;
  uint64_t v101 = static DispatchTime.now()(v98);
  (*(void (**)(uint64_t))((swift_isaMask & *v3) + 0x240LL))(v101);
  id v102 = v146;
  + infix(_:_:)(v100);
  uint64_t v103 = *(void (**)(char *, uint64_t))(v145 + 8);
  uint64_t v104 = v100;
  uint64_t v105 = v147;
  v103(v104, v147);
  id v148 = (char *)v91;
  OS_dispatch_queue.asyncAfter(deadline:execute:)(v102, v91);

  uint64_t v106 = ((uint64_t (*)(char *, uint64_t))v103)(v102, v105);
  uint64_t v107 = (os_log_s *)Logger.logObject.getter(v106);
  os_log_type_t v108 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v107, v108))
  {
    uint64_t v109 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v109 = 0;
    _os_log_impl((void *)&_mh_execute_header, v107, v108, "Currently scheduled device update work items:", v109, 2u);
    swift_slowDealloc(v109, -1LL, -1LL);
  }

  uint64_t v110 = *v38;
  uint64_t v111 = *(void *)(*v38 + 64LL);
  id v151 = (char *)(*v38 + 64LL);
  uint64_t v112 = 1LL << *(_BYTE *)(v110 + 32);
  uint64_t v113 = -1LL;
  if (v112 < 64) {
    uint64_t v113 = ~(-1LL << v112);
  }
  unint64_t v114 = v113 & v111;
  v152 = (void **)((unint64_t)(v112 + 63) >> 6);
  __n128 v115 = swift_bridgeObjectRetain(v110);
  uint64_t v116 = 0LL;
  v115.n128_u64[0] = 138412546LL;
  __n128 v149 = v115;
  while (1)
  {
    if (v114)
    {
      unint64_t v120 = __clz(__rbit64(v114));
      v114 &= v114 - 1;
      unint64_t v121 = v120 | (v116 << 6);
      goto LABEL_43;
    }

    uint64_t v122 = v116 + 1;
    if (__OFADD__(v116, 1LL))
    {
      __break(1u);
      goto LABEL_48;
    }

    uint64_t v123 = v148;
    unint64_t v124 = *(void *)&v151[8 * v122];
    ++v116;
    if (!v124)
    {
      uint64_t v116 = v122 + 1;
      unint64_t v124 = *(void *)&v151[8 * v116];
      if (!v124)
      {
        uint64_t v116 = v122 + 2;
        unint64_t v124 = *(void *)&v151[8 * v116];
        if (!v124) {
          break;
        }
      }
    }

void sub_100465228(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain_n(a1, 2LL);
  id v6 = a2;
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.default.getter();
  uint64_t v33 = v6;
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc(22LL, -1LL);
    uint64_t v10 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v31 = swift_slowAlloc(32LL, -1LL);
    uint64_t v35 = v31;
    *(_DWORD *)uint64_t v9 = 136315394;
    swift_bridgeObjectRetain(a1);
    uint64_t v32 = v3;
    uint64_t v12 = Array.description.getter(v11, &type metadata for String);
    unint64_t v14 = v13;
    swift_bridgeObjectRelease(a1);
    uint64_t v34 = sub_1003FFBB0(v12, v14, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease_n(a1, 2LL);
    swift_bridgeObjectRelease(v14);
    *(_WORD *)(v9 + 1sub_10040A648(v1 + 2) = 2112;
    uint64_t v34 = (uint64_t)v6;
    id v15 = v6;
    uint64_t v3 = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v9 + 14, v9 + 22);
    *uint64_t v10 = v6;

    _os_log_impl( (void *)&_mh_execute_header,  v7,  v8,  "Updating delivered state for keyIDs: %s pushToken: %@",  (uint8_t *)v9,  0x16u);
    uint64_t v16 = sub_1003F5CB4(&qword_1009B92C8);
    swift_arrayDestroy(v10, 1LL, v16);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_arrayDestroy(v31, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a1, 2LL);
  }

  uint64_t v18 = *(void *)(a1 + 16);
  if (v18)
  {
    swift_bridgeObjectRetain(a1);
    unint64_t v19 = (void *)(a1 + 40);
    char v20 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v22 = *(v19 - 1);
      uint64_t v23 = *v19;
      __n128 v24 = swift_bridgeObjectRetain(*v19);
      uint64_t v25 = Data.init(base64Encoded:options:)(v22, v23, 0LL, v24);
      unint64_t v27 = v26;
      swift_bridgeObjectRelease(v23);
      if (v27 >> 60 != 15)
      {
        if ((swift_isUniquelyReferenced_nonNull_native(v20) & 1) == 0) {
          char v20 = sub_10046D170(0LL, v20[2] + 1LL, 1, v20);
        }
        unint64_t v29 = v20[2];
        unint64_t v28 = v20[3];
        if (v29 >= v28 >> 1) {
          char v20 = sub_10046D170((void *)(v28 > 1), v29 + 1, 1, v20);
        }
        v20[2] = v29 + 1;
        uint64_t v21 = &v20[2 * v29];
        v21[4] = v25;
        v21[5] = v27;
      }

      v19 += 2;
      --v18;
    }

    while (v18);
    uint64_t v17 = swift_bridgeObjectRelease(a1);
    if (v20[2]) {
      goto LABEL_14;
    }
  }

  else
  {
    char v20 = _swiftEmptyArrayStorage;
    if (_swiftEmptyArrayStorage[2])
    {
LABEL_14:
      BOOL v30 = (void *)(*(uint64_t (**)(uint64_t))((swift_isaMask & *v3) + 0xA8LL))(v17);
      sub_1004F1250(v33, (uint64_t)v20, 0LL, 0LL);
      swift_bridgeObjectRelease(v20);

      return;
    }
  }

  swift_bridgeObjectRelease(v20);
}

void sub_1004655F0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a3;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0) {
      uint64_t v48 = a3;
    }
    else {
      uint64_t v48 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v48);
  }

  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(a3);
  }

  os_log_type_t v50 = a1;
  BOOL v51 = a2;
  if (v7)
  {
    if (v7 < 1)
    {
      __break(1u);
      return;
    }

    uint64_t v8 = 0LL;
    unint64_t v9 = v4 & 0xC000000000000001LL;
    uint64_t v10 = _swiftEmptyArrayStorage;
    uint64_t v11 = v4;
    do
    {
      if (v9) {
        id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v4);
      }
      else {
        id v12 = *(id *)(v4 + 8 * v8 + 32);
      }
      unint64_t v13 = v12;
      id v14 = [v12 rawToken];
      uint64_t v15 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v14);
      uint64_t v17 = v16;

      if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0) {
        uint64_t v10 = sub_10046D170(0LL, v10[2] + 1LL, 1, v10);
      }
      unint64_t v19 = v10[2];
      unint64_t v18 = v10[3];
      if (v19 >= v18 >> 1) {
        uint64_t v10 = sub_10046D170((void *)(v18 > 1), v19 + 1, 1, v10);
      }
      ++v8;
      v10[2] = v19 + 1;
      char v20 = &v10[2 * v19];
      v20[4] = v15;
      v20[5] = v17;
      uint64_t v4 = v11;
    }

    while (v7 != v8);
  }

  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }

  swift_bridgeObjectRelease(v4);
  uint64_t v21 = sub_10047A7B4((uint64_t)v10);
  uint64_t v22 = swift_bridgeObjectRelease(v10);
  uint64_t v23 = (void *)(*(uint64_t (**)(uint64_t))((swift_isaMask & *v3) + 0xA8LL))(v22);
  __n128 v24 = sub_1004E9C70((uint64_t)v50, (uint64_t)v51);

  if (v24[2] <= *(void *)(v21 + 16) >> 3)
  {
    uint64_t v54 = v21;
    sub_100474D20((uint64_t)v24);
    swift_bridgeObjectRelease(v24);
    uint64_t v25 = (void *)v21;
    if (!*(void *)(v21 + 16)) {
      goto LABEL_18;
    }
  }

  else
  {
    uint64_t v25 = sub_100474EC8((uint64_t)v24, v21);
    swift_bridgeObjectRelease(v24);
    if (!v25[2])
    {
LABEL_18:
      swift_bridgeObjectRelease(v25);
      return;
    }
  }

  swift_bridgeObjectRetain_n(v4, 2LL);
  id v26 = v50;
  id v27 = v51;
  id v28 = v26;
  id v29 = v27;
  swift_bridgeObjectRetain(v25);
  uint64_t v31 = (os_log_s *)Logger.logObject.getter(v30);
  os_log_type_t v32 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = swift_slowAlloc(42LL, -1LL);
    uint64_t v34 = (void *)swift_slowAlloc(16LL, -1LL);
    uint64_t v52 = swift_slowAlloc(64LL, -1LL);
    uint64_t v53 = (uint64_t)v28;
    uint64_t v54 = v52;
    *(_DWORD *)uint64_t v33 = 138413058;
    log = v31;
    id v35 = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v33 + 4, v33 + 12);
    *uint64_t v34 = v28;

    *(_WORD *)(v33 + 1sub_10040A648(v1 + 2) = 2112;
    uint64_t v53 = (uint64_t)v29;
    id v36 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v33 + 14, v33 + 22);
    v34[1] = v29;

    *(_WORD *)(v33 + 2sub_10040A648(v1 + 2) = 2080;
    uint64_t v37 = sub_10041D3C4(0LL, (unint64_t *)&qword_1009BBE30, &OBJC_CLASS___IDSPushToken_ptr);
    swift_bridgeObjectRetain(v4);
    uint64_t v39 = Array.description.getter(v38, v37);
    unint64_t v41 = v40;
    swift_bridgeObjectRelease(v4);
    uint64_t v53 = sub_1003FFBB0(v39, v41, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v33 + 24, v33 + 32);
    swift_bridgeObjectRelease_n(v4, 2LL);
    swift_bridgeObjectRelease(v41);
    *(_WORD *)(v33 + 3sub_10040A648(v1 + 2) = 2080;
    sub_10045E8A4((uint64_t)v25);
    uint64_t v43 = v42;
    uint64_t v44 = Array.description.getter(v42, v37);
    unint64_t v46 = v45;
    swift_bridgeObjectRelease(v43);
    uint64_t v53 = sub_1003FFBB0(v44, v46, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v33 + 34, v33 + 42);
    swift_bridgeObjectRelease_n(v25, 2LL);
    swift_bridgeObjectRelease(v46);
    uint64_t v31 = log;
    _os_log_impl( (void *)&_mh_execute_header,  log,  v32,  "Detected device missing keys! senderURI: %@ receiverURI: %@ currentPeerTokens: %s missingTokens: %s",  (uint8_t *)v33,  0x2Au);
    uint64_t v47 = sub_1003F5CB4(&qword_1009B92C8);
    swift_arrayDestroy(v34, 2LL, v47);
    swift_slowDealloc(v34, -1LL, -1LL);
    swift_arrayDestroy(v52, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v52, -1LL, -1LL);
    swift_slowDealloc(v33, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(v25, 2LL);
    swift_bridgeObjectRelease_n(v4, 2LL);
  }
}

void *sub_100465B14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1003F5CB4((uint64_t *)&unk_1009BAC20);
  __chkstk_darwin(v11, v12);
  uint64_t v52 = (uint64_t)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v51 = type metadata accessor for SenderKeyInfo(0LL);
  uint64_t v53 = *(void *)(v51 - 8);
  __chkstk_darwin(v14, v15);
  uint64_t v50 = (uint64_t)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v17, v18);
  uint64_t v49 = (uint64_t)&v48 - v19;
  uint64_t v20 = sub_1003F5CB4((uint64_t *)&unk_1009BB120);
  __chkstk_darwin(v21, v22);
  __n128 v24 = (char *)&v48 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = __chkstk_darwin(v25, v26);
  id v29 = (char *)&v48 - v28;
  uint64_t v30 = (char *)&v48 + *(int *)(v27 + 48) - v28;
  uint64_t v31 = (char *)&v48 + *(int *)(v27 + 64) - v28;
  os_log_type_t v32 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v3) + 0xA8LL))();
  sub_1004EB850((uint64_t)v29, (uint64_t)v30, (uint64_t)v31, a1, a2, a3);

  uint64_t v33 = type metadata accessor for SenderKeyAndState(0LL);
  uint64_t v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v33 - 8) + 48LL);
  if (v34(v29, 1LL, v33) != 1)
  {
    uint64_t v38 = (uint64_t *)&unk_1009BB120;
    uint64_t v39 = (uint64_t)v29;
LABEL_7:
    sub_10040A274(v39, v38);
    return _swiftEmptyArrayStorage;
  }

  uint64_t v35 = (uint64_t)&v24[*(int *)(v20 + 48)];
  uint64_t v36 = (uint64_t)&v24[*(int *)(v20 + 64)];
  sub_10047ACE0((uint64_t)v29, (uint64_t)v24);
  sub_10047ACE0((uint64_t)v30, v35);
  sub_10047ACE0((uint64_t)v31, v36);
  sub_10041D378(v35, (uint64_t)v10, (uint64_t *)&unk_1009BAC60);
  if (v34(v10, 1LL, v33) == 1)
  {
    sub_10040A274(v36, (uint64_t *)&unk_1009BAC60);
    sub_10040A274((uint64_t)v24, (uint64_t *)&unk_1009BAC60);
    sub_10040A274((uint64_t)v10, (uint64_t *)&unk_1009BAC60);
    uint64_t v37 = v52;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v53 + 56))(v52, 1LL, 1LL, v51);
LABEL_6:
    sub_10040A274((uint64_t)v29, (uint64_t *)&unk_1009BB120);
    uint64_t v38 = (uint64_t *)&unk_1009BAC20;
    uint64_t v39 = v37;
    goto LABEL_7;
  }

  uint64_t v37 = v52;
  sub_1003F5FC8((uint64_t)v10, v52, type metadata accessor for SenderKeyInfo);
  sub_1003F6050((uint64_t)v10, type metadata accessor for SenderKeyAndState);
  uint64_t v40 = v53;
  uint64_t v41 = v51;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v53 + 56))(v37, 0LL, 1LL, v51);
  sub_10040A274(v36, (uint64_t *)&unk_1009BAC60);
  sub_10040A274((uint64_t)v24, (uint64_t *)&unk_1009BAC60);
  uint64_t v44 = v49;
  sub_1003F600C(v37, v49, type metadata accessor for SenderKeyInfo);
  uint64_t v45 = v50;
  sub_1003F5FC8(v44, v50, type metadata accessor for SenderKeyInfo);
  unint64_t v42 = sub_10046D27C(0, 1LL, 1, (unint64_t)_swiftEmptyArrayStorage);
  unint64_t v47 = *(void *)(v42 + 16);
  unint64_t v46 = *(void *)(v42 + 24);
  if (v47 >= v46 >> 1) {
    unint64_t v42 = sub_10046D27C(v46 > 1, v47 + 1, 1, v42);
  }
  *(void *)(v42 + swift_unknownObjectWeakDestroy(v0 + 16) = v47 + 1;
  sub_1003F600C( v45,  v42 + ((*(unsigned __int8 *)(v40 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80))
  + *(void *)(v40 + 72) * v47,
    type metadata accessor for SenderKeyInfo);
  sub_1003F6050(v44, type metadata accessor for SenderKeyInfo);
  sub_10040A274((uint64_t)v29, (uint64_t *)&unk_1009BB120);
  return (void *)v42;
}

uint64_t sub_100465F40(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v50 = *(void *)(type metadata accessor for SenderKeyInfo(0LL) - 8);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v12, v13);
  __n128 v15 = (char *)v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v16, v17);
  uint64_t v20 = (char *)v44 - v19;
  uint64_t v21 = Date.init()(v18);
  Date.addingTimeInterval(_:)(v21, -86400.0);
  __n128 v22 = *(uint64_t (**)(char *, uint64_t))(v11 + 8);
  uint64_t v23 = v22(v15, v10);
  __n128 v24 = *(uint64_t (**)(uint64_t))((swift_isaMask & *v3) + 0xA8LL);
  __n128 v25 = (void *)v24(v23);
  __n128 v26 = sub_1004EA818(a1, a2);

  id v55 = v20;
  swift_bridgeObjectRetain(v26);
  uint64_t v27 = sub_10045D984((uint64_t (*)(char *))sub_10047DF04, (uint64_t)v54, (uint64_t)v26);
  uint64_t v53 = v20;
  swift_bridgeObjectRetain(v26);
  uint64_t v51 = sub_10045D984((uint64_t (*)(char *))sub_10047DF50, (uint64_t)v52, (uint64_t)v26);
  uint64_t v28 = v26[2];
  uint64_t v29 = swift_bridgeObjectRelease(v26);
  if (v28) {
    BOOL v30 = *(void *)(v27 + 16) == 0LL;
  }
  else {
    BOOL v30 = 0;
  }
  uint64_t v31 = v27;
  os_log_type_t v32 = (void *)v51;
  if (*(void *)(v51 + 16))
  {
    uint64_t v49 = v24(v29);
    uint64_t v33 = v32[2];
    if (v33)
    {
      v44[1] = v30;
      uint64_t v45 = v31;
      unint64_t v46 = v22;
      unint64_t v47 = v20;
      uint64_t v48 = v10;
      uint64_t v34 = (uint64_t)v32 + ((*(unsigned __int8 *)(v50 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80));
      uint64_t v35 = *(void *)(v50 + 72);
      swift_bridgeObjectRetain(v32);
      uint64_t v36 = _swiftEmptyArrayStorage;
      do
      {
        sub_1003F5FC8(v34, (uint64_t)v9, type metadata accessor for SenderKeyInfo);
        uint64_t v37 = *((void *)v9 + 2);
        unint64_t v38 = *((void *)v9 + 3);
        sub_1004028CC(v37, v38);
        sub_1003F6050((uint64_t)v9, type metadata accessor for SenderKeyInfo);
        if ((swift_isUniquelyReferenced_nonNull_native(v36) & 1) == 0) {
          uint64_t v36 = sub_10046D170(0LL, v36[2] + 1LL, 1, v36);
        }
        unint64_t v40 = v36[2];
        unint64_t v39 = v36[3];
        if (v40 >= v39 >> 1) {
          uint64_t v36 = sub_10046D170((void *)(v39 > 1), v40 + 1, 1, v36);
        }
        v36[2] = v40 + 1;
        uint64_t v41 = &v36[2 * v40];
        v41[4] = v37;
        v41[5] = v38;
        v34 += v35;
        --v33;
      }

      while (v33);
      swift_bridgeObjectRelease_n(v51, 2LL);
      uint64_t v20 = v47;
      uint64_t v10 = v48;
      uint64_t v31 = v45;
      __n128 v22 = v46;
    }

    else
    {
      swift_bridgeObjectRelease(v32);
      uint64_t v36 = _swiftEmptyArrayStorage;
    }

    unint64_t v42 = (void *)v49;
    sub_1004FCE7C((uint64_t)v36);

    os_log_type_t v32 = v36;
  }

  swift_bridgeObjectRelease(v32);
  v22(v20, v10);
  return v31;
}

uint64_t sub_10046624C@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v74 = a4;
  sub_1003F5CB4((uint64_t *)&unk_1009BAC60);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for SenderKeyAndState(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v14, v15);
  uint64_t v73 = (uint64_t)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v17, v18);
  uint64_t v20 = (char *)&v69 - v19;
  (*(void (**)(void *, void *))((swift_isaMask & *v4) + 0x280LL))(a1, a2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12) == 1)
  {
    sub_10040A274((uint64_t)v11, (uint64_t *)&unk_1009BAC60);
    id v21 = a2;
    id v22 = a1;
    id v23 = v21;
    id v24 = v22;
    __n128 v25 = (os_log_s *)Logger.logObject.getter(v24);
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = swift_slowAlloc(22LL, -1LL);
      uint64_t v28 = (void *)swift_slowAlloc(16LL, -1LL);
      *(_DWORD *)uint64_t v27 = 138412546;
      uint64_t v76 = (uint64_t)v23;
      id v29 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v27 + 4, v27 + 12);
      *uint64_t v28 = v23;

      *(_WORD *)(v27 + 1sub_10040A648(v1 + 2) = 2112;
      uint64_t v76 = (uint64_t)v24;
      id v30 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v27 + 14, v27 + 22);
      v28[1] = v24;

      _os_log_impl( (void *)&_mh_execute_header,  v25,  v26,  "Failed to generate new sender key and state for URI: %@ fromURI: %@",  (uint8_t *)v27,  0x16u);
      uint64_t v31 = sub_1003F5CB4(&qword_1009B92C8);
      swift_arrayDestroy(v28, 2LL, v31);
      swift_slowDealloc(v28, -1LL, -1LL);
      swift_slowDealloc(v27, -1LL, -1LL);
    }

    else
    {
    }

LABEL_15:
    uint64_t v68 = type metadata accessor for SenderKeyInfo(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v68 - 8) + 56LL))( v74,  1LL,  1LL,  v68);
  }

  uint64_t v32 = sub_1003F600C((uint64_t)v11, (uint64_t)v20, type metadata accessor for SenderKeyAndState);
  uint64_t v33 = (void *)(*(uint64_t (**)(uint64_t))((swift_isaMask & *v4) + 0xA8LL))(v32);
  char v34 = sub_1004F09A8((uint64_t)v20, a3);

  uint64_t v35 = (uint64_t)v20;
  if ((v34 & 1) == 0)
  {
    id v53 = a2;
    id v54 = a1;
    id v55 = v53;
    id v56 = v54;
    char v57 = (os_log_s *)Logger.logObject.getter(v56);
    os_log_type_t v58 = static os_log_type_t.error.getter();
    int v59 = v58;
    if (os_log_type_enabled(v57, v58))
    {
      uint64_t v60 = swift_slowAlloc(22LL, -1LL);
      unint64_t v61 = (void *)swift_slowAlloc(16LL, -1LL);
      *(_DWORD *)uint64_t v60 = 138412546;
      LODWORD(v7sub_10040A648(v1 + 3) = v59;
      uint64_t v76 = (uint64_t)v55;
      id v62 = v55;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v60 + 4, v60 + 12);
      *unint64_t v61 = v55;

      *(_WORD *)(v60 + 1sub_10040A648(v1 + 2) = 2112;
      uint64_t v76 = (uint64_t)v56;
      id v63 = v56;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v60 + 14, v60 + 22);
      v61[1] = v56;

      _os_log_impl( (void *)&_mh_execute_header,  v57,  (os_log_type_t)v73,  "Failed to save new sender key and state for URI: %@ fromURI: %@",  (uint8_t *)v60,  0x16u);
      uint64_t v64 = sub_1003F5CB4(&qword_1009B92C8);
      swift_arrayDestroy(v61, 2LL, v64);
      swift_slowDealloc(v61, -1LL, -1LL);
      swift_slowDealloc(v60, -1LL, -1LL);
    }

    else
    {

      char v57 = (os_log_s *)v55;
    }

    sub_1003F6050(v35, type metadata accessor for SenderKeyAndState);
    goto LABEL_15;
  }

  uint64_t v36 = (uint64_t)v20;
  uint64_t v37 = v73;
  sub_1003F5FC8(v36, v73, type metadata accessor for SenderKeyAndState);
  id v38 = a2;
  id v39 = a1;
  id v40 = v38;
  id v41 = v39;
  unint64_t v42 = (os_log_s *)Logger.logObject.getter(v41);
  os_log_type_t v43 = static os_log_type_t.default.getter();
  int v44 = v43;
  if (os_log_type_enabled(v42, v43))
  {
    uint64_t v45 = swift_slowAlloc(32LL, -1LL);
    unint64_t v46 = (void *)swift_slowAlloc(16LL, -1LL);
    uint64_t v72 = swift_slowAlloc(32LL, -1LL);
    uint64_t v75 = (uint64_t)v40;
    uint64_t v76 = v72;
    *(_DWORD *)uint64_t v45 = 138412802;
    int v71 = v44;
    os_log_t v70 = v42;
    id v47 = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v45 + 4, v45 + 12);
    *unint64_t v46 = v40;

    *(_WORD *)(v45 + 1sub_10040A648(v1 + 2) = 2112;
    uint64_t v75 = (uint64_t)v41;
    id v48 = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v45 + 14, v45 + 22);
    v46[1] = v41;

    *(_WORD *)(v45 + 2sub_10040A648(v1 + 2) = 2080;
    Swift::String v49 = Data.base64EncodedString(options:)(0LL);
    uint64_t v75 = sub_1003FFBB0(v49._countAndFlagsBits, (unint64_t)v49._object, &v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v45 + 24, v45 + 32);
    swift_bridgeObjectRelease(v49._object);
    sub_1003F6050(v37, type metadata accessor for SenderKeyAndState);
    os_log_t v50 = v70;
    _os_log_impl( (void *)&_mh_execute_header,  v70,  (os_log_type_t)v71,  "Successfully generated and saved new sender key for URI: %@ fromURI: %@ keyID: %s",  (uint8_t *)v45,  0x20u);
    uint64_t v51 = sub_1003F5CB4(&qword_1009B92C8);
    swift_arrayDestroy(v46, 2LL, v51);
    swift_slowDealloc(v46, -1LL, -1LL);
    uint64_t v52 = v72;
    swift_arrayDestroy(v72, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v52, -1LL, -1LL);
    swift_slowDealloc(v45, -1LL, -1LL);
  }

  else
  {

    sub_1003F6050(v37, type metadata accessor for SenderKeyAndState);
  }

  uint64_t v65 = v74;
  sub_1003F5FC8(v35, v74, type metadata accessor for SenderKeyInfo);
  sub_1003F6050(v35, type metadata accessor for SenderKeyAndState);
  uint64_t v66 = type metadata accessor for SenderKeyInfo(0LL);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v66 - 8) + 56LL))( v65,  0LL,  1LL,  v66);
}

uint64_t sub_10046694C(uint64_t a1, uint64_t a2)
{
  __n128 v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v11, v12);
  __n128 v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v15, v16);
  uint64_t v19 = (char *)&v29 - v18;
  uint64_t v20 = (void *)(*(uint64_t (**)(uint64_t))((swift_isaMask & *v2) + 0xA8LL))(v17);
  sub_1004F4AA4(a1, a2, (uint64_t)v8);

  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9) == 1)
  {
    sub_10040A274((uint64_t)v8, &qword_1009BC130);
    return 1LL;
  }

  uint64_t v21 = (*(uint64_t (**)(char *, char *, uint64_t))(v10 + 32))(v19, v8, v9);
  Date.init()(v21);
  double v22 = Date.timeIntervalSince(_:)(v19);
  id v23 = *(uint64_t (**)(char *, uint64_t))(v10 + 8);
  uint64_t v24 = v23(v14, v9);
  if (v22 > 300.0)
  {
    v23(v19, v9);
    return 1LL;
  }

  os_log_type_t v26 = (os_log_s *)Logger.logObject.getter(v24);
  os_log_type_t v27 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v28 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v26,  v27,  "We are still within cool down period, not regenerating",  v28,  2u);
    swift_slowDealloc(v28, -1LL, -1LL);
  }

  v23(v19, v9);
  return 0LL;
}

uint64_t sub_100466B78@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v78 = *(void *)(v6 - 8);
  uint64_t v79 = v6;
  __chkstk_darwin(v7, v8);
  uint64_t v76 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v77 = type metadata accessor for SenderKeyInfo(0LL);
  __chkstk_darwin(v10, v11);
  uint64_t v80 = (_OWORD *)((char *)&v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v13 = sub_1003F5CB4((uint64_t *)&unk_1009BAC70);
  __chkstk_darwin(v14, v15);
  uint64_t v17 = (char *)&v66 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18, v19);
  uint64_t v81 = (uint64_t)&v66 - v20;
  v21.n128_f64[0] = type metadata accessor for PaddyOutgoingSymmetricRatchet(0LL);
  __chkstk_darwin(v21, v22);
  uint64_t v24 = (char *)&v66 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for SenderKeyUtils();
  id v74 = a1;
  id v25 = [a1 prefixedURI];
  uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
  uint64_t v28 = v27;

  id v75 = a2;
  id v29 = [a2 prefixedURI];
  uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
  uint64_t v32 = v31;

  uint64_t v33 = sub_1004C8F00(v26, v28, v30, v32);
  unint64_t v35 = v34;
  swift_bridgeObjectRelease(v28);
  swift_bridgeObjectRelease(v32);
  if (v35 >> 60 == 15)
  {
    uint64_t v36 = type metadata accessor for SenderKeyAndState(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56LL))( a3,  1LL,  1LL,  v36);
  }

  else
  {
    uint64_t v73 = a3;
    sub_1004028CC(v33, v35);
    uint64_t v38 = PaddyOutgoingSymmetricRatchet.init(conversationDST:)(v33, v35);
    uint64_t v39 = PaddyOutgoingSymmetricRatchet.serializedData()(v38);
    uint64_t v71 = v40;
    uint64_t v72 = v39;
    uint64_t v41 = PaddyOutgoingSymmetricRatchet.ratchetSenderKeyID()();
    uint64_t v69 = v42;
    uint64_t v70 = v41;
    uint64_t v43 = *(int *)(v13 + 48);
    uint64_t v44 = v81;
    uint64_t v45 = PaddyOutgoingSymmetricRatchet.exportSenderKey()(v81);
    *(void *)(v44 + v4sub_10040A648(v1 + 3) = v45;
    id v46 = [v74 prefixedURI];
    id v74 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
    uint64_t v68 = v47;

    id v48 = [v75 prefixedURI];
    id v75 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
    uint64_t v67 = v49;

    uint64_t v50 = *(int *)(v13 + 48);
    uint64_t v51 = type metadata accessor for SymmetricKey(0LL);
    uint64_t v52 = *(void *)(v51 - 8);
    uint64_t v53 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v52 + 16))(v17, v44, v51);
    *(void *)&v17[v50] = v45;
    id v54 = v76;
    Date.init()(v53);
    SymmetricKey.withUnsafeBytes<A>(_:)(&v82, sub_10046BD20, 0LL, &type metadata for Data);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v17, v51);
    uint64_t v55 = v79;
    uint64_t v56 = (uint64_t)v80;
    *uint64_t v80 = v82;
    uint64_t v57 = v69;
    *(void *)(v56 + swift_unknownObjectWeakDestroy(v0 + 16) = v70;
    *(void *)(v56 + 24) = v57;
    uint64_t v58 = v77;
    (*(void (**)(uint64_t, char *, uint64_t))(v78 + 32))(v56 + *(int *)(v77 + 24), v54, v55);
    sub_10040AD00(v33, v35);
    int v59 = (void *)(v56 + *(int *)(v58 + 28));
    uint64_t v60 = v68;
    *int v59 = v74;
    v59[1] = v60;
    uint64_t v61 = v67;
    void v59[2] = v75;
    v59[3] = v61;
    sub_10040A274(v81, (uint64_t *)&unk_1009BAC70);
    sub_1003F6050( (uint64_t)v24,  (uint64_t (*)(void))&type metadata accessor for PaddyOutgoingSymmetricRatchet);
    uint64_t v62 = v73;
    sub_1003F600C(v56, v73, type metadata accessor for SenderKeyInfo);
    uint64_t v63 = type metadata accessor for SenderKeyAndState(0LL);
    uint64_t v64 = (uint64_t *)(v62 + *(int *)(v63 + 20));
    uint64_t v65 = v71;
    *uint64_t v64 = v72;
    v64[1] = v65;
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v63 - 8) + 56LL))( v62,  0LL,  1LL,  v63);
  }

uint64_t sub_100466FC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result = type metadata accessor for SenderKeyAndState(0LL);
  __n128 v8 = (void *)(a4 + *(int *)(result + 20));
  *__n128 v8 = a2;
  v8[1] = a3;
  return result;
}

uint64_t sub_100467010(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = type metadata accessor for JSONEncoder(0LL);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  uint64_t v10 = JSONEncoder.init()();
  __n128 v11 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v4) + 0xA8LL))();
  sub_10041D3C4(0LL, (unint64_t *)&unk_1009BC3D0, &OBJC_CLASS___IDSEndpoint_ptr);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  unsigned int v13 = [v11 senderKeyMessageSupportedFor:isa];

  if (v13)
  {
    uint64_t v43 = a1;
    char v44 = a2;
    uint64_t v45 = a3;
    uint64_t v46 = a4;
    unint64_t v14 = sub_10047A84C();
    uint64_t v27 = dispatch thunk of JSONEncoder.encode<A>(_:)(&v43, &type metadata for SenderKeyMessage, v14, v15);
LABEL_12:
    swift_release(v10);
    return v27;
  }

  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  uint64_t v16 = JSONEncoder.init()();
  uint64_t v17 = sub_100479854(a3);
  __n128 v18 = v17;
  int64_t v19 = v17[2];
  if (v19)
  {
    uint64_t v42 = v10;
    uint64_t v43 = _swiftEmptyArrayStorage;
    sub_100411D38(0LL, v19, 0);
    uint64_t v20 = _swiftEmptyArrayStorage;
    __n128 v21 = v18 + 5;
    do
    {
      uint64_t v22 = *(v21 - 1);
      unint64_t v23 = *v21;
      sub_1004028CC(v22, *v21);
      Swift::String v24 = Data.base64EncodedString(options:)(0LL);
      sub_100402A84(v22, v23);
      uint64_t v43 = v20;
      unint64_t v26 = v20[2];
      unint64_t v25 = v20[3];
      if (v26 >= v25 >> 1)
      {
        sub_100411D38((char *)(v25 > 1), v26 + 1, 1);
        uint64_t v20 = v43;
      }

      v21 += 2;
      v20[2] = v26 + 1;
      *(Swift::String *)&v20[2 * v26 + 4] = v24;
      --v19;
    }

    while (v19);
    swift_bridgeObjectRelease(v18);
    uint64_t v10 = v42;
  }

  else
  {
    swift_bridgeObjectRelease(v17);
    uint64_t v20 = _swiftEmptyArrayStorage;
  }

  uint64_t v28 = (void *)objc_opt_self(&OBJC_CLASS___NSJSONSerialization);
  Class v29 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v20);
  uint64_t v43 = 0LL;
  id v30 = [v28 dataWithJSONObject:v29 options:0 error:&v43];

  uint64_t v31 = v43;
  if (v30)
  {
    uint64_t v27 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v30);
    unint64_t v33 = v32;
    swift_release(v16);

    if (v33 >> 60 != 15) {
      goto LABEL_12;
    }
  }

  else
  {
    unint64_t v35 = v31;
    uint64_t v36 = _convertNSErrorToError(_:)(v31);

    swift_willThrow(v37);
    swift_release(v16);
    uint64_t v34 = swift_errorRelease(v36);
  }

  uint64_t v38 = (os_log_s *)Logger.logObject.getter(v34);
  os_log_type_t v39 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v38, v39))
  {
    uint64_t v40 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v40 = 0;
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "Failed to serialize [SenderKeyInfo]", v40, 2u);
    swift_slowDealloc(v40, -1LL, -1LL);
  }

  swift_release(v10);
  return 0LL;
}

double sub_1004674F0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  v23[6] = (char *)v23 - v10;
  type metadata accessor for SenderKeyInfo(0LL);
  __chkstk_darwin(v11, v12);
  v23[9] = (char *)v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14, v15);
  v23[5] = (char *)v23 - v16;
  uint64_t v17 = type metadata accessor for JSONDecoder(0LL);
  swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  uint64_t v18 = JSONDecoder.init()();
  unint64_t v19 = sub_10047A890();
  v23[3] = a1;
  *(void *)&__int128 v24 = a2;
  dispatch thunk of JSONDecoder.decode<A>(_:from:)( &type metadata for SenderKeyMessage,  a1,  a2,  &type metadata for SenderKeyMessage,  v19);
  uint64_t v20 = v25;
  LOBYTE(asub_10040A648(v1 + 2) = v26;
  __int128 v24 = v27;
  a3[3] = (uint64_t)&type metadata for SenderKeyMessage;
  uint64_t v21 = swift_allocObject(&unk_100906458, 48LL, 7LL);
  *a3 = v21;
  swift_release(v18);
  *(void *)(v21 + swift_unknownObjectWeakDestroy(v0 + 16) = v20;
  *(_BYTE *)(v21 + 24) = a2;
  double result = *(double *)&v24;
  *(_OWORD *)(v21 + 3sub_10040A648(v1 + 2) = v24;
  return result;
}

void sub_100467C44(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(a1);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    __n128 v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)__n128 v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Roll keys timer fired!", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  __n128 v6 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v2) + 0xA8LL))();
  unint64_t v7 = sub_1004F50B8();

  int64_t v8 = 0LL;
  uint64_t v9 = *(void *)(v7 + 64);
  unint64_t v28 = v7 + 64;
  uint64_t v10 = 1LL << *(_BYTE *)(v7 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & v9;
  int64_t v29 = (unint64_t)(v10 + 63) >> 6;
  unint64_t v30 = v7;
  if ((v11 & v9) == 0) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v13 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (unint64_t i = v13 | (v8 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v8 << 6))
  {
    uint64_t v18 = 8 * i;
    uint64_t v19 = *(void *)(*(void *)(v30 + 56) + v18);
    uint64_t v20 = qword_1009C3F10;
    id v21 = *(id *)(*(void *)(v30 + 48) + v18);
    swift_bridgeObjectRetain(v19);
    if (v20 != -1) {
      swift_once(&qword_1009C3F10, sub_10046CF3C);
    }
    uint64_t v22 = qword_1009C76D0;
    uint64_t v23 = *(void *)algn_1009C76D8;
    __int128 v24 = (void *)swift_allocObject(&unk_100906480, 40LL, 7LL);
    v24[2] = v2;
    v24[3] = v19;
    v24[4] = v21;
    uint64_t v25 = *(void (**)(uint64_t, id, uint64_t, uint64_t, void (*)(char), void *))((swift_isaMask & *v2) + 0x1D0LL);
    id v26 = v21;
    swift_bridgeObjectRetain(v19);
    __int128 v27 = v2;
    v25(v19, v26, v22, v23, sub_10047A904, v24);
    swift_release(v24);
    swift_bridgeObjectRelease(v19);

    if (v12) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v15 = v8 + 1;
    if (__OFADD__(v8, 1LL))
    {
      __break(1u);
      goto LABEL_27;
    }

    if (v15 >= v29) {
      goto LABEL_25;
    }
    unint64_t v16 = *(void *)(v28 + 8 * v15);
    ++v8;
    if (!v16)
    {
      int64_t v8 = v15 + 1;
      if (v15 + 1 >= v29) {
        goto LABEL_25;
      }
      unint64_t v16 = *(void *)(v28 + 8 * v8);
      if (!v16)
      {
        int64_t v8 = v15 + 2;
        if (v15 + 2 >= v29) {
          goto LABEL_25;
        }
        unint64_t v16 = *(void *)(v28 + 8 * v8);
        if (!v16) {
          break;
        }
      }
    }

uint64_t sub_100467F30(void *a1, void *a2)
{
  int64_t v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v11, v12);
  __n128 v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v15, v16);
  uint64_t v19 = (char *)&v43 - v18;
  uint64_t v20 = (void *)(*(uint64_t (**)(uint64_t))((swift_isaMask & *v2) + 0xA8LL))(v17);
  sub_1004F4AA4((uint64_t)a1, (uint64_t)a2, (uint64_t)v8);

  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9) == 1)
  {
    sub_10040A274((uint64_t)v8, &qword_1009BC130);
    return 1LL;
  }

  else
  {
    uint64_t v22 = (*(uint64_t (**)(char *, char *, uint64_t))(v10 + 32))(v19, v8, v9);
    Date.init()(v22);
    double v23 = sub_100478920();
    double v25 = Date.timeIntervalSince1970.getter(v24);
    double v27 = v25 - Date.timeIntervalSince1970.getter(v26);
    BOOL v21 = v23 + -3600.0 < v27;
    if (v23 + -3600.0 < v27)
    {
      id v28 = a1;
      id v29 = a2;
      id v30 = v28;
      id v31 = v29;
      unint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
      os_log_type_t v33 = static os_log_type_t.default.getter();
      int v34 = v33;
      if (os_log_type_enabled(v32, v33))
      {
        uint64_t v35 = swift_slowAlloc(32LL, -1LL);
        int v45 = v34;
        uint64_t v36 = v35;
        uint64_t v47 = (void *)swift_slowAlloc(16LL, -1LL);
        *(_DWORD *)uint64_t v36 = 134218498;
        double v48 = v23;
        uint64_t v46 = v32;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v36 + 4, v36 + 12);
        *(_WORD *)(v36 + 1sub_10040A648(v1 + 2) = 2112;
        uint64_t v43 = v36 + 22;
        uint64_t v44 = v36 + 14;
        double v48 = *(double *)&v30;
        id v37 = v30;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v44, v43);
        *uint64_t v47 = v30;

        *(_WORD *)(v36 + 2sub_10040A648(v1 + 2) = 2112;
        uint64_t v44 = v36 + 32;
        double v48 = *(double *)&v31;
        id v38 = v31;
        unint64_t v32 = v46;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v36 + 24, v44);
        os_log_type_t v39 = v47;
        v47[1] = v31;

        _os_log_impl( (void *)&_mh_execute_header,  v32,  (os_log_type_t)v45,  "We need to roll! currentRollInterval: %f { senderURI %@ receiverURI %@ }",  (uint8_t *)v36,  0x20u);
        uint64_t v40 = sub_1003F5CB4(&qword_1009B92C8);
        swift_arrayDestroy(v39, 2LL, v40);
        swift_slowDealloc(v39, -1LL, -1LL);
        swift_slowDealloc(v36, -1LL, -1LL);
      }

      else
      {
      }
    }

    uint64_t v41 = *(void (**)(char *, uint64_t))(v10 + 8);
    v41(v14, v9);
    v41(v19, v9);
  }

  return v21;
}

double sub_10046829C()
{
  id v0 = [(id)objc_opt_self(IDSServerBag) sharedInstance];
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 objectForKey:v1];

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v9, v2);
    swift_unknownObjectRelease(v2, v3);
  }

  else
  {
    memset(v9, 0, sizeof(v9));
  }

  sub_10041D378((uint64_t)v9, (uint64_t)v10, &qword_1009B92B8);
  if (v11)
  {
    uint64_t v4 = sub_10041D3C4(0LL, (unint64_t *)&unk_1009BACA0, &OBJC_CLASS___NSNumber_ptr);
    if ((swift_dynamicCast(&v8, v10, (char *)&type metadata for Any + 8, v4, 6LL) & 1) != 0)
    {
      id v5 = v8;
      id v6 = [v8 integerValue];

      return (double)(uint64_t)v6;
    }
  }

  else
  {
    sub_10040A274((uint64_t)v10, &qword_1009B92B8);
  }

  return 3456000.0;
}

double sub_1004683EC()
{
  id v0 = [(id)objc_opt_self(IDSServerBag) sharedInstance];
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 objectForKey:v1];

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v9, v2);
    swift_unknownObjectRelease(v2, v3);
  }

  else
  {
    memset(v9, 0, sizeof(v9));
  }

  sub_10041D378((uint64_t)v9, (uint64_t)v10, &qword_1009B92B8);
  if (v11)
  {
    uint64_t v4 = sub_10041D3C4(0LL, (unint64_t *)&unk_1009BACA0, &OBJC_CLASS___NSNumber_ptr);
    if ((swift_dynamicCast(&v8, v10, (char *)&type metadata for Any + 8, v4, 6LL) & 1) != 0)
    {
      id v5 = v8;
      id v6 = [v8 integerValue];

      return (double)(uint64_t)v6;
    }
  }

  else
  {
    sub_10040A274((uint64_t)v10, &qword_1009B92B8);
  }

  return 6048000.0;
}

double sub_10046853C()
{
  return sub_1004689D0();
}

uint64_t sub_100468558()
{
  id v0 = [(id)objc_opt_self(IDSServerBag) sharedInstance];
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 objectForKey:v1];

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v9, v2);
    swift_unknownObjectRelease(v2, v3);
  }

  else
  {
    memset(v9, 0, sizeof(v9));
  }

  sub_10041D378((uint64_t)v9, (uint64_t)v10, &qword_1009B92B8);
  if (!v11)
  {
    sub_10040A274((uint64_t)v10, &qword_1009B92B8);
    return 5LL;
  }

  uint64_t v4 = sub_10041D3C4(0LL, (unint64_t *)&unk_1009BACA0, &OBJC_CLASS___NSNumber_ptr);
  id v5 = v8;
  id v6 = [v8 integerValue];

  return (uint64_t)v6;
}

double sub_1004686A0()
{
  return sub_100468B50();
}

uint64_t sub_1004686BC()
{
  return sub_100468710();
}

double sub_1004686D8()
{
  return sub_10046886C();
}

uint64_t sub_1004686F4()
{
  return sub_100468710();
}

uint64_t sub_100468710()
{
  id v0 = [(id)objc_opt_self(IDSServerBag) sharedInstance];
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 objectForKey:v1];

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v9, v2);
    swift_unknownObjectRelease(v2, v3);
  }

  else
  {
    memset(v9, 0, sizeof(v9));
  }

  sub_10041D378((uint64_t)v9, (uint64_t)v10, &qword_1009B92B8);
  if (!v11)
  {
    sub_10040A274((uint64_t)v10, &qword_1009B92B8);
    return 1LL;
  }

  uint64_t v4 = sub_10041D3C4(0LL, (unint64_t *)&unk_1009BACA0, &OBJC_CLASS___NSNumber_ptr);
  id v5 = v8;
  id v6 = [v8 integerValue];

  return (uint64_t)v6;
}

double sub_100468850()
{
  return sub_10046886C();
}

double sub_10046886C()
{
  id v0 = [(id)objc_opt_self(IDSServerBag) sharedInstance];
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 objectForKey:v1];

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v9, v2);
    swift_unknownObjectRelease(v2, v3);
  }

  else
  {
    memset(v9, 0, sizeof(v9));
  }

  sub_10041D378((uint64_t)v9, (uint64_t)v10, &qword_1009B92B8);
  if (v11)
  {
    uint64_t v4 = sub_10041D3C4(0LL, (unint64_t *)&unk_1009BACA0, &OBJC_CLASS___NSNumber_ptr);
    if ((swift_dynamicCast(&v8, v10, (char *)&type metadata for Any + 8, v4, 6LL) & 1) != 0)
    {
      id v5 = v8;
      id v6 = [v8 integerValue];

      return (double)(uint64_t)v6;
    }
  }

  else
  {
    sub_10040A274((uint64_t)v10, &qword_1009B92B8);
  }

  return 600.0;
}

double sub_1004689B4()
{
  return sub_1004689D0();
}

double sub_1004689D0()
{
  id v0 = [(id)objc_opt_self(IDSServerBag) sharedInstance];
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 objectForKey:v1];

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v9, v2);
    swift_unknownObjectRelease(v2, v3);
  }

  else
  {
    memset(v9, 0, sizeof(v9));
  }

  sub_10041D378((uint64_t)v9, (uint64_t)v10, &qword_1009B92B8);
  if (v11)
  {
    uint64_t v4 = sub_10041D3C4(0LL, (unint64_t *)&unk_1009BACA0, &OBJC_CLASS___NSNumber_ptr);
    if ((swift_dynamicCast(&v8, v10, (char *)&type metadata for Any + 8, v4, 6LL) & 1) != 0)
    {
      id v5 = v8;
      id v6 = [v8 integerValue];

      return (double)(uint64_t)v6;
    }
  }

  else
  {
    sub_10040A274((uint64_t)v10, &qword_1009B92B8);
  }

  return 86400.0;
}

uint64_t sub_100468B18()
{
  return sub_100468710();
}

double sub_100468B34()
{
  return sub_100468B50();
}

double sub_100468B50()
{
  id v0 = [(id)objc_opt_self(IDSServerBag) sharedInstance];
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 objectForKey:v1];

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v9, v2);
    swift_unknownObjectRelease(v2, v3);
  }

  else
  {
    memset(v9, 0, sizeof(v9));
  }

  sub_10041D378((uint64_t)v9, (uint64_t)v10, &qword_1009B92B8);
  if (v11)
  {
    uint64_t v4 = sub_10041D3C4(0LL, (unint64_t *)&unk_1009BACA0, &OBJC_CLASS___NSNumber_ptr);
    if ((swift_dynamicCast(&v8, v10, (char *)&type metadata for Any + 8, v4, 6LL) & 1) != 0)
    {
      id v5 = v8;
      id v6 = [v8 integerValue];

      return (double)(uint64_t)v6;
    }
  }

  else
  {
    sub_10040A274((uint64_t)v10, &qword_1009B92B8);
  }

  return 3600.0;
}

double sub_100468C98()
{
  id v0 = [(id)objc_opt_self(IDSServerBag) sharedInstance];
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 objectForKey:v1];

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v9, v2);
    swift_unknownObjectRelease(v2, v3);
  }

  else
  {
    memset(v9, 0, sizeof(v9));
  }

  sub_10041D378((uint64_t)v9, (uint64_t)v10, &qword_1009B92B8);
  if (v11)
  {
    uint64_t v4 = sub_10041D3C4(0LL, (unint64_t *)&unk_1009BACA0, &OBJC_CLASS___NSNumber_ptr);
    if ((swift_dynamicCast(&v8, v10, (char *)&type metadata for Any + 8, v4, 6LL) & 1) != 0)
    {
      id v5 = v8;
      id v6 = [v8 integerValue];

      return (double)(uint64_t)v6;
    }
  }

  else
  {
    sub_10040A274((uint64_t)v10, &qword_1009B92B8);
  }

  return 1209600.0;
}

void sub_100468DE8(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  type metadata accessor for SenderKeyInfo(0LL);
  __chkstk_darwin(v6, v7);
  uint64_t v84 = (uint64_t)&v80 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1003F5CB4((uint64_t *)&unk_1009BAC60);
  __chkstk_darwin(v9, v10);
  uint64_t v83 = (uint64_t)&v80 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12, v13);
  uint64_t v85 = (uint64_t)&v80 - v14;
  __chkstk_darwin(v15, v16);
  uint64_t v18 = (char *)&v80 - v17;
  __chkstk_darwin(v19, v20);
  uint64_t v87 = (uint64_t)&v80 - v21;
  __chkstk_darwin(v22, v23);
  uint64_t v86 = (uint64_t)&v80 - v24;
  uint64_t v92 = &_swiftEmptySetSingleton;
  uint64_t v91 = _swiftEmptyArrayStorage;
  id v25 = [(id)objc_opt_self(IDSPeerIDManager) sharedInstance];
  if (!v25)
  {
LABEL_34:
    __break(1u);
    return;
  }

  uint64_t v26 = v25;
  uint64_t v27 = sub_1003F5CB4((uint64_t *)&unk_1009BABF0);
  uint64_t v28 = swift_allocObject(v27, 40LL, 7LL);
  *(_OWORD *)(v28 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10071B0D0;
  *(void *)(v28 + 3sub_10040A648(v1 + 2) = a1;
  uint64_t v88 = v28;
  specialized Array._endMutation()(v28);
  uint64_t v29 = v88;
  uint64_t v30 = sub_10041D3C4(0LL, (unint64_t *)&unk_1009BC270, &OBJC_CLASS___IDSURI_ptr);
  id v80 = a1;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v29);
  unint64_t v32 = (void *)IDSServiceNameiMessage;
  uint64_t v33 = sub_1003F5CB4((uint64_t *)&unk_1009BC2B0);
  uint64_t inited = swift_initStackObject(v33, v90);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1007184C0;
  *(void *)(inited + 3sub_10040A648(v1 + 2) = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSRegistrationPropertySupportsSenderKey);
  *(void *)(inited + 40) = v35;
  id v36 = objc_allocWithZone(&OBJC_CLASS___NSNumber);
  id v37 = v32;
  *(void *)(inited + 48) = [v36 initWithInteger:1];
  unint64_t v38 = sub_10045C120(inited);
  sub_10041D3C4(0LL, (unint64_t *)&unk_1009BACA0, &OBJC_CLASS___NSNumber_ptr);
  Class v39 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v38);
  id v40 = [v26 endpointsForURIs:isa service:v37 fromURI:a2 withCapabilities:v39];

  uint64_t v81 = v18;
  uint64_t v82 = a2;
  if (v40)
  {
    uint64_t v41 = sub_1003F5CB4((uint64_t *)&unk_1009BC2C0);
    uint64_t v42 = sub_100438928( (unint64_t *)&unk_1009BAC00,  (unint64_t *)&unk_1009BC270,  &OBJC_CLASS___IDSURI_ptr);
    unint64_t v43 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v40, v30, v41, v42);
  }

  else
  {
    unint64_t v43 = sub_10045BEE0((uint64_t)_swiftEmptyArrayStorage);
  }

  int64_t v44 = 0LL;
  unint64_t v45 = v43 + 64;
  uint64_t v46 = 1LL << *(_BYTE *)(v43 + 32);
  uint64_t v47 = -1LL;
  if (v46 < 64) {
    uint64_t v47 = ~(-1LL << v46);
  }
  unint64_t v48 = v47 & *(void *)(v43 + 64);
  int64_t v49 = (unint64_t)(v46 + 63) >> 6;
  while (1)
  {
    if (v48)
    {
      unint64_t v50 = __clz(__rbit64(v48));
      v48 &= v48 - 1;
      unint64_t v51 = v50 | (v44 << 6);
      goto LABEL_9;
    }

    int64_t v58 = v44 + 1;
    if (__OFADD__(v44, 1LL))
    {
      __break(1u);
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }

    if (v58 >= v49) {
      goto LABEL_25;
    }
    unint64_t v59 = *(void *)(v45 + 8 * v58);
    ++v44;
    if (!v59)
    {
      int64_t v44 = v58 + 1;
      if (v58 + 1 >= v49) {
        goto LABEL_25;
      }
      unint64_t v59 = *(void *)(v45 + 8 * v44);
      if (!v59)
      {
        int64_t v44 = v58 + 2;
        if (v58 + 2 >= v49) {
          goto LABEL_25;
        }
        unint64_t v59 = *(void *)(v45 + 8 * v44);
        if (!v59) {
          break;
        }
      }
    }

uint64_t sub_1004694BC(uint64_t a1, uint64_t (*a2)(uint64_t, void, uint64_t))
{
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v18 = a1;
    }
    else {
      uint64_t v18 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(a1);
  }

  else
  {
    uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v6 = *v2;
  if (!((unint64_t)*v2 >> 62))
  {
    uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t v8 = v7 + v5;
    if (!__OFADD__(v7, v5)) {
      goto LABEL_5;
    }
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  if (v6 < 0) {
    uint64_t v19 = *v2;
  }
  else {
    uint64_t v19 = v6 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(*v2);
  uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v19);
  swift_bridgeObjectRelease(v6);
  uint64_t v8 = v7 + v5;
  if (__OFADD__(v7, v5)) {
    goto LABEL_29;
  }
LABEL_5:
  uint64_t v6 = *v2;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v2);
  uint64_t *v2 = v6;
  uint64_t v7 = 0LL;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v6 & 0x8000000000000000LL) == 0 && (v6 & 0x4000000000000000LL) == 0)
  {
    uint64_t v10 = v6 & 0xFFFFFFFFFFFFFF8LL;
    if (v8 <= *(void *)((v6 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
      goto LABEL_15;
    }
    uint64_t v7 = 1LL;
  }

  uint64_t v11 = *(void *)((v6 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (1)
  {
    if (v11 <= v8) {
      uint64_t v11 = v8;
    }
    swift_bridgeObjectRetain(v6);
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v7, v11, 1LL, v6);
    swift_bridgeObjectRelease(*v2);
    uint64_t *v2 = v6;
    uint64_t v10 = v6 & 0xFFFFFFFFFFFFFF8LL;
LABEL_15:
    uint64_t result = a2(v10 + 8LL * *(void *)(v10 + 16) + 32, (*(void *)(v10 + 24) >> 1) - *(void *)(v10 + 16), a1);
    if (v13 >= v5) {
      break;
    }
LABEL_30:
    __break(1u);
LABEL_31:
    if (v6 < 0) {
      uint64_t v20 = v6;
    }
    else {
      uint64_t v20 = v6 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v6);
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter(v20);
    swift_bridgeObjectRelease(v6);
  }

  if (v13 < 1) {
    goto LABEL_19;
  }
  uint64_t v14 = *(void *)((*v2 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  BOOL v15 = __OFADD__(v14, v13);
  uint64_t v16 = v14 + v13;
  if (!v15)
  {
    *(void *)((*v2 & 0xFFFFFFFFFFFFFF8LL) + 0x10) = v16;
LABEL_19:
    uint64_t v17 = swift_bridgeObjectRelease(result);
    return specialized Array._endMutation()(v17);
  }

  __break(1u);
  return result;
}

uint64_t sub_100469678(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = (void *)*v1;
  int64_t v4 = *(void *)(*v1 + 16LL);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }

  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_10046D170(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }

void *sub_1004697D4(uint64_t a1, uint64_t a2)
{
  int64_t v5 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v2) + 0xA8LL))();
  id v6 = [v5 decryptingKeyIDsWithSenderURI:a1 receiverURI:a2];

  uint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, &type metadata for Data);
  uint64_t v8 = *(void *)(v7 + 16);
  if (v8)
  {
    swift_bridgeObjectRetain(v7);
    unint64_t v9 = (unint64_t *)(v7 + 40);
    uint64_t v10 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v11 = *(v9 - 1);
      unint64_t v12 = *v9;
      sub_1004028CC(v11, *v9);
      Swift::String v13 = Data.base64EncodedString(options:)(0LL);
      sub_100402A84(v11, v12);
      if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0) {
        uint64_t v10 = sub_10046D484(0LL, v10[2] + 1LL, 1, v10);
      }
      unint64_t v15 = v10[2];
      unint64_t v14 = v10[3];
      if (v15 >= v14 >> 1) {
        uint64_t v10 = sub_10046D484((void *)(v14 > 1), v15 + 1, 1, v10);
      }
      v9 += 2;
      v10[2] = v15 + 1;
      *(Swift::String *)&v10[2 * v15 + 4] = v13;
      --v8;
    }

    while (v8);
    swift_bridgeObjectRelease(v7);
  }

  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }

  swift_bridgeObjectRelease(v7);
  return v10;
}

Class sub_10046995C(void *a1, uint64_t a2, void *a3, void *a4, uint64_t (*a5)(id, id))
{
  id v8 = a3;
  id v9 = a4;
  id v10 = a1;
  uint64_t v11 = a5(v8, v9);

  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v11);
  return isa;
}

void *sub_1004699E4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v3 = v1;
  swift_bridgeObjectRetain(a1);
  uint64_t v20 = v4;
  int64_t v5 = (void *)(v4 + 40);
  id v6 = _swiftEmptyArrayStorage;
  do
  {
    uint64_t v8 = *(v5 - 1);
    uint64_t v7 = *v5;
    __n128 v9 = swift_bridgeObjectRetain(*v5);
    uint64_t v10 = Data.init(base64Encoded:options:)(v8, v7, 0LL, v9);
    if (v11 >> 60 == 15) {
      goto LABEL_4;
    }
    uint64_t v12 = v10;
    unint64_t v13 = v11;
    unint64_t v14 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v3) + 0xA8LL))();
    char v15 = sub_1004F3EE8(v12, v13);

    if ((v15 & 1) != 0)
    {
      sub_10040AD00(v12, v13);
LABEL_4:
      swift_bridgeObjectRelease(v7);
      goto LABEL_5;
    }

    if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0) {
      id v6 = sub_10046D484(0LL, v6[2] + 1LL, 1, v6);
    }
    unint64_t v17 = v6[2];
    unint64_t v16 = v6[3];
    if (v17 >= v16 >> 1) {
      id v6 = sub_10046D484((void *)(v16 > 1), v17 + 1, 1, v6);
    }
    v6[2] = v17 + 1;
    uint64_t v18 = &v6[2 * v17];
    v18[4] = v8;
    v18[5] = v7;
    sub_10040AD00(v12, v13);
LABEL_5:
    v5 += 2;
    --v2;
  }

  while (v2);
  swift_bridgeObjectRelease(v20);
  return v6;
}

uint64_t sub_100469BDC(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))((swift_isaMask & *v3) + 0x338LL))(a2, a3);
  uint64_t v6 = result;
  uint64_t v25 = *(void *)(result + 16);
  if (!v25)
  {
    swift_bridgeObjectRelease(result);
    return (uint64_t)_swiftEmptyArrayStorage;
  }

  unint64_t v7 = 0LL;
  uint64_t v8 = a1[2];
  uint64_t v24 = result + 32;
  __n128 v9 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v7 >= *(void *)(v6 + 16))
    {
      __break(1u);
      goto LABEL_34;
    }

    unint64_t v11 = (void *)(v24 + 16 * v7);
    uint64_t v12 = *v11;
    uint64_t v13 = v11[1];
    if (!v8) {
      goto LABEL_13;
    }
    uint64_t result = a1[4];
    uint64_t v14 = a1[5];
    if (result != v12 || v14 != v13)
    {
      uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v14, *v11, v11[1], 0LL);
      if ((result & 1) == 0)
      {
        if (v8 == 1) {
          goto LABEL_13;
        }
        uint64_t result = a1[6];
        uint64_t v18 = a1[7];
        if (result != v12 || v18 != v13)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v18, v12, v13, 0LL);
          if ((result & 1) == 0) {
            break;
          }
        }
      }
    }

uint64_t sub_100469E84(void *a1, void *a2)
{
  int64_t v5 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v2) + 0xA8LL))();
  LOBYTE(asub_10040A648(v1 + 2) = sub_1004F4628(a1, a2);

  return a2 & 1;
}

uint64_t sub_100469F74(uint64_t a1)
{
  uint64_t v3 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v1) + 0xA8LL))();
  LOBYTE(a1) = sub_1004F46E0(a1);

  return a1 & 1;
}

id sub_10046A184()
{
  return sub_100411CD0(type metadata accessor for SenderKeyDistributionManager.SenderKeyURIMismatchMetric);
}

uint64_t sub_10046A1A4()
{
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong(v0 + 16);
  if (Strong)
  {
    uint64_t v2 = Strong;
    uint64_t v3 = *(uint64_t (**)(void))((swift_isaMask & *Strong) + 0xA8LL);
    uint64_t v4 = (void *)v3();
    sub_1004F656C(0LL);
    uint64_t v6 = v5;

    uint64_t v19 = v6;
    uint64_t v7 = swift_allocObject(&unk_100906B28, 24LL, 7LL);
    *(void *)(v7 + swift_unknownObjectWeakDestroy(v0 + 16) = v2;
    unint64_t v8 = sub_10047E08C();
    id v9 = v2;
    StringProtocol.enumerateLines(invoking:)(sub_10047E088, v7, &type metadata for String, v8);
    swift_release(v7);
    uint64_t v10 = swift_bridgeObjectRelease(v19);
    unint64_t v11 = (void *)((uint64_t (*)(uint64_t))v3)(v10);
    sub_1004F6A4C(0LL, v12, v13);
    uint64_t v15 = v14;

    uint64_t v16 = swift_allocObject(&unk_100906B50, 24LL, 7LL);
    *(void *)(v16 + swift_unknownObjectWeakDestroy(v0 + 16) = v9;
    id v17 = v9;
    StringProtocol.enumerateLines(invoking:)(sub_10047E088, v16, &type metadata for String, v8);

    swift_release(v16);
    swift_bridgeObjectRelease(v15);
  }

  return 0LL;
}

unint64_t sub_10046A318(uint64_t a1)
{
  uint64_t v3 = *(uint64_t (**)(void))((swift_isaMask & *v1) + 0xA8LL);
  uint64_t v4 = (void *)v3();
  unint64_t v5 = sub_1004F656C(a1);

  uint64_t v6 = (void *)v3();
  id v9 = sub_1004F6A4C(a1, v7, v8);
  unint64_t v11 = v10;

  v12._countAndFlagsBits = (uint64_t)v9;
  v12._object = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(v11);
  return v5;
}

uint64_t sub_10046A4CC()
{
  NSString v1 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xA8LL))();
  uint64_t v2 = sub_1004F7E18();

  return v2;
}

uint64_t sub_10046A5A0(uint64_t a1, void *a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  __n128 v7 = v6;
  swift_bridgeObjectRetain_n(a1, 2LL);
  id v14 = a2;
  uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc(38LL, -1LL);
    id v37 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v38 = swift_slowAlloc(32LL, -1LL);
    uint64_t v43 = v38;
    *(_DWORD *)uint64_t v17 = 136315906;
    uint64_t v39 = a5;
    uint64_t v40 = a6;
    uint64_t v41 = a3;
    uint64_t v18 = sub_10041D3C4(0LL, (unint64_t *)&unk_1009BC270, &OBJC_CLASS___IDSURI_ptr);
    uint64_t v19 = sub_100438928( (unint64_t *)&unk_1009BAC00,  (unint64_t *)&unk_1009BC270,  &OBJC_CLASS___IDSURI_ptr);
    swift_bridgeObjectRetain(a1);
    uint64_t v21 = Set.description.getter(v20, v18, v19);
    unint64_t v23 = v22;
    swift_bridgeObjectRelease(a1);
    uint64_t v42 = sub_1003FFBB0(v21, v23, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v17 + 4, v17 + 12);
    swift_bridgeObjectRelease(v23);
    swift_bridgeObjectRelease_n(a1, 2LL);
    *(_WORD *)(v17 + 1sub_10040A648(v1 + 2) = 2112;
    uint64_t v42 = (uint64_t)v14;
    id v24 = v14;
    a3 = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v17 + 14, v17 + 22);
    *id v37 = v14;

    *(_WORD *)(v17 + 2sub_10040A648(v1 + 2) = 2048;
    uint64_t v42 = v41;
    a5 = v39;
    a6 = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v17 + 24, v17 + 32);
    *(_WORD *)(v17 + 3sub_10040A648(v1 + 2) = 1024;
    LODWORD(v4sub_10040A648(v1 + 2) = a4 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, (char *)&v42 + 4, v17 + 34, v17 + 38);
    _os_log_impl( (void *)&_mh_execute_header,  v15,  v16,  "Processing donated handles: %s fromURI: %@ priority: %ld isInitialDonation: %{BOOL}d",  (uint8_t *)v17,  0x26u);
    uint64_t v25 = sub_1003F5CB4(&qword_1009B92C8);
    swift_arrayDestroy(v37, 1LL, v25);
    swift_slowDealloc(v37, -1LL, -1LL);
    swift_arrayDestroy(v38, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1LL, -1LL);
    swift_slowDealloc(v17, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a1, 2LL);
  }

  uint64_t v26 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v7) + 0xA8LL))();
  uint64_t v27 = swift_allocObject(&unk_1009064A8, 32LL, 7LL);
  *(void *)(v27 + swift_unknownObjectWeakDestroy(v0 + 16) = a5;
  *(void *)(v27 + 24) = a6;
  swift_retain(a6);
  sub_1004F4FD8(a1, v14, a3, (uint64_t)sub_10040A51C, v27);
  swift_release(v27);

  swift_bridgeObjectRetain(a1);
  uint64_t v29 = sub_10046DA94(v28);
  swift_bridgeObjectRelease(a1);
  if (qword_1009C3F08 != -1) {
    swift_once(&qword_1009C3F08, sub_10046CEEC);
  }
  uint64_t v30 = qword_1009C76C0;
  uint64_t v31 = *(void *)algn_1009C76C8;
  unint64_t v32 = (void *)swift_allocObject(&unk_1009064D0, 40LL, 7LL);
  v32[2] = v7;
  v32[3] = a1;
  v32[4] = v14;
  uint64_t v33 = *(void (**)(uint64_t **, id, uint64_t, uint64_t, void (*)(char), void *))((swift_isaMask & *v7) + 0x1D0LL);
  swift_bridgeObjectRetain(a1);
  id v34 = v14;
  uint64_t v35 = v7;
  v33(v29, v34, v30, v31, sub_10047AD60, v32);
  swift_release(v32);
  return swift_release(v29);
}

id sub_10046AAE8(uint64_t a1)
{
  return [*v1 addListener:a1];
}

id sub_10046AAFC(uint64_t a1)
{
  return [*v1 removeListener:a1];
}

id sub_10046AB10()
{
  return [*v0 isUnderFirstDataProtectionLock];
}

uint64_t sub_10046AB30()
{
  NSString v1 = (void *)(v0 + OBJC_IVAR___IDSSenderKeyDistributionManager_firstDataProtectionLockQueue);
  swift_beginAccess(v0 + OBJC_IVAR___IDSSenderKeyDistributionManager_firstDataProtectionLockQueue, v9, 1LL, 0LL);
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 16LL);
  if (v3)
  {
    swift_bridgeObjectRetain(*v1);
    uint64_t v4 = (void *)(v2 + 40);
    do
    {
      uint64_t v6 = (void (*)(uint64_t))*(v4 - 1);
      uint64_t v5 = *v4;
      uint64_t v7 = swift_retain(*v4);
      v6(v7);
      swift_release(v5);
      v4 += 2;
      --v3;
    }

    while (v3);
    swift_bridgeObjectRelease(v2);
    uint64_t v2 = *v1;
  }

  void *v1 = &_swiftEmptyArrayStorage;
  return swift_bridgeObjectRelease(v2);
}

void *sub_10046AC28(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  id v14 = _swiftEmptyArrayStorage;
  sub_100411D38(0LL, v2, 0);
  uint64_t v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    for (uint64_t i = a1 + 32; ; i += 32LL)
    {
      sub_10040A668(i, (uint64_t)v13);
      if (!swift_dynamicCast( &v11,  v13,  (char *)&type metadata for Any + 8,  &type metadata for String,  6LL)) {
        break;
      }
      uint64_t v5 = v11;
      uint64_t v6 = v12;
      if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
      {
        sub_100411D38(0LL, v3[2] + 1LL, 1);
        uint64_t v3 = v14;
      }

      unint64_t v8 = v3[2];
      unint64_t v7 = v3[3];
      if (v8 >= v7 >> 1)
      {
        sub_100411D38((char *)(v7 > 1), v8 + 1, 1);
        uint64_t v3 = v14;
      }

      v3[2] = v8 + 1;
      id v9 = &v3[2 * v8];
      v9[4] = v5;
      v9[5] = v6;
      if (!--v2) {
        return v3;
      }
    }

    uint64_t v11 = 0LL;
    uint64_t v12 = 0LL;
    swift_release(v3);
    swift_bridgeObjectRelease(v12);
    return 0LL;
  }

  return v3;
}

void *sub_10046AD6C(uint64_t a1)
{
  uint64_t v12 = _swiftEmptyArrayStorage;
  uint64_t v2 = *(void *)(a1 + 16);
  specialized ContiguousArray.reserveCapacity(_:)(v2);
  if (!v2) {
    return v12;
  }
  for (uint64_t i = a1 + 32; ; i += 32LL)
  {
    sub_10040A668(i, (uint64_t)v11);
    uint64_t v4 = sub_10041D3C4(0LL, (unint64_t *)&unk_1009BC270, &OBJC_CLASS___IDSURI_ptr);
    uint64_t v5 = swift_dynamicCast(&v10, v11, (char *)&type metadata for Any + 8, v4, 6LL);
    if (!(_DWORD)v5) {
      break;
    }
    id v6 = v10;
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v5);
    uint64_t v7 = v12[2];
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v7);
    uint64_t v8 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v7, v6);
    specialized ContiguousArray._endMutation()(v8);
    if (!--v2) {
      return v12;
    }
  }

  id v10 = 0LL;
  swift_release(v12);

  return 0LL;
}

uint64_t sub_10046AEE8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_10045D7D4(*a1, *a2);
}

Swift::Int sub_10046AEF4()
{
  return sub_10046AEFC(*v0);
}

Swift::Int sub_10046AEFC(char a1)
{
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v2 = 0x657571655279656BLL;
    }
    else {
      unint64_t v2 = 0xD000000000000012LL;
    }
    if (a1 == 1) {
      unint64_t v3 = 0xEA00000000007473LL;
    }
    else {
      unint64_t v3 = 0x8000000100840CC0LL;
    }
  }

  else
  {
    unint64_t v3 = 0xEF6E6F6974756269LL;
    unint64_t v2 = 0x727473694479656BLL;
  }

  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

Swift::Int sub_10046AFB0(char a1)
{
  uint64_t v2 = 8LL * a1;
  uint64_t v3 = *(void *)&aMessagetkeyinf[v2 + 24];
  String.hash(into:)(v5, *(void *)&aVersion_3[v2], v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_10046B018(uint64_t a1)
{
  return sub_10046B020(a1, *v1);
}

uint64_t sub_10046B020(uint64_t a1, unsigned __int8 a2)
{
  int v2 = a2;
  if (a2)
  {
    if (a2 == 1) {
      unint64_t v3 = 0x657571655279656BLL;
    }
    else {
      unint64_t v3 = 0xD000000000000012LL;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xEA00000000007473LL;
    }
    else {
      unint64_t v4 = 0x8000000100840CC0LL;
    }
  }

  else
  {
    unint64_t v4 = 0xEF6E6F6974756269LL;
    unint64_t v3 = 0x727473694479656BLL;
  }

  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v4);
}

uint64_t sub_10046B0AC(uint64_t a1, char a2)
{
  uint64_t v2 = 8LL * a2;
  uint64_t v3 = *(void *)&aMessagetkeyinf[v2 + 24];
  String.hash(into:)(a1, *(void *)&aVersion_3[v2], v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_10046B0EC(uint64_t a1)
{
  return sub_10046B158(a1, *v1);
}

Swift::Int sub_10046B0F4(uint64_t a1, char a2)
{
  uint64_t v3 = 8LL * a2;
  uint64_t v4 = *(void *)&aMessagetkeyinf[v3 + 24];
  String.hash(into:)(v6, *(void *)&aVersion_3[v3], v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

Swift::Int sub_10046B158(uint64_t a1, char a2)
{
  if (a2)
  {
    if (a2 == 1) {
      unint64_t v3 = 0x657571655279656BLL;
    }
    else {
      unint64_t v3 = 0xD000000000000012LL;
    }
    if (a2 == 1) {
      unint64_t v4 = 0xEA00000000007473LL;
    }
    else {
      unint64_t v4 = 0x8000000100840CC0LL;
    }
  }

  else
  {
    unint64_t v4 = 0xEF6E6F6974756269LL;
    unint64_t v3 = 0x727473694479656BLL;
  }

  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

unint64_t sub_10046B208@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10047B5D0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10046B234@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10045E838(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10046B25C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10047DAEC();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10046B2B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10047DAEC();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_10046B304(char a1)
{
  return *(void *)&aVersion_3[8 * a1];
}

uint64_t sub_10046B324(char *a1, char *a2)
{
  return sub_10045D900(*a1, *a2);
}

Swift::Int sub_10046B330()
{
  return sub_10046AFB0(*v0);
}

uint64_t sub_10046B338(uint64_t a1)
{
  return sub_10046B0AC(a1, *v1);
}

Swift::Int sub_10046B340(uint64_t a1)
{
  return sub_10046B0F4(a1, *v1);
}

unint64_t sub_10046B348@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10047B618(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10046B374@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10046B304(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10046B39C()
{
  return sub_10046B304(*v0);
}

unint64_t sub_10046B3A4@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10047B618(a1);
  *a2 = result;
  return result;
}

void sub_10046B3C8(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_10046B3D4(uint64_t a1)
{
  unint64_t v2 = sub_10047B8E4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10046B3FC(uint64_t a1)
{
  unint64_t v2 = sub_10047B8E4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10046B424(void *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v26 = a5;
  int v28 = a3;
  uint64_t v9 = sub_1003F5CB4(&qword_1009BACB0);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v11, v12);
  id v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = a1[3];
  uint64_t v15 = a1[4];
  sub_10040A238(a1, v16);
  unint64_t v17 = sub_10047B8E4();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for SenderKeyMessage.CodingKeys,  &type metadata for SenderKeyMessage.CodingKeys,  v17,  v16,  v15);
  LOBYTE(v27) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, &v27, v9);
  if (!v5)
  {
    uint64_t v18 = a4;
    uint64_t v19 = v26;
    LOBYTE(v27) = v28;
    char v29 = 1;
    unint64_t v20 = sub_10047B928();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v27, &v29, v9, &type metadata for SenderKeyMessageType, v20);
    uint64_t v27 = v18;
    char v29 = 2;
    uint64_t v21 = sub_1003F5CB4(&qword_1009BAC30);
    uint64_t v22 = sub_10047DB74( &qword_1009BACC8,  (unint64_t *)&unk_1009BACD0,  (uint64_t)&unk_10071B544,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v27, &v29, v9, v21, v22);
    uint64_t v27 = v19;
    char v29 = 3;
    uint64_t v23 = sub_1003F5CB4(&qword_1009BAC90);
    uint64_t v24 = sub_10047DBF8( &qword_1009BC750,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v27, &v29, v9, v23, v24);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v14, v9);
}

uint64_t sub_10046B634@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_10047B660(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(_BYTE *)(a2 + 8) = v5;
    *(void *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = v6;
    *(void *)(a2 + 24) = v7;
  }

  return result;
}

uint64_t sub_10046B664(void *a1)
{
  return sub_10046B424(a1, *(void *)v1, *(unsigned __int8 *)(v1 + 8), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10046B684(void **a1, void **a2)
{
  return sub_1004787A8(*a1, a1[1], *a2, a2[1]);
}

Swift::Int sub_10046B698()
{
  uint64_t v1 = *(void **)v0;
  uint64_t v2 = *(void **)(v0 + 8);
  Hasher.init(_seed:)(v12, 0LL);
  id v3 = [v1 prefixedURI];
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  uint64_t v6 = v5;

  String.hash(into:)(v12, v4, v6);
  swift_bridgeObjectRelease(v6);
  id v7 = [v2 prefixedURI];
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  uint64_t v10 = v9;

  String.hash(into:)(v12, v8, v10);
  swift_bridgeObjectRelease(v10);
  return Hasher._finalize()();
}

uint64_t sub_10046B764(uint64_t a1)
{
  id v3 = *(void **)v1;
  uint64_t v4 = *(void **)(v1 + 8);
  id v5 = [v3 prefixedURI];
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  uint64_t v8 = v7;

  String.hash(into:)(a1, v6, v8);
  swift_bridgeObjectRelease(v8);
  id v9 = [v4 prefixedURI];
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  uint64_t v12 = v11;

  String.hash(into:)(a1, v10, v12);
  return swift_bridgeObjectRelease(v12);
}

Swift::Int sub_10046B810(uint64_t a1)
{
  uint64_t v2 = *(void **)v1;
  id v3 = *(void **)(v1 + 8);
  Hasher.init(_seed:)(v13, a1);
  id v4 = [v2 prefixedURI];
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  uint64_t v7 = v6;

  String.hash(into:)(v13, v5, v7);
  swift_bridgeObjectRelease(v7);
  id v8 = [v3 prefixedURI];
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  uint64_t v11 = v10;

  String.hash(into:)(v13, v9, v11);
  swift_bridgeObjectRelease(v11);
  return Hasher._finalize()();
}

uint64_t sub_10046B8D8(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x7265766965636572LL;
  }
  else {
    return 0x52557265646E6573LL;
  }
}

uint64_t sub_10046B924()
{
  return sub_10046B8D8(*v0);
}

uint64_t sub_10046B92C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10047B9B0(a1, a2);
  *a3 = result;
  return result;
}

void sub_10046B950(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_10046B95C(uint64_t a1)
{
  unint64_t v2 = sub_10047B96C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10046B984(uint64_t a1)
{
  unint64_t v2 = sub_10047B96C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10046B9AC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v19 = a4;
  uint64_t v20 = a5;
  uint64_t v9 = sub_1003F5CB4(&qword_1009BACE0);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v11, v12);
  id v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = a1[3];
  uint64_t v15 = a1[4];
  sub_10040A238(a1, v16);
  unint64_t v17 = sub_10047B96C();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for SenderKeyConversationPair.CodingKeys,  &type metadata for SenderKeyConversationPair.CodingKeys,  v17,  v16,  v15);
  char v22 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, a3, &v22, v9);
  if (!v5)
  {
    char v21 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v19, v20, &v21, v9);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v14, v9);
}

uint64_t sub_10046BAD4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10047BAB0(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }

  return result;
}

uint64_t sub_10046BB00(void *a1)
{
  return sub_10046B9AC(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_10046BB1C(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = a1[2];
  uint64_t v7 = a1[3];
  uint64_t v8 = a2[1];
  uint64_t v9 = a2[2];
  uint64_t v10 = a2[3];
  BOOL v11 = v4 == *a2 && v5 == v8;
  if (v11 || (v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v8, 0LL), uint64_t result = 0LL, (v12 & 1) != 0))
  {
    if (v6 == v9 && v7 == v10) {
      return 1LL;
    }
    else {
      return _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, v9, v10, 0LL);
    }
  }

  return result;
}

Swift::Int sub_10046BBAC()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  uint64_t v4 = v0[2];
  uint64_t v3 = v0[3];
  Hasher.init(_seed:)(v6, 0LL);
  swift_bridgeObjectRetain(v2);
  String.hash(into:)(v6, v1, v2);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v6, v4, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_10046BC30(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  uint64_t v5 = v1[3];
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(a1, v3, v4);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(a1, v6, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_10046BCA0(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v5 = v1[2];
  uint64_t v4 = v1[3];
  Hasher.init(_seed:)(v7, a1);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v7, v2, v3);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(v7, v5, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_10046BD20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  v14[3] = &type metadata for UnsafeRawBufferPointer;
  v14[4] = &protocol witness table for UnsafeRawBufferPointer;
  v14[0] = a1;
  v14[1] = a2;
  uint64_t v4 = sub_10040A238(v14, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  uint64_t v5 = (_BYTE *)*v4;
  if (*v4 && (uint64_t v6 = (_BYTE *)v4[1], v7 = v6 - v5, v6 != v5))
  {
    if (v7 <= 14)
    {
      uint64_t v8 = sub_10040B3A0(v5, v6);
      unint64_t v9 = v12 & 0xFFFFFFFFFFFFFFLL;
    }

    else if ((unint64_t)v7 >= 0x7FFFFFFF)
    {
      uint64_t v8 = sub_10040B460((uint64_t)v5, (uint64_t)v6);
      unint64_t v9 = v13 | 0x8000000000000000LL;
    }

    else
    {
      uint64_t v8 = sub_10040B4D8((uint64_t)v5, (uint64_t)v6);
      unint64_t v9 = v11 | 0x4000000000000000LL;
    }
  }

  else
  {
    uint64_t v8 = 0LL;
    unint64_t v9 = 0xC000000000000000LL;
  }

  uint64_t result = sub_10040A648(v14);
  *a3 = v8;
  a3[1] = v9;
  return result;
}

uint64_t sub_10046BDE8@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10)
{
  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  uint64_t v15 = type metadata accessor for SenderKeyInfo(0LL);
  uint64_t v16 = (char *)a9 + *(int *)(v15 + 24);
  uint64_t v17 = type metadata accessor for Date(0LL);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 32LL))(v16, a5, v17);
  uint64_t v19 = (void *)((char *)a9 + *(int *)(v15 + 28));
  void *v19 = a6;
  v19[1] = a7;
  v19[2] = a8;
  v19[3] = a10;
  return result;
}

uint64_t sub_10046BE7C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = v1[2];
  unint64_t v5 = v2[3];
  sub_1004028CC(v4, v5);
  Data.hash(into:)(a1, v4, v5);
  sub_100402A84(v4, v5);
  uint64_t v6 = *v2;
  unint64_t v7 = v2[1];
  sub_1004028CC(*v2, v7);
  Data.hash(into:)(a1, v6, v7);
  sub_100402A84(v6, v7);
  uint64_t v8 = type metadata accessor for SenderKeyInfo(0LL);
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = sub_10040A2B0( &qword_1009BACE8,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(a1, v9, v10);
  uint64_t v11 = (uint64_t *)((char *)v2 + *(int *)(v8 + 28));
  uint64_t v12 = *v11;
  uint64_t v13 = v11[1];
  uint64_t v14 = v11[2];
  uint64_t v15 = v11[3];
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v15);
  String.hash(into:)(a1, v12, v13);
  swift_bridgeObjectRetain(v15);
  String.hash(into:)(a1, v14, v15);
  swift_bridgeObjectRelease(v13);
  return swift_bridgeObjectRelease_n(v15, 2LL);
}

uint64_t sub_10046BFB0(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10046BFE8 + 4 * byte_10071B0E0[a1]))( 0xD000000000000010LL,  0x80000001008413F0LL);
}

uint64_t sub_10046BFE8()
{
  return 0x6174614479656BLL;
}

uint64_t sub_10046C000()
{
  return 0x4164657461657263LL;
}

uint64_t sub_10046C01C()
{
  return 0x444979656BLL;
}

uint64_t sub_10046C030()
{
  return sub_10046BFB0(*v0);
}

uint64_t sub_10046C038@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10047BD8C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10046C05C(uint64_t a1)
{
  unint64_t v2 = sub_10047BC5C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10046C084(uint64_t a1)
{
  unint64_t v2 = sub_10047BC5C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10046C0AC(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_1003F5CB4((uint64_t *)&unk_1009BACF0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  sub_10040A238(a1, v11);
  unint64_t v13 = sub_10047BC5C();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for SenderKeyInfo.CodingKeys,  &type metadata for SenderKeyInfo.CodingKeys,  v13,  v11,  v12);
  __int128 v25 = *v3;
  char v28 = 0;
  unint64_t v14 = sub_100451294();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v25, &v28, v5, &type metadata for Data, v14);
  if (!v2)
  {
    __int128 v25 = v3[1];
    char v28 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v25, &v28, v5, &type metadata for Data, v14);
    uint64_t v15 = type metadata accessor for SenderKeyInfo(0LL);
    uint64_t v16 = (char *)v3 + *(int *)(v15 + 24);
    LOBYTE(v25) = 2;
    uint64_t v17 = type metadata accessor for Date(0LL);
    uint64_t v18 = sub_10040A2B0( &qword_1009BAD00,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v16, &v25, v5, v17, v18);
    uint64_t v19 = (char *)v3 + *(int *)(v15 + 28);
    __int128 v20 = *(_OWORD *)v19;
    uint64_t v22 = *((void *)v19 + 2);
    uint64_t v21 = *((void *)v19 + 3);
    __int128 v25 = v20;
    uint64_t v26 = v22;
    uint64_t v27 = v21;
    char v28 = 3;
    unint64_t v23 = sub_10047BCA0();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v25, &v28, v5, &type metadata for SenderKeyConversationPair, v23);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v10, v5);
}

Swift::Int sub_10046C2AC()
{
  uint64_t v1 = v0;
  Hasher.init(_seed:)(v15, 0LL);
  uint64_t v2 = v0[2];
  unint64_t v3 = v1[3];
  sub_1004028CC(v2, v3);
  Data.hash(into:)(v15, v2, v3);
  sub_100402A84(v2, v3);
  uint64_t v4 = *v1;
  unint64_t v5 = v1[1];
  sub_1004028CC(*v1, v5);
  Data.hash(into:)(v15, v4, v5);
  sub_100402A84(v4, v5);
  uint64_t v6 = type metadata accessor for SenderKeyInfo(0LL);
  uint64_t v7 = type metadata accessor for Date(0LL);
  uint64_t v8 = sub_10040A2B0( &qword_1009BACE8,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(v15, v7, v8);
  uint64_t v9 = (uint64_t *)((char *)v1 + *(int *)(v6 + 28));
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  uint64_t v12 = v9[2];
  uint64_t v13 = v9[3];
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v13);
  String.hash(into:)(v15, v10, v11);
  swift_bridgeObjectRetain(v13);
  String.hash(into:)(v15, v12, v13);
  swift_bridgeObjectRelease(v11);
  swift_bridgeObjectRelease_n(v13, 2LL);
  return Hasher._finalize()();
}

uint64_t sub_10046C3F0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v36 = a2;
  uint64_t v3 = type metadata accessor for Date(0LL);
  uint64_t v37 = *(void *)(v3 - 8);
  uint64_t v38 = v3;
  __chkstk_darwin(v4, v5);
  uint64_t v7 = (void **)((char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v40 = sub_1003F5CB4((uint64_t *)&unk_1009BAD10);
  uint64_t v8 = *(void *)(v40 - 8);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for SenderKeyInfo(0LL);
  __chkstk_darwin(v14, v15);
  uint64_t v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = a1[3];
  uint64_t v19 = a1[4];
  sub_10040A238(a1, v18);
  unint64_t v20 = sub_10047BC5C();
  uint64_t v39 = v12;
  uint64_t v21 = v41;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for SenderKeyInfo.CodingKeys,  &type metadata for SenderKeyInfo.CodingKeys,  v20,  v18,  v19);
  if (v21) {
    return sub_10040A648(a1);
  }
  id v34 = v7;
  uint64_t v35 = v8;
  uint64_t v41 = a1;
  uint64_t v22 = v17;
  uint64_t v23 = v38;
  char v45 = 0;
  unint64_t v24 = sub_100451340();
  __int128 v25 = v39;
  uint64_t v26 = v40;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v42, &type metadata for Data, &v45, v40, &type metadata for Data, v24);
  *(_OWORD *)uint64_t v22 = v42;
  char v45 = 1;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v42, &type metadata for Data, &v45, v26, &type metadata for Data, v24);
  *((_OWORD *)v22 + 1) = v42;
  LOBYTE(v4sub_10040A648(v1 + 2) = 2;
  uint64_t v27 = sub_10040A2B0( &qword_1009BAD20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  char v28 = v34;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v34, v23, &v42, v26, v23, v27);
  (*(void (**)(char *, void *, uint64_t))(v37 + 32))(&v22[*(int *)(v13 + 24)], v28, v23);
  char v45 = 3;
  unint64_t v29 = sub_10047BCE4();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v42,  &type metadata for SenderKeyConversationPair,  &v45,  v26,  &type metadata for SenderKeyConversationPair,  v29);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v25, v26);
  uint64_t v30 = v43;
  uint64_t v31 = v44;
  unint64_t v32 = &v22[*(int *)(v13 + 28)];
  *(_OWORD *)unint64_t v32 = v42;
  *((void *)v32 + sub_10040A648(v1 + 2) = v30;
  *((void *)v32 + sub_10040A648(v1 + 3) = v31;
  sub_1003F5FC8((uint64_t)v22, v36, type metadata accessor for SenderKeyInfo);
  sub_10040A648(v41);
  return sub_1003F6050((uint64_t)v22, type metadata accessor for SenderKeyInfo);
}

uint64_t sub_10046C788@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10046C3F0(a1, a2);
}

uint64_t sub_10046C79C(void *a1)
{
  return sub_10046C0AC(a1);
}

Swift::Int sub_10046C7BC(uint64_t a1, uint64_t a2)
{
  __n128 v4 = v2;
  Hasher.init(_seed:)(v17, a1);
  uint64_t v5 = v2[2];
  unint64_t v6 = v4[3];
  sub_1004028CC(v5, v6);
  Data.hash(into:)(v17, v5, v6);
  sub_100402A84(v5, v6);
  uint64_t v7 = *v4;
  unint64_t v8 = v4[1];
  sub_1004028CC(*v4, v8);
  Data.hash(into:)(v17, v7, v8);
  sub_100402A84(v7, v8);
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = sub_10040A2B0( &qword_1009BACE8,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(v17, v9, v10);
  uint64_t v11 = (uint64_t *)((char *)v4 + *(int *)(a2 + 28));
  uint64_t v12 = *v11;
  uint64_t v13 = v11[1];
  uint64_t v14 = v11[2];
  uint64_t v15 = v11[3];
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v15);
  String.hash(into:)(v17, v12, v13);
  swift_bridgeObjectRetain(v15);
  String.hash(into:)(v17, v14, v15);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease_n(v15, 2LL);
  return Hasher._finalize()();
}

uint64_t sub_10046C8F4(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x7A696C6169726573LL;
  }
  else {
    return 0x6F666E4979656BLL;
  }
}

uint64_t sub_10046C938()
{
  return sub_10046C8F4(*v0);
}

uint64_t sub_10046C940@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10047BF28(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10046C964(uint64_t a1)
{
  unint64_t v2 = sub_10047BD28();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10046C98C(uint64_t a1)
{
  unint64_t v2 = sub_10047BD28();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10046C9B4(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_1003F5CB4(&qword_1009BAD30);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  sub_10040A238(a1, v11);
  unint64_t v13 = sub_10047BD28();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for SenderKeyAndState.CodingKeys,  &type metadata for SenderKeyAndState.CodingKeys,  v13,  v11,  v12);
  LOBYTE(v20) = 0;
  uint64_t v14 = type metadata accessor for SenderKeyInfo(0LL);
  uint64_t v15 = sub_10040A2B0( (unint64_t *)&unk_1009BACD0,  type metadata accessor for SenderKeyInfo,  (uint64_t)&unk_10071B544);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v20, v5, v14, v15);
  if (!v2)
  {
    __int128 v20 = *(_OWORD *)(v3 + *(int *)(type metadata accessor for SenderKeyAndState(0LL) + 20));
    char v19 = 1;
    unint64_t v16 = sub_100451294();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v20, &v19, v5, &type metadata for Data, v16);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v10, v5);
}

uint64_t sub_10046CB1C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v29 = a2;
  uint64_t v30 = type metadata accessor for SenderKeyInfo(0LL);
  __chkstk_darwin(v4, v5);
  uint64_t v31 = (uint64_t *)((char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v32 = sub_1003F5CB4(&qword_1009BAD38);
  uint64_t v7 = *(void *)(v32 - 8);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for SenderKeyAndState(0LL);
  __chkstk_darwin(v13, v14);
  unint64_t v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = a1[3];
  uint64_t v17 = a1[4];
  sub_10040A238(a1, v18);
  unint64_t v19 = sub_10047BD28();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for SenderKeyAndState.CodingKeys,  &type metadata for SenderKeyAndState.CodingKeys,  v19,  v18,  v17);
  if (v2) {
    return sub_10040A648(a1);
  }
  uint64_t v28 = v12;
  uint64_t v20 = (uint64_t)v16;
  LOBYTE(v3sub_10040A648(v1 + 3) = 0;
  uint64_t v21 = sub_10040A2B0(&qword_1009BAC98, type metadata accessor for SenderKeyInfo, (uint64_t)&unk_10071B51C);
  uint64_t v22 = v31;
  uint64_t v23 = v32;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v31, v30, &v33, v32, v30, v21);
  sub_1003F600C((uint64_t)v22, v20, type metadata accessor for SenderKeyInfo);
  char v34 = 1;
  unint64_t v24 = sub_100451340();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v33, &type metadata for Data, &v34, v23, &type metadata for Data, v24);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v23);
  uint64_t v25 = v29;
  *(_OWORD *)(v20 + *(int *)(v28 + 20)) = v33;
  sub_1003F5FC8(v20, v25, type metadata accessor for SenderKeyAndState);
  sub_10040A648(a1);
  return sub_1003F6050(v20, type metadata accessor for SenderKeyAndState);
}

uint64_t sub_10046CD88@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10046CB1C(a1, a2);
}

uint64_t sub_10046CD9C(void *a1)
{
  return sub_10046C9B4(a1);
}

void sub_10046CDB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((sub_1004784AC(a1, a2) & 1) != 0) {
    sub_100410288(*(void *)(a1 + *(int *)(a3 + 20)), *(void *)(a1 + *(int *)(a3 + 20) + 8));
  }
}

void sub_10046CE0C()
{
  qword_1009C7690 = 0x6C6F6F74736469LL;
  *(void *)algn_1009C7698 = 0xE700000000000000LL;
}

void sub_10046CE50()
{
  algn_1009C76A8[5] = 0;
  *(_WORD *)&algn_1009C76A8[6] = -5120;
}

void sub_10046CE9C()
{
  qword_1009C76B0 = 0x6567617373654D69LL;
  *(void *)algn_1009C76B8 = 0xEF65766965636552LL;
}

void sub_10046CEEC()
{
  algn_1009C76C8[7] = -18;
}

void sub_10046CF3C()
{
  qword_1009C76D0 = 0x6C6C6F5279654BLL;
  *(void *)algn_1009C76D8 = 0xE700000000000000LL;
}

void sub_10046CF80()
{
  qword_1009C76E0 = 0x766F63655279654BLL;
  *(void *)algn_1009C76E8 = 0xEB00000000797265LL;
}

id sub_10046D034()
{
  return sub_100411CD0(type metadata accessor for IDSSenderKeySendContext);
}

Swift::Int sub_10046D044()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(v1 + 1);
  return Hasher._finalize()();
}

void sub_10046D088()
{
}

Swift::Int sub_10046D0B4(uint64_t a1)
{
  uint64_t v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2 + 1);
  return Hasher._finalize()();
}

uint64_t sub_10046D0F4@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_10047C028(*a1);
  *a2 = result;
  return result;
}

void sub_10046D11C(void *a1@<X8>)
{
  *a1 = *v1 + 1LL;
}

uint64_t sub_10046D12C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10047DA64();
  unint64_t v5 = sub_10047DAA8();
  return Error<>._code.getter(a1, a2, v4, v5);
}

void *sub_10046D170(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_1003F5CB4((uint64_t *)&unk_1009BB520);
      uint64_t v11 = (void *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 17;
      }
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      __n128 v14 = v11 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      __n128 v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4]) {
          memmove(v14, a4 + 4, 16 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_100479764(0LL, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

uint64_t sub_10046D27C(char a1, int64_t a2, char a3, unint64_t a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
LABEL_29:
        uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Division by zero",  16LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14377LL,  0);
LABEL_31:
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v10 = sub_1003F5CB4((uint64_t *)&unk_1009BB0F0);
  uint64_t v11 = *(void *)(type metadata accessor for SenderKeyInfo(0LL) - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (v13 + 32) & ~v13;
  uint64_t v15 = (void *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  size_t v16 = j__malloc_size(v15);
  if (!v12) {
    goto LABEL_29;
  }
  if (v16 - v14 == 0x8000000000000000LL && v12 == -1)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Division results in an overflow",  31LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14384LL,  0);
    goto LABEL_31;
  }

  void v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  uint64_t v18 = type metadata accessor for SenderKeyInfo(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  unint64_t v21 = (unint64_t)v15 + v20;
  if ((a1 & 1) != 0)
  {
    unint64_t v22 = a4 + v20;
    if ((unint64_t)v15 < a4 || v21 >= v22 + *(void *)(v19 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v15 + v20, v22, v8, v18);
    }

    else if (v15 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v15 + v20);
    }

    *(void *)(a4 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
  }

  else
  {
    sub_1004799D4(0LL, v8, v21, a4);
  }

  swift_bridgeObjectRelease(a4);
  return (uint64_t)v15;
}

void *sub_10046D484(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_1003F5CB4((uint64_t *)&unk_1009B9520);
      uint64_t v11 = (void *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 17;
      }
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      uint64_t v14 = v11 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4]) {
          memmove(v14, a4 + 4, 16 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_10047A6C4(0LL, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

unint64_t sub_10046D590(void *a1, void *a2)
{
  id v5 = [a1 prefixedURI];
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  uint64_t v8 = v7;

  String.hash(into:)(v15, v6, v8);
  swift_bridgeObjectRelease(v8);
  id v9 = [a2 prefixedURI];
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  uint64_t v12 = v11;

  String.hash(into:)(v15, v10, v12);
  swift_bridgeObjectRelease(v12);
  Swift::Int v13 = Hasher._finalize()();
  return sub_10046D678(a1, a2, v13);
}

unint64_t sub_10046D678(void *a1, void *a2, uint64_t a3)
{
  id v31 = a2;
  uint64_t v4 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v5 = a3 & ~v4;
  if (((*(void *)(v3 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0)
  {
    uint64_t v32 = ~v4;
    do
    {
      uint64_t v6 = *(void *)(v3 + 48) + 16 * v5;
      uint64_t v7 = *(void **)(v6 + 8);
      id v8 = *(id *)v6;
      id v9 = v7;
      id v10 = [v8 prefixedURI];
      uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
      uint64_t v13 = v12;

      id v14 = [a1 prefixedURI];
      uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      uint64_t v17 = v16;

      if (v11 == v15 && v13 == v17)
      {
        swift_bridgeObjectRelease_n(v13, 2LL);
      }

      else
      {
        char v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v13, v15, v17, 0LL);
        swift_bridgeObjectRelease(v13);
        swift_bridgeObjectRelease(v17);
        if ((v19 & 1) == 0)
        {

          goto LABEL_4;
        }
      }

      id v20 = objc_msgSend(v9, "prefixedURI", v31);
      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
      uint64_t v23 = v22;

      id v24 = [v31 prefixedURI];
      uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
      uint64_t v27 = v26;

      if (v21 == v25 && v23 == v27)
      {

        swift_bridgeObjectRelease_n(v23, 2LL);
        return v5;
      }

      char v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v23, v25, v27, 0LL);

      swift_bridgeObjectRelease(v23);
      swift_bridgeObjectRelease(v27);
      if ((v29 & 1) != 0) {
        return v5;
      }
LABEL_4:
      unint64_t v5 = (v5 + 1) & v32;
    }

    while (((*(void *)(v3 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0);
  }

  return v5;
}

void *sub_10046D898(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v3 = sub_1003F5CB4((uint64_t *)&unk_1009BB0F0);
  uint64_t v4 = *(void *)(type metadata accessor for SenderKeyInfo(0LL) - 8);
  uint64_t v5 = *(void *)(v4 + 72);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = (v6 + 32) & ~v6;
  id v8 = (void *)swift_allocObject(v3, v7 + v5 * v1, v6 | 7);
  uint64_t result = (void *)j__malloc_size(v8);
  if (v5)
  {
    if ((void *)((char *)result - v7) != (void *)0x8000000000000000LL || v5 != -1)
    {
      v8[2] = v1;
      v8[3] = 2 * (((uint64_t)result - v7) / v5);
      uint64_t v11 = sub_100477CEC(&v13, (uint64_t)v8 + v7, v1, a1);
      uint64_t v12 = v13;
      swift_bridgeObjectRetain(a1);
      sub_10041D3BC(v12);
      if (v11 == v1) {
        return v8;
      }
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

void *sub_10046D9B0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v3 = sub_1003F5CB4((uint64_t *)&unk_1009B9520);
  uint64_t v4 = (void *)swift_allocObject(v3, 16 * v1 + 32, 7LL);
  int64_t v5 = j__malloc_size(v4);
  uint64_t v6 = v5 - 32;
  if (v5 < 32) {
    uint64_t v6 = v5 - 17;
  }
  v4[2] = v1;
  v4[3] = 2 * (v6 >> 4);
  uint64_t v7 = sub_100477FA8((uint64_t)&v10, v4 + 4, v1, a1);
  uint64_t v8 = v10;
  swift_bridgeObjectRetain(a1);
  sub_10041D3BC(v8);
  if (v7 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }

  return v4;
}

uint64_t **sub_10046DA94(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001LL) == 0)
  {
    uint64_t v2 = *(void *)(a1 + 16);
    if (v2) {
      goto LABEL_5;
    }
    return (uint64_t **)_swiftEmptyArrayStorage;
  }

  if (a1 >= 0) {
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  }
  uint64_t v2 = __CocoaSet.count.getter(a1);
  if (!v2) {
    return (uint64_t **)_swiftEmptyArrayStorage;
  }
LABEL_5:
  if (v2 <= 0)
  {
    uint64_t v4 = (uint64_t **)_swiftEmptyArrayStorage;
  }

  else
  {
    uint64_t v3 = sub_1003F5CB4((uint64_t *)&unk_1009BABF0);
    uint64_t v4 = (uint64_t **)swift_allocObject(v3, 8 * v2 + 32, 7LL);
    int64_t v5 = j__malloc_size(v4);
    uint64_t v6 = v5 - 32;
    if (v5 < 32) {
      uint64_t v6 = v5 - 25;
    }
    v4[2] = (uint64_t *)v2;
    v4[3] = (uint64_t *)((2 * (v6 >> 3)) | 1);
  }

  swift_bridgeObjectRetain(v1);
  uint64_t v7 = sub_1004781A4(&v9, v4 + 4, v2, v1);
  uint64_t result = (uint64_t **)sub_10041D3BC(v9);
  __break(1u);
  return result;
}

uint64_t sub_10046DB8C(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  unint64_t v7 = sub_10046D590(a1, a2);
  LOBYTE(asub_10040A648(v1 + 2) = v8;
  swift_bridgeObjectRelease(v6);
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  uint64_t v10 = *v3;
  uint64_t v16 = *v3;
  uint64_t *v3 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10046E870();
    uint64_t v10 = v16;
  }

  uint64_t v11 = *(void *)(v10 + 48) + 16 * v7;
  uint64_t v12 = *(void **)v11;

  uint64_t v13 = *(void *)(*(void *)(v10 + 56) + 8 * v7);
  sub_10046E2D4(v7, v10);
  uint64_t v14 = *v3;
  uint64_t *v3 = v10;
  swift_bridgeObjectRelease(v14);
  return v13;
}

Swift::Int sub_10046DC5C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_1003F5CB4(&qword_1009BB158);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v36 = v3;
  uint64_t v37 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v15 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }

    int64_t v23 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v23 >= v12) {
      break;
    }
    id v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v37 + 8 * v23);
    ++v15;
    if (!v25)
    {
      int64_t v15 = v23 + 1;
      if (v23 + 1 >= v12) {
        goto LABEL_36;
      }
      unint64_t v25 = *(void *)(v37 + 8 * v15);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_36:
          swift_release(v5);
          uint64_t v3 = v36;
          if ((a2 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = *(void *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v15 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v15 >= v12) {
              goto LABEL_36;
            }
            unint64_t v25 = *(void *)(v37 + 8 * v15);
            ++v26;
            if (v25) {
              goto LABEL_33;
            }
          }
        }

        int64_t v15 = v26;
      }
    }

Swift::Int sub_10046DF30(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_1003F5CB4(&qword_1009BB110);
  char v47 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  char v45 = (void *)(v5 + 64);
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  uint64_t v43 = v3;
  int64_t v44 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  for (i = v5; ; uint64_t v5 = i)
  {
    if (v11)
    {
      unint64_t v28 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v29 = v28 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v30 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v30 >= v44) {
      break;
    }
    uint64_t v31 = v45;
    unint64_t v32 = v45[v30];
    ++v14;
    if (!v32)
    {
      int64_t v14 = v30 + 1;
      if (v30 + 1 >= v44) {
        goto LABEL_36;
      }
      unint64_t v32 = v45[v14];
      if (!v32)
      {
        int64_t v33 = v30 + 2;
        if (v33 >= v44)
        {
LABEL_36:
          swift_release(v5);
          uint64_t v3 = v43;
          if ((v47 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v32 = v45[v33];
        if (!v32)
        {
          while (1)
          {
            int64_t v14 = v33 + 1;
            if (__OFADD__(v33, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v44) {
              goto LABEL_36;
            }
            unint64_t v32 = v45[v14];
            ++v33;
            if (v32) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v33;
      }
    }

void sub_10046E2D4(unint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  int64_t v3 = a1;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (a1 + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t v8 = _HashTable.previousHole(before:)(a1, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      uint64_t v40 = v2;
      uint64_t v41 = v4;
      do
      {
        uint64_t v10 = *(void *)(v2 + 40);
        uint64_t v11 = *(void *)(v2 + 48) + 16 * v6;
        uint64_t v12 = v7;
        uint64_t v13 = *(void **)v11;
        int64_t v14 = *(void **)(v11 + 8);
        unint64_t v15 = v9;
        Hasher.init(_seed:)(v42, v10);
        id v16 = v13;
        id v17 = v14;
        id v18 = [v16 prefixedURI];
        uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
        uint64_t v21 = v20;

        String.hash(into:)(v42, v19, v21);
        swift_bridgeObjectRelease(v21);
        id v22 = [v17 prefixedURI];
        uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
        uint64_t v25 = v24;

        String.hash(into:)(v42, v23, v25);
        swift_bridgeObjectRelease(v25);
        Swift::Int v26 = Hasher._finalize()();

        uint64_t v7 = v12;
        unint64_t v9 = v15;
        Swift::Int v27 = v26 & v12;
        if (v3 >= (uint64_t)v15)
        {
          if (v27 < v15)
          {
            uint64_t v2 = v40;
            uint64_t v4 = v41;
          }

          else
          {
            uint64_t v2 = v40;
            uint64_t v4 = v41;
            if (v3 >= v27) {
              goto LABEL_12;
            }
          }
        }

        else
        {
          uint64_t v2 = v40;
          uint64_t v4 = v41;
          if (v27 >= v9 || v3 >= v27)
          {
LABEL_12:
            uint64_t v28 = *(void *)(v2 + 48);
            unint64_t v29 = (_OWORD *)(v28 + 16 * v3);
            int64_t v30 = (_OWORD *)(v28 + 16 * v6);
            if (v3 != v6 || v29 >= v30 + 1) {
              *unint64_t v29 = *v30;
            }
            uint64_t v31 = *(void *)(v2 + 56);
            unint64_t v32 = (void *)(v31 + 8 * v3);
            int64_t v33 = (void *)(v31 + 8 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v32 >= v33 + 1))
            {
              *unint64_t v32 = *v33;
              int64_t v3 = v6;
            }
          }
        }

        unint64_t v6 = (v6 + 1) & v12;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    char v34 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v35 = *v34;
    uint64_t v36 = (-1LL << v3) - 1;
  }

  else
  {
    char v34 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    uint64_t v36 = *v34;
    uint64_t v35 = (-1LL << a1) - 1;
  }

  *char v34 = v36 & v35;
  uint64_t v37 = *(void *)(v2 + 16);
  BOOL v38 = __OFSUB__(v37, 1LL);
  uint64_t v39 = v37 - 1;
  if (v38)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v39;
    ++*(_DWORD *)(v2 + 36);
  }

id sub_10046E558(uint64_t a1, void *a2, void *a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v9 = *v4;
  unint64_t v11 = sub_10046D590(a2, a3);
  uint64_t v12 = *(void *)(v9 + 16);
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v15 = v10;
  uint64_t v16 = *(void *)(v9 + 24);
  if (v16 >= v14 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v16 >= v14 && (a4 & 1) == 0)
  {
    sub_10046E870();
LABEL_7:
    id v17 = (void *)*v5;
    if ((v15 & 1) != 0)
    {
LABEL_8:
      uint64_t v18 = v17[7];
      id result = (id)swift_release(*(void *)(v18 + 8 * v11));
      *(void *)(v18 + 8 * v11) = a1;
      return result;
    }

void sub_10046E6C8()
{
  uint64_t v1 = v0;
  sub_1003F5CB4(&qword_1009BB158);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    uint64_t *v1 = v4;
    return;
  }

  uint64_t v5 = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }

void *sub_10046E870()
{
  uint64_t v1 = v0;
  sub_1003F5CB4(&qword_1009BB110);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (void *)swift_release(v2);
    uint64_t *v1 = v4;
    return result;
  }

  id result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v21 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }

uint64_t sub_10046EA38(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10046EA54(a1, a2, a3, (void *)*v3);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_10046EA54(char a1, int64_t a2, char a3, void *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    unint64_t v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v10 = sub_1003F5CB4((uint64_t *)&unk_1009BB0F0);
  uint64_t v11 = *(void *)(type metadata accessor for SenderKeyInfo(0LL) - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (v13 + 32) & ~v13;
  unint64_t v15 = (void *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  size_t v16 = j__malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }

  if (v16 - v14 == 0x8000000000000000LL && v12 == -1) {
    goto LABEL_34;
  }
  void v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  uint64_t v18 = type metadata accessor for SenderKeyInfo(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  int64_t v21 = (char *)v15 + v20;
  unint64_t v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v15 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack(v21, v22, v8, v18);
    }

    else if (v15 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v21);
    }

    a4[2] = 0LL;
    goto LABEL_32;
  }

  uint64_t v23 = *(void *)(v19 + 72) * v8;
  __int128 v24 = &v21[v23];
  unint64_t v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy(v21);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v15;
  }

uint64_t sub_10046EC34(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = *v3;
  Hasher.init(_seed:)(&__s1, *(void *)(*v3 + 40));
  swift_bridgeObjectRetain(v6);
  Data.hash(into:)(&__s1, a2, a3);
  unint64_t v7 = Hasher._finalize()() & ~(-1LL << *(_BYTE *)(v6 + 32));
  if (((*(void *)(v6 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v7) & 1) != 0) {
    __asm { BR              X8 }
  }

  swift_bridgeObjectRelease(v6);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v11);
  uint64_t __s1 = *v11;
  *uint64_t v11 = 0x8000000000000000LL;
  sub_1004028CC(a2, a3);
  sub_100471CBC(a2, a3, v7, isUniquelyReferenced_nonNull_native);
  uint64_t v9 = *v11;
  *uint64_t v11 = __s1;
  swift_bridgeObjectRelease(v9);
  *a1 = a2;
  a1[1] = a3;
  return 1LL;
}

uint64_t sub_10046F660(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for SenderKeyInfo(0LL);
  unint64_t v69 = *(void *)(v6 - 8);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (char *)v54 - v13;
  __chkstk_darwin(v15, v16);
  uint64_t v64 = (char *)v54 - v17;
  __chkstk_darwin(v18, v19);
  uint64_t v63 = (char *)v54 - v20;
  __chkstk_darwin(v21, v22);
  uint64_t v67 = (char *)v54 - v23;
  __chkstk_darwin(v24, v25);
  uint64_t v66 = (char *)v54 - v26;
  __chkstk_darwin(v27, v28);
  uint64_t v68 = (uint64_t)v54 - v29;
  __chkstk_darwin(v30, v31);
  uint64_t v55 = (void *)((char *)v54 - v32);
  uint64_t v33 = *v2;
  Hasher.init(_seed:)(&__s1, *(void *)(*v2 + 40LL));
  uint64_t v34 = a2[2];
  unint64_t v35 = a2[3];
  swift_bridgeObjectRetain(v33);
  sub_1004028CC(v34, v35);
  Data.hash(into:)(&__s1, v34, v35);
  sub_100402A84(v34, v35);
  uint64_t v36 = *a2;
  unint64_t v37 = a2[1];
  sub_1004028CC(*a2, v37);
  Data.hash(into:)(&__s1, v36, v37);
  sub_100402A84(v36, v37);
  uint64_t v38 = type metadata accessor for Date(0LL);
  uint64_t v39 = sub_10040A2B0( &qword_1009BACE8,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(&__s1, v38, v39);
  uint64_t v56 = v6;
  uint64_t v40 = (uint64_t *)((char *)a2 + *(int *)(v6 + 28));
  uint64_t v41 = *v40;
  uint64_t v42 = v40[1];
  uint64_t v43 = v40[2];
  uint64_t v44 = v40[3];
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRetain(v44);
  String.hash(into:)(&__s1, v41, v42);
  swift_bridgeObjectRetain(v44);
  String.hash(into:)(&__s1, v43, v44);
  swift_bridgeObjectRelease(v42);
  swift_bridgeObjectRelease_n(v44, 2LL);
  Swift::Int v45 = Hasher._finalize()();
  uint64_t v46 = -1LL << *(_BYTE *)(v33 + 32);
  unint64_t v47 = v45 & ~v46;
  uint64_t v62 = v33 + 56;
  if (((*(void *)(v33 + 56 + ((v47 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v47) & 1) != 0)
  {
    v54[1] = v3;
    v54[2] = a1;
    uint64_t v57 = ~v46;
    uint64_t v48 = v68;
    uint64_t v61 = *(void *)(v69 + 72);
    uint64_t v65 = a2;
    uint64_t v58 = v33;
    unint64_t v59 = v10;
    int64_t v60 = v14;
    uint64_t v49 = *(void *)(v33 + 48);
    unint64_t v69 = v47;
    sub_1003F5FC8(v49 + v61 * v47, v68, type metadata accessor for SenderKeyInfo);
    __asm { BR              X10 }
  }

  swift_bridgeObjectRelease(v33);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  unint64_t v51 = v55;
  sub_1003F5FC8((uint64_t)a2, (uint64_t)v55, type metadata accessor for SenderKeyInfo);
  uint64_t __s1 = *v3;
  void *v3 = 0x8000000000000000LL;
  sub_100472700(v51, v47, isUniquelyReferenced_nonNull_native);
  uint64_t v52 = *v3;
  void *v3 = __s1;
  swift_bridgeObjectRelease(v52);
  sub_1003F600C((uint64_t)a2, a1, type metadata accessor for SenderKeyInfo);
  return 1LL;
}

uint64_t sub_100470ECC(Swift::Int *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001LL) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(*v2);
    id v8 = a2;
    uint64_t v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease(v6);

      uint64_t v33 = v9;
      uint64_t v10 = sub_10041D3C4(0LL, &qword_1009BAC10, &OBJC_CLASS___IDSDestination_ptr);
      swift_unknownObjectRetain(v9, v11);
      swift_dynamicCast(&v34, &v33, (char *)&type metadata for Swift.AnyObject + 8, v10, 7LL);
      *a1 = v34;
      swift_unknownObjectRelease(v9, v12);
      return 0LL;
    }

    uint64_t result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1LL))
    {
      __break(1u);
      return result;
    }

    Swift::Int v25 = sub_100471168(v7, result + 1);
    Swift::Int v34 = v25;
    unint64_t v26 = *(void *)(v25 + 16);
    if (*(void *)(v25 + 24) <= v26)
    {
      uint64_t v31 = v26 + 1;
      id v32 = v8;
      sub_100471860(v31);
      uint64_t v27 = v34;
    }

    else
    {
      uint64_t v27 = v25;
      id v28 = v8;
    }

    sub_100423E08((uint64_t)v8, v27);
    uint64_t v30 = *v3;
    uint64_t *v3 = v27;
  }

  else
  {
    Swift::Int v14 = *(void *)(v6 + 40);
    swift_bridgeObjectRetain(v6);
    Swift::Int v15 = NSObject._rawHashValue(seed:)(v14);
    uint64_t v16 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v17 = v15 & ~v16;
    if (((*(void *)(v6 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v17) & 1) != 0)
    {
      sub_10041D3C4(0LL, &qword_1009BAC10, &OBJC_CLASS___IDSDestination_ptr);
      id v18 = *(id *)(*(void *)(v6 + 48) + 8 * v17);
      char v19 = static NSObject.== infix(_:_:)(v18, a2);

      if ((v19 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease(v6);
        uint64_t v23 = *(void **)(*(void *)(*v3 + 48) + 8 * v17);
        *a1 = (Swift::Int)v23;
        id v24 = v23;
        return 0LL;
      }

      uint64_t v20 = ~v16;
      while (1)
      {
        unint64_t v17 = (v17 + 1) & v20;
        if (((*(void *)(v6 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v17) & 1) == 0) {
          break;
        }
        id v21 = *(id *)(*(void *)(v6 + 48) + 8 * v17);
        char v22 = static NSObject.== infix(_:_:)(v21, a2);

        if ((v22 & 1) != 0) {
          goto LABEL_12;
        }
      }
    }

    swift_bridgeObjectRelease(v6);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    Swift::Int v34 = *v3;
    uint64_t *v3 = 0x8000000000000000LL;
    id v8 = a2;
    sub_100473F08((uint64_t)v8, v17, isUniquelyReferenced_nonNull_native);
    uint64_t v30 = *v3;
    uint64_t *v3 = v34;
  }

  swift_bridgeObjectRelease(v30);
  *a1 = (Swift::Int)v8;
  return 1LL;
}

Swift::Int sub_100471168(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_1003F5CB4(&qword_1009BB130);
    uint64_t v4 = static _SetStorage.convert(_:capacity:)(a1, a2);
    uint64_t v23 = v4;
    uint64_t v5 = __CocoaSet.makeIterator()(a1);
    uint64_t v6 = __CocoaSet.Iterator.next()(v5);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = sub_10041D3C4(0LL, &qword_1009BAC10, &OBJC_CLASS___IDSDestination_ptr);
      do
      {
        uint64_t v21 = v7;
        swift_dynamicCast(&v22, &v21, (char *)&type metadata for Swift.AnyObject + 8, v8, 7LL);
        uint64_t v4 = v23;
        unint64_t v16 = *(void *)(v23 + 16);
        if (*(void *)(v23 + 24) <= v16)
        {
          sub_100471860(v16 + 1);
          uint64_t v4 = v23;
        }

        uint64_t v9 = v22;
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v4 + 40));
        uint64_t v11 = v4 + 56;
        uint64_t v12 = -1LL << *(_BYTE *)(v4 + 32);
        unint64_t v13 = result & ~v12;
        unint64_t v14 = v13 >> 6;
        if (((-1LL << v13) & ~*(void *)(v4 + 56 + 8 * (v13 >> 6))) != 0)
        {
          unint64_t v15 = __clz(__rbit64((-1LL << v13) & ~*(void *)(v4 + 56 + 8 * (v13 >> 6)))) | v13 & 0x7FFFFFFFFFFFFFC0LL;
        }

        else
        {
          char v17 = 0;
          unint64_t v18 = (unint64_t)(63 - v12) >> 6;
          do
          {
            if (++v14 == v18 && (v17 & 1) != 0)
            {
              __break(1u);
              return result;
            }

            BOOL v19 = v14 == v18;
            if (v14 == v18) {
              unint64_t v14 = 0LL;
            }
            v17 |= v19;
            uint64_t v20 = *(void *)(v11 + 8 * v14);
          }

          while (v20 == -1);
          unint64_t v15 = __clz(__rbit64(~v20)) + (v14 << 6);
        }

        *(void *)(v11 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
        *(void *)(*(void *)(v4 + 48) + 8 * v15) = v9;
        ++*(void *)(v4 + 16);
        uint64_t v7 = __CocoaSet.Iterator.next()(result);
      }

      while (v7);
    }

    swift_release(v5);
  }

  else
  {
    swift_unknownObjectRelease(a1, 0LL);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }

  return v4;
}

Swift::Int sub_10047135C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_1003F5CB4(&qword_1009BC9D0);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    id v32 = v2;
    uint64_t v33 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v8 = ~(-1LL << v7);
    }
    else {
      uint64_t v8 = -1LL;
    }
    unint64_t v9 = v8 & *(void *)(v3 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = v5 + 56;
    Swift::Int result = swift_retain(v3);
    int64_t v13 = 0LL;
    while (1)
    {
      if (v9)
      {
        unint64_t v16 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }

      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v18 >= v10) {
          goto LABEL_36;
        }
        unint64_t v19 = v33[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v10) {
            goto LABEL_36;
          }
          unint64_t v19 = v33[v13];
          if (!v19)
          {
            int64_t v13 = v18 + 2;
            if (v18 + 2 >= v10) {
              goto LABEL_36;
            }
            unint64_t v19 = v33[v13];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v10)
              {
LABEL_36:
                swift_release(v3);
                uint64_t v2 = v32;
                uint64_t v31 = 1LL << *(_BYTE *)(v3 + 32);
                if (v31 > 63) {
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *uint64_t v33 = -1LL << v31;
                }
                *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
                break;
              }

              unint64_t v19 = v33[v20];
              if (!v19)
              {
                while (1)
                {
                  int64_t v13 = v20 + 1;
                  if (__OFADD__(v20, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v13 >= v10) {
                    goto LABEL_36;
                  }
                  unint64_t v19 = v33[v13];
                  ++v20;
                  if (v19) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v13 = v20;
            }
          }
        }

uint64_t sub_100471638(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(type metadata accessor for SenderKeyInfo(0LL) - 8);
  __chkstk_darwin(v5, v6);
  uint64_t v8 = (uint64_t *)((char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v9 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_1003F5CB4(&qword_1009BB118);
  uint64_t v10 = static _SetStorage.resize(original:capacity:move:)(v9, a1, 1LL);
  if (!*(void *)(v9 + 16)) {
    goto LABEL_28;
  }
  uint64_t v11 = 1LL << *(_BYTE *)(v9 + 32);
  uint64_t v12 = (void *)(v9 + 56);
  uint64_t v13 = -1LL;
  if (v11 < 64) {
    uint64_t v13 = ~(-1LL << v11);
  }
  unint64_t v14 = v13 & *(void *)(v9 + 56);
  int64_t v15 = (unint64_t)(v11 + 63) >> 6;
  uint64_t result = swift_retain(v9);
  int64_t v17 = 0LL;
  while (1)
  {
    if (v14)
    {
      unint64_t v18 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v19 = v18 | (v17 << 6);
      goto LABEL_8;
    }

    int64_t v20 = v17 + 1;
    if (__OFADD__(v17, 1LL))
    {
      __break(1u);
LABEL_30:
      __break(1u);
      return result;
    }

    if (v20 >= v15) {
      goto LABEL_24;
    }
    unint64_t v21 = v12[v20];
    ++v17;
    if (!v21)
    {
      int64_t v17 = v20 + 1;
      if (v20 + 1 >= v15) {
        goto LABEL_24;
      }
      unint64_t v21 = v12[v17];
      if (!v21)
      {
        int64_t v17 = v20 + 2;
        if (v20 + 2 >= v15) {
          goto LABEL_24;
        }
        unint64_t v21 = v12[v17];
        if (!v21) {
          break;
        }
      }
    }

Swift::Int sub_100471860(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_1003F5CB4(&qword_1009BB130);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v30 = v2;
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    uint64_t v8 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1LL << v7);
    }
    else {
      uint64_t v9 = -1LL;
    }
    unint64_t v10 = v9 & *(void *)(v3 + 56);
    int64_t v11 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v12 = v5 + 56;
    Swift::Int result = swift_retain(v3);
    int64_t v14 = 0LL;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v14 << 6);
      }

      else
      {
        int64_t v18 = v14 + 1;
        if (__OFADD__(v14, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v18 >= v11) {
          goto LABEL_36;
        }
        unint64_t v19 = v8[v18];
        ++v14;
        if (!v19)
        {
          int64_t v14 = v18 + 1;
          if (v18 + 1 >= v11) {
            goto LABEL_36;
          }
          unint64_t v19 = v8[v14];
          if (!v19)
          {
            int64_t v14 = v18 + 2;
            if (v18 + 2 >= v11) {
              goto LABEL_36;
            }
            unint64_t v19 = v8[v14];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v11)
              {
LABEL_36:
                swift_release(v3);
                uint64_t v2 = v30;
                uint64_t v29 = 1LL << *(_BYTE *)(v3 + 32);
                if (v29 > 63) {
                  bzero((void *)(v3 + 56), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *uint64_t v8 = -1LL << v29;
                }
                *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
                break;
              }

              unint64_t v19 = v8[v20];
              if (!v19)
              {
                while (1)
                {
                  int64_t v14 = v20 + 1;
                  if (__OFADD__(v20, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v14 >= v11) {
                    goto LABEL_36;
                  }
                  unint64_t v19 = v8[v14];
                  ++v20;
                  if (v19) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v14 = v20;
            }
          }
        }

uint64_t sub_100471AFC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  unint64_t v5 = a1[3];
  sub_1004028CC(v4, v5);
  Data.hash(into:)(v19, v4, v5);
  sub_100402A84(v4, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  sub_1004028CC(*a1, v7);
  Data.hash(into:)(v19, v6, v7);
  sub_100402A84(v6, v7);
  uint64_t v8 = type metadata accessor for SenderKeyInfo(0LL);
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = sub_10040A2B0( &qword_1009BACE8,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(v19, v9, v10);
  int64_t v11 = (uint64_t *)((char *)a1 + *(int *)(v8 + 28));
  uint64_t v12 = *v11;
  uint64_t v13 = v11[1];
  uint64_t v14 = v11[2];
  uint64_t v15 = v11[3];
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v15);
  String.hash(into:)(v19, v12, v13);
  swift_bridgeObjectRetain(v15);
  String.hash(into:)(v19, v14, v15);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease_n(v15, 2LL);
  Swift::Int v16 = Hasher._finalize()();
  unint64_t v17 = _HashTable.nextHole(atOrAfter:)(v16 & ~(-1LL << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1LL << *(_BYTE *)(a2 + 32)));
  *(void *)(a2 + 56 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v17;
  uint64_t result = sub_1003F600C( (uint64_t)a1,  *(void *)(a2 + 48) + *(void *)(*(void *)(v8 - 8) + 72LL) * v17,  type metadata accessor for SenderKeyInfo);
  ++*(void *)(a2 + 16);
  return result;
}

Swift::Int sub_100471CBC(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  Swift::Int v7 = result;
  unint64_t v8 = *(void *)(*v4 + 16);
  unint64_t v9 = *(void *)(*v4 + 24);
  if (v9 <= v8 || (a4 & 1) == 0)
  {
    uint64_t v10 = v8 + 1;
    if ((a4 & 1) != 0)
    {
      sub_10047135C(v10);
    }

    else
    {
      if (v9 > v8)
      {
        uint64_t result = (Swift::Int)sub_10047408C();
        goto LABEL_10;
      }

      sub_100474604(v10);
    }

    uint64_t v11 = *v4;
    Hasher.init(_seed:)(&__s1, *(void *)(*v4 + 40));
    Data.hash(into:)(&__s1, v7, a2);
    uint64_t result = Hasher._finalize()();
    a3 = result & ~(-1LL << *(_BYTE *)(v11 + 32));
    if (((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) != 0) {
      __asm { BR              X8 }
    }
  }

uint64_t sub_100472700(uint64_t *a1, unint64_t a2, char a3)
{
  uint64_t v7 = type metadata accessor for SenderKeyInfo(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13, v14);
  uint64_t v64 = (char *)v54 - v15;
  __chkstk_darwin(v16, v17);
  uint64_t v63 = (char *)v54 - v18;
  __chkstk_darwin(v19, v20);
  uint64_t v62 = (char *)v54 - v21;
  __chkstk_darwin(v22, v23);
  uint64_t v66 = (char *)v54 - v24;
  __chkstk_darwin(v25, v26);
  __chkstk_darwin(v27, v28);
  uint64_t v67 = (uint64_t)v54 - v30;
  unint64_t v31 = *(void *)(*v3 + 16);
  unint64_t v32 = *(void *)(*v3 + 24);
  uint64_t v56 = v3;
  uint64_t v55 = v8;
  if (v32 <= v31 || (a3 & 1) == 0)
  {
    uint64_t v65 = v29;
    uint64_t v33 = v31 + 1;
    if ((a3 & 1) != 0)
    {
      sub_100471638(v33);
    }

    else
    {
      if (v32 > v31)
      {
        sub_10047423C();
        goto LABEL_10;
      }

      sub_1004748B4(v33);
    }

    uint64_t v34 = *v3;
    Hasher.init(_seed:)(&__s1, *(void *)(*v3 + 40));
    uint64_t v35 = a1[2];
    unint64_t v36 = a1[3];
    sub_1004028CC(v35, v36);
    Data.hash(into:)(&__s1, v35, v36);
    sub_100402A84(v35, v36);
    uint64_t v37 = *a1;
    unint64_t v38 = a1[1];
    sub_1004028CC(*a1, v38);
    Data.hash(into:)(&__s1, v37, v38);
    sub_100402A84(v37, v38);
    uint64_t v39 = type metadata accessor for Date(0LL);
    uint64_t v40 = sub_10040A2B0( &qword_1009BACE8,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    dispatch thunk of Hashable.hash(into:)(&__s1, v39, v40);
    uint64_t v41 = (uint64_t *)((char *)a1 + *(int *)(v7 + 28));
    uint64_t v42 = *v41;
    uint64_t v43 = v41[1];
    uint64_t v44 = v41[2];
    uint64_t v45 = v41[3];
    swift_bridgeObjectRetain(v43);
    swift_bridgeObjectRetain(v45);
    String.hash(into:)(&__s1, v42, v43);
    swift_bridgeObjectRetain(v45);
    String.hash(into:)(&__s1, v44, v45);
    swift_bridgeObjectRelease(v43);
    swift_bridgeObjectRelease_n(v45, 2LL);
    Swift::Int v46 = Hasher._finalize()();
    uint64_t v47 = -1LL << *(_BYTE *)(v34 + 32);
    a2 = v46 & ~v47;
    uint64_t v60 = v34 + 56;
    uint64_t v61 = v34;
    if (((*(void *)(v34 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
    {
      uint64_t v58 = v12;
      void v54[3] = v7;
      uint64_t v57 = ~v47;
      uint64_t v59 = *(void *)(v8 + 72);
      v54[1] = a1;
      uint64_t v48 = v67;
      sub_1003F5FC8(*(void *)(v61 + 48) + v59 * a2, v67, type metadata accessor for SenderKeyInfo);
      __asm { BR              X10 }
    }
  }

void sub_100473F08(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v4 = v3;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100471860(v9);
  }

  else
  {
    if (v8 > v7)
    {
      sub_10047445C();
      goto LABEL_14;
    }

    sub_100474AA8(v9);
  }

  uint64_t v10 = *v3;
  Swift::Int v11 = NSObject._rawHashValue(seed:)(*(void *)(*v3 + 40));
  uint64_t v12 = -1LL << *(_BYTE *)(v10 + 32);
  a2 = v11 & ~v12;
  if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v13 = sub_10041D3C4(0LL, &qword_1009BAC10, &OBJC_CLASS___IDSDestination_ptr);
    id v14 = *(id *)(*(void *)(v10 + 48) + 8 * a2);
    char v15 = static NSObject.== infix(_:_:)(v14, a1);

    if ((v15 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v13);
      __break(1u);
    }

    else
    {
      uint64_t v16 = ~v12;
      while (1)
      {
        a2 = (a2 + 1) & v16;
        if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
          break;
        }
        id v17 = *(id *)(*(void *)(v10 + 48) + 8 * a2);
        char v18 = static NSObject.== infix(_:_:)(v17, a1);

        if ((v18 & 1) != 0) {
          goto LABEL_13;
        }
      }
    }
  }

void *sub_10047408C()
{
  uint64_t v1 = v0;
  sub_1003F5CB4(&qword_1009BC9D0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release(v2);
    uint64_t *v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v18 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }

void *sub_10047423C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(type metadata accessor for SenderKeyInfo(0LL) - 8);
  __chkstk_darwin(v3, v4);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1003F5CB4(&qword_1009BB118);
  uint64_t v7 = *v0;
  uint64_t v8 = static _SetStorage.copy(original:)(*v0);
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
    uint64_t result = (void *)swift_release(v7);
LABEL_30:
    uint64_t *v1 = v9;
    return result;
  }

  __n128 v26 = v1;
  uint64_t result = (void *)(v8 + 56);
  uint64_t v11 = v7 + 56;
  unint64_t v12 = (unint64_t)((1LL << *(_BYTE *)(v9 + 32)) + 63) >> 6;
  int64_t v14 = 0LL;
  *(void *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v7 + 16);
  uint64_t v15 = 1LL << *(_BYTE *)(v7 + 32);
  uint64_t v16 = -1LL;
  if (v15 < 64) {
    uint64_t v16 = ~(-1LL << v15);
  }
  unint64_t v17 = v16 & *(void *)(v7 + 56);
  int64_t v18 = (unint64_t)(v15 + 63) >> 6;
  while (1)
  {
    if (v17)
    {
      unint64_t v19 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v20 = v19 | (v14 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
      __break(1u);
      goto LABEL_32;
    }

    if (v22 >= v18) {
      goto LABEL_28;
    }
    unint64_t v23 = *(void *)(v11 + 8 * v22);
    ++v14;
    if (!v23)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v18) {
        goto LABEL_28;
      }
      unint64_t v23 = *(void *)(v11 + 8 * v14);
      if (!v23)
      {
        int64_t v14 = v22 + 2;
        if (v22 + 2 >= v18) {
          goto LABEL_28;
        }
        unint64_t v23 = *(void *)(v11 + 8 * v14);
        if (!v23) {
          break;
        }
      }
    }

id sub_10047445C()
{
  uint64_t v1 = v0;
  sub_1003F5CB4(&qword_1009BB130);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (id)swift_release(v2);
    uint64_t *v1 = v4;
    return result;
  }

  id result = (id)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v18 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }

Swift::Int sub_100474604(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_1003F5CB4(&qword_1009BC9D0);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    Swift::Int result = swift_release(v3);
LABEL_38:
    uint64_t *v2 = v6;
    return result;
  }

  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v8 = v3 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1LL << v7);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v3 + 56);
  unint64_t v31 = v2;
  int64_t v32 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = v5 + 56;
  Swift::Int result = swift_retain(v3);
  int64_t v13 = 0LL;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v13 << 6);
      goto LABEL_27;
    }

    int64_t v18 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v18 >= v32) {
      goto LABEL_36;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v18);
    ++v13;
    if (!v19)
    {
      int64_t v13 = v18 + 1;
      if (v18 + 1 >= v32) {
        goto LABEL_36;
      }
      unint64_t v19 = *(void *)(v8 + 8 * v13);
      if (!v19)
      {
        int64_t v13 = v18 + 2;
        if (v18 + 2 >= v32) {
          goto LABEL_36;
        }
        unint64_t v19 = *(void *)(v8 + 8 * v13);
        if (!v19) {
          break;
        }
      }
    }

uint64_t sub_1004748B4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(type metadata accessor for SenderKeyInfo(0LL) - 8);
  __chkstk_darwin(v5, v6);
  uint64_t v8 = (uint64_t *)((char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v9 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_1003F5CB4(&qword_1009BB118);
  uint64_t v10 = static _SetStorage.resize(original:capacity:move:)(v9, a1, 0LL);
  if (!*(void *)(v9 + 16))
  {
    uint64_t result = swift_release(v9);
LABEL_26:
    uint64_t *v2 = v10;
    return result;
  }

  uint64_t v11 = 1LL << *(_BYTE *)(v9 + 32);
  uint64_t v12 = v9 + 56;
  uint64_t v13 = -1LL;
  if (v11 < 64) {
    uint64_t v13 = ~(-1LL << v11);
  }
  unint64_t v14 = v13 & *(void *)(v9 + 56);
  int64_t v15 = (unint64_t)(v11 + 63) >> 6;
  uint64_t result = swift_retain(v9);
  int64_t v17 = 0LL;
  while (1)
  {
    if (v14)
    {
      unint64_t v18 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v19 = v18 | (v17 << 6);
      goto LABEL_8;
    }

    int64_t v20 = v17 + 1;
    if (__OFADD__(v17, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v20 >= v15) {
      goto LABEL_24;
    }
    unint64_t v21 = *(void *)(v12 + 8 * v20);
    ++v17;
    if (!v21)
    {
      int64_t v17 = v20 + 1;
      if (v20 + 1 >= v15) {
        goto LABEL_24;
      }
      unint64_t v21 = *(void *)(v12 + 8 * v17);
      if (!v21)
      {
        int64_t v17 = v20 + 2;
        if (v20 + 2 >= v15) {
          goto LABEL_24;
        }
        unint64_t v21 = *(void *)(v12 + 8 * v17);
        if (!v21) {
          break;
        }
      }
    }

Swift::Int sub_100474AA8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_1003F5CB4(&qword_1009BB130);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    Swift::Int result = swift_release(v3);
LABEL_38:
    uint64_t *v2 = v6;
    return result;
  }

  uint64_t v30 = v2;
  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v8 = v3 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1LL << v7);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v3 + 56);
  int64_t v11 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v12 = v5 + 56;
  Swift::Int result = swift_retain(v3);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v14 << 6);
      goto LABEL_27;
    }

    int64_t v18 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v18 >= v11) {
      goto LABEL_36;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v18);
    ++v14;
    if (!v19)
    {
      int64_t v14 = v18 + 1;
      if (v18 + 1 >= v11) {
        goto LABEL_36;
      }
      unint64_t v19 = *(void *)(v8 + 8 * v14);
      if (!v19)
      {
        int64_t v14 = v18 + 2;
        if (v18 + 2 >= v11) {
          goto LABEL_36;
        }
        unint64_t v19 = *(void *)(v8 + 8 * v14);
        if (!v19) {
          break;
        }
      }
    }

void sub_100474D20(uint64_t a1)
{
  if (!*(void *)(*(void *)v1 + 16LL)) {
    return;
  }
  uint64_t v3 = a1 + 56;
  uint64_t v4 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v5 = -1LL;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t v8 = 0LL;
  while (1)
  {
    if (v6)
    {
      unint64_t v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_6;
    }

    int64_t v14 = v8 + 1;
    if (__OFADD__(v8, 1LL))
    {
      __break(1u);
      goto LABEL_27;
    }

    if (v14 >= v7) {
      goto LABEL_24;
    }
    unint64_t v15 = *(void *)(v3 + 8 * v14);
    ++v8;
    if (!v15)
    {
      int64_t v8 = v14 + 1;
      if (v14 + 1 >= v7) {
        goto LABEL_24;
      }
      unint64_t v15 = *(void *)(v3 + 8 * v8);
      if (!v15)
      {
        int64_t v8 = v14 + 2;
        if (v14 + 2 >= v7) {
          goto LABEL_24;
        }
        unint64_t v15 = *(void *)(v3 + 8 * v8);
        if (!v15)
        {
          int64_t v8 = v14 + 3;
          if (v14 + 3 >= v7) {
            goto LABEL_24;
          }
          unint64_t v15 = *(void *)(v3 + 8 * v8);
          if (!v15) {
            break;
          }
        }
      }
    }

void *sub_100474EC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (!*(void *)(a2 + 16))
  {
    swift_release(a2);
    return &_swiftEmptySetSingleton;
  }

  uint64_t v20 = a1 + 56;
  uint64_t v3 = -1LL << *(_BYTE *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1LL << -(char)v3);
  }
  else {
    uint64_t v4 = -1LL;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 56);
  int64_t v19 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = a2 + 56;
  swift_bridgeObjectRetain(a1);
  int64_t v8 = 0LL;
  uint64_t v21 = v7;
  while (1)
  {
    if (v5)
    {
      uint64_t v22 = (v5 - 1) & v5;
      int64_t v23 = v8;
      unint64_t v9 = __clz(__rbit64(v5)) | (v8 << 6);
      goto LABEL_25;
    }

    int64_t v10 = v8 + 1;
    if (__OFADD__(v8, 1LL))
    {
      __break(1u);
      JUMPOUT(0x100475BC0LL);
    }

    if (v10 >= v19) {
      goto LABEL_28;
    }
    unint64_t v11 = *(void *)(v20 + 8 * v10);
    int64_t v12 = v8 + 1;
    if (!v11)
    {
      int64_t v12 = v8 + 2;
      if (v8 + 2 >= v19) {
        goto LABEL_28;
      }
      unint64_t v11 = *(void *)(v20 + 8 * v12);
      if (!v11)
      {
        int64_t v12 = v8 + 3;
        if (v8 + 3 >= v19) {
          goto LABEL_28;
        }
        unint64_t v11 = *(void *)(v20 + 8 * v12);
        if (!v11)
        {
          int64_t v12 = v8 + 4;
          if (v8 + 4 >= v19) {
            goto LABEL_28;
          }
          unint64_t v11 = *(void *)(v20 + 8 * v12);
          if (!v11) {
            break;
          }
        }
      }
    }

double sub_100475CAC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6 = *v3;
  Hasher.init(_seed:)(&__s1, *(void *)(*v3 + 40));
  swift_bridgeObjectRetain(v6);
  Data.hash(into:)(&__s1, a1, a2);
  unint64_t v7 = Hasher._finalize()() & ~(-1LL << *(_BYTE *)(v6 + 32));
  if (((*(void *)(v6 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v7) & 1) != 0) {
    __asm { BR              X8 }
  }

  swift_bridgeObjectRelease(v6);
  double result = 0.0;
  *a3 = xmmword_1007190F0;
  return result;
}

Swift::Int sub_1004766E0(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v6 = *(void *)(a3 + 16);
  *(unint64_t *)((char *)a1 + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << a4) - 1;
  uint64_t v25 = a3 + 56;
  unint64_t v24 = a5;
  uint64_t v22 = v6 - 1;
  while (1)
  {
    int64_t v8 = a5[3];
    unint64_t v7 = a5[4];
    if (v7)
    {
      uint64_t v9 = (v7 - 1) & v7;
      unint64_t v10 = __clz(__rbit64(v7)) | (v8 << 6);
      goto LABEL_21;
    }

    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1LL))
    {
      __break(1u);
      JUMPOUT(0x1004771B4LL);
    }

    int64_t v12 = (unint64_t)(a5[2] + 64LL) >> 6;
    if (v11 >= v12)
    {
      int64_t v11 = a5[3];
      goto LABEL_24;
    }

    uint64_t v13 = a5[1];
    unint64_t v14 = *(void *)(v13 + 8 * v11);
    if (!v14) {
      break;
    }
LABEL_20:
    uint64_t v9 = (v14 - 1) & v14;
    unint64_t v10 = __clz(__rbit64(v14)) + (v11 << 6);
    int64_t v8 = v11;
LABEL_21:
    uint64_t v16 = (uint64_t *)(*(void *)(*a5 + 48LL) + 16 * v10);
    uint64_t v18 = *v16;
    unint64_t v17 = v16[1];
    a5[3] = v8;
    a5[4] = v9;
    Hasher.init(_seed:)(__s1, *(void *)(a3 + 40));
    sub_1004028CC(v18, v17);
    Data.hash(into:)(__s1, v18, v17);
    unint64_t v19 = Hasher._finalize()() & ~(-1LL << *(_BYTE *)(a3 + 32));
    if (((*(void *)(v25 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v19) & 1) != 0) {
      __asm { BR              X8 }
    }

    sub_100402A84(v18, v17);
    a5 = v24;
  }

  if (v8 + 2 >= v12) {
    goto LABEL_24;
  }
  unint64_t v14 = *(void *)(v13 + 8 * (v8 + 2));
  if (v14)
  {
    int64_t v11 = v8 + 2;
    goto LABEL_20;
  }

  if (v8 + 3 >= v12)
  {
    int64_t v11 = v8 + 2;
    goto LABEL_24;
  }

  unint64_t v14 = *(void *)(v13 + 8 * (v8 + 3));
  if (v14)
  {
    int64_t v11 = v8 + 3;
    goto LABEL_20;
  }

  int64_t v11 = v8 + 4;
  if (v8 + 4 >= v12)
  {
    int64_t v11 = v8 + 3;
    goto LABEL_24;
  }

  unint64_t v14 = *(void *)(v13 + 8 * v11);
  if (v14) {
    goto LABEL_20;
  }
  int64_t v11 = v12 - 1;
  int64_t v15 = v8 + 5;
  while (v12 != v15)
  {
    unint64_t v14 = *(void *)(v13 + 8 * v15++);
    if (v14)
    {
      int64_t v11 = v15 - 1;
      goto LABEL_20;
    }
  }

Swift::Int sub_10047726C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    int64_t v8 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release(v4);
    return (Swift::Int)v8;
  }

  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_1003F5CB4(&qword_1009BC9D0);
  Swift::Int result = static _SetStorage.allocate(capacity:)(v5);
  int64_t v8 = (void *)result;
  uint64_t v30 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0LL;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0LL;
  Swift::Int v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }

    uint64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1LL)) {
      goto LABEL_39;
    }
    if (v14 >= v30) {
      goto LABEL_36;
    }
    unint64_t v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      uint64_t v10 = v14 + 1;
      if (v14 + 1 >= v30) {
        goto LABEL_36;
      }
      unint64_t v15 = a1[v10];
      if (!v15)
      {
        uint64_t v10 = v14 + 2;
        if (v14 + 2 >= v30) {
          goto LABEL_36;
        }
        unint64_t v15 = a1[v10];
        if (!v15) {
          break;
        }
      }
    }

unint64_t sub_100477504(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56LL;
  uint64_t v5 = -1LL << *(_BYTE *)(*v1 + 32LL);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain(*v1);
    uint64_t v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        uint64_t v10 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v6);
        uint64_t v11 = *v10;
        unint64_t v12 = v10[1];
        Hasher.init(_seed:)(v21, *(void *)(v3 + 40));
        sub_1004028CC(v11, v12);
        Data.hash(into:)(v21, v11, v12);
        Swift::Int v13 = Hasher._finalize()();
        sub_100402A84(v11, v12);
        unint64_t v14 = v13 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v14 < v9) {
            goto LABEL_5;
          }
        }

        else if (v14 >= v9)
        {
          goto LABEL_11;
        }

        if (v2 >= (uint64_t)v14)
        {
LABEL_11:
          uint64_t v15 = *(void *)(v3 + 48);
          uint64_t v16 = (_OWORD *)(v15 + 16 * v2);
          unint64_t v17 = (_OWORD *)(v15 + 16 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v16 >= v17 + 1))
          {
            *uint64_t v16 = *v17;
            int64_t v2 = v6;
          }
        }

uint64_t sub_1004776D8(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0) {
      uint64_t v16 = a3;
    }
    else {
      uint64_t v16 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7) {
      return a3;
    }
  }

  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v7) {
      return a3;
    }
  }

  if (!a1) {
    goto LABEL_25;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8LL;
  if (v6)
  {
    if (a3 < 0) {
      uint64_t v10 = a3;
    }
    else {
      uint64_t v10 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_10047E23C(&qword_1009BB168, &qword_1009BB160, (uint64_t)&protocol conformance descriptor for [A]);
        swift_bridgeObjectRetain(a3);
        for (unint64_t i = 0LL; i != v7; ++i)
        {
          sub_1003F5CB4(&qword_1009BB160);
          Swift::Int v13 = sub_100477B68(v18, i, a3);
          id v15 = *v14;
          ((void (*)(void (**)(id *), void))v13)(v18, 0LL);
          *(void *)(a1 + 8 * i) = v15;
        }

        swift_bridgeObjectRelease(a3);
        return a3;
      }

      goto LABEL_24;
    }

uint64_t sub_1004778F4(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0) {
      uint64_t v16 = a3;
    }
    else {
      uint64_t v16 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7) {
      return a3;
    }
  }

  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v7) {
      return a3;
    }
  }

  if (!a1) {
    goto LABEL_25;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8LL;
  if (v6)
  {
    if (a3 < 0) {
      uint64_t v10 = a3;
    }
    else {
      uint64_t v10 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_10047E23C(&qword_1009BB138, (uint64_t *)&unk_1009BC2C0, (uint64_t)&protocol conformance descriptor for [A]);
        swift_bridgeObjectRetain(a3);
        for (unint64_t i = 0LL; i != v7; ++i)
        {
          sub_1003F5CB4((uint64_t *)&unk_1009BC2C0);
          Swift::Int v13 = sub_100477B10(v18, i, a3);
          id v15 = *v14;
          ((void (*)(void (**)(id *), void))v13)(v18, 0LL);
          *(void *)(a1 + 8 * i) = v15;
        }

        swift_bridgeObjectRelease(a3);
        return a3;
      }

      goto LABEL_24;
    }

void (*sub_100477B10(void (**a1)(id *a1), unint64_t a2, uint64_t a3))(void *)
{
  unint64_t v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_100477BE8(v6, a2, a3);
  return sub_100477B64;
}

void (*sub_100477B68(void (**a1)(id *), unint64_t a2, uint64_t a3))(void *)
{
  unint64_t v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_100477C5C(v6, a2, a3);
  return sub_100477B64;
}

void sub_100477BBC(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32LL))(*a1);
  free(v1);
}

void (*sub_100477BE8(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  uint64_t v3 = result;
  if ((a3 & 0xC000000000000001LL) != 0)
  {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }

  if ((a2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else if (*(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)uint64_t v3 = v4;
    return sub_100477C54;
  }

  __break(1u);
  return result;
}

void sub_100477C54(id *a1)
{
}

void (*sub_100477C5C(void (*result)(id *), unint64_t a2, uint64_t a3))(id *)
{
  uint64_t v3 = result;
  if ((a3 & 0xC000000000000001LL) != 0)
  {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, a3);
    goto LABEL_5;
  }

  if ((a2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else if (*(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)uint64_t v3 = v4;
    return sub_10047E304;
  }

  __break(1u);
  return result;
}

uint64_t sub_100477CC8()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100477CEC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(type metadata accessor for SenderKeyInfo(0LL) - 8);
  __chkstk_darwin(v9, v10);
  unint64_t v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = __chkstk_darwin(v13, v14);
  unint64_t v17 = (char *)&v33 - v16;
  uint64_t v38 = a4;
  uint64_t v20 = *(void *)(a4 + 56);
  uint64_t v19 = a4 + 56;
  uint64_t v18 = v20;
  uint64_t v37 = v19;
  uint64_t v21 = -1LL << *(_BYTE *)(v19 - 24);
  if (-v21 < 64) {
    uint64_t v22 = ~(-1LL << -(char)v21);
  }
  else {
    uint64_t v22 = -1LL;
  }
  unint64_t v23 = v22 & v18;
  if (!a2)
  {
    int64_t v24 = 0LL;
    a3 = 0LL;
LABEL_38:
    uint64_t v32 = v37;
    *a1 = v38;
    a1[1] = v32;
    a1[2] = ~v21;
    a1[3] = v24;
    a1[4] = v23;
    return a3;
  }

  if (!a3)
  {
    int64_t v24 = 0LL;
    goto LABEL_38;
  }

  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  uint64_t v34 = -1LL << *(_BYTE *)(v19 - 24);
  uint64_t v35 = a1;
  int64_t v24 = 0LL;
  uint64_t v25 = 0LL;
  int64_t v36 = (unint64_t)(63 - v21) >> 6;
  int64_t v33 = v36 - 1;
  if (!v23) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v26 = __clz(__rbit64(v23));
  v23 &= v23 - 1;
  unint64_t v27 = v26 | (v24 << 6);
  while (1)
  {
    ++v25;
    uint64_t v31 = *(void *)(v8 + 72);
    sub_1003F5FC8(*(void *)(v38 + 48) + v31 * v27, (uint64_t)v12, type metadata accessor for SenderKeyInfo);
    sub_1003F600C((uint64_t)v12, (uint64_t)v17, type metadata accessor for SenderKeyInfo);
    uint64_t result = sub_1003F600C((uint64_t)v17, a2, type metadata accessor for SenderKeyInfo);
    if (v25 == a3) {
      goto LABEL_37;
    }
    a2 += v31;
    if (v23) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v28 = v24 + 1;
    if (__OFADD__(v24, 1LL))
    {
      __break(1u);
      goto LABEL_40;
    }

    if (v28 >= v36) {
      goto LABEL_32;
    }
    unint64_t v29 = *(void *)(v37 + 8 * v28);
    if (!v29) {
      break;
    }
LABEL_18:
    unint64_t v23 = (v29 - 1) & v29;
    unint64_t v27 = __clz(__rbit64(v29)) + (v28 << 6);
    int64_t v24 = v28;
  }

  v24 += 2LL;
  if (v28 + 1 >= v36)
  {
    unint64_t v23 = 0LL;
    int64_t v24 = v28;
    goto LABEL_36;
  }

  unint64_t v29 = *(void *)(v37 + 8 * v24);
  if (v29) {
    goto LABEL_14;
  }
  int64_t v30 = v28 + 2;
  if (v28 + 2 >= v36) {
    goto LABEL_32;
  }
  unint64_t v29 = *(void *)(v37 + 8 * v30);
  if (v29) {
    goto LABEL_17;
  }
  int64_t v24 = v28 + 3;
  if (v28 + 3 >= v36)
  {
    unint64_t v23 = 0LL;
    int64_t v24 = v28 + 2;
    goto LABEL_36;
  }

  unint64_t v29 = *(void *)(v37 + 8 * v24);
  if (v29)
  {
LABEL_14:
    int64_t v28 = v24;
    goto LABEL_18;
  }

  int64_t v30 = v28 + 4;
  if (v28 + 4 >= v36)
  {
LABEL_32:
    unint64_t v23 = 0LL;
LABEL_36:
    a3 = v25;
LABEL_37:
    uint64_t v21 = v34;
    a1 = v35;
    goto LABEL_38;
  }

  unint64_t v29 = *(void *)(v37 + 8 * v30);
  if (v29)
  {
LABEL_17:
    int64_t v28 = v30;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v28 = v30 + 1;
    if (__OFADD__(v30, 1LL)) {
      break;
    }
    if (v28 >= v36)
    {
      unint64_t v23 = 0LL;
      int64_t v24 = v33;
      goto LABEL_36;
    }

    unint64_t v29 = *(void *)(v37 + 8 * v28);
    ++v30;
    if (v29) {
      goto LABEL_18;
    }
  }

uint64_t sub_100477FA8(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1LL << -(char)v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0LL;
    uint64_t v10 = 0LL;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }

  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0LL;
    goto LABEL_38;
  }

  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  uint64_t v11 = a2;
  int64_t v12 = 0LL;
  uint64_t v13 = 0LL;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *uint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v21);
      goto LABEL_38;
    }

    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain(v21);
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }

  v12 += 2LL;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0LL;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }

  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0LL;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }

  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0LL;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }

    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }

uint64_t *sub_1004781A4(uint64_t *result, uint64_t **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = a2;
  int64_t v33 = result;
  if ((a4 & 0xC000000000000001LL) != 0)
  {
    if (a4 < 0) {
      uint64_t v7 = a4;
    }
    else {
      uint64_t v7 = a4 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v8 = __CocoaSet.makeIterator()(v7);
    uint64_t v9 = sub_10041D3C4(0LL, (unint64_t *)&unk_1009BC270, &OBJC_CLASS___IDSURI_ptr);
    uint64_t v10 = sub_100438928( (unint64_t *)&unk_1009BAC00,  (unint64_t *)&unk_1009BC270,  &OBJC_CLASS___IDSURI_ptr);
    uint64_t result = Set.Iterator.init(_cocoa:)(v37, v8, v9, v10);
    uint64_t v4 = v37[0];
    uint64_t v11 = v37[1];
    uint64_t v12 = v37[2];
    int64_t v13 = v37[3];
    unint64_t v14 = v37[4];
    if (v6) {
      goto LABEL_6;
    }
LABEL_39:
    uint64_t v15 = 0LL;
    goto LABEL_41;
  }

  int64_t v13 = 0LL;
  uint64_t v28 = -1LL << *(_BYTE *)(a4 + 32);
  uint64_t v11 = a4 + 56;
  uint64_t v12 = ~v28;
  uint64_t v29 = -v28;
  if (v29 < 64) {
    uint64_t v30 = ~(-1LL << v29);
  }
  else {
    uint64_t v30 = -1LL;
  }
  unint64_t v14 = v30 & *(void *)(a4 + 56);
  if (!a2) {
    goto LABEL_39;
  }
LABEL_6:
  if (!a3)
  {
    uint64_t v15 = 0LL;
LABEL_41:
    uint64_t v31 = v33;
LABEL_44:
    *uint64_t v31 = v4;
    v31[1] = v11;
    v31[2] = v12;
    v31[3] = v13;
    v31[4] = v14;
    return (uint64_t *)v15;
  }

  if (a3 < 0) {
    goto LABEL_51;
  }
  uint64_t v15 = 0LL;
  int64_t v34 = (unint64_t)(v12 + 64) >> 6;
  uint64_t v32 = v12;
  while (1)
  {
    if (v4 < 0)
    {
      uint64_t v22 = __CocoaSet.Iterator.next()(result);
      if (!v22) {
        goto LABEL_43;
      }
      uint64_t v23 = v22;
      uint64_t v35 = v22;
      uint64_t v24 = sub_10041D3C4(0LL, (unint64_t *)&unk_1009BC270, &OBJC_CLASS___IDSURI_ptr);
      swift_unknownObjectRetain(v23, v25);
      swift_dynamicCast(&v36, &v35, (char *)&type metadata for Swift.AnyObject + 8, v24, 7LL);
      unint64_t v18 = v36;
      uint64_t result = (uint64_t *)swift_unknownObjectRelease(v23, v26);
      if (!v18) {
        goto LABEL_43;
      }
      goto LABEL_11;
    }

    if (v14)
    {
      unint64_t v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v17 = v16 | (v13 << 6);
      goto LABEL_10;
    }

    int64_t v19 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      break;
    }
    if (v19 >= v34)
    {
      unint64_t v14 = 0LL;
      goto LABEL_43;
    }

    unint64_t v20 = *(void *)(v11 + 8 * v19);
    if (v20) {
      goto LABEL_26;
    }
    int64_t v21 = v13 + 2;
    if (v13 + 2 >= v34)
    {
      unint64_t v14 = 0LL;
      ++v13;
      goto LABEL_43;
    }

    unint64_t v20 = *(void *)(v11 + 8 * v21);
    if (!v20)
    {
      if (v13 + 3 >= v34) {
        goto LABEL_47;
      }
      unint64_t v20 = *(void *)(v11 + 8 * (v13 + 3));
      if (v20)
      {
        int64_t v19 = v13 + 3;
        goto LABEL_26;
      }

      int64_t v21 = v13 + 4;
      if (v13 + 4 >= v34)
      {
        unint64_t v14 = 0LL;
        v13 += 3LL;
        goto LABEL_43;
      }

      unint64_t v20 = *(void *)(v11 + 8 * v21);
      if (!v20)
      {
        int64_t v19 = v13 + 5;
        if (v13 + 5 >= v34)
        {
LABEL_47:
          unint64_t v14 = 0LL;
          int64_t v13 = v21;
          goto LABEL_43;
        }

        unint64_t v20 = *(void *)(v11 + 8 * v19);
        if (!v20)
        {
          int64_t v27 = v13 + 6;
          while (v34 != v27)
          {
            unint64_t v20 = *(void *)(v11 + 8 * v27++);
            if (v20)
            {
              int64_t v19 = v27 - 1;
              goto LABEL_26;
            }
          }

          unint64_t v14 = 0LL;
          int64_t v13 = v34 - 1;
          goto LABEL_43;
        }

        goto LABEL_26;
      }
    }

    int64_t v19 = v21;
LABEL_26:
    unint64_t v14 = (v20 - 1) & v20;
    unint64_t v17 = __clz(__rbit64(v20)) + (v19 << 6);
    int64_t v13 = v19;
LABEL_10:
    uint64_t result = (uint64_t *)*(id *)(*(void *)(v4 + 48) + 8 * v17);
    unint64_t v18 = result;
    if (!result) {
      goto LABEL_43;
    }
LABEL_11:
    ++v15;
    *v6++ = v18;
    if (v15 == a3)
    {
      uint64_t v15 = a3;
LABEL_43:
      uint64_t v12 = v32;
      uint64_t v31 = v33;
      goto LABEL_44;
    }
  }

  __break(1u);
LABEL_51:
  __break(1u);
  return result;
}

uint64_t sub_1004784AC(uint64_t a1, uint64_t a2)
{
  uint64_t v48 = type metadata accessor for SenderKeyInfo(0LL);
  __chkstk_darwin(v4, v5);
  uint64_t v7 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v47 - v10;
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)&v47 - v14;
  __chkstk_darwin(v16, v17);
  int64_t v19 = (char *)&v47 - v18;
  __chkstk_darwin(v20, v21);
  uint64_t v23 = (char *)&v47 - v22;
  __chkstk_darwin(v24, v25);
  int64_t v27 = (uint64_t *)((char *)&v47 - v26);
  sub_100410288(*(void *)(a1 + 16), *(void *)(a1 + 24));
  char v29 = v28;
  sub_1003F5FC8(a1, (uint64_t)v27, type metadata accessor for SenderKeyInfo);
  sub_1003F5FC8(a2, (uint64_t)v23, type metadata accessor for SenderKeyInfo);
  if ((v29 & 1) == 0)
  {
    sub_1003F6050((uint64_t)v27, type metadata accessor for SenderKeyInfo);
    sub_1003F6050((uint64_t)v23, type metadata accessor for SenderKeyInfo);
    sub_1003F5FC8(a1, (uint64_t)v19, type metadata accessor for SenderKeyInfo);
    sub_1003F5FC8(a2, (uint64_t)v15, type metadata accessor for SenderKeyInfo);
    goto LABEL_15;
  }

  sub_100410288(*v27, v27[1]);
  char v31 = v30;
  sub_1003F6050((uint64_t)v27, type metadata accessor for SenderKeyInfo);
  sub_1003F6050((uint64_t)v23, type metadata accessor for SenderKeyInfo);
  sub_1003F5FC8(a1, (uint64_t)v19, type metadata accessor for SenderKeyInfo);
  sub_1003F5FC8(a2, (uint64_t)v15, type metadata accessor for SenderKeyInfo);
  if ((v31 & 1) == 0)
  {
LABEL_15:
    sub_1003F6050((uint64_t)v15, type metadata accessor for SenderKeyInfo);
    sub_1003F6050((uint64_t)v19, type metadata accessor for SenderKeyInfo);
    sub_1003F5FC8(a1, (uint64_t)v11, type metadata accessor for SenderKeyInfo);
    sub_1003F5FC8(a2, (uint64_t)v7, type metadata accessor for SenderKeyInfo);
    goto LABEL_16;
  }

  uint64_t v32 = v48;
  char v33 = static Date.== infix(_:_:)(&v19[*(int *)(v48 + 24)], &v15[*(int *)(v48 + 24)]);
  sub_1003F6050((uint64_t)v15, type metadata accessor for SenderKeyInfo);
  sub_1003F6050((uint64_t)v19, type metadata accessor for SenderKeyInfo);
  sub_1003F5FC8(a1, (uint64_t)v11, type metadata accessor for SenderKeyInfo);
  sub_1003F5FC8(a2, (uint64_t)v7, type metadata accessor for SenderKeyInfo);
  if ((v33 & 1) == 0)
  {
LABEL_16:
    char v44 = 0;
    goto LABEL_17;
  }

  uint64_t v34 = *(int *)(v32 + 28);
  uint64_t v35 = *(void *)&v11[v34];
  uint64_t v36 = *(void *)&v11[v34 + 8];
  uint64_t v37 = *(void *)&v11[v34 + 16];
  uint64_t v38 = *(void *)&v11[v34 + 24];
  uint64_t v39 = &v7[v34];
  uint64_t v40 = *((void *)v39 + 1);
  uint64_t v41 = *((void *)v39 + 2);
  uint64_t v42 = *((void *)v39 + 3);
  BOOL v43 = v35 == *(void *)v39 && v36 == v40;
  if (v43 || (char v44 = 0, (_stringCompareWithSmolCheck(_:_:expecting:)(v35, v36, *(void *)v39, v40, 0LL) & 1) != 0))
  {
    if (v37 == v41 && v38 == v42) {
      char v44 = 1;
    }
    else {
      char v44 = _stringCompareWithSmolCheck(_:_:expecting:)(v37, v38, v41, v42, 0LL);
    }
  }

uint64_t sub_1004787A8(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = [a1 prefixedURI];
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  uint64_t v10 = v9;

  id v11 = [a3 prefixedURI];
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  uint64_t v14 = v13;

  if (v8 == v12 && v10 == v14)
  {
    swift_bridgeObjectRelease_n(v10, 2LL);
  }

  else
  {
    char v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v10, v12, v14, 0LL);
    swift_bridgeObjectRelease(v10);
    swift_bridgeObjectRelease(v14);
    char v17 = 0;
    if ((v16 & 1) == 0) {
      return v17 & 1;
    }
  }

  id v18 = [a2 prefixedURI];
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  uint64_t v21 = v20;

  id v22 = [a4 prefixedURI];
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  uint64_t v25 = v24;

  if (v19 == v23 && v21 == v25)
  {
    char v17 = 1;
    uint64_t v25 = v21;
  }

  else
  {
    char v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v21, v23, v25, 0LL);
  }

  swift_bridgeObjectRelease(v21);
  swift_bridgeObjectRelease(v25);
  return v17 & 1;
}

double sub_100478920()
{
  id v0 = [(id)objc_opt_self(IDSServerBag) sharedInstance];
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 objectForKey:v1];

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v9, v2);
    swift_unknownObjectRelease(v2, v3);
  }

  else
  {
    memset(v9, 0, sizeof(v9));
  }

  sub_10041D378((uint64_t)v9, (uint64_t)v10, &qword_1009B92B8);
  if (!v11)
  {
    sub_10040A274((uint64_t)v10, &qword_1009B92B8);
    return 432000.0;
  }

  uint64_t v4 = sub_10041D3C4(0LL, (unint64_t *)&unk_1009BACA0, &OBJC_CLASS___NSNumber_ptr);
  id v5 = v8;
  id v6 = [v8 integerValue];

  double result = (double)(uint64_t)v6;
  return result;
}

id sub_100478A84(uint64_t a1)
{
  if (!((unint64_t)a1 >> 62))
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (v2) {
      goto LABEL_3;
    }
LABEL_24:
    swift_bridgeObjectRelease(a1);
    return &_swiftEmptyArrayStorage;
  }

uint64_t sub_100478C6C()
{
  swift_release(*(void *)(v0 + 24));
  swift_release(*(void *)(v0 + 32));
  swift_release(*(void *)(v0 + 48));
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_100478CA8( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, char a8, uint64_t a9)
{
  uint64_t v13 = a9;
  uint64_t v14 = v9[3];
  uint64_t v15 = v9[4];
  uint64_t v75 = (void (*)(__n128))v9[5];
  uint64_t v79 = (void *)v9[2];
  id v16 = a1;
  swift_retain_n(v14, 2LL);
  id v17 = v16;
  id v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v19 = static os_log_type_t.default.getter();
  uint64_t v20 = v18;
  if (os_log_type_enabled(v18, v19))
  {
    os_log_type_t v72 = v19;
    uint64_t v73 = v15;
    char v77 = a8;
    uint64_t v21 = swift_slowAlloc(34LL, -1LL);
    id v22 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v74 = swift_slowAlloc(32LL, -1LL);
    v84[0] = v74;
    *(_DWORD *)uint64_t v21 = 136315906;
    swift_beginAccess(v14 + 16, v81, 0LL, 0LL);
    uint64_t v23 = *(void *)(v14 + 16);
    uint64_t v24 = sub_10041D3C4(0LL, (unint64_t *)&unk_1009BC270, &OBJC_CLASS___IDSURI_ptr);
    swift_bridgeObjectRetain(v23);
    uint64_t v26 = Array.description.getter(v25, v24);
    unint64_t v28 = v27;
    swift_bridgeObjectRelease(v23);
    uint64_t v82 = sub_1003FFBB0(v26, v28, v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v21 + 4, v21 + 12);
    swift_bridgeObjectRelease(v28);
    swift_release_n(v14, 2LL);
    *(_WORD *)(v21 + 1sub_10040A648(v1 + 2) = 2112;
    if (a1)
    {
      uint64_t v82 = (uint64_t)v17;
      id v29 = v17;
    }

    else
    {
      uint64_t v82 = 0LL;
    }

    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v21 + 14, v21 + 22);
    *id v22 = a1;

    *(_WORD *)(v21 + 2sub_10040A648(v1 + 2) = 1024;
    LODWORD(v8sub_10040A648(v1 + 2) = a6 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, (char *)&v82 + 4, v21 + 24, v21 + 28);
    *(_WORD *)(v21 + 28) = 1024;
    LODWORD(v8sub_10040A648(v1 + 2) = v77 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, (char *)&v82 + 4, v21 + 30, v21 + 34);
    _os_log_impl( (void *)&_mh_execute_header,  v20,  v72,  "Finished query for uris %s fromURI: %@ { success: %{BOOL}d offline: %{BOOL}d }",  (uint8_t *)v21,  0x22u);
    uint64_t v31 = sub_1003F5CB4(&qword_1009B92C8);
    swift_arrayDestroy(v22, 1LL, v31);
    swift_slowDealloc(v22, -1LL, -1LL);
    swift_arrayDestroy(v74, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v74, -1LL, -1LL);
    swift_slowDealloc(v21, -1LL, -1LL);

    uint64_t v13 = a9;
    char v30 = (uint64_t *)(v73 + 16);
    if (a9) {
      goto LABEL_8;
    }
LABEL_42:
    swift_beginAccess(v30, v84, 0LL, 0LL);
    uint64_t v68 = *v30;
    __n128 v69 = swift_bridgeObjectRetain(*v30);
    v75(v69);
    return swift_bridgeObjectRelease(v68);
  }

  swift_release_n(v14, 2LL);
  char v30 = (uint64_t *)(v15 + 16);
  if (!a9) {
    goto LABEL_42;
  }
LABEL_8:
  uint64_t v76 = v13 + 64;
  uint64_t v32 = 1LL << *(_BYTE *)(v13 + 32);
  uint64_t v33 = -1LL;
  if (v32 < 64) {
    uint64_t v33 = ~(-1LL << v32);
  }
  unint64_t v34 = v33 & *(void *)(v13 + 64);
  int64_t v78 = (unint64_t)(v32 + 63) >> 6;
  swift_bridgeObjectRetain(v13);
  for (int64_t i = 0LL; ; int64_t i = v80)
  {
    if (v34)
    {
      unint64_t v38 = __clz(__rbit64(v34));
      v34 &= v34 - 1;
      int64_t v80 = i;
      unint64_t v39 = v38 | (i << 6);
    }

    else
    {
      BOOL v40 = __OFADD__(i, 1LL);
      int64_t v41 = i + 1;
      if (v40) {
        goto LABEL_45;
      }
      if (v41 >= v78)
      {
LABEL_41:
        swift_release(v13);
        goto LABEL_42;
      }

      unint64_t v42 = *(void *)(v76 + 8 * v41);
      if (!v42)
      {
        int64_t v43 = v41 + 1;
        if (v41 + 1 >= v78) {
          goto LABEL_41;
        }
        unint64_t v42 = *(void *)(v76 + 8 * v43);
        if (!v42)
        {
          int64_t v43 = v41 + 2;
          if (v41 + 2 >= v78) {
            goto LABEL_41;
          }
          unint64_t v42 = *(void *)(v76 + 8 * v43);
          if (!v42)
          {
            int64_t v43 = v41 + 3;
            if (v41 + 3 >= v78) {
              goto LABEL_41;
            }
            unint64_t v42 = *(void *)(v76 + 8 * v43);
            if (!v42)
            {
              while (1)
              {
                int64_t v41 = v43 + 1;
                if (__OFADD__(v43, 1LL)) {
                  goto LABEL_46;
                }
                if (v41 >= v78) {
                  goto LABEL_41;
                }
                unint64_t v42 = *(void *)(v76 + 8 * v41);
                ++v43;
                if (v42) {
                  goto LABEL_25;
                }
              }
            }
          }
        }

        int64_t v41 = v43;
      }

uint64_t sub_1004792BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_10040A648(v1 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1004792CC(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1004792D4()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  swift_bridgeObjectRelease(*(void *)(v0 + 56));
  swift_release(*(void *)(v0 + 72));
  swift_bridgeObjectRelease(*(void *)(v0 + 80));
  return swift_deallocObject(v0, 89LL, 7LL);
}

uint64_t sub_100479328()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void **)(v0 + 16);
  id v17 = *(void **)(v1 + 24);
  uint64_t v3 = *(void **)(v1 + 40);
  uint64_t v19 = *(void *)(v1 + 32);
  uint64_t v5 = *(void *)(v1 + 48);
  uint64_t v4 = *(void *)(v1 + 56);
  uint64_t v7 = *(void *)(v1 + 64);
  uint64_t v6 = *(void *)(v1 + 72);
  uint64_t v8 = *(void *)(v1 + 80);
  char v9 = *(_BYTE *)(v1 + 88);
  uint64_t v18 = (*(uint64_t (**)(void))((swift_isaMask & *v2) + 0xC0LL))();
  uint64_t v11 = v10;
  uint64_t v12 = swift_allocObject(&unk_100906B00, 88LL, 7LL);
  *(void *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
  *(void *)(v12 + 24) = v6;
  *(void *)(v12 + 3sub_10040A648(v1 + 2) = v3;
  *(void *)(v12 + 40) = v2;
  *(void *)(v12 + 48) = v5;
  *(void *)(v12 + 56) = v4;
  *(void *)(v12 + 64) = v8;
  *(_BYTE *)(v12 + 7sub_10040A648(v1 + 2) = v9;
  *(void *)(v12 + 80) = v17;
  uint64_t v13 = *(void (**)(void *, uint64_t, id, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t (*)(), uint64_t))((swift_isaMask & *v2) + 0x1C8LL);
  swift_retain(v6);
  id v14 = v3;
  uint64_t v15 = v2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v8);
  v13(v17, v19, v14, v18, v11, v5, v4, sub_100479460, v12);
  swift_bridgeObjectRelease(v11);
  return swift_release(v12);
}

uint64_t sub_100479464()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100479488()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 64));
  swift_bridgeObjectRelease(*(void *)(v0 + 72));
  return swift_deallocObject(v0, 80LL, 7LL);
}

void sub_1004794D4(char a1, uint64_t a2)
{
}

uint64_t type metadata accessor for SenderKeyInfo(uint64_t a1)
{
  return sub_100402020(a1, (uint64_t *)&unk_1009C4E90, (uint64_t)&nominal type descriptor for SenderKeyInfo);
}

void *sub_10047951C(unint64_t a1, void *a2)
{
  uint64_t v3 = a1;
  if (a1 >> 62) {
    goto LABEL_22;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (v4)
  {
    while (1)
    {
      unint64_t v5 = 0LL;
      unint64_t v6 = v3 & 0xC000000000000001LL;
      uint64_t v30 = v3 & 0xFFFFFFFFFFFFFF8LL;
      uint64_t v28 = v4;
      uint64_t v29 = IDSRegistrationPropertySupportsSenderKey;
      uint64_t v26 = v3;
      unint64_t v27 = v3 & 0xC000000000000001LL;
      while (v6)
      {
        id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v3);
LABEL_9:
        uint64_t v8 = v7;
        unint64_t v9 = v5 + 1;
        if (__OFADD__(v5, 1LL)) {
          goto LABEL_21;
        }
        uint64_t v10 = (*(uint64_t (**)(void))((swift_isaMask & *a2) + 0xD8LL))();
        if (v11 >> 60 == 15)
        {
        }

        else
        {
          uint64_t v12 = v10;
          unint64_t v13 = v11;
          id v14 = [v8 capabilities];
          uint64_t v15 = (uint64_t)[v14 valueForCapability:v29];

          if (v15 < 1)
          {
            sub_10040AD00(v12, v13);
          }

          else
          {
            id v16 = [v8 pushToken];
            uint64_t v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v16);
            unint64_t v19 = v18;

            sub_100410288(v17, v19);
            LOBYTE(vswift_unknownObjectWeakDestroy(v0 + 16) = v20;
            sub_10040AD00(v12, v13);
            uint64_t v21 = sub_100402A84(v17, v19);
            if ((v16 & 1) != 0)
            {
            }

            else
            {
              specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v21);
              uint64_t v22 = _swiftEmptyArrayStorage[2];
              specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v22);
              uint64_t v23 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v22, v8);
              specialized ContiguousArray._endMutation()(v23);
            }

            uint64_t v3 = v26;
          }

          unint64_t v6 = v27;
          uint64_t v4 = v28;
        }

        ++v5;
        if (v9 == v4) {
          return _swiftEmptyArrayStorage;
        }
      }

      if (v5 < *(void *)(v30 + 16)) {
        break;
      }
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      if (v3 < 0) {
        uint64_t v25 = v3;
      }
      else {
        uint64_t v25 = v3 & 0xFFFFFFFFFFFFFF8LL;
      }
      uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v25);
      if (!v4) {
        return _swiftEmptyArrayStorage;
      }
    }

    id v7 = *(id *)(v3 + 8 * v5 + 32);
    goto LABEL_9;
  }

  return _swiftEmptyArrayStorage;
}

uint64_t sub_100479764(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

void *sub_100479854(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v5 = type metadata accessor for SenderKeyInfo(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = a1 + ((*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  uint64_t v8 = *(void *)(v6 + 72);
  uint64_t v24 = sub_10040A2B0( (unint64_t *)&unk_1009BACD0,  type metadata accessor for SenderKeyInfo,  (uint64_t)&unk_10071B544);
  uint64_t v21 = a1;
  uint64_t v9 = a1;
  uint64_t v10 = v8;
  __n128 v11 = swift_bridgeObjectRetain(v9);
  uint64_t v12 = _swiftEmptyArrayStorage;
  uint64_t v22 = v10;
  uint64_t v23 = v5;
  do
  {
    uint64_t v13 = dispatch thunk of JSONEncoder.encode<A>(_:)(v7, v5, v24, v11);
    if (v2)
    {
      swift_errorRelease(v2);
      uint64_t v2 = 0LL;
    }

    else
    {
      uint64_t v15 = v13;
      uint64_t v16 = v14;
      if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) == 0) {
        uint64_t v12 = sub_10046D170(0LL, v12[2] + 1LL, 1, v12);
      }
      unint64_t v18 = v12[2];
      unint64_t v17 = v12[3];
      if (v18 >= v17 >> 1) {
        uint64_t v12 = sub_10046D170((void *)(v17 > 1), v18 + 1, 1, v12);
      }
      v12[2] = v18 + 1;
      unint64_t v19 = &v12[2 * v18];
      v19[4] = v15;
      v19[5] = v16;
      uint64_t v10 = v22;
      uint64_t v5 = v23;
    }

    v7 += v10;
    --v3;
  }

  while (v3);
  swift_bridgeObjectRelease(v21);
  return v12;
}

uint64_t sub_1004799D4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  uint64_t v8 = *(void *)(type metadata accessor for SenderKeyInfo(0LL) - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(v8 + 72);
  unint64_t v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
  uint64_t v12 = v10 * v4;
  unint64_t v13 = a3 + v12;
  unint64_t v14 = v11 + v12;
  if (v11 >= v13 || v14 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v13;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100479AEC(uint64_t a1)
{
  uint64_t v5 = (uint64_t *)((char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t result = __chkstk_darwin(v6, v7);
  unint64_t v11 = (char *)&v15 - v10;
  uint64_t v12 = *(void *)(a1 + 16);
  if (v12)
  {
    uint64_t v13 = a1 + ((*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v14 = *(void *)(v9 + 72);
    do
    {
      sub_1003F5FC8(v13, (uint64_t)v5, type metadata accessor for SenderKeyInfo);
      sub_10046F660((uint64_t)v11, v5);
      uint64_t result = sub_1003F6050((uint64_t)v11, type metadata accessor for SenderKeyInfo);
      v13 += v14;
      --v12;
    }

    while (v12);
  }

  return result;
}

uint64_t type metadata accessor for SenderKeyAndState(uint64_t a1)
{
  return sub_100402020(a1, qword_1009C4EA0, (uint64_t)&nominal type descriptor for SenderKeyAndState);
}

uint64_t type metadata accessor for SenderKeyDistributionManager.SenderKeyURIMismatchMetric()
{
  return objc_opt_self(&OBJC_CLASS____TtCC17identityservicesd28SenderKeyDistributionManagerP33_E220278C37BF7A52CA212AA0DEF6BDED26SenderKeyURIMismatchMetric);
}

uint64_t sub_100479C00()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 24));
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_100479C3C()
{
  uint64_t v1 = (void *)v0[2];
  uint64_t v2 = v0[3];
  uint64_t v4 = (void *)v0[4];
  __n128 v3 = (void *)v0[5];
  uint64_t v5 = *(void *)(v2 + 16);
  if (v5)
  {
    uint64_t v28 = (void *)v0[4];
    swift_bridgeObjectRetain(v2);
    __n128 v6 = (void *)(v2 + 40);
    __n128 v7 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v9 = *(v6 - 1);
      uint64_t v10 = *v6;
      __n128 v11 = swift_bridgeObjectRetain(*v6);
      uint64_t v12 = Data.init(base64Encoded:options:)(v9, v10, 0LL, v11);
      unint64_t v14 = v13;
      swift_bridgeObjectRelease(v10);
      if (v14 >> 60 != 15)
      {
        if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0) {
          __n128 v7 = sub_10046D170(0LL, v7[2] + 1LL, 1, v7);
        }
        unint64_t v16 = v7[2];
        unint64_t v15 = v7[3];
        if (v16 >= v15 >> 1) {
          __n128 v7 = sub_10046D170((void *)(v15 > 1), v16 + 1, 1, v7);
        }
        v7[2] = v16 + 1;
        uint64_t v8 = &v7[2 * v16];
        v8[4] = v12;
        v8[5] = v14;
      }

      v6 += 2;
      --v5;
    }

    while (v5);
    swift_bridgeObjectRelease(v2);
    uint64_t v4 = v28;
  }

  else
  {
    __n128 v7 = _swiftEmptyArrayStorage;
  }

  (*(void (**)(void *, void *, void *))((swift_isaMask & *v1) + 0x230LL))(v7, v4, v3);
  swift_bridgeObjectRelease(v7);
  uint64_t v17 = sub_1003F5CB4((uint64_t *)&unk_1009BABF0);
  uint64_t v18 = swift_allocObject(v17, 40LL, 7LL);
  *(_OWORD *)(v18 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10071B0D0;
  *(void *)(v18 + 3sub_10040A648(v1 + 2) = v3;
  uint64_t v29 = v18;
  specialized Array._endMutation()(v18);
  uint64_t v19 = qword_1009C3F18;
  id v20 = v3;
  if (v19 != -1) {
    swift_once(&qword_1009C3F18, sub_10046CF80);
  }
  uint64_t v21 = qword_1009C76E0;
  uint64_t v22 = *(void *)algn_1009C76E8;
  uint64_t v23 = (void *)swift_allocObject(&unk_100906AD8, 40LL, 7LL);
  v23[2] = v1;
  v23[3] = v20;
  v23[4] = v4;
  uint64_t v24 = *(void (**)(uint64_t, void *, uint64_t, uint64_t, uint64_t, void *, void (*)(char), void *))((swift_isaMask & *v1) + 0x1D8LL);
  id v25 = v20;
  uint64_t v26 = v1;
  v24(v29, v4, v21, v22, 2LL, _swiftEmptyArrayStorage, sub_10047DCB0, v23);
  swift_bridgeObjectRelease(v29);
  return swift_release(v23);
}

uint64_t sub_100479E8C()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 40));
  swift_bridgeObjectRelease(*(void *)(v0 + 48));

  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t sub_100479EE0()
{
  uint64_t v1 = (void *)v0[3];
  uint64_t v2 = (void *)v0[4];
  uint64_t v3 = v0[5];
  uint64_t v5 = v0[6];
  uint64_t v4 = (void *)v0[7];
  __n128 v6 = (void *)v0[8];
  uint64_t v7 = v0[2] + 16LL;
  swift_beginAccess(v7, v59, 0LL, 0LL);
  uint64_t result = swift_unknownObjectWeakLoadStrong(v7);
  if (result)
  {
    uint64_t v9 = (void *)result;
    uint64_t v55 = v6;
    uint64_t v56 = v3;
    uint64_t v53 = v5;
    id v10 = v1;
    id v11 = v2;
    id v12 = v10;
    id v13 = v11;
    unint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
    os_log_type_t v15 = static os_log_type_t.default.getter();
    __n128 v54 = v4;
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = swift_slowAlloc(22LL, -1LL);
      uint64_t v17 = (void *)swift_slowAlloc(16LL, -1LL);
      *(_DWORD *)uint64_t v16 = 138412546;
      uint64_t v18 = v12;
      id v19 = v13;
      uint64_t v57 = (uint64_t)v18;
      id v20 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, v58, v16 + 4, v16 + 12);
      *uint64_t v17 = v18;

      *(_WORD *)(v16 + 1sub_10040A648(v1 + 2) = 2112;
      uint64_t v57 = (uint64_t)v13;
      id v21 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, v58, v16 + 14, v16 + 22);
      v17[1] = v19;

      id v13 = v19;
      id v12 = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  v15,  "Dispatching existing recovery work item for toURI: %@ fromURI: %@",  (uint8_t *)v16,  0x16u);
      uint64_t v22 = sub_1003F5CB4(&qword_1009B92C8);
      swift_arrayDestroy(v17, 2LL, v22);
      swift_slowDealloc(v17, -1LL, -1LL);
      swift_slowDealloc(v16, -1LL, -1LL);
    }

    else
    {
    }

    uint64_t v23 = *(void *)(v56 + 16);
    if (v23)
    {
      id v52 = v13;
      swift_bridgeObjectRetain(v56);
      id v25 = (void *)(v24 + 40);
      uint64_t v26 = _swiftEmptyArrayStorage;
      do
      {
        uint64_t v28 = *(v25 - 1);
        uint64_t v29 = *v25;
        __n128 v30 = swift_bridgeObjectRetain(*v25);
        uint64_t v31 = Data.init(base64Encoded:options:)(v28, v29, 0LL, v30);
        unint64_t v33 = v32;
        swift_bridgeObjectRelease(v29);
        if (v33 >> 60 != 15)
        {
          if ((swift_isUniquelyReferenced_nonNull_native(v26) & 1) == 0) {
            uint64_t v26 = sub_10046D170(0LL, v26[2] + 1LL, 1, v26);
          }
          unint64_t v35 = v26[2];
          unint64_t v34 = v26[3];
          if (v35 >= v34 >> 1) {
            uint64_t v26 = sub_10046D170((void *)(v34 > 1), v35 + 1, 1, v26);
          }
          v26[2] = v35 + 1;
          unint64_t v27 = &v26[2 * v35];
          v27[4] = v31;
          v27[5] = v33;
        }

        v25 += 2;
        --v23;
      }

      while (v23);
      swift_bridgeObjectRelease(v56);
      id v13 = v52;
    }

    else
    {
      uint64_t v26 = _swiftEmptyArrayStorage;
    }

    (*(void (**)(void *, id, id))((swift_isaMask & *v9) + 0x230LL))(v26, v13, v12);
    swift_bridgeObjectRelease(v26);
    uint64_t v36 = sub_1003F5CB4((uint64_t *)&unk_1009BABF0);
    uint64_t v37 = swift_allocObject(v36, 40LL, 7LL);
    *(_OWORD *)(v37 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10071B0D0;
    *(void *)(v37 + 3sub_10040A648(v1 + 2) = v12;
    uint64_t v57 = v37;
    specialized Array._endMutation()(v37);
    uint64_t v38 = v57;
    uint64_t v39 = qword_1009C3F18;
    id v40 = v12;
    if (v39 != -1) {
      swift_once(&qword_1009C3F18, sub_10046CF80);
    }
    uint64_t v41 = qword_1009C76E0;
    uint64_t v42 = *(void *)algn_1009C76E8;
    BOOL v43 = *(void *)(v53 + 16) != 0LL;
    uint64_t v44 = (void *)swift_allocObject(&unk_100906AB0, 40LL, 7LL);
    _DWORD v44[2] = v9;
    v44[3] = v40;
    v44[4] = v13;
    uint64_t v45 = *(void (**)(uint64_t, id, uint64_t, uint64_t, BOOL, uint64_t, void (*)(char), void *))((swift_isaMask & *v9) + 0x1D8LL);
    id v46 = v40;
    id v47 = v13;
    uint64_t v48 = v9;
    v45(v38, v47, v41, v42, v43, v53, sub_10047DCB0, v44);
    swift_bridgeObjectRelease(v38);
    swift_release(v44);
    swift_beginAccess((char *)v48 + OBJC_IVAR___IDSSenderKeyDistributionManager_recoveryWorkItems, &v57, 33LL, 0LL);
    id v49 = v54;
    id v50 = v55;
    uint64_t v51 = sub_10046DB8C(v49, v50);
    swift_endAccess(&v57);

    return swift_release(v51);
  }

  return result;
}

uint64_t sub_10047A368()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_10047A3AC()
{
  uint64_t v1 = (void *)v0[3];
  uint64_t v2 = (void *)v0[4];
  uint64_t v3 = (void *)v0[5];
  uint64_t v4 = (void *)v0[6];
  uint64_t v5 = v0[2] + 16LL;
  swift_beginAccess(v5, v34, 0LL, 0LL);
  uint64_t result = swift_unknownObjectWeakLoadStrong(v5);
  if (result)
  {
    uint64_t v7 = (void *)result;
    id v8 = v1;
    id v9 = v2;
    id v10 = v8;
    id v11 = v9;
    id v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = swift_slowAlloc(22LL, -1LL);
      os_log_type_t v15 = (void *)swift_slowAlloc(16LL, -1LL);
      *(_DWORD *)uint64_t v14 = 138412546;
      uint64_t v31 = v3;
      uint64_t v32 = (uint64_t)v10;
      __n128 v30 = v12;
      id v16 = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, v33, v14 + 4, v14 + 12);
      *os_log_type_t v15 = v10;

      *(_WORD *)(v14 + 1sub_10040A648(v1 + 2) = 2112;
      uint64_t v32 = (uint64_t)v11;
      id v17 = v11;
      id v12 = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, v33, v14 + 14, v14 + 22);
      v15[1] = v11;

      uint64_t v3 = v31;
      _os_log_impl( (void *)&_mh_execute_header,  v30,  v13,  "Dispatching existing device update work item for remoteURI: %@ localURI: %@",  (uint8_t *)v14,  0x16u);
      uint64_t v18 = sub_1003F5CB4(&qword_1009B92C8);
      swift_arrayDestroy(v15, 2LL, v18);
      swift_slowDealloc(v15, -1LL, -1LL);
      swift_slowDealloc(v14, -1LL, -1LL);
    }

    else
    {
    }

    uint64_t v19 = sub_1003F5CB4((uint64_t *)&unk_1009BABF0);
    uint64_t v20 = swift_allocObject(v19, 40LL, 7LL);
    *(_OWORD *)(v20 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_10071B0D0;
    *(void *)(v20 + 3sub_10040A648(v1 + 2) = v10;
    uint64_t v32 = v20;
    specialized Array._endMutation()(v20);
    uint64_t v21 = v32;
    uint64_t v22 = (void *)swift_allocObject(&unk_100906A88, 40LL, 7LL);
    void v22[2] = v7;
    v22[3] = v10;
    v22[4] = v11;
    uint64_t v23 = *(void (**)(uint64_t, id, unint64_t, unint64_t, void (*)(char), void *))((swift_isaMask & *v7) + 0x1D0LL);
    id v24 = v10;
    id v25 = v11;
    uint64_t v26 = v7;
    v23(v21, v25, 0xD000000000000012LL, 0x8000000100840C80LL, sub_10047DCA0, v22);
    swift_bridgeObjectRelease(v21);
    swift_release(v22);
    swift_beginAccess((char *)v26 + OBJC_IVAR___IDSSenderKeyDistributionManager_deviceUpdateWorkItems, &v32, 33LL, 0LL);
    id v27 = v3;
    id v28 = v4;
    uint64_t v29 = sub_10046DB8C(v27, v28);
    swift_endAccess(&v32);

    return swift_release(v29);
  }

  return result;
}

uint64_t sub_10047A6C4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_10047A7B4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = sub_10047DC58();
  uint64_t result = Set.init(minimumCapacity:)(v2, &type metadata for Data, v3);
  uint64_t v9 = result;
  if (v2)
  {
    unint64_t v5 = (unint64_t *)(a1 + 40);
    do
    {
      uint64_t v6 = *(v5 - 1);
      unint64_t v7 = *v5;
      sub_1004028CC(v6, *v5);
      sub_10046EC34(v8, v6, v7);
      sub_100402A84(v8[0], v8[1]);
      v5 += 2;
      --v2;
    }

    while (v2);
    return v9;
  }

  return result;
}

unint64_t sub_10047A84C()
{
  unint64_t result = qword_1009BAC80;
  if (!qword_1009BAC80)
  {
    unint64_t result = swift_getWitnessTable(&unk_10071B3D4, &type metadata for SenderKeyMessage);
    atomic_store(result, (unint64_t *)&qword_1009BAC80);
  }

  return result;
}

unint64_t sub_10047A890()
{
  unint64_t result = qword_1009BAC88;
  if (!qword_1009BAC88)
  {
    unint64_t result = swift_getWitnessTable(&unk_10071B3AC, &type metadata for SenderKeyMessage);
    atomic_store(result, (unint64_t *)&qword_1009BAC88);
  }

  return result;
}

uint64_t sub_10047A8D4()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

void sub_10047A904(char a1)
{
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = *(void **)(v1 + 32);
  swift_bridgeObjectRetain_n(v3, 2LL);
  id v17 = v4;
  unint64_t v5 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc(28LL, -1LL);
    id v8 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v9 = swift_slowAlloc(32LL, -1LL);
    uint64_t v19 = v9;
    *(_DWORD *)uint64_t v7 = 136315650;
    uint64_t v10 = sub_10041D3C4(0LL, (unint64_t *)&unk_1009BC270, &OBJC_CLASS___IDSURI_ptr);
    swift_bridgeObjectRetain(v3);
    uint64_t v12 = Array.description.getter(v11, v10);
    unint64_t v14 = v13;
    swift_bridgeObjectRelease(v3);
    uint64_t v18 = sub_1003FFBB0(v12, v14, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease_n(v3, 2LL);
    *(_WORD *)(v7 + 1sub_10040A648(v1 + 2) = 2112;
    uint64_t v18 = (uint64_t)v17;
    id v15 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v7 + 14, v7 + 22);
    *id v8 = v17;

    *(_WORD *)(v7 + 2sub_10040A648(v1 + 2) = 1024;
    LODWORD(v18) = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, (char *)&v18 + 4, v7 + 24, v7 + 28);
    _os_log_impl( (void *)&_mh_execute_header,  v5,  v6,  "Did roll and send new sender key to donated handle { URI: %s fromURI: %@} with success %{BOOL}d }",  (uint8_t *)v7,  0x1Cu);
    uint64_t v16 = sub_1003F5CB4(&qword_1009B92C8);
    swift_arrayDestroy(v8, 1LL, v16);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_arrayDestroy(v9, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v3, 2LL);
  }

uint64_t sub_10047ACE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1003F5CB4((uint64_t *)&unk_1009BAC60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10047AD2C()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 24));
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_10047AD60(char a1)
{
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = *(void **)(v1 + 32);
  swift_bridgeObjectRetain_n(v3, 2LL);
  id v18 = v4;
  unint64_t v5 = (os_log_s *)Logger.logObject.getter(v18);
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc(28LL, -1LL);
    id v8 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v17 = swift_slowAlloc(32LL, -1LL);
    uint64_t v20 = v17;
    *(_DWORD *)uint64_t v7 = 136315650;
    swift_bridgeObjectRetain(v3);
    uint64_t v10 = sub_10046DA94(v9);
    swift_bridgeObjectRelease(v3);
    uint64_t v11 = sub_10041D3C4(0LL, (unint64_t *)&unk_1009BC270, &OBJC_CLASS___IDSURI_ptr);
    uint64_t v12 = Array.description.getter(v10, v11);
    unint64_t v14 = v13;
    swift_release(v10);
    uint64_t v19 = sub_1003FFBB0(v12, v14, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease_n(v3, 2LL);
    *(_WORD *)(v7 + 1sub_10040A648(v1 + 2) = 2112;
    uint64_t v19 = (uint64_t)v18;
    id v15 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v7 + 14, v7 + 22);
    *id v8 = v18;

    *(_WORD *)(v7 + 2sub_10040A648(v1 + 2) = 1024;
    LODWORD(v19) = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, (char *)&v19 + 4, v7 + 24, v7 + 28);
    _os_log_impl( (void *)&_mh_execute_header,  v5,  v6,  "Did generateAndSendKeyIfNeeded to donated handles {URIs: %s fromURI: %@} with success %{BOOL}d",  (uint8_t *)v7,  0x1Cu);
    uint64_t v16 = sub_1003F5CB4(&qword_1009B92C8);
    swift_arrayDestroy(v8, 1LL, v16);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_arrayDestroy(v17, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v3, 2LL);
  }

id sub_10047AFFC(id result)
{
  if (result)
  {
    uint64_t v2 = v1;
    uint64_t v3 = result;
    unint64_t result = [result uris];
    if (result)
    {
      uint64_t v4 = result;
      uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(result, (char *)&type metadata for Any + 8);

      id v6 = [v3 serviceIdentifier];
      if (v6)
      {
        uint64_t v7 = v6;
        uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
        unint64_t v10 = v9;

        uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSServiceNameiMessage);
        if (v8 == v11 && v10 == v12)
        {
          swift_bridgeObjectRelease(v10);
        }

        else
        {
          uint64_t v14 = v12;
          char v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v10, v11, v12, 0LL);
          swift_bridgeObjectRelease(v14);
          if ((v15 & 1) == 0)
          {
            swift_bridgeObjectRelease(v5);
            return (id)swift_bridgeObjectRelease(v10);
          }
        }

        swift_bridgeObjectRetain_n(v5, 2LL);
        swift_bridgeObjectRetain(v10);
        uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
        os_log_type_t v18 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v17, v18))
        {
          uint64_t v19 = swift_slowAlloc(22LL, -1LL);
          uint64_t v48 = swift_slowAlloc(64LL, -1LL);
          v52[0] = v48;
          *(_DWORD *)uint64_t v19 = 136315394;
          swift_bridgeObjectRetain(v5);
          uint64_t v21 = Array.description.getter(v20, (char *)&type metadata for Any + 8);
          unint64_t v23 = v22;
          swift_bridgeObjectRelease(v5);
          uint64_t v50 = sub_1003FFBB0(v21, v23, v52);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, v51, v19 + 4, v19 + 12);
          swift_bridgeObjectRelease_n(v5, 2LL);
          swift_bridgeObjectRelease(v23);
          *(_WORD *)(v19 + 1sub_10040A648(v1 + 2) = 2080;
          swift_bridgeObjectRetain(v10);
          uint64_t v50 = sub_1003FFBB0(v8, v10, v52);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, v51, v19 + 14, v19 + 22);
          swift_bridgeObjectRelease_n(v10, 3LL);
          _os_log_impl( (void *)&_mh_execute_header,  v17,  v18,  "Received deregistrationWillStart with uris: %s service: %s",  (uint8_t *)v19,  0x16u);
          swift_arrayDestroy(v48, 2LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v48, -1LL, -1LL);
          swift_slowDealloc(v19, -1LL, -1LL);
        }

        else
        {
          swift_bridgeObjectRelease_n(v10, 2LL);
          swift_bridgeObjectRelease_n(v5, 2LL);
        }

        id v24 = _swiftEmptyArrayStorage;
        uint64_t v53 = _swiftEmptyArrayStorage;
        id v25 = sub_10046AC28(v5);
        if (v25)
        {
          uint64_t v26 = v25;
          uint64_t v27 = *(void *)(v5 + 16);
          if (!v27)
          {
            swift_bridgeObjectRelease(v5);
LABEL_23:
            v52[0] = (uint64_t)_swiftEmptyArrayStorage;
            uint64_t v29 = v26[2];
            if (v29)
            {
              swift_bridgeObjectRetain(v26);
              __n128 v30 = v26 + 5;
              do
              {
                uint64_t v32 = *v30;
                id v33 = objc_allocWithZone(&OBJC_CLASS___IDSURI);
                swift_bridgeObjectRetain(v32);
                NSString v34 = String._bridgeToObjectiveC()();
                swift_bridgeObjectRelease(v32);
                id v35 = [v33 initWithPrefixedURI:v34];

                if (v35)
                {
                  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v36);
                  unint64_t v38 = *(void *)((v52[0] & 0xFFFFFFFFFFFFFF8LL) + 0x10);
                  unint64_t v37 = *(void *)((v52[0] & 0xFFFFFFFFFFFFFF8LL) + 0x18);
                  if (v38 >= v37 >> 1) {
                    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v37 > 1,  v38 + 1,  1LL);
                  }
                  uint64_t v31 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v38, v35);
                  specialized Array._endMutation()(v31);
                }

                v30 += 2;
                --v29;
              }

              while (v29);
              swift_bridgeObjectRelease(v26);
              id v24 = (void *)v52[0];
            }

            swift_bridgeObjectRelease(v26);
            uint64_t v39 = sub_1004694BC((uint64_t)v24, (uint64_t (*)(uint64_t, void, uint64_t))sub_1004776D8);
            goto LABEL_43;
          }

          uint64_t v28 = v5 + 32;
          swift_bridgeObjectRetain(v5);
          while (1)
          {
            sub_10040A668(v28, (uint64_t)v52);
            sub_10040A668((uint64_t)v52, (uint64_t)&v50);
            if (!swift_dynamicCast( v49,  &v50,  (char *)&type metadata for Any + 8,  &type metadata for String,  6LL)) {
              break;
            }
            swift_bridgeObjectRelease(v49[1]);
            sub_10040A648(v52);
            v28 += 32LL;
            if (!--v27)
            {
              swift_bridgeObjectRelease_n(v5, 2LL);
              goto LABEL_23;
            }
          }

          sub_10040A648(v52);
          swift_bridgeObjectRelease(v26);
          swift_bridgeObjectRelease(v5);
        }

        id v40 = sub_10046AD6C(v5);
        if (v40)
        {
          uint64_t v41 = (uint64_t)v40;
          uint64_t v42 = *(void *)(v5 + 16);
          if (v42)
          {
            uint64_t v43 = v5 + 32;
            swift_bridgeObjectRetain(v5);
            while (1)
            {
              sub_10040A668(v43, (uint64_t)v52);
              sub_10040A668((uint64_t)v52, (uint64_t)&v50);
              uint64_t v44 = sub_10041D3C4(0LL, (unint64_t *)&unk_1009BC270, &OBJC_CLASS___IDSURI_ptr);

              sub_10040A648(v52);
              v43 += 32LL;
              if (!--v42)
              {
                swift_bridgeObjectRelease_n(v5, 2LL);
                goto LABEL_41;
              }
            }

            sub_10040A648(v52);
            swift_bridgeObjectRelease(v41);
            uint64_t v39 = swift_bridgeObjectRelease_n(v5, 2LL);
          }

          else
          {
            swift_bridgeObjectRelease(v5);
LABEL_41:
            uint64_t v39 = sub_1004694BC(v41, (uint64_t (*)(uint64_t, void, uint64_t))sub_1004776D8);
          }
        }

        else
        {
          uint64_t v39 = swift_bridgeObjectRelease(v5);
        }

unint64_t sub_10047B5D0(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1009060E0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3) {
    return 3LL;
  }
  else {
    return v3;
  }
}

unint64_t sub_10047B618(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100906148, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4) {
    return 4LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_10047B660(void *a1)
{
  uint64_t v3 = sub_1003F5CB4(&qword_1009BB0B8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v5, v6);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_10040A238(a1, v9);
  unint64_t v11 = sub_10047B8E4();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for SenderKeyMessage.CodingKeys,  &type metadata for SenderKeyMessage.CodingKeys,  v11,  v9,  v10);
  if (v1)
  {
    sub_10040A648(a1);
  }

  else
  {
    LOBYTE(v21) = 0;
    uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)(&v21, v3);
    char v22 = 1;
    unint64_t v12 = sub_10047DB30();
    KeyedDecodingContainer.decode<A>(_:forKey:)( &v21,  &type metadata for SenderKeyMessageType,  &v22,  v3,  &type metadata for SenderKeyMessageType,  v12);
    uint64_t v13 = sub_1003F5CB4(&qword_1009BAC30);
    char v22 = 2;
    uint64_t v14 = sub_10047DB74( &qword_1009BB0C8,  &qword_1009BAC98,  (uint64_t)&unk_10071B51C,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v21, v13, &v22, v3, v13, v14);
    uint64_t v16 = v21;
    uint64_t v17 = sub_1003F5CB4(&qword_1009BAC90);
    char v22 = 3;
    uint64_t v18 = sub_10047DBF8( (unint64_t *)&unk_1009BB0D0,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    swift_bridgeObjectRetain(v16);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v21, v17, &v22, v3, v17, v18);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v8, v3);
    uint64_t v19 = v21;
    swift_bridgeObjectRetain(v21);
    sub_10040A648(a1);
    swift_bridgeObjectRelease(v19);
    swift_bridgeObjectRelease(v16);
  }

  return v9;
}

unint64_t sub_10047B8E4()
{
  unint64_t result = qword_1009BACB8;
  if (!qword_1009BACB8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10071B30C, &type metadata for SenderKeyMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009BACB8);
  }

  return result;
}

unint64_t sub_10047B928()
{
  unint64_t result = qword_1009BACC0;
  if (!qword_1009BACC0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10071B244, &type metadata for SenderKeyMessageType);
    atomic_store(result, (unint64_t *)&qword_1009BACC0);
  }

  return result;
}

unint64_t sub_10047B96C()
{
  unint64_t result = qword_1009C3F60;
  if (!qword_1009C3F60)
  {
    unint64_t result = swift_getWitnessTable(&unk_10071BC34, &type metadata for SenderKeyConversationPair.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009C3F60);
  }

  return result;
}

uint64_t sub_10047B9B0(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x52557265646E6573LL && a2 == 0xE900000000000049LL;
  if (v3
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x52557265646E6573LL, 0xE900000000000049LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0LL;
  }

  else if (a1 == 0x7265766965636572LL && a2 == 0xEB00000000495255LL)
  {
    swift_bridgeObjectRelease(0xEB00000000495255LL);
    return 1LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7265766965636572LL, 0xEB00000000495255LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_10047BAB0(void *a1)
{
  uint64_t v3 = sub_1003F5CB4(&qword_1009BB0B0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v5, v6);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_10040A238(a1, v9);
  unint64_t v11 = sub_10047B96C();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for SenderKeyConversationPair.CodingKeys,  &type metadata for SenderKeyConversationPair.CodingKeys,  v11,  v9,  v10);
  if (v1)
  {
    sub_10040A648(a1);
  }

  else
  {
    char v19 = 0;
    uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)(&v19, v3);
    uint64_t v14 = v13;
    char v18 = 1;
    swift_bridgeObjectRetain(v13);
    KeyedDecodingContainer.decode(_:forKey:)(&v18, v3);
    uint64_t v16 = v15;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v8, v3);
    swift_bridgeObjectRetain(v16);
    sub_10040A648(a1);
    swift_bridgeObjectRelease(v16);
    swift_bridgeObjectRelease(v14);
  }

  return v10;
}

unint64_t sub_10047BC5C()
{
  unint64_t result = qword_1009C3F68;
  if (!qword_1009C3F68)
  {
    unint64_t result = swift_getWitnessTable(&unk_10071BBE4, &type metadata for SenderKeyInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009C3F68);
  }

  return result;
}

unint64_t sub_10047BCA0()
{
  unint64_t result = qword_1009BAD08;
  if (!qword_1009BAD08)
  {
    unint64_t result = swift_getWitnessTable(&unk_10071B48C, &type metadata for SenderKeyConversationPair);
    atomic_store(result, (unint64_t *)&qword_1009BAD08);
  }

  return result;
}

unint64_t sub_10047BCE4()
{
  unint64_t result = qword_1009BAD28;
  if (!qword_1009BAD28)
  {
    unint64_t result = swift_getWitnessTable(&unk_10071B464, &type metadata for SenderKeyConversationPair);
    atomic_store(result, (unint64_t *)&qword_1009BAD28);
  }

  return result;
}

unint64_t sub_10047BD28()
{
  unint64_t result = qword_1009C3F70[0];
  if (!qword_1009C3F70[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_10071BB94, &type metadata for SenderKeyAndState.CodingKeys);
    atomic_store(result, qword_1009C3F70);
  }

  return result;
}

uint64_t type metadata accessor for IDSSenderKeySendContext()
{
  return objc_opt_self(&OBJC_CLASS____TtC17identityservicesd23IDSSenderKeySendContext);
}

uint64_t sub_10047BD8C(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x6174614479656BLL && a2 == 0xE700000000000000LL;
  if (v3
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6174614479656BLL, 0xE700000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0LL;
  }

  else if (a1 == 0x444979656BLL && a2 == 0xE500000000000000LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0x444979656BLL, 0xE500000000000000LL, a1, a2, 0LL) & 1) != 0)
  }
  {
    swift_bridgeObjectRelease(a2);
    return 1LL;
  }

  else if (a1 == 0x4164657461657263LL && a2 == 0xE900000000000074LL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)(0x4164657461657263LL, 0xE900000000000074LL, a1, a2, 0LL) & 1) != 0)
  }
  {
    swift_bridgeObjectRelease(a2);
    return 2LL;
  }

  else if (a1 == 0xD000000000000010LL && a2 == 0x80000001008413F0LL)
  {
    swift_bridgeObjectRelease(0x80000001008413F0LL);
    return 3LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x80000001008413F0LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0) {
      return 3LL;
    }
    else {
      return 4LL;
    }
  }

uint64_t sub_10047BF28(uint64_t a1, uint64_t a2)
{
  BOOL v3 = a1 == 0x6F666E4979656BLL && a2 == 0xE700000000000000LL;
  if (v3
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6F666E4979656BLL, 0xE700000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0LL;
  }

  else if (a1 == 0x7A696C6169726573LL && a2 == 0xEF65746174536465LL)
  {
    swift_bridgeObjectRelease(0xEF65746174536465LL);
    return 1LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7A696C6169726573LL, 0xEF65746174536465LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_10047C028(unint64_t a1)
{
  if (a1 >= 8) {
    return 7LL;
  }
  else {
    return (0x605040302010007uLL >> (8 * a1));
  }
}

unint64_t sub_10047C054()
{
  unint64_t result = qword_1009BAD40;
  if (!qword_1009BAD40)
  {
    unint64_t result = swift_getWitnessTable(&unk_10071B17C, &type metadata for SenderKeyMessageType);
    atomic_store(result, (unint64_t *)&qword_1009BAD40);
  }

  return result;
}

unint64_t sub_10047C09C()
{
  unint64_t result = qword_1009BAD48;
  if (!qword_1009BAD48)
  {
    unint64_t result = swift_getWitnessTable(&unk_10071B26C, &type metadata for SenderKeyMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009BAD48);
  }

  return result;
}

unint64_t sub_10047C0E4()
{
  unint64_t result = qword_1009BAD50;
  if (!qword_1009BAD50)
  {
    unint64_t result = swift_getWitnessTable(&unk_10071B384, &type metadata for SenderKeyMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009BAD50);
  }

  return result;
}

unint64_t sub_10047C12C()
{
  unint64_t result = qword_1009BAD58;
  if (!qword_1009BAD58)
  {
    unint64_t result = swift_getWitnessTable(&unk_10071B35C, &type metadata for SenderKeyMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009BAD58);
  }

  return result;
}

unint64_t sub_10047C174()
{
  unint64_t result = qword_1009BAD60;
  if (!qword_1009BAD60)
  {
    unint64_t result = swift_getWitnessTable(&unk_10071B3FC, &type metadata for SenderKeyURIPair);
    atomic_store(result, (unint64_t *)&qword_1009BAD60);
  }

  return result;
}

unint64_t sub_10047C1BC()
{
  unint64_t result = qword_1009BAD68;
  if (!qword_1009BAD68)
  {
    unint64_t result = swift_getWitnessTable(&unk_10071B4B4, &type metadata for SenderKeyConversationPair);
    atomic_store(result, (unint64_t *)&qword_1009BAD68);
  }

  return result;
}

uint64_t sub_10047C200()
{
  return sub_10040A2B0(&qword_1009BAD70, type metadata accessor for SenderKeyInfo, (uint64_t)&unk_10071B56C);
}

unint64_t sub_10047C230()
{
  unint64_t result = qword_1009BAD78;
  if (!qword_1009BAD78)
  {
    unint64_t result = swift_getWitnessTable(&unk_10071B64C, &type metadata for SenderKeyDistributionError);
    atomic_store(result, (unint64_t *)&qword_1009BAD78);
  }

  return result;
}

uint64_t sub_10047C274()
{
  return type metadata accessor for SenderKeyDistributionManager(0LL);
}

uint64_t sub_10047C27C(uint64_t a1)
{
  uint64_t result = type metadata accessor for Logger(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[2] = &unk_10071B770;
    v4[3] = &unk_10071B788;
    v4[4] = &unk_10071B788;
    v4[5] = &unk_10071B788;
    void v4[6] = &unk_10071B788;
    v4[7] = &unk_10071B788;
    void v4[8] = (char *)&value witness table for Builtin.BridgeObject + 64;
    void v4[9] = (char *)&value witness table for Builtin.BridgeObject + 64;
    void v4[10] = (char *)&value witness table for Builtin.BridgeObject + 64;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 11LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t getEnumTagSinglePayload for IDSGroupEncryptionPublicIdentityWrapMode( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }

uint64_t storeEnumTagSinglePayload for SenderKeyMessageType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_10047C400 + 4 * byte_10071B0E9[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10047C434 + 4 * byte_10071B0E4[v4]))();
}

uint64_t sub_10047C434(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10047C43C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10047C444LL);
  }
  return result;
}

uint64_t sub_10047C450(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10047C458LL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_10047C45C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10047C464(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SenderKeyMessageType()
{
  return &type metadata for SenderKeyMessageType;
}

ValueMetadata *type metadata accessor for SenderKeyMessageProtocolVersion()
{
  return &type metadata for SenderKeyMessageProtocolVersion;
}

uint64_t destroy for SenderKeyMessage(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 24));
}

uint64_t initializeWithCopy for SenderKeyMessage(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for SenderKeyMessage(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

__n128 initializeWithTake for SenderKeyConversationPair(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t assignWithTake for SenderKeyMessage(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  swift_bridgeObjectRelease(*(void *)(a1 + 16));
  uint64_t v4 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for SenderKeyMessage(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(vsub_10040A648(v1 + 2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SenderKeyMessage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 3sub_10040A648(v1 + 2) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 3sub_10040A648(v1 + 2) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SenderKeyMessage()
{
  return &type metadata for SenderKeyMessage;
}

ValueMetadata *type metadata accessor for SenderKeyMessage.CodingKeys()
{
  return &type metadata for SenderKeyMessage.CodingKeys;
}

ValueMetadata *type metadata accessor for SenderKeyURIPair()
{
  return &type metadata for SenderKeyURIPair;
}

uint64_t destroy for SenderKeyConversationPair(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 24));
}

void *initializeWithCopy for SenderKeyConversationPair(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

void *assignWithCopy for SenderKeyConversationPair(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

void *assignWithTake for SenderKeyConversationPair(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

ValueMetadata *type metadata accessor for SenderKeyConversationPair()
{
  return &type metadata for SenderKeyConversationPair;
}

uint64_t *sub_10047C7A4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v20);
  }

  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_1004028CC(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a2[2];
    unint64_t v10 = a2[3];
    sub_1004028CC(v9, v10);
    a1[2] = v9;
    a1[3] = v10;
    uint64_t v11 = *(int *)(a3 + 24);
    unint64_t v12 = (char *)a1 + v11;
    uint64_t v13 = (char *)a2 + v11;
    uint64_t v14 = type metadata accessor for Date(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16LL))(v12, v13, v14);
    uint64_t v15 = *(int *)(a3 + 28);
    uint64_t v16 = (uint64_t *)((char *)a1 + v15);
    uint64_t v17 = (uint64_t *)((char *)a2 + v15);
    uint64_t v18 = v17[1];
    *uint64_t v16 = *v17;
    v16[1] = v18;
    uint64_t v19 = v17[3];
    void v16[2] = v17[2];
    v16[3] = v19;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v19);
  }

  return a1;
}

uint64_t sub_10047C884(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 28);
  swift_bridgeObjectRelease(*(void *)(v6 + 8));
  return swift_bridgeObjectRelease(*(void *)(v6 + 24));
}

uint64_t *sub_10047C8F8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1004028CC(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  sub_1004028CC(v8, v9);
  a1[2] = v8;
  a1[3] = v9;
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  unint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16LL))(v11, v12, v13);
  uint64_t v14 = *(int *)(a3 + 28);
  uint64_t v15 = (uint64_t *)((char *)a1 + v14);
  uint64_t v16 = (uint64_t *)((char *)a2 + v14);
  uint64_t v17 = v16[1];
  *uint64_t v15 = *v16;
  v15[1] = v17;
  uint64_t v18 = v16[3];
  void v15[2] = v16[2];
  v15[3] = v18;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v18);
  return a1;
}

uint64_t *sub_10047C9AC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1004028CC(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_100402A84(v8, v9);
  uint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  sub_1004028CC(v10, v11);
  uint64_t v12 = a1[2];
  unint64_t v13 = a1[3];
  a1[2] = v10;
  a1[3] = v11;
  sub_100402A84(v12, v13);
  uint64_t v14 = *(int *)(a3 + 24);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 24LL))(v15, v16, v17);
  uint64_t v18 = *(int *)(a3 + 28);
  uint64_t v19 = (uint64_t *)((char *)a1 + v18);
  uint64_t v20 = (uint64_t *)((char *)a2 + v18);
  void *v19 = *v20;
  uint64_t v21 = v20[1];
  uint64_t v22 = *(uint64_t *)((char *)a1 + v18 + 8);
  v19[1] = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v22);
  v19[2] = v20[2];
  uint64_t v23 = v20[3];
  uint64_t v24 = v19[3];
  v19[3] = v23;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRelease(v24);
  return a1;
}

_OWORD *sub_10047CA94(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (char *)a1 + v7;
  unint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = (_OWORD *)((char *)a1 + v11);
  unint64_t v13 = (_OWORD *)((char *)a2 + v11);
  __int128 v14 = v13[1];
  _OWORD *v12 = *v13;
  v12[1] = v14;
  return a1;
}

uint64_t *sub_10047CB14(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_100402A84(v6, v7);
  uint64_t v8 = a1[2];
  unint64_t v9 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_100402A84(v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 40LL))(v11, v12, v13);
  uint64_t v14 = *(int *)(a3 + 28);
  uint64_t v15 = (uint64_t *)((char *)a1 + v14);
  uint64_t v16 = (void *)((char *)a2 + v14);
  uint64_t v17 = v16[1];
  uint64_t v18 = *(uint64_t *)((char *)a1 + v14 + 8);
  *uint64_t v15 = *v16;
  v15[1] = v17;
  swift_bridgeObjectRelease(v18);
  uint64_t v19 = v16[3];
  uint64_t v20 = v15[3];
  void v15[2] = v16[2];
  v15[3] = v19;
  swift_bridgeObjectRelease(v20);
  return a1;
}

uint64_t sub_10047CBC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10047CBD4);
}

uint64_t sub_10047CBD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 24), a2, v6);
  }
  unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 28) + 8);
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(__chkstk_darwin(v8, v9) = -1;
  }
  return (v9 + 1);
}

uint64_t sub_10047CC58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10047CC64);
}

uint64_t sub_10047CC64(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for Date(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))( a1 + *(int *)(a4 + 24),  a2,  a2,  result);
  }
  *(void *)(a1 + *(int *)(a4 + 28) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_10047CCE4(uint64_t a1)
{
  v4[0] = &unk_10071B8D8;
  v4[1] = &unk_10071B8D8;
  uint64_t result = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    v4[2] = *(void *)(result - 8) + 64LL;
    v4[3] = &unk_10071B8F0;
    swift_initStructMetadata(a1, 256LL, 4LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t *sub_10047CD60(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v26 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v26 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v26);
  }

  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_1004028CC(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a2[2];
    unint64_t v10 = a2[3];
    sub_1004028CC(v9, v10);
    a1[2] = v9;
    a1[3] = v10;
    uint64_t v11 = type metadata accessor for SenderKeyInfo(0LL);
    uint64_t v12 = *(int *)(v11 + 24);
    uint64_t v13 = (char *)a1 + v12;
    uint64_t v14 = (char *)a2 + v12;
    uint64_t v15 = type metadata accessor for Date(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16LL))(v13, v14, v15);
    uint64_t v16 = *(int *)(v11 + 28);
    uint64_t v17 = (uint64_t *)((char *)a1 + v16);
    uint64_t v18 = (uint64_t *)((char *)a2 + v16);
    uint64_t v19 = v18[1];
    *uint64_t v17 = *v18;
    v17[1] = v19;
    uint64_t v20 = v18[3];
    v17[2] = v18[2];
    v17[3] = v20;
    uint64_t v21 = *(int *)(a3 + 20);
    uint64_t v22 = (uint64_t *)((char *)a1 + v21);
    uint64_t v23 = (uint64_t *)((char *)a2 + v21);
    uint64_t v24 = *v23;
    unint64_t v25 = v23[1];
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v20);
    sub_1004028CC(v24, v25);
    *uint64_t v22 = v24;
    v22[1] = v25;
  }

  return a1;
}

uint64_t sub_10047CE6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SenderKeyInfo(0LL);
  uint64_t v5 = a1 + *(int *)(v4 + 24);
  uint64_t v6 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(v5, v6);
  uint64_t v7 = a1 + *(int *)(v4 + 28);
  swift_bridgeObjectRelease(*(void *)(v7 + 8));
  swift_bridgeObjectRelease(*(void *)(v7 + 24));
  return sub_100402A84(*(void *)(a1 + *(int *)(a2 + 20)), *(void *)(a1 + *(int *)(a2 + 20) + 8));
}

uint64_t *sub_10047CEFC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1004028CC(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  sub_1004028CC(v8, v9);
  a1[2] = v8;
  a1[3] = v9;
  uint64_t v10 = type metadata accessor for SenderKeyInfo(0LL);
  uint64_t v11 = *(int *)(v10 + 24);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16LL))(v12, v13, v14);
  uint64_t v15 = *(int *)(v10 + 28);
  uint64_t v16 = (uint64_t *)((char *)a1 + v15);
  uint64_t v17 = (uint64_t *)((char *)a2 + v15);
  uint64_t v18 = v17[1];
  *uint64_t v16 = *v17;
  v16[1] = v18;
  uint64_t v19 = v17[3];
  void v16[2] = v17[2];
  v16[3] = v19;
  uint64_t v20 = *(int *)(a3 + 20);
  uint64_t v21 = (uint64_t *)((char *)a1 + v20);
  uint64_t v22 = (uint64_t *)((char *)a2 + v20);
  uint64_t v23 = *v22;
  unint64_t v24 = v22[1];
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v19);
  sub_1004028CC(v23, v24);
  *uint64_t v21 = v23;
  v21[1] = v24;
  return a1;
}

uint64_t *sub_10047CFDC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1004028CC(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_100402A84(v8, v9);
  uint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  sub_1004028CC(v10, v11);
  uint64_t v12 = a1[2];
  unint64_t v13 = a1[3];
  a1[2] = v10;
  a1[3] = v11;
  sub_100402A84(v12, v13);
  uint64_t v14 = type metadata accessor for SenderKeyInfo(0LL);
  uint64_t v15 = *(int *)(v14 + 24);
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  uint64_t v18 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 24LL))(v16, v17, v18);
  uint64_t v19 = *(int *)(v14 + 28);
  uint64_t v20 = (uint64_t *)((char *)a1 + v19);
  uint64_t v21 = (char *)a2 + v19;
  *uint64_t v20 = *(uint64_t *)((char *)a2 + v19);
  uint64_t v22 = *(uint64_t *)((char *)a2 + v19 + 8);
  uint64_t v23 = *(uint64_t *)((char *)a1 + v19 + 8);
  v20[1] = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  v20[2] = *((void *)v21 + 2);
  uint64_t v24 = *((void *)v21 + 3);
  uint64_t v25 = v20[3];
  v20[3] = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25);
  uint64_t v26 = *(int *)(a3 + 20);
  uint64_t v27 = (uint64_t *)((char *)a1 + v26);
  uint64_t v28 = (uint64_t *)((char *)a2 + v26);
  uint64_t v29 = *v28;
  unint64_t v30 = v28[1];
  sub_1004028CC(*v28, v30);
  uint64_t v31 = *v27;
  unint64_t v32 = v27[1];
  *uint64_t v27 = v29;
  v27[1] = v30;
  sub_100402A84(v31, v32);
  return a1;
}

_OWORD *sub_10047D0F8(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = type metadata accessor for SenderKeyInfo(0LL);
  uint64_t v8 = *(int *)(v7 + 24);
  unint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32LL))(v9, v10, v11);
  uint64_t v12 = *(int *)(v7 + 28);
  unint64_t v13 = (_OWORD *)((char *)a1 + v12);
  uint64_t v14 = (_OWORD *)((char *)a2 + v12);
  __int128 v15 = v14[1];
  *unint64_t v13 = *v14;
  v13[1] = v15;
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t *sub_10047D190(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_100402A84(v6, v7);
  uint64_t v8 = a1[2];
  unint64_t v9 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_100402A84(v8, v9);
  uint64_t v10 = type metadata accessor for SenderKeyInfo(0LL);
  uint64_t v11 = *(int *)(v10 + 24);
  uint64_t v12 = (char *)a1 + v11;
  unint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 40LL))(v12, v13, v14);
  uint64_t v15 = *(int *)(v10 + 28);
  uint64_t v16 = (uint64_t *)((char *)a1 + v15);
  uint64_t v17 = (char *)a2 + v15;
  uint64_t v18 = *(void *)((char *)a2 + v15 + 8);
  uint64_t v19 = *(uint64_t *)((char *)a1 + v15 + 8);
  *uint64_t v16 = *(void *)((char *)a2 + v15);
  v16[1] = v18;
  swift_bridgeObjectRelease(v19);
  uint64_t v20 = *((void *)v17 + 3);
  uint64_t v21 = v16[3];
  void v16[2] = *((void *)v17 + 2);
  v16[3] = v20;
  swift_bridgeObjectRelease(v21);
  uint64_t v22 = *(int *)(a3 + 20);
  uint64_t v23 = *(uint64_t *)((char *)a1 + v22);
  unint64_t v24 = *(uint64_t *)((char *)a1 + v22 + 8);
  *(_OWORD *)((char *)a1 + v2sub_10040A648(v1 + 2) = *(_OWORD *)((char *)a2 + v22);
  sub_100402A84(v23, v24);
  return a1;
}

uint64_t sub_10047D268(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10047D274);
}

uint64_t sub_10047D274(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SenderKeyInfo(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  uint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20) + 8) >> 60;
  if (((4 * (_DWORD)v9) & 0xC) != 0) {
    return 16 - ((4 * (_DWORD)v9) & 0xC | (v9 >> 2));
  }
  else {
    return 0LL;
  }
}

uint64_t sub_10047D304(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10047D310);
}

uint64_t sub_10047D310(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for SenderKeyInfo(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  uint64_t v10 = (void *)(a1 + *(int *)(a4 + 20));
  *uint64_t v10 = 0LL;
  v10[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  return result;
}

uint64_t sub_10047D398(uint64_t a1)
{
  uint64_t result = type metadata accessor for SenderKeyInfo(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = &unk_10071B8D8;
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t getEnumTagSinglePayload for SenderKeyDistributionError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFA) {
    goto LABEL_17;
  }
  if (a2 + 6 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 6) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 6;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 6;
    }
  }

uint64_t storeEnumTagSinglePayload for SenderKeyDistributionError( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF9) {
    return ((uint64_t (*)(void))((char *)&loc_10047D4E4 + 4 * byte_10071B0F3[v4]))();
  }
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_10047D518 + 4 * byte_10071B0EE[v4]))();
}

uint64_t sub_10047D518(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10047D520(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10047D528LL);
  }
  return result;
}

uint64_t sub_10047D534(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10047D53CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 6;
  return result;
}

uint64_t sub_10047D540(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10047D548(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SenderKeyDistributionError()
{
  return &type metadata for SenderKeyDistributionError;
}

ValueMetadata *type metadata accessor for SenderKeyAndState.CodingKeys()
{
  return &type metadata for SenderKeyAndState.CodingKeys;
}

uint64_t _s17identityservicesd16SenderKeyMessageV10CodingKeysOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }

uint64_t _s17identityservicesd16SenderKeyMessageV10CodingKeysOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_10047D658 + 4 * byte_10071B0FD[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10047D68C + 4 * byte_10071B0F8[v4]))();
}

uint64_t sub_10047D68C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10047D694(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10047D69CLL);
  }
  return result;
}

uint64_t sub_10047D6A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10047D6B0LL);
  }
  *(_BYTE *)uint64_t result = a2 + 3;
  return result;
}

uint64_t sub_10047D6B4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10047D6BC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SenderKeyInfo.CodingKeys()
{
  return &type metadata for SenderKeyInfo.CodingKeys;
}

uint64_t _s17identityservicesd17SenderKeyAndStateV10CodingKeysOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_10047D724 + 4 * byte_10071B107[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10047D758 + 4 * byte_10071B102[v4]))();
}

uint64_t sub_10047D758(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10047D760(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10047D768LL);
  }
  return result;
}

uint64_t sub_10047D774(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10047D77CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_10047D780(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10047D788(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SenderKeyConversationPair.CodingKeys()
{
  return &type metadata for SenderKeyConversationPair.CodingKeys;
}

unint64_t sub_10047D7A8()
{
  unint64_t result = qword_1009C4FB0[0];
  if (!qword_1009C4FB0[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_10071B9FC, &type metadata for SenderKeyConversationPair.CodingKeys);
    atomic_store(result, qword_1009C4FB0);
  }

  return result;
}

unint64_t sub_10047D7F0()
{
  unint64_t result = qword_1009C51C0[0];
  if (!qword_1009C51C0[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_10071BAB4, &type metadata for SenderKeyInfo.CodingKeys);
    atomic_store(result, qword_1009C51C0);
  }

  return result;
}

unint64_t sub_10047D838()
{
  unint64_t result = qword_1009C53D0[0];
  if (!qword_1009C53D0[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_10071BB6C, &type metadata for SenderKeyAndState.CodingKeys);
    atomic_store(result, qword_1009C53D0);
  }

  return result;
}

unint64_t sub_10047D880()
{
  unint64_t result = qword_1009C54E0;
  if (!qword_1009C54E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10071BADC, &type metadata for SenderKeyAndState.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009C54E0);
  }

  return result;
}

unint64_t sub_10047D8C8()
{
  unint64_t result = qword_1009C54E8[0];
  if (!qword_1009C54E8[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_10071BB04, &type metadata for SenderKeyAndState.CodingKeys);
    atomic_store(result, qword_1009C54E8);
  }

  return result;
}

unint64_t sub_10047D910()
{
  unint64_t result = qword_1009C5570;
  if (!qword_1009C5570)
  {
    unint64_t result = swift_getWitnessTable(&unk_10071BA24, &type metadata for SenderKeyInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009C5570);
  }

  return result;
}

unint64_t sub_10047D958()
{
  unint64_t result = qword_1009C5578;
  if (!qword_1009C5578)
  {
    unint64_t result = swift_getWitnessTable(&unk_10071BA4C, &type metadata for SenderKeyInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009C5578);
  }

  return result;
}

unint64_t sub_10047D9A0()
{
  unint64_t result = qword_1009C5600;
  if (!qword_1009C5600)
  {
    unint64_t result = swift_getWitnessTable(&unk_10071B96C, &type metadata for SenderKeyConversationPair.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009C5600);
  }

  return result;
}

unint64_t sub_10047D9E8()
{
  unint64_t result = qword_1009C5608[0];
  if (!qword_1009C5608[0])
  {
    unint64_t result = swift_getWitnessTable(&unk_10071B994, &type metadata for SenderKeyConversationPair.CodingKeys);
    atomic_store(result, qword_1009C5608);
  }

  return result;
}

uint64_t sub_10047DA2C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10047DA50(char a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(v1 + 16) + 16LL))(*(void *)(v1 + 16), a1 & 1);
}

unint64_t sub_10047DA64()
{
  unint64_t result = qword_1009BB098;
  if (!qword_1009BB098)
  {
    unint64_t result = swift_getWitnessTable(&unk_10071B6B4, &type metadata for SenderKeyDistributionError);
    atomic_store(result, (unint64_t *)&qword_1009BB098);
  }

  return result;
}

unint64_t sub_10047DAA8()
{
  unint64_t result = qword_1009BB0A0;
  if (!qword_1009BB0A0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_1009BB0A0);
  }

  return result;
}

unint64_t sub_10047DAEC()
{
  unint64_t result = qword_1009BB0A8;
  if (!qword_1009BB0A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10071B1E4, &type metadata for SenderKeyMessageType);
    atomic_store(result, (unint64_t *)&qword_1009BB0A8);
  }

  return result;
}

unint64_t sub_10047DB30()
{
  unint64_t result = qword_1009BB0C0;
  if (!qword_1009BB0C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10071B21C, &type metadata for SenderKeyMessageType);
    atomic_store(result, (unint64_t *)&qword_1009BB0C0);
  }

  return result;
}

uint64_t sub_10047DB74(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v9 = sub_100401A88(&qword_1009BAC30);
    sub_10040A2B0(a2, type metadata accessor for SenderKeyInfo, a3);
    uint64_t result = swift_getWitnessTable(a4, v9);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_10047DBF8(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = sub_100401A88(&qword_1009BAC90);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_10047DC58()
{
  unint64_t result = qword_1009BB100;
  if (!qword_1009BB100)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_1009BB100);
  }

  return result;
}

void sub_10047DCA0(char a1)
{
}

void sub_10047DCB0(char a1)
{
}

uint64_t sub_10047DCC0()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_10047DCF4(char a1, char *a2)
{
  uint64_t v5 = *(void **)(v2 + 32);
  id v6 = *(id *)(v2 + 24);
  id v7 = v5;
  id v8 = v6;
  id v17 = v7;
  uint64_t v9 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc(28LL, -1LL);
    format = a2;
    uint64_t v12 = (void *)swift_slowAlloc(16LL, -1LL);
    *(_DWORD *)uint64_t v11 = 138412802;
    id v18 = v8;
    id v13 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v11 + 4, v11 + 12);
    void *v12 = v8;

    *(_WORD *)(v11 + 1sub_10040A648(v1 + 2) = 2112;
    id v18 = v17;
    id v14 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v11 + 14, v11 + 22);
    v12[1] = v17;

    *(_WORD *)(v11 + 2sub_10040A648(v1 + 2) = 1024;
    LODWORD(v18) = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, (char *)&v18 + 4, v11 + 24, v11 + 28);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, format, (uint8_t *)v11, 0x1Cu);
    uint64_t v15 = sub_1003F5CB4(&qword_1009B92C8);
    swift_arrayDestroy(v12, 2LL, v15);
    swift_slowDealloc(v12, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  else
  {
  }

uint64_t sub_10047DF04(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = type metadata accessor for SenderKeyInfo(0LL);
  return static Date.> infix(_:_:)(a1 + *(int *)(v4 + 24), v3) & 1;
}

BOOL sub_10047DF50(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = a1 + *(int *)(type metadata accessor for SenderKeyInfo(0LL) + 24);
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v5 = sub_10040A2B0( (unint64_t *)&unk_1009BC4A0,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  return (dispatch thunk of static Comparable.< infix(_:_:)(v2, v3, v4, v5) & 1) == 0;
}

uint64_t sub_10047DFDC()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 56));
  swift_bridgeObjectRelease(*(void *)(v0 + 64));

  return swift_deallocObject(v0, 88LL, 7LL);
}

void sub_10047E028(uint64_t a1)
{
}

uint64_t sub_10047E064()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

unint64_t sub_10047E08C()
{
  unint64_t result = qword_1009BCF10;
  if (!qword_1009BCF10)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1009BCF10);
  }

  return result;
}

void sub_10047E0D0(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = swift_bridgeObjectRetain_n(a2, 2LL);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    id v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v8 = swift_slowAlloc(32LL, -1LL);
    uint64_t v10 = v8;
    *(_DWORD *)id v7 = 136315138;
    swift_bridgeObjectRetain(a2);
    uint64_t v9 = sub_1003FFBB0(a1, a2, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v9, &v10, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease_n(a2, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%s", v7, 0xCu);
    swift_arrayDestroy(v8, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a2, 2LL);
  }

uint64_t sub_10047E23C(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = sub_100401A88(a2);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_10047E27C()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **(void **)(v0 + 16)) + 0x2B0LL))();
}

uint64_t type metadata accessor for IDSGroupEncryptionControllerParticipantKeyRecoveryRequest(uint64_t a1)
{
  return sub_100402020( a1,  (uint64_t *)&unk_1009C56A8,  (uint64_t)&nominal type descriptor for IDSGroupEncryptionControllerParticipantKeyRecoveryRequest);
}

uint64_t sub_10047E41C()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_delegate;
  uint64_t result = swift_unknownObjectWeakLoadStrong(v0 + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_delegate);
  if (result)
  {
    uint64_t v3 = (void *)result;
    uint64_t v4 = *(void *)(v1 + 8);
    uint64_t ObjectType = swift_getObjectType(result);
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 24))(v0, ObjectType, v4);

    return v6;
  }

  return result;
}

uint64_t sub_10047E484()
{
  uint64_t v1 = (unsigned __int8 *)(v0
                         + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_typeAccordingToServer);
  swift_beginAccess( v0 + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_typeAccordingToServer,  v3,  0LL,  0LL);
  return *v1;
}

uint64_t sub_10047E4C8(char a1)
{
  char v2 = a1 & 1;
  uint64_t v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_typeAccordingToServer);
  uint64_t result = swift_beginAccess( v1 + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_typeAccordingToServer,  v5,  1LL,  0LL);
  _BYTE *v3 = v2;
  return result;
}

uint64_t (*sub_10047E518(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t type metadata accessor for IDSGroupEncryptionControllerParticipantPreKeyState(uint64_t a1)
{
  return sub_100402020( a1,  (uint64_t *)&unk_1009C5698,  (uint64_t)&nominal type descriptor for IDSGroupEncryptionControllerParticipantPreKeyState);
}

uint64_t sub_10047E570@<X0>(uint64_t a1@<X8>)
{
  return sub_10047E604( &OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_preKeyState,  type metadata accessor for IDSGroupEncryptionControllerParticipantPreKeyState,  a1);
}

uint64_t sub_10047E584(uint64_t a1)
{
  return sub_10047E674( a1,  &OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_preKeyState,  type metadata accessor for IDSGroupEncryptionControllerParticipantPreKeyState);
}

uint64_t (*sub_10047E598(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

uint64_t type metadata accessor for IDSGroupEncryptionControllerParticipantKeyRecoveryState(uint64_t a1)
{
  return sub_100402020( a1,  (uint64_t *)&unk_1009C56B8,  (uint64_t)&nominal type descriptor for IDSGroupEncryptionControllerParticipantKeyRecoveryState);
}

uint64_t sub_10047E5F0@<X0>(uint64_t a1@<X8>)
{
  return sub_10047E604( &OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_keyRecoveryState,  type metadata accessor for IDSGroupEncryptionControllerParticipantKeyRecoveryState,  a1);
}

uint64_t sub_10047E604@<X0>(void *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = v3 + *a1;
  swift_beginAccess(v6, v8, 0LL, 0LL);
  return sub_1003F5FC8(v6, a3, a2);
}

uint64_t sub_10047E660(uint64_t a1)
{
  return sub_10047E674( a1,  &OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_keyRecoveryState,  type metadata accessor for IDSGroupEncryptionControllerParticipantKeyRecoveryState);
}

uint64_t sub_10047E674(uint64_t a1, void *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = v3 + *a2;
  swift_beginAccess(v6, v8, 33LL, 0LL);
  sub_10047E6D8(a1, v6, a3);
  return swift_endAccess(v8);
}

uint64_t sub_10047E6D8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(a2, a1, v5);
  return a2;
}

uint64_t (*sub_10047E71C(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_10047E760(uint64_t a1)
{
  if (!v10)
  {
    sub_10040E008((uint64_t)v9);
    goto LABEL_6;
  }

  uint64_t v2 = type metadata accessor for IDSGroupEncryptionControllerParticipant(0LL);
  if ((swift_dynamicCast(&v8, v9, (char *)&type metadata for Any + 8, v2, 6LL) & 1) == 0)
  {
LABEL_6:
    char v4 = 0;
    return v4 & 1;
  }

  uint64_t v3 = v8;
  if (*(void *)&v8[OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_participantID] == *(void *)(v1 + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_participantID))
  {

    char v4 = 1;
  }

  else
  {
    sub_10041D3C4(0LL, (unint64_t *)&qword_1009B92C0, &OBJC_CLASS___NSObject_ptr);
    uint64_t v6 = *(void *)(v1 + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_pushToken);
    id v7 = *(id *)&v3[OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_pushToken];
    char v4 = static NSObject.== infix(_:_:)(v7, v6);
  }

  return v4 & 1;
}

uint64_t type metadata accessor for IDSGroupEncryptionControllerParticipant(uint64_t a1)
{
  return sub_100402020( a1,  (uint64_t *)&unk_1009C56C8,  (uint64_t)&nominal type descriptor for IDSGroupEncryptionControllerParticipant);
}

id sub_10047E93C(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  id v13 = objc_allocWithZone(v6);
  id v14 = sub_1004803F4((uint64_t)a1, a2, a3, a4, a5, a6);

  return v14;
}

uint64_t sub_10047EA10()
{
  HIWORD(v16[1]) = -4864;
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
  object = v1._object;
  String.append(_:)(v1);
  swift_bridgeObjectRelease(object);
  v3._countAndFlagsBits = 0x3D69727520LL;
  v3._object = (void *)0xE500000000000000LL;
  String.append(_:)(v3);
  uint64_t v4 = *(void *)(v0 + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_allocatedURI);
  uint64_t v5 = *(void **)(v0 + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_allocatedURI + 8);
  swift_bridgeObjectRetain(v5);
  v6._countAndFlagsBits = v4;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(v5);
  v7._countAndFlagsBits = 0x3D6E656B6F74203BLL;
  v7._object = (void *)0xE800000000000000LL;
  String.append(_:)(v7);
  id v8 = *(id *)(v0 + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_pushToken);
  id v9 = [v8 description];
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  uint64_t v12 = v11;

  v13._countAndFlagsBits = v10;
  v13._object = v12;
  String.append(_:)(v13);

  swift_bridgeObjectRelease(v12);
  v14._countAndFlagsBits = 62LL;
  v14._object = (void *)0xE100000000000000LL;
  String.append(_:)(v14);
  return v16[0];
}

void sub_10047EB88(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_delegate;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_delegate);
  if (Strong)
  {
    uint64_t v5 = *(void *)(v3 + 8);
    id v8 = (id)Strong;
    uint64_t ObjectType = swift_getObjectType(Strong);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v1, ObjectType, v5);
  }

  else
  {
    uint64_t v7 = type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(a1, 1LL, 1LL, v7);
  }

uint64_t sub_10047EC28(uint64_t result, uint64_t a2, char a3, char a4)
{
  uint64_t v7 = result;
  if ((a3 & 1) != 0) {
    uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))((swift_isaMask & *v4) + 0x118LL))(0LL, result, a2);
  }
  if ((a4 & 1) != 0) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))((swift_isaMask & *v4) + 0x118LL))(1LL, v7, a2);
  }
  return result;
}

uint64_t sub_10047ED78(char a1, uint64_t a2, uint64_t a3)
{
  int v6 = a1 & 1;
  uint64_t v7 = type metadata accessor for IDSGroupEncryptionControllerParticipantKeyRecoveryState(0LL);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v12 = sub_10047EEEC(v3, a2, a3);
  char v13 = sub_10047F0DC(v3, a2, a3);
  BOOL v14 = sub_10047F2CC(v3, a2, a3);
  uint64_t result = sub_10040DC6C(v6, 1);
  if ((result & 1) == 0 || (v13 & 1) == 0 || v14)
  {
    uint64_t result = sub_10040DC6C(v6, 0);
    if ((result & 1) != 0)
    {
      if ((v12 & 1) != 0)
      {
        if (!v14) {
          return result;
        }
LABEL_9:
        BOOL v16 = 1;
        if ((v13 & 1) == 0)
        {
LABEL_10:
          BOOL v17 = sub_10040DC6C(v6, 1);
LABEL_13:
          *(void *)uint64_t v11 = a2;
          *((void *)v11 + 1) = a3;
          v11[16] = v16;
          v11[17] = v17;
          swift_storeEnumTagMultiPayload(v11, v7, 0LL);
          id v18 = *(void (**)(char *, __n128))((swift_isaMask & *v3) + 0xF0LL);
          __n128 v19 = swift_bridgeObjectRetain(a3);
          v18(v11, v19);
          return sub_10047F504();
        }

uint64_t sub_10047EEEC(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for IDSGroupEncryptionControllerParticipantKeyRecoveryRequest(0LL);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (uint64_t *)((char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v11, v12);
  BOOL v14 = (char *)&v29 - v13;
  uint64_t v15 = type metadata accessor for IDSGroupEncryptionControllerParticipantKeyRecoveryState(0LL);
  uint64_t v18 = __chkstk_darwin(v16, v17);
  uint64_t v20 = (char *)&v29 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(uint64_t))((swift_isaMask & *a1) + 0xE8LL))(v18);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v20, v15);
  if (!EnumCaseMultiPayload)
  {
    uint64_t v26 = *((void *)v20 + 1);
    if (v20[16] == 1)
    {
      if (*(void *)v20 == a2 && v26 == a3)
      {
        swift_bridgeObjectRelease(a3);
        char v25 = 1;
      }

      else
      {
        char v25 = _stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v20, *((void *)v20 + 1), a2, a3, 0LL);
        swift_bridgeObjectRelease(v26);
      }

      return v25 & 1;
    }

    swift_bridgeObjectRelease(*((void *)v20 + 1));
LABEL_17:
    char v25 = 0;
    return v25 & 1;
  }

  if (EnumCaseMultiPayload != 1) {
    goto LABEL_17;
  }
  sub_100481808((uint64_t)v20, (uint64_t)v14);
  int v22 = v14[*(int *)(v6 + 28)];
  sub_1003F5FC8( (uint64_t)v14,  (uint64_t)v10,  type metadata accessor for IDSGroupEncryptionControllerParticipantKeyRecoveryRequest);
  if (v22 == 1)
  {
    uint64_t v23 = v10[1];
    if (*v10 == a2 && v23 == a3) {
      char v25 = 1;
    }
    else {
      char v25 = _stringCompareWithSmolCheck(_:_:expecting:)(*v10, v23, a2, a3, 0LL);
    }
  }

  else
  {
    char v25 = 0;
  }

  sub_1003F6050((uint64_t)v14, type metadata accessor for IDSGroupEncryptionControllerParticipantKeyRecoveryRequest);
  sub_1003F6050((uint64_t)v10, type metadata accessor for IDSGroupEncryptionControllerParticipantKeyRecoveryRequest);
  return v25 & 1;
}

uint64_t sub_10047F0DC(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for IDSGroupEncryptionControllerParticipantKeyRecoveryRequest(0LL);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (uint64_t *)((char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v11, v12);
  BOOL v14 = (char *)&v29 - v13;
  uint64_t v15 = type metadata accessor for IDSGroupEncryptionControllerParticipantKeyRecoveryState(0LL);
  uint64_t v18 = __chkstk_darwin(v16, v17);
  uint64_t v20 = (char *)&v29 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(uint64_t))((swift_isaMask & *a1) + 0xE8LL))(v18);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v20, v15);
  if (!EnumCaseMultiPayload)
  {
    uint64_t v26 = *((void *)v20 + 1);
    if (v20[17] == 1)
    {
      if (*(void *)v20 == a2 && v26 == a3)
      {
        swift_bridgeObjectRelease(a3);
        char v25 = 1;
      }

      else
      {
        char v25 = _stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v20, *((void *)v20 + 1), a2, a3, 0LL);
        swift_bridgeObjectRelease(v26);
      }

      return v25 & 1;
    }

    swift_bridgeObjectRelease(*((void *)v20 + 1));
LABEL_17:
    char v25 = 0;
    return v25 & 1;
  }

  if (EnumCaseMultiPayload != 1) {
    goto LABEL_17;
  }
  sub_100481808((uint64_t)v20, (uint64_t)v14);
  int v22 = v14[*(int *)(v6 + 32)];
  sub_1003F5FC8( (uint64_t)v14,  (uint64_t)v10,  type metadata accessor for IDSGroupEncryptionControllerParticipantKeyRecoveryRequest);
  if (v22 == 1)
  {
    uint64_t v23 = v10[1];
    if (*v10 == a2 && v23 == a3) {
      char v25 = 1;
    }
    else {
      char v25 = _stringCompareWithSmolCheck(_:_:expecting:)(*v10, v23, a2, a3, 0LL);
    }
  }

  else
  {
    char v25 = 0;
  }

  sub_1003F6050((uint64_t)v14, type metadata accessor for IDSGroupEncryptionControllerParticipantKeyRecoveryRequest);
  sub_1003F6050((uint64_t)v10, type metadata accessor for IDSGroupEncryptionControllerParticipantKeyRecoveryRequest);
  return v25 & 1;
}

BOOL sub_10047F2CC(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v35 = a3;
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for IDSGroupEncryptionControllerParticipantKeyRecoveryRequest(0LL);
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16, v17);
  uint64_t v19 = (uint64_t *)((char *)&v34 - v18);
  uint64_t v20 = type metadata accessor for IDSGroupEncryptionControllerParticipantKeyRecoveryState(0LL);
  uint64_t v23 = __chkstk_darwin(v21, v22);
  char v25 = (char *)&v34 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(uint64_t))((swift_isaMask & *a1) + 0xE8LL))(v23);
  if (swift_getEnumCaseMultiPayload(v25, v20) != 1)
  {
    uint64_t v31 = type metadata accessor for IDSGroupEncryptionControllerParticipantKeyRecoveryState;
    uint64_t v30 = (uint64_t)v25;
    goto LABEL_9;
  }

  sub_100481808((uint64_t)v25, (uint64_t)v19);
  uint64_t v26 = v19[1];
  if (*v19 == a2 && v26 == v35)
  {
    uint64_t v29 = sub_1003F5FC8( (uint64_t)v19,  (uint64_t)v15,  type metadata accessor for IDSGroupEncryptionControllerParticipantKeyRecoveryRequest);
  }

  else
  {
    char v28 = _stringCompareWithSmolCheck(_:_:expecting:)(*v19, v26, a2, v35, 0LL);
    uint64_t v29 = sub_1003F5FC8( (uint64_t)v19,  (uint64_t)v15,  type metadata accessor for IDSGroupEncryptionControllerParticipantKeyRecoveryRequest);
    if ((v28 & 1) == 0)
    {
      sub_1003F6050((uint64_t)v15, type metadata accessor for IDSGroupEncryptionControllerParticipantKeyRecoveryRequest);
      uint64_t v30 = (uint64_t)v19;
      uint64_t v31 = type metadata accessor for IDSGroupEncryptionControllerParticipantKeyRecoveryRequest;
LABEL_9:
      sub_1003F6050(v30, v31);
      return 0LL;
    }
  }

  Date.init()(v29);
  double v33 = Date.timeIntervalSince(_:)(&v15[*(int *)(v11 + 24)]);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
  sub_1003F6050((uint64_t)v15, type metadata accessor for IDSGroupEncryptionControllerParticipantKeyRecoveryRequest);
  sub_1003F6050((uint64_t)v19, type metadata accessor for IDSGroupEncryptionControllerParticipantKeyRecoveryRequest);
  return v33 > 3.0;
}

uint64_t sub_10047F504()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v3, v4);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t result = __chkstk_darwin(v9, v10);
  __n128 v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((v0[OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_hasScheduledKeyRecovery] & 1) == 0)
  {
    v0[OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_hasScheduledKeyRecovery] = 1;
    uint64_t v19 = *(void *)&v0[OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_q];
    uint64_t v14 = swift_allocObject(&unk_100906CD0, 24LL, 7LL);
    *(void *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = v0;
    aBlock[4] = sub_1004817E8;
    uint64_t v22 = v14;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1003F8400;
    aBlock[3] = &unk_100906CE8;
    uint64_t v15 = _Block_copy(aBlock);
    static DispatchQoS.unspecified.getter(v0);
    uint64_t v20 = _swiftEmptyArrayStorage;
    uint64_t v16 = sub_10040A2B0( (unint64_t *)&unk_1009BAC40,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v17 = sub_1003F5CB4((uint64_t *)&unk_1009B9870);
    uint64_t v18 = sub_1004021DC((unint64_t *)&qword_1009BAC50, (uint64_t *)&unk_1009B9870);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v20, v17, v18, v1, v16);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v13, v6, v15);
    _Block_release(v15);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v6, v1);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
    return swift_release(v22);
  }

  return result;
}

uint64_t sub_10047F6FC(void *a1)
{
  uint64_t v2 = type metadata accessor for IDSGroupEncryptionControllerParticipantKeyRecoveryRequest(0LL);
  __chkstk_darwin(v3, v4);
  uint64_t v6 = (uint64_t *)((char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v7 = type metadata accessor for IDSGroupEncryptionControllerParticipantKeyRecoveryState(0LL);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v12, v13);
  uint64_t v16 = (char *)&v25 - v15;
  *((_BYTE *)a1 + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_hasScheduledKeyRecovery) = 0;
  (*(void (**)(uint64_t))((swift_isaMask & *a1) + 0xE8LL))(v14);
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v16, v7);
  if ((_DWORD)EnumCaseMultiPayload)
  {
    uint64_t v18 = type metadata accessor for IDSGroupEncryptionControllerParticipantKeyRecoveryState;
    uint64_t v19 = (uint64_t)v16;
  }

  else
  {
    uint64_t v20 = *(void *)v16;
    uint64_t v21 = *((void *)v16 + 1);
    char v22 = v16[16];
    char v23 = v16[17];
    Date.init()(EnumCaseMultiPayload);
    *uint64_t v6 = v20;
    v6[1] = v21;
    v6[2] = 0LL;
    *((_BYTE *)v6 + *(int *)(v2 + 28)) = v22;
    *((_BYTE *)v6 + *(int *)(v2 + swift_bridgeObjectRelease(*(void *)(v0 + 32)) = v23;
    sub_1003F5FC8( (uint64_t)v6,  (uint64_t)v11,  type metadata accessor for IDSGroupEncryptionControllerParticipantKeyRecoveryRequest);
    swift_storeEnumTagMultiPayload(v11, v7, 1LL);
    (*(void (**)(char *))((swift_isaMask & *a1) + 0xF0LL))(v11);
    (*(void (**)(void *))((swift_isaMask & *a1) + 0x148LL))(v6);
    uint64_t v19 = (uint64_t)v6;
    uint64_t v18 = type metadata accessor for IDSGroupEncryptionControllerParticipantKeyRecoveryRequest;
  }

  return sub_1003F6050(v19, v18);
}

void sub_10047F8A8(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_delegate;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_delegate);
  if (Strong)
  {
    uint64_t v5 = *(void *)(v3 + 8);
    id v7 = (id)Strong;
    uint64_t ObjectType = swift_getObjectType(Strong);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 32))(a1, v1, ObjectType, v5);
  }

void sub_10047F92C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v72 = type metadata accessor for IDSGroupEncryptionControllerParticipantKeyRecoveryState(0LL);
  __chkstk_darwin(v7, v8);
  uint64_t v71 = (char *)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v70 = type metadata accessor for IDSGroupEncryptionControllerParticipantPreKeyState(0LL);
  __chkstk_darwin(v10, v11);
  __n128 v69 = (char *)&v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v13 = v3;
  swift_bridgeObjectRetain_n(a3, 2LL);
  uint64_t v14 = (char *)v13;
  uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v16 = static os_log_type_t.default.getter();
  BOOL v17 = os_log_type_enabled(v15, v16);
  uint64_t v73 = a1;
  uint64_t v74 = a2;
  if (v17)
  {
    uint64_t v18 = swift_slowAlloc(42LL, -1LL);
    uint64_t v19 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v68 = swift_slowAlloc(64LL, -1LL);
    uint64_t v76 = v68;
    *(_DWORD *)uint64_t v18 = 136315906;
    swift_bridgeObjectRetain(a3);
    uint64_t v75 = sub_1003FFBB0(a2, a3, &v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v18 + 4, v18 + 12);
    swift_bridgeObjectRelease_n(a3, 3LL);
    *(_WORD *)(v18 + 1sub_10040A648(v1 + 2) = 2048;
    uint64_t v20 = *(void *)&v14[OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_participantID];

    uint64_t v75 = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v18 + 14, v18 + 22);

    *(_WORD *)(v18 + 2sub_10040A648(v1 + 2) = 2080;
    uint64_t v21 = *(void *)&v14[OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_allocatedURI];
    unint64_t v22 = *(void *)&v14[OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_allocatedURI + 8];
    swift_bridgeObjectRetain(v22);
    uint64_t v75 = sub_1003FFBB0(v21, v22, &v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v18 + 24, v18 + 32);

    swift_bridgeObjectRelease(v22);
    *(_WORD *)(v18 + 3sub_10040A648(v1 + 2) = 2112;
    char v23 = *(void **)&v14[OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_pushToken];
    uint64_t v75 = (uint64_t)v23;
    id v24 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v18 + 34, v18 + 42);
    void *v19 = v23;

    _os_log_impl((void *)&_mh_execute_header, v15, v16, "%sParticipant %llu: uri=%s; token=%@", (uint8_t *)v18, 0x2Au);
    uint64_t v25 = sub_1003F5CB4(&qword_1009B92C8);
    swift_arrayDestroy(v19, 1LL, v25);
    swift_slowDealloc(v19, -1LL, -1LL);
    uint64_t v26 = v68;
    swift_arrayDestroy(v68, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1LL, -1LL);
    swift_slowDealloc(v18, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(a3, 2LL);
  }

  uint64_t v27 = v14;
  swift_bridgeObjectRetain_n(a3, 2LL);
  char v28 = v27;
  uint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
  os_log_type_t v30 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v31 = swift_slowAlloc(22LL, -1LL);
    uint64_t v32 = swift_slowAlloc(64LL, -1LL);
    uint64_t v76 = v32;
    *(_DWORD *)uint64_t v31 = 136315394;
    swift_bridgeObjectRetain(a3);
    uint64_t v75 = sub_1003FFBB0(v74, a3, &v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v31 + 4, v31 + 12);
    uint64_t v33 = swift_bridgeObjectRelease_n(a3, 3LL);
    *(_WORD *)(v31 + 1sub_10040A648(v1 + 2) = 2080;
    LOBYTE(v75) = (*(uint64_t (**)(uint64_t))((swift_isaMask & *(void *)v28) + 0xB8LL))(v33) & 1;
    uint64_t v34 = String.init<A>(describing:)(&v75, &type metadata for IDSGroupEncryptionControllerParticipantType);
    unint64_t v36 = v35;
    uint64_t v75 = sub_1003FFBB0(v34, v35, &v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v31 + 14, v31 + 22);

    swift_bridgeObjectRelease(v36);
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "%s    typeAccordingToServer: %s", (uint8_t *)v31, 0x16u);
    swift_arrayDestroy(v32, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1LL, -1LL);
    swift_slowDealloc(v31, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a3, 2LL);
  }

  unint64_t v37 = v28;
  swift_bridgeObjectRetain_n(a3, 2LL);
  unint64_t v38 = v37;
  uint64_t v39 = (os_log_s *)Logger.logObject.getter(v38);
  os_log_type_t v40 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v39, v40))
  {
    uint64_t v41 = swift_slowAlloc(22LL, -1LL);
    uint64_t v42 = swift_slowAlloc(64LL, -1LL);
    uint64_t v76 = v42;
    *(_DWORD *)uint64_t v41 = 136315394;
    swift_bridgeObjectRetain(a3);
    uint64_t v75 = sub_1003FFBB0(v74, a3, &v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v41 + 4, v41 + 12);
    uint64_t v43 = swift_bridgeObjectRelease_n(a3, 3LL);
    *(_WORD *)(v41 + 1sub_10040A648(v1 + 2) = 2080;
    uint64_t v44 = v69;
    (*(void (**)(uint64_t))((swift_isaMask & *(void *)v38) + 0xD0LL))(v43);
    uint64_t v45 = String.init<A>(describing:)(v44, v70);
    unint64_t v47 = v46;
    uint64_t v75 = sub_1003FFBB0(v45, v46, &v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v41 + 14, v41 + 22);

    swift_bridgeObjectRelease(v47);
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "%s    preKeyState: %s", (uint8_t *)v41, 0x16u);
    swift_arrayDestroy(v42, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1LL, -1LL);
    swift_slowDealloc(v41, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a3, 2LL);
  }

  uint64_t v48 = v38;
  swift_bridgeObjectRetain_n(a3, 2LL);
  id v49 = v48;
  uint64_t v50 = (os_log_s *)Logger.logObject.getter(v49);
  os_log_type_t v51 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v50, v51))
  {
    uint64_t v52 = swift_slowAlloc(22LL, -1LL);
    uint64_t v53 = swift_slowAlloc(64LL, -1LL);
    uint64_t v76 = v53;
    *(_DWORD *)uint64_t v52 = 136315394;
    swift_bridgeObjectRetain(a3);
    uint64_t v75 = sub_1003FFBB0(v74, a3, &v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v52 + 4, v52 + 12);
    uint64_t v54 = swift_bridgeObjectRelease_n(a3, 3LL);
    *(_WORD *)(v52 + 1sub_10040A648(v1 + 2) = 2080;
    uint64_t v55 = v71;
    (*(void (**)(uint64_t))((swift_isaMask & *(void *)v49) + 0xE8LL))(v54);
    uint64_t v56 = String.init<A>(describing:)(v55, v72);
    unint64_t v58 = v57;
    uint64_t v75 = sub_1003FFBB0(v56, v57, &v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v52 + 14, v52 + 22);

    swift_bridgeObjectRelease(v58);
    _os_log_impl((void *)&_mh_execute_header, v50, v51, "%s    keyRecoveryState: %s", (uint8_t *)v52, 0x16u);
    swift_arrayDestroy(v53, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v53, -1LL, -1LL);
    swift_slowDealloc(v52, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a3, 2LL);
  }

  BOOL v59 = v49;
  swift_bridgeObjectRetain_n(a3, 2LL);
  uint64_t v60 = v59;
  char v61 = (os_log_s *)Logger.logObject.getter(v60);
  os_log_type_t v62 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v61, v62))
  {
    uint64_t v63 = swift_slowAlloc(22LL, -1LL);
    uint64_t v64 = swift_slowAlloc(64LL, -1LL);
    uint64_t v76 = v64;
    *(_DWORD *)uint64_t v63 = 136315394;
    swift_bridgeObjectRetain(a3);
    uint64_t v75 = sub_1003FFBB0(v74, a3, &v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v63 + 4, v63 + 12);
    swift_bridgeObjectRelease_n(a3, 3LL);
    *(_WORD *)(v63 + 1sub_10040A648(v1 + 2) = 2080;
    if (v60[OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_hasScheduledKeyRecovery]) {
      uint64_t v65 = 1702195828LL;
    }
    else {
      uint64_t v65 = 0x65736C6166LL;
    }
    if (v60[OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_hasScheduledKeyRecovery]) {
      unint64_t v66 = 0xE400000000000000LL;
    }
    else {
      unint64_t v66 = 0xE500000000000000LL;
    }
    uint64_t v75 = sub_1003FFBB0(v65, v66, &v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v63 + 14, v63 + 22);

    swift_bridgeObjectRelease(v66);
    _os_log_impl((void *)&_mh_execute_header, v61, v62, "%s    hasScheduledKeyRecvory: %s", (uint8_t *)v63, 0x16u);
    swift_arrayDestroy(v64, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v64, -1LL, -1LL);
    swift_slowDealloc(v63, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a3, 2LL);
  }
}

id sub_100480330()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for IDSGroupEncryptionControllerParticipant(0LL);
  return objc_msgSendSuper2(&v2, "dealloc");
}

id sub_1004803F4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v46 = a5;
  uint64_t v47 = a6;
  uint64_t v44 = a3;
  uint64_t v45 = a4;
  uint64_t v42 = a2;
  uint64_t v43 = a1;
  uint64_t v41 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v7 = *(void *)(v41 - 8);
  __chkstk_darwin(v8, v9);
  __n128 v11 = (char *)v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v13, v14);
  os_log_type_t v16 = (char *)v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v17, v18);
  uint64_t v20 = (char *)v39 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v40 = OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_q;
  v39[1] = sub_10041D3C4(0LL, (unint64_t *)&qword_1009B9830, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v21 = v6;
  static DispatchQoS.unspecified.getter(v21);
  id v49 = _swiftEmptyArrayStorage;
  uint64_t v22 = sub_10040A2B0( &qword_1009B8E20,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v23 = sub_1003F5CB4((uint64_t *)&unk_1009B9840);
  uint64_t v24 = sub_1004021DC((unint64_t *)&qword_1009B8E28, (uint64_t *)&unk_1009B9840);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v49, v23, v24, v12, v22);
  (*(void (**)(char *, void, uint64_t))(v7 + 104))( v11,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v41);
  uint64_t v25 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000035LL,  0x8000000100841520LL,  v20,  v16,  v11,  0LL);
  *(void *)(v39[2] + v40) = v25;
  uint64_t v26 = &v21[OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_delegate];
  *((void *)v26 + 1) = 0LL;
  swift_unknownObjectWeakInit(v26, 0LL);
  v21[OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_typeAccordingToServer] = 1;
  uint64_t v27 = &v21[OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_preKeyState];
  uint64_t v28 = type metadata accessor for IDSGroupEncryptionControllerParticipantPreKeyState(0LL);
  swift_storeEnumTagMultiPayload(v27, v28, 2LL);
  uint64_t v29 = &v21[OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_keyRecoveryState];
  uint64_t v30 = type metadata accessor for IDSGroupEncryptionControllerParticipantKeyRecoveryState(0LL);
  swift_storeEnumTagMultiPayload(v29, v30, 2LL);
  v21[OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_hasScheduledKeyRecovery] = 0;
  uint64_t v31 = v43;
  *((void *)v26 + 1) = v42;
  swift_unknownObjectWeakAssign(v26, v31);
  *(void *)&v21[OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_participantID] = v44;
  uint64_t v32 = v45;
  uint64_t v33 = v46;
  *(void *)&v21[OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_pushToken] = v45;
  uint64_t v34 = &v21[OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_allocatedURI];
  uint64_t v35 = v47;
  *uint64_t v34 = v33;
  v34[1] = v35;
  id v36 = v32;

  unint64_t v37 = (objc_class *)type metadata accessor for IDSGroupEncryptionControllerParticipant(0LL);
  v48.receiver = v21;
  v48.super_class = v37;
  return objc_msgSendSuper2(&v48, "init");
}

uint64_t *sub_1004806D0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v6 + 16LL) & ~(unint64_t)v6));
    swift_retain(v10);
  }

  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v11 = type metadata accessor for Date(0LL);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v11 - 8) + 16LL))(a1, a2, v11);
      swift_storeEnumTagMultiPayload(a1, a3, 1LL);
    }

    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(v5 + 64));
    }

    else
    {
      uint64_t v9 = type metadata accessor for Date(0LL);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v9 - 8) + 16LL))(a1, a2, v9);
      swift_storeEnumTagMultiPayload(a1, a3, 0LL);
    }
  }

  return a1;
}

uint64_t sub_1004807BC(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_getEnumCaseMultiPayload(a1, a2);
  if (result <= 1)
  {
    uint64_t v4 = type metadata accessor for Date(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  }

  return result;
}

void *sub_100480808(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v8 = type metadata accessor for Date(0LL);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 16LL))(a1, a2, v8);
    swift_storeEnumTagMultiPayload(a1, a3, 1LL);
  }

  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    uint64_t v7 = type metadata accessor for Date(0LL);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, a3, 0LL);
  }

  return a1;
}

void *sub_1004808CC(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1003F6050((uint64_t)a1, type metadata accessor for IDSGroupEncryptionControllerParticipantPreKeyState);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v8 = type metadata accessor for Date(0LL);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 16LL))(a1, a2, v8);
      swift_storeEnumTagMultiPayload(a1, a3, 1LL);
    }

    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }

    else
    {
      uint64_t v7 = type metadata accessor for Date(0LL);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, a3, 0LL);
    }
  }

  return a1;
}

void *sub_1004809A8(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v8 = type metadata accessor for Date(0LL);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32LL))(a1, a2, v8);
    swift_storeEnumTagMultiPayload(a1, a3, 1LL);
  }

  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    uint64_t v7 = type metadata accessor for Date(0LL);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32LL))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, a3, 0LL);
  }

  return a1;
}

void *sub_100480A6C(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1003F6050((uint64_t)a1, type metadata accessor for IDSGroupEncryptionControllerParticipantPreKeyState);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v8 = type metadata accessor for Date(0LL);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32LL))(a1, a2, v8);
      swift_storeEnumTagMultiPayload(a1, a3, 1LL);
    }

    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }

    else
    {
      uint64_t v7 = type metadata accessor for Date(0LL);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32LL))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, a3, 0LL);
    }
  }

  return a1;
}

uint64_t sub_100480B48(uint64_t a1)
{
  uint64_t result = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = v4[0];
    swift_initEnumMetadataMultiPayload(a1, 256LL, 2LL, v4);
    return 0LL;
  }

  return result;
}

void *sub_100480BAC(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v14 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v14);
  }

  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    a1[2] = a2[2];
    uint64_t v8 = a3[6];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date(0LL);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL);
    swift_bridgeObjectRetain(v7);
    v12(v9, v10, v11);
    uint64_t v13 = a3[8];
    *((_BYTE *)v4 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    *((_BYTE *)v4 + v1sub_10040A648(v1 + 3) = *((_BYTE *)a2 + v13);
  }

  return v4;
}

uint64_t sub_100480C74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

void *sub_100480CBC(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  uint64_t v7 = a3[6];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL);
  swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10);
  uint64_t v12 = a3[8];
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  *((_BYTE *)a1 + v1sub_10040A648(v1 + 2) = *((_BYTE *)a2 + v12);
  return a1;
}

void *sub_100480D58(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  uint64_t v8 = a3[6];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 24LL))(v9, v10, v11);
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  return a1;
}

uint64_t sub_100480DFC(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = a3[6];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
  uint64_t v10 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v10) = *(_BYTE *)(a2 + v10);
  return a1;
}

void *sub_100480E84(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  uint64_t v8 = a3[6];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40LL))(v9, v10, v11);
  uint64_t v12 = a3[8];
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  *((_BYTE *)a1 + v1sub_10040A648(v1 + 2) = *((_BYTE *)a2 + v12);
  return a1;
}

uint64_t sub_100480F14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100480F20);
}

uint64_t sub_100480F20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for Date(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 24),  a2,  v8);
  }

uint64_t sub_100480F9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100480FA8);
}

uint64_t sub_100480FA8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for Date(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 24),  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_10048101C(uint64_t a1)
{
  v4[0] = &unk_10071BD60;
  v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
  uint64_t result = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    void v4[2] = *(void *)(result - 8) + 64LL;
    v4[3] = &unk_10071BD78;
    void v4[4] = &unk_10071BD78;
    swift_initStructMetadata(a1, 256LL, 5LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

void *sub_1004810A8(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (void *)(v10 + ((v6 + 16LL) & ~(unint64_t)v6));
    swift_retain(v10);
  }

  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v11 = a2[1];
      *a1 = *a2;
      a1[1] = v11;
      a1[2] = a2[2];
      uint64_t v12 = (int *)type metadata accessor for IDSGroupEncryptionControllerParticipantKeyRecoveryRequest(0LL);
      uint64_t v13 = v12[6];
      uint64_t v14 = (char *)a1 + v13;
      uint64_t v15 = (char *)a2 + v13;
      uint64_t v16 = type metadata accessor for Date(0LL);
      __n128 v17 = *(void (**)(char *, char *, uint64_t, __n128))(*(void *)(v16 - 8) + 16LL);
      __n128 v18 = swift_bridgeObjectRetain(v11);
      v17(v14, v15, v16, v18);
      *((_BYTE *)a1 + v12[7]) = *((_BYTE *)a2 + v12[7]);
      *((_BYTE *)a1 + v12[8]) = *((_BYTE *)a2 + v12[8]);
      swift_storeEnumTagMultiPayload(a1, a3, 1LL);
    }

    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(v5 + 64));
    }

    else
    {
      uint64_t v9 = a2[1];
      *a1 = *a2;
      a1[1] = v9;
      *((_WORD *)a1 + 8) = *((_WORD *)a2 + 8);
      swift_bridgeObjectRetain(v9);
      swift_storeEnumTagMultiPayload(a1, a3, 0LL);
    }
  }

  return a1;
}

uint64_t sub_1004811EC(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_getEnumCaseMultiPayload(a1, a2);
  if ((_DWORD)result == 1)
  {
    swift_bridgeObjectRelease(*(void *)(a1 + 8));
    uint64_t v4 = a1 + *(int *)(type metadata accessor for IDSGroupEncryptionControllerParticipantKeyRecoveryRequest(0LL) + 24);
    uint64_t v5 = type metadata accessor for Date(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  }

  else if (!(_DWORD)result)
  {
    return swift_bridgeObjectRelease(*(void *)(a1 + 8));
  }

  return result;
}

void *sub_100481264(void *a1, void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v8 = a2[1];
    *a1 = *a2;
    a1[1] = v8;
    a1[2] = a2[2];
    uint64_t v9 = (int *)type metadata accessor for IDSGroupEncryptionControllerParticipantKeyRecoveryRequest(0LL);
    uint64_t v10 = v9[6];
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    uint64_t v13 = type metadata accessor for Date(0LL);
    uint64_t v14 = *(void (**)(char *, char *, uint64_t, __n128))(*(void *)(v13 - 8) + 16LL);
    __n128 v15 = swift_bridgeObjectRetain(v8);
    v14(v11, v12, v13, v15);
    *((_BYTE *)a1 + v9[7]) = *((_BYTE *)a2 + v9[7]);
    *((_BYTE *)a1 + v9[8]) = *((_BYTE *)a2 + v9[8]);
    swift_storeEnumTagMultiPayload(a1, a3, 1LL);
  }

  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    *((_WORD *)a1 + 8) = *((_WORD *)a2 + 8);
    swift_bridgeObjectRetain(v7);
    swift_storeEnumTagMultiPayload(a1, a3, 0LL);
  }

  return a1;
}

void *sub_100481380(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1003F6050((uint64_t)a1, type metadata accessor for IDSGroupEncryptionControllerParticipantKeyRecoveryState);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      *a1 = *a2;
      uint64_t v8 = a2[1];
      a1[1] = v8;
      a1[2] = a2[2];
      uint64_t v9 = (int *)type metadata accessor for IDSGroupEncryptionControllerParticipantKeyRecoveryRequest(0LL);
      uint64_t v10 = v9[6];
      uint64_t v11 = (char *)a1 + v10;
      uint64_t v12 = (char *)a2 + v10;
      uint64_t v13 = type metadata accessor for Date(0LL);
      uint64_t v14 = *(void (**)(char *, char *, uint64_t, __n128))(*(void *)(v13 - 8) + 16LL);
      __n128 v15 = swift_bridgeObjectRetain(v8);
      v14(v11, v12, v13, v15);
      *((_BYTE *)a1 + v9[7]) = *((_BYTE *)a2 + v9[7]);
      *((_BYTE *)a1 + v9[8]) = *((_BYTE *)a2 + v9[8]);
      swift_storeEnumTagMultiPayload(a1, a3, 1LL);
    }

    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }

    else
    {
      *a1 = *a2;
      uint64_t v7 = a2[1];
      a1[1] = v7;
      *((_BYTE *)a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *((_BYTE *)a2 + 16);
      *((_BYTE *)a1 + 17) = *((_BYTE *)a2 + 17);
      swift_bridgeObjectRetain(v7);
      swift_storeEnumTagMultiPayload(a1, a3, 0LL);
    }
  }

  return a1;
}

void *sub_1004814CC(void *a1, void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
    int v6 = (int *)type metadata accessor for IDSGroupEncryptionControllerParticipantKeyRecoveryRequest(0LL);
    uint64_t v7 = v6[6];
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for Date(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
    *((_BYTE *)a1 + v6[7]) = *((_BYTE *)a2 + v6[7]);
    *((_BYTE *)a1 + v6[8]) = *((_BYTE *)a2 + v6[8]);
    swift_storeEnumTagMultiPayload(a1, a3, 1LL);
  }

  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  return a1;
}

void *sub_1004815A0(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1003F6050((uint64_t)a1, type metadata accessor for IDSGroupEncryptionControllerParticipantKeyRecoveryState);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = a2[2];
      int v6 = (int *)type metadata accessor for IDSGroupEncryptionControllerParticipantKeyRecoveryRequest(0LL);
      uint64_t v7 = v6[6];
      uint64_t v8 = (char *)a1 + v7;
      uint64_t v9 = (char *)a2 + v7;
      uint64_t v10 = type metadata accessor for Date(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
      *((_BYTE *)a1 + v6[7]) = *((_BYTE *)a2 + v6[7]);
      *((_BYTE *)a1 + v6[8]) = *((_BYTE *)a2 + v6[8]);
      swift_storeEnumTagMultiPayload(a1, a3, 1LL);
    }

    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }
  }

  return a1;
}

uint64_t sub_10048168C(uint64_t a1)
{
  v4[0] = &unk_10071BDC8;
  uint64_t result = type metadata accessor for IDSGroupEncryptionControllerParticipantKeyRecoveryRequest(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    swift_initEnumMetadataMultiPayload(a1, 256LL, 2LL, v4);
    return 0LL;
  }

  return result;
}

uint64_t sub_1004816FC()
{
  return type metadata accessor for IDSGroupEncryptionControllerParticipant(0LL);
}

uint64_t sub_100481704(uint64_t a1)
{
  v5[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v5[1] = &unk_10071BE38;
  v5[2] = (char *)&value witness table for Builtin.Int64 + 64;
  v5[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v5[4] = &unk_10071BD60;
  v5[5] = &unk_10071BD78;
  uint64_t result = type metadata accessor for IDSGroupEncryptionControllerParticipantPreKeyState(319LL);
  if (v3 <= 0x3F)
  {
    v5[6] = *(void *)(result - 8) + 64LL;
    uint64_t result = type metadata accessor for IDSGroupEncryptionControllerParticipantKeyRecoveryState(319LL);
    if (v4 <= 0x3F)
    {
      v5[7] = *(void *)(result - 8) + 64LL;
      v5[8] = &unk_10071BD78;
      return swift_updateClassMetadata2(a1, 256LL, 9LL, v5, a1 + 80);
    }
  }

  return result;
}

uint64_t sub_1004817C4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1004817E8()
{
  return sub_10047F6FC(*(void **)(v0 + 16));
}

uint64_t sub_1004817F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_10040A648(v1 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100481800(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100481808(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for IDSGroupEncryptionControllerParticipantKeyRecoveryRequest(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t UUID.getData.getter()
{
  uint64_t v9 = UUID.uuid.getter();
  char v10 = v0;
  char v11 = v1;
  char v12 = v2;
  char v13 = v3;
  char v14 = v4;
  char v15 = v5;
  char v16 = v6;
  char v17 = v7;
  return sub_100420C58((uint64_t)&v9, (uint64_t)&v18);
}

void static UUID.initFrom(data:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_100481974@<X0>(uint64_t a1@<X1>, int a2@<W8>)
{
  if (BYTE6(v4) == 16LL)
  {
    if (a2)
    {
      if (a2 == 1)
      {
        if ((int)v3 <= v3 >> 32)
        {
          uint64_t v5 = sub_1004028CC(v3, v4);
          uint64_t v6 = ((uint64_t (*)(uint64_t))__DataStorage._bytes.getter)(v5);
          if (!v6)
          {
LABEL_8:
            __DataStorage._length.getter();
            sub_100481C1C(v6, v8, v2);
            return sub_100402A84(v3, v4);
          }

          uint64_t v7 = __DataStorage._offset.getter();
          if (!__OFSUB__((int)v3, v7))
          {
            v6 += (int)v3 - v7;
            goto LABEL_8;
          }

          goto LABEL_18;
        }

        __break(1u);
LABEL_17:
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
      }

      uint64_t v14 = v4 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v15 = *(void *)(v3 + 16);
      uint64_t v16 = *(void *)(v3 + 24);
      swift_retain(v3);
      uint64_t v17 = swift_retain(v4 & 0x3FFFFFFFFFFFFFFFLL);
      uint64_t v18 = ((uint64_t (*)(uint64_t))__DataStorage._bytes.getter)(v17);
      if (v18)
      {
        uint64_t v19 = __DataStorage._offset.getter();
        if (__OFSUB__(v15, v19)) {
          goto LABEL_19;
        }
        v18 += v15 - v19;
      }

      if (__OFSUB__(v16, v15)) {
        goto LABEL_17;
      }
      __DataStorage._length.getter();
      sub_100481C1C(v18, v20, v2);
      swift_release(v14);
      return swift_release(v3);
    }

    else
    {
      uint64_t v21 = v3;
      __int16 v22 = v4;
      char v23 = BYTE2(v4);
      char v24 = BYTE3(v4);
      char v25 = BYTE4(v4);
      char v26 = BYTE5(v4);
      id v11 = [objc_allocWithZone(NSUUID) initWithUUIDBytes:&v21];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v11);

      uint64_t v13 = type metadata accessor for UUID(0LL, v12);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))( v2,  0LL,  1LL,  v13);
    }
  }

  else
  {
    uint64_t v10 = type metadata accessor for UUID(0LL, a1);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))( v2,  1LL,  1LL,  v10);
  }

uint64_t sub_100481C1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (a1)
  {
    id v4 = [objc_allocWithZone(NSUUID) initWithUUIDBytes:a1];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v4);

    uint64_t v6 = type metadata accessor for UUID(0LL, v5);
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL);
    uint64_t v8 = a3;
    uint64_t v9 = 0LL;
  }

  else
  {
    uint64_t v6 = type metadata accessor for UUID(0LL, a2);
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL);
    uint64_t v8 = a3;
    uint64_t v9 = 1LL;
  }

  return v7(v8, v9, 1LL, v6);
}

id sub_100481CA8(uint64_t a1, uint64_t a2)
{
  id result = (id)im_primary_queue(a1, a2);
  if (!result) {
    __break(1u);
  }
  return result;
}

void registerSysdiagnoseBlock(title:queue:block:)( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v10[4] = a4;
  uint64_t v11 = a5;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256LL;
  v10[2] = sub_100481D88;
  v10[3] = &unk_100906D20;
  uint64_t v7 = _Block_copy(v10);
  uint64_t v8 = v11;
  swift_retain(a5);
  swift_release(v8);
  NSString v9 = String._bridgeToObjectiveC()();
  sub_100301AD8(v7, (uint64_t)v9, a3);

  _Block_release(v7);
}

id sub_100481D88(uint64_t a1)
{
  char v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = swift_retain(v2);
  v1(v3);
  uint64_t v5 = v4;
  swift_release(v2);
  if (v5)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }

  else
  {
    NSString v6 = 0LL;
  }

  return v6;
}

uint64_t sub_100481DF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_10040A648(v1 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100481E04(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

unint64_t sub_100481E0C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_1003F5CB4(&qword_1009BB5E0);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  NSString v6 = (void **)(a1 + 48);
  while (1)
  {
    uint64_t v7 = (uint64_t)*(v6 - 2);
    unint64_t v8 = (unint64_t)*(v6 - 1);
    NSString v9 = *v6;
    sub_1004028CC(v7, v8);
    id v10 = v9;
    unint64_t result = sub_100485350(v7, v8);
    if ((v12 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v13 = (uint64_t *)(v4[6] + 16 * result);
    *uint64_t v13 = v7;
    v13[1] = v8;
    *(void *)(v4[7] + 8 * result) = v10;
    uint64_t v14 = v4[2];
    BOOL v15 = __OFADD__(v14, 1LL);
    uint64_t v16 = v14 + 1;
    if (v15) {
      goto LABEL_11;
    }
    void v4[2] = v16;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

char *sub_100481F28(void *a1, uint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  return sub_100481F68(a1, a2);
}

char *sub_100481F68(void *a1, uint64_t a2)
{
  id v5 = v2;
  sub_10048ADB4(6u);
  uint64_t v6 = OBJC_IVAR____TtC17identityservicesd39IDSGlobalLinkP2PKeyNegotiatorController_lock;
  uint64_t v7 = sub_1003F5CB4((uint64_t *)&unk_1009B9860);
  uint64_t v8 = swift_allocObject(v7, 20LL, 7LL);
  *(_DWORD *)(v8 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
  *(void *)&v5[v6] = v8;
  *(void *)&v5[OBJC_IVAR____TtC17identityservicesd39IDSGlobalLinkP2PKeyNegotiatorController_continuationsForPreKeys] = _swiftEmptyArrayStorage;
  uint64_t v9 = OBJC_IVAR____TtC17identityservicesd39IDSGlobalLinkP2PKeyNegotiatorController_negotiators;
  *(void *)&v5[v9] = sub_100481E0C((uint64_t)_swiftEmptyArrayStorage);
  id v10 = (uint64_t *)&v5[OBJC_IVAR____TtC17identityservicesd39IDSGlobalLinkP2PKeyNegotiatorController_stopListening];
  *id v10 = 0LL;
  v10[1] = 0LL;
  *(void *)&v5[OBJC_IVAR____TtC17identityservicesd39IDSGlobalLinkP2PKeyNegotiatorController_identityProvider] = a1;
  *(void *)&v5[OBJC_IVAR____TtC17identityservicesd39IDSGlobalLinkP2PKeyNegotiatorController_metadataProvider] = a2;
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  *id v10 = 0LL;
  v10[1] = 0LL;
  swift_unknownObjectRetain(a1, v13);
  swift_unknownObjectRetain(a2, v14);
  sub_100482178(v11, v12);

  v30.receiver = v5;
  v30.super_class = (Class)type metadata accessor for IDSGlobalLinkP2PKeyNegotiatorController(0LL);
  id v15 = objc_msgSendSuper2(&v30, "init");
  uint64_t v16 = swift_allocObject(&unk_100906D58, 24LL, 7LL);
  swift_unknownObjectWeakInit(v16 + 16, v15);
  v28[4] = sub_1004821E8;
  uint64_t v29 = v16;
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 1107296256LL;
  v28[2] = sub_1003F8400;
  v28[3] = &unk_100906D70;
  uint64_t v17 = _Block_copy(v28);
  uint64_t v18 = v29;
  uint64_t v19 = (char *)v15;
  swift_release(v18);
  id v20 = [a1 addPreKeyChangeHandler:v17];

  swift_unknownObjectRelease(a1, v21);
  swift_unknownObjectRelease(a2, v22);
  _Block_release(v17);
  uint64_t v23 = swift_allocObject(&unk_100906DA8, 24LL, 7LL);
  *(void *)(v23 + swift_unknownObjectWeakDestroy(v0 + 16) = v20;
  char v24 = (uint64_t (**)())&v19[OBJC_IVAR____TtC17identityservicesd39IDSGlobalLinkP2PKeyNegotiatorController_stopListening];
  uint64_t v26 = *(void *)&v19[OBJC_IVAR____TtC17identityservicesd39IDSGlobalLinkP2PKeyNegotiatorController_stopListening];
  uint64_t v25 = *(void *)&v19[OBJC_IVAR____TtC17identityservicesd39IDSGlobalLinkP2PKeyNegotiatorController_stopListening + 8];
  *char v24 = sub_10048228C;
  v24[1] = (uint64_t (*)())v23;
  sub_100482178(v26, v25);
  return v19;
}

uint64_t sub_100482178(uint64_t result, uint64_t a2)
{
  if (result) {
    return swift_release(a2);
  }
  return result;
}

uint64_t type metadata accessor for IDSGlobalLinkP2PKeyNegotiatorController(uint64_t a1)
{
  uint64_t result = qword_1009C5700;
  if (!qword_1009C5700) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for IDSGlobalLinkP2PKeyNegotiatorController);
  }
  return result;
}

uint64_t sub_1004821C4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_1004821E8()
{
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong(v0 + 16);
  if (Strong)
  {
    uint64_t v2 = Strong;
    (*(void (**)(void))((swift_isaMask & *Strong) + 0x130LL))();
  }

uint64_t sub_100482250(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_10040A648(v1 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100482260(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100482268()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10048228C()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16LL))();
}

id sub_1004822E4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(a1);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    id v5 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v6 = swift_slowAlloc(32LL, -1LL);
    uint64_t v17 = v6;
    *(_DWORD *)id v5 = 136315138;
    uint64_t v16 = sub_1003FFBB0(0x74696E696564LL, 0xE600000000000000LL, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v5 + 4, v5 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%s: deinitializing", v5, 0xCu);
    swift_arrayDestroy(v6, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1LL, -1LL);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v7 = *(void (**)(void))&v1[OBJC_IVAR____TtC17identityservicesd39IDSGlobalLinkP2PKeyNegotiatorController_stopListening];
  if (v7)
  {
    uint64_t v8 = *(void *)&v1[OBJC_IVAR____TtC17identityservicesd39IDSGlobalLinkP2PKeyNegotiatorController_stopListening + 8];
    uint64_t v9 = swift_retain(v8);
    id v10 = (os_log_s *)Logger.logObject.getter(v9);
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v13 = swift_slowAlloc(32LL, -1LL);
      uint64_t v17 = v13;
      *(_DWORD *)uint64_t v12 = 136315138;
      uint64_t v16 = sub_1003FFBB0(0x74696E696564LL, 0xE600000000000000LL, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v12 + 4, v12 + 12);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%s: stop listening", v12, 0xCu);
      swift_arrayDestroy(v13, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1LL, -1LL);
      swift_slowDealloc(v12, -1LL, -1LL);
    }

    v7();
    sub_100482178((uint64_t)v7, v8);
  }

  uint64_t v14 = (objc_class *)type metadata accessor for IDSGlobalLinkP2PKeyNegotiatorController(0LL);
  v18.receiver = v2;
  v18.super_class = v14;
  return objc_msgSendSuper2(&v18, "dealloc");
}

uint64_t sub_10048262C(uint64_t a1, unint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v5 = v4;
  swift_bridgeObjectRetain_n(a2, 2LL);
  id v10 = a3;
  swift_bridgeObjectRetain_n(a4, 2LL);
  id v11 = v10;
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.default.getter();
  uint64_t v140 = a1;
  uint64_t v141 = v5;
  uint64_t v146 = a4;
  uint64_t v138 = v11;
  uint64_t v139 = a2;
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = v11;
    uint64_t v15 = swift_slowAlloc(42LL, -1LL);
    uint64_t v16 = (void *)swift_slowAlloc(8LL, -1LL);
    id v143 = (id)swift_slowAlloc(96LL, -1LL);
    v151[0] = (uint64_t)v143;
    *(_DWORD *)uint64_t v15 = 136315906;
    uint64_t v149 = sub_1003FFBB0(0xD000000000000038LL, 0x8000000100841930LL, v151);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, v150, v15 + 4, v15 + 12);
    *(_WORD *)(v15 + 1sub_10040A648(v1 + 2) = 2080;
    swift_bridgeObjectRetain(a2);
    uint64_t v149 = sub_1003FFBB0(a1, a2, v151);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, v150, v15 + 14, v15 + 22);
    swift_bridgeObjectRelease_n(a2, 3LL);
    *(_WORD *)(v15 + 2sub_10040A648(v1 + 2) = 2112;
    uint64_t v149 = (uint64_t)v14;
    id v17 = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, v150, v15 + 24, v15 + 32);
    *uint64_t v16 = v14;

    *(_WORD *)(v15 + 3sub_10040A648(v1 + 2) = 2080;
    uint64_t v5 = v141;
    unint64_t v18 = sub_100485210();
    swift_bridgeObjectRetain(v146);
    uint64_t v19 = Array.description.getter(v146, v18);
    unint64_t v21 = v20;
    swift_bridgeObjectRelease(v146);
    uint64_t v149 = sub_1003FFBB0(v19, v21, v151);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, v150, v15 + 34, v15 + 42);
    swift_bridgeObjectRelease_n(v146, 2LL);
    swift_bridgeObjectRelease(v21);
    _os_log_impl( (void *)&_mh_execute_header,  v12,  v13,  "%s: forSession:%s localPushToken:%@ remotePushToken:%s",  (uint8_t *)v15,  0x2Au);
    uint64_t v22 = sub_1003F5CB4(&qword_1009B92C8);
    swift_arrayDestroy(v16, 1LL, v22);
    swift_slowDealloc(v16, -1LL, -1LL);
    swift_arrayDestroy(v143, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v143, -1LL, -1LL);
    swift_slowDealloc(v15, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(a4, 2LL);

    swift_bridgeObjectRelease_n(a2, 2LL);
  }

  uint64_t v23 = *(void **)(v5 + OBJC_IVAR____TtC17identityservicesd39IDSGlobalLinkP2PKeyNegotiatorController_identityProvider);
  id v24 = [v23 localPublicPreKey];
  if (!v24)
  {
    uint64_t v67 = (os_log_s *)Logger.logObject.getter(0LL);
    os_log_type_t v68 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v67, v68))
    {
      __n128 v69 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v70 = swift_slowAlloc(32LL, -1LL);
      v151[0] = v70;
      *(_DWORD *)__n128 v69 = 136315138;
      uint64_t v149 = sub_1003FFBB0(0xD000000000000038LL, 0x8000000100841930LL, v151);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, v150, v69 + 4, v69 + 12);
      _os_log_impl((void *)&_mh_execute_header, v67, v68, "%s: no localPublicPreKey ", v69, 0xCu);
      swift_arrayDestroy(v70, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v70, -1LL, -1LL);
      swift_slowDealloc(v69, -1LL, -1LL);
    }

    return 0LL;
  }

  uint64_t v25 = v24;
  id v26 = [v23 localPrivatePreKey];
  if (!v26)
  {
    uint64_t v71 = (os_log_s *)Logger.logObject.getter(0LL);
    os_log_type_t v72 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v71, v72))
    {
      uint64_t v73 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v74 = swift_slowAlloc(32LL, -1LL);
      v151[0] = v74;
      *(_DWORD *)uint64_t v73 = 136315138;
      uint64_t v149 = sub_1003FFBB0(0xD000000000000038LL, 0x8000000100841930LL, v151);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, v150, v73 + 4, v73 + 12);
      _os_log_impl((void *)&_mh_execute_header, v71, v72, "%s: no localPrivatePreKey", v73, 0xCu);
      swift_arrayDestroy(v74, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v74, -1LL, -1LL);
      swift_slowDealloc(v73, -1LL, -1LL);
    }

    return 0LL;
  }

  uint64_t v27 = v26;
  id v136 = v25;
  id v133 = v27;
  uint64_t v28 = (void *)nullsub_36(v136);
  objc_super v30 = v29;
  uint64_t v31 = v28;
  uint64_t v32 = v30;
  uint64_t v33 = _swiftEmptyArrayStorage;
  uint64_t v34 = sub_100484EEC(0LL, 1LL, 1, _swiftEmptyArrayStorage);
  unint64_t v36 = v34[2];
  unint64_t v35 = v34[3];
  int64_t v37 = v36 + 1;
  if (v36 >= v35 >> 1) {
    goto LABEL_39;
  }
  while (1)
  {
    v34[2] = v37;
    uint64_t v137 = (uint64_t)v34;
    unint64_t v38 = &v34[2 * v36];
    v38[4] = v31;
    v38[5] = v32;
    uint64_t v39 = objc_msgSend(v23, "previousLocalPublicPreKey", v132);
    uint64_t v144 = (unint64_t *)v23;
    if (v39)
    {
      uint64_t v40 = v39;
      id v41 = [v23 previousLocalPrivatePreKey];
      if (v41)
      {
        uint64_t v42 = v41;
        uint64_t v43 = v40;
        unint64_t v36 = v42;
        uint64_t v44 = nullsub_36(v43);
        unint64_t v46 = v45;
        uint64_t v47 = (void *)v137;
        unint64_t isUniquelyReferenced_nonNull_native = *(void *)(v137 + 16);
        unint64_t v48 = *(void *)(v137 + 24);
        unint64_t v50 = isUniquelyReferenced_nonNull_native + 1;
        if (isUniquelyReferenced_nonNull_native >= v48 >> 1) {
LABEL_85:
        }
          uint64_t v47 = sub_100484EEC((void *)(v48 > 1), v50, 1, v47);
        v47[2] = v50;
        uint64_t v137 = (uint64_t)v47;
        os_log_type_t v51 = &v47[2 * isUniquelyReferenced_nonNull_native];
        v51[4] = v44;
        v51[5] = v46;
      }
    }

    v152 = v33;
    uint64_t v52 = v140;
    if (!((unint64_t)v146 >> 62))
    {
      uint64_t v53 = *(void *)((v146 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain(v146);
      __n128 v134 = (void *)v32;
      os_log_type_t v135 = v31;
      if (!v53) {
        break;
      }
      goto LABEL_14;
    }

    uint64_t v85 = v146 < 0 ? v146 : v146 & 0xFFFFFFFFFFFFFF8LL;
    swift_bridgeObjectRetain(v146);
    uint64_t v53 = _CocoaArrayWrapper.endIndex.getter(v85);
    __n128 v134 = (void *)v32;
    os_log_type_t v135 = v31;
    if (!v53) {
      break;
    }
LABEL_14:
    uint64_t v31 = (char *)v146;
    uint64_t v33 = (unint64_t *)(v146 & 0xC000000000000001LL);
    uint64_t v32 = 4LL;
    id v132 = ":remotePublicKey:)";
    while (1)
    {
      int64_t v37 = v32 - 4;
      if (!v33) {
        break;
      }
      id v54 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v32 - 4, v31);
      uint64_t v23 = (void *)(v32 - 3);
      if (__OFADD__(v37, 1LL)) {
        goto LABEL_38;
      }
LABEL_20:
      id v55 = v54;
      uint64_t v56 = (os_log_s *)Logger.logObject.getter(v55);
      os_log_type_t v57 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v56, v57))
      {
        uint64_t v58 = swift_slowAlloc(22LL, -1LL);
        BOOL v59 = (void *)swift_slowAlloc(8LL, -1LL);
        uint64_t v60 = swift_slowAlloc(32LL, -1LL);
        v151[0] = v60;
        *(_DWORD *)uint64_t v58 = 136315394;
        *(void *)(v58 + 4) = sub_1003FFBB0(0xD000000000000038LL, 0x8000000100841930LL, v151);
        *(_WORD *)(v58 + 1sub_10040A648(v1 + 2) = 2112;
        *(void *)(v58 + 14) = v55;
        *BOOL v59 = v55;

        _os_log_impl( (void *)&_mh_execute_header,  v56,  v57,  "%s: getting remotePublicPreKey for push token %@",  (uint8_t *)v58,  0x16u);
        uint64_t v61 = sub_1003F5CB4(&qword_1009B92C8);
        swift_arrayDestroy(v59, 1LL, v61);
        os_log_type_t v62 = v59;
        uint64_t v31 = (char *)v146;
        swift_slowDealloc(v62, -1LL, -1LL);
        swift_arrayDestroy(v60, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v60, -1LL, -1LL);
        swift_slowDealloc(v58, -1LL, -1LL);
      }

      else
      {
      }

      id v63 = [v144 publicKeyForPushToken:v55];
      if (!v63)
      {
        swift_bridgeObjectRelease(v31);
        uint64_t v75 = v152;
        swift_bridgeObjectRelease(v137);
        swift_bridgeObjectRelease(v75);
        id v76 = v55;
        char v77 = (os_log_s *)Logger.logObject.getter(v76);
        os_log_type_t v78 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v77, v78))
        {
          uint64_t v79 = swift_slowAlloc(22LL, -1LL);
          int64_t v80 = (void *)swift_slowAlloc(8LL, -1LL);
          uint64_t v81 = swift_slowAlloc(32LL, -1LL);
          v151[0] = v81;
          *(_DWORD *)uint64_t v79 = 136315394;
          uint64_t v149 = sub_1003FFBB0(0xD000000000000038LL, 0x8000000100841930LL, v151);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, v150, v79 + 4, v79 + 12);
          *(_WORD *)(v79 + 1sub_10040A648(v1 + 2) = 2112;
          uint64_t v149 = (uint64_t)v76;
          id v82 = v76;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, v150, v79 + 14, v79 + 22);
          *int64_t v80 = v76;

          _os_log_impl( (void *)&_mh_execute_header,  v77,  v78,  "%s: no remotePublicPreKey for push token %@",  (uint8_t *)v79,  0x16u);
          uint64_t v83 = sub_1003F5CB4(&qword_1009B92C8);
          swift_arrayDestroy(v80, 1LL, v83);
          swift_slowDealloc(v80, -1LL, -1LL);
          swift_arrayDestroy(v81, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v81, -1LL, -1LL);
          swift_slowDealloc(v79, -1LL, -1LL);
        }

        else
        {
        }

        goto LABEL_55;
      }

      unint64_t v36 = (unint64_t)v63;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v36);
      unint64_t v65 = *(void *)(((unint64_t)v152 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      unint64_t v64 = *(void *)(((unint64_t)v152 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
      if (v65 >= v64 >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v64 > 1, v65 + 1, 1LL);
      }
      uint64_t v66 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v65, v36);
      specialized Array._endMutation()(v66);

      ++v32;
      if (v23 == (void *)v53)
      {
        swift_bridgeObjectRelease(v31);
        uint64_t v84 = v152;
        uint64_t v32 = (uint64_t)v134;
        uint64_t v31 = v135;
        uint64_t v52 = v140;
        goto LABEL_45;
      }
    }

    id v54 = *(id *)&v31[8 * v32];
    uint64_t v23 = (void *)(v32 - 3);
    if (!__OFADD__(v37, 1LL)) {
      goto LABEL_20;
    }
LABEL_38:
    __break(1u);
LABEL_39:
    uint64_t v34 = sub_100484EEC((void *)(v35 > 1), v37, 1, v34);
  }

  swift_bridgeObjectRelease(v146);
  uint64_t v84 = _swiftEmptyArrayStorage;
LABEL_45:
  swift_bridgeObjectRetain(v84);
  sub_100484588(v52, v139, (__SecKey *)v136, (uint64_t)v84);
  uint64_t v87 = v86;
  swift_bridgeObjectRelease(v84);
  if (!v87[2])
  {
    swift_bridgeObjectRelease(v137);
    swift_bridgeObjectRelease(v84);
    uint64_t v98 = swift_bridgeObjectRelease(v87);
    id v99 = (os_log_s *)Logger.logObject.getter(v98);
    os_log_type_t v100 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v99, v100))
    {
      uint64_t v101 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v102 = swift_slowAlloc(32LL, -1LL);
      v151[0] = v102;
      *(_DWORD *)uint64_t v101 = 136315138;
      uint64_t v149 = sub_1003FFBB0(0xD000000000000038LL, 0x8000000100841930LL, v151);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, v150, v101 + 4, v101 + 12);
      _os_log_impl((void *)&_mh_execute_header, v99, v100, "%s: could not build key combos", v101, 0xCu);
      swift_arrayDestroy(v102, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v102, -1LL, -1LL);
      swift_slowDealloc(v101, -1LL, -1LL);
    }

LABEL_55:
    return 0LL;
  }

  uint64_t v88 = OBJC_IVAR____TtC17identityservicesd39IDSGlobalLinkP2PKeyNegotiatorController_lock;
  uint64_t v89 = *(os_unfair_lock_s **)(v141 + OBJC_IVAR____TtC17identityservicesd39IDSGlobalLinkP2PKeyNegotiatorController_lock);
  uint64_t v144 = v87;
  swift_retain(v89);
  os_unfair_lock_lock(v89 + 4);
  swift_release(v89);
  uint64_t v31 = (char *)v87[2];
  if (v31)
  {
    uint64_t v90 = (uint64_t *)(v141 + OBJC_IVAR____TtC17identityservicesd39IDSGlobalLinkP2PKeyNegotiatorController_negotiators);
    swift_bridgeObjectRetain(v87);
    swift_beginAccess(v90, v151, 0LL, 0LL);
    uint64_t v91 = v87 + 5;
    uint64_t v92 = v31;
    do
    {
      uint64_t v93 = *v90;
      if (*(void *)(*v90 + 16))
      {
        uint64_t v95 = *(v91 - 1);
        unint64_t v94 = *v91;
        sub_1004028CC(v95, *v91);
        sub_1004028CC(v95, v94);
        swift_bridgeObjectRetain(v93);
        uint64_t v96 = sub_100485350(v95, v94);
        if ((v97 & 1) != 0)
        {
          id v126 = *(id *)(*(void *)(v93 + 56) + 8 * v96);
          swift_bridgeObjectRelease(v93);
          sub_100402A84(v95, v94);
          swift_bridgeObjectRelease(v137);
          swift_bridgeObjectRelease(v84);
          swift_bridgeObjectRelease_n(v144, 2LL);
          id v103 = v126;
          id v127 = (os_log_s *)Logger.logObject.getter(v103);
          os_log_type_t v128 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v127, v128))
          {
            uint64_t v129 = swift_slowAlloc(22LL, -1LL);
            uint64_t v145 = (void *)swift_slowAlloc(8LL, -1LL);
            uint64_t v147 = swift_slowAlloc(32LL, -1LL);
            uint64_t v149 = v147;
            *(_DWORD *)uint64_t v129 = 136315394;
            uint64_t v148 = sub_1003FFBB0(0xD000000000000038LL, 0x8000000100841930LL, &v149);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, &v149, v129 + 4, v129 + 12);
            *(_WORD *)(v129 + 1sub_10040A648(v1 + 2) = 2112;
            uint64_t v148 = (uint64_t)v103;
            id v130 = v103;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, &v149, v129 + 14, v129 + 22);
            *uint64_t v145 = v103;

            _os_log_impl( (void *)&_mh_execute_header,  v127,  v128,  "%s: already have negotiator: %@",  (uint8_t *)v129,  0x16u);
            uint64_t v131 = sub_1003F5CB4(&qword_1009B92C8);
            swift_arrayDestroy(v145, 1LL, v131);
            swift_slowDealloc(v145, -1LL, -1LL);
            swift_arrayDestroy(v147, 1LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v147, -1LL, -1LL);
            swift_slowDealloc(v129, -1LL, -1LL);
            sub_100402A84(v95, v94);
          }

          else
          {
            sub_100402A84(v95, v94);
          }

          uint64_t v125 = *(os_unfair_lock_s **)(v141 + v88);
          swift_retain(v125);
          os_unfair_lock_unlock(v125 + 4);

LABEL_82:
          swift_release(v125);
          return (uint64_t)v103;
        }

        swift_bridgeObjectRelease(v93);
        sub_100402A84(v95, v94);
        sub_100402A84(v95, v94);
      }

      v91 += 2;
      --v92;
    }

    while (v92);
    swift_bridgeObjectRelease(v144);
  }

  uint64_t v142 = v88;
  type metadata accessor for IDSGlobalLinkP2PKeyNegotiator();
  swift_bridgeObjectRetain(v139);
  id v105 = v138;
  swift_bridgeObjectRetain(v146);
  uint64_t v146 = (uint64_t)sub_10048A5E4(v140, v139, (uint64_t)v105, v137, v146, (uint64_t)v84);
  if (!v31)
  {
LABEL_74:
    swift_bridgeObjectRelease(v144);
    id v103 = (id)v146;
    unint64_t v118 = (os_log_s *)Logger.logObject.getter(v103);
    os_log_type_t v119 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v118, v119))
    {
      uint64_t v120 = swift_slowAlloc(22LL, -1LL);
      unint64_t v121 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v122 = swift_slowAlloc(32LL, -1LL);
      uint64_t v149 = v122;
      *(_DWORD *)uint64_t v120 = 136315394;
      uint64_t v148 = sub_1003FFBB0(0xD000000000000038LL, 0x8000000100841930LL, &v149);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, &v149, v120 + 4, v120 + 12);
      *(_WORD *)(v120 + 1sub_10040A648(v1 + 2) = 2112;
      uint64_t v148 = (uint64_t)v103;
      id v123 = v103;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v148, &v149, v120 + 14, v120 + 22);
      *unint64_t v121 = v103;

      _os_log_impl((void *)&_mh_execute_header, v118, v119, "%s: %@", (uint8_t *)v120, 0x16u);
      uint64_t v124 = sub_1003F5CB4(&qword_1009B92C8);
      swift_arrayDestroy(v121, 1LL, v124);
      swift_slowDealloc(v121, -1LL, -1LL);
      swift_arrayDestroy(v122, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v122, -1LL, -1LL);
      swift_slowDealloc(v120, -1LL, -1LL);
    }

    else
    {
    }

    uint64_t v125 = *(os_unfair_lock_s **)(v141 + v142);
    swift_retain(v125);
    os_unfair_lock_unlock(v125 + 4);

    goto LABEL_82;
  }

  unint64_t v36 = v141 + OBJC_IVAR____TtC17identityservicesd39IDSGlobalLinkP2PKeyNegotiatorController_negotiators;
  uint64_t v33 = v144 + 5;
  while (2)
  {
    uint64_t v44 = *(v33 - 1);
    unint64_t v46 = *v33;
    swift_beginAccess(v36, &v149, 33LL, 0LL);
    sub_1004028CC(v44, v46);
    sub_1004028CC(v44, v46);
    uint64_t v32 = (uint64_t)(id)v146;
    unint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)v36);
    uint64_t v148 = *(void *)v36;
    uint64_t v40 = (void *)v148;
    *(void *)unint64_t v36 = 0x8000000000000000LL;
    unint64_t v50 = sub_100485350(v44, v46);
    unint64_t v48 = v40[2];
    BOOL v110 = (v109 & 1) == 0;
    uint64_t v111 = v48 + v110;
    if (__OFADD__(v48, v110))
    {
      __break(1u);
LABEL_84:
      __break(1u);
      goto LABEL_85;
    }

    char v112 = v109;
    if (v40[3] >= v111)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        uint64_t v40 = (void *)v148;
        if ((v109 & 1) == 0) {
          goto LABEL_70;
        }
        goto LABEL_61;
      }

      sub_100486040();
      uint64_t v40 = (void *)v148;
      if ((v112 & 1) != 0) {
        goto LABEL_61;
      }
LABEL_70:
      v40[(v50 >> 6) + 8] |= 1LL << v50;
      __n128 v115 = (uint64_t *)(v40[6] + 16 * v50);
      *__n128 v115 = v44;
      v115[1] = v46;
      *(void *)(v40[7] + 8 * v50) = v32;
      uint64_t v116 = v40[2];
      BOOL v117 = __OFADD__(v116, 1LL);
      unint64_t v48 = v116 + 1;
      if (v117) {
        goto LABEL_84;
      }
      v40[2] = v48;
      sub_1004028CC(v44, v46);
LABEL_62:
      v33 += 2;
      uint64_t v108 = *(void *)v36;
      *(void *)unint64_t v36 = v40;
      swift_bridgeObjectRelease(v108);
      sub_100402A84(v44, v46);
      swift_endAccess(&v149);
      sub_100402A84(v44, v46);
      if (!--v31) {
        goto LABEL_74;
      }
      continue;
    }

    break;
  }

  sub_100485D3C(v111, isUniquelyReferenced_nonNull_native);
  uint64_t v113 = sub_100485350(v44, v46);
  if ((v112 & 1) == (v114 & 1))
  {
    unint64_t v50 = v113;
    uint64_t v40 = (void *)v148;
    if ((v112 & 1) == 0) {
      goto LABEL_70;
    }
LABEL_61:
    uint64_t v106 = v40[7];
    uint64_t v107 = 8 * v50;

    *(void *)(v106 + v107) = v32;
    goto LABEL_62;
  }

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Data);
  __break(1u);
  return result;
}

uint64_t sub_100483978(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[5] = a4;
  v5[6] = v4;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return swift_task_switch(sub_100483998, 0LL, 0LL);
}

uint64_t sub_100483998()
{
  uint64_t v1 = *(void *)(v0 + 40);
  unint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = *(void **)(v0 + 32);
  uint64_t v4 = *(void *)(v0 + 16);
  *(void *)(v0 + 56) = OBJC_IVAR____TtC17identityservicesd39IDSGlobalLinkP2PKeyNegotiatorController_logger;
  if (sub_10048262C(v4, v2, v3, v1)) {
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(0LL);
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = swift_slowAlloc(32LL, -1LL);
    uint64_t v13 = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    *(void *)(v8 + 4) = sub_1003FFBB0(0xD000000000000037LL, 0x8000000100841750LL, &v13);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "%s: waiting for prekeys...", (uint8_t *)v8, 0xCu);
    swift_arrayDestroy(v9, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  uint64_t v10 = *(void *)(v0 + 48);
  uint64_t v11 = swift_task_alloc(32LL);
  *(void *)(v0 + 64) = v11;
  *(void *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = v10;
  uint64_t v12 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 7sub_10040A648(v1 + 2) = v12;
  void *v12 = v0;
  v12[1] = sub_100483B50;
  return withCheckedContinuation<A>(isolation:function:_:)();
}

uint64_t sub_100483B50()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 64LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 72LL));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_100483BAC, 0LL, 0LL);
}

uint64_t sub_100483BAC(uint64_t a1)
{
  unint64_t v2 = (os_log_s *)Logger.logObject.getter(a1);
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc(12LL, -1LL);
    uint64_t v5 = swift_slowAlloc(32LL, -1LL);
    uint64_t v14 = v5;
    *(_DWORD *)uint64_t v4 = 136315138;
    *(void *)(v4 + 4) = sub_1003FFBB0(0xD000000000000037LL, 0x8000000100841750LL, &v14);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%s: may have new prekeys, trying again...", (uint8_t *)v4, 0xCu);
    swift_arrayDestroy(v5, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v5, -1LL, -1LL);
    swift_slowDealloc(v4, -1LL, -1LL);
  }

  os_log_type_t v7 = (os_log_s *)Logger.logObject.getter(0LL);
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc(12LL, -1LL);
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    uint64_t v14 = v10;
    *(_DWORD *)uint64_t v9 = 136315138;
    *(void *)(v9 + 4) = sub_1003FFBB0(0xD000000000000037LL, 0x8000000100841750LL, &v14);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "%s: waiting for prekeys...", (uint8_t *)v9, 0xCu);
    swift_arrayDestroy(v10, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  uint64_t v11 = *(void *)(v1 + 48);
  uint64_t v12 = swift_task_alloc(32LL);
  *(void *)(v1 + 64) = v12;
  *(void *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = v11;
  uint64_t v13 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v1 + 7sub_10040A648(v1 + 2) = v13;
  *uint64_t v13 = v1;
  v13[1] = sub_100483B50;
  return withCheckedContinuation<A>(isolation:function:_:)();
}

uint64_t sub_100483E34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1003F5CB4(&qword_1009BB480);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = &v20[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v10 = OBJC_IVAR____TtC17identityservicesd39IDSGlobalLinkP2PKeyNegotiatorController_lock;
  uint64_t v11 = *(os_unfair_lock_s **)(a2 + OBJC_IVAR____TtC17identityservicesd39IDSGlobalLinkP2PKeyNegotiatorController_lock);
  swift_retain(v11);
  os_unfair_lock_lock(v11 + 4);
  swift_release(v11);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v9, a1, v4);
  uint64_t v12 = (unint64_t *)(a2
                           + OBJC_IVAR____TtC17identityservicesd39IDSGlobalLinkP2PKeyNegotiatorController_continuationsForPreKeys);
  swift_beginAccess( a2 + OBJC_IVAR____TtC17identityservicesd39IDSGlobalLinkP2PKeyNegotiatorController_continuationsForPreKeys,  v20,  33LL,  0LL);
  unint64_t v13 = *v12;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v12);
  unint64_t *v12 = v13;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v13 = sub_100484FF8(0, *(void *)(v13 + 16) + 1LL, 1, v13);
    unint64_t *v12 = v13;
  }

  unint64_t v16 = *(void *)(v13 + 16);
  unint64_t v15 = *(void *)(v13 + 24);
  if (v16 >= v15 >> 1)
  {
    unint64_t v13 = sub_100484FF8(v15 > 1, v16 + 1, 1, v13);
    unint64_t *v12 = v13;
  }

  *(void *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = v16 + 1;
  (*(void (**)(unint64_t, _BYTE *, uint64_t))(v5 + 32))( v13 + ((*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
  + *(void *)(v5 + 72) * v16,
    v9,
    v4);
  swift_endAccess(v20);
  id v17 = *(os_unfair_lock_s **)(a2 + v10);
  swift_retain(v17);
  os_unfair_lock_unlock(v17 + 4);
  return swift_release(v17);
}

uint64_t sub_100483FD4(uint64_t a1, uint64_t a2)
{
  void v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  return swift_task_switch(sub_100483FF0, 0LL, 0LL);
}

uint64_t sub_100483FF0()
{
  uint64_t v1 = swift_bridgeObjectRetain_n(v0[5], 2LL);
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    unint64_t v4 = v0[5];
    uint64_t v21 = v0[4];
    uint64_t v5 = swift_slowAlloc(22LL, -1LL);
    uint64_t v6 = swift_slowAlloc(64LL, -1LL);
    uint64_t v23 = v6;
    *(_DWORD *)uint64_t v5 = 136315394;
    v0[2] = sub_1003FFBB0(0xD000000000000015LL, 0x8000000100841790LL, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3, v5 + 4, v5 + 12);
    *(_WORD *)(v5 + 1sub_10040A648(v1 + 2) = 2080;
    swift_bridgeObjectRetain(v4);
    v0[3] = sub_1003FFBB0(v21, v4, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v5 + 14, v5 + 22);
    swift_bridgeObjectRelease_n(v4, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%s: negotiator forGroup:%s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy(v6, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1LL, -1LL);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  else
  {
    uint64_t v7 = v0[5];

    swift_bridgeObjectRelease_n(v7, 2LL);
  }

  uint64_t v8 = (void *)v0[6];
  uint64_t v9 = OBJC_IVAR____TtC17identityservicesd39IDSGlobalLinkP2PKeyNegotiatorController_metadataProvider;
  id v10 =  [*(id *)((char *)v8 + OBJC_IVAR____TtC17identityservicesd39IDSGlobalLinkP2PKeyNegotiatorController_metadataProvider) localPushToken];
  v0[7] = v10;
  uint64_t v11 = *(void **)((char *)v8 + v9);
  swift_unknownObjectRetain(v11, v12);
  NSString v13 = String._bridgeToObjectiveC()();
  id v14 = [v11 remotePushTokensForGroup:v13];
  swift_unknownObjectRelease(v11, v15);

  unint64_t v16 = sub_100485210();
  uint64_t v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v14, v16);
  v0[8] = v17;

  unint64_t v18 = *(int **)((swift_isaMask & *v8) + 0x110LL);
  uint64_t v22 = (int *)((char *)v18 + *v18);
  uint64_t v19 = (void *)swift_task_alloc(v18[1]);
  v0[9] = v19;
  void *v19 = v0;
  v19[1] = sub_10048429C;
  return ((uint64_t (*)(void, void, id, uint64_t))v22)(v0[4], v0[5], v10, v17);
}

uint64_t sub_10048429C(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 64LL);
  uint64_t v2 = *(void *)(*(void *)v1 + 72LL);
  *(void *)(*(void *)v1 + 8swift_beginAccess(v0 + 16, v3, 0LL, 0LL) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v3);
  return swift_task_switch(sub_100484300, 0LL, 0LL);
}

uint64_t sub_100484300()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 80));
}

uint64_t sub_100484464(uint64_t a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v8 = v7;
  v3[4] = v7;
  uint64_t v9 = dword_1009BB474;
  id v10 = a3;
  uint64_t v11 = (void *)swift_task_alloc(v9);
  void v3[5] = v11;
  *uint64_t v11 = v3;
  v11[1] = sub_100484504;
  v11[5] = v8;
  v11[6] = v10;
  v11[4] = v6;
  return swift_task_switch(sub_100483FF0, 0LL, 0LL);
}

uint64_t sub_100484504(uint64_t a1)
{
  uint64_t v3 = *(void *)(*v1 + 32);
  uint64_t v5 = *(void **)(*v1 + 16);
  unint64_t v4 = *(void (***)(void, void))(*v1 + 24);
  uint64_t v8 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 40));
  swift_bridgeObjectRelease(v3);

  v4[2](v4, a1);
  _Block_release(v4);
  swift_unknownObjectRelease(a1, v6);
  return (*(uint64_t (**)(void))(v8 + 8))();
}

void sub_100484588(uint64_t a1, uint64_t a2, __SecKey *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!((unint64_t)a4 >> 62))
  {
    uint64_t v6 = *(void *)((a4 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(a4);
    if (v6) {
      goto LABEL_3;
    }
LABEL_19:
    swift_bridgeObjectRelease(v4);
    return;
  }

  if (a4 < 0) {
    uint64_t v19 = a4;
  }
  else {
    uint64_t v19 = a4 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(a4);
  uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v19);
  if (!v6) {
    goto LABEL_19;
  }
LABEL_3:
  if (v6 >= 1)
  {
    uint64_t v7 = 0LL;
    unint64_t v8 = v4 & 0xC000000000000001LL;
    uint64_t v9 = _swiftEmptyArrayStorage;
    unint64_t v20 = a3;
    uint64_t v21 = v4;
    do
    {
      if (v8) {
        uint64_t v11 = (__SecKey *)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v4);
      }
      else {
        uint64_t v11 = (__SecKey *)*(id *)(v4 + 8 * v7 + 32);
      }
      uint64_t v12 = v11;
      uint64_t v13 = sub_100484720(a1, a2, a3, v11);
      if (v14 >> 60 != 15)
      {
        uint64_t v15 = v13;
        unint64_t v16 = v14;
        sub_1004028CC(v13, v14);
        if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0) {
          uint64_t v9 = sub_10046D170(0LL, v9[2] + 1LL, 1, v9);
        }
        unint64_t v18 = v9[2];
        unint64_t v17 = v9[3];
        if (v18 >= v17 >> 1) {
          uint64_t v9 = sub_10046D170((void *)(v17 > 1), v18 + 1, 1, v9);
        }
        _OWORD v9[2] = v18 + 1;
        id v10 = &v9[2 * v18];
        v10[4] = v15;
        void v10[5] = v16;
        sub_10040AD00(v15, v16);
        a3 = v20;
        uint64_t v4 = v21;
      }

      ++v7;
    }

    while (v6 != v7);
    goto LABEL_19;
  }

  __break(1u);
}

uint64_t sub_100484720(uint64_t a1, uint64_t a2, __SecKey *a3, __SecKey *a4)
{
  uint64_t v8 = type metadata accessor for String.Encoding(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  CFErrorRef error = 0LL;
  CFDataRef v14 = SecKeyCopyExternalRepresentation(a3, &error);
  if (!v14
    || (CFDataRef v15 = v14,
        __int128 v57 = xmmword_1007190F0,
        __int128 v59 = xmmword_1007190F0,
        static Data._conditionallyBridgeFromObjectiveC(_:result:)(v14, &v59),
        v15,
        unint64_t v16 = *((void *)&v59 + 1),
        *((void *)&v59 + 1) >> 60 == 15LL))
  {
    CFErrorRef v17 = error;
    if (error)
    {
      unint64_t v18 = (os_log_s *)Logger.logObject.getter(v14);
      os_log_type_t v19 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v18, v19))
      {
        uint64_t v20 = swift_slowAlloc(22LL, -1LL);
        uint64_t v21 = swift_slowAlloc(64LL, -1LL);
        *(void *)&__int128 v59 = v21;
        *(_DWORD *)uint64_t v20 = 136315394;
        uint64_t v58 = sub_1003FFBB0(0xD000000000000032LL, 0x80000001008418F0LL, (uint64_t *)&v59);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v20 + 4, v20 + 12);
        *(_WORD *)(v20 + 1sub_10040A648(v1 + 2) = 2080;
        uint64_t v22 = v17;
        uint64_t v58 = (uint64_t)v22;
        type metadata accessor for CFError(0LL);
        uint64_t v24 = v23;
        unint64_t v25 = sub_100485308();
        uint64_t v26 = Error.localizedDescription.getter(v24, v25);
        unint64_t v28 = v27;

        uint64_t v58 = sub_1003FFBB0(v26, v28, (uint64_t *)&v59);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v20 + 14, v20 + 22);
        swift_bridgeObjectRelease(v28);
        _os_log_impl( (void *)&_mh_execute_header,  v18,  v19,  "%s: failed exporting local public key: %s",  (uint8_t *)v20,  0x16u);
        swift_arrayDestroy(v21, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v21, -1LL, -1LL);
        swift_slowDealloc(v20, -1LL, -1LL);
      }
    }

    return 0LL;
  }

  uint64_t v29 = v59;
  CFDataRef v30 = SecKeyCopyExternalRepresentation(a4, &error);
  if (v30)
  {
    CFDataRef v31 = v30;
    __int128 v59 = v57;
    static Data._conditionallyBridgeFromObjectiveC(_:result:)(v30, &v59);

    unint64_t v32 = *((void *)&v59 + 1);
    if (*((void *)&v59 + 1) >> 60 != 15LL)
    {
      uint64_t v48 = v59;
      static String.Encoding.utf8.getter(v30);
      uint64_t v49 = String.data(using:allowLossyConversion:)(v13, 0LL, a1, a2);
      unint64_t v51 = v50;
      uint64_t v52 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v13, v8);
      if (v51 >> 60 != 15)
      {
        __int128 v59 = xmmword_1007184D0;
        Data.append(_:)(v49, v51);
        Data.append(_:)(v29, v16);
        Data.append(_:)(v48, v32);
        sub_10040AD00(v49, v51);
        sub_10040AD00(v48, v32);
        sub_10040AD00(v29, v16);
        return v59;
      }

      uint64_t v47 = (os_log_s *)Logger.logObject.getter(v52);
      os_log_type_t v53 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v47, v53))
      {
        id v54 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v55 = swift_slowAlloc(32LL, -1LL);
        *(void *)&__int128 v59 = v55;
        *(_DWORD *)id v54 = 136315138;
        uint64_t v58 = sub_1003FFBB0(0xD000000000000032LL, 0x80000001008418F0LL, (uint64_t *)&v59);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v54 + 4, v54 + 12);
        _os_log_impl((void *)&_mh_execute_header, v47, v53, "%s: failed to convert sessionID to data", v54, 0xCu);
        swift_arrayDestroy(v55, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v55, -1LL, -1LL);
        swift_slowDealloc(v54, -1LL, -1LL);
      }

      sub_10040AD00(v48, v32);
      sub_10040AD00(v29, v16);
      goto LABEL_19;
    }
  }

  CFErrorRef v33 = error;
  if (error)
  {
    uint64_t v34 = (os_log_s *)Logger.logObject.getter(v30);
    os_log_type_t v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = swift_slowAlloc(22LL, -1LL);
      uint64_t v37 = swift_slowAlloc(64LL, -1LL);
      *(void *)&__int128 v59 = v37;
      *(_DWORD *)uint64_t v36 = 136315394;
      uint64_t v58 = sub_1003FFBB0(0xD000000000000032LL, 0x80000001008418F0LL, (uint64_t *)&v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v36 + 4, v36 + 12);
      *(_WORD *)(v36 + 1sub_10040A648(v1 + 2) = 2080;
      *(void *)&__int128 v57 = v36 + 14;
      unint64_t v38 = v33;
      uint64_t v58 = (uint64_t)v38;
      type metadata accessor for CFError(0LL);
      uint64_t v39 = v29;
      uint64_t v41 = v40;
      unint64_t v42 = sub_100485308();
      uint64_t v43 = Error.localizedDescription.getter(v41, v42);
      unint64_t v45 = v44;

      uint64_t v58 = sub_1003FFBB0(v43, v45, (uint64_t *)&v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v57, v36 + 22);
      unint64_t v46 = v45;
      uint64_t v29 = v39;
      swift_bridgeObjectRelease(v46);
      _os_log_impl( (void *)&_mh_execute_header,  v34,  v35,  "%s: failed exporting remote public key: %s",  (uint8_t *)v36,  0x16u);
      swift_arrayDestroy(v37, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v37, -1LL, -1LL);
      swift_slowDealloc(v36, -1LL, -1LL);
    }

    uint64_t v47 = v33;
    sub_10040AD00(v29, v16);

LABEL_19:
    return 0LL;
  }

  sub_10040AD00(v29, v16);
  return 0LL;
}

uint64_t sub_100484D6C()
{
  uint64_t v1 = sub_1003F5CB4(&qword_1009BB480);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v3, v4);
  uint64_t v6 = &v19[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v7 = OBJC_IVAR____TtC17identityservicesd39IDSGlobalLinkP2PKeyNegotiatorController_lock;
  uint64_t v8 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC17identityservicesd39IDSGlobalLinkP2PKeyNegotiatorController_lock);
  swift_retain(v8);
  os_unfair_lock_lock(v8 + 4);
  swift_release(v8);
  uint64_t v9 = (uint64_t *)(v0
                 + OBJC_IVAR____TtC17identityservicesd39IDSGlobalLinkP2PKeyNegotiatorController_continuationsForPreKeys);
  swift_beginAccess( v0 + OBJC_IVAR____TtC17identityservicesd39IDSGlobalLinkP2PKeyNegotiatorController_continuationsForPreKeys,  v19,  1LL,  0LL);
  uint64_t v10 = *v9;
  *uint64_t v9 = (uint64_t)_swiftEmptyArrayStorage;
  __n128 v11 = *(os_unfair_lock_s **)(v0 + v7);
  swift_retain(v11);
  os_unfair_lock_unlock(v11 + 4);
  swift_release(v11);
  uint64_t v12 = *(void *)(v10 + 16);
  if (v12)
  {
    uint64_t v13 = v10 + ((*(unsigned __int8 *)(v2 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
    uint64_t v14 = *(void *)(v2 + 72);
    CFDataRef v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v2 + 16);
    do
    {
      uint64_t v16 = v15(v6, v13, v1);
      CheckedContinuation.resume(returning:)(v16, v1);
      (*(void (**)(char *, uint64_t))(v2 + 8))(v6, v1);
      v13 += v14;
      --v12;
    }

    while (v12);
  }

  return swift_bridgeObjectRelease(v10);
}

void *sub_100484EEC(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_1003F5CB4((uint64_t *)&unk_1009BB5E8);
      __n128 v11 = (void *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 17;
      }
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      uint64_t v14 = v11 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      __n128 v11 = _swiftEmptyArrayStorage;
      uint64_t v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4]) {
          memmove(v14, a4 + 4, 16 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_1004861F0(0LL, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

uint64_t sub_100484FF8(char a1, int64_t a2, char a3, unint64_t a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
LABEL_29:
        uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Division by zero",  16LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14377LL,  0);
LABEL_31:
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    CFDataRef v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v10 = sub_1003F5CB4((uint64_t *)&unk_1009BB5D0);
  uint64_t v11 = *(void *)(sub_1003F5CB4(&qword_1009BB480) - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (v13 + 32) & ~v13;
  CFDataRef v15 = (void *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  size_t v16 = j__malloc_size(v15);
  if (!v12) {
    goto LABEL_29;
  }
  if (v16 - v14 == 0x8000000000000000LL && v12 == -1)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Division results in an overflow",  31LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14384LL,  0);
    goto LABEL_31;
  }

  void v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  uint64_t v18 = sub_1003F5CB4(&qword_1009BB480);
  uint64_t v19 = *(void *)(v18 - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  unint64_t v21 = (unint64_t)v15 + v20;
  if ((a1 & 1) != 0)
  {
    unint64_t v22 = a4 + v20;
    if ((unint64_t)v15 < a4 || v21 >= v22 + *(void *)(v19 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v15 + v20, v22, v8, v18);
    }

    else if (v15 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v15 + v20);
    }

    *(void *)(a4 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
  }

  else
  {
    sub_100486388(0LL, v8, v21, a4);
  }

  swift_bridgeObjectRelease(a4);
  return (uint64_t)v15;
}

uint64_t sub_100485208(uint64_t a1)
{
  return sub_100483E34(a1, *(void *)(v1 + 16));
}

unint64_t sub_100485210()
{
  unint64_t result = qword_1009BBE30;
  if (!qword_1009BBE30)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___IDSPushToken);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1009BBE30);
  }

  return result;
}

uint64_t sub_10048524C()
{
  return type metadata accessor for IDSGlobalLinkP2PKeyNegotiatorController(0LL);
}

uint64_t sub_100485254(uint64_t a1)
{
  uint64_t result = type metadata accessor for Logger(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
    void v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    void v4[4] = "\b";
    void v4[5] = &unk_10071BEA0;
    void v4[6] = "\b";
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 7LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

void type metadata accessor for CFError(uint64_t a1)
{
}

unint64_t sub_100485308()
{
  unint64_t result = qword_1009BB518;
  if (!qword_1009BB518)
  {
    type metadata accessor for CFError(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for CFErrorRef, v1);
    atomic_store(result, (unint64_t *)&qword_1009BB518);
  }

  return result;
}

uint64_t sub_100485350(uint64_t a1, uint64_t a2)
{
  Swift::Int v5 = Hasher._finalize()();
  return sub_1004853B4(a1, a2, v5);
}

uint64_t sub_1004853B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v5 = a3 & ~v4;
  if (((*(void *)(v3 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0) {
    __asm { BR              X8 }
  }

  return a3 & ~v4;
}

Swift::Int sub_100485D3C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_1003F5CB4(&qword_1009BB5E0);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  os_log_type_t v35 = v3;
  uint64_t v36 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v15 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }

    int64_t v23 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v23 >= v12) {
      break;
    }
    uint64_t v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v36 + 8 * v23);
    ++v15;
    if (!v25)
    {
      int64_t v15 = v23 + 1;
      if (v23 + 1 >= v12) {
        goto LABEL_36;
      }
      unint64_t v25 = *(void *)(v36 + 8 * v15);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_36:
          swift_release(v5);
          uint64_t v3 = v35;
          if ((a2 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = *(void *)(v36 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v15 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v15 >= v12) {
              goto LABEL_36;
            }
            unint64_t v25 = *(void *)(v36 + 8 * v15);
            ++v26;
            if (v25) {
              goto LABEL_33;
            }
          }
        }

        int64_t v15 = v26;
      }
    }

id sub_100486040()
{
  uint64_t v1 = v0;
  sub_1003F5CB4(&qword_1009BB5E0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release(v2);
    uint64_t *v1 = v4;
    return result;
  }

  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }

uint64_t sub_1004861F0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1004862E0()
{
  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100486314()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  unint64_t v5 = (void *)swift_task_alloc(dword_1009BB534);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  *unint64_t v5 = v1;
  v5[1] = sub_10041CFC8;
  return ((uint64_t (*)(uint64_t, void *, void *))((char *)&dword_1009BB530 + dword_1009BB530))(v2, v3, v4);
}

uint64_t sub_100486388(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  uint64_t v8 = *(void *)(sub_1003F5CB4(&qword_1009BB480) - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(v8 + 72);
  unint64_t v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
  uint64_t v12 = v10 * v4;
  unint64_t v13 = a3 + v12;
  unint64_t v14 = v11 + v12;
  if (v11 >= v13 || v14 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v13;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

void sub_1004864A4()
{
  uint64_t v7 = type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer(0LL);
  __chkstk_darwin(v8, v9);
  unint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100486700(v0, (uint64_t)v11);
  uint64_t v12 = (char *)sub_1004865CC + 4 * byte_10071BEF0[swift_getEnumCaseMultiPayload(v11, v7)];
  __asm { BR              X10 }

uint64_t sub_1004865CC()
{
  uint64_t v4 = v3;
  sub_1003F6050(v1, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
  return v4;
}

uint64_t type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer(uint64_t a1)
{
  uint64_t result = qword_1009C5890;
  if (!qword_1009C5890) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for IDSGroupEncryptionDesiredMaterialSetContainer);
  }
  return result;
}

uint64_t sub_100486700(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

BOOL sub_100486744()
{
  uint64_t v1 = type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer(0LL);
  __chkstk_darwin(v2, v3);
  __n128 v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100486700(v0, (uint64_t)v5);
  BOOL v6 = swift_getEnumCaseMultiPayload(v5, v1) < 3;
  sub_1003F6050((uint64_t)v5, type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
  return v6;
}

uint64_t sub_1004867D8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for IDSGroupEncryptionDesiredKeyValueMaterialSet(0LL);
  __chkstk_darwin(v3, v4);
  BOOL v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet(0LL);
  __chkstk_darwin(v8, v9);
  unint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer(0LL);
  __chkstk_darwin(v13, v14);
  uint64_t v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100486700(v1, (uint64_t)v16);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v16, v12);
  if (EnumCaseMultiPayload == 1)
  {
    sub_1003F600C((uint64_t)v16, (uint64_t)v6, type metadata accessor for IDSGroupEncryptionDesiredKeyValueMaterialSet);
    uint64_t v18 = *(void *)&v6[*(int *)(v2 + 28)];
    sub_1003F6050((uint64_t)v6, type metadata accessor for IDSGroupEncryptionDesiredKeyValueMaterialSet);
  }

  else if (EnumCaseMultiPayload)
  {
    sub_1003F6050((uint64_t)v16, type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
    return 0LL;
  }

  else
  {
    sub_1003F600C((uint64_t)v16, (uint64_t)v11, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
    uint64_t v18 = *(void *)&v11[*(int *)(v7 + 28)];
    sub_1003F6050((uint64_t)v11, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
  }

  return v18;
}

void sub_100486954()
{
  uint64_t v7 = type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer(0LL);
  __chkstk_darwin(v8, v9);
  unint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100486700(v0, (uint64_t)v11);
  uint64_t v12 = (char *)sub_100486A74 + 4 * byte_10071BEF4[swift_getEnumCaseMultiPayload(v11, v7)];
  __asm { BR              X10 }

uint64_t sub_100486A74()
{
  uint64_t v2 = sub_1003F600C(v1, v0, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
  uint64_t v4 = sub_1004D02C8(v2, v3);
  sub_1003F6050(v0, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
  return v4;
}

void sub_100486B70()
{
  uint64_t v7 = type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer(0LL);
  __chkstk_darwin(v8, v9);
  unint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100486700(v0, (uint64_t)v11);
  uint64_t v12 = (char *)sub_100486CA8 + 4 * byte_10071BEFC[swift_getEnumCaseMultiPayload(v11, v7)];
  __asm { BR              X10 }

uint64_t sub_100486CA8()
{
  uint64_t v4 = sub_10040A2B0( &qword_1009BB600,  type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet,  (uint64_t)&unk_10071D174);
  dispatch thunk of Hashable.hash(into:)(v0, v1, v4);
  return sub_1003F6050(v2, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
}

Swift::Int sub_100486E30()
{
  return Hasher._finalize()();
}

Swift::Int sub_100486E70(uint64_t a1)
{
  return Hasher._finalize()();
}

void sub_100486EB0(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = a2;
  type metadata accessor for IDSGroupEncryptionDesiredPreKeyMaterialSet(0LL);
  __chkstk_darwin(v3, v4);
  int64_t v26 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for IDSGroupEncryptionDesiredKeyValueMaterialSet(0LL);
  __chkstk_darwin(v6, v7);
  type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet(0LL);
  __chkstk_darwin(v8, v9);
  uint64_t v10 = type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer(0LL);
  __chkstk_darwin(v11, v12);
  __chkstk_darwin(v13, v14);
  __chkstk_darwin(v15, v16);
  __chkstk_darwin(v17, v18);
  sub_1003F5CB4((uint64_t *)&unk_1009BB6A0);
  uint64_t v21 = __chkstk_darwin(v19, v20);
  int64_t v23 = (char *)&v26 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = (uint64_t)&v23[*(int *)(v21 + 48)];
  sub_100486700(a1, (uint64_t)v23);
  sub_100486700(v27, v24);
  unint64_t v25 = (char *)sub_100487084 + 4 * byte_10071BF00[swift_getEnumCaseMultiPayload(v23, v10)];
  __asm { BR              X10 }

uint64_t sub_100487084()
{
  if (swift_getEnumCaseMultiPayload(v4, v3))
  {
    sub_1003F6050(v1, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
    sub_10048841C(v0);
    char v5 = 0;
  }

  else
  {
    sub_1003F600C(v4, v2, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
    char v5 = ((uint64_t (*)(uint64_t, uint64_t))sub_1004D1C20)(v1, v2);
    sub_1003F6050(v2, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
    sub_1003F6050(v1, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
    sub_1003F6050(v0, type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
  }

  return v5 & 1;
}

uint64_t sub_1004872C4()
{
  return sub_10040A2B0( (unint64_t *)&unk_1009B97E0,  type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer,  (uint64_t)&unk_10071BF7C);
}

uint64_t sub_1004872F0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) == 0)
  {
    char v5 = (char *)&loc_100487350 + 4 * byte_10071BF04[swift_getEnumCaseMultiPayload(a2, a3)];
    __asm { BR              X10 }
  }

  uint64_t v6 = *a2;
  *a1 = *a2;
  uint64_t v7 = v6 + ((v4 + 16LL) & ~(unint64_t)v4);
  swift_retain(v6);
  return v7;
}

void sub_10048763C(uint64_t a1, uint64_t a2)
{
  switch(swift_getEnumCaseMultiPayload(a1, a2))
  {
    case 0u:
      swift_bridgeObjectRelease(*(void *)(a1 + 8));
      uint64_t v3 = *(int *)(type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet(0LL) + 24);
      goto LABEL_5;
    case 1u:
      sub_100402A84(*(void *)(a1 + 8), *(void *)(a1 + 16));
      uint64_t v4 = type metadata accessor for IDSGroupEncryptionDesiredKeyValueMaterialSet(0LL);
      char v5 = (id *)(a1 + *(int *)(v4 + 24));

      uint64_t v6 = type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
      uint64_t v7 = (char *)v5 + *(int *)(v6 + 24);
      uint64_t v8 = type metadata accessor for Date(0LL);
      (*(void (**)(char *, uint64_t))(*(void *)(v8 - 8) + 8LL))(v7, v8);

      uint64_t v9 = a1 + *(int *)(v4 + 32);
      uint64_t v11 = type metadata accessor for UUID(0LL, v10);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))(v9, v11);
      break;
    case 2u:
      uint64_t v3 = *(int *)(type metadata accessor for IDSGroupEncryptionDesiredPreKeyMaterialSet(0LL) + 20);
LABEL_5:
      uint64_t v12 = a1 + v3;

      uint64_t v13 = type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
      uint64_t v14 = v12 + *(int *)(v13 + 24);
      uint64_t v15 = type metadata accessor for Date(0LL);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8LL))(v14, v15);

      break;
    case 3u:
      sub_100402A84(*(void *)(a1 + 8), *(void *)(a1 + 16));
      break;
    default:
      return;
  }

void sub_1004877C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (char *)sub_100487820 + 4 * byte_10071BF0C[swift_getEnumCaseMultiPayload(a2, a3)];
  __asm { BR              X10 }

uint64_t sub_100487820()
{
  *(_DWORD *)uint64_t v0 = *(_DWORD *)v3;
  *(_BYTE *)(v0 + 4) = *(_BYTE *)(v3 + 4);
  uint64_t v4 = *(void *)(v3 + 8);
  *(void *)(v0 + 8) = v4;
  char v5 = (int *)type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet(0LL);
  uint64_t v6 = v5[6];
  uint64_t v7 = (void *)(v0 + v6);
  uint64_t v8 = v3 + v6;
  uint64_t v24 = v1;
  unsigned int v23 = v2;
  uint64_t v9 = *(void **)(v3 + v6);
  uint64_t v10 = *(void **)(v3 + v6 + 8);
  *uint64_t v7 = v9;
  v7[1] = v10;
  uint64_t v11 = (int *)type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
  uint64_t v12 = v11[6];
  uint64_t v21 = v8 + v12;
  uint64_t v22 = (char *)v7 + v12;
  uint64_t v13 = type metadata accessor for Date(0LL);
  __n128 v20 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16LL);
  swift_bridgeObjectRetain(v4);
  id v14 = v9;
  id v15 = v10;
  v20(v22, v21, v13);
  uint64_t v16 = v11[7];
  __n128 v17 = *(void **)(v8 + v16);
  *(void *)((char *)v7 + vswift_unknownObjectWeakDestroy(v0 + 16) = v17;
  *((_BYTE *)v7 + v11[8]) = *(_BYTE *)(v8 + v11[8]);
  *(void *)(v0 + v5[7]) = *(void *)(v3 + v5[7]);
  *(void *)(v0 + v5[8]) = *(void *)(v3 + v5[8]);
  id v18 = v17;
  swift_storeEnumTagMultiPayload(v0, v24, v23);
  return v0;
}

uint64_t sub_100487AE8(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a2)
  {
    sub_1003F6050(result, type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
    char v5 = (char *)&loc_100487B58 + 4 * byte_10071BF10[swift_getEnumCaseMultiPayload(a2, a3)];
    __asm { BR              X10 }
  }

  return result;
}

uint64_t sub_100487E38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 2)
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
    uint64_t v16 = *(int *)(type metadata accessor for IDSGroupEncryptionDesiredPreKeyMaterialSet(0LL) + 20);
    uint64_t v17 = a1 + v16;
    uint64_t v18 = a2 + v16;
    *(_OWORD *)(a1 + vswift_unknownObjectWeakDestroy(v0 + 16) = *(_OWORD *)(a2 + v16);
    __n128 v19 = (int *)type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
    uint64_t v20 = v19[6];
    uint64_t v21 = v17 + v20;
    uint64_t v22 = v18 + v20;
    uint64_t v23 = type metadata accessor for Date(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 32LL))(v21, v22, v23);
    *(void *)(v17 + v19[7]) = *(void *)(v18 + v19[7]);
    *(_BYTE *)(v17 + v19[8]) = *(_BYTE *)(v18 + v19[8]);
    swift_storeEnumTagMultiPayload(a1, a3, 2LL);
  }

  else if (EnumCaseMultiPayload == 1)
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    uint64_t v24 = (int *)type metadata accessor for IDSGroupEncryptionDesiredKeyValueMaterialSet(0LL);
    uint64_t v25 = v24[6];
    uint64_t v26 = a1 + v25;
    uint64_t v27 = a2 + v25;
    *(_OWORD *)(a1 + v25) = *(_OWORD *)(a2 + v25);
    unint64_t v28 = (int *)type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
    uint64_t v29 = v28[6];
    uint64_t v30 = v26 + v29;
    uint64_t v31 = v27 + v29;
    uint64_t v32 = type metadata accessor for Date(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 32LL))(v30, v31, v32);
    *(void *)(v26 + v28[7]) = *(void *)(v27 + v28[7]);
    *(_BYTE *)(v26 + v28[8]) = *(_BYTE *)(v27 + v28[8]);
    *(void *)(a1 + v24[7]) = *(void *)(a2 + v24[7]);
    uint64_t v33 = v24[8];
    uint64_t v34 = a1 + v33;
    uint64_t v35 = a2 + v33;
    uint64_t v37 = type metadata accessor for UUID(0LL, v36);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 32LL))(v34, v35, v37);
    swift_storeEnumTagMultiPayload(a1, a3, 1LL);
  }

  else if (EnumCaseMultiPayload)
  {
    memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    uint64_t v7 = (int *)type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet(0LL);
    uint64_t v8 = v7[6];
    uint64_t v9 = a1 + v8;
    uint64_t v10 = a2 + v8;
    *(_OWORD *)(a1 + __chkstk_darwin(v7, v8) = *(_OWORD *)(a2 + v8);
    uint64_t v11 = (int *)type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
    uint64_t v12 = v11[6];
    uint64_t v13 = v9 + v12;
    uint64_t v14 = v10 + v12;
    uint64_t v15 = type metadata accessor for Date(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32LL))(v13, v14, v15);
    *(void *)(v9 + v11[7]) = *(void *)(v10 + v11[7]);
    *(_BYTE *)(v9 + v11[8]) = *(_BYTE *)(v10 + v11[8]);
    *(void *)(a1 + v7[7]) = *(void *)(a2 + v7[7]);
    *(void *)(a1 + v7[8]) = *(void *)(a2 + v7[8]);
    swift_storeEnumTagMultiPayload(a1, a3, 0LL);
  }

  return a1;
}

uint64_t sub_1004880CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1003F6050(a1, type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      *(_DWORD *)a1 = *(_DWORD *)a2;
      *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
      uint64_t v16 = *(int *)(type metadata accessor for IDSGroupEncryptionDesiredPreKeyMaterialSet(0LL) + 20);
      uint64_t v17 = a1 + v16;
      uint64_t v18 = a2 + v16;
      *(_OWORD *)(a1 + vswift_unknownObjectWeakDestroy(v0 + 16) = *(_OWORD *)(a2 + v16);
      __n128 v19 = (int *)type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
      uint64_t v20 = v19[6];
      uint64_t v21 = v17 + v20;
      uint64_t v22 = v18 + v20;
      uint64_t v23 = type metadata accessor for Date(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 32LL))(v21, v22, v23);
      *(void *)(v17 + v19[7]) = *(void *)(v18 + v19[7]);
      *(_BYTE *)(v17 + v19[8]) = *(_BYTE *)(v18 + v19[8]);
      swift_storeEnumTagMultiPayload(a1, a3, 2LL);
    }

    else if (EnumCaseMultiPayload == 1)
    {
      *(_DWORD *)a1 = *(_DWORD *)a2;
      *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      uint64_t v24 = (int *)type metadata accessor for IDSGroupEncryptionDesiredKeyValueMaterialSet(0LL);
      uint64_t v25 = v24[6];
      uint64_t v26 = a1 + v25;
      uint64_t v27 = a2 + v25;
      *(_OWORD *)(a1 + v25) = *(_OWORD *)(a2 + v25);
      unint64_t v28 = (int *)type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
      uint64_t v29 = v28[6];
      uint64_t v30 = v26 + v29;
      uint64_t v31 = v27 + v29;
      uint64_t v32 = type metadata accessor for Date(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 32LL))(v30, v31, v32);
      *(void *)(v26 + v28[7]) = *(void *)(v27 + v28[7]);
      *(_BYTE *)(v26 + v28[8]) = *(_BYTE *)(v27 + v28[8]);
      *(void *)(a1 + v24[7]) = *(void *)(a2 + v24[7]);
      uint64_t v33 = v24[8];
      uint64_t v34 = a1 + v33;
      uint64_t v35 = a2 + v33;
      uint64_t v37 = type metadata accessor for UUID(0LL, v36);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 32LL))(v34, v35, v37);
      swift_storeEnumTagMultiPayload(a1, a3, 1LL);
    }

    else if (EnumCaseMultiPayload)
    {
      memcpy((void *)a1, (const void *)a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }

    else
    {
      *(_DWORD *)a1 = *(_DWORD *)a2;
      *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      uint64_t v7 = (int *)type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet(0LL);
      uint64_t v8 = v7[6];
      uint64_t v9 = a1 + v8;
      uint64_t v10 = a2 + v8;
      *(_OWORD *)(a1 + __chkstk_darwin(v7, v8) = *(_OWORD *)(a2 + v8);
      uint64_t v11 = (int *)type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
      uint64_t v12 = v11[6];
      uint64_t v13 = v9 + v12;
      uint64_t v14 = v10 + v12;
      uint64_t v15 = type metadata accessor for Date(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32LL))(v13, v14, v15);
      *(void *)(v9 + v11[7]) = *(void *)(v10 + v11[7]);
      *(_BYTE *)(v9 + v11[8]) = *(_BYTE *)(v10 + v11[8]);
      *(void *)(a1 + v7[7]) = *(void *)(a2 + v7[7]);
      *(void *)(a1 + v7[8]) = *(void *)(a2 + v7[8]);
      swift_storeEnumTagMultiPayload(a1, a3, 0LL);
    }
  }

  return a1;
}

uint64_t sub_100488378(uint64_t a1)
{
  uint64_t result = type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet(319LL);
  if (v3 <= 0x3F)
  {
    v6[0] = *(void *)(result - 8) + 64LL;
    uint64_t result = type metadata accessor for IDSGroupEncryptionDesiredKeyValueMaterialSet(319LL);
    if (v4 <= 0x3F)
    {
      v6[1] = *(void *)(result - 8) + 64LL;
      uint64_t result = type metadata accessor for IDSGroupEncryptionDesiredPreKeyMaterialSet(319LL);
      if (v5 <= 0x3F)
      {
        v6[2] = *(void *)(result - 8) + 64LL;
        v6[3] = &unk_10071BFE0;
        swift_initEnumMetadataMultiPayload(a1, 256LL, 4LL, v6);
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t sub_10048841C(uint64_t a1)
{
  uint64_t v2 = sub_1003F5CB4((uint64_t *)&unk_1009BB6A0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

BOOL sub_10048845C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((a4 & 0xC000000000000001LL) != 0)
  {
    if (a4 < 0) {
      uint64_t v4 = a4;
    }
    else {
      uint64_t v4 = a4 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v5 = __CocoaSet.count.getter(v4);
  }

  else
  {
    uint64_t v5 = *(void *)(a4 + 16);
  }

  return v5 > 0;
}

BOOL sub_100488494(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a3 & 0xC000000000000001LL) != 0)
  {
    if (a3 < 0) {
      uint64_t v3 = a3;
    }
    else {
      uint64_t v3 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v4 = __CocoaSet.count.getter(v3);
  }

  else
  {
    uint64_t v4 = *(void *)(a3 + 16);
  }

  return v4 > 0;
}

uint64_t sub_1004884CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v8._object = (void *)0x8000000100841970LL;
  v8._countAndFlagsBits = 0xD000000000000022LL;
  String.append(_:)(v8);
  if ((a3 & 0xC000000000000001LL) != 0)
  {
    if (a3 < 0) {
      uint64_t v9 = a3;
    }
    else {
      uint64_t v9 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v10 = __CocoaSet.count.getter(v9);
  }

  else
  {
    uint64_t v10 = *(void *)(a3 + 16);
  }

  BOOL v11 = v10 <= 0;
  if (v10 <= 0) {
    uint64_t v12 = 0x65736C6166LL;
  }
  else {
    uint64_t v12 = 1702195828LL;
  }
  if (v11) {
    unint64_t v13 = 0xE500000000000000LL;
  }
  else {
    unint64_t v13 = 0xE400000000000000LL;
  }
  unint64_t v14 = v13;
  String.append(_:)(*(Swift::String *)&v12);
  swift_bridgeObjectRelease(v13);
  v15._countAndFlagsBits = 0x616572636564202CLL;
  v15._object = (void *)0xED0000203A646573LL;
  String.append(_:)(v15);
  if ((a4 & 0xC000000000000001LL) != 0)
  {
    if (a4 < 0) {
      uint64_t v16 = a4;
    }
    else {
      uint64_t v16 = a4 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v17 = __CocoaSet.count.getter(v16);
  }

  else
  {
    uint64_t v17 = *(void *)(a4 + 16);
  }

  BOOL v18 = v17 <= 0;
  if (v17 <= 0) {
    uint64_t v19 = 0x65736C6166LL;
  }
  else {
    uint64_t v19 = 1702195828LL;
  }
  if (v18) {
    unint64_t v20 = 0xE500000000000000LL;
  }
  else {
    unint64_t v20 = 0xE400000000000000LL;
  }
  unint64_t v21 = v20;
  String.append(_:)(*(Swift::String *)&v19);
  swift_bridgeObjectRelease(v20);
  v22._countAndFlagsBits = 0x3A6465646461202CLL;
  v22._object = (void *)0xE900000000000020LL;
  String.append(_:)(v22);
  uint64_t v23 = type metadata accessor for IDSGroupEncryptionControllerMember();
  unint64_t v24 = sub_1004886E8();
  swift_bridgeObjectRetain(a1);
  v26._countAndFlagsBits = Set.description.getter(v25, v23, v24);
  object = v26._object;
  String.append(_:)(v26);
  swift_bridgeObjectRelease(a1);
  swift_bridgeObjectRelease(object);
  v28._countAndFlagsBits = 0x65766F6D6572202CLL;
  v28._object = (void *)0xEB00000000203A64LL;
  String.append(_:)(v28);
  swift_bridgeObjectRetain(a2);
  v30._countAndFlagsBits = Set.description.getter(v29, v23, v24);
  uint64_t v31 = v30._object;
  String.append(_:)(v30);
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(v31);
  v32._countAndFlagsBits = 41LL;
  v32._object = (void *)0xE100000000000000LL;
  String.append(_:)(v32);
  return 0LL;
}

unint64_t sub_1004886E8()
{
  unint64_t result = qword_1009B8E30;
  if (!qword_1009B8E30)
  {
    uint64_t v1 = type metadata accessor for IDSGroupEncryptionControllerMember();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_1009B8E30);
  }

  return result;
}

uint64_t sub_100488730()
{
  return sub_1004884CC(*v0, v0[1], v0[2], v0[3]);
}

void *sub_10048873C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1004887FC(a2, a1);
  swift_bridgeObjectRetain(a2);
  uint64_t v5 = sub_1004887FC(a1, a2);
  swift_bridgeObjectRetain(a1);
  uint64_t v6 = swift_bridgeObjectRetain(v5);
  sub_10048A06C(v6, a1);
  swift_bridgeObjectRelease(a1);
  swift_bridgeObjectRetain(a2);
  uint64_t v7 = swift_bridgeObjectRetain(v4);
  sub_10048A06C(v7, a2);
  swift_bridgeObjectRelease(a2);
  return v5;
}

void *sub_1004887FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = a1;
  if ((a1 & 0xC000000000000001LL) == 0)
  {
    uint64_t v4 = *(void *)(a1 + 16);
    if ((a2 & 0xC000000000000001LL) != 0) {
      goto LABEL_5;
    }
LABEL_11:
    if (v4 > *(void *)(v2 + 16) >> 3) {
      return sub_100488EE0(v3, v2);
    }
    goto LABEL_13;
  }

  if (a1 >= 0) {
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  }
  uint64_t v4 = __CocoaSet.count.getter(a1);
  if ((v2 & 0xC000000000000001LL) == 0) {
    goto LABEL_11;
  }
LABEL_5:
  if (v2 < 0) {
    uint64_t v5 = v2;
  }
  else {
    uint64_t v5 = v2 & 0xFFFFFFFFFFFFFF8LL;
  }
  if (v4 > __CocoaSet.count.getter(v5) / 8)
  {
    swift_bridgeObjectRetain(v2);
    uint64_t v6 = __CocoaSet.count.getter(v5);
    Swift::Int v7 = sub_100488CFC(v5, v6);
    swift_bridgeObjectRelease(v2);
    uint64_t v2 = v7;
    return sub_100488EE0(v3, v2);
  }

uint64_t sub_1004888F0(void *a1, uint64_t a2)
{
  if ((a2 & 0xC000000000000001LL) != 0)
  {
    id v4 = a1;
    char v5 = __CocoaSet.contains(_:)();

    return v5 & 1;
  }

  if (!*(void *)(a2 + 16)
    || (Swift::Int v7 = NSObject._rawHashValue(seed:)(*(void *)(a2 + 40)),
        uint64_t v8 = -1LL << *(_BYTE *)(a2 + 32),
        unint64_t v9 = v7 & ~v8,
        uint64_t v10 = a2 + 56,
        ((*(void *)(a2 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v9) & 1) == 0))
  {
LABEL_11:
    char v13 = 0;
    return v13 & 1;
  }

  type metadata accessor for IDSGroupEncryptionControllerMember();
  id v11 = *(id *)(*(void *)(a2 + 48) + 8 * v9);
  char v12 = static NSObject.== infix(_:_:)(v11, a1);

  if ((v12 & 1) == 0)
  {
    uint64_t v14 = ~v8;
    unint64_t v15 = (v9 + 1) & v14;
    if (((*(void *)(v10 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v15) & 1) != 0)
    {
      do
      {
        id v16 = *(id *)(*(void *)(a2 + 48) + 8 * v15);
        char v13 = static NSObject.== infix(_:_:)(v16, a1);

        if ((v13 & 1) != 0) {
          break;
        }
        unint64_t v15 = (v15 + 1) & v14;
      }

      while (((*(void *)(v10 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v15) & 1) != 0);
      return v13 & 1;
    }

    goto LABEL_11;
  }

  char v13 = 1;
  return v13 & 1;
}

void sub_100488A3C(uint64_t a1)
{
  uint64_t v3 = *v1;
  if ((*v1 & 0xC000000000000001LL) == 0)
  {
    if (!*(void *)(v3 + 16)) {
      return;
    }
LABEL_8:
    if ((a1 & 0xC000000000000001LL) != 0)
    {
      if (a1 < 0) {
        uint64_t v5 = a1;
      }
      else {
        uint64_t v5 = a1 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(a1);
      uint64_t v6 = __CocoaSet.makeIterator()(v5);
      uint64_t v7 = type metadata accessor for IDSGroupEncryptionControllerMember();
      unint64_t v8 = sub_1004886E8();
      unint64_t v9 = Set.Iterator.init(_cocoa:)(v33, v6, v7, v8);
      a1 = v33[0];
      uint64_t v30 = v33[1];
      uint64_t v10 = v33[2];
      uint64_t v11 = v33[3];
      unint64_t v12 = v33[4];
    }

    else
    {
      uint64_t v13 = -1LL << *(_BYTE *)(a1 + 32);
      uint64_t v30 = a1 + 56;
      uint64_t v10 = ~v13;
      uint64_t v14 = -v13;
      if (v14 < 64) {
        uint64_t v15 = ~(-1LL << v14);
      }
      else {
        uint64_t v15 = -1LL;
      }
      unint64_t v12 = v15 & *(void *)(a1 + 56);
      unint64_t v9 = (void *)swift_bridgeObjectRetain(a1);
      uint64_t v11 = 0LL;
    }

    int64_t v16 = (unint64_t)(v10 + 64) >> 6;
    if (a1 < 0) {
      goto LABEL_20;
    }
    while (1)
    {
      if (v12)
      {
        uint64_t v17 = (v12 - 1) & v12;
        unint64_t v18 = __clz(__rbit64(v12)) | (v11 << 6);
        uint64_t v19 = v11;
      }

      else
      {
        int64_t v26 = v11 + 1;
        if (__OFADD__(v11, 1LL))
        {
          __break(1u);
          return;
        }

        if (v26 >= v16) {
          goto LABEL_42;
        }
        unint64_t v27 = *(void *)(v30 + 8 * v26);
        uint64_t v19 = v11 + 1;
        if (!v27)
        {
          uint64_t v19 = v11 + 2;
          if (v11 + 2 >= v16) {
            goto LABEL_42;
          }
          unint64_t v27 = *(void *)(v30 + 8 * v19);
          if (!v27)
          {
            uint64_t v19 = v11 + 3;
            if (v11 + 3 >= v16) {
              goto LABEL_42;
            }
            unint64_t v27 = *(void *)(v30 + 8 * v19);
            if (!v27)
            {
              uint64_t v19 = v11 + 4;
              if (v11 + 4 >= v16) {
                goto LABEL_42;
              }
              unint64_t v27 = *(void *)(v30 + 8 * v19);
              if (!v27)
              {
                uint64_t v19 = v11 + 5;
                if (v11 + 5 >= v16) {
                  goto LABEL_42;
                }
                unint64_t v27 = *(void *)(v30 + 8 * v19);
                if (!v27)
                {
                  uint64_t v28 = v11 + 6;
                  while (v16 != v28)
                  {
                    unint64_t v27 = *(void *)(v30 + 8 * v28++);
                    if (v27)
                    {
                      uint64_t v19 = v28 - 1;
                      goto LABEL_38;
                    }
                  }

Swift::Int sub_100488CFC(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_1003F5CB4(&qword_1009B9100);
    uint64_t v4 = static _SetStorage.convert(_:capacity:)(a1, a2);
    uint64_t v23 = v4;
    uint64_t v5 = __CocoaSet.makeIterator()(a1);
    uint64_t v6 = __CocoaSet.Iterator.next()();
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = type metadata accessor for IDSGroupEncryptionControllerMember();
      do
      {
        uint64_t v21 = v7;
        swift_dynamicCast(&v22, &v21, (char *)&type metadata for Swift.AnyObject + 8, v8, 7LL);
        uint64_t v4 = v23;
        unint64_t v16 = *(void *)(v23 + 16);
        if (*(void *)(v23 + 24) <= v16)
        {
          sub_1004001F0(v16 + 1);
          uint64_t v4 = v23;
        }

        uint64_t v9 = v22;
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v4 + 40));
        uint64_t v11 = v4 + 56;
        uint64_t v12 = -1LL << *(_BYTE *)(v4 + 32);
        unint64_t v13 = result & ~v12;
        unint64_t v14 = v13 >> 6;
        if (((-1LL << v13) & ~*(void *)(v4 + 56 + 8 * (v13 >> 6))) != 0)
        {
          unint64_t v15 = __clz(__rbit64((-1LL << v13) & ~*(void *)(v4 + 56 + 8 * (v13 >> 6)))) | v13 & 0x7FFFFFFFFFFFFFC0LL;
        }

        else
        {
          char v17 = 0;
          unint64_t v18 = (unint64_t)(63 - v12) >> 6;
          do
          {
            if (++v14 == v18 && (v17 & 1) != 0)
            {
              __break(1u);
              return result;
            }

            BOOL v19 = v14 == v18;
            if (v14 == v18) {
              unint64_t v14 = 0LL;
            }
            v17 |= v19;
            uint64_t v20 = *(void *)(v11 + 8 * v14);
          }

          while (v20 == -1);
          unint64_t v15 = __clz(__rbit64(~v20)) + (v14 << 6);
        }

        *(void *)(v11 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
        *(void *)(*(void *)(v4 + 48) + 8 * v15) = v9;
        ++*(void *)(v4 + 16);
        uint64_t v7 = __CocoaSet.Iterator.next()();
      }

      while (v7);
    }

    swift_release(v5);
  }

  else
  {
    swift_unknownObjectRelease(a1, 0LL);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }

  return v4;
}

void *sub_100488EE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (!*(void *)(a2 + 16))
  {
    swift_release(a2);
    return &_swiftEmptySetSingleton;
  }

  uint64_t v3 = a1;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v4 = a1;
    }
    else {
      uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v5 = __CocoaSet.makeIterator()(v4);
    uint64_t v6 = type metadata accessor for IDSGroupEncryptionControllerMember();
    unint64_t v7 = sub_1004886E8();
    uint64_t v8 = Set.Iterator.init(_cocoa:)(v58, v5, v6, v7);
    uint64_t v3 = v58[0];
    uint64_t v9 = v58[1];
    uint64_t v11 = v58[2];
    int64_t v10 = v58[3];
    unint64_t v12 = v58[4];
  }

  else
  {
    uint64_t v13 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v9 = a1 + 56;
    uint64_t v11 = ~v13;
    uint64_t v14 = -v13;
    if (v14 < 64) {
      uint64_t v15 = ~(-1LL << v14);
    }
    else {
      uint64_t v15 = -1LL;
    }
    unint64_t v12 = v15 & *(void *)(a1 + 56);
    uint64_t v8 = (void *)swift_bridgeObjectRetain(a1);
    int64_t v10 = 0LL;
  }

  uint64_t v53 = v3;
  uint64_t v54 = v9;
  uint64_t v55 = v11;
  int64_t v56 = v10;
  unint64_t v57 = v12;
  uint64_t v16 = v2 + 56;
  while (1)
  {
    if ((v3 & 0x8000000000000000LL) == 0)
    {
      if (v12)
      {
        uint64_t v17 = (v12 - 1) & v12;
        unint64_t v18 = __clz(__rbit64(v12)) | (v10 << 6);
LABEL_17:
        BOOL v19 = *(void **)(*(void *)(v3 + 48) + 8 * v18);
        id v20 = v19;
        goto LABEL_18;
      }

      int64_t v34 = v10 + 1;
      if (__OFADD__(v10, 1LL)) {
        __break(1u);
      }
      int64_t v35 = (unint64_t)(v11 + 64) >> 6;
      if (v34 >= v35)
      {
        BOOL v19 = 0LL;
        uint64_t v17 = 0LL;
        goto LABEL_18;
      }

      unint64_t v36 = *(void *)(v54 + 8 * v34);
      if (v36)
      {
LABEL_31:
        uint64_t v17 = (v36 - 1) & v36;
        unint64_t v18 = __clz(__rbit64(v36)) + (v34 << 6);
        int64_t v10 = v34;
        goto LABEL_17;
      }

      int64_t v37 = v10 + 2;
      if (v10 + 2 >= v35) {
        goto LABEL_47;
      }
      unint64_t v36 = *(void *)(v54 + 8 * v37);
      if (v36)
      {
LABEL_35:
        int64_t v34 = v37;
        goto LABEL_31;
      }

      if (v10 + 3 < v35)
      {
        unint64_t v36 = *(void *)(v54 + 8 * (v10 + 3));
        if (v36)
        {
          int64_t v34 = v10 + 3;
          goto LABEL_31;
        }

        int64_t v37 = v10 + 4;
        if (v10 + 4 >= v35)
        {
          BOOL v19 = 0LL;
          uint64_t v17 = 0LL;
          v10 += 3LL;
LABEL_18:
          int64_t v56 = v10;
          unint64_t v57 = v17;
          if (!v19) {
            goto LABEL_56;
          }
          goto LABEL_22;
        }

        unint64_t v36 = *(void *)(v54 + 8 * v37);
        if (v36) {
          goto LABEL_35;
        }
        int64_t v34 = v10 + 5;
        if (v10 + 5 < v35)
        {
          unint64_t v36 = *(void *)(v54 + 8 * v34);
          if (v36) {
            goto LABEL_31;
          }
          int64_t v34 = v35 - 1;
          int64_t v38 = v10 + 6;
          while (v35 != v38)
          {
            unint64_t v36 = *(void *)(v54 + 8 * v38++);
            if (v36)
            {
              int64_t v34 = v38 - 1;
              goto LABEL_31;
            }
          }

uint64_t sub_1004893E8(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  if ((*v1 & 0xC000000000000001LL) != 0)
  {
    if (v4 < 0) {
      uint64_t v5 = *v1;
    }
    else {
      uint64_t v5 = v4 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v4);
    id v6 = a1;
    char v7 = __CocoaSet.contains(_:)();

    if ((v7 & 1) != 0)
    {
      uint64_t v8 = sub_100489904(v5, (uint64_t)v6);
      swift_bridgeObjectRelease(v4);
      return v8;
    }

void sub_1004895AC(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v5 = a5;
  uint64_t v7 = *(void *)(a3 + 16);
  *(unint64_t *)((char *)a1 + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << a4) - 1;
  uint64_t v8 = v7 - 1;
  uint64_t v43 = a3 + 56;
  while (2)
  {
    uint64_t v40 = v8;
    do
    {
      while (1)
      {
        if ((*v5 & 0x8000000000000000LL) == 0)
        {
          int64_t v10 = v5[3];
          unint64_t v9 = v5[4];
          if (v9)
          {
            uint64_t v11 = (v9 - 1) & v9;
            unint64_t v12 = __clz(__rbit64(v9)) | (v10 << 6);
LABEL_7:
            id v13 = *(void **)(*(void *)(*v5 + 48LL) + 8 * v12);
            id v14 = v13;
            goto LABEL_8;
          }

          int64_t v32 = v10 + 1;
          if (__OFADD__(v10, 1LL))
          {
            __break(1u);
            goto LABEL_47;
          }

          int64_t v33 = (unint64_t)(v5[2] + 64LL) >> 6;
          if (v32 >= v33)
          {
            id v13 = 0LL;
            uint64_t v11 = 0LL;
            goto LABEL_8;
          }

          uint64_t v34 = v5[1];
          unint64_t v35 = *(void *)(v34 + 8 * v32);
          if (v35)
          {
LABEL_22:
            uint64_t v11 = (v35 - 1) & v35;
            unint64_t v12 = __clz(__rbit64(v35)) + (v32 << 6);
            int64_t v10 = v32;
            goto LABEL_7;
          }

          if (v10 + 2 < v33)
          {
            unint64_t v35 = *(void *)(v34 + 8 * (v10 + 2));
            if (v35)
            {
              int64_t v32 = v10 + 2;
              goto LABEL_22;
            }

            if (v10 + 3 >= v33)
            {
              id v13 = 0LL;
              uint64_t v11 = 0LL;
              v10 += 2LL;
              goto LABEL_8;
            }

            unint64_t v35 = *(void *)(v34 + 8 * (v10 + 3));
            if (v35)
            {
              int64_t v32 = v10 + 3;
              goto LABEL_22;
            }

            int64_t v32 = v10 + 4;
            if (v10 + 4 >= v33)
            {
              id v13 = 0LL;
              uint64_t v11 = 0LL;
              v10 += 3LL;
LABEL_8:
              v5[3] = v10;
              v5[4] = v11;
              if (!v13) {
                goto LABEL_45;
              }
              goto LABEL_12;
            }

            unint64_t v35 = *(void *)(v34 + 8 * v32);
            if (v35) {
              goto LABEL_22;
            }
            int64_t v32 = v33 - 1;
            int64_t v38 = v10 + 5;
            while (v33 != v38)
            {
              unint64_t v35 = *(void *)(v34 + 8 * v38++);
              if (v35)
              {
                int64_t v32 = v38 - 1;
                goto LABEL_22;
              }
            }
          }

          id v13 = 0LL;
          uint64_t v11 = 0LL;
          int64_t v10 = v32;
          goto LABEL_8;
        }

        uint64_t v15 = __CocoaSet.Iterator.next()(a1);
        if (!v15
          || (uint64_t v16 = v15,
              uint64_t v44 = v15,
              uint64_t v17 = type metadata accessor for IDSGroupEncryptionControllerMember(),
              swift_unknownObjectRetain(v16, v18),
              swift_dynamicCast(&v45, &v44, (char *)&type metadata for Swift.AnyObject + 8, v17, 7LL),
              id v13 = v45,
              swift_unknownObjectRelease(v16, v19),
              !v13))
        {
LABEL_45:
          swift_retain(a3);
          sub_100400B0C(a1, a2, v40, a3);
          return;
        }

uint64_t sub_100489904(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRelease(*v3);
  uint64_t v6 = __CocoaSet.count.getter(a1);
  uint64_t v8 = swift_unknownObjectRetain(a1, v7);
  Swift::Int v9 = sub_100488CFC(v8, v6);
  Swift::Int v20 = v9;
  Swift::Int v10 = *(void *)(v9 + 40);
  swift_retain(v9);
  Swift::Int v11 = NSObject._rawHashValue(seed:)(v10);
  uint64_t v12 = -1LL << *(_BYTE *)(v9 + 32);
  unint64_t v13 = v11 & ~v12;
  if (((*(void *)(v9 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) != 0)
  {
    type metadata accessor for IDSGroupEncryptionControllerMember();
    id v14 = *(id *)(*(void *)(v9 + 48) + 8 * v13);
    char v15 = ((uint64_t (*)(void))static NSObject.== infix(_:_:))();

    if ((v15 & 1) != 0)
    {
LABEL_6:
      swift_release(v9);
      Swift::Int v9 = *(void *)(*(void *)(v9 + 48) + 8 * v13);
      sub_1004370C0(v13);
      if ((static NSObject.== infix(_:_:)(a2, v9) & 1) != 0)
      {
        Swift::Int *v3 = v20;
        return v9;
      }

      __break(1u);
    }

    else
    {
      uint64_t v16 = ~v12;
      while (1)
      {
        unint64_t v13 = (v13 + 1) & v16;
        if (((*(void *)(v9 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) == 0) {
          break;
        }
        id v17 = *(id *)(*(void *)(v9 + 48) + 8 * v13);
        char v18 = ((uint64_t (*)(void))static NSObject.== infix(_:_:))();

        if ((v18 & 1) != 0) {
          goto LABEL_6;
        }
      }
    }

    swift_release(v9);
    __break(1u);
  }

  uint64_t result = swift_release(v9);
  __break(1u);
  return result;
}

id sub_100489A8C()
{
  uint64_t v1 = v0;
  sub_1003F5CB4(&qword_1009B9100);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (id)swift_release(v2);
    uint64_t *v1 = v4;
    return result;
  }

  id result = (id)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v18 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }

void sub_100489C34(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v24 = a2;
  uint64_t v26 = 0LL;
  int64_t v5 = 0LL;
  uint64_t v27 = a3 + 56;
  uint64_t v6 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v7 = -1LL;
  if (v6 < 64) {
    uint64_t v7 = ~(-1LL << v6);
  }
  unint64_t v8 = v7 & *(void *)(a3 + 56);
  int64_t v28 = (unint64_t)(v6 + 63) >> 6;
  while (v8)
  {
    unint64_t v10 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    unint64_t v11 = v10 | (v5 << 6);
LABEL_22:
    unint64_t v15 = *(char **)(*(void *)(a3 + 48) + 8 * v11);
    uint64_t v16 = *(void **)&v15[OBJC_IVAR____TtC17identityservicesd34IDSGroupEncryptionControllerMember_uri];
    id v17 = v15;
    if (objc_msgSend(v16, "isTokenURI", v24))
    {
      id v18 = [v16 tokenFreeURI];
      type metadata accessor for IDSGroupEncryptionControllerMember();
      unint64_t v19 = *(uint64_t (**)(void))((swift_isaMask & *(void *)v17) + 0x60LL);
      id v20 = v18;
      char v21 = v19();
      id v22 = sub_10040E118((uint64_t)v20, v21 & 1);
      char v23 = sub_1004888F0(v22, a4);

      if ((v23 & 1) == 0) {
        goto LABEL_5;
      }
    }

    else
    {

LABEL_5:
      *(unint64_t *)((char *)a1 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v11;
      if (__OFADD__(v26++, 1LL)) {
        goto LABEL_28;
      }
    }
  }

  int64_t v12 = v5 + 1;
  if (__OFADD__(v5, 1LL))
  {
    __break(1u);
    goto LABEL_27;
  }

  if (v12 >= v28) {
    goto LABEL_25;
  }
  unint64_t v13 = *(void *)(v27 + 8 * v12);
  ++v5;
  if (v13) {
    goto LABEL_21;
  }
  int64_t v5 = v12 + 1;
  if (v12 + 1 >= v28) {
    goto LABEL_25;
  }
  unint64_t v13 = *(void *)(v27 + 8 * v5);
  if (v13) {
    goto LABEL_21;
  }
  int64_t v5 = v12 + 2;
  if (v12 + 2 >= v28) {
    goto LABEL_25;
  }
  unint64_t v13 = *(void *)(v27 + 8 * v5);
  if (v13)
  {
LABEL_21:
    unint64_t v8 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v5 << 6);
    goto LABEL_22;
  }

  int64_t v14 = v12 + 3;
  if (v14 >= v28)
  {
LABEL_25:
    swift_retain(a3);
    sub_100400B0C(a1, v24, v26, a3);
    return;
  }

  unint64_t v13 = *(void *)(v27 + 8 * v14);
  if (v13)
  {
    int64_t v5 = v14;
    goto LABEL_21;
  }

  while (1)
  {
    int64_t v5 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      break;
    }
    if (v5 >= v28) {
      goto LABEL_25;
    }
    unint64_t v13 = *(void *)(v27 + 8 * v5);
    ++v14;
    if (v13) {
      goto LABEL_21;
    }
  }

uint64_t sub_100489EA8(uint64_t a1, uint64_t a2)
{
  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  unint64_t v7 = (unint64_t)((1LL << v5) + 63) >> 6;
  size_t v8 = 8 * v7;
  swift_bridgeObjectRetain_n(a2, 2LL);
  if (v6 <= 0xD || (swift_stdlib_isStackAllocationSafe(v8, 8LL) & 1) != 0)
  {
    __chkstk_darwin(v9, v10);
    bzero((char *)&v17 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0LL), v8);
    swift_bridgeObjectRetain(a2);
    sub_100489C34((unint64_t *)((char *)&v17 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0LL)), v7, a1, a2);
    uint64_t v12 = v11;
    swift_release(a1);
    uint64_t v13 = swift_bridgeObjectRelease(a2);
    if (v2) {
      swift_willThrow(v13);
    }
    swift_bridgeObjectRelease_n(a2, 2LL);
  }

  else
  {
    int64_t v14 = (void *)swift_slowAlloc(v8, -1LL);
    bzero(v14, v8);
    swift_bridgeObjectRetain(a2);
    sub_100489C34((unint64_t *)v14, v7, a1, a2);
    uint64_t v12 = v15;
    swift_release(a1);
    swift_bridgeObjectRelease(a2);
    swift_slowDealloc(v14, -1LL, -1LL);
    swift_bridgeObjectRelease_n(a2, 2LL);
  }

  return v12;
}

Swift::Int sub_10048A06C(uint64_t a1, uint64_t a2)
{
  if ((a1 & 0xC000000000000001LL) == 0) {
    return sub_100489EA8(a1, a2);
  }
  uint64_t v3 = &_swiftEmptySetSingleton;
  char v31 = &_swiftEmptySetSingleton;
  if (a1 < 0) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(a2);
  uint64_t v5 = __CocoaSet.makeIterator()(v4);
  uint64_t v6 = __CocoaSet.Iterator.next()(v5);
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = type metadata accessor for IDSGroupEncryptionControllerMember();
    do
    {
      uint64_t v29 = v7;
      swift_dynamicCast(&v30, &v29, (char *)&type metadata for Swift.AnyObject + 8, v8, 7LL);
      uint64_t v15 = v30;
      uint64_t v16 = *(void **)&v30[OBJC_IVAR____TtC17identityservicesd34IDSGroupEncryptionControllerMember_uri];
      id v17 = [v16 tokenFreeURI];
      id v18 = *(uint64_t (**)(void))((swift_isaMask & *v15) + 0x60LL);
      id v19 = v17;
      char v20 = v18();
      id v21 = sub_10040E118((uint64_t)v19, v20 & 1);
      LOBYTE(v18) = sub_1004888F0(v21, a2);

      if ((v18 & 1) != 0)
      {
      }

      else
      {
LABEL_14:
        id v22 = v30;
        char v23 = v31;
        unint64_t v24 = v31[2];
        if (v31[3] <= v24)
        {
          sub_1004001F0(v24 + 1);
          char v23 = v31;
        }

        Swift::Int result = NSObject._rawHashValue(seed:)(v23[5]);
        __n128 v10 = v23 + 7;
        uint64_t v11 = -1LL << *((_BYTE *)v23 + 32);
        unint64_t v12 = result & ~v11;
        unint64_t v13 = v12 >> 6;
        if (((-1LL << v12) & ~v23[(v12 >> 6) + 7]) != 0)
        {
          unint64_t v14 = __clz(__rbit64((-1LL << v12) & ~v23[(v12 >> 6) + 7])) | v12 & 0x7FFFFFFFFFFFFFC0LL;
        }

        else
        {
          char v25 = 0;
          unint64_t v26 = (unint64_t)(63 - v11) >> 6;
          do
          {
            if (++v13 == v26 && (v25 & 1) != 0)
            {
              __break(1u);
              return result;
            }

            BOOL v27 = v13 == v26;
            if (v13 == v26) {
              unint64_t v13 = 0LL;
            }
            v25 |= v27;
            uint64_t v28 = v10[v13];
          }

          while (v28 == -1);
          unint64_t v14 = __clz(__rbit64(~v28)) + (v13 << 6);
        }

        *(void *)((char *)v10 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
        *(void *)(v23[6] + 8 * v14) = v22;
        ++v23[2];
      }

      uint64_t v7 = __CocoaSet.Iterator.next()(result);
    }

    while (v7);
    uint64_t v3 = v31;
  }

  swift_bridgeObjectRelease(a2);
  swift_release(v5);
  return (Swift::Int)v3;
}

uint64_t destroy for IDSGroupMembershipDiff(void *a1)
{
  return swift_bridgeObjectRelease(a1[3]);
}

uint64_t *initializeWithCopy for IDSGroupMembershipDiff(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  a1[2] = v5;
  a1[3] = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t *assignWithCopy for IDSGroupMembershipDiff(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[2];
  uint64_t v9 = a1[2];
  a1[2] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a2[3];
  uint64_t v11 = a1[3];
  a1[3] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

void *assignWithTake for IDSGroupMembershipDiff(void *a1, _OWORD *a2)
{
  uint64_t v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(a1[2]);
  uint64_t v5 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for IDSGroupMembershipDiff(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IDSGroupMembershipDiff(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)Swift::Int result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 3sub_10040A648(v1 + 2) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)Swift::Int result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 3sub_10040A648(v1 + 2) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for IDSGroupMembershipDiff()
{
  return &type metadata for IDSGroupMembershipDiff;
}

uint64_t sub_10048A514()
{
  uint64_t v1 = (unsigned int *)(v0 + OBJC_IVAR____TtC17identityservicesd29IDSGlobalLinkP2PKeyNegotiator_counter);
  swift_beginAccess(v0 + OBJC_IVAR____TtC17identityservicesd29IDSGlobalLinkP2PKeyNegotiator_counter, v3, 0LL, 0LL);
  return *v1;
}

uint64_t sub_10048A558(int a1)
{
  uint64_t v3 = (_DWORD *)(v1 + OBJC_IVAR____TtC17identityservicesd29IDSGlobalLinkP2PKeyNegotiator_counter);
  uint64_t result = swift_beginAccess(v3, v5, 1LL, 0LL);
  _DWORD *v3 = a1;
  return result;
}

uint64_t (*sub_10048A5A0(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

id sub_10048A5E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v13 = objc_allocWithZone(v6);
  return sub_10048A654(a1, a2, a3, a4, a5, a6);
}

id sub_10048A654(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(_DWORD *)&v6[OBJC_IVAR____TtC17identityservicesd29IDSGlobalLinkP2PKeyNegotiator_counter] = 1;
  uint64_t v13 = OBJC_IVAR____TtC17identityservicesd29IDSGlobalLinkP2PKeyNegotiator_lock;
  uint64_t v14 = sub_1003F5CB4((uint64_t *)&unk_1009B9860);
  uint64_t v15 = swift_allocObject(v14, 20LL, 7LL);
  *(_DWORD *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
  *(void *)&v6[v13] = v15;
  uint64_t v16 = &v6[OBJC_IVAR____TtC17identityservicesd29IDSGlobalLinkP2PKeyNegotiator_sessionID];
  *(void *)uint64_t v16 = a1;
  *((void *)v16 + 1) = a2;
  *(void *)&v6[OBJC_IVAR____TtC17identityservicesd29IDSGlobalLinkP2PKeyNegotiator_localIdentities] = a4;
  *(void *)&v6[OBJC_IVAR____TtC17identityservicesd29IDSGlobalLinkP2PKeyNegotiator_localPushToken] = a3;
  *(void *)&v6[OBJC_IVAR____TtC17identityservicesd29IDSGlobalLinkP2PKeyNegotiator_remotePushTokens] = a5;
  *(void *)&v6[OBJC_IVAR____TtC17identityservicesd29IDSGlobalLinkP2PKeyNegotiator_remoteIdentities] = a6;
  v18.receiver = v6;
  v18.super_class = (Class)type metadata accessor for IDSGlobalLinkP2PKeyNegotiator();
  return objc_msgSendSuper2(&v18, "init");
}

uint64_t type metadata accessor for IDSGlobalLinkP2PKeyNegotiator()
{
  return objc_opt_self(&OBJC_CLASS____TtC17identityservicesd29IDSGlobalLinkP2PKeyNegotiator);
}

id sub_10048A754()
{
  uint64_t v1 = v0;
  uint64_t v2 = OBJC_IVAR____TtC17identityservicesd29IDSGlobalLinkP2PKeyNegotiator_lock;
  uint64_t v3 = *(os_unfair_lock_s **)((char *)v0 + OBJC_IVAR____TtC17identityservicesd29IDSGlobalLinkP2PKeyNegotiator_lock);
  swift_retain(v3);
  os_unfair_lock_lock(v3 + 4);
  uint64_t v4 = swift_release(v3);
  uint64_t v5 = *(uint64_t (**)(__n128))((swift_isaMask & *v1) + 0x88LL);
  if (((unsigned int (*)(uint64_t))v5)(v4) == -1) {
LABEL_5:
  }
    abort();
  uint64_t v6 = (void (*)(_BYTE *, void))(*(uint64_t (**)(_BYTE *))((swift_isaMask & *v1) + 0x98LL))(v17);
  if (*v7 == -1)
  {
    __break(1u);
    goto LABEL_5;
  }

  ++*v7;
  v6(v17, 0LL);
  type metadata accessor for IDSGlobalLinkP2PKeyNegotiation(0LL);
  uint64_t v8 = *(void *)((char *)v1 + OBJC_IVAR____TtC17identityservicesd29IDSGlobalLinkP2PKeyNegotiator_sessionID);
  uint64_t v9 = *(void *)((char *)v1 + OBJC_IVAR____TtC17identityservicesd29IDSGlobalLinkP2PKeyNegotiator_sessionID + 8);
  __n128 v10 = swift_bridgeObjectRetain(v9);
  int v11 = v5(v10);
  uint64_t v12 = *(void *)((char *)v1 + OBJC_IVAR____TtC17identityservicesd29IDSGlobalLinkP2PKeyNegotiator_localIdentities);
  uint64_t v13 = *(void *)((char *)v1 + OBJC_IVAR____TtC17identityservicesd29IDSGlobalLinkP2PKeyNegotiator_remoteIdentities);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  id v14 = sub_1004CB894(v1, (uint64_t)&off_100906F48, v8, v9, v11, v12, v13);
  uint64_t v15 = *(os_unfair_lock_s **)((char *)v1 + v2);
  swift_retain(v15);
  os_unfair_lock_unlock(v15 + 4);
  swift_release(v15);
  return v14;
}

uint64_t sub_10048A8FC(unsigned int a1)
{
  LODWORD(vsub_10040A648(v1 + 3) = (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x88LL))();
  else {
    uint64_t v3 = v3;
  }
  return (*(uint64_t (**)(uint64_t))((swift_isaMask & *v1) + 0x90LL))(v3);
}

id sub_10048A980()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for IDSGlobalLinkP2PKeyNegotiator();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10048AA2C()
{
  return (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xC8LL))();
}

uint64_t sub_10048AA48(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10048AA78 + 4 * aX[a1]))( 0x6F6B636547LL,  0xE500000000000000LL);
}

uint64_t sub_10048AA78()
{
  return 0x6174536F6B636547LL;
}

unint64_t sub_10048AA94()
{
  return 0xD000000000000010LL;
}

uint64_t sub_10048AB9C()
{
  return 0x73655370756F7247LL;
}

uint64_t sub_10048ABDC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2 = *a2;
  uint64_t v3 = sub_10048AA48(*a1);
  uint64_t v5 = v4;
  uint64_t v6 = sub_10048AA48(v2);
  if (v3 == v6 && v5 == v7)
  {
    char v10 = 1;
    uint64_t v9 = v5;
  }

  else
  {
    uint64_t v9 = v7;
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0LL);
  }

  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

Swift::Int sub_10048AC64()
{
  unsigned __int8 v1 = *v0;
  Hasher.init(_seed:)(v6, 0LL);
  uint64_t v2 = sub_10048AA48(v1);
  uint64_t v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_10048ACC4(uint64_t a1)
{
  uint64_t v3 = sub_10048AA48(*v1);
  uint64_t v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_10048AD04(uint64_t a1)
{
  unsigned __int8 v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  uint64_t v3 = sub_10048AA48(v2);
  uint64_t v5 = v4;
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

unint64_t sub_10048AD60@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10048AE44(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10048AD8C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_10048AA48(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10048ADB4(unsigned __int8 a1)
{
  uint64_t v1 = sub_10048AA48(a1);
  return Logger.init(subsystem:category:)(0x6C7070612E6D6F63LL, 0xED00005344492E65LL, v1, v2);
}

uint64_t sub_10048AE00(unsigned __int8 a1)
{
  uint64_t v1 = sub_10048AA48(a1);
  return Logger.init(subsystem:category:)(0xD000000000000016LL, 0x8000000100841BC0LL, v1, v2);
}

unint64_t sub_10048AE44(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100906F60, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0xE) {
    return 14LL;
  }
  else {
    return v3;
  }
}

unint64_t sub_10048AE90()
{
  unint64_t result = qword_1009BB718;
  if (!qword_1009BB718)
  {
    unint64_t result = swift_getWitnessTable(&unk_10071C098, &type metadata for LogCategory);
    atomic_store(result, (unint64_t *)&qword_1009BB718);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for LogCategory(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF3) {
    goto LABEL_17;
  }
  if (a2 + 13 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 13) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 13;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 13;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 13;
    }
  }

uint64_t storeEnumTagSinglePayload for LogCategory(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 13 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 13) >> 8 < 0xFF) {
    LODWORD(__chkstk_darwin(v3, v4) = 1;
  }
  else {
    LODWORD(__chkstk_darwin(v3, v4) = v3;
  }
  if (a3 >= 0xF3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF2) {
    return ((uint64_t (*)(void))((char *)&loc_10048AFB0 + 4 * byte_10071C093[v4]))();
  }
  *a1 = a2 + 13;
  return ((uint64_t (*)(void))((char *)sub_10048AFE4 + 4 * byte_10071C08E[v4]))();
}

uint64_t sub_10048AFE4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10048AFEC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10048AFF4LL);
  }
  return result;
}

uint64_t sub_10048B000(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10048B008LL);
  }
  *(_BYTE *)unint64_t result = a2 + 13;
  return result;
}

uint64_t sub_10048B00C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10048B014(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LogCategory()
{
  return &type metadata for LogCategory;
}

unint64_t sub_10048B030()
{
  unint64_t result = qword_1009B8E28;
  if (!qword_1009B8E28)
  {
    uint64_t v1 = sub_100401A88((uint64_t *)&unk_1009B9840);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1009B8E28);
  }

  return result;
}

void *sub_10048B0E4()
{
  uint64_t v1 = (void **)(v0
               + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_rootExchangeController);
  swift_beginAccess( v0 + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_rootExchangeController,  v5,  0LL,  0LL);
  int v2 = *v1;
  id v3 = v2;
  return v2;
}

void sub_10048B178(void *a1)
{
}

void (*sub_10048B19C(void *a1))(uint64_t a1, char a2)
{
  id v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  uint64_t v4 = (void **)(v1
               + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_rootExchangeController);
  swift_beginAccess( v1 + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_rootExchangeController,  v3,  0LL,  0LL);
  uint64_t v5 = *v4;
  v3[3] = *v4;
  id v6 = v5;
  return sub_10048B210;
}

void sub_10048B210(uint64_t a1, char a2)
{
  int v2 = *(void **)a1;
  uint64_t v4 = (void **)(*(void *)a1 + 24LL);
  id v3 = *v4;
  if ((a2 & 1) != 0)
  {
    uint64_t v5 = v3;
    sub_1004956A4(v3);

    id v3 = *v4;
  }

  else
  {
    sub_1004956A4(*(void **)(*(void *)a1 + 24LL));
  }

  free(v2);
}

uint64_t sub_10048B278()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_participantProvider;
  swift_beginAccess( v0 + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_participantProvider,  v3,  0LL,  0LL);
  return swift_unknownObjectWeakLoadStrong(v1);
}

uint64_t sub_10048B2C4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2 + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_participantProvider;
  swift_beginAccess(v5, v8, 1LL, 0LL);
  *(void *)(v5 + 8) = a2;
  swift_unknownObjectWeakAssign(v5, a1);
  return swift_unknownObjectRelease(a1, v6);
}

void (*sub_10048B32C(void *a1))(uint64_t a1, char a2)
{
  id v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_participantProvider;
  void v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess(v1 + v4, v3, 33LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = Strong;
  v3[4] = v7;
  return sub_100412358;
}

uint64_t sub_10048B3A0()
{
  uint64_t v1 = (void *)(v0 + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_materialProviders);
  swift_beginAccess( v0 + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_materialProviders,  v3,  0LL,  0LL);
  return swift_bridgeObjectRetain(*v1);
}

uint64_t sub_10048B3E8(uint64_t a1)
{
  id v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_materialProviders);
  swift_beginAccess(v3, v6, 1LL, 0LL);
  uint64_t v4 = *v3;
  uint64_t *v3 = a1;
  return swift_bridgeObjectRelease(v4);
}

uint64_t (*sub_10048B438(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

uint64_t sub_10048B47C()
{
  uint64_t v1 = (unsigned __int8 *)(v0
                         + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_needsMaterialUpdate);
  swift_beginAccess( v0 + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_needsMaterialUpdate,  v3,  0LL,  0LL);
  return *v1;
}

uint64_t sub_10048B4C0(char a1)
{
  id v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_needsMaterialUpdate);
  uint64_t result = swift_beginAccess(v3, v5, 1LL, 0LL);
  _BYTE *v3 = a1;
  return result;
}

uint64_t (*sub_10048B508(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_10048B54C@<X0>(uint64_t a1@<X8>)
{
  return sub_10048B5B4( &OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_materialCurrentlySentToAVC,  a1);
}

uint64_t sub_10048B558(uint64_t a1)
{
  return sub_10048B614( a1,  &OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_materialCurrentlySentToAVC);
}

uint64_t (*sub_10048B564(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_10048B5A8@<X0>(uint64_t a1@<X8>)
{
  return sub_10048B5B4( &OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_materialCurrentlySentToFramework,  a1);
}

uint64_t sub_10048B5B4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *a1;
  swift_beginAccess(v4, v6, 0LL, 0LL);
  return sub_100410FD0(v4, a2, &qword_1009B8E08);
}

uint64_t sub_10048B608(uint64_t a1)
{
  return sub_10048B614( a1,  &OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_materialCurrentlySentToFramework);
}

uint64_t sub_10048B614(uint64_t a1, void *a2)
{
  uint64_t v4 = v2 + *a2;
  swift_beginAccess(v4, v6, 33LL, 0LL);
  sub_100495814(a1, v4);
  return swift_endAccess(v6);
}

uint64_t (*sub_10048B668(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_10048B6AC()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_materialGeneration;
  swift_beginAccess( v0 + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_materialGeneration,  v3,  0LL,  0LL);
  return *(void *)v1;
}

uint64_t sub_10048B6F0(uint64_t a1)
{
  id v3 = (void *)(v1 + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_materialGeneration);
  uint64_t result = swift_beginAccess(v3, v5, 1LL, 0LL);
  void *v3 = a1;
  return result;
}

uint64_t (*sub_10048B738(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_10048B77C()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_localParticipantID;
  swift_beginAccess( v0 + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_localParticipantID,  v3,  0LL,  0LL);
  return *(void *)v1;
}

uint64_t sub_10048B7C0(uint64_t a1)
{
  id v3 = (void *)(v1 + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_localParticipantID);
  swift_beginAccess( v1 + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_localParticipantID,  v5,  1LL,  0LL);
  void *v3 = a1;
  (*(void (**)(uint64_t))((swift_isaMask & **(void **)(v1
                                                                 + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_mkmController))
                                  + 0x100LL))(a1);
  return (*(uint64_t (**)(void))((swift_isaMask & **(void **)(v1
                                                                          + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_skmController))
                                           + 0x100LL))(*v3);
}

void (*sub_10048B86C(void *a1))(void *a1, char a2)
{
  id v3 = malloc(0x28uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_localParticipantID;
  v3[3] = v1;
  v3[4] = v4;
  swift_beginAccess(v1 + v4, v3, 33LL, 0LL);
  return sub_10048B8C4;
}

void sub_10048B8C4(void *a1, char a2)
{
  id v3 = (void *)*a1;
  swift_endAccess(*a1);
  if ((a2 & 1) == 0)
  {
    uint64_t v5 = v3[3];
    uint64_t v4 = v3[4];
    (*(void (**)(void))((swift_isaMask & **(void **)(v5
                                                                  + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_mkmController))
                                   + 0x100LL))(*(void *)(v5 + v4));
    (*(void (**)(void))((swift_isaMask & **(void **)(v5
                                                                  + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_skmController))
                                   + 0x100LL))(*(void *)(v5 + v4));
  }

  free(v3);
}

BOOL sub_10048B958()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_idsdSessionProvider);
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 sessionWithUniqueID:v2];

  if (v3) {
    swift_unknownObjectRelease(v3, v4);
  }
  return v3 != 0LL;
}

id sub_10048B9CC()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_idsdSessionProvider);
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 sessionWithUniqueID:v2];

  if (!v3) {
    return 0LL;
  }
  id v4 = [v3 sessionIsActive];
  swift_unknownObjectRelease(v3, v5);
  return v4;
}

char *sub_10048BA58( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  id v18 = objc_allocWithZone(v13);
  id v19 = sub_10049585C(a1, a2, a3, a4, a5, a6, a8, a9, a10, a11, a12, a13);

  swift_unknownObjectRelease(a7, v20);
  swift_unknownObjectRelease(a9, v21);
  swift_unknownObjectRelease(a10, v22);

  return v19;
}

uint64_t sub_10048BB20(uint64_t a1)
{
  uint64_t v2 = v1;
  id v3 = (os_log_s *)Logger.logObject.getter(a1);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v6 = swift_slowAlloc(32LL, -1LL);
    uint64_t v10 = v6;
    *(_DWORD *)uint64_t v5 = 136315138;
    uint64_t v9 = sub_1003FFBB0(0xD000000000000016LL, 0x8000000100841BE0LL, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v9, &v10, v5 + 4, v5 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%s: reseting keys", v5, 0xCu);
    swift_arrayDestroy(v6, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1LL, -1LL);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(v2
                                          + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_mkmCache)
                            + 296LL))();
  return (*(uint64_t (**)(uint64_t))(**(void **)(v2
                                                          + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_skmCache)
                                            + 296LL))(v7);
}

uint64_t sub_10048BC90(uint64_t a1)
{
  uint64_t v2 = v1;
  id v3 = (os_log_s *)Logger.logObject.getter(a1);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v6 = swift_slowAlloc(32LL, -1LL);
    uint64_t v10 = v6;
    *(_DWORD *)uint64_t v5 = 136315138;
    uint64_t v9 = sub_1003FFBB0(0xD000000000000013LL, 0x8000000100841C00LL, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v9, &v10, v5 + 4, v5 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%s", v5, 0xCu);
    swift_arrayDestroy(v6, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1LL, -1LL);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v7 = (*(uint64_t (**)(void))((swift_isaMask & **(void **)(v2
                                                           + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_skmController))
                            + 0x190LL))();
  return (*(uint64_t (**)(uint64_t))((swift_isaMask & **(void **)(v2
                                                                           + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_mkmController))
                                            + 0x190LL))(v7);
}

uint64_t sub_10048BE18()
{
  uint64_t v1 = (*(uint64_t (**)(void))(**(void **)(v0
                                          + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_mkmCache)
                            + 336LL))();
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(**(void **)(v0
                                                        + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_skmCache)
                                          + 336LL))(v1);
  uint64_t v3 = (*(uint64_t (**)(uint64_t))((swift_isaMask & **(void **)(v0
                                                                         + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_mkmController))
                                          + 0x1F8LL))(v2);
  return (*(uint64_t (**)(uint64_t))((swift_isaMask & **(void **)(v0
                                                                           + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_skmController))
                                            + 0x1F8LL))(v3);
}

uint64_t sub_10048BEB4( char a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, int a7, void *a8, uint64_t a9, unsigned __int8 a10, unint64_t a11, unsigned __int8 a12, unsigned __int8 a13)
{
  int v99 = a13;
  int v90 = a12;
  int v97 = a7;
  int v98 = a10;
  uint64_t v89 = a9;
  int v96 = a1 & 1;
  uint64_t v20 = type metadata accessor for UUID(0LL, a2);
  __chkstk_darwin(v21, v22);
  unint64_t v24 = (char *)&v83 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v91 = v13;
  uint64_t v92 = a2;
  uint64_t v88 = v25;
  uint64_t v26 = a2;
  uint64_t v27 = a3;
  unint64_t v28 = a6;
  (*((void (**)(char *, uint64_t, uint64_t))v25 + 2))(v24, v26, v20);
  sub_1004028CC(v27, a4);
  sub_1004028CC(a5, a6);
  id v29 = a8;
  unint64_t v93 = a4;
  sub_1004028CC(v27, a4);
  uint64_t v100 = a5;
  sub_1004028CC(a5, a6);
  id v30 = v29;
  char v31 = (os_log_s *)Logger.logObject.getter(v30);
  os_log_type_t v32 = static os_log_type_t.default.getter();
  int v33 = v32;
  BOOL v34 = os_log_type_enabled(v31, v32);
  unint64_t v94 = a11;
  id v35 = (id)(HIDWORD(a11) & 1);
  if (v34)
  {
    uint64_t v36 = swift_slowAlloc(101LL, -1LL);
    id v95 = v30;
    uint64_t v37 = v36;
    uint64_t v84 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v86 = swift_slowAlloc(256LL, -1LL);
    v103[0] = v86;
    *(_DWORD *)uint64_t v37 = 136317698;
    int v85 = v33;
    uint64_t v101 = sub_1003FFBB0(0xD00000000000007ALL, 0x8000000100841C20LL, v103);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, v102, v37 + 4, v37 + 12);
    *(_WORD *)(v37 + 1sub_10040A648(v1 + 2) = 2080;
    LOBYTE(v101) = v96;
    uint64_t v38 = String.init<A>(describing:)(&v101, &type metadata for IDSGroupEncryptionKMKind);
    uint64_t v87 = HIDWORD(a11) & 1;
    unint64_t v40 = v39;
    uint64_t v101 = sub_1003FFBB0(v38, v39, v103);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, v102, v37 + 14, v37 + 22);
    swift_bridgeObjectRelease(v40);
    *(_WORD *)(v37 + 2sub_10040A648(v1 + 2) = 2080;
    uint64_t v41 = sub_10040A2B0( &qword_1009B95C0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v42 = dispatch thunk of CustomStringConvertible.description.getter(v20, v41);
    unint64_t v44 = v43;
    uint64_t v101 = sub_1003FFBB0(v42, v43, v103);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, v102, v37 + 24, v37 + 32);
    swift_bridgeObjectRelease(v44);
    (*((void (**)(char *, uint64_t))v88 + 1))(v24, v20);
    *(_WORD *)(v37 + 3sub_10040A648(v1 + 2) = 2080;
    unint64_t v45 = v93;
    sub_1004028CC(v27, v93);
    uint64_t v46 = Data.description.getter(v27, v45);
    unint64_t v48 = v47;
    sub_100402A84(v27, v45);
    uint64_t v101 = sub_1003FFBB0(v46, v48, v103);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, v102, v37 + 34, v37 + 42);
    swift_bridgeObjectRelease(v48);
    sub_100402A84(v27, v45);
    sub_100402A84(v27, v45);
    *(_WORD *)(v37 + 4sub_10040A648(v1 + 2) = 2080;
    uint64_t v88 = v31;
    uint64_t v49 = v100;
    sub_1004028CC(v100, v28);
    uint64_t v50 = Data.description.getter(v49, v28);
    unint64_t v52 = v51;
    sub_100402A84(v49, v28);
    uint64_t v101 = sub_1003FFBB0(v50, v52, v103);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, v102, v37 + 44, v37 + 52);
    swift_bridgeObjectRelease(v52);
    sub_100402A84(v49, v28);
    sub_100402A84(v49, v28);
    *(_WORD *)(v37 + 5sub_10040A648(v1 + 2) = 2080;
    LOBYTE(v101) = v97;
    uint64_t v53 = String.init<A>(describing:)(&v101, &type metadata for IDSGroupEncryptionPublicIdentityWrapMode);
    unint64_t v55 = v54;
    uint64_t v101 = sub_1003FFBB0(v53, v54, v103);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, v102, v37 + 54, v37 + 62);
    swift_bridgeObjectRelease(v55);
    *(_WORD *)(v37 + 6sub_10040A648(v1 + 2) = 2112;
    uint64_t v101 = (uint64_t)v95;
    id v35 = v95;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, v102, v37 + 64, v37 + 72);
    int64_t v56 = v84;
    *uint64_t v84 = v95;

    LOBYTE(v35) = v87;
    *(_WORD *)(v37 + 7sub_10040A648(v1 + 2) = 2080;
    uint64_t v57 = v89;
    uint64_t v101 = v89;
    v102[0] = v98 & 1;
    uint64_t v58 = sub_1003F5CB4(&qword_1009B9DA0);
    uint64_t v59 = String.init<A>(describing:)(&v101, v58);
    unint64_t v61 = v60;
    uint64_t v101 = sub_1003FFBB0(v59, v60, v103);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, v102, v37 + 74, v37 + 82);
    swift_bridgeObjectRelease(v61);
    *(_WORD *)(v37 + 8sub_10040A648(v1 + 2) = 2080;
    LODWORD(v101) = v94;
    BYTE4(v101) = (_BYTE)v35;
    uint64_t v62 = sub_1003F5CB4(&qword_1009BBE80);
    uint64_t v63 = String.init<A>(describing:)(&v101, v62);
    unint64_t v65 = v64;
    uint64_t v101 = sub_1003FFBB0(v63, v64, v103);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, v102, v37 + 84, v37 + 92);
    swift_bridgeObjectRelease(v65);
    *(_WORD *)(v37 + 9sub_10040A648(v1 + 2) = 1024;
    LODWORD(v101) = v90 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, (char *)&v101 + 4, v37 + 94, v37 + 98);
    *(_WORD *)(v37 + 98) = 256;
    LOBYTE(v101) = v99;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, (char *)&v101 + 1, v37 + 100, v37 + 101);
    os_log_t v66 = v88;
    _os_log_impl( (void *)&_mh_execute_header,  v88,  (os_log_type_t)v85,  "%s: kind: %s; ki: %s; ks: %s; wrappedKM: %s; wrapMode: %s; forPushToken: %@; participantID: %s; generationCounter:"
      " %s; isFromSender: %{BOOL}d; shortKILength: %hhu.",
      (uint8_t *)v37,
      0x65u);
    uint64_t v67 = sub_1003F5CB4(&qword_1009B92C8);
    swift_arrayDestroy(v56, 1LL, v67);
    swift_slowDealloc(v56, -1LL, -1LL);
    uint64_t v68 = v86;
    swift_arrayDestroy(v86, 8LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v68, -1LL, -1LL);
    uint64_t v69 = v37;
    id v30 = v95;
    swift_slowDealloc(v69, -1LL, -1LL);
  }

  else
  {

    (*((void (**)(char *, uint64_t))v88 + 1))(v24, v20);
    unint64_t v45 = v93;
    sub_100402A84(v27, v93);
    sub_100402A84(v27, v45);
    uint64_t v72 = v100;
    sub_100402A84(v100, v28);
    sub_100402A84(v72, v28);

    uint64_t v57 = v89;
  }

  uint64_t v73 = &OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_mkmCache;
  if (v96) {
    uint64_t v73 = &OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_skmCache;
  }
  uint64_t v74 = *(void *)(v91 + *v73);
  __chkstk_darwin(v70, v71);
  *((_BYTE *)&v83 - 11sub_10040A648(v1 + 2) = v97;
  uint64_t v75 = v100;
  *(&v83 - 1sub_10040A648(v1 + 3) = v76;
  *(&v83 - 1sub_10040A648(v1 + 2) = v75;
  *(&v83 - 11) = v28;
  *((_BYTE *)&v83 - 80) = v77 & 1;
  *(&v83 - 9) = (uint64_t)v30;
  *((_BYTE *)&v83 - 64) = v78;
  *(&v83 - 7) = v92;
  *(&v83 - 6) = v27;
  *(&v83 - 5) = v45;
  *((_DWORD *)&v83 - 8) = v94;
  *((_BYTE *)&v83 - 28) = (_BYTE)v35;
  *((_BYTE *)&v83 - 27) = v99;
  *(&v83 - sub_10040A648(v1 + 3) = v57;
  *((_BYTE *)&v83 - swift_unknownObjectWeakDestroy(v0 + 16) = v98 & 1;
  int64_t v80 = v79 + 4;
  *(&v83 - 1) = v74;
  swift_retain(v74);
  os_unfair_lock_lock(v80);
  sub_100495D44(&v101);
  uint64_t v81 = v101;
  os_unfair_lock_unlock(v80);
  swift_release(v74);
  return v81;
}

void sub_10048C600( int a1@<W0>, void *a2@<X1>, uint64_t (*a3)(_BYTE *, uint64_t, uint64_t)@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, unint64_t a11, uint64_t a12, unsigned __int8 a13, uint64_t a14, char a15, uint64_t a16)
{
  uint64_t v200 = a8;
  v201 = a9;
  LODWORD(v194) = a7;
  uint64_t v183 = a6;
  int v189 = a5;
  v196 = a3;
  uint64_t v197 = a4;
  LODWORD(v195) = a1;
  type metadata accessor for Date(0LL);
  __chkstk_darwin(v17, v18);
  v191 = &v180[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v21 = type metadata accessor for UUID(0LL, v20);
  uint64_t v198 = *(void *)(v21 - 8);
  uint64_t v199 = v21;
  __chkstk_darwin(v22, v23);
  v182 = &v180[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v25, v26);
  v187 = &v180[-v27];
  __chkstk_darwin(v28, v29);
  v188 = &v180[-v30];
  __chkstk_darwin(v31, v32);
  v190 = &v180[-v33];
  uint64_t v192 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  __chkstk_darwin(v34, v35);
  v193 = &v180[-((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  sub_1003F5CB4(&qword_1009B95A0);
  __chkstk_darwin(v37, v38);
  unint64_t v40 = &v180[-((v39 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v41, v42);
  unint64_t v44 = &v180[-v43];
  __chkstk_darwin(v45, v46);
  unint64_t v48 = &v180[-v47];
  uint64_t v49 = type metadata accessor for IDSGroupEncryptionFullIdentity(0LL);
  uint64_t v50 = *(void *)(v49 - 8);
  __chkstk_darwin(v51, v52);
  v186 = &v180[-((v53 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v56 = __chkstk_darwin(v54, v55);
  uint64_t v58 = &v180[-v57];
  uint64_t v59 = *(void **)((char *)a2
                   + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_identityController);
  (*(void (**)(uint64_t))((swift_isaMask & *v59) + 0x130LL))(v56);
  unint64_t v60 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v50 + 48);
  if (v60(v48, 1LL, v49) == 1)
  {
    unint64_t v61 = v201;
    uint64_t v62 = sub_10040A274((uint64_t)v48, &qword_1009B95A0);
    uint64_t v63 = (os_log_s *)Logger.logObject.getter(v62);
    os_log_type_t v64 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v63, v64))
    {
      unint64_t v65 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v66 = swift_slowAlloc(32LL, -1LL);
      v203[0] = v66;
      *(_DWORD *)unint64_t v65 = 136315138;
      uint64_t v202 = sub_1003FFBB0(0xD00000000000007ALL, 0x8000000100841C20LL, v203);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v202, v203, v65 + 4, v65 + 12);
      _os_log_impl((void *)&_mh_execute_header, v63, v64, "%s: have no local identity", v65, 0xCu);
      swift_arrayDestroy(v66, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v66, -1LL, -1LL);
      swift_slowDealloc(v65, -1LL, -1LL);
    }

    id v67 = 0LL;
    uint64_t v68 = v61;
    goto LABEL_47;
  }

  unsigned int v181 = v194 & 1;
  BOOL v69 = v195 != 2;
  uint64_t v70 = sub_1003F600C((uint64_t)v48, (uint64_t)v58, type metadata accessor for IDSGroupEncryptionFullIdentity);
  (*(void (**)(uint64_t))((swift_isaMask & *v59) + 0xC0LL))(v70);
  v185 = a2;
  __n128 v71 = (void *)((char *)a2
                 + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_cryptoHandler);
  uint64_t v194 = (uint64_t)v44;
  uint64_t v72 = *(void *)((char *)a2
                  + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_cryptoHandler
                  + 24);
  uint64_t v73 = *(void *)((char *)a2
                  + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_cryptoHandler
                  + 32);
  sub_10040A238( (void *)((char *)a2 + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_cryptoHandler),  v72);
  uint64_t v74 = *(int *)(v49 + 20);
  v184 = v58;
  uint64_t v75 = *(uint64_t (**)(uint64_t (*)(void, void, void), uint64_t, id, BOOL, uint64_t, uint64_t))(v73 + 16);
  id v76 = *(id *)&v58[v74];
  uint64_t v77 = v75((uint64_t (*)(void, void, void))v196, v197, v76, v69, v72, v73);
  unint64_t v79 = v78;
  LOBYTE(v69) = v80;

  if (!v69)
  {
    sub_1004028CC(v77, v79);
    goto LABEL_7;
  }

  sub_100410FD0(v194, (uint64_t)v40, &qword_1009B95A0);
  if (v60(v40, 1LL, v49) == 1)
  {
    uint64_t v109 = sub_10040A274((uint64_t)v40, &qword_1009B95A0);
LABEL_28:
    uint64_t v68 = v201;
    uint64_t v145 = v77;
    uint64_t v146 = v185;
    uint64_t v147 = (os_log_s *)Logger.logObject.getter(v109);
    os_log_type_t v148 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v147, v148))
    {
      uint64_t v149 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v150 = swift_slowAlloc(32LL, -1LL);
      v203[0] = v150;
      *(_DWORD *)uint64_t v149 = 136315138;
      uint64_t v202 = sub_1003FFBB0(0xD00000000000007ALL, 0x8000000100841C20LL, v203);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v202, v203, v149 + 4, v149 + 12);
      _os_log_impl((void *)&_mh_execute_header, v147, v148, "%s: could not decrypt", v149, 0xCu);
      swift_arrayDestroy(v150, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v151 = v150;
      uint64_t v146 = v185;
      swift_slowDealloc(v151, -1LL, -1LL);
      swift_slowDealloc(v149, -1LL, -1LL);
    }

    uint64_t v152 = (uint64_t)v184;
    if ((v189 & 1) != 0)
    {
      uint64_t v153 = (*(uint64_t (**)(void))((swift_isaMask & *v146) + 0x108LL))();
      if (v153)
      {
        uint64_t v155 = v153;
        uint64_t v156 = v154;
        uint64_t ObjectType = swift_getObjectType(v153);
        int v158 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v156 + 32))(v183, ObjectType, v156);
        uint64_t v160 = swift_unknownObjectRelease(v155, v159);
        if (v158)
        {
          v161 = (os_log_s *)Logger.logObject.getter(v160);
          os_log_type_t v162 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v161, v162))
          {
            v163 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
            uint64_t v164 = swift_slowAlloc(32LL, -1LL);
            v203[0] = v164;
            *(_DWORD *)v163 = 136315138;
            uint64_t v202 = sub_1003FFBB0(0xD00000000000007ALL, 0x8000000100841C20LL, v203);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v202, v203, v163 + 4, v163 + 12);
            _os_log_impl( (void *)&_mh_execute_header,  v161,  v162,  "%s: because we could not decrypt, and this key belongs to the sender, kicking off key recovery for sender",  v163,  0xCu);
            swift_arrayDestroy(v164, 1LL, (char *)&type metadata for Any + 8);
            uint64_t v165 = v164;
            uint64_t v146 = v185;
            swift_slowDealloc(v165, -1LL, -1LL);
            swift_slowDealloc(v163, -1LL, -1LL);
          }

          (*(void (**)(void, void, void))((swift_isaMask & *v158) + 0x118LL))( v181,  *(void *)((char *)v146 + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_sessionID),  *(void *)((char *)v146 + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_sessionID + 8));
          uint64_t v152 = (uint64_t)v184;
        }
      }
    }

    sub_10040A268(v145, v79, 1);
    sub_10040A274(v194, &qword_1009B95A0);
    uint64_t v166 = v152;
    goto LABEL_46;
  }

  BOOL v127 = v195 != 2;
  unint64_t v195 = v79;
  uint64_t v128 = v77;
  uint64_t v129 = v186;
  sub_1003F600C((uint64_t)v40, (uint64_t)v186, type metadata accessor for IDSGroupEncryptionFullIdentity);
  uint64_t v130 = v71[3];
  uint64_t v131 = v71[4];
  sub_10040A238(v71, v130);
  id v132 = *(uint64_t (**)(uint64_t (*)(void, void, void), uint64_t, id, BOOL, uint64_t, uint64_t))(v131 + 16);
  id v133 = *(id *)&v129[*(int *)(v49 + 20)];
  uint64_t v77 = v132((uint64_t (*)(void, void, void))v196, v197, v133, v127, v130, v131);
  unint64_t v135 = v134;
  LOBYTE(v130) = v136;
  sub_10040A268(v128, v195, 1);

  uint64_t v109 = sub_1003F6050((uint64_t)v129, type metadata accessor for IDSGroupEncryptionFullIdentity);
  if ((v130 & 1) != 0)
  {
    unint64_t v79 = v135;
    goto LABEL_28;
  }

  sub_1004028CC(v77, v135);
  unint64_t v79 = v135;
LABEL_7:
  LODWORD(v195) = a13;
  int v81 = a12;
  int v189 = a15 & 1;
  id v82 = v190;
  v196 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v198 + 16);
  uint64_t v197 = a14;
  uint64_t v83 = v196(v190, v200, v199);
  uint64_t v84 = (uint64_t)v191;
  Date.init()(v83);
  int v85 = v185;
  uint64_t v86 = *(void *)((char *)v185 + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_groupID);
  uint64_t v87 = *(void *)((char *)v185
                  + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_groupID
                  + 8);
  swift_bridgeObjectRetain(*(void *)((char *)v185
                                     + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_groupID
                                     + 8));
  sub_1004028CC(a10, a11);
  sub_1004028CC(v77, v79);
  uint64_t v179 = v197;
  char v178 = v195;
  uint64_t v88 = (uint64_t)v82;
  uint64_t v89 = v193;
  uint64_t v197 = v77;
  unint64_t v195 = v79;
  sub_10043B45C(0, v88, a10, a11, v77, v79, v84, v86, v193, v87, v81, 0, v178, v179, v189);
  uint64_t v90 = sub_10043AB1C();
  uint64_t v91 = v192;
  uint64_t v92 = &v89[*(int *)(v192 + 52)];
  uint64_t v93 = *(void *)v92;
  char v94 = v92[8];
  uint64_t v95 = (*(uint64_t (**)(uint64_t))((swift_isaMask & **(void **)((char *)v85
                                                                          + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_mkmController))
                                           + 0xF8LL))(v90);
  if ((v94 & 1) == 0 && v93 == v95)
  {
    int v96 = v188;
    uint64_t v97 = v199;
    uint64_t v98 = v196(v188, v200, v199);
    int v99 = (os_log_s *)Logger.logObject.getter(v98);
    os_log_type_t v100 = static os_log_type_t.default.getter();
    BOOL v101 = os_log_type_enabled(v99, v100);
    uint64_t v68 = v201;
    if (v101)
    {
      uint64_t v102 = swift_slowAlloc(22LL, -1LL);
      uint64_t v103 = swift_slowAlloc(64LL, -1LL);
      v203[0] = v103;
      *(_DWORD *)uint64_t v102 = 136315394;
      uint64_t v202 = sub_1003FFBB0(0xD00000000000007ALL, 0x8000000100841C20LL, v203);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v202, v203, v102 + 4, v102 + 12);
      *(_WORD *)(v102 + 1sub_10040A648(v1 + 2) = 2080;
      uint64_t v104 = sub_10040A2B0( &qword_1009B95C0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v105 = dispatch thunk of CustomStringConvertible.description.getter(v97, v104);
      unint64_t v107 = v106;
      uint64_t v202 = sub_1003FFBB0(v105, v106, v203);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v202, v203, v102 + 14, v102 + 22);
      swift_bridgeObjectRelease(v107);
      (*(void (**)(_BYTE *, uint64_t))(v198 + 8))(v96, v97);
      _os_log_impl( (void *)&_mh_execute_header,  v99,  v100,  "%s: ignore receiving our own ki: %s",  (uint8_t *)v102,  0x16u);
      swift_arrayDestroy(v103, 2LL, (char *)&type metadata for Any + 8);
      uint64_t v108 = v103;
LABEL_19:
      swift_slowDealloc(v108, -1LL, -1LL);
      swift_slowDealloc(v102, -1LL, -1LL);

      uint64_t v124 = v197;
      unint64_t v125 = v195;
      sub_100402A84(v197, v195);
      sub_10040A268(v124, v125, 0);
      id v126 = v193;
LABEL_45:
      sub_1003F6050((uint64_t)v126, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      sub_10040A274(v194, &qword_1009B95A0);
      uint64_t v166 = (uint64_t)v184;
LABEL_46:
      sub_1003F6050(v166, type metadata accessor for IDSGroupEncryptionFullIdentity);
      id v67 = 0LL;
      goto LABEL_47;
    }

    uint64_t v137 = v197;
    unint64_t v138 = v195;
    sub_10040A268(v197, v195, 0);
    (*(void (**)(_BYTE *, uint64_t))(v198 + 8))(v96, v97);
    goto LABEL_44;
  }

  char v110 = (*(uint64_t (**)(_BYTE *))(*(void *)a16 + 232LL))(v89);
  uint64_t v111 = v187;
  uint64_t v112 = v199;
  uint64_t v113 = v196;
  v196(v187, v200, v199);
  uint64_t v68 = v201;
  if ((v110 & 1) != 0)
  {
    char v114 = (*(uint64_t (**)(_BYTE *))(*(void *)a16 + 280LL))(v111);
    __n128 v115 = *(void (**)(_BYTE *, uint64_t))(v198 + 8);
    v115(v111, v112);
    if ((v114 & 1) != 0)
    {
      uint64_t v116 = v182;
      uint64_t v117 = v113(v182, v200, v112);
      int v99 = (os_log_s *)Logger.logObject.getter(v117);
      os_log_type_t v118 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v99, v118))
      {
        uint64_t v102 = swift_slowAlloc(22LL, -1LL);
        uint64_t v200 = swift_slowAlloc(64LL, -1LL);
        v203[0] = v200;
        *(_DWORD *)uint64_t v102 = 136315394;
        uint64_t v202 = sub_1003FFBB0(0xD00000000000007ALL, 0x8000000100841C20LL, v203);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v202, v203, v102 + 4, v102 + 12);
        *(_WORD *)(v102 + 1sub_10040A648(v1 + 2) = 2080;
        uint64_t v119 = sub_10040A2B0( &qword_1009B95C0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v120 = dispatch thunk of CustomStringConvertible.description.getter(v112, v119);
        unint64_t v122 = v121;
        uint64_t v202 = sub_1003FFBB0(v120, v121, v203);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v202, v203, v102 + 14, v102 + 22);
        swift_bridgeObjectRelease(v122);
        v115(v116, v112);
        _os_log_impl((void *)&_mh_execute_header, v99, v118, "%s: ignore cached ki: %s", (uint8_t *)v102, 0x16u);
        uint64_t v123 = v200;
        swift_arrayDestroy(v200, 2LL, (char *)&type metadata for Any + 8);
        uint64_t v108 = v123;
        goto LABEL_19;
      }

      uint64_t v137 = v197;
      unint64_t v138 = v195;
      sub_10040A268(v197, v195, 0);
      v115(v116, v112);
LABEL_44:
      sub_100402A84(v137, v138);
      id v126 = v89;
      goto LABEL_45;
    }
  }

  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v198 + 8))(v111, v112);
  }

  (*(void (**)(_BYTE *))(*(void *)a16 + 264LL))(v89);
  id v67 = sub_10043A878();
  int v139 = v181;
  if (sub_10040DC6C(v181, 0))
  {
    uint64_t v140 = *(void **)((char *)v85
                    + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_idsdSessionProvider);
    NSString v141 = String._bridgeToObjectiveC()();
    id v142 = [v140 sessionWithUniqueID:v141];

    uint64_t v143 = (uint64_t)v184;
    if (!v142)
    {
LABEL_42:
      (*(void (**)(_BYTE *))(*(void *)a16 + 272LL))(&v89[*(int *)(v91 + 20)]);
      uint64_t v176 = v197;
      unint64_t v177 = v195;
      sub_100402A84(v197, v195);
      sub_10040A268(v176, v177, 0);
      sub_1003F6050((uint64_t)v89, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      sub_10040A274(v194, &qword_1009B95A0);
      sub_1003F6050(v143, type metadata accessor for IDSGroupEncryptionFullIdentity);
LABEL_47:
      *uint64_t v68 = v67;
      return;
    }

    [v142 recvKeyMaterial:v67];
LABEL_41:
    swift_unknownObjectRelease(v142, v144);
    goto LABEL_42;
  }

  BOOL v167 = sub_10040DC6C(v139, 1);
  uint64_t v143 = (uint64_t)v184;
  if (!v167) {
    goto LABEL_42;
  }
  v168 = *(void **)((char *)v85
                  + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_idsdSessionProvider);
  NSString v169 = String._bridgeToObjectiveC()();
  id v142 = [v168 sessionWithUniqueID:v169];

  uint64_t v143 = (uint64_t)v184;
  if (!v142) {
    goto LABEL_42;
  }
  uint64_t v170 = sub_1003F5CB4(&qword_1009BB720);
  uint64_t v171 = swift_allocObject(v170, 40LL, 7LL);
  *(_OWORD *)(v171 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1007184C0;
  id v172 = [v67 dictionaryRepresentation];
  if (v172)
  {
    v173 = v172;
    uint64_t v174 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v172,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);

    *(void *)(v171 + 3sub_10040A648(v1 + 2) = v174;
    sub_1003F5CB4(&qword_1009BB728);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v171);
    [v142 recvStableKeyMaterialForFrameworkCache:isa];

    uint64_t v143 = (uint64_t)v184;
    uint64_t v91 = v192;
    goto LABEL_41;
  }

  sub_10040A268(v197, v195, 0);
  __break(1u);
}

void sub_10048D63C(uint64_t a1, uint64_t a2)
{
  if (*(void *)(v2 + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_mkmCache) == a2)
  {
    uint64_t v3 = *(void **)(v2
                  + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_idsdSessionProvider);
    NSString v4 = String._bridgeToObjectiveC()();
    id v5 = [v3 sessionWithUniqueID:v4];

    if (v5)
    {
      type metadata accessor for UUID(0LL, v6);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      [v5 invalidateKeyMaterialByKeyIndexes:isa];
      swift_unknownObjectRelease(v5, v7);
    }
  }

void sub_10048D714(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  sub_1003F5CB4(&qword_1009B8E08);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13, v14);
  uint64_t v16 = (char *)&v72 - v15;
  uint64_t v17 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v19, v20);
  uint64_t v80 = (uint64_t)&v72 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v22, v23);
  uint64_t v81 = (uint64_t)&v72 - v24;
  __chkstk_darwin(v25, v26);
  __n128 v28 = (char *)&v72 - v27;
  if (*(void *)(v5 + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_skmCache) == a1)
  {
    __n128 v29 = *(void **)(v5
                   + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_idsdSessionProvider);
    NSString v30 = String._bridgeToObjectiveC()();
    uint64_t v79 = a3;
    __n128 v31 = v30;
    id v32 = [v29 sessionWithUniqueID:v30];

    uint64_t v33 = v79;
    id v78 = v32;
    if (v32)
    {
      sub_100410FD0(a4, (uint64_t)v16, &qword_1009B8E08);
      __n128 v34 = *(unsigned int (**)(void, void, void))(v18 + 48);
      if (v34(v16, 1LL, v17) == 1)
      {
        sub_10040A274((uint64_t)v16, &qword_1009B8E08);
        __n128 v35 = v78;
      }

      else
      {
        sub_1003F600C((uint64_t)v16, (uint64_t)v28, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        id v36 = sub_10043A878();
        id v37 = [v36 dictionaryRepresentation];

        if (v37)
        {
          uint64_t v38 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v37,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);

          uint64_t v39 = swift_bridgeObjectRetain_n(v38, 2LL);
          unint64_t v40 = (os_log_s *)Logger.logObject.getter(v39);
          os_log_type_t v41 = static os_log_type_t.default.getter();
          int v77 = v41;
          BOOL v42 = os_log_type_enabled(v40, v41);
          __n128 v35 = v78;
          if (v42)
          {
            uint64_t v43 = swift_slowAlloc(22LL, -1LL);
            id v76 = v40;
            uint64_t v44 = v43;
            uint64_t v75 = swift_slowAlloc(64LL, -1LL);
            uint64_t v83 = v75;
            *(_DWORD *)uint64_t v44 = 136315394;
            uint64_t v74 = (char *)&type metadata for Any + 8;
            uint64_t v72 = v44 + 4;
            uint64_t v82 = sub_1003FFBB0(0xD00000000000004ELL, 0x8000000100841CA0LL, &v83);
            uint64_t v73 = &v83;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v72, v44 + 12);
            *(_WORD *)(v44 + 1sub_10040A648(v1 + 2) = 2080;
            uint64_t v72 = v44 + 14;
            __n128 v45 = swift_bridgeObjectRetain(v38);
            __n128 v46 = v34;
            uint64_t v47 = Dictionary.description.getter(v45);
            unint64_t v49 = v48;
            swift_bridgeObjectRelease(v38);
            uint64_t v50 = v47;
            __n128 v34 = v46;
            __n128 v35 = v78;
            uint64_t v82 = sub_1003FFBB0(v50, v49, &v83);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, v73, v72, v44 + 22);
            swift_bridgeObjectRelease_n(v38, 2LL);
            swift_bridgeObjectRelease(v49);
            _os_log_impl( (void *)&_mh_execute_header,  v76,  (os_log_type_t)v77,  "%s: sending new SKM to IDSDSession: %s",  (uint8_t *)v44,  0x16u);
            uint64_t v51 = v75;
            swift_arrayDestroy(v75, 2LL, v74);
            swift_slowDealloc(v51, -1LL, -1LL);
            swift_slowDealloc(v44, -1LL, -1LL);
          }

          else
          {
            swift_bridgeObjectRelease_n(v38, 2LL);
          }

          uint64_t v52 = sub_1003F5CB4(&qword_1009BB720);
          uint64_t v53 = swift_allocObject(v52, 40LL, 7LL);
          *(_OWORD *)(v53 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1007184C0;
          *(void *)(v53 + 3sub_10040A648(v1 + 2) = v38;
          sub_1003F5CB4(&qword_1009BB728);
          Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v53);
          [v35 recvStableKeyMaterialForFrameworkCache:isa];

          (*(void (**)(char *))(*(void *)a1 + 272LL))(&v28[*(int *)(v17 + 20)]);
          sub_1003F6050((uint64_t)v28, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        }

        else
        {
          sub_1003F6050((uint64_t)v28, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
          __n128 v35 = v78;
        }

        uint64_t v33 = v79;
      }

      sub_100410FD0(v33, (uint64_t)v12, &qword_1009B8E08);
      if (v34(v12, 1LL, v17) == 1)
      {
        swift_unknownObjectRelease(v35, v55);
        sub_10040A274((uint64_t)v12, &qword_1009B8E08);
      }

      else
      {
        uint64_t v56 = v81;
        sub_1003F600C((uint64_t)v12, v81, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        uint64_t v57 = v80;
        uint64_t v58 = sub_1003F5FC8(v56, v80, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        uint64_t v59 = (os_log_s *)Logger.logObject.getter(v58);
        os_log_type_t v60 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v59, v60))
        {
          uint64_t v61 = swift_slowAlloc(22LL, -1LL);
          uint64_t v62 = swift_slowAlloc(64LL, -1LL);
          uint64_t v83 = v62;
          *(_DWORD *)uint64_t v61 = 136315394;
          uint64_t v82 = sub_1003FFBB0(0xD00000000000004ELL, 0x8000000100841CA0LL, &v83);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v61 + 4, v61 + 12);
          *(_WORD *)(v61 + 1sub_10040A648(v1 + 2) = 2080;
          uint64_t v64 = type metadata accessor for UUID(0LL, v63);
          uint64_t v65 = sub_10040A2B0( &qword_1009B95C0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          uint64_t v66 = dispatch thunk of CustomStringConvertible.description.getter(v64, v65);
          unint64_t v68 = v67;
          uint64_t v82 = sub_1003FFBB0(v66, v67, &v83);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v61 + 14, v61 + 22);
          swift_bridgeObjectRelease(v68);
          sub_1003F6050(v57, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
          _os_log_impl((void *)&_mh_execute_header, v59, v60, "%s: has outdated SKI %s", (uint8_t *)v61, 0x16u);
          swift_arrayDestroy(v62, 2LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v62, -1LL, -1LL);
          uint64_t v56 = v81;
          swift_slowDealloc(v61, -1LL, -1LL);
        }

        else
        {

          sub_1003F6050(v57, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        }

        BOOL v69 = v78;
        Class v70 = UUID._bridgeToObjectiveC()().super.isa;
        [v69 hasOutdatedSKI:v70];
        swift_unknownObjectRelease(v69, v71);

        sub_1003F6050(v56, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      }
    }
  }

void sub_10048DE10(void *a1, char a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = a1;
  int v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc(34LL, -1LL);
    uint64_t v17 = swift_slowAlloc(32LL, -1LL);
    uint64_t v19 = v17;
    *(_DWORD *)uint64_t v10 = 136315906;
    uint64_t v18 = sub_1003FFBB0(0xD000000000000035LL, 0x8000000100841CF0LL, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v10 + 4, v10 + 12);
    *(_WORD *)(v10 + 1sub_10040A648(v1 + 2) = 2048;
    uint64_t v18 = *(void *)&v7[OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_participantID];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v10 + 14, v10 + 22);

    *(_WORD *)(v10 + 2sub_10040A648(v1 + 2) = 1024;
    LODWORD(v18) = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, (char *)&v18 + 4, v10 + 24, v10 + 28);
    *(_WORD *)(v10 + 28) = 1024;
    LODWORD(v18) = a3 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, (char *)&v18 + 4, v10 + 30, v10 + 34);
    _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "%s: forParticipant: %llu; forMKM: %{BOOL}d; forSKM: %{BOOL}d",
      (uint8_t *)v10,
      0x22u);
    swift_arrayDestroy(v17, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  else
  {
  }

  uint64_t v11 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v4) + 0xF0LL))();
  if (v11)
  {
    uint64_t v12 = v11;
    if ((a2 & 1) != 0) {
      (*(void (**)(char *, void))((swift_isaMask & *v11) + 0x108LL))(v7, 0LL);
    }
    if ((a3 & 1) != 0) {
      (*(void (**)(char *, uint64_t))((swift_isaMask & *v12) + 0x108LL))(v7, 1LL);
    }
  }

  else
  {
    __n128 v13 = (os_log_s *)Logger.logObject.getter(0LL);
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v16 = swift_slowAlloc(32LL, -1LL);
      uint64_t v19 = v16;
      *(_DWORD *)uint64_t v15 = 136315138;
      uint64_t v18 = sub_1003FFBB0(0xD000000000000035LL, 0x8000000100841CF0LL, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v15 + 4, v15 + 12);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%s: no exchange controllers", v15, 0xCu);
      swift_arrayDestroy(v16, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1LL, -1LL);
      swift_slowDealloc(v15, -1LL, -1LL);
    }
  }

void sub_10048E1D0(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for IDSGroupEncryptionControllerParticipantKeyRecoveryRequest(0LL);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13, v14);
  uint64_t v16 = (char *)&v36 - v15;
  uint64_t v17 = (char *)v3 + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_l;
  sub_1003F5FC8(a1, (uint64_t)&v36 - v15, v18);
  uint64_t v19 = a2;
  uint64_t v39 = v17;
  __n128 v20 = (os_log_s *)Logger.logObject.getter(v19);
  os_log_type_t v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = swift_slowAlloc(32LL, -1LL);
    uint64_t v37 = a1;
    uint64_t v23 = v22;
    uint64_t v36 = swift_slowAlloc(64LL, -1LL);
    uint64_t v41 = v36;
    *(_DWORD *)uint64_t v23 = 136315650;
    uint64_t v40 = sub_1003FFBB0(0xD000000000000031LL, 0x800000010083F4A0LL, &v41);
    uint64_t v38 = a3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v23 + 4, v23 + 12);
    *(_WORD *)(v23 + 1sub_10040A648(v1 + 2) = 2080;
    sub_1003F5FC8( (uint64_t)v16,  (uint64_t)v12,  type metadata accessor for IDSGroupEncryptionControllerParticipantKeyRecoveryRequest);
    uint64_t v24 = String.init<A>(describing:)(v12, v8);
    unint64_t v26 = v25;
    uint64_t v40 = sub_1003FFBB0(v24, v25, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v23 + 14, v23 + 22);
    swift_bridgeObjectRelease(v26);
    sub_1003F6050((uint64_t)v16, type metadata accessor for IDSGroupEncryptionControllerParticipantKeyRecoveryRequest);
    *(_WORD *)(v23 + 2sub_10040A648(v1 + 2) = 2048;
    uint64_t v27 = *(void *)&v19[OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_participantID];

    uint64_t v40 = v27;
    a3 = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v23 + 24, v23 + 32);

    _os_log_impl( (void *)&_mh_execute_header,  v20,  v21,  "%s: keyRecoveryRequest: %s; forParticipant: %llu",
      (uint8_t *)v23,
      0x20u);
    uint64_t v28 = v36;
    swift_arrayDestroy(v36, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1LL, -1LL);
    uint64_t v29 = v23;
    a1 = v37;
    swift_slowDealloc(v29, -1LL, -1LL);
  }

  else
  {

    sub_1003F6050((uint64_t)v16, type metadata accessor for IDSGroupEncryptionControllerParticipantKeyRecoveryRequest);
  }

  NSString v30 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v4) + 0xF0LL))();
  if (v30)
  {
    __n128 v31 = v30;
    (*(void (**)(uint64_t, char *, uint64_t))((swift_isaMask & *v30) + 0xF0LL))(a1, v19, a3);
  }

  else
  {
    id v32 = (os_log_s *)Logger.logObject.getter(0LL);
    os_log_type_t v33 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v32, v33))
    {
      __n128 v34 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v35 = swift_slowAlloc(32LL, -1LL);
      uint64_t v41 = v35;
      *(_DWORD *)__n128 v34 = 136315138;
      uint64_t v40 = sub_1003FFBB0(0xD000000000000031LL, 0x800000010083F4A0LL, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v34 + 4, v34 + 12);
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "%s: no exchange controllers", v34, 0xCu);
      swift_arrayDestroy(v35, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1LL, -1LL);
      swift_slowDealloc(v34, -1LL, -1LL);
    }
  }

void *sub_10048E5BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v266 = a4;
  uint64_t v252 = a3;
  uint64_t v250 = a1;
  uint64_t v265 = type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer(0LL);
  __chkstk_darwin(v7, v8);
  uint64_t v264 = (uint64_t)&v248 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10, v11);
  uint64_t v263 = (uint64_t)&v248 - v12;
  sub_1003F5CB4(&qword_1009B97A8);
  __chkstk_darwin(v13, v14);
  v261 = (char *)&v248 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16, v17);
  v258 = (char *)&v248 - v18;
  uint64_t v268 = type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
  uint64_t v267 = *(void *)(v268 - 8);
  __chkstk_darwin(v19, v20);
  uint64_t v256 = (uint64_t)&v248 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v22, v23);
  uint64_t v262 = (uint64_t)&v248 - v24;
  __chkstk_darwin(v25, v26);
  uint64_t v257 = (uint64_t)&v248 - v27;
  sub_1003F5CB4(&qword_1009B8E08);
  __chkstk_darwin(v28, v29);
  unint64_t v259 = (unint64_t)&v248 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t j = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  uint64_t v31 = *(void *)(j - 8);
  __chkstk_darwin(v32, v33);
  unint64_t v254 = (unint64_t)&v248 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v35, v36);
  v253 = (char *)&v248 - v37;
  __chkstk_darwin(v38, v39);
  uint64_t v249 = (uint64_t)&v248 - v40;
  __chkstk_darwin(v41, v42);
  uint64_t v255 = (uint64_t)&v248 - v43;
  __chkstk_darwin(v44, v45);
  uint64_t v47 = (char *)&v248 - v46;
  uint64_t v50 = __chkstk_darwin(v48, v49);
  uint64_t v52 = (char *)&v248 - v51;
  v282 = &_swiftEmptySetSingleton;
  uint64_t v53 = *(void **)((char *)v4
                   + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_mkmController);
  uint64_t v54 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v53) + 0x1F0LL))(v50);
  uint64_t v55 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v53) + 0x1D8LL))(v54);
  uint64_t v56 = *(void *)(v55 + 56);
  int64_t v273 = v55 + 56;
  uint64_t v57 = 1LL << *(_BYTE *)(v55 + 32);
  uint64_t v58 = -1LL;
  if (v57 < 64) {
    uint64_t v58 = ~(-1LL << v57);
  }
  uint64_t v59 = v58 & v56;
  uint64_t v277 = v55;
  v278 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v5
                                                                                      + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_l);
  int64_t v274 = (unint64_t)(v57 + 63) >> 6;
  v275 = v5;
  __n128 v60 = swift_bridgeObjectRetain(v55);
  int64_t v61 = 0LL;
  v60.n128_u64[0] = 136315394LL;
  __n128 v276 = v60;
  unint64_t v260 = (unint64_t)"ialSet(forGroupID:)";
  uint64_t v270 = 0x800000010083EDB0LL;
  v269 = (char *)&type metadata for Any + 8;
  uint64_t v251 = a2;
  uint64_t v271 = v31;
  if (v59) {
    goto LABEL_6;
  }
LABEL_7:
  int64_t v64 = v61 + 1;
  if (__OFADD__(v61, 1LL))
  {
    __break(1u);
    goto LABEL_131;
  }

  if (v64 >= v274) {
    goto LABEL_24;
  }
  unint64_t v65 = *(void *)(v273 + 8 * v64);
  ++v61;
  if (v65) {
    goto LABEL_20;
  }
  int64_t v61 = v64 + 1;
  if (v64 + 1 < v274)
  {
    unint64_t v65 = *(void *)(v273 + 8 * v61);
    if (v65) {
      goto LABEL_20;
    }
    int64_t v61 = v64 + 2;
    if (v64 + 2 < v274)
    {
      unint64_t v65 = *(void *)(v273 + 8 * v61);
      if (!v65)
      {
        int64_t v66 = v64 + 3;
        if (v66 < v274)
        {
          unint64_t v65 = *(void *)(v273 + 8 * v66);
          if (v65)
          {
            int64_t v61 = v66;
            goto LABEL_20;
          }

          while (1)
          {
            int64_t v61 = v66 + 1;
            if (__OFADD__(v66, 1LL)) {
              break;
            }
            if (v61 >= v274) {
              goto LABEL_24;
            }
            unint64_t v65 = *(void *)(v273 + 8 * v61);
            ++v66;
            if (v65) {
              goto LABEL_20;
            }
          }

LABEL_93:
  uint64_t v197 = __CocoaSet.Iterator.next()(v181);
  if (v197)
  {
    uint64_t v198 = v197;
    uint64_t v279 = v197;
    uint64_t v199 = type metadata accessor for IDSGroupEncryptionControllerParticipant(0LL);
    swift_unknownObjectRetain(v198, v200);
    swift_dynamicCast(&v280, &v279, v269, v199, 7LL);
    v201 = v280;
    v203 = (void *)swift_unknownObjectRelease(v198, v202);
    uint64_t v204 = v188;
    uint64_t v205 = v189;
    if (v201) {
      goto LABEL_115;
    }
  }

uint64_t sub_100490064(uint64_t a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer(0LL) - 8);
  __chkstk_darwin(v3, v4);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7, v8);
  __n128 v10 = (char *)&v27 - v9;
  uint64_t result = __chkstk_darwin(v11, v12);
  uint64_t v15 = (char *)&v27 - v14;
  int64_t v16 = 0LL;
  uint64_t v17 = *(void *)(a1 + 56);
  uint64_t v28 = a1 + 56;
  uint64_t v18 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v19 = -1LL;
  if (v18 < 64) {
    uint64_t v19 = ~(-1LL << v18);
  }
  unint64_t v20 = v19 & v17;
  int64_t v21 = (unint64_t)(v18 + 63) >> 6;
  while (1)
  {
    if (v20)
    {
      unint64_t v22 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      unint64_t v23 = v22 | (v16 << 6);
      goto LABEL_5;
    }

    int64_t v24 = v16 + 1;
    if (__OFADD__(v16, 1LL))
    {
      __break(1u);
      goto LABEL_25;
    }

    if (v24 >= v21) {
      return swift_release(a1);
    }
    unint64_t v25 = *(void *)(v28 + 8 * v24);
    ++v16;
    if (!v25)
    {
      int64_t v16 = v24 + 1;
      if (v24 + 1 >= v21) {
        return swift_release(a1);
      }
      unint64_t v25 = *(void *)(v28 + 8 * v16);
      if (!v25)
      {
        int64_t v16 = v24 + 2;
        if (v24 + 2 >= v21) {
          return swift_release(a1);
        }
        unint64_t v25 = *(void *)(v28 + 8 * v16);
        if (!v25)
        {
          int64_t v16 = v24 + 3;
          if (v24 + 3 >= v21) {
            return swift_release(a1);
          }
          unint64_t v25 = *(void *)(v28 + 8 * v16);
          if (!v25) {
            break;
          }
        }
      }
    }

void *sub_100490280(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x108LL))();
  if (!v4) {
    return &_swiftEmptySetSingleton;
  }
  uint64_t v6 = v4;
  uint64_t v7 = v5;
  uint64_t ObjectType = swift_getObjectType(v4);
  uint64_t v9 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(a1, ObjectType, v7);
  uint64_t v11 = swift_unknownObjectRelease(v6, v10);
  if (!v9) {
    return &_swiftEmptySetSingleton;
  }
  __n128 v12 = (void *)(*(uint64_t (**)(uint64_t))((swift_isaMask & *v9) + 0xB0LL))(v11);

  if (!v12) {
    return &_swiftEmptySetSingleton;
  }
  uint64_t v13 = (*(uint64_t (**)(void))((swift_isaMask & *v12) + 0x80LL))();
  if ((v13 & 1) != 0)
  {

    return &_swiftEmptySetSingleton;
  }

  int64_t v16 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v19 = swift_slowAlloc(32LL, -1LL);
    uint64_t v21 = v19;
    *(_DWORD *)uint64_t v18 = 136315138;
    uint64_t v20 = sub_1003FFBB0(0xD000000000000024LL, 0x8000000100841D30LL, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v18 + 4, v18 + 12);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "%s", v18, 0xCu);
    swift_arrayDestroy(v19, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1LL, -1LL);
    swift_slowDealloc(v18, -1LL, -1LL);
  }

  uint64_t v14 = (*(uint64_t (**)(uint64_t))(**(void **)((char *)v2
                                                         + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_mkmCache)
                                           + 320LL))(a1);

  return (void *)v14;
}

void sub_100490494(uint64_t a1)
{
  uint64_t v2 = v1;
  __n128 v3 = (os_log_s *)Logger.logObject.getter(a1);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v6 = swift_slowAlloc(32LL, -1LL);
    uint64_t v16 = v6;
    *(_DWORD *)uint64_t v5 = 136315138;
    uint64_t v15 = sub_1003FFBB0(0xD000000000000018LL, 0x8000000100841D60LL, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v5 + 4, v5 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%s", v5, 0xCu);
    swift_arrayDestroy(v6, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1LL, -1LL);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v7 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v2) + 0xF0LL))();
  if (v7)
  {
    __n128 v8 = v7;
    uint64_t v9 = (*(uint64_t (**)(void))((swift_isaMask & *v7) + 0xD8LL))();
    uint64_t v10 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v2) + 0x258LL))(v9);
    (*(void (**)(uint64_t))((swift_isaMask & *v2) + 0x268LL))(v10);
  }

  else
  {
    uint64_t v11 = (os_log_s *)Logger.logObject.getter(0LL);
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v14 = swift_slowAlloc(32LL, -1LL);
      uint64_t v16 = v14;
      *(_DWORD *)uint64_t v13 = 136315138;
      uint64_t v15 = sub_1003FFBB0(0xD000000000000018LL, 0x8000000100841D60LL, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v13 + 4, v13 + 12);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%s: no exchange controllers", v13, 0xCu);
      swift_arrayDestroy(v14, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1LL, -1LL);
      swift_slowDealloc(v13, -1LL, -1LL);
    }
  }

uint64_t sub_100490748(uint64_t a1)
{
  uint64_t v2 = v1;
  __n128 v3 = (os_log_s *)Logger.logObject.getter(a1);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v6 = swift_slowAlloc(32LL, -1LL);
    uint64_t v11 = v6;
    *(_DWORD *)uint64_t v5 = 136315138;
    uint64_t v10 = sub_1003FFBB0(0xD000000000000017LL, 0x8000000100841D80LL, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11, v5 + 4, v5 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%s", v5, 0xCu);
    swift_arrayDestroy(v6, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1LL, -1LL);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v7 = (os_unfair_lock_s *)(*(void *)((char *)v2
                                      + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_lock)
                          + 16LL);
  os_unfair_lock_lock(v7);
  sub_1004908E8(v2);
  os_unfair_lock_unlock(v7);
  uint64_t v8 = (*(uint64_t (**)(void))(**(void **)((char *)v2
                                          + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_mkmCache)
                            + 288LL))();
  return (*(uint64_t (**)(uint64_t))(**(void **)((char *)v2
                                                          + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_skmCache)
                                            + 288LL))(v8);
}

uint64_t sub_1004908E8(void *a1)
{
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  uint64_t v7 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL);
  v7(v5, 1LL, 1LL, v6);
  (*(void (**)(char *))((swift_isaMask & *a1) + 0x158LL))(v5);
  v7(v5, 1LL, 1LL, v6);
  (*(void (**)(char *))((swift_isaMask & *a1) + 0x170LL))(v5);
  return (*(uint64_t (**)(void))((swift_isaMask & *a1) + 0x188LL))(0LL);
}

uint64_t sub_1004909DC(uint64_t a1)
{
  __n128 v2 = v1;
  __n128 v3 = (os_log_s *)Logger.logObject.getter(a1);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v6 = swift_slowAlloc(32LL, -1LL);
    uint64_t v9 = v6;
    *(_DWORD *)uint64_t v5 = 136315138;
    uint64_t v8 = sub_1003FFBB0(0xD00000000000002DLL, 0x8000000100841DA0LL, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v8, &v9, v5 + 4, v5 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%s", v5, 0xCu);
    swift_arrayDestroy(v6, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1LL, -1LL);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  return (*(uint64_t (**)(void))((swift_isaMask & *v2) + 0x218LL))();
}

void sub_100490B3C(uint64_t a1)
{
  uint64_t v2 = v1;
  os_log_type_t v4 = (os_log_s *)Logger.logObject.getter(a1);
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = swift_slowAlloc(32LL, -1LL);
    uint64_t v9 = v7;
    *(_DWORD *)uint64_t v6 = 136315138;
    uint64_t v8 = sub_1003FFBB0(0xD000000000000028LL, 0x8000000100841DD0LL, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v8, &v9, v6 + 4, v6 + 12);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%s", v6, 0xCu);
    swift_arrayDestroy(v7, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  if (*(void *)(v2 + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_mkmCache) == a1) {
    sub_100492368();
  }
}

void sub_100490C9C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = swift_bridgeObjectRetain_n(a1, 2LL);
  os_log_type_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc(22LL, -1LL);
    uint64_t v8 = swift_slowAlloc(64LL, -1LL);
    uint64_t v19 = v8;
    *(_DWORD *)uint64_t v7 = 136315394;
    uint64_t v18 = sub_1003FFBB0(0xD000000000000017LL, 0x800000010083E0F0LL, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v7 + 4, v7 + 12);
    *(_WORD *)(v7 + 1sub_10040A648(v1 + 2) = 2080;
    uint64_t v9 = type metadata accessor for IDSGroupEncryptionControllerMember();
    uint64_t v10 = sub_10040A2B0( (unint64_t *)&qword_1009B8E30,  (uint64_t (*)(uint64_t))type metadata accessor for IDSGroupEncryptionControllerMember,  (uint64_t)&protocol conformance descriptor for NSObject);
    swift_bridgeObjectRetain(a1);
    uint64_t v12 = Set.description.getter(v11, v9, v10);
    unint64_t v14 = v13;
    swift_bridgeObjectRelease(a1);
    uint64_t v18 = sub_1003FFBB0(v12, v14, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v7 + 14, v7 + 22);
    swift_bridgeObjectRelease_n(a1, 2LL);
    swift_bridgeObjectRelease(v14);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%s: members %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy(v8, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(a1, 2LL);
  }

  (*(void (**)(uint64_t))((swift_isaMask & **(void **)((char *)v2
                                                                 + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_mkmController))
                                  + 0x140LL))(a1);
  (*(void (**)(uint64_t))((swift_isaMask & **(void **)((char *)v2
                                                                 + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_skmController))
                                  + 0x140LL))(a1);
  (*(void (**)(uint64_t))(**(void **)((char *)v2
                                                + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_mkmCache)
                                  + 304LL))(a1);
  uint64_t v15 = (*(uint64_t (**)(uint64_t))(**(void **)((char *)v2
                                                         + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_skmCache)
                                           + 304LL))(a1);
  uint64_t v16 = (void *)(*(uint64_t (**)(uint64_t))((swift_isaMask & *v2) + 0xF0LL))(v15);
  if (v16)
  {
    os_log_type_t v17 = v16;
    (*(void (**)(uint64_t))((swift_isaMask & *v16) + 0xF8LL))(a1);
  }

uint64_t sub_100490F58(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(a1);
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    os_log_type_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = swift_slowAlloc(32LL, -1LL);
    uint64_t v14 = v7;
    *(_DWORD *)os_log_type_t v6 = 136315138;
    uint64_t v13 = sub_1003FFBB0(0xD000000000000019LL, 0x800000010083F820LL, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v6 + 4, v6 + 12);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%s", v6, 0xCu);
    swift_arrayDestroy(v7, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  uint64_t v8 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v2) + 0xF0LL))();
  if (v8)
  {
    uint64_t v9 = v8;
    (*(void (**)(uint64_t))((swift_isaMask & *v8) + 0x100LL))(a1);
  }

  uint64_t v10 = (*(uint64_t (**)(void))((swift_isaMask & **(void **)((char *)v2
                                                            + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_mkmController))
                             + 0x160LL))();
  uint64_t v11 = (*(uint64_t (**)(uint64_t))((swift_isaMask & **(void **)((char *)v2
                                                                          + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_skmController))
                                           + 0x160LL))(v10);
  return (*(uint64_t (**)(uint64_t))((swift_isaMask & *v2) + 0x218LL))(v11);
}

uint64_t sub_100491138()
{
  uint64_t v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v9 = __chkstk_darwin(v7, v8);
  uint64_t v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(uint64_t))((swift_isaMask & **(void **)((char *)v0
                                                                 + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_mkmController))
                                  + 0x118LL))(v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1LL, v5) == 1)
  {
    uint64_t v12 = sub_10040A274((uint64_t)v4, &qword_1009B8E08);
    uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v16 = swift_slowAlloc(32LL, -1LL);
      uint64_t v32 = v16;
      *(_DWORD *)uint64_t v15 = 136315138;
      uint64_t v31 = sub_1003FFBB0(0xD000000000000020LL, 0x8000000100842150LL, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v15 + 4, v15 + 12);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%s: no current material", v15, 0xCu);
      swift_arrayDestroy(v16, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1LL, -1LL);
      swift_slowDealloc(v15, -1LL, -1LL);
    }

    return 0LL;
  }

  uint64_t v17 = sub_1003F600C((uint64_t)v4, (uint64_t)v11, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
  uint64_t v18 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v0) + 0xF0LL))(v17);
  if (!v18)
  {
    int64_t v26 = (os_log_s *)Logger.logObject.getter(0LL);
    os_log_type_t v27 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v29 = swift_slowAlloc(32LL, -1LL);
      uint64_t v32 = v29;
      *(_DWORD *)uint64_t v28 = 136315138;
      uint64_t v31 = sub_1003FFBB0(0xD000000000000020LL, 0x8000000100842150LL, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v28 + 4, v28 + 12);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "%s: no exchange controllers", v28, 0xCu);
      swift_arrayDestroy(v29, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1LL, -1LL);
      swift_slowDealloc(v28, -1LL, -1LL);
    }

    sub_1003F6050((uint64_t)v11, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    return 0LL;
  }

  uint64_t v21 = (void *)v18;
  uint64_t v22 = __chkstk_darwin(v19, v20);
  *(&v31 - 4) = (uint64_t)v0;
  *(&v31 - sub_10040A648(v1 + 3) = (uint64_t)v11;
  int64_t v24 = v23 + 4;
  *(&v31 - sub_10040A648(v1 + 2) = v22;
  os_unfair_lock_lock(v23 + 4);
  sub_10049600C((char *)&v32);
  uint64_t v25 = v32;
  os_unfair_lock_unlock(v24);
  sub_1003F6050((uint64_t)v11, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);

  return v25;
}

void sub_100491504(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, char *a4@<X8>)
{
  uint64_t v137 = a3;
  uint64_t v138 = a4;
  uint64_t v6 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v8, v9);
  uint64_t v136 = (char *)&v130 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11, v12);
  uint64_t v135 = (uint64_t *)((char *)&v130 - v13);
  __chkstk_darwin(v14, v15);
  uint64_t v134 = (uint64_t)&v130 - v16;
  uint64_t v17 = (void *)sub_1003F5CB4(&qword_1009BB758);
  __chkstk_darwin(v18, v19);
  uint64_t v21 = (char *)&v130 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1003F5CB4(&qword_1009B8E08);
  __chkstk_darwin(v22, v23);
  unint64_t v132 = (char *)&v130 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v25, v26);
  uint64_t v28 = (char *)&v130 - v27;
  __chkstk_darwin(v29, v30);
  uint64_t v32 = (char *)&v130 - v31;
  uint64_t v35 = __chkstk_darwin(v33, v34);
  uint64_t v37 = (char *)&v130 - v36;
  __n128 v38 = *(void (**)(uint64_t))((swift_isaMask & *a1) + 0x150LL);
  uint64_t v139 = (uint64_t)a1;
  v38(v35);
  uint64_t v140 = a2;
  sub_1003F5FC8(a2, (uint64_t)v32, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
  uint64_t v133 = *(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56);
  v133(v32, 0LL, 1LL, v6);
  uint64_t v39 = (uint64_t)&v21[*((int *)v17 + 12)];
  sub_100410FD0((uint64_t)v37, (uint64_t)v21, &qword_1009B8E08);
  sub_100410FD0((uint64_t)v32, v39, &qword_1009B8E08);
  uint64_t v40 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (v40((uint64_t)v21, 1LL, v6) == 1)
  {
    sub_10040A274((uint64_t)v32, &qword_1009B8E08);
    sub_10040A274((uint64_t)v37, &qword_1009B8E08);
    if (v40(v39, 1LL, v6) == 1)
    {
      sub_10040A274((uint64_t)v21, &qword_1009B8E08);
      goto LABEL_8;
    }

    goto LABEL_6;
  }

  sub_100410FD0((uint64_t)v21, (uint64_t)v28, &qword_1009B8E08);
  if (v40(v39, 1LL, v6) == 1)
  {
    sub_10040A274((uint64_t)v32, &qword_1009B8E08);
    sub_10040A274((uint64_t)v37, &qword_1009B8E08);
    sub_1003F6050((uint64_t)v28, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
LABEL_6:
    uint64_t v41 = sub_10040A274((uint64_t)v21, &qword_1009BB758);
    __n128 v42 = (void *)v139;
    goto LABEL_10;
  }

  uint64_t v43 = v134;
  sub_1003F600C(v39, v134, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
  uint64_t v44 = sub_10040A2B0( &qword_1009B90D8,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent,  (uint64_t)&unk_100718ED8);
  char v45 = dispatch thunk of static Equatable.== infix(_:_:)(v28, v43, v6, v44);
  sub_1003F6050(v43, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
  sub_10040A274((uint64_t)v32, &qword_1009B8E08);
  sub_10040A274((uint64_t)v37, &qword_1009B8E08);
  sub_1003F6050((uint64_t)v28, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
  uint64_t v41 = sub_10040A274((uint64_t)v21, &qword_1009B8E08);
  __n128 v42 = (void *)v139;
  if ((v45 & 1) != 0)
  {
LABEL_8:
    uint64_t v17 = v135;
    uint64_t v46 = sub_1003F5FC8(v140, (uint64_t)v135, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    uint64_t v47 = Logger.logObject.getter(v46);
    os_log_type_t v48 = static os_log_type_t.default.getter();
    if (os_log_type_enabled((os_log_t)v47, v48))
    {
      uint64_t v49 = swift_slowAlloc(22LL, -1LL);
      uint64_t v50 = swift_slowAlloc(64LL, -1LL);
      v141[0] = v50;
      *(_DWORD *)uint64_t v49 = 136315394;
      uint64_t v142 = sub_1003FFBB0(0xD000000000000020LL, 0x8000000100842150LL, v141);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v49 + 4, v49 + 12);
      *(_WORD *)(v49 + 1sub_10040A648(v1 + 2) = 2080;
      uint64_t v51 = sub_10040A2B0( &qword_1009B90F0,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent,  (uint64_t)&unk_100718F00);
      uint64_t v52 = dispatch thunk of CustomStringConvertible.description.getter(v6, v51);
      unint64_t v54 = v53;
      uint64_t v142 = sub_1003FFBB0(v52, v53, v141);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v49 + 14, v49 + 22);
      swift_bridgeObjectRelease(v54);
      sub_1003F6050((uint64_t)v17, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v47, v48, "%s: already sent %s", (uint8_t *)v49, 0x16u);
      swift_arrayDestroy(v50, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v50, -1LL, -1LL);
      swift_slowDealloc(v49, -1LL, -1LL);

      goto LABEL_58;
    }

void *sub_100492274(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = a1;
  if ((a1 & 0xC000000000000001LL) == 0)
  {
    uint64_t v4 = *(void *)(a1 + 16);
    if ((a2 & 0xC000000000000001LL) != 0) {
      goto LABEL_5;
    }
LABEL_11:
    if (v4 > *(void *)(v2 + 16) >> 3) {
      return sub_1004945E8(v3, v2);
    }
    goto LABEL_13;
  }

  if (a1 >= 0) {
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  }
  uint64_t v4 = __CocoaSet.count.getter(a1);
  if ((v2 & 0xC000000000000001LL) == 0) {
    goto LABEL_11;
  }
LABEL_5:
  if (v2 < 0) {
    uint64_t v5 = v2;
  }
  else {
    uint64_t v5 = v2 & 0xFFFFFFFFFFFFFF8LL;
  }
  if (v4 > __CocoaSet.count.getter(v5) / 8)
  {
    swift_bridgeObjectRetain(v2);
    uint64_t v6 = __CocoaSet.count.getter(v5);
    Swift::Int v7 = sub_1004231B4(v5, v6);
    swift_bridgeObjectRelease(v2);
    uint64_t v2 = v7;
    return sub_1004945E8(v3, v2);
  }

void sub_100492368()
{
  uint64_t v1 = v0;
  uint64_t v30 = *(void *)(type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL) - 8);
  uint64_t v4 = __chkstk_darwin(v2, v3);
  uint64_t v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Swift::Int v7 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    __n128 v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    uint64_t v32 = v10;
    *(_DWORD *)__n128 v9 = 136315138;
    uint64_t v31 = sub_1003FFBB0(0xD000000000000021LL, 0x8000000100842180LL, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v9 + 4, v9 + 12);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "%s", v9, 0xCu);
    swift_arrayDestroy(v10, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  __n128 v11 = *(void **)(v1 + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_idsdSessionProvider);
  NSString v12 = String._bridgeToObjectiveC()();
  id v13 = [v11 sessionWithUniqueID:v12];

  if (!v13) {
    return;
  }
  uint64_t v14 = (*(uint64_t (**)(void))(**(void **)(v1
                                           + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_mkmCache)
                             + 208LL))();
  uint64_t v16 = v14;
  int64_t v17 = 0LL;
  uint64_t v18 = v14 + 56;
  uint64_t v19 = 1LL << *(_BYTE *)(v14 + 32);
  uint64_t v20 = -1LL;
  if (v19 < 64) {
    uint64_t v20 = ~(-1LL << v19);
  }
  unint64_t v21 = v20 & *(void *)(v14 + 56);
  int64_t v22 = (unint64_t)(v19 + 63) >> 6;
  while (1)
  {
    if (v21)
    {
      unint64_t v23 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      unint64_t v24 = v23 | (v17 << 6);
      goto LABEL_8;
    }

    int64_t v26 = v17 + 1;
    if (__OFADD__(v17, 1LL))
    {
      __break(1u);
      goto LABEL_27;
    }

    if (v26 >= v22) {
      goto LABEL_24;
    }
    unint64_t v27 = *(void *)(v18 + 8 * v26);
    ++v17;
    if (!v27)
    {
      int64_t v17 = v26 + 1;
      if (v26 + 1 >= v22) {
        goto LABEL_24;
      }
      unint64_t v27 = *(void *)(v18 + 8 * v17);
      if (!v27)
      {
        int64_t v17 = v26 + 2;
        if (v26 + 2 >= v22) {
          goto LABEL_24;
        }
        unint64_t v27 = *(void *)(v18 + 8 * v17);
        if (!v27) {
          break;
        }
      }
    }

uint64_t sub_1004926A0()
{
  return sub_100491138();
}

uint64_t sub_1004926B4()
{
  return (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x258LL))();
}

void sub_1004926D0()
{
  uint64_t v60 = (uint64_t)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5, v6);
  os_log_type_t v8 = (char *)&v55 - v7;
  uint64_t v9 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  int64_t v64 = *(os_log_s **)(v9 - 8);
  __chkstk_darwin(v10, v11);
  unint64_t v59 = (unint64_t)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13, v14);
  uint64_t v16 = (char *)&v55 - v15;
  __chkstk_darwin(v17, v18);
  uint64_t v20 = (char *)&v55 - v19;
  unint64_t v21 = *(void **)((char *)v0
                 + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_idsdSessionProvider);
  NSString v22 = String._bridgeToObjectiveC()();
  id v23 = [v21 sessionWithUniqueID:v22];

  if (!v23)
  {
    int64_t v64 = (os_log_s *)Logger.logObject.getter(v24);
    os_log_type_t v48 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v64, v48))
    {
      uint64_t v49 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v50 = swift_slowAlloc(32LL, -1LL);
      uint64_t v66 = v50;
      *(_DWORD *)uint64_t v49 = 136315138;
      uint64_t v65 = sub_1003FFBB0(0xD000000000000026LL, 0x8000000100841E00LL, &v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v49 + 4, v49 + 12);
      _os_log_impl((void *)&_mh_execute_header, v64, v48, "%s: no ids session", v49, 0xCu);
      swift_arrayDestroy(v50, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v50, -1LL, -1LL);
      swift_slowDealloc(v49, -1LL, -1LL);
    }

    return;
  }

  id v55 = v23;
  uint64_t v56 = v9;
  uint64_t v57 = v0;
  uint64_t v58 = v8;
  uint64_t v25 = (*(uint64_t (**)(void))(**(void **)((char *)v0
                                           + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_skmCache)
                             + 208LL))();
  uint64_t v26 = 0LL;
  uint64_t v27 = *(void *)(v25 + 56);
  uint64_t v62 = v25 + 56;
  uint64_t v28 = 1LL << *(_BYTE *)(v25 + 32);
  uint64_t v29 = -1LL;
  if (v28 < 64) {
    uint64_t v29 = ~(-1LL << v28);
  }
  unint64_t v30 = v29 & v27;
  int64_t v63 = (unint64_t)(v28 + 63) >> 6;
  uint64_t v31 = _swiftEmptyArrayStorage;
  uint64_t v61 = (char *)&type metadata for Any + 8;
  while (1)
  {
    if (v30)
    {
      unint64_t v32 = __clz(__rbit64(v30));
      v30 &= v30 - 1;
      unint64_t v33 = v32 | (v26 << 6);
      goto LABEL_23;
    }

    int64_t v34 = v26 + 1;
    if (__OFADD__(v26, 1LL))
    {
      __break(1u);
      goto LABEL_42;
    }

    if (v34 >= v63) {
      goto LABEL_28;
    }
    unint64_t v35 = *(void *)(v62 + 8 * v34);
    ++v26;
    if (!v35)
    {
      uint64_t v26 = v34 + 1;
      if (v34 + 1 >= v63) {
        goto LABEL_28;
      }
      unint64_t v35 = *(void *)(v62 + 8 * v26);
      if (!v35)
      {
        uint64_t v26 = v34 + 2;
        if (v34 + 2 >= v63) {
          goto LABEL_28;
        }
        unint64_t v35 = *(void *)(v62 + 8 * v26);
        if (!v35) {
          break;
        }
      }
    }

uint64_t sub_100492DB0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v62 = a2;
  uint64_t v59 = sub_1003F5CB4(&qword_1009BB758);
  __chkstk_darwin(v3, v4);
  uint64_t v60 = (uint64_t)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1003F5CB4(&qword_1009B8E08);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10, v11);
  uint64_t v58 = (uint64_t)&v55 - v12;
  __chkstk_darwin(v13, v14);
  uint64_t v16 = (char *)&v55 - v15;
  __chkstk_darwin(v17, v18);
  uint64_t v61 = (uint64_t)&v55 - v19;
  __chkstk_darwin(v20, v21);
  id v23 = (char *)&v55 - v22;
  uint64_t v24 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  uint64_t v25 = *(void *)(v24 - 8);
  __chkstk_darwin(v26, v27);
  uint64_t v57 = (uint64_t)&v55 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = __chkstk_darwin(v29, v30);
  unint64_t v33 = (char *)&v55 - v32;
  (*(void (**)(uint64_t))((swift_isaMask & **(void **)((char *)a1
                                                                 + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_skmController))
                                  + 0x118LL))(v31);
  int64_t v34 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
  if (v34((uint64_t)v23, 1LL, v24) != 1)
  {
    uint64_t v56 = v9;
    uint64_t v36 = sub_1003F600C((uint64_t)v23, (uint64_t)v33, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    id v37 = a1;
    uint64_t v38 = v61;
    (*(void (**)(uint64_t))((swift_isaMask & *a1) + 0x168LL))(v36);
    sub_1003F5FC8((uint64_t)v33, (uint64_t)v16, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    unint64_t v35 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 56);
    v35((uint64_t)v16, 0LL, 1LL, v24);
    uint64_t v39 = v60;
    uint64_t v40 = v60 + *(int *)(v59 + 48);
    sub_100410FD0(v38, v60, &qword_1009B8E08);
    sub_100410FD0((uint64_t)v16, v40, &qword_1009B8E08);
    uint64_t v41 = (uint64_t)v33;
    if (v34(v39, 1LL, v24) == 1)
    {
      uint64_t v42 = v39;
      sub_10040A274((uint64_t)v16, &qword_1009B8E08);
      sub_10040A274(v38, &qword_1009B8E08);
      if (v34(v40, 1LL, v24) == 1)
      {
        sub_10040A274(v39, &qword_1009B8E08);
LABEL_10:
        sub_1003F6050(v41, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        goto LABEL_11;
      }
    }

    else
    {
      uint64_t v43 = v39;
      uint64_t v44 = v39;
      uint64_t v45 = v58;
      sub_100410FD0(v44, v58, &qword_1009B8E08);
      if (v34(v40, 1LL, v24) != 1)
      {
        uint64_t v59 = (uint64_t)v37;
        id v46 = v33;
        uint64_t v47 = v57;
        sub_1003F600C(v40, v57, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        uint64_t v48 = sub_10040A2B0( &qword_1009B90D8,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent,  (uint64_t)&unk_100718ED8);
        char v49 = dispatch thunk of static Equatable.== infix(_:_:)(v45, v47, v24, v48);
        sub_1003F6050(v47, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        sub_10040A274((uint64_t)v16, &qword_1009B8E08);
        sub_10040A274(v61, &qword_1009B8E08);
        uint64_t v41 = (uint64_t)v46;
        id v37 = (void *)v59;
        sub_1003F6050(v45, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        sub_10040A274(v43, &qword_1009B8E08);
        if ((v49 & 1) != 0) {
          goto LABEL_10;
        }
LABEL_12:
        uint64_t v52 = (uint64_t)v56;
        sub_1003F5FC8(v41, (uint64_t)v56, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        v35(v52, 0LL, 1LL, v24);
        (*(void (**)(uint64_t))((swift_isaMask & *v37) + 0x170LL))(v52);
        uint64_t v53 = v62;
        sub_1003F600C(v41, v62, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        uint64_t v50 = v53;
        uint64_t v51 = 0LL;
        return v35(v50, v51, 1LL, v24);
      }

      uint64_t v42 = v43;
      sub_10040A274((uint64_t)v16, &qword_1009B8E08);
      sub_10040A274(v61, &qword_1009B8E08);
      sub_1003F6050(v45, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    }

    sub_10040A274(v42, &qword_1009BB758);
    goto LABEL_12;
  }

  sub_10040A274((uint64_t)v23, &qword_1009B8E08);
  unint64_t v35 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 56);
LABEL_11:
  uint64_t v50 = v62;
  uint64_t v51 = 1LL;
  return v35(v50, v51, 1LL, v24);
}

void sub_10049326C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  __n128 v4 = v3;
  uint64_t v8 = (os_unfair_lock_s *)(*(void *)((char *)v3
                                      + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_lock)
                          + 16LL);
  os_unfair_lock_lock(v8);
  sub_1004939D8(a1, a2, a3, v4);
  os_unfair_lock_unlock(v8);
  uint64_t v9 = swift_bridgeObjectRetain_n(a3, 2LL);
  __n128 v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v13 = swift_slowAlloc(32LL, -1LL);
    uint64_t v48 = v13;
    *(_DWORD *)uint64_t v12 = 136315138;
    swift_bridgeObjectRetain(a3);
    uint64_t v47 = sub_1003FFBB0(a2, a3, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease_n(a3, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "%s    ", v12, 0xCu);
    swift_arrayDestroy(v13, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1LL, -1LL);
    swift_slowDealloc(v12, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a3, 2LL);
  }

  uint64_t v14 = swift_bridgeObjectRetain_n(a3, 2LL);
  uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    __n128 v17 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v18 = swift_slowAlloc(32LL, -1LL);
    uint64_t v48 = v18;
    *(_DWORD *)__n128 v17 = 136315138;
    swift_bridgeObjectRetain(a3);
    uint64_t v47 = sub_1003FFBB0(a2, a3, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v17 + 4, v17 + 12);
    swift_bridgeObjectRelease_n(a3, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "%s    MKM Controller", v17, 0xCu);
    swift_arrayDestroy(v18, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1LL, -1LL);
    swift_slowDealloc(v17, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a3, 2LL);
  }

  uint64_t v19 = *(void **)((char *)v4
                   + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_mkmController);
  uint64_t v48 = a2;
  unint64_t v49 = a3;
  swift_bridgeObjectRetain(a3);
  v20._countAndFlagsBits = 538976288LL;
  v20._object = (void *)0xE400000000000000LL;
  String.append(_:)(v20);
  unint64_t v21 = v49;
  (*(void (**)(uint64_t, uint64_t, unint64_t))((swift_isaMask & *v19) + 0x200LL))(a1, v48, v49);
  swift_bridgeObjectRelease(v21);
  uint64_t v22 = swift_bridgeObjectRetain_n(a3, 2LL);
  id v23 = (os_log_s *)Logger.logObject.getter(v22);
  os_log_type_t v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v26 = swift_slowAlloc(32LL, -1LL);
    uint64_t v48 = v26;
    *(_DWORD *)uint64_t v25 = 136315138;
    swift_bridgeObjectRetain(a3);
    uint64_t v47 = sub_1003FFBB0(a2, a3, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v25 + 4, v25 + 12);
    swift_bridgeObjectRelease_n(a3, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "%s    ", v25, 0xCu);
    swift_arrayDestroy(v26, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1LL, -1LL);
    swift_slowDealloc(v25, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a3, 2LL);
  }

  uint64_t v27 = swift_bridgeObjectRetain_n(a3, 2LL);
  uint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
  os_log_type_t v29 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v28, v29))
  {
    __n128 v30 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v31 = swift_slowAlloc(32LL, -1LL);
    uint64_t v48 = v31;
    *(_DWORD *)__n128 v30 = 136315138;
    swift_bridgeObjectRetain(a3);
    uint64_t v47 = sub_1003FFBB0(a2, a3, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v30 + 4, v30 + 12);
    swift_bridgeObjectRelease_n(a3, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "%s    SKM Controller", v30, 0xCu);
    swift_arrayDestroy(v31, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1LL, -1LL);
    swift_slowDealloc(v30, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a3, 2LL);
  }

  uint64_t v32 = *(void **)((char *)v4
                   + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_skmController);
  uint64_t v48 = a2;
  unint64_t v49 = a3;
  swift_bridgeObjectRetain(a3);
  v33._countAndFlagsBits = 538976288LL;
  v33._object = (void *)0xE400000000000000LL;
  String.append(_:)(v33);
  unint64_t v34 = v49;
  (*(void (**)(uint64_t, uint64_t, unint64_t))((swift_isaMask & *v32) + 0x200LL))(a1, v48, v49);
  swift_bridgeObjectRelease(v34);
  uint64_t v35 = swift_bridgeObjectRetain_n(a3, 2LL);
  uint64_t v46 = a1;
  uint64_t v36 = (os_log_s *)Logger.logObject.getter(v35);
  os_log_type_t v37 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v36, v37))
  {
    uint64_t v38 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v39 = swift_slowAlloc(32LL, -1LL);
    uint64_t v48 = v39;
    *(_DWORD *)uint64_t v38 = 136315138;
    swift_bridgeObjectRetain(a3);
    uint64_t v40 = a2;
    uint64_t v47 = sub_1003FFBB0(a2, a3, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v38 + 4, v38 + 12);
    swift_bridgeObjectRelease_n(a3, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "%s    ", v38, 0xCu);
    swift_arrayDestroy(v39, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v39, -1LL, -1LL);
    swift_slowDealloc(v38, -1LL, -1LL);
  }

  else
  {
    uint64_t v40 = a2;

    uint64_t v41 = swift_bridgeObjectRelease_n(a3, 2LL);
  }

  uint64_t v42 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v4) + 0xF0LL))(v41);
  if (v42)
  {
    uint64_t v43 = (void *)v42;
    uint64_t v48 = v40;
    unint64_t v49 = a3;
    swift_bridgeObjectRetain(a3);
    v44._countAndFlagsBits = 538976288LL;
    v44._object = (void *)0xE400000000000000LL;
    String.append(_:)(v44);
    unint64_t v45 = v49;
    (*(void (**)(uint64_t, uint64_t, unint64_t))((swift_isaMask & *v43) + 0x118LL))(v46, v48, v49);
    swift_bridgeObjectRelease(v45);
  }

void sub_1004939D8(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  uint64_t v39 = sub_1003F5CB4(&qword_1009B8E08);
  __chkstk_darwin(v8, v9);
  uint64_t v38 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_bridgeObjectRetain_n(a3, 2LL);
  os_log_type_t v11 = a4;
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.default.getter();
  BOOL v14 = os_log_type_enabled(v12, v13);
  uint64_t v40 = a2;
  if (v14)
  {
    uint64_t v15 = swift_slowAlloc(22LL, -1LL);
    uint64_t v37 = swift_slowAlloc(64LL, -1LL);
    uint64_t v42 = v37;
    *(_DWORD *)uint64_t v15 = 136315394;
    swift_bridgeObjectRetain(a3);
    uint64_t v41 = sub_1003FFBB0(a2, a3, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease_n(a3, 3LL);
    *(_WORD *)(v15 + 1sub_10040A648(v1 + 2) = 2080;
    uint64_t v16 = *(void *)&v11[OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_sessionID];
    unint64_t v17 = *(void *)&v11[OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_sessionID + 8];
    swift_bridgeObjectRetain(v17);
    uint64_t v41 = sub_1003FFBB0(v16, v17, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v15 + 14, v15 + 22);

    swift_bridgeObjectRelease(v17);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%sSession %s", (uint8_t *)v15, 0x16u);
    uint64_t v18 = v37;
    swift_arrayDestroy(v37, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1LL, -1LL);
    swift_slowDealloc(v15, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a3, 2LL);
  }

  swift_bridgeObjectRetain_n(a3, 2LL);
  uint64_t v19 = v11;
  Swift::String v20 = (os_log_s *)Logger.logObject.getter(v19);
  os_log_type_t v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = swift_slowAlloc(18LL, -1LL);
    uint64_t v23 = swift_slowAlloc(32LL, -1LL);
    uint64_t v37 = a1;
    uint64_t v24 = v23;
    uint64_t v42 = v23;
    *(_DWORD *)uint64_t v22 = 136315394;
    swift_bridgeObjectRetain(a3);
    uint64_t v41 = sub_1003FFBB0(v40, a3, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v22 + 4, v22 + 12);
    uint64_t v25 = swift_bridgeObjectRelease_n(a3, 3LL);
    *(_WORD *)(v22 + 1sub_10040A648(v1 + 2) = 1024;
    char v26 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *(void *)v19) + 0x138LL))(v25);

    LODWORD(v41) = v26 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, (char *)&v41 + 4, v22 + 14, v22 + 18);

    _os_log_impl((void *)&_mh_execute_header, v20, v21, "%s    needsMaterialUpdate: %{BOOL}d", (uint8_t *)v22, 0x12u);
    swift_arrayDestroy(v24, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1LL, -1LL);
    swift_slowDealloc(v22, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(a3, 2LL);
  }

  swift_bridgeObjectRetain_n(a3, 2LL);
  uint64_t v27 = v19;
  uint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
  os_log_type_t v29 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v30 = swift_slowAlloc(22LL, -1LL);
    uint64_t v31 = swift_slowAlloc(64LL, -1LL);
    uint64_t v42 = v31;
    *(_DWORD *)uint64_t v30 = 136315394;
    swift_bridgeObjectRetain(a3);
    uint64_t v41 = sub_1003FFBB0(v40, a3, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v30 + 4, v30 + 12);
    uint64_t v32 = swift_bridgeObjectRelease_n(a3, 3LL);
    *(_WORD *)(v30 + 1sub_10040A648(v1 + 2) = 2080;
    Swift::String v33 = v38;
    (*(void (**)(uint64_t))((swift_isaMask & *(void *)v27) + 0x150LL))(v32);
    uint64_t v34 = String.init<A>(describing:)(v33, v39);
    unint64_t v36 = v35;
    uint64_t v41 = sub_1003FFBB0(v34, v35, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v30 + 14, v30 + 22);

    swift_bridgeObjectRelease(v36);
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "%s    materialCurrentlySentToAVC: %s", (uint8_t *)v30, 0x16u);
    swift_arrayDestroy(v31, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1LL, -1LL);
    swift_slowDealloc(v30, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a3, 2LL);
  }
}

id sub_100493F3C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for IDSGroupEncryptionControllerGroupSession(0LL);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1004940CC()
{
  return (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x1B0LL))();
}

uint64_t sub_1004940E8()
{
  return (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x228LL))();
}

uint64_t sub_100494104()
{
  return (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x208LL))();
}

uint64_t sub_100494120()
{
  return (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x210LL))();
}

uint64_t sub_10049413C()
{
  return (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x1B8LL))();
}

uint64_t sub_100494158()
{
  return (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x1F0LL))();
}

uint64_t sub_100494174()
{
  return (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x1E8LL))();
}

uint64_t sub_100494190()
{
  return (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x230LL))();
}

uint64_t sub_1004941AC()
{
  return (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x260LL))();
}

uint64_t sub_1004941C8()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **v0) + 0x270LL))();
}

void *sub_100494200(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_1003F5CB4(&qword_1009BB720);
      os_log_type_t v11 = (void *)swift_allocObject(v10, 8 * v9 + 32, 7LL);
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 25;
      }
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 3);
      BOOL v14 = v11 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      os_log_type_t v11 = _swiftEmptyArrayStorage;
      BOOL v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v8 + 4]) {
          memmove(v14, a4 + 4, 8 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_100495F04(0LL, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

void sub_10049430C(uint64_t a1)
{
  uint64_t v3 = *v1;
  if ((*v1 & 0xC000000000000001LL) == 0)
  {
    if (!*(void *)(v3 + 16)) {
      return;
    }
LABEL_8:
    if ((a1 & 0xC000000000000001LL) != 0)
    {
      if (a1 < 0) {
        uint64_t v5 = a1;
      }
      else {
        uint64_t v5 = a1 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(a1);
      uint64_t v6 = __CocoaSet.makeIterator()(v5);
      uint64_t v7 = sub_10041D3C4(0LL, (unint64_t *)&qword_1009BBE30, &OBJC_CLASS___IDSPushToken_ptr);
      unint64_t v8 = sub_100496170();
      uint64_t v9 = Set.Iterator.init(_cocoa:)(v33, v6, v7, v8);
      a1 = v33[0];
      uint64_t v30 = v33[1];
      uint64_t v10 = v33[2];
      uint64_t v11 = v33[3];
      unint64_t v12 = v33[4];
    }

    else
    {
      uint64_t v13 = -1LL << *(_BYTE *)(a1 + 32);
      uint64_t v30 = a1 + 56;
      uint64_t v10 = ~v13;
      uint64_t v14 = -v13;
      if (v14 < 64) {
        uint64_t v15 = ~(-1LL << v14);
      }
      else {
        uint64_t v15 = -1LL;
      }
      unint64_t v12 = v15 & *(void *)(a1 + 56);
      swift_bridgeObjectRetain(a1);
      uint64_t v11 = 0LL;
    }

    int64_t v16 = (unint64_t)(v10 + 64) >> 6;
    if (a1 < 0) {
      goto LABEL_20;
    }
    while (1)
    {
      if (v12)
      {
        uint64_t v17 = (v12 - 1) & v12;
        unint64_t v18 = __clz(__rbit64(v12)) | (v11 << 6);
        uint64_t v19 = v11;
      }

      else
      {
        int64_t v26 = v11 + 1;
        if (__OFADD__(v11, 1LL))
        {
          __break(1u);
          return;
        }

        if (v26 >= v16) {
          goto LABEL_42;
        }
        unint64_t v27 = *(void *)(v30 + 8 * v26);
        uint64_t v19 = v11 + 1;
        if (!v27)
        {
          uint64_t v19 = v11 + 2;
          if (v11 + 2 >= v16) {
            goto LABEL_42;
          }
          unint64_t v27 = *(void *)(v30 + 8 * v19);
          if (!v27)
          {
            uint64_t v19 = v11 + 3;
            if (v11 + 3 >= v16) {
              goto LABEL_42;
            }
            unint64_t v27 = *(void *)(v30 + 8 * v19);
            if (!v27)
            {
              uint64_t v19 = v11 + 4;
              if (v11 + 4 >= v16) {
                goto LABEL_42;
              }
              unint64_t v27 = *(void *)(v30 + 8 * v19);
              if (!v27)
              {
                uint64_t v19 = v11 + 5;
                if (v11 + 5 >= v16) {
                  goto LABEL_42;
                }
                unint64_t v27 = *(void *)(v30 + 8 * v19);
                if (!v27)
                {
                  uint64_t v28 = v11 + 6;
                  while (v16 != v28)
                  {
                    unint64_t v27 = *(void *)(v30 + 8 * v28++);
                    if (v27)
                    {
                      uint64_t v19 = v28 - 1;
                      goto LABEL_38;
                    }
                  }

void *sub_1004945E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (!*(void *)(a2 + 16))
  {
    swift_release(a2);
    return &_swiftEmptySetSingleton;
  }

  uint64_t v3 = a1;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v4 = a1;
    }
    else {
      uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v5 = __CocoaSet.makeIterator()(v4);
    uint64_t v6 = sub_10041D3C4(0LL, (unint64_t *)&qword_1009BBE30, &OBJC_CLASS___IDSPushToken_ptr);
    unint64_t v7 = sub_100496170();
    unint64_t v8 = Set.Iterator.init(_cocoa:)(v58, v5, v6, v7);
    uint64_t v3 = v58[0];
    uint64_t v9 = v58[1];
    uint64_t v11 = v58[2];
    int64_t v10 = v58[3];
    unint64_t v12 = v58[4];
  }

  else
  {
    uint64_t v13 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v9 = a1 + 56;
    uint64_t v11 = ~v13;
    uint64_t v14 = -v13;
    if (v14 < 64) {
      uint64_t v15 = ~(-1LL << v14);
    }
    else {
      uint64_t v15 = -1LL;
    }
    unint64_t v12 = v15 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    int64_t v10 = 0LL;
  }

  uint64_t v53 = v3;
  uint64_t v54 = v9;
  uint64_t v55 = v11;
  int64_t v56 = v10;
  unint64_t v57 = v12;
  uint64_t v16 = v2 + 56;
  while (1)
  {
    if ((v3 & 0x8000000000000000LL) == 0)
    {
      if (v12)
      {
        uint64_t v17 = (v12 - 1) & v12;
        unint64_t v18 = __clz(__rbit64(v12)) | (v10 << 6);
LABEL_17:
        uint64_t v19 = *(void **)(*(void *)(v3 + 48) + 8 * v18);
        id v20 = v19;
        goto LABEL_18;
      }

      int64_t v34 = v10 + 1;
      if (__OFADD__(v10, 1LL)) {
        __break(1u);
      }
      int64_t v35 = (unint64_t)(v11 + 64) >> 6;
      if (v34 >= v35)
      {
        uint64_t v19 = 0LL;
        uint64_t v17 = 0LL;
        goto LABEL_18;
      }

      unint64_t v36 = *(void *)(v54 + 8 * v34);
      if (v36)
      {
LABEL_31:
        uint64_t v17 = (v36 - 1) & v36;
        unint64_t v18 = __clz(__rbit64(v36)) + (v34 << 6);
        int64_t v10 = v34;
        goto LABEL_17;
      }

      int64_t v37 = v10 + 2;
      if (v10 + 2 >= v35) {
        goto LABEL_47;
      }
      unint64_t v36 = *(void *)(v54 + 8 * v37);
      if (v36)
      {
LABEL_35:
        int64_t v34 = v37;
        goto LABEL_31;
      }

      if (v10 + 3 < v35)
      {
        unint64_t v36 = *(void *)(v54 + 8 * (v10 + 3));
        if (v36)
        {
          int64_t v34 = v10 + 3;
          goto LABEL_31;
        }

        int64_t v37 = v10 + 4;
        if (v10 + 4 >= v35)
        {
          uint64_t v19 = 0LL;
          uint64_t v17 = 0LL;
          v10 += 3LL;
LABEL_18:
          int64_t v56 = v10;
          unint64_t v57 = v17;
          if (!v19) {
            goto LABEL_56;
          }
          goto LABEL_22;
        }

        unint64_t v36 = *(void *)(v54 + 8 * v37);
        if (v36) {
          goto LABEL_35;
        }
        int64_t v34 = v10 + 5;
        if (v10 + 5 < v35)
        {
          unint64_t v36 = *(void *)(v54 + 8 * v34);
          if (v36) {
            goto LABEL_31;
          }
          int64_t v34 = v35 - 1;
          int64_t v38 = v10 + 6;
          while (v35 != v38)
          {
            unint64_t v36 = *(void *)(v54 + 8 * v38++);
            if (v36)
            {
              int64_t v34 = v38 - 1;
              goto LABEL_31;
            }
          }

uint64_t sub_100494B20(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  if ((*v1 & 0xC000000000000001LL) != 0)
  {
    if (v4 < 0) {
      uint64_t v5 = *v1;
    }
    else {
      uint64_t v5 = v4 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v4);
    id v6 = a1;
    char v7 = __CocoaSet.contains(_:)();

    if ((v7 & 1) != 0)
    {
      uint64_t v8 = sub_1004952C4(v5, (uint64_t)v6);
      swift_bridgeObjectRelease(v4);
      return v8;
    }

void sub_100494CF4(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v5 = a5;
  uint64_t v7 = *(void *)(a3 + 16);
  *(unint64_t *)((char *)a1 + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << a4) - 1;
  uint64_t v8 = v7 - 1;
  uint64_t v42 = a3 + 56;
  while (2)
  {
    uint64_t v39 = v8;
    do
    {
      while (1)
      {
        if ((*v5 & 0x8000000000000000LL) == 0)
        {
          int64_t v10 = v5[3];
          unint64_t v9 = v5[4];
          if (v9)
          {
            uint64_t v11 = (v9 - 1) & v9;
            unint64_t v12 = __clz(__rbit64(v9)) | (v10 << 6);
LABEL_7:
            id v13 = *(void **)(*(void *)(*v5 + 48LL) + 8 * v12);
            id v14 = v13;
            goto LABEL_8;
          }

          int64_t v32 = v10 + 1;
          if (__OFADD__(v10, 1LL))
          {
            __break(1u);
            goto LABEL_47;
          }

          int64_t v33 = (unint64_t)(v5[2] + 64LL) >> 6;
          if (v32 >= v33)
          {
            id v13 = 0LL;
            uint64_t v11 = 0LL;
            goto LABEL_8;
          }

          uint64_t v34 = v5[1];
          unint64_t v35 = *(void *)(v34 + 8 * v32);
          if (v35)
          {
LABEL_22:
            uint64_t v11 = (v35 - 1) & v35;
            unint64_t v12 = __clz(__rbit64(v35)) + (v32 << 6);
            int64_t v10 = v32;
            goto LABEL_7;
          }

          if (v10 + 2 < v33)
          {
            unint64_t v35 = *(void *)(v34 + 8 * (v10 + 2));
            if (v35)
            {
              int64_t v32 = v10 + 2;
              goto LABEL_22;
            }

            if (v10 + 3 >= v33)
            {
              id v13 = 0LL;
              uint64_t v11 = 0LL;
              v10 += 2LL;
              goto LABEL_8;
            }

            unint64_t v35 = *(void *)(v34 + 8 * (v10 + 3));
            if (v35)
            {
              int64_t v32 = v10 + 3;
              goto LABEL_22;
            }

            int64_t v32 = v10 + 4;
            if (v10 + 4 >= v33)
            {
              id v13 = 0LL;
              uint64_t v11 = 0LL;
              v10 += 3LL;
LABEL_8:
              v5[3] = v10;
              v5[4] = v11;
              if (!v13) {
                goto LABEL_45;
              }
              goto LABEL_12;
            }

            unint64_t v35 = *(void *)(v34 + 8 * v32);
            if (v35) {
              goto LABEL_22;
            }
            int64_t v32 = v33 - 1;
            int64_t v37 = v10 + 5;
            while (v33 != v37)
            {
              unint64_t v35 = *(void *)(v34 + 8 * v37++);
              if (v35)
              {
                int64_t v32 = v37 - 1;
                goto LABEL_22;
              }
            }
          }

          id v13 = 0LL;
          uint64_t v11 = 0LL;
          int64_t v10 = v32;
          goto LABEL_8;
        }

        uint64_t v15 = __CocoaSet.Iterator.next()(a1);
        if (!v15
          || (uint64_t v16 = v15,
              uint64_t v43 = v15,
              uint64_t v17 = sub_10041D3C4(0LL, (unint64_t *)&qword_1009BBE30, &OBJC_CLASS___IDSPushToken_ptr),
              swift_unknownObjectRetain(v16, v18),
              swift_dynamicCast(&v44, &v43, (char *)&type metadata for Swift.AnyObject + 8, v17, 7LL),
              id v13 = v44,
              swift_unknownObjectRelease(v16, v19),
              !v13))
        {
LABEL_45:
          swift_retain(a3);
          sub_100495068(a1, a2, v39, a3);
          return;
        }

Swift::Int sub_100495068(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    unint64_t v9 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release(v4);
    return (Swift::Int)v9;
  }

  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_1003F5CB4((uint64_t *)&unk_1009B99A0);
  Swift::Int result = static _SetStorage.allocate(capacity:)(v5);
  unint64_t v9 = (void *)result;
  unint64_t v29 = a1;
  if (a2 < 1) {
    unint64_t v10 = 0LL;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0LL;
  Swift::Int v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }

    uint64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1LL)) {
      goto LABEL_39;
    }
    if (v15 >= a2) {
      goto LABEL_36;
    }
    unint64_t v16 = v29[v15];
    ++v11;
    if (!v16)
    {
      uint64_t v11 = v15 + 1;
      if (v15 + 1 >= a2) {
        goto LABEL_36;
      }
      unint64_t v16 = v29[v11];
      if (!v16)
      {
        uint64_t v11 = v15 + 2;
        if (v15 + 2 >= a2) {
          goto LABEL_36;
        }
        unint64_t v16 = v29[v11];
        if (!v16) {
          break;
        }
      }
    }

uint64_t sub_1004952C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRelease(*v3);
  uint64_t v6 = __CocoaSet.count.getter(a1);
  uint64_t v8 = swift_unknownObjectRetain(a1, v7);
  Swift::Int v9 = sub_1004231B4(v8, v6);
  Swift::Int v20 = v9;
  Swift::Int v10 = *(void *)(v9 + 40);
  swift_retain(v9);
  Swift::Int v11 = NSObject._rawHashValue(seed:)(v10);
  uint64_t v12 = -1LL << *(_BYTE *)(v9 + 32);
  unint64_t v13 = v11 & ~v12;
  if (((*(void *)(v9 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) != 0)
  {
    sub_10041D3C4(0LL, (unint64_t *)&qword_1009BBE30, &OBJC_CLASS___IDSPushToken_ptr);
    id v14 = *(id *)(*(void *)(v9 + 48) + 8 * v13);
    char v15 = static NSObject.== infix(_:_:)(v14, a2);

    if ((v15 & 1) != 0)
    {
LABEL_6:
      swift_release(v9);
      Swift::Int v9 = *(void *)(*(void *)(v9 + 48) + 8 * v13);
      sub_1004370C0(v13);
      if ((static NSObject.== infix(_:_:)(a2, v9) & 1) != 0)
      {
        Swift::Int *v3 = v20;
        return v9;
      }

      __break(1u);
    }

    else
    {
      uint64_t v16 = ~v12;
      while (1)
      {
        unint64_t v13 = (v13 + 1) & v16;
        if (((*(void *)(v9 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) == 0) {
          break;
        }
        id v17 = *(id *)(*(void *)(v9 + 48) + 8 * v13);
        char v18 = static NSObject.== infix(_:_:)(v17, a2);

        if ((v18 & 1) != 0) {
          goto LABEL_6;
        }
      }
    }

    swift_release(v9);
    __break(1u);
  }

  uint64_t result = swift_release(v9);
  __break(1u);
  return result;
}

void sub_10049545C(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  unint64_t v7 = a1;
  if ((a4 & 0xC000000000000001LL) == 0)
  {
    if ((a3 & 1) != 0) {
      goto LABEL_13;
    }
    if (a1 < 0 || 1LL << *(_BYTE *)(a4 + 32) <= a1)
    {
      __break(1u);
    }

    else if (((*(void *)(a4 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8LL) + 56) >> a1) & 1) != 0)
    {
      if (*(_DWORD *)(a4 + 36) == (_DWORD)a2) {
        goto LABEL_20;
      }
      __break(1u);
LABEL_13:
      if (__CocoaSet.Index.age.getter(a1, a2) == *(_DWORD *)(a4 + 36))
      {
        uint64_t v13 = __CocoaSet.Index.element.getter(v7, a2);
        uint64_t v25 = v13;
        uint64_t v14 = type metadata accessor for IDSGroupEncryptionControllerParticipant(0LL);
        swift_unknownObjectRetain(v13, v15);
        swift_dynamicCast(&v26, &v25, (char *)&type metadata for Swift.AnyObject + 8, v14, 7LL);
        uint64_t v4 = v26;
        swift_unknownObjectRelease(v13, v16);
        Swift::Int v17 = NSObject._rawHashValue(seed:)(*(void *)(a4 + 40));
        uint64_t v18 = -1LL << *(_BYTE *)(a4 + 32);
        unint64_t v7 = v17 & ~v18;
        if (((*(void *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v7) & 1) != 0)
        {
          id v19 = *(id *)(*(void *)(a4 + 48) + 8 * v7);
          char v20 = static NSObject.== infix(_:_:)(v19, v4);

          if ((v20 & 1) == 0)
          {
            uint64_t v21 = ~v18;
            do
            {
              unint64_t v7 = (v7 + 1) & v21;
              if (((*(void *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v7) & 1) == 0) {
                goto LABEL_24;
              }
              id v22 = *(id *)(*(void *)(a4 + 48) + 8 * v7);
              char v23 = static NSObject.== infix(_:_:)(v22, v4);
            }

            while ((v23 & 1) == 0);
          }

LABEL_20:
          id v24 = *(id *)(*(void *)(a4 + 48) + 8 * v7);
          return;
        }

void sub_1004956A4(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = &v1[OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_rootExchangeController];
  swift_beginAccess( &v1[OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_rootExchangeController],  &v22,  1LL,  0LL);
  uint64_t v5 = *(void **)v4;
  if (*(void *)v4
    && (uint64_t v6 = *(void (**)(void, void))((swift_isaMask & *v5) + 0xC0LL),
        unint64_t v7 = v5,
        v6(0LL, 0LL),
        v7,
        (uint64_t v8 = *(void **)v4) != 0LL))
  {
    uint64_t v9 = *(void (**)(void, void))((swift_isaMask & *v8) + 0xA8LL);
    uint64_t v10 = v8;
    v9(0LL, 0LL);

    uint64_t v11 = *(void **)v4;
  }

  else
  {
    uint64_t v11 = 0LL;
  }

  *(void *)uint64_t v4 = a1;
  uint64_t v12 = a1;

  uint64_t v13 = &v2[OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_rootExchangeController];
  swift_beginAccess( &v2[OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_rootExchangeController],  v23,  0LL,  0LL);
  uint64_t v14 = *(void **)v13;
  if (*(void *)v13)
  {
    uint64_t v15 = *(void (**)(char *, _UNKNOWN **))((swift_isaMask & *v14) + 0xC0LL);
    uint64_t v16 = v14;
    Swift::Int v17 = v2;
    v15(v2, &off_100907220);

    uint64_t v18 = *(void **)v13;
    if (*(void *)v13)
    {
      id v19 = *(void (**)(char *, _UNKNOWN **))((swift_isaMask & *v18) + 0xA8LL);
      char v20 = v17;
      uint64_t v21 = v18;
      v19(v2, &off_1009071D8);
    }
  }

uint64_t sub_100495814(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1003F5CB4(&qword_1009B8E08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

char *sub_10049585C( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  char v76 = a7;
  uint64_t v77 = a8;
  uint64_t v70 = a2;
  uint64_t v71 = a3;
  uint64_t v80 = a9;
  id v81 = a1;
  int64_t v78 = a6;
  uint64_t v79 = a10;
  uint64_t v74 = a12;
  uint64_t v75 = a5;
  uint64_t v72 = a11;
  uint64_t v73 = a4;
  uint64_t v13 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v15, v16);
  uint64_t v18 = (char *)&v68 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v20, v21);
  char v23 = (char *)&v68 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v24, v25);
  uint64_t v27 = (char *)&v68 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v28 = v12;
  sub_10048ADB4(5u);
  uint64_t v69 = OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_q;
  uint64_t v29 = sub_10041D3C4(0LL, (unint64_t *)&qword_1009B9830, &OBJC_CLASS___OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v29);
  v83[0] = _swiftEmptyArrayStorage;
  uint64_t v30 = sub_10040A2B0( &qword_1009B8E20,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v31 = sub_1003F5CB4((uint64_t *)&unk_1009B9840);
  unint64_t v32 = sub_10048B030();
  dispatch thunk of SetAlgebra.init<A>(_:)(v83, v31, v32, v19, v30);
  (*(void (**)(char *, void, uint64_t))(v14 + 104))( v18,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v13);
  uint64_t v33 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000028LL,  0x800000010071C170LL,  v27,  v23,  v18,  0LL);
  *(void *)&v28[v69] = v33;
  uint64_t v34 = OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_lock;
  uint64_t v35 = sub_1003F5CB4((uint64_t *)&unk_1009B9860);
  uint64_t v36 = swift_allocObject(v35, 20LL, 7LL);
  *(_DWORD *)(v36 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
  *(void *)&v28[v34] = v36;
  *(void *)&v28[OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_rootExchangeController] = 0LL;
  int64_t v37 = &v28[OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_participantProvider];
  *((void *)v37 + 1) = 0LL;
  swift_unknownObjectWeakInit(v37, 0LL);
  *(void *)&v28[OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_materialProviders] = _swiftEmptyArrayStorage;
  v28[OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_needsMaterialUpdate] = 1;
  int64_t v38 = &v28[OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_materialCurrentlySentToAVC];
  uint64_t v39 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  __n128 v40 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56LL);
  v40(v38, 1LL, 1LL, v39);
  v40( &v28[OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_materialCurrentlySentToFramework],  1LL,  1LL,  v39);
  *(void *)&v28[OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_materialGeneration] = 0LL;
  *(void *)&v28[OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_localParticipantID] = 0LL;
  char v41 = &v28[OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_groupID];
  uint64_t v42 = v71;
  uint64_t v43 = v72;
  *char v41 = v70;
  v41[1] = v42;
  uint64_t v44 = &v28[OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_sessionID];
  size_t v45 = v74;
  uint64_t v46 = v75;
  uint64_t v47 = v76;
  *uint64_t v44 = v73;
  v44[1] = v46;
  *(void *)&v28[OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_mkmController] = v43;
  *(void *)&v28[OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_skmController] = v45;
  sub_100401ACC( (uint64_t)v47,  (uint64_t)&v28[OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_cryptoHandler]);
  uint64_t v49 = v77;
  uint64_t v48 = v78;
  *(void *)&v28[OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_idsdSessionProvider] = v77;
  *(void *)&v28[OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_identityController] = v48;
  swift_beginAccess(v37, v83, 1LL, 0LL);
  uint64_t v50 = v80;
  *((void *)v37 + 1) = v79;
  swift_unknownObjectWeakAssign(v37, v50);
  type metadata accessor for IDSGroupEncryptionKeyMaterialCache2(0LL);
  uint64_t v51 = v43;
  uint64_t v52 = v45;
  swift_unknownObjectRetain(v49, v53);
  id v54 = v48;
  id v55 = v81;
  *(void *)&v28[OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_mkmCache] = sub_1004BB3B0((uint64_t)v55, 8);
  *(void *)&v28[OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_skmCache] = sub_1004BB3B0((uint64_t)v55, 9);

  int64_t v56 = (objc_class *)type metadata accessor for IDSGroupEncryptionControllerGroupSession(0LL);
  v82.receiver = v28;
  v82.super_class = v56;
  id v57 = objc_msgSendSuper2(&v82, "init");
  uint64_t v58 = *(void (**)(id, _UNKNOWN **))((swift_isaMask & *v51) + 0xA0LL);
  id v59 = v57;
  v58(v57, &off_1009071B8);
  uint64_t v60 = *(void (**)(id, _UNKNOWN **))((swift_isaMask & *v52) + 0xA0LL);
  uint64_t v61 = (char *)v59;
  v60(v57, &off_1009071B8);
  uint64_t v62 = *(void *)&v61[OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_mkmCache];
  int64_t v63 = *(void (**)(id, _UNKNOWN **))(*(void *)v62 + 136LL);
  int64_t v64 = v61;
  swift_retain(v62);
  v63(v57, &off_1009071F8);
  swift_release(v62);
  uint64_t v65 = *(void (**)(id, _UNKNOWN **))(**(void **)&v64[OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_skmCache]
                                               + 136LL);
  uint64_t v66 = v64;
  v65(v57, &off_1009071F8);

  sub_10040A648(v47);
  return v66;
}

void sub_100495D44(void *a1@<X8>)
{
}

uint64_t type metadata accessor for IDSGroupEncryptionControllerGroupSession(uint64_t a1)
{
  uint64_t result = qword_1009C5AA0;
  if (!qword_1009C5AA0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for IDSGroupEncryptionControllerGroupSession);
  }
  return result;
}

uint64_t sub_100495DF8()
{
  return type metadata accessor for IDSGroupEncryptionControllerGroupSession(0LL);
}

void sub_100495E00(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger(319LL);
  if (v3 <= 0x3F)
  {
    v6[0] = *(void *)(v2 - 8) + 64LL;
    v6[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v6[2] = (char *)&value witness table for Builtin.NativeObject + 64;
    v6[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
    void v6[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v6[5] = (char *)&value witness table for Builtin.NativeObject + 64;
    v6[6] = (char *)&value witness table for Builtin.NativeObject + 64;
    v6[7] = &unk_10071C240;
    v6[8] = &unk_10071C240;
    void v6[9] = &unk_10071C258;
    void v6[10] = &unk_10071C270;
    v6[11] = &unk_10071C288;
    v6[12] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v6[13] = &unk_10071C2A0;
    v6[14] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v6[15] = &unk_10071C2B8;
    sub_1004039B4(319LL);
    if (v5 <= 0x3F)
    {
      uint64_t v7 = *(void *)(v4 - 8) + 64LL;
      uint64_t v8 = v7;
      uint64_t v9 = (char *)&value witness table for Builtin.Int64 + 64;
      uint64_t v10 = (char *)&value witness table for Builtin.Int64 + 64;
      swift_updateClassMetadata2(a1, 256LL, 20LL, v6, a1 + 80);
    }
  }

uint64_t sub_100495F04(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v6 = a4 + 8 * a1 + 32;
    unint64_t v7 = a3 + 8 * v4;
    if (v6 >= v7 || v6 + 8 * v4 <= a3)
    {
      sub_1003F5CB4(&qword_1009BB728);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

void sub_10049600C(char *a1@<X8>)
{
}

uint64_t sub_100496018(uint64_t a1)
{
  unint64_t v2 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v13 = a1;
    }
    else {
      uint64_t v13 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v13);
    swift_bridgeObjectRelease(a1);
  }

  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v4 = sub_10041D3C4(0LL, (unint64_t *)&qword_1009BBE30, &OBJC_CLASS___IDSPushToken_ptr);
  unint64_t v5 = sub_100496170();
  uint64_t result = Set.init(minimumCapacity:)(v3, v4, v5);
  uint64_t v15 = result;
  if (v2)
  {
    if (a1 < 0) {
      uint64_t v8 = a1;
    }
    else {
      uint64_t v8 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v8);
    uint64_t result = swift_bridgeObjectRelease(a1);
    if (!v7) {
      return v15;
    }
  }

  else
  {
    uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v7) {
      return v15;
    }
  }

  if (v7 >= 1)
  {
    if ((a1 & 0xC000000000000001LL) != 0)
    {
      for (uint64_t i = 0LL; i != v7; ++i)
      {
        uint64_t v10 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
        sub_100424C28((Swift::Int *)&v14, v10);
      }
    }

    else
    {
      uint64_t v11 = (void **)(a1 + 32);
      do
      {
        uint64_t v12 = *v11++;
        sub_100424C28((Swift::Int *)&v14, v12);

        --v7;
      }

      while (v7);
    }

    return v15;
  }

  __break(1u);
  return result;
}

unint64_t sub_100496170()
{
  unint64_t result = qword_1009BC4C0;
  if (!qword_1009BC4C0)
  {
    uint64_t v1 = sub_10041D3C4(255LL, (unint64_t *)&qword_1009BBE30, &OBJC_CLASS___IDSPushToken_ptr);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_1009BC4C0);
  }

  return result;
}

unint64_t sub_1004961CC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_1003F5CB4(&qword_1009BB7B0);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  unint64_t v6 = (void **)(a1 + 48);
  while (1)
  {
    uint64_t v7 = (uint64_t)*(v6 - 2);
    uint64_t v8 = (uint64_t)*(v6 - 1);
    uint64_t v9 = *v6;
    swift_bridgeObjectRetain(v8);
    id v10 = v9;
    unint64_t result = sub_100417D94(v7, v8);
    if ((v12 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v13 = (uint64_t *)(v4[6] + 16 * result);
    *uint64_t v13 = v7;
    v13[1] = v8;
    *(void *)(v4[7] + 8 * result) = v10;
    uint64_t v14 = v4[2];
    BOOL v15 = __OFADD__(v14, 1LL);
    uint64_t v16 = v14 + 1;
    if (v15) {
      goto LABEL_11;
    }
    void v4[2] = v16;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1004962E4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_1003F5CB4(&qword_1009BB7A8);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  unint64_t v6 = (_BYTE *)(a1 + 48);
  while (1)
  {
    uint64_t v7 = *((void *)v6 - 2);
    uint64_t v8 = *((void *)v6 - 1);
    char v9 = *v6;
    swift_bridgeObjectRetain(v8);
    unint64_t result = sub_100417D94(v7, v8);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    char v12 = (uint64_t *)(v4[6] + 16 * result);
    uint64_t *v12 = v7;
    v12[1] = v8;
    *(_BYTE *)(v4[7] + result) = v9;
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v6 += 24;
    void v4[2] = v15;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1004963F4(uint64_t a1)
{
  uint64_t v2 = sub_1003F5CB4(&qword_1009BB7D0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v4, v5);
  uint64_t v7 = (uint64_t *)((char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
    id v10 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    uint64_t v26 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v26);
    return (unint64_t)v10;
  }

  sub_1003F5CB4(&qword_1009BB7A0);
  uint64_t v9 = static _DictionaryStorage.allocate(capacity:)(v8);
  id v10 = (void *)v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (!v11) {
    goto LABEL_9;
  }
  uint64_t v12 = (uint64_t)v7 + *(int *)(v2 + 48);
  uint64_t v13 = v9 + 64;
  unint64_t v14 = (*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v28 = a1;
  uint64_t v15 = a1 + v14;
  uint64_t v16 = *(void *)(v3 + 72);
  swift_retain(v9);
  while (1)
  {
    sub_10049E4E4(v15, (uint64_t)v7);
    uint64_t v17 = *v7;
    unint64_t result = sub_10049A934(*v7);
    if ((v19 & 1) != 0) {
      break;
    }
    unint64_t v20 = result;
    *(void *)(v13 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    *(void *)(v10[6] + 8 * result) = v17;
    uint64_t v21 = v10[7];
    uint64_t v22 = type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
    unint64_t result = sub_10049E2E4(v12, v21 + *(void *)(*(void *)(v22 - 8) + 72LL) * v20);
    uint64_t v23 = v10[2];
    BOOL v24 = __OFADD__(v23, 1LL);
    uint64_t v25 = v23 + 1;
    if (v24) {
      goto LABEL_12;
    }
    v10[2] = v25;
    v15 += v16;
    if (!--v11)
    {
      swift_release(v10);
      uint64_t v26 = v28;
      goto LABEL_10;
    }
  }

  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10049657C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    __n128 v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_1003F5CB4(&qword_1009BB7C8);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  __n128 v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  uint64_t v6 = (unint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v7 = *(v6 - 1);
    unint64_t v8 = *v6;
    id v9 = (id)*(v6 - 2);
    sub_1004028CC(v7, v8);
    unint64_t result = sub_10049A934((uint64_t)v9);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    *(void *)(v4[6] + 8 * result) = v9;
    uint64_t v12 = (uint64_t *)(v4[7] + 16 * result);
    uint64_t *v12 = v7;
    v12[1] = v8;
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v6 += 3;
    void v4[2] = v15;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100496694()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC17identityservicesd29IDSGroupEncryptionController2_delegate;
  swift_beginAccess(v0 + OBJC_IVAR____TtC17identityservicesd29IDSGroupEncryptionController2_delegate, v3, 0LL, 0LL);
  return swift_unknownObjectWeakLoadStrong(v1);
}

uint64_t sub_1004966DC(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC17identityservicesd29IDSGroupEncryptionController2_delegate;
  swift_beginAccess(v3, v6, 1LL, 0LL);
  swift_unknownObjectWeakAssign(v3, a1);
  return swift_unknownObjectRelease(a1, v4);
}

void (*sub_100496734(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC17identityservicesd29IDSGroupEncryptionController2_delegate;
  v3[4] = v1;
  void v3[5] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess(v1 + v4, v3, 33LL, 0LL);
  v3[3] = swift_unknownObjectWeakLoadStrong(v5);
  return sub_1004967A4;
}

void sub_1004967A4(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 24LL);
  swift_unknownObjectWeakAssign(*(void *)(*(void *)a1 + 32LL) + *(void *)(*(void *)a1 + 40LL), v4);
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease(v3[3], v5);
    swift_endAccess(v3);
  }

  else
  {
    swift_endAccess(v3);
    swift_unknownObjectRelease(v4, v6);
  }

  free(v3);
}

id sub_100496890()
{
  uint64_t v4 = (id *)((char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_1003F5CB4(&qword_1009B95A0);
  uint64_t v7 = __chkstk_darwin(v5, v6);
  id v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(uint64_t))((swift_isaMask & **(void **)(v0
                                                                 + OBJC_IVAR____TtC17identityservicesd29IDSGroupEncryptionController2_identityController))
                                  + 0x130LL))(v7);
  uint64_t v10 = type metadata accessor for IDSGroupEncryptionFullIdentity(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48LL))(v9, 1LL, v10) == 1)
  {
    sub_10040A274((uint64_t)v9, &qword_1009B95A0);
    return 0LL;
  }

  else
  {
    sub_1003F5FC8((uint64_t)v9, (uint64_t)v4, type metadata accessor for IDSGroupEncryptionPublicIdentity);
    sub_1003F6050((uint64_t)v9, type metadata accessor for IDSGroupEncryptionFullIdentity);
    id v11 = v4[1];
    sub_1003F6050((uint64_t)v4, type metadata accessor for IDSGroupEncryptionPublicIdentity);
  }

  return v11;
}

BOOL sub_100496A00()
{
  uint64_t v1 = type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
  __chkstk_darwin(v2, v3);
  __n128 v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1003F5CB4(&qword_1009B95A0);
  uint64_t v8 = __chkstk_darwin(v6, v7);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(uint64_t))((swift_isaMask & **(void **)(v0
                                                                 + OBJC_IVAR____TtC17identityservicesd29IDSGroupEncryptionController2_identityController))
                                  + 0x130LL))(v8);
  uint64_t v11 = type metadata accessor for IDSGroupEncryptionFullIdentity(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48LL))(v10, 1LL, v11) == 1)
  {
    sub_10040A274((uint64_t)v10, &qword_1009B95A0);
    return 0LL;
  }

  else
  {
    sub_1003F5FC8((uint64_t)v10, (uint64_t)v5, type metadata accessor for IDSGroupEncryptionPublicIdentity);
    sub_1003F6050((uint64_t)v10, type metadata accessor for IDSGroupEncryptionFullIdentity);
    unsigned int v13 = v5[*(int *)(v1 + 32)];
    sub_1003F6050((uint64_t)v5, type metadata accessor for IDSGroupEncryptionPublicIdentity);
    return v13 > 1;
  }

id sub_100496C44()
{
  uint64_t v3 = __chkstk_darwin(v1, v2);
  __n128 v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(uint64_t))((swift_isaMask & **(void **)(v0
                                                                 + OBJC_IVAR____TtC17identityservicesd29IDSGroupEncryptionController2_identityController))
                                  + 0x130LL))(v3);
  uint64_t v6 = type metadata accessor for IDSGroupEncryptionFullIdentity(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48LL))(v5, 1LL, v6) == 1)
  {
    sub_10040A274((uint64_t)v5, &qword_1009B95A0);
    return 0LL;
  }

  else
  {
    id v7 = *(id *)&v5[*(int *)(v6 + 20)];
    sub_1003F6050((uint64_t)v5, type metadata accessor for IDSGroupEncryptionFullIdentity);
  }

  return v7;
}

id sub_100496D5C()
{
  uint64_t v1 = type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
  __chkstk_darwin(v2, v3);
  __n128 v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1003F5CB4(&qword_1009B95A0);
  uint64_t v8 = __chkstk_darwin(v6, v7);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(uint64_t))((swift_isaMask & **(void **)(v0
                                                                 + OBJC_IVAR____TtC17identityservicesd29IDSGroupEncryptionController2_identityController))
                                  + 0x130LL))(v8);
  uint64_t v11 = type metadata accessor for IDSGroupEncryptionFullIdentity(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48LL))(v10, 1LL, v11) == 1)
  {
    sub_10040A274((uint64_t)v10, &qword_1009B95A0);
    return 0LL;
  }

  else
  {
    sub_1003F5FC8((uint64_t)v10, (uint64_t)v5, type metadata accessor for IDSGroupEncryptionPublicIdentity);
    sub_1003F6050((uint64_t)v10, type metadata accessor for IDSGroupEncryptionFullIdentity);
    id v12 = *(id *)&v5[*(int *)(v1 + 28)];
    sub_1003F6050((uint64_t)v5, type metadata accessor for IDSGroupEncryptionPublicIdentity);
  }

  return v12;
}

CFDataRef sub_100497034()
{
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1003F5CB4(&qword_1009B95A0);
  uint64_t v7 = __chkstk_darwin(v5, v6);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(uint64_t))((swift_isaMask & **(void **)(v0
                                                                 + OBJC_IVAR____TtC17identityservicesd29IDSGroupEncryptionController2_identityController))
                                  + 0x130LL))(v7);
  uint64_t v10 = type metadata accessor for IDSGroupEncryptionFullIdentity(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48LL))(v9, 1LL, v10) == 1)
  {
    sub_10040A274((uint64_t)v9, &qword_1009B95A0);
    return 0LL;
  }

  else
  {
    sub_1003F5FC8((uint64_t)v9, (uint64_t)v4, type metadata accessor for IDSGroupEncryptionPublicIdentity);
    sub_1003F6050((uint64_t)v9, type metadata accessor for IDSGroupEncryptionFullIdentity);
    CFDataRef v11 = sub_1004D3220();
    sub_1003F6050((uint64_t)v4, type metadata accessor for IDSGroupEncryptionPublicIdentity);
  }

  return v11;
}

id sub_1004971B0()
{
  uint64_t v1 = type metadata accessor for IDSGroupEncryptionFullIdentity(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v3, v4);
  __n128 v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1003F5CB4(&qword_1009B95A0);
  uint64_t v9 = __chkstk_darwin(v7, v8);
  CFDataRef v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(uint64_t))((swift_isaMask & **(void **)(v0
                                                                 + OBJC_IVAR____TtC17identityservicesd29IDSGroupEncryptionController2_identityController))
                                  + 0xC0LL))(v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v11, 1LL, v1))
  {
    sub_10040A274((uint64_t)v11, &qword_1009B95A0);
    return 0LL;
  }

  else
  {
    sub_1003F5FC8((uint64_t)v11, (uint64_t)v6, type metadata accessor for IDSGroupEncryptionFullIdentity);
    sub_10040A274((uint64_t)v11, &qword_1009B95A0);
    id v12 = *(id *)&v6[*(int *)(v1 + 20)];
    sub_1003F6050((uint64_t)v6, type metadata accessor for IDSGroupEncryptionFullIdentity);
  }

  return v12;
}

id sub_100497320()
{
  uint64_t v1 = type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
  __chkstk_darwin(v2, v3);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for IDSGroupEncryptionFullIdentity(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v8, v9);
  CFDataRef v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1003F5CB4(&qword_1009B95A0);
  uint64_t v14 = __chkstk_darwin(v12, v13);
  uint64_t v16 = (char *)&v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(uint64_t))((swift_isaMask & **(void **)(v0
                                                                 + OBJC_IVAR____TtC17identityservicesd29IDSGroupEncryptionController2_identityController))
                                  + 0xC0LL))(v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v16, 1LL, v6))
  {
    sub_10040A274((uint64_t)v16, &qword_1009B95A0);
    return 0LL;
  }

  else
  {
    sub_1003F5FC8((uint64_t)v16, (uint64_t)v11, type metadata accessor for IDSGroupEncryptionFullIdentity);
    sub_10040A274((uint64_t)v16, &qword_1009B95A0);
    sub_1003F5FC8((uint64_t)v11, (uint64_t)v5, type metadata accessor for IDSGroupEncryptionPublicIdentity);
    sub_1003F6050((uint64_t)v11, type metadata accessor for IDSGroupEncryptionFullIdentity);
    id v17 = *(id *)&v5[*(int *)(v1 + 28)];
    sub_1003F6050((uint64_t)v5, type metadata accessor for IDSGroupEncryptionPublicIdentity);
  }

  return v17;
}

CFDataRef sub_100497534()
{
  uint64_t v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for IDSGroupEncryptionFullIdentity(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1003F5CB4(&qword_1009B95A0);
  uint64_t v13 = __chkstk_darwin(v11, v12);
  uint64_t v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(uint64_t))((swift_isaMask & **(void **)(v0
                                                                 + OBJC_IVAR____TtC17identityservicesd29IDSGroupEncryptionController2_identityController))
                                  + 0xC0LL))(v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v15, 1LL, v5))
  {
    sub_10040A274((uint64_t)v15, &qword_1009B95A0);
    return 0LL;
  }

  else
  {
    sub_1003F5FC8((uint64_t)v15, (uint64_t)v10, type metadata accessor for IDSGroupEncryptionFullIdentity);
    sub_10040A274((uint64_t)v15, &qword_1009B95A0);
    sub_1003F5FC8((uint64_t)v10, (uint64_t)v4, type metadata accessor for IDSGroupEncryptionPublicIdentity);
    sub_1003F6050((uint64_t)v10, type metadata accessor for IDSGroupEncryptionFullIdentity);
    CFDataRef v16 = sub_1004D3220();
    sub_1003F6050((uint64_t)v4, type metadata accessor for IDSGroupEncryptionPublicIdentity);
  }

  return v16;
}

uint64_t sub_100497794()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC17identityservicesd29IDSGroupEncryptionController2_publicIdentitiesLock);
  swift_retain(v1);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 24));
  sub_100497804((uint64_t *)(v1 + 16), &v4);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 24));
  uint64_t v2 = v4;
  swift_release(v1);
  return v2;
}

uint64_t sub_100497804@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v67 = a2;
  uint64_t v71 = *(void *)(type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL) - 8);
  __chkstk_darwin(v3, v4);
  uint64_t v6 = (char *)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1003F5CB4(&qword_1009BB7B8);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (int64_t *)((char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (void **)((char *)&v66 - v13);
  uint64_t v15 = (void *)sub_10049657C((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v16 = *a1;
  uint64_t v17 = *(void *)(*a1 + 64);
  uint64_t v68 = *a1 + 64;
  uint64_t v18 = 1LL << *(_BYTE *)(v16 + 32);
  uint64_t v19 = -1LL;
  if (v18 < 64) {
    uint64_t v19 = ~(-1LL << v18);
  }
  unint64_t v20 = v19 & v17;
  int64_t v69 = (unint64_t)(v18 + 63) >> 6;
  int64_t v66 = v69 - 1;
  uint64_t v72 = v16;
  swift_bridgeObjectRetain(v16);
  int64_t v73 = 0LL;
  uint64_t v70 = v14;
  while (1)
  {
    if (v20)
    {
      unint64_t v21 = __clz(__rbit64(v20));
      uint64_t v22 = (v20 - 1) & v20;
      unint64_t v23 = v21 | (v73 << 6);
LABEL_9:
      uint64_t v24 = *(void *)(v72 + 56);
      uint64_t v25 = *(void **)(*(void *)(v72 + 48) + 8 * v23);
      *uint64_t v10 = v25;
      uint64_t v26 = v24 + *(void *)(v71 + 72) * v23;
      uint64_t v27 = sub_1003F5CB4(&qword_1009BB7C0);
      sub_1003F5FC8(v26, (uint64_t)v10 + *(int *)(v27 + 48), type metadata accessor for IDSGroupEncryptionPublicIdentity);
      (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56LL))(v10, 0LL, 1LL, v27);
      id v28 = v25;
      goto LABEL_28;
    }

    int64_t v29 = v73 + 1;
    if (__OFADD__(v73, 1LL)) {
      goto LABEL_48;
    }
    if (v29 < v69)
    {
      unint64_t v30 = *(void *)(v68 + 8 * v29);
      if (v30) {
        goto LABEL_13;
      }
      int64_t v31 = v73 + 2;
      ++v73;
      if (v29 + 1 < v69)
      {
        unint64_t v30 = *(void *)(v68 + 8 * v31);
        if (v30) {
          goto LABEL_16;
        }
        int64_t v73 = v29 + 1;
        if (v29 + 2 < v69)
        {
          unint64_t v30 = *(void *)(v68 + 8 * (v29 + 2));
          if (v30)
          {
            v29 += 2LL;
            goto LABEL_13;
          }

          int64_t v31 = v29 + 3;
          int64_t v73 = v29 + 2;
          if (v29 + 3 < v69) {
            break;
          }
        }
      }
    }

uint64_t sub_100497D54(uint64_t a1, void *a2)
{
  __n128 v3 = v2;
  sub_1003F5CB4(&qword_1009B97A8);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v14 + 48))(a1, 1LL) == 1)
  {
    sub_10040A274(a1, &qword_1009B97A8);
    sub_10049AC14((uint64_t)a2, (uint64_t)v9);

    return sub_10040A274((uint64_t)v9, &qword_1009B97A8);
  }

  else
  {
    sub_10049E2E4(a1, (uint64_t)v13);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v19 = *v3;
    void *v3 = 0x8000000000000000LL;
    sub_10049C33C((uint64_t)v13, a2, isUniquelyReferenced_nonNull_native);
    uint64_t v17 = *v3;
    void *v3 = v19;

    return swift_bridgeObjectRelease(v17);
  }

id sub_100497EA0(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5)
{
  id v11 = objc_allocWithZone(v5);
  id v12 = sub_10049D2B0(a1, a2, a3, a4, a5);
  swift_unknownObjectRelease(a1, v13);

  swift_unknownObjectRelease(a3, v14);
  swift_unknownObjectRelease(a5, v15);
  return v12;
}

id sub_100497FDC(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  id v13 = objc_allocWithZone(v6);
  id v14 = sub_10049D638(a1, a2, a3, a4, a5, a6);
  swift_unknownObjectRelease(a1, v15);

  swift_unknownObjectRelease(a3, v16);
  swift_unknownObjectRelease(a6, v17);
  return v14;
}

uint64_t sub_100498074(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)&v2[OBJC_IVAR____TtC17identityservicesd29IDSGroupEncryptionController2_groupsLock];
  swift_retain(v5);
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 32));
  sub_1004981A8((void *)(v5 + 16), a1, a2, v2, &v8);
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 32));
  uint64_t v6 = v8;
  swift_release(v5);
  return v6;
}

uint64_t sub_1004981A8@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = *a1;
  if (!*(void *)(*a1 + 16LL)) {
    goto LABEL_5;
  }
  swift_bridgeObjectRetain(a3);
  unint64_t v11 = sub_100417D94(a2, a3);
  if ((v12 & 1) == 0)
  {
    swift_bridgeObjectRelease(a3);
LABEL_5:
    type metadata accessor for IDSGroupEncryptionControllerGroup(0LL);
    uint64_t v15 = *(void **)&a4[OBJC_IVAR____TtC17identityservicesd29IDSGroupEncryptionController2_config];
    uint64_t v16 = *(void **)&a4[OBJC_IVAR____TtC17identityservicesd29IDSGroupEncryptionController2_identityController];
    uint64_t v17 = *(void *)&a4[OBJC_IVAR____TtC17identityservicesd29IDSGroupEncryptionController2_pushHandler];
    sub_100401ACC( (uint64_t)&a4[OBJC_IVAR____TtC17identityservicesd29IDSGroupEncryptionController2_cryptoHandler],  (uint64_t)v28);
    uint64_t v18 = *(void *)&a4[OBJC_IVAR____TtC17identityservicesd29IDSGroupEncryptionController2_sessionProvider];
    swift_bridgeObjectRetain(a3);
    id v19 = v15;
    id v20 = v16;
    swift_unknownObjectRetain(v17, v21);
    swift_unknownObjectRetain(v18, v22);
    id v23 = sub_1004A0B18((uint64_t)a4, (uint64_t)&off_1009072C0, a2, a3, v19, v20, v17, v28, v18);
    swift_bridgeObjectRetain(a3);
    id v13 = v23;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
    v28[0] = *a1;
    *a1 = 0x8000000000000000LL;
    sub_10049C1E0((uint64_t)v13, a2, a3, isUniquelyReferenced_nonNull_native);
    uint64_t v25 = *a1;
    *a1 = v28[0];
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(v25);
    swift_bridgeObjectRetain(a3);
    char v14 = swift_isUniquelyReferenced_nonNull_native(a1[1]);
    v28[0] = a1[1];
    a1[1] = 0x8000000000000000LL;
    goto LABEL_6;
  }

  id v13 = *(id *)(*(void *)(v10 + 56) + 8 * v11);
  swift_bridgeObjectRelease(a3);
  swift_bridgeObjectRetain(a3);
  char v14 = swift_isUniquelyReferenced_nonNull_native(a1[1]);
  v28[0] = a1[1];
  a1[1] = 0x8000000000000000LL;
LABEL_6:
  sub_10049C088(0, a2, a3, v14);
  uint64_t v26 = a1[1];
  a1[1] = v28[0];
  swift_bridgeObjectRelease(a3);
  uint64_t result = swift_bridgeObjectRelease(v26);
  *a5 = v13;
  return result;
}

uint64_t sub_1004983C0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + OBJC_IVAR____TtC17identityservicesd29IDSGroupEncryptionController2_publicIdentitiesLock);
  swift_retain(v5);
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 24));
  uint64_t v6 = *(void *)(v5 + 16);
  if (*(void *)(v6 + 16))
  {
    id v7 = a1;
    unint64_t v8 = sub_10049A934((uint64_t)v7);
    if ((v9 & 1) != 0)
    {
      unint64_t v10 = v8;
      uint64_t v11 = *(void *)(v6 + 56);
      uint64_t v12 = type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
      uint64_t v13 = *(void *)(v12 - 8);
      sub_1003F5FC8(v11 + *(void *)(v13 + 72) * v10, a2, type metadata accessor for IDSGroupEncryptionPublicIdentity);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(a2, 0LL, 1LL, v12);
    }

    else
    {
      uint64_t v15 = type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL))(a2, 1LL, 1LL, v15);
    }
  }

  else
  {
    uint64_t v14 = type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(a2, 1LL, 1LL, v14);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 24));
  return swift_release(v5);
}

id sub_1004984D8(void *a1)
{
  uint64_t v3 = type metadata accessor for Date(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v5, v6);
  unint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1003F5CB4(&qword_1009BC130);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
  __chkstk_darwin(v13, v14);
  uint64_t v16 = (uint64_t *)((char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  id v33 = [a1 wrapMode];
  id v17 = [a1 fromID];
  if (!v17)
  {
    __break(1u);
    goto LABEL_11;
  }

  uint64_t v18 = v17;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  uint64_t v20 = v19;

  id v21 = objc_allocWithZone(&OBJC_CLASS___IDSURI);
  NSString v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v20);
  id v23 = [v21 initWithPrefixedURI:v22];

  id v24 = [a1 pushToken];
  if (!v24)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  uint64_t v25 = (uint64_t)v24;
  id v26 = [a1 expirationDate];
  if (!v26)
  {
LABEL_12:
    id result = (id)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v12, 1LL, 1LL, v3);
    goto LABEL_13;
  }

  uint64_t v27 = v26;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v12, v8, v3);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v4 + 56))(v12, 0LL, 1LL, v3);
  id result = (id)(*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48))(v12, 1LL, v3);
  if ((_DWORD)result == 1)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  id result = [a1 publicIdentity];
  if (!result)
  {
LABEL_14:
    __break(1u);
    return result;
  }

  if (v33 == (id)1) {
    char v29 = 2;
  }
  else {
    char v29 = 1;
  }
  sub_1004D337C((uint64_t)v23, v25, (uint64_t)v12, (uint64_t)result, v29, v16);
  unint64_t v30 = *(os_unfair_lock_s **)((char *)v1
                             + OBJC_IVAR____TtC17identityservicesd29IDSGroupEncryptionController2_publicIdentitiesLock);
  swift_retain(v30);
  os_unfair_lock_lock(v30 + 6);
  sub_1004987C0((uint64_t)&v30[4], a1, (uint64_t)v16);
  os_unfair_lock_unlock(v30 + 6);
  uint64_t v31 = swift_release(v30);
  (*(void (**)(uint64_t))((swift_isaMask & *v1) + 0x198LL))(v31);
  return (id)sub_1003F6050((uint64_t)v16, type metadata accessor for IDSGroupEncryptionPublicIdentity);
}

id sub_1004987C0(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id result = [a2 pushToken];
  if (result)
  {
    __n128 v10 = result;
    sub_1003F5FC8(a3, (uint64_t)v8, type metadata accessor for IDSGroupEncryptionPublicIdentity);
    uint64_t v11 = type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))(v8, 0LL, 1LL, v11);
    return (id)sub_100497D54((uint64_t)v8, v10);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1004988E4( uint64_t a1, unint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return sub_10049D9BC(a1, a2, a3, a4, a5, a6, a9, a10);
}

void sub_1004988EC( void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, unint64_t a6, uint64_t a7, os_log_s *a8, uint64_t a9)
{
  os_log_t v136 = a8;
  uint64_t v137 = a7;
  id v138 = a4;
  uint64_t v135 = a9;
  sub_1003F5CB4(&qword_1009B97A8);
  __chkstk_darwin(v14, v15);
  uint64_t v130 = (char *)&v118 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v131 = type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
  uint64_t v129 = *(void *)(v131 - 8);
  __chkstk_darwin(v17, v18);
  id v127 = (char *)&v118 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v20, v21);
  uint64_t v128 = (uint64_t)&v118 - v22;
  uint64_t v140 = (void *)type metadata accessor for Date(0LL);
  uint64_t v23 = *(v140 - 1);
  __chkstk_darwin(v24, v25);
  uint64_t v126 = (char *)&v118 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v27, v28);
  uint64_t v134 = (char *)&v118 - v29;
  __chkstk_darwin(v30, v31);
  id v33 = (char *)&v118 - v32;
  uint64_t v34 = *(void *)((char *)a1 + OBJC_IVAR____TtC17identityservicesd29IDSGroupEncryptionController2_groupsLock);
  swift_retain(v34);
  os_unfair_lock_lock((os_unfair_lock_t)(v34 + 32));
  uint64_t v35 = *(void *)(v34 + 16);
  uint64_t v36 = *(void *)(v35 + 16);
  uint64_t v139 = a1;
  uint64_t v125 = a2;
  if (v36)
  {
    swift_bridgeObjectRetain(a3);
    unint64_t v37 = sub_100417D94(a2, (uint64_t)a3);
    if ((v38 & 1) != 0)
    {
      char v39 = *(void **)(*(void *)(v35 + 56) + 8 * v37);
      char v40 = v39;
    }

    else
    {
      char v39 = 0LL;
    }

    swift_bridgeObjectRelease(a3);
  }

  else
  {
    char v39 = 0LL;
  }

  os_unfair_lock_unlock((os_unfair_lock_t)(v34 + 32));
  swift_release(v34);
  if (v39
    && (char v41 = *(uint64_t (**)(id))((swift_isaMask & *v39) + 0x2B8LL),
        uint64_t v133 = v39,
        uint64_t v42 = (void *)v41(v138),
        v133,
        v42,
        !v42))
  {
    swift_bridgeObjectRetain_n(a3, 2LL);
    id v95 = v138;
    uint64_t v96 = (os_log_s *)Logger.logObject.getter(v95);
    os_log_type_t v97 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v96, v97))
    {
      uint64_t v98 = swift_slowAlloc(22LL, -1LL);
      uint64_t v99 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v100 = swift_slowAlloc(32LL, -1LL);
      v142[0] = v100;
      *(_DWORD *)uint64_t v98 = 136315394;
      swift_bridgeObjectRetain(a3);
      uint64_t v141 = sub_1003FFBB0(v125, (unint64_t)a3, v142);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, v142, v98 + 4, v98 + 12);
      swift_bridgeObjectRelease_n(a3, 3LL);
      *(_WORD *)(v98 + 1sub_10040A648(v1 + 2) = 2112;
      uint64_t v141 = (uint64_t)v95;
      id v101 = v95;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, v142, v98 + 14, v98 + 22);
      *uint64_t v99 = v95;

      _os_log_impl( (void *)&_mh_execute_header,  v96,  v97,  "receive(publicKey): We'll drop this pre-key message for group %s since %@ is not in this group!",  (uint8_t *)v98,  0x16u);
      uint64_t v102 = sub_1003F5CB4(&qword_1009B92C8);
      swift_arrayDestroy(v99, 1LL, v102);
      swift_slowDealloc(v99, -1LL, -1LL);
      swift_arrayDestroy(v100, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v100, -1LL, -1LL);
      swift_slowDealloc(v98, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(a3, 2LL);
    }
  }

  else
  {
    unint64_t v132 = v39;
    uint64_t v133 = a3;
    uint64_t v43 = v140;
    unint64_t v44 = (char *)v139 + OBJC_IVAR____TtC17identityservicesd29IDSGroupEncryptionController2_l;
    unint64_t v123 = *(void (**)(char *, uint64_t, void *))(v23 + 16);
    v123(v33, v137, v140);
    sub_1004028CC(a5, a6);
    size_t v45 = v136;
    sub_1004028CC(a5, a6);
    os_log_t v46 = v45;
    uint64_t v47 = (os_log_s *)Logger.logObject.getter(v46);
    os_log_type_t v48 = static os_log_type_t.default.getter();
    int v49 = v48;
    BOOL v50 = os_log_type_enabled(v47, v48);
    os_log_t v136 = v46;
    uint64_t v124 = v44;
    if (v50)
    {
      uint64_t v51 = swift_slowAlloc(42LL, -1LL);
      int v121 = v49;
      uint64_t v52 = v51;
      uint64_t v119 = (os_log_t *)swift_slowAlloc(8LL, -1LL);
      uint64_t v122 = swift_slowAlloc(96LL, -1LL);
      v142[0] = v122;
      *(_DWORD *)uint64_t v52 = 136315906;
      sub_1004028CC(a5, a6);
      uint64_t v53 = Data.description.getter(a5, a6);
      os_log_t v120 = v47;
      unint64_t v54 = a6;
      os_log_t v55 = v46;
      unint64_t v57 = v56;
      sub_100402A84(a5, v54);
      uint64_t v141 = sub_1003FFBB0(v53, v57, v142);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, v142, v52 + 4, v52 + 12);
      swift_bridgeObjectRelease(v57);
      sub_100402A84(a5, v54);
      sub_100402A84(a5, v54);
      *(_WORD *)(v52 + 1sub_10040A648(v1 + 2) = 2080;
      uint64_t v58 = sub_10040A2B0( &qword_1009B9D98,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
      uint64_t v59 = dispatch thunk of CustomStringConvertible.description.getter(v140, v58);
      unint64_t v61 = v60;
      uint64_t v141 = sub_1003FFBB0(v59, v60, v142);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, v142, v52 + 14, v52 + 22);
      swift_bridgeObjectRelease(v61);
      id v62 = *(void **)(v23 + 8);
      ((void (*)(char *, void *))v62)(v33, v140);
      *(_WORD *)(v52 + 2sub_10040A648(v1 + 2) = 2112;
      uint64_t v141 = (uint64_t)v55;
      uint64_t v63 = v55;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, v142, v52 + 24, v52 + 32);
      int64_t v64 = v119;
      *uint64_t v119 = v55;
      a6 = v54;

      *(_WORD *)(v52 + 3sub_10040A648(v1 + 2) = 2080;
      uint64_t v141 = v135;
      type metadata accessor for IDSRealTimeEncryptionKMWrapMode(0LL);
      uint64_t v66 = String.init<A>(describing:)(&v141, v65);
      unint64_t v68 = v67;
      uint64_t v141 = sub_1003FFBB0(v66, v67, v142);
      uint64_t v43 = v140;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, v142, v52 + 34, v52 + 42);
      swift_bridgeObjectRelease(v68);
      os_log_t v46 = v120;
      _os_log_impl( (void *)&_mh_execute_header,  v120,  (os_log_type_t)v121,  "receive(publicKey): public key: %s serverDate:%s pushToken: %@ wrapMode: %s",  (uint8_t *)v52,  0x2Au);
      uint64_t v69 = sub_1003F5CB4(&qword_1009B92C8);
      uint64_t v70 = v64;
      uint64_t v71 = v62;
      swift_arrayDestroy(v70, 1LL, v69);
      swift_slowDealloc(v70, -1LL, -1LL);
      uint64_t v72 = v122;
      swift_arrayDestroy(v122, 3LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v72, -1LL, -1LL);
      swift_slowDealloc(v52, -1LL, -1LL);
    }

    else
    {

      sub_100402A84(a5, a6);
      sub_100402A84(a5, a6);
      uint64_t v71 = *(void **)(v23 + 8);
      ((void (*)(char *, void *))v71)(v33, v43);
    }

    unint64_t v73 = (unint64_t)v133;
    unint64_t v74 = v139;
    uint64_t v75 = *(void *)((char *)v139
                    + OBJC_IVAR____TtC17identityservicesd29IDSGroupEncryptionController2_cryptoHandler
                    + 24);
    uint64_t v76 = *(void *)((char *)v139
                    + OBJC_IVAR____TtC17identityservicesd29IDSGroupEncryptionController2_cryptoHandler
                    + 32);
    sub_10040A238( (void *)((char *)v139 + OBJC_IVAR____TtC17identityservicesd29IDSGroupEncryptionController2_cryptoHandler),  v75);
    uint64_t v77 = (void *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v76 + 56))(a5, a6, v75, v76);
    int64_t v78 = v77;
    if ((v79 & 1) == 0)
    {
      Date.addingTimeInterval(_:)( v77,  *(double *)(*(void *)((char *)v74 + OBJC_IVAR____TtC17identityservicesd29IDSGroupEncryptionController2_config)
                  + OBJC_IVAR____TtC17identityservicesd31IDSGroupEncryptionConfiguration_preKeyExpirationDuration));
      uint64_t v80 = (uint64_t)v130;
      os_log_t v81 = v136;
      (*(void (**)(os_log_t))((swift_isaMask & *v74) + 0x150LL))(v136);
      int v82 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v129 + 48))(v80, 1LL, v131);
      uint64_t v140 = v71;
      if (v82 == 1)
      {
        id v83 = v74;
        sub_10040A274(v80, &qword_1009B97A8);
        uint64_t v84 = (uint64_t)v126;
        uint64_t v85 = v127;
        uint64_t v86 = v134;
        v123(v126, (uint64_t)v134, v43);
LABEL_29:
        uint64_t v111 = (uint64_t)v138;
        id v112 = v138;
        uint64_t v113 = v81;
        sub_10049E44C(v78, 0);
        if (v135 == 1) {
          char v114 = 2;
        }
        else {
          char v114 = 1;
        }
        sub_1004D337C(v111, (uint64_t)v113, v84, (uint64_t)v78, v114, v85);
        uint64_t v115 = *(os_unfair_lock_s **)((char *)v83
                                    + OBJC_IVAR____TtC17identityservicesd29IDSGroupEncryptionController2_publicIdentitiesLock);
        swift_retain(v115);
        os_unfair_lock_lock(v115 + 6);
        sub_10049952C((uint64_t)&v115[4], v113, (uint64_t)v85);
        os_unfair_lock_unlock(v115 + 6);
        swift_release(v115);
        if (v132)
        {
          uint64_t v116 = *(void (**)(void))((swift_isaMask & *v132) + 0x390LL);
          os_log_type_t v117 = v132;
          v116();

          sub_10049E440(v78, 0);
          ((void (*)(char *, void *))v140)(v86, v43);
        }

        else
        {
          ((void (*)(char *, void *))v140)(v86, v43);
          sub_10049E440(v78, 0);
        }

        sub_1003F6050((uint64_t)v85, type metadata accessor for IDSGroupEncryptionPublicIdentity);
        return;
      }

      sub_10049E2E4(v80, v128);
      CFDataRef v103 = sub_1004D3220();
      unint64_t v105 = v104;
      sub_1004028CC(a5, a6);
      id v83 = v74;
      if (v105 >> 60 == 15)
      {
        sub_10040AD00(a5, a6);
        sub_10040AD00((uint64_t)v103, v105);
        uint64_t v84 = (uint64_t)v126;
        uint64_t v85 = v127;
        uint64_t v86 = v134;
        uint64_t v106 = v123;
      }

      else
      {
        sub_1004028CC(a5, a6);
        sub_100410288(a5, a6);
        char v108 = v107;
        sub_10040AD00((uint64_t)v103, v105);
        sub_100402A84(a5, a6);
        sub_100402A84(a5, a6);
        uint64_t v84 = (uint64_t)v126;
        uint64_t v85 = v127;
        uint64_t v86 = v134;
        uint64_t v106 = v123;
        if ((v108 & 1) != 0)
        {
          ((void (*)(char *, void *))v140)(v134, v43);
          uint64_t v109 = v128;
          v106(v86, v128 + *(int *)(v131 + 24), v43);
          uint64_t v110 = v109;
LABEL_28:
          sub_1003F6050(v110, type metadata accessor for IDSGroupEncryptionPublicIdentity);
          os_log_t v81 = v136;
          v106((char *)v84, (uint64_t)v86, v43);
          goto LABEL_29;
        }
      }

      uint64_t v110 = v128;
      goto LABEL_28;
    }

    sub_10049E440(v77, 1);
    swift_bridgeObjectRetain_n(v73, 2LL);
    id v87 = v138;
    uint64_t v88 = (os_log_s *)Logger.logObject.getter(v87);
    os_log_type_t v89 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v88, v89))
    {
      uint64_t v90 = swift_slowAlloc(22LL, -1LL);
      uint64_t v91 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v92 = swift_slowAlloc(32LL, -1LL);
      v142[0] = v92;
      *(_DWORD *)uint64_t v90 = 136315394;
      swift_bridgeObjectRetain(v73);
      uint64_t v141 = sub_1003FFBB0(v125, v73, v142);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, v142, v90 + 4, v90 + 12);
      swift_bridgeObjectRelease_n(v73, 3LL);
      *(_WORD *)(v90 + 1sub_10040A648(v1 + 2) = 2112;
      uint64_t v141 = (uint64_t)v87;
      id v93 = v87;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, v142, v90 + 14, v90 + 22);
      *uint64_t v91 = v87;

      _os_log_impl( (void *)&_mh_execute_header,  v88,  v89,  "Couldn't create the public identity for the group %s, fromID: %@",  (uint8_t *)v90,  0x16u);
      uint64_t v94 = sub_1003F5CB4(&qword_1009B92C8);
      swift_arrayDestroy(v91, 1LL, v94);
      swift_slowDealloc(v91, -1LL, -1LL);
      swift_arrayDestroy(v92, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v92, -1LL, -1LL);
      swift_slowDealloc(v90, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v73, 2LL);
    }
  }

uint64_t sub_10049952C(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1003F5FC8(a3, (uint64_t)v8, type metadata accessor for IDSGroupEncryptionPublicIdentity);
  uint64_t v9 = type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 0LL, 1LL, v9);
  return sub_100497D54((uint64_t)v8, a2);
}

uint64_t sub_100499748(void *a1)
{
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC17identityservicesd29IDSGroupEncryptionController2_publicIdentitiesLock);
  swift_retain(v3);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 24));
  sub_1004997C0((uint64_t *)(v3 + 16), a1, &v6);
  os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 24));
  uint64_t v4 = v6;
  swift_release(v3);
  return v4;
}

uint64_t sub_1004997C0@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v12, v13);
  __n128 v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = *a1;
  if (*(void *)(v16 + 16))
  {
    id v17 = a2;
    unint64_t v18 = sub_10049A934((uint64_t)v17);
    if ((v19 & 1) != 0)
    {
      sub_1003F5FC8( *(void *)(v16 + 56) + *(void *)(v11 + 72) * v18,  (uint64_t)v9,  type metadata accessor for IDSGroupEncryptionPublicIdentity);
      uint64_t v20 = 0LL;
    }

    else
    {
      uint64_t v20 = 1LL;
    }

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, v20, 1LL, v10);

    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1LL, v10) != 1)
    {
      sub_10049E2E4((uint64_t)v9, (uint64_t)v15);
      id v22 = sub_1004D33FC();
      uint64_t result = sub_1003F6050((uint64_t)v15, type metadata accessor for IDSGroupEncryptionPublicIdentity);
      goto LABEL_9;
    }
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1LL, 1LL, v10);
  }

  uint64_t result = sub_10040A274((uint64_t)v9, &qword_1009B97A8);
  id v22 = 0LL;
LABEL_9:
  *a3 = v22;
  return result;
}

uint64_t sub_1004999E4(uint64_t a1, unint64_t a2, double a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v65 = *(void *)(v8 - 8);
  uint64_t v66 = v8;
  __chkstk_darwin(v9, v10);
  int64_t v64 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v62 = *(void *)(v12 - 8);
  uint64_t v63 = v12;
  __chkstk_darwin(v13, v14);
  unint64_t v61 = (char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v18, v19);
  __n128 v21 = (uint64_t *)((char *)&v55 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v60 = type metadata accessor for DispatchTime(0LL);
  uint64_t v58 = *(void *)(v60 - 8);
  __chkstk_darwin(v22, v23);
  __n128 v25 = (char *)&v55 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v26, v27);
  uint64_t v59 = (char *)&v55 - v28;
  uint64_t v29 = *(void *)&v3[OBJC_IVAR____TtC17identityservicesd29IDSGroupEncryptionController2_groupsLock];
  swift_retain(v29);
  os_unfair_lock_lock((os_unfair_lock_t)(v29 + 32));
  swift_bridgeObjectRetain(a2);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(v29 + 24));
  aBlock[0] = *(void *)(v29 + 24);
  *(void *)(v29 + 24) = 0x8000000000000000LL;
  sub_10049C088(1, a1, a2, isUniquelyReferenced_nonNull_native);
  uint64_t v31 = *(void *)(v29 + 24);
  *(void *)(v29 + 24) = aBlock[0];
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(v31);
  os_unfair_lock_unlock((os_unfair_lock_t)(v29 + 32));
  swift_release(v29);
  uint64_t v32 = swift_bridgeObjectRetain_n(a2, 2LL);
  id v33 = (os_log_s *)Logger.logObject.getter(v32);
  os_log_type_t v34 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v33, v34))
  {
    uint64_t v35 = swift_slowAlloc(32LL, -1LL);
    uint64_t v36 = swift_slowAlloc(64LL, -1LL);
    unint64_t v57 = v4;
    uint64_t v37 = v36;
    aBlock[0] = v36;
    *(_DWORD *)uint64_t v35 = 136315650;
    uint64_t v56 = v16;
    uint64_t v67 = sub_1003FFBB0(0xD00000000000001ALL, 0x8000000100842230LL, aBlock);
    uint64_t v55 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, aBlock, v35 + 4, v35 + 12);
    *(_WORD *)(v35 + 1sub_10040A648(v1 + 2) = 2080;
    swift_bridgeObjectRetain(a2);
    uint64_t v67 = sub_1003FFBB0(a1, a2, aBlock);
    uint64_t v16 = v56;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, aBlock, v35 + 14, v35 + 22);
    swift_bridgeObjectRelease_n(a2, 3LL);
    *(_WORD *)(v35 + 2sub_10040A648(v1 + 2) = 2048;
    uint64_t v67 = *(void *)&a3;
    uint64_t v17 = v55;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, aBlock, v35 + 24, v35 + 32);
    _os_log_impl( (void *)&_mh_execute_header,  v33,  v34,  "%s: scheduling cleaning up for group %s after %f seconds.",  (uint8_t *)v35,  0x20u);
    swift_arrayDestroy(v37, 2LL, (char *)&type metadata for Any + 8);
    uint64_t v38 = v37;
    uint64_t v4 = v57;
    swift_slowDealloc(v38, -1LL, -1LL);
    swift_slowDealloc(v35, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(a2, 2LL);
  }

  char v39 = *(char **)&v4[OBJC_IVAR____TtC17identityservicesd29IDSGroupEncryptionController2_q];
  uint64_t result = static DispatchTime.now()(v40);
  if ((~*(void *)&a3 & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }

  if (a3 <= -9.22337204e18)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  if (a3 < 9.22337204e18)
  {
    *__n128 v21 = (uint64_t)a3;
    (*(void (**)(void *, void, uint64_t))(v17 + 104))( v21,  enum case for DispatchTimeInterval.seconds(_:),  v16);
    uint64_t v42 = v59;
    unint64_t v57 = v39;
    DispatchTime.advanced(by:)(v21);
    (*(void (**)(void *, uint64_t))(v17 + 8))(v21, v16);
    uint64_t v43 = *(void (**)(char *, uint64_t))(v58 + 8);
    uint64_t v44 = v60;
    v43(v25, v60);
    size_t v45 = (void *)swift_allocObject(&unk_100907280, 40LL, 7LL);
    v45[2] = v4;
    v45[3] = a1;
    v45[4] = a2;
    aBlock[4] = (uint64_t)sub_10049DCC8;
    uint64_t v69 = v45;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = (uint64_t)sub_1003F8400;
    aBlock[3] = (uint64_t)&unk_100907298;
    os_log_t v46 = _Block_copy(aBlock);
    swift_bridgeObjectRetain(a2);
    uint64_t v47 = v4;
    os_log_type_t v48 = v61;
    static DispatchQoS.unspecified.getter(v47);
    uint64_t v67 = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v49 = sub_10040A2B0( (unint64_t *)&unk_1009BAC40,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v50 = sub_1003F5CB4((uint64_t *)&unk_1009B9870);
    uint64_t v51 = sub_1004021DC((unint64_t *)&qword_1009BAC50, (uint64_t *)&unk_1009B9870);
    uint64_t v52 = v64;
    uint64_t v53 = v50;
    uint64_t v54 = v66;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v67, v53, v51, v66, v49);
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v42, v48, v52, v46);
    _Block_release(v46);
    (*(void (**)(char *, uint64_t))(v65 + 8))(v52, v54);
    (*(void (**)(char *, uint64_t))(v62 + 8))(v48, v63);
    v43(v42, v44);
    return swift_release(v69);
  }

id sub_10049A004()
{
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1003F5CB4(&qword_1009B95A0);
  uint64_t v7 = __chkstk_darwin(v5, v6);
  __n128 v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(uint64_t))((swift_isaMask & **(void **)(v0
                                                                 + OBJC_IVAR____TtC17identityservicesd29IDSGroupEncryptionController2_identityController))
                                  + 0x130LL))(v7);
  uint64_t v10 = type metadata accessor for IDSGroupEncryptionFullIdentity(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48LL))(v9, 1LL, v10) == 1)
  {
    sub_10040A274((uint64_t)v9, &qword_1009B95A0);
    return 0LL;
  }

  else
  {
    sub_1003F5FC8((uint64_t)v9, (uint64_t)v4, type metadata accessor for IDSGroupEncryptionPublicIdentity);
    sub_1003F6050((uint64_t)v9, type metadata accessor for IDSGroupEncryptionFullIdentity);
    id v11 = sub_1004D33FC();
    sub_1003F6050((uint64_t)v4, type metadata accessor for IDSGroupEncryptionPublicIdentity);
  }

  return v11;
}

id sub_10049A174()
{
  uint64_t v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for IDSGroupEncryptionFullIdentity(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1003F5CB4(&qword_1009B95A0);
  uint64_t v13 = __chkstk_darwin(v11, v12);
  uint64_t v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(uint64_t))((swift_isaMask & **(void **)(v0
                                                                 + OBJC_IVAR____TtC17identityservicesd29IDSGroupEncryptionController2_identityController))
                                  + 0xC0LL))(v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v15, 1LL, v5))
  {
    sub_10040A274((uint64_t)v15, &qword_1009B95A0);
    return 0LL;
  }

  else
  {
    sub_1003F5FC8((uint64_t)v15, (uint64_t)v10, type metadata accessor for IDSGroupEncryptionFullIdentity);
    sub_10040A274((uint64_t)v15, &qword_1009B95A0);
    sub_1003F5FC8((uint64_t)v10, (uint64_t)v4, type metadata accessor for IDSGroupEncryptionPublicIdentity);
    sub_1003F6050((uint64_t)v10, type metadata accessor for IDSGroupEncryptionFullIdentity);
    id v16 = sub_1004D33FC();
    sub_1003F6050((uint64_t)v4, type metadata accessor for IDSGroupEncryptionPublicIdentity);
  }

  return v16;
}

id sub_10049A400()
{
  uint64_t v3 = __chkstk_darwin(v1, v2);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(uint64_t))((swift_isaMask & **(void **)(v0
                                                                 + OBJC_IVAR____TtC17identityservicesd29IDSGroupEncryptionController2_identityController))
                                  + 0x130LL))(v3);
  uint64_t v6 = type metadata accessor for IDSGroupEncryptionFullIdentity(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48LL))(v5, 1LL, v6) == 1)
  {
    sub_10040A274((uint64_t)v5, &qword_1009B95A0);
    return 0LL;
  }

  else
  {
    id v7 = sub_1004D3778();
    sub_1003F6050((uint64_t)v5, type metadata accessor for IDSGroupEncryptionFullIdentity);
  }

  return v7;
}

id sub_10049A510()
{
  uint64_t v1 = type metadata accessor for IDSGroupEncryptionFullIdentity(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v3, v4);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1003F5CB4(&qword_1009B95A0);
  uint64_t v9 = __chkstk_darwin(v7, v8);
  __n128 v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(uint64_t))((swift_isaMask & **(void **)(v0
                                                                 + OBJC_IVAR____TtC17identityservicesd29IDSGroupEncryptionController2_identityController))
                                  + 0xC0LL))(v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v11, 1LL, v1))
  {
    sub_10040A274((uint64_t)v11, &qword_1009B95A0);
    return 0LL;
  }

  else
  {
    sub_1003F5FC8((uint64_t)v11, (uint64_t)v6, type metadata accessor for IDSGroupEncryptionFullIdentity);
    sub_10040A274((uint64_t)v11, &qword_1009B95A0);
    id v12 = sub_1004D3778();
    sub_1003F6050((uint64_t)v6, type metadata accessor for IDSGroupEncryptionFullIdentity);
  }

  return v12;
}

uint64_t sub_10049A64C()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC17identityservicesd29IDSGroupEncryptionController2_publicIdentitiesLock);
  swift_retain(v1);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 24));
  uint64_t v2 = *(void *)(v1 + 16);
  __n128 v3 = swift_bridgeObjectRetain(v2);
  uint64_t v6 = sub_10049CC2C(v4, v3, v5);
  swift_bridgeObjectRelease_n(v2, 2LL);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v6;
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 24));
  return swift_release(v1);
}

uint64_t sub_10049A6C8()
{
  return (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x198LL))();
}

void sub_10049A6E4(uint64_t a1)
{
  __n128 v3 = *(void **)(v1 + OBJC_IVAR____TtC17identityservicesd29IDSGroupEncryptionController2_sessionProvider);
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [v3 sessionWithUniqueID:v4];

  if (v5)
  {
    [v5 recvKeyMaterial:a1];
    swift_unknownObjectRelease(v5, v6);
  }

id sub_10049A7A0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for IDSGroupEncryptionController2(0LL);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10049A8A8()
{
  return (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x150LL))();
}

uint64_t sub_10049A8C4()
{
  return (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x1A0LL))();
}

uint64_t sub_10049A8E0()
{
  return (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x1A8LL))();
}

uint64_t sub_10049A8FC()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **v0) + 0x150LL))();
}

unint64_t sub_10049A934(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_10049A964(a1, v4);
}

unint64_t sub_10049A964(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
  {
    sub_10041D3C4(0LL, (unint64_t *)&qword_1009BBE30, &OBJC_CLASS___IDSPushToken_ptr);
    id v7 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    char v8 = static NSObject.== infix(_:_:)(v7, a1);

    if ((v8 & 1) == 0)
    {
      uint64_t v9 = ~v4;
      for (unint64_t i = (i + 1) & v9; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0; unint64_t i = (i + 1) & v9)
      {
        id v10 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v11 = static NSObject.== infix(_:_:)(v10, a1);

        if ((v11 & 1) != 0) {
          break;
        }
      }
    }
  }

  return i;
}

uint64_t sub_10049AA7C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  unint64_t v7 = sub_100417D94(a1, a2);
  LOBYTE(asub_10040A648(v1 + 2) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a2 & 1) == 0) {
    return 2LL;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  uint64_t v10 = *v3;
  uint64_t v14 = *v3;
  uint64_t *v3 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10049C6B4();
    uint64_t v10 = v14;
  }

  swift_bridgeObjectRelease(*(void *)(*(void *)(v10 + 48) + 16 * v7 + 8));
  uint64_t v11 = *(unsigned __int8 *)(*(void *)(v10 + 56) + v7);
  sub_10049BB08(v7, v10);
  uint64_t v12 = *v3;
  uint64_t *v3 = v10;
  swift_bridgeObjectRelease(v12);
  return v11;
}

uint64_t sub_10049AB48(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  unint64_t v7 = sub_100417D94(a1, a2);
  LOBYTE(asub_10040A648(v1 + 2) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a2 & 1) == 0) {
    return 0LL;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  uint64_t v10 = *v3;
  uint64_t v14 = *v3;
  uint64_t *v3 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10049C85C();
    uint64_t v10 = v14;
  }

  swift_bridgeObjectRelease(*(void *)(*(void *)(v10 + 48) + 16 * v7 + 8));
  uint64_t v11 = *(void *)(*(void *)(v10 + 56) + 8 * v7);
  sub_10049BCDC(v7, v10);
  uint64_t v12 = *v3;
  uint64_t *v3 = v10;
  swift_bridgeObjectRelease(v12);
  return v11;
}

uint64_t sub_10049AC14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  unint64_t v7 = sub_10049A934(a1);
  LOBYTE(a1) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a1 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v10 = *v3;
    uint64_t v17 = *v3;
    uint64_t *v3 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10049CA0C();
      uint64_t v10 = v17;
    }

    uint64_t v11 = *(void *)(v10 + 56);
    uint64_t v12 = type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
    uint64_t v13 = *(void *)(v12 - 8);
    sub_10049E2E4(v11 + *(void *)(v13 + 72) * v7, a2);
    sub_10049BEB0(v7, v10);
    uint64_t v14 = *v3;
    uint64_t *v3 = v10;
    swift_bridgeObjectRelease(v14);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(a2, 0LL, 1LL, v12);
  }

  else
  {
    uint64_t v16 = type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))( a2,  1LL,  1LL,  v16);
  }

Swift::Int sub_10049AD30(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_1003F5CB4(&qword_1009BB7C8);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    id v33 = v3;
    uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v10 = (void *)(v5 + 64);
    if (v9 < 64) {
      uint64_t v11 = ~(-1LL << v9);
    }
    else {
      uint64_t v11 = -1LL;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v14 = v7 + 64;
    Swift::Int result = swift_retain(v5);
    int64_t v16 = 0LL;
    while (1)
    {
      if (v12)
      {
        unint64_t v21 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v22 = v21 | (v16 << 6);
      }

      else
      {
        int64_t v23 = v16 + 1;
        if (__OFADD__(v16, 1LL))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }

        if (v23 >= v13) {
          goto LABEL_36;
        }
        unint64_t v24 = v10[v23];
        ++v16;
        if (!v24)
        {
          int64_t v16 = v23 + 1;
          if (v23 + 1 >= v13) {
            goto LABEL_36;
          }
          unint64_t v24 = v10[v16];
          if (!v24)
          {
            int64_t v25 = v23 + 2;
            if (v25 >= v13)
            {
LABEL_36:
              swift_release(v5);
              if ((a2 & 1) == 0)
              {
                Swift::Int result = swift_release(v5);
                uint64_t v3 = v33;
                goto LABEL_43;
              }

              uint64_t v32 = 1LL << *(_BYTE *)(v5 + 32);
              if (v32 >= 64) {
                bzero((void *)(v5 + 64), ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
              }
              else {
                *uint64_t v10 = -1LL << v32;
              }
              uint64_t v3 = v33;
              *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
              break;
            }

            unint64_t v24 = v10[v25];
            if (!v24)
            {
              while (1)
              {
                int64_t v16 = v25 + 1;
                if (__OFADD__(v25, 1LL)) {
                  goto LABEL_45;
                }
                if (v16 >= v13) {
                  goto LABEL_36;
                }
                unint64_t v24 = v10[v16];
                ++v25;
                if (v24) {
                  goto LABEL_33;
                }
              }
            }

            int64_t v16 = v25;
          }
        }

Swift::Int sub_10049B004(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_1003F5CB4(&qword_1009BB7A8);
  char v38 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  uint64_t v35 = v3;
  int64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v22 >= v36) {
      break;
    }
    int64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v37 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v36) {
        goto LABEL_36;
      }
      unint64_t v24 = *(void *)(v37 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v36)
        {
LABEL_36:
          swift_release(v5);
          uint64_t v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v24 = *(void *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v36) {
              goto LABEL_36;
            }
            unint64_t v24 = *(void *)(v37 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v25;
      }
    }

Swift::Int sub_10049B30C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_1003F5CB4(&qword_1009BB7B0);
  char v39 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v38 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v36 = v3;
  int64_t v37 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v22 >= v37) {
      break;
    }
    int64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v38 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v37) {
        goto LABEL_36;
      }
      unint64_t v24 = *(void *)(v38 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_36:
          swift_release(v5);
          uint64_t v3 = v36;
          if ((v39 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v24 = *(void *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v37) {
              goto LABEL_36;
            }
            unint64_t v24 = *(void *)(v38 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v25;
      }
    }

Swift::Int sub_10049B618(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL) - 8);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = *v3;
  if (*(void *)(*v3 + 24) > a1) {
    a1 = *(void *)(*v3 + 24);
  }
  sub_1003F5CB4(&qword_1009BB7A0);
  int v43 = a2;
  uint64_t v12 = static _DictionaryStorage.resize(original:capacity:move:)(v11, a1, a2);
  uint64_t v13 = v12;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_43;
  }
  uint64_t v40 = v3;
  uint64_t v14 = 1LL << *(_BYTE *)(v11 + 32);
  uint64_t v15 = *(void *)(v11 + 64);
  uint64_t v42 = (void *)(v11 + 64);
  if (v14 < 64) {
    uint64_t v16 = ~(-1LL << v14);
  }
  else {
    uint64_t v16 = -1LL;
  }
  unint64_t v17 = v16 & v15;
  int64_t v41 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v18 = v12 + 64;
  Swift::Int result = swift_retain(v11);
  int64_t v20 = 0LL;
  while (1)
  {
    if (v17)
    {
      unint64_t v22 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v23 = v22 | (v20 << 6);
      goto LABEL_24;
    }

    int64_t v24 = v20 + 1;
    if (__OFADD__(v20, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v24 >= v41) {
      break;
    }
    int64_t v25 = v42;
    unint64_t v26 = v42[v24];
    ++v20;
    if (!v26)
    {
      int64_t v20 = v24 + 1;
      if (v24 + 1 >= v41) {
        goto LABEL_36;
      }
      unint64_t v26 = v42[v20];
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_36:
          swift_release(v11);
          uint64_t v3 = v40;
          if ((v43 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v26 = v42[v27];
        if (!v26)
        {
          while (1)
          {
            int64_t v20 = v27 + 1;
            if (__OFADD__(v27, 1LL)) {
              goto LABEL_45;
            }
            if (v20 >= v41) {
              goto LABEL_36;
            }
            unint64_t v26 = v42[v20];
            ++v27;
            if (v26) {
              goto LABEL_23;
            }
          }
        }

        int64_t v20 = v27;
      }
    }

void sub_10049B958(unint64_t a1, uint64_t a2)
{
  int64_t v3 = a1;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (a1 + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t v8 = _HashTable.previousHole(before:)(a1, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::Int v10 = *(void *)(a2 + 40);
        id v11 = *(id *)(*(void *)(a2 + 48) + 8 * v6);
        Swift::Int v12 = NSObject._rawHashValue(seed:)(v10);

        Swift::Int v13 = v12 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v3 >= v13)
          {
LABEL_16:
            uint64_t v16 = *(void *)(a2 + 48);
            unint64_t v17 = (void *)(v16 + 8 * v3);
            uint64_t v18 = (void *)(v16 + 8 * v6);
            if (v3 != v6 || v17 >= v18 + 1) {
              *unint64_t v17 = *v18;
            }
            uint64_t v19 = *(void *)(a2 + 56);
            int64_t v20 = (_OWORD *)(v19 + 16 * v3);
            unint64_t v21 = (_OWORD *)(v19 + 16 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v20 >= v21 + 1))
            {
              *int64_t v20 = *v21;
              int64_t v3 = v6;
            }
          }
        }

        else if (v13 >= v9 || v3 >= v13)
        {
          goto LABEL_16;
        }

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    unint64_t v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v23 = *v22;
    uint64_t v24 = (-1LL << v3) - 1;
  }

  else
  {
    unint64_t v22 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    uint64_t v24 = *v22;
    uint64_t v23 = (-1LL << a1) - 1;
  }

  *unint64_t v22 = v24 & v23;
  uint64_t v25 = *(void *)(a2 + 16);
  BOOL v26 = __OFSUB__(v25, 1LL);
  uint64_t v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }

unint64_t sub_10049BB08(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    Swift::Int result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        unint64_t v9 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v10 = *v9;
        uint64_t v11 = v9[1];
        Hasher.init(_seed:)(v26, *(void *)(a2 + 40));
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v26, v10, v11);
        Swift::Int v12 = Hasher._finalize()();
        Swift::Int result = swift_bridgeObjectRelease(v11);
        unint64_t v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8) {
            goto LABEL_5;
          }
        }

        else if (v13 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          uint64_t v14 = *(void *)(a2 + 48);
          uint64_t v15 = (_OWORD *)(v14 + 16 * v3);
          uint64_t v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1) {
            *uint64_t v15 = *v16;
          }
          uint64_t v17 = *(void *)(a2 + 56);
          uint64_t v18 = (_BYTE *)(v17 + v3);
          uint64_t v19 = (_BYTE *)(v17 + v6);
          if (v3 != v6 || (int64_t v3 = v6, v18 >= v19 + 1))
          {
            *uint64_t v18 = *v19;
            int64_t v3 = v6;
          }
        }

unint64_t sub_10049BCDC(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    Swift::Int result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        unint64_t v9 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v10 = *v9;
        uint64_t v11 = v9[1];
        Hasher.init(_seed:)(v26, *(void *)(a2 + 40));
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v26, v10, v11);
        Swift::Int v12 = Hasher._finalize()();
        Swift::Int result = swift_bridgeObjectRelease(v11);
        unint64_t v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8) {
            goto LABEL_5;
          }
        }

        else if (v13 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          uint64_t v14 = *(void *)(a2 + 48);
          uint64_t v15 = (_OWORD *)(v14 + 16 * v3);
          uint64_t v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1) {
            *uint64_t v15 = *v16;
          }
          uint64_t v17 = *(void *)(a2 + 56);
          uint64_t v18 = (void *)(v17 + 8 * v3);
          uint64_t v19 = (void *)(v17 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v18 >= v19 + 1))
          {
            *uint64_t v18 = *v19;
            int64_t v3 = v6;
          }
        }

void sub_10049BEB0(unint64_t a1, uint64_t a2)
{
  int64_t v3 = a1;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (a1 + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t v8 = _HashTable.previousHole(before:)(a1, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::Int v10 = *(void *)(a2 + 40);
        id v11 = *(id *)(*(void *)(a2 + 48) + 8 * v6);
        Swift::Int v12 = NSObject._rawHashValue(seed:)(v10);

        Swift::Int v13 = v12 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v13 < v9 || v3 < v13) {
            goto LABEL_6;
          }
        }

        else if (v13 < v9 && v3 < v13)
        {
          goto LABEL_6;
        }

        uint64_t v16 = *(void *)(a2 + 48);
        uint64_t v17 = (void *)(v16 + 8 * v3);
        uint64_t v18 = (void *)(v16 + 8 * v6);
        if (v3 != v6 || v17 >= v18 + 1) {
          *uint64_t v17 = *v18;
        }
        uint64_t v19 = *(void *)(a2 + 56);
        uint64_t v20 = type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
        uint64_t v21 = *(void *)(*(void *)(v20 - 8) + 72LL);
        int64_t v22 = v21 * v3;
        unint64_t v23 = v19 + v21 * v3;
        int64_t v24 = v21 * v6;
        uint64_t v25 = v19 + v21 * v6;
        unint64_t v26 = v25 + v21;
        if (v22 < v24 || v23 >= v26)
        {
          swift_arrayInitWithTakeFrontToBack(v23, v25, 1LL, v20);
        }

        else
        {
          int64_t v3 = v6;
          if (v22 == v24) {
            goto LABEL_6;
          }
          swift_arrayInitWithTakeBackToFront(v23);
        }

        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    BOOL v28 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v29 = *v28;
    uint64_t v30 = (-1LL << v3) - 1;
  }

  else
  {
    BOOL v28 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    uint64_t v30 = *v28;
    uint64_t v29 = (-1LL << a1) - 1;
  }

  *BOOL v28 = v30 & v29;
  uint64_t v31 = *(void *)(a2 + 16);
  BOOL v32 = __OFSUB__(v31, 1LL);
  uint64_t v33 = v31 - 1;
  if (v32)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = v33;
    ++*(_DWORD *)(a2 + 36);
  }

void sub_10049C088(char a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_100417D94(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_10049C6B4();
LABEL_7:
    uint64_t v18 = (void *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      *(_BYTE *)(v18[7] + v1sub_10040A648(v1 + 2) = a1 & 1;
      return;
    }

void sub_10049C1E0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_100417D94(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_10049C85C();
LABEL_7:
    uint64_t v18 = (void *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      uint64_t v19 = v18[7];

      *(void *)(v19 + 8 * v1sub_10040A648(v1 + 2) = a1;
      return;
    }

id sub_10049C33C(uint64_t a1, void *a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v7 = (void *)*v3;
  unint64_t v9 = sub_10049A934((uint64_t)a2);
  uint64_t v10 = v7[2];
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }

  else
  {
    char v13 = v8;
    uint64_t v14 = v7[3];
    if (v14 >= v12 && (a3 & 1) != 0)
    {
LABEL_7:
      uint64_t v15 = *v4;
      if ((v13 & 1) != 0)
      {
LABEL_8:
        uint64_t v16 = v15[7];
        uint64_t v17 = v16
            + *(void *)(*(void *)(type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL) - 8) + 72LL) * v9;
        return (id)sub_10049E458(a1, v17);
      }

      goto LABEL_11;
    }

    if (v14 >= v12 && (a3 & 1) == 0)
    {
      sub_10049CA0C();
      goto LABEL_7;
    }

    sub_10049B618(v12, a3 & 1);
    unint64_t v19 = sub_10049A934((uint64_t)a2);
    if ((v13 & 1) == (v20 & 1))
    {
      unint64_t v9 = v19;
      uint64_t v15 = *v4;
      if ((v13 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      sub_10049C470(v9, (uint64_t)a2, a1, v15);
      return a2;
    }
  }

  uint64_t v21 = sub_10041D3C4(0LL, (unint64_t *)&qword_1009BBE30, &OBJC_CLASS___IDSPushToken_ptr);
  id result = (id)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v21);
  __break(1u);
  return result;
}

uint64_t sub_10049C470(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t v7 = a4[7];
  uint64_t v8 = type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
  uint64_t result = sub_10049E2E4(a3, v7 + *(void *)(*(void *)(v8 - 8) + 72LL) * a1);
  uint64_t v10 = a4[2];
  BOOL v11 = __OFADD__(v10, 1LL);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    a4[2] = v12;
  }
  return result;
}

void *sub_10049C4F4()
{
  uint64_t v1 = v0;
  sub_1003F5CB4(&qword_1009BB7C8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v2);
    uint64_t *v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }

void sub_10049C6B4()
{
  uint64_t v1 = v0;
  sub_1003F5CB4(&qword_1009BB7A8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    uint64_t *v1 = v4;
    return;
  }

  uint64_t v5 = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }

id sub_10049C85C()
{
  uint64_t v1 = v0;
  sub_1003F5CB4(&qword_1009BB7B0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release(v2);
    uint64_t *v1 = v4;
    return result;
  }

  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

id sub_10049CA0C()
{
  uint64_t v1 = v0;
  uint64_t v27 = *(void *)(type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL) - 8);
  __chkstk_darwin(v2, v3);
  uint64_t v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1003F5CB4(&qword_1009BB7A0);
  uint64_t v6 = *v0;
  uint64_t v7 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    id result = (id)swift_release(v6);
LABEL_28:
    uint64_t *v1 = v8;
    return result;
  }

  unint64_t v26 = v1;
  id result = (id)(v7 + 64);
  uint64_t v10 = v6 + 64;
  unint64_t v11 = (unint64_t)((1LL << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  int64_t v13 = 0LL;
  *(void *)(v8 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v6 + 16);
  uint64_t v14 = 1LL << *(_BYTE *)(v6 + 32);
  uint64_t v15 = -1LL;
  if (v14 < 64) {
    uint64_t v15 = ~(-1LL << v14);
  }
  unint64_t v16 = v15 & *(void *)(v6 + 64);
  int64_t v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      unint64_t v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }

    int64_t v23 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v23 >= v17) {
      goto LABEL_26;
    }
    unint64_t v24 = *(void *)(v10 + 8 * v23);
    ++v13;
    if (!v24)
    {
      int64_t v13 = v23 + 1;
      if (v23 + 1 >= v17) {
        goto LABEL_26;
      }
      unint64_t v24 = *(void *)(v10 + 8 * v13);
      if (!v24) {
        break;
      }
    }

uint64_t sub_10049CC2C(uint64_t a1, __n128 a2, __n128 a3)
{
  uint64_t v4 = a1;
  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  unint64_t v7 = (1LL << v5) + 63;
  uint64_t v8 = v7 >> 6;
  size_t v9 = 8 * (v7 >> 6);
  if (v6 <= 0xD || (swift_stdlib_isStackAllocationSafe(8 * (v7 >> 6), 8LL) & 1) != 0)
  {
    __chkstk_darwin(a2, a3);
    bzero((char *)&v14 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0LL), v9);
    sub_10049CD7C((unint64_t *)((char *)&v14 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0LL)), v8, v4);
    if (v3) {
      swift_willThrow(v10);
    }
    else {
      return v10;
    }
  }

  else
  {
    unint64_t v11 = (void *)swift_slowAlloc(v9, -1LL);
    bzero(v11, v9);
    sub_10049CD7C((unint64_t *)v11, v8, v4);
    uint64_t v4 = v12;
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  return v4;
}

void sub_10049CD7C(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v24 = a2;
  int64_t v25 = a1;
  uint64_t v4 = *(void *)(type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL) - 8);
  __chkstk_darwin(v5, v6);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int64_t v9 = 0LL;
  uint64_t v10 = *(void *)(a3 + 64);
  uint64_t v26 = 0LL;
  uint64_t v27 = a3 + 64;
  uint64_t v11 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & v10;
  int64_t v28 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_5;
    }

    int64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_26;
    }

    if (v19 >= v28) {
      goto LABEL_24;
    }
    unint64_t v20 = *(void *)(v27 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v28) {
        goto LABEL_24;
      }
      unint64_t v20 = *(void *)(v27 + 8 * v9);
      if (!v20)
      {
        int64_t v9 = v19 + 2;
        if (v19 + 2 >= v28) {
          goto LABEL_24;
        }
        unint64_t v20 = *(void *)(v27 + 8 * v9);
        if (!v20) {
          break;
        }
      }
    }

Swift::Int sub_10049CFA8(unint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v46 = *(void *)(type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL) - 8);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12, v13);
  uint64_t v45 = (uint64_t)&v43 - v14;
  if (!a3) {
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }
  if (a4[2] == a3)
  {
    swift_retain(a4);
    return (Swift::Int)a4;
  }

  sub_1003F5CB4(&qword_1009BB7A0);
  Swift::Int result = static _DictionaryStorage.allocate(capacity:)(a3);
  Swift::Int v16 = result;
  int v43 = a1;
  uint64_t v44 = a2;
  if (a2 < 1) {
    unint64_t v17 = 0LL;
  }
  else {
    unint64_t v17 = *a1;
  }
  uint64_t v18 = 0LL;
  Swift::Int v19 = result + 64;
  while (1)
  {
    if (v17)
    {
      unint64_t v20 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v21 = v20 | (v18 << 6);
    }

    else
    {
      uint64_t v22 = v18 + 1;
      if (__OFADD__(v18, 1LL)) {
        goto LABEL_40;
      }
      if (v22 >= v44) {
        return v16;
      }
      unint64_t v23 = v43[v22];
      ++v18;
      if (!v23)
      {
        uint64_t v18 = v22 + 1;
        if (v22 + 1 >= v44) {
          return v16;
        }
        unint64_t v23 = v43[v18];
        if (!v23)
        {
          uint64_t v18 = v22 + 2;
          if (v22 + 2 >= v44) {
            return v16;
          }
          unint64_t v23 = v43[v18];
          if (!v23)
          {
            uint64_t v24 = v22 + 3;
            if (v24 >= v44) {
              return v16;
            }
            unint64_t v23 = v43[v24];
            if (!v23)
            {
              while (1)
              {
                uint64_t v18 = v24 + 1;
                if (__OFADD__(v24, 1LL)) {
                  goto LABEL_41;
                }
                if (v18 >= v44) {
                  return v16;
                }
                unint64_t v23 = v43[v18];
                ++v24;
                if (v23) {
                  goto LABEL_24;
                }
              }
            }

            uint64_t v18 = v24;
          }
        }
      }

id sub_10049D2B0(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v55 = a4;
  uint64_t v56 = a5;
  uint64_t v53 = a2;
  uint64_t v54 = a3;
  uint64_t v52 = a1;
  uint64_t v51 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v6 = *(void *)(v51 - 8);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v12, v13);
  unint64_t v15 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v16, v17);
  Swift::Int v19 = (char *)&v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v20 = v5;
  Logger.init(subsystem:category:)(0x6C7070612E6D6F63LL, 0xED00005344492E65LL, 0x6F6B636547LL, 0xE500000000000000LL);
  uint64_t v50 = OBJC_IVAR____TtC17identityservicesd29IDSGroupEncryptionController2_q;
  uint64_t v21 = sub_10041D3C4(0LL, (unint64_t *)&qword_1009B9830, &OBJC_CLASS___OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v21);
  v58[0] = _swiftEmptyArrayStorage;
  uint64_t v22 = sub_10040A2B0( &qword_1009B8E20,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v23 = sub_1003F5CB4((uint64_t *)&unk_1009B9840);
  uint64_t v24 = sub_1004021DC((unint64_t *)&qword_1009B8E28, (uint64_t *)&unk_1009B9840);
  dispatch thunk of SetAlgebra.init<A>(_:)(v58, v23, v24, v11, v22);
  (*(void (**)(char *, void, uint64_t))(v6 + 104))( v10,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v51);
  uint64_t v25 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000001DLL,  0x800000010071C2C0LL,  v19,  v15,  v10,  0LL);
  *(void *)&v20[v50] = v25;
  uint64_t v26 = OBJC_IVAR____TtC17identityservicesd29IDSGroupEncryptionController2_groupsLock;
  unint64_t v27 = sub_1004961CC((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v28 = sub_1004962E4((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v29 = sub_1003F5CB4(&qword_1009BB768);
  uint64_t v30 = swift_allocObject(v29, 36LL, 7LL);
  *(_DWORD *)(v30 + 3sub_10040A648(v1 + 2) = 0;
  *(void *)(v30 + swift_unknownObjectWeakDestroy(v0 + 16) = v27;
  *(void *)(v30 + 24) = v28;
  *(void *)&v20[v26] = v30;
  uint64_t v31 = OBJC_IVAR____TtC17identityservicesd29IDSGroupEncryptionController2_publicIdentitiesLock;
  unint64_t v32 = sub_1004963F4((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v33 = sub_1003F5CB4(&qword_1009BB770);
  uint64_t v34 = swift_allocObject(v33, 28LL, 7LL);
  *(_DWORD *)(v34 + 24) = 0;
  *(void *)(v34 + swift_unknownObjectWeakDestroy(v0 + 16) = v32;
  *(void *)&v20[v31] = v34;
  unint64_t v35 = &v20[OBJC_IVAR____TtC17identityservicesd29IDSGroupEncryptionController2_delegate];
  uint64_t v36 = swift_unknownObjectWeakInit( &v20[OBJC_IVAR____TtC17identityservicesd29IDSGroupEncryptionController2_delegate],  0LL);
  swift_beginAccess(v36, v58, 1LL, 0LL);
  swift_unknownObjectWeakAssign(v35, v52);
  char v38 = v53;
  uint64_t v37 = v54;
  *(void *)&v20[OBJC_IVAR____TtC17identityservicesd29IDSGroupEncryptionController2_config] = v53;
  *(void *)&v20[OBJC_IVAR____TtC17identityservicesd29IDSGroupEncryptionController2_sessionProvider] = v37;
  BOOL v40 = v55;
  uint64_t v39 = v56;
  *(void *)&v20[OBJC_IVAR____TtC17identityservicesd29IDSGroupEncryptionController2_identityController] = v55;
  *(void *)&v20[OBJC_IVAR____TtC17identityservicesd29IDSGroupEncryptionController2_pushHandler] = v39;
  uint64_t v41 = type metadata accessor for IDSGroupEncryptionDefaultCryptoHandler();
  id v42 = v38;
  swift_unknownObjectRetain(v37, v43);
  id v44 = v40;
  swift_unknownObjectRetain(v39, v45);
  id v46 = IDSDSessionKeyValueDelivery.__allocating_init()();
  uint64_t v47 = &v20[OBJC_IVAR____TtC17identityservicesd29IDSGroupEncryptionController2_cryptoHandler];
  *((void *)v47 + sub_10040A648(v1 + 3) = v41;
  *((void *)v47 + 4) = &off_100907B08;
  *(void *)uint64_t v47 = v46;

  os_log_type_t v48 = (objc_class *)type metadata accessor for IDSGroupEncryptionController2(0LL);
  v57.receiver = v20;
  v57.super_class = v48;
  return objc_msgSendSuper2(&v57, "init");
}

id sub_10049D638(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v57 = a6;
  uint64_t v58 = (void *)a5;
  uint64_t v55 = a3;
  uint64_t v56 = a4;
  uint64_t v53 = a1;
  uint64_t v54 = a2;
  uint64_t v52 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v7 = *(void *)(v52 - 8);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v13, v14);
  __n128 v16 = (char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v17, v18);
  unint64_t v20 = (char *)&v50 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = v6;
  Logger.init(subsystem:category:)(0x6C7070612E6D6F63LL, 0xED00005344492E65LL, 0x6F6B636547LL, 0xE500000000000000LL);
  uint64_t v51 = OBJC_IVAR____TtC17identityservicesd29IDSGroupEncryptionController2_q;
  uint64_t v22 = sub_10041D3C4(0LL, (unint64_t *)&qword_1009B9830, &OBJC_CLASS___OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v22);
  v60[0] = _swiftEmptyArrayStorage;
  uint64_t v23 = sub_10040A2B0( &qword_1009B8E20,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v24 = sub_1003F5CB4((uint64_t *)&unk_1009B9840);
  uint64_t v25 = sub_1004021DC((unint64_t *)&qword_1009B8E28, (uint64_t *)&unk_1009B9840);
  dispatch thunk of SetAlgebra.init<A>(_:)(v60, v24, v25, v12, v23);
  (*(void (**)(char *, void, uint64_t))(v7 + 104))( v11,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v52);
  uint64_t v26 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000001DLL,  0x800000010071C2C0LL,  v20,  v16,  v11,  0LL);
  *(void *)&v21[v51] = v26;
  uint64_t v27 = OBJC_IVAR____TtC17identityservicesd29IDSGroupEncryptionController2_groupsLock;
  unint64_t v28 = sub_1004961CC((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v29 = sub_1004962E4((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v30 = sub_1003F5CB4(&qword_1009BB768);
  uint64_t v31 = swift_allocObject(v30, 36LL, 7LL);
  *(_DWORD *)(v31 + 3sub_10040A648(v1 + 2) = 0;
  *(void *)(v31 + swift_unknownObjectWeakDestroy(v0 + 16) = v28;
  *(void *)(v31 + 24) = v29;
  *(void *)&v21[v27] = v31;
  uint64_t v32 = OBJC_IVAR____TtC17identityservicesd29IDSGroupEncryptionController2_publicIdentitiesLock;
  unint64_t v33 = sub_1004963F4((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v34 = sub_1003F5CB4(&qword_1009BB770);
  uint64_t v35 = swift_allocObject(v34, 28LL, 7LL);
  *(_DWORD *)(v35 + 24) = 0;
  *(void *)(v35 + swift_unknownObjectWeakDestroy(v0 + 16) = v33;
  *(void *)&v21[v32] = v35;
  uint64_t v36 = &v21[OBJC_IVAR____TtC17identityservicesd29IDSGroupEncryptionController2_delegate];
  uint64_t v37 = swift_unknownObjectWeakInit( &v21[OBJC_IVAR____TtC17identityservicesd29IDSGroupEncryptionController2_delegate],  0LL);
  swift_beginAccess(v37, v60, 1LL, 0LL);
  swift_unknownObjectWeakAssign(v36, v53);
  uint64_t v39 = v54;
  uint64_t v38 = v55;
  *(void *)&v21[OBJC_IVAR____TtC17identityservicesd29IDSGroupEncryptionController2_config] = v54;
  *(void *)&v21[OBJC_IVAR____TtC17identityservicesd29IDSGroupEncryptionController2_sessionProvider] = v38;
  uint64_t v41 = v56;
  uint64_t v40 = v57;
  *(void *)&v21[OBJC_IVAR____TtC17identityservicesd29IDSGroupEncryptionController2_identityController] = v56;
  *(void *)&v21[OBJC_IVAR____TtC17identityservicesd29IDSGroupEncryptionController2_pushHandler] = v40;
  id v42 = v58;
  sub_100401ACC( (uint64_t)v58,  (uint64_t)&v21[OBJC_IVAR____TtC17identityservicesd29IDSGroupEncryptionController2_cryptoHandler]);
  id v43 = v39;
  swift_unknownObjectRetain(v38, v44);
  id v45 = v41;
  swift_unknownObjectRetain(v40, v46);

  uint64_t v47 = (objc_class *)type metadata accessor for IDSGroupEncryptionController2(0LL);
  v59.receiver = v21;
  v59.super_class = v47;
  id v48 = objc_msgSendSuper2(&v59, "init");
  sub_10040A648(v42);
  return v48;
}

uint64_t sub_10049D9BC( uint64_t a1, unint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v50 = a8;
  uint64_t v57 = a6;
  uint64_t v46 = a5;
  unint64_t v47 = a2;
  id v48 = a3;
  uint64_t v45 = a1;
  uint64_t v53 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v56 = *(void *)(v53 - 8);
  __chkstk_darwin(v12, v13);
  uint64_t v52 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v54 = *(void *)(v15 - 8);
  uint64_t v55 = v15;
  __chkstk_darwin(v16, v17);
  uint64_t v49 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for Date(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(void *)(v20 + 64);
  __chkstk_darwin(v22, v23);
  uint64_t v24 = (char *)&v44 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v51 = *(void *)&v8[OBJC_IVAR____TtC17identityservicesd29IDSGroupEncryptionController2_q];
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v24, a7, v19);
  uint64_t v25 = *(unsigned __int8 *)(v20 + 80);
  uint64_t v26 = (v25 + 64) & ~v25;
  unint64_t v27 = (v21 + v26 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v28 = (v27 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v29 = (char *)swift_allocObject(&unk_1009073A8, v28 + 8, v25 | 7);
  uint64_t v30 = v46;
  *((void *)v29 + sub_10040A648(v1 + 2) = v8;
  *((void *)v29 + sub_10040A648(v1 + 3) = v30;
  *((void *)v29 + 4) = v57;
  *((void *)v29 + 5) = a4;
  *((void *)v29 + 6) = a1;
  unint64_t v31 = v47;
  *((void *)v29 + 7) = v47;
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(&v29[v26], v24, v19);
  uint64_t v32 = v48;
  *(void *)&v29[v27] = v48;
  *(void *)&v29[v28] = v50;
  aBlock[4] = sub_10049E3D8;
  uint64_t v60 = v29;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1003F8400;
  aBlock[3] = &unk_1009073C0;
  unint64_t v33 = _Block_copy(aBlock);
  uint64_t v34 = v8;
  swift_bridgeObjectRetain(v57);
  id v35 = a4;
  sub_1004028CC(v45, v31);
  id v36 = v32;
  uint64_t v37 = v49;
  static DispatchQoS.unspecified.getter(v36);
  uint64_t v58 = _swiftEmptyArrayStorage;
  uint64_t v38 = sub_10040A2B0( (unint64_t *)&unk_1009BAC40,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v39 = sub_1003F5CB4((uint64_t *)&unk_1009B9870);
  uint64_t v40 = sub_1004021DC((unint64_t *)&qword_1009BAC50, (uint64_t *)&unk_1009B9870);
  id v42 = v52;
  uint64_t v41 = v53;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v58, v39, v40, v53, v38);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v37, v42, v33);
  _Block_release(v33);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v42, v41);
  (*(void (**)(char *, uint64_t))(v54 + 8))(v37, v55);
  return swift_release(v60);
}

uint64_t sub_10049DC9C()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_10049DCC8()
{
  uint64_t v1 = v0[3];
  unint64_t v2 = v0[4];
  uint64_t v3 = *(void *)(v0[2] + OBJC_IVAR____TtC17identityservicesd29IDSGroupEncryptionController2_groupsLock);
  swift_retain(v3);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 32));
  uint64_t v4 = *(void *)(v3 + 24);
  if (*(void *)(v4 + 16))
  {
    swift_bridgeObjectRetain(v2);
    unint64_t v5 = sub_100417D94(v1, v2);
    if ((v6 & 1) != 0)
    {
      char v7 = *(_BYTE *)(*(void *)(v4 + 56) + v5);
      swift_bridgeObjectRelease(v2);
      if ((v7 & 1) != 0)
      {
        uint64_t v8 = *(void *)(v3 + 16);
        if (*(void *)(v8 + 16))
        {
          swift_bridgeObjectRetain(v2);
          unint64_t v9 = sub_100417D94(v1, v2);
          if ((v10 & 1) != 0)
          {
            uint64_t v11 = *(id *)(*(void *)(v8 + 56) + 8 * v9);
            swift_bridgeObjectRelease(v2);
            (*(void (**)(uint64_t, unint64_t))((swift_isaMask & *v11) + 0x3B8LL))(v1, v2);
          }

          else
          {
            swift_bridgeObjectRelease(v2);
          }
        }

        swift_bridgeObjectRetain(v2);
        uint64_t v18 = (void *)sub_10049AB48(v1, v2);
        swift_bridgeObjectRelease(v2);

        swift_bridgeObjectRetain(v2);
        sub_10049AA7C(v1, v2);
        swift_bridgeObjectRelease(v2);
        uint64_t v19 = swift_bridgeObjectRetain_n(v2, 2LL);
        __n128 v13 = (os_log_s *)Logger.logObject.getter(v19);
        os_log_type_t v14 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v13, v14))
        {
          uint64_t v15 = swift_slowAlloc(22LL, -1LL);
          uint64_t v16 = swift_slowAlloc(64LL, -1LL);
          uint64_t v22 = v16;
          *(_DWORD *)uint64_t v15 = 136315394;
          uint64_t v21 = sub_1003FFBB0(0xD00000000000001ALL, 0x8000000100842230LL, &v22);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v15 + 4, v15 + 12);
          *(_WORD *)(v15 + 1sub_10040A648(v1 + 2) = 2080;
          swift_bridgeObjectRetain(v2);
          uint64_t v21 = sub_1003FFBB0(v1, v2, &v22);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v15 + 14, v15 + 22);
          swift_bridgeObjectRelease_n(v2, 3LL);
          __n128 v17 = "%s: cleaned up for group %s.";
          goto LABEL_10;
        }

uint64_t sub_10049E0B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_10040A648(v1 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10049E0C0(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t type metadata accessor for IDSGroupEncryptionController2(uint64_t a1)
{
  uint64_t result = qword_1009C5AC0;
  if (!qword_1009C5AC0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for IDSGroupEncryptionController2);
  }
  return result;
}

uint64_t sub_10049E104()
{
  return type metadata accessor for IDSGroupEncryptionController2(0LL);
}

uint64_t sub_10049E10C(uint64_t a1)
{
  uint64_t result = type metadata accessor for Logger(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    void v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
    void v4[4] = &unk_10071C328;
    void v4[5] = (char *)&value witness table for Builtin.UnknownObject + 64;
    void v4[6] = (char *)&value witness table for Builtin.UnknownObject + 64;
    void v4[7] = &unk_10071C340;
    void v4[8] = &unk_10071C340;
    void v4[9] = &unk_10071C358;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 10LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t destroy for IDSGroupEncryptionController2.GroupsLock(void *a1)
{
  return swift_bridgeObjectRelease(a1[1]);
}

uint64_t *_s17identityservicesd29IDSGroupEncryptionController2C10GroupsLockVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t *assignWithCopy for IDSGroupEncryptionController2.GroupsLock(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

void *assignWithTake for IDSGroupEncryptionController2.GroupsLock(void *a1, _OWORD *a2)
{
  uint64_t v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease(v4);
  return a1;
}

ValueMetadata *type metadata accessor for IDSGroupEncryptionController2.GroupsLock()
{
  return &type metadata for IDSGroupEncryptionController2.GroupsLock;
}

ValueMetadata *type metadata accessor for IDSGroupEncryptionController2.PublicIdentityState()
{
  return &type metadata for IDSGroupEncryptionController2.PublicIdentityState;
}

uint64_t sub_10049E2D0@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_1004997C0(a1, *(void **)(v2 + 16), a2);
}

uint64_t sub_10049E2D8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_1004981A8(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(char **)(v2 + 32), a2);
}

uint64_t sub_10049E2E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10049E328()
{
  uint64_t v1 = type metadata accessor for Date(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 64) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;

  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  sub_100402A84(*(void *)(v0 + 48), *(void *)(v0 + 56));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return swift_deallocObject(v0, ((v6 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8, v5);
}

void sub_10049E3D8()
{
  uint64_t v1 = *(void *)(type metadata accessor for Date(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 64LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  sub_1004988EC( *(void **)(v0 + 16),  *(void *)(v0 + 24),  *(void **)(v0 + 32),  *(void **)(v0 + 40),  *(void *)(v0 + 48),  *(void *)(v0 + 56),  v0 + v2,  *(os_log_s **)(v0 + v3),  *(void *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFF8LL)));
}

void sub_10049E440(void *a1, char a2)
{
  if ((a2 & 1) != 0) {
    swift_errorRelease(a1);
  }
  else {
}
  }

id sub_10049E44C(void *a1, char a2)
{
  if ((a2 & 1) != 0) {
    return (id)swift_errorRetain(a1);
  }
  else {
    return a1;
  }
}

uint64_t sub_10049E458(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10049E49C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1003F5CB4(&qword_1009BB7B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10049E4E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1003F5CB4(&qword_1009BB7D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10049E580()
{
  return sub_1004AC400(&OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_lock);
}

uint64_t sub_10049E58C(uint64_t a1)
{
  return sub_1004AC458( a1,  &OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_lock,  (uint64_t (*)(uint64_t))&_swift_release);
}

uint64_t (*sub_10049E5A0(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_10049E5E4()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_delegate;
  swift_beginAccess(v0 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_delegate, v3, 0LL, 0LL);
  return swift_unknownObjectWeakLoadStrong(v1);
}

uint64_t sub_10049E630(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_delegate;
  swift_beginAccess(v5, v8, 1LL, 0LL);
  *(void *)(v5 + 8) = a2;
  swift_unknownObjectWeakAssign(v5, a1);
  return swift_unknownObjectRelease(a1, v6);
}

void (*sub_10049E698(void *a1))(uint64_t a1, char a2)
{
  unint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_delegate;
  void v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess(v1 + v4, v3, 33LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = Strong;
  v3[4] = v7;
  return sub_100412358;
}

unint64_t sub_10049E71C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_1003F5CB4(&qword_1009BB820);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  uint64_t v6 = (void **)(a1 + 48);
  while (1)
  {
    uint64_t v7 = (uint64_t)*(v6 - 2);
    uint64_t v8 = (uint64_t)*(v6 - 1);
    unint64_t v9 = *v6;
    swift_bridgeObjectRetain(v8);
    id v10 = v9;
    unint64_t result = sub_100417D94(v7, v8);
    if ((v12 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    __n128 v13 = (uint64_t *)(v4[6] + 16 * result);
    *__n128 v13 = v7;
    v13[1] = v8;
    *(void *)(v4[7] + 8 * result) = v10;
    uint64_t v14 = v4[2];
    BOOL v15 = __OFADD__(v14, 1LL);
    uint64_t v16 = v14 + 1;
    if (v15) {
      goto LABEL_11;
    }
    void v4[2] = v16;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10049E834(uint64_t a1, uint64_t *a2, uint64_t (*a3)(id))
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
    uint64_t v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_1003F5CB4(a2);
  uint64_t v6 = static _DictionaryStorage.allocate(capacity:)(v4);
  uint64_t v7 = (void *)v6;
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v7;
  }

  swift_retain(v6);
  unint64_t v9 = (void **)(a1 + 40);
  while (1)
  {
    id v10 = *v9;
    id v11 = *(v9 - 1);
    id v12 = v10;
    unint64_t result = a3(v11);
    if ((v14 & 1) != 0) {
      break;
    }
    *(void *)((char *)v7 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v15 = 8 * result;
    *(void *)(v7[6] + v15) = v11;
    *(void *)(v7[7] + v15) = v12;
    uint64_t v16 = v7[2];
    BOOL v17 = __OFADD__(v16, 1LL);
    uint64_t v18 = v16 + 1;
    if (v17) {
      goto LABEL_11;
    }
    v7[2] = v18;
    v9 += 2;
    if (!--v8)
    {
      swift_release(v7);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10049E944()
{
  uint64_t v1 = (void *)(v0 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_sessionsByID);
  swift_beginAccess( v0 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_sessionsByID,  v3,  0LL,  0LL);
  return swift_bridgeObjectRetain(*v1);
}

uint64_t sub_10049E98C(uint64_t a1)
{
  return sub_1004AC458( a1,  &OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_sessionsByID,  (uint64_t (*)(uint64_t))&_swift_bridgeObjectRelease);
}

uint64_t (*sub_10049E9A0(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_10049E9E4()
{
  return sub_1004AC400(&OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_participantsLock);
}

uint64_t sub_10049E9F0(uint64_t a1)
{
  return sub_1004AC458( a1,  &OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_participantsLock,  (uint64_t (*)(uint64_t))&_swift_release);
}

uint64_t (*sub_10049EA04(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_10049EA8C()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_preKeyAckCount;
  swift_beginAccess( v0 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_preKeyAckCount,  v3,  0LL,  0LL);
  return *(void *)v1;
}

uint64_t sub_10049EB18(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_preKeyAckCount);
  uint64_t result = swift_beginAccess(v3, v5, 1LL, 0LL);
  void *v3 = a1;
  return result;
}

uint64_t (*sub_10049EB60(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_10049EBE8()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_localParticipantID;
  swift_beginAccess( v0 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_localParticipantID,  v3,  0LL,  0LL);
  return *(void *)v1;
}

void sub_10049EC90(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_localParticipantID);
  swift_beginAccess( v1 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_localParticipantID,  v4,  1LL,  0LL);
  void *v3 = a1;
  sub_10049ECE4();
}

void sub_10049ECE4()
{
  uint64_t v1 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x140LL))();
  uint64_t v2 = v1;
  uint64_t v3 = v1 + 64;
  uint64_t v4 = 1LL << *(_BYTE *)(v1 + 32);
  uint64_t v5 = -1LL;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  unint64_t v6 = v5 & *(void *)(v1 + 64);
  uint64_t v7 = (void *)((char *)v0 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_localParticipantID);
  swift_beginAccess( (char *)v0 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_localParticipantID,  v19,  0LL,  0LL);
  int64_t v8 = 0LL;
  int64_t v9 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      unint64_t v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v11 = v10 | (v8 << 6);
      goto LABEL_5;
    }

    int64_t v16 = v8 + 1;
    if (__OFADD__(v8, 1LL))
    {
      __break(1u);
      goto LABEL_23;
    }

    if (v16 >= v9) {
      goto LABEL_21;
    }
    unint64_t v17 = *(void *)(v3 + 8 * v16);
    ++v8;
    if (!v17)
    {
      int64_t v8 = v16 + 1;
      if (v16 + 1 >= v9) {
        goto LABEL_21;
      }
      unint64_t v17 = *(void *)(v3 + 8 * v8);
      if (!v17)
      {
        int64_t v8 = v16 + 2;
        if (v16 + 2 >= v9) {
          goto LABEL_21;
        }
        unint64_t v17 = *(void *)(v3 + 8 * v8);
        if (!v17) {
          break;
        }
      }
    }

void (*sub_10049EE8C(uint64_t a1))(uint64_t a1, char a2)
{
  *(void *)(a1 + 24) = v1;
  swift_beginAccess( v1 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_localParticipantID,  a1,  33LL,  0LL);
  return sub_10049EED4;
}

void sub_10049EED4(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    sub_10049ECE4();
  }
}

void *sub_10049EF4C()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_endpointSubscription);
  swift_beginAccess( v0 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_endpointSubscription,  v5,  0LL,  0LL);
  uint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

void sub_10049EFF4(void *a1)
{
  id v3 = (void **)(v1 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_endpointSubscription);
  swift_beginAccess(v3, v5, 1LL, 0LL);
  uint64_t v4 = *v3;
  void *v3 = a1;
}

uint64_t (*sub_10049F044(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_10049F0CC()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_encryptionSequenceNumber;
  swift_beginAccess( v0 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_encryptionSequenceNumber,  v3,  0LL,  0LL);
  return *(void *)v1;
}

uint64_t sub_10049F158(uint64_t a1)
{
  id v3 = (void *)(v1 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_encryptionSequenceNumber);
  uint64_t result = swift_beginAccess(v3, v5, 1LL, 0LL);
  void *v3 = a1;
  return result;
}

uint64_t (*sub_10049F1A0(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_10049F1E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_needsKMCacheResetAfter;
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return sub_100410FD0(v3, a1, &qword_1009BC130);
}

uint64_t sub_10049F23C(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_needsKMCacheResetAfter;
  swift_beginAccess(v3, v5, 33LL, 0LL);
  sub_1004B10D4(a1, v3);
  return swift_endAccess(v5);
}

uint64_t (*sub_10049F294(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_10049F3D4()
{
  return sub_10049F95C((void (*)(uint64_t *__return_ptr))sub_1004B111C);
}

void sub_10049F3E0(uint64_t a1)
{
  int64_t v1 = a1;
  unint64_t v2 = a1 & 0xC000000000000001LL;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 >= 0) {
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    uint64_t v3 = __CocoaDictionary.count.getter(a1);
  }

  else
  {
    uint64_t v3 = *(void *)(a1 + 16);
  }

  uint64_t v4 = type metadata accessor for IDSGroupEncryptionControllerMember();
  uint64_t v5 = sub_10040A2B0( (unint64_t *)&qword_1009B8E30,  (uint64_t (*)(uint64_t))type metadata accessor for IDSGroupEncryptionControllerMember,  (uint64_t)&protocol conformance descriptor for NSObject);
  uint64_t v27 = v4;
  v30[1] = (id)Set.init(minimumCapacity:)(v3, v4, v5);
  if (v2)
  {
    if (v1 < 0) {
      uint64_t v6 = v1;
    }
    else {
      uint64_t v6 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v7 = __CocoaDictionary.makeIterator()(v6);
    int64_t v28 = 0LL;
    uint64_t v8 = 0LL;
    unint64_t v9 = 0LL;
    int64_t v1 = v7 | 0x8000000000000000LL;
  }

  else
  {
    uint64_t v10 = -1LL << *(_BYTE *)(v1 + 32);
    int64_t v28 = v1 + 64;
    uint64_t v8 = ~v10;
    uint64_t v11 = -v10;
    if (v11 < 64) {
      uint64_t v12 = ~(-1LL << v11);
    }
    else {
      uint64_t v12 = -1LL;
    }
    unint64_t v9 = v12 & *(void *)(v1 + 64);
  }

  uint64_t v13 = 0LL;
  int64_t v14 = (unint64_t)(v8 + 64) >> 6;
  while (v1 < 0)
  {
    uint64_t v22 = __CocoaDictionary.Iterator.next()();
    if (!v22) {
      goto LABEL_40;
    }
    uint64_t v24 = v23;
    swift_unknownObjectRelease(v22, v23);
    uint64_t v29 = v24;
    swift_unknownObjectRetain(v24, v25);
    swift_dynamicCast(v30, &v29, (char *)&type metadata for Swift.AnyObject + 8, v27, 7LL);
    id v18 = v30[0];
    swift_unknownObjectRelease(v24, v26);
    if (!v18) {
      goto LABEL_40;
    }
    uint64_t v15 = v9;
    uint64_t v17 = v13;
LABEL_18:
    sub_1004ADAA8( (Swift::Int *)v30,  v18,  (uint64_t (*)(void))type metadata accessor for IDSGroupEncryptionControllerMember,  &qword_1009B9100);

    uint64_t v13 = v17;
    unint64_t v9 = v15;
  }

  if (v9)
  {
    uint64_t v15 = (v9 - 1) & v9;
    unint64_t v16 = __clz(__rbit64(v9)) | (v13 << 6);
    uint64_t v17 = v13;
LABEL_17:
    id v18 = *(id *)(*(void *)(v1 + 56) + 8 * v16);
    if (!v18) {
      goto LABEL_40;
    }
    goto LABEL_18;
  }

  int64_t v19 = v13 + 1;
  if (!__OFADD__(v13, 1LL))
  {
    if (v19 >= v14) {
      goto LABEL_40;
    }
    unint64_t v20 = *(void *)(v28 + 8 * v19);
    uint64_t v17 = v13 + 1;
    if (!v20)
    {
      uint64_t v17 = v13 + 2;
      if (v13 + 2 >= v14) {
        goto LABEL_40;
      }
      unint64_t v20 = *(void *)(v28 + 8 * v17);
      if (!v20)
      {
        uint64_t v17 = v13 + 3;
        if (v13 + 3 >= v14) {
          goto LABEL_40;
        }
        unint64_t v20 = *(void *)(v28 + 8 * v17);
        if (!v20)
        {
          uint64_t v17 = v13 + 4;
          if (v13 + 4 >= v14) {
            goto LABEL_40;
          }
          unint64_t v20 = *(void *)(v28 + 8 * v17);
          if (!v20)
          {
            uint64_t v17 = v13 + 5;
            if (v13 + 5 >= v14) {
              goto LABEL_40;
            }
            unint64_t v20 = *(void *)(v28 + 8 * v17);
            if (!v20)
            {
              uint64_t v21 = v13 + 6;
              while (v14 != v21)
              {
                unint64_t v20 = *(void *)(v28 + 8 * v21++);
                if (v20)
                {
                  uint64_t v17 = v21 - 1;
                  goto LABEL_36;
                }
              }

void sub_10049F6A4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = type metadata accessor for IDSGroupEncryptionControllerParticipant(0LL);
  uint64_t v4 = sub_10040A2B0( (unint64_t *)&unk_1009B97C0,  type metadata accessor for IDSGroupEncryptionControllerParticipant,  (uint64_t)&protocol conformance descriptor for NSObject);
  int64_t v5 = 0LL;
  v16[1] = (id)Set.init(minimumCapacity:)(v2, v3, v4);
  uint64_t v6 = a1 + 64;
  uint64_t v7 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v8 = -1LL;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  unint64_t v9 = v8 & *(void *)(a1 + 64);
  int64_t v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      unint64_t v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v12 = v11 | (v5 << 6);
      goto LABEL_5;
    }

    int64_t v13 = v5 + 1;
    if (__OFADD__(v5, 1LL))
    {
      __break(1u);
      goto LABEL_25;
    }

    if (v13 >= v10) {
      goto LABEL_23;
    }
    unint64_t v14 = *(void *)(v6 + 8 * v13);
    ++v5;
    if (!v14)
    {
      int64_t v5 = v13 + 1;
      if (v13 + 1 >= v10) {
        goto LABEL_23;
      }
      unint64_t v14 = *(void *)(v6 + 8 * v5);
      if (!v14)
      {
        int64_t v5 = v13 + 2;
        if (v13 + 2 >= v10) {
          goto LABEL_23;
        }
        unint64_t v14 = *(void *)(v6 + 8 * v5);
        if (!v14)
        {
          int64_t v5 = v13 + 3;
          if (v13 + 3 >= v10) {
            goto LABEL_23;
          }
          unint64_t v14 = *(void *)(v6 + 8 * v5);
          if (!v14) {
            break;
          }
        }
      }
    }

uint64_t sub_10049F950()
{
  return sub_10049F95C((void (*)(uint64_t *__return_ptr))sub_1004B113C);
}

uint64_t sub_10049F95C(void (*a1)(uint64_t *__return_ptr))
{
  uint64_t v3 = (os_unfair_lock_s *)(*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x110LL))();
  os_unfair_lock_lock(v3 + 4);
  a1(&v6);
  uint64_t v4 = v6;
  os_unfair_lock_unlock(v3 + 4);
  swift_release(v3);
  return v4;
}

uint64_t sub_10049F9DC@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t *a3@<X8>)
{
  int64_t v5 = (void *)(a1 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_membersByURI);
  swift_beginAccess( a1 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_membersByURI,  v8,  0LL,  0LL);
  uint64_t v6 = swift_bridgeObjectRetain(*v5);
  uint64_t result = a2(v6);
  *a3 = result;
  return result;
}

void sub_10049FA48()
{
  int64_t v1 = (os_unfair_lock_s *)(*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x158LL))();
  os_unfair_lock_lock(v1 + 4);
  sub_1004B23EC(&OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_participantsByID, &v3);
  uint64_t v2 = v3;
  os_unfair_lock_unlock(v1 + 4);
  swift_release(v1);
  sub_10049F6A4(v2);
}

Swift::Int sub_10049FAD8()
{
  uint64_t v1 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x258LL))();
  if ((v1 & 0xC000000000000001LL) == 0) {
    return sub_1004AE860(v1, (uint64_t (*)(char *, unint64_t, uint64_t))sub_1004AE9C8, v2, v3);
  }
  uint64_t v4 = &_swiftEmptySetSingleton;
  uint64_t v30 = &_swiftEmptySetSingleton;
  if (v1 >= 0) {
    v1 &= 0xFFFFFFFFFFFFFF8uLL;
  }
  uint64_t v5 = __CocoaSet.makeIterator()(v1);
  uint64_t v6 = __CocoaSet.Iterator.next()(v5);
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = type metadata accessor for IDSGroupEncryptionControllerParticipant(0LL);
    do
    {
      uint64_t v28 = v7;
      uint64_t v10 = swift_dynamicCast(&v29, &v28, (char *)&type metadata for Swift.AnyObject + 8, v8, 7LL);
      unint64_t v11 = v29;
      char v12 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v29) + 0xB8LL))(v10);
      if (sub_10040DC6C(v12 & 1, 1)
        || (int64_t v13 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v11) + 0xB0LL))()) == 0LL
        || (unint64_t v14 = v13,
            char v15 = (*(uint64_t (**)(void))((swift_isaMask & *v13) + 0x80LL))(),
            v14,
            (v15 & 1) != 0))
      {
      }

      else
      {
        unint64_t v16 = v29;
        uint64_t v17 = v30;
        unint64_t v18 = v30[2];
        if (v30[3] <= v18)
        {
          sub_100435E38(v18 + 1, (uint64_t *)&unk_1009B97D0);
          uint64_t v17 = v30;
        }

        Swift::Int result = NSObject._rawHashValue(seed:)(v17[5]);
        int64_t v19 = v17 + 7;
        uint64_t v20 = -1LL << *((_BYTE *)v17 + 32);
        unint64_t v21 = result & ~v20;
        unint64_t v22 = v21 >> 6;
        if (((-1LL << v21) & ~v17[(v21 >> 6) + 7]) != 0)
        {
          unint64_t v23 = __clz(__rbit64((-1LL << v21) & ~v17[(v21 >> 6) + 7])) | v21 & 0x7FFFFFFFFFFFFFC0LL;
        }

        else
        {
          char v24 = 0;
          unint64_t v25 = (unint64_t)(63 - v20) >> 6;
          do
          {
            if (++v22 == v25 && (v24 & 1) != 0)
            {
              __break(1u);
              return result;
            }

            BOOL v26 = v22 == v25;
            if (v22 == v25) {
              unint64_t v22 = 0LL;
            }
            v24 |= v26;
            uint64_t v27 = v19[v22];
          }

          while (v27 == -1);
          unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
        }

        *(void *)((char *)v19 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v23;
        *(void *)(v17[6] + 8 * v2sub_10040A648(v1 + 3) = v16;
        ++v17[2];
      }

      uint64_t v7 = __CocoaSet.Iterator.next()(result);
    }

    while (v7);
    uint64_t v4 = v30;
  }

  swift_release(v5);
  return (Swift::Int)v4;
}

Class sub_10049FD54(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  id v4 = a1;
  uint64_t v5 = a3();

  type metadata accessor for IDSGroupEncryptionControllerParticipant(0LL);
  sub_10040A2B0( (unint64_t *)&unk_1009B97C0,  type metadata accessor for IDSGroupEncryptionControllerParticipant,  (uint64_t)&protocol conformance descriptor for NSObject);
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v5);
  return isa;
}

Swift::Int sub_10049FDCC()
{
  uint64_t v1 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x258LL))();
  if ((v1 & 0xC000000000000001LL) == 0) {
    return sub_1004AE860(v1, (uint64_t (*)(char *, unint64_t, uint64_t))sub_1004AEBFC, v2, v3);
  }
  id v4 = &_swiftEmptySetSingleton;
  uint64_t v30 = &_swiftEmptySetSingleton;
  if (v1 >= 0) {
    v1 &= 0xFFFFFFFFFFFFFF8uLL;
  }
  uint64_t v5 = __CocoaSet.makeIterator()(v1);
  uint64_t v6 = __CocoaSet.Iterator.next()(v5);
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = type metadata accessor for IDSGroupEncryptionControllerParticipant(0LL);
    do
    {
      uint64_t v28 = v7;
      uint64_t v10 = swift_dynamicCast(&v29, &v28, (char *)&type metadata for Swift.AnyObject + 8, v8, 7LL);
      unint64_t v11 = v29;
      char v12 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v29) + 0xB8LL))(v10);
      if (sub_10040DC6C(v12 & 1, 1)
        || (int64_t v13 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v11) + 0xB0LL))()) != 0LL
        && (unint64_t v14 = v13,
            char v15 = (*(uint64_t (**)(void))((swift_isaMask & *v13) + 0x80LL))(),
            v14,
            (v15 & 1) != 0))
      {
        unint64_t v16 = v29;
        uint64_t v17 = v30;
        unint64_t v18 = v30[2];
        if (v30[3] <= v18)
        {
          sub_100435E38(v18 + 1, (uint64_t *)&unk_1009B97D0);
          uint64_t v17 = v30;
        }

        Swift::Int result = NSObject._rawHashValue(seed:)(v17[5]);
        int64_t v19 = v17 + 7;
        uint64_t v20 = -1LL << *((_BYTE *)v17 + 32);
        unint64_t v21 = result & ~v20;
        unint64_t v22 = v21 >> 6;
        if (((-1LL << v21) & ~v17[(v21 >> 6) + 7]) != 0)
        {
          unint64_t v23 = __clz(__rbit64((-1LL << v21) & ~v17[(v21 >> 6) + 7])) | v21 & 0x7FFFFFFFFFFFFFC0LL;
        }

        else
        {
          char v24 = 0;
          unint64_t v25 = (unint64_t)(63 - v20) >> 6;
          do
          {
            if (++v22 == v25 && (v24 & 1) != 0)
            {
              __break(1u);
              return result;
            }

            BOOL v26 = v22 == v25;
            if (v22 == v25) {
              unint64_t v22 = 0LL;
            }
            v24 |= v26;
            uint64_t v27 = v19[v22];
          }

          while (v27 == -1);
          unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
        }

        *(void *)((char *)v19 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v23;
        *(void *)(v17[6] + 8 * v2sub_10040A648(v1 + 3) = v16;
        ++v17[2];
      }

      else
      {
      }

      uint64_t v7 = __CocoaSet.Iterator.next()(result);
    }

    while (v7);
    id v4 = v30;
  }

  swift_release(v5);
  return (Swift::Int)v4;
}

uint64_t sub_1004A0048()
{
  uint64_t v1 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x258LL))();
  uint64_t v2 = v1;
  unint64_t v3 = v1 & 0xC000000000000001LL;
  if ((v1 & 0xC000000000000001LL) == 0)
  {
LABEL_8:
    uint64_t v6 = *(void *)(v2 + 16);
    if (v6)
    {
      uint64_t v37 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v6);
      uint64_t v34 = sub_1004382EC(v2);
      uint64_t v35 = v8;
      char v36 = v9 & 1;
      goto LABEL_10;
    }

Class sub_1004A02DC(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  id v4 = a1;
  uint64_t v5 = a3();

  sub_10041D3C4(0LL, (unint64_t *)&qword_1009BBE30, &OBJC_CLASS___IDSPushToken_ptr);
  sub_100438928( (unint64_t *)&qword_1009BC4C0,  (unint64_t *)&qword_1009BBE30,  &OBJC_CLASS___IDSPushToken_ptr);
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v5);
  return isa;
}

uint64_t sub_1004A036C()
{
  uint64_t v1 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x260LL))();
  uint64_t v2 = v1;
  unint64_t v3 = v1 & 0xC000000000000001LL;
  if ((v1 & 0xC000000000000001LL) == 0)
  {
LABEL_8:
    uint64_t v6 = *(void *)(v2 + 16);
    if (v6)
    {
      uint64_t v37 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v6);
      uint64_t v34 = sub_1004382EC(v2);
      uint64_t v35 = v8;
      char v36 = v9 & 1;
      goto LABEL_10;
    }

uint64_t sub_1004A0600()
{
  uint64_t v1 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x268LL))();
  uint64_t v2 = v1;
  unint64_t v3 = v1 & 0xC000000000000001LL;
  if ((v1 & 0xC000000000000001LL) == 0)
  {
LABEL_8:
    uint64_t v6 = *(void *)(v2 + 16);
    if (v6)
    {
      uint64_t v37 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v6);
      uint64_t v34 = sub_1004382EC(v2);
      uint64_t v35 = v8;
      char v36 = v9 & 1;
      goto LABEL_10;
    }

id sub_1004A08B8()
{
  return sub_1004A0900(&OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_mkmController);
}

id sub_1004A08F4()
{
  return sub_1004A0900(&OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_skmController);
}

id sub_1004A0900(void *a1)
{
  uint64_t v5 = __chkstk_darwin(v3, v4);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v1) + 0x140LL))(v5);
  uint64_t v9 = v8;
  char v10 = *(_BYTE *)(v8 + 32);
  uint64_t v11 = 1LL << v10;
  uint64_t v12 = -1LL;
  if (1LL << v10 < 64) {
    uint64_t v12 = ~(-1LL << (1LL << v10));
  }
  unint64_t v13 = v12 & *(void *)(v8 + 64);
  if (v13)
  {
    unint64_t v14 = __clz(__rbit64(v13));
    goto LABEL_5;
  }

  unsigned int v20 = v10 & 0x3F;
  if (v20 <= 6) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v8 + 72);
  if (!v21)
  {
    if (v20 >= 8)
    {
      unint64_t v21 = *(void *)(v8 + 80);
      if (v21)
      {
        uint64_t v22 = 128LL;
        goto LABEL_11;
      }

      unint64_t v21 = *(void *)(v8 + 88);
      if (v21)
      {
        uint64_t v22 = 192LL;
        goto LABEL_11;
      }

      if (v20 > 8)
      {
        unint64_t v21 = *(void *)(v8 + 96);
        if (v21)
        {
          uint64_t v22 = 256LL;
          goto LABEL_11;
        }

        uint64_t v23 = 0LL;
        unint64_t v24 = (unint64_t)(v11 + 63) >> 6;
        if (v24 <= 5) {
          unint64_t v24 = 5LL;
        }
        uint64_t v25 = 8 * v24 - 40;
        uint64_t v22 = 256LL;
        while (v25 != v23)
        {
          unint64_t v21 = *(void *)(v8 + v23 + 104);
          v23 += 8LL;
          v22 += 64LL;
          if (v21) {
            goto LABEL_11;
          }
        }
      }
    }

id sub_1004A0B18( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, uint64_t a7, void *a8, uint64_t a9)
{
  id v18 = objc_allocWithZone(v9);
  id v19 = sub_1004B115C(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  swift_unknownObjectRelease(a1, v20);

  swift_unknownObjectRelease(a7, v21);
  swift_unknownObjectRelease(a9, v22);
  return v19;
}

id sub_1004A0BD8(uint64_t a1)
{
  uint64_t v2 = v1;
  __n128 v3 = (os_log_s *)Logger.logObject.getter(a1);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v6 = swift_slowAlloc(32LL, -1LL);
    uint64_t v10 = v6;
    *(_DWORD *)uint64_t v5 = 136315138;
    uint64_t v9 = sub_1003FFBB0(0x74696E696564LL, 0xE600000000000000LL, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v9, &v10, v5 + 4, v5 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%s: deinit group", v5, 0xCu);
    swift_arrayDestroy(v6, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1LL, -1LL);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v7 = (objc_class *)type metadata accessor for IDSGroupEncryptionControllerGroup(0LL);
  v11.receiver = v2;
  v11.super_class = v7;
  return objc_msgSendSuper2(&v11, "dealloc");
}

uint64_t sub_1004A0EDC()
{
  uint64_t v1 = (os_unfair_lock_s *)(*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x110LL))();
  os_unfair_lock_lock(v1 + 4);
  unint64_t v2 = sub_10049E834((uint64_t)_swiftEmptyArrayStorage, &qword_1009BB848, (uint64_t (*)(id))sub_100433024);
  __n128 v3 = (void *)((char *)v0 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_membersByURI);
  swift_beginAccess( (char *)v0 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_membersByURI,  v6,  1LL,  0LL);
  unint64_t v4 = *v3;
  unint64_t *v3 = v2;
  swift_bridgeObjectRelease(v4);
  os_unfair_lock_unlock(v1 + 4);
  swift_release(v1);
  (*(void (**)(void))((swift_isaMask & *v0) + 0x208LL))(0LL);
  return (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x310LL))();
}

uint64_t sub_1004A0FF0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void))((swift_isaMask & *v1) + 0x2B0LL))(a1, 0LL);
}

void sub_1004A10C0(uint64_t a1, uint64_t a2)
{
  id v4 = v2;
  swift_bridgeObjectRetain_n(a1, 2LL);
  uint64_t v5 = v4;
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.default.getter();
  uint64_t v8 = &off_100717000;
  uint64_t v197 = v5;
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v9 = swift_slowAlloc(32LL, -1LL);
    uint64_t v10 = swift_slowAlloc(96LL, -1LL);
    v201[0] = v10;
    *(_DWORD *)uint64_t v9 = 136315650;
    uint64_t v199 = sub_1003FFBB0(0xD00000000000002ELL, 0x80000001008426D0LL, v201);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v199, v200, v9 + 4, v9 + 12);
    *(_WORD *)(v9 + 1sub_10040A648(v1 + 2) = 2080;
    uint64_t v11 = *(void *)((char *)v5 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_id);
    unint64_t v12 = *(void *)((char *)v5 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_id + 8);
    swift_bridgeObjectRetain(v12);
    uint64_t v199 = sub_1003FFBB0(v11, v12, v201);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v199, v200, v9 + 14, v9 + 22);
    swift_bridgeObjectRelease(v12);

    *(_WORD *)(v9 + 2sub_10040A648(v1 + 2) = 2080;
    uint64_t v13 = sub_10041D3C4(0LL, (unint64_t *)&unk_1009BC270, &OBJC_CLASS___IDSURI_ptr);
    uint64_t v14 = sub_100438928( (unint64_t *)&unk_1009BAC00,  (unint64_t *)&unk_1009BC270,  &OBJC_CLASS___IDSURI_ptr);
    swift_bridgeObjectRetain(a1);
    uint64_t v16 = Set.description.getter(v15, v13, v14);
    unint64_t v18 = v17;
    swift_bridgeObjectRelease(a1);
    uint64_t v199 = sub_1003FFBB0(v16, v18, v201);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v199, v200, v9 + 24, v9 + 32);
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease_n(a1, 2LL);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "%s: Group %s: withURIs=%s", (uint8_t *)v9, 0x20u);
    swift_arrayDestroy(v10, 3LL, (char *)&type metadata for Any + 8);
    uint64_t v19 = v10;
    uint64_t v8 = &off_100717000;
    swift_slowDealloc(v19, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  else
  {

    uint64_t v20 = swift_bridgeObjectRelease_n(a1, 2LL);
  }

  uint64_t v21 = *(uint64_t (**)(__n128))((swift_isaMask & *v5) + 0x248LL);
  uint64_t v22 = ((uint64_t (*)(uint64_t))v21)(v20);
  uint64_t v23 = (uint64_t)sub_100428E34(a1, v22);
  __n128 v24 = swift_bridgeObjectRetain(a1);
  uint64_t v25 = v21(v24);
  uint64_t v180 = (uint64_t)sub_100428E34(v25, a1);
  swift_bridgeObjectRelease(v25);
  unint64_t v178 = v23 & 0xC000000000000001LL;
  uint64_t v179 = v23;
  if ((v23 & 0xC000000000000001LL) != 0)
  {
    if (v23 < 0) {
      uint64_t v26 = v23;
    }
    else {
      uint64_t v26 = v23 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v23);
    uint64_t v27 = __CocoaSet.makeIterator()(v26);
    uint64_t v28 = sub_10041D3C4(0LL, (unint64_t *)&unk_1009BC270, &OBJC_CLASS___IDSURI_ptr);
    uint64_t v29 = sub_100438928( (unint64_t *)&unk_1009BAC00,  (unint64_t *)&unk_1009BC270,  &OBJC_CLASS___IDSURI_ptr);
    uint64_t v30 = Set.Iterator.init(_cocoa:)(&v199, v27, v28, v29);
    uint64_t v31 = v199;
    uint64_t v182 = v200[0];
    uint64_t v32 = v200[1];
    uint64_t v33 = v200[2];
    unint64_t v34 = v200[3];
  }

  else
  {
    uint64_t v35 = -1LL << *(_BYTE *)(v23 + 32);
    uint64_t v182 = v23 + 56;
    uint64_t v36 = ~v35;
    uint64_t v37 = -v35;
    if (v37 < 64) {
      uint64_t v38 = ~(-1LL << v37);
    }
    else {
      uint64_t v38 = -1LL;
    }
    unint64_t v34 = v38 & *(void *)(v23 + 56);
    uint64_t v31 = v23;
    swift_bridgeObjectRetain(v23);
    uint64_t v32 = v36;
    uint64_t v33 = 0LL;
  }

  int64_t v181 = (unint64_t)(v32 + 64) >> 6;
  int v188 = *((void *)v8 + 107);
  uint64_t v185 = v31;
  while (v31 < 0)
  {
    uint64_t v42 = __CocoaSet.Iterator.next()(v30);
    if (!v42) {
      goto LABEL_39;
    }
    uint64_t v43 = v42;
    uint64_t v202 = (void *)v42;
    uint64_t v44 = sub_10041D3C4(0LL, (unint64_t *)&unk_1009BC270, &OBJC_CLASS___IDSURI_ptr);
    swift_unknownObjectRetain(v43, v45);
    swift_dynamicCast(v201, &v202, (char *)&type metadata for Swift.AnyObject + 8, v44, 7LL);
    uint64_t v46 = (void *)v201[0];
    id v48 = (id)swift_unknownObjectRelease(v43, v47);
    uint64_t v41 = v33;
    uint64_t v39 = v34;
    if (!v46) {
      goto LABEL_39;
    }
LABEL_37:
    unint64_t v192 = v39;
    uint64_t v194 = v41;
    uint64_t v52 = (*(uint64_t (**)(id))((swift_isaMask & *v5) + 0x110LL))(v48);
    uint64_t v55 = (os_unfair_lock_s *)(__chkstk_darwin(v53, v54) + 16);
    os_unfair_lock_lock(v55);
    sub_1004B1608(v201);
    uint64_t v56 = (void *)v201[0];
    os_unfair_lock_unlock(v55);
    swift_release(v52);
    unint64_t v189 = v56;
    id v57 = v56;
    uint64_t v58 = v5;
    id v59 = v46;
    id v60 = v57;
    unint64_t v61 = v58;
    id v62 = v59;
    uint64_t v63 = (os_log_s *)Logger.logObject.getter(v62);
    os_log_type_t v64 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v63, v64))
    {
      uint64_t v65 = swift_slowAlloc(32LL, -1LL);
      uint64_t v66 = (void *)swift_slowAlloc(16LL, -1LL);
      uint64_t v186 = swift_slowAlloc(32LL, -1LL);
      v201[0] = v186;
      *(_DWORD *)uint64_t v65 = v188;
      uint64_t v67 = *(void *)&v61[OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_id];
      unint64_t v68 = *(void *)&v61[OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_id + 8];
      swift_bridgeObjectRetain(v68);
      *(void *)(v65 + 4) = sub_1003FFBB0(v67, v68, v201);
      swift_bridgeObjectRelease(v68);

      *(_WORD *)(v65 + 1sub_10040A648(v1 + 2) = 2112;
      *(void *)(v65 + 14) = v62;
      *uint64_t v66 = v46;

      *(_WORD *)(v65 + 2sub_10040A648(v1 + 2) = 2112;
      *(void *)(v65 + 24) = v60;
      v66[1] = v189;

      _os_log_impl( (void *)&_mh_execute_header,  v63,  v64,  "Group %s: updateMembers: removed member with URI %@: %@",  (uint8_t *)v65,  0x20u);
      uint64_t v69 = sub_1003F5CB4(&qword_1009B92C8);
      swift_arrayDestroy(v66, 2LL, v69);
      uint64_t v70 = v66;
      uint64_t v5 = v197;
      swift_slowDealloc(v70, -1LL, -1LL);
      swift_arrayDestroy(v186, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v186, -1LL, -1LL);
      uint64_t v71 = v65;
      uint64_t v31 = v185;
      swift_slowDealloc(v71, -1LL, -1LL);
    }

    else
    {
    }

    unint64_t v34 = v192;
    uint64_t v33 = v194;
  }

  if (v34)
  {
    uint64_t v39 = (v34 - 1) & v34;
    unint64_t v40 = __clz(__rbit64(v34)) | (v33 << 6);
    uint64_t v41 = v33;
    goto LABEL_36;
  }

  int64_t v49 = v33 + 1;
  if (__OFADD__(v33, 1LL)) {
    goto LABEL_148;
  }
  if (v49 < v181)
  {
    unint64_t v50 = *(void *)(v182 + 8 * v49);
    uint64_t v41 = v33 + 1;
    if (!v50)
    {
      uint64_t v41 = v33 + 2;
      if (v33 + 2 >= v181) {
        goto LABEL_39;
      }
      unint64_t v50 = *(void *)(v182 + 8 * v41);
      if (!v50)
      {
        uint64_t v41 = v33 + 3;
        if (v33 + 3 >= v181) {
          goto LABEL_39;
        }
        unint64_t v50 = *(void *)(v182 + 8 * v41);
        if (!v50)
        {
          uint64_t v41 = v33 + 4;
          if (v33 + 4 >= v181) {
            goto LABEL_39;
          }
          unint64_t v50 = *(void *)(v182 + 8 * v41);
          if (!v50)
          {
            uint64_t v51 = v33 + 5;
            do
            {
              if (v181 == v51) {
                goto LABEL_39;
              }
              unint64_t v50 = *(void *)(v182 + 8 * v51++);
            }

            while (!v50);
            uint64_t v41 = v51 - 1;
          }
        }
      }
    }

    uint64_t v39 = (v50 - 1) & v50;
    unint64_t v40 = __clz(__rbit64(v50)) + (v41 << 6);
LABEL_36:
    id v48 = *(id *)(*(void *)(v31 + 48) + 8 * v40);
    uint64_t v46 = v48;
    if (!v48) {
      goto LABEL_39;
    }
    goto LABEL_37;
  }

LABEL_150:
      __break(1u);
      goto LABEL_151;
    }

    int64_t v128 = v139;
    goto LABEL_97;
  }

void *sub_1004A262C(void *a1)
{
  __n128 v3 = *(uint64_t (**)(void))((swift_isaMask & *v1) + 0x110LL);
  id v4 = (os_unfair_lock_s *)v3();
  os_unfair_lock_lock(v4 + 4);
  swift_release(v4);
  uint64_t v5 = (void *)((char *)v1 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_membersByURI);
  swift_beginAccess( (char *)v1 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_membersByURI,  v19,  0LL,  0LL);
  uint64_t v6 = *v5;
  id v7 = a1;
  swift_bridgeObjectRetain(v6);
  uint64_t v8 = sub_1004A2770(v7, v6);

  uint64_t v9 = swift_bridgeObjectRelease(v6);
  if (!v8)
  {
    uint64_t v12 = *v5;
    __chkstk_darwin(v10, v11);
    swift_bridgeObjectRetain(v12);
    sub_1004B1710(v13, (uint64_t (*)(id, id))sub_1004B1670);
    uint64_t v15 = v14;
    uint64_t v8 = v16;
    uint64_t v9 = swift_bridgeObjectRelease(v12);
    if (v15) {

    }
    else {
      uint64_t v8 = 0LL;
    }
  }

  unint64_t v17 = (os_unfair_lock_s *)((uint64_t (*)(uint64_t))v3)(v9);
  os_unfair_lock_unlock(v17 + 4);
  swift_release(v17);
  return v8;
}

void *sub_1004A2770(void *a1, uint64_t a2)
{
  if ((a2 & 0xC000000000000001LL) == 0)
  {
    if (*(void *)(a2 + 16))
    {
      unint64_t v11 = sub_100433024((uint64_t)a1);
      if ((v12 & 1) != 0)
      {
        uint64_t v9 = *(void **)(*(void *)(a2 + 56) + 8 * v11);
        id v13 = v9;
        return v9;
      }
    }

    return 0LL;
  }

  if (a2 < 0) {
    uint64_t v3 = a2;
  }
  else {
    uint64_t v3 = a2 & 0xFFFFFFFFFFFFFF8LL;
  }
  id v4 = a1;
  uint64_t v6 = __CocoaDictionary.lookup(_:)(v4, v3, v5);

  if (!v6) {
    return 0LL;
  }
  uint64_t v15 = v6;
  uint64_t v7 = type metadata accessor for IDSGroupEncryptionControllerMember();
  swift_unknownObjectRetain(v6, v8);
  swift_dynamicCast(&v16, &v15, (char *)&type metadata for Swift.AnyObject + 8, v7, 7LL);
  uint64_t v9 = v16;
  swift_unknownObjectRelease(v6, v10);
  return v9;
}

double sub_1004A2834@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  if (*(void *)(a3 + 16) && (unint64_t v6 = sub_100417D94(a1, a2), (v7 & 1) != 0))
  {
    sub_10040A668(*(void *)(a3 + 56) + 32 * v6, (uint64_t)a4);
  }

  else
  {
    double result = 0.0;
    *a4 = 0u;
    a4[1] = 0u;
  }

  return result;
}

uint64_t sub_1004A28D0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_allocatedURI + 8);
  id v4 = objc_allocWithZone(&OBJC_CLASS___IDSURI);
  swift_bridgeObjectRetain(v3);
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v3);
  id v6 = [v4 initWithPrefixedURI:v5];

  if (!v6) {
    return 0LL;
  }
  id v7 =  [v6 URIByAddingPushToken:*(void *)(a1 + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_pushToken)];

  if (!v7) {
    return 0LL;
  }
  uint64_t v8 = (*(uint64_t (**)(id))((swift_isaMask & *v1) + 0x2B8LL))(v7);

  return v8;
}

void sub_1004A2A14(void *a1)
{
  unint64_t v2 = v1;
  id v4 = (os_unfair_lock_s *)(*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x110LL))();
  os_unfair_lock_lock(v4 + 4);
  sub_1004B23EC(&OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_membersByURI, &v8);
  uint64_t v5 = v8;
  os_unfair_lock_unlock(v4 + 4);
  swift_release(v4);
  id v6 = a1;
  id v7 = sub_1004A2770(v6, v5);

  swift_bridgeObjectRelease(v5);
  if (v7)
  {
    (*(void (**)(void *))((swift_isaMask & *v2) + 0x2D0LL))(v7);
  }

  else if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000LL) != 0)
  {
    if (_CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage)) {
      sub_10041C0F0((uint64_t)_swiftEmptyArrayStorage);
    }
  }

Swift::Int sub_1004A2BCC(void *a1)
{
  uint64_t v3 = (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x258LL))();
  id v4 = a1;
  Swift::Int v5 = sub_1004B20F0(v3, v4);

  return v5;
}

uint64_t sub_1004A2D08(void *a1)
{
  uint64_t v3 = (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x258LL))();
  id v4 = a1;
  sub_1004B1A1C(v3, (uint64_t)v4);
  uint64_t v6 = v5;
  swift_bridgeObjectRelease(v3);

  return v6;
}

uint64_t sub_1004A2E10()
{
  uint64_t v1 = (os_unfair_lock_s *)(*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x158LL))();
  os_unfair_lock_lock(v1 + 4);
  sub_1004B234C(&v4);
  uint64_t v2 = v4;
  os_unfair_lock_unlock(v1 + 4);
  swift_release(v1);
  return v2;
}

unint64_t sub_1004A2E90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = (uint64_t *)(a1 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_participantsByID);
  unint64_t result = swift_beginAccess( a1 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_participantsByID,  v10,  0LL,  0LL);
  uint64_t v7 = *v5;
  if (*(void *)(v7 + 16) && (unint64_t result = sub_100417DF8(a2), (v8 & 1) != 0))
  {
    uint64_t v9 = *(void **)(*(void *)(v7 + 56) + 8 * result);
    unint64_t result = v9;
  }

  else
  {
    uint64_t v9 = 0LL;
  }

  *a3 = v9;
  return result;
}

void sub_1004A2FBC(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v2 = a1;
    }
    else {
      uint64_t v2 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v3 = __CocoaSet.makeIterator()(v2);
    uint64_t v4 = sub_10041D3C4(0LL, (unint64_t *)&unk_1009BC270, &OBJC_CLASS___IDSURI_ptr);
    uint64_t v5 = sub_100438928((unint64_t *)&unk_1009BAC00, (unint64_t *)&unk_1009BC270, &OBJC_CLASS___IDSURI_ptr);
    uint64_t v6 = Set.Iterator.init(_cocoa:)(v69, v3, v4, v5);
    uint64_t v1 = v69[0];
    uint64_t v59 = v69[1];
    uint64_t v8 = v69[2];
    uint64_t v7 = v69[3];
    unint64_t v9 = v69[4];
  }

  else
  {
    uint64_t v10 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v59 = a1 + 56;
    uint64_t v8 = ~v10;
    uint64_t v11 = -v10;
    if (v11 < 64) {
      uint64_t v12 = ~(-1LL << v11);
    }
    else {
      uint64_t v12 = -1LL;
    }
    unint64_t v9 = v12 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    uint64_t v7 = 0LL;
  }

  int64_t v58 = (unint64_t)(v8 + 64) >> 6;
  id v13 = &_swiftEmptySetSingleton;
  uint64_t v60 = v1;
  while (2)
  {
    uint64_t v14 = v7;
    if ((v1 & 0x8000000000000000LL) == 0)
    {
      if (v9)
      {
        uint64_t v15 = (v9 - 1) & v9;
        unint64_t v16 = __clz(__rbit64(v9)) | (v7 << 6);
        uint64_t v17 = v7;
      }

      else
      {
        int64_t v24 = v7 + 1;
        if (__OFADD__(v14, 1LL)) {
          goto LABEL_74;
        }
        if (v24 >= v58) {
          goto LABEL_72;
        }
        unint64_t v25 = *(void *)(v59 + 8 * v24);
        uint64_t v17 = v14 + 1;
        if (!v25)
        {
          uint64_t v17 = v14 + 2;
          if (v14 + 2 >= v58) {
            goto LABEL_72;
          }
          unint64_t v25 = *(void *)(v59 + 8 * v17);
          if (!v25)
          {
            uint64_t v17 = v14 + 3;
            if (v14 + 3 >= v58) {
              goto LABEL_72;
            }
            unint64_t v25 = *(void *)(v59 + 8 * v17);
            if (!v25)
            {
              uint64_t v17 = v14 + 4;
              if (v14 + 4 >= v58) {
                goto LABEL_72;
              }
              unint64_t v25 = *(void *)(v59 + 8 * v17);
              if (!v25)
              {
                uint64_t v26 = v14 + 5;
                do
                {
                  if (v58 == v26) {
                    goto LABEL_72;
                  }
                  unint64_t v25 = *(void *)(v59 + 8 * v26++);
                }

                while (!v25);
                uint64_t v17 = v26 - 1;
              }
            }
          }
        }

        uint64_t v15 = (v25 - 1) & v25;
        unint64_t v16 = __clz(__rbit64(v25)) + (v17 << 6);
      }

      id v22 = *(id *)(*(void *)(v1 + 48) + 8 * v16);
      if (v22) {
        goto LABEL_33;
      }
LABEL_72:
      sub_10041D3BC(v1);
      return;
    }

    uint64_t v18 = __CocoaSet.Iterator.next()(v6);
    if (!v18) {
      goto LABEL_72;
    }
    uint64_t v19 = v18;
    uint64_t v67 = v18;
    uint64_t v20 = sub_10041D3C4(0LL, (unint64_t *)&unk_1009BC270, &OBJC_CLASS___IDSURI_ptr);
    swift_unknownObjectRetain(v19, v21);
    swift_dynamicCast(&v68, &v67, (char *)&type metadata for Swift.AnyObject + 8, v20, 7LL);
    id v22 = v68;
    swift_unknownObjectRelease(v19, v23);
    uint64_t v17 = v14;
    uint64_t v15 = v9;
    if (!v22) {
      goto LABEL_72;
    }
LABEL_33:
    uint64_t v27 = (*(uint64_t (**)(id))((swift_isaMask & *v61) + 0x2C8LL))(v22);
    uint64_t v28 = v27;
    unint64_t v63 = v15;
    uint64_t v64 = v17;
    id v62 = v22;
    if ((v27 & 0xC000000000000001LL) != 0)
    {
      if (v27 >= 0) {
        v27 &= 0xFFFFFFFFFFFFFF8uLL;
      }
      uint64_t v29 = __CocoaSet.makeIterator()(v27);
      uint64_t v30 = type metadata accessor for IDSGroupEncryptionControllerParticipant(0LL);
      uint64_t v31 = sub_10040A2B0( (unint64_t *)&unk_1009B97C0,  type metadata accessor for IDSGroupEncryptionControllerParticipant,  (uint64_t)&protocol conformance descriptor for NSObject);
      uint64_t v27 = (uint64_t)Set.Iterator.init(_cocoa:)(v70, v29, v30, v31);
      uint64_t v28 = v70[0];
      uint64_t v66 = v70[1];
      uint64_t v32 = v70[2];
      uint64_t v33 = v70[3];
      unint64_t v34 = v70[4];
    }

    else
    {
      uint64_t v33 = 0LL;
      uint64_t v35 = -1LL << *(_BYTE *)(v27 + 32);
      uint64_t v66 = v27 + 56;
      uint64_t v32 = ~v35;
      uint64_t v36 = -v35;
      if (v36 < 64) {
        uint64_t v37 = ~(-1LL << v36);
      }
      else {
        uint64_t v37 = -1LL;
      }
      unint64_t v34 = v37 & *(void *)(v27 + 56);
    }

    int64_t v65 = (unint64_t)(v32 + 64) >> 6;
LABEL_43:
    uint64_t v39 = (char *)(v13 + 7);
    while (1)
    {
      uint64_t v40 = v33;
      if ((v28 & 0x8000000000000000LL) == 0) {
        break;
      }
      uint64_t v43 = __CocoaSet.Iterator.next()(v27);
      if (!v43) {
        goto LABEL_11;
      }
      uint64_t v44 = v43;
      uint64_t v67 = v43;
      uint64_t v45 = type metadata accessor for IDSGroupEncryptionControllerParticipant(0LL);
      swift_unknownObjectRetain(v44, v46);
      swift_dynamicCast(&v68, &v67, (char *)&type metadata for Swift.AnyObject + 8, v45, 7LL);
      uint64_t v47 = v68;
      swift_unknownObjectRelease(v44, v48);
      if (!v47) {
        goto LABEL_11;
      }
LABEL_66:
      uint64_t v52 = *(void *)&v47[OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_participantID];
      uint64_t v53 = static Hasher._hash(seed:_:)(v13[5], v52);
      uint64_t v54 = -1LL << *((_BYTE *)v13 + 32);
      unint64_t v55 = v53 & ~v54;
      if (((*(void *)&v39[(v55 >> 3) & 0xFFFFFFFFFFFFF8LL] >> v55) & 1) == 0) {
        goto LABEL_42;
      }
      uint64_t v56 = v13[6];
      if (*(void *)(v56 + 8 * v55) != v52)
      {
        uint64_t v57 = ~v54;
        while (1)
        {
          unint64_t v55 = (v55 + 1) & v57;
          if (((*(void *)&v39[(v55 >> 3) & 0xFFFFFFFFFFFFF8LL] >> v55) & 1) == 0) {
            break;
          }
          if (*(void *)(v56 + 8 * v55) == v52) {
            goto LABEL_44;
          }
        }

uint64_t sub_1004A3668(uint64_t a1, int a2)
{
  int v168 = a2;
  uint64_t v173 = type metadata accessor for IDSGroupEncryptionControllerParticipantPreKeyState(0LL);
  __chkstk_darwin(v4, v5);
  uint64_t v172 = (char *)&v162 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
  __chkstk_darwin(v7, v8);
  uint64_t v178 = (uint64_t)&v162 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1003F5CB4(&qword_1009B95A0);
  uint64_t v12 = __chkstk_darwin(v10, v11);
  uint64_t v14 = (uint64_t)&v162 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v15 = *(void *)((swift_isaMask & *(void *)v2) + 0x258LL);
  *(void *)&__int128 v177 = ((uint64_t (*)(uint64_t))v15)(v12);
  int64_t v16 = (unint64_t)a1 >> 62;
  uint64_t v17 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
LABEL_3:
  uint64_t v180 = v14;
  if (v17 < 1)
  {
    LODWORD(v175) = 0;
  }

  else
  {
    uint64_t v18 = ((uint64_t (*)(void))v15)();
    uint64_t v19 = v18;
    if ((v18 & 0xC000000000000001LL) != 0)
    {
      if (v18 >= 0) {
        v18 &= 0xFFFFFFFFFFFFFF8uLL;
      }
      uint64_t v14 = __CocoaSet.count.getter(v18);
    }

    else
    {
      uint64_t v14 = *(void *)(v18 + 16);
    }

    swift_bridgeObjectRelease(v19);
    LODWORD(v175) = v14 == 0;
  }

  uint64_t v20 = v2 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_l;
  swift_bridgeObjectRetain_n(a1, 2LL);
  uint64_t v21 = (id)v2;
  uint64_t v179 = v20;
  id v22 = (os_log_s *)Logger.logObject.getter(v21);
  os_log_type_t v23 = static os_log_type_t.default.getter();
  BOOL v24 = os_log_type_enabled(v22, v23);
  unint64_t v167 = v15;
  int v188 = v21;
  unint64_t v176 = (char *)a1;
  if (v24)
  {
    uint64_t v14 = swift_slowAlloc(44LL, -1LL);
    uint64_t v25 = swift_slowAlloc(96LL, -1LL);
    id v187 = (id)v16;
    uint64_t v26 = v25;
    __s1[0] = v25;
    *(_DWORD *)uint64_t v14 = 136316162;
    uint64_t __s2 = sub_1003FFBB0(0xD000000000000022LL, 0x8000000100842730LL, __s1);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&__s2, &v192, v14 + 4, v14 + 12);
    *(_WORD *)(v14 + 1sub_10040A648(v1 + 2) = 2080;
    uint64_t v27 = *(void *)((char *)v21 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_id);
    unint64_t v28 = *(void *)((char *)v21 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_id + 8);
    swift_bridgeObjectRetain(v28);
    uint64_t __s2 = sub_1003FFBB0(v27, v28, __s1);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&__s2, &v192, v14 + 14, v14 + 22);

    swift_bridgeObjectRelease(v28);
    *(_WORD *)(v14 + 2sub_10040A648(v1 + 2) = 1024;
    LODWORD(__ssub_10040A648(v1 + 2) = v175;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&__s2, (char *)&__s2 + 4, v14 + 24, v14 + 28);
    *(_WORD *)(v14 + 28) = 1024;
    LODWORD(__ssub_10040A648(v1 + 2) = v168 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&__s2, (char *)&__s2 + 4, v14 + 30, v14 + 34);
    *(_WORD *)(v14 + 34) = 2080;
    unint64_t v15 = v167;
    uint64_t v29 = sub_10041D3C4(0LL, &qword_1009BB7E0, &OBJC_CLASS___IDSGroupSessionActiveParticipant_ptr);
    swift_bridgeObjectRetain(v176);
    uint64_t v30 = Array.description.getter(v176, v29);
    unint64_t v32 = v31;
    swift_bridgeObjectRelease(v176);
    uint64_t __s2 = sub_1003FFBB0(v30, v32, __s1);
    a1 = (uint64_t)v176;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&__s2, &v192, v14 + 36, v14 + 44);
    swift_bridgeObjectRelease_n(a1, 2LL);
    unint64_t v33 = v32;
    uint64_t v21 = v188;
    swift_bridgeObjectRelease(v33);
    _os_log_impl( (void *)&_mh_execute_header,  v22,  v23,  "%s: Group %s: areWeProbablyJoining=%{BOOL}d, lightweight=%{BOOL}d, participants=%s",  (uint8_t *)v14,  0x2Cu);
    swift_arrayDestroy(v26, 3LL, (char *)&type metadata for Any + 8);
    uint64_t v34 = v26;
    int64_t v16 = (int64_t)v187;
    swift_slowDealloc(v34, -1LL, -1LL);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(a1, 2LL);
  }

  uint64_t v2 = ((uint64_t (*)(void))v15)();
  uint64_t v190 = v2;
  uint64_t v35 = v180;
  if (v16)
  {
    if (a1 < 0) {
      uint64_t v90 = a1;
    }
    else {
      uint64_t v90 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v38 = (os_log_s *)_CocoaArrayWrapper.endIndex.getter(v90);
    p_superclass = (__objc2_class **)(&OBJC_METACLASS____TtC17identityservicesd23IDSSenderKeySendContext + 8);
    if (v38) {
      goto LABEL_16;
    }
  }

  else
  {
    uint64_t v36 = *(os_log_s **)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    __n128 v37 = swift_bridgeObjectRetain(a1);
    uint64_t v38 = v36;
    p_superclass = &OBJC_METACLASS____TtC17identityservicesd23IDSSenderKeySendContext.superclass;
    if (v36)
    {
LABEL_16:
      uint64_t v166 = (uint64_t *)((char *)p_superclass[251] + (void)v21);
      int64_t v183 = *(uint64_t **)((char *)v21
                         + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_identityController);
      unint64_t v184 = a1 & 0xC000000000000001LL;
      uint64_t v40 = swift_isaMask & *v183;
      unsigned int v174 = v168 & 1;
      uint64_t v165 = &v192;
      uint64_t v41 = 4LL;
      uint64_t v182 = *(void (**)(void))(v40 + 304);
      v37.n128_u64[0] = 136315906LL;
      __n128 v164 = v37;
      uint64_t v163 = (char *)&type metadata for Any + 8;
      os_log_t v181 = v38;
      while (1)
      {
        uint64_t v43 = v41 - 4;
        uint64_t v186 = v41;
        if (v184)
        {
          id v44 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v41 - 4, a1);
          uint64_t v45 = (os_log_s *)(v43 + 1);
          if (__OFADD__(v43, 1LL)) {
            goto LABEL_112;
          }
        }

        else
        {
          id v44 = *(id *)(a1 + 8 * v41);
          uint64_t v45 = (os_log_s *)(v43 + 1);
          if (__OFADD__(v43, 1LL))
          {
LABEL_112:
            __break(1u);
LABEL_113:
            __break(1u);
LABEL_114:
            __break(1u);
LABEL_115:
            __break(1u);
LABEL_116:
            if (a1 < 0) {
              uint64_t v161 = a1;
            }
            else {
              uint64_t v161 = a1 & 0xFFFFFFFFFFFFFF8LL;
            }
            swift_bridgeObjectRetain(a1);
            uint64_t v17 = _CocoaArrayWrapper.endIndex.getter(v161);
            swift_bridgeObjectRelease(a1);
            goto LABEL_3;
          }
        }

        uint64_t v185 = v45;
        id v187 = v44;
        id v46 = [v44 participantPushToken];
        if (v46)
        {
          uint64_t v47 = v46;
          uint64_t v48 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v46);
          unint64_t v15 = v49;
        }

        else
        {
          uint64_t v48 = 0LL;
          unint64_t v15 = 0xF000000000000000LL;
        }

        uint64_t v2 = (uint64_t)v183;
        v182();
        uint64_t v50 = type metadata accessor for IDSGroupEncryptionFullIdentity(0LL);
        uint64_t v14 = v15 >> 60;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 48LL))(v35, 1LL, v50) == 1)
        {
          sub_10040A274(v35, &qword_1009B95A0);
          if (v15 >> 60 != 15)
          {
            uint64_t v51 = 0LL;
            int64_t v16 = 0xF000000000000000LL;
LABEL_35:
            sub_10040AD00(v48, v15);
            sub_10040AD00(v51, v16);
            unint64_t v42 = v187;
            uint64_t v2 = (uint64_t)v21;
            unint64_t v55 = (void *)(*(uint64_t (**)(id))((swift_isaMask & *v21) + 0x2F8LL))(v187);
            if (v55)
            {
              uint64_t v56 = v55;
              uint64_t v57 = sub_1004A50E0(v55, v177);
              if (((v57 | v175) & 1) == 0)
              {
                int64_t v58 = v172;
                Date.init()(v57);
                swift_storeEnumTagMultiPayload(v58, v173, 0LL);
                uint64_t v57 = (*(uint64_t (**)(char *))((swift_isaMask & *v56) + 0xD8LL))(v58);
              }

              int64_t v16 = *(void *)((swift_isaMask & *v56) + 0xB8LL);
              uint64_t v14 = ((uint64_t (*)(uint64_t))v16)(v57) & 1;
              uint64_t v59 = (*(uint64_t (**)(void))((swift_isaMask & *v56) + 0xC0LL))(v174);
              LOBYTE(__s1[0]) = v14;
              LOBYTE(__ssub_10040A648(v1 + 2) = ((uint64_t (*)(uint64_t))v16)(v59) & 1;
              unint64_t v60 = sub_10040E680();
              if ((dispatch thunk of static Equatable.== infix(_:_:)( __s1,  &__s2,  &type metadata for IDSGroupEncryptionControllerParticipantType,  v60) & 1) == 0)
              {
                unint64_t v61 = v56;
                id v62 = v21;
                unint64_t v63 = v61;
                uint64_t v64 = v62;
                int64_t v65 = v63;
                uint64_t v66 = (os_log_s *)Logger.logObject.getter(v65);
                os_log_type_t v67 = static os_log_type_t.default.getter();
                int v68 = v67;
                if (os_log_type_enabled(v66, v67))
                {
                  uint64_t v69 = swift_slowAlloc(42LL, -1LL);
                  uint64_t v70 = swift_slowAlloc(8LL, -1LL);
                  os_log_t v170 = v66;
                  uint64_t v71 = (void *)v70;
                  uint64_t v171 = swift_slowAlloc(96LL, -1LL);
                  __s1[0] = v171;
                  *(_DWORD *)uint64_t v69 = v164.n128_u32[0];
                  int v169 = v68;
                  uint64_t v73 = *v166;
                  unint64_t v72 = v166[1];
                  swift_bridgeObjectRetain(v72);
                  uint64_t __s2 = sub_1003FFBB0(v73, v72, __s1);
                  unint64_t v15 = (unint64_t)v165;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(&__s2, v165, v69 + 4, v69 + 12);

                  swift_bridgeObjectRelease(v72);
                  *(_WORD *)(v69 + 1sub_10040A648(v1 + 2) = 2112;
                  uint64_t __s2 = (uint64_t)v65;
                  uint64_t v74 = v65;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(&__s2, v15, v69 + 14, v69 + 22);
                  *uint64_t v71 = v56;

                  *(_WORD *)(v69 + 2sub_10040A648(v1 + 2) = 2080;
                  LOBYTE(__ssub_10040A648(v1 + 2) = v14;
                  uint64_t v14 = (uint64_t)&type metadata for IDSGroupEncryptionControllerParticipantType;
                  uint64_t v75 = String.init<A>(describing:)( &__s2,  &type metadata for IDSGroupEncryptionControllerParticipantType);
                  unint64_t v77 = v76;
                  uint64_t __s2 = sub_1003FFBB0(v75, v76, __s1);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(&__s2, v15, v69 + 24, v69 + 32);
                  uint64_t v78 = swift_bridgeObjectRelease(v77);
                  *(_WORD *)(v69 + 3sub_10040A648(v1 + 2) = 2080;
                  LOBYTE(__ssub_10040A648(v1 + 2) = ((uint64_t (*)(uint64_t))v16)(v78) & 1;
                  uint64_t v79 = String.init<A>(describing:)( &__s2,  &type metadata for IDSGroupEncryptionControllerParticipantType);
                  unint64_t v81 = v80;
                  uint64_t __s2 = sub_1003FFBB0(v79, v80, __s1);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(&__s2, v15, v69 + 34, v69 + 42);

                  unint64_t v82 = v81;
                  uint64_t v21 = v188;
                  swift_bridgeObjectRelease(v82);
                  os_log_t v83 = v170;
                  _os_log_impl( (void *)&_mh_execute_header,  v170,  (os_log_type_t)v169,  "Group %s: updateParticipants: updated participant %@ %s -> %s",  (uint8_t *)v69,  0x2Au);
                  uint64_t v84 = sub_1003F5CB4(&qword_1009B92C8);
                  swift_arrayDestroy(v71, 1LL, v84);
                  swift_slowDealloc(v71, -1LL, -1LL);
                  uint64_t v85 = v171;
                  swift_arrayDestroy(v171, 3LL, v163);
                  swift_slowDealloc(v85, -1LL, -1LL);
                  uint64_t v86 = v69;
                  unint64_t v42 = v187;
                  swift_slowDealloc(v86, -1LL, -1LL);
                }

                else
                {
                }

                a1 = (uint64_t)v176;
              }

              uint64_t v2 = (uint64_t)&v190;
              uint64_t v87 = sub_1004AF08C(v56);

              unint64_t v42 = (void *)v87;
              uint64_t v35 = v180;
            }

            else
            {
              uint64_t v35 = v180;
            }

            goto LABEL_19;
          }
        }

        else
        {
          uint64_t v52 = v178;
          sub_1003F5FC8(v35, v178, type metadata accessor for IDSGroupEncryptionPublicIdentity);
          sub_1003F6050(v35, type metadata accessor for IDSGroupEncryptionFullIdentity);
          id v53 = *(id *)(v52 + 8);
          sub_1003F6050(v52, type metadata accessor for IDSGroupEncryptionPublicIdentity);
          uint64_t v2 = (uint64_t)[v53 rawToken];

          uint64_t v51 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v2);
          int64_t v16 = v54;

          if (v15 >> 60 != 15)
          {
            if ((unint64_t)v16 >> 60 != 15) {
              __asm { BR              X10 }
            }

            goto LABEL_35;
          }

          uint64_t v35 = v180;
        }

        unint64_t v42 = v187;
LABEL_19:

        uint64_t v41 = v186 + 1;
        if (v185 == v181)
        {
          swift_bridgeObjectRelease(v177);
          uint64_t v88 = (void *)swift_bridgeObjectRelease(a1);
          uint64_t v2 = v190;
          goto LABEL_52;
        }
      }
    }
  }

  swift_bridgeObjectRelease(v177);
  uint64_t v88 = (void *)swift_bridgeObjectRelease(a1);
LABEL_52:
  if ((v2 & 0xC000000000000001LL) != 0)
  {
    if (v2 < 0) {
      uint64_t v91 = v2;
    }
    else {
      uint64_t v91 = v2 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v92 = __CocoaSet.makeIterator()(v91);
    uint64_t v93 = type metadata accessor for IDSGroupEncryptionControllerParticipant(0LL);
    uint64_t v94 = sub_10040A2B0( (unint64_t *)&unk_1009B97C0,  type metadata accessor for IDSGroupEncryptionControllerParticipant,  (uint64_t)&protocol conformance descriptor for NSObject);
    uint64_t v88 = Set.Iterator.init(_cocoa:)(__s1, v92, v93, v94);
    uint64_t v2 = __s1[0];
    uint64_t v95 = __s1[1];
    uint64_t v96 = __s1[2];
    unint64_t v15 = __s1[3];
    unint64_t v97 = __s1[4];
  }

  else
  {
    unint64_t v15 = 0LL;
    uint64_t v98 = -1LL << *(_BYTE *)(v2 + 32);
    uint64_t v95 = v2 + 56;
    uint64_t v99 = ~v98;
    uint64_t v100 = -v98;
    if (v100 < 64) {
      uint64_t v101 = ~(-1LL << v100);
    }
    else {
      uint64_t v101 = -1LL;
    }
    unint64_t v97 = v101 & *(void *)(v2 + 56);
    uint64_t v96 = v99;
  }

  uint64_t v180 = v2 & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v175 = v96;
  int64_t v16 = (unint64_t)(v96 + 64) >> 6;
  LODWORD(v186) = v168 & 1;
  *(void *)&__int128 v89 = 136315650LL;
  __int128 v177 = v89;
  unint64_t v176 = (char *)&type metadata for Any + 8;
  uint64_t v178 = (uint64_t)&type metadata for Swift.AnyObject + 8;
  uint64_t v14 = v2;
  while (v14 < 0)
  {
    uint64_t v105 = __CocoaSet.Iterator.next()(v88);
    if (!v105) {
      goto LABEL_89;
    }
    uint64_t v106 = v105;
    uint64_t v189 = v105;
    uint64_t v107 = type metadata accessor for IDSGroupEncryptionControllerParticipant(0LL);
    swift_unknownObjectRetain(v106, v108);
    swift_dynamicCast(&__s2, &v189, v178, v107, 7LL);
    a1 = __s2;
    id v110 = (id)swift_unknownObjectRelease(v106, v109);
    unint64_t v102 = v15;
    uint64_t v103 = v97;
    if (!a1) {
      goto LABEL_89;
    }
LABEL_86:
    id v187 = (id)v103;
    unint64_t v114 = *(uint64_t (**)(id))((swift_isaMask & *(void *)a1) + 0xB8LL);
    uint64_t v2 = a1;
    char v115 = v114(v110);
    if (sub_10040DC6C(v115 & 1, v186))
    {
      uint64_t v185 = (os_log_s *)v102;
      id v116 = (id)a1;
      uint64_t v117 = v188;
      id v118 = v116;
      uint64_t v119 = v117;
      id v120 = v118;
      int v121 = (os_log_s *)Logger.logObject.getter(v120);
      os_log_type_t v122 = static os_log_type_t.default.getter();
      int v123 = v122;
      if (os_log_type_enabled(v121, v122))
      {
        uint64_t v124 = swift_slowAlloc(32LL, -1LL);
        int64_t v183 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
        unint64_t v184 = swift_slowAlloc(64LL, -1LL);
        uint64_t __s2 = v184;
        *(_DWORD *)uint64_t v124 = v177;
        LODWORD(v18sub_10040A648(v1 + 2) = v123;
        os_log_t v181 = v121;
        int64_t v125 = v16;
        uint64_t v126 = v95;
        uint64_t v127 = v14;
        uint64_t v128 = *(void *)((char *)v119 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_id);
        unint64_t v129 = *(void *)((char *)v119 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_id + 8);
        swift_bridgeObjectRetain(v129);
        *(void *)(v124 + 4) = sub_1003FFBB0(v128, v129, &__s2);

        unint64_t v130 = v129;
        uint64_t v14 = v127;
        uint64_t v95 = v126;
        int64_t v16 = v125;
        uint64_t v131 = swift_bridgeObjectRelease(v130);
        *(_WORD *)(v124 + 1sub_10040A648(v1 + 2) = 2080;
        LOBYTE(v189) = v114((id)v131) & 1;
        uint64_t v132 = String.init<A>(describing:)(&v189, &type metadata for IDSGroupEncryptionControllerParticipantType);
        unint64_t v134 = v133;
        *(void *)(v124 + 14) = sub_1003FFBB0(v132, v133, &__s2);

        swift_bridgeObjectRelease(v134);
        *(_WORD *)(v124 + 2sub_10040A648(v1 + 2) = 2112;
        *(void *)(v124 + 24) = v120;
        unint64_t v135 = v183;
        *int64_t v183 = a1;

        int v121 = v181;
        _os_log_impl( (void *)&_mh_execute_header,  v181,  (os_log_type_t)v182,  "Group %s: updateParticipants: removing leftover %s participant %@",  (uint8_t *)v124,  0x20u);
        uint64_t v136 = sub_1003F5CB4(&qword_1009B92C8);
        swift_arrayDestroy(v135, 1LL, v136);
        swift_slowDealloc(v135, -1LL, -1LL);
        unint64_t v137 = v184;
        swift_arrayDestroy(v184, 2LL, v176);
        swift_slowDealloc(v137, -1LL, -1LL);
        swift_slowDealloc(v124, -1LL, -1LL);
      }

      else
      {
      }

      uint64_t v2 = (uint64_t)v119;
      (*(void (**)(id))((swift_isaMask & *v119) + 0x300LL))(v120);
      unint64_t v102 = (unint64_t)v185;
    }

    unint64_t v15 = v102;
    unint64_t v97 = (unint64_t)v187;
  }

  if (v97)
  {
    uint64_t v103 = (v97 - 1) & v97;
    unint64_t v104 = __clz(__rbit64(v97)) | (v15 << 6);
    unint64_t v102 = v15;
    goto LABEL_85;
  }

  int64_t v111 = v15 + 1;
  if (__OFADD__(v15, 1LL)) {
    goto LABEL_115;
  }
  if (v111 >= v16) {
    goto LABEL_89;
  }
  unint64_t v112 = *(void *)(v95 + 8 * v111);
  unint64_t v102 = v15 + 1;
  if (v112) {
    goto LABEL_84;
  }
  unint64_t v102 = v15 + 2;
  unint64_t v112 = *(void *)(v95 + 8 * v102);
  if (v112) {
    goto LABEL_84;
  }
  unint64_t v102 = v15 + 3;
  unint64_t v112 = *(void *)(v95 + 8 * v102);
  if (v112) {
    goto LABEL_84;
  }
  unint64_t v102 = v15 + 4;
  unint64_t v112 = *(void *)(v95 + 8 * v102);
  if (v112)
  {
LABEL_84:
    uint64_t v103 = (v112 - 1) & v112;
    unint64_t v104 = __clz(__rbit64(v112)) + (v102 << 6);
LABEL_85:
    id v110 = *(id *)(*(void *)(v14 + 48) + 8 * v104);
    a1 = (uint64_t)v110;
    if (!v110) {
      goto LABEL_89;
    }
    goto LABEL_86;
  }

  unint64_t v113 = v15 + 5;
  while (v16 != v113)
  {
    unint64_t v112 = *(void *)(v95 + 8 * v113++);
    if (v112)
    {
      unint64_t v102 = v113 - 1;
      goto LABEL_84;
    }
  }

uint64_t sub_1004A50E0(void *a1, uint64_t a2)
{
  if ((a2 & 0xC000000000000001LL) != 0)
  {
    id v4 = a1;
    char v5 = __CocoaSet.contains(_:)();

    return v5 & 1;
  }

  if (!*(void *)(a2 + 16)
    || (Swift::Int v7 = NSObject._rawHashValue(seed:)(*(void *)(a2 + 40)),
        uint64_t v8 = -1LL << *(_BYTE *)(a2 + 32),
        unint64_t v9 = v7 & ~v8,
        uint64_t v10 = a2 + 56,
        ((*(void *)(a2 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v9) & 1) == 0))
  {
LABEL_11:
    char v13 = 0;
    return v13 & 1;
  }

  type metadata accessor for IDSGroupEncryptionControllerParticipant(0LL);
  id v11 = *(id *)(*(void *)(a2 + 48) + 8 * v9);
  char v12 = static NSObject.== infix(_:_:)(v11, a1);

  if ((v12 & 1) == 0)
  {
    uint64_t v14 = ~v8;
    unint64_t v15 = (v9 + 1) & v14;
    if (((*(void *)(v10 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v15) & 1) != 0)
    {
      do
      {
        id v16 = *(id *)(*(void *)(a2 + 48) + 8 * v15);
        char v13 = static NSObject.== infix(_:_:)(v16, a1);

        if ((v13 & 1) != 0) {
          break;
        }
        unint64_t v15 = (v15 + 1) & v14;
      }

      while (((*(void *)(v10 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v15) & 1) != 0);
      return v13 & 1;
    }

    goto LABEL_11;
  }

  char v13 = 1;
  return v13 & 1;
}

id sub_1004A529C(void *a1)
{
  uint64_t v2 = v1;
  id v4 = [a1 participantIdentifier];
  id v5 = (id)(*(uint64_t (**)(id))((swift_isaMask & *v1) + 0x2E0LL))(v4);
  if (!v5)
  {
    uint64_t v6 = *(uint64_t (**)(void))((swift_isaMask & *v1) + 0x158LL);
    uint64_t v7 = v6();
    uint64_t v10 = (os_unfair_lock_s *)(__chkstk_darwin(v8, v9) + 16);
    os_unfair_lock_lock(v10);
    sub_1004B2354(v105);
    id v5 = (id)v105[0];
    os_unfair_lock_unlock(v10);
    swift_release(v7);
    if (v5)
    {
      id v11 = v5;
      uint64_t v101 = v1;
      char v12 = v1;
      char v13 = (char *)v11;
      uint64_t v14 = v12;
      unint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
      os_log_type_t v16 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v17 = swift_slowAlloc(22LL, -1LL);
        uint64_t v93 = (void *)swift_slowAlloc(8LL, -1LL);
        uint64_t v95 = swift_slowAlloc(32LL, -1LL);
        v105[0] = v95;
        *(_DWORD *)uint64_t v17 = 136315394;
        uint64_t v98 = v6;
        uint64_t v18 = *(void *)&v14[OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_id];
        unint64_t v19 = *(void *)&v14[OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_id + 8];
        swift_bridgeObjectRetain(v19);
        id v104 = (id)sub_1003FFBB0(v18, v19, v105);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, v105, v17 + 4, v17 + 12);
        swift_bridgeObjectRelease(v19);

        *(_WORD *)(v17 + 1sub_10040A648(v1 + 2) = 2112;
        id v104 = v13;
        uint64_t v20 = v13;
        uint64_t v6 = v98;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, v105, v17 + 14, v17 + 22);
        void *v93 = v5;

        _os_log_impl( (void *)&_mh_execute_header,  v15,  v16,  "Group %s: ensureParticipant: reviving formerly-active participant %@",  (uint8_t *)v17,  0x16u);
        uint64_t v21 = sub_1003F5CB4(&qword_1009B92C8);
        swift_arrayDestroy(v93, 1LL, v21);
        swift_slowDealloc(v93, -1LL, -1LL);
        swift_arrayDestroy(v95, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v95, -1LL, -1LL);
        swift_slowDealloc(v17, -1LL, -1LL);
      }

      else
      {
      }

      uint64_t v59 = (os_unfair_lock_s *)v6();
      os_unfair_lock_lock(v59 + 4);
      uint64_t v60 = *(void *)&v13[OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_participantID];
      unint64_t v61 = &v14[OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_participantsByID];
      swift_beginAccess( &v14[OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_participantsByID],  v105,  33LL,  0LL);
      id v62 = v13;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)v61);
      id v104 = *(id *)v61;
      *(void *)unint64_t v61 = 0x8000000000000000LL;
      sub_1004B0C34((uint64_t)v62, v60, isUniquelyReferenced_nonNull_native);
      uint64_t v64 = *(void *)v61;
      *(void *)unint64_t v61 = v104;
      swift_bridgeObjectRelease(v64);
      swift_endAccess(v105);
      int64_t v65 = *(void **)&v62[OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_pushToken];
      swift_beginAccess( &v14[OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_participantsByPushToken],  v105,  33LL,  0LL);
      uint64_t v66 = v62;
      id v67 = v65;
      sub_1004B09CC((uint64_t)v66, v67);
      swift_endAccess(v105);

      int v68 = (uint64_t *)&v14[OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_formerlyActiveParticipantsByID];
      swift_beginAccess(v68, v105, 33LL, 0LL);
      unint64_t v69 = sub_100417DF8(v60);
      if ((v70 & 1) != 0)
      {
        unint64_t v71 = v69;
        char v72 = swift_isUniquelyReferenced_nonNull_native(*v68);
        uint64_t v73 = *v68;
        id v104 = (id)*v68;
        *int v68 = 0x8000000000000000LL;
        if ((v72 & 1) == 0)
        {
          sub_1004B059C();
          uint64_t v73 = (uint64_t)v104;
        }

        uint64_t v74 = *(void **)(*(void *)(v73 + 56) + 8 * v71);
        sub_1004B026C(v71, v73);
        uint64_t v75 = *v68;
        *int v68 = v73;

        swift_bridgeObjectRelease(v75);
      }

      swift_endAccess(v105);
      os_unfair_lock_unlock(v59 + 4);

      swift_release(v59);
      goto LABEL_16;
    }

    id v22 = [a1 participantPushToken];
    if (v22)
    {
      os_log_type_t v23 = v22;
      uint64_t v24 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v22);
      unint64_t v26 = v25;

      id v27 = objc_allocWithZone(&OBJC_CLASS___IDSPushToken);
      sub_1004028CC(v24, v26);
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      id v29 = [v27 initWithData:isa];
      sub_100402A84(v24, v26);

      if (v29)
      {
        id v30 = [a1 participantURI];
        if (!v30)
        {
          uint64_t v85 = v2;
          id v86 = a1;
          uint64_t v87 = (os_log_s *)Logger.logObject.getter(v86);
          os_log_type_t v88 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v87, v88))
          {
            uint64_t v103 = v2;
            uint64_t v89 = swift_slowAlloc(22LL, -1LL);
            uint64_t v97 = swift_slowAlloc(32LL, -1LL);
            v105[0] = v97;
            *(_DWORD *)uint64_t v89 = 136315394;
            unint64_t v100 = v26;
            uint64_t v91 = *(void *)((char *)v85 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_id);
            unint64_t v90 = *(void *)((char *)v85 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_id
                                          + 8);
            swift_bridgeObjectRetain(v90);
            id v104 = (id)sub_1003FFBB0(v91, v90, v105);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, v105, v89 + 4, v89 + 12);
            swift_bridgeObjectRelease(v90);

            *(_WORD *)(v89 + 1sub_10040A648(v1 + 2) = 2048;
            id v104 = [v86 participantIdentifier];
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, v105, v89 + 14, v89 + 22);

            _os_log_impl( (void *)&_mh_execute_header,  v87,  v88,  "Group %s: ensureParticipant: participant %llu missing participantURI",  (uint8_t *)v89,  0x16u);
            swift_arrayDestroy(v97, 1LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v97, -1LL, -1LL);
            uint64_t v92 = v89;
            uint64_t v2 = v103;
            swift_slowDealloc(v92, -1LL, -1LL);
            sub_100402A84(v24, v100);
          }

          else
          {
            sub_100402A84(v24, v26);
          }

          id v5 = 0LL;
          goto LABEL_22;
        }

        unint64_t v31 = v30;
        uint64_t v96 = v24;
        unint64_t v99 = v26;
        uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
        uint64_t v34 = v33;

        type metadata accessor for IDSGroupEncryptionControllerParticipant(0LL);
        id v35 = [a1 participantIdentifier];
        uint64_t v101 = v2;
        uint64_t v36 = v6;
        __n128 v37 = v2;
        id v38 = v29;
        id v39 = sub_10047E93C(v37, (uint64_t)&off_1009073F8, (uint64_t)v35, v38, v32, v34);
        uint64_t v40 = (os_unfair_lock_s *)v36();
        os_unfair_lock_lock(v40 + 4);
        id v41 = [a1 participantIdentifier];
        unint64_t v42 = (void *)((char *)v37
                       + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_participantsByID);
        swift_beginAccess( (char *)v37 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_participantsByID,  v105,  33LL,  0LL);
        id v43 = v39;
        char v44 = swift_isUniquelyReferenced_nonNull_native(*v42);
        id v104 = (id)*v42;
        *unint64_t v42 = 0x8000000000000000LL;
        sub_1004B0C34((uint64_t)v43, (uint64_t)v41, v44);
        uint64_t v45 = *v42;
        *unint64_t v42 = v104;
        swift_bridgeObjectRelease(v45);
        swift_endAccess(v105);
        swift_beginAccess( (char *)v37 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_participantsByPushToken,  v105,  33LL,  0LL);
        id v46 = v43;
        id v47 = v38;
        sub_1004B09CC((uint64_t)v46, v47);
        swift_endAccess(v105);

        os_unfair_lock_unlock(v40 + 4);
        swift_release(v40);
        uint64_t v48 = v37;
        id v49 = v46;
        uint64_t v50 = v48;
        id v5 = v49;
        uint64_t v51 = (os_log_s *)Logger.logObject.getter(v5);
        os_log_type_t v52 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v51, v52))
        {
          uint64_t v53 = swift_slowAlloc(22LL, -1LL);
          uint64_t v94 = (void *)swift_slowAlloc(8LL, -1LL);
          uint64_t v54 = swift_slowAlloc(32LL, -1LL);
          v105[0] = v54;
          *(_DWORD *)uint64_t v53 = 136315394;
          uint64_t v56 = *(void *)&v50[OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_id];
          unint64_t v55 = *(void *)&v50[OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_id + 8];
          swift_bridgeObjectRetain(v55);
          id v104 = (id)sub_1003FFBB0(v56, v55, v105);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, v105, v53 + 4, v53 + 12);
          swift_bridgeObjectRelease(v55);

          *(_WORD *)(v53 + 1sub_10040A648(v1 + 2) = 2112;
          id v104 = v5;
          id v57 = v5;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, v105, v53 + 14, v53 + 22);
          *uint64_t v94 = v5;

          _os_log_impl( (void *)&_mh_execute_header,  v51,  v52,  "Group %s: ensureParticipant: created participant %@",  (uint8_t *)v53,  0x16u);
          uint64_t v58 = sub_1003F5CB4(&qword_1009B92C8);
          swift_arrayDestroy(v94, 1LL, v58);
          swift_slowDealloc(v94, -1LL, -1LL);
          swift_arrayDestroy(v54, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v54, -1LL, -1LL);
          swift_slowDealloc(v53, -1LL, -1LL);
          sub_100402A84(v96, v99);
        }

        else
        {
          sub_100402A84(v96, v99);
        }

uint64_t sub_1004A5EC4(void *a1)
{
  id v3 = v1;
  id v4 = a1;
  id v5 = v3;
  uint64_t v6 = (char *)v4;
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc(22LL, -1LL);
    uint64_t v10 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v33 = swift_slowAlloc(32LL, -1LL);
    v35[0] = v33;
    *(_DWORD *)uint64_t v9 = 136315394;
    uint64_t v11 = *(void *)((char *)v5 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_id);
    unint64_t v12 = *(void *)((char *)v5 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_id + 8);
    swift_bridgeObjectRetain(v12);
    uint64_t v34 = sub_1003FFBB0(v11, v12, v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, v35, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease(v12);

    *(_WORD *)(v9 + 1sub_10040A648(v1 + 2) = 2112;
    uint64_t v34 = (uint64_t)v6;
    char v13 = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, v35, v9 + 14, v9 + 22);
    *uint64_t v10 = v6;

    _os_log_impl( (void *)&_mh_execute_header,  v7,  v8,  "Group %s: removeParticipant: removing participant %@",  (uint8_t *)v9,  0x16u);
    uint64_t v14 = sub_1003F5CB4(&qword_1009B92C8);
    swift_arrayDestroy(v10, 1LL, v14);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_arrayDestroy(v33, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  else
  {
  }

  unint64_t v15 = (os_unfair_lock_s *)(*(uint64_t (**)(void))((swift_isaMask & *v5) + 0x158LL))();
  os_unfair_lock_lock(v15 + 4);
  os_log_type_t v16 = *(void **)&v6[OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_pushToken];
  swift_beginAccess( (char *)v5 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_participantsByPushToken,  v35,  33LL,  0LL);
  id v17 = v16;
  uint64_t v18 = (void *)sub_1004AF564((unint64_t)v17);
  swift_endAccess(v35);

  uint64_t v19 = *(void *)&v6[OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_participantID];
  uint64_t v20 = (void *)((char *)v5 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_participantsByID);
  swift_beginAccess( (char *)v5 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_participantsByID,  v35,  33LL,  0LL);
  unint64_t v21 = sub_100417DF8(v19);
  if ((v22 & 1) != 0)
  {
    unint64_t v23 = v21;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v20);
    uint64_t v25 = *v20;
    uint64_t v34 = *v20;
    *uint64_t v20 = 0x8000000000000000LL;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1004B059C();
      uint64_t v25 = v34;
    }

    unint64_t v26 = *(void **)(*(void *)(v25 + 56) + 8 * v23);
    sub_1004B026C(v23, v25);
    uint64_t v27 = *v20;
    *uint64_t v20 = v25;

    swift_bridgeObjectRelease(v27);
  }

  swift_endAccess(v35);
  unint64_t v28 = (void *)((char *)v5
                 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_formerlyActiveParticipantsByID);
  swift_beginAccess(v28, v35, 33LL, 0LL);
  id v29 = v6;
  char v30 = swift_isUniquelyReferenced_nonNull_native(*v28);
  uint64_t v34 = *v28;
  *unint64_t v28 = 0x8000000000000000LL;
  sub_1004B0C34((uint64_t)v29, v19, v30);
  uint64_t v31 = *v28;
  *unint64_t v28 = v34;
  swift_bridgeObjectRelease(v31);
  swift_endAccess(v35);
  os_unfair_lock_unlock(v15 + 4);
  return swift_release(v15);
}

void sub_1004A62C8()
{
  uint64_t v1 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x2D8LL))();
  if (v1)
  {
    id v2 = (id)v1;
    (*(void (**)(void))((swift_isaMask & *v0) + 0x300LL))();
  }

uint64_t sub_1004A63D0()
{
  uint64_t v1 = (os_unfair_lock_s *)(*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x158LL))();
  os_unfair_lock_lock(v1 + 4);
  sub_1004A6430((uint64_t)v0);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release(v1);
}

uint64_t sub_1004A6430(uint64_t a1)
{
  unint64_t v2 = sub_10049E834((uint64_t)_swiftEmptyArrayStorage, &qword_1009BB838, (uint64_t (*)(id))sub_10049A934);
  id v3 = (unint64_t *)(a1
                          + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_participantsByPushToken);
  swift_beginAccess( a1 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_participantsByPushToken,  v14,  1LL,  0LL);
  unint64_t v4 = *v3;
  unint64_t *v3 = v2;
  swift_bridgeObjectRelease(v4);
  unint64_t v5 = sub_1004B0FE0(_swiftEmptyArrayStorage);
  uint64_t v6 = (unint64_t *)(a1 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_participantsByID);
  swift_beginAccess( a1 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_participantsByID,  v13,  1LL,  0LL);
  unint64_t v7 = *v6;
  *uint64_t v6 = v5;
  swift_bridgeObjectRelease(v7);
  unint64_t v8 = sub_1004B0FE0(_swiftEmptyArrayStorage);
  uint64_t v9 = (unint64_t *)(a1
                          + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_formerlyActiveParticipantsByID);
  swift_beginAccess(v9, v12, 1LL, 0LL);
  unint64_t v10 = *v9;
  *uint64_t v9 = v8;
  return swift_bridgeObjectRelease(v10);
}

uint64_t sub_1004A65B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = (*(uint64_t (**)(void))((swift_isaMask & *v2) + 0x128LL))();
  if (v5)
  {
    uint64_t v7 = v5;
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType(v5);
    (*(void (**)(void, uint64_t, uint64_t))(v8 + 8))( *(void *)(a1 + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_pushToken),  ObjectType,  v8);
    return swift_unknownObjectRelease(v7, v10);
  }

  else
  {
    uint64_t v12 = type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))( a2,  1LL,  1LL,  v12);
  }

uint64_t sub_1004A6660()
{
  return (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x390LL))();
}

uint64_t sub_1004A667C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1004A6694(a1, a2, a3, a4, a5, a6, 0LL);
}

uint64_t sub_1004A668C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1004A6694(a1, a2, a3, a4, a5, a6, 1LL);
}

uint64_t sub_1004A6694(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((swift_isaMask & *v7)
                                                                                                  + 0x338LL))( a1,  a7,  a2,  a3,  a4,  a5,  a6);
}

id sub_1004A66D4(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( a3,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(a6);
  uint64_t v17 = v16;
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, id, id, uint64_t, uint64_t, uint64_t))((swift_isaMask & *a1) + 0x338LL);
  id v19 = a4;
  id v20 = a5;
  unint64_t v21 = a1;
  char v22 = (void *)v18(v14, a8, v19, v20, v15, v17, a7);

  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(v17);
  return v22;
}

uint64_t sub_1004A67D8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  int v106 = a7;
  uint64_t v107 = a6;
  uint64_t v108 = a5;
  uint64_t v109 = a3;
  sub_1003F5CB4(&qword_1009B90E8);
  __chkstk_darwin(v10, v11);
  uint64_t v101 = (char *)&v98 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13, v14);
  int64_t v111 = (char *)&v98 - v15;
  __chkstk_darwin(v16, v17);
  id v19 = (char *)&v98 - v18;
  __chkstk_darwin(v20, v21);
  unint64_t v23 = (char *)&v98 - v22;
  uint64_t v25 = type metadata accessor for UUID(0LL, v24);
  uint64_t v113 = *(void *)(v25 - 8);
  __chkstk_darwin(v26, v27);
  id v104 = (char *)&v98 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v29, v30);
  uint64_t v105 = (char *)&v98 - v31;
  uint64_t v110 = v7;
  uint64_t v32 = v7 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_l;
  uint64_t v33 = swift_bridgeObjectRetain_n(a1, 2LL);
  uint64_t v34 = (os_log_s *)Logger.logObject.getter(v33);
  os_log_type_t v35 = static os_log_type_t.default.getter();
  BOOL v36 = os_log_type_enabled(v34, v35);
  uint64_t v112 = v25;
  uint64_t v103 = v23;
  unint64_t v100 = v19;
  if (!v36)
  {
    swift_bridgeObjectRelease_n(a1, 2LL);

    if ((a2 & 1) != 0) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSRealTimeEncryptionMKM);
    uint64_t v51 = v50;
    if (*(void *)(a1 + 16) && (unint64_t v52 = sub_100417D94(v49, v50), (v53 & 1) != 0))
    {
      sub_10040A668(*(void *)(a1 + 56) + 32 * v52, (uint64_t)&v116);
    }

    else
    {
      __int128 v116 = 0u;
      __int128 v117 = 0u;
    }

    swift_bridgeObjectRelease(v51);
    if (*((void *)&v117 + 1))
    {
      if ((swift_dynamicCast(&v114, &v116, (char *)&type metadata for Any + 8, &type metadata for Data, 6LL) & 1) != 0)
      {
        uint64_t v62 = v114;
        unint64_t v61 = v115;
        uint64_t v63 = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSRealTimeEncryptionMKS);
        uint64_t v65 = v64;
        if (*(void *)(a1 + 16) && (unint64_t v66 = sub_100417D94(v63, v64), (v67 & 1) != 0))
        {
          sub_10040A668(*(void *)(a1 + 56) + 32 * v66, (uint64_t)&v116);
        }

        else
        {
          __int128 v116 = 0u;
          __int128 v117 = 0u;
        }

        swift_bridgeObjectRelease(v65);
        if (*((void *)&v117 + 1))
        {
          uint64_t v87 = swift_dynamicCast(&v114, &v116, (char *)&type metadata for Any + 8, &type metadata for Data, 6LL);
          if ((v87 & 1) != 0) {
            __asm { BR              X10 }
          }
        }

        else
        {
          uint64_t v87 = sub_10040A274((uint64_t)&v116, &qword_1009B92B8);
        }

        os_log_type_t v88 = (os_log_s *)Logger.logObject.getter(v87);
        os_log_type_t v94 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v88, v94))
        {
          uint64_t v95 = swift_slowAlloc(18LL, -1LL);
          uint64_t v96 = swift_slowAlloc(32LL, -1LL);
          *(void *)&__int128 v116 = v96;
          *(_DWORD *)uint64_t v95 = 136315394;
          uint64_t v114 = sub_1003FFBB0(0xD000000000000051LL, 0x8000000100842780LL, (uint64_t *)&v116);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, &v115, v95 + 4, v95 + 12);
          *(_WORD *)(v95 + 1sub_10040A648(v1 + 2) = 1024;
          LODWORD(v114) = 16;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, (char *)&v114 + 4, v95 + 14, v95 + 18);
          _os_log_impl((void *)&_mh_execute_header, v88, v94, "%s: mks not %d", (uint8_t *)v95, 0x12u);
          swift_arrayDestroy(v96, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v96, -1LL, -1LL);
          swift_slowDealloc(v95, -1LL, -1LL);
        }

        uint64_t v92 = v62;
        unint64_t v93 = v61;
        goto LABEL_47;
      }
    }

    else
    {
      sub_10040A274((uint64_t)&v116, &qword_1009B92B8);
    }

    uint64_t v80 = swift_bridgeObjectRetain_n(a1, 2LL);
    unint64_t v69 = (os_log_s *)Logger.logObject.getter(v80);
    os_log_type_t v70 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v69, v70))
    {
      uint64_t v71 = swift_slowAlloc(22LL, -1LL);
      uint64_t v72 = swift_slowAlloc(64LL, -1LL);
      *(void *)&__int128 v116 = v72;
      *(_DWORD *)uint64_t v71 = 136315394;
      uint64_t v114 = sub_1003FFBB0(0xD000000000000051LL, 0x8000000100842780LL, (uint64_t *)&v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, &v115, v71 + 4, v71 + 12);
      *(_WORD *)(v71 + 1sub_10040A648(v1 + 2) = 2080;
      __n128 v81 = swift_bridgeObjectRetain(a1);
      uint64_t v82 = a1;
      uint64_t v75 = (char *)&type metadata for Any + 8;
      uint64_t v83 = Dictionary.description.getter(v81);
      unint64_t v85 = v84;
      swift_bridgeObjectRelease(v82);
      uint64_t v114 = sub_1003FFBB0(v83, v85, (uint64_t *)&v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, &v115, v71 + 14, v71 + 22);
      swift_bridgeObjectRelease_n(v82, 2LL);
      swift_bridgeObjectRelease(v85);
      os_log_type_t v79 = "%s: no mkm data in %s";
      goto LABEL_28;
    }

uint64_t sub_1004A84DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v8 = [objc_allocWithZone(NSUUID) initWithUUIDBytes:a1];
  uint64_t v10 = type metadata accessor for UUID(0LL, v9);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
  if (!v8) {
    return v12(a2, 1LL, 1LL, v10);
  }
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
  v12((uint64_t)v7, 1LL, 1LL, v10);
  uint64_t v13 = sub_10040A2B0( &qword_1009BB7E8,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:)(v8, v7, v10, v13);

  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v7, 1LL, v10) == 1)
  {
    uint64_t v14 = a2;
    uint64_t v15 = 1LL;
  }

  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(a2, v7, v10);
    uint64_t v14 = a2;
    uint64_t v15 = 0LL;
  }

  return v18(v14, v15, 1LL, v10);
}

uint64_t sub_1004A864C( char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, unint64_t a13, __int16 a14)
{
  uint64_t v17 = a1 & 1;
  uint64_t v18 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))((swift_isaMask & *v14) + 0x3B0LL))(a9, a10);
  uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, _BYTE, unint64_t, __int16))((swift_isaMask & *v18) + 0x1E0LL))( v17,  a2,  a3,  a4,  a5,  a6,  a7,  a8,  a11,  a12 & 1,  a13 | ((HIDWORD(a13) & 1) << 32),  a14);

  return v19;
}

void sub_1004A8748(uint64_t a1, uint64_t a2)
{
  id v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for IDSGroupEncryptionFullIdentity(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = (*(uint64_t (**)(unint64_t, unint64_t))((swift_isaMask & *v2) + 0x408LL))( 0xD000000000000028LL,  0x80000001008427E0LL);
  (*(void (**)(uint64_t))((swift_isaMask & **(void **)((char *)v2
                                                                 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_identityController))
                                  + 0x130LL))(v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9) == 1)
  {
    uint64_t v16 = sub_10040A274((uint64_t)v8, &qword_1009B95A0);
    uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  v18,  "send(keyRecoveryRequest): cannot send keyRecoveryRequest because we don't have our own public identity",  v19,  2u);
      swift_slowDealloc(v19, -1LL, -1LL);
    }

    return;
  }

  uint64_t v20 = sub_1003F600C((uint64_t)v8, (uint64_t)v14, type metadata accessor for IDSGroupEncryptionFullIdentity);
  uint64_t v21 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v2) + 0x140LL))(v20);
  uint64_t v22 = v21;
  int64_t v23 = 0LL;
  uint64_t v24 = v21 + 64;
  uint64_t v25 = 1LL << *(_BYTE *)(v21 + 32);
  uint64_t v26 = -1LL;
  if (v25 < 64) {
    uint64_t v26 = ~(-1LL << v25);
  }
  unint64_t v27 = v26 & *(void *)(v21 + 64);
  int64_t v28 = (unint64_t)(v25 + 63) >> 6;
  while (1)
  {
    if (v27)
    {
      unint64_t v29 = __clz(__rbit64(v27));
      v27 &= v27 - 1;
      unint64_t v30 = v29 | (v23 << 6);
      goto LABEL_9;
    }

    int64_t v34 = v23 + 1;
    if (__OFADD__(v23, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v34 >= v28) {
      goto LABEL_25;
    }
    unint64_t v35 = *(void *)(v24 + 8 * v34);
    ++v23;
    if (!v35)
    {
      int64_t v23 = v34 + 1;
      if (v34 + 1 >= v28) {
        goto LABEL_25;
      }
      unint64_t v35 = *(void *)(v24 + 8 * v23);
      if (!v35)
      {
        int64_t v23 = v34 + 2;
        if (v34 + 2 >= v28) {
          goto LABEL_25;
        }
        unint64_t v35 = *(void *)(v24 + 8 * v23);
        if (!v35) {
          break;
        }
      }
    }

id sub_1004A8A70()
{
  unint64_t v1 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v3, v4);
  v220 = &v200[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v219 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v218 = *(void *)(v219 - 8);
  __chkstk_darwin(v6, v7);
  v217 = &v200[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t i = type metadata accessor for DispatchTime(0LL);
  uint64_t v10 = *(void *)(i - 8);
  __chkstk_darwin(v11, v12);
  v212 = &v200[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v14, v15);
  uint64_t v17 = (uint64_t)&v200[-v16];
  uint64_t v230 = type metadata accessor for Date(0LL);
  uint64_t v224 = *(void *)(v230 - 8);
  __chkstk_darwin(v18, v19);
  uint64_t v211 = &v200[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v21, v22);
  v223 = &v200[-v23];
  __chkstk_darwin(v24, v25);
  unint64_t v27 = &v200[-v26];
  unint64_t v234 = type metadata accessor for IDSGroupEncryptionControllerParticipantPreKeyState(0LL);
  __chkstk_darwin(v28, v29);
  uint64_t v31 = &v200[-((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v32, v33);
  uint64_t v231 = &v200[-v34];
  sub_1003F5CB4(&qword_1009B97A8);
  __chkstk_darwin(v35, v36);
  uint64_t v38 = &v200[-((v37 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v226 = type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
  uint64_t v232 = *(void *)(v226 - 8);
  uint64_t v41 = __chkstk_darwin(v39, v40);
  uint64_t v228 = &v200[-((v42 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  char v43 = *(uint64_t (**)(uint64_t))((swift_isaMask & *(void *)v0) + 0x140LL);
  uint64_t v229 = v0;
  uint64_t v44 = v43(v41);
  sub_1004A9EFC(v44);
  uint64_t v46 = v45;
  id v215 = v47;
  id result = (id)swift_bridgeObjectRelease(v44);
  if (!v46) {
    return result;
  }
  swift_bridgeObjectRelease(v46);
  uint64_t v207 = v10;
LABEL_3:
  uint64_t v49 = &_swiftEmptySetSingleton;
  while (2)
  {
    uint64_t v213 = v2;
    unint64_t v214 = v1;
    uint64_t v245 = (uint64_t)v49;
    uint64_t v50 = (*(uint64_t (**)(void))((swift_isaMask & *(void *)v229) + 0x258LL))();
    uint64_t v52 = v50;
    uint64_t v53 = v226;
    uint64_t v209 = i;
    uint64_t v208 = v17;
    if ((v50 & 0xC000000000000001LL) != 0)
    {
      if (v50 >= 0) {
        v50 &= 0xFFFFFFFFFFFFFF8uLL;
      }
      uint64_t v54 = __CocoaSet.makeIterator()(v50);
      uint64_t v55 = type metadata accessor for IDSGroupEncryptionControllerParticipant(0LL);
      uint64_t v56 = sub_10040A2B0( (unint64_t *)&unk_1009B97C0,  type metadata accessor for IDSGroupEncryptionControllerParticipant,  (uint64_t)&protocol conformance descriptor for NSObject);
      uint64_t v50 = (uint64_t)Set.Iterator.init(_cocoa:)(v246, v54, v55, v56);
      uint64_t v52 = v246[0];
      uint64_t v227 = v246[1];
      uint64_t v57 = v246[2];
      uint64_t v2 = v246[3];
      uint64_t i = v246[4];
    }

    else
    {
      uint64_t v2 = 0LL;
      uint64_t v58 = -1LL << *(_BYTE *)(v50 + 32);
      uint64_t v59 = *(void *)(v50 + 56);
      uint64_t v227 = v50 + 56;
      uint64_t v57 = ~v58;
      uint64_t v60 = -v58;
      if (v60 < 64) {
        uint64_t v61 = ~(-1LL << v60);
      }
      else {
        uint64_t v61 = -1LL;
      }
      uint64_t i = v61 & v59;
    }

    uint64_t v222 = v52 & 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v210 = v57;
    int64_t v225 = (unint64_t)(v57 + 64) >> 6;
    uint64_t v216 = 1LL;
    double v62 = 0.0;
    *(void *)&__int128 v51 = 138412546LL;
    __int128 v206 = v51;
    uint64_t v221 = (char *)&type metadata for Swift.AnyObject + 8;
    uint64_t v233 = (void *)v52;
LABEL_13:
    uint64_t v17 = v2;
    unint64_t v63 = i;
    while (v52 < 0)
    {
      uint64_t v66 = __CocoaSet.Iterator.next()(v50);
      if (!v66) {
        goto LABEL_66;
      }
      uint64_t v67 = v66;
      v247[0] = v66;
      uint64_t v68 = type metadata accessor for IDSGroupEncryptionControllerParticipant(0LL);
      swift_unknownObjectRetain(v67, v69);
      swift_dynamicCast(&aBlock, v247, v221, v68, 7LL);
      unint64_t v1 = (unint64_t)aBlock;
      id v71 = (id)swift_unknownObjectRelease(v67, v70);
      uint64_t v2 = v17;
      uint64_t i = v63;
      if (!v1) {
        goto LABEL_66;
      }
LABEL_38:
      (*(void (**)(id))((swift_isaMask & *(void *)v1) + 0x108LL))(v71);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v232 + 48))(v38, 1LL, v53) == 1)
      {
        uint64_t v75 = sub_10040A274((uint64_t)v38, &qword_1009B97A8);
      }

      else
      {
        uint64_t v76 = v228;
        sub_1003F600C((uint64_t)v38, (uint64_t)v228, type metadata accessor for IDSGroupEncryptionPublicIdentity);
        if ((sub_1004D32E8() & 1) == 0)
        {
          uint64_t v64 = v231;
          swift_storeEnumTagMultiPayload(v231, v234, 2LL);
          (*(void (**)(_BYTE *))((swift_isaMask & *(void *)v1) + 0xD8LL))(v64);

          uint64_t v50 = sub_1003F6050((uint64_t)v76, type metadata accessor for IDSGroupEncryptionPublicIdentity);
LABEL_15:
          uint64_t v17 = v2;
          unint64_t v63 = i;
          goto LABEL_16;
        }

        uint64_t v75 = sub_1003F6050((uint64_t)v76, type metadata accessor for IDSGroupEncryptionPublicIdentity);
      }

      uint64_t v77 = v230;
      (*(void (**)(uint64_t))((swift_isaMask & *(void *)v1) + 0xD0LL))(v75);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v31, v234);
      if (EnumCaseMultiPayload)
      {
        if (EnumCaseMultiPayload != 2)
        {
          v203 = v27;
          uint64_t v88 = v224;
          os_log_type_t v89 = *(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v224 + 32);
          uint64_t v90 = v211;
          uint64_t v205 = v31;
          uint64_t v91 = v89(v211, v31, v77);
          uint64_t v92 = v223;
          Date.init()(v91);
          double v93 = Date.timeIntervalSince(_:)(v90);
          uint64_t v204 = *(void (**)(_BYTE *, uint64_t))(v88 + 8);
          v204(v92, v77);
          uint64_t v94 = *(void *)&v229[OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_config];
          uint64_t v95 = OBJC_IVAR____TtC17identityservicesd31IDSGroupEncryptionConfiguration_preKeyRequestTimeout;
          if (*(double *)(v94
                         + OBJC_IVAR____TtC17identityservicesd31IDSGroupEncryptionConfiguration_preKeyRequestTimeout) >= v93)
          {

            if ((v216 & 1) != 0) {
              double v105 = *(double *)(v94 + v95) - v93;
            }
            else {
              double v105 = v62;
            }
            else {
              double v62 = *(double *)(v94 + v95) - v93;
            }
            uint64_t v216 = 0LL;
          }

          else
          {
            uint64_t v96 = v229;
            id v97 = (id)v1;
            uint64_t v98 = (os_log_s *)Logger.logObject.getter(v97);
            os_log_type_t v99 = static os_log_type_t.error.getter();
            uint64_t v202 = v98;
            int v201 = v99;
            if (os_log_type_enabled(v98, v99))
            {
              uint64_t v100 = swift_slowAlloc(22LL, -1LL);
              uint64_t v101 = (unint64_t *)swift_slowAlloc(8LL, -1LL);
              *(_DWORD *)uint64_t v100 = v206;
              *(void *)(v100 + 4) = v97;
              *uint64_t v101 = v1;
              unint64_t v1 = (unint64_t)v101;
              *(_WORD *)(v100 + 1sub_10040A648(v1 + 2) = 2048;
              *(void *)(v100 + 14) = *(void *)(v94 + v95);

              uint64_t v102 = v202;
              _os_log_impl( (void *)&_mh_execute_header,  v202,  (os_log_type_t)v201,  "checkRemotePreKeys(): timeout requesting preKey for participant %@ (timeout: %f)",  (uint8_t *)v100,  0x16u);
              uint64_t v103 = sub_1003F5CB4(&qword_1009B92C8);
              swift_arrayDestroy(v1, 1LL, v103);
              swift_slowDealloc(v1, -1LL, -1LL);
              swift_slowDealloc(v100, -1LL, -1LL);
            }

            else
            {
            }
          }

          unint64_t v27 = v203;
          uint64_t v52 = (uint64_t)v233;
          uint64_t v50 = ((uint64_t (*)(_BYTE *, uint64_t))v204)(v211, v230);
          uint64_t v31 = v205;
          goto LABEL_13;
        }

        sub_1004ADAA8( (Swift::Int *)&aBlock,  (void *)v1,  type metadata accessor for IDSGroupEncryptionControllerParticipant,  (uint64_t *)&unk_1009B97D0);

        goto LABEL_15;
      }

      uint64_t v79 = v224;
      uint64_t v80 = v31;
      uint64_t v81 = (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v224 + 32))(v27, v31, v77);
      uint64_t v82 = v223;
      Date.init()(v81);
      double v83 = Date.timeIntervalSince(_:)(v27);
      unint64_t v84 = *(void (**)(_BYTE *, uint64_t))(v79 + 8);
      v84(v82, v77);
      uint64_t v85 = *(void *)&v229[OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_config];
      uint64_t v86 = v77;
      uint64_t v87 = OBJC_IVAR____TtC17identityservicesd31IDSGroupEncryptionConfiguration_preKeyRequestDelayDuration;
      if (*(double *)(v85
                     + OBJC_IVAR____TtC17identityservicesd31IDSGroupEncryptionConfiguration_preKeyRequestDelayDuration) >= v83)
      {

        if ((v216 & 1) != 0) {
          double v104 = *(double *)(v85 + v87) - v83;
        }
        else {
          double v104 = v62;
        }
        else {
          double v62 = *(double *)(v85 + v87) - v83;
        }
        uint64_t v50 = ((uint64_t (*)(_BYTE *, uint64_t))v84)(v27, v86);
        uint64_t v216 = 0LL;
        uint64_t v31 = v80;
        uint64_t v53 = v226;
        uint64_t v52 = (uint64_t)v233;
        goto LABEL_13;
      }

      sub_1004ADAA8( (Swift::Int *)&aBlock,  (void *)v1,  type metadata accessor for IDSGroupEncryptionControllerParticipant,  (uint64_t *)&unk_1009B97D0);

      uint64_t v50 = ((uint64_t (*)(_BYTE *, uint64_t))v84)(v27, v86);
      uint64_t v17 = v2;
      unint64_t v63 = i;
      uint64_t v31 = v80;
      uint64_t v53 = v226;
LABEL_16:
      uint64_t v52 = (uint64_t)v233;
    }

    if (v63)
    {
      uint64_t i = (v63 - 1) & v63;
      unint64_t v65 = __clz(__rbit64(v63)) | (v17 << 6);
      uint64_t v2 = v17;
      goto LABEL_37;
    }

    int64_t v72 = v17 + 1;
    if (__OFADD__(v17, 1LL))
    {
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      if (_CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
      {
        sub_10041C0F0((uint64_t)_swiftEmptyArrayStorage);
        continue;
      }

      goto LABEL_3;
    }

    break;
  }

  if (v72 >= v225) {
    goto LABEL_66;
  }
  unint64_t v73 = *(void *)(v227 + 8 * v72);
  uint64_t v2 = v17 + 1;
  if (v73) {
    goto LABEL_36;
  }
  uint64_t v2 = v17 + 2;
  if (v17 + 2 >= v225) {
    goto LABEL_66;
  }
  unint64_t v73 = *(void *)(v227 + 8 * v2);
  if (v73) {
    goto LABEL_36;
  }
  uint64_t v2 = v17 + 3;
  if (v17 + 3 >= v225) {
    goto LABEL_66;
  }
  unint64_t v73 = *(void *)(v227 + 8 * v2);
  if (v73) {
    goto LABEL_36;
  }
  uint64_t v2 = v17 + 4;
  if (v17 + 4 >= v225) {
    goto LABEL_66;
  }
  unint64_t v73 = *(void *)(v227 + 8 * v2);
  if (v73)
  {
LABEL_36:
    uint64_t i = (v73 - 1) & v73;
    unint64_t v65 = __clz(__rbit64(v73)) + (v2 << 6);
LABEL_37:
    id v71 = *(id *)(*(void *)(v52 + 48) + 8 * v65);
    unint64_t v1 = (unint64_t)v71;
    if (!v71) {
      goto LABEL_66;
    }
    goto LABEL_38;
  }

  uint64_t v74 = v17 + 5;
  while (v225 != v74)
  {
    unint64_t v73 = *(void *)(v227 + 8 * v74++);
    if (v73)
    {
      uint64_t v2 = v74 - 1;
      uint64_t v52 = (uint64_t)v233;
      goto LABEL_36;
    }
  }

LABEL_124:
    swift_bridgeObjectRelease(v143);
    uint64_t v178 = _swiftEmptyArrayStorage;
LABEL_125:
    uint64_t v179 = sub_100438A1C( (uint64_t)v178,  &qword_1009BAC10,  &OBJC_CLASS___IDSDestination_ptr,  &qword_1009BAC18,  &qword_1009BB130);
    swift_bridgeObjectRelease(v178);
    Swift::Int v180 = sub_1004A9F84(v179);
    swift_bridgeObjectRelease(v179);
    Class v181 = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v180);
    id v182 = [(id)objc_opt_self(IDSDestination) destinationWithDestinations:v181];

    id result = (id)im_primary_queue(v183, v184);
    if (result)
    {
      uint64_t v185 = result;
      swift_bridgeObjectRelease(v245);
      uint64_t v186 = (void *)swift_allocObject(&unk_1009074E8, 40LL, 7LL);
      id v187 = v229;
      id v188 = v215;
      v186[2] = v229;
      v186[3] = v188;
      v186[4] = v182;
      v239 = sub_1004B27B0;
      uint64_t v240 = v186;
      uint64_t aBlock = _NSConcreteStackBlock;
      uint64_t v236 = 1107296256LL;
      uint64_t v237 = sub_1003F8400;
      uint64_t v238 = &unk_100907500;
      uint64_t v189 = _Block_copy(&aBlock);
      id v190 = v187;
      id v191 = v188;
      id v192 = v182;
      unint64_t v193 = v217;
      static DispatchQoS.unspecified.getter(v192);
      uint64_t v241 = _swiftEmptyArrayStorage;
      uint64_t v194 = sub_10040A2B0( (unint64_t *)&unk_1009BAC40,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v195 = sub_1003F5CB4((uint64_t *)&unk_1009B9870);
      uint64_t v196 = sub_1004021DC((unint64_t *)&qword_1009BAC50, (uint64_t *)&unk_1009B9870);
      uint64_t v197 = v220;
      uint64_t v198 = v195;
      unint64_t v199 = v214;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v241, v198, v196, v214, v194);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v193, v197, v189);
      _Block_release(v189);

      (*(void (**)(_BYTE *, unint64_t))(v213 + 8))(v197, v199);
      (*(void (**)(_BYTE *, uint64_t))(v218 + 8))(v193, v219);
      return (id)swift_release(v240);
    }

LABEL_102:
  return (id)swift_bridgeObjectRelease(v120);
}

      swift_release(v233);
      v212 = (os_log_t *)v224;
      swift_bridgeObjectRelease(*v224);
      _BYTE *v212 = v66;
      uint64_t v213 = v254;
      swift_bridgeObjectRelease(v212[2]);
      v212[2] = v213;
      id result = swift_bridgeObjectRelease(v212[1]);
      v212[1] = v230;
      return result;
    }

void *sub_1004A9EFC(uint64_t a1)
{
  id result = (void *)sub_1004B0EC8(a1);
  if ((v4 & 1) != 0) {
    goto LABEL_8;
  }
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }

  if (result == (void *)(1LL << *(_BYTE *)(a1 + 32))) {
    return 0LL;
  }
  else {
    return sub_1004B0F50(&v5, (uint64_t)result, v3, 0LL, a1);
  }
}

Swift::Int sub_1004A9F84(uint64_t a1)
{
  uint64_t v1 = a1;
  unint64_t v2 = a1 & 0xC000000000000001LL;
  if ((a1 & 0xC000000000000001LL) == 0)
  {
    uint64_t v3 = *(void *)(a1 + 16);
    if (v3) {
      goto LABEL_5;
    }
LABEL_11:
    char v4 = &_swiftEmptySetSingleton;
    if (v2) {
      goto LABEL_6;
    }
LABEL_12:
    uint64_t v13 = -1LL << *(_BYTE *)(v1 + 32);
    uint64_t v38 = v1 + 56;
    uint64_t v10 = ~v13;
    uint64_t v14 = -v13;
    if (v14 < 64) {
      uint64_t v15 = ~(-1LL << v14);
    }
    else {
      uint64_t v15 = -1LL;
    }
    unint64_t v12 = v15 & *(void *)(v1 + 56);
    swift_bridgeObjectRetain(v1);
    Swift::Int result = swift_retain(v4);
    uint64_t v11 = 0LL;
    goto LABEL_16;
  }

  if (a1 >= 0) {
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  }
  uint64_t v3 = __CocoaSet.count.getter(a1);
  if (!v3) {
    goto LABEL_11;
  }
LABEL_5:
  sub_1003F5CB4(&qword_1009BB828);
  char v4 = (void *)static _SetStorage.allocate(capacity:)(v3);
  if (!v2) {
    goto LABEL_12;
  }
LABEL_6:
  if (v1 < 0) {
    uint64_t v5 = v1;
  }
  else {
    uint64_t v5 = v1 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v1);
  swift_retain(v4);
  uint64_t v6 = __CocoaSet.makeIterator()(v5);
  uint64_t v7 = sub_10041D3C4(0LL, &qword_1009BAC10, &OBJC_CLASS___IDSDestination_ptr);
  uint64_t v8 = sub_100438928(&qword_1009BAC18, &qword_1009BAC10, &OBJC_CLASS___IDSDestination_ptr);
  Swift::Int result = (Swift::Int)Set.Iterator.init(_cocoa:)(v45, v6, v7, v8);
  uint64_t v1 = v45[0];
  uint64_t v38 = v45[1];
  uint64_t v10 = v45[2];
  uint64_t v11 = v45[3];
  unint64_t v12 = v45[4];
LABEL_16:
  int64_t v37 = (unint64_t)(v10 + 64) >> 6;
  uint64_t v16 = (char *)(v4 + 7);
  while (v1 < 0)
  {
    uint64_t v21 = __CocoaSet.Iterator.next()(result);
    if (!v21) {
      goto LABEL_50;
    }
    *(void *)&v42[0] = v21;
    uint64_t v22 = sub_10041D3C4(0LL, &qword_1009BAC10, &OBJC_CLASS___IDSDestination_ptr);
    swift_dynamicCast(&v44, v42, (char *)&type metadata for Swift.AnyObject + 8, v22, 7LL);
    uint64_t v23 = v44;
LABEL_41:
    *(void *)&__int128 v39 = v23;
    uint64_t v29 = sub_10041D3C4(0LL, &qword_1009BAC10, &OBJC_CLASS___IDSDestination_ptr);
    swift_dynamicCast(v42, &v39, v29, &type metadata for AnyHashable, 7LL);
    __int128 v39 = v42[0];
    __int128 v40 = v42[1];
    uint64_t v41 = v43;
    Swift::Int result = AnyHashable._rawHashValue(seed:)(v4[5]);
    uint64_t v30 = -1LL << *((_BYTE *)v4 + 32);
    unint64_t v31 = result & ~v30;
    unint64_t v32 = v31 >> 6;
    if (((-1LL << v31) & ~*(void *)&v16[8 * (v31 >> 6)]) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1LL << v31) & ~*(void *)&v16[8 * (v31 >> 6)])) | v31 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      char v33 = 0;
      unint64_t v34 = (unint64_t)(63 - v30) >> 6;
      do
      {
        if (++v32 == v34 && (v33 & 1) != 0)
        {
          __break(1u);
          goto LABEL_51;
        }

        BOOL v35 = v32 == v34;
        if (v32 == v34) {
          unint64_t v32 = 0LL;
        }
        v33 |= v35;
        uint64_t v36 = *(void *)&v16[8 * v32];
      }

      while (v36 == -1);
      unint64_t v17 = __clz(__rbit64(~v36)) + (v32 << 6);
    }

    *(void *)&v16[(v17 >> 3) & 0x1FFFFFFFFFFFFFF8LL] |= 1LL << v17;
    uint64_t v18 = v4[6] + 40 * v17;
    *(_OWORD *)uint64_t v18 = v39;
    *(_OWORD *)(v18 + swift_unknownObjectWeakDestroy(v0 + 16) = v40;
    *(void *)(v18 + 3sub_10040A648(v1 + 2) = v41;
    ++v4[2];
  }

  if (v12)
  {
    unint64_t v19 = __clz(__rbit64(v12));
    v12 &= v12 - 1;
    unint64_t v20 = v19 | (v11 << 6);
LABEL_40:
    uint64_t v23 = *(void **)(*(void *)(v1 + 48) + 8 * v20);
    uint64_t v44 = v23;
    id v28 = v23;
    goto LABEL_41;
  }

  int64_t v24 = v11 + 1;
  if (!__OFADD__(v11, 1LL))
  {
    if (v24 >= v37) {
      goto LABEL_50;
    }
    unint64_t v25 = *(void *)(v38 + 8 * v24);
    uint64_t v26 = v11 + 1;
    if (!v25)
    {
      uint64_t v26 = v11 + 2;
      if (v11 + 2 >= v37) {
        goto LABEL_50;
      }
      unint64_t v25 = *(void *)(v38 + 8 * v26);
      if (!v25)
      {
        uint64_t v26 = v11 + 3;
        if (v11 + 3 >= v37) {
          goto LABEL_50;
        }
        unint64_t v25 = *(void *)(v38 + 8 * v26);
        if (!v25)
        {
          uint64_t v26 = v11 + 4;
          if (v11 + 4 >= v37) {
            goto LABEL_50;
          }
          unint64_t v25 = *(void *)(v38 + 8 * v26);
          if (!v25)
          {
            uint64_t v26 = v11 + 5;
            if (v11 + 5 >= v37) {
              goto LABEL_50;
            }
            unint64_t v25 = *(void *)(v38 + 8 * v26);
            if (!v25)
            {
              uint64_t v27 = v11 + 6;
              while (v37 != v27)
              {
                unint64_t v25 = *(void *)(v38 + 8 * v27++);
                if (v25)
                {
                  uint64_t v26 = v27 - 1;
                  goto LABEL_39;
                }
              }

void sub_1004AA3C0()
{
  uint64_t v1 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x140LL))();
  uint64_t v2 = v1;
  int64_t v3 = 0LL;
  uint64_t v4 = v1 + 64;
  uint64_t v5 = 1LL << *(_BYTE *)(v1 + 32);
  uint64_t v6 = -1LL;
  if (v5 < 64) {
    uint64_t v6 = ~(-1LL << v5);
  }
  unint64_t v7 = v6 & *(void *)(v1 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }

    int64_t v14 = v3 + 1;
    if (__OFADD__(v3, 1LL))
    {
      __break(1u);
      goto LABEL_25;
    }

    if (v14 >= v8) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v14);
    ++v3;
    if (!v15)
    {
      int64_t v3 = v14 + 1;
      if (v14 + 1 >= v8) {
        goto LABEL_23;
      }
      unint64_t v15 = *(void *)(v4 + 8 * v3);
      if (!v15)
      {
        int64_t v3 = v14 + 2;
        if (v14 + 2 >= v8) {
          goto LABEL_23;
        }
        unint64_t v15 = *(void *)(v4 + 8 * v3);
        if (!v15)
        {
          int64_t v3 = v14 + 3;
          if (v14 + 3 >= v8) {
            goto LABEL_23;
          }
          unint64_t v15 = *(void *)(v4 + 8 * v3);
          if (!v15) {
            break;
          }
        }
      }
    }

uint64_t sub_1004AA570(double a1)
{
  int64_t v3 = (os_unfair_lock_s *)(*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x110LL))();
  os_unfair_lock_lock(v3 + 4);
  sub_1004AA5F4(v1, a1);
  os_unfair_lock_unlock(v3 + 4);
  swift_release(v3);
  return (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x378LL))();
}

uint64_t sub_1004AA5F4(void *a1, double a2)
{
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v6, v7);
  unint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1003F5CB4(&qword_1009BC130);
  uint64_t v12 = __chkstk_darwin(v10, v11);
  int64_t v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = Date.init()(v12);
  Date.advanced(by:)(v15, a2);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v5 + 56))(v14, 0LL, 1LL, v4);
  return (*(uint64_t (**)(char *))((swift_isaMask & *a1) + 0x238LL))(v14);
}

void sub_1004AA7C4()
{
  uint64_t v1 = v0;
  uint64_t v2 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x140LL))();
  uint64_t v3 = v2;
  int64_t v4 = 0LL;
  uint64_t v5 = v2 + 64;
  uint64_t v6 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v7 = -1LL;
  if (v6 < 64) {
    uint64_t v7 = ~(-1LL << v6);
  }
  unint64_t v8 = v7 & *(void *)(v2 + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_5;
    }

    int64_t v15 = v4 + 1;
    if (__OFADD__(v4, 1LL))
    {
      __break(1u);
      goto LABEL_25;
    }

    if (v15 >= v9) {
      goto LABEL_23;
    }
    unint64_t v16 = *(void *)(v5 + 8 * v15);
    ++v4;
    if (!v16)
    {
      int64_t v4 = v15 + 1;
      if (v15 + 1 >= v9) {
        goto LABEL_23;
      }
      unint64_t v16 = *(void *)(v5 + 8 * v4);
      if (!v16)
      {
        int64_t v4 = v15 + 2;
        if (v15 + 2 >= v9) {
          goto LABEL_23;
        }
        unint64_t v16 = *(void *)(v5 + 8 * v4);
        if (!v16)
        {
          int64_t v4 = v15 + 3;
          if (v15 + 3 >= v9) {
            goto LABEL_23;
          }
          unint64_t v16 = *(void *)(v5 + 8 * v4);
          if (!v16) {
            break;
          }
        }
      }
    }

uint64_t sub_1004AA998()
{
  uint64_t v1 = v0;
  uint64_t v2 = (os_unfair_lock_s *)(*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x110LL))();
  os_unfair_lock_lock(v2 + 4);
  sub_1004B23E4((char *)&v5);
  int v3 = v5;
  os_unfair_lock_unlock(v2 + 4);
  uint64_t result = swift_release(v2);
  if (v3 == 1) {
    return (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x370LL))();
  }
  return result;
}

uint64_t sub_1004AAA4C@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  uint64_t v69 = a2;
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v66 = *(void *)(v3 - 8);
  uint64_t v67 = v3;
  __chkstk_darwin(v4, v5);
  unint64_t v65 = (char *)v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v63 = *(void *)(v7 - 8);
  uint64_t v64 = v7;
  __chkstk_darwin(v8, v9);
  double v62 = (char *)v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v59 = *(void *)(v11 - 8);
  uint64_t v60 = (void (*)(void, void))v11;
  __chkstk_darwin(v12, v13);
  int64_t v15 = (void *)((char *)v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v68 = type metadata accessor for DispatchTime(0LL);
  uint64_t v58 = *(void *)(v68 - 8);
  __chkstk_darwin(v16, v17);
  unint64_t v19 = (char *)v57 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v20, v21);
  uint64_t v61 = (char *)v57 - v22;
  sub_1003F5CB4(&qword_1009BC130);
  __chkstk_darwin(v23, v24);
  uint64_t v26 = (char *)v57 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v27, v28);
  uint64_t v30 = (char *)v57 - v29;
  uint64_t v31 = type metadata accessor for Date(0LL);
  uint64_t v32 = *(void *)(v31 - 8);
  uint64_t v35 = __chkstk_darwin(v33, v34);
  int64_t v37 = (char *)v57 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(uint64_t))((swift_isaMask & *a1) + 0x230LL))(v35);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1LL, v31) == 1)
  {
    uint64_t result = sub_10040A274((uint64_t)v30, &qword_1009BC130);
LABEL_9:
    char v42 = 0;
    goto LABEL_10;
  }

  uint64_t v39 = (*(uint64_t (**)(char *, char *, uint64_t))(v32 + 32))(v37, v30, v31);
  double v41 = Date.timeIntervalSinceNow.getter(v39);
  if (v41 < 1.0)
  {
    char v42 = 1;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v32 + 56))(v26, 1LL, 1LL, v31);
    (*(void (**)(char *))((swift_isaMask & *a1) + 0x238LL))(v26);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v37, v31);
LABEL_10:
    *uint64_t v69 = v42;
    return result;
  }

  uint64_t v43 = *(void *)((char *)a1 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_q);
  uint64_t result = static DispatchTime.now()(v40);
  if ((~*(void *)&v41 & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_12;
  }

  if (v41 <= -9.22337204e18)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  if (v41 < 9.22337204e18)
  {
    *int64_t v15 = (uint64_t)v41;
    uint64_t v45 = v59;
    uint64_t v44 = v60;
    (*(void (**)(void *, void, void (*)(void, void)))(v59 + 104))( v15,  enum case for DispatchTimeInterval.seconds(_:),  v60);
    uint64_t v46 = v61;
    v57[1] = v43;
    DispatchTime.advanced(by:)(v15);
    (*(void (**)(void *, void))(v45 + 8))(v15, v44);
    uint64_t v60 = *(void (**)(void, void))(v58 + 8);
    v60(v19, v68);
    uint64_t v47 = swift_allocObject(&unk_100907498, 24LL, 7LL);
    *(void *)(v47 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
    aBlock[4] = sub_1004B272C;
    uint64_t v72 = v47;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1003F8400;
    aBlock[3] = &unk_1009074B0;
    char v48 = _Block_copy(aBlock);
    uint64_t v49 = a1;
    uint64_t v50 = v62;
    static DispatchQoS.unspecified.getter(v49);
    uint64_t v70 = _swiftEmptyArrayStorage;
    uint64_t v51 = sub_10040A2B0( (unint64_t *)&unk_1009BAC40,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v52 = sub_1003F5CB4((uint64_t *)&unk_1009B9870);
    uint64_t v53 = sub_1004021DC((unint64_t *)&qword_1009BAC50, (uint64_t *)&unk_1009B9870);
    uint64_t v54 = v65;
    uint64_t v55 = v52;
    uint64_t v56 = v67;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v70, v55, v53, v67, v51);
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v46, v50, v54, v48);
    _Block_release(v48);
    (*(void (**)(char *, uint64_t))(v66 + 8))(v54, v56);
    (*(void (**)(char *, uint64_t))(v63 + 8))(v50, v64);
    v60(v46, v68);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v37, v31);
    uint64_t result = swift_release(v72);
    goto LABEL_9;
  }

uint64_t sub_1004AAF20()
{
  uint64_t v1 = (os_unfair_lock_s *)(*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x110LL))();
  os_unfair_lock_lock(v1 + 4);
  sub_1004AAF80(v0);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release(v1);
}

uint64_t sub_1004AAF80(void *a1)
{
  __n128 v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v5, 1LL, 1LL, v6);
  return (*(uint64_t (**)(char *))((swift_isaMask & *a1) + 0x238LL))(v5);
}

void *sub_1004AB0B8()
{
  uint64_t v1 = type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer(0LL);
  __chkstk_darwin(v2, v3);
  __n128 v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6, v7);
  __n128 v9 = (char *)&v29 - v8;
  sub_1003F5CB4(&qword_1009B95A0);
  __chkstk_darwin(v10, v11);
  __n128 v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
  __chkstk_darwin(v14, v15);
  __n128 v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18, v19);
  __n128 v21 = (char *)&v29 - v20;
  uint64_t v24 = __chkstk_darwin(v22, v23);
  uint64_t v26 = (char *)&v29 - v25;
  uint64_t v30 = &_swiftEmptySetSingleton;
  (*(void (**)(uint64_t))((swift_isaMask & **(void **)(v0
                                                                 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_identityController))
                                  + 0x130LL))(v24);
  uint64_t v27 = type metadata accessor for IDSGroupEncryptionFullIdentity(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v27 - 8) + 48LL))(v13, 1LL, v27) == 1)
  {
    sub_10040A274((uint64_t)v13, &qword_1009B95A0);
    return &_swiftEmptySetSingleton;
  }

  else
  {
    sub_1003F5FC8((uint64_t)v13, (uint64_t)v21, type metadata accessor for IDSGroupEncryptionPublicIdentity);
    sub_1003F6050((uint64_t)v13, type metadata accessor for IDSGroupEncryptionFullIdentity);
    sub_1003F600C((uint64_t)v21, (uint64_t)v26, type metadata accessor for IDSGroupEncryptionPublicIdentity);
    sub_1003F5FC8((uint64_t)v26, (uint64_t)v17, type metadata accessor for IDSGroupEncryptionPublicIdentity);
    sub_10040C384((uint64_t)v17, (uint64_t)v5);
    swift_storeEnumTagMultiPayload(v5, v1, 2LL);
    sub_10041AC80((uint64_t)v9, (uint64_t)v5);
    sub_1003F6050((uint64_t)v9, type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
    sub_1003F6050((uint64_t)v26, type metadata accessor for IDSGroupEncryptionPublicIdentity);
    return v30;
  }

void sub_1004AB300()
{
  uint64_t v1 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x140LL))();
  uint64_t v2 = v1;
  int64_t v3 = 0LL;
  uint64_t v4 = v1 + 64;
  uint64_t v5 = 1LL << *(_BYTE *)(v1 + 32);
  uint64_t v6 = -1LL;
  if (v5 < 64) {
    uint64_t v6 = ~(-1LL << v5);
  }
  unint64_t v7 = v6 & *(void *)(v1 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }

    int64_t v14 = v3 + 1;
    if (__OFADD__(v3, 1LL))
    {
      __break(1u);
      goto LABEL_23;
    }

    if (v14 >= v8) {
      goto LABEL_21;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v14);
    ++v3;
    if (!v15)
    {
      int64_t v3 = v14 + 1;
      if (v14 + 1 >= v8) {
        goto LABEL_21;
      }
      unint64_t v15 = *(void *)(v4 + 8 * v3);
      if (!v15)
      {
        int64_t v3 = v14 + 2;
        if (v14 + 2 >= v8) {
          goto LABEL_21;
        }
        unint64_t v15 = *(void *)(v4 + 8 * v3);
        if (!v15) {
          break;
        }
      }
    }

void sub_1004AB49C()
{
  uint64_t v1 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x140LL))();
  uint64_t v2 = v1;
  int64_t v3 = 0LL;
  uint64_t v4 = v1 + 64;
  uint64_t v5 = 1LL << *(_BYTE *)(v1 + 32);
  uint64_t v6 = -1LL;
  if (v5 < 64) {
    uint64_t v6 = ~(-1LL << v5);
  }
  unint64_t v7 = v6 & *(void *)(v1 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }

    int64_t v14 = v3 + 1;
    if (__OFADD__(v3, 1LL))
    {
      __break(1u);
      goto LABEL_25;
    }

    if (v14 >= v8) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v14);
    ++v3;
    if (!v15)
    {
      int64_t v3 = v14 + 1;
      if (v14 + 1 >= v8) {
        goto LABEL_23;
      }
      unint64_t v15 = *(void *)(v4 + 8 * v3);
      if (!v15)
      {
        int64_t v3 = v14 + 2;
        if (v14 + 2 >= v8) {
          goto LABEL_23;
        }
        unint64_t v15 = *(void *)(v4 + 8 * v3);
        if (!v15)
        {
          int64_t v3 = v14 + 3;
          if (v14 + 3 >= v8) {
            goto LABEL_23;
          }
          unint64_t v15 = *(void *)(v4 + 8 * v3);
          if (!v15) {
            break;
          }
        }
      }
    }

void sub_1004AB64C()
{
  uint64_t v1 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x140LL))();
  uint64_t v2 = v1;
  int64_t v3 = 0LL;
  uint64_t v4 = v1 + 64;
  uint64_t v5 = 1LL << *(_BYTE *)(v1 + 32);
  uint64_t v6 = -1LL;
  if (v5 < 64) {
    uint64_t v6 = ~(-1LL << v5);
  }
  unint64_t v7 = v6 & *(void *)(v1 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }

    int64_t v14 = v3 + 1;
    if (__OFADD__(v3, 1LL))
    {
      __break(1u);
      goto LABEL_25;
    }

    if (v14 >= v8) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v14);
    ++v3;
    if (!v15)
    {
      int64_t v3 = v14 + 1;
      if (v14 + 1 >= v8) {
        goto LABEL_23;
      }
      unint64_t v15 = *(void *)(v4 + 8 * v3);
      if (!v15)
      {
        int64_t v3 = v14 + 2;
        if (v14 + 2 >= v8) {
          goto LABEL_23;
        }
        unint64_t v15 = *(void *)(v4 + 8 * v3);
        if (!v15)
        {
          int64_t v3 = v14 + 3;
          if (v14 + 3 >= v8) {
            goto LABEL_23;
          }
          unint64_t v15 = *(void *)(v4 + 8 * v3);
          if (!v15) {
            break;
          }
        }
      }
    }

void sub_1004AB7FC()
{
  uint64_t v1 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x140LL))();
  uint64_t v2 = v1;
  int64_t v3 = 0LL;
  uint64_t v4 = v1 + 64;
  uint64_t v5 = 1LL << *(_BYTE *)(v1 + 32);
  uint64_t v6 = -1LL;
  if (v5 < 64) {
    uint64_t v6 = ~(-1LL << v5);
  }
  unint64_t v7 = v6 & *(void *)(v1 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }

    int64_t v14 = v3 + 1;
    if (__OFADD__(v3, 1LL))
    {
      __break(1u);
      goto LABEL_25;
    }

    if (v14 >= v8) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v14);
    ++v3;
    if (!v15)
    {
      int64_t v3 = v14 + 1;
      if (v14 + 1 >= v8) {
        goto LABEL_23;
      }
      unint64_t v15 = *(void *)(v4 + 8 * v3);
      if (!v15)
      {
        int64_t v3 = v14 + 2;
        if (v14 + 2 >= v8) {
          goto LABEL_23;
        }
        unint64_t v15 = *(void *)(v4 + 8 * v3);
        if (!v15)
        {
          int64_t v3 = v14 + 3;
          if (v14 + 3 >= v8) {
            goto LABEL_23;
          }
          unint64_t v15 = *(void *)(v4 + 8 * v3);
          if (!v15) {
            break;
          }
        }
      }
    }

void sub_1004AB9AC(uint64_t a1, uint64_t a2)
{
  int64_t v3 = v2;
  uint64_t v6 = *(uint64_t (**)(__n128))((swift_isaMask & *v2) + 0x140LL);
  __n128 v7 = swift_bridgeObjectRetain(a2);
  uint64_t v8 = v6(v7);
  if (*(void *)(v8 + 16))
  {
    unint64_t v9 = sub_100417D94(a1, a2);
    if ((v10 & 1) != 0)
    {
      *(id *)(*(void *)(v8 + 56) + 8 * v9);
      swift_bridgeObjectRelease(a2);
      swift_bridgeObjectRelease(v8);
      return;
    }
  }

  uint64_t v74 = a1;
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(v8);
  type metadata accessor for IDSGroupEncryptionKeyMaterialController(0LL);
  uint64_t v11 = *(void *)((char *)v3 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_id);
  uint64_t v12 = *(void *)((char *)v3 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_id + 8);
  uint64_t v72 = (uint64_t)v3 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_cryptoHandler;
  sub_100401ACC( (uint64_t)v3 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_cryptoHandler,  (uint64_t)v76);
  __n128 v13 = *(_BYTE **)((char *)v3 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_config);
  uint64_t v14 = *(void *)&v13[OBJC_IVAR____TtC17identityservicesd31IDSGroupEncryptionConfiguration_mkmRollDuration];
  unint64_t v15 = *(uint64_t (**)(__n128))((swift_isaMask & *v3) + 0x3D8LL);
  __n128 v16 = swift_bridgeObjectRetain(v12);
  char v17 = v15(v16);
  uint64_t v18 = OBJC_IVAR____TtC17identityservicesd31IDSGroupEncryptionConfiguration_isRatchetEnabled;
  uint64_t v70 = sub_1003F7990( 0LL,  0LL,  v11,  v12,  v76,  v14,  v14,  0,  1,  3,  v17 & 1,  v13[OBJC_IVAR____TtC17identityservicesd31IDSGroupEncryptionConfiguration_isRatchetEnabled]);
  id v19 = [(id)objc_opt_self(IDSDaemon) sharedInstance];
  if (v19)
  {
    uint64_t v20 = v19;
    id v21 = [v19 persistenceManager];

    if (!v21)
    {
      __break(1u);
      return;
    }

    sub_1004F99D0(*(double *)&v13[OBJC_IVAR____TtC17identityservicesd31IDSGroupEncryptionConfiguration_mkmExpirationDuration] + 30.0);
  }

  sub_100401ACC(v72, (uint64_t)v76);
  char v22 = v13[v18];
  swift_bridgeObjectRetain(v12);
  uint64_t v68 = v11;
  __n128 v23 = sub_1003F7990(0LL, 0LL, v11, v12, v76, 0LL, 0LL, 1, 0, 4, 0, v22);
  type metadata accessor for IDSGroupEncryptionControllerGroupSession(0LL);
  uint64_t v24 = *(void **)((char *)v3 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_identityController);
  uint64_t v25 = *(void *)((char *)v3 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_pushHandler);
  sub_100401ACC(v72, (uint64_t)v76);
  uint64_t v26 = v12;
  uint64_t v27 = *(void *)((char *)v3 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_sessionProvider);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(v26);
  __n128 v28 = v13;
  id v29 = v24;
  swift_unknownObjectRetain(v25, v30);
  swift_unknownObjectRetain(v27, v31);
  uint64_t v32 = v70;
  uint64_t v33 = a2;
  __n128 v34 = v23;
  uint64_t v35 = v3;
  id v71 = v34;
  unint64_t v73 = v32;
  uint64_t v67 = v34;
  uint64_t v36 = v33;
  uint64_t v69 = v27;
  int64_t v37 = sub_10048BA58(v28, v68, v26, v74, v33, v29, v25, v76, v27, (uint64_t)v35, (uint64_t)&off_100907440, v32, v67);
  uint64_t v38 = (*(uint64_t (**)(void))((swift_isaMask & *v35) + 0x1E8LL))();
  (*(void (**)(uint64_t))((swift_isaMask & *(void *)v37) + 0x1A0LL))(v38);
  uint64_t v39 = *(uint64_t (**)(void *))((swift_isaMask & *(void *)v37) + 0x130LL);
  uint64_t v40 = v35;
  double v41 = (void (*)(void *, void))v39(v76);
  uint64_t v43 = v42;
  uint64_t v44 = (void *)*v42;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v42);
  *uint64_t v43 = v44;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v44 = sub_100417B94(0LL, v44[2] + 1LL, 1, v44);
    *uint64_t v43 = v44;
  }

  unint64_t v47 = v44[2];
  unint64_t v46 = v44[3];
  if (v47 >= v46 >> 1)
  {
    uint64_t v44 = sub_100417B94((void *)(v46 > 1), v47 + 1, 1, v44);
    *uint64_t v43 = v44;
  }

  _DWORD v44[2] = v47 + 1;
  char v48 = &v44[2 * v47];
  v48[4] = v40;
  v48[5] = &off_100907430;
  v41(v76, 0LL);
  type metadata accessor for IDSDSessionBlobProvider();
  uint64_t v50 = swift_unknownObjectRetain(v69, v49);
  uint64_t v51 = sub_1004B9E40(v50);
  uint64_t v52 = (void (*)(void *, void))v39(v76);
  uint64_t v54 = v53;
  uint64_t v55 = (void *)*v53;
  char v56 = swift_isUniquelyReferenced_nonNull_native(*v53);
  *uint64_t v54 = v55;
  if ((v56 & 1) == 0)
  {
    uint64_t v55 = sub_100417B94(0LL, v55[2] + 1LL, 1, v55);
    *uint64_t v54 = v55;
  }

  unint64_t v58 = v55[2];
  unint64_t v57 = v55[3];
  if (v58 >= v57 >> 1)
  {
    uint64_t v55 = sub_100417B94((void *)(v57 > 1), v58 + 1, 1, v55);
    *uint64_t v54 = v55;
  }

  v55[2] = v58 + 1;
  uint64_t v59 = &v55[2 * v58];
  v59[4] = v51;
  v59[5] = &off_1009079B0;
  v52(v76, 0LL);
  uint64_t v60 = *(uint64_t (**)(void *))((swift_isaMask & *v40) + 0x150LL);
  swift_bridgeObjectRetain(v36);
  uint64_t v61 = v37;
  double v62 = (void (*)(void *, void))v60(v76);
  uint64_t v64 = v63;
  char v65 = swift_isUniquelyReferenced_nonNull_native(*v63);
  uint64_t v75 = *v64;
  *uint64_t v64 = 0x8000000000000000LL;
  sub_1004B0D6C((uint64_t)v61, v74, v36, v65);
  uint64_t v66 = *v64;
  *uint64_t v64 = v75;
  swift_bridgeObjectRelease(v36);
  swift_bridgeObjectRelease(v66);
  v62(v76, 0LL);
}

uint64_t sub_1004ABF8C(uint64_t a1, uint64_t a2)
{
  int64_t v3 = v2;
  uint64_t v6 = *(uint64_t (**)(__n128))((swift_isaMask & *v2) + 0x140LL);
  __n128 v7 = swift_bridgeObjectRetain(a2);
  uint64_t v8 = v6(v7);
  if (*(void *)(v8 + 16) && (unint64_t v9 = sub_100417D94(a1, a2), (v10 & 1) != 0))
  {
    uint64_t v11 = *(id *)(*(void *)(v8 + 56) + 8 * v9);
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(v8);
    (*(void (**)(void *))((swift_isaMask & *v11) + 0x128LL))(_swiftEmptyArrayStorage);
  }

  else
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(v8);
  }

  uint64_t v12 = *(uint64_t (**)(_BYTE *, __n128))((swift_isaMask & *v3) + 0x150LL);
  __n128 v13 = swift_bridgeObjectRetain(a2);
  uint64_t v14 = (uint64_t (*)(_BYTE *, void))v12(v17, v13);
  unint64_t v15 = (void *)sub_1004AF6D8(a1, a2);
  swift_bridgeObjectRelease(a2);

  return v14(v17, 0LL);
}

uint64_t sub_1004AC118()
{
  return *(unsigned __int8 *)(v0
                            + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup__shortMKIEnabled);
}

void sub_1004AC168(char a1)
{
  char v2 = a1 & 1;
  uint64_t v3 = OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup__shortMKIEnabled;
  if (*((_BYTE *)v1 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup__shortMKIEnabled) == (a1 & 1))
  {
LABEL_25:
    *((_BYTE *)v1 + vsub_10040A648(v1 + 3) = v2;
    return;
  }

  uint64_t v24 = OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup__shortMKIEnabled;
  char v25 = a1 & 1;
  uint64_t v26 = v1;
  uint64_t v5 = (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x140LL))();
  int64_t v6 = 0LL;
  uint64_t v27 = v5 + 64;
  uint64_t v7 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v8 = -1LL;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  unint64_t v9 = v8 & *(void *)(v5 + 64);
  int64_t v28 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      unint64_t v10 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v11 = v10 | (v6 << 6);
      goto LABEL_6;
    }

    int64_t v21 = v6 + 1;
    if (__OFADD__(v6, 1LL))
    {
      __break(1u);
      goto LABEL_27;
    }

    if (v21 >= v28) {
      goto LABEL_24;
    }
    unint64_t v22 = *(void *)(v27 + 8 * v21);
    ++v6;
    if (!v22)
    {
      int64_t v6 = v21 + 1;
      if (v21 + 1 >= v28) {
        goto LABEL_24;
      }
      unint64_t v22 = *(void *)(v27 + 8 * v6);
      if (!v22)
      {
        int64_t v6 = v21 + 2;
        if (v21 + 2 >= v28) {
          goto LABEL_24;
        }
        unint64_t v22 = *(void *)(v27 + 8 * v6);
        if (!v22)
        {
          int64_t v6 = v21 + 3;
          if (v21 + 3 >= v28) {
            goto LABEL_24;
          }
          unint64_t v22 = *(void *)(v27 + 8 * v6);
          if (!v22) {
            break;
          }
        }
      }
    }

void (*sub_1004AC3AC(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(v1
                                + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup__shortMKIEnabled);
  return sub_1004AC3D0;
}

void sub_1004AC3D0(uint64_t a1)
{
}

uint64_t sub_1004AC3F4()
{
  return sub_1004AC400(&OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_logStateLock);
}

uint64_t sub_1004AC400(void *a1)
{
  char v2 = (void *)(v1 + *a1);
  swift_beginAccess(v2, v4, 0LL, 0LL);
  return swift_retain(*v2);
}

uint64_t sub_1004AC444(uint64_t a1)
{
  return sub_1004AC458( a1,  &OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_logStateLock,  (uint64_t (*)(uint64_t))&_swift_release);
}

uint64_t sub_1004AC458(uint64_t a1, void *a2, uint64_t (*a3)(uint64_t))
{
  int64_t v6 = (uint64_t *)(v3 + *a2);
  swift_beginAccess(v6, v9, 1LL, 0LL);
  uint64_t v7 = *v6;
  *int64_t v6 = a1;
  return a3(v7);
}

uint64_t (*sub_1004AC4B0(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

uint64_t sub_1004AC4F4(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  int64_t v6 = (os_unfair_lock_s *)(*(uint64_t (**)(void))((swift_isaMask & *v2) + 0x3F0LL))();
  os_unfair_lock_lock(v6 + 4);
  uint64_t v7 = (char *)v2 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_stateLogger;
  uint64_t v8 = swift_bridgeObjectRetain_n(a2, 2LL);
  unint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    unint64_t v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v12 = swift_slowAlloc(32LL, -1LL);
    uint64_t v15 = v12;
    *(_DWORD *)unint64_t v11 = 136315138;
    swift_bridgeObjectRetain(a2);
    uint64_t v14 = sub_1003FFBB0(a1, a2, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease_n(a2, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Event: %s", v11, 0xCu);
    swift_arrayDestroy(v12, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(a2, 2LL);
  }

  (*(void (**)(char *, void, unint64_t))((swift_isaMask & *v3) + 0x410LL))( v7,  0LL,  0xE000000000000000LL);
  os_unfair_lock_unlock(v6 + 4);
  return swift_release(v6);
}

void sub_1004AC6E4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v7 = v3;
  uint64_t v156 = a1;
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = ((uint64_t (*)(void))static os_log_type_t.default.getter)();
  os_log_type_t v10 = v8;
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v11 = swift_slowAlloc(22LL, -1LL);
    uint64_t v154 = swift_slowAlloc(64LL, -1LL);
    uint64_t v160 = (void *)v154;
    *(_DWORD *)uint64_t v11 = 136315394;
    swift_bridgeObjectRetain(a3);
    uint64_t v158 = (void *)sub_1003FFBB0(a2, a3, (uint64_t *)&v160);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v158, &v159, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease_n(a3, 3LL);
    *(_WORD *)(v11 + 1sub_10040A648(v1 + 2) = 2080;
    uint64_t v13 = *(void *)&v7[OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_id];
    unint64_t v12 = *(void *)&v7[OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_id + 8];
    swift_bridgeObjectRetain(v12);
    uint64_t v158 = (void *)sub_1003FFBB0(v13, v12, (uint64_t *)&v160);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v158, &v159, v11 + 14, v11 + 22);

    swift_bridgeObjectRelease(v12);
    _os_log_impl((void *)&_mh_execute_header, v10, v9, "%sGroup %s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy(v154, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v154, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a3, 2LL);
  }

  swift_bridgeObjectRetain_n(a3, 2LL);
  uint64_t v14 = v7;
  uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v16 = ((uint64_t (*)(void))static os_log_type_t.default.getter)();
  char v150 = v14;
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc(22LL, -1LL);
    uint64_t v18 = swift_slowAlloc(32LL, -1LL);
    uint64_t v160 = (void *)v18;
    *(_DWORD *)uint64_t v17 = 136315394;
    swift_bridgeObjectRetain(a3);
    uint64_t v158 = (void *)sub_1003FFBB0(a2, a3, (uint64_t *)&v160);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v158, &v159, v17 + 4, v17 + 12);
    uint64_t v19 = swift_bridgeObjectRelease_n(a3, 3LL);
    *(_WORD *)(v17 + 1sub_10040A648(v1 + 2) = 2048;
    uint64_t v20 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *(void *)v14) + 0x1E8LL))(v19);

    uint64_t v158 = (void *)v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v158, &v159, v17 + 14, v17 + 22);

    _os_log_impl((void *)&_mh_execute_header, v15, v16, "%s    localParticipantID: %llu", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v18, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1LL, -1LL);
    swift_slowDealloc(v17, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(a3, 2LL);
  }

  uint64_t v21 = swift_bridgeObjectRetain_n(a3, 2LL);
  unint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
  os_log_type_t v23 = ((uint64_t (*)(void))static os_log_type_t.default.getter)();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v25 = swift_slowAlloc(32LL, -1LL);
    uint64_t v160 = (void *)v25;
    *(_DWORD *)uint64_t v24 = 136315138;
    swift_bridgeObjectRetain(a3);
    uint64_t v158 = (void *)sub_1003FFBB0(a2, a3, (uint64_t *)&v160);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v158, &v159, v24 + 4, v24 + 12);
    swift_bridgeObjectRelease_n(a3, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "%s    Members:", v24, 0xCu);
    swift_arrayDestroy(v25, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1LL, -1LL);
    swift_slowDealloc(v24, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(a3, 2LL);
  }

  uint64_t v26 = (*(uint64_t (**)(void))((swift_isaMask & *(void *)v14) + 0x110LL))();
  id v29 = (os_unfair_lock_s *)(__chkstk_darwin(v27, v28) + 16);
  os_unfair_lock_lock(v29);
  sub_1004B23EC(&OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_membersByURI, (uint64_t *)&v160);
  int64_t v30 = (int64_t)v160;
  os_unfair_lock_unlock(v29);
  swift_release(v26);
  if ((v30 & 0xC000000000000001LL) != 0)
  {
    if (v30 < 0) {
      uint64_t v32 = v30;
    }
    else {
      uint64_t v32 = v30 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v33 = __CocoaDictionary.makeIterator()(v32);
    int64_t v153 = 0LL;
    uint64_t v34 = 0LL;
    unint64_t v35 = 0LL;
    int64_t v30 = v33 | 0x8000000000000000LL;
  }

  else
  {
    uint64_t v36 = -1LL << *(_BYTE *)(v30 + 32);
    int64_t v153 = v30 + 64;
    uint64_t v34 = ~v36;
    uint64_t v37 = -v36;
    if (v37 < 64) {
      uint64_t v38 = ~(-1LL << v37);
    }
    else {
      uint64_t v38 = -1LL;
    }
    unint64_t v35 = v38 & *(void *)(v30 + 64);
  }

  uint64_t v39 = 0LL;
  int64_t v152 = (unint64_t)(v34 + 64) >> 6;
  int64_t v151 = (char *)&type metadata for Swift.AnyObject + 8;
  uint64_t v155 = a2;
  if (v30 < 0) {
    goto LABEL_22;
  }
  while (1)
  {
    if (v35)
    {
      uint64_t v40 = (v35 - 1) & v35;
      unint64_t v41 = __clz(__rbit64(v35)) | (v39 << 6);
      uint64_t v42 = v39;
      goto LABEL_39;
    }

    int64_t v55 = v39 + 1;
    if (__OFADD__(v39, 1LL))
    {
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
      goto LABEL_133;
    }

    if (v55 >= v152) {
      goto LABEL_42;
    }
    unint64_t v56 = *(void *)(v153 + 8 * v55);
    uint64_t v42 = v39 + 1;
    if (!v56)
    {
      uint64_t v42 = v39 + 2;
      if (v39 + 2 >= v152) {
        goto LABEL_42;
      }
      unint64_t v56 = *(void *)(v153 + 8 * v42);
      if (!v56)
      {
        uint64_t v42 = v39 + 3;
        if (v39 + 3 >= v152) {
          goto LABEL_42;
        }
        unint64_t v56 = *(void *)(v153 + 8 * v42);
        if (!v56)
        {
          uint64_t v42 = v39 + 4;
          if (v39 + 4 >= v152) {
            goto LABEL_42;
          }
          unint64_t v56 = *(void *)(v153 + 8 * v42);
          if (!v56) {
            break;
          }
        }
      }
    }

uint64_t sub_1004AD958()
{
  return (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x318LL))();
}

uint64_t sub_1004AD974()
{
  return (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x2C0LL))();
}

uint64_t sub_1004AD990()
{
  return (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x350LL))();
}

uint64_t sub_1004AD9AC()
{
  return (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x320LL))();
}

uint64_t sub_1004AD9C8()
{
  return (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x388LL))();
}

uint64_t sub_1004AD9E4()
{
  return (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x260LL))();
}

uint64_t sub_1004ADA00()
{
  return (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x268LL))();
}

uint64_t sub_1004ADA1C()
{
  return (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x2D8LL))();
}

uint64_t sub_1004ADA38()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **v0) + 0x410LL))();
}

uint64_t sub_1004ADA70()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **v0) + 0x408LL))();
}

uint64_t sub_1004ADAA8(Swift::Int *a1, void *a2, uint64_t (*a3)(void), uint64_t *a4)
{
  uint64_t v7 = v4;
  uint64_t v10 = *v4;
  if ((*v4 & 0xC000000000000001LL) != 0)
  {
    if (v10 < 0) {
      uint64_t v11 = *v4;
    }
    else {
      uint64_t v11 = v10 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(*v4);
    id v12 = a2;
    uint64_t v13 = __CocoaSet.member(for:)();

    if (v13)
    {
      swift_bridgeObjectRelease(v10);

      uint64_t v41 = v13;
      uint64_t v14 = a3(0LL);
      swift_unknownObjectRetain(v13, v15);
      swift_dynamicCast(&v42, &v41, (char *)&type metadata for Swift.AnyObject + 8, v14, 7LL);
      *a1 = v42;
      swift_unknownObjectRelease(v13, v16);
      return 0LL;
    }

    uint64_t result = __CocoaSet.count.getter(v11);
    if (__OFADD__(result, 1LL))
    {
      __break(1u);
      return result;
    }

    Swift::Int v29 = sub_1004ADD54(v11, result + 1, a4, a3);
    Swift::Int v42 = v29;
    unint64_t v30 = *(void *)(v29 + 16);
    if (*(void *)(v29 + 24) <= v30)
    {
      uint64_t v36 = v30 + 1;
      id v37 = v12;
      sub_100435E38(v36, a4);
      uint64_t v31 = v42;
    }

    else
    {
      uint64_t v31 = v29;
      id v32 = v12;
    }

    sub_100423E08((uint64_t)v12, v31);
    uint64_t v38 = *v7;
    *uint64_t v7 = v31;
    swift_bridgeObjectRelease(v38);
    *a1 = (Swift::Int)v12;
  }

  else
  {
    Swift::Int v18 = *(void *)(v10 + 40);
    swift_bridgeObjectRetain(v10);
    Swift::Int v19 = NSObject._rawHashValue(seed:)(v18);
    uint64_t v20 = -1LL << *(_BYTE *)(v10 + 32);
    unint64_t v21 = v19 & ~v20;
    if (((*(void *)(v10 + 56 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v21) & 1) != 0)
    {
      a3(0LL);
      id v22 = *(id *)(*(void *)(v10 + 48) + 8 * v21);
      char v23 = static NSObject.== infix(_:_:)(v22, a2);

      if ((v23 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease(v10);
        __n128 v27 = *(void **)(*(void *)(*v7 + 48) + 8 * v21);
        *a1 = (Swift::Int)v27;
        id v28 = v27;
        return 0LL;
      }

      uint64_t v24 = ~v20;
      while (1)
      {
        unint64_t v21 = (v21 + 1) & v24;
        if (((*(void *)(v10 + 56 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v21) & 1) == 0) {
          break;
        }
        id v25 = *(id *)(*(void *)(v10 + 48) + 8 * v21);
        char v26 = static NSObject.== infix(_:_:)(v25, a2);

        if ((v26 & 1) != 0) {
          goto LABEL_12;
        }
      }
    }

    swift_bridgeObjectRelease(v10);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v7);
    Swift::Int v42 = *v7;
    *uint64_t v7 = 0x8000000000000000LL;
    id v34 = a2;
    sub_1004AE1C8((uint64_t)v34, v21, isUniquelyReferenced_nonNull_native, a4, a3);
    uint64_t v35 = *v7;
    *uint64_t v7 = v42;
    swift_bridgeObjectRelease(v35);
    *a1 = (Swift::Int)v34;
  }

  return 1LL;
}

Swift::Int sub_1004ADD54(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  if (a2)
  {
    sub_1003F5CB4(a3);
    uint64_t v8 = static _SetStorage.convert(_:capacity:)(a1, a2);
    uint64_t v27 = v8;
    uint64_t v9 = __CocoaSet.makeIterator()(a1);
    uint64_t v10 = __CocoaSet.Iterator.next()(v9);
    if (v10)
    {
      uint64_t v11 = v10;
      uint64_t v12 = a4(0LL);
      do
      {
        uint64_t v25 = v11;
        swift_dynamicCast(&v26, &v25, (char *)&type metadata for Swift.AnyObject + 8, v12, 7LL);
        uint64_t v8 = v27;
        unint64_t v20 = *(void *)(v27 + 16);
        if (*(void *)(v27 + 24) <= v20)
        {
          sub_100435E38(v20 + 1, a3);
          uint64_t v8 = v27;
        }

        uint64_t v13 = v26;
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v8 + 40));
        uint64_t v15 = v8 + 56;
        uint64_t v16 = -1LL << *(_BYTE *)(v8 + 32);
        unint64_t v17 = result & ~v16;
        unint64_t v18 = v17 >> 6;
        if (((-1LL << v17) & ~*(void *)(v8 + 56 + 8 * (v17 >> 6))) != 0)
        {
          unint64_t v19 = __clz(__rbit64((-1LL << v17) & ~*(void *)(v8 + 56 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0LL;
        }

        else
        {
          char v21 = 0;
          unint64_t v22 = (unint64_t)(63 - v16) >> 6;
          do
          {
            if (++v18 == v22 && (v21 & 1) != 0)
            {
              __break(1u);
              return result;
            }

            BOOL v23 = v18 == v22;
            if (v18 == v22) {
              unint64_t v18 = 0LL;
            }
            v21 |= v23;
            uint64_t v24 = *(void *)(v15 + 8 * v18);
          }

          while (v24 == -1);
          unint64_t v19 = __clz(__rbit64(~v24)) + (v18 << 6);
        }

        *(void *)(v15 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
        *(void *)(*(void *)(v8 + 48) + 8 * v19) = v13;
        ++*(void *)(v8 + 16);
        uint64_t v11 = __CocoaSet.Iterator.next()(result);
      }

      while (v11);
    }

    swift_release(v9);
  }

  else
  {
    swift_unknownObjectRelease(a1, 0LL);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }

  return v8;
}

uint64_t sub_1004ADF48(uint64_t a1)
{
  char v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_1003F5CB4(&qword_1009BB840);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = result;
  if (*(void *)(v3 + 16))
  {
    int64_t v7 = 0LL;
    uint64_t v8 = (uint64_t *)(v3 + 56);
    uint64_t v9 = 1LL << *(_BYTE *)(v3 + 32);
    uint64_t v28 = -1LL << v9;
    Swift::Int v29 = v2;
    if (v9 < 64) {
      uint64_t v10 = ~(-1LL << v9);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & *(void *)(v3 + 56);
    uint64_t v30 = 1LL << *(_BYTE *)(v3 + 32);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = result + 56;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v7 << 6);
      }

      else
      {
        int64_t v17 = v7 + 1;
        if (__OFADD__(v7, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v17 >= v12) {
          goto LABEL_36;
        }
        unint64_t v18 = v8[v17];
        ++v7;
        if (!v18)
        {
          int64_t v7 = v17 + 1;
          if (v17 + 1 >= v12) {
            goto LABEL_36;
          }
          unint64_t v18 = v8[v7];
          if (!v18)
          {
            int64_t v7 = v17 + 2;
            if (v17 + 2 >= v12) {
              goto LABEL_36;
            }
            unint64_t v18 = v8[v7];
            if (!v18)
            {
              int64_t v19 = v17 + 3;
              if (v19 >= v12)
              {
LABEL_36:
                if (v30 >= 64) {
                  bzero((void *)(v3 + 56), 8 * v12);
                }
                else {
                  *uint64_t v8 = v28;
                }
                char v2 = v29;
                *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
                break;
              }

              unint64_t v18 = v8[v19];
              if (!v18)
              {
                while (1)
                {
                  int64_t v7 = v19 + 1;
                  if (__OFADD__(v19, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v7 >= v12) {
                    goto LABEL_36;
                  }
                  unint64_t v18 = v8[v7];
                  ++v19;
                  if (v18) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v7 = v19;
            }
          }
        }

void sub_1004AE1C8(uint64_t a1, unint64_t a2, char a3, uint64_t *a4, uint64_t (*a5)(void))
{
  int64_t v7 = v5;
  unint64_t v10 = *(void *)(*v5 + 16);
  unint64_t v11 = *(void *)(*v5 + 24);
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100435E38(v12, a4);
  }

  else
  {
    if (v11 > v10)
    {
      sub_100436A00(a4);
      goto LABEL_14;
    }

    sub_100436E4C(v12, a4);
  }

  uint64_t v13 = *v5;
  Swift::Int v14 = NSObject._rawHashValue(seed:)(*(void *)(*v5 + 40));
  uint64_t v15 = -1LL << *(_BYTE *)(v13 + 32);
  a2 = v14 & ~v15;
  if (((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v16 = a5(0LL);
    id v17 = *(id *)(*(void *)(v13 + 48) + 8 * a2);
    char v18 = static NSObject.== infix(_:_:)(v17, a1);

    if ((v18 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v16);
      __break(1u);
    }

    else
    {
      uint64_t v19 = ~v15;
      while (1)
      {
        a2 = (a2 + 1) & v19;
        if (((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
          break;
        }
        id v20 = *(id *)(*(void *)(v13 + 48) + 8 * a2);
        char v21 = static NSObject.== infix(_:_:)(v20, a1);

        if ((v21 & 1) != 0) {
          goto LABEL_13;
        }
      }
    }
  }

uint64_t sub_1004AE34C(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1004ADF48(v8);
  }

  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)sub_1004AE46C();
      goto LABEL_14;
    }

    sub_1004AE600(v8);
  }

  uint64_t v9 = *v3;
  uint64_t result = static Hasher._hash(seed:_:)(*(void *)(*v3 + 40), v5);
  uint64_t v10 = -1LL << *(_BYTE *)(v9 + 32);
  a2 = result & ~v10;
  if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v11 = *(void *)(v9 + 48);
    if (*(void *)(v11 + 8 * a2) == v5)
    {
LABEL_13:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
      __break(1u);
    }

    else
    {
      uint64_t v12 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v12;
        if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v11 + 8 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }

void *sub_1004AE46C()
{
  uint64_t v1 = v0;
  sub_1003F5CB4(&qword_1009BB840);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release(v2);
    uint64_t *v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }

uint64_t sub_1004AE600(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_1003F5CB4(&qword_1009BB840);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = result;
  if (!*(void *)(v3 + 16))
  {
    uint64_t result = swift_release(v3);
LABEL_38:
    uint64_t *v2 = v6;
    return result;
  }

  uint64_t v28 = v2;
  int64_t v7 = 0LL;
  uint64_t v8 = v3 + 56;
  uint64_t v9 = 1LL << *(_BYTE *)(v3 + 32);
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v3 + 56);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      unint64_t v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v16 = v15 | (v7 << 6);
      goto LABEL_27;
    }

    int64_t v17 = v7 + 1;
    if (__OFADD__(v7, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v12) {
      goto LABEL_36;
    }
    unint64_t v18 = *(void *)(v8 + 8 * v17);
    ++v7;
    if (!v18)
    {
      int64_t v7 = v17 + 1;
      if (v17 + 1 >= v12) {
        goto LABEL_36;
      }
      unint64_t v18 = *(void *)(v8 + 8 * v7);
      if (!v18)
      {
        int64_t v7 = v17 + 2;
        if (v17 + 2 >= v12) {
          goto LABEL_36;
        }
        unint64_t v18 = *(void *)(v8 + 8 * v7);
        if (!v18) {
          break;
        }
      }
    }

uint64_t sub_1004AE860( uint64_t a1, uint64_t (*a2)(char *, unint64_t, uint64_t), __n128 a3, __n128 a4)
{
  char v7 = *(_BYTE *)(a1 + 32);
  unsigned int v8 = v7 & 0x3F;
  unint64_t v9 = (1LL << v7) + 63;
  unint64_t v10 = v9 >> 6;
  size_t v11 = 8 * (v9 >> 6);
  if (v8 <= 0xD || (swift_stdlib_isStackAllocationSafe(8 * (v9 >> 6), 8LL) & 1) != 0)
  {
    __chkstk_darwin(a3, a4);
    bzero((char *)&v16 - ((v11 + 15) & 0x3FFFFFFFFFFFFFF0LL), v11);
    uint64_t v12 = a2((char *)&v16 - ((v11 + 15) & 0x3FFFFFFFFFFFFFF0LL), v10, a1);
    uint64_t v13 = swift_release(a1);
    if (v4) {
      swift_willThrow(v13);
    }
  }

  else
  {
    unint64_t v14 = (void *)swift_slowAlloc(v11, -1LL);
    bzero(v14, v11);
    uint64_t v12 = a2((char *)v14, v10, a1);
    swift_release(a1);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  return v12;
}

void sub_1004AE9C8(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = 0LL;
  int64_t v5 = 0LL;
  uint64_t v6 = a3 + 56;
  uint64_t v7 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v8 = -1LL;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 56);
  int64_t v25 = (unint64_t)(v7 + 63) >> 6;
LABEL_4:
  uint64_t v24 = v4;
  while (1)
  {
    if (v9)
    {
      unint64_t v10 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v11 = v10 | (v5 << 6);
      goto LABEL_19;
    }

    if (__OFADD__(v5++, 1LL))
    {
      __break(1u);
      goto LABEL_32;
    }

    if (v5 >= v25) {
      goto LABEL_30;
    }
    unint64_t v13 = *(void *)(v6 + 8 * v5);
    if (!v13) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v5 << 6);
LABEL_19:
    unint64_t v15 = *(void **)(*(void *)(a3 + 48) + 8 * v11);
    uint64_t v16 = *(uint64_t (**)(void))((swift_isaMask & *v15) + 0xB8LL);
    int64_t v17 = v15;
    char v18 = v16();
    if (sub_10040DC6C(v18 & 1, 1)
      || (int64_t v19 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v17) + 0xB0LL))()) == 0LL)
    {
    }

    else
    {
      uint64_t v20 = v19;
      char v21 = (*(uint64_t (**)(void))((swift_isaMask & *v19) + 0x80LL))();

      if ((v21 & 1) == 0)
      {
        *(unint64_t *)((char *)a1 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v11;
        uint64_t v4 = v24 + 1;
        if (!__OFADD__(v24, 1LL)) {
          goto LABEL_4;
        }
        __break(1u);
LABEL_30:
        swift_retain(a3);
        sub_1004AEE34(a1, a2, v24, a3, (uint64_t *)&unk_1009B97D0);
        return;
      }
    }
  }

  int64_t v14 = v5 + 1;
  if (v5 + 1 >= v25) {
    goto LABEL_30;
  }
  unint64_t v13 = *(void *)(v6 + 8 * v14);
  if (v13) {
    goto LABEL_17;
  }
  int64_t v14 = v5 + 2;
  if (v5 + 2 >= v25) {
    goto LABEL_30;
  }
  unint64_t v13 = *(void *)(v6 + 8 * v14);
  if (v13) {
    goto LABEL_17;
  }
  int64_t v14 = v5 + 3;
  if (v5 + 3 >= v25) {
    goto LABEL_30;
  }
  unint64_t v13 = *(void *)(v6 + 8 * v14);
  if (v13)
  {
LABEL_17:
    int64_t v5 = v14;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v5 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      break;
    }
    if (v5 >= v25) {
      goto LABEL_30;
    }
    unint64_t v13 = *(void *)(v6 + 8 * v5);
    ++v14;
    if (v13) {
      goto LABEL_18;
    }
  }

void sub_1004AEBFC(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  int64_t v4 = 0LL;
  uint64_t v5 = a3 + 56;
  uint64_t v6 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v7 = -1LL;
  if (v6 < 64) {
    uint64_t v7 = ~(-1LL << v6);
  }
  unint64_t v8 = v7 & *(void *)(a3 + 56);
  int64_t v26 = (unint64_t)(v6 + 63) >> 6;
  while (v8)
  {
    unint64_t v9 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    unint64_t v10 = v9 | (v4 << 6);
LABEL_21:
    int64_t v14 = *(void **)(*(void *)(a3 + 48) + 8 * v10);
    unint64_t v15 = *(uint64_t (**)(void *))((swift_isaMask & *v14) + 0xB8LL);
    uint64_t v16 = v14;
    char v17 = v15(v16);
    BOOL v18 = sub_10040DC6C(v17 & 1, 1);
    if (v18)
    {

LABEL_26:
      *(unint64_t *)((char *)a1 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v10;
      if (__OFADD__(v25++, 1LL))
      {
        __break(1u);
LABEL_29:
        swift_retain(a3);
        sub_1004AEE34(a1, a2, v25, a3, (uint64_t *)&unk_1009B97D0);
        return;
      }
    }

    else
    {
      int64_t v19 = (void *)(*(uint64_t (**)(BOOL))((swift_isaMask & *v16) + 0xB0LL))(v18);
      if (v19)
      {
        uint64_t v20 = v19;
        char v21 = (*(uint64_t (**)(void *))((swift_isaMask & *v19) + 0x80LL))(v19);

        if ((v21 & 1) != 0) {
          goto LABEL_26;
        }
      }

      else
      {
      }
    }
  }

  int64_t v11 = v4 + 1;
  if (__OFADD__(v4, 1LL))
  {
    __break(1u);
    goto LABEL_31;
  }

  if (v11 >= v26) {
    goto LABEL_29;
  }
  unint64_t v12 = *(void *)(v5 + 8 * v11);
  ++v4;
  if (v12) {
    goto LABEL_20;
  }
  int64_t v4 = v11 + 1;
  if (v11 + 1 >= v26) {
    goto LABEL_29;
  }
  unint64_t v12 = *(void *)(v5 + 8 * v4);
  if (v12) {
    goto LABEL_20;
  }
  int64_t v4 = v11 + 2;
  if (v11 + 2 >= v26) {
    goto LABEL_29;
  }
  unint64_t v12 = *(void *)(v5 + 8 * v4);
  if (v12)
  {
LABEL_20:
    unint64_t v8 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v4 << 6);
    goto LABEL_21;
  }

  int64_t v13 = v11 + 3;
  if (v13 >= v26) {
    goto LABEL_29;
  }
  unint64_t v12 = *(void *)(v5 + 8 * v13);
  if (v12)
  {
    int64_t v4 = v13;
    goto LABEL_20;
  }

  while (1)
  {
    int64_t v4 = v13 + 1;
    if (__OFADD__(v13, 1LL)) {
      break;
    }
    if (v4 >= v26) {
      goto LABEL_29;
    }
    unint64_t v12 = *(void *)(v5 + 8 * v4);
    ++v13;
    if (v12) {
      goto LABEL_20;
    }
  }

Swift::Int sub_1004AEE34(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a4;
  if (!a3)
  {
    unint64_t v10 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release(v5);
    return (Swift::Int)v10;
  }

  uint64_t v6 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v5;
  }
  sub_1003F5CB4(a5);
  Swift::Int result = static _SetStorage.allocate(capacity:)(v6);
  unint64_t v10 = (void *)result;
  uint64_t v30 = a1;
  if (a2 < 1) {
    unint64_t v11 = 0LL;
  }
  else {
    unint64_t v11 = *a1;
  }
  uint64_t v12 = 0LL;
  Swift::Int v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      unint64_t v14 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }

    uint64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1LL)) {
      goto LABEL_39;
    }
    if (v16 >= a2) {
      goto LABEL_36;
    }
    unint64_t v17 = v30[v16];
    ++v12;
    if (!v17)
    {
      uint64_t v12 = v16 + 1;
      if (v16 + 1 >= a2) {
        goto LABEL_36;
      }
      unint64_t v17 = v30[v12];
      if (!v17)
      {
        uint64_t v12 = v16 + 2;
        if (v16 + 2 >= a2) {
          goto LABEL_36;
        }
        unint64_t v17 = v30[v12];
        if (!v17) {
          break;
        }
      }
    }

uint64_t sub_1004AF08C(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  if ((*v1 & 0xC000000000000001LL) != 0)
  {
    if (v4 < 0) {
      uint64_t v5 = *v1;
    }
    else {
      uint64_t v5 = v4 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v4);
    id v6 = a1;
    char v7 = __CocoaSet.contains(_:)();

    if ((v7 & 1) != 0)
    {
      uint64_t v8 = sub_1004AF258(v5, (uint64_t)v6);
      swift_bridgeObjectRelease(v4);
      return v8;
    }

uint64_t sub_1004AF258(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRelease(*v3);
  uint64_t v6 = __CocoaSet.count.getter(a1);
  uint64_t v8 = swift_unknownObjectRetain(a1, v7);
  Swift::Int v9 = sub_1004ADD54( v8,  v6,  (uint64_t *)&unk_1009B97D0,  type metadata accessor for IDSGroupEncryptionControllerParticipant);
  Swift::Int v20 = v9;
  Swift::Int v10 = *(void *)(v9 + 40);
  swift_retain(v9);
  Swift::Int v11 = NSObject._rawHashValue(seed:)(v10);
  uint64_t v12 = -1LL << *(_BYTE *)(v9 + 32);
  unint64_t v13 = v11 & ~v12;
  if (((*(void *)(v9 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) != 0)
  {
    type metadata accessor for IDSGroupEncryptionControllerParticipant(0LL);
    id v14 = *(id *)(*(void *)(v9 + 48) + 8 * v13);
    char v15 = static NSObject.== infix(_:_:)(v14, a2);

    if ((v15 & 1) != 0)
    {
LABEL_6:
      swift_release(v9);
      Swift::Int v9 = *(void *)(*(void *)(v9 + 48) + 8 * v13);
      sub_1004370C0(v13);
      if ((static NSObject.== infix(_:_:)(a2, v9) & 1) != 0)
      {
        Swift::Int *v3 = v20;
        return v9;
      }

      __break(1u);
    }

    else
    {
      uint64_t v16 = ~v12;
      while (1)
      {
        unint64_t v13 = (v13 + 1) & v16;
        if (((*(void *)(v9 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) == 0) {
          break;
        }
        id v17 = *(id *)(*(void *)(v9 + 48) + 8 * v13);
        char v18 = static NSObject.== infix(_:_:)(v17, a2);

        if ((v18 & 1) != 0) {
          goto LABEL_6;
        }
      }
    }

    swift_release(v9);
    __break(1u);
  }

  uint64_t result = swift_release(v9);
  __break(1u);
  return result;
}

uint64_t sub_1004AF3F0(unint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = *v1;
  if ((v4 & 0xC000000000000001LL) == 0)
  {
LABEL_8:
    swift_bridgeObjectRetain(v4);
    a1 = sub_100433024(a1);
    char v14 = v13;
    swift_bridgeObjectRelease(v4);
    if ((v14 & 1) != 0)
    {
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
      Swift::Int v4 = *v2;
      Swift::Int v19 = *v2;
      Swift::Int *v2 = 0x8000000000000000LL;
      if (!isUniquelyReferenced_nonNull_native)
      {
        sub_1004B0400(&qword_1009BB848);
        Swift::Int v4 = v19;
      }

      goto LABEL_11;
    }

    return 0LL;
  }

  if (v4 < 0) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = v4 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v4);
  id v6 = (id)a1;
  uint64_t v8 = __CocoaDictionary.lookup(_:)(v6, v5, v7);

  if (!v8)
  {
    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  swift_unknownObjectRelease(v8, v9);
  uint64_t v10 = __CocoaDictionary.count.getter(v5);
  Swift::Int v4 = sub_1004AF7A4( v5,  v10,  &qword_1009BB848,  (unint64_t *)&unk_1009BC270,  &OBJC_CLASS___IDSURI_ptr,  (uint64_t (*)(void))type metadata accessor for IDSGroupEncryptionControllerMember);
  swift_retain(v4);
  a1 = sub_100433024((uint64_t)v6);
  char v12 = v11;
  swift_release(v4);
  if ((v12 & 1) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }

uint64_t sub_1004AF564(unint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = *v1;
  if ((v4 & 0xC000000000000001LL) == 0)
  {
LABEL_8:
    swift_bridgeObjectRetain(v4);
    a1 = sub_10049A934(a1);
    char v14 = v13;
    swift_bridgeObjectRelease(v4);
    if ((v14 & 1) != 0)
    {
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
      Swift::Int v4 = *v2;
      Swift::Int v19 = *v2;
      Swift::Int *v2 = 0x8000000000000000LL;
      if (!isUniquelyReferenced_nonNull_native)
      {
        sub_1004B0400(&qword_1009BB838);
        Swift::Int v4 = v19;
      }

      goto LABEL_11;
    }

    return 0LL;
  }

  if (v4 < 0) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = v4 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v4);
  id v6 = (id)a1;
  uint64_t v8 = __CocoaDictionary.lookup(_:)(v6, v5, v7);

  if (!v8)
  {
    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  swift_unknownObjectRelease(v8, v9);
  uint64_t v10 = __CocoaDictionary.count.getter(v5);
  Swift::Int v4 = sub_1004AF7A4( v5,  v10,  &qword_1009BB838,  (unint64_t *)&qword_1009BBE30,  &OBJC_CLASS___IDSPushToken_ptr,  type metadata accessor for IDSGroupEncryptionControllerParticipant);
  swift_retain(v4);
  a1 = sub_10049A934((uint64_t)v6);
  char v12 = v11;
  swift_release(v4);
  if ((v12 & 1) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }

uint64_t sub_1004AF6D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  unint64_t v7 = sub_100417D94(a1, a2);
  LOBYTE(asub_10040A648(v1 + 2) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a2 & 1) == 0) {
    return 0LL;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  uint64_t v10 = *v3;
  uint64_t v14 = *v3;
  uint64_t *v3 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1004B073C();
    uint64_t v10 = v14;
  }

  swift_bridgeObjectRelease(*(void *)(*(void *)(v10 + 48) + 16 * v7 + 8));
  uint64_t v11 = *(void *)(*(void *)(v10 + 56) + 8 * v7);
  sub_10049BCDC(v7, v10);
  uint64_t v12 = *v3;
  uint64_t *v3 = v10;
  swift_bridgeObjectRelease(v12);
  return v11;
}

Swift::Int sub_1004AF7A4( uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, void *a5, uint64_t (*a6)(void))
{
  if (a2)
  {
    sub_1003F5CB4(a3);
    uint64_t v12 = static _DictionaryStorage.convert(_:capacity:)(a1, a2);
    uint64_t v38 = v12;
    uint64_t v13 = __CocoaDictionary.makeIterator()(a1);
    uint64_t v14 = __CocoaDictionary.Iterator.next()();
    if (v14)
    {
      uint64_t v16 = v14;
      uint64_t v17 = v15;
      uint64_t v18 = sub_10041D3C4(0LL, a4, a5);
      do
      {
        uint64_t v36 = v16;
        swift_dynamicCast(&v37, &v36, (char *)&type metadata for Swift.AnyObject + 8, v18, 7LL);
        uint64_t v35 = v17;
        uint64_t v29 = a6(0LL);
        swift_dynamicCast(&v36, &v35, (char *)&type metadata for Swift.AnyObject + 8, v29, 7LL);
        uint64_t v12 = v38;
        unint64_t v30 = *(void *)(v38 + 16);
        if (*(void *)(v38 + 24) <= v30)
        {
          sub_1004AF9E4(v30 + 1, 1LL, a3);
          uint64_t v12 = v38;
        }

        uint64_t v20 = v36;
        uint64_t v19 = v37;
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v12 + 40));
        uint64_t v22 = v12 + 64;
        uint64_t v23 = -1LL << *(_BYTE *)(v12 + 32);
        unint64_t v24 = result & ~v23;
        unint64_t v25 = v24 >> 6;
        if (((-1LL << v24) & ~*(void *)(v12 + 64 + 8 * (v24 >> 6))) != 0)
        {
          unint64_t v26 = __clz(__rbit64((-1LL << v24) & ~*(void *)(v12 + 64 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0LL;
        }

        else
        {
          char v31 = 0;
          unint64_t v32 = (unint64_t)(63 - v23) >> 6;
          do
          {
            if (++v25 == v32 && (v31 & 1) != 0)
            {
              __break(1u);
              return result;
            }

            BOOL v33 = v25 == v32;
            if (v25 == v32) {
              unint64_t v25 = 0LL;
            }
            v31 |= v33;
            uint64_t v34 = *(void *)(v22 + 8 * v25);
          }

          while (v34 == -1);
          unint64_t v26 = __clz(__rbit64(~v34)) + (v25 << 6);
        }

        *(void *)(v22 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v26;
        uint64_t v27 = 8 * v26;
        *(void *)(*(void *)(v12 + 48) + v27) = v19;
        *(void *)(*(void *)(v12 + 56) + v27) = v20;
        ++*(void *)(v12 + 16);
        uint64_t v16 = __CocoaDictionary.Iterator.next()();
        uint64_t v17 = v28;
      }

      while (v16);
    }

    swift_release(v13);
  }

  else
  {
    swift_unknownObjectRelease(a1, 0LL);
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }

  return v12;
}

Swift::Int sub_1004AF9E4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  Swift::Int v4 = v3;
  uint64_t v6 = *v3;
  if (*(void *)(*v3 + 24) <= a1) {
    uint64_t v7 = a1;
  }
  else {
    uint64_t v7 = *(void *)(*v3 + 24);
  }
  sub_1003F5CB4(a3);
  uint64_t v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  uint64_t v9 = v8;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_43;
  }
  uint64_t v10 = 1LL << *(_BYTE *)(v6 + 32);
  uint64_t v38 = v4;
  uint64_t v39 = v6 + 64;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  else {
    uint64_t v11 = -1LL;
  }
  unint64_t v12 = v11 & *(void *)(v6 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v14 = v8 + 64;
  Swift::Int result = swift_retain(v6);
  int64_t v16 = 0LL;
  while (1)
  {
    if (v12)
    {
      unint64_t v22 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v23 = v22 | (v16 << 6);
      goto LABEL_34;
    }

    int64_t v24 = v16 + 1;
    if (__OFADD__(v16, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v24 >= v13) {
      break;
    }
    unint64_t v25 = (void *)(v6 + 64);
    unint64_t v26 = *(void *)(v39 + 8 * v24);
    ++v16;
    if (!v26)
    {
      int64_t v16 = v24 + 1;
      if (v24 + 1 >= v13) {
        goto LABEL_36;
      }
      unint64_t v26 = *(void *)(v39 + 8 * v16);
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v13)
        {
LABEL_36:
          swift_release(v6);
          Swift::Int v4 = v38;
          if ((a2 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v26 = *(void *)(v39 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            int64_t v16 = v27 + 1;
            if (__OFADD__(v27, 1LL)) {
              goto LABEL_45;
            }
            if (v16 >= v13) {
              goto LABEL_36;
            }
            unint64_t v26 = *(void *)(v39 + 8 * v16);
            ++v27;
            if (v26) {
              goto LABEL_33;
            }
          }
        }

        int64_t v16 = v27;
      }
    }

uint64_t sub_1004AFCB0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_1003F5CB4(&qword_1009BB830);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v9 = 0LL;
    uint64_t v10 = (uint64_t *)(v5 + 64);
    uint64_t v11 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v33 = -1LL << v11;
    if (v11 < 64) {
      uint64_t v12 = ~(-1LL << v11);
    }
    else {
      uint64_t v12 = -1LL;
    }
    unint64_t v13 = v12 & *(void *)(v5 + 64);
    uint64_t v34 = 1LL << *(_BYTE *)(v5 + 32);
    id v35 = v3;
    int64_t v36 = (unint64_t)(v11 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v13)
      {
        unint64_t v20 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        unint64_t v21 = v20 | (v9 << 6);
      }

      else
      {
        int64_t v22 = v9 + 1;
        if (__OFADD__(v9, 1LL))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }

        if (v22 >= v36) {
          goto LABEL_36;
        }
        unint64_t v23 = v10[v22];
        ++v9;
        if (!v23)
        {
          int64_t v9 = v22 + 1;
          if (v22 + 1 >= v36) {
            goto LABEL_36;
          }
          unint64_t v23 = v10[v9];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v36)
            {
LABEL_36:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release(v5);
                uint64_t v3 = v35;
                goto LABEL_43;
              }

              if (v34 >= 64) {
                bzero((void *)(v5 + 64), 8 * v36);
              }
              else {
                *uint64_t v10 = v33;
              }
              uint64_t v3 = v35;
              *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
              break;
            }

            unint64_t v23 = v10[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v9 = v24 + 1;
                if (__OFADD__(v24, 1LL)) {
                  goto LABEL_45;
                }
                if (v9 >= v36) {
                  goto LABEL_36;
                }
                unint64_t v23 = v10[v9];
                ++v24;
                if (v23) {
                  goto LABEL_33;
                }
              }
            }

            int64_t v9 = v24;
          }
        }

Swift::Int sub_1004AFF60(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_1003F5CB4(&qword_1009BB820);
  char v39 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v38 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v36 = v3;
  int64_t v37 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_34;
    }

    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v22 >= v37) {
      break;
    }
    unint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v38 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v37) {
        goto LABEL_36;
      }
      unint64_t v24 = *(void *)(v38 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_36:
          swift_release(v5);
          uint64_t v3 = v36;
          if ((v39 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v24 = *(void *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1LL)) {
              goto LABEL_45;
            }
            if (v14 >= v37) {
              goto LABEL_36;
            }
            unint64_t v24 = *(void *)(v38 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_33;
            }
          }
        }

        int64_t v14 = v25;
      }
    }

unint64_t sub_1004B026C(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    Swift::Int result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v9 = *(void *)(a2 + 48);
        uint64_t v10 = (void *)(v9 + 8 * v6);
        Swift::Int result = static Hasher._hash(seed:_:)(*(void *)(a2 + 40), *v10);
        unint64_t v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            int64_t v14 = (void *)(v9 + 8 * v3);
            if (v3 != v6 || v14 >= v10 + 1) {
              *int64_t v14 = *v10;
            }
            uint64_t v15 = *(void *)(a2 + 56);
            unint64_t v16 = (void *)(v15 + 8 * v3);
            unint64_t v17 = (void *)(v15 + 8 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 1))
            {
              *unint64_t v16 = *v17;
              int64_t v3 = v6;
            }
          }
        }

        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    unint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1LL << v3) - 1;
  }

  else
  {
    unint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1LL << result) - 1;
  }

  *unint64_t v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  BOOL v22 = __OFSUB__(v21, 1LL);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

id sub_1004B0400(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_1003F5CB4(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _DictionaryStorage.copy(original:)(*v1);
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_26:
    id result = (id)swift_release(v3);
    uint64_t *v2 = v5;
    return result;
  }

  id result = (id)(v4 + 64);
  uint64_t v7 = v3 + 64;
  unint64_t v8 = (unint64_t)((1LL << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  int64_t v10 = 0LL;
  *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 64);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }

    int64_t v21 = v10 + 1;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v21 >= v14) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v7 + 8 * v21);
    ++v10;
    if (!v22)
    {
      int64_t v10 = v21 + 1;
      if (v21 + 1 >= v14) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v7 + 8 * v10);
      if (!v22) {
        break;
      }
    }

id sub_1004B059C()
{
  uint64_t v1 = v0;
  sub_1003F5CB4(&qword_1009BB830);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release(v2);
    uint64_t *v1 = v4;
    return result;
  }

  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }

id sub_1004B073C()
{
  uint64_t v1 = v0;
  sub_1003F5CB4(&qword_1009BB820);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    id result = (id)swift_release(v2);
    uint64_t *v1 = v4;
    return result;
  }

  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

uint64_t sub_1004B08EC(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  Swift::Int v6 = *v2;
  if ((*v2 & 0xC000000000000001LL) == 0) {
    goto LABEL_7;
  }
  if (v6 < 0) {
    uint64_t v7 = *v2;
  }
  else {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8LL;
  }
  uint64_t result = __CocoaDictionary.count.getter(v7);
  if (!__OFADD__(result, 1LL))
  {
    Swift::Int v6 = sub_1004AF7A4( v7,  result + 1,  &qword_1009BB848,  (unint64_t *)&unk_1009BC270,  &OBJC_CLASS___IDSURI_ptr,  (uint64_t (*)(void))type metadata accessor for IDSGroupEncryptionControllerMember);
    Swift::Int *v3 = v6;
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v6);
    Swift::Int v11 = *v3;
    Swift::Int *v3 = 0x8000000000000000LL;
    sub_1004B0AAC( a1,  a2,  isUniquelyReferenced_nonNull_native,  (uint64_t (*)(void *))sub_100433024,  &qword_1009BB848,  (unint64_t *)&unk_1009BC270,  &OBJC_CLASS___IDSURI_ptr);
    Swift::Int v10 = *v3;
    Swift::Int *v3 = v11;
    return swift_bridgeObjectRelease(v10);
  }

  __break(1u);
  return result;
}

uint64_t sub_1004B09CC(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  Swift::Int v6 = *v2;
  if ((*v2 & 0xC000000000000001LL) == 0) {
    goto LABEL_7;
  }
  if (v6 < 0) {
    uint64_t v7 = *v2;
  }
  else {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8LL;
  }
  uint64_t result = __CocoaDictionary.count.getter(v7);
  if (!__OFADD__(result, 1LL))
  {
    Swift::Int v6 = sub_1004AF7A4( v7,  result + 1,  &qword_1009BB838,  (unint64_t *)&qword_1009BBE30,  &OBJC_CLASS___IDSPushToken_ptr,  type metadata accessor for IDSGroupEncryptionControllerParticipant);
    Swift::Int *v3 = v6;
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v6);
    Swift::Int v11 = *v3;
    Swift::Int *v3 = 0x8000000000000000LL;
    sub_1004B0AAC( a1,  a2,  isUniquelyReferenced_nonNull_native,  (uint64_t (*)(void *))sub_10049A934,  &qword_1009BB838,  (unint64_t *)&qword_1009BBE30,  &OBJC_CLASS___IDSPushToken_ptr);
    Swift::Int v10 = *v3;
    Swift::Int *v3 = v11;
    return swift_bridgeObjectRelease(v10);
  }

  __break(1u);
  return result;
}

void sub_1004B0AAC( uint64_t a1, void *a2, char a3, uint64_t (*a4)(void *), uint64_t *a5, unint64_t *a6, void *a7)
{
  unint64_t v12 = v7;
  uint64_t v15 = *v7;
  unint64_t v17 = a4(a2);
  uint64_t v18 = *(void *)(v15 + 16);
  BOOL v19 = (v16 & 1) == 0;
  uint64_t v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v21 = v16;
  uint64_t v22 = *(void *)(v15 + 24);
  if (v22 >= v20 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v22 >= v20 && (a3 & 1) == 0)
  {
    sub_1004B0400(a5);
LABEL_7:
    unint64_t v23 = (void *)*v12;
    if ((v21 & 1) != 0)
    {
LABEL_8:
      uint64_t v24 = v23[7];

      *(void *)(v24 + 8 * v17) = a1;
      return;
    }

void sub_1004B0C34(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_100417DF8(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= v13 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_1004B059C();
LABEL_7:
    char v16 = (void *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      uint64_t v17 = v16[7];

      *(void *)(v17 + 8 * v10) = a1;
      return;
    }

void sub_1004B0D6C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_100417D94(a2, a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_1004B073C();
LABEL_7:
    unint64_t v18 = (void *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      uint64_t v19 = v18[7];

      *(void *)(v19 + 8 * v1sub_10040A648(v1 + 2) = a1;
      return;
    }

uint64_t sub_1004B0EC8(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0LL;
    return __clz(__rbit64(v1)) + v2;
  }

  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1LL << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64LL;
    return __clz(__rbit64(v1)) + v2;
  }

  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2LL;
  }
  unint64_t v8 = v7 - 2;
  char v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 64LL;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64LL;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }

  return v3;
}

void *sub_1004B0F50(void *result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a2 < 0 || 1LL << *(_BYTE *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }

  if (((*(void *)(a5 + (((unint64_t)a2 >> 3) & 0xFFFFFFFFFFFFF8LL) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  if (*(_DWORD *)(a5 + 36) == a3)
  {
    char v5 = (uint64_t *)(*(void *)(a5 + 48) + 16 * a2);
    uint64_t v6 = *v5;
    uint64_t v7 = v5[1];
    unint64_t v8 = *(void **)(*(void *)(a5 + 56) + 8 * a2);
    *uint64_t result = v8;
    swift_bridgeObjectRetain(v7);
    id v9 = v8;
    return (void *)v6;
  }

unint64_t sub_1004B0FE0(void *a1)
{
  uint64_t v1 = a1[2];
  if (!v1) {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  sub_1003F5CB4(&qword_1009BB830);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v1);
  uint64_t v4 = a1[4];
  char v5 = (void *)a1[5];
  unint64_t result = sub_100417DF8(v4);
  if ((v7 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    id v17 = v5;
    return (unint64_t)v3;
  }

  unint64_t v8 = (void **)(a1 + 7);
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v9 = 8 * result;
    *(void *)(v3[6] + __chkstk_darwin(v8, v9) = v4;
    *(void *)(v3[7] + __chkstk_darwin(v8, v9) = v5;
    uint64_t v10 = v3[2];
    BOOL v11 = __OFADD__(v10, 1LL);
    uint64_t v12 = v10 + 1;
    if (v11) {
      break;
    }
    v3[2] = v12;
    if (!--v1) {
      goto LABEL_8;
    }
    uint64_t v13 = v8 + 2;
    uint64_t v4 = (uint64_t)*(v8 - 1);
    BOOL v14 = *v8;
    id v15 = v5;
    unint64_t result = sub_100417DF8(v4);
    unint64_t v8 = v13;
    char v5 = v14;
    if ((v16 & 1) != 0) {
      goto LABEL_7;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_1004B10D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1003F5CB4(&qword_1009BC130);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1004B111C@<X0>(uint64_t *a1@<X8>)
{
  return sub_10049F9DC(*(void *)(v1 + 16), (uint64_t (*)(uint64_t))sub_100428B44, a1);
}

uint64_t sub_1004B113C@<X0>(uint64_t *a1@<X8>)
{
  return sub_10049F9DC(*(void *)(v1 + 16), (uint64_t (*)(uint64_t))sub_10049F3E0, a1);
}

id sub_1004B115C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, uint64_t a7, void *a8, uint64_t a9)
{
  os_log_type_t v69 = a6;
  uint64_t v70 = a8;
  uint64_t v67 = a4;
  uint64_t v68 = a5;
  uint64_t v65 = a1;
  uint64_t v66 = a3;
  uint64_t v64 = a2;
  uint64_t v71 = a9;
  uint64_t v72 = a7;
  uint64_t v10 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v62 = *(void *)(v10 - 8);
  uint64_t v63 = v10;
  __chkstk_darwin(v11, v12);
  BOOL v14 = (char *)&v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v16, v17);
  uint64_t v19 = (char *)&v60 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v20, v21);
  uint64_t v23 = (char *)&v60 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  BOOL v24 = v9;
  sub_10048ADB4(0);
  sub_10048ADB4(1u);
  uint64_t v61 = OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_q;
  uint64_t v25 = sub_10041D3C4(0LL, (unint64_t *)&qword_1009B9830, &OBJC_CLASS___OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v25);
  v74[0] = _swiftEmptyArrayStorage;
  uint64_t v26 = sub_10040A2B0( &qword_1009B8E20,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v27 = sub_1003F5CB4((uint64_t *)&unk_1009B9840);
  uint64_t v28 = sub_1004021DC((unint64_t *)&qword_1009B8E28, (uint64_t *)&unk_1009B9840);
  dispatch thunk of SetAlgebra.init<A>(_:)(v74, v27, v28, v15, v26);
  (*(void (**)(char *, void, uint64_t))(v62 + 104))( v14,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v63);
  uint64_t v29 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000002FLL,  0x8000000100842660LL,  v23,  v19,  v14,  0LL);
  *(void *)&v24[v61] = v29;
  uint64_t v30 = OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_lock;
  uint64_t v31 = sub_1003F5CB4((uint64_t *)&unk_1009B9860);
  uint64_t v32 = swift_allocObject(v31, 20LL, 7LL);
  *(_DWORD *)(v32 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
  *(void *)&v24[v30] = v32;
  uint64_t v33 = &v24[OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_delegate];
  *((void *)v33 + 1) = 0LL;
  swift_unknownObjectWeakInit(v33, 0LL);
  uint64_t v34 = OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_sessionsByID;
  *(void *)&v24[v34] = sub_10049E71C((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v35 = OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_participantsLock;
  uint64_t v36 = swift_allocObject(v31, 20LL, 7LL);
  *(_DWORD *)(v36 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
  *(void *)&v24[v35] = v36;
  uint64_t v37 = OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_participantsByID;
  *(void *)&v24[v37] = sub_1004B0FE0(_swiftEmptyArrayStorage);
  uint64_t v38 = OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_participantsByPushToken;
  *(void *)&v24[v38] = sub_10049E834( (uint64_t)_swiftEmptyArrayStorage,  &qword_1009BB838,  (uint64_t (*)(id))sub_10049A934);
  uint64_t v39 = OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_formerlyActiveParticipantsByID;
  *(void *)&v24[v39] = sub_1004B0FE0(_swiftEmptyArrayStorage);
  uint64_t v40 = OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_membersByURI;
  *(void *)&v24[v40] = sub_10049E834( (uint64_t)_swiftEmptyArrayStorage,  &qword_1009BB848,  (uint64_t (*)(id))sub_100433024);
  *(void *)&v24[OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_preKeyAckCount] = 0LL;
  *(void *)&v24[OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_localParticipantID] = 0LL;
  *(void *)&v24[OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_endpointSubscription] = 0LL;
  *(void *)&v24[OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_encryptionSequenceNumber] = 0LL;
  uint64_t v41 = &v24[OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_needsKMCacheResetAfter];
  uint64_t v42 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56LL))(v41, 1LL, 1LL, v42);
  v24[OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup__shortMKIEnabled] = 0;
  uint64_t v43 = OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_logStateLock;
  uint64_t v44 = swift_allocObject(v31, 20LL, 7LL);
  *(_DWORD *)(v44 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
  *(void *)&v24[v43] = v44;
  swift_beginAccess(v33, v74, 1LL, 0LL);
  uint64_t v45 = v65;
  *((void *)v33 + 1) = v64;
  swift_unknownObjectWeakAssign(v33, v45);
  uint64_t v46 = &v24[OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_id];
  uint64_t v47 = v67;
  uint64_t v48 = v68;
  *uint64_t v46 = v66;
  v46[1] = v47;
  *(void *)&v24[OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_config] = v48;
  uint64_t v50 = v69;
  id v49 = v70;
  *(void *)&v24[OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_identityController] = v69;
  sub_100401ACC( (uint64_t)v49,  (uint64_t)&v24[OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_cryptoHandler]);
  uint64_t v52 = v71;
  uint64_t v51 = v72;
  *(void *)&v24[OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_pushHandler] = v72;
  *(void *)&v24[OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_sessionProvider] = v52;
  id v53 = v48;
  id v54 = v50;
  swift_unknownObjectRetain(v51, v55);
  swift_unknownObjectRetain(v52, v56);

  uint64_t v57 = (objc_class *)type metadata accessor for IDSGroupEncryptionControllerGroup(0LL);
  v73.receiver = v24;
  v73.super_class = v57;
  id v58 = objc_msgSendSuper2(&v73, "init");
  sub_10040A648(v49);
  return v58;
}

uint64_t type metadata accessor for IDSGroupEncryptionControllerGroup(uint64_t a1)
{
  uint64_t result = qword_1009C5AF8;
  if (!qword_1009C5AF8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for IDSGroupEncryptionControllerGroup);
  }
  return result;
}

uint64_t sub_1004B1608@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  unint64_t v4 = *(void *)(v1 + 24);
  swift_beginAccess( v3 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_membersByURI,  v6,  33LL,  0LL);
  *a1 = sub_1004AF3F0(v4);
  return swift_endAccess(v6);
}

uint64_t sub_1004B1670(void *a1)
{
  uint64_t v3 = *(void **)(v1 + 16);
  sub_10041D3C4(0LL, (unint64_t *)&qword_1009B92C0, &OBJC_CLASS___NSObject_ptr);
  id v4 = [v3 tokenFreeURI];
  id v5 = [a1 tokenFreeURI];
  LOBYTE(vsub_10040A648(v1 + 3) = static NSObject.== infix(_:_:)(v4, v5);

  return v3 & 1;
}

void sub_1004B1710(uint64_t a1, uint64_t (*a2)(id, id))
{
  uint64_t v3 = a1;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 >= 0) {
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    uint64_t v34 = 0LL;
    uint64_t v4 = 0LL;
    unint64_t v5 = 0LL;
    unint64_t v6 = __CocoaDictionary.makeIterator()(a1) | 0x8000000000000000LL;
  }

  else
  {
    uint64_t v7 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v4 = ~v7;
    uint64_t v34 = a1 + 64;
    uint64_t v8 = -v7;
    if (v8 < 64) {
      uint64_t v9 = ~(-1LL << v8);
    }
    else {
      uint64_t v9 = -1LL;
    }
    unint64_t v5 = v9 & *(void *)(a1 + 64);
    unint64_t v6 = a1;
  }

  __n128 v10 = swift_bridgeObjectRetain(v3);
  uint64_t v11 = 0LL;
  int64_t v33 = (unint64_t)(v4 + 64) >> 6;
  uint64_t v32 = (char *)&type metadata for Swift.AnyObject + 8;
  if ((v6 & 0x8000000000000000LL) != 0) {
    goto LABEL_12;
  }
LABEL_10:
  if (v5)
  {
    uint64_t v12 = (v5 - 1) & v5;
    unint64_t v13 = __clz(__rbit64(v5)) | (v11 << 6);
    uint64_t v14 = v11;
    goto LABEL_31;
  }

  int64_t v27 = v11 + 1;
  if (!__OFADD__(v11, 1LL))
  {
    if (v27 < v33)
    {
      unint64_t v28 = *(void *)(v34 + 8 * v27);
      uint64_t v14 = v11 + 1;
      if (v28) {
        goto LABEL_30;
      }
      uint64_t v14 = v11 + 2;
      if (v11 + 2 >= v33) {
        goto LABEL_35;
      }
      unint64_t v28 = *(void *)(v34 + 8 * v14);
      if (v28) {
        goto LABEL_30;
      }
      uint64_t v14 = v11 + 3;
      if (v11 + 3 >= v33) {
        goto LABEL_35;
      }
      unint64_t v28 = *(void *)(v34 + 8 * v14);
      if (v28) {
        goto LABEL_30;
      }
      uint64_t v14 = v11 + 4;
      if (v11 + 4 >= v33) {
        goto LABEL_35;
      }
      unint64_t v28 = *(void *)(v34 + 8 * v14);
      if (v28)
      {
LABEL_30:
        uint64_t v12 = (v28 - 1) & v28;
        unint64_t v13 = __clz(__rbit64(v28)) + (v14 << 6);
LABEL_31:
        uint64_t v30 = 8 * v13;
        uint64_t v31 = *(void **)(*(void *)(v6 + 56) + v30);
        id v21 = *(id *)(*(void *)(v6 + 48) + v30);
        for (i = v31; v21; uint64_t v12 = v5)
        {
          if ((a2(v21, i) & 1) != 0) {
            break;
          }

          uint64_t v11 = v14;
          unint64_t v5 = v12;
          if ((v6 & 0x8000000000000000LL) == 0) {
            goto LABEL_10;
          }
LABEL_12:
          uint64_t v15 = __CocoaDictionary.Iterator.next()(v10);
          uint64_t v17 = v15;
          if (!v15) {
            break;
          }
          uint64_t v18 = v16;
          uint64_t v35 = v15;
          uint64_t v19 = sub_10041D3C4(0LL, (unint64_t *)&unk_1009BC270, &OBJC_CLASS___IDSURI_ptr);
          swift_unknownObjectRetain(v17, v20);
          swift_dynamicCast(&v36, &v35, v32, v19, 7LL);
          id v21 = v36;
          swift_unknownObjectRelease(v17, v22);
          uint64_t v35 = v18;
          uint64_t v23 = type metadata accessor for IDSGroupEncryptionControllerMember();
          swift_unknownObjectRetain(v18, v24);
          swift_dynamicCast(&v36, &v35, v32, v23, 7LL);
          id i = v36;
          swift_unknownObjectRelease(v18, v26);
          uint64_t v14 = v11;
        }

        goto LABEL_35;
      }

      uint64_t v14 = v11 + 5;
      if (v11 + 5 < v33)
      {
        unint64_t v28 = *(void *)(v34 + 8 * v14);
        if (!v28)
        {
          uint64_t v29 = v11 + 6;
          while (v33 != v29)
          {
            unint64_t v28 = *(void *)(v34 + 8 * v29++);
            if (v28)
            {
              uint64_t v14 = v29 - 1;
              goto LABEL_30;
            }
          }

          goto LABEL_35;
        }

        goto LABEL_30;
      }
    }

void sub_1004B1A1C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v4 = a1;
    }
    else {
      uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v5 = __CocoaSet.makeIterator()(v4);
    uint64_t v6 = type metadata accessor for IDSGroupEncryptionControllerParticipant(0LL);
    uint64_t v7 = sub_10040A2B0( (unint64_t *)&unk_1009B97C0,  type metadata accessor for IDSGroupEncryptionControllerParticipant,  (uint64_t)&protocol conformance descriptor for NSObject);
    uint64_t v8 = Set.Iterator.init(_cocoa:)(v30, v5, v6, v7);
    uint64_t v3 = v30[0];
    uint64_t v28 = v30[1];
    uint64_t v9 = v30[2];
    uint64_t v10 = v30[3];
    unint64_t v11 = v30[4];
  }

  else
  {
    uint64_t v12 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v28 = a1 + 56;
    uint64_t v9 = ~v12;
    uint64_t v13 = -v12;
    if (v13 < 64) {
      uint64_t v14 = ~(-1LL << v13);
    }
    else {
      uint64_t v14 = -1LL;
    }
    unint64_t v11 = v14 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    uint64_t v10 = 0LL;
  }

  int64_t v27 = (unint64_t)(v9 + 64) >> 6;
  if (v3 < 0) {
    goto LABEL_13;
  }
LABEL_11:
  if (v11)
  {
    uint64_t v15 = (v11 - 1) & v11;
    unint64_t v16 = __clz(__rbit64(v11)) | (v10 << 6);
    uint64_t v17 = v10;
    goto LABEL_32;
  }

  int64_t v24 = v10 + 1;
  if (!__OFADD__(v10, 1LL))
  {
    if (v24 < v27)
    {
      unint64_t v25 = *(void *)(v28 + 8 * v24);
      uint64_t v17 = v10 + 1;
      if (v25) {
        goto LABEL_31;
      }
      uint64_t v17 = v10 + 2;
      if (v10 + 2 >= v27) {
        goto LABEL_36;
      }
      unint64_t v25 = *(void *)(v28 + 8 * v17);
      if (v25) {
        goto LABEL_31;
      }
      uint64_t v17 = v10 + 3;
      if (v10 + 3 >= v27) {
        goto LABEL_36;
      }
      unint64_t v25 = *(void *)(v28 + 8 * v17);
      if (v25) {
        goto LABEL_31;
      }
      uint64_t v17 = v10 + 4;
      if (v10 + 4 >= v27) {
        goto LABEL_36;
      }
      unint64_t v25 = *(void *)(v28 + 8 * v17);
      if (v25)
      {
LABEL_31:
        uint64_t v15 = (v25 - 1) & v25;
        unint64_t v16 = __clz(__rbit64(v25)) + (v17 << 6);
LABEL_32:
        for (i = (char *)*(id *)(*(void *)(v3 + 48) + 8 * v16); i; uint64_t v15 = v11)
        {
          sub_10041D3C4(0LL, (unint64_t *)&qword_1009B92C0, &OBJC_CLASS___NSObject_ptr);
          if ((static NSObject.== infix(_:_:)( *(void *)&i[OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_pushToken],  a2) & 1) != 0) {
            break;
          }

          uint64_t v10 = v17;
          unint64_t v11 = v15;
          if ((v3 & 0x8000000000000000LL) == 0) {
            goto LABEL_11;
          }
LABEL_13:
          uint64_t v18 = __CocoaSet.Iterator.next()(v8);
          if (!v18) {
            break;
          }
          uint64_t v19 = v18;
          uint64_t v29 = v18;
          uint64_t v20 = type metadata accessor for IDSGroupEncryptionControllerParticipant(0LL);
          swift_unknownObjectRetain(v19, v21);
          swift_dynamicCast(&v31, &v29, (char *)&type metadata for Swift.AnyObject + 8, v20, 7LL);
          id i = v31;
          swift_unknownObjectRelease(v19, v23);
          uint64_t v17 = v10;
        }

        goto LABEL_36;
      }

      uint64_t v17 = v10 + 5;
      if (v10 + 5 < v27)
      {
        unint64_t v25 = *(void *)(v28 + 8 * v17);
        if (!v25)
        {
          uint64_t v26 = v10 + 6;
          while (v27 != v26)
          {
            unint64_t v25 = *(void *)(v28 + 8 * v26++);
            if (v25)
            {
              uint64_t v17 = v26 - 1;
              goto LABEL_31;
            }
          }

          goto LABEL_36;
        }

        goto LABEL_31;
      }
    }

void sub_1004B1D1C(unint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v24 = 0LL;
  int64_t v5 = 0LL;
  uint64_t v6 = a3 + 56;
  uint64_t v7 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v8 = -1LL;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 56);
  int64_t v26 = (unint64_t)(v7 + 63) >> 6;
  while (v9)
  {
    unint64_t v10 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    unint64_t v11 = v10 | (v5 << 6);
LABEL_18:
    uint64_t v15 = *(void **)(*(void *)(a3 + 48) + 8 * v11);
    unint64_t v16 = *(uint64_t (**)(void))((swift_isaMask & *v15) + 0xB0LL);
    uint64_t v17 = v15;
    uint64_t v18 = v16();
    if (v18)
    {
      uint64_t v19 = (void *)v18;
      type metadata accessor for IDSGroupEncryptionControllerMember();
      id v20 = a4;
      char v21 = static NSObject.== infix(_:_:)(v19, v20);

      if ((v21 & 1) != 0)
      {
        *(unint64_t *)((char *)a1 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v11;
        BOOL v12 = __OFADD__(v24++, 1LL);
        if (v12) {
          goto LABEL_30;
        }
      }
    }

    else
    {
    }
  }

  BOOL v12 = __OFADD__(v5++, 1LL);
  if (v12)
  {
    __break(1u);
    goto LABEL_29;
  }

  if (v5 >= v26) {
    goto LABEL_27;
  }
  unint64_t v13 = *(void *)(v6 + 8 * v5);
  if (v13)
  {
LABEL_17:
    unint64_t v9 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v5 << 6);
    goto LABEL_18;
  }

  int64_t v14 = v5 + 1;
  if (v5 + 1 >= v26) {
    goto LABEL_27;
  }
  unint64_t v13 = *(void *)(v6 + 8 * v14);
  if (v13) {
    goto LABEL_16;
  }
  int64_t v14 = v5 + 2;
  if (v5 + 2 >= v26) {
    goto LABEL_27;
  }
  unint64_t v13 = *(void *)(v6 + 8 * v14);
  if (v13) {
    goto LABEL_16;
  }
  int64_t v14 = v5 + 3;
  if (v5 + 3 >= v26)
  {
LABEL_27:
    swift_retain(a3);
    sub_1004AEE34(a1, a2, v24, a3, (uint64_t *)&unk_1009B97D0);
    return;
  }

  unint64_t v13 = *(void *)(v6 + 8 * v14);
  if (v13)
  {
LABEL_16:
    int64_t v5 = v14;
    goto LABEL_17;
  }

  while (1)
  {
    int64_t v5 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      break;
    }
    if (v5 >= v26) {
      goto LABEL_27;
    }
    unint64_t v13 = *(void *)(v6 + 8 * v5);
    ++v14;
    if (v13) {
      goto LABEL_17;
    }
  }

uint64_t sub_1004B1F44(uint64_t a1, void *a2)
{
  char v4 = *(_BYTE *)(a1 + 32);
  unsigned int v5 = v4 & 0x3F;
  unint64_t v6 = (unint64_t)((1LL << v4) + 63) >> 6;
  id v7 = a2;
  if (v5 <= 0xD || (swift_stdlib_isStackAllocationSafe(8 * v6, 8LL) & 1) != 0)
  {
    __chkstk_darwin(v8, v9);
    unint64_t v10 = (char *)&v19 - ((8 * v6 + 15) & 0x3FFFFFFFFFFFFFF0LL);
    bzero(v10, 8 * v6);
    id v11 = v7;
    sub_1004B1D1C((unint64_t *)v10, v6, a1, v11);
    uint64_t v13 = v12;
    swift_release(a1);

    if (v2) {
      swift_willThrow(v14);
    }
  }

  else
  {
    uint64_t v15 = (void *)swift_slowAlloc(8 * v6, -1LL);
    bzero(v15, 8 * v6);
    id v16 = v7;
    sub_1004B1D1C((unint64_t *)v15, v6, a1, v16);
    uint64_t v13 = v17;
    swift_release(a1);

    swift_slowDealloc(v15, -1LL, -1LL);
  }

  return v13;
}

Swift::Int sub_1004B20F0(uint64_t a1, void *a2)
{
  if ((a1 & 0xC000000000000001LL) == 0) {
    return sub_1004B1F44(a1, a2);
  }
  uint64_t v2 = &_swiftEmptySetSingleton;
  uint64_t v29 = &_swiftEmptySetSingleton;
  if (a1 < 0) {
    uint64_t v3 = a1;
  }
  else {
    uint64_t v3 = a1 & 0xFFFFFFFFFFFFFF8LL;
  }
  id v4 = a2;
  uint64_t v5 = __CocoaSet.makeIterator()(v3);
  uint64_t v6 = __CocoaSet.Iterator.next()(v5);
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = type metadata accessor for IDSGroupEncryptionControllerParticipant(0LL);
    do
    {
      uint64_t v27 = v7;
      uint64_t v10 = swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v8, 7LL);
      uint64_t v11 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v28) + 0xB0LL))(v10);
      if (v11
        && (uint64_t v12 = (void *)v11,
            type metadata accessor for IDSGroupEncryptionControllerMember(),
            id v13 = v4,
            char v14 = static NSObject.== infix(_:_:)(v12, v13),
            v12,
            v13,
            (v14 & 1) != 0))
      {
        uint64_t v15 = v28;
        id v16 = v29;
        unint64_t v17 = v29[2];
        if (v29[3] <= v17)
        {
          sub_100435E38(v17 + 1, (uint64_t *)&unk_1009B97D0);
          id v16 = v29;
        }

        Swift::Int result = NSObject._rawHashValue(seed:)(v16[5]);
        uint64_t v18 = v16 + 7;
        uint64_t v19 = -1LL << *((_BYTE *)v16 + 32);
        unint64_t v20 = result & ~v19;
        unint64_t v21 = v20 >> 6;
        if (((-1LL << v20) & ~v16[(v20 >> 6) + 7]) != 0)
        {
          unint64_t v22 = __clz(__rbit64((-1LL << v20) & ~v16[(v20 >> 6) + 7])) | v20 & 0x7FFFFFFFFFFFFFC0LL;
        }

        else
        {
          char v23 = 0;
          unint64_t v24 = (unint64_t)(63 - v19) >> 6;
          do
          {
            if (++v21 == v24 && (v23 & 1) != 0)
            {
              __break(1u);
              return result;
            }

            BOOL v25 = v21 == v24;
            if (v21 == v24) {
              unint64_t v21 = 0LL;
            }
            v23 |= v25;
            uint64_t v26 = v18[v21];
          }

          while (v26 == -1);
          unint64_t v22 = __clz(__rbit64(~v26)) + (v21 << 6);
        }

        *(void *)((char *)v18 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v22;
        *(void *)(v16[6] + 8 * v2sub_10040A648(v1 + 2) = v15;
        ++v16[2];
      }

      else
      {
      }

      uint64_t v7 = __CocoaSet.Iterator.next()(result);
    }

    while (v7);
    uint64_t v2 = v29;
  }

  swift_release(v5);
  return (Swift::Int)v2;
}

unint64_t sub_1004B234C@<X0>(void *a1@<X8>)
{
  return sub_1004A2E90(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

unint64_t sub_1004B2354@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 16);
  id v4 = [*(id *)(v1 + 24) participantIdentifier];
  uint64_t v5 = (uint64_t *)(v3
                 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_formerlyActiveParticipantsByID);
  unint64_t result = swift_beginAccess( v3 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_formerlyActiveParticipantsByID,  v10,  0LL,  0LL);
  uint64_t v7 = *v5;
  if (*(void *)(v7 + 16) && (unint64_t result = sub_100417DF8((uint64_t)v4), (v8 & 1) != 0))
  {
    __n128 v9 = *(void **)(*(void *)(v7 + 56) + 8 * result);
    unint64_t result = v9;
  }

  else
  {
    __n128 v9 = 0LL;
  }

  *a1 = v9;
  return result;
}

uint64_t sub_1004B23E4@<X0>(char *a1@<X8>)
{
  return sub_1004AAA4C(*(void **)(v1 + 16), a1);
}

uint64_t sub_1004B23EC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v4 = (uint64_t *)(*(void *)(v2 + 16) + *a1);
  swift_beginAccess(v4, v7, 0LL, 0LL);
  uint64_t v5 = *v4;
  *a2 = *v4;
  return swift_bridgeObjectRetain(v5);
}

uint64_t sub_1004B243C()
{
  return type metadata accessor for IDSGroupEncryptionControllerGroup(0LL);
}

void sub_1004B2444(uint64_t a1)
{
  uint64_t v6 = &unk_10071C478;
  uint64_t v2 = type metadata accessor for Logger(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v7 = *(void *)(v2 - 8) + 64LL;
    uint64_t v8 = v7;
    __n128 v9 = (char *)&value witness table for Builtin.UnknownObject + 64;
    uint64_t v10 = (char *)&value witness table for Builtin.NativeObject + 64;
    uint64_t v11 = &unk_10071C490;
    uint64_t v12 = (char *)&value witness table for Builtin.UnknownObject + 64;
    id v13 = (char *)&value witness table for Builtin.UnknownObject + 64;
    char v14 = &unk_10071C4A8;
    uint64_t v15 = &unk_10071C4A8;
    id v16 = &unk_10071C4C0;
    unint64_t v17 = (char *)&value witness table for Builtin.BridgeObject + 64;
    uint64_t v18 = (char *)&value witness table for Builtin.NativeObject + 64;
    uint64_t v19 = (char *)&value witness table for Builtin.BridgeObject + 64;
    unint64_t v20 = (char *)&value witness table for Builtin.BridgeObject + 64;
    unint64_t v21 = (char *)&value witness table for Builtin.BridgeObject + 64;
    unint64_t v22 = (char *)&value witness table for Builtin.BridgeObject + 64;
    char v23 = (char *)&value witness table for Builtin.Int64 + 64;
    unint64_t v24 = (char *)&value witness table for Builtin.Int64 + 64;
    BOOL v25 = &unk_10071C4D8;
    uint64_t v26 = (char *)&value witness table for Builtin.Int64 + 64;
    sub_1004B2554(319LL);
    if (v5 <= 0x3F)
    {
      uint64_t v27 = *(void *)(v4 - 8) + 64LL;
      uint64_t v28 = &unk_10071C4F0;
      uint64_t v29 = (char *)&value witness table for Builtin.NativeObject + 64;
      swift_updateClassMetadata2(a1, 256LL, 24LL, &v6, a1 + 80);
    }
  }

void sub_1004B2554(uint64_t a1)
{
  if (!qword_1009BB818)
  {
    uint64_t v2 = type metadata accessor for Date(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_1009BB818);
    }
  }

uint64_t sub_1004B25A8()
{
  return sub_1004AAF80(*(void **)(v0 + 16));
}

uint64_t sub_1004B25D0()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1004B25F0()
{
  return sub_1004AA5F4(*(void **)(v0 + 16), *(double *)(v0 + 24));
}

uint64_t sub_1004B261C()
{
  return sub_1004A6430(*(void *)(v0 + 16));
}

unint64_t sub_1004B2644@<X0>(void *a1@<X8>)
{
  return sub_1004A2E90(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

void *sub_1004B266C@<X0>(void *a1@<X8>)
{
  unint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2) {
    *a1 = v5;
  }
  return result;
}

uint64_t sub_1004B26A8@<X0>(uint64_t *a1@<X8>)
{
  return sub_10049F9DC(*(void *)(v1 + 16), (uint64_t (*)(uint64_t))sub_10049F3E0, a1);
}

uint64_t sub_1004B26D8@<X0>(uint64_t *a1@<X8>)
{
  return sub_10049F9DC(*(void *)(v1 + 16), (uint64_t (*)(uint64_t))sub_100428B44, a1);
}

uint64_t sub_1004B2708()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1004B272C()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **(void **)(v0 + 16)) + 0x378LL))();
}

uint64_t sub_1004B2764(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_10040A648(v1 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1004B2774(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1004B277C()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_1004B27B0()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v4 = *(void **)(v1 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_pushHandler);
  uint64_t v5 = sub_1003F5CB4(&qword_1009B9A10);
  uint64_t inited = swift_initStackObject(v5, &v20);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100718500;
  *(void *)(inited + 3sub_10040A648(v1 + 2) = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSFanoutMessageGroupIDKey);
  *(void *)(inited + 40) = v7;
  uint64_t v8 = v1 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_id;
  uint64_t v9 = *(void *)(v1 + OBJC_IVAR____TtC17identityservicesd33IDSGroupEncryptionControllerGroup_id);
  uint64_t v10 = *(void *)(v8 + 8);
  *(void *)(inited + 7sub_10040A648(v1 + 2) = &type metadata for String;
  *(void *)(inited + 48) = v9;
  *(void *)(inited + 56) = v10;
  *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSDSessionMessageSessionID);
  *(void *)(inited + 88) = v11;
  uint64_t v12 = v2 + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_sessionID;
  uint64_t v13 = *(void *)(v2 + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_sessionID);
  uint64_t v14 = *(void *)(v12 + 8);
  *(void *)(inited + 120) = &type metadata for String;
  *(void *)(inited + 96) = v13;
  *(void *)(inited + 104) = v14;
  *(void *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSDSessionMessageRealTimeEncryptionPreKeyRecoveryRequestKey);
  *(void *)(inited + 136) = v15;
  *(void *)(inited + 168) = &type metadata for Bool;
  *(_BYTE *)(inited + 144) = 1;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v14);
  unint64_t v16 = sub_100427AB8(inited);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v16);
  NSString v18 = String._bridgeToObjectiveC()();
  NSString v19 = String._bridgeToObjectiveC()();
  [v4 sendPreKeyRequestMessage:isa toDestination:v3 forGroup:v18 sessionID:v19];
}

uint64_t sub_1004B2944()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **(void **)(v0 + 16)) + 0x348LL))();
}

id sub_1004B2990(void *a1)
{
  uint64_t v3 = (char *)objc_allocWithZone(v1);
  sub_10048ADB4(0xBu);
  *(void *)&v3[OBJC_IVAR___IDSSenderKeyEncryptionController_persistenceManager] = a1;
  id v4 = a1;

  v7.receiver = v3;
  v7.super_class = v1;
  id v5 = objc_msgSendSuper2(&v7, "init");

  return v5;
}

os_log_s *sub_1004B2AB4(unint64_t a1, uint64_t a2, id a3, void *a4)
{
  id v5 = (os_log_s *)v4;
  unint64_t v152 = a1;
  int64_t v153 = (os_log_s *)a2;
  v8.n128_f64[0] = type metadata accessor for PaddyOutgoingSymmetricRatchet(0LL);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v133 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1003F5CB4((uint64_t *)&unk_1009BAC60);
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)&v133 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for SenderKeyAndState(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v18, v19);
  unint64_t v21 = (uint64_t *)((char *)&v133 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v151 = OBJC_IVAR___IDSSenderKeyEncryptionController_persistenceManager;
  id v22 = *(id *)&v4[OBJC_IVAR___IDSSenderKeyEncryptionController_persistenceManager];
  sub_1004F3ED8(a3, a4, (uint64_t)v15);

  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1LL, v16) == 1)
  {
    sub_1004B3A78((uint64_t)v15);
LABEL_5:
    id v35 = a4;
    id v36 = a3;
    uint64_t v37 = (os_log_s *)v35;
    uint64_t v38 = (os_log_s *)v36;
    uint64_t v39 = (os_log_s *)Logger.logObject.getter(v38);
    os_log_type_t v40 = static os_log_type_t.default.getter(v39);
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v41 = swift_slowAlloc(22LL, -1LL);
      uint64_t v42 = (os_log_s **)swift_slowAlloc(16LL, -1LL);
      *(_DWORD *)uint64_t v41 = 138412546;
      uint64_t v155 = v38;
      uint64_t v43 = v38;
      int64_t v153 = v39;
      uint64_t v44 = v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, v156, v41 + 4, v41 + 12);
      *uint64_t v42 = v38;

      *(_WORD *)(v41 + 1sub_10040A648(v1 + 2) = 2112;
      uint64_t v155 = v37;
      uint64_t v45 = v37;
      uint64_t v39 = v153;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, v156, v41 + 14, v41 + 22);
      v42[1] = v37;

      _os_log_impl( (void *)&_mh_execute_header,  v39,  v40,  "Missing sender key to encrypt to: %@ from: %@",  (uint8_t *)v41,  0x16u);
      uint64_t v46 = sub_1003F5CB4(&qword_1009B92C8);
      swift_arrayDestroy(v42, 2LL, v46);
      swift_slowDealloc(v42, -1LL, -1LL);
      swift_slowDealloc(v41, -1LL, -1LL);
    }

    else
    {
    }

    uint64_t v47 = sub_1003F5CB4(&qword_1009B9A10);
    uint64_t inited = swift_initStackObject(v47, v159);
    *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1007184C0;
    *(void *)(inited + 3sub_10040A648(v1 + 2) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
    *(void *)(inited + 40) = v49;
    *(void *)(inited + 7sub_10040A648(v1 + 2) = &type metadata for String;
    *(void *)(inited + 48) = 0xD000000000000017LL;
    *(void *)(inited + 56) = 0x8000000100842C90LL;
    unint64_t v50 = sub_100427AB8(inited);
    id v51 = objc_allocWithZone(&OBJC_CLASS___NSError);
    NSString v52 = String._bridgeToObjectiveC()();
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v50);
    id v54 = [v51 initWithDomain:v52 code:1 userInfo:isa];

    id v55 = objc_allocWithZone((Class)&OBJC_CLASS___IDSOffGridCryptionResult);
    uint64_t v56 = (void *)_convertErrorToNSError(_:)(v54);

    uint64_t v57 = (os_log_s *)[v55 initWithEncryptedData:0 keyIndex:0 key:0 keyID:0 authTag:0 error:v56];
    return v57;
  }

  char v150 = v5;
  unint64_t v148 = v11;
  sub_1004B5350((uint64_t)v15, (uint64_t)v21);
  type metadata accessor for SenderKeyUtils();
  id v23 = [a4 prefixedURI];
  uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
  uint64_t v26 = v25;

  id v149 = a3;
  id v27 = [a3 prefixedURI];
  uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
  uint64_t v29 = v21;
  uint64_t v31 = v30;

  uint64_t v32 = sub_1004C8F00(v24, v26, v28, v31);
  unint64_t v34 = v33;
  swift_bridgeObjectRelease(v26);
  swift_bridgeObjectRelease(v31);
  if (v34 >> 60 == 15)
  {
    sub_1003F6050((uint64_t)v29, type metadata accessor for SenderKeyAndState);
    a3 = v149;
    goto LABEL_5;
  }

  id v138 = a4;
  uint64_t v58 = *v29;
  unint64_t v59 = v29[1];
  uint64_t v61 = v29[2];
  unint64_t v60 = v29[3];
  uint64_t v62 = (uint64_t *)((char *)v29 + *(int *)(v16 + 20));
  uint64_t v63 = *v62;
  unint64_t v64 = v62[1];
  sub_1004028CC(*v62, v64);
  sub_1004028CC(v63, v64);
  unint64_t v144 = v59;
  uint64_t v145 = v58;
  sub_1004028CC(v58, v59);
  unint64_t v146 = v60;
  uint64_t v147 = v61;
  sub_1004028CC(v61, v60);
  sub_100439780(v32, v34);
  uint64_t v65 = (uint64_t)v148;
  unint64_t v66 = v64;
  PaddyOutgoingSymmetricRatchet.init(data:conversationDST:)(v63, v64, v32, v34);
  uint64_t v142 = v32;
  uint64_t v143 = v29;
  unint64_t v139 = v64;
  unint64_t v140 = v34;
  uint64_t v141 = v63;
  uint64_t v68 = PaddyOutgoingSymmetricRatchet.seal(message:authenticatedData:)(v152, v153, v32, v34);
  uint64_t v70 = v69;
  unsigned int v135 = v71;
  sub_1004028CC(v68, v69);
  sub_1004B3AB8(16LL, v68, v70);
  unint64_t v152 = v156[0];
  int64_t v153 = v155;
  uint64_t v73 = PaddyOutgoingSymmetricRatchet.serializedData()(v72);
  uint64_t v75 = v74;
  id v76 = *(id *)((char *)v150 + v151);
  uint64_t v136 = v68;
  unint64_t v137 = v70;
  unint64_t v77 = v75;
  unint64_t v78 = v146;
  uint64_t v151 = v73;
  char v79 = sub_1004F37C8(v147, v146, 1, v73, v75);

  if ((v79 & 1) != 0)
  {
    unint64_t v134 = v77;
    uint64_t v80 = v147;
    sub_1004028CC(v147, v78);
    id v81 = v138;
    id v82 = v149;
    sub_1004028CC(v80, v78);
    id v83 = v81;
    id v84 = v82;
    int64_t v85 = (void *)Logger.logObject.getter(v84);
    os_log_type_t v86 = static os_log_type_t.default.getter(v85);
    int v87 = v86;
    if (os_log_type_enabled((os_log_t)v85, v86))
    {
      uint64_t v88 = swift_slowAlloc(38LL, -1LL);
      uint64_t v89 = swift_slowAlloc(16LL, -1LL);
      LODWORD(v149) = v87;
      uint64_t v90 = (void *)v89;
      char v150 = (os_log_s *)swift_slowAlloc(32LL, -1LL);
      uint64_t v155 = v150;
      *(_DWORD *)uint64_t v88 = 136315906;
      Swift::String v91 = Data.base64EncodedString(options:)(0LL);
      uint64_t v157 = sub_1003FFBB0(v91._countAndFlagsBits, (unint64_t)v91._object, (uint64_t *)&v155);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v157, v158, v88 + 4, v88 + 12);
      swift_bridgeObjectRelease(v91._object);
      sub_100402A84(v147, v146);
      sub_100402A84(v147, v146);
      *(_WORD *)(v88 + 1sub_10040A648(v1 + 2) = 1024;
      LODWORD(v157) = v135;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v157, (char *)&v157 + 4, v88 + 14, v88 + 18);
      id v138 = v85;
      *(_WORD *)(v88 + 18) = 2112;
      uint64_t v157 = (uint64_t)v83;
      id v92 = v83;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v157, v158, v88 + 20, v88 + 28);
      *uint64_t v90 = v83;

      unint64_t v78 = v146;
      *(_WORD *)(v88 + 28) = 2112;
      uint64_t v157 = (uint64_t)v84;
      id v93 = v84;
      uint64_t v80 = v147;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v157, v158, v88 + 30, v88 + 38);
      v90[1] = v84;

      id v94 = v138;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v138,  (os_log_type_t)v149,  "Successfully encrypted data using keyID: %s current keyIndex: %u from: %@ to: %@",  (uint8_t *)v88,  0x26u);
      uint64_t v95 = sub_1003F5CB4(&qword_1009B92C8);
      swift_arrayDestroy(v90, 2LL, v95);
      swift_slowDealloc(v90, -1LL, -1LL);
      unint64_t v96 = v150;
      swift_arrayDestroy(v150, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v96, -1LL, -1LL);
      swift_slowDealloc(v88, -1LL, -1LL);
    }

    else
    {

      sub_100402A84(v80, v78);
      sub_100402A84(v80, v78);
    }

    unint64_t v111 = v152;
    uint64_t v110 = (uint64_t)v153;
    uint64_t v112 = v145;
    sub_1004028CC(v145, v144);
    sub_1004028CC(v80, v78);
    uint64_t v113 = v78;
    uint64_t v114 = v80;
    uint64_t v115 = v136;
    unint64_t v116 = v137;
    sub_1004028CC(v136, v137);
    sub_1004B3C38(v114, v113);
    uint64_t v118 = v117;
    unint64_t v120 = v119;
    sub_1004028CC(v110, v111);
    sub_1004B3C38(v110, v111);
    uint64_t v122 = v121;
    unint64_t v124 = v123;
    char v150 = (os_log_s *)objc_allocWithZone((Class)&OBJC_CLASS___IDSOffGridCryptionResult);
    Class v125 = Data._bridgeToObjectiveC()().super.isa;
    sub_100402A84(v115, v116);
    unint64_t v126 = v144;
    Class v127 = Data._bridgeToObjectiveC()().super.isa;
    uint64_t v128 = v112;
    unint64_t v129 = v126;
    sub_100402A84(v128, v126);
    unint64_t v130 = v113;
    Class v131 = Data._bridgeToObjectiveC()().super.isa;
    sub_100402A84(v118, v120);
    Class v132 = Data._bridgeToObjectiveC()().super.isa;
    sub_100402A84(v122, v124);
    uint64_t v57 = -[os_log_s initWithEncryptedData:keyIndex:key:keyID:authTag:error:]( v150,  "initWithEncryptedData:keyIndex:key:keyID:authTag:error:",  v125,  v135,  v127,  v131,  v132,  0LL);

    sub_100402A84(v151, v134);
    sub_100402A84((uint64_t)v153, v152);
    sub_100402A84(v145, v129);
    sub_100402A84(v147, v130);
    sub_100402A84(v136, v137);
    sub_10040AD00(v142, v140);
    sub_100402A84(v141, v139);
    uint64_t v109 = (uint64_t)v148;
  }

  else
  {
    uint64_t v97 = sub_1003F5CB4(&qword_1009B9A10);
    uint64_t v98 = swift_initStackObject(v97, &v154);
    *(_OWORD *)(v98 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1007184C0;
    *(void *)(v98 + 3sub_10040A648(v1 + 2) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
    *(void *)(v98 + 40) = v99;
    *(void *)(v98 + 7sub_10040A648(v1 + 2) = &type metadata for String;
    *(void *)(v98 + 48) = 0xD00000000000001CLL;
    *(void *)(v98 + 56) = 0x8000000100842CD0LL;
    unint64_t v100 = sub_100427AB8(v98);
    unint64_t v101 = v77;
    id v102 = objc_allocWithZone(&OBJC_CLASS___NSError);
    NSString v103 = String._bridgeToObjectiveC()();
    Class v104 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v100);
    id v105 = [v102 initWithDomain:v103 code:3 userInfo:v104];

    id v106 = objc_allocWithZone((Class)&OBJC_CLASS___IDSOffGridCryptionResult);
    id v107 = v105;
    __n128 v108 = (void *)_convertErrorToNSError(_:)(v107);

    uint64_t v57 = (os_log_s *)[v106 initWithEncryptedData:0 keyIndex:0 key:0 keyID:0 authTag:0 error:v108];
    sub_100402A84(v151, v101);
    sub_100402A84((uint64_t)v153, v152);
    sub_100402A84(v145, v144);
    sub_100402A84(v147, v78);

    sub_100402A84(v136, v137);
    sub_10040AD00(v142, v140);
    sub_100402A84(v141, v66);
    uint64_t v109 = v65;
  }

  sub_1003F6050(v109, (uint64_t (*)(void))&type metadata accessor for PaddyOutgoingSymmetricRatchet);
  sub_1003F6050((uint64_t)v143, type metadata accessor for SenderKeyAndState);
  return v57;
}

uint64_t sub_1004B3A78(uint64_t a1)
{
  uint64_t v2 = sub_1003F5CB4((uint64_t *)&unk_1009BAC60);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void sub_1004B3AB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0x8000000000000000LL) == 0) {
    __asm { BR              X9 }
  }

  __break(1u);
  JUMPOUT(0x1004B3C04LL);
}

void sub_1004B3C38(uint64_t a1, uint64_t a2)
{
  v3[3] = &type metadata for Data;
  v3[4] = &protocol witness table for Data;
  v3[0] = a1;
  v3[1] = a2;
  uint64_t v2 = (char *)&loc_1004B3C9C
     + *((int *)qword_1004B3ED0 + (sub_10040A238(v3, (uint64_t)&type metadata for Data)[1] >> 62));
  __asm { BR              X10 }

uint64_t sub_1004B3CAC()
{
  uint64_t v6 = v2;
  __int16 v7 = v3;
  char v8 = BYTE2(v3);
  char v9 = BYTE3(v3);
  char v10 = BYTE4(v3);
  char v11 = BYTE5(v3);
  sub_1004028CC(v1, v0);
  sub_10040B170(&v6, (_BYTE *)&v6 + BYTE6(v3), &v12);
  sub_100402A84(v1, v0);
  uint64_t v4 = v12;
  sub_10040A648(&v13);
  return v4;
}

id sub_1004B3F80(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, unint64_t a5, void *a6, id a7)
{
  uint64_t v8 = v7;
  unsigned int v193 = a3;
  uint64_t v183 = a1;
  uint64_t v184 = a2;
  v13.n128_f64[0] = type metadata accessor for PaddyIncomingSymmetricRatchet(0LL);
  __chkstk_darwin(v13, v14);
  uint64_t v198 = (uint64_t)&v177 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v196 = type metadata accessor for SenderKeyAndState(0LL);
  uint64_t v16 = *(void *)(v196 - 8);
  __chkstk_darwin(v17, v18);
  uint64_t v20 = (unint64_t *)((char *)&v177 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v179 = OBJC_IVAR___IDSSenderKeyEncryptionController_persistenceManager;
  id v21 = *(id *)(v7 + OBJC_IVAR___IDSSenderKeyEncryptionController_persistenceManager);
  id v197 = a6;
  id v22 = sub_1004F3AA0(a4, a5, (uint64_t)a6);

  uint64_t v23 = v22[2];
  if (v23)
  {
    uint64_t v180 = a4;
    unint64_t v182 = a5;
    uint64_t v205 = type metadata accessor for SenderKeyUtils();
    uint64_t v206 = v8 + OBJC_IVAR___IDSSenderKeyEncryptionController_logger;
    uint64_t v24 = *(unsigned __int8 *)(v16 + 80);
    Class v181 = v22;
    uint64_t v25 = (uint64_t)v22 + ((v24 + 32) & ~v24);
    uint64_t v26 = *(os_log_s **)(v16 + 72);
    uint64_t v203 = 0LL;
    unint64_t v204 = (unint64_t)v26;
    *(void *)&__int128 v27 = 136315394LL;
    __int128 v187 = v27;
    uint64_t v186 = (char *)&type metadata for Any + 8;
    *(void *)&__int128 v27 = 138412290LL;
    __int128 v185 = v27;
    id v194 = a7;
    uint64_t v195 = v20;
    id v28 = v197;
    uint64_t v178 = v8;
    while (1)
    {
      sub_1004B5394(v25, (uint64_t)v20);
      uint64_t v29 = (void *)((char *)v20 + *(int *)(type metadata accessor for SenderKeyInfo(0LL) + 28));
      uint64_t v30 = *v29;
      uint64_t v31 = v29[1];
      uint64_t v33 = v29[2];
      uint64_t v32 = v29[3];
      swift_bridgeObjectRetain(v32);
      uint64_t v34 = v31;
      uint64_t v35 = v32;
      uint64_t v36 = sub_1004C8F00(v30, v34, v33, v32);
      if (v37 >> 60 == 15)
      {
        sub_1003F6050((uint64_t)v20, type metadata accessor for SenderKeyAndState);
        swift_bridgeObjectRelease(v32);
      }

      else
      {
        unint64_t v38 = v37;
        uint64_t v39 = *v20;
        uint64_t v189 = v33;
        uint64_t v190 = v39;
        uint64_t v40 = v20[2];
        unint64_t v191 = v20[1];
        unint64_t v41 = v20[3];
        uint64_t v42 = (void *)((char *)v20 + *(int *)(v196 + 20));
        uint64_t v44 = *v42;
        unint64_t v43 = v42[1];
        unint64_t v201 = v44;
        uint64_t v202 = v36;
        uint64_t v200 = v43;
        sub_1004028CC(v40, v41);
        uint64_t v45 = sub_1004028CC(v40, v41);
        uint64_t v46 = (os_log_s *)Logger.logObject.getter(v45);
        os_log_type_t v47 = static os_log_type_t.debug.getter();
        BOOL v48 = os_log_type_enabled(v46, v47);
        uint64_t v199 = v35;
        unint64_t v192 = v41;
        if (v48)
        {
          uint64_t v49 = swift_slowAlloc(18LL, -1LL);
          uint64_t v188 = v23;
          uint64_t v50 = v40;
          uint64_t v51 = v49;
          uint64_t v52 = swift_slowAlloc(32LL, -1LL);
          unint64_t v210 = v52;
          *(_DWORD *)uint64_t v51 = v187;
          Swift::String v53 = Data.base64EncodedString(options:)(0LL);
          *(void *)(v51 + 4) = sub_1003FFBB0(v53._countAndFlagsBits, (unint64_t)v53._object, (uint64_t *)&v210);
          swift_bridgeObjectRelease(v53._object);
          sub_100402A84(v50, v41);
          sub_100402A84(v50, v41);
          *(_WORD *)(v51 + 1sub_10040A648(v1 + 2) = 1024;
          *(_DWORD *)(v51 + 14) = v193;
          _os_log_impl((void *)&_mh_execute_header, v46, v47, "Trying keyID: %s keyIndex: %u", (uint8_t *)v51, 0x12u);
          swift_arrayDestroy(v52, 1LL, v186);
          uint64_t v54 = v52;
          uint64_t v20 = v195;
          swift_slowDealloc(v54, -1LL, -1LL);
          uint64_t v55 = v51;
          uint64_t v40 = v50;
          uint64_t v23 = v188;
          swift_slowDealloc(v55, -1LL, -1LL);
        }

        else
        {

          sub_100402A84(v40, v41);
          sub_100402A84(v40, v41);
        }

        unint64_t v57 = v200;
        uint64_t v56 = v201;
        sub_1004028CC(v201, v200);
        uint64_t v58 = v202;
        sub_100439780(v202, v38);
        unint64_t v59 = v57;
        uint64_t v60 = v203;
        PaddyIncomingSymmetricRatchet.init(data:conversationDST:)(v56, v59, v58, v38);
        if (!v60)
        {
          uint64_t v61 = PaddyIncomingSymmetricRatchet.open(_:authenticatedData:index:)(v183, v184, v58, v38, v193);
          unint64_t v128 = v127;
          uint64_t v205 = v61;
          uint64_t v129 = swift_bridgeObjectRelease(v181);
          uint64_t v130 = PaddyIncomingSymmetricRatchet.serializedData()(v129);
          uint64_t v132 = v131;
          id v133 = *(id *)(v178 + v179);
          unint64_t v134 = v192;
          unint64_t v204 = v132;
          LOBYTE(v13sub_10040A648(v1 + 2) = sub_1004F37C8(v40, v192, 0, v130, v132);

          if ((v132 & 1) != 0)
          {
            id v135 = v197;
            id v136 = v194;
            sub_1004028CC(v40, v134);
            id v137 = v135;
            id v138 = v136;
            uint64_t v139 = sub_1004028CC(v40, v134);
            unint64_t v140 = (os_log_s *)Logger.logObject.getter(v139);
            os_log_type_t v141 = static os_log_type_t.default.getter(v140);
            LODWORD(v206) = v141;
            BOOL v142 = os_log_type_enabled(v140, v141);
            unint64_t v177 = v38;
            uint64_t v203 = v130;
            if (v142)
            {
              uint64_t v143 = swift_slowAlloc(38LL, -1LL);
              id v197 = v138;
              uint64_t v144 = v143;
              uint64_t v196 = swift_slowAlloc(16LL, -1LL);
              uint64_t v200 = swift_slowAlloc(32LL, -1LL);
              unint64_t v210 = v200;
              *(_DWORD *)uint64_t v144 = 136315906;
              Swift::String v145 = Data.base64EncodedString(options:)(0LL);
              uint64_t v209 = sub_1003FFBB0(v145._countAndFlagsBits, (unint64_t)v145._object, (uint64_t *)&v210);
              unint64_t v201 = v128;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v209, &v210, v144 + 4, v144 + 12);
              swift_bridgeObjectRelease(v145._object);
              sub_100402A84(v40, v134);
              sub_100402A84(v40, v134);
              *(_WORD *)(v144 + 1sub_10040A648(v1 + 2) = 1024;
              LODWORD(v209) = v193;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v209, (char *)&v209 + 4, v144 + 14, v144 + 18);
              *(_WORD *)(v144 + 18) = 2112;
              uint64_t v209 = (uint64_t)v137;
              id v146 = v137;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v209, &v210, v144 + 20, v144 + 28);
              uint64_t v147 = v196;
              *(void *)uint64_t v196 = v137;

              uint64_t v20 = v195;
              *(_WORD *)(v144 + 28) = 2112;
              uint64_t v209 = (uint64_t)v197;
              id v148 = v197;
              id v149 = v197;
              unint64_t v128 = v201;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v209, &v210, v144 + 30, v144 + 38);
              *(void *)(v147 + 8) = v148;

              _os_log_impl( (void *)&_mh_execute_header,  v140,  (os_log_type_t)v206,  "Successfully decrypted data using keyID: %s current keyIndex: %u from: %@ to: %@",  (uint8_t *)v144,  0x26u);
              uint64_t v150 = sub_1003F5CB4(&qword_1009B92C8);
              swift_arrayDestroy(v147, 2LL, v150);
              swift_slowDealloc(v147, -1LL, -1LL);
              unint64_t v151 = v200;
              swift_arrayDestroy(v200, 1LL, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v151, -1LL, -1LL);
              swift_slowDealloc(v144, -1LL, -1LL);
            }

            else
            {

              sub_100402A84(v40, v134);
              sub_100402A84(v40, v134);
            }

            uint64_t v167 = v199;
            uint64_t v168 = v190;
            id v169 = objc_allocWithZone(&OBJC_CLASS___IDSURI);
            uint64_t v170 = v205;
            sub_1004028CC(v205, v128);
            unint64_t v171 = v191;
            sub_1004028CC(v168, v191);
            NSString v172 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease(v167);
            id v173 = [v169 initWithPrefixedURI:v172];

            id v174 = objc_allocWithZone((Class)&OBJC_CLASS___IDSOffGridCryptionResult);
            Class isa = Data._bridgeToObjectiveC()().super.isa;
            sub_100402A84(v170, v128);
            Class v176 = Data._bridgeToObjectiveC()().super.isa;
            sub_100402A84(v168, v171);
            id v125 = [v174 initWithDecryptedData:isa key:v176 originalRecipientURI:v173 error:0];

            sub_100402A84(v203, v204);
            sub_100402A84(v170, v128);
            uint64_t v165 = v202;
            unint64_t v166 = v177;
          }

          else
          {
            swift_bridgeObjectRelease(v199);
            uint64_t v152 = sub_1003F5CB4(&qword_1009B9A10);
            uint64_t inited = swift_initStackObject(v152, &v208);
            *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1007184C0;
            *(void *)(inited + 3sub_10040A648(v1 + 2) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
            *(void *)(inited + 40) = v154;
            *(void *)(inited + 7sub_10040A648(v1 + 2) = &type metadata for String;
            *(void *)(inited + 48) = 0xD00000000000001CLL;
            *(void *)(inited + 56) = 0x8000000100842CD0LL;
            unint64_t v155 = sub_100427AB8(inited);
            unint64_t v156 = v38;
            id v157 = objc_allocWithZone(&OBJC_CLASS___NSError);
            uint64_t v158 = v58;
            NSString v159 = String._bridgeToObjectiveC()();
            Class v160 = Dictionary._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease(v155);
            id v161 = [v157 initWithDomain:v159 code:3 userInfo:v160];

            id v162 = objc_allocWithZone((Class)&OBJC_CLASS___IDSOffGridCryptionResult);
            id v163 = v161;
            unint64_t v164 = (void *)_convertErrorToNSError(_:)(v163);

            id v125 = [v162 initWithDecryptedData:0 key:0 originalRecipientURI:0 error:v164];
            sub_100402A84(v130, v204);
            sub_100402A84(v205, v128);

            uint64_t v165 = v158;
            unint64_t v166 = v156;
          }

          sub_10040AD00(v165, v166);
          sub_1003F6050(v198, (uint64_t (*)(void))&type metadata accessor for PaddyIncomingSymmetricRatchet);
          sub_1003F6050((uint64_t)v20, type metadata accessor for SenderKeyAndState);
          return v125;
        }

        sub_10040AD00(v58, v38);
        swift_bridgeObjectRelease(v199);
        uint64_t v203 = 0LL;
        a7 = v194;
        swift_errorRetain(v60);
        uint64_t v62 = swift_errorRetain(v60);
        uint64_t v63 = (os_log_s *)Logger.logObject.getter(v62);
        os_log_type_t v64 = static os_log_type_t.default.getter(v63);
        if (os_log_type_enabled(v63, v64))
        {
          uint64_t v65 = swift_slowAlloc(12LL, -1LL);
          unint64_t v66 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
          *(_DWORD *)uint64_t v65 = v185;
          swift_errorRetain(v60);
          uint64_t v67 = _swift_stdlib_bridgeErrorToNSError(v60);
          *(void *)(v65 + 4) = v67;
          *unint64_t v66 = v67;
          swift_errorRelease(v60);
          swift_errorRelease(v60);
          _os_log_impl( (void *)&_mh_execute_header,  v63,  v64,  "Decryption attempt failed with error: %@ - trying next",  (uint8_t *)v65,  0xCu);
          uint64_t v68 = sub_1003F5CB4(&qword_1009B92C8);
          swift_arrayDestroy(v66, 1LL, v68);
          unint64_t v69 = v66;
          uint64_t v20 = v195;
          swift_slowDealloc(v69, -1LL, -1LL);
          swift_slowDealloc(v65, -1LL, -1LL);
          swift_errorRelease(v60);
        }

        else
        {
          swift_errorRelease(v60);

          swift_errorRelease(v60);
          swift_errorRelease(v60);
        }

        id v28 = v197;
        sub_1003F6050((uint64_t)v20, type metadata accessor for SenderKeyAndState);
      }

      v25 += v204;
      if (!--v23)
      {
        swift_bridgeObjectRelease(v181);
        id v70 = v28;
        id v71 = a7;
        uint64_t v72 = v180;
        unint64_t v73 = v182;
        sub_1004028CC(v180, v182);
        id v74 = v70;
        id v75 = v71;
        uint64_t v76 = sub_1004028CC(v72, v73);
        unint64_t v77 = (os_log_s *)Logger.logObject.getter(v76);
        os_log_type_t v78 = static os_log_type_t.error.getter();
        int v79 = v78;
        if (os_log_type_enabled(v77, v78))
        {
          uint64_t v80 = swift_slowAlloc(32LL, -1LL);
          LODWORD(v205) = v79;
          uint64_t v81 = v80;
          unint64_t v204 = swift_slowAlloc(16LL, -1LL);
          uint64_t v206 = swift_slowAlloc(32LL, -1LL);
          unint64_t v210 = v206;
          *(_DWORD *)uint64_t v81 = 136315650;
          Swift::String v82 = Data.base64EncodedString(options:)(0LL);
          uint64_t v209 = sub_1003FFBB0(v82._countAndFlagsBits, (unint64_t)v82._object, (uint64_t *)&v210);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v209, &v210, v81 + 4, v81 + 12);
          swift_bridgeObjectRelease(v82._object);
          sub_100402A84(v72, v73);
          sub_100402A84(v72, v73);
          *(_WORD *)(v81 + 1sub_10040A648(v1 + 2) = 2112;
          uint64_t v209 = (uint64_t)v74;
          id v83 = v74;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v209, &v210, v81 + 14, v81 + 22);
          unint64_t v84 = v204;
          *(void *)unint64_t v204 = v74;

          *(_WORD *)(v81 + 2sub_10040A648(v1 + 2) = 2112;
          uint64_t v209 = (uint64_t)v75;
          id v85 = v75;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v209, &v210, v81 + 24, v81 + 32);
          *(void *)(v84 + 8) = v75;

          _os_log_impl( (void *)&_mh_execute_header,  v77,  (os_log_type_t)v205,  "All decryption attempts using keyIDByte: %s failed for message from: %@ to: %@",  (uint8_t *)v81,  0x20u);
          uint64_t v86 = sub_1003F5CB4(&qword_1009B92C8);
          swift_arrayDestroy(v84, 2LL, v86);
          swift_slowDealloc(v84, -1LL, -1LL);
          uint64_t v87 = v206;
          swift_arrayDestroy(v206, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v87, -1LL, -1LL);
          swift_slowDealloc(v81, -1LL, -1LL);
        }

        else
        {

          sub_100402A84(v72, v73);
          sub_100402A84(v72, v73);
        }

        uint64_t v109 = sub_1003F5CB4(&qword_1009B9A10);
        uint64_t v110 = swift_initStackObject(v109, v211);
        *(_OWORD *)(v110 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1007184C0;
        *(void *)(v110 + 3sub_10040A648(v1 + 2) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
        *(void *)(v110 + 40) = v111;
        *(void *)(v110 + 7sub_10040A648(v1 + 2) = &type metadata for String;
        *(void *)(v110 + 48) = 0xD000000000000012LL;
        *(void *)(v110 + 56) = 0x8000000100842CF0LL;
        unint64_t v112 = sub_100427AB8(v110);
        id v113 = objc_allocWithZone(&OBJC_CLASS___NSError);
        NSString v114 = String._bridgeToObjectiveC()();
        v115.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v112);
        id v116 = [v113 initWithDomain:v114 code:5 userInfo:v115.super.isa];
        goto LABEL_24;
      }
    }
  }

  swift_bridgeObjectRelease(v22);
  id v88 = v197;
  id v89 = a7;
  sub_1004028CC(a4, a5);
  id v90 = v88;
  id v91 = v89;
  uint64_t v92 = sub_1004028CC(a4, a5);
  id v93 = (os_log_s *)Logger.logObject.getter(v92);
  os_log_type_t v94 = static os_log_type_t.error.getter();
  int v95 = v94;
  if (os_log_type_enabled(v93, v94))
  {
    uint64_t v96 = swift_slowAlloc(38LL, -1LL);
    LODWORD(v205) = v95;
    uint64_t v97 = v96;
    uint64_t v98 = swift_slowAlloc(16LL, -1LL);
    unint64_t v182 = a5;
    uint64_t v99 = (void *)v98;
    uint64_t v206 = swift_slowAlloc(32LL, -1LL);
    uint64_t v209 = (uint64_t)v90;
    unint64_t v210 = v206;
    *(_DWORD *)uint64_t v97 = 138413058;
    id v100 = v90;
    unint64_t v204 = (unint64_t)v93;
    id v101 = v100;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v209, &v210, v97 + 4, v97 + 12);
    *uint64_t v99 = v90;

    *(_WORD *)(v97 + 1sub_10040A648(v1 + 2) = 2112;
    uint64_t v209 = (uint64_t)v91;
    id v102 = v91;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v209, &v210, v97 + 14, v97 + 22);
    v99[1] = v91;
    NSString v103 = v99;

    *(_WORD *)(v97 + 2sub_10040A648(v1 + 2) = 2080;
    unint64_t v104 = v182;
    Swift::String v105 = Data.base64EncodedString(options:)(0LL);
    uint64_t v209 = sub_1003FFBB0(v105._countAndFlagsBits, (unint64_t)v105._object, (uint64_t *)&v210);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v209, &v210, v97 + 24, v97 + 32);
    swift_bridgeObjectRelease(v105._object);
    sub_100402A84(a4, v104);
    sub_100402A84(a4, v104);
    *(_WORD *)(v97 + 3sub_10040A648(v1 + 2) = 1024;
    LODWORD(v209) = v193;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v209, (char *)&v209 + 4, v97 + 34, v97 + 38);
    os_log_t v106 = (os_log_t)v204;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v204,  (os_log_type_t)v205,  "No matching keys found for decrypting from: %@ to: %@ keyIDByte: %s keyIndex: %u",  (uint8_t *)v97,  0x26u);
    uint64_t v107 = sub_1003F5CB4(&qword_1009B92C8);
    swift_arrayDestroy(v103, 2LL, v107);
    swift_slowDealloc(v103, -1LL, -1LL);
    uint64_t v108 = v206;
    swift_arrayDestroy(v206, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v108, -1LL, -1LL);
    swift_slowDealloc(v97, -1LL, -1LL);
  }

  else
  {

    sub_100402A84(a4, a5);
    sub_100402A84(a4, a5);
  }

  uint64_t v117 = sub_1003F5CB4(&qword_1009B9A10);
  uint64_t v118 = swift_initStackObject(v117, &v207);
  *(_OWORD *)(v118 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1007184C0;
  *(void *)(v118 + 3sub_10040A648(v1 + 2) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
  *(void *)(v118 + 40) = v119;
  *(void *)(v118 + 7sub_10040A648(v1 + 2) = &type metadata for String;
  *(void *)(v118 + 48) = 0xD000000000000017LL;
  *(void *)(v118 + 56) = 0x8000000100842D10LL;
  unint64_t v120 = sub_100427AB8(v118);
  id v121 = objc_allocWithZone(&OBJC_CLASS___NSError);
  NSString v114 = String._bridgeToObjectiveC()();
  v115.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v120);
  id v116 = [v121 initWithDomain:v114 code:2 userInfo:v115.super.isa];
LABEL_24:
  uint64_t v122 = v116;

  id v123 = objc_allocWithZone((Class)&OBJC_CLASS___IDSOffGridCryptionResult);
  unint64_t v124 = (void *)_convertErrorToNSError(_:)(v122);

  id v125 = [v123 initWithDecryptedData:0 key:0 originalRecipientURI:0 error:v124];
  return v125;
}

id sub_1004B5260()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1004B52E4@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1004B5524(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1004B530C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1004B57A8();
  unint64_t v5 = sub_10047DAA8();
  return Error<>._code.getter(a1, a2, v4, v5);
}

uint64_t sub_1004B5350(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SenderKeyAndState(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1004B5394(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SenderKeyAndState(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1004B53D8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  BOOL v4 = __OFADD__(a1, a2);
  uint64_t v5 = a1 + a2;
  if (v4)
  {
    __break(1u);
    JUMPOUT(0x1004B5438LL);
  }

  return ((uint64_t (*)(uint64_t))((char *)&loc_1004B53F0 + dword_1004B543C[a4 >> 62]))(v5);
}

uint64_t sub_1004B544C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return ((uint64_t (*)(void))((char *)&loc_1004B545C + dword_1004B5504[a4 >> 62]))();
}

uint64_t sub_1004B5470@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, int a3@<W8>)
{
  if (BYTE6(a2) < a1 || a1 < 0)
  {
    __break(1u);
    JUMPOUT(0x1004B54FCLL);
  }

  return ((uint64_t (*)(void))((char *)&loc_1004B54AC + dword_1004B5514[a3]))();
}

uint64_t sub_1004B5524(unint64_t a1)
{
  if (a1 >= 6) {
    return 5LL;
  }
  else {
    return (0x40302010005uLL >> (8 * a1));
  }
}

unint64_t sub_1004B554C()
{
  unint64_t result = qword_1009BB850;
  if (!qword_1009BB850)
  {
    unint64_t result = swift_getWitnessTable(&unk_10071C51C, &type metadata for SenderKeyEncryptionError);
    atomic_store(result, (unint64_t *)&qword_1009BB850);
  }

  return result;
}

uint64_t sub_1004B5590()
{
  return type metadata accessor for SenderKeyEncryptionController(0LL);
}

uint64_t type metadata accessor for SenderKeyEncryptionController(uint64_t a1)
{
  uint64_t result = qword_1009C5D20;
  if (!qword_1009C5D20) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SenderKeyEncryptionController);
  }
  return result;
}

uint64_t sub_1004B55D4(uint64_t a1)
{
  uint64_t result = type metadata accessor for Logger(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 2LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t getEnumTagSinglePayload for SenderKeyEncryptionError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }

uint64_t storeEnumTagSinglePayload for SenderKeyEncryptionError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(__chkstk_darwin(v3, v4) = 1;
  }
  else {
    LODWORD(__chkstk_darwin(v3, v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_1004B5728 + 4 * byte_10071C515[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1004B575C + 4 * byte_10071C510[v4]))();
}

uint64_t sub_1004B575C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004B5764(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1004B576CLL);
  }
  return result;
}

uint64_t sub_1004B5778(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1004B5780LL);
  }
  *(_BYTE *)uint64_t result = a2 + 4;
  return result;
}

uint64_t sub_1004B5784(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004B578C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SenderKeyEncryptionError()
{
  return &type metadata for SenderKeyEncryptionError;
}

unint64_t sub_1004B57A8()
{
  unint64_t result = qword_1009BB880;
  if (!qword_1009BB880)
  {
    unint64_t result = swift_getWitnessTable(&unk_10071C584, &type metadata for SenderKeyEncryptionError);
    atomic_store(result, (unint64_t *)&qword_1009BB880);
  }

  return result;
}

void sub_1004B57EC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for IDSGroupEncryptionMaterialData(0LL);
  __chkstk_darwin(v3, v4);
  unsigned int v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10043E2F8(v1, (uint64_t)v6);
  BOOL v7 = (char *)sub_1004B586C + 4 * byte_10071C640[swift_getEnumCaseMultiPayload(v6, v2)];
  __asm { BR              X10 }

uint64_t sub_1004B586C()
{
  uint64_t v1 = sub_1003F5CB4(&qword_1009BB888);
  uint64_t v2 = v0 + *(int *)(v1 + 48);
  uint64_t v3 = *(void *)(v0 + *(int *)(v1 + 64));
  uint64_t v5 = type metadata accessor for UUID(0LL, v4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v2, v5);
  return v3;
}

uint64_t type metadata accessor for IDSGroupEncryptionMaterialData(uint64_t a1)
{
  uint64_t result = qword_1009C6130;
  if (!qword_1009C6130) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for IDSGroupEncryptionMaterialData);
  }
  return result;
}

uint64_t sub_1004B591C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for IDSGroupEncryptionMaterialData(0LL);
  __chkstk_darwin(v5, v6);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10043E2F8(v2, (uint64_t)v8);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v8, v4);
  if (EnumCaseMultiPayload == 2)
  {
    char v10 = (uint64_t *)&unk_1009B9310;
    goto LABEL_5;
  }

  if (!EnumCaseMultiPayload)
  {
    char v10 = &qword_1009BB888;
LABEL_5:
    uint64_t v11 = sub_1003F5CB4(v10);
    uint64_t v12 = &v8[*(int *)(v11 + 48)];
    sub_100402A84(*(void *)&v8[*(int *)(v11 + 64)], *(void *)&v8[*(int *)(v11 + 64) + 8]);
    uint64_t v14 = type metadata accessor for UUID(0LL, v13);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v14 - 8) + 32LL))(a1, v12, v14);
  }

  UUID.init()();
  return sub_10043E37C((uint64_t)v8);
}

uint64_t sub_1004B5A08()
{
  uint64_t v1 = type metadata accessor for IDSGroupEncryptionMaterialData(0LL);
  __chkstk_darwin(v2, v3);
  __n128 v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10043E2F8(v0, (uint64_t)v5);
  if (swift_getEnumCaseMultiPayload(v5, v1))
  {
    sub_10043E37C((uint64_t)v5);
    return 0LL;
  }

  else
  {
    uint64_t v7 = (int *)sub_1003F5CB4(&qword_1009BB888);
    uint64_t v8 = &v5[v7[12]];
    sub_100402A84(*(void *)&v5[v7[16]], *(void *)&v5[v7[16] + 8]);
    uint64_t v6 = *(unsigned int *)&v5[v7[20]];
    uint64_t v10 = type metadata accessor for UUID(0LL, v9);
    (*(void (**)(char *, uint64_t))(*(void *)(v10 - 8) + 8LL))(v8, v10);
  }

  return v6;
}

void sub_1004B5AE0()
{
  uint64_t v1 = type metadata accessor for IDSGroupEncryptionMaterialData(0LL);
  __chkstk_darwin(v2, v3);
  __n128 v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10043E2F8(v0, (uint64_t)v5);
  uint64_t v6 = (char *)sub_1004B5B5C + 4 * byte_10071C644[swift_getEnumCaseMultiPayload(v5, v1)];
  __asm { BR              X10 }

uint64_t sub_1004B5B5C()
{
  int v1 = *v0;
  uint64_t v2 = sub_1003F5CB4(&qword_1009BB888);
  __n128 v3 = &v0[*(int *)(v2 + 48)];
  sub_100402A84(*(void *)&v0[*(int *)(v2 + 64)], *(void *)&v0[*(int *)(v2 + 64) + 8]);
  uint64_t v5 = type metadata accessor for UUID(0LL, v4);
  (*(void (**)(unsigned __int8 *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v3, v5);
  if (v1) {
    return 14LL;
  }
  else {
    return 13LL;
  }
}

void sub_1004B5C3C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  type metadata accessor for UUID(0LL, a2);
  __chkstk_darwin(v4, v5);
  uint64_t v6 = type metadata accessor for IDSGroupEncryptionMaterialData(0LL);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10043E2F8(v3, (uint64_t)v10);
  uint64_t v11 = (char *)sub_1004B5D04 + 4 * byte_10071C648[swift_getEnumCaseMultiPayload(v10, v6)];
  __asm { BR              X10 }

uint64_t sub_1004B5D04()
{
  Swift::UInt v5 = *v1;
  uint64_t v6 = (int *)sub_1003F5CB4(&qword_1009BB888);
  __n128 v7 = (uint64_t *)&v1[v6[16]];
  uint64_t v8 = *v7;
  unint64_t v9 = v7[1];
  Swift::UInt32 v10 = *(_DWORD *)&v1[v6[20]];
  (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v4 + 32))(v3, &v1[v6[12]], v2);
  Hasher._combine(_:)(0LL);
  Hasher._combine(_:)(v5);
  uint64_t v11 = sub_10040A2B0( &qword_1009B9300,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v0, v2, v11);
  Data.hash(into:)(v0, v8, v9);
  Hasher._combine(_:)(v10);
  sub_100402A84(v8, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v2);
}

Swift::Int sub_1004B5EE8()
{
  return Hasher._finalize()();
}

Swift::Int sub_1004B5F28(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_1004B5F64(uint64_t a1)
{
  return sub_1004B677C(a1 & 0xFFFFFFFFFFLL);
}

void sub_1004B5F70(uint64_t a1)
{
  char v1 = BYTE4(a1);
  Hasher.init(_seed:)(v2, 0LL);
  __asm { BR              X10 }

Swift::Int sub_1004B5FAC()
{
  return Hasher._finalize()();
}

uint64_t sub_1004B6018(unsigned int *a1)
{
  return sub_1004B677C(*a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32));
}

void sub_1004B6034()
{
}

void sub_1004B6044()
{
  __asm { BR              X10 }

void sub_1004B6078()
{
}

void sub_1004B60C0(uint64_t a1)
{
  uint64_t v2 = *(unsigned __int8 *)(v1 + 4);
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }

Swift::Int sub_1004B60F8()
{
  return Hasher._finalize()();
}

void sub_1004B6164(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL, a2);
  uint64_t v5 = *(void *)(v4 - 8);
  v33[8] = v4;
  void v33[9] = v5;
  __chkstk_darwin(v6, v7);
  v33[6] = (char *)v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9, v10);
  v33[7] = (char *)v33 - v11;
  __chkstk_darwin(v12, v13);
  __chkstk_darwin(v14, v15);
  void v33[5] = (char *)v33 - v16;
  uint64_t v17 = type metadata accessor for IDSGroupEncryptionMaterialData(0LL);
  __chkstk_darwin(v18, v19);
  __chkstk_darwin(v20, v21);
  __chkstk_darwin(v22, v23);
  __chkstk_darwin(v24, v25);
  sub_1003F5CB4(&qword_1009BB948);
  uint64_t v28 = __chkstk_darwin(v26, v27);
  uint64_t v30 = (char *)v33 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = (uint64_t)&v30[*(int *)(v28 + 48)];
  sub_10043E2F8(a1, (uint64_t)v30);
  sub_10043E2F8(a2, v31);
  uint64_t v32 = (char *)sub_1004B6330 + 4 * byte_10071C65C[swift_getEnumCaseMultiPayload(v30, v17)];
  __asm { BR              X10 }

BOOL sub_1004B6330()
{
  *(void *)(v5 - 11sub_10040A648(v1 + 2) = v2;
  sub_10043E2F8(v0, (uint64_t)v1);
  __n128 v6 = (int *)sub_1003F5CB4(&qword_1009BB888);
  uint64_t v7 = v6[12];
  *(void *)(v5 - 104) = &v1[v7];
  uint64_t v8 = v6[16];
  uint64_t v10 = *(void *)&v1[v8];
  unint64_t v9 = *(void *)&v1[v8 + 8];
  uint64_t v11 = v6[20];
  int v12 = *(_DWORD *)&v1[v11];
  if (swift_getEnumCaseMultiPayload(v4, v3))
  {
    sub_100402A84(v10, v9);
    (*(void (**)(void, void))(*(void *)(v5 - 88) + 8LL))(*(void *)(v5 - 104), *(void *)(v5 - 96));
    sub_1004B73F0(v0);
    return 0;
  }

  *(_DWORD *)(v5 - 156) = v12;
  *(void *)(v5 - 15sub_10040A648(v1 + 2) = v10;
  *(void *)(v5 - 144) = v9;
  *(_DWORD *)(v5 - 128) = *v1;
  *(_DWORD *)(v5 - 136) = *v4;
  __n128 v13 = &v4[v7];
  uint64_t v14 = *(void *)&v4[v8];
  unint64_t v15 = *(void *)&v4[v8 + 8];
  int v16 = *(_DWORD *)&v4[v11];
  uint64_t v18 = *(void *)(v5 - 96);
  uint64_t v17 = *(void *)(v5 - 88);
  __n128 v19 = *(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v17 + 32);
  uint64_t v20 = *(void *)(v5 - 120);
  v19(v20, *(unsigned __int8 **)(v5 - 104), v18);
  uint64_t v21 = *(void *)(v5 - 112);
  v19(v21, v13, v18);
  if (*(_DWORD *)(v5 - 128) != *(_DWORD *)(v5 - 136))
  {
    sub_100402A84(v14, v15);
    sub_100402A84(*(void *)(v5 - 152), *(void *)(v5 - 144));
    __n128 v22 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
    v22(v21, v18);
LABEL_9:
    v22(v20, v18);
    goto LABEL_10;
  }

  if ((static UUID.== infix(_:_:)(v20, v21) & 1) == 0)
  {
    sub_100402A84(v14, v15);
    sub_100402A84(*(void *)(v5 - 152), *(void *)(v5 - 144));
    __n128 v22 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 88) + 8LL);
    v22(v21, v18);
    goto LABEL_9;
  }

  int v23 = v16;
  uint64_t v25 = *(void *)(v5 - 152);
  unint64_t v24 = *(void *)(v5 - 144);
  sub_100410288(v25, v24);
  char v27 = v26;
  sub_100402A84(v14, v15);
  sub_100402A84(v25, v24);
  uint64_t v28 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 88) + 8LL);
  v28(v21, v18);
  v28(v20, v18);
  if ((v27 & 1) == 0)
  {
LABEL_10:
    sub_10043E37C(v0);
    return 0;
  }

  BOOL v29 = *(_DWORD *)(v5 - 156) == v23;
  sub_10043E37C(v0);
  return v29;
}

uint64_t sub_1004B677C(uint64_t a1)
{
  return ((uint64_t (*)(void))((char *)sub_1004B679C + 4 * byte_10071C660[BYTE4(a1)]))();
}

BOOL sub_1004B679C@<W0>(unsigned int a1@<W0>, int a2@<W1>, int a3@<W8>)
{
  return !a3 && ((a2 ^ a1) & 1LL) == 0;
}

unint64_t sub_1004B67F0()
{
  unint64_t result = qword_1009BB890;
  if (!qword_1009BB890)
  {
    unint64_t result = swift_getWitnessTable(&unk_10071C680, &type metadata for IDSGroupEncryptionBlobKind);
    atomic_store(result, (unint64_t *)&qword_1009BB890);
  }

  return result;
}

unint64_t sub_1004B6838()
{
  unint64_t result = qword_1009BB898;
  if (!qword_1009BB898)
  {
    unint64_t result = swift_getWitnessTable(&unk_10071C6E8, &type metadata for IDSGroupEncryptionKMKind);
    atomic_store(result, (unint64_t *)&qword_1009BB898);
  }

  return result;
}

uint64_t sub_1004B687C()
{
  return sub_10040A2B0( &qword_1009B9290,  type metadata accessor for IDSGroupEncryptionMaterialData,  (uint64_t)&unk_10071C790);
}

unint64_t sub_1004B68AC()
{
  unint64_t result = qword_1009BB8A0;
  if (!qword_1009BB8A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10071C7B8, &type metadata for IDSGroupEncryptionDesiredMaterialKind);
    atomic_store(result, (unint64_t *)&qword_1009BB8A0);
  }

  return result;
}

ValueMetadata *type metadata accessor for IDSGroupEncryptionBlobKind()
{
  return &type metadata for IDSGroupEncryptionBlobKind;
}

uint64_t _s17identityservicesd24IDSGroupEncryptionKMKindOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(__chkstk_darwin(v3, v4) = 1;
  }
  else {
    LODWORD(__chkstk_darwin(v3, v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1004B6950 + 4 * byte_10071C669[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1004B6984 + 4 * byte_10071C664[v4]))();
}

uint64_t sub_1004B6984(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

uint64_t sub_1004B698C(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v0 & 1) = 0;
  if (a2) {
    JUMPOUT(0x1004B6994LL);
  }
  return result;
}

uint64_t sub_1004B69A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v0 & 1) = 0;
  if (!a2) {
    JUMPOUT(0x1004B69A8LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1004B69AC(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

uint64_t sub_1004B69B4(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IDSGroupEncryptionKMKind()
{
  return &type metadata for IDSGroupEncryptionKMKind;
}

uint64_t sub_1004B69D0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) == 0)
  {
    uint64_t v5 = (char *)&loc_1004B6A28 + 4 * byte_10071C66E[swift_getEnumCaseMultiPayload(a2, a3)];
    __asm { BR              X10 }
  }

  uint64_t v6 = *a2;
  *a1 = *a2;
  uint64_t v7 = v6 + ((v4 + 16LL) & ~(unint64_t)v4);
  swift_retain(v6);
  return v7;
}

uint64_t sub_1004B6BA8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = a1;
  uint64_t result = swift_getEnumCaseMultiPayload(a1, a2);
  switch((int)result)
  {
    case 0:
      int v4 = &qword_1009BB888;
      goto LABEL_5;
    case 1:
      uint64_t v5 = (unint64_t *)(v2 + 2);
      ++v2;
      goto LABEL_7;
    case 2:
      int v4 = &qword_1009B9310;
LABEL_5:
      uint64_t v6 = sub_1003F5CB4(v4);
      uint64_t v7 = (char *)v2 + *(int *)(v6 + 48);
      uint64_t v9 = type metadata accessor for UUID(0LL, v8);
      (*(void (**)(char *, uint64_t))(*(void *)(v9 - 8) + 8LL))(v7, v9);
      uint64_t v2 = (uint64_t *)((char *)v2 + *(int *)(v6 + 64));
      goto LABEL_6;
    case 3:
LABEL_6:
      uint64_t v5 = (unint64_t *)(v2 + 1);
LABEL_7:
      uint64_t result = sub_100402A84(*v2, *v5);
      break;
    default:
      return result;
  }

  return result;
}

void sub_1004B6C64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3 = (char *)sub_1004B6CB4 + 4 * byte_10071C676[swift_getEnumCaseMultiPayload(a2, a3)];
  __asm { BR              X10 }

_BYTE *sub_1004B6CB4()
{
  *uint64_t v0 = *v3;
  int v4 = (int *)sub_1003F5CB4(&qword_1009BB888);
  uint64_t v5 = v4[12];
  uint64_t v6 = &v0[v5];
  uint64_t v7 = &v3[v5];
  uint64_t v9 = type metadata accessor for UUID(0LL, v8);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v9 - 8) + 16LL))(v6, v7, v9);
  uint64_t v10 = v4[16];
  uint64_t v11 = (uint64_t *)&v0[v10];
  int v12 = (uint64_t *)&v3[v10];
  uint64_t v13 = *v12;
  unint64_t v14 = v12[1];
  sub_1004028CC(*v12, v14);
  *uint64_t v11 = v13;
  v11[1] = v14;
  *(_DWORD *)&v0[v4[20]] = *(_DWORD *)&v3[v4[20]];
  swift_storeEnumTagMultiPayload(v0, v1, v2);
  return v0;
}

uint64_t sub_1004B6DF0(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a2)
  {
    sub_10043E37C(result);
    uint64_t v5 = (char *)&loc_1004B6E50 + 4 * byte_10071C67A[swift_getEnumCaseMultiPayload(a2, a3)];
    __asm { BR              X10 }
  }

  return result;
}

_DWORD *sub_1004B6F8C(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 2)
  {
    *a1 = *a2;
    uint64_t v13 = sub_1003F5CB4(&qword_1009B9310);
    uint64_t v14 = *(int *)(v13 + 48);
    unint64_t v15 = (char *)a1 + v14;
    int v16 = (char *)a2 + v14;
    uint64_t v18 = type metadata accessor for UUID(0LL, v17);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32LL))(v15, v16, v18);
    *(_OWORD *)((char *)a1 + *(int *)(v13 + 64)) = *(_OWORD *)((char *)a2 + *(int *)(v13 + 64));
    swift_storeEnumTagMultiPayload(a1, a3, 2LL);
  }

  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    uint64_t v7 = (int *)sub_1003F5CB4(&qword_1009BB888);
    uint64_t v8 = v7[12];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v12 = type metadata accessor for UUID(0LL, v11);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32LL))(v9, v10, v12);
    *(_OWORD *)((char *)a1 + v7[16]) = *(_OWORD *)((char *)a2 + v7[16]);
    *(_DWORD *)((char *)a1 + v7[20]) = *(_DWORD *)((char *)a2 + v7[20]);
    swift_storeEnumTagMultiPayload(a1, a3, 0LL);
  }

  return a1;
}

_DWORD *sub_1004B70C4(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_10043E37C((uint64_t)a1);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      uint64_t v13 = sub_1003F5CB4(&qword_1009B9310);
      uint64_t v14 = *(int *)(v13 + 48);
      unint64_t v15 = (char *)a1 + v14;
      int v16 = (char *)a2 + v14;
      uint64_t v18 = type metadata accessor for UUID(0LL, v17);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32LL))(v15, v16, v18);
      *(_OWORD *)((char *)a1 + *(int *)(v13 + 64)) = *(_OWORD *)((char *)a2 + *(int *)(v13 + 64));
      swift_storeEnumTagMultiPayload(a1, a3, 2LL);
    }

    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }

    else
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      uint64_t v7 = (int *)sub_1003F5CB4(&qword_1009BB888);
      uint64_t v8 = v7[12];
      uint64_t v9 = (char *)a1 + v8;
      uint64_t v10 = (char *)a2 + v8;
      uint64_t v12 = type metadata accessor for UUID(0LL, v11);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32LL))(v9, v10, v12);
      *(_OWORD *)((char *)a1 + v7[16]) = *(_OWORD *)((char *)a2 + v7[16]);
      *(_DWORD *)((char *)a1 + v7[20]) = *(_DWORD *)((char *)a2 + v7[20]);
      swift_storeEnumTagMultiPayload(a1, a3, 0LL);
    }
  }

  return a1;
}

uint64_t sub_1004B720C(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = &unk_10071C880;
  uint64_t result = type metadata accessor for UUID(319LL, a2);
  if (v4 <= 0x3F)
  {
    uint64_t v8 = *(void *)(result - 8) + 64LL;
    uint64_t v5 = v8;
    uint64_t v9 = &unk_10071C898;
    uint64_t v10 = (char *)&value witness table for Builtin.Int32 + 64;
    swift_getTupleTypeLayout(v11, 0LL, 4LL, &v7);
    v12[0] = v11;
    v12[1] = &unk_10071C8B0;
    swift_getTupleTypeLayout3(v6, (char *)&value witness table for Builtin.Int32 + 64, v5, &unk_10071C898);
    v12[2] = v6;
    void v12[3] = &unk_10071C898;
    swift_initEnumMetadataMultiPayload(a1, 256LL, 4LL, v12);
    return 0LL;
  }

  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for IDSGroupEncryptionDesiredMaterialKind(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(_BYTE *)(result + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)uint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for IDSGroupEncryptionDesiredMaterialKind(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 5)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 4);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for IDSGroupEncryptionDesiredMaterialKind( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 4) = 0;
    *(_DWORD *)uint64_t result = a2 - 253;
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 5) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 5) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 4) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_1004B7384(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 3);
  }
}

uint64_t sub_1004B739C(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(_DWORD *)uint64_t result = a2 - 3;
    LOBYTE(asub_10040A648(v1 + 2) = 3;
  }

  *(_BYTE *)(result + 4) = a2;
  return result;
}

ValueMetadata *type metadata accessor for IDSGroupEncryptionDesiredMaterialKind()
{
  return &type metadata for IDSGroupEncryptionDesiredMaterialKind;
}

uint64_t sub_1004B73C4()
{
  return sub_10040A2B0( &qword_1009BB940,  (uint64_t (*)(uint64_t))type metadata accessor for IDSQRProtoMaterialInfo_MaterialType,  (uint64_t)&unk_10071C974);
}

uint64_t sub_1004B73F0(uint64_t a1)
{
  uint64_t v2 = sub_1003F5CB4(&qword_1009BB948);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1004B7434()
{
  uint64_t v1 = (void *)(v0 + OBJC_IVAR____TtC17identityservicesd36IDSGroupEncryptionIdentityController_lock);
  swift_beginAccess(v0 + OBJC_IVAR____TtC17identityservicesd36IDSGroupEncryptionIdentityController_lock, v3, 0LL, 0LL);
  return swift_retain(*v1);
}

uint64_t sub_1004B747C(uint64_t a1)
{
  unsigned int v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC17identityservicesd36IDSGroupEncryptionIdentityController_lock);
  swift_beginAccess(v3, v6, 1LL, 0LL);
  uint64_t v4 = *v3;
  uint64_t *v3 = a1;
  return swift_release(v4);
}

uint64_t (*sub_1004B74CC(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_1004B7510@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC17identityservicesd36IDSGroupEncryptionIdentityController_previousIdentity;
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return sub_1004B7560(v3, a1);
}

uint64_t sub_1004B7560(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1003F5CB4(&qword_1009B95A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1004B75A8(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC17identityservicesd36IDSGroupEncryptionIdentityController_previousIdentity;
  swift_beginAccess(v3, v5, 33LL, 0LL);
  sub_1004B7600(a1, v3);
  return swift_endAccess(v5);
}

uint64_t sub_1004B7600(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1003F5CB4(&qword_1009B95A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t (*sub_1004B7648(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

double sub_1004B768C()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC17identityservicesd36IDSGroupEncryptionIdentityController_previousPreKeyExpirationDuration;
  swift_beginAccess( v0 + OBJC_IVAR____TtC17identityservicesd36IDSGroupEncryptionIdentityController_previousPreKeyExpirationDuration,  v3,  0LL,  0LL);
  return *(double *)v1;
}

uint64_t sub_1004B76D0(double a1)
{
  uint64_t v3 = (double *)(v1
                + OBJC_IVAR____TtC17identityservicesd36IDSGroupEncryptionIdentityController_previousPreKeyExpirationDuration);
  uint64_t result = swift_beginAccess( v1 + OBJC_IVAR____TtC17identityservicesd36IDSGroupEncryptionIdentityController_previousPreKeyExpirationDuration,  v5,  1LL,  0LL);
  double *v3 = a1;
  return result;
}

uint64_t (*sub_1004B7720(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

double sub_1004B7764()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC17identityservicesd36IDSGroupEncryptionIdentityController_preKeyExpirationDuration;
  swift_beginAccess( v0 + OBJC_IVAR____TtC17identityservicesd36IDSGroupEncryptionIdentityController_preKeyExpirationDuration,  v3,  0LL,  0LL);
  return *(double *)v1;
}

uint64_t sub_1004B77A8(double a1)
{
  uint64_t v3 = (double *)(v1 + OBJC_IVAR____TtC17identityservicesd36IDSGroupEncryptionIdentityController_preKeyExpirationDuration);
  uint64_t result = swift_beginAccess( v1 + OBJC_IVAR____TtC17identityservicesd36IDSGroupEncryptionIdentityController_preKeyExpirationDuration,  v5,  1LL,  0LL);
  double *v3 = a1;
  return result;
}

uint64_t (*sub_1004B77F8(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

id sub_1004B783C(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  id v4 = sub_1004B91C8((uint64_t)a1);

  return v4;
}

id sub_1004B78AC(uint64_t a1)
{
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(uint64_t))((swift_isaMask & *v1) + 0x138LL))(a1);
  uint64_t v7 = type metadata accessor for IDSGroupEncryptionFullIdentity(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL))(v6, 1LL, v7) == 1)
  {
    sub_1004B94B0((uint64_t)v6);
    return 0LL;
  }

  else
  {
    id v8 = sub_1004D3778();
    sub_1003F6050((uint64_t)v6, type metadata accessor for IDSGroupEncryptionFullIdentity);
  }

  return v8;
}

uint64_t sub_1004B7A8C@<X0>(uint64_t a1@<X8>)
{
  __n128 v3 = (os_unfair_lock_s *)(*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x90LL))();
  os_unfair_lock_lock(v3 + 4);
  sub_1004B7AF4((uint64_t)v1, a1);
  os_unfair_lock_unlock(v3 + 4);
  return swift_release(v3);
}

void sub_1004B7AF4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v7 = (id *)&v22[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v8 = type metadata accessor for IDSGroupEncryptionFullIdentity(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v10, v11);
  uint64_t v13 = &v22[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  sub_1003F5CB4(&qword_1009B95A0);
  __chkstk_darwin(v14, v15);
  uint64_t v17 = &v22[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v18 = a1 + OBJC_IVAR____TtC17identityservicesd36IDSGroupEncryptionIdentityController_identity;
  swift_beginAccess( a1 + OBJC_IVAR____TtC17identityservicesd36IDSGroupEncryptionIdentityController_identity,  v22,  0LL,  0LL);
  sub_1004B7560(v18, (uint64_t)v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v17, 1LL, v8))
  {
    sub_1004B94B0((uint64_t)v17);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a2, 1LL, 1LL, v8);
  }

  else
  {
    sub_1003F5FC8((uint64_t)v17, (uint64_t)v13, type metadata accessor for IDSGroupEncryptionFullIdentity);
    sub_1004B94B0((uint64_t)v17);
    sub_1003F5FC8((uint64_t)v13, (uint64_t)v7, type metadata accessor for IDSGroupEncryptionPublicIdentity);
    sub_1003F6050((uint64_t)v13, type metadata accessor for IDSGroupEncryptionFullIdentity);
    id v19 = v7[1];
    sub_1003F6050((uint64_t)v7, type metadata accessor for IDSGroupEncryptionPublicIdentity);
    id v20 = v19;
    sub_1004B7D2C(v19, a2);
  }

uint64_t sub_1004B7CB8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  __n128 v5 = (os_unfair_lock_s *)(*(uint64_t (**)(void))((swift_isaMask & *v2) + 0x90LL))();
  os_unfair_lock_lock(v5 + 4);
  sub_1004B7D2C(a1, a2);
  os_unfair_lock_unlock(v5 + 4);
  return swift_release(v5);
}

uint64_t sub_1004B7D2C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v136 = a2;
  uint64_t v123 = type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
  __chkstk_darwin(v3, v4);
  uint64_t v127 = (uint64_t)&v120 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6, v7);
  id v125 = (__SecKey *)((char *)&v120 - v8);
  __chkstk_darwin(v9, v10);
  unint64_t v128 = (uint64_t *)((char *)&v120 - v11);
  uint64_t v12 = (__SecKey *)type metadata accessor for Date(0LL);
  uint64_t v13 = *((void *)v12 - 1);
  __chkstk_darwin(v14, v15);
  unint64_t v126 = (char *)&v120 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v17, v18);
  unint64_t v124 = (char *)&v120 - v19;
  __chkstk_darwin(v20, v21);
  id v133 = (char *)&v120 - v22;
  __chkstk_darwin(v23, v24);
  unint64_t v134 = (char *)&v120 - v25;
  sub_1003F5CB4(&qword_1009B95A0);
  __chkstk_darwin(v26, v27);
  uint64_t v132 = (uint64_t)&v120 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v29, v30);
  uint64_t v32 = (char *)&v120 - v31;
  __chkstk_darwin(v33, v34);
  uint64_t v36 = (char *)&v120 - v35;
  uint64_t v37 = type metadata accessor for IDSGroupEncryptionFullIdentity(0LL);
  uint64_t v38 = *(void *)(v37 - 8);
  __chkstk_darwin(v39, v40);
  __chkstk_darwin(v41, v42);
  __chkstk_darwin(v43, v44);
  uint64_t v46 = (char *)&v120 - v45;
  __chkstk_darwin(v47, v48);
  uint64_t v50 = (char *)&v120 - v49;
  __chkstk_darwin(v51, v52);
  uint64_t v56 = (char *)&v120 - v55;
  id v137 = a1;
  if (!a1) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v38 + 56))(v136, 1LL, 1LL, v37);
  }
  uint64_t v130 = v13;
  uint64_t v121 = v54;
  uint64_t v122 = v53;
  uint64_t v129 = v12;
  unint64_t v57 = v135;
  uint64_t v58 = (uint64_t)v135 + OBJC_IVAR____TtC17identityservicesd36IDSGroupEncryptionIdentityController_identity;
  swift_beginAccess( (char *)v135 + OBJC_IVAR____TtC17identityservicesd36IDSGroupEncryptionIdentityController_identity,  v141,  0LL,  0LL);
  uint64_t v131 = v58;
  sub_1004B7560(v58, (uint64_t)v36);
  unint64_t v59 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48);
  if (v59(v36, 1LL, v37) == 1)
  {
    id v60 = v137;
    sub_1004B94B0((uint64_t)v36);
  }

  else
  {
    sub_1004B9D64((uint64_t)v36, (uint64_t)v56);
    id v61 = v137;
    char v62 = sub_1004D32E8();
    sub_1003F5FC8((uint64_t)v56, (uint64_t)v50, type metadata accessor for IDSGroupEncryptionFullIdentity);
    if ((v62 & 1) != 0)
    {
      sub_1003F6050((uint64_t)v50, type metadata accessor for IDSGroupEncryptionFullIdentity);
    }

    else
    {
      sub_10041D3C4(0LL, (unint64_t *)&qword_1009B92C0, &OBJC_CLASS___NSObject_ptr);
      char v63 = static NSObject.== infix(_:_:)(*((void *)v50 + 1), v61);
      sub_1003F6050((uint64_t)v50, type metadata accessor for IDSGroupEncryptionFullIdentity);
      if ((v63 & 1) != 0)
      {

        uint64_t v64 = v136;
        sub_1004B9D64((uint64_t)v56, v136);
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v38 + 56))(v64, 0LL, 1LL, v37);
      }
    }

    sub_1003F6050((uint64_t)v56, type metadata accessor for IDSGroupEncryptionFullIdentity);
  }

  sub_1004B7560(v131, (uint64_t)v32);
  BOOL v66 = v59(v32, 1LL, v37) == 1;
  uint64_t v67 = v133;
  uint64_t v68 = v134;
  unint64_t v69 = v57;
  if (v66)
  {
    uint64_t v71 = sub_1004B94B0((uint64_t)v32);
  }

  else
  {
    sub_1004B9D64((uint64_t)v32, (uint64_t)v46);
    uint64_t v70 = v132;
    sub_1003F5FC8((uint64_t)v46, v132, type metadata accessor for IDSGroupEncryptionFullIdentity);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v38 + 56))(v70, 0LL, 1LL, v37);
    unint64_t v69 = v57;
    (*(void (**)(uint64_t))((swift_isaMask & *v57) + 0xC8LL))(v70);
    sub_1004B8770();
    uint64_t v71 = sub_1003F6050((uint64_t)v46, type metadata accessor for IDSGroupEncryptionFullIdentity);
  }

  unint64_t v73 = v129;
  uint64_t v72 = v130;
  static Date.now.getter(v71);
  id v140 = 0LL;
  id v74 = (__SecKey *)sub_10005E818(0LL, (uint64_t)&v140);
  if (!v74)
  {
    (*(void (**)(char *, __SecKey *))(v72 + 8))(v68, v73);
LABEL_17:

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v38 + 56))(v136, 1LL, 1LL, v37);
  }

  id v75 = v74;
  if (v140)
  {

    (*(void (**)(char *, __SecKey *))(v72 + 8))(v68, v73);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v38 + 56))(v136, 1LL, 1LL, v37);
  }

  SecKeyRef v76 = SecKeyCopyPublicKey(v74);
  if (!v76)
  {
    (*(void (**)(char *, __SecKey *))(v72 + 8))(v68, v73);

    goto LABEL_17;
  }

  SecKeyRef v77 = v76;
  id v137 = v137;
  os_log_type_t v78 = v124;
  uint64_t v79 = static Date.now.getter(v137);
  (*(void (**)(uint64_t))((swift_isaMask & *v69) + 0xF0LL))(v79);
  static Date.+ infix(_:_:)(v78);
  id v135 = *(void **)(v72 + 8);
  ((void (*)(char *, __SecKey *))v135)(v78, v73);
  uint64_t v80 = v77;
  uint64_t v81 = (uint64_t)v67;
  Swift::String v82 = v128;
  uint64_t v129 = v80;
  sub_1004D337C(0LL, (uint64_t)v137, v81, (uint64_t)v80, 2, v128);
  uint64_t v83 = (uint64_t)v125;
  sub_1003F5FC8((uint64_t)v82, (uint64_t)v125, type metadata accessor for IDSGroupEncryptionPublicIdentity);
  unint64_t v84 = v75;
  id v85 = v73;
  uint64_t v86 = v122;
  id v125 = v84;
  sub_1004D38A8(v83, (uint64_t)v84, v122);
  uint64_t v87 = v132;
  sub_1003F5FC8(v86, v132, type metadata accessor for IDSGroupEncryptionFullIdentity);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v38 + 56))(v87, 0LL, 1LL, v37);
  uint64_t v88 = v131;
  swift_beginAccess(v131, v139, 33LL, 0LL);
  uint64_t v89 = v86;
  id v90 = v85;
  sub_1004B7600(v87, v88);
  swift_endAccess(v139);
  uint64_t v91 = v121;
  uint64_t v92 = (uint64_t)v82;
  sub_1003F5FC8(v89, v121, type metadata accessor for IDSGroupEncryptionFullIdentity);
  id v93 = v126;
  (*(void (**)(char *, char *, __SecKey *))(v130 + 16))(v126, v68, v85);
  uint64_t v94 = v127;
  uint64_t v95 = sub_1003F5FC8(v92, v127, type metadata accessor for IDSGroupEncryptionPublicIdentity);
  uint64_t v96 = (os_log_s *)Logger.logObject.getter(v95);
  os_log_type_t v97 = static os_log_type_t.default.getter(v96);
  int v98 = v97;
  if (os_log_type_enabled(v96, v97))
  {
    uint64_t v99 = swift_slowAlloc(32LL, -1LL);
    uint64_t v132 = swift_slowAlloc(96LL, -1LL);
    v139[0] = v132;
    *(_DWORD *)uint64_t v99 = 136315650;
    uint64_t v100 = sub_10040A2B0( &qword_1009B95B0,  type metadata accessor for IDSGroupEncryptionFullIdentity,  (uint64_t)&unk_10071D38C);
    LODWORD(v130) = v98;
    uint64_t v101 = dispatch thunk of CustomStringConvertible.description.getter(v37, v100);
    unint64_t v103 = v102;
    uint64_t v138 = sub_1003FFBB0(v101, v102, v139);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, v139, v99 + 4, v99 + 12);
    swift_bridgeObjectRelease(v103);
    uint64_t v104 = sub_1003F6050(v91, type metadata accessor for IDSGroupEncryptionFullIdentity);
    *(_WORD *)(v99 + 1sub_10040A648(v1 + 2) = 2080;
    Swift::String v105 = v133;
    uint64_t v106 = static Date.now.getter(v104);
    double v107 = Date.timeIntervalSinceReferenceDate.getter(v106);
    uint64_t v108 = (void (*)(char *, __SecKey *))v135;
    uint64_t v109 = ((uint64_t (*)(char *, __SecKey *))v135)(v105, v90);
    double v110 = Date.timeIntervalSinceReferenceDate.getter(v109);
    uint64_t v111 = Double.description.getter(v107 - v110);
    unint64_t v113 = v112;
    uint64_t v138 = sub_1003FFBB0(v111, v112, v139);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, v139, v99 + 14, v99 + 22);
    swift_bridgeObjectRelease(v113);
    v108(v93, v90);
    *(_WORD *)(v99 + 2sub_10040A648(v1 + 2) = 2080;
    uint64_t v114 = sub_10040A2B0( &qword_1009B9D98,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    uint64_t v115 = dispatch thunk of CustomStringConvertible.description.getter(v90, v114);
    unint64_t v117 = v116;
    uint64_t v138 = sub_1003FFBB0(v115, v116, v139);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, v139, v99 + 24, v99 + 32);
    swift_bridgeObjectRelease(v117);
    sub_1003F6050(v94, type metadata accessor for IDSGroupEncryptionPublicIdentity);
    _os_log_impl( (void *)&_mh_execute_header,  v96,  (os_log_type_t)v130,  "Created the full identity %s, duration %s), will expire at %s",  (uint8_t *)v99,  0x20u);
    uint64_t v118 = v132;
    swift_arrayDestroy(v132, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v118, -1LL, -1LL);
    swift_slowDealloc(v99, -1LL, -1LL);

    sub_1003F6050(v122, type metadata accessor for IDSGroupEncryptionFullIdentity);
    sub_1003F6050((uint64_t)v128, type metadata accessor for IDSGroupEncryptionPublicIdentity);
    v108(v134, v90);
  }

  else
  {

    sub_1003F6050(v94, type metadata accessor for IDSGroupEncryptionPublicIdentity);
    uint64_t v119 = (void (*)(char *, __SecKey *))v135;
    ((void (*)(char *, __SecKey *))v135)(v93, v90);
    sub_1003F6050(v91, type metadata accessor for IDSGroupEncryptionFullIdentity);

    sub_1003F6050(v122, type metadata accessor for IDSGroupEncryptionFullIdentity);
    sub_1003F6050(v92, type metadata accessor for IDSGroupEncryptionPublicIdentity);
    v119(v68, v90);
  }

  return sub_1004B7560(v131, v136);
}

void sub_1004B8770()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v40 = *(void *)(v1 - 8);
  __chkstk_darwin(v2, v3);
  uint64_t v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v38 = *(void *)(v6 - 8);
  uint64_t v39 = v6;
  __chkstk_darwin(v7, v8);
  __n128 v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v13, v14);
  uint64_t v16 = (uint64_t *)((char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v37 = type metadata accessor for DispatchTime(0LL);
  uint64_t v17 = *(void *)(v37 - 8);
  __chkstk_darwin(v18, v19);
  __n128 v21 = (char *)&v36 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = __chkstk_darwin(v22, v23);
  __n128 v26 = (char *)&v36 - v25;
  uint64_t v36 = *(void *)((char *)v0 + OBJC_IVAR____TtC17identityservicesd36IDSGroupEncryptionIdentityController_q);
  uint64_t v27 = static DispatchTime.now()(v24);
  double v28 = (*(double (**)(uint64_t))((swift_isaMask & *v0) + 0xF0LL))(v27);
  if ((~*(void *)&v28 & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }

  if (v28 <= -9.22337204e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }

  if (v28 < 9.22337204e18)
  {
    *uint64_t v16 = (uint64_t)v28;
    (*(void (**)(void *, void, uint64_t))(v12 + 104))( v16,  enum case for DispatchTimeInterval.seconds(_:),  v11);
    + infix(_:_:)(v21, v16);
    (*(void (**)(void *, uint64_t))(v12 + 8))(v16, v11);
    __n128 v29 = *(void (**)(char *, uint64_t))(v17 + 8);
    uint64_t v30 = v37;
    v29(v21, v37);
    uint64_t v31 = swift_allocObject(&unk_100907968, 24LL, 7LL);
    *(void *)(v31 + swift_unknownObjectWeakDestroy(v0 + 16) = v0;
    aBlock[4] = sub_1004B9CE8;
    uint64_t v43 = v31;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1003F8400;
    aBlock[3] = &unk_100907980;
    uint64_t v32 = _Block_copy(aBlock);
    static DispatchQoS.unspecified.getter(v0);
    __n128 v41 = _swiftEmptyArrayStorage;
    uint64_t v33 = sub_10040A2B0( (unint64_t *)&unk_1009BAC40,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v34 = sub_1003F5CB4((uint64_t *)&unk_1009B9870);
    uint64_t v35 = sub_1004021DC((unint64_t *)&qword_1009BAC50, (uint64_t *)&unk_1009B9870);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v41, v34, v35, v1, v33);
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v26, v10, v5, v32);
    _Block_release(v32);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v5, v1);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v10, v39);
    v29(v26, v30);
    swift_release(v43);
    return;
  }

uint64_t sub_1004B8AAC(void *a1)
{
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for IDSGroupEncryptionFullIdentity(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v5, 1LL, 1LL, v6);
  return (*(uint64_t (**)(char *))((swift_isaMask & *a1) + 0xC8LL))(v5);
}

uint64_t sub_1004B8B48()
{
  uint64_t v1 = (os_unfair_lock_s *)(*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x90LL))();
  os_unfair_lock_lock(v1 + 4);
  sub_1004B8BA8((uint64_t)v0);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release(v1);
}

uint64_t sub_1004B8BA8(uint64_t a1)
{
  uint64_t v5 = &v10[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v6 = type metadata accessor for IDSGroupEncryptionFullIdentity(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v5, 1LL, 1LL, v6);
  uint64_t v7 = a1 + OBJC_IVAR____TtC17identityservicesd36IDSGroupEncryptionIdentityController_identity;
  swift_beginAccess(v7, v10, 33LL, 0LL);
  sub_1004B7600((uint64_t)v5, v7);
  return swift_endAccess(v10);
}

uint64_t sub_1004B8CF8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(uint64_t (**)(void))((swift_isaMask & *v2) + 0x90LL);
  uint64_t v6 = (os_unfair_lock_s *)v5();
  os_unfair_lock_lock(v6 + 4);
  swift_release(v6);
  uint64_t v17 = a2;
  swift_unknownObjectWeakInit(v16, a1);
  uint64_t v7 = (void *)((char *)v2 + OBJC_IVAR____TtC17identityservicesd36IDSGroupEncryptionIdentityController_listeners);
  swift_beginAccess( (char *)v2 + OBJC_IVAR____TtC17identityservicesd36IDSGroupEncryptionIdentityController_listeners,  v15,  33LL,  0LL);
  uint64_t v8 = (void *)*v7;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v7);
  *uint64_t v7 = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v8 = sub_1004B9084(0LL, v8[2] + 1LL, 1, (unint64_t)v8);
    *uint64_t v7 = v8;
  }

  unint64_t v11 = v8[2];
  unint64_t v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    uint64_t v8 = sub_1004B9084((void *)(v10 > 1), v11 + 1, 1, (unint64_t)v8);
    *uint64_t v7 = v8;
  }

  uint64_t v8[2] = v11 + 1;
  sub_1004B94F0((uint64_t)v16, (uint64_t)&v8[2 * v11 + 4]);
  uint64_t v12 = swift_endAccess(v15);
  __n128 v13 = (os_unfair_lock_s *)((uint64_t (*)(uint64_t))v5)(v12);
  os_unfair_lock_unlock(v13 + 4);
  return swift_release(v13);
}

uint64_t sub_1004B8E30(uint64_t a1)
{
  __n128 v2 = v1;
  uint64_t v4 = *(uint64_t (**)(void))((swift_isaMask & *v1) + 0x90LL);
  uint64_t v5 = (os_unfair_lock_s *)v4();
  os_unfair_lock_lock(v5 + 4);
  swift_release(v5);
  uint64_t v6 = (void *)((char *)v2 + OBJC_IVAR____TtC17identityservicesd36IDSGroupEncryptionIdentityController_listeners);
  swift_beginAccess( (char *)v2 + OBJC_IVAR____TtC17identityservicesd36IDSGroupEncryptionIdentityController_listeners,  v14,  33LL,  0LL);
  swift_unknownObjectRetain(a1, v7);
  uint64_t v8 = sub_1004B9618(v6, a1);
  uint64_t result = swift_unknownObjectRelease(a1, v9);
  int64_t v11 = *(void *)(*v6 + 16);
  if (v11 < v8)
  {
    __break(1u);
  }

  else
  {
    sub_1004B98A4(v8, v11);
    uint64_t v12 = swift_endAccess(v14);
    __n128 v13 = (os_unfair_lock_s *)((uint64_t (*)(uint64_t))v4)(v12);
    os_unfair_lock_unlock(v13 + 4);
    return swift_release(v13);
  }

  return result;
}

id sub_1004B8F50()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for IDSGroupEncryptionIdentityController(0LL);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1004B9014()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **v0) + 0x130LL))();
}

uint64_t sub_1004B904C()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **v0) + 0xC0LL))();
}

void *sub_1004B9084(void *result, int64_t a2, char a3, unint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = *(void *)(a4 + 24);
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = *(void *)(a4 + 16);
    if (v7 <= v8) {
      uint64_t v9 = *(void *)(a4 + 16);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_1003F5CB4(&qword_1009BB980);
      int64_t v11 = (void *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 17;
      }
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      __n128 v14 = v11 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      int64_t v11 = _swiftEmptyArrayStorage;
      __n128 v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if ((unint64_t)v11 < a4 || (unint64_t)v14 >= a4 + 32 + 16 * v8)
        {
          swift_arrayInitWithTakeFrontToBack( v14,  a4 + 32,  v8,  &type metadata for IDSGroupEncryptionIdentityControllerWeakDelegate);
        }

        else if (v11 != (void *)a4)
        {
          swift_arrayInitWithTakeBackToFront(v14);
        }

        *(void *)(a4 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
        goto LABEL_26;
      }
    }

    sub_1004B9528(0LL, v8, (unint64_t)v14, a4);
LABEL_26:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

void *sub_1004B91B4(unint64_t a1)
{
  return sub_1004B9084(0LL, *(void *)(a1 + 16), 0, a1);
}

id sub_1004B91C8(uint64_t a1)
{
  uint64_t v33 = a1;
  uint64_t v32 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v2 = *(void *)(v32 - 8);
  __chkstk_darwin(v3, v4);
  unint64_t v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v8, v9);
  int64_t v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = v1;
  sub_10048ADB4(0);
  uint64_t v31 = OBJC_IVAR____TtC17identityservicesd36IDSGroupEncryptionIdentityController_q;
  uint64_t v17 = sub_10041D3C4(0LL, (unint64_t *)&qword_1009B9830, &OBJC_CLASS___OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v17);
  uint64_t v35 = _swiftEmptyArrayStorage;
  uint64_t v18 = sub_10040A2B0( &qword_1009B8E20,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v19 = sub_1003F5CB4((uint64_t *)&unk_1009B9840);
  uint64_t v20 = sub_1004021DC((unint64_t *)&qword_1009B8E28, (uint64_t *)&unk_1009B9840);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v35, v19, v20, v7, v18);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))( v6,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v32);
  uint64_t v21 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000032LL,  0x8000000100842DB0LL,  v15,  v11,  v6,  0LL);
  *(void *)&v16[v31] = v21;
  uint64_t v22 = OBJC_IVAR____TtC17identityservicesd36IDSGroupEncryptionIdentityController_lock;
  uint64_t v23 = sub_1003F5CB4((uint64_t *)&unk_1009B9860);
  uint64_t v24 = swift_allocObject(v23, 20LL, 7LL);
  *(_DWORD *)(v24 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
  *(void *)&v16[v22] = v24;
  uint64_t v25 = &v16[OBJC_IVAR____TtC17identityservicesd36IDSGroupEncryptionIdentityController_identity];
  uint64_t v26 = type metadata accessor for IDSGroupEncryptionFullIdentity(0LL);
  uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56LL);
  v27(v25, 1LL, 1LL, v26);
  v27(&v16[OBJC_IVAR____TtC17identityservicesd36IDSGroupEncryptionIdentityController_previousIdentity], 1LL, 1LL, v26);
  *(void *)&v16[OBJC_IVAR____TtC17identityservicesd36IDSGroupEncryptionIdentityController_listeners] = _swiftEmptyArrayStorage;
  uint64_t v28 = v33;
  *(void *)&v16[OBJC_IVAR____TtC17identityservicesd36IDSGroupEncryptionIdentityController_preKeyExpirationDuration] = *(void *)(v33 + OBJC_IVAR____TtC17identityservicesd31IDSGroupEncryptionConfiguration_preKeyExpirationDuration);
  *(void *)&v16[OBJC_IVAR____TtC17identityservicesd36IDSGroupEncryptionIdentityController_previousPreKeyExpirationDuration] = *(void *)(v28 + OBJC_IVAR____TtC17identityservicesd31IDSGroupEncryptionConfiguration_previousPreKeyExpirationDuration);

  __n128 v29 = (objc_class *)type metadata accessor for IDSGroupEncryptionIdentityController(0LL);
  v34.receiver = v16;
  v34.super_class = v29;
  return objc_msgSendSuper2(&v34, "init");
}

uint64_t sub_1004B94B0(uint64_t a1)
{
  uint64_t v2 = sub_1003F5CB4(&qword_1009B95A0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1004B94F0(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = *(void *)(a1 + 8);
  return a2;
}

uint64_t sub_1004B9528(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1004B9618(unint64_t *a1, uint64_t a2)
{
  unint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 16);
  if (!v3) {
    return 0LL;
  }
  swift_bridgeObjectRetain(*a1);
  unint64_t v6 = 0LL;
  for (uint64_t i = 48LL; ; i += 16LL)
  {
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(v2 + i - 16);
    swift_unknownObjectRelease(Strong, v9);
    sub_1004B9DD0(v2 + i - 16, (uint64_t)v26);
    if (!Strong) {
      break;
    }
    uint64_t v10 = swift_unknownObjectWeakLoadStrong(v26);
    if (v10)
    {
      uint64_t v12 = v10;
      swift_unknownObjectRelease(v10, v11);
      sub_10041C0A0((uint64_t)v26);
      if (v12 == a2) {
        goto LABEL_11;
      }
    }

    else
    {
      sub_10041C0A0((uint64_t)v26);
    }

    if (v3 == ++v6)
    {
      swift_bridgeObjectRelease(v2);
      return *(void *)(v2 + 16);
    }
  }

  sub_10041C0A0((uint64_t)v26);
LABEL_11:
  uint64_t result = swift_bridgeObjectRelease(v2);
  if (__OFADD__(v6, 1LL)) {
    goto LABEL_44;
  }
  unint64_t v14 = *(void *)(v2 + 16);
  if (v6 + 1 == v14) {
    return v6;
  }
  for (unint64_t j = v6 + 1; j < v14; ++j)
  {
    sub_1004B9DD0(v2 + i, (uint64_t)v26);
    uint64_t v16 = swift_unknownObjectWeakLoadStrong(v26);
    swift_unknownObjectRelease(v16, v17);
    sub_1004B9DD0((uint64_t)v26, (uint64_t)v25);
    if (!v16)
    {
      sub_10041C0A0((uint64_t)v25);
      uint64_t result = sub_10041C0A0((uint64_t)v26);
      goto LABEL_31;
    }

    uint64_t v18 = swift_unknownObjectWeakLoadStrong(v25);
    if (v18)
    {
      uint64_t v20 = v18;
      swift_unknownObjectRelease(v18, v19);
      sub_10041C0A0((uint64_t)v25);
      uint64_t result = sub_10041C0A0((uint64_t)v26);
      if (v20 == a2) {
        goto LABEL_31;
      }
      if (j == v6) {
        goto LABEL_30;
      }
    }

    else
    {
      sub_10041C0A0((uint64_t)v25);
      uint64_t result = sub_10041C0A0((uint64_t)v26);
      if (j == v6) {
        goto LABEL_30;
      }
    }

    if ((v6 & 0x8000000000000000LL) != 0) {
      goto LABEL_39;
    }
    unint64_t v21 = *a1;
    unint64_t v22 = *(void *)(*a1 + 16);
    if (v6 >= v22) {
      goto LABEL_40;
    }
    uint64_t result = sub_1004B9DD0(v21 + 16 * v6 + 32, (uint64_t)v26);
    if (j >= v22) {
      goto LABEL_41;
    }
    sub_1004B9DD0(v21 + i, (uint64_t)v25);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native(v21);
    *a1 = v21;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_1004B91B4(v21);
      unint64_t v21 = result;
      *a1 = result;
    }

    if (v6 >= *(void *)(v21 + 16)) {
      goto LABEL_42;
    }
    uint64_t result = sub_1004B9E08((uint64_t)v25, v21 + 16 * v6 + 32);
    if (j >= *(void *)(*a1 + 16)) {
      goto LABEL_43;
    }
    uint64_t result = sub_1004B9E08((uint64_t)v26, *a1 + i);
LABEL_30:
    if (__OFADD__(v6++, 1LL)) {
      goto LABEL_38;
    }
LABEL_31:
    unint64_t v24 = j + 1;
    if (__OFADD__(j, 1LL)) {
      goto LABEL_37;
    }
    unint64_t v2 = *a1;
    unint64_t v14 = *(void *)(*a1 + 16);
    i += 16LL;
    if (v24 == v14) {
      return v6;
    }
  }

  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
  return result;
}

uint64_t sub_1004B98A4(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_24;
  }

  uint64_t v4 = (void *)*v2;
  int64_t v5 = *(void *)(*v2 + 16LL);
  if (v5 < a2)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0LL, v7))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }

  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t v4 = sub_1004B9084(isUniquelyReferenced_nonNull_native, v11, 1, (unint64_t)v4);
  }

  uint64_t result = swift_arrayDestroy(&v4[2 * a1 + 4], v7, &type metadata for IDSGroupEncryptionIdentityControllerWeakDelegate);
  if (!v7) {
    goto LABEL_22;
  }
  uint64_t v13 = v4[2];
  uint64_t v14 = v13 - a2;
  if (__OFSUB__(v13, a2)) {
    goto LABEL_28;
  }
  if ((v14 & 0x8000000000000000LL) == 0)
  {
    uint64_t v15 = (uint64_t)&v4[2 * a2 + 4];
    if (a1 < a2 || (unint64_t)&v4[2 * a1 + 4] >= v15 + 16 * v14)
    {
      uint64_t result = swift_arrayInitWithTakeFrontToBack( &v4[2 * a1 + 4],  v15,  v14,  &type metadata for IDSGroupEncryptionIdentityControllerWeakDelegate);
    }

    else if (a1 != a2)
    {
      uint64_t result = swift_arrayInitWithTakeBackToFront(&v4[2 * a1 + 4]);
    }

    uint64_t v16 = v4[2];
    BOOL v17 = __OFADD__(v16, v8);
    uint64_t v18 = v16 - v7;
    if (!v17)
    {
      void v4[2] = v18;
LABEL_22:
      void *v2 = v4;
      return result;
    }

    goto LABEL_29;
  }

uint64_t type metadata accessor for IDSGroupEncryptionIdentityController(uint64_t a1)
{
  uint64_t result = qword_1009C62D0;
  if (!qword_1009C62D0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for IDSGroupEncryptionIdentityController);
  }
  return result;
}

uint64_t initializeWithCopy for IDSGroupEncryptionIdentityControllerWeakDelegate(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_unknownObjectWeakCopyInit(a1, a2);
  *(void *)(result + 8) = *(void *)(a2 + 8);
  return result;
}

uint64_t assignWithCopy for IDSGroupEncryptionIdentityControllerWeakDelegate(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_unknownObjectWeakCopyAssign();
  *(void *)(result + 8) = *(void *)(a2 + 8);
  return result;
}

uint64_t initializeWithTake for IDSGroupEncryptionIdentityControllerWeakDelegate(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_unknownObjectWeakTakeInit(a1, a2);
  *(void *)(result + 8) = *(void *)(a2 + 8);
  return result;
}

uint64_t assignWithTake for IDSGroupEncryptionIdentityControllerWeakDelegate(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_unknownObjectWeakTakeAssign(a1, a2);
  *(void *)(result + 8) = *(void *)(a2 + 8);
  return result;
}

uint64_t getEnumTagSinglePayload for IDSGroupEncryptionIdentityControllerWeakDelegate(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  if ((*(void *)(a1 + 8) & 0xF000000000000007LL) != 0) {
    int v2 = *(_DWORD *)a1 & 0x7FFFFFFF;
  }
  else {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IDSGroupEncryptionIdentityControllerWeakDelegate( uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      *(void *)(result + 8) = 1LL;
      return result;
    }

    *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for IDSGroupEncryptionIdentityControllerWeakDelegate()
{
  return &type metadata for IDSGroupEncryptionIdentityControllerWeakDelegate;
}

uint64_t sub_1004B9BA4()
{
  return type metadata accessor for IDSGroupEncryptionIdentityController(0LL);
}

void sub_1004B9BAC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger(319LL);
  if (v3 <= 0x3F)
  {
    v6[0] = *(void *)(v2 - 8) + 64LL;
    v6[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v6[2] = (char *)&value witness table for Builtin.NativeObject + 64;
    sub_1004B9C70(319LL);
    if (v5 <= 0x3F)
    {
      uint64_t v7 = *(void *)(v4 - 8) + 64LL;
      uint64_t v8 = v7;
      int64_t v9 = (char *)&value witness table for Builtin.BridgeObject + 64;
      uint64_t v10 = (char *)&value witness table for Builtin.Int64 + 64;
      int64_t v11 = (char *)&value witness table for Builtin.Int64 + 64;
      swift_updateClassMetadata2(a1, 256LL, 8LL, v6, a1 + 80);
    }
  }

void sub_1004B9C70(uint64_t a1)
{
  if (!qword_1009BB978)
  {
    uint64_t v2 = type metadata accessor for IDSGroupEncryptionFullIdentity(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_1009BB978);
    }
  }

uint64_t sub_1004B9CC4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1004B9CE8()
{
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = (os_unfair_lock_s *)(*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x90LL))();
  os_unfair_lock_lock(v2 + 4);
  sub_1004B8AAC(v1);
  os_unfair_lock_unlock(v2 + 4);
  return swift_release(v2);
}

uint64_t sub_1004B9D4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 3sub_10040A648(v1 + 2) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1004B9D5C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1004B9D64(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for IDSGroupEncryptionFullIdentity(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1004B9DA8()
{
  return sub_1004B8BA8(*(void *)(v0 + 16));
}

uint64_t sub_1004B9DD0(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = *(void *)(a1 + 8);
  return a2;
}

uint64_t sub_1004B9E08(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = *(void *)(a1 + 8);
  return a2;
}

uint64_t sub_1004B9E40(uint64_t a1)
{
  uint64_t result = swift_allocObject(v1, 24LL, 7LL);
  *(void *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  return result;
}

void *sub_1004B9E70()
{
  uint64_t v1 = type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer(0LL);
  __chkstk_darwin(v2, v3);
  unint64_t v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6, v7);
  int64_t v9 = (char *)&v32 - v8;
  uint64_t v10 = *(void **)(v0 + 16);
  NSString v11 = String._bridgeToObjectiveC()();
  id v12 = [v10 sessionWithUniqueID:v11];

  uint64_t result = &_swiftEmptySetSingleton;
  if (v12)
  {
    uint64_t v33 = &_swiftEmptySetSingleton;
    id v14 = [v12 getEncryptedDataBlob];
    if (v14)
    {
      uint64_t v15 = v14;
      uint64_t v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v14);
      unint64_t v18 = v17;

      sub_1004028CC(v16, v18);
      unint64_t v19 = sub_10043D888(0);
      *(_DWORD *)unint64_t v5 = v19;
      v5[4] = BYTE4(v19);
      v5[5] = BYTE5(v19) & 1;
      *((void *)v5 + Hasher._combine(_:)(v0 & 1) = v20;
      *((void *)v5 + sub_10040A648(v1 + 2) = v21;
      swift_storeEnumTagMultiPayload(v5, v1, 3LL);
      sub_10041AC80((uint64_t)v9, (uint64_t)v5);
      sub_100402A84(v16, v18);
      sub_1004BA0C4((uint64_t)v9);
    }

    id v22 = [v12 getEncryptedMirageHandshakeBlob];
    if (v22)
    {
      unint64_t v24 = v22;
      uint64_t v25 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v22);
      unint64_t v27 = v26;

      sub_1004028CC(v25, v27);
      unint64_t v28 = sub_10043D888(1);
      *(_DWORD *)unint64_t v5 = v28;
      v5[4] = BYTE4(v28);
      v5[5] = BYTE5(v28) & 1;
      *((void *)v5 + Hasher._combine(_:)(v0 & 1) = v29;
      *((void *)v5 + sub_10040A648(v1 + 2) = v30;
      swift_storeEnumTagMultiPayload(v5, v1, 3LL);
      sub_10041AC80((uint64_t)v9, (uint64_t)v5);
      swift_unknownObjectRelease(v12, v31);
      sub_100402A84(v25, v27);
      sub_1004BA0C4((uint64_t)v9);
    }

    else
    {
      swift_unknownObjectRelease(v12, v23);
    }

    return v33;
  }

  return result;
}

uint64_t sub_1004BA094(uint64_t a1, uint64_t a2)
{
  return swift_deallocClassInstance(v2, 24LL, 7LL);
}

uint64_t sub_1004BA0B8()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96LL))();
}

uint64_t sub_1004BA0C4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for IDSDSessionBlobProvider()
{
  return objc_opt_self(&OBJC_CLASS____TtC17identityservicesd23IDSDSessionBlobProvider);
}

uint64_t sub_1004BA120(unsigned __int8 a1)
{
  return a1 + 1LL;
}

uint64_t sub_1004BA12C(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_1004BA290();
  unint64_t v5 = sub_10047DAA8();
  return Error<>._code.getter(a1, a2, v4, v5);
}

void *sub_1004BA170()
{
  return &unk_1009079C8;
}

unint64_t sub_1004BA180()
{
  unint64_t result = qword_1009BBA30;
  if (!qword_1009BBA30)
  {
    unint64_t result = swift_getWitnessTable(&unk_10071CADC, &type metadata for IDSQuerySDError);
    atomic_store(result, (unint64_t *)&qword_1009BBA30);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for IDSQuerySDError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    LODWORD(__chkstk_darwin(v3, v4) = 1;
  }
  else {
    LODWORD(__chkstk_darwin(v3, v4) = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF9) {
    return ((uint64_t (*)(void))((char *)&loc_1004BA210 + 4 * byte_10071CAD5[v4]))();
  }
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1004BA244 + 4 * asc_10071CAD0[v4]))();
}

uint64_t sub_1004BA244(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

uint64_t sub_1004BA24C(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v0 & 1) = 0;
  if (a2) {
    JUMPOUT(0x1004BA254LL);
  }
  return result;
}

uint64_t sub_1004BA260(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v0 & 1) = 0;
  if (!a2) {
    JUMPOUT(0x1004BA268LL);
  }
  *(_BYTE *)unint64_t result = a2 + 6;
  return result;
}

uint64_t sub_1004BA26C(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

uint64_t sub_1004BA274(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IDSQuerySDError()
{
  return &type metadata for IDSQuerySDError;
}

unint64_t sub_1004BA290()
{
  unint64_t result = qword_1009BBA38;
  if (!qword_1009BBA38)
  {
    unint64_t result = swift_getWitnessTable(&unk_10071CB44, &type metadata for IDSQuerySDError);
    atomic_store(result, (unint64_t *)&qword_1009BBA38);
  }

  return result;
}

uint64_t sub_1004BA2D4()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC17identityservicesd35IDSGroupEncryptionKeyMaterialCache2_delegate;
  swift_beginAccess( v0 + OBJC_IVAR____TtC17identityservicesd35IDSGroupEncryptionKeyMaterialCache2_delegate,  v3,  0LL,  0LL);
  return swift_unknownObjectWeakLoadStrong(v1);
}

uint64_t sub_1004BA320(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2 + OBJC_IVAR____TtC17identityservicesd35IDSGroupEncryptionKeyMaterialCache2_delegate;
  swift_beginAccess(v5, v8, 1LL, 0LL);
  *(void *)(v5 + 8) = a2;
  swift_unknownObjectWeakAssign(v5, a1);
  return swift_unknownObjectRelease(a1, v6);
}

void (*sub_1004BA388(void *a1))(uint64_t a1, char a2)
{
  int v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC17identityservicesd35IDSGroupEncryptionKeyMaterialCache2_delegate;
  void v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess(v1 + v4, v3, 33LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = Strong;
  v3[4] = v7;
  return sub_100412358;
}

unint64_t sub_1004BA3FC(uint64_t a1)
{
  uint64_t v2 = sub_1003F5CB4(&qword_1009BBCB8);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v4, v5);
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
    uint64_t v10 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    uint64_t v28 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v28);
    return (unint64_t)v10;
  }

  sub_1003F5CB4(&qword_1009BBC88);
  uint64_t v9 = static _DictionaryStorage.allocate(capacity:)(v8);
  uint64_t v10 = (void *)v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (!v11) {
    goto LABEL_9;
  }
  uint64_t v12 = (uint64_t)&v7[*(int *)(v2 + 48)];
  uint64_t v13 = v9 + 64;
  unint64_t v14 = (*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v30 = a1;
  uint64_t v15 = a1 + v14;
  uint64_t v16 = *(void *)(v3 + 72);
  swift_retain(v9);
  while (1)
  {
    sub_100410FD0(v15, (uint64_t)v7, &qword_1009BBCB8);
    unint64_t result = sub_100417CA0((uint64_t)v7, v17);
    if ((v19 & 1) != 0) {
      break;
    }
    unint64_t v20 = result;
    *(void *)(v13 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v21 = v10[6];
    uint64_t v22 = type metadata accessor for UUID(0LL, v19);
    (*(void (**)(unint64_t, char *, uint64_t))(*(void *)(v22 - 8) + 32LL))( v21 + *(void *)(*(void *)(v22 - 8) + 72LL) * v20,  v7,  v22);
    uint64_t v23 = v10[7];
    uint64_t v24 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
    unint64_t result = sub_1004C77E4(v12, v23 + *(void *)(*(void *)(v24 - 8) + 72LL) * v20);
    uint64_t v25 = v10[2];
    BOOL v26 = __OFADD__(v25, 1LL);
    uint64_t v27 = v25 + 1;
    if (v26) {
      goto LABEL_12;
    }
    v10[2] = v27;
    v15 += v16;
    if (!--v11)
    {
      swift_release(v10);
      uint64_t v28 = v30;
      goto LABEL_10;
    }
  }

  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_1004BA5AC()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC17identityservicesd35IDSGroupEncryptionKeyMaterialCache2_state);
  uint64_t v2 = (uint64_t *)(v1 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v1 + 16LL));
  uint64_t v3 = (os_unfair_lock_s *)(v1 + ((*(unsigned int *)(*(void *)v1 + 48LL) + 3LL) & 0x1FFFFFFFCLL));
  swift_retain(v1);
  os_unfair_lock_lock(v3);
  sub_1004BA640(v2, v4, &v7);
  os_unfair_lock_unlock(v3);
  uint64_t v5 = v7;
  swift_release(v1);
  return v5;
}

void sub_1004BA640(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v64 = a3;
  uint64_t v4 = type metadata accessor for UUID(0LL, a2);
  uint64_t v80 = *(void *)(v4 - 8);
  uint64_t v81 = v4;
  __chkstk_darwin(v5, v6);
  os_log_type_t v78 = (char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v67 = v8;
  uint64_t v68 = v9;
  __chkstk_darwin(v10, v11);
  uint64_t v70 = (uint64_t)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13, v14);
  uint64_t v69 = (uint64_t)&v62 - v15;
  __chkstk_darwin(v16, v17);
  uint64_t v77 = (uint64_t)&v62 - v18;
  sub_1003F5CB4(&qword_1009BBCA8);
  __chkstk_darwin(v19, v20);
  uint64_t v22 = (char *)&v62 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v23, v24);
  BOOL v26 = (char *)&v62 - v25;
  id v74 = a1;
  uint64_t v27 = *a1;
  uint64_t v28 = *(void *)(*a1 + 64);
  uint64_t v65 = *a1 + 64;
  Swift::String v82 = &_swiftEmptySetSingleton;
  uint64_t v29 = 1LL << *(_BYTE *)(v27 + 32);
  if (v29 < 64) {
    uint64_t v30 = ~(-1LL << v29);
  }
  else {
    uint64_t v30 = -1LL;
  }
  unint64_t v31 = v30 & v28;
  int64_t v66 = (unint64_t)(v29 + 63) >> 6;
  int64_t v63 = v66 - 1;
  uint64_t v71 = v27;
  __n128 v32 = swift_bridgeObjectRetain(v27);
  int64_t v75 = 0LL;
  uint64_t v72 = v26;
  unint64_t v73 = v22;
  while (1)
  {
    if (v31)
    {
      unint64_t v37 = __clz(__rbit64(v31));
      uint64_t v38 = (v31 - 1) & v31;
      unint64_t v39 = v37 | (v75 << 6);
LABEL_9:
      uint64_t v40 = v71;
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v80 + 16))( v22,  *(void *)(v71 + 48) + *(void *)(v80 + 72) * v39,  v81,  v32);
      uint64_t v41 = *(void *)(v40 + 56) + *(void *)(v68 + 72) * v39;
      uint64_t v42 = sub_1003F5CB4(&qword_1009BBCB0);
      sub_1003F5FC8( v41,  (uint64_t)&v22[*(int *)(v42 + 48)],  type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56LL))(v22, 0LL, 1LL, v42);
      goto LABEL_28;
    }

    int64_t v43 = v75 + 1;
    if (__OFADD__(v75, 1LL))
    {
      __break(1u);
      goto LABEL_38;
    }

    if (v43 < v66)
    {
      unint64_t v44 = *(void *)(v65 + 8 * v43);
      if (v44) {
        goto LABEL_13;
      }
      int64_t v45 = v75 + 2;
      ++v75;
      if (v43 + 1 < v66)
      {
        unint64_t v44 = *(void *)(v65 + 8 * v45);
        if (v44) {
          goto LABEL_16;
        }
        int64_t v75 = v43 + 1;
        if (v43 + 2 < v66)
        {
          unint64_t v44 = *(void *)(v65 + 8 * (v43 + 2));
          if (v44)
          {
            v43 += 2LL;
            goto LABEL_13;
          }

          int64_t v45 = v43 + 3;
          int64_t v75 = v43 + 2;
          if (v43 + 3 < v66) {
            break;
          }
        }
      }
    }

uint64_t sub_1004BAB9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL, a2);
  uint64_t v21 = *(void *)(v4 - 8);
  __chkstk_darwin(v5, v6);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (*(void *)(a2 + 16)
    && (uint64_t v9 = *(void *)(a2 + 40),
        v10 = sub_10040A2B0( &qword_1009B9300,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID),  v11 = dispatch thunk of Hashable._rawHashValue(seed:)(v9, v4, v10),  v12 = -1LL << *(_BYTE *)(a2 + 32),  unint64_t v13 = v11 & ~v12,  ((*(void *)(a2 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) != 0))
  {
    uint64_t v14 = ~v12;
    uint64_t v15 = *(void *)(v21 + 72);
    __n128 v16 = *(void (**)(char *, unint64_t, uint64_t))(v21 + 16);
    do
    {
      v16(v8, *(void *)(a2 + 48) + v15 * v13, v4);
      uint64_t v17 = sub_10040A2B0( &qword_1009B9808,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      char v18 = dispatch thunk of static Equatable.== infix(_:_:)(v8, a1, v4, v17);
      (*(void (**)(char *, uint64_t))(v21 + 8))(v8, v4);
      if ((v18 & 1) != 0) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v14;
    }

    while (((*(void *)(a2 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) != 0);
  }

  else
  {
    char v18 = 0;
  }

  return v18 & 1;
}

uint64_t sub_1004BAD20()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC17identityservicesd35IDSGroupEncryptionKeyMaterialCache2_state);
  uint64_t v2 = (uint64_t *)(v1 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v1 + 16LL));
  uint64_t v3 = (os_unfair_lock_s *)(v1 + ((*(unsigned int *)(*(void *)v1 + 48LL) + 3LL) & 0x1FFFFFFFCLL));
  swift_retain(v1);
  os_unfair_lock_lock(v3);
  sub_1004BADB4(v2, v4, &v7);
  os_unfair_lock_unlock(v3);
  uint64_t v5 = v7;
  swift_release(v1);
  return v5;
}

void sub_1004BADB4(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v70 = a3;
  uint64_t v4 = type metadata accessor for UUID(0LL, a2);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v6, v7);
  os_log_type_t v78 = (char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9, v10);
  uint64_t v88 = (uint64_t)&v69 - v11;
  uint64_t v82 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  uint64_t v75 = *(void *)(v82 - 8);
  __chkstk_darwin(v12, v13);
  uint64_t v77 = (uint64_t)&v69 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15, v16);
  uint64_t v76 = (uint64_t)&v69 - v17;
  __chkstk_darwin(v18, v19);
  uint64_t v21 = (char *)&v69 - v20;
  sub_1003F5CB4(&qword_1009BBCA8);
  __chkstk_darwin(v22, v23);
  uint64_t v25 = (char *)&v69 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v26, v27);
  uint64_t v29 = (char *)&v69 - v28;
  uint64_t v32 = *a1;
  unint64_t v31 = a1 + 3;
  uint64_t v30 = v32;
  uint64_t v33 = *(void *)(v32 + 64);
  uint64_t v71 = v32 + 64;
  uint64_t v89 = &_swiftEmptySetSingleton;
  uint64_t v34 = 1LL << *(_BYTE *)(v32 + 32);
  if (v34 < 64) {
    uint64_t v35 = ~(-1LL << v34);
  }
  else {
    uint64_t v35 = -1LL;
  }
  unint64_t v36 = v35 & v33;
  int64_t v73 = (unint64_t)(v34 + 63) >> 6;
  int64_t v69 = v73 - 1;
  uint64_t v79 = v30;
  __n128 v37 = swift_bridgeObjectRetain(v30);
  int64_t v83 = 0LL;
  uint64_t v80 = v29;
  uint64_t v81 = v25;
  uint64_t v72 = v31;
  id v74 = v21;
  uint64_t v86 = v4;
  while (1)
  {
    if (v36)
    {
      uint64_t v84 = (v36 - 1) & v36;
      unint64_t v38 = __clz(__rbit64(v36)) | (v83 << 6);
LABEL_9:
      uint64_t v39 = v79;
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v5 + 16))( v25,  *(void *)(v79 + 48) + *(void *)(v5 + 72) * v38,  v4,  v37);
      uint64_t v40 = *(void *)(v39 + 56) + *(void *)(v75 + 72) * v38;
      uint64_t v41 = sub_1003F5CB4(&qword_1009BBCB0);
      sub_1003F5FC8( v40,  (uint64_t)&v25[*(int *)(v41 + 48)],  type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56LL))(v25, 0LL, 1LL, v41);
      goto LABEL_28;
    }

    int64_t v42 = v83 + 1;
    if (__OFADD__(v83, 1LL))
    {
      __break(1u);
      goto LABEL_41;
    }

    if (v42 < v73)
    {
      unint64_t v43 = *(void *)(v71 + 8 * v42);
      if (v43) {
        goto LABEL_13;
      }
      int64_t v44 = v83 + 2;
      ++v83;
      if (v42 + 1 < v73)
      {
        unint64_t v43 = *(void *)(v71 + 8 * v44);
        if (v43) {
          goto LABEL_16;
        }
        int64_t v83 = v42 + 1;
        if (v42 + 2 < v73)
        {
          unint64_t v43 = *(void *)(v71 + 8 * (v42 + 2));
          if (v43)
          {
            v42 += 2LL;
            goto LABEL_13;
          }

          int64_t v44 = v42 + 3;
          int64_t v83 = v42 + 2;
          if (v42 + 3 < v73) {
            break;
          }
        }
      }
    }

uint64_t sub_1004BB3B0(uint64_t a1, int a2)
{
  uint64_t v5 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  sub_1004BB3FC(a1, a2);
  return v5;
}

uint64_t sub_1004BB3FC(uint64_t a1, int a2)
{
  int v22 = a2;
  uint64_t v21 = a1;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v5, v6);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for IDSGroupEncryptionKeyMaterialCache2.KMCacheState(0LL);
  __chkstk_darwin(v9, v10);
  __n128 v12 = (unint64_t *)((char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v13 = v2 + OBJC_IVAR____TtC17identityservicesd35IDSGroupEncryptionKeyMaterialCache2_delegate;
  *(void *)(v13 + 8) = 0LL;
  swift_unknownObjectWeakInit(v13, 0LL);
  uint64_t v14 = OBJC_IVAR____TtC17identityservicesd35IDSGroupEncryptionKeyMaterialCache2_state;
  unint64_t *v12 = sub_1004BA3FC((uint64_t)_swiftEmptyArrayStorage);
  __n128 v15 = &_swiftEmptySetSingleton;
  v12[1] = sub_1004C6F38(_swiftEmptyArrayStorage);
  v12[2] = (unint64_t)&_swiftEmptySetSingleton;
  void v12[3] = (unint64_t)&_swiftEmptySetSingleton;
  void v12[4] = (unint64_t)&_swiftEmptySetSingleton;
  Date.init(timeIntervalSince1970:)(0.0);
  uint64_t v16 = sub_1003F5CB4(&qword_1009BBA40);
  uint64_t v17 = swift_allocObject( v16,  ((*(unsigned int *)(v16 + 48) + 3LL) & 0x1FFFFFFFCLL) + 4,  *(unsigned __int16 *)(v16 + 52) | 3LL);
  *(_DWORD *)(v17 + ((*(unsigned int *)(*(void *)v17 + 48LL) + 3LL) & 0x1FFFFFFFCLL)) = 0;
  sub_1003F5FC8( (uint64_t)v12,  v17 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v17 + 16LL),  type metadata accessor for IDSGroupEncryptionKeyMaterialCache2.KMCacheState);
  sub_1003F6050((uint64_t)v12, type metadata accessor for IDSGroupEncryptionKeyMaterialCache2.KMCacheState);
  *(void *)(v2 + v14) = v17;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000LL) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    sub_1004016F4((uint64_t)_swiftEmptyArrayStorage);
    __n128 v15 = v20;
  }

  *(void *)(v2 + OBJC_IVAR____TtC17identityservicesd35IDSGroupEncryptionKeyMaterialCache2_currentMembers) = v15;
  sub_10048ADB4(v22);
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))( v2 + OBJC_IVAR____TtC17identityservicesd35IDSGroupEncryptionKeyMaterialCache2_l,  v8,  v3);
  uint64_t v18 = v21;
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v21;
  *(_BYTE *)(v2 + OBJC_IVAR____TtC17identityservicesd35IDSGroupEncryptionKeyMaterialCache2_isRatchetEnabled) = *(_BYTE *)(v18 + OBJC_IVAR____TtC17identityservicesd31IDSGroupEncryptionConfiguration_isRatchetEnabled);
  return v2;
}

uint64_t sub_1004BB618(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC17identityservicesd35IDSGroupEncryptionKeyMaterialCache2_state);
  uint64_t v4 = (uint64_t *)(v3 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v3 + 16LL));
  __n128 v5 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(void *)v3 + 48LL) + 3LL) & 0x1FFFFFFFCLL));
  swift_retain(v3);
  os_unfair_lock_lock(v5);
  sub_1004BB6B4(v4, a1, (char *)&v8);
  os_unfair_lock_unlock(v5);
  uint64_t v6 = v8;
  swift_release(v3);
  return v6;
}

uint64_t sub_1004BB6B4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  __n128 v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = *a1;
  if (*(void *)(v11 + 16) && (unint64_t v12 = sub_100417CA0(a2, v8), (v13 & 1) != 0))
  {
    unint64_t v14 = v12;
    uint64_t v15 = *(void *)(v11 + 56);
    uint64_t v16 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
    uint64_t v17 = *(void *)(v16 - 8);
    sub_1003F5FC8( v15 + *(void *)(v17 + 72) * v14,  (uint64_t)v10,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    char v18 = 1;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v10, 0LL, 1LL, v16);
  }

  else
  {
    uint64_t v19 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL))(v10, 1LL, 1LL, v19);
    char v18 = 0;
  }

  uint64_t result = sub_10040A274((uint64_t)v10, &qword_1009B8E08);
  *a3 = v18;
  return result;
}

uint64_t sub_1004BB7C8(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC17identityservicesd35IDSGroupEncryptionKeyMaterialCache2_state);
  uint64_t v4 = (uint64_t *)(v3 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v3 + 16LL));
  __n128 v5 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(void *)v3 + 48LL) + 3LL) & 0x1FFFFFFFCLL));
  swift_retain(v3);
  os_unfair_lock_lock(v5);
  LOBYTE(aHasher._combine(_:)(v0 & 1) = sub_1004BB860(v4, a1);
  os_unfair_lock_unlock(v5);
  swift_release(v3);
  return a1 & 1;
}

uint64_t sub_1004BB860(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = (int *)type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  uint64_t v5 = *((void *)v4 - 1);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v118 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10, v11);
  uint64_t v123 = (uint64_t)&v118 - v12;
  __chkstk_darwin(v13, v14);
  uint64_t v121 = (uint64_t)&v118 - v15;
  __chkstk_darwin(v16, v17);
  uint64_t v120 = (uint64_t)&v118 - v18;
  __chkstk_darwin(v19, v20);
  uint64_t v125 = (uint64_t)&v118 - v21;
  __chkstk_darwin(v22, v23);
  uint64_t v124 = (uint64_t)&v118 - v24;
  __chkstk_darwin(v25, v26);
  uint64_t v28 = (char *)&v118 - v27;
  __chkstk_darwin(v29, v30);
  uint64_t v122 = (uint64_t)&v118 - v31;
  __chkstk_darwin(v32, v33);
  uint64_t v35 = (char *)&v118 - v34;
  __chkstk_darwin(v36, v37);
  uint64_t v126 = (uint64_t)&v118 - v38;
  sub_1003F5CB4(&qword_1009B8E08);
  __chkstk_darwin(v39, v40);
  int64_t v42 = (char *)&v118 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v43, v44);
  uint64_t v47 = (char *)&v118 - v46;
  uint64_t v48 = *a1;
  if (*(void *)(v48 + 16))
  {
    uint64_t v49 = a2;
    unint64_t v50 = sub_100417CA0(a2 + v4[5], v45);
    if ((v51 & 1) != 0)
    {
      sub_1003F5FC8( *(void *)(v48 + 56) + *(void *)(v5 + 72) * v50,  (uint64_t)v47,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      uint64_t v52 = 0LL;
      goto LABEL_6;
    }
  }

  else
  {
    uint64_t v49 = a2;
  }

  uint64_t v52 = 1LL;
LABEL_6:
  (*(void (**)(char *, uint64_t, uint64_t, int *))(v5 + 56))(v47, v52, 1LL, v4);
  sub_100410FD0((uint64_t)v47, (uint64_t)v42, &qword_1009B8E08);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v5 + 48))(v42, 1LL, v4) != 1)
  {
    uint64_t v118 = v9;
    uint64_t v119 = v47;
    uint64_t v54 = v126;
    sub_1004C77E4((uint64_t)v42, v126);
    uint64_t v55 = v4[7];
    uint64_t v56 = *(void *)(v54 + v55);
    unint64_t v57 = *(void *)(v54 + v55 + 8);
    sub_1004028CC(v56, v57);
    sub_100410288(v56, v57);
    char v59 = v58;
    uint64_t v60 = sub_100402A84(v56, v57);
    if ((v59 & 1) == 0)
    {
      uint64_t v77 = (os_log_s *)Logger.logObject.getter(v60);
      os_log_type_t v78 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v77, v78))
      {
        uint64_t v79 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v80 = swift_slowAlloc(32LL, -1LL);
        uint64_t v128 = v80;
        *(_DWORD *)uint64_t v79 = 136315138;
        uint64_t v127 = sub_1003FFBB0(0x7461747328736168LL, 0xEF293A79656B3A65LL, &v128);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, &v128, v79 + 4, v79 + 12);
        _os_log_impl( (void *)&_mh_execute_header,  v77,  v78,  "%s: key is in cache, but key content is different!",  v79,  0xCu);
        swift_arrayDestroy(v80, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v80, -1LL, -1LL);
        swift_slowDealloc(v79, -1LL, -1LL);
      }

      sub_1003F6050(v126, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      uint64_t v53 = (uint64_t)v119;
      goto LABEL_17;
    }

    uint64_t v61 = v54 + v4[13];
    int v62 = *(unsigned __int8 *)(v61 + 8);
    uint64_t v63 = v49;
    sub_1003F5FC8(v49, (uint64_t)v35, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    uint64_t v64 = v54;
    if (v62 == 1)
    {
      char v65 = v35[v4[13] + 8];
      sub_1003F6050((uint64_t)v35, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      uint64_t v66 = (uint64_t)v118;
      uint64_t v67 = (uint64_t)v119;
      if ((v65 & 1) == 0)
      {
        uint64_t v68 = v122;
        uint64_t v69 = sub_1003F5FC8(v49, v122, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        uint64_t v70 = (os_log_s *)Logger.logObject.getter(v69);
        os_log_type_t v71 = static os_log_type_t.default.getter(v70);
        if (os_log_type_enabled(v70, v71))
        {
          uint64_t v72 = swift_slowAlloc(22LL, -1LL);
          uint64_t v73 = swift_slowAlloc(32LL, -1LL);
          uint64_t v128 = v73;
          *(_DWORD *)uint64_t v72 = 136315394;
          uint64_t v127 = sub_1003FFBB0(0x7461747328736168LL, 0xEF293A79656B3A65LL, &v128);
          uint64_t result = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, &v128, v72 + 4, v72 + 12);
          *(_WORD *)(v72 + 1sub_10040A648(v1 + 2) = 2048;
          uint64_t v75 = v68 + v4[13];
          if ((*(_BYTE *)(v75 + 8) & 1) == 0)
          {
            uint64_t v76 = *(void *)v75;
            sub_1003F6050(v68, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
            uint64_t v127 = v76;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, &v128, v72 + 14, v72 + 22);
            _os_log_impl( (void *)&_mh_execute_header,  v70,  v71,  "%s: key is in cache, but new key has a participant ID %llu and old does not",  (uint8_t *)v72,  0x16u);
            swift_arrayDestroy(v73, 1LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v73, -1LL, -1LL);
            swift_slowDealloc(v72, -1LL, -1LL);

            sub_1003F6050(v126, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
            uint64_t v53 = v67;
            goto LABEL_17;
          }

          __break(1u);
          goto LABEL_47;
        }

        uint64_t v104 = v68;
LABEL_45:
        sub_1003F6050(v104, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);

        sub_1003F6050(v64, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        uint64_t v53 = v67;
        goto LABEL_17;
      }
    }

    else
    {
      sub_1003F6050((uint64_t)v35, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      uint64_t v66 = (uint64_t)v118;
      uint64_t v67 = (uint64_t)v119;
    }

    char v81 = *(_BYTE *)(v61 + 8);
    uint64_t v82 = v49;
    sub_1003F5FC8(v49, (uint64_t)v28, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    if ((v81 & 1) != 0)
    {
      sub_1003F6050((uint64_t)v28, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      uint64_t v83 = v124;
      sub_1003F5FC8(v64, v124, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      uint64_t v84 = v63;
      uint64_t v85 = v125;
      sub_1003F5FC8(v84, v125, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    }

    else
    {
      char v86 = v28[v4[13] + 8];
      sub_1003F6050((uint64_t)v28, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      uint64_t v83 = v124;
      sub_1003F5FC8(v64, v124, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      uint64_t v87 = v63;
      uint64_t v85 = v125;
      sub_1003F5FC8(v87, v125, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      if ((v86 & 1) == 0)
      {
        uint64_t v98 = v83 + v4[13];
        uint64_t v99 = *(void *)v98;
        char v100 = *(_BYTE *)(v98 + 8);
        sub_1003F6050(v83, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        uint64_t v101 = v85 + v4[13];
        uint64_t v102 = *(void *)v101;
        char v103 = *(_BYTE *)(v101 + 8);
        sub_1003F6050(v85, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        if ((v100 & 1) != 0)
        {
          uint64_t v66 = (uint64_t)v118;
          if ((v103 & 1) != 0) {
            goto LABEL_24;
          }
        }

        else
        {
          if (v99 == v102) {
            char v105 = v103;
          }
          else {
            char v105 = 1;
          }
          uint64_t v66 = (uint64_t)v118;
          if ((v105 & 1) == 0) {
            goto LABEL_24;
          }
        }

        uint64_t v106 = v82;
        uint64_t v107 = v120;
        sub_1003F5FC8(v106, v120, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        uint64_t v108 = v121;
        uint64_t v109 = sub_1003F5FC8(v64, v121, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        uint64_t v70 = (os_log_s *)Logger.logObject.getter(v109);
        os_log_type_t v110 = static os_log_type_t.default.getter(v70);
        if (!os_log_type_enabled(v70, v110))
        {
          sub_1003F6050(v108, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
          uint64_t v104 = v107;
          goto LABEL_45;
        }

        uint64_t v95 = v67;
        uint64_t v111 = swift_slowAlloc(32LL, -1LL);
        uint64_t v112 = swift_slowAlloc(32LL, -1LL);
        uint64_t v128 = v112;
        *(_DWORD *)uint64_t v111 = 136315650;
        uint64_t v127 = sub_1003FFBB0(0x7461747328736168LL, 0xEF293A79656B3A65LL, &v128);
        uint64_t result = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, &v128, v111 + 4, v111 + 12);
        *(_WORD *)(v111 + 1sub_10040A648(v1 + 2) = 2048;
        uint64_t v113 = v107 + v4[13];
        if ((*(_BYTE *)(v113 + 8) & 1) != 0)
        {
LABEL_47:
          __break(1u);
          goto LABEL_48;
        }

        uint64_t v114 = v107;
        uint64_t v115 = *(void *)v113;
        sub_1003F6050(v114, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        uint64_t v127 = v115;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, &v128, v111 + 14, v111 + 22);
        *(_WORD *)(v111 + 2sub_10040A648(v1 + 2) = 2048;
        uint64_t result = v121;
        uint64_t v116 = v121 + v4[13];
        if ((*(_BYTE *)(v116 + 8) & 1) != 0)
        {
LABEL_48:
          __break(1u);
          return result;
        }

        uint64_t v117 = *(void *)v116;
        sub_1003F6050(v121, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        uint64_t v127 = v117;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, &v128, v111 + 24, v111 + 32);
        _os_log_impl( (void *)&_mh_execute_header,  v70,  v110,  "%s: key is in cache, but new key has a different participant ID %llu than the old one %llu",  (uint8_t *)v111,  0x20u);
        swift_arrayDestroy(v112, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v112, -1LL, -1LL);
        uint64_t v97 = v111;
        goto LABEL_42;
      }
    }

    sub_1003F6050(v85, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    sub_1003F6050(v83, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
LABEL_24:
    int v88 = *(unsigned __int8 *)(v64 + v4[12]);
    uint64_t v89 = v123;
    sub_1003F5FC8(v82, v123, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    if (v88)
    {
      sub_1003F6050(v89, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
LABEL_26:
      sub_1003F6050(v64, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      sub_10040A274(v67, &qword_1009B8E08);
      return 1LL;
    }

    int v90 = *(unsigned __int8 *)(v89 + v4[12]);
    sub_1003F6050(v89, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    if (!v90) {
      goto LABEL_26;
    }
    uint64_t v91 = sub_1003F5FC8(v82, v66, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    uint64_t v70 = (os_log_s *)Logger.logObject.getter(v91);
    os_log_type_t v92 = static os_log_type_t.default.getter(v70);
    if (!os_log_type_enabled(v70, v92))
    {
      uint64_t v104 = v66;
      goto LABEL_45;
    }

    uint64_t v93 = swift_slowAlloc(15LL, -1LL);
    uint64_t v94 = swift_slowAlloc(32LL, -1LL);
    uint64_t v128 = v94;
    *(_DWORD *)uint64_t v93 = 136315394;
    uint64_t v127 = sub_1003FFBB0(0x7461747328736168LL, 0xEF293A79656B3A65LL, &v128);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, &v128, v93 + 4, v93 + 12);
    *(_WORD *)(v93 + 1sub_10040A648(v1 + 2) = 256;
    uint64_t v95 = v67;
    char v96 = *(_BYTE *)(v66 + v4[12]);
    sub_1003F6050(v66, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    LOBYTE(v127) = v96;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, (char *)&v127 + 1, v93 + 14, v93 + 15);
    _os_log_impl( (void *)&_mh_execute_header,  v70,  v92,  "%s: key is in cache, but new key has a shortKI length %hhu and old does not",  (uint8_t *)v93,  0xFu);
    swift_arrayDestroy(v94, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v94, -1LL, -1LL);
    uint64_t v97 = v93;
LABEL_42:
    swift_slowDealloc(v97, -1LL, -1LL);

    sub_1003F6050(v126, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    uint64_t v53 = v95;
    goto LABEL_17;
  }

  sub_10040A274((uint64_t)v47, &qword_1009B8E08);
  uint64_t v53 = (uint64_t)v42;
LABEL_17:
  sub_10040A274(v53, &qword_1009B8E08);
  return 0LL;
}

uint64_t sub_1004BC3BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + OBJC_IVAR____TtC17identityservicesd35IDSGroupEncryptionKeyMaterialCache2_state);
  uint64_t v6 = v5 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v5 + 16LL);
  __n128 v7 = (os_unfair_lock_s *)(v5 + ((*(unsigned int *)(*(void *)v5 + 48LL) + 3LL) & 0x1FFFFFFFCLL));
  swift_retain(v5);
  os_unfair_lock_lock(v7);
  sub_1004BC450(v6, a1, a2);
  os_unfair_lock_unlock(v7);
  return swift_release(v5);
}

uint64_t sub_1004BC450@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(void *)(v4 + 16) && (unint64_t v5 = sub_100417DF8(a2), (v6 & 1) != 0))
  {
    uint64_t v7 = *(void *)(*(void *)(v4 + 56) + 8 * v5);
    swift_bridgeObjectRetain_n(v7, 2LL);
    uint64_t v8 = sub_1004C2F00(v7);
    swift_bridgeObjectRelease(v7);
    __n128 v17 = v8;
    sub_1004C2E80(&v17);
    swift_bridgeObjectRelease(v7);
    uint64_t v9 = v17;
    uint64_t v10 = v17[2];
    if (v10)
    {
      uint64_t v11 = v10 - 1;
      uint64_t v12 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
      uint64_t v13 = *(void *)(v12 - 8);
      sub_1003F5FC8( (uint64_t)v9 + ((*(unsigned __int8 *)(v13 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))
      + *(void *)(v13 + 72) * v11,
        a3,
        type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(a3, 0LL, 1LL, v12);
    }

    else
    {
      uint64_t v16 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))(a3, 1LL, 1LL, v16);
    }

    return swift_release(v9);
  }

  else
  {
    uint64_t v14 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))( a3,  1LL,  1LL,  v14);
  }

void sub_1004BC5AC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UUID(0LL, a2);
  uint64_t v179 = *(void *)(v5 - 8);
  __chkstk_darwin(v6, v7);
  uint64_t v168 = (char *)&v165 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v172 = sub_1003F5CB4(&qword_1009BBA48);
  __chkstk_darwin(v9, v10);
  uint64_t v175 = (uint64_t)&v165 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1003F5CB4(&qword_1009B90E8);
  __chkstk_darwin(v12, v13);
  uint64_t v169 = (uint64_t)&v165 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15, v16);
  uint64_t v174 = (uint64_t)&v165 - v17;
  __chkstk_darwin(v18, v19);
  uint64_t v178 = (uint64_t)&v165 - v20;
  sub_1003F5CB4(&qword_1009B8E08);
  __chkstk_darwin(v21, v22);
  uint64_t v171 = (uint64_t)&v165 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v24, v25);
  uint64_t v170 = (uint64_t)&v165 - v26;
  __chkstk_darwin(v27, v28);
  uint64_t v180 = (uint64_t)&v165 - v29;
  __chkstk_darwin(v30, v31);
  uint64_t v181 = (uint64_t)&v165 - v32;
  __chkstk_darwin(v33, v34);
  unint64_t v182 = (char *)&v165 - v35;
  __chkstk_darwin(v36, v37);
  __n128 v39 = (char *)&v165 - v38;
  uint64_t v40 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  uint64_t v183 = *(void *)(v40 - 8);
  __chkstk_darwin(v41, v42);
  unint64_t v177 = (uint64_t *)((char *)&v165 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v44, v45);
  uint64_t v176 = (uint64_t)&v165 - v46;
  __chkstk_darwin(v47, v48);
  unint64_t v50 = (char *)&v165 - v49;
  uint64_t v51 = v2 + OBJC_IVAR____TtC17identityservicesd35IDSGroupEncryptionKeyMaterialCache2_l;
  uint64_t v187 = a1;
  uint64_t v53 = sub_1003F5FC8(a1, (uint64_t)&v165 - v49, v52);
  uint64_t v186 = v51;
  uint64_t v54 = (os_log_s *)Logger.logObject.getter(v53);
  os_log_type_t v55 = static os_log_type_t.default.getter(v54);
  BOOL v56 = os_log_type_enabled(v54, v55);
  uint64_t v173 = v5;
  uint64_t v185 = v40;
  if (v56)
  {
    uint64_t v57 = swift_slowAlloc(22LL, -1LL);
    uint64_t v58 = swift_slowAlloc(64LL, -1LL);
    v190[0] = v58;
    *(_DWORD *)uint64_t v57 = 136315394;
    uint64_t v189 = (void *)sub_1003FFBB0(0x2865766965636572LL, 0xED0000293A79656BLL, v190);
    uint64_t v184 = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v189, v190, v57 + 4, v57 + 12);
    *(_WORD *)(v57 + 1sub_10040A648(v1 + 2) = 2080;
    uint64_t v59 = sub_10040A2B0( &qword_1009B90F0,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent,  (uint64_t)&unk_100718F00);
    uint64_t v60 = dispatch thunk of CustomStringConvertible.description.getter(v40, v59);
    unint64_t v62 = v61;
    uint64_t v189 = (void *)sub_1003FFBB0(v60, v61, v190);
    __n128 v39 = v184;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v189, v190, v57 + 14, v57 + 22);
    swift_bridgeObjectRelease(v62);
    sub_1003F6050((uint64_t)v50, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    _os_log_impl((void *)&_mh_execute_header, v54, v55, "%s: %s", (uint8_t *)v57, 0x16u);
    swift_arrayDestroy(v58, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v58, -1LL, -1LL);
    swift_slowDealloc(v57, -1LL, -1LL);
  }

  else
  {

    sub_1003F6050((uint64_t)v50, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
  }

  uint64_t v63 = OBJC_IVAR____TtC17identityservicesd35IDSGroupEncryptionKeyMaterialCache2_state;
  uint64_t v64 = *(void *)(v3 + OBJC_IVAR____TtC17identityservicesd35IDSGroupEncryptionKeyMaterialCache2_state);
  char v65 = (uint64_t *)(v64 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v64 + 16LL));
  uint64_t v66 = (os_unfair_lock_s *)(v64 + ((*(unsigned int *)(*(void *)v64 + 48LL) + 3LL) & 0x1FFFFFFFCLL));
  swift_retain(v64);
  os_unfair_lock_lock(v66);
  uint64_t v67 = v187;
  sub_1004BD6E8(v65, v187, (char *)v190);
  os_unfair_lock_unlock(v66);
  LODWORD(v65) = LOBYTE(v190[0]);
  uint64_t v68 = swift_release(v64);
  if ((_DWORD)v65 != 1)
  {
    uint64_t v73 = (uint64_t *)(v67 + *(int *)(v185 + 52));
    if ((v73[1] & 1) != 0)
    {
      uint64_t v74 = *(void *)(v3 + v63);
      uint64_t v75 = v74 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v74 + 16LL);
      uint64_t v76 = (os_unfair_lock_s *)(v74 + ((*(unsigned int *)(*(void *)v74 + 48LL) + 3LL) & 0x1FFFFFFFCLL));
      swift_retain(v74);
      os_unfair_lock_lock(v76);
      sub_1004BDD50(v75, v67);
      os_unfair_lock_unlock(v76);
      uint64_t v77 = swift_release(v74);
LABEL_46:
      (*(void (**)(uint64_t))(*(void *)v3 + 328LL))(v77);
      return;
    }

    uint64_t v78 = *v73;
    (*(void (**)(uint64_t))(*(void *)v3 + 248LL))(*v73);
    uint64_t v79 = *(void *)(v3 + v63);
    uint64_t v80 = v79 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v79 + 16LL);
    char v81 = (os_unfair_lock_s *)(v79 + ((*(unsigned int *)(*(void *)v79 + 48LL) + 3LL) & 0x1FFFFFFFCLL));
    swift_retain(v79);
    os_unfair_lock_lock(v81);
    uint64_t v82 = *(void *)(v80 + 8);
    if (*(void *)(v82 + 16) && (unint64_t v83 = sub_100417DF8(v78), (v84 & 1) != 0))
    {
      uint64_t v85 = *(void **)(*(void *)(v82 + 56) + 8 * v83);
      swift_bridgeObjectRetain(v85);
    }

    else
    {
      uint64_t v85 = &_swiftEmptySetSingleton;
    }

    os_unfair_lock_unlock(v81);
    swift_release(v79);
    v190[0] = (uint64_t)v85;
    char v86 = v177;
    sub_1003F5FC8(v67, (uint64_t)v177, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    uint64_t v87 = v176;
    sub_100400D68(v176, (uint64_t)v86);
    sub_1003F6050(v87, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    uint64_t v88 = v190[0];
    swift_bridgeObjectRetain_n(v190[0], 2LL);
    uint64_t v89 = sub_1004C2F00(v88);
    swift_bridgeObjectRelease(v88);
    uint64_t v189 = v89;
    sub_1004C2E80(&v189);
    uint64_t v176 = v63;
    swift_bridgeObjectRelease(v88);
    uint64_t v90 = (uint64_t)v189;
    uint64_t v91 = swift_retain_n(v189, 2LL);
    os_log_type_t v92 = (os_log_s *)Logger.logObject.getter(v91);
    os_log_type_t v93 = static os_log_type_t.default.getter(v92);
    BOOL v94 = os_log_type_enabled(v92, v93);
    uint64_t v187 = v78;
    uint64_t v167 = v3;
    uint64_t v184 = v39;
    if (!v94) {
      goto LABEL_21;
    }
    uint64_t v95 = swift_slowAlloc(32LL, -1LL);
    uint64_t v96 = swift_slowAlloc(64LL, -1LL);
    uint64_t v189 = (void *)v96;
    *(_DWORD *)uint64_t v95 = 136315650;
    uint64_t v188 = sub_1003FFBB0(0x2865766965636572LL, 0xED0000293A79656BLL, (uint64_t *)&v189);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v188, &v189, v95 + 4, v95 + 12);
    *(_WORD *)(v95 + 1sub_10040A648(v1 + 2) = 2048;
    uint64_t v188 = v78;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v188, &v189, v95 + 14, v95 + 22);
    *(_WORD *)(v95 + 2sub_10040A648(v1 + 2) = 2080;
    uint64_t v97 = swift_retain(v90);
    uint64_t v98 = v185;
    uint64_t v99 = Array.description.getter(v97, v185);
    unint64_t v101 = v100;
    swift_release(v90);
    uint64_t v188 = sub_1003FFBB0(v99, v101, (uint64_t *)&v189);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v188, &v189, v95 + 24, v95 + 32);
    swift_release_n(v90, 2LL);
    swift_bridgeObjectRelease(v101);
    _os_log_impl((void *)&_mh_execute_header, v92, v93, "%s: allKeys for participantID %llu: %s", (uint8_t *)v95, 0x20u);
    swift_arrayDestroy(v96, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v96, -1LL, -1LL);
    swift_slowDealloc(v95, -1LL, -1LL);

    uint64_t v102 = (uint64_t)v182;
    os_log_type_t v92 = *(os_log_s **)(v90 + 16);
    if (v92)
    {
      while (1)
      {
        uint64_t v103 = v183;
        unint64_t v104 = (*(unsigned __int8 *)(v103 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v103 + 80);
        unint64_t v105 = v92 == (os_log_s *)1 ? 0LL : (unint64_t)v92 - 2;
        sub_1003F5FC8( v90 + v104 + *(void *)(v183 + 72) * ((void)v92 - 1),  v102,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v103 + 56))(v102, 0LL, 1LL, v98);
        if ((v105 & 0x8000000000000000LL) == 0) {
          break;
        }
        __break(1u);
LABEL_21:
        swift_release_n(v90, 2LL);

        uint64_t v102 = (uint64_t)v182;
        uint64_t v98 = v185;
        os_log_type_t v92 = *(os_log_s **)(v90 + 16);
        if (!v92) {
          goto LABEL_22;
        }
      }
    }

    else
    {
LABEL_22:
      uint64_t v106 = v183;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v183 + 56))(v102, 1LL, 1LL, v98);
      unint64_t v105 = 0LL;
      unint64_t v104 = (*(unsigned __int8 *)(v106 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v106 + 80);
    }

    unint64_t v107 = v90 + v104;
    uint64_t v108 = sub_1004C7048(v90 + v104, v105, (2LL * (void)v92) | 1);
    if (*(void *)(v90 + 16) < v105)
    {
      __break(1u);
      swift_release(v189);
      __break(1u);
      return;
    }

    uint64_t v166 = v108;
    uint64_t v109 = v98;
    unint64_t v177 = (void *)((2 * v105) | 1);
    uint64_t v110 = swift_retain_n(v90, 2LL);
    uint64_t v111 = (os_log_s *)Logger.logObject.getter(v110);
    os_log_type_t v112 = static os_log_type_t.default.getter(v111);
    BOOL v113 = os_log_type_enabled(v111, v112);
    uint64_t v165 = v90 + v104;
    if (v113)
    {
      uint64_t v114 = swift_slowAlloc(32LL, -1LL);
      uint64_t v186 = swift_slowAlloc(64LL, -1LL);
      uint64_t v189 = (void *)v186;
      *(_DWORD *)uint64_t v114 = 136315650;
      uint64_t v188 = sub_1003FFBB0(0x2865766965636572LL, 0xED0000293A79656BLL, (uint64_t *)&v189);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v188, &v189, v114 + 4, v114 + 12);
      *(_WORD *)(v114 + 1sub_10040A648(v1 + 2) = 2048;
      uint64_t v115 = v187;
      uint64_t v188 = v187;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v188, &v189, v114 + 14, v114 + 22);
      *(_WORD *)(v114 + 2sub_10040A648(v1 + 2) = 2080;
      uint64_t v116 = swift_retain(v90);
      uint64_t v117 = ArraySlice.description.getter(v116, v107, 0LL, v177, v109);
      unint64_t v119 = v118;
      swift_release(v90);
      uint64_t v120 = v117;
      uint64_t v102 = (uint64_t)v182;
      uint64_t v188 = sub_1003FFBB0(v120, v119, (uint64_t *)&v189);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v188, &v189, v114 + 24, v114 + 32);
      swift_release_n(v90, 2LL);
      swift_bridgeObjectRelease(v119);
      _os_log_impl( (void *)&_mh_execute_header,  v111,  v112,  "%s: removedKeys for participantID %llu: %s",  (uint8_t *)v114,  0x20u);
      uint64_t v121 = v186;
      swift_arrayDestroy(v186, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v121, -1LL, -1LL);
      swift_slowDealloc(v114, -1LL, -1LL);

      uint64_t v3 = v167;
      uint64_t v122 = v180;
    }

    else
    {
      swift_release_n(v90, 2LL);

      uint64_t v3 = v167;
      uint64_t v122 = v180;
      uint64_t v115 = v187;
    }

    uint64_t v123 = *(void *)(v3 + v176);
    uint64_t v124 = (uint64_t *)(v123 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v123 + 16LL));
    uint64_t v125 = (os_unfair_lock_s *)(v123 + ((*(unsigned int *)(*(void *)v123 + 48LL) + 3LL) & 0x1FFFFFFFCLL));
    swift_retain(v123);
    os_unfair_lock_lock(v125);
    uint64_t v126 = v124;
    uint64_t v127 = v166;
    uint64_t v186 = v90;
    sub_1004BD9FC(v126, v115, v166, v90, v165, 0LL, v177);
    os_unfair_lock_unlock(v125);
    swift_release(v123);
    uint64_t v128 = v190[0];
    swift_bridgeObjectRelease(v127);
    swift_bridgeObjectRelease(v128);
    uint64_t v129 = (uint64_t)v184;
    uint64_t v130 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v183 + 48);
    LODWORD(v128) = v130(v184, 1LL, v109);
    uint64_t v131 = v181;
    sub_100410FD0(v129, v181, &qword_1009B8E08);
    sub_100410FD0(v102, v122, &qword_1009B8E08);
    if ((_DWORD)v128 == 1)
    {
      sub_10040A274(v122, &qword_1009B8E08);
      uint64_t v132 = sub_10040A274(v131, &qword_1009B8E08);
      uint64_t v133 = v187;
    }

    else
    {
      uint64_t v134 = v170;
      sub_100410FD0(v131, v170, &qword_1009B8E08);
      if (v130((char *)v134, 1LL, v109) == 1)
      {
        sub_10040A274(v134, &qword_1009B8E08);
        id v135 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v179 + 56);
        uint64_t v136 = v173;
        v135(v178, 1LL, 1LL, v173);
      }

      else
      {
        uint64_t v137 = v178;
        uint64_t v138 = v179;
        uint64_t v136 = v173;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v179 + 16))(v178, v134 + *(int *)(v109 + 20), v173);
        sub_1003F6050(v134, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        id v135 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v138 + 56);
        v135(v137, 0LL, 1LL, v136);
      }

      uint64_t v139 = v174;
      uint64_t v140 = v122;
      uint64_t v141 = v171;
      sub_100410FD0(v140, v171, &qword_1009B8E08);
      if (v130((char *)v141, 1LL, v109) == 1)
      {
        sub_10040A274(v141, &qword_1009B8E08);
        uint64_t v142 = 1LL;
        uint64_t v144 = v178;
        uint64_t v143 = v179;
      }

      else
      {
        uint64_t v143 = v179;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v179 + 16))(v139, v141 + *(int *)(v109 + 20), v136);
        sub_1003F6050(v141, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        uint64_t v142 = 0LL;
        uint64_t v144 = v178;
      }

      uint64_t v145 = v172;
      v135(v139, v142, 1LL, v136);
      uint64_t v146 = v175;
      uint64_t v147 = v175 + *(int *)(v145 + 48);
      sub_100410FD0(v144, v175, &qword_1009B90E8);
      sub_100410FD0(v139, v147, &qword_1009B90E8);
      uint64_t v148 = v144;
      id v149 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v143 + 48);
      if (v149(v146, 1LL, v136) == 1)
      {
        sub_10040A274(v139, &qword_1009B90E8);
        uint64_t v146 = v175;
        sub_10040A274(v148, &qword_1009B90E8);
        sub_10040A274(v180, &qword_1009B8E08);
        sub_10040A274(v181, &qword_1009B8E08);
        int v150 = v149(v147, 1LL, v136);
        uint64_t v133 = v187;
        if (v150 == 1)
        {
          sub_10040A274(v146, &qword_1009B90E8);
          goto LABEL_44;
        }
      }

      else
      {
        uint64_t v151 = v169;
        sub_100410FD0(v146, v169, &qword_1009B90E8);
        int v152 = v149(v147, 1LL, v136);
        uint64_t v133 = v187;
        if (v152 != 1)
        {
          uint64_t v159 = v179;
          Class v160 = v168;
          (*(void (**)(char *, uint64_t, uint64_t))(v179 + 32))(v168, v147, v136);
          uint64_t v161 = sub_10040A2B0( &qword_1009B9808,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          LODWORD(v185) = dispatch thunk of static Equatable.== infix(_:_:)(v151, v160, v136, v161);
          uint64_t v162 = v136;
          id v163 = *(void (**)(char *, uint64_t))(v159 + 8);
          v163(v160, v162);
          sub_10040A274(v174, &qword_1009B90E8);
          sub_10040A274(v178, &qword_1009B90E8);
          sub_10040A274(v180, &qword_1009B8E08);
          sub_10040A274(v181, &qword_1009B8E08);
          uint64_t v164 = v162;
          uint64_t v102 = (uint64_t)v182;
          v163((char *)v151, v164);
          uint64_t v132 = sub_10040A274(v146, &qword_1009B90E8);
          if ((v185 & 1) != 0) {
            goto LABEL_44;
          }
          goto LABEL_41;
        }

        sub_10040A274(v174, &qword_1009B90E8);
        sub_10040A274(v178, &qword_1009B90E8);
        sub_10040A274(v180, &qword_1009B8E08);
        sub_10040A274(v181, &qword_1009B8E08);
        (*(void (**)(uint64_t, uint64_t))(v179 + 8))(v151, v136);
      }

      uint64_t v132 = sub_10040A274(v146, &qword_1009BBA48);
    }

uint64_t sub_1004BD6E8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X2>, char *a3@<X8>)
{
  __n128 v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for UUID(0LL, v10);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v13, v14);
  __n128 v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v17, v18);
  uint64_t v20 = (char *)&v26 - v19;
  uint64_t result = sub_1004BB860(a1, a2);
  if ((result & 1) != 0)
  {
    char v22 = 1;
  }

  else
  {
    uint64_t v23 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
    uint64_t v24 = a2 + *(int *)(v23 + 20);
    __n128 v27 = a3;
    __n128 v25 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
    v25(v20, v24, v11);
    sub_1003F5FC8(a2, (uint64_t)v9, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56LL))(v9, 0LL, 1LL, v23);
    sub_1004BD884((uint64_t)v9, (uint64_t)v20);
    v25(v16, v24, v11);
    a3 = v27;
    sub_1004C2168((uint64_t)v20, v16);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v20, v11);
    char v22 = 0;
  }

  *a3 = v22;
  return result;
}

uint64_t sub_1004BD884(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  sub_1003F5CB4(&qword_1009B8E08);
  __chkstk_darwin(v6, v7);
  __n128 v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  __chkstk_darwin(v10, v11);
  __n128 v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v14 + 48))(a1, 1LL) == 1)
  {
    sub_10040A274(a1, &qword_1009B8E08);
    sub_1004C4A9C(a2, (uint64_t)v9);
    uint64_t v16 = type metadata accessor for UUID(0LL, v15);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8LL))(a2, v16);
    return sub_10040A274((uint64_t)v9, &qword_1009B8E08);
  }

  else
  {
    sub_1004C77E4(a1, (uint64_t)v13);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v23 = *v3;
    void *v3 = 0x8000000000000000LL;
    sub_1004C5554((uint64_t)v13, a2, isUniquelyReferenced_nonNull_native);
    uint64_t v19 = *v3;
    void *v3 = v23;
    swift_bridgeObjectRelease(v19);
    uint64_t v21 = type metadata accessor for UUID(0LL, v20);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8LL))(a2, v21);
  }

uint64_t sub_1004BD9FC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  unint64_t v64 = (unint64_t)a7;
  sub_1003F5CB4(&qword_1009B90E8);
  __chkstk_darwin(v13, v14);
  uint64_t v16 = (char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1003F5CB4(&qword_1009B8E08);
  __chkstk_darwin(v17, v18);
  uint64_t v20 = (char *)&v59 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v21, v22);
  uint64_t v65 = (uint64_t)&v59 - v23;
  uint64_t v24 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v66 = v24;
  uint64_t v67 = v25;
  __chkstk_darwin(v26, v27);
  uint64_t v29 = (char *)&v59 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_bridgeObjectRetain(a3);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a1[1]);
  uint64_t v68 = a1[1];
  a1[1] = 0x8000000000000000LL;
  sub_1004C56D4(a3, a2, isUniquelyReferenced_nonNull_native);
  uint64_t v31 = a1[1];
  a1[1] = v68;
  uint64_t result = swift_bridgeObjectRelease(v31);
  int64_t v34 = v64 >> 1;
  if (v64 >> 1 != a6)
  {
    uint64_t v60 = a4;
    uint64_t v35 = v34 - a6;
    if (v34 <= a6)
    {
      __break(1u);
    }

    else
    {
      uint64_t v63 = a1 + 4;
      unint64_t v64 = (unint64_t)(a1 + 2);
      unint64_t v61 = v20;
      unint64_t v62 = a1 + 3;
      uint64_t v36 = a5;
      uint64_t v37 = *(void *)(v67 + 72);
      swift_unknownObjectRetain(v60, v33);
      uint64_t v38 = v36 + v37 * a6;
      uint64_t v39 = v66;
      do
      {
        sub_1003F5FC8(v38, (uint64_t)v29, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        uint64_t v43 = v65;
        sub_10043592C((uint64_t)v29, v65);
        sub_10040A274(v43, &qword_1009B8E08);
        uint64_t v44 = (uint64_t)&v29[*(int *)(v39 + 20)];
        sub_1004C5CDC(v44, v45, (uint64_t)v16);
        sub_10040A274((uint64_t)v16, &qword_1009B90E8);
        sub_1004C5CDC(v44, v46, (uint64_t)v16);
        sub_10040A274((uint64_t)v16, &qword_1009B90E8);
        uint64_t v47 = *a1;
        swift_bridgeObjectRetain(*a1);
        unint64_t v49 = sub_100417CA0(v44, v48);
        char v51 = v50;
        swift_bridgeObjectRelease(v47);
        if ((v51 & 1) != 0)
        {
          int v52 = swift_isUniquelyReferenced_nonNull_native(*a1);
          uint64_t v54 = *a1;
          uint64_t v68 = *a1;
          *a1 = 0x8000000000000000LL;
          if (!v52)
          {
            sub_1004C58BC();
            uint64_t v54 = v68;
          }

          uint64_t v55 = *(void *)(v54 + 48);
          uint64_t v56 = type metadata accessor for UUID(0LL, v53);
          (*(void (**)(unint64_t, uint64_t))(*(void *)(v56 - 8) + 8LL))( v55 + *(void *)(*(void *)(v56 - 8) + 72LL) * v49,  v56);
          uint64_t v57 = v68;
          uint64_t v41 = (uint64_t)v61;
          sub_1004C77E4(*(void *)(v68 + 56) + v49 * v37, (uint64_t)v61);
          sub_1004C5280(v49, v57);
          uint64_t v58 = *a1;
          *a1 = v57;
          swift_bridgeObjectRelease(v58);
          uint64_t v40 = 0LL;
          uint64_t v39 = v66;
        }

        else
        {
          uint64_t v40 = 1LL;
          uint64_t v39 = v66;
          uint64_t v41 = (uint64_t)v61;
        }

        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v67 + 56))(v41, v40, 1LL, v39);
        sub_10040A274(v41, &qword_1009B8E08);
        sub_1003F6050((uint64_t)v29, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        v38 += v37;
        --v35;
      }

      while (v35);
      return swift_unknownObjectRelease(v60, v42);
    }
  }

  return result;
}

uint64_t sub_1004BDD50(uint64_t a1, uint64_t a2)
{
  __n128 v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7, v8);
  __n128 v10 = (char *)&v12 - v9;
  sub_1003F5FC8(a2, (uint64_t)v6, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
  sub_100400D68((uint64_t)v10, (uint64_t)v6);
  return sub_1003F6050((uint64_t)v10, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
}

uint64_t sub_1004BDE08(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UUID(0LL, a2);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v7, v8);
  __n128 v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16))(v10, a1, v5);
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.default.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc(22LL, -1LL);
    uint64_t v27 = a1;
    uint64_t v15 = v14;
    uint64_t v26 = swift_slowAlloc(64LL, -1LL);
    uint64_t v29 = v26;
    *(_DWORD *)uint64_t v15 = 136315394;
    uint64_t v28 = sub_1003FFBB0(0xD000000000000016LL, 0x8000000100842F00LL, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v15 + 4, v15 + 12);
    *(_WORD *)(v15 + 1sub_10040A648(v1 + 2) = 2080;
    uint64_t v16 = sub_10040A2B0( &qword_1009B95C0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter(v5, v16);
    unint64_t v19 = v18;
    uint64_t v28 = sub_1003FFBB0(v17, v18, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v15 + 14, v15 + 22);
    swift_bridgeObjectRelease(v19);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%s: %s", (uint8_t *)v15, 0x16u);
    uint64_t v20 = v26;
    swift_arrayDestroy(v26, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1LL, -1LL);
    uint64_t v21 = v15;
    a1 = v27;
    swift_slowDealloc(v21, -1LL, -1LL);
  }

  else
  {

    (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
  }

  uint64_t v22 = *(void *)(v3 + OBJC_IVAR____TtC17identityservicesd35IDSGroupEncryptionKeyMaterialCache2_state);
  uint64_t v23 = v22 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v22 + 16LL);
  uint64_t v24 = (os_unfair_lock_s *)(v22 + ((*(unsigned int *)(*(void *)v22 + 48LL) + 3LL) & 0x1FFFFFFFCLL));
  swift_retain(v22);
  os_unfair_lock_lock(v24);
  sub_1004BE0A0(v23, a1);
  os_unfair_lock_unlock(v24);
  return swift_release(v22);
}

uint64_t sub_1004BE0A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for UUID(0LL, a2);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v5, v6);
  __n128 v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)&v14 - v11;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v8, a2, v3);
  sub_1004C2168((uint64_t)v12, v8);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v12, v3);
}

uint64_t sub_1004BE15C(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC17identityservicesd35IDSGroupEncryptionKeyMaterialCache2_state);
  uint64_t v4 = v3 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v3 + 16LL);
  __n128 v5 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(void *)v3 + 48LL) + 3LL) & 0x1FFFFFFFCLL));
  swift_retain(v3);
  os_unfair_lock_lock(v5);
  LOBYTE(aHasher._combine(_:)(v0 & 1) = sub_1004BAB9C(a1, *(void *)(v4 + 24));
  os_unfair_lock_unlock(v5);
  swift_release(v3);
  return a1 & 1;
}

uint64_t sub_1004BE1EC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(a1);
  os_log_type_t v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    __n128 v5 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v6 = swift_slowAlloc(32LL, -1LL);
    uint64_t v12 = v6;
    *(_DWORD *)__n128 v5 = 136315138;
    uint64_t v11 = sub_1003FFBB0(0xD000000000000017LL, 0x8000000100841D80LL, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, &v12, v5 + 4, v5 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%s", v5, 0xCu);
    swift_arrayDestroy(v6, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1LL, -1LL);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v7 = *(void *)(v2 + OBJC_IVAR____TtC17identityservicesd35IDSGroupEncryptionKeyMaterialCache2_state);
  uint64_t v8 = v7 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v7 + 16LL);
  __n128 v9 = (os_unfair_lock_s *)(v7 + ((*(unsigned int *)(*(void *)v7 + 48LL) + 3LL) & 0x1FFFFFFFCLL));
  swift_retain(v7);
  os_unfair_lock_lock(v9);
  swift_bridgeObjectRelease(*(void *)(v8 + 24));
  *(void *)(v8 + 24) = &_swiftEmptySetSingleton;
  os_unfair_lock_unlock(v9);
  return swift_release(v7);
}

uint64_t sub_1004BE398(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(a1);
  os_log_type_t v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    __n128 v5 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v6 = swift_slowAlloc(32LL, -1LL);
    uint64_t v12 = v6;
    *(_DWORD *)__n128 v5 = 136315138;
    uint64_t v11 = sub_1003FFBB0(0xD000000000000017LL, 0x8000000100842F20LL, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, &v12, v5 + 4, v5 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%s", v5, 0xCu);
    swift_arrayDestroy(v6, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1LL, -1LL);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v7 = *(void *)(v2 + OBJC_IVAR____TtC17identityservicesd35IDSGroupEncryptionKeyMaterialCache2_state);
  uint64_t v8 = v7 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v7 + 16LL);
  __n128 v9 = (os_unfair_lock_s *)(v7 + ((*(unsigned int *)(*(void *)v7 + 48LL) + 3LL) & 0x1FFFFFFFCLL));
  swift_retain(v7);
  os_unfair_lock_lock(v9);
  swift_bridgeObjectRelease(*(void *)(v8 + 32));
  *(void *)(v8 + 3sub_10040A648(v1 + 2) = &_swiftEmptySetSingleton;
  os_unfair_lock_unlock(v9);
  return swift_release(v7);
}

uint64_t sub_1004BE544(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_retain_n(v1, 2LL);
  uint64_t v4 = swift_bridgeObjectRetain_n(a1, 2LL);
  __n128 v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.default.getter(v5);
  uint64_t v7 = &unk_1009C6000;
  if (os_log_type_enabled(v5, v6))
  {
    os_log_type_t type = v6;
    uint64_t v8 = swift_slowAlloc(32LL, -1LL);
    uint64_t v40 = swift_slowAlloc(96LL, -1LL);
    uint64_t v42 = v40;
    *(_DWORD *)uint64_t v8 = 136315650;
    uint64_t v41 = sub_1003FFBB0(0xD000000000000017LL, 0x800000010083E0F0LL, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 1sub_10040A648(v1 + 2) = 2080;
    uint64_t v9 = *(void *)(v2 + OBJC_IVAR____TtC17identityservicesd35IDSGroupEncryptionKeyMaterialCache2_currentMembers);
    uint64_t v10 = type metadata accessor for IDSGroupEncryptionControllerMember();
    uint64_t v11 = sub_10040A2B0( (unint64_t *)&qword_1009B8E30,  (uint64_t (*)(uint64_t))type metadata accessor for IDSGroupEncryptionControllerMember,  (uint64_t)&protocol conformance descriptor for NSObject);
    swift_bridgeObjectRetain(v9);
    uint64_t v13 = Set.description.getter(v12, v10, v11);
    unint64_t v15 = v14;
    swift_bridgeObjectRelease(v9);
    uint64_t v41 = sub_1003FFBB0(v13, v15, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v8 + 14, v8 + 22);
    swift_release_n(v2, 2LL);
    swift_bridgeObjectRelease(v15);
    *(_WORD *)(v8 + 2sub_10040A648(v1 + 2) = 2080;
    swift_bridgeObjectRetain(a1);
    uint64_t v17 = Set.description.getter(v16, v10, v11);
    unint64_t v19 = v18;
    swift_bridgeObjectRelease(a1);
    uint64_t v41 = sub_1003FFBB0(v17, v19, &v42);
    uint64_t v7 = (void *)&unk_1009C6000;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v8 + 24, v8 + 32);
    swift_bridgeObjectRelease_n(a1, 2LL);
    swift_bridgeObjectRelease(v19);
    _os_log_impl( (void *)&_mh_execute_header,  v5,  type,  "%s: previous members: %s; new members: %s",
      (uint8_t *)v8,
      0x20u);
    swift_arrayDestroy(v40, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v40, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(a1, 2LL);
    swift_release_n(v2, 2LL);
  }

  uint64_t v20 = *(void (**)(void))(*(void *)v2 + 296LL);
  v20();
  uint64_t v21 = v7[157];
  uint64_t v22 = *(void *)(v2 + v21);
  swift_bridgeObjectRetain(v22);
  uint64_t v24 = sub_10048873C(v23, a1);
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  swift_bridgeObjectRelease(v22);
  if (sub_10048845C((uint64_t)v24, v26, v28, v30))
  {
    swift_bridgeObjectRelease(v30);
    swift_bridgeObjectRelease(v28);
    swift_bridgeObjectRelease(v26);
    uint64_t v31 = swift_bridgeObjectRelease(v24);
    ((void (*)(uint64_t))v20)(v31);
    goto LABEL_16;
  }

  BOOL v32 = sub_100488494((uint64_t)v24, v26, v28);
  swift_bridgeObjectRelease(v30);
  swift_bridgeObjectRelease(v28);
  swift_bridgeObjectRelease(v26);
  uint64_t v33 = swift_bridgeObjectRelease(v24);
  if (!v32) {
    goto LABEL_16;
  }
  uint64_t v34 = *(void *)(v2 + v21);
  if ((v34 & 0xC000000000000001LL) == 0)
  {
    goto LABEL_14;
  }

  if (v34 < 0) {
    uint64_t v35 = *(void *)(v2 + v21);
  }
  else {
    uint64_t v35 = v34 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(*(void *)(v2 + v21));
  uint64_t v36 = __CocoaSet.count.getter(v35);
  uint64_t v33 = swift_bridgeObjectRelease(v34);
  if (v36 >= 1)
  {
LABEL_14:
    ((void (*)(uint64_t))v20)(v33);
    if (*(_BYTE *)(v2 + OBJC_IVAR____TtC17identityservicesd35IDSGroupEncryptionKeyMaterialCache2_isRatchetEnabled) == 1) {
      sub_1004BE928();
    }
  }

void sub_1004BE928()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v0 + 128LL);
  uint64_t v3 = v2();
  if (!v3 {
    || (uint64_t v5 = v3,
  }
        uint64_t v6 = v4,
        uint64_t ObjectType = swift_getObjectType(v3),
        LOBYTE(__chkstk_darwin(v5, v6) = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(ObjectType, v6),
        uint64_t v3 = swift_unknownObjectRelease(v5, v8),
        (v6 & 1) == 0))
  {
    os_log_t oslog = (os_log_t)Logger.logObject.getter(v3);
    os_log_type_t v28 = static os_log_type_t.default.getter(oslog);
    if (os_log_type_enabled(oslog, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v30 = swift_slowAlloc(32LL, -1LL);
      uint64_t v36 = v30;
      *(_DWORD *)uint64_t v29 = 136315138;
      uint64_t v35 = sub_1003FFBB0(0x4B74656863746172LL, 0xED00002928737965LL, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v29 + 4, v29 + 12);
      uint64_t v31 = "%s: not ratcheting because we are not active in the session";
      BOOL v32 = oslog;
      os_log_type_t v33 = v28;
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v32, v33, v31, v29, 0xCu);
      swift_arrayDestroy(v30, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1LL, -1LL);
      swift_slowDealloc(v29, -1LL, -1LL);

      return;
    }

double *sub_1004BED84@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v8 = __chkstk_darwin(v6, v7);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static Date.now.getter(v8);
  uint64_t v11 = a1 + *(int *)(type metadata accessor for IDSGroupEncryptionKeyMaterialCache2.KMCacheState(0LL) + 36);
  double v12 = Date.timeIntervalSince(_:)(v11);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  uint64_t result = (double *)sub_1003F5B9C();
  if (v12 <= *result)
  {
    char v14 = 0;
  }

  else
  {
    static Date.now.getter(result);
    uint64_t result = (double *)(*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 40))(v11, v10, v4);
    char v14 = 1;
  }

  *a2 = v14;
  return result;
}

uint64_t sub_1004BEE68(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL, a2);
  uint64_t v248 = *(void *)(v4 - 8);
  __chkstk_darwin(v5, v6);
  uint64_t v250 = (uint64_t)&v215 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8, v9);
  v217 = (char *)&v215 - v10;
  __chkstk_darwin(v11, v12);
  uint64_t v239 = (uint64_t)&v215 - v13;
  sub_1003F5CB4(&qword_1009B8E08);
  __chkstk_darwin(v14, v15);
  uint64_t v222 = (char *)&v215 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v17, v18);
  v223 = (char *)&v215 - v19;
  __chkstk_darwin(v20, v21);
  uint64_t v23 = (char *)&v215 - v22;
  uint64_t v24 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  uint64_t v25 = *(void *)(v24 - 8);
  __chkstk_darwin(v26, v27);
  uint64_t v249 = (uint64_t)&v215 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v29, v30);
  uint64_t v243 = (uint64_t)&v215 - v31;
  __chkstk_darwin(v32, v33);
  uint64_t v216 = (uint64_t)&v215 - v34;
  __chkstk_darwin(v35, v36);
  uint64_t v215 = (uint64_t)&v215 - v37;
  __chkstk_darwin(v38, v39);
  uint64_t v218 = (uint64_t)&v215 - v40;
  __chkstk_darwin(v41, v42);
  uint64_t v221 = (uint64_t)&v215 - v43;
  __chkstk_darwin(v44, v45);
  uint64_t v238 = (uint64_t)&v215 - v46;
  __chkstk_darwin(v47, v48);
  uint64_t v237 = (uint64_t)&v215 - v49;
  __chkstk_darwin(v50, v51);
  uint64_t v228 = (os_log_t *)((char *)&v215 - v52);
  __chkstk_darwin(v53, v54);
  uint64_t v227 = (uint64_t *)((char *)&v215 - v55);
  __chkstk_darwin(v56, v57);
  unint64_t v235 = (unint64_t)&v215 - v58;
  __chkstk_darwin(v59, v60);
  unint64_t v62 = (char *)&v215 - v61;
  __chkstk_darwin(v63, v64);
  uint64_t v236 = (uint64_t)&v215 - v65;
  os_log_t v66 = (os_log_t)sub_1004BA3FC((uint64_t)_swiftEmptyArrayStorage);
  os_log_t v230 = (os_log_t)sub_1004C6F38(_swiftEmptyArrayStorage);
  unint64_t v254 = (os_log_s *)&_swiftEmptySetSingleton;
  uint64_t v224 = a1;
  uint64_t v67 = a1[2];
  uint64_t v68 = (uint64_t)v62;
  uint64_t v69 = *(void *)(v67 + 56);
  uint64_t v231 = (char *)(v67 + 56);
  uint64_t v70 = 1LL << *(_BYTE *)(v67 + 32);
  uint64_t v71 = -1LL;
  if (v70 < 64) {
    uint64_t v71 = ~(-1LL << v70);
  }
  unint64_t v72 = v71 & v69;
  uint64_t v240 = a2 + OBJC_IVAR____TtC17identityservicesd35IDSGroupEncryptionKeyMaterialCache2_l;
  int64_t v232 = (unint64_t)(v70 + 63) >> 6;
  uint64_t v226 = &v253;
  uint64_t v241 = v67;
  __n128 v73 = swift_bridgeObjectRetain(v67);
  uint64_t v74 = 0LL;
  v73.n128_u64[0] = 136315394LL;
  __n128 v229 = v73;
  v220 = (char *)&type metadata for Any + 8;
  uint64_t v244 = v4;
  uint64_t v246 = v25;
  uint64_t v247 = v24;
  uint64_t v233 = v62;
  unint64_t v234 = v23;
  while (1)
  {
    if (v72)
    {
      os_log_t v242 = (os_log_t)((v72 - 1) & v72);
      os_log_t v245 = v74;
      unint64_t v80 = __clz(__rbit64(v72)) | ((void)v74 << 6);
      uint64_t v81 = v248;
      goto LABEL_23;
    }

    int64_t v82 = (int64_t)v74 + 1;
    uint64_t v81 = v248;
    if (__OFADD__(v74, 1LL)) {
      goto LABEL_107;
    }
    if (v82 >= v232) {
      goto LABEL_31;
    }
    unint64_t v83 = *(void *)&v231[8 * v82];
    char v84 = (os_log_s *)((char *)v74 + 1);
    if (!v83)
    {
      char v84 = (os_log_s *)((char *)v74 + 2);
      unint64_t v83 = *(void *)&v231[8 * (void)v84];
      if (!v83)
      {
        char v84 = (os_log_s *)((char *)v74 + 3);
        unint64_t v83 = *(void *)&v231[8 * (void)v84];
        if (!v83) {
          break;
        }
      }
    }

uint64_t sub_1004C03B0()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC17identityservicesd35IDSGroupEncryptionKeyMaterialCache2_state);
  uint64_t v2 = (uint64_t *)(v1 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v1 + 16LL));
  uint64_t v3 = (os_unfair_lock_s *)(v1 + ((*(unsigned int *)(*(void *)v1 + 48LL) + 3LL) & 0x1FFFFFFFCLL));
  swift_retain(v1);
  os_unfair_lock_lock(v3);
  sub_1004C0448(v2, v0, &v6);
  os_unfair_lock_unlock(v3);
  uint64_t v4 = v6;
  swift_release(v1);
  return v4;
}

uint64_t sub_1004C0448@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v75 = a3;
  sub_1003F5CB4(&qword_1009B8E08);
  __chkstk_darwin(v5, v6);
  __n128 v8 = (char *)&v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for UUID(0LL, v9);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v12, v13);
  __n128 v15 = (os_log_s *)((char *)&v72 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v82 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  uint64_t v85 = *(void *)(v82 - 8);
  __chkstk_darwin(v16, v17);
  uint64_t v79 = (uint64_t)&v72 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v19, v20);
  uint64_t v78 = (uint64_t)&v72 - v21;
  __chkstk_darwin(v22, v23);
  uint64_t v77 = (uint64_t)&v72 - v24;
  sub_1003F5CB4(&qword_1009B90E8);
  __chkstk_darwin(v25, v26);
  uint64_t v28 = (char *)&v72 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v83 = a1;
  uint64_t v29 = a1[4];
  swift_bridgeObjectRetain(v29);
  uint64_t v31 = sub_1004C3018(v30);
  uint64_t v32 = swift_bridgeObjectRelease(v29);
  uint64_t v89 = v31;
  uint64_t result = sub_1004C6194(v32, v33);
  __n128 v35 = v89;
  uint64_t v89 = &_swiftEmptySetSingleton;
  uint64_t v36 = *(void *)(*(void *)(a2 + 16)
                  + OBJC_IVAR____TtC17identityservicesd31IDSGroupEncryptionConfiguration_numberOfCachedMKMsToBroadcast);
  if (v35[2] < v36) {
    uint64_t v36 = v35[2];
  }
  if ((v36 & 0x8000000000000000LL) == 0)
  {
    uint64_t v37 = v36;
    uint64_t v38 = (uint64_t)v35 + ((*(unsigned __int8 *)(v11 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    uint64_t v39 = swift_retain_n(v35, 3LL);
    uint64_t v40 = (os_log_s *)Logger.logObject.getter(v39);
    os_log_type_t v41 = static os_log_type_t.default.getter(v40);
    int v42 = v41;
    uint64_t v86 = v40;
    BOOL v43 = os_log_type_enabled(v40, v41);
    uint64_t v76 = v35;
    if (v43)
    {
      uint64_t v84 = v37;
      uint64_t v74 = (2 * v37) | 1;
      uint64_t v44 = swift_slowAlloc(32LL, -1LL);
      LODWORD(v8Hasher._combine(_:)(v0 & 1) = v42;
      uint64_t v45 = v44;
      uint64_t v80 = swift_slowAlloc(64LL, -1LL);
      uint64_t v88 = v80;
      *(_DWORD *)uint64_t v45 = 136315650;
      uint64_t v87 = sub_1003FFBB0(0xD000000000000024LL, 0x8000000100841D30LL, &v88);
      __n128 v73 = &v88;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, &v88, v45 + 4, v45 + 12);
      *(_WORD *)(v45 + 1sub_10040A648(v1 + 2) = 2048;
      uint64_t v87 = v84;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, &v88, v45 + 14, v45 + 22);
      swift_release(v35);
      *(_WORD *)(v45 + 2sub_10040A648(v1 + 2) = 2080;
      uint64_t v72 = v45 + 24;
      uint64_t v46 = swift_retain(v35);
      uint64_t v47 = ArraySlice.description.getter(v46, v38, 0LL, v74, v10);
      unint64_t v49 = v48;
      swift_release(v35);
      uint64_t v87 = sub_1003FFBB0(v47, v49, &v88);
      uint64_t v37 = v84;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, v73, v72, v45 + 32);
      swift_release_n(v35, 2LL);
      swift_bridgeObjectRelease(v49);
      __n128 v50 = v86;
      _os_log_impl( (void *)&_mh_execute_header,  v86,  (os_log_type_t)v81,  "%s: sampling %ld kis: %s",  (uint8_t *)v45,  0x20u);
      uint64_t v51 = v80;
      swift_arrayDestroy(v80, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v51, -1LL, -1LL);
      swift_slowDealloc(v45, -1LL, -1LL);

      if (v37) {
        goto LABEL_6;
      }
    }

    else
    {
      swift_release_n(v35, 3LL);

      if (v37)
      {
LABEL_6:
        uint64_t v52 = v37;
        uint64_t v53 = *(void *)(v11 + 72);
        uint64_t v81 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
        swift_retain(v76);
        uint64_t v86 = v15;
        while (1)
        {
          v81(v28, v38, v10);
          __n128 v54 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
          v54(v28, 0LL, 1LL, v10);
          (*(void (**)(os_log_s *, char *, uint64_t))(v11 + 32))(v15, v28, v10);
          uint64_t v56 = *v83;
          if (*(void *)(*v83 + 16) && (unint64_t v57 = sub_100417CA0((uint64_t)v15, v55), (v58 & 1) != 0))
          {
            sub_1003F5FC8( *(void *)(v56 + 56) + *(void *)(v85 + 72) * v57,  (uint64_t)v8,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
            uint64_t v59 = 0LL;
          }

          else
          {
            uint64_t v59 = 1LL;
          }

          uint64_t v60 = v85;
          uint64_t v61 = v82;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v85 + 56))(v8, v59, 1LL, v82);
          (*(void (**)(os_log_s *, uint64_t))(v11 + 8))(v86, v10);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v8, 1LL, v61) == 1)
          {
            sub_10040A274((uint64_t)v8, &qword_1009B8E08);
          }

          else
          {
            uint64_t v80 = v38;
            uint64_t v84 = v52;
            unint64_t v62 = v28;
            uint64_t v63 = v77;
            sub_1004C77E4((uint64_t)v8, v77);
            uint64_t v64 = v79;
            sub_1003F5FC8(v63, v79, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
            uint64_t v65 = v53;
            uint64_t v66 = v10;
            uint64_t v67 = v11;
            uint64_t v68 = v8;
            uint64_t v69 = v78;
            sub_100400D68(v78, v64);
            uint64_t v70 = v69;
            __n128 v8 = v68;
            uint64_t v11 = v67;
            uint64_t v10 = v66;
            uint64_t v53 = v65;
            sub_1003F6050(v70, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
            uint64_t v71 = v63;
            uint64_t v28 = v62;
            uint64_t v52 = v84;
            uint64_t v38 = v80;
            sub_1003F6050(v71, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
          }

          v38 += v53;
          --v52;
          __n128 v15 = v86;
          if (!v52) {
            goto LABEL_18;
          }
        }

uint64_t sub_1004C0A2C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Date(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v6 = __chkstk_darwin(v4, v5);
  __n128 v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Date.init()(v6);
  uint64_t v9 = *(void *)(v0 + OBJC_IVAR____TtC17identityservicesd35IDSGroupEncryptionKeyMaterialCache2_state);
  uint64_t v10 = (uint64_t *)(v9 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v9 + 16LL));
  uint64_t v11 = (os_unfair_lock_s *)(v9 + ((*(unsigned int *)(*(void *)v9 + 48LL) + 3LL) & 0x1FFFFFFFCLL));
  swift_retain(v9);
  os_unfair_lock_lock(v11);
  sub_1004C0D70(v10, v1, (uint64_t)v8, &v42);
  os_unfair_lock_unlock(v11);
  uint64_t v12 = v42;
  swift_release(v9);
  uint64_t v13 = swift_bridgeObjectRetain_n(v12, 3LL);
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.default.getter(v14);
  int v16 = v15;
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v17 = swift_slowAlloc(32LL, -1LL);
    int v39 = v16;
    uint64_t v18 = v17;
    uint64_t v38 = swift_slowAlloc(64LL, -1LL);
    uint64_t v42 = v38;
    *(_DWORD *)uint64_t v18 = 136315650;
    uint64_t v40 = sub_1003FFBB0(0xD000000000000013LL, 0x8000000100842F40LL, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v18 + 4, v18 + 12);
    *(_WORD *)(v18 + 1sub_10040A648(v1 + 2) = 2048;
    uint64_t v40 = *(void *)(v12 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v18 + 14, v18 + 22);
    swift_bridgeObjectRelease(v12);
    *(_WORD *)(v18 + 2sub_10040A648(v1 + 2) = 2080;
    uint64_t v37 = v18 + 24;
    __n128 v20 = v8;
    uint64_t v21 = v3;
    uint64_t v22 = v2;
    uint64_t v23 = type metadata accessor for UUID(0LL, v19);
    swift_bridgeObjectRetain(v12);
    uint64_t v25 = Array.description.getter(v24, v23);
    unint64_t v27 = v26;
    swift_bridgeObjectRelease(v12);
    uint64_t v28 = v25;
    uint64_t v2 = v22;
    uint64_t v3 = v21;
    __n128 v8 = v20;
    uint64_t v40 = sub_1003FFBB0(v28, v27, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v37, v18 + 32);
    swift_bridgeObjectRelease_n(v12, 2LL);
    swift_bridgeObjectRelease(v27);
    _os_log_impl( (void *)&_mh_execute_header,  v14,  (os_log_type_t)v39,  "%s: removing %ld expired keys: %s",  (uint8_t *)v18,  0x20u);
    uint64_t v29 = v38;
    swift_arrayDestroy(v38, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1LL, -1LL);
    swift_slowDealloc(v18, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(v12, 3LL);
  }

  if (*(void *)(v12 + 16) && (uint64_t v30 = (*(uint64_t (**)(void))(*(void *)v1 + 128LL))()) != 0)
  {
    uint64_t v32 = v30;
    uint64_t v33 = v31;
    uint64_t ObjectType = swift_getObjectType(v30);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v33 + 24))(v12, v1, ObjectType, v33);
    swift_bridgeObjectRelease(v12);
    swift_unknownObjectRelease(v32, v35);
  }

  else
  {
    swift_bridgeObjectRelease(v12);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
}

uint64_t sub_1004C0D70@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v135 = a4;
  sub_1003F5CB4(&qword_1009B90E8);
  __chkstk_darwin(v9, v10);
  uint64_t v154 = (uint64_t)&v134 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1003F5CB4(&qword_1009B8E08);
  __chkstk_darwin(v12, v13);
  uint64_t v153 = (uint64_t)&v134 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15, v16);
  uint64_t v152 = (uint64_t)&v134 - v17;
  uint64_t v19 = type metadata accessor for UUID(0LL, v18);
  uint64_t v164 = *(void *)(v19 - 8);
  uint64_t v165 = v19;
  __chkstk_darwin(v20, v21);
  uint64_t v160 = (char *)&v134 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v155 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  uint64_t v159 = *(void *)(v155 - 8);
  __chkstk_darwin(v23, v24);
  uint64_t v151 = (uint64_t)&v134 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v26, v27);
  uint64_t v29 = (char *)&v134 - v28;
  __chkstk_darwin(v30, v31);
  uint64_t v166 = (uint64_t)&v134 - v32;
  __chkstk_darwin(v33, v34);
  uint64_t v150 = (uint64_t)&v134 - v35;
  uint64_t v36 = *a1;
  uint64_t v148 = a2;
  uint64_t v168 = a2;
  uint64_t v169 = a3;
  swift_bridgeObjectRetain(v36);
  uint64_t v37 = v36;
  uint64_t v38 = v5;
  uint64_t v39 = sub_1004C19A8((uint64_t (*)(char *))sub_1004C7828, (uint64_t)v167, v37);
  uint64_t v162 = v38;
  uint64_t v163 = sub_1004C7854(v39);
  swift_bridgeObjectRelease(v39);
  uint64_t v40 = a1[1];
  uint64_t v41 = *(void *)(v40 + 64);
  uint64_t v156 = v40 + 64;
  uint64_t v42 = 1LL << *(_BYTE *)(v40 + 32);
  uint64_t v43 = -1LL;
  if (v42 < 64) {
    uint64_t v43 = ~(-1LL << v42);
  }
  unint64_t v44 = v43 & v41;
  int64_t v157 = (unint64_t)(v42 + 63) >> 6;
  int64_t v158 = v40;
  swift_bridgeObjectRetain(v40);
  int64_t v45 = 0LL;
  uint64_t v46 = (uint64_t)v29;
  for (i = v29; ; uint64_t v46 = (uint64_t)i)
  {
    if (v44)
    {
      unint64_t v49 = __clz(__rbit64(v44));
      v44 &= v44 - 1;
      unint64_t v50 = v49 | (v45 << 6);
      goto LABEL_19;
    }

    BOOL v51 = __OFADD__(v45++, 1LL);
    if (v51) {
      goto LABEL_71;
    }
    if (v45 >= v157)
    {
      uint64_t v75 = v155;
      uint64_t v53 = v46;
      goto LABEL_35;
    }

    unint64_t v52 = *(void *)(v156 + 8 * v45);
    if (!v52) {
      break;
    }
LABEL_18:
    unint64_t v44 = (v52 - 1) & v52;
    unint64_t v50 = __clz(__rbit64(v52)) + (v45 << 6);
LABEL_19:
    uint64_t v55 = 8 * v50;
    uint64_t v56 = *(void *)(*(void *)(v158 + 48) + v55);
    uint64_t v57 = *(void *)(*(void *)(v158 + 56) + v55);
    uint64_t v58 = v163;
    swift_bridgeObjectRetain(v163);
    swift_bridgeObjectRetain(v57);
    uint64_t v59 = v162;
    uint64_t v61 = sub_1004C7CCC(v60, v58);
    uint64_t v162 = v59;
    swift_bridgeObjectRelease(v58);
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a1[1]);
    uint64_t v172 = (void *)a1[1];
    uint64_t v63 = (uint64_t)v172;
    a1[1] = 0x8000000000000000LL;
    unint64_t v65 = sub_100417DF8(v56);
    uint64_t v66 = *(void *)(v63 + 16);
    BOOL v67 = (v64 & 1) == 0;
    uint64_t v68 = v66 + v67;
    if (__OFADD__(v66, v67))
    {
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
      goto LABEL_74;
    }

    char v69 = v64;
    if (*(void *)(v63 + 24) >= v68)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        sub_1004C5B3C();
      }
    }

    else
    {
      sub_1004C4FCC(v68, isUniquelyReferenced_nonNull_native);
      unint64_t v70 = sub_100417DF8(v56);
      if ((v69 & 1) != (v71 & 1)) {
        goto LABEL_75;
      }
      unint64_t v65 = v70;
    }

    uint64_t v72 = v172;
    if ((v69 & 1) != 0)
    {
      uint64_t v47 = v172[7];
      swift_bridgeObjectRelease(*(void *)(v47 + 8 * v65));
      *(void *)(v47 + 8 * v65) = v61;
    }

    else
    {
      v172[(v65 >> 6) + 8] |= 1LL << v65;
      *(void *)(v72[6] + 8 * v65) = v56;
      *(void *)(v72[7] + 8 * v65) = v61;
      uint64_t v73 = v72[2];
      BOOL v51 = __OFADD__(v73, 1LL);
      uint64_t v74 = v73 + 1;
      if (v51) {
        goto LABEL_70;
      }
      v72[2] = v74;
    }

    uint64_t v48 = a1[1];
    a1[1] = (uint64_t)v72;
    swift_bridgeObjectRelease(v48);
  }

  uint64_t v53 = v46;
  int64_t v54 = v45 + 1;
  if (v45 + 1 >= v157) {
    goto LABEL_33;
  }
  unint64_t v52 = *(void *)(v156 + 8 * v54);
  if (v52) {
    goto LABEL_17;
  }
  int64_t v54 = v45 + 2;
  if (v45 + 2 >= v157) {
    goto LABEL_33;
  }
  unint64_t v52 = *(void *)(v156 + 8 * v54);
  if (v52) {
    goto LABEL_17;
  }
  int64_t v54 = v45 + 3;
  if (v45 + 3 >= v157)
  {
LABEL_33:
    uint64_t v75 = v155;
    goto LABEL_35;
  }

  unint64_t v52 = *(void *)(v156 + 8 * v54);
  if (v52)
  {
LABEL_17:
    int64_t v45 = v54;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v45 = v54 + 1;
    if (__OFADD__(v54, 1LL)) {
      goto LABEL_73;
    }
    if (v45 >= v157) {
      break;
    }
    unint64_t v52 = *(void *)(v156 + 8 * v45);
    ++v54;
    if (v52) {
      goto LABEL_18;
    }
  }

  uint64_t v75 = v155;
  uint64_t v53 = (uint64_t)i;
LABEL_35:
  swift_release(v158);
  int64_t v77 = 0LL;
  uint64_t v78 = *(void *)(v163 + 56);
  uint64_t v140 = v163 + 56;
  uint64_t v79 = 1LL << *(_BYTE *)(v163 + 32);
  uint64_t v80 = -1LL;
  if (v79 < 64) {
    uint64_t v80 = ~(-1LL << v79);
  }
  unint64_t v81 = v80 & v78;
  v148 += OBJC_IVAR____TtC17identityservicesd35IDSGroupEncryptionKeyMaterialCache2_l;
  int64_t v141 = (unint64_t)(v79 + 63) >> 6;
  int v139 = &v171;
  uint64_t v147 = a1 + 2;
  uint64_t v146 = a1 + 3;
  uint64_t v82 = _swiftEmptyArrayStorage;
  uint64_t v145 = a1 + 4;
  *(void *)&__int128 v76 = 136315650LL;
  __int128 v138 = v76;
  unint64_t v137 = 0x8000000100842F40LL;
  uint64_t v136 = (char *)&type metadata for Any + 8;
  unint64_t v149 = a1;
  while (2)
  {
    if (v81)
    {
      int64_t v157 = (v81 - 1) & v81;
      int64_t v158 = v77;
      unint64_t v90 = __clz(__rbit64(v81)) | (v77 << 6);
LABEL_53:
      uint64_t v94 = *(void *)(v163 + 48);
      uint64_t v156 = *(void *)(v159 + 72);
      uint64_t v95 = v150;
      sub_1003F5FC8(v94 + v156 * v90, v150, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      uint64_t v96 = v95;
      uint64_t v97 = v166;
      sub_1004C77E4(v96, v166);
      sub_1003F5FC8(v97, v53, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      uint64_t v98 = v151;
      uint64_t v99 = sub_1003F5FC8(v97, v151, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      uint64_t v100 = (os_log_s *)Logger.logObject.getter(v99);
      os_log_type_t v101 = static os_log_type_t.default.getter(v100);
      int v102 = v101;
      if (os_log_type_enabled(v100, v101))
      {
        uint64_t v103 = swift_slowAlloc(32LL, -1LL);
        uint64_t v144 = v82;
        uint64_t v104 = v103;
        uint64_t v143 = swift_slowAlloc(96LL, -1LL);
        uint64_t v172 = (void *)v143;
        *(_DWORD *)uint64_t v104 = v138;
        uint64_t v170 = sub_1003FFBB0(0xD000000000000013LL, v137, (uint64_t *)&v172);
        int v142 = v102;
        uint64_t v105 = v139;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v170, v139, v104 + 4, v104 + 12);
        *(_WORD *)(v104 + 1sub_10040A648(v1 + 2) = 2080;
        uint64_t v106 = sub_10040A2B0( &qword_1009B95C0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v107 = v165;
        uint64_t v108 = dispatch thunk of CustomStringConvertible.description.getter(v165, v106);
        unint64_t v110 = v109;
        uint64_t v170 = sub_1003FFBB0(v108, v109, (uint64_t *)&v172);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v170, v105, v104 + 14, v104 + 22);
        swift_bridgeObjectRelease(v110);
        sub_1003F6050((uint64_t)i, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        *(_WORD *)(v104 + 2sub_10040A648(v1 + 2) = 2080;
        uint64_t v111 = sub_10040A2B0( &qword_1009B90F0,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent,  (uint64_t)&unk_100718F00);
        uint64_t v112 = dispatch thunk of CustomStringConvertible.description.getter(v75, v111);
        unint64_t v114 = v113;
        uint64_t v170 = sub_1003FFBB0(v112, v113, (uint64_t *)&v172);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v170, v105, v104 + 24, v104 + 32);
        swift_bridgeObjectRelease(v114);
        uint64_t v53 = (uint64_t)i;
        sub_1003F6050(v98, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        _os_log_impl( (void *)&_mh_execute_header,  v100,  (os_log_type_t)v142,  "%s: removing expired key %s: %s",  (uint8_t *)v104,  0x20u);
        uint64_t v115 = v143;
        swift_arrayDestroy(v143, 3LL, v136);
        swift_slowDealloc(v115, -1LL, -1LL);
        uint64_t v116 = v104;
        uint64_t v82 = v144;
        swift_slowDealloc(v116, -1LL, -1LL);
      }

      else
      {

        sub_1003F6050(v53, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        sub_1003F6050(v98, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        uint64_t v107 = v165;
      }

      uint64_t v117 = v166 + *(int *)(v75 + 20);
      (*(void (**)(char *, uint64_t, uint64_t))(v164 + 16))(v160, v117, v107);
      if ((swift_isUniquelyReferenced_nonNull_native(v82) & 1) == 0) {
        uint64_t v82 = (void *)sub_1004C1F60(0, v82[2] + 1LL, 1, (unint64_t)v82);
      }
      uint64_t v118 = v149;
      unint64_t v120 = v82[2];
      unint64_t v119 = v82[3];
      uint64_t v75 = v155;
      if (v120 >= v119 >> 1) {
        uint64_t v82 = (void *)sub_1004C1F60(v119 > 1, v120 + 1, 1, (unint64_t)v82);
      }
      v82[2] = v120 + 1;
      uint64_t v121 = v82;
      uint64_t v122 = *(void *)(v164 + 72);
      (*(void (**)(unint64_t, char *, uint64_t))(v164 + 32))( (unint64_t)v82 + ((*(unsigned __int8 *)(v164 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v164 + 80))
      + v122 * v120,
        v160,
        v165);
      uint64_t v123 = *v118;
      swift_bridgeObjectRetain(*v118);
      unint64_t v125 = sub_100417CA0(v117, v124);
      char v127 = v126;
      swift_bridgeObjectRelease(v123);
      if ((v127 & 1) != 0)
      {
        char v128 = swift_isUniquelyReferenced_nonNull_native(*v118);
        uint64_t v129 = *v118;
        uint64_t v172 = (void *)*v118;
        *uint64_t v118 = 0x8000000000000000LL;
        if ((v128 & 1) == 0)
        {
          sub_1004C58BC();
          uint64_t v129 = (uint64_t)v172;
        }

        (*(void (**)(unint64_t, uint64_t))(v164 + 8))(*(void *)(v129 + 48) + v125 * v122, v165);
        uint64_t v130 = (uint64_t)v172;
        uint64_t v84 = v152;
        sub_1004C77E4(v172[7] + v125 * v156, v152);
        sub_1004C5280(v125, v130);
        uint64_t v131 = *v118;
        *uint64_t v118 = v130;
        swift_bridgeObjectRelease(v131);
        uint64_t v83 = 0LL;
      }

      else
      {
        uint64_t v83 = 1LL;
        uint64_t v84 = v152;
      }

      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v159 + 56))(v84, v83, 1LL, v75);
      sub_10040A274(v84, &qword_1009B8E08);
      uint64_t v85 = v153;
      uint64_t v86 = v166;
      sub_10043592C(v166, v153);
      sub_10040A274(v85, &qword_1009B8E08);
      uint64_t v87 = v154;
      sub_1004C5CDC(v117, v88, v154);
      sub_10040A274(v87, &qword_1009B90E8);
      sub_1004C5CDC(v117, v89, v87);
      sub_10040A274(v87, &qword_1009B90E8);
      sub_1003F6050(v86, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      uint64_t v82 = v121;
      unint64_t v81 = v157;
      int64_t v77 = v158;
      continue;
    }

    break;
  }

  BOOL v51 = __OFADD__(v77, 1LL);
  int64_t v91 = v77 + 1;
  if (v51) {
    goto LABEL_72;
  }
  if (v91 >= v141)
  {
LABEL_68:
    uint64_t v132 = v135;
    uint64_t result = swift_release(v163);
    *uint64_t v132 = v82;
    return result;
  }

  unint64_t v92 = *(void *)(v140 + 8 * v91);
  if (v92)
  {
LABEL_52:
    int64_t v157 = (v92 - 1) & v92;
    int64_t v158 = v91;
    unint64_t v90 = __clz(__rbit64(v92)) + (v91 << 6);
    goto LABEL_53;
  }

  int64_t v93 = v91 + 1;
  if (v91 + 1 >= v141) {
    goto LABEL_68;
  }
  unint64_t v92 = *(void *)(v140 + 8 * v93);
  if (v92) {
    goto LABEL_51;
  }
  int64_t v93 = v91 + 2;
  if (v91 + 2 >= v141) {
    goto LABEL_68;
  }
  unint64_t v92 = *(void *)(v140 + 8 * v93);
  if (v92) {
    goto LABEL_51;
  }
  int64_t v93 = v91 + 3;
  if (v91 + 3 >= v141) {
    goto LABEL_68;
  }
  unint64_t v92 = *(void *)(v140 + 8 * v93);
  if (v92)
  {
LABEL_51:
    int64_t v91 = v93;
    goto LABEL_52;
  }

  while (1)
  {
    int64_t v91 = v93 + 1;
    if (__OFADD__(v93, 1LL)) {
      break;
    }
    if (v91 >= v141) {
      goto LABEL_68;
    }
    unint64_t v92 = *(void *)(v140 + 8 * v91);
    ++v93;
    if (v92) {
      goto LABEL_52;
    }
  }

uint64_t sub_1004C18E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v7, v8);
  __n128 v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  Date.addingTimeInterval(_:)( v11,  *(double *)(*(void *)(a2 + 16)
              + OBJC_IVAR____TtC17identityservicesd31IDSGroupEncryptionConfiguration_mkmExpirationDuration));
  LOBYTE(asub_10040A648(v1 + 3) = static Date.< infix(_:_:)(v10, a3);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
  return a3 & 1;
}

uint64_t sub_1004C19A8(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v42 = a1;
  uint64_t v43 = a2;
  uint64_t v5 = *(void *)(type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL) - 8);
  __chkstk_darwin(v6, v7);
  uint64_t v38 = (uint64_t)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9, v10);
  __n128 v12 = (char *)&v37 - v11;
  uint64_t result = __chkstk_darwin(v13, v14);
  uint64_t v17 = (char *)&v37 - v16;
  int64_t v18 = 0LL;
  uint64_t v44 = a3;
  uint64_t v19 = *(void *)(a3 + 64);
  uint64_t v40 = a3 + 64;
  uint64_t v20 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v21 = -1LL;
  if (v20 < 64) {
    uint64_t v21 = ~(-1LL << v20);
  }
  uint64_t v39 = _swiftEmptyArrayStorage;
  int64_t v45 = _swiftEmptyArrayStorage;
  unint64_t v22 = v21 & v19;
  int64_t v41 = (unint64_t)(v20 + 63) >> 6;
  while (1)
  {
    if (v22)
    {
      unint64_t v23 = __clz(__rbit64(v22));
      v22 &= v22 - 1;
      unint64_t v24 = v23 | (v18 << 6);
      goto LABEL_19;
    }

    if (__OFADD__(v18++, 1LL))
    {
      __break(1u);
      goto LABEL_35;
    }

    if (v18 >= v41) {
      goto LABEL_32;
    }
    unint64_t v26 = *(void *)(v40 + 8 * v18);
    if (!v26) {
      break;
    }
LABEL_18:
    unint64_t v22 = (v26 - 1) & v26;
    unint64_t v24 = __clz(__rbit64(v26)) + (v18 << 6);
LABEL_19:
    uint64_t v28 = *(void *)(v5 + 72);
    sub_1003F5FC8( *(void *)(v44 + 56) + v28 * v24,  (uint64_t)v12,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    sub_1004C77E4((uint64_t)v12, (uint64_t)v17);
    char v29 = v42(v17);
    if (v3)
    {
      sub_1003F6050((uint64_t)v17, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      uint64_t v36 = v39;
      swift_release(v39);
LABEL_33:
      swift_release(v44);
      return (uint64_t)v36;
    }

    if ((v29 & 1) != 0)
    {
      sub_1004C77E4((uint64_t)v17, v38);
      __n128 v30 = v39;
      if ((swift_isUniquelyReferenced_nonNull_native(v39) & 1) == 0) {
        sub_1004C66C8(0, v30[2] + 1LL, 1);
      }
      __n128 v31 = v45;
      unint64_t v33 = v45[2];
      unint64_t v32 = v45[3];
      __n128 v34 = (void *)(v33 + 1);
      if (v33 >= v32 >> 1)
      {
        uint64_t v39 = (void *)(v33 + 1);
        unint64_t v37 = v33;
        sub_1004C66C8(v32 > 1, v33 + 1, 1);
        __n128 v34 = v39;
        unint64_t v33 = v37;
        __n128 v31 = v45;
      }

      v31[2] = v34;
      uint64_t v35 = *(unsigned __int8 *)(v5 + 80);
      uint64_t v39 = v31;
      uint64_t result = sub_1004C77E4(v38, (uint64_t)v31 + ((v35 + 32) & ~v35) + v33 * v28);
    }

    else
    {
      uint64_t result = sub_1003F6050((uint64_t)v17, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    }
  }

  int64_t v27 = v18 + 1;
  if (v18 + 1 >= v41) {
    goto LABEL_32;
  }
  unint64_t v26 = *(void *)(v40 + 8 * v27);
  if (v26) {
    goto LABEL_17;
  }
  int64_t v27 = v18 + 2;
  if (v18 + 2 >= v41) {
    goto LABEL_32;
  }
  unint64_t v26 = *(void *)(v40 + 8 * v27);
  if (v26) {
    goto LABEL_17;
  }
  int64_t v27 = v18 + 3;
  if (v18 + 3 >= v41) {
    goto LABEL_32;
  }
  unint64_t v26 = *(void *)(v40 + 8 * v27);
  if (v26) {
    goto LABEL_17;
  }
  int64_t v27 = v18 + 4;
  if (v18 + 4 >= v41)
  {
LABEL_32:
    uint64_t v36 = v39;
    goto LABEL_33;
  }

  unint64_t v26 = *(void *)(v40 + 8 * v27);
  if (v26)
  {
LABEL_17:
    int64_t v18 = v27;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v18 = v27 + 1;
    if (__OFADD__(v27, 1LL)) {
      break;
    }
    if (v18 >= v41) {
      goto LABEL_32;
    }
    unint64_t v26 = *(void *)(v40 + 8 * v18);
    ++v27;
    if (v26) {
      goto LABEL_18;
    }
  }

uint64_t sub_1004C1CD4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(a1);
  os_log_type_t v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v6 = swift_slowAlloc(32LL, -1LL);
    uint64_t v14 = v6;
    *(_DWORD *)uint64_t v5 = 136315138;
    uint64_t v13 = sub_1003FFBB0(0x29287465736572LL, 0xE700000000000000LL, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v5 + 4, v5 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%s: resetting...", v5, 0xCu);
    swift_arrayDestroy(v6, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1LL, -1LL);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v7 = *(void *)(v2 + OBJC_IVAR____TtC17identityservicesd35IDSGroupEncryptionKeyMaterialCache2_state);
  uint64_t v8 = (unint64_t *)(v7 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v7 + 16LL));
  __n128 v9 = (os_unfair_lock_s *)(v7 + ((*(unsigned int *)(*(void *)v7 + 48LL) + 3LL) & 0x1FFFFFFFCLL));
  swift_retain(v7);
  os_unfair_lock_lock(v9);
  unint64_t v10 = sub_1004BA3FC((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(*v8);
  *uint64_t v8 = v10;
  unint64_t v11 = sub_1004C6F38(_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(v8[1]);
  v8[1] = v11;
  swift_bridgeObjectRelease(v8[2]);
  uint64_t v8[2] = (unint64_t)&_swiftEmptySetSingleton;
  swift_bridgeObjectRelease(v8[3]);
  v8[3] = (unint64_t)&_swiftEmptySetSingleton;
  swift_bridgeObjectRelease(v8[4]);
  v8[4] = (unint64_t)&_swiftEmptySetSingleton;
  os_unfair_lock_unlock(v9);
  return swift_release(v7);
}

uint64_t sub_1004C1ECC()
{
  uint64_t v1 = (char *)v0 + OBJC_IVAR____TtC17identityservicesd35IDSGroupEncryptionKeyMaterialCache2_l;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  sub_10041C0A0((uint64_t)v0 + OBJC_IVAR____TtC17identityservicesd35IDSGroupEncryptionKeyMaterialCache2_delegate);
  swift_release(*(id *)((char *)v0 + OBJC_IVAR____TtC17identityservicesd35IDSGroupEncryptionKeyMaterialCache2_state));
  swift_bridgeObjectRelease(*(id *)((char *)v0
                                  + OBJC_IVAR____TtC17identityservicesd35IDSGroupEncryptionKeyMaterialCache2_currentMembers));
  return swift_deallocClassInstance(v0, *((unsigned int *)*v0 + 12), *((unsigned __int16 *)*v0 + 26));
}

uint64_t sub_1004C1F54()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 320LL))();
}

uint64_t sub_1004C1F60(char a1, int64_t a2, char a3, unint64_t a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
LABEL_29:
        uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Division by zero",  16LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14377LL,  0);
LABEL_31:
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v16 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v10 = sub_1003F5CB4(&qword_1009BBC98);
  uint64_t v12 = *(void *)(type metadata accessor for UUID(0LL, v11) - 8);
  uint64_t v13 = *(void *)(v12 + 72);
  uint64_t v14 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v15 = (v14 + 32) & ~v14;
  uint64_t v16 = (void *)swift_allocObject(v10, v15 + v13 * v9, v14 | 7);
  size_t v17 = j__malloc_size(v16);
  if (!v13) {
    goto LABEL_29;
  }
  if (v17 - v15 == 0x8000000000000000LL && v13 == -1)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Division results in an overflow",  31LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14384LL,  0);
    goto LABEL_31;
  }

  id v16[2] = v8;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v13);
LABEL_19:
  uint64_t v19 = type metadata accessor for UUID(0LL, a2);
  uint64_t v20 = *(void *)(v19 - 8);
  unint64_t v21 = (*(unsigned __int8 *)(v20 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  unint64_t v22 = (unint64_t)v16 + v21;
  if ((a1 & 1) != 0)
  {
    unint64_t v23 = a4 + v21;
    if ((unint64_t)v16 < a4 || v22 >= v23 + *(void *)(v20 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v16 + v21, v23, v8, v19);
    }

    else if (v16 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v16 + v21);
    }

    *(void *)(a4 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
  }

  else
  {
    sub_1004C7E90(0LL, v8, v22, a4);
  }

  swift_bridgeObjectRelease(a4);
  return (uint64_t)v16;
}

uint64_t sub_1004C2168(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID(0LL, a2);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *v3;
  uint64_t v13 = *(void *)(*v3 + 40LL);
  uint64_t v15 = sub_10040A2B0(&qword_1009B9300, v14, (uint64_t)&protocol conformance descriptor for UUID);
  swift_bridgeObjectRetain(v12);
  unint64_t v37 = a2;
  uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v13, v6, v15);
  uint64_t v17 = -1LL << *(_BYTE *)(v12 + 32);
  unint64_t v18 = v16 & ~v17;
  uint64_t v19 = v12;
  uint64_t v20 = v12 + 56;
  if (((*(void *)(v12 + 56 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v18) & 1) != 0)
  {
    unint64_t v33 = v3;
    uint64_t v34 = a1;
    uint64_t v35 = ~v17;
    uint64_t v36 = v7;
    uint64_t v21 = *(void *)(v7 + 72);
    unint64_t v22 = *(void (**)(void, void, void))(v7 + 16);
    while (1)
    {
      uint64_t v23 = v19;
      unint64_t v24 = v22;
      v22(v11, *(void *)(v19 + 48) + v21 * v18, v6);
      uint64_t v25 = sub_10040A2B0( &qword_1009B9808,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      char v26 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v37, v6, v25);
      int64_t v27 = *(void (**)(char *, uint64_t))(v36 + 8);
      v27(v11, v6);
      if ((v26 & 1) != 0) {
        break;
      }
      unint64_t v18 = (v18 + 1) & v35;
      uint64_t v19 = v23;
      unint64_t v22 = v24;
      if (((*(void *)(v20 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v18) & 1) == 0)
      {
        swift_bridgeObjectRelease(v23);
        uint64_t v3 = v33;
        a1 = v34;
        uint64_t v28 = v36;
        goto LABEL_7;
      }
    }

    swift_bridgeObjectRelease(v23);
    v27(v37, v6);
    v24(v34, *(void *)(*v33 + 48LL) + v21 * v18, v6);
    return 0LL;
  }

  else
  {
    swift_bridgeObjectRelease(v12);
    unint64_t v22 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v28 = v7;
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    __n128 v30 = v37;
    v22(v11, v37, v6);
    uint64_t v38 = *v3;
    void *v3 = 0x8000000000000000LL;
    sub_1004C2730((uint64_t)v11, v18, isUniquelyReferenced_nonNull_native);
    uint64_t v31 = *v3;
    void *v3 = v38;
    swift_bridgeObjectRelease(v31);
    (*(void (**)(uint64_t, char *, uint64_t))(v28 + 32))(a1, v30, v6);
    return 1LL;
  }

uint64_t sub_1004C23C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UUID(0LL, a2);
  uint64_t v43 = *(void *)(v5 - 8);
  __chkstk_darwin(v6, v7);
  __n128 v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *v3;
  if (*(void *)(*v3 + 24) > a1) {
    a1 = *(void *)(*v3 + 24);
  }
  sub_1003F5CB4(&qword_1009BBC90);
  uint64_t v11 = static _SetStorage.resize(original:capacity:move:)(v10, a1, 1LL);
  uint64_t v12 = v11;
  if (!*(void *)(v10 + 16)) {
    goto LABEL_39;
  }
  uint64_t v13 = 1LL << *(_BYTE *)(v10 + 32);
  uint64_t v14 = *(void *)(v10 + 56);
  uint64_t v42 = (void *)(v10 + 56);
  if (v13 < 64) {
    uint64_t v15 = ~(-1LL << v13);
  }
  else {
    uint64_t v15 = -1LL;
  }
  unint64_t v16 = v15 & v14;
  uint64_t v40 = v3;
  int64_t v41 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v17 = v11 + 56;
  uint64_t result = swift_retain(v10);
  int64_t v19 = 0LL;
  while (1)
  {
    if (v16)
    {
      unint64_t v21 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v22 = v21 | (v19 << 6);
      goto LABEL_26;
    }

    int64_t v23 = v19 + 1;
    if (__OFADD__(v19, 1LL))
    {
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      return result;
    }

    if (v23 >= v41) {
      goto LABEL_35;
    }
    unint64_t v24 = v42[v23];
    ++v19;
    if (!v24)
    {
      int64_t v19 = v23 + 1;
      if (v23 + 1 >= v41) {
        goto LABEL_35;
      }
      unint64_t v24 = v42[v19];
      if (!v24)
      {
        int64_t v19 = v23 + 2;
        if (v23 + 2 >= v41) {
          goto LABEL_35;
        }
        unint64_t v24 = v42[v19];
        if (!v24) {
          break;
        }
      }
    }

uint64_t sub_1004C2730(uint64_t a1, unint64_t a2, char a3)
{
  unint64_t v5 = a2;
  uint64_t v33 = a1;
  uint64_t v6 = type metadata accessor for UUID(0LL, a2);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v8, v9);
  uint64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v13 = *(void *)(*v3 + 16);
  unint64_t v14 = *(void *)(*v3 + 24);
  uint64_t v32 = v3;
  if (v14 > v13 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  uint64_t v15 = v13 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1004C23C4(v15, v10);
  }

  else
  {
    if (v14 > v13)
    {
      sub_1004C2934(v15, v10);
      goto LABEL_12;
    }

    sub_1004C2B58(v15, v10);
  }

  uint64_t v16 = *v3;
  uint64_t v17 = *(void *)(*v3 + 40);
  uint64_t v18 = sub_10040A2B0( &qword_1009B9300,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v19 = dispatch thunk of Hashable._rawHashValue(seed:)(v17, v6, v18);
  uint64_t v20 = -1LL << *(_BYTE *)(v16 + 32);
  unint64_t v5 = v19 & ~v20;
  if (((*(void *)(v16 + 56 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0)
  {
    uint64_t v21 = ~v20;
    uint64_t v22 = *(void *)(v7 + 72);
    int64_t v23 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v23(v12, *(void *)(v16 + 48) + v22 * v5, v6);
      uint64_t v24 = sub_10040A2B0( &qword_1009B9808,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      char v25 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v33, v6, v24);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
      if ((v25 & 1) != 0) {
        goto LABEL_15;
      }
      unint64_t v5 = (v5 + 1) & v21;
    }

    while (((*(void *)(v16 + 56 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0);
  }

void *sub_1004C2934(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = type metadata accessor for UUID(0LL, a2);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v6, v7);
  __n128 v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1003F5CB4(&qword_1009BBC90);
  uint64_t v10 = *v2;
  uint64_t v11 = static _SetStorage.copy(original:)(*v2);
  uint64_t v12 = v11;
  if (!*(void *)(v10 + 16))
  {
    uint64_t result = (void *)swift_release(v10);
LABEL_30:
    uint64_t *v3 = v12;
    return result;
  }

  uint64_t v29 = v3;
  uint64_t result = (void *)(v11 + 56);
  uint64_t v14 = v10 + 56;
  unint64_t v15 = (unint64_t)((1LL << *(_BYTE *)(v12 + 32)) + 63) >> 6;
  int64_t v17 = 0LL;
  *(void *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v10 + 16);
  uint64_t v18 = 1LL << *(_BYTE *)(v10 + 32);
  uint64_t v19 = -1LL;
  if (v18 < 64) {
    uint64_t v19 = ~(-1LL << v18);
  }
  unint64_t v20 = v19 & *(void *)(v10 + 56);
  int64_t v21 = (unint64_t)(v18 + 63) >> 6;
  while (1)
  {
    if (v20)
    {
      unint64_t v22 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      unint64_t v23 = v22 | (v17 << 6);
      goto LABEL_12;
    }

    int64_t v25 = v17 + 1;
    if (__OFADD__(v17, 1LL))
    {
      __break(1u);
      goto LABEL_32;
    }

    if (v25 >= v21) {
      goto LABEL_28;
    }
    unint64_t v26 = *(void *)(v14 + 8 * v25);
    ++v17;
    if (!v26)
    {
      int64_t v17 = v25 + 1;
      if (v25 + 1 >= v21) {
        goto LABEL_28;
      }
      unint64_t v26 = *(void *)(v14 + 8 * v17);
      if (!v26)
      {
        int64_t v17 = v25 + 2;
        if (v25 + 2 >= v21) {
          goto LABEL_28;
        }
        unint64_t v26 = *(void *)(v14 + 8 * v17);
        if (!v26) {
          break;
        }
      }
    }

uint64_t sub_1004C2B58(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UUID(0LL, a2);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = *v3;
  if (*(void *)(*v3 + 24) > a1) {
    a1 = *(void *)(*v3 + 24);
  }
  sub_1003F5CB4(&qword_1009BBC90);
  uint64_t v12 = static _SetStorage.resize(original:capacity:move:)(v11, a1, 0LL);
  uint64_t v13 = v12;
  if (!*(void *)(v11 + 16))
  {
    uint64_t result = swift_release(v11);
LABEL_37:
    uint64_t *v3 = v13;
    return result;
  }

  uint64_t v14 = 1LL << *(_BYTE *)(v11 + 32);
  uint64_t v15 = *(void *)(v11 + 56);
  uint64_t v38 = v3;
  uint64_t v39 = v11 + 56;
  if (v14 < 64) {
    uint64_t v16 = ~(-1LL << v14);
  }
  else {
    uint64_t v16 = -1LL;
  }
  unint64_t v17 = v16 & v15;
  int64_t v40 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v18 = v12 + 56;
  uint64_t result = swift_retain(v11);
  int64_t v20 = 0LL;
  while (1)
  {
    if (v17)
    {
      unint64_t v22 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v23 = v22 | (v20 << 6);
      goto LABEL_26;
    }

    int64_t v24 = v20 + 1;
    if (__OFADD__(v20, 1LL))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }

    if (v24 >= v40) {
      goto LABEL_35;
    }
    unint64_t v25 = *(void *)(v39 + 8 * v24);
    ++v20;
    if (!v25)
    {
      int64_t v20 = v24 + 1;
      if (v24 + 1 >= v40) {
        goto LABEL_35;
      }
      unint64_t v25 = *(void *)(v39 + 8 * v20);
      if (!v25)
      {
        int64_t v20 = v24 + 2;
        if (v24 + 2 >= v40) {
          goto LABEL_35;
        }
        unint64_t v25 = *(void *)(v39 + 8 * v20);
        if (!v25) {
          break;
        }
      }
    }

Swift::Int sub_1004C2E80(void *a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL) - 8);
  uint64_t v3 = (void *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0) {
    uint64_t v3 = (void *)sub_1004C6ED0(v3);
  }
  uint64_t v4 = v3[2];
  v6[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  Swift::Int result = sub_1004C3110(v6);
  *a1 = v3;
  return result;
}

void *sub_1004C2F00(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v3 = sub_1003F5CB4(&qword_1009BBC80);
  uint64_t v4 = *(void *)(type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL) - 8);
  uint64_t v5 = *(void *)(v4 + 72);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = (v6 + 32) & ~v6;
  __n128 v8 = (void *)swift_allocObject(v3, v7 + v5 * v1, v6 | 7);
  Swift::Int result = (void *)j__malloc_size(v8);
  if (v5)
  {
    if ((void *)((char *)result - v7) != (void *)0x8000000000000000LL || v5 != -1)
    {
      uint64_t v8[2] = v1;
      v8[3] = 2 * (((uint64_t)result - v7) / v5);
      uint64_t v11 = sub_1004C68D4(&v13, (uint64_t)v8 + v7, v1, a1);
      uint64_t v12 = v13;
      swift_bridgeObjectRetain(a1);
      sub_10041D3BC(v12);
      if (v11 == v1) {
        return v8;
      }
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

void *sub_1004C3018(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v3 = sub_1003F5CB4(&qword_1009BBC98);
  uint64_t v5 = *(void *)(type metadata accessor for UUID(0LL, v4) - 8);
  uint64_t v6 = *(void *)(v5 + 72);
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = (v7 + 32) & ~v7;
  uint64_t v9 = (void *)swift_allocObject(v3, v8 + v6 * v1, v7 | 7);
  Swift::Int result = (void *)j__malloc_size(v9);
  if (v6)
  {
    if ((void *)((char *)result - v8) != (void *)0x8000000000000000LL || v6 != -1)
    {
      _OWORD v9[2] = v1;
      v9[3] = 2 * (((uint64_t)result - v8) / v6);
      swift_bridgeObjectRetain(a1);
      uint64_t v12 = sub_1004C6B80(&v13, (uint64_t)v9 + v8, v1, a1);
      sub_10041D3BC(v13);
      if (v12 == v1) {
        return v9;
      }
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

Swift::Int sub_1004C3110(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v211 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  uint64_t v200 = *(void *)(v211 - 8);
  __chkstk_darwin(v4, v5);
  uint64_t v195 = (uint64_t)&v185 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7, v8);
  uint64_t v209 = (uint64_t)&v185 - v9;
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (char *)&v185 - v12;
  __chkstk_darwin(v14, v15);
  uint64_t v203 = (uint64_t)&v185 - v16;
  __chkstk_darwin(v17, v18);
  BOOL v204 = (char *)&v185 - v19;
  __chkstk_darwin(v20, v21);
  unint64_t v23 = (char *)&v185 - v22;
  __chkstk_darwin(v24, v25);
  uint64_t v27 = (char *)&v185 - v26;
  __chkstk_darwin(v28, v29);
  unint64_t v31 = (char *)&v185 - v30;
  __chkstk_darwin(v32, v33);
  BOOL v35 = (char *)&v185 - v34;
  __chkstk_darwin(v36, v37);
  uint64_t v197 = (uint64_t)&v185 - v38;
  __chkstk_darwin(v39, v40);
  unint64_t v188 = (char *)&v185 - v41;
  __chkstk_darwin(v42, v43);
  int64_t v45 = (char *)&v185 - v44;
  __chkstk_darwin(v46, v47);
  uint64_t v190 = (uint64_t)&v185 - v48;
  __chkstk_darwin(v49, v50);
  uint64_t v189 = (uint64_t)&v185 - v51;
  v212 = a1;
  Swift::Int v52 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v52);
  if (result >= v52)
  {
    if (v52 < 0) {
      goto LABEL_158;
    }
    if (v52) {
      return sub_1004C3EA8(0LL, v52, 1LL, v212);
    }
    return result;
  }

  if (v52 >= 0) {
    uint64_t v54 = v52;
  }
  else {
    uint64_t v54 = v52 + 1;
  }
  if (v52 < -1) {
    goto LABEL_166;
  }
  unint64_t v202 = v13;
  unint64_t v208 = v23;
  unint64_t v192 = v31;
  uint64_t v193 = v27;
  Swift::Int v191 = result;
  if (v52 < 2)
  {
    uint64_t v58 = (char *)_swiftEmptyArrayStorage;
    unint64_t v198 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v200 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v200 + 80));
    uint64_t v186 = _swiftEmptyArrayStorage;
    if (v52 != 1)
    {
      unint64_t v62 = _swiftEmptyArrayStorage[2];
LABEL_124:
      uint64_t v172 = v58;
      if (v62 >= 2)
      {
        uint64_t v178 = *v212;
        do
        {
          unint64_t v179 = v62 - 2;
          if (v62 < 2) {
            goto LABEL_153;
          }
          if (!v178) {
            goto LABEL_165;
          }
          uint64_t v180 = *(void *)&v172[16 * v179 + 32];
          uint64_t v181 = *(void *)&v172[16 * v62 + 24];
          sub_1004C41C4( v178 + *(void *)(v200 + 72) * v180,  v178 + *(void *)(v200 + 72) * *(void *)&v172[16 * v62 + 16],  v178 + *(void *)(v200 + 72) * v181,  v198);
          if (v2) {
            break;
          }
          if (v181 < v180) {
            goto LABEL_154;
          }
          if ((swift_isUniquelyReferenced_nonNull_native(v172) & 1) == 0) {
            uint64_t v172 = sub_1004C4A88((uint64_t)v172);
          }
          if (v179 >= *((void *)v172 + 2)) {
            goto LABEL_155;
          }
          uint64_t v182 = &v172[16 * v179 + 32];
          *(void *)uint64_t v182 = v180;
          *((void *)v182 + Hasher._combine(_:)(v0 & 1) = v181;
          unint64_t v183 = *((void *)v172 + 2);
          if (v62 > v183) {
            goto LABEL_156;
          }
          memmove(&v172[16 * v62 + 16], &v172[16 * v62 + 32], 16 * (v183 - v62));
          *((void *)v172 + sub_10040A648(v1 + 2) = v183 - 1;
          unint64_t v62 = v183 - 1;
        }

        while (v183 > 2);
      }

LABEL_135:
      swift_bridgeObjectRelease(v172);
      uint64_t v184 = v186;
      v186[2] = 0LL;
      return swift_bridgeObjectRelease(v184);
    }
  }

  else
  {
    uint64_t v55 = v54 >> 1;
    uint64_t v56 = static Array._allocateBufferUninitialized(minimumCapacity:)(v54 >> 1, v211);
    *(void *)(v56 + swift_unknownObjectWeakDestroy(v0 + 16) = v55;
    uint64_t v57 = *(unsigned __int8 *)(v200 + 80);
    uint64_t v186 = (void *)v56;
    unint64_t v198 = v56 + ((v57 + 32) & ~v57);
  }

  uint64_t v59 = v52;
  uint64_t v60 = 0LL;
  uint64_t v58 = (char *)_swiftEmptyArrayStorage;
  uint64_t v61 = v204;
  uint64_t v199 = v35;
  char v201 = v45;
  while (2)
  {
    uint64_t v196 = v60;
    if (v60 + 1 >= v59)
    {
      uint64_t v74 = v60 + 1;
      Swift::Int v75 = v191;
      uint64_t v76 = v60;
      goto LABEL_55;
    }

    uint64_t v207 = v59;
    uint64_t v63 = *v212;
    uint64_t v64 = *(void *)(v200 + 72);
    uint64_t v205 = v60 + 1;
    uint64_t v65 = v189;
    sub_1003F5FC8(v63 + v64 * (v60 + 1), v189, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    uint64_t v194 = v63;
    uint64_t v210 = v64;
    uint64_t v66 = v63 + v64 * v60;
    uint64_t v67 = v190;
    sub_1003F5FC8(v66, v190, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    uint64_t v68 = v67;
    uint64_t v69 = *(int *)(v211 + 40);
    unsigned int v70 = *(_DWORD *)(v65 + v69);
    unsigned int v71 = *(_DWORD *)(v68 + v69);
    uint64_t v72 = (uint64_t)v188;
    if (v70 >= v71)
    {
      uint64_t v77 = v68;
      sub_1003F5FC8(v65, (uint64_t)v45, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      sub_1003F5FC8(v77, v72, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      if (v70 == v71)
      {
        uint64_t v78 = v211;
        int v79 = *(_DWORD *)&v45[*(int *)(v211 + 44)];
        sub_1003F6050((uint64_t)v45, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        LODWORD(v78) = *(_DWORD *)(v72 + *(int *)(v78 + 44));
        sub_1003F6050(v72, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        BOOL v160 = v79 < (int)v78;
        Swift::Int v73 = v191;
        if (v160)
        {
          LODWORD(v206) = 1;
LABEL_25:
          uint64_t v68 = v190;
          uint64_t v65 = v189;
          goto LABEL_26;
        }
      }

      else
      {
        sub_1003F6050(v72, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        sub_1003F6050((uint64_t)v45, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        Swift::Int v73 = v191;
      }

      LODWORD(v206) = 0;
      goto LABEL_25;
    }

    LODWORD(v206) = 1;
    Swift::Int v73 = v191;
LABEL_26:
    sub_1003F6050(v68, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    sub_1003F6050(v65, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    uint64_t v74 = v196 + 2;
    uint64_t v59 = v207;
    if (v196 + 2 >= v207)
    {
      Swift::Int v75 = v73;
      goto LABEL_41;
    }

    uint64_t v187 = v58;
    v205 *= v210;
    uint64_t v80 = v194;
    uint64_t v81 = v196 + 2;
    uint64_t v82 = v210 * v74;
    while (1)
    {
      uint64_t v83 = v197;
      sub_1003F5FC8(v80 + v82, v197, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      sub_1003F5FC8(v80 + v205, (uint64_t)v35, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      uint64_t v84 = v83;
      uint64_t v85 = *(int *)(v211 + 40);
      unsigned int v86 = *(_DWORD *)(v83 + v85);
      unsigned int v87 = *(_DWORD *)&v35[v85];
      if (v86 < v87)
      {
        int v88 = 1;
        goto LABEL_36;
      }

      uint64_t v89 = (uint64_t)v192;
      sub_1003F5FC8(v84, (uint64_t)v192, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      uint64_t v90 = (uint64_t)v35;
      uint64_t v91 = (uint64_t)v193;
      sub_1003F5FC8(v90, (uint64_t)v193, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      if (v86 != v87)
      {
        sub_1003F6050(v91, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        sub_1003F6050(v89, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
LABEL_34:
        int v88 = 0;
        goto LABEL_35;
      }

      uint64_t v92 = v211;
      int v93 = *(_DWORD *)(v89 + *(int *)(v211 + 44));
      sub_1003F6050(v89, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      LODWORD(v9sub_10040A648(v1 + 2) = *(_DWORD *)(v91 + *(int *)(v92 + 44));
      sub_1003F6050(v91, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      int v88 = 1;
LABEL_35:
      BOOL v35 = v199;
      int64_t v45 = v201;
LABEL_36:
      sub_1003F6050((uint64_t)v35, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      sub_1003F6050(v197, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      if ((_DWORD)v206 != v88) {
        break;
      }
      v80 += v210;
      ++v81;
      uint64_t v59 = v207;
      if (v207 == v81)
      {
        uint64_t v74 = v207;
        uint64_t v58 = v187;
        Swift::Int v75 = v191;
        goto LABEL_41;
      }
    }

    uint64_t v58 = v187;
    Swift::Int v75 = v191;
    uint64_t v74 = v81;
    uint64_t v59 = v207;
LABEL_41:
    uint64_t v76 = v196;
    uint64_t v61 = v204;
    if ((_DWORD)v206)
    {
      if (v74 < v196) {
        goto LABEL_159;
      }
      if (v196 < v74)
      {
        uint64_t v187 = v58;
        uint64_t v94 = 0LL;
        uint64_t v95 = v210 * (v74 - 1);
        uint64_t v96 = v74 * v210;
        uint64_t v97 = v196;
        uint64_t v98 = v196 * v210;
        do
        {
          if (v97 != v74 + v94 - 1)
          {
            uint64_t v101 = v74;
            uint64_t v102 = v194;
            if (!v194) {
              goto LABEL_164;
            }
            unint64_t v103 = v194 + v98;
            uint64_t v206 = v194 + v95;
            sub_1004C77E4(v194 + v98, v195);
            if (v98 < v95 || v103 >= v102 + v96)
            {
              uint64_t v99 = v102 + v98;
              uint64_t v100 = v206;
              swift_arrayInitWithTakeFrontToBack(v99, v206, 1LL, v211);
            }

            else
            {
              uint64_t v100 = v206;
              if (v98 != v95) {
                swift_arrayInitWithTakeBackToFront(v103);
              }
            }

            sub_1004C77E4(v195, v100);
            int64_t v45 = v201;
            uint64_t v74 = v101;
          }

          ++v97;
          --v94;
          v95 -= v210;
          v96 -= v210;
          v98 += v210;
        }

        while (v97 < v74 + v94);
        uint64_t v61 = v204;
        uint64_t v58 = v187;
        BOOL v35 = v199;
        Swift::Int v75 = v191;
        uint64_t v76 = v196;
        uint64_t v59 = v207;
      }
    }

uint64_t sub_1004C3EA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v53 = a4;
  uint64_t v44 = a1;
  uint64_t v52 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  __chkstk_darwin(v6, v7);
  uint64_t v50 = (uint64_t)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9, v10);
  uint64_t v48 = (uint64_t)&v42 - v11;
  __chkstk_darwin(v12, v13);
  uint64_t v47 = (uint64_t)&v42 - v14;
  __chkstk_darwin(v15, v16);
  __n128 v18 = (char *)&v42 - v17;
  uint64_t result = __chkstk_darwin(v19, v20);
  __n128 v24 = (char *)&v42 - v23;
  uint64_t v49 = a3;
  uint64_t v43 = a2;
  if (a3 != a2)
  {
    uint64_t v25 = *(void *)(v22 + 72);
    uint64_t v55 = v25 * (v49 - 1);
    uint64_t v54 = v25 * v49;
    int64_t v45 = (char *)&v42 - v23;
    uint64_t v46 = v25;
LABEL_7:
    uint64_t v26 = 0LL;
    uint64_t v27 = v44;
    while (1)
    {
      uint64_t v28 = *v53;
      uint64_t v51 = v54 + v26;
      sub_1003F5FC8(v54 + v26 + v28, (uint64_t)v24, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      sub_1003F5FC8(v55 + v26 + v28, (uint64_t)v18, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      uint64_t v29 = *(int *)(v52 + 40);
      unsigned int v30 = *(_DWORD *)&v24[v29];
      unsigned int v31 = *(_DWORD *)&v18[v29];
      if (v30 >= v31)
      {
        uint64_t v32 = v47;
        sub_1003F5FC8((uint64_t)v24, v47, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        __n128 v33 = v18;
        uint64_t v34 = (uint64_t)v18;
        uint64_t v35 = v32;
        uint64_t v36 = v48;
        sub_1003F5FC8(v34, v48, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        if (v30 != v31)
        {
          sub_1003F6050(v36, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
          sub_1003F6050(v35, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
          __n128 v18 = v33;
          __n128 v24 = v45;
          uint64_t v25 = v46;
LABEL_5:
          sub_1003F6050((uint64_t)v18, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
          uint64_t result = sub_1003F6050((uint64_t)v24, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
LABEL_6:
          v55 += v25;
          v54 += v25;
          if (++v49 == v43) {
            return result;
          }
          goto LABEL_7;
        }

        uint64_t v37 = v52;
        int v38 = *(_DWORD *)(v35 + *(int *)(v52 + 44));
        sub_1003F6050(v35, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        LODWORD(v37) = *(_DWORD *)(v36 + *(int *)(v37 + 44));
        sub_1003F6050(v36, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        __n128 v18 = v33;
        __n128 v24 = v45;
        uint64_t v25 = v46;
      }

      sub_1003F6050((uint64_t)v18, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      uint64_t result = sub_1003F6050((uint64_t)v24, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      uint64_t v39 = *v53;
      if (!*v53) {
        break;
      }
      uint64_t v40 = v39 + v54 + v26;
      uint64_t v41 = v39 + v55 + v26;
      sub_1004C77E4(v40, v50);
      swift_arrayInitWithTakeFrontToBack(v40, v41, 1LL, v52);
      uint64_t result = sub_1004C77E4(v50, v41);
      v26 -= v25;
      if (v49 == ++v27) {
        goto LABEL_6;
      }
    }

    __break(1u);
  }

  return result;
}

uint64_t sub_1004C41C4(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v90 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  __chkstk_darwin(v10, v11);
  __chkstk_darwin(v12, v13);
  uint64_t v85 = (uint64_t)&v83 - v14;
  __chkstk_darwin(v15, v16);
  __chkstk_darwin(v17, v18);
  __n128 v20 = (char *)&v83 - v19;
  __chkstk_darwin(v21, v22);
  __chkstk_darwin(v23, v24);
  uint64_t v26 = (char *)&v83 - v25;
  __chkstk_darwin(v27, v28);
  unsigned int v30 = (char *)&v83 - v29;
  uint64_t v33 = __chkstk_darwin(v31, v32);
  uint64_t v37 = (char *)&v83 - v36;
  uint64_t v87 = *(void *)(v38 + 72);
  if (!v87)
  {
    __break(1u);
LABEL_76:
    __break(1u);
LABEL_77:
    __break(1u);
    goto LABEL_78;
  }

  if (a2 - a1 == 0x8000000000000000LL && v87 == -1) {
    goto LABEL_76;
  }
  int64_t v39 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000LL && v87 == -1) {
    goto LABEL_77;
  }
  uint64_t v40 = (uint64_t)(a2 - a1) / v87;
  unint64_t v93 = a1;
  unint64_t v92 = a4;
  uint64_t v41 = v39 / v87;
  uint64_t v83 = v5;
  if (v40 >= v39 / v87)
  {
    if (v41 < 0) {
      goto LABEL_78;
    }
    uint64_t v43 = v87;
    uint64_t v44 = v41 * v87;
    uint64_t v84 = v34;
    uint64_t v88 = v35;
    unint64_t v89 = (unint64_t)v20;
    if (a4 < a2 || a2 + v44 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, a2, v41, v90);
    }

    else if (a4 != a2)
    {
      swift_arrayInitWithTakeBackToFront(a4);
    }

    unint64_t v59 = a4 + v44;
    unint64_t v91 = a4 + v44;
    unint64_t v93 = a2;
    if (v44 < 1 || a1 >= a2)
    {
LABEL_74:
      sub_1004C497C(&v93, &v92, (uint64_t *)&v91);
      return 1LL;
    }

    uint64_t v61 = -v43;
    unint64_t v86 = a1;
    while (1)
    {
      unint64_t v62 = v89;
      sub_1003F5FC8(v59 + v61, v89, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      unint64_t v63 = a2 + v61;
      uint64_t v64 = v88;
      sub_1003F5FC8(a2 + v61, v88, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      uint64_t v65 = v64;
      uint64_t v66 = *(int *)(v90 + 40);
      unsigned int v67 = *(_DWORD *)(v62 + v66);
      unsigned int v68 = *(_DWORD *)(v65 + v66);
      if (v67 >= v68) {
        break;
      }
      char v69 = 1;
LABEL_59:
      unint64_t v78 = a3 + v61;
      sub_1003F6050(v65, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      sub_1003F6050(v89, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      if ((v69 & 1) != 0)
      {
        if (a3 < a2 || v78 >= a2)
        {
          swift_arrayInitWithTakeFrontToBack(a3 + v61, a2 + v61, 1LL, v90);
          unint64_t v79 = v86;
        }

        else
        {
          unint64_t v79 = v86;
          if (a3 != a2) {
            swift_arrayInitWithTakeBackToFront(a3 + v61);
          }
        }

        v93 += v61;
      }

      else
      {
        unint64_t v80 = v91;
        unint64_t v81 = v91 + v61;
        v91 += v61;
        if (a3 < v80 || v78 >= v80)
        {
          swift_arrayInitWithTakeFrontToBack(a3 + v61, v81, 1LL, v90);
          unint64_t v63 = a2;
          unint64_t v79 = v86;
        }

        else
        {
          unint64_t v79 = v86;
          if (a3 != v80) {
            swift_arrayInitWithTakeBackToFront(a3 + v61);
          }
          unint64_t v63 = a2;
        }
      }

      unint64_t v59 = v91;
      if (v91 > a4)
      {
        a2 = v63;
        a3 += v61;
        if (v63 > v79) {
          continue;
        }
      }

      goto LABEL_74;
    }

    uint64_t v87 = a3;
    uint64_t v70 = v65;
    uint64_t v71 = v62;
    uint64_t v72 = v85;
    sub_1003F5FC8(v71, v85, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    uint64_t v73 = v70;
    uint64_t v74 = v72;
    uint64_t v75 = v84;
    sub_1003F5FC8(v73, v84, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    if (v67 == v68)
    {
      uint64_t v76 = v90;
      int v77 = *(_DWORD *)(v74 + *(int *)(v90 + 44));
      sub_1003F6050(v74, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      LODWORD(v76) = *(_DWORD *)(v75 + *(int *)(v76 + 44));
      sub_1003F6050(v75, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      if (v77 < (int)v76)
      {
        char v69 = 1;
LABEL_58:
        a3 = v87;
        uint64_t v65 = v88;
        goto LABEL_59;
      }
    }

    else
    {
      sub_1003F6050(v75, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      sub_1003F6050(v74, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    }

    char v69 = 0;
    goto LABEL_58;
  }

  if ((v40 & 0x8000000000000000LL) == 0)
  {
    uint64_t v42 = v40 * v87;
    uint64_t v88 = v33;
    if (a4 < a1 || a1 + v42 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, a1, v40, v90);
    }

    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront(a4);
    }

    unint64_t v89 = a4 + v42;
    unint64_t v91 = a4 + v42;
    BOOL v45 = v42 < 1 || a2 >= a3;
    uint64_t v46 = (uint64_t)v26;
    uint64_t v47 = v87;
    if (!v45)
    {
      while (1)
      {
        sub_1003F5FC8(a2, (uint64_t)v37, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        sub_1003F5FC8(a4, (uint64_t)v30, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        uint64_t v48 = *(int *)(v90 + 40);
        unsigned int v49 = *(_DWORD *)&v37[v48];
        unsigned int v50 = *(_DWORD *)&v30[v48];
        if (v49 >= v50)
        {
          sub_1003F5FC8((uint64_t)v37, v46, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
          uint64_t v54 = v46;
          uint64_t v55 = v88;
          sub_1003F5FC8((uint64_t)v30, v88, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
          if (v49 != v50)
          {
            sub_1003F6050(v55, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
            sub_1003F6050(v54, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
            uint64_t v46 = v54;
            uint64_t v47 = v87;
LABEL_35:
            sub_1003F6050((uint64_t)v30, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
            sub_1003F6050((uint64_t)v37, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
            unint64_t v51 = v93;
            unint64_t v58 = v92 + v47;
            if (v93 < v92 || v93 >= v58)
            {
              swift_arrayInitWithTakeFrontToBack(v93, v92, 1LL, v90);
            }

            else if (v93 != v92)
            {
              swift_arrayInitWithTakeBackToFront(v93);
            }

            unint64_t v92 = v58;
            unint64_t v52 = a2;
            goto LABEL_42;
          }

          uint64_t v56 = v90;
          int v57 = *(_DWORD *)(v54 + *(int *)(v90 + 44));
          sub_1003F6050(v54, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
          LODWORD(v56) = *(_DWORD *)(v55 + *(int *)(v56 + 44));
          sub_1003F6050(v55, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
          uint64_t v46 = v54;
          uint64_t v47 = v87;
        }

        sub_1003F6050((uint64_t)v30, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        sub_1003F6050((uint64_t)v37, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        unint64_t v51 = v93;
        unint64_t v52 = a2 + v47;
        if (v93 < a2 || v93 >= v52)
        {
          swift_arrayInitWithTakeFrontToBack(v93, a2, 1LL, v90);
        }

        else if (v93 == a2)
        {
          unint64_t v51 = a2;
        }

        else
        {
          swift_arrayInitWithTakeBackToFront(v93);
        }

char *sub_1004C4884(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_1003F5CB4(&qword_1009BBC78);
    __n128 v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + sub_10040A648(v1 + 2) = v8;
    *((void *)v11 + sub_10040A648(v1 + 3) = 2 * (v13 >> 4);
  }

  else
  {
    __n128 v11 = (char *)&_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v11 + 32;
  __n128 v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8]) {
      memmove(v14, v15, 16 * v8);
    }
    *((void *)a4 + sub_10040A648(v1 + 2) = 0LL;
  }

  else
  {
    memcpy(v14, v15, 16 * v8);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

uint64_t sub_1004C497C(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  uint64_t v5 = *a3;
  uint64_t result = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  uint64_t v7 = *(void *)(*(void *)(result - 8) + 72LL);
  if (!v7)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v8 = v5 - v4;
  if (v5 - v4 == 0x8000000000000000LL && v7 == -1) {
    goto LABEL_14;
  }
  uint64_t v10 = v8 / v7;
  if (v8 / v7 < 0)
  {
LABEL_15:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
    __break(1u);
    return result;
  }

  if (v3 < v4 || v3 >= v4 + v10 * v7) {
    return swift_arrayInitWithTakeFrontToBack(v3, v4, v10, result);
  }
  if (v3 != v4) {
    return swift_arrayInitWithTakeBackToFront(v3);
  }
  return result;
}

char *sub_1004C4A88(uint64_t a1)
{
  return sub_1004C4884(0LL, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1004C4A9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = v2;
  uint64_t v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  unint64_t v8 = sub_100417CA0(a1, v7);
  LOBYTE(aHasher._combine(_:)(v0 & 1) = v9;
  swift_bridgeObjectRelease(v6);
  if ((a1 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v12 = *v3;
    uint64_t v21 = *v3;
    uint64_t *v3 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_1004C58BC();
      uint64_t v12 = v21;
    }

    uint64_t v13 = *(void *)(v12 + 48);
    uint64_t v14 = type metadata accessor for UUID(0LL, v11);
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v14 - 8) + 8LL))( v13 + *(void *)(*(void *)(v14 - 8) + 72LL) * v8,  v14);
    uint64_t v15 = *(void *)(v12 + 56);
    uint64_t v16 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
    uint64_t v17 = *(void *)(v16 - 8);
    sub_1004C77E4(v15 + *(void *)(v17 + 72) * v8, a2);
    sub_1004C5280(v8, v12);
    uint64_t v18 = *v3;
    uint64_t *v3 = v12;
    swift_bridgeObjectRelease(v18);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v17 + 56))(a2, 0LL, 1LL, v16);
  }

  else
  {
    uint64_t v20 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56LL))( a2,  1LL,  1LL,  v20);
  }

uint64_t sub_1004C4BD0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = v2;
  uint64_t v55 = *(void *)(type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL) - 8);
  __chkstk_darwin(v6, v7);
  uint64_t v57 = (uint64_t)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for UUID(0LL, v9);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_1003F5CB4(&qword_1009BBC88);
  int v56 = a2;
  uint64_t v17 = a2;
  uint64_t v18 = v16;
  uint64_t v19 = static _DictionaryStorage.resize(original:capacity:move:)(v16, a1, v17);
  uint64_t v20 = v19;
  if (!*(void *)(v18 + 16)) {
    goto LABEL_43;
  }
  uint64_t v21 = 1LL << *(_BYTE *)(v18 + 32);
  uint64_t v22 = *(void *)(v18 + 64);
  uint64_t v53 = (void *)(v18 + 64);
  if (v21 < 64) {
    uint64_t v23 = ~(-1LL << v21);
  }
  else {
    uint64_t v23 = -1LL;
  }
  unint64_t v24 = v23 & v22;
  unint64_t v51 = v2;
  int64_t v52 = (unint64_t)(v21 + 63) >> 6;
  uint64_t v25 = v19 + 64;
  uint64_t result = swift_retain(v18);
  int64_t v27 = 0LL;
  for (i = v18; ; uint64_t v18 = i)
  {
    if (v24)
    {
      unint64_t v29 = __clz(__rbit64(v24));
      v24 &= v24 - 1;
      unint64_t v30 = v29 | (v27 << 6);
      goto LABEL_24;
    }

    int64_t v31 = v27 + 1;
    if (__OFADD__(v27, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v31 >= v52) {
      break;
    }
    __n128 v32 = v53;
    unint64_t v33 = v53[v31];
    ++v27;
    if (!v33)
    {
      int64_t v27 = v31 + 1;
      if (v31 + 1 >= v52) {
        goto LABEL_36;
      }
      unint64_t v33 = v53[v27];
      if (!v33)
      {
        int64_t v34 = v31 + 2;
        if (v34 >= v52)
        {
LABEL_36:
          swift_release(v18);
          unint64_t v3 = v51;
          if ((v56 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v33 = v53[v34];
        if (!v33)
        {
          while (1)
          {
            int64_t v27 = v34 + 1;
            if (__OFADD__(v34, 1LL)) {
              goto LABEL_45;
            }
            if (v27 >= v52) {
              goto LABEL_36;
            }
            unint64_t v33 = v53[v27];
            ++v34;
            if (v33) {
              goto LABEL_23;
            }
          }
        }

        int64_t v27 = v34;
      }
    }

uint64_t sub_1004C4FCC(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_1003F5CB4(&qword_1009BBCA0);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v9 = 0LL;
    uint64_t v10 = (uint64_t *)(v5 + 64);
    uint64_t v11 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v33 = -1LL << v11;
    uint64_t v34 = v11;
    if (v11 < 64) {
      uint64_t v12 = ~(-1LL << v11);
    }
    else {
      uint64_t v12 = -1LL;
    }
    unint64_t v13 = v12 & *(void *)(v5 + 64);
    int64_t v35 = (unint64_t)(v11 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v13)
      {
        unint64_t v20 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        unint64_t v21 = v20 | (v9 << 6);
      }

      else
      {
        int64_t v22 = v9 + 1;
        if (__OFADD__(v9, 1LL))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }

        if (v22 >= v35) {
          goto LABEL_36;
        }
        unint64_t v23 = v10[v22];
        ++v9;
        if (!v23)
        {
          int64_t v9 = v22 + 1;
          if (v22 + 1 >= v35) {
            goto LABEL_36;
          }
          unint64_t v23 = v10[v9];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v35)
            {
LABEL_36:
              if ((a2 & 1) != 0)
              {
                if (v34 >= 64) {
                  bzero((void *)(v5 + 64), 8 * v35);
                }
                else {
                  *uint64_t v10 = v33;
                }
                *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
              }

              break;
            }

            unint64_t v23 = v10[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v9 = v24 + 1;
                if (__OFADD__(v24, 1LL)) {
                  goto LABEL_44;
                }
                if (v9 >= v35) {
                  goto LABEL_36;
                }
                unint64_t v23 = v10[v9];
                ++v24;
                if (v23) {
                  goto LABEL_33;
                }
              }
            }

            int64_t v9 = v24;
          }
        }

unint64_t sub_1004C5280(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL, a2);
  uint64_t v46 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v5, v6);
  int64_t v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = a2 + 64;
  uint64_t v11 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v12 = (a1 + 1) & ~v11;
  if (((1LL << v12) & *(void *)(a2 + 64 + 8 * (v12 >> 6))) != 0)
  {
    uint64_t v13 = ~v11;
    unint64_t result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v11);
    if ((*(void *)(v10 + 8 * (v12 >> 6)) & (1LL << v12)) != 0)
    {
      unint64_t v45 = (result + 1) & v13;
      uint64_t v14 = *(void *)(v46 + 72);
      unint64_t v44 = *(void (**)(char *, unint64_t, uint64_t))(v46 + 16);
      uint64_t v15 = v13;
      do
      {
        uint64_t v16 = v10;
        uint64_t v17 = v14;
        int64_t v18 = v14 * v12;
        uint64_t v19 = v15;
        v44(v9, *(void *)(a2 + 48) + v14 * v12, v4);
        uint64_t v20 = *(void *)(a2 + 40);
        uint64_t v21 = sub_10040A2B0( &qword_1009B9300,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v22 = dispatch thunk of Hashable._rawHashValue(seed:)(v20, v4, v21);
        unint64_t result = (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v9, v4);
        uint64_t v15 = v19;
        unint64_t v23 = v22 & v19;
        if (a1 >= (uint64_t)v45)
        {
          if (v23 >= v45 && a1 >= (uint64_t)v23)
          {
LABEL_16:
            uint64_t v26 = *(void *)(a2 + 48);
            unint64_t v27 = v26 + v17 * a1;
            uint64_t v28 = v26 + v18;
            uint64_t v10 = v16;
            if (v17 * a1 < v18 || v27 >= v28 + v17)
            {
              swift_arrayInitWithTakeFrontToBack(v27, v28, 1LL, v4);
            }

            else if (v17 * a1 != v18)
            {
              swift_arrayInitWithTakeBackToFront(v27);
            }

            uint64_t v29 = *(void *)(a2 + 56);
            uint64_t v30 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
            uint64_t v31 = *(void *)(*(void *)(v30 - 8) + 72LL);
            int64_t v32 = v31 * a1;
            unint64_t result = v29 + v31 * a1;
            int64_t v33 = v31 * v12;
            uint64_t v34 = v29 + v31 * v12;
            unint64_t v35 = v34 + v31;
            if (v32 < v33 || result >= v35)
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack(result, v34, 1LL, v30);
              a1 = v12;
              uint64_t v15 = v19;
            }

            else
            {
              a1 = v12;
              uint64_t v15 = v19;
              if (v32 != v33)
              {
                unint64_t result = swift_arrayInitWithTakeBackToFront(result);
                uint64_t v15 = v19;
                a1 = v12;
              }
            }

            goto LABEL_5;
          }
        }

        else if (v23 >= v45 || a1 >= (uint64_t)v23)
        {
          goto LABEL_16;
        }

        uint64_t v10 = v16;
LABEL_5:
        unint64_t v12 = (v12 + 1) & v15;
        uint64_t v14 = v17;
      }

      while (((*(void *)(v10 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) != 0);
    }

    uint64_t v37 = (uint64_t *)(v10 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v38 = *v37;
    uint64_t v39 = (-1LL << a1) - 1;
  }

  else
  {
    uint64_t v37 = (uint64_t *)(v10 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v39 = *v37;
    uint64_t v38 = (-1LL << a1) - 1;
  }

  *uint64_t v37 = v39 & v38;
  uint64_t v40 = *(void *)(a2 + 16);
  BOOL v41 = __OFSUB__(v40, 1LL);
  uint64_t v42 = v40 - 1;
  if (v41)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = v42;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

uint64_t sub_1004C5554(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID(0LL, a2);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = (void *)*v3;
  unint64_t v17 = sub_100417CA0(a2, v15);
  uint64_t v18 = v14[2];
  BOOL v19 = (v16 & 1) == 0;
  uint64_t v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
  }

  else
  {
    char v21 = v16;
    uint64_t v22 = v14[3];
    if (v22 >= v20 && (a3 & 1) != 0)
    {
LABEL_7:
      unint64_t v23 = *v4;
      if ((v21 & 1) != 0)
      {
LABEL_8:
        uint64_t v24 = v23[7];
        uint64_t v25 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
        return sub_1004C77A0(a1, v24 + *(void *)(*(void *)(v25 - 8) + 72LL) * v17);
      }

      goto LABEL_11;
    }

    if (v22 >= v20 && (a3 & 1) == 0)
    {
      sub_1004C58BC();
      goto LABEL_7;
    }

    sub_1004C4BD0(v20, a3 & 1);
    unint64_t v28 = sub_100417CA0(a2, v27);
    if ((v21 & 1) == (v29 & 1))
    {
      unint64_t v17 = v28;
      unint64_t v23 = *v4;
      if ((v21 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v13, a2, v8);
      return sub_1004C580C(v17, (uint64_t)v13, a1, v23);
    }
  }

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
  __break(1u);
  return result;
}

void sub_1004C56D4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_100417DF8(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= v13 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_1004C5B3C();
LABEL_7:
    char v16 = (void *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      swift_bridgeObjectRelease(*(void *)(v17 + 8 * v10));
      *(void *)(v17 + 8 * v10) = a1;
      return;
    }

uint64_t sub_1004C580C(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID(0LL, a2);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))( v8 + *(void *)(*(void *)(v9 - 8) + 72LL) * a1,  a2,  v9);
  uint64_t v10 = a4[7];
  uint64_t v11 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  uint64_t result = sub_1004C77E4(a3, v10 + *(void *)(*(void *)(v11 - 8) + 72LL) * a1);
  uint64_t v13 = a4[2];
  BOOL v14 = __OFADD__(v13, 1LL);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a4[2] = v15;
  }
  return result;
}

void *sub_1004C58BC()
{
  uint64_t v31 = *(void *)(type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL) - 8);
  __chkstk_darwin(v1, v2);
  uint64_t v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for UUID(0LL, v5);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1003F5CB4(&qword_1009BBC88);
  unint64_t v28 = v0;
  uint64_t v12 = *v0;
  uint64_t v13 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v14 = v13;
  if (!*(void *)(v12 + 16))
  {
LABEL_23:
    uint64_t result = (void *)swift_release(v12);
    *unint64_t v28 = v14;
    return result;
  }

  uint64_t result = (void *)(v13 + 64);
  unint64_t v16 = (unint64_t)((1LL << *(_BYTE *)(v14 + 32)) + 63) >> 6;
  int64_t v17 = 0LL;
  *(void *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v12 + 16);
  uint64_t v18 = 1LL << *(_BYTE *)(v12 + 32);
  uint64_t v19 = -1LL;
  if (v18 < 64) {
    uint64_t v19 = ~(-1LL << v18);
  }
  unint64_t v20 = v19 & *(void *)(v12 + 64);
  uint64_t v29 = v12 + 64;
  int64_t v30 = (unint64_t)(v18 + 63) >> 6;
  while (1)
  {
    if (v20)
    {
      unint64_t v21 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      unint64_t v22 = v21 | (v17 << 6);
      goto LABEL_9;
    }

    int64_t v25 = v17 + 1;
    if (__OFADD__(v17, 1LL))
    {
      __break(1u);
      goto LABEL_25;
    }

    if (v25 >= v30) {
      goto LABEL_23;
    }
    unint64_t v26 = *(void *)(v29 + 8 * v25);
    ++v17;
    if (!v26)
    {
      int64_t v17 = v25 + 1;
      if (v25 + 1 >= v30) {
        goto LABEL_23;
      }
      unint64_t v26 = *(void *)(v29 + 8 * v17);
      if (!v26) {
        break;
      }
    }

void sub_1004C5B3C()
{
  __n128 v1 = v0;
  sub_1003F5CB4(&qword_1009BBCA0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    uint64_t *v1 = v4;
    return;
  }

  uint64_t v5 = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }

uint64_t sub_1004C5CDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v7 = type metadata accessor for UUID(0LL, a2);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v9, v10);
  unint64_t v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = *v4;
  uint64_t v14 = *(void *)(*v4 + 40);
  uint64_t v16 = sub_10040A2B0(&qword_1009B9300, v15, (uint64_t)&protocol conformance descriptor for UUID);
  swift_bridgeObjectRetain(v13);
  uint64_t v38 = a1;
  uint64_t v17 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v7, v16);
  uint64_t v18 = -1LL << *(_BYTE *)(v13 + 32);
  unint64_t v19 = v17 & ~v18;
  if (((*(void *)(v13 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v19) & 1) != 0)
  {
    unint64_t v36 = v4;
    uint64_t v37 = a3;
    uint64_t v20 = ~v18;
    uint64_t v21 = *(void *)(v8 + 72);
    uint64_t v39 = v8;
    unint64_t v22 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
    while (1)
    {
      unint64_t v23 = v21 * v19;
      v22(v12, *(void *)(v13 + 48) + v21 * v19, v7);
      uint64_t v24 = sub_10040A2B0( &qword_1009B9808,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      char v25 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v38, v7, v24);
      (*(void (**)(char *, uint64_t))(v39 + 8))(v12, v7);
      if ((v25 & 1) != 0) {
        break;
      }
      unint64_t v19 = (v19 + 1) & v20;
      if (((*(void *)(v13 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v19) & 1) == 0)
      {
        swift_bridgeObjectRelease(v13);
        uint64_t v26 = 1LL;
        a3 = v37;
        uint64_t v8 = v39;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(a3, v26, 1LL, v7);
      }
    }

    swift_bridgeObjectRelease(v13);
    int64_t v27 = v36;
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v36);
    uint64_t v30 = *v27;
    uint64_t v40 = *v27;
    *int64_t v27 = 0x8000000000000000LL;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1004C2934(isUniquelyReferenced_nonNull_native, v29);
      uint64_t v30 = v40;
    }

    unint64_t v31 = *(void *)(v30 + 48) + v23;
    uint64_t v8 = v39;
    a3 = v37;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v39 + 32))(v37, v31, v7);
    sub_1004C5F18(v19, v32);
    uint64_t v33 = *v27;
    *int64_t v27 = v40;
    swift_bridgeObjectRelease(v33);
    uint64_t v26 = 0LL;
  }

  else
  {
    swift_bridgeObjectRelease(v13);
    uint64_t v26 = 1LL;
  }

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(a3, v26, 1LL, v7);
}

uint64_t sub_1004C5F18(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL, a2);
  uint64_t v36 = *(void *)(v4 - 8);
  uint64_t result = __chkstk_darwin(v5, v6);
  __n128 v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *v2;
  uint64_t v11 = *v2 + 56;
  uint64_t v12 = -1LL << *(_BYTE *)(*v2 + 32);
  unint64_t v13 = (a1 + 1) & ~v12;
  if (((1LL << v13) & *(void *)(v11 + 8 * (v13 >> 6))) != 0)
  {
    uint64_t v33 = v2;
    uint64_t v14 = ~v12;
    swift_retain(v10);
    uint64_t v15 = _HashTable.previousHole(before:)(a1, v11, v14);
    uint64_t v35 = v11;
    if ((*(void *)(v11 + 8 * (v13 >> 6)) & (1LL << v13)) != 0)
    {
      unint64_t v16 = (v15 + 1) & v14;
      uint64_t v17 = *(void *)(v36 + 72);
      uint64_t v34 = *(void (**)(char *, unint64_t, uint64_t))(v36 + 16);
      do
      {
        int64_t v18 = v17 * v13;
        v34(v9, *(void *)(v10 + 48) + v17 * v13, v4);
        uint64_t v19 = *(void *)(v10 + 40);
        uint64_t v20 = sub_10040A2B0( &qword_1009B9300,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v21 = dispatch thunk of Hashable._rawHashValue(seed:)(v19, v4, v20);
        (*(void (**)(char *, uint64_t))(v36 + 8))(v9, v4);
        unint64_t v22 = v21 & v14;
        if (a1 >= (uint64_t)v16)
        {
        }

        else if (v22 < v16 && a1 < (uint64_t)v22)
        {
          goto LABEL_6;
        }

        uint64_t v25 = *(void *)(v10 + 48);
        int64_t v26 = v17 * a1;
        unint64_t v27 = v25 + v17 * a1;
        uint64_t v28 = v25 + v18;
        if (v17 * a1 < v18 || v27 >= v28 + v17)
        {
          swift_arrayInitWithTakeFrontToBack(v27, v28, 1LL, v4);
        }

        else
        {
          a1 = v13;
          if (v26 == v18) {
            goto LABEL_6;
          }
          swift_arrayInitWithTakeBackToFront(v27);
        }

        a1 = v13;
LABEL_6:
        unint64_t v13 = (v13 + 1) & v14;
      }

      while (((*(void *)(v35 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) != 0);
    }

    *(void *)(v35 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << a1) - 1;
    uint64_t result = swift_release(v10);
    uint64_t v2 = v33;
  }

  else
  {
    *(void *)(v11 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << a1) - 1;
  }

  uint64_t v29 = *v2;
  uint64_t v30 = *(void *)(*v2 + 16);
  BOOL v31 = __OFSUB__(v30, 1LL);
  uint64_t v32 = v30 - 1;
  if (v31)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v29 + swift_unknownObjectWeakDestroy(v0 + 16) = v32;
    ++*(_DWORD *)(v29 + 36);
  }

  return result;
}

uint64_t sub_1004C6194(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for UUID(0LL, a2);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v5, v6);
  uint64_t v37 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = __chkstk_darwin(v8, v9);
  uint64_t v36 = (char *)&v31 - v11;
  uint64_t v12 = (void *)*v2;
  unint64_t v13 = *(void *)(*v2 + 16);
  unint64_t v14 = v13 - 2;
  if (v13 >= 2)
  {
    unint64_t v15 = 0LL;
    unint64_t v32 = v13 - 2;
    uint64_t v33 = v4;
    while (1)
    {
      unint64_t v38 = 0LL;
      uint64_t result = swift_stdlib_random(&v38, 8LL);
      uint64_t v17 = (v38 * (unsigned __int128)v13) >> 64;
      if (v13 > v38 * v13)
      {
        unint64_t v18 = -(uint64_t)v13 % v13;
        if (v18 > v38 * v13)
        {
          do
          {
            unint64_t v38 = 0LL;
            uint64_t result = swift_stdlib_random(&v38, 8LL);
          }

          while (v18 > v38 * v13);
          uint64_t v17 = (v38 * (unsigned __int128)v13) >> 64;
        }
      }

      unint64_t v19 = v15 + v17;
      if (__OFADD__(v15, v17)) {
        break;
      }
      if (v15 != v19)
      {
        unint64_t v20 = v12[2];
        if (v15 >= v20) {
          goto LABEL_19;
        }
        uint64_t v21 = v2;
        unint64_t v35 = (*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
        unint64_t v22 = (char *)v12 + v35;
        unint64_t v23 = v12;
        uint64_t v24 = v3;
        uint64_t v25 = *(void *)(v4 + 72);
        uint64_t v34 = v25 * v15;
        int64_t v26 = *(uint64_t (**)(char *, char *, uint64_t))(v4 + 16);
        uint64_t result = v26(v36, &v22[v25 * v15], v24);
        if (v19 >= v20) {
          goto LABEL_20;
        }
        uint64_t v27 = v25 * v19;
        v26(v37, &v22[v25 * v19], v24);
        uint64_t result = swift_isUniquelyReferenced_nonNull_native(v23);
        uint64_t v2 = v21;
        *uint64_t v21 = (uint64_t)v23;
        uint64_t v3 = v24;
        if ((result & 1) == 0)
        {
          uint64_t result = sub_1004C6F04(v23);
          unint64_t v23 = (void *)result;
          *uint64_t v21 = result;
        }

        uint64_t v4 = v33;
        unint64_t v28 = v35;
        if (v15 >= v23[2]) {
          goto LABEL_21;
        }
        uint64_t v29 = (char *)v23 + v35 + v34;
        uint64_t v30 = *(uint64_t (**)(char *, char *, uint64_t))(v33 + 40);
        uint64_t result = v30(v29, v37, v24);
        if (v19 >= *(void *)(*v2 + 16)) {
          goto LABEL_22;
        }
        uint64_t result = v30((char *)(*v2 + v28 + v27), v36, v24);
        uint64_t v12 = (void *)*v2;
        unint64_t v14 = v32;
      }

      --v13;
      if (v15++ == v14) {
        return result;
      }
    }

    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
  }

  return result;
}

uint64_t sub_1004C63D0(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v36 = a1;
  uint64_t v7 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v37 = v7;
  uint64_t v38 = v8;
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (!a3)
  {
    swift_release(a4);
    return (uint64_t)&_swiftEmptySetSingleton;
  }

  if (*(void *)(a4 + 16) == a3) {
    return a4;
  }
  sub_1003F5CB4(&qword_1009B90E0);
  uint64_t result = static _SetStorage.allocate(capacity:)(a3);
  uint64_t v13 = result;
  uint64_t v35 = a2;
  if (a2 < 1) {
    unint64_t v15 = 0LL;
  }
  else {
    unint64_t v15 = *v36;
  }
  uint64_t v16 = 0LL;
  uint64_t v17 = result + 56;
  while (1)
  {
    if (v15)
    {
      unint64_t v18 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v19 = v18 | (v16 << 6);
    }

    else
    {
      uint64_t v20 = v16 + 1;
      if (__OFADD__(v16, 1LL)) {
        goto LABEL_40;
      }
      if (v20 >= v35)
      {
LABEL_37:
        swift_release(a4);
        return v13;
      }

      unint64_t v21 = v36[v20];
      ++v16;
      if (!v21)
      {
        uint64_t v16 = v20 + 1;
        if (v20 + 1 >= v35) {
          goto LABEL_37;
        }
        unint64_t v21 = v36[v16];
        if (!v21)
        {
          uint64_t v16 = v20 + 2;
          if (v20 + 2 >= v35) {
            goto LABEL_37;
          }
          unint64_t v21 = v36[v16];
          if (!v21)
          {
            uint64_t v22 = v20 + 3;
            if (v22 >= v35) {
              goto LABEL_37;
            }
            unint64_t v21 = v36[v22];
            if (!v21)
            {
              while (1)
              {
                uint64_t v16 = v22 + 1;
                if (__OFADD__(v22, 1LL)) {
                  goto LABEL_41;
                }
                if (v16 >= v35) {
                  goto LABEL_37;
                }
                unint64_t v21 = v36[v16];
                ++v22;
                if (v21) {
                  goto LABEL_24;
                }
              }
            }

            uint64_t v16 = v22;
          }
        }
      }

uint64_t sub_1004C66C8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1004C66F4( a1,  a2,  a3,  (void *)*v3,  &qword_1009BBC80,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1004C66F4( char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  if ((a3 & 1) != 0)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000LL < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }

      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v10 = a2;
  }

  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    unint64_t v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v13 = sub_1003F5CB4(a5);
  uint64_t v14 = *(void *)(a6(0LL) - 8);
  uint64_t v15 = *(void *)(v14 + 72);
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = (v16 + 32) & ~v16;
  unint64_t v18 = (void *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  size_t v19 = j__malloc_size(v18);
  if (!v15)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }

  if (v19 - v17 == 0x8000000000000000LL && v15 == -1) {
    goto LABEL_34;
  }
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  uint64_t v21 = a6(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  unint64_t v23 = (*(unsigned __int8 *)(v22 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  uint64_t v24 = (char *)v18 + v23;
  uint64_t v25 = (char *)a4 + v23;
  if ((a1 & 1) != 0)
  {
    if (v18 < a4 || v24 >= &v25[*(void *)(v22 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack(v24, v25, v11, v21);
    }

    else if (v18 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v24);
    }

    a4[2] = 0LL;
    goto LABEL_32;
  }

  uint64_t v26 = *(void *)(v22 + 72) * v11;
  unint64_t v27 = &v24[v26];
  unint64_t v28 = (unint64_t)&v25[v26];
  if (v25 >= v27 || (unint64_t)v24 >= v28)
  {
    swift_arrayInitWithCopy(v24);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v18;
  }

uint64_t sub_1004C68D4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL) - 8);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = __chkstk_darwin(v13, v14);
  uint64_t v17 = (char *)&v31 - v16;
  uint64_t v19 = a4 + 56;
  uint64_t v18 = *(void *)(a4 + 56);
  uint64_t v34 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v34 < 64) {
    uint64_t v20 = ~(-1LL << -(char)v34);
  }
  else {
    uint64_t v20 = -1LL;
  }
  unint64_t v21 = v20 & v18;
  if (!a2)
  {
    int64_t v22 = 0LL;
    a3 = 0LL;
LABEL_34:
    uint64_t v30 = ~v34;
    *a1 = a4;
    a1[1] = v19;
    a1[2] = v30;
    a1[3] = v22;
    a1[4] = v21;
    return a3;
  }

  if (!a3)
  {
    int64_t v22 = 0LL;
    goto LABEL_34;
  }

  if (a3 < 0)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }

  uint64_t v33 = a1;
  int64_t v22 = 0LL;
  uint64_t v23 = 0LL;
  uint64_t v35 = a4 + 56;
  int64_t v36 = (unint64_t)(63 - v34) >> 6;
  int64_t v32 = v36 - 1;
  if (!v21) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v24 = __clz(__rbit64(v21));
  v21 &= v21 - 1;
  unint64_t v25 = v24 | (v22 << 6);
  while (1)
  {
    ++v23;
    uint64_t v29 = *(void *)(v8 + 72);
    sub_1003F5FC8( *(void *)(a4 + 48) + v29 * v25,  (uint64_t)v12,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    sub_1004C77E4((uint64_t)v12, (uint64_t)v17);
    uint64_t result = sub_1004C77E4((uint64_t)v17, a2);
    if (v23 == a3) {
      goto LABEL_33;
    }
    a2 += v29;
    if (v21) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v26 = v22 + 1;
    if (__OFADD__(v22, 1LL))
    {
      __break(1u);
      goto LABEL_41;
    }

    if (v26 >= v36)
    {
      unint64_t v21 = 0LL;
      a3 = v23;
LABEL_33:
      a1 = v33;
      uint64_t v19 = v35;
      goto LABEL_34;
    }

    uint64_t v19 = v35;
    unint64_t v27 = *(void *)(v35 + 8 * v26);
    if (!v27) {
      break;
    }
LABEL_18:
    unint64_t v21 = (v27 - 1) & v27;
    unint64_t v25 = __clz(__rbit64(v27)) + (v26 << 6);
    int64_t v22 = v26;
  }

  v22 += 2LL;
  if (v26 + 1 >= v36)
  {
    unint64_t v21 = 0LL;
    int64_t v22 = v26;
LABEL_39:
    a3 = v23;
    a1 = v33;
    goto LABEL_34;
  }

  unint64_t v27 = *(void *)(v35 + 8 * v22);
  if (v27) {
    goto LABEL_14;
  }
  int64_t v28 = v26 + 2;
  if (v26 + 2 >= v36) {
    goto LABEL_36;
  }
  unint64_t v27 = *(void *)(v35 + 8 * v28);
  if (v27) {
    goto LABEL_17;
  }
  int64_t v22 = v26 + 3;
  if (v26 + 3 >= v36)
  {
    unint64_t v21 = 0LL;
    int64_t v22 = v26 + 2;
    goto LABEL_39;
  }

  unint64_t v27 = *(void *)(v35 + 8 * v22);
  if (v27)
  {
LABEL_14:
    int64_t v26 = v22;
    goto LABEL_18;
  }

  int64_t v28 = v26 + 4;
  if (v26 + 4 >= v36)
  {
LABEL_36:
    unint64_t v21 = 0LL;
    goto LABEL_39;
  }

  unint64_t v27 = *(void *)(v35 + 8 * v28);
  if (v27)
  {
LABEL_17:
    int64_t v26 = v28;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v26 = v28 + 1;
    if (__OFADD__(v28, 1LL)) {
      break;
    }
    if (v26 >= v36)
    {
      unint64_t v21 = 0LL;
      int64_t v22 = v32;
      goto LABEL_39;
    }

    unint64_t v27 = *(void *)(v35 + 8 * v26);
    ++v28;
    if (v27) {
      goto LABEL_18;
    }
  }

uint64_t sub_1004C6B80(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for UUID(0LL, v12);
  uint64_t v45 = *(void *)(v13 - 8);
  uint64_t result = __chkstk_darwin(v14, v15);
  unint64_t v44 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v46 = a4;
  uint64_t v19 = a4 + 56;
  uint64_t v18 = *(void *)(a4 + 56);
  uint64_t v20 = -1LL << *(_BYTE *)(a4 + 32);
  uint64_t v39 = a1;
  uint64_t v40 = v20;
  uint64_t v21 = -v20;
  if (v21 < 64) {
    uint64_t v22 = ~(-1LL << v21);
  }
  else {
    uint64_t v22 = -1LL;
  }
  unint64_t v23 = v22 & v18;
  if (!a2)
  {
    int64_t v24 = 0LL;
    uint64_t v25 = 0LL;
LABEL_39:
    uint64_t v35 = v39;
    uint64_t v36 = ~v40;
    *uint64_t v39 = v46;
    v35[1] = v19;
    v35[2] = v36;
    uint64_t v35[3] = v24;
    v35[4] = v23;
    return v25;
  }

  if (!a3)
  {
    int64_t v24 = 0LL;
    uint64_t v25 = 0LL;
    goto LABEL_39;
  }

  if (a3 < 0) {
    goto LABEL_41;
  }
  int64_t v24 = 0LL;
  uint64_t v25 = 0LL;
  uint64_t v41 = a4 + 56;
  int64_t v42 = (unint64_t)(63 - v40) >> 6;
  int64_t v38 = v42 - 1;
  uint64_t v43 = a3;
  int64_t v26 = v44;
  uint64_t v27 = v45;
  if (!v23) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v28 = __clz(__rbit64(v23));
  v23 &= v23 - 1;
  unint64_t v29 = v28 | (v24 << 6);
  while (1)
  {
    uint64_t v33 = *(void *)(v27 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v27 + 16))(v11, *(void *)(v46 + 48) + v33 * v29, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v11, 0LL, 1LL, v13);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v11, 1LL, v13) == 1)
    {
      uint64_t v19 = v41;
      goto LABEL_38;
    }

    ++v25;
    uint64_t v34 = *(void (**)(char *, char *, uint64_t))(v27 + 32);
    v34(v26, v11, v13);
    uint64_t result = ((uint64_t (*)(uint64_t, char *, uint64_t))v34)(a2, v26, v13);
    if (v25 == v43)
    {
      uint64_t v25 = v43;
      uint64_t v19 = v41;
      goto LABEL_39;
    }

    a2 += v33;
    uint64_t v27 = v45;
    if (v23) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v30 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    uint64_t v19 = v41;
    if (v30 >= v42) {
      goto LABEL_37;
    }
    unint64_t v31 = *(void *)(v41 + 8 * v30);
    if (!v31)
    {
      int64_t v32 = v24 + 2;
      ++v24;
      if (v30 + 1 >= v42) {
        goto LABEL_37;
      }
      unint64_t v31 = *(void *)(v41 + 8 * v32);
      if (v31) {
        goto LABEL_14;
      }
      int64_t v24 = v30 + 1;
      if (v30 + 2 >= v42) {
        goto LABEL_37;
      }
      unint64_t v31 = *(void *)(v41 + 8 * (v30 + 2));
      if (v31)
      {
        v30 += 2LL;
      }

      else
      {
        int64_t v24 = v30 + 2;
        if (v30 + 3 >= v42) {
          goto LABEL_37;
        }
        unint64_t v31 = *(void *)(v41 + 8 * (v30 + 3));
        if (!v31)
        {
          int64_t v32 = v30 + 4;
          int64_t v24 = v30 + 3;
          if (v30 + 4 < v42)
          {
            unint64_t v31 = *(void *)(v41 + 8 * v32);
            if (!v31)
            {
              while (1)
              {
                int64_t v30 = v32 + 1;
                if (__OFADD__(v32, 1LL)) {
                  goto LABEL_42;
                }
                if (v30 >= v42)
                {
                  int64_t v24 = v38;
                  goto LABEL_37;
                }

                unint64_t v31 = *(void *)(v41 + 8 * v30);
                ++v32;
                if (v31) {
                  goto LABEL_21;
                }
              }
            }

uint64_t sub_1004C6ED0(void *a1)
{
  return sub_1004C66F4( 0,  a1[2],  0,  a1,  &qword_1009BBC80,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
}

uint64_t sub_1004C6F04(void *a1)
{
  return sub_1004C66F4( 0,  a1[2],  0,  a1,  &qword_1009BBC98,  (uint64_t (*)(void))&type metadata accessor for UUID);
}

unint64_t sub_1004C6F38(void *a1)
{
  uint64_t v1 = a1[2];
  if (!v1) {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  sub_1003F5CB4(&qword_1009BBCA0);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v1);
  uint64_t v5 = a1[4];
  uint64_t v4 = a1[5];
  unint64_t result = sub_100417DF8(v5);
  if ((v7 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain(v4);
    return (unint64_t)v3;
  }

  __n128 v8 = a1 + 7;
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v9 = 8 * result;
    *(void *)(v3[6] + __chkstk_darwin(v8, v9) = v5;
    *(void *)(v3[7] + __chkstk_darwin(v8, v9) = v4;
    uint64_t v10 = v3[2];
    BOOL v11 = __OFADD__(v10, 1LL);
    uint64_t v12 = v10 + 1;
    if (v11) {
      break;
    }
    v3[2] = v12;
    if (!--v1) {
      goto LABEL_8;
    }
    uint64_t v13 = v8 + 2;
    uint64_t v5 = *(v8 - 1);
    uint64_t v14 = *v8;
    swift_bridgeObjectRetain(v4);
    unint64_t result = sub_100417DF8(v5);
    __n128 v8 = v13;
    uint64_t v4 = v14;
    if ((v15 & 1) != 0) {
      goto LABEL_7;
    }
  }

  __break(1u);
  return result;
}

uint64_t type metadata accessor for IDSGroupEncryptionKeyMaterialCache2.KMCacheState(uint64_t a1)
{
  return sub_100402020( a1,  qword_1009C6500,  (uint64_t)&nominal type descriptor for IDSGroupEncryptionKeyMaterialCache2.KMCacheState);
}

uint64_t sub_1004C7048(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v8, v9);
  BOOL v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = __chkstk_darwin(v12, v13);
  uint64_t v16 = (char *)&v24 - v15;
  int64_t v17 = a3 >> 1;
  BOOL v18 = __OFSUB__(a3 >> 1, a2);
  uint64_t v19 = (a3 >> 1) - a2;
  if (v18)
  {
    __break(1u);
    goto LABEL_9;
  }

  uint64_t v20 = sub_10040A2B0( &qword_1009B90D0,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent,  (uint64_t)&unk_100718E98);
  uint64_t result = Set.init(minimumCapacity:)(v19, v6, v20);
  uint64_t v25 = result;
  uint64_t v21 = v17 - a2;
  if (v17 == a2) {
    return result;
  }
  if (v17 <= a2)
  {
LABEL_9:
    __break(1u);
    return result;
  }

  uint64_t v22 = *(void *)(v7 + 72);
  uint64_t v23 = a1 + v22 * a2;
  do
  {
    sub_1003F5FC8(v23, (uint64_t)v11, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    sub_100400D68((uint64_t)v16, (uint64_t)v11);
    sub_1003F6050((uint64_t)v16, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    v23 += v22;
    --v21;
  }

  while (v21);
  return v25;
}

uint64_t sub_1004C717C()
{
  return type metadata accessor for IDSGroupEncryptionKeyMaterialCache2(0LL);
}

uint64_t type metadata accessor for IDSGroupEncryptionKeyMaterialCache2(uint64_t a1)
{
  return sub_100402020( a1,  (uint64_t *)&unk_1009C64F0,  (uint64_t)&nominal type descriptor for IDSGroupEncryptionKeyMaterialCache2);
}

uint64_t sub_1004C7198(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  uint64_t result = type metadata accessor for Logger(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    void v4[2] = &unk_10071CCE8;
    v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
    void v4[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
    void v4[5] = &unk_10071CD00;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 6LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t *sub_1004C7244(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = (uint64_t *)(v4 + ((v3 + 16LL) & ~(unint64_t)v3));
    swift_retain(v4);
  }

  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = a2[1];
    uint64_t v7 = a2[2];
    a1[1] = v6;
    a1[2] = v7;
    uint64_t v8 = a2[3];
    uint64_t v9 = a2[4];
    a1[3] = v8;
    a1[4] = v9;
    uint64_t v10 = *(int *)(a3 + 36);
    BOOL v11 = (char *)a1 + v10;
    __n128 v12 = (char *)a2 + v10;
    uint64_t v13 = type metadata accessor for Date(0LL);
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16LL);
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    v14(v11, v12, v13);
  }

  return v5;
}

uint64_t sub_1004C731C(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 36);
  uint64_t v5 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

uint64_t *sub_1004C7384(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  uint64_t v6 = a2[2];
  uint64_t v7 = a2[3];
  a1[2] = v6;
  a1[3] = v7;
  uint64_t v8 = a2[4];
  a1[4] = v8;
  uint64_t v9 = *(int *)(a3 + 36);
  uint64_t v10 = (char *)a1 + v9;
  BOOL v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for Date(0LL);
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  v13(v10, v11, v12);
  return a1;
}

uint64_t *sub_1004C7434(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[1];
  uint64_t v9 = a1[1];
  a1[1] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a2[2];
  uint64_t v11 = a1[2];
  a1[2] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = a2[3];
  uint64_t v13 = a1[3];
  a1[3] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = a2[4];
  uint64_t v15 = a1[4];
  a1[4] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  uint64_t v16 = *(int *)(a3 + 36);
  int64_t v17 = (char *)a1 + v16;
  BOOL v18 = (char *)a2 + v16;
  uint64_t v19 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 24LL))(v17, v18, v19);
  return a1;
}

uint64_t sub_1004C7508(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  *(void *)(a1 + 3sub_10040A648(v1 + 2) = *(void *)(a2 + 32);
  uint64_t v5 = *(int *)(a3 + 36);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32LL))(v6, v7, v8);
  return a1;
}

uint64_t *sub_1004C756C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a1[2];
  a1[2] = a2[2];
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = a1[3];
  a1[3] = a2[3];
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a1[4];
  a1[4] = a2[4];
  swift_bridgeObjectRelease(v10);
  uint64_t v11 = *(int *)(a3 + 36);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 40LL))(v12, v13, v14);
  return a1;
}

uint64_t sub_1004C7618(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1004C7624);
}

uint64_t sub_1004C7624(char *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(__chkstk_darwin(v3, v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for Date(0LL);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( &a1[*(int *)(a3 + 36)],  a2,  v8);
  }

uint64_t sub_1004C76A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1004C76AC);
}

char *sub_1004C76AC(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)uint64_t result = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for Date(0LL);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( &v5[*(int *)(a4 + 36)],  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_1004C7720(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  void v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
  void v4[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
  uint64_t result = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    void v4[5] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 6LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_1004C77A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1004C77E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1004C7828(uint64_t a1)
{
  return sub_1004C18E0(a1, *(void *)(v1 + 16), *(void *)(v1 + 24)) & 1;
}

uint64_t sub_1004C7854(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v4, v5);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v18 - v10;
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v14 = sub_10040A2B0(&qword_1009B90D0, v13, (uint64_t)&unk_100718E98);
  uint64_t result = Set.init(minimumCapacity:)(v12, v2, v14);
  uint64_t v19 = result;
  if (v12)
  {
    uint64_t v16 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v17 = *(void *)(v3 + 72);
    do
    {
      sub_1003F5FC8(v16, (uint64_t)v7, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      sub_100400D68((uint64_t)v11, (uint64_t)v7);
      sub_1003F6050((uint64_t)v11, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      v16 += v17;
      --v12;
    }

    while (v12);
    return v19;
  }

  return result;
}

uint64_t sub_1004C7974(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v42 = a2;
  uint64_t v43 = a1;
  uint64_t v6 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  uint64_t v46 = *(void *)(v6 - 8);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = __chkstk_darwin(v11, v12);
  uint64_t v15 = (char *)&v41 - v14;
  uint64_t v47 = a3;
  uint64_t v48 = 0LL;
  int64_t v16 = 0LL;
  uint64_t v19 = *(void *)(a3 + 56);
  uint64_t v18 = a3 + 56;
  uint64_t v17 = v19;
  uint64_t v20 = 1LL << *(_BYTE *)(v18 - 24);
  if (v20 < 64) {
    uint64_t v21 = ~(-1LL << v20);
  }
  else {
    uint64_t v21 = -1LL;
  }
  unint64_t v22 = v21 & v17;
  uint64_t v44 = v18;
  int64_t v45 = (unint64_t)(v20 + 63) >> 6;
  uint64_t v23 = a4;
  uint64_t v52 = a4 + 56;
  while (1)
  {
    if (v22)
    {
      uint64_t v50 = (v22 - 1) & v22;
      int64_t v51 = v16;
      unint64_t v24 = __clz(__rbit64(v22)) | (v16 << 6);
      goto LABEL_22;
    }

    int64_t v25 = v16 + 1;
    if (__OFADD__(v16, 1LL))
    {
      __break(1u);
      goto LABEL_32;
    }

    if (v25 >= v45) {
      goto LABEL_30;
    }
    unint64_t v26 = *(void *)(v44 + 8 * v25);
    int64_t v27 = v16 + 1;
    if (!v26)
    {
      int64_t v27 = v16 + 2;
      if (v16 + 2 >= v45) {
        goto LABEL_30;
      }
      unint64_t v26 = *(void *)(v44 + 8 * v27);
      if (!v26)
      {
        int64_t v27 = v16 + 3;
        if (v16 + 3 >= v45) {
          goto LABEL_30;
        }
        unint64_t v26 = *(void *)(v44 + 8 * v27);
        if (!v26) {
          break;
        }
      }
    }

uint64_t sub_1004C7CCC(uint64_t a1, uint64_t a2)
{
  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  unint64_t v7 = (unint64_t)((1LL << v5) + 63) >> 6;
  size_t v8 = 8 * v7;
  swift_bridgeObjectRetain_n(a2, 2LL);
  if (v6 <= 0xD || (swift_stdlib_isStackAllocationSafe(v8, 8LL) & 1) != 0)
  {
    __chkstk_darwin(v9, v10);
    bzero((char *)&v15 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0LL), v8);
    swift_bridgeObjectRetain(a2);
    uint64_t v11 = sub_1004C7974((unint64_t *)((char *)&v15 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0LL)), v7, a1, a2);
    swift_release(a1);
    uint64_t v12 = swift_bridgeObjectRelease(a2);
    if (v2) {
      swift_willThrow(v12);
    }
    swift_bridgeObjectRelease_n(a2, 2LL);
  }

  else
  {
    uint64_t v13 = (void *)swift_slowAlloc(v8, -1LL);
    bzero(v13, v8);
    swift_bridgeObjectRetain(a2);
    uint64_t v11 = sub_1004C7974((unint64_t *)v13, v7, a1, a2);
    swift_release(a1);
    swift_bridgeObjectRelease(a2);
    swift_slowDealloc(v13, -1LL, -1LL);
    swift_bridgeObjectRelease_n(a2, 2LL);
  }

  return v11;
}

uint64_t sub_1004C7E90(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  uint64_t v8 = *(void *)(type metadata accessor for UUID(0LL, a2) - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(v8 + 72);
  unint64_t v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
  uint64_t v12 = v10 * v4;
  unint64_t v13 = a3 + v12;
  unint64_t v14 = v11 + v12;
  if (v11 >= v13 || v14 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v13;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1004C7FA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1003F5CB4(&qword_1009BBCA8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1004C7FF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
  char v14 = *(_BYTE *)(a3 + *(int *)(v4 + 32));
  char v13 = 2;
  unint64_t v5 = sub_1004C80F8();
  char v6 = dispatch thunk of static Equatable.== infix(_:_:)( &v14,  &v13,  &type metadata for IDSGroupEncryptionPublicIdentityWrapMode,  v5);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v8 = sub_10005DFE0(isa, *(void *)(a3 + *(int *)(v4 + 28)), (v6 & 1) == 0);

  if (v8)
  {
    uint64_t v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v8);
  }

  else
  {
    unint64_t v10 = sub_1004C813C();
    uint64_t v9 = swift_allocError(&type metadata for IDSGroupEncryptionDefaultCryptoHandler.CryptoError, v10, 0LL, 0LL);
    *unint64_t v11 = 1;
  }

  return v9;
}

unint64_t sub_1004C80F8()
{
  unint64_t result = qword_1009BBCC0;
  if (!qword_1009BBCC0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10071D25C, &type metadata for IDSGroupEncryptionPublicIdentityWrapMode);
    atomic_store(result, (unint64_t *)&qword_1009BBCC0);
  }

  return result;
}

unint64_t sub_1004C813C()
{
  unint64_t result = qword_1009BBCC8;
  if (!qword_1009BBCC8)
  {
    unint64_t result = swift_getWitnessTable( &unk_10071CDA4,  &type metadata for IDSGroupEncryptionDefaultCryptoHandler.CryptoError);
    atomic_store(result, (unint64_t *)&qword_1009BBCC8);
  }

  return result;
}

uint64_t sub_1004C8180(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v7 = sub_10005E17C(isa, a3, a4 & 1);

  if (v7)
  {
    uint64_t v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v7);
  }

  else
  {
    unint64_t v9 = sub_1004C813C();
    uint64_t v8 = swift_allocError(&type metadata for IDSGroupEncryptionDefaultCryptoHandler.CryptoError, v9, 0LL, 0LL);
    *unint64_t v10 = 2;
  }

  return v8;
}

uint64_t sub_1004C8224(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  uint64_t v5 = type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
  id v6 = sub_10005E318(isa, *(void *)(a3 + *(int *)(v5 + 28)));

  if (v6)
  {
    uint64_t v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v6);
  }

  else
  {
    unint64_t v8 = sub_1004C813C();
    uint64_t v7 = swift_allocError(&type metadata for IDSGroupEncryptionDefaultCryptoHandler.CryptoError, v8, 0LL, 0LL);
    *unint64_t v9 = 1;
  }

  return v7;
}

uint64_t sub_1004C82D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  uint64_t v5 = type metadata accessor for IDSGroupEncryptionFullIdentity(0LL);
  id v6 = sub_10005E4AC(isa, *(void *)(a3 + *(int *)(v5 + 20)));

  if (v6)
  {
    uint64_t v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v6);
  }

  else
  {
    unint64_t v8 = sub_1004C813C();
    uint64_t v7 = swift_allocError(&type metadata for IDSGroupEncryptionDefaultCryptoHandler.CryptoError, v8, 0LL, 0LL);
    *unint64_t v9 = 2;
  }

  return v7;
}

uint64_t sub_1004C837C()
{
  return sub_1004C8394((uint64_t (*)(void))sub_10005DC60);
}

uint64_t sub_1004C8388()
{
  return sub_1004C8394((uint64_t (*)(void))sub_10005DE20);
}

uint64_t sub_1004C8394(uint64_t (*a1)(void))
{
  id v1 = (id)a1(0LL);
  uint64_t v2 = v1;
  if (v1)
  {
    uint64_t v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v1);
  }

  else
  {
    unint64_t v4 = sub_1004C813C();
    uint64_t v3 = swift_allocError(&type metadata for IDSGroupEncryptionDefaultCryptoHandler.CryptoError, v4, 0LL, 0LL);
    *uint64_t v5 = 0;
  }

  return v3;
}

uint64_t sub_1004C8420()
{
  uint64_t v0 = sub_1003F5CB4(&qword_1009BBCD0);
  uint64_t inited = swift_initStackObject(v0, &v14);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100718C80;
  *(void *)(inited + 3sub_10040A648(v1 + 2) = kSecAttrKeyType;
  *(void *)(inited + 40) = kSecAttrKeyTypeECSECPrimeRandom;
  *(void *)(inited + 48) = kSecAttrKeyClass;
  *(void *)(inited + 56) = kSecAttrKeyClassPublic;
  uint64_t v2 = (id)kSecAttrKeyType;
  uint64_t v3 = (id)kSecAttrKeyTypeECSECPrimeRandom;
  unint64_t v4 = (id)kSecAttrKeyClass;
  uint64_t v5 = (id)kSecAttrKeyClassPublic;
  unint64_t v6 = sub_1004C8574(inited);
  type metadata accessor for CFString();
  sub_1004C8D88(&qword_1009BBCD8, (uint64_t)&unk_10071CEE4);
  v7.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v6);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  uint64_t v9 = sub_10005E640(isa, (uint64_t)v7.super.isa);

  uint64_t v10 = v9;
  if (!v9)
  {
    unint64_t v11 = sub_1004C813C();
    uint64_t v10 = swift_allocError(&type metadata for IDSGroupEncryptionDefaultCryptoHandler.CryptoError, v11, 0LL, 0LL);
    _BYTE *v12 = 3;
  }

  return v10;
}

unint64_t sub_1004C8574(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    unint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_1003F5CB4(&qword_1009BBD20);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  unint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  unint64_t v6 = (void **)(a1 + 40);
  while (1)
  {
    NSDictionary v7 = *v6;
    id v8 = *(v6 - 1);
    id v9 = v7;
    unint64_t result = sub_1004C8D08((uint64_t)v8);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v12 = 8 * result;
    *(void *)(v4[6] + v1sub_10040A648(v1 + 2) = v8;
    *(void *)(v4[7] + v1sub_10040A648(v1 + 2) = v9;
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    void v4[2] = v15;
    v6 += 2;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void type metadata accessor for CFString()
{
  if (!qword_1009BBD10)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(0LL, &unk_100907BF0);
    if (!v1) {
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_1009BBD10);
    }
  }

uint64_t sub_1004C86D0()
{
  id v0 = [(id)objc_opt_self(IDSEncryptionController) sharedInstance];
  if (!v0) {
    __break(1u);
  }
  uint64_t v1 = v0;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  NSString v3 = String._bridgeToObjectiveC()();
  id v10 = 0LL;
  id v4 = [v1 publicKeySignData:isa withSignatureType:0 service:v3 priority:300 error:&v10];

  id v5 = v10;
  if (v4)
  {
    uint64_t v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v4);
  }

  else
  {
    NSDictionary v7 = v5;
    uint64_t v6 = _convertNSErrorToError(_:)();

    swift_willThrow(v8);
  }

  return v6;
}

uint64_t type metadata accessor for IDSGroupEncryptionDefaultCryptoHandler()
{
  return objc_opt_self(&OBJC_CLASS____TtC17identityservicesd38IDSGroupEncryptionDefaultCryptoHandler);
}

id sub_1004C8874()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for IDSGroupEncryptionDefaultCryptoHandler();
  return objc_msgSendSuper2(&v2, "dealloc");
}

unint64_t sub_1004C88A8()
{
  unint64_t result = qword_1009BBCE0;
  if (!qword_1009BBCE0)
  {
    unint64_t result = swift_getWitnessTable( &unk_10071CD3C,  &type metadata for IDSGroupEncryptionDefaultCryptoHandler.CryptoError);
    atomic_store(result, (unint64_t *)&qword_1009BBCE0);
  }

  return result;
}

uint64_t sub_1004C88EC()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **v0) + 0x50LL))();
}

uint64_t sub_1004C8928()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **v0) + 0x58LL))();
}

uint64_t sub_1004C8964()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **v0) + 0x60LL))();
}

uint64_t sub_1004C89A0()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **v0) + 0x68LL))();
}

uint64_t sub_1004C89DC()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **v0) + 0x70LL))();
}

uint64_t sub_1004C8A18()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **v0) + 0x78LL))();
}

uint64_t sub_1004C8A54()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **v0) + 0x80LL))();
}

uint64_t sub_1004C8A90()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **v0) + 0x88LL))();
}

uint64_t storeEnumTagSinglePayload for IDSGroupEncryptionDefaultCryptoHandler.CryptoError( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(__chkstk_darwin(v3, v4) = 1;
  }
  else {
    LODWORD(__chkstk_darwin(v3, v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_1004C8B18 + 4 * byte_10071CD35[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1004C8B4C + 4 * asc_10071CD30[v4]))();
}

uint64_t sub_1004C8B4C(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

uint64_t sub_1004C8B54(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v0 & 1) = 0;
  if (a2) {
    JUMPOUT(0x1004C8B5CLL);
  }
  return result;
}

uint64_t sub_1004C8B68(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v0 & 1) = 0;
  if (!a2) {
    JUMPOUT(0x1004C8B70LL);
  }
  *(_BYTE *)unint64_t result = a2 + 4;
  return result;
}

uint64_t sub_1004C8B74(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

uint64_t sub_1004C8B7C(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IDSGroupEncryptionDefaultCryptoHandler.CryptoError()
{
  return &type metadata for IDSGroupEncryptionDefaultCryptoHandler.CryptoError;
}

uint64_t sub_1004C8B98(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10071CEB8, a1);
  return _CFObject.hashValue.getter(a1, WitnessTable);
}

uint64_t sub_1004C8BD4(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10071CEB8, a2);
  return _CFObject.hash(into:)(a1, a2, WitnessTable);
}

Swift::Int sub_1004C8C1C(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10071CEB8, a2);
  _CFObject.hash(into:)(v5, a2, WitnessTable);
  return Hasher._finalize()();
}

uint64_t sub_1004C8C74(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10071CEB8, a3);
  return static _CFObject.== infix(_:_:)(v4, v5, a3, WitnessTable);
}

uint64_t sub_1004C8CC0()
{
  return sub_1004C8D88(&qword_1009BBCD8, (uint64_t)&unk_10071CEE4);
}

uint64_t sub_1004C8CE4()
{
  return sub_1004C8D88(&qword_1009BBD18, (uint64_t)&unk_10071CE8C);
}

unint64_t sub_1004C8D08(uint64_t a1)
{
  uint64_t v4 = v3;
  uint64_t v5 = sub_1004C8D88(&qword_1009BBD28, (uint64_t)&unk_10071CEB8);
  _CFObject.hash(into:)(v8, v4, v5);
  Swift::Int v6 = Hasher._finalize()();
  return sub_1004C8DC8(a1, v6);
}

uint64_t sub_1004C8D88(unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CFString();
    uint64_t result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_1004C8DC8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
  {
    uint64_t v6 = v2;
    type metadata accessor for CFString();
    uint64_t v9 = v8;
    id v10 = *(void **)(*(void *)(v6 + 48) + 8 * i);
    uint64_t v11 = sub_1004C8D88(&qword_1009BBD28, (uint64_t)&unk_10071CEB8);
    id v12 = v10;
    char v13 = static _CFObject.== infix(_:_:)(v12, a1, v9, v11);

    if ((v13 & 1) == 0)
    {
      uint64_t v14 = ~v4;
      for (unint64_t i = (i + 1) & v14; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0; unint64_t i = (i + 1) & v14)
      {
        id v15 = *(id *)(*(void *)(v6 + 48) + 8 * i);
        char v16 = static _CFObject.== infix(_:_:)(v15, a1, v9, v11);

        if ((v16 & 1) != 0) {
          break;
        }
      }
    }
  }

  return i;
}

uint64_t sub_1004C8F00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for String.Encoding(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v10, v11);
  char v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = String.count.getter(a1, a2);
  sub_1004C9400(v14, 4LL);
  uint64_t v16 = v15;
  unint64_t v18 = v17;
  uint64_t v42 = a4;
  uint64_t v19 = String.count.getter(a3, a4);
  sub_1004C9400(v19, 4LL);
  uint64_t v21 = v20;
  unint64_t v23 = v22;
  ((void (*)(void))static String.Encoding.utf8.getter)();
  uint64_t v24 = String.data(using:allowLossyConversion:)(v13, 0LL, a1, a2);
  unint64_t v26 = v25;
  int64_t v27 = *(uint64_t (**)(char *, uint64_t))(v9 + 8);
  uint64_t v28 = v27(v13, v8);
  if (v26 >> 60 == 15)
  {
    sub_100402A84(v21, v23);
    sub_100402A84(v16, v18);
    return 0LL;
  }

  uint64_t v40 = v21;
  unint64_t v41 = v23;
  static String.Encoding.utf8.getter(v28);
  uint64_t v29 = String.data(using:allowLossyConversion:)(v13, 0LL, a3, v42);
  unint64_t v31 = v30;
  v27(v13, v8);
  if (v31 >> 60 == 15)
  {
    sub_100402A84(v40, v41);
    sub_100402A84(v16, v18);
    sub_10040AD00(v24, v26);
    return 0LL;
  }

  uint64_t v39 = v16;
  uint64_t v45 = v16;
  unint64_t v46 = v18;
  sub_1004028CC(v16, v18);
  sub_100439780(v24, v26);
  sub_100450C4C(v24, v26);
  sub_10040AD00(v24, v26);
  uint64_t v33 = v45;
  unint64_t v34 = v46;
  uint64_t v43 = v45;
  unint64_t v44 = v46;
  sub_1004028CC(v45, v46);
  uint64_t v36 = v40;
  unint64_t v35 = v41;
  sub_1004028CC(v40, v41);
  sub_100450C4C(v36, v35);
  sub_100402A84(v36, v35);
  sub_100402A84(v33, v34);
  uint64_t v37 = v43;
  unint64_t v38 = v44;
  uint64_t v45 = v43;
  unint64_t v46 = v44;
  sub_1004028CC(v43, v44);
  sub_100439780(v29, v31);
  sub_100450C4C(v29, v31);
  sub_10040AD00(v29, v31);
  sub_100402A84(v36, v35);
  sub_100402A84(v39, v18);
  sub_10040AD00(v24, v26);
  sub_100402A84(v37, v38);
  sub_10040AD00(v29, v31);
  return v45;
}

void sub_1004C9198(uint64_t a1)
{
  __asm { BR              X13 }

void *sub_1004C91F4( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __b, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24)
{
  uint64_t v30 = v25;
  LOWORD(v3Hasher._combine(_:)(v0 & 1) = v24;
  BYTE2(v3Hasher._combine(_:)(v0 & 1) = BYTE2(v24);
  HIBYTE(v3Hasher._combine(_:)(v0 & 1) = BYTE3(v24);
  unsigned __int8 v32 = BYTE4(v24);
  unsigned __int8 v33 = BYTE5(v24);
  unsigned __int8 v34 = BYTE6(v24);
  uint64_t result = memset(&v30, v27, BYTE6(v24));
  unint64_t v29 = v31 | ((unint64_t)v32 << 32) | ((unint64_t)v33 << 40) | ((unint64_t)v34 << 48);
  *unint64_t v26 = v30;
  v26[1] = v29;
  return result;
}

void sub_1004C9380(int *a1, int a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  if ((int)v5 < (int)v4)
  {
    __break(1u);
    goto LABEL_9;
  }

  uint64_t v6 = __DataStorage._bytes.getter();
  if (!v6)
  {
LABEL_10:
    __break(1u);
    return;
  }

  uint64_t v7 = v6;
  uint64_t v8 = __DataStorage._offset.getter();
  uint64_t v9 = v4 - v8;
  if (__OFSUB__(v4, v8))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  int64_t v10 = v5 - v4;
  uint64_t v11 = __DataStorage._length.getter();
  if (v11 >= v10) {
    size_t v12 = v10;
  }
  else {
    size_t v12 = v11;
  }
  memset((void *)(v7 + v9), a2, v12);
}

void sub_1004C9400(uint64_t a1, uint64_t a2)
{
  if (a1 <= 1) {
    uint64_t v2 = 1LL;
  }
  else {
    uint64_t v2 = a1;
  }
  BOOL v3 = __OFADD__(v2, 1LL);
  uint64_t v4 = v2 + 1;
  if (v3)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }

  double v7 = ceil(log2((double)v4) * 0.125);
  if ((~*(void *)&v7 & 0x7FF0000000000000LL) == 0)
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }

  if (v7 <= -9.22337204e18)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }

  if (v7 >= 9.22337204e18)
  {
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }

  uint64_t v8 = (uint64_t)v7;
  v19[0] = sub_10040B2E4(a2);
  v19[1] = v9;
  sub_1004C9198((uint64_t)v19);
  if (__OFSUB__(a2, v8))
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }

  uint64_t v10 = a2 - 1;
  if (__OFSUB__(a2, 1LL))
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }

  if (v10 >= a2 - v8)
  {
    uint64_t v11 = -v8;
    while (1)
    {
      uint64_t v12 = a2 + v11;
      if (__OFSUB__(v10, a2 + v11)) {
        break;
      }
      if ((0xEFFFFFFFFFFFFFFFLL - v11) >> 61 != 7) {
        goto LABEL_34;
      }
      uint64_t v13 = 8 * (-1 - v11);
      if (v13 >= -64)
      {
        uint64_t v15 = a1 >> (v13 & 0x38);
        uint64_t v16 = a1 << ((-8 * (-1 - v11)) & 0x38);
        if (((-1 - v11) & 0x1000000000000000LL) != 0) {
          uint64_t v15 = v16;
        }
        if (v13 <= 64) {
          uint64_t v14 = v15;
        }
        else {
          uint64_t v14 = a1 >> 63;
        }
      }

      else
      {
        uint64_t v14 = 0LL;
      }

      BOOL v18 = __CFADD__(v11++, 1LL);
      Data._Representation.subscript.setter(v14, v12);
      if (v18) {
        return;
      }
      if (__OFADD__(v12, 1LL))
      {
        __break(1u);
        return;
      }
    }

    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }

uint64_t type metadata accessor for SenderKeyUtils()
{
  return objc_opt_self(&OBJC_CLASS____TtC17identityservicesd14SenderKeyUtils);
}

uint64_t sub_1004C95BC()
{
  uint64_t v1 = (void *)(v0 + OBJC_IVAR____TtC17identityservicesd38IDSGroupRootMaterialExchangeController_exchangeControllers);
  swift_beginAccess( v0 + OBJC_IVAR____TtC17identityservicesd38IDSGroupRootMaterialExchangeController_exchangeControllers,  v3,  0LL,  0LL);
  return swift_bridgeObjectRetain(*v1);
}

uint64_t sub_1004C9604(uint64_t a1)
{
  BOOL v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC17identityservicesd38IDSGroupRootMaterialExchangeController_exchangeControllers);
  swift_beginAccess(v3, v6, 1LL, 0LL);
  uint64_t v4 = *v3;
  uint64_t *v3 = a1;
  return swift_bridgeObjectRelease(v4);
}

uint64_t (*sub_1004C9654(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

uint64_t sub_1004C9698()
{
  return sub_100427CF4(&OBJC_IVAR____TtC17identityservicesd38IDSGroupRootMaterialExchangeController_materialProvider);
}

uint64_t sub_1004C96A4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2 + OBJC_IVAR____TtC17identityservicesd38IDSGroupRootMaterialExchangeController_materialProvider;
  swift_beginAccess(v5, v8, 1LL, 0LL);
  *(void *)(v5 + 8) = a2;
  swift_unknownObjectWeakAssign(v5, a1);
  return swift_unknownObjectRelease(a1, v6);
}

void (*sub_1004C970C(void *a1))(uint64_t a1, char a2)
{
  BOOL v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC17identityservicesd38IDSGroupRootMaterialExchangeController_materialProvider;
  void v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess(v1 + v4, v3, 33LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = Strong;
  v3[4] = v7;
  return sub_100412358;
}

uint64_t sub_1004C9780()
{
  return sub_100427CF4(&OBJC_IVAR____TtC17identityservicesd38IDSGroupRootMaterialExchangeController_delegate);
}

void sub_1004C978C(void *a1, uint64_t a2)
{
  uint64_t v5 = v2 + OBJC_IVAR____TtC17identityservicesd38IDSGroupRootMaterialExchangeController_delegate;
  swift_beginAccess(v5, v6, 1LL, 0LL);
  *(void *)(v5 + 8) = a2;
  swift_unknownObjectWeakAssign(v5, a1);
}

void (*sub_1004C97F0(void *a1))(id **a1, char a2)
{
  BOOL v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC17identityservicesd38IDSGroupRootMaterialExchangeController_delegate;
  void v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess(v1 + v4, v3, 33LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = Strong;
  v3[4] = v7;
  return sub_10041D524;
}

id sub_1004C9864(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v11 = objc_allocWithZone(v5);
  id v12 = sub_1004CB440(a2, a3, a4, a5);

  return v12;
}

void sub_1004C98CC()
{
  uint64_t v1 = v0;
  uint64_t v2 = (os_unfair_lock_s *)(*(void *)((char *)v0
                                      + OBJC_IVAR____TtC17identityservicesd38IDSGroupRootMaterialExchangeController_lock)
                          + 16LL);
  os_unfair_lock_lock(v2);
  v46[0] = &_swiftEmptySetSingleton;
  uint64_t v3 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xA0LL))();
  if (v3)
  {
    uint64_t v5 = v3;
    uint64_t v6 = v4;
    uint64_t ObjectType = swift_getObjectType(v3);
    uint64_t v8 = (*(uint64_t (**)(void, void, void, void, uint64_t, uint64_t))(v6 + 8))( *(void *)((char *)v0 + OBJC_IVAR____TtC17identityservicesd38IDSGroupRootMaterialExchangeController_groupID),  *(void *)((char *)v0 + OBJC_IVAR____TtC17identityservicesd38IDSGroupRootMaterialExchangeController_groupID + 8),  *(void *)((char *)v0 + OBJC_IVAR____TtC17identityservicesd38IDSGroupRootMaterialExchangeController_sessionID),  *(void *)((char *)v0 + OBJC_IVAR____TtC17identityservicesd38IDSGroupRootMaterialExchangeController_sessionID + 8),  ObjectType,  v6);
    sub_100490064(v8);
    uint64_t v3 = swift_unknownObjectRelease(v5, v9);
  }

  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v11 = static os_log_type_t.default.getter(v10);
  lock = v2;
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc(22LL, -1LL);
    uint64_t v13 = swift_slowAlloc(64LL, -1LL);
    v44[0] = v13;
    *(_DWORD *)uint64_t v12 = 136315394;
    uint64_t v42 = sub_1003FFBB0(0xD000000000000018LL, 0x8000000100841D60LL, v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, v43, v12 + 4, v12 + 12);
    *(_WORD *)(v12 + 1sub_10040A648(v1 + 2) = 2080;
    swift_beginAccess(v46, v39, 0LL, 0LL);
    uint64_t v14 = v46[0];
    uint64_t v15 = type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer(0LL);
    uint64_t v16 = sub_10040A2B0( (unint64_t *)&unk_1009B9980,  type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer,  (uint64_t)&unk_10071BF14);
    swift_bridgeObjectRetain(v14);
    uint64_t v18 = Set.description.getter(v17, v15, v16);
    unint64_t v20 = v19;
    swift_bridgeObjectRelease(v14);
    uint64_t v42 = sub_1003FFBB0(v18, v20, v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, v43, v12 + 14, v12 + 22);
    swift_bridgeObjectRelease(v20);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "%s: materials: %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy(v13, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1LL, -1LL);
    swift_slowDealloc(v12, -1LL, -1LL);
  }

  uint64_t v21 = (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x88LL))();
  uint64_t v22 = *(void *)(v21 + 16);
  if (v22)
  {
    uint64_t v37 = v21;
    uint64_t v23 = v21 + 32;
    swift_beginAccess(v46, v45, 0LL, 0LL);
    do
    {
      sub_100401ACC(v23, (uint64_t)v44);
      uint64_t v28 = sub_100401ACC((uint64_t)v44, (uint64_t)&v42);
      unint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
      os_log_type_t v30 = static os_log_type_t.default.getter(v29);
      if (os_log_type_enabled(v29, v30))
      {
        uint64_t v31 = swift_slowAlloc(22LL, -1LL);
        uint64_t v32 = swift_slowAlloc(64LL, -1LL);
        uint64_t v41 = v32;
        *(_DWORD *)uint64_t v31 = 136315394;
        *(void *)(v31 + 4) = sub_1003FFBB0(0xD000000000000018LL, 0x8000000100841D60LL, &v41);
        *(_WORD *)(v31 + 1sub_10040A648(v1 + 2) = 2080;
        sub_100401ACC((uint64_t)&v42, (uint64_t)v40);
        uint64_t v33 = sub_1003F5CB4(&qword_1009BBE28);
        uint64_t v34 = String.init<A>(describing:)(v40, v33);
        unint64_t v36 = v35;
        *(void *)(v31 + 14) = sub_1003FFBB0(v34, v35, &v41);
        swift_bridgeObjectRelease(v36);
        sub_10040A648(&v42);
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "%s: calling ExchangeController %s", (uint8_t *)v31, 0x16u);
        swift_arrayDestroy(v32, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v32, -1LL, -1LL);
        swift_slowDealloc(v31, -1LL, -1LL);
      }

      else
      {

        sub_10040A648(&v42);
      }

      uint64_t v24 = v44[4];
      sub_10040A238(v44, v44[3]);
      uint64_t v25 = v46[0];
      unint64_t v26 = *(void (**)(__n128))(v24 + 16);
      __n128 v27 = swift_bridgeObjectRetain(v46[0]);
      v26(v27);
      swift_bridgeObjectRelease(v25);
      sub_10040A648(v44);
      v23 += 40LL;
      --v22;
    }

    while (v22);
    uint64_t v21 = v37;
  }

  swift_bridgeObjectRelease(v21);
  swift_bridgeObjectRelease(v46[0]);
  os_unfair_lock_unlock(lock);
}

void sub_1004C9D58(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 >= 0) {
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    uint64_t v2 = __CocoaSet.makeIterator()(a1);
    unint64_t v3 = sub_100485210();
    uint64_t v4 = sub_10040A2B0( (unint64_t *)&qword_1009BC4C0,  (uint64_t (*)(uint64_t))sub_100485210,  (uint64_t)&protocol conformance descriptor for NSObject);
    a1 = (uint64_t)Set.Iterator.init(_cocoa:)(v27, v2, v3, v4);
    uint64_t v1 = v27[0];
    uint64_t v24 = v27[1];
    uint64_t v5 = v27[2];
    uint64_t v6 = v27[3];
    unint64_t v7 = v27[4];
  }

  else
  {
    uint64_t v6 = 0LL;
    uint64_t v8 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v24 = a1 + 56;
    uint64_t v5 = ~v8;
    uint64_t v9 = -v8;
    if (v9 < 64) {
      uint64_t v10 = ~(-1LL << v9);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v7 = v10 & *(void *)(a1 + 56);
  }

  int64_t v11 = (unint64_t)(v5 + 64) >> 6;
  if (v1 < 0) {
    goto LABEL_12;
  }
  while (1)
  {
    if (v7)
    {
      uint64_t v12 = (v7 - 1) & v7;
      unint64_t v13 = __clz(__rbit64(v7)) | (v6 << 6);
      uint64_t v14 = v6;
      goto LABEL_31;
    }

    int64_t v21 = v6 + 1;
    if (__OFADD__(v6, 1LL)) {
      break;
    }
    if (v21 >= v11) {
      goto LABEL_34;
    }
    unint64_t v22 = *(void *)(v24 + 8 * v21);
    uint64_t v14 = v6 + 1;
    if (!v22)
    {
      uint64_t v14 = v6 + 2;
      if (v6 + 2 >= v11) {
        goto LABEL_34;
      }
      unint64_t v22 = *(void *)(v24 + 8 * v14);
      if (!v22)
      {
        uint64_t v14 = v6 + 3;
        if (v6 + 3 >= v11) {
          goto LABEL_34;
        }
        unint64_t v22 = *(void *)(v24 + 8 * v14);
        if (!v22)
        {
          uint64_t v14 = v6 + 4;
          if (v6 + 4 >= v11) {
            goto LABEL_34;
          }
          unint64_t v22 = *(void *)(v24 + 8 * v14);
          if (!v22)
          {
            uint64_t v14 = v6 + 5;
            if (v6 + 5 >= v11) {
              goto LABEL_34;
            }
            unint64_t v22 = *(void *)(v24 + 8 * v14);
            if (!v22)
            {
              uint64_t v23 = v6 + 6;
              while (v11 != v23)
              {
                unint64_t v22 = *(void *)(v24 + 8 * v23++);
                if (v22)
                {
                  uint64_t v14 = v23 - 1;
                  goto LABEL_30;
                }
              }

uint64_t sub_1004C9FF0(uint64_t a1)
{
  uint64_t v3 = (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x88LL))();
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 + 16);
  if (!v5) {
    return swift_bridgeObjectRelease(v3);
  }
  uint64_t v6 = v3 + 32;
  do
  {
    sub_100401ACC(v6, (uint64_t)v10);
    uint64_t v7 = v11;
    uint64_t v8 = v12;
    sub_10040A238(v10, v11);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(a1, v7, v8);
    sub_10040A648(v10);
    v6 += 40LL;
    --v5;
  }

  while (v5);
  return swift_bridgeObjectRelease(v4);
}

void *sub_1004CA0C8(uint64_t a1)
{
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000LL) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    sub_1004251E4((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v3 = v12;
  }

  else
  {
    uint64_t v3 = &_swiftEmptySetSingleton;
  }

  uint64_t v16 = v3;
  uint64_t v4 = (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x88LL))();
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 + 16);
  if (v6)
  {
    uint64_t v7 = v4 + 32;
    do
    {
      sub_100401ACC(v7, (uint64_t)v13);
      uint64_t v8 = v14;
      uint64_t v9 = v15;
      sub_10040A238(v13, v14);
      uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 24))(a1, v8, v9);
      sub_1004C9D58(v10);
      sub_10040A648(v13);
      v7 += 40LL;
      --v6;
    }

    while (v6);
    swift_bridgeObjectRelease(v5);
    return v16;
  }

  else
  {
    swift_bridgeObjectRelease(v4);
  }

  return v3;
}

uint64_t sub_1004CA1DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (*(uint64_t (**)(void))((swift_isaMask & *v3) + 0x88LL))();
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v7 + 16);
  if (!v9) {
    return swift_bridgeObjectRelease(v7);
  }
  uint64_t v10 = v7 + 32;
  do
  {
    sub_100401ACC(v10, (uint64_t)v14);
    uint64_t v11 = v15;
    uint64_t v12 = v16;
    sub_10040A238(v14, v15);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 32))(a1, a2, a3, v11, v12);
    sub_10040A648(v14);
    v10 += 40LL;
    --v9;
  }

  while (v9);
  return swift_bridgeObjectRelease(v8);
}

uint64_t sub_1004CA2D0(uint64_t a1)
{
  uint64_t v3 = (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x88LL))();
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 + 16);
  if (!v5) {
    return swift_bridgeObjectRelease(v3);
  }
  uint64_t v6 = v3 + 32;
  do
  {
    sub_100401ACC(v6, (uint64_t)v10);
    uint64_t v7 = v11;
    uint64_t v8 = v12;
    sub_10040A238(v10, v11);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 40))(a1, v7, v8);
    sub_10040A648(v10);
    v6 += 40LL;
    --v5;
  }

  while (v5);
  return swift_bridgeObjectRelease(v4);
}

uint64_t sub_1004CA3A8(uint64_t a1)
{
  uint64_t v3 = (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x88LL))();
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 + 16);
  if (!v5) {
    return swift_bridgeObjectRelease(v3);
  }
  uint64_t v6 = v3 + 32;
  do
  {
    sub_100401ACC(v6, (uint64_t)v10);
    uint64_t v7 = v11;
    uint64_t v8 = v12;
    sub_10040A238(v10, v11);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 56))(a1, v7, v8);
    sub_10040A648(v10);
    v6 += 40LL;
    --v5;
  }

  while (v5);
  return swift_bridgeObjectRelease(v4);
}

uint64_t sub_1004CA480(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (*(uint64_t (**)(void))((swift_isaMask & *v2) + 0x88LL))();
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 + 16);
  if (!v7) {
    return swift_bridgeObjectRelease(v5);
  }
  uint64_t v8 = v5 + 32;
  uint64_t v9 = a2 & 0xFFFFFFFFFFLL;
  do
  {
    sub_100401ACC(v8, (uint64_t)v13);
    uint64_t v10 = v14;
    uint64_t v11 = v15;
    sub_10040A238(v13, v14);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 48))(a1, v9, v10, v11);
    sub_10040A648(v13);
    v8 += 40LL;
    --v7;
  }

  while (v7);
  return swift_bridgeObjectRelease(v6);
}

void sub_1004CA564(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (*(uint64_t (**)(void))((swift_isaMask & *v2) + 0xB8LL))();
  if (v5)
  {
    uint64_t v7 = v6;
    id v9 = (id)v5;
    uint64_t ObjectType = swift_getObjectType(v5);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 8))(a1, a2, ObjectType, v7);
  }

uint64_t sub_1004CA5F4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v7 = (*(uint64_t (**)(void))((swift_isaMask & *v3) + 0x88LL))();
  uint64_t v8 = *(void *)(v7 + 16);
  if (!v8) {
    return swift_bridgeObjectRelease(v7);
  }
  uint64_t v18 = v7;
  uint64_t v9 = v7 + 32;
  do
  {
    sub_100401ACC(v9, (uint64_t)v20);
    uint64_t v11 = v21;
    uint64_t v10 = v22;
    sub_10040A238(v20, v21);
    (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t))(*(void *)(v10 + 8) + 8LL))(a1, a2, a3, v11);
    uint64_t v12 = swift_bridgeObjectRetain_n(a3, 2LL);
    unint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v14 = static os_log_type_t.default.getter(v13);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = swift_slowAlloc(12LL, -1LL);
      uint64_t v16 = swift_slowAlloc(32LL, -1LL);
      uint64_t v19 = v16;
      *(_DWORD *)uint64_t v15 = 136315138;
      swift_bridgeObjectRetain(a3);
      *(void *)(v15 + 4) = sub_1003FFBB0(a2, a3, &v19);
      swift_bridgeObjectRelease_n(a3, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%s", (uint8_t *)v15, 0xCu);
      swift_arrayDestroy(v16, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1LL, -1LL);
      swift_slowDealloc(v15, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(a3, 2LL);
    }

    sub_10040A648(v20);
    v9 += 40LL;
    --v8;
  }

  while (v8);
  return swift_bridgeObjectRelease(v18);
}

id sub_1004CA818()
{
  return sub_1004CB2D8(type metadata accessor for IDSGroupRootMaterialExchangeController);
}

uint64_t sub_1004CA8CC()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **v0) + 0xE0LL))();
}

uint64_t sub_1004CA904()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **v0) + 0xE8LL))();
}

uint64_t sub_1004CA93C()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **v0) + 0xF0LL))();
}

uint64_t sub_1004CA974()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **v0) + 0xF8LL))();
}

uint64_t sub_1004CA9AC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))((swift_isaMask & **v2) + 0x108LL))(a1, a2 & 0xFFFFFFFFFFLL);
}

uint64_t sub_1004CA9E8()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **v0) + 0x100LL))();
}

uint64_t sub_1004CAA20()
{
  return (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x110LL))();
}

uint64_t sub_1004CAA3C()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **v0) + 0x118LL))();
}

uint64_t sub_1004CAA94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = type metadata accessor for IDSGroupEncryptionDefaultCryptoHandler();
  uint64_t v9 = v5;
  id v10 = IDSDSessionKeyValueDelivery.__allocating_init()();
  uint64_t ObjectType = swift_getObjectType(v9);

  uint64_t v13 = *(void *)(a2 + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_groupID);
  uint64_t v12 = *(void *)(a2 + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_groupID + 8);
  v23[3] = v8;
  v23[4] = &off_100907B08;
  uint64_t v14 = *(void *)(a2 + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_sessionID);
  uint64_t v15 = *(void *)(a2 + OBJC_IVAR____TtC17identityservicesd40IDSGroupEncryptionControllerGroupSession_sessionID + 8);
  v23[0] = v10;
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128, _UNKNOWN **, uint64_t, void *))(ObjectType + 296);
  swift_bridgeObjectRetain(v12);
  __n128 v17 = swift_bridgeObjectRetain(v15);
  uint64_t v18 = v16(a1, v13, v12, v14, v15, a3, a4, a2, v17, &off_1009071E8, a5, v23);
  swift_deallocPartialClassInstance( v9,  ObjectType,  *(unsigned int *)((swift_isaMask & *v9) + 0x30LL),  *(unsigned __int16 *)((swift_isaMask & *v9) + 0x34LL));
  return v18;
}

void *sub_1004CAC48( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, void *a10)
{
  id v19 = objc_allocWithZone(v10);
  return sub_1004CACF0(a1, a2, a3, a4, a5, a6, a7, a8, a9, *((uint64_t *)&a9 + 1), a10);
}

void *sub_1004CACF0( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  uint64_t v12 = v11;
  uint64_t v19 = type metadata accessor for IDSGroupQUICMaterialExchangeController(0LL);
  sub_100401ACC((uint64_t)a11, (uint64_t)&v71);
  uint64_t v20 = v12;
  swift_bridgeObjectRetain(a5);
  uint64_t v64 = v19;
  id v21 = sub_10041D594((uint64_t)&v71, a6, a7, a4, a5);
  *(void *)&v20[OBJC_IVAR____TtC17identityservicesd45IDSGroupDefaultRootMaterialExchangeController_quicMaterialExchangeProvider] = v21;
  uint64_t v22 = v21;

  swift_bridgeObjectRetain(a5);
  swift_bridgeObjectRetain(a3);
  uint64_t v23 = a2;
  id v24 = sub_1004CB440(a2, a3, a4, a5);
  uint64_t v25 = type metadata accessor for IDSGroupPushMaterialExchangeController(0LL);
  sub_100401ACC((uint64_t)a11, (uint64_t)&v71);
  id v26 = v24;
  swift_unknownObjectRetain(a8, v27);
  swift_unknownObjectRetain(a10, v28);
  uint64_t v68 = a8;
  unint64_t v29 = sub_100427E18(v23, a3, a4, a5, a8, a9, a10, &v71);
  os_log_type_t v30 = v26;
  uint64_t v31 = a1;
  uint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
  os_log_type_t v33 = static os_log_type_t.default.getter(v32);
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v34 = swift_slowAlloc(24LL, -1LL);
    uint64_t v35 = swift_slowAlloc(32LL, -1LL);
    *(void *)&__int128 v71 = v35;
    *(_DWORD *)uint64_t v34 = 136315650;
    uint64_t v69 = sub_1003FFBB0(0xD000000000000064LL, 0x80000001008430C0LL, (uint64_t *)&v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v34 + 4, v34 + 12);
    *(_WORD *)(v34 + 1sub_10040A648(v1 + 2) = 1024;
    LODWORD(v69) = v31[OBJC_IVAR____TtC17identityservicesd31IDSGroupEncryptionConfiguration_allowPushMaterialExchange];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, (char *)&v69 + 4, v34 + 14, v34 + 18);
    *(_WORD *)(v34 + 18) = 1024;
    LODWORD(v69) = v31[OBJC_IVAR____TtC17identityservicesd31IDSGroupEncryptionConfiguration_allowQUICMaterialExchange];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, (char *)&v69 + 4, v34 + 20, v34 + 24);

    _os_log_impl( (void *)&_mh_execute_header,  v32,  v33,  "%s: allowPushMaterialExchange: %{BOOL}d; allowQUICMaterialExchange: %{BOOL}d",
      (uint8_t *)v34,
      0x18u);
    swift_arrayDestroy(v35, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1LL, -1LL);
    swift_slowDealloc(v34, -1LL, -1LL);
  }

  else
  {
  }

  if (v31[OBJC_IVAR____TtC17identityservicesd31IDSGroupEncryptionConfiguration_allowPushMaterialExchange] == 1)
  {
    unint64_t v36 = *(void (**)(void *, _UNKNOWN **))((swift_isaMask & *v29) + 0xB0LL);
    uint64_t v37 = v30;
    v36(v30, &off_100907CC0);
    unint64_t v38 = *(uint64_t (**)(uint64_t *))((swift_isaMask & *v37) + 0x98LL);
    uint64_t v39 = v37;
    uint64_t v40 = v29;
    uint64_t v66 = (void (*)(uint64_t *, void))v38(&v69);
    uint64_t v42 = v41;
    uint64_t v43 = (void *)*v41;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v41);
    *uint64_t v42 = v43;
    uint64_t v45 = v22;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v43 = sub_1004CB320(0LL, v43[2] + 1LL, 1, v43);
      *uint64_t v42 = v43;
    }

    unint64_t v47 = v43[2];
    unint64_t v46 = v43[3];
    if (v47 >= v46 >> 1)
    {
      uint64_t v43 = sub_1004CB320((void *)(v46 > 1), v47 + 1, 1, v43);
      *uint64_t v42 = v43;
    }

    uint64_t v72 = v25;
    uint64_t v73 = &off_100905A48;
    *(void *)&__int128 v71 = v40;
    v43[2] = v47 + 1;
    sub_10043D79C(&v71, (uint64_t)&v43[5 * v47 + 4]);
    v66(&v69, 0LL);

    uint64_t v22 = v45;
  }

  if (v31[OBJC_IVAR____TtC17identityservicesd31IDSGroupEncryptionConfiguration_allowQUICMaterialExchange] == 1)
  {
    uint64_t v48 = *(void (**)(void *, _UNKNOWN **))((swift_isaMask & *v22) + 0xC0LL);
    unint64_t v49 = v30;
    v48(v30, &off_100907CC0);
    uint64_t v50 = *(uint64_t (**)(uint64_t *))((swift_isaMask & *v49) + 0x98LL);
    int64_t v51 = v22;
    uint64_t v22 = v49;
    uint64_t v52 = (void (*)(uint64_t *, void))v50(&v69);
    uint64_t v54 = v53;
    uint64_t v55 = (void *)*v53;
    char v56 = swift_isUniquelyReferenced_nonNull_native(*v53);
    *uint64_t v54 = v55;
    if ((v56 & 1) == 0)
    {
      uint64_t v55 = sub_1004CB320(0LL, v55[2] + 1LL, 1, v55);
      *uint64_t v54 = v55;
    }

    unint64_t v58 = v55[2];
    unint64_t v57 = v55[3];
    if (v58 >= v57 >> 1)
    {
      uint64_t v55 = sub_1004CB320((void *)(v57 > 1), v58 + 1, 1, v55);
      *uint64_t v54 = v55;
    }

    uint64_t v72 = v64;
    uint64_t v73 = &off_1009057B0;
    *(void *)&__int128 v71 = v51;
    v55[2] = v58 + 1;
    sub_10043D79C(&v71, (uint64_t)&v55[5 * v58 + 4]);
    v52(&v69, 0LL);

    swift_unknownObjectRelease(v68, v59);
    swift_unknownObjectRelease(a10, v60);
    unint64_t v29 = v22;
  }

  else
  {

    swift_unknownObjectRelease(v68, v61);
    swift_unknownObjectRelease(a10, v62);
  }

  sub_10040A648(a11);
  return v30;
}

void sub_1004CB290()
{
}

uint64_t sub_1004CB2BC(uint64_t a1, uint64_t a2)
{
  return swift_unknownObjectRelease( *(void *)(v2 + OBJC_IVAR____TtC17identityservicesd45IDSGroupDefaultRootMaterialExchangeController_quicMaterialExchangeProvider),  a2);
}

id sub_1004CB2CC()
{
  return sub_1004CB2D8(type metadata accessor for IDSGroupDefaultRootMaterialExchangeController);
}

id sub_1004CB2D8(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1(0LL);
  return objc_msgSendSuper2(&v3, "dealloc");
}

void *sub_1004CB320(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_1003F5CB4(&qword_1009BBE20);
      uint64_t v11 = (void *)swift_allocObject(v10, 40 * v9 + 32, 7LL);
      size_t v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
      uint64_t v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[5 * v8 + 4]) {
          memmove(v13, a4 + 4, 40 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_22;
      }
    }

    else
    {
      uint64_t v11 = _swiftEmptyArrayStorage;
      uint64_t v13 = &_swiftEmptyArrayStorage[4];
    }

    sub_1004CB664(0LL, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

id sub_1004CB440(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = v4;
  sub_10048ADB4(2u);
  *(void *)&v9[OBJC_IVAR____TtC17identityservicesd38IDSGroupRootMaterialExchangeController_exchangeControllers] = _swiftEmptyArrayStorage;
  uint64_t v10 = &v9[OBJC_IVAR____TtC17identityservicesd38IDSGroupRootMaterialExchangeController_materialProvider];
  *((void *)v10 + Hasher._combine(_:)(v0 & 1) = 0LL;
  swift_unknownObjectWeakInit(v10, 0LL);
  uint64_t v11 = &v9[OBJC_IVAR____TtC17identityservicesd38IDSGroupRootMaterialExchangeController_delegate];
  *((void *)v11 + Hasher._combine(_:)(v0 & 1) = 0LL;
  swift_unknownObjectWeakInit(v11, 0LL);
  uint64_t v12 = OBJC_IVAR____TtC17identityservicesd38IDSGroupRootMaterialExchangeController_lock;
  uint64_t v13 = sub_1003F5CB4((uint64_t *)&unk_1009B9860);
  uint64_t v14 = swift_allocObject(v13, 20LL, 7LL);
  *(_DWORD *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
  *(void *)&v9[v12] = v14;
  uint64_t v15 = &v9[OBJC_IVAR____TtC17identityservicesd38IDSGroupRootMaterialExchangeController_groupID];
  *(void *)uint64_t v15 = a1;
  *((void *)v15 + Hasher._combine(_:)(v0 & 1) = a2;
  uint64_t v16 = &v9[OBJC_IVAR____TtC17identityservicesd38IDSGroupRootMaterialExchangeController_sessionID];
  *(void *)uint64_t v16 = a3;
  *((void *)v16 + Hasher._combine(_:)(v0 & 1) = a4;

  v18.receiver = v9;
  v18.super_class = (Class)type metadata accessor for IDSGroupRootMaterialExchangeController(0LL);
  return objc_msgSendSuper2(&v18, "init");
}

uint64_t type metadata accessor for IDSGroupRootMaterialExchangeController(uint64_t a1)
{
  return sub_100402020( a1,  (uint64_t *)&unk_1009C6810,  (uint64_t)&nominal type descriptor for IDSGroupRootMaterialExchangeController);
}

uint64_t type metadata accessor for IDSGroupDefaultRootMaterialExchangeController(uint64_t a1)
{
  return sub_100402020( a1,  (uint64_t *)&unk_1009C6820,  (uint64_t)&nominal type descriptor for IDSGroupDefaultRootMaterialExchangeController);
}

uint64_t sub_1004CB574()
{
  return type metadata accessor for IDSGroupRootMaterialExchangeController(0LL);
}

uint64_t sub_1004CB57C(uint64_t a1)
{
  uint64_t result = type metadata accessor for Logger(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = &unk_10071CFD8;
    void v4[2] = &unk_10071CFD8;
    v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    void v4[4] = &unk_10071CFF0;
    void v4[5] = &unk_10071CFF0;
    void v4[6] = (char *)&value witness table for Builtin.NativeObject + 64;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 7LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1004CB61C()
{
  return type metadata accessor for IDSGroupDefaultRootMaterialExchangeController(0LL);
}

uint64_t sub_1004CB624(uint64_t a1)
{
  uint64_t v2 = "\b";
  return swift_updateClassMetadata2(a1, 256LL, 1LL, &v2, a1 + 288);
}

uint64_t sub_1004CB664(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  unint64_t v6 = a4 + 40 * a1 + 32;
  unint64_t v7 = a3 + 40 * v4;
  if (v6 >= v7 || v6 + 40 * v4 <= a3)
  {
    sub_1003F5CB4(&qword_1009BBE28);
    swift_arrayInitWithCopy(a3);
    return v7;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1004CB770()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC17identityservicesd30IDSGlobalLinkP2PKeyNegotiation_delegate;
  swift_beginAccess(v0 + OBJC_IVAR____TtC17identityservicesd30IDSGlobalLinkP2PKeyNegotiation_delegate, v3, 0LL, 0LL);
  return swift_unknownObjectWeakLoadStrong(v1);
}

void sub_1004CB7BC(void *a1, uint64_t a2)
{
  uint64_t v5 = v2 + OBJC_IVAR____TtC17identityservicesd30IDSGlobalLinkP2PKeyNegotiation_delegate;
  swift_beginAccess(v5, v6, 1LL, 0LL);
  *(void *)(v5 + 8) = a2;
  swift_unknownObjectWeakAssign(v5, a1);
}

void (*sub_1004CB820(void *a1))(id **a1, char a2)
{
  unint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC17identityservicesd30IDSGlobalLinkP2PKeyNegotiation_delegate;
  void v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess(v1 + v4, v3, 33LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v5);
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = Strong;
  v3[4] = v7;
  return sub_10041D524;
}

id sub_1004CB894(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v15 = (char *)objc_allocWithZone(v7);
  sub_10048ADB4(6u);
  uint64_t v16 = &v15[OBJC_IVAR____TtC17identityservicesd30IDSGlobalLinkP2PKeyNegotiation_delegate];
  *((void *)v16 + Hasher._combine(_:)(v0 & 1) = 0LL;
  uint64_t v17 = swift_unknownObjectWeakInit(v16, 0LL);
  swift_beginAccess(v17, v22, 1LL, 0LL);
  *((void *)v16 + Hasher._combine(_:)(v0 & 1) = a2;
  swift_unknownObjectWeakAssign(v16, a1);
  objc_super v18 = &v15[OBJC_IVAR____TtC17identityservicesd30IDSGlobalLinkP2PKeyNegotiation_sessionID];
  *(void *)objc_super v18 = a3;
  *((void *)v18 + Hasher._combine(_:)(v0 & 1) = a4;
  *(_DWORD *)&v15[OBJC_IVAR____TtC17identityservicesd30IDSGlobalLinkP2PKeyNegotiation_localCounter] = a5;
  *(void *)&v15[OBJC_IVAR____TtC17identityservicesd30IDSGlobalLinkP2PKeyNegotiation_localIdentities] = a6;
  *(void *)&v15[OBJC_IVAR____TtC17identityservicesd30IDSGlobalLinkP2PKeyNegotiation_remoteIdentities] = a7;

  v21.receiver = v15;
  v21.super_class = v7;
  id v19 = objc_msgSendSuper2(&v21, "init");

  return v19;
}

uint64_t type metadata accessor for IDSGlobalLinkP2PKeyNegotiation(uint64_t a1)
{
  uint64_t result = qword_1009C6830;
  if (!qword_1009C6830) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for IDSGlobalLinkP2PKeyNegotiation);
  }
  return result;
}

uint64_t sub_1004CBA3C()
{
  v1._countAndFlagsBits = 0xD00000000000002DLL;
  v1._object = (void *)0x80000001008432E0LL;
  String.append(_:)(v1);
  uint64_t v22 = *(unsigned int *)(v0 + OBJC_IVAR____TtC17identityservicesd30IDSGlobalLinkP2PKeyNegotiation_localCounter);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt32,  &protocol witness table for UInt32);
  object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  v4._countAndFlagsBits = 0x6E6F697373657320LL;
  v4._object = (void *)0xEB000000003D4449LL;
  String.append(_:)(v4);
  uint64_t v5 = *(void *)(v0 + OBJC_IVAR____TtC17identityservicesd30IDSGlobalLinkP2PKeyNegotiation_sessionID);
  unint64_t v6 = *(void **)(v0 + OBJC_IVAR____TtC17identityservicesd30IDSGlobalLinkP2PKeyNegotiation_sessionID + 8);
  swift_bridgeObjectRetain(v6);
  v7._countAndFlagsBits = v5;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v6);
  v8._object = (void *)0x8000000100843310LL;
  v8._countAndFlagsBits = 0xD000000000000011LL;
  String.append(_:)(v8);
  uint64_t v9 = *(void *)(v0 + OBJC_IVAR____TtC17identityservicesd30IDSGlobalLinkP2PKeyNegotiation_localIdentities);
  swift_bridgeObjectRetain(v9);
  v11._countAndFlagsBits = Array.description.getter(v10, &type metadata for IDSGlobalLinkP2PKeyNegotiationLocalIdentity);
  uint64_t v12 = v11._object;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v12);
  v13._countAndFlagsBits = 0xD000000000000012LL;
  v13._object = (void *)0x8000000100843330LL;
  String.append(_:)(v13);
  uint64_t v14 = *(void *)(v0 + OBJC_IVAR____TtC17identityservicesd30IDSGlobalLinkP2PKeyNegotiation_remoteIdentities);
  type metadata accessor for SecKey();
  uint64_t v16 = v15;
  swift_bridgeObjectRetain(v14);
  v18._countAndFlagsBits = Array.description.getter(v17, v16);
  id v19 = v18._object;
  String.append(_:)(v18);
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(v19);
  v20._countAndFlagsBits = 62LL;
  v20._object = (void *)0xE100000000000000LL;
  String.append(_:)(v20);
  return HIDWORD(v22);
}

uint64_t sub_1004CBC80()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC17identityservicesd30IDSGlobalLinkP2PKeyNegotiation_localIdentities);
  uint64_t v25 = *(void *)(v1 + 16);
  if (v25)
  {
    uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC17identityservicesd30IDSGlobalLinkP2PKeyNegotiation_remoteIdentities);
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(v1);
    while (1)
    {
      unint64_t v4 = 0LL;
      uint64_t v5 = v0 + OBJC_IVAR____TtC17identityservicesd30IDSGlobalLinkP2PKeyNegotiation_logger;
      uint64_t v21 = v1 + 32;
      uint64_t v22 = OBJC_IVAR____TtC17identityservicesd30IDSGlobalLinkP2PKeyNegotiation_localCounter;
      uint64_t v28 = v2;
      v2 &= 0xC000000000000001LL;
      uint64_t v23 = v1;
      uint64_t v24 = v0;
      while (v4 < *(void *)(v1 + 16))
      {
        if (v3)
        {
          if (v3 < 1) {
            goto LABEL_21;
          }
          unint64_t v27 = v4;
          uint64_t v6 = v21 + 16 * v4;
          Swift::String v7 = *(void **)v6;
          Swift::String v8 = *(void **)(v6 + 8);
          unsigned int v9 = *(_DWORD *)(v0 + v22);
          uint64_t v10 = v28;
          swift_bridgeObjectRetain(v28);
          Swift::String v11 = v7;
          id v26 = v8;
          for (uint64_t i = 0LL; i != v3; ++i)
          {
            if (v2) {
              Swift::String v13 = (__SecKey *)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v10);
            }
            else {
              Swift::String v13 = (__SecKey *)*(id *)(v10 + 8 * i + 32);
            }
            uint64_t v14 = v13;
            uint64_t v15 = sub_1004CE77C(v5, v9, v11, v13);
            if (v16 >> 60 == 15)
            {
            }

            else
            {
              uint64_t v17 = v15;
              unint64_t v18 = v16;
              Data.append(_:)(v15, v16);
              uint64_t v10 = v28;

              sub_10040AD00(v17, v18);
            }
          }

          swift_bridgeObjectRelease(v10);
          uint64_t v1 = v23;
          uint64_t v0 = v24;
          unint64_t v4 = v27;
        }

        if (++v4 == v25)
        {
          swift_bridgeObjectRelease(v1);
          JUMPOUT(0x1004CBE8CLL);
        }
      }

      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      if (v2 < 0) {
        uint64_t v20 = v2;
      }
      else {
        uint64_t v20 = v2 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v1);
      swift_bridgeObjectRetain(v2);
      uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v20);
      swift_bridgeObjectRelease(v2);
    }
  }

  return 0LL;
}

void sub_1004CBF08(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = type metadata accessor for String.Encoding(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1003F5CB4(&qword_1009BBE50);
  __chkstk_darwin(v11, v12);
  v42[5] = (char *)v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v43 = type metadata accessor for SharedSecret(0LL);
  v42[6] = *(void *)(v43 - 8);
  __chkstk_darwin(v14, v15);
  v42[4] = (char *)v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1003F5CB4(&qword_1009BBE58);
  __chkstk_darwin(v17, v18);
  uint64_t v45 = (char *)v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v47 = type metadata accessor for P256.KeyAgreement.PublicKey(0LL);
  uint64_t v46 = *(void *)(v47 - 8);
  __chkstk_darwin(v20, v21);
  unint64_t v44 = (char *)v42 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1003F5CB4((uint64_t *)&unk_1009BBE60);
  __chkstk_darwin(v23, v24);
  unint64_t v49 = (char *)v42 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v51 = type metadata accessor for P256.KeyAgreement.PrivateKey(0LL);
  uint64_t v50 = *(void *)(v51 - 8);
  __chkstk_darwin(v26, v27);
  uint64_t v48 = (char *)v42 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v52 = v2;
  uint64_t v29 = v2 + OBJC_IVAR____TtC17identityservicesd30IDSGlobalLinkP2PKeyNegotiation_logger;
  unint64_t v30 = a2 >> 62;
  sub_1004028CC(a1, a2);
  uint64_t v31 = sub_1004028CC(a1, a2);
  uint64_t v55 = v29;
  uint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
  os_log_type_t v33 = static os_log_type_t.default.getter(v32);
  BOOL v34 = os_log_type_enabled(v32, v33);
  v42[3] = v5;
  _OWORD v42[2] = v6;
  v42[1] = v10;
  if (v34)
  {
    uint64_t v35 = swift_slowAlloc(22LL, -1LL);
    char v56 = (void *)swift_slowAlloc(64LL, -1LL);
    uint64_t v61 = v56;
    *(_DWORD *)uint64_t v35 = 136315394;
    uint64_t v59 = sub_1003FFBB0(0x2865766965636572LL, 0xEE00293A626F6C62LL, (uint64_t *)&v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, v60, v35 + 4, v35 + 12);
    *(_WORD *)(v35 + 1sub_10040A648(v1 + 2) = 2080;
    sub_1004028CC(a1, a2);
    uint64_t v36 = Data.description.getter(a1, a2);
    unint64_t v38 = v37;
    sub_100402A84(a1, a2);
    uint64_t v59 = sub_1003FFBB0(v36, v38, (uint64_t *)&v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, v60, v35 + 14, v35 + 22);
    unint64_t v39 = v38;
    unint64_t v30 = a2 >> 62;
    swift_bridgeObjectRelease(v39);
    sub_100402A84(a1, a2);
    sub_100402A84(a1, a2);
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "%s: receiving compound blob %s...", (uint8_t *)v35, 0x16u);
    uint64_t v40 = v56;
    swift_arrayDestroy(v56, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v40, -1LL, -1LL);
    swift_slowDealloc(v35, -1LL, -1LL);
  }

  else
  {

    sub_100402A84(a1, a2);
    sub_100402A84(a1, a2);
  }

  int v57 = 0;
  char v58 = 1;
  BOOL v41 = __OFSUB__(HIDWORD(a1), (_DWORD)a1);
  BOOL v54 = v41;
  uint64_t v53 = HIDWORD(a1) - (int)a1;
  char v56 = _swiftEmptyArrayStorage;
  __asm { BR              X9 }

id sub_1004CC368(uint64_t a1)
{
  if (__OFSUB__(v7, 12LL))
  {
    __break(1u);
    goto LABEL_66;
  }

  if ((uint64_t)v7 - 12 >= a1)
  {
    if (!__OFADD__(a1, 12LL))
    {
      if (a1 + 12 > a1)
      {
        uint64_t v9 = ((uint64_t (*)(void))Data.subdata(in:))();
        uint64_t v11 = v10;
        if ((swift_isUniquelyReferenced_nonNull_native(*(void *)(v8 - 208)) & 1) == 0) {
          *(void *)(v8 - 208) = sub_10046D170( 0LL,  *(void *)(*(void *)(v8 - 208) + 16LL) + 1LL,  1,  *(void **)(v8 - 208));
        }
        uint64_t v12 = *(void *)(v8 - 208);
        unint64_t v14 = *(void *)(v12 + 16);
        unint64_t v13 = *(void *)(v12 + 24);
        if (v14 >= v13 >> 1) {
          *(void *)(v8 - 208) = sub_10046D170((void *)(v13 > 1), v14 + 1, 1, *(void **)(v8 - 208));
        }
        uint64_t v15 = *(void *)(v8 - 208);
        *(void *)(v15 + swift_unknownObjectWeakDestroy(v0 + 16) = v14 + 1;
        uint64_t v16 = v15 + 16 * v14;
        *(void *)(v16 + 3sub_10040A648(v1 + 2) = v9;
        *(void *)(v16 + 40) = v11;
        JUMPOUT(0x1004CC354LL);
      }

      goto LABEL_67;
    }

void sub_1004CE238(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

uint64_t sub_1004CE2DC()
{
  uint64_t v3 = sub_100402A84(v2, v1);
  return ((uint64_t (*)(uint64_t))((char *)sub_1004CE340 + 4 * byte_10071D064[v0 >> 62]))(v3);
}

uint64_t sub_1004CE340()
{
  uint64_t v7 = sub_10040A2B0( (unint64_t *)&unk_1009BBF38,  (uint64_t (*)(uint64_t))&type metadata accessor for Data.Iterator,  (uint64_t)&protocol conformance descriptor for Data.Iterator);
  while (1)
  {
    ((void (*)(uint64_t, uint64_t))dispatch thunk of IteratorProtocol.next())(v0, v7);
    if ((*(_BYTE *)(v6 - 81) & 1) != 0)
    {
      uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
      v12(v3, v0);
      ((void (*)(uint64_t, uint64_t))dispatch thunk of IteratorProtocol.next())(v0, v7);
      v12(v2, v0);
      char v11 = *(_BYTE *)(v6 - 83) ^ 1;
      return v11 & 1;
    }

    unsigned int v8 = *(unsigned __int8 *)(v6 - 82);
    ((void (*)(uint64_t, uint64_t))dispatch thunk of IteratorProtocol.next())(v0, v7);
    if ((*(_BYTE *)(v6 - 85) & 1) != 0) {
      goto LABEL_6;
    }
    unsigned int v9 = *(unsigned __int8 *)(v6 - 86);
    if (v8 < v9) {
      break;
    }
    if (v9 < v8)
    {
LABEL_6:
      uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
      v10(v2, v0);
      v10(v3, v0);
      char v11 = 0;
      return v11 & 1;
    }
  }

  unint64_t v13 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v13(v2, v0);
  v13(v3, v0);
  char v11 = 1;
  return v11 & 1;
}

uint64_t sub_1004CE508@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_10046BD20(a1, a2, a3);
}

id sub_1004CE548()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for IDSGlobalLinkP2PKeyNegotiation(0LL);
  return objc_msgSendSuper2(&v2, "dealloc");
}

void sub_1004CE600(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0x8000000000000000LL) == 0) {
    __asm { BR              X9 }
  }

  __break(1u);
  JUMPOUT(0x1004CE748LL);
}

uint64_t sub_1004CE77C(uint64_t a1, unsigned int a2, __SecKey *a3, __SecKey *a4)
{
  uint64_t v7 = type metadata accessor for SHA256(0LL);
  __chkstk_darwin(v8, v9);
  v10.n128_f64[0] = type metadata accessor for SHA256Digest(0LL);
  __chkstk_darwin(v10, v11);
  unsigned int __src = bswap32(a2);
  uint64_t v49 = sub_10040B3A0(&__src, &v51);
  uint64_t v13 = v12 & 0xFFFFFFFFFFFFFFLL;
  CFErrorRef error = 0LL;
  CFDataRef v14 = SecKeyCopyExternalRepresentation(a3, &error);
  if (v14)
  {
    CFDataRef v15 = v14;
    __int128 v52 = xmmword_1007190F0;
    static Data._conditionallyBridgeFromObjectiveC(_:result:)(v14, &v52);

    unint64_t v16 = *((void *)&v52 + 1);
    if (*((void *)&v52 + 1) >> 60 != 15LL)
    {
      unint64_t v48 = v13;
      uint64_t v29 = v52;
      CFDataRef v30 = SecKeyCopyExternalRepresentation(a4, &error);
      if (v30)
      {
        CFDataRef v31 = v30;
        __int128 v52 = xmmword_1007190F0;
        static Data._conditionallyBridgeFromObjectiveC(_:result:)(v30, &v52);

        uint64_t v32 = *((void *)&v52 + 1);
        if (*((void *)&v52 + 1) >> 60 != 15LL)
        {
          uint64_t v45 = v52;
          uint64_t v53 = v29;
          unint64_t v54 = v16;
          sub_1004028CC(v29, v16);
          Data.append(_:)(v45, v32);
          unint64_t v46 = v54;
          sub_1004028CC(v53, v54);
          sub_10040A2B0( (unint64_t *)&qword_1009B9118,  (uint64_t (*)(uint64_t))&type metadata accessor for SHA256,  (uint64_t)&protocol conformance descriptor for SHA256);
          dispatch thunk of HashFunction.init()(v7);
          __asm { BR              X9 }
        }
      }

      uint64_t v33 = v29;
      CFErrorRef v34 = error;
      if (error)
      {
        unint64_t v35 = v16;
        uint64_t v19 = (os_log_s *)Logger.logObject.getter(v30);
        os_log_type_t v36 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v19, v36))
        {
          uint64_t v37 = swift_slowAlloc(22LL, -1LL);
          uint64_t v38 = swift_slowAlloc(64LL, -1LL);
          *(void *)&__int128 v52 = v38;
          *(_DWORD *)uint64_t v37 = 136315394;
          uint64_t v53 = sub_1003FFBB0(0xD000000000000054LL, 0x80000001008434A0LL, (uint64_t *)&v52);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v37 + 4, v37 + 12);
          *(_WORD *)(v37 + 1sub_10040A648(v1 + 2) = 2080;
          uint64_t v53 = (uint64_t)v34;
          uint64_t v39 = sub_1003F5CB4(&qword_1009BBF48);
          uint64_t v40 = String.init<A>(describing:)(&v53, v39);
          unint64_t v42 = v41;
          uint64_t v53 = sub_1003FFBB0(v40, v41, (uint64_t *)&v52);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v37 + 14, v37 + 22);
          swift_bridgeObjectRelease(v42);
          _os_log_impl( (void *)&_mh_execute_header,  v19,  v36,  "%s: could not get external representation of remote identity: %s",  (uint8_t *)v37,  0x16u);
          swift_arrayDestroy(v38, 2LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v38, -1LL, -1LL);
          swift_slowDealloc(v37, -1LL, -1LL);
        }

        sub_10040AD00(v33, v35);
        uint64_t v27 = v49;
        unint64_t v28 = v48;
        goto LABEL_13;
      }

      sub_10040AD00(v33, v16);
      uint64_t v43 = v49;
      unint64_t v44 = v48;
LABEL_17:
      sub_100402A84(v43, v44);
      return 0LL;
    }
  }

  unint64_t v17 = v13;
  CFErrorRef v18 = error;
  if (!error)
  {
    uint64_t v43 = v49;
    unint64_t v44 = v17;
    goto LABEL_17;
  }

  uint64_t v19 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v20 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = swift_slowAlloc(22LL, -1LL);
    uint64_t v22 = swift_slowAlloc(64LL, -1LL);
    *(void *)&__int128 v52 = v22;
    *(_DWORD *)uint64_t v21 = 136315394;
    uint64_t v53 = sub_1003FFBB0(0xD000000000000054LL, 0x80000001008434A0LL, (uint64_t *)&v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v21 + 4, v21 + 12);
    *(_WORD *)(v21 + 1sub_10040A648(v1 + 2) = 2080;
    uint64_t v53 = (uint64_t)v18;
    uint64_t v23 = sub_1003F5CB4(&qword_1009BBF48);
    uint64_t v24 = String.init<A>(describing:)(&v53, v23);
    unint64_t v26 = v25;
    uint64_t v53 = sub_1003FFBB0(v24, v25, (uint64_t *)&v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v21 + 14, v21 + 22);
    swift_bridgeObjectRelease(v26);
    _os_log_impl( (void *)&_mh_execute_header,  v19,  v20,  "%s: could not get external representation of local identity: %s",  (uint8_t *)v21,  0x16u);
    swift_arrayDestroy(v22, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1LL, -1LL);
    swift_slowDealloc(v21, -1LL, -1LL);
  }

  uint64_t v27 = v49;
  unint64_t v28 = v17;
LABEL_13:
  sub_100402A84(v27, v28);

  return 0LL;
}

void sub_1004CEF5C(void *a1, void *a2)
{
  if (a1)
  {
  }

void sub_1004CEF88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v6.n128_f64[0] = type metadata accessor for SHA256Digest(0LL);
  __chkstk_darwin(v6, v7);
  __asm { BR              X9 }

uint64_t sub_1004CF058(uint64_t a1)
{
  if (BYTE6(v3) == 12LL)
  {
    *(void *)(v7 - 248) = v1;
    *(void *)(v7 - 240) = v2;
    *(void *)(v7 - 23sub_10040A648(v1 + 2) = a1;
    *(void *)(v7 - 224) = v4;
    ((void (*)(void, uint64_t, uint64_t, unint64_t))Data.subdata(in:))(0LL, 4LL, v5, v3);
    uint64_t v9 = v8;
    *(void *)(v7 - 2swift_unknownObjectWeakDestroy(v0 + 16) = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, unint64_t))Data.subdata(in:))( 4LL,  12LL,  v5,  v3);
    *(void *)(v7 - 208) = v10;
    *(void *)(v7 - 200) = v9;
    __asm { BR              X10 }
  }

  uint64_t v11 = sub_1004028CC(v5, v3);
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc(22LL, -1LL);
    *(void *)(v7 - 160) = swift_slowAlloc(32LL, -1LL);
    *(_DWORD *)uint64_t v14 = 136315394;
    *(void *)(v7 - 120) = sub_1003FFBB0(0xD00000000000004FLL, 0x8000000100843450LL, (uint64_t *)(v7 - 160));
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v7 - 120, v7 - 112, v14 + 4, v14 + 12);
    *(_WORD *)(v14 + 1sub_10040A648(v1 + 2) = 2048;
    __asm { BR              X11 }
  }

  sub_100402A84(v5, v3);
  *(_BYTE *)(v7 - 120) = 1;
  return 0x100000000LL;
}

id sub_1004CFDA4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v52 = a6;
  uint64_t v60 = a1;
  uint64_t v10 = type metadata accessor for String.Encoding(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v12, v13);
  CFDataRef v15 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v59 = type metadata accessor for SymmetricKey(0LL);
  uint64_t v54 = *(void *)(v59 - 8);
  __chkstk_darwin(v16, v17);
  uint64_t v51 = (char *)&v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v19, v20);
  uint64_t v22 = (char *)&v50 - v21;
  uint64_t v55 = a4;
  uint64_t v56 = a5;
  uint64_t v63 = a4;
  uint64_t v64 = a5;
  uint64_t v61 = 0LL;
  unint64_t v62 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(36LL);
  unint64_t v23 = v62;
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRelease(v23);
  uint64_t v57 = a2;
  uint64_t v61 = a2;
  unint64_t v62 = a3;
  v24._object = (void *)0x80000001008433F0LL;
  v24._countAndFlagsBits = 0xD000000000000022LL;
  String.append(_:)(v24);
  uint64_t v25 = v61;
  unint64_t v26 = v62;
  static String.Encoding.utf8.getter(v27);
  uint64_t v28 = String.data(using:allowLossyConversion:)(v15, 0LL, v25, v26);
  unint64_t v30 = v29;
  swift_bridgeObjectRelease(v26);
  CFDataRef v31 = *(uint64_t (**)(char *, uint64_t))(v11 + 8);
  uint64_t v58 = v10;
  uint64_t v53 = v31;
  id result = (id)v31(v15, v10);
  if (v30 >> 60 == 15)
  {
    __break(1u);
  }

  else
  {
    uint64_t v33 = type metadata accessor for SHA256(0LL);
    uint64_t v61 = v28;
    unint64_t v62 = v30;
    uint64_t v34 = sub_10040A2B0( (unint64_t *)&qword_1009B9118,  (uint64_t (*)(uint64_t))&type metadata accessor for SHA256,  (uint64_t)&protocol conformance descriptor for SHA256);
    unint64_t v35 = sub_10043D6BC();
    uint64_t v50 = v34;
    SharedSecret.hkdfDerivedSymmetricKey<A, B, C>(using:salt:sharedInfo:outputByteCount:)( v33,  &v63,  &v61,  48LL,  v33,  &type metadata for Data,  &type metadata for Data,  v34,  v35,  v35);
    sub_10040AD00(v28, v30);
    SymmetricKey.withUnsafeBytes<A>(_:)(&v63, sub_1004CE508, 0LL, &type metadata for Data);
    os_log_type_t v36 = *(void (**)(char *, uint64_t))(v54 + 8);
    v36(v22, v59);
    uint64_t v37 = v63;
    uint64_t v54 = v64;
    uint64_t v63 = v55;
    uint64_t v64 = v56;
    uint64_t v61 = 0LL;
    unint64_t v62 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(36LL);
    unint64_t v38 = v62;
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRelease(v38);
    uint64_t v61 = v57;
    unint64_t v62 = a3;
    v39._object = (void *)0x8000000100843420LL;
    v39._countAndFlagsBits = 0xD000000000000022LL;
    String.append(_:)(v39);
    uint64_t v40 = v61;
    unint64_t v41 = v62;
    static String.Encoding.utf8.getter(v42);
    uint64_t v43 = String.data(using:allowLossyConversion:)(v15, 0LL, v40, v41);
    unint64_t v45 = v44;
    swift_bridgeObjectRelease(v41);
    id result = (id)v53(v15, v58);
    if (v45 >> 60 != 15)
    {
      uint64_t v61 = v43;
      unint64_t v62 = v45;
      unint64_t v46 = v51;
      SharedSecret.hkdfDerivedSymmetricKey<A, B, C>(using:salt:sharedInfo:outputByteCount:)( v33,  &v63,  &v61,  48LL,  v33,  &type metadata for Data,  &type metadata for Data,  v50,  v35,  v35);
      sub_10040AD00(v43, v45);
      SymmetricKey.withUnsafeBytes<A>(_:)(&v63, sub_1004CE508, 0LL, &type metadata for Data);
      v36(v46, v59);
      uint64_t v47 = v63;
      uint64_t v48 = v64;
      type metadata accessor for IDSGlobalLinkP2PNegotiatedKeySet();
      uint64_t v49 = v52;
      swift_bridgeObjectRetain(v52);
      return sub_100411088(v37, v54, v47, v48, v49);
    }
  }

  __break(1u);
  return result;
}

unint64_t sub_1004D0158()
{
  unint64_t result = qword_1009BBE88;
  if (!qword_1009BBE88)
  {
    unint64_t result = swift_getWitnessTable(&unk_100718410, &type metadata for IDSGlobalLinkP2PKeyNegotiationLocalIdentity);
    atomic_store(result, (unint64_t *)&qword_1009BBE88);
  }

  return result;
}

uint64_t sub_1004D019C()
{
  return type metadata accessor for IDSGlobalLinkP2PKeyNegotiation(0LL);
}

uint64_t sub_1004D01A4(uint64_t a1)
{
  uint64_t result = type metadata accessor for Logger(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = &unk_10071D0C0;
    void v4[2] = &unk_10071D0D8;
    v4[3] = (char *)&value witness table for Builtin.Int32 + 64;
    void v4[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
    void v4[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 6LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet(uint64_t a1)
{
  uint64_t result = qword_1009C6AD0;
  if (!qword_1009C6AD0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for IDSGroupEncryptionDesiredKeyMaterialSet);
  }
  return result;
}

uint64_t sub_1004D027C()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10040DC2C(v0, qword_1009C7958);
  sub_10040B7C0(v0, (uint64_t)qword_1009C7958);
  return sub_10048ADB4(2u);
}

uint64_t sub_1004D02C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  Hasher.init()(v28, a1, a2);
  char v4 = *(_BYTE *)(v2 + 4);
  LODWORD(v30) = *(_DWORD *)v2;
  BYTE4(v30) = v4;
  unint64_t v5 = sub_10040C97C();
  dispatch thunk of Hashable.hash(into:)(v28, &type metadata for IDSGroupEncryptionDesiredMaterialKind, v5);
  uint64_t v6 = *(void *)(v2 + 8);
  swift_bridgeObjectRetain(v6);
  sub_1004D24BC(v28, v6);
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet(0LL);
  uint64_t v8 = type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
  uint64_t v9 = sub_10040A2B0( &qword_1009B91C8,  type metadata accessor for IDSGroupEncryptionPublicIdentity,  (uint64_t)&unk_10071D2FC);
  dispatch thunk of Hashable.hash(into:)(v28, v8, v9);
  Hasher._combine(_:)(*(void *)(v3 + *(int *)(v7 + 28)));
  Hasher._combine(_:)(*(void *)(v3 + *(int *)(v7 + 32)));
  __int128 v32 = v28[2];
  __int128 v33 = v28[3];
  uint64_t v34 = v29;
  __int128 v30 = v28[0];
  __int128 v31 = v28[1];
  Hasher.finalize()();
  _StringGuts.grow(_:)(95LL);
  v10._countAndFlagsBits = 0x726574614D79654BLL;
  v10._object = (void *)0xEF207465536C6169LL;
  String.append(_:)(v10);
  v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  object = v11._object;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(object);
  v13._object = (void *)0x800000010083EA50LL;
  v13._countAndFlagsBits = 0xD000000000000012LL;
  String.append(_:)(v13);
  v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
  CFDataRef v15 = v14._object;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(v15);
  v16._countAndFlagsBits = 0xD000000000000013LL;
  v16._object = (void *)0x800000010083EA70LL;
  String.append(_:)(v16);
  uint64_t v17 = sub_10040A2B0( &qword_1009B91B8,  type metadata accessor for IDSGroupEncryptionPublicIdentity,  (uint64_t)&unk_10071D364);
  v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v8, v17);
  __n128 v19 = v18._object;
  String.append(_:)(v18);
  swift_bridgeObjectRelease(v19);
  v20._countAndFlagsBits = 0xD000000000000015LL;
  v20._object = (void *)0x8000000100843500LL;
  String.append(_:)(v20);
  v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
  uint64_t v22 = v21._object;
  String.append(_:)(v21);
  swift_bridgeObjectRelease(v22);
  v23._countAndFlagsBits = 0x6169726574616D20LL;
  v23._object = (void *)0xEB000000003A736CLL;
  String.append(_:)(v23);
  v24._countAndFlagsBits = sub_1004D05CC();
  uint64_t v25 = v24._object;
  String.append(_:)(v24);
  swift_bridgeObjectRelease(v25);
  v26._countAndFlagsBits = 62LL;
  v26._object = (void *)0xE100000000000000LL;
  String.append(_:)(v26);
  return 0LL;
}

uint64_t sub_1004D05CC()
{
  uint64_t v1 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  uint64_t v38 = *(void *)(v1 - 8);
  uint64_t v39 = v1;
  __chkstk_darwin(v2, v3);
  uint64_t v36 = (uint64_t)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5, v6);
  uint64_t v37 = (uint64_t)&v33 - v7;
  uint64_t v9 = type metadata accessor for UUID(0LL, v8);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v11, v12);
  Swift::String v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = *(void *)(v0 + 8);
  int64_t v16 = *(void *)(v15 + 16);
  uint64_t v17 = &_swiftEmptyArrayStorage;
  if (v16)
  {
    uint64_t v40 = &_swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v15);
    sub_1004D22C0(0, v16, 0);
    uint64_t result = sub_100437E88(v15);
    int64_t v19 = result;
    int v21 = v20;
    char v23 = v22 & 1;
    uint64_t v34 = v9;
    uint64_t v35 = v15 + 56;
    __int128 v33 = v14;
    while ((v19 & 0x8000000000000000LL) == 0 && v19 < 1LL << *(_BYTE *)(v15 + 32))
    {
      if (*(_DWORD *)(v15 + 36) != v21) {
        goto LABEL_16;
      }
      uint64_t v24 = v37;
      sub_1003F5FC8( *(void *)(v15 + 48) + *(void *)(v38 + 72) * v19,  v37,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      uint64_t v25 = v24;
      uint64_t v26 = v36;
      sub_1003F600C(v25, v36, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v14, v26 + *(int *)(v39 + 20), v9);
      sub_1003F6050(v26, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      uint64_t v17 = v40;
      if ((swift_isUniquelyReferenced_nonNull_native(v40) & 1) == 0)
      {
        sub_1004D22C0(0, v17[2] + 1LL, 1);
        uint64_t v17 = v40;
      }

      unint64_t v28 = v17[2];
      unint64_t v27 = v17[3];
      if (v28 >= v27 >> 1)
      {
        sub_1004D22C0(v27 > 1, v28 + 1, 1);
        uint64_t v17 = v40;
      }

      v17[2] = v28 + 1;
      unint64_t v29 = (unint64_t)v17
      Swift::String v14 = v33;
      uint64_t v9 = v34;
      (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v29, v33, v34);
      uint64_t v40 = v17;
      uint64_t result = sub_100437F28(v19, v21, v23 & 1, v15);
      int64_t v19 = result;
      int v21 = v30;
      char v23 = v31 & 1;
      if (!--v16)
      {
        sub_1004398F4(result, v30, v31 & 1);
        swift_bridgeObjectRelease(v15);
        goto LABEL_13;
      }
    }

    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
  }

  else
  {
LABEL_13:
    uint64_t v32 = Array.description.getter(v17, v9);
    swift_bridgeObjectRelease(v17);
    return v32;
  }

  return result;
}

void sub_1004D0894(void *a1)
{
  uint64_t v133 = a1;
  uint64_t v116 = type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet(0LL);
  __chkstk_darwin(v2, v3);
  __n128 v5 = (char *)&v110 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v110 - v8;
  type metadata accessor for IDSGroupEncryptionMaterialData(0LL);
  __chkstk_darwin(v10, v11);
  uint64_t v123 = (uint64_t)&v110 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13, v14);
  uint64_t v122 = (uint64_t)&v110 - v15;
  __chkstk_darwin(v16, v17);
  uint64_t v131 = (uint64_t)&v110 - v18;
  uint64_t v135 = sub_1003F5CB4(&qword_1009BBF58);
  __chkstk_darwin(v19, v20);
  char v22 = (unint64_t *)((char *)&v110 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v23, v24);
  uint64_t v26 = (uint64_t *)((char *)&v110 - v25);
  uint64_t v119 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  uint64_t v134 = *(void *)(v119 - 8);
  __chkstk_darwin(v27, v28);
  uint64_t v30 = (char *)&v110 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v31, v32);
  uint64_t v121 = (uint64_t)&v110 - v33;
  __chkstk_darwin(v34, v35);
  uint64_t v120 = (uint64_t)&v110 - v36;
  __chkstk_darwin(v37, v38);
  uint64_t v40 = (char *)&v110 - v39;
  __chkstk_darwin(v41, v42);
  uint64_t v132 = (uint64_t)&v110 - v43;
  v140[1] = (uint64_t)&_swiftEmptySetSingleton;
  uint64_t v137 = v1;
  uint64_t v44 = *(void *)(v1 + 8);
  uint64_t v45 = *(void *)(v44 + 56);
  uint64_t v124 = v44 + 56;
  uint64_t v46 = 1LL << *(_BYTE *)(v44 + 32);
  uint64_t v47 = -1LL;
  if (v46 < 64) {
    uint64_t v47 = ~(-1LL << v46);
  }
  unint64_t v48 = v47 & v45;
  int64_t v125 = (unint64_t)(v46 + 63) >> 6;
  uint64_t v115 = v140;
  uint64_t v136 = v44;
  __n128 v49 = swift_bridgeObjectRetain(v44);
  int64_t v50 = 0LL;
  v49.n128_u64[0] = 136315394LL;
  __n128 v114 = v49;
  os_log_type_t v113 = (char *)&type metadata for Any + 8;
  v49.n128_u64[0] = 136315906LL;
  __n128 v112 = v49;
  unint64_t v129 = v9;
  CFDataRef v130 = v5;
  id v127 = v26;
  uint64_t v128 = v22;
  id v118 = v30;
  uint64_t v111 = v40;
  if (v48) {
    goto LABEL_7;
  }
LABEL_8:
  int64_t v54 = v50 + 1;
  if (!__OFADD__(v50, 1LL))
  {
    if (v54 < v125)
    {
      unint64_t v55 = *(void *)(v124 + 8 * v54);
      ++v50;
      if (v55) {
        goto LABEL_21;
      }
      int64_t v50 = v54 + 1;
      if (v54 + 1 >= v125) {
        goto LABEL_34;
      }
      unint64_t v55 = *(void *)(v124 + 8 * v50);
      if (v55) {
        goto LABEL_21;
      }
      int64_t v50 = v54 + 2;
      if (v54 + 2 >= v125) {
        goto LABEL_34;
      }
      unint64_t v55 = *(void *)(v124 + 8 * v50);
      if (v55)
      {
LABEL_21:
        uint64_t v52 = (v55 - 1) & v55;
        for (unint64_t i = __clz(__rbit64(v55)) + (v50 << 6); ; unint64_t i = v51 | (v50 << 6))
        {
          uint64_t v57 = v132;
          sub_1003F5FC8( *(void *)(v136 + 48) + *(void *)(v134 + 72) * i,  v132,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
          sub_1003F600C(v57, (uint64_t)v40, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
          sub_1004D1328((uint64_t)v40, v133, v26);
          sub_100410FD0((uint64_t)v26, (uint64_t)v22, &qword_1009BBF58);
          int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v22, v135);
          unint64_t v138 = v52;
          if (EnumCaseMultiPayload == 1)
          {
            unint64_t v59 = *v22;
            if (qword_1009C6840 != -1) {
              swift_once(&qword_1009C6840, sub_1004D027C);
            }
            uint64_t v60 = type metadata accessor for Logger(0LL);
            sub_10040B7C0(v60, (uint64_t)qword_1009C7958);
            sub_1003F5FC8((uint64_t)v40, (uint64_t)v30, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
            sub_10040F920(v59);
            unint64_t v61 = sub_10040F920(v59);
            unint64_t v62 = (os_log_s *)Logger.logObject.getter(v61);
            uint64_t v63 = (uint64_t)v30;
            os_log_type_t v64 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v62, v64))
            {
              uint64_t v65 = swift_slowAlloc(22LL, -1LL);
              uint64_t v66 = swift_slowAlloc(64LL, -1LL);
              v140[0] = v66;
              *(_DWORD *)uint64_t v65 = v114.n128_u32[0];
              uint64_t v67 = sub_10040A2B0( &qword_1009B90F0,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent,  (uint64_t)&unk_100718F00);
              uint64_t v68 = dispatch thunk of CustomStringConvertible.description.getter(v119, v67);
              unint64_t v70 = v69;
              *(void *)(v65 + 4) = sub_1003FFBB0(v68, v69, v140);
              swift_bridgeObjectRelease(v70);
              sub_1003F6050(v63, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
              *(_WORD *)(v65 + 1sub_10040A648(v1 + 2) = 2080;
              uint64_t v139 = v59;
              sub_10040F920(v59);
              uint64_t v71 = String.init<A>(describing:)( &v139,  &type metadata for IDSGroupEncryptionDesiredKeyMaterialSet.DataError);
              unint64_t v73 = v72;
              *(void *)(v65 + 14) = sub_1003FFBB0(v71, v72, v140);
              swift_bridgeObjectRelease(v73);
              sub_10040F930(v59);
              sub_10040F930(v59);
              _os_log_impl( (void *)&_mh_execute_header,  v62,  v64,  "materialData: could not get material data for material %s: %s",  (uint8_t *)v65,  0x16u);
              swift_arrayDestroy(v66, 2LL, v113);
              uint64_t v74 = v66;
              uint64_t v9 = v129;
              swift_slowDealloc(v74, -1LL, -1LL);
              uint64_t v75 = v65;
              __n128 v5 = v130;
              swift_slowDealloc(v75, -1LL, -1LL);
            }

            else
            {

              sub_10040F930(v59);
              sub_10040F930(v59);
              sub_1003F6050(v63, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
            }

            sub_10040F930(v59);
            uint64_t v26 = v127;
            sub_1004D26A8((uint64_t)v127);
            sub_1003F6050((uint64_t)v40, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
            char v22 = v128;
            uint64_t v30 = (char *)v63;
            unint64_t v48 = v138;
            if (!v138) {
              goto LABEL_8;
            }
          }

          else
          {
            int64_t v126 = v50;
            uint64_t v76 = (uint64_t)v22;
            uint64_t v77 = v131;
            sub_1003F600C(v76, v131, type metadata accessor for IDSGroupEncryptionMaterialData);
            uint64_t v78 = v77;
            uint64_t v79 = v123;
            sub_1003F5FC8(v78, v123, type metadata accessor for IDSGroupEncryptionMaterialData);
            uint64_t v80 = v122;
            sub_10040C73C(v122, v79);
            sub_1003F6050(v80, type metadata accessor for IDSGroupEncryptionMaterialData);
            if (qword_1009C6840 != -1) {
              swift_once(&qword_1009C6840, sub_1004D027C);
            }
            uint64_t v81 = type metadata accessor for Logger(0LL);
            sub_10040B7C0(v81, (uint64_t)qword_1009C7958);
            uint64_t v82 = v120;
            sub_1003F5FC8((uint64_t)v40, v120, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
            uint64_t v83 = v137;
            sub_1003F5FC8(v137, (uint64_t)v9, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
            sub_1003F5FC8(v83, (uint64_t)v5, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
            uint64_t v84 = (uint64_t)v40;
            uint64_t v85 = (uint64_t)v40;
            uint64_t v86 = v121;
            uint64_t v87 = sub_1003F5FC8(v84, v121, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
            CFDataRef v88 = (os_log_s *)Logger.logObject.getter(v87);
            os_log_type_t v89 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v88, v89))
            {
              uint64_t v90 = swift_slowAlloc(42LL, -1LL);
              uint64_t v117 = swift_slowAlloc(96LL, -1LL);
              v140[0] = v117;
              *(_DWORD *)uint64_t v90 = v112.n128_u32[0];
              uint64_t v91 = sub_10040A2B0( &qword_1009B90F0,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent,  (uint64_t)&unk_100718F00);
              uint64_t v92 = dispatch thunk of CustomStringConvertible.description.getter(v119, v91);
              unint64_t v94 = v93;
              uint64_t v139 = sub_1003FFBB0(v92, v93, v140);
              id v95 = v115;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, v115, v90 + 4, v90 + 12);
              swift_bridgeObjectRelease(v94);
              sub_1003F6050(v82, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
              *(_WORD *)(v90 + 1sub_10040A648(v1 + 2) = 2048;
              uint64_t v96 = *(void *)&v129[*(int *)(v116 + 28)];
              sub_1003F6050((uint64_t)v129, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
              uint64_t v139 = v96;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, v95, v90 + 14, v90 + 22);
              *(_WORD *)(v90 + 2sub_10040A648(v1 + 2) = 2080;
              uint64_t v97 = type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
              uint64_t v98 = sub_10040A2B0( &qword_1009B91B8,  type metadata accessor for IDSGroupEncryptionPublicIdentity,  (uint64_t)&unk_10071D364);
              uint64_t v99 = dispatch thunk of CustomStringConvertible.description.getter(v97, v98);
              unint64_t v101 = v100;
              uint64_t v139 = sub_1003FFBB0(v99, v100, v140);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, v95, v90 + 24, v90 + 32);
              swift_bridgeObjectRelease(v101);
              sub_1003F6050((uint64_t)v130, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
              *(_WORD *)(v90 + 3sub_10040A648(v1 + 2) = 2080;
              uint64_t v103 = type metadata accessor for UUID(0LL, v102);
              uint64_t v104 = sub_10040A2B0( &qword_1009B95C0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
              uint64_t v105 = dispatch thunk of CustomStringConvertible.description.getter(v103, v104);
              unint64_t v107 = v106;
              uint64_t v139 = sub_1003FFBB0(v105, v106, v140);
              uint64_t v9 = v129;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, v95, v90 + 34, v90 + 42);
              swift_bridgeObjectRelease(v107);
              sub_1003F6050(v86, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
              _os_log_impl( (void *)&_mh_execute_header,  v88,  v89,  "materialData: encrypted key %sfor participantID: %llu; for public identity: %s, mki: %s",
                (uint8_t *)v90,
                0x2Au);
              uint64_t v108 = v117;
              swift_arrayDestroy(v117, 3LL, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v108, -1LL, -1LL);
              uint64_t v109 = v90;
              __n128 v5 = v130;
              swift_slowDealloc(v109, -1LL, -1LL);

              sub_1003F6050(v131, type metadata accessor for IDSGroupEncryptionMaterialData);
              uint64_t v26 = v127;
              sub_1004D26A8((uint64_t)v127);
              uint64_t v40 = v111;
              sub_1003F6050((uint64_t)v111, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
              char v22 = v128;
              uint64_t v30 = v118;
            }

            else
            {
              sub_1003F6050((uint64_t)v9, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);

              sub_1003F6050(v86, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
              sub_1003F6050((uint64_t)v5, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
              sub_1003F6050(v82, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
              sub_1003F6050(v131, type metadata accessor for IDSGroupEncryptionMaterialData);
              uint64_t v26 = v127;
              sub_1004D26A8((uint64_t)v127);
              sub_1003F6050(v85, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
              char v22 = v128;
              uint64_t v30 = v118;
              uint64_t v40 = (char *)v85;
            }

            int64_t v50 = v126;
            unint64_t v48 = v138;
            if (!v138) {
              goto LABEL_8;
            }
          }

void sub_1004D1328(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v7 = a2[3];
  uint64_t v8 = a2[4];
  sub_10040A238(a2, v7);
  uint64_t v9 = (int *)type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  __n128 v10 = (uint64_t *)(a1 + v9[7]);
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  uint64_t v13 = type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet(0LL);
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 8))( v11,  v12,  (uint64_t)v3 + *(int *)(v13 + 24),  v7,  v8);
  uint64_t v16 = v14;
  if ((v17 & 1) != 0)
  {
    *a3 = v14;
    goto LABEL_5;
  }

  if (*((_BYTE *)v3 + 4))
  {
    sub_10040A268(v14, v15, 0);
    *a3 = 0LL;
LABEL_5:
    uint64_t v18 = sub_1003F5CB4(&qword_1009BBF58);
    swift_storeEnumTagMultiPayload(a3, v18, 1LL);
    return;
  }

  unint64_t v103 = v15;
  int v19 = *v3;
  uint64_t v102 = (int *)sub_1003F5CB4(&qword_1009BB888);
  uint64_t v21 = (char *)a3 + v102[12];
  if ((v19 & 1) != 0)
  {
    *(_BYTE *)a3 = 1;
    uint64_t v62 = a1 + v9[5];
    uint64_t v63 = type metadata accessor for UUID(0LL, v20);
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v63 - 8) + 16LL))(v21, v62, v63);
    uint64_t v64 = sub_1003F5CB4((uint64_t *)&unk_1009B99C0);
    uint64_t inited = swift_initStackObject(v64, v106);
    *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100719140;
    uint64_t v66 = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSRealTimeEncryptionSKI);
    uint64_t v68 = v67;
    uint64_t v104 = v66;
    uint64_t v105 = v67;
    sub_10040A25C(v16, v103, 0);
    swift_bridgeObjectRetain(v68);
    uint64_t v69 = AnyHashable.init<A>(_:)(&v104, &type metadata for String, &protocol witness table for String);
    uint64_t v104 = UUID.uuid.getter(v69);
    LOWORD(v105) = v70;
    BYTE2(v105) = v71;
    BYTE3(v105) = v72;
    BYTE4(v105) = v73;
    BYTE5(v105) = v74;
    BYTE6(v105) = v75;
    HIBYTE(v105) = v76;
    uint64_t v77 = sub_100420C58((uint64_t)&v104, (uint64_t)v106);
    uint64_t v79 = v78;
    swift_bridgeObjectRelease(v68);
    sub_1004B3C38(v77, v79);
    *(void *)(inited + 96) = &type metadata for Data;
    *(void *)(inited + 7sub_10040A648(v1 + 2) = v80;
    *(void *)(inited + 80) = v81;
    uint64_t v104 = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSRealTimeEncryptionSKM);
    uint64_t v105 = v82;
    AnyHashable.init<A>(_:)(&v104, &type metadata for String, &protocol witness table for String);
    *(void *)(inited + 168) = &type metadata for Data;
    *(void *)(inited + 144) = v16;
    *(void *)(inited + 15sub_10040A648(v1 + 2) = v103;
    uint64_t v104 = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSRealTimeEncryptionSKS);
    uint64_t v105 = v83;
    sub_1004028CC(v16, v103);
    AnyHashable.init<A>(_:)(&v104, &type metadata for String, &protocol witness table for String);
    uint64_t v84 = (uint64_t *)(a1 + v9[6]);
    uint64_t v85 = *v84;
    unint64_t v86 = v84[1];
    *(void *)(inited + 240) = &type metadata for Data;
    *(void *)(inited + 2swift_unknownObjectWeakDestroy(v0 + 16) = v85;
    *(void *)(inited + 224) = v86;
    uint64_t v104 = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSRealTimeEncryptionSKGC);
    uint64_t v105 = v87;
    sub_1004028CC(v85, v86);
    AnyHashable.init<A>(_:)(&v104, &type metadata for String, &protocol witness table for String);
    int v88 = *(_DWORD *)(a1 + v9[10]);
    *(void *)(inited + 31sub_10040A648(v1 + 2) = &type metadata for UInt32;
    *(_DWORD *)(inited + 288) = v88;
    uint64_t v104 = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSDSessionMessageRealTimeEncryptionWrapModeKey);
    uint64_t v105 = v89;
    AnyHashable.init<A>(_:)(&v104, &type metadata for String, &protocol witness table for String);
    *(void *)(inited + 384) = &type metadata for Int;
    *(void *)(inited + 360) = 1LL;
    uint64_t v104 = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSRealTimeEncryptionParticipantID);
    uint64_t v105 = v90;
    AnyHashable.init<A>(_:)(&v104, &type metadata for String, &protocol witness table for String);
    uint64_t v91 = *(void *)((char *)v4 + *(int *)(v13 + 32));
    *(void *)(inited + 456) = &type metadata for UInt64;
    *(void *)(inited + 43sub_10040A648(v1 + 2) = v91;
    unint64_t v92 = sub_10040C1F4(inited);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v92);
    id v94 = (id)JWEncodeDictionary(isa);

    if (v94)
    {
      id v95 = (uint64_t *)((char *)a3 + v102[16]);
      uint64_t v96 = v102[20];
      uint64_t v97 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v94);
      uint64_t v99 = v98;

      sub_10040A268(v16, v103, 0);
      sub_10040A268(v16, v103, 0);
      *id v95 = v97;
      v95[1] = v99;
      *(_DWORD *)((char *)a3 + v96) = 0;
      goto LABEL_11;
    }
  }

  else
  {
    *(_BYTE *)a3 = 0;
    uint64_t v22 = a1 + v9[5];
    uint64_t v23 = type metadata accessor for UUID(0LL, v20);
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 16LL))(v21, v22, v23);
    uint64_t v24 = sub_1003F5CB4((uint64_t *)&unk_1009B99C0);
    uint64_t v25 = swift_allocObject(v24, 536LL, 7LL);
    *(_OWORD *)(v25 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100719110;
    uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSRealTimeEncryptionMKI);
    uint64_t v28 = v27;
    uint64_t v104 = v26;
    uint64_t v105 = v27;
    swift_bridgeObjectRetain(v27);
    sub_10040A25C(v16, v103, 0);
    uint64_t v29 = AnyHashable.init<A>(_:)(&v104, &type metadata for String, &protocol witness table for String);
    uint64_t v104 = UUID.uuid.getter(v29);
    LOWORD(v105) = v30;
    BYTE2(v105) = v31;
    BYTE3(v105) = v32;
    BYTE4(v105) = v33;
    BYTE5(v105) = v34;
    BYTE6(v105) = v35;
    HIBYTE(v105) = v36;
    uint64_t v37 = sub_100420C58((uint64_t)&v104, (uint64_t)v106);
    uint64_t v39 = v38;
    swift_bridgeObjectRelease(v28);
    sub_1004B3C38(v37, v39);
    *(void *)(v25 + 96) = &type metadata for Data;
    *(void *)(v25 + 7sub_10040A648(v1 + 2) = v40;
    *(void *)(v25 + 80) = v41;
    uint64_t v104 = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSRealTimeEncryptionMKM);
    uint64_t v105 = v42;
    AnyHashable.init<A>(_:)(&v104, &type metadata for String, &protocol witness table for String);
    *(void *)(v25 + 168) = &type metadata for Data;
    *(void *)(v25 + 144) = v16;
    *(void *)(v25 + 15sub_10040A648(v1 + 2) = v103;
    uint64_t v104 = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSRealTimeEncryptionMKS);
    uint64_t v105 = v43;
    sub_1004028CC(v16, v103);
    AnyHashable.init<A>(_:)(&v104, &type metadata for String, &protocol witness table for String);
    uint64_t v44 = (uint64_t *)(a1 + v9[6]);
    uint64_t v45 = *v44;
    unint64_t v46 = v44[1];
    *(void *)(v25 + 240) = &type metadata for Data;
    *(void *)(v25 + 2swift_unknownObjectWeakDestroy(v0 + 16) = v45;
    *(void *)(v25 + 224) = v46;
    uint64_t v104 = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSRealTimeEncryptionMKGC);
    uint64_t v105 = v47;
    sub_1004028CC(v45, v46);
    AnyHashable.init<A>(_:)(&v104, &type metadata for String, &protocol witness table for String);
    int v48 = *(_DWORD *)(a1 + v9[10]);
    *(void *)(v25 + 31sub_10040A648(v1 + 2) = &type metadata for UInt32;
    *(_DWORD *)(v25 + 288) = v48;
    uint64_t v104 = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSDSessionMessageRealTimeEncryptionWrapModeKey);
    uint64_t v105 = v49;
    AnyHashable.init<A>(_:)(&v104, &type metadata for String, &protocol witness table for String);
    *(void *)(v25 + 384) = &type metadata for Int;
    *(void *)(v25 + 360) = 1LL;
    uint64_t v104 = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSRealTimeEncryptionParticipantID);
    uint64_t v105 = v50;
    AnyHashable.init<A>(_:)(&v104, &type metadata for String, &protocol witness table for String);
    uint64_t v51 = *(void *)((char *)v4 + *(int *)(v13 + 32));
    *(void *)(v25 + 456) = &type metadata for UInt64;
    *(void *)(v25 + 43sub_10040A648(v1 + 2) = v51;
    uint64_t v104 = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSRealTimeEncryptionShortKILength);
    uint64_t v105 = v52;
    AnyHashable.init<A>(_:)(&v104, &type metadata for String, &protocol witness table for String);
    int v53 = *(unsigned __int8 *)(a1 + v9[12]);
    *(void *)(v25 + 528) = &type metadata for UInt8;
    *(_BYTE *)(v25 + 504) = v53;
    unint64_t v54 = sub_10040C1F4(v25);
    Class v55 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v54);
    id v56 = (id)JWEncodeDictionary(v55);

    if (v56)
    {
      uint64_t v57 = (uint64_t *)((char *)a3 + v102[16]);
      uint64_t v58 = v102[20];
      uint64_t v59 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v56);
      uint64_t v61 = v60;
      sub_10040A268(v16, v103, 0);
      sub_10040A268(v16, v103, 0);

      *uint64_t v57 = v59;
      v57[1] = v61;
      *(_DWORD *)((char *)a3 + v58) = v53;
LABEL_11:
      uint64_t v100 = type metadata accessor for IDSGroupEncryptionMaterialData(0LL);
      swift_storeEnumTagMultiPayload(a3, v100, 0LL);
      uint64_t v101 = sub_1003F5CB4(&qword_1009BBF58);
      swift_storeEnumTagMultiPayload(a3, v101, 0LL);
      return;
    }

    __break(1u);
  }

  __break(1u);
}

uint64_t sub_1004D1C24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  __chkstk_darwin(v5, v6);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)&v39 - v11;
  uint64_t result = __chkstk_darwin(v13, v14);
  uint64_t v18 = (char *)&v39 - v16;
  if (a1 == a2) {
    return 1LL;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0LL;
  }
  int64_t v19 = 0LL;
  uint64_t v20 = *(void *)(a1 + 56);
  uint64_t v43 = a1 + 56;
  uint64_t v21 = 1LL << *(_BYTE *)(a1 + 32);
  if (v21 < 64) {
    uint64_t v22 = ~(-1LL << v21);
  }
  else {
    uint64_t v22 = -1LL;
  }
  unint64_t v23 = v22 & v20;
  int64_t v44 = (unint64_t)(v21 + 63) >> 6;
  uint64_t v24 = a2 + 56;
  uint64_t v41 = v17;
  uint64_t v42 = a1;
  uint64_t v40 = (char *)&v39 - v16;
  if (!v23) {
    goto LABEL_9;
  }
LABEL_7:
  uint64_t v45 = (v23 - 1) & v23;
  int64_t v46 = v19;
  for (unint64_t i = __clz(__rbit64(v23)) | (v19 << 6); ; unint64_t i = __clz(__rbit64(v27)) + (v28 << 6))
  {
    uint64_t v30 = *(void *)(v17 + 72);
    sub_1003F5FC8( *(void *)(a1 + 48) + v30 * i,  (uint64_t)v18,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    sub_1003F600C((uint64_t)v18, (uint64_t)v12, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    uint64_t v31 = *(void *)(a2 + 40);
    uint64_t v32 = sub_10040A2B0( &qword_1009B90D0,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent,  (uint64_t)&unk_100718E98);
    uint64_t v33 = dispatch thunk of Hashable._rawHashValue(seed:)(v31, v4, v32);
    uint64_t v34 = -1LL << *(_BYTE *)(a2 + 32);
    unint64_t v35 = v33 & ~v34;
    if (((*(void *)(v24 + ((v35 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v35) & 1) == 0)
    {
LABEL_29:
      sub_1003F6050((uint64_t)v12, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      return 0LL;
    }

    uint64_t v36 = ~v34;
    while (1)
    {
      sub_1003F5FC8( *(void *)(a2 + 48) + v35 * v30,  (uint64_t)v8,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      uint64_t v37 = sub_10040A2B0( &qword_1009B90D8,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent,  (uint64_t)&unk_100718ED8);
      char v38 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v12, v4, v37);
      sub_1003F6050((uint64_t)v8, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      if ((v38 & 1) != 0) {
        break;
      }
      unint64_t v35 = (v35 + 1) & v36;
      if (((*(void *)(v24 + ((v35 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v35) & 1) == 0) {
        goto LABEL_29;
      }
    }

    uint64_t result = sub_1003F6050((uint64_t)v12, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    uint64_t v17 = v41;
    a1 = v42;
    uint64_t v18 = v40;
    unint64_t v23 = v45;
    int64_t v19 = v46;
    if (v45) {
      goto LABEL_7;
    }
LABEL_9:
    int64_t v26 = v19 + 1;
    if (__OFADD__(v19, 1LL))
    {
      __break(1u);
      goto LABEL_34;
    }

    if (v26 >= v44) {
      return 1LL;
    }
    unint64_t v27 = *(void *)(v43 + 8 * v26);
    int64_t v28 = v19 + 1;
    if (!v27)
    {
      int64_t v28 = v26 + 1;
      if (v26 + 1 >= v44) {
        return 1LL;
      }
      unint64_t v27 = *(void *)(v43 + 8 * v28);
      if (!v27)
      {
        int64_t v28 = v26 + 2;
        if (v26 + 2 >= v44) {
          return 1LL;
        }
        unint64_t v27 = *(void *)(v43 + 8 * v28);
        if (!v27)
        {
          int64_t v28 = v26 + 3;
          if (v26 + 3 >= v44) {
            return 1LL;
          }
          unint64_t v27 = *(void *)(v43 + 8 * v28);
          if (!v27) {
            break;
          }
        }
      }
    }

Swift::Int sub_1004D1F70()
{
  uint64_t v1 = v0;
  Hasher.init(_seed:)(v8, 0LL);
  unint64_t v2 = sub_10040C97C();
  dispatch thunk of Hashable.hash(into:)(v8, &type metadata for IDSGroupEncryptionDesiredMaterialKind, v2);
  uint64_t v3 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain(v3);
  sub_1004D24BC(v8, v3);
  swift_bridgeObjectRelease(v3);
  uint64_t v4 = type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet(0LL);
  uint64_t v5 = type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
  uint64_t v6 = sub_10040A2B0( &qword_1009B91C8,  type metadata accessor for IDSGroupEncryptionPublicIdentity,  (uint64_t)&unk_10071D2FC);
  dispatch thunk of Hashable.hash(into:)(v8, v5, v6);
  Hasher._combine(_:)(*(void *)(v1 + *(int *)(v4 + 28)));
  Hasher._combine(_:)(*(void *)(v1 + *(int *)(v4 + 32)));
  return Hasher._finalize()();
}

uint64_t sub_1004D2068@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  *(_DWORD *)a6 = a1;
  *(_BYTE *)(a6 + 4) = BYTE4(a1);
  *(void *)(a6 + 8) = a2;
  __n128 v10 = (int *)type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet(0LL);
  uint64_t result = sub_1003F600C(a3, a6 + v10[6], type metadata accessor for IDSGroupEncryptionPublicIdentity);
  *(void *)(a6 + v10[7]) = a4;
  *(void *)(a6 + v10[8]) = a5;
  return result;
}

void sub_1004D20F0(__int128 *a1, uint64_t a2)
{
  uint64_t v4 = v2;
  unint64_t v6 = sub_10040C97C();
  dispatch thunk of Hashable.hash(into:)(a1, &type metadata for IDSGroupEncryptionDesiredMaterialKind, v6);
  uint64_t v7 = *(void *)(v2 + 8);
  swift_bridgeObjectRetain(v7);
  sub_1004D24BC(a1, v7);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
  uint64_t v9 = sub_10040A2B0( &qword_1009B91C8,  type metadata accessor for IDSGroupEncryptionPublicIdentity,  (uint64_t)&unk_10071D2FC);
  dispatch thunk of Hashable.hash(into:)(a1, v8, v9);
  Hasher._combine(_:)(*(void *)(v4 + *(int *)(a2 + 28)));
  Hasher._combine(_:)(*(void *)(v4 + *(int *)(a2 + 32)));
}

Swift::Int sub_1004D21D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  Hasher.init(_seed:)(v10, a1);
  unint64_t v5 = sub_10040C97C();
  dispatch thunk of Hashable.hash(into:)(v10, &type metadata for IDSGroupEncryptionDesiredMaterialKind, v5);
  uint64_t v6 = *(void *)(v2 + 8);
  swift_bridgeObjectRetain(v6);
  sub_1004D24BC(v10, v6);
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
  uint64_t v8 = sub_10040A2B0( &qword_1009B91C8,  type metadata accessor for IDSGroupEncryptionPublicIdentity,  (uint64_t)&unk_10071D2FC);
  dispatch thunk of Hashable.hash(into:)(v10, v7, v8);
  Hasher._combine(_:)(*(void *)(v4 + *(int *)(a2 + 28)));
  Hasher._combine(_:)(*(void *)(v4 + *(int *)(a2 + 32)));
  return Hasher._finalize()();
}

uint64_t sub_1004D22C0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1004D22DC(a1, a2, a3, (void *)*v3);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1004D22DC(char a1, int64_t a2, char a3, void *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v16 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v10 = sub_1003F5CB4(&qword_1009BBC98);
  uint64_t v12 = *(void *)(type metadata accessor for UUID(0LL, v11) - 8);
  uint64_t v13 = *(void *)(v12 + 72);
  uint64_t v14 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v15 = (v14 + 32) & ~v14;
  uint64_t v16 = (void *)swift_allocObject(v10, v15 + v13 * v9, v14 | 7);
  size_t v17 = j__malloc_size(v16);
  if (!v13)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }

  if (v17 - v15 == 0x8000000000000000LL && v13 == -1) {
    goto LABEL_34;
  }
  id v16[2] = v8;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v13);
LABEL_19:
  uint64_t v19 = type metadata accessor for UUID(0LL, a2);
  uint64_t v20 = *(void *)(v19 - 8);
  unint64_t v21 = (*(unsigned __int8 *)(v20 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  uint64_t v22 = (char *)v16 + v21;
  unint64_t v23 = (char *)a4 + v21;
  if ((a1 & 1) != 0)
  {
    if (v16 < a4 || v22 >= &v23[*(void *)(v20 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack(v22, v23, v8, v19);
    }

    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v22);
    }

    a4[2] = 0LL;
    goto LABEL_32;
  }

  uint64_t v24 = *(void *)(v20 + 72) * v8;
  uint64_t v25 = &v22[v24];
  unint64_t v26 = (unint64_t)&v23[v24];
  if (v23 >= v25 || (unint64_t)v22 >= v26)
  {
    swift_arrayInitWithCopy(v22);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v16;
  }

void sub_1004D24BC(__int128 *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  uint64_t v29 = *(void *)(v4 - 8);
  uint64_t v30 = v4;
  __chkstk_darwin(v5, v6);
  uint64_t v8 = (char *)v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *((void *)a1 + 8);
  __int128 v10 = a1[1];
  __int128 v31 = *a1;
  __int128 v32 = v10;
  __int128 v11 = a1[2];
  __int128 v12 = a1[3];
  v28[1] = a1;
  __int128 v33 = v11;
  __int128 v34 = v12;
  uint64_t v35 = v9;
  Swift::Int v13 = Hasher._finalize()();
  uint64_t v14 = a2 + 56;
  uint64_t v15 = 1LL << *(_BYTE *)(a2 + 32);
  uint64_t v16 = -1LL;
  if (v15 < 64) {
    uint64_t v16 = ~(-1LL << v15);
  }
  unint64_t v17 = v16 & *(void *)(a2 + 56);
  int64_t v18 = (unint64_t)(v15 + 63) >> 6;
  swift_bridgeObjectRetain(a2);
  Swift::UInt v19 = 0LL;
  int64_t v20 = 0LL;
  while (1)
  {
    if (v17)
    {
      unint64_t v21 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v22 = v21 | (v20 << 6);
      goto LABEL_5;
    }

    if (__OFADD__(v20++, 1LL)) {
      goto LABEL_19;
    }
    if (v20 >= v18)
    {
LABEL_17:
      swift_release(a2);
      Hasher._combine(_:)(v19);
      return;
    }

    unint64_t v26 = *(void *)(v14 + 8 * v20);
    if (!v26) {
      break;
    }
LABEL_16:
    unint64_t v17 = (v26 - 1) & v26;
    unint64_t v22 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_5:
    sub_1003F5FC8( *(void *)(a2 + 48) + *(void *)(v29 + 72) * v22,  (uint64_t)v8,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    uint64_t v23 = sub_10040A2B0( &qword_1009B90D0,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent,  (uint64_t)&unk_100718E98);
    uint64_t v24 = dispatch thunk of Hashable._rawHashValue(seed:)(v13, v30, v23);
    sub_1003F6050((uint64_t)v8, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    v19 ^= v24;
  }

  int64_t v27 = v20 + 1;
  if (v20 + 1 >= v18) {
    goto LABEL_17;
  }
  unint64_t v26 = *(void *)(v14 + 8 * v27);
  if (v26)
  {
    ++v20;
    goto LABEL_16;
  }

  while (1)
  {
    int64_t v20 = v27 + 1;
    if (__OFADD__(v27, 1LL)) {
      break;
    }
    if (v20 >= v18) {
      goto LABEL_17;
    }
    unint64_t v26 = *(void *)(v14 + 8 * v20);
    ++v27;
    if (v26) {
      goto LABEL_16;
    }
  }

  __break(1u);
LABEL_19:
  __break(1u);
}

uint64_t sub_1004D26A8(uint64_t a1)
{
  uint64_t v2 = sub_1003F5CB4(&qword_1009BBF58);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

BOOL sub_1004D26E8(unsigned int *a1, uint64_t a2)
{
  if ((sub_1004B5F64(*a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32)) & 1) != 0
    && (sub_1004D1C24(*((void *)a1 + 1), *(void *)(a2 + 8)) & 1) != 0
    && (uint64_t v4 = (int *)type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet(0LL),
        (sub_1004D3034((char *)a1 + v4[6], a2 + v4[6]) & 1) != 0)
    && *(void *)((char *)a1 + v4[7]) == *(void *)(a2 + v4[7]))
  {
    return *(void *)((char *)a1 + v4[8]) == *(void *)(a2 + v4[8]);
  }

  else
  {
    return 0LL;
  }

uint64_t sub_1004D2790(uint64_t a1)
{
  uint64_t result = sub_10040A2B0( &qword_1009BB600,  type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet,  (uint64_t)&unk_10071D174);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1004D27CC()
{
  return sub_10040A2B0( &qword_1009B99E8,  type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet,  (uint64_t)&unk_10071D1B4);
}

void *sub_1004D27F8(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v22 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v22 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v22);
  }

  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_BYTE *)(a1 + 4) = *((_BYTE *)a2 + 4);
    uint64_t v7 = a2[1];
    *(void *)(a1 + 8) = v7;
    uint64_t v8 = a3[6];
    uint64_t v9 = (void *)(a1 + v8);
    uint64_t v10 = (uint64_t)a2 + v8;
    __int128 v11 = *(void **)((char *)a2 + v8);
    __int128 v12 = *(void **)((char *)a2 + v8 + 8);
    *uint64_t v9 = v11;
    v9[1] = v12;
    Swift::Int v13 = (int *)type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
    uint64_t v14 = v13[6];
    uint64_t v25 = v10 + v14;
    unint64_t v26 = (char *)v9 + v14;
    uint64_t v15 = type metadata accessor for Date(0LL);
    uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16LL);
    swift_bridgeObjectRetain(v7);
    id v16 = v11;
    id v17 = v12;
    v24(v26, v25, v15);
    uint64_t v18 = v13[7];
    Swift::UInt v19 = *(void **)(v10 + v18);
    *(void *)((char *)v9 + v18) = v19;
    *((_BYTE *)v9 + v13[8]) = *(_BYTE *)(v10 + v13[8]);
    uint64_t v20 = a3[8];
    *(void *)((char *)v4 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    *(void *)((char *)v4 + v20) = *(uint64_t *)((char *)a2 + v20);
    id v21 = v19;
  }

  return v4;
}

void sub_1004D2924(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (id *)(a1 + *(int *)(a2 + 24));

  uint64_t v5 = type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
  __n128 v6 = (char *)v4 + *(int *)(v5 + 24);
  uint64_t v7 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v7 - 8) + 8LL))(v6, v7);
}

uint64_t sub_1004D29A4(uint64_t a1, uint64_t a2, int *a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = a3[6];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = a2 + v7;
  uint64_t v10 = *(void **)(a2 + v7);
  __int128 v11 = *(void **)(a2 + v7 + 8);
  *uint64_t v8 = v10;
  v8[1] = v11;
  __int128 v12 = (int *)type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
  uint64_t v13 = v12[6];
  uint64_t v23 = v9 + v13;
  uint64_t v24 = (char *)v8 + v13;
  uint64_t v14 = type metadata accessor for Date(0LL);
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16LL);
  swift_bridgeObjectRetain(v6);
  id v15 = v10;
  id v16 = v11;
  v22(v24, v23, v14);
  uint64_t v17 = v12[7];
  uint64_t v18 = *(void **)(v9 + v17);
  *(void *)((char *)v8 + v17) = v18;
  *((_BYTE *)v8 + v12[8]) = *(_BYTE *)(v9 + v12[8]);
  uint64_t v19 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + v19) = *(void *)(a2 + v19);
  id v20 = v18;
  return a1;
}

uint64_t sub_1004D2AA4(uint64_t a1, int *a2, int *a3)
{
  int v6 = *a2;
  *(_BYTE *)(a1 + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)a1 = v6;
  uint64_t v7 = *((void *)a2 + 1);
  uint64_t v8 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = a3[6];
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (uint64_t)a2 + v9;
  __int128 v12 = *(void **)(a1 + v9);
  uint64_t v13 = *(void **)((char *)a2 + v9);
  *uint64_t v10 = v13;
  id v14 = v13;

  id v15 = *(void **)(v11 + 8);
  id v16 = (void *)v10[1];
  v10[1] = v15;
  id v17 = v15;

  uint64_t v18 = (int *)type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
  uint64_t v19 = v18[6];
  id v20 = (char *)v10 + v19;
  uint64_t v21 = v11 + v19;
  uint64_t v22 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 24LL))(v20, v21, v22);
  uint64_t v23 = v18[7];
  uint64_t v24 = *(void **)(v11 + v23);
  uint64_t v25 = *(void **)((char *)v10 + v23);
  *(void *)((char *)v10 + v2sub_10040A648(v1 + 3) = v24;
  id v26 = v24;

  *((_BYTE *)v10 + v18[8]) = *(_BYTE *)(v11 + v18[8]);
  *(void *)(a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  *(void *)(a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  return a1;
}

uint64_t sub_1004D2BB4(uint64_t a1, uint64_t a2, int *a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v6 = a3[6];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  *(_OWORD *)(a1 + __chkstk_darwin(v5, v6) = *(_OWORD *)(a2 + v6);
  uint64_t v9 = (int *)type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
  uint64_t v10 = v9[6];
  uint64_t v11 = v7 + v10;
  uint64_t v12 = v8 + v10;
  uint64_t v13 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32LL))(v11, v12, v13);
  *(void *)(v7 + v9[7]) = *(void *)(v8 + v9[7]);
  *(_BYTE *)(v7 + v9[8]) = *(_BYTE *)(v8 + v9[8]);
  uint64_t v14 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + v14) = *(void *)(a2 + v14);
  return a1;
}

uint64_t sub_1004D2C84(uint64_t a1, uint64_t a2, int *a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  uint64_t v6 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = a3[6];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = *(void **)(a1 + v7);
  *uint64_t v8 = *v9;

  uint64_t v11 = (void *)v8[1];
  v8[1] = v9[1];

  uint64_t v12 = (int *)type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
  uint64_t v13 = v12[6];
  uint64_t v14 = (char *)v8 + v13;
  id v15 = (char *)v9 + v13;
  uint64_t v16 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 40LL))(v14, v15, v16);
  uint64_t v17 = v12[7];
  uint64_t v18 = *(void **)((char *)v8 + v17);
  *(void *)((char *)v8 + v17) = *(void *)((char *)v9 + v17);

  *((_BYTE *)v8 + v12[8]) = *((_BYTE *)v9 + v12[8]);
  uint64_t v19 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + v19) = *(void *)(a2 + v19);
  return a1;
}

uint64_t sub_1004D2D7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1004D2D88);
}

uint64_t sub_1004D2D88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(__chkstk_darwin(v3, v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 24),  a2,  v8);
  }

uint64_t sub_1004D2E04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1004D2E10);
}

uint64_t sub_1004D2E10(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 24),  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_1004D2E84(uint64_t a1)
{
  v4[0] = &unk_10071D208;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  uint64_t result = type metadata accessor for IDSGroupEncryptionPublicIdentity(319LL);
  if (v3 <= 0x3F)
  {
    void v4[2] = *(void *)(result - 8) + 64LL;
    v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
    void v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256LL, 5LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

ValueMetadata *type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet.DataError()
{
  return &type metadata for IDSGroupEncryptionDesiredKeyMaterialSet.DataError;
}

uint64_t sub_1004D2F24(uint64_t a1)
{
  else {
    return 3LL;
  }
}

uint64_t sub_1004D2F38(unsigned __int8 a1)
{
  return a1 - 1LL;
}

Swift::Int sub_1004D2F44()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(v1 - 1);
  return Hasher._finalize()();
}

void sub_1004D2F88()
{
}

Swift::Int sub_1004D2FB4(uint64_t a1)
{
  uint64_t v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2 - 1);
  return Hasher._finalize()();
}

void *sub_1004D2FF4@<X0>(void *result@<X0>, _BYTE *a2@<X8>)
{
  else {
    LOBYTE(vsub_10040A648(v1 + 2) = 3;
  }
  *a2 = v2;
  return result;
}

void sub_1004D3010(void *a1@<X8>)
{
  *a1 = *v1 - 1LL;
}

uint64_t type metadata accessor for IDSGroupEncryptionPublicIdentity(uint64_t a1)
{
  return sub_100402020( a1,  (uint64_t *)&unk_1009C6E60,  (uint64_t)&nominal type descriptor for IDSGroupEncryptionPublicIdentity);
}

uint64_t sub_1004D3038(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *v2;
  if (*v2)
  {
    Hasher._combine(_:)(1u);
    id v4 = v3;
    NSObject.hash(into:)(v24);
  }

  else
  {
    Hasher._combine(_:)(0);
    id v4 = 0LL;
  }

  NSObject.hash(into:)(v24);
  uint64_t v5 = type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
  Date.hash(into:)(v24);
  Hasher._combine(_:)(*((unsigned __int8 *)v2 + *(int *)(v5 + 32)) - 1LL);
  __int128 v28 = v24[2];
  __int128 v29 = v24[3];
  uint64_t v30 = v25;
  __int128 v26 = v24[0];
  __int128 v27 = v24[1];
  Hasher.finalize()();
  _StringGuts.grow(_:)(23LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  uint64_t v22 = 0x644963696C627550LL;
  unint64_t v23 = 0xEF20797469746E65LL;
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  object = v6._object;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(object);
  v8._countAndFlagsBits = 32LL;
  v8._object = (void *)0xE100000000000000LL;
  String.append(_:)(v8);
  uint64_t v21 = v3;
  id v9 = v4;
  uint64_t v10 = sub_1003F5CB4(&qword_1009B9A00);
  v11._countAndFlagsBits = String.init<A>(describing:)(&v21, v10);
  uint64_t v12 = v11._object;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(v12);
  v13._countAndFlagsBits = 32LL;
  v13._object = (void *)0xE100000000000000LL;
  String.append(_:)(v13);
  uint64_t v21 = *(void **)((char *)v2 + *(int *)(v5 + 28));
  uint64_t v14 = v21;
  type metadata accessor for SecKey();
  uint64_t v16 = v15;
  id v17 = v14;
  v18._countAndFlagsBits = String.init<A>(describing:)(&v21, v16);
  uint64_t v19 = v18._object;
  String.append(_:)(v18);
  swift_bridgeObjectRelease(v19);
  return v22;
}

CFDataRef sub_1004D3220()
{
  id v5 = 0LL;
  uint64_t v1 = type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
  CFDataRef v2 = SecKeyCopyExternalRepresentation(*(SecKeyRef *)(v0 + *(int *)(v1 + 28)), (CFErrorRef *)&v5);
  if (v5) {

  }
  if (v2)
  {
    if (v5)
    {

      return 0LL;
    }

    else
    {
      unint64_t v3 = v2;
      CFDataRef v2 = (CFDataRef)static Data._unconditionallyBridgeFromObjectiveC(_:)(v2);
    }
  }

  return v2;
}

uint64_t sub_1004D32E8()
{
  uint64_t v1 = type metadata accessor for Date(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v5 = __chkstk_darwin(v3, v4);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static Date.now.getter(v5);
  uint64_t v8 = type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
  char v9 = static Date.> infix(_:_:)(v7, v0 + *(int *)(v8 + 24));
  (*(void (**)(char *, uint64_t))(v2 + 8))(v7, v1);
  return v9 & 1;
}

uint64_t sub_1004D337C@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, void *a6@<X8>)
{
  *a6 = a1;
  a6[1] = a2;
  uint64_t v10 = (int *)type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
  uint64_t v11 = (char *)a6 + v10[6];
  uint64_t v12 = type metadata accessor for Date(0LL);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32LL))(v11, a3, v12);
  *(void *)((char *)a6 + v10[7]) = a4;
  *((_BYTE *)a6 + v10[8]) = a5;
  return result;
}

id sub_1004D33FC()
{
  uint64_t v1 = (id *)v0;
  id v2 = [objc_allocWithZone((Class)IDSRealTimeEncryptionIdentity) init];
  [v2 setPushToken:*(void *)(v0 + 8)];
  uint64_t v3 = type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
  [v2 setPublicIdentity:*(void *)(v0 + *(int *)(v3 + 28))];
  CFDataRef v4 = sub_1004D3220();
  Class isa = 0LL;
  if (v5 >> 60 != 15)
  {
    uint64_t v7 = (uint64_t)v4;
    unint64_t v8 = v5;
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_10040AD00(v7, v8);
  }

  [v2 setPublicIdentityData:isa];

  [v2 setWrapMode:*((unsigned __int8 *)v1 + *(int *)(v3 + 32)) == 2];
  Class v9 = Date._bridgeToObjectiveC()().super.isa;
  [v2 setExpirationDate:v9];

  if (*v1)
  {
    id v10 = [*v1 prefixedURI];
    static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    uint64_t v12 = v11;

    NSString v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v12);
  }

  else
  {
    NSString v13 = 0LL;
  }

  [v2 setFromID:v13];

  return v2;
}

Swift::Int sub_1004D3574()
{
  uint64_t v1 = v0;
  Hasher.init(_seed:)(v6, 0LL);
  id v2 = *v0;
  if (*v0)
  {
    Hasher._combine(_:)(1u);
    id v3 = v2;
    NSObject.hash(into:)(v6);
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  NSObject.hash(into:)(v6);
  uint64_t v4 = type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
  Date.hash(into:)(v6);
  Hasher._combine(_:)(*((unsigned __int8 *)v1 + *(int *)(v4 + 32)) - 1LL);
  return Hasher._finalize()();
}

void sub_1004D362C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v6 = *v2;
  if (*v2)
  {
    Hasher._combine(_:)(1u);
    id v7 = v6;
    NSObject.hash(into:)(a1);
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  NSObject.hash(into:)(a1);
  Date.hash(into:)(a1);
  Hasher._combine(_:)(*((unsigned __int8 *)v4 + *(int *)(a2 + 32)) - 1LL);
}

Swift::Int sub_1004D36C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  Hasher.init(_seed:)(v8, a1);
  unint64_t v5 = *v2;
  if (*v2)
  {
    Hasher._combine(_:)(1u);
    id v6 = v5;
    NSObject.hash(into:)(v8);
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  NSObject.hash(into:)(v8);
  Date.hash(into:)(v8);
  Hasher._combine(_:)(*((unsigned __int8 *)v4 + *(int *)(a2 + 32)) - 1LL);
  return Hasher._finalize()();
}

id sub_1004D3778()
{
  id v1 = sub_1004D33FC();
  [v1 setFullIdentity:*(void *)(v0 + *(int *)(type metadata accessor for IDSGroupEncryptionFullIdentity(0) + 20))];
  return v1;
}

uint64_t sub_1004D37BC()
{
  v11[0] = 0LL;
  v11[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(24LL);
  v1._countAndFlagsBits = 0x797469746E656449LL;
  v1._object = (void *)0xE900000000000020LL;
  String.append(_:)(v1);
  uint64_t v10 = *(void *)(v0 + *(int *)(type metadata accessor for IDSGroupEncryptionFullIdentity(0LL) + 20));
  type metadata accessor for SecKey();
  _print_unlocked<A, B>(_:_:)( &v10,  v11,  v2,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v3._countAndFlagsBits = 0x63696C6275702820LL;
  v3._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v3);
  v6._countAndFlagsBits = sub_1004D3038(v4, v5);
  object = v6._object;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(object);
  v8._countAndFlagsBits = 41LL;
  v8._object = (void *)0xE100000000000000LL;
  String.append(_:)(v8);
  return v11[0];
}

uint64_t sub_1004D38A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = type metadata accessor for IDSGroupEncryptionFullIdentity(0LL);
  *(void *)(a3 + *(int *)(result + 20)) = a2;
  return result;
}

uint64_t sub_1004D38E4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10071D4E0, a3);
  return static _CFObject.== infix(_:_:)(v4, v5, a3, WitnessTable);
}

uint64_t sub_1004D3930(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10071D4E0, a1);
  return _CFObject.hashValue.getter(a1, WitnessTable);
}

uint64_t sub_1004D396C(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10071D4E0, a2);
  return _CFObject.hash(into:)(a1, a2, WitnessTable);
}

Swift::Int sub_1004D39B4(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_10071D4E0, a2);
  _CFObject.hash(into:)(v5, a2, WitnessTable);
  return Hasher._finalize()();
}

id sub_1004D3A0C(id *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v6, v7);
  Class v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10, v11);
  NSString v13 = (char *)&v26 - v12;
  uint64_t v14 = *(void *)a2;
  if (*a1)
  {
  }

  else if (v14)
  {
    return 0LL;
  }

  id result = [a1[1] isEqualToPushToken:*((void *)a2 + 1)];
  if (!(_DWORD)result) {
    return result;
  }
  uint64_t v16 = (int *)type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
  id v17 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  v17(v13, (char *)a1 + v16[6], v4);
  v17(v9, &a2[v16[6]], v4);
  uint64_t v18 = sub_10040A2B0( &qword_1009BC118,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  LOBYTE(v17) = dispatch thunk of static Equatable.== infix(_:_:)(v13, v9, v4, v18);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v5 + 8);
  v19(v9, v4);
  v19(v13, v4);
  if ((v17 & 1) != 0)
  {
    uint64_t v20 = v16[7];
    uint64_t v21 = *(uint64_t *)((char *)a1 + v20);
    uint64_t v22 = *(void *)&a2[v20];
    type metadata accessor for SecKey();
    uint64_t v24 = v23;
    uint64_t v25 = sub_10040A2B0( (unint64_t *)&unk_1009BC120,  (uint64_t (*)(uint64_t))type metadata accessor for SecKey,  (uint64_t)&unk_10071D4E0);
    if ((static _CFObject.== infix(_:_:)(v21, v22, v24, v25) & 1) != 0) {
      return (id)(*((unsigned __int8 *)a1 + v16[8]) == a2[v16[8]]);
    }
  }

  return 0LL;
}

uint64_t type metadata accessor for IDSGroupEncryptionFullIdentity(uint64_t a1)
{
  return sub_100402020(a1, qword_1009C6E70, (uint64_t)&nominal type descriptor for IDSGroupEncryptionFullIdentity);
}

uint64_t sub_1004D3BEC()
{
  return sub_10040A2B0( &qword_1009BBFF0,  type metadata accessor for IDSGroupEncryptionPublicIdentity,  (uint64_t)&unk_10071D33C);
}

uint64_t storeEnumTagSinglePayload for IDSGroupEncryptionPublicIdentityWrapMode( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(__chkstk_darwin(v3, v4) = 1;
  }
  else {
    LODWORD(__chkstk_darwin(v3, v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1004D3C64 + 4 * byte_10071D255[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1004D3C98 + 4 * asc_10071D250[v4]))();
}

uint64_t sub_1004D3C98(uint64_t result)
{
  *(_BYTE *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

uint64_t sub_1004D3CA0(uint64_t result, int a2)
{
  *(_WORD *)(result + Hasher._combine(_:)(v0 & 1) = 0;
  if (a2) {
    JUMPOUT(0x1004D3CA8LL);
  }
  return result;
}

uint64_t sub_1004D3CB4(uint64_t result, int a2)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v0 & 1) = 0;
  if (!a2) {
    JUMPOUT(0x1004D3CBCLL);
  }
  *(_BYTE *)id result = a2 + 2;
  return result;
}

uint64_t sub_1004D3CC0(uint64_t result)
{
  *(_DWORD *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

uint64_t sub_1004D3CC8(uint64_t result)
{
  *(_WORD *)(result + Hasher._combine(_:)(v0 & 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IDSGroupEncryptionPublicIdentityWrapMode()
{
  return &type metadata for IDSGroupEncryptionPublicIdentityWrapMode;
}

char *sub_1004D3CE4(char *a1, char **a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    __n128 v7 = &v4[(v3 + 16LL) & ~(unint64_t)v3];
    swift_retain(v4);
  }

  else
  {
    __n128 v7 = a1;
    uint64_t v8 = a2[1];
    *((void *)a1 + Hasher._combine(_:)(v0 & 1) = v8;
    uint64_t v9 = a3[6];
    __n128 v10 = &a1[v9];
    uint64_t v11 = (uint64_t)a2 + v9;
    uint64_t v12 = type metadata accessor for Date(0LL);
    NSString v13 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16LL);
    uint64_t v14 = v4;
    uint64_t v15 = v8;
    v13(v10, v11, v12);
    uint64_t v16 = a3[7];
    uint64_t v17 = a3[8];
    uint64_t v18 = *(char **)((char *)a2 + v16);
    *(void *)&v7[v16] = v18;
    v7[v17] = *((_BYTE *)a2 + v17);
    id v19 = v18;
  }

  return v7;
}

void sub_1004D3DB4(id *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

void *sub_1004D3E18(void *a1, uint64_t a2, int *a3)
{
  __n128 v6 = *(void **)a2;
  __n128 v7 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v7;
  uint64_t v8 = a3[6];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for Date(0LL);
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16LL);
  id v13 = v6;
  id v14 = v7;
  v12(v9, v10, v11);
  uint64_t v15 = a3[7];
  uint64_t v16 = a3[8];
  uint64_t v17 = *(void **)(a2 + v15);
  *(void *)((char *)a1 + v15) = v17;
  *((_BYTE *)a1 + vswift_unknownObjectWeakDestroy(v0 + 16) = *(_BYTE *)(a2 + v16);
  id v18 = v17;
  return a1;
}

uint64_t sub_1004D3EB8(uint64_t a1, uint64_t a2, int *a3)
{
  __n128 v6 = *(void **)a1;
  __n128 v7 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v8 = v7;

  uint64_t v9 = *(void **)(a2 + 8);
  uint64_t v10 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v9;
  id v11 = v9;

  uint64_t v12 = a3[6];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 24LL))(v13, v14, v15);
  uint64_t v16 = a3[7];
  uint64_t v17 = *(void **)(a2 + v16);
  id v18 = *(void **)(a1 + v16);
  *(void *)(a1 + vswift_unknownObjectWeakDestroy(v0 + 16) = v17;
  id v19 = v17;

  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  return a1;
}

_OWORD *sub_1004D3F68(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[6];
  __n128 v7 = (char *)a1 + v6;
  id v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
  uint64_t v10 = a3[8];
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  *((_BYTE *)a1 + v10) = *((_BYTE *)a2 + v10);
  return a1;
}

uint64_t sub_1004D3FE8(uint64_t a1, void *a2, int *a3)
{
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = *a2;

  __n128 v7 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = a2[1];

  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v11 - 8) + 40LL))(v9, v10, v11);
  uint64_t v12 = a3[7];
  uint64_t v13 = *(void **)(a1 + v12);
  *(void *)(a1 + v1sub_10040A648(v1 + 2) = *(void *)((char *)a2 + v12);

  *(_BYTE *)(a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  return a1;
}

uint64_t sub_1004D408C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1004D4098);
}

uint64_t sub_1004D4098(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(__chkstk_darwin(v3, v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for Date(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 24),  a2,  v8);
  }

uint64_t sub_1004D4114(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1004D4120);
}

uint64_t sub_1004D4120(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for Date(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 24),  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_1004D4194(uint64_t a1)
{
  v4[0] = "\b";
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  uint64_t result = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    void v4[2] = *(void *)(result - 8) + 64LL;
    v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
    void v4[4] = &unk_10071D430;
    swift_initStructMetadata(a1, 256LL, 5LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

char *sub_1004D4220(char *a1, char **a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  unint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = &v4[(v3 + 16LL) & ~(unint64_t)v3];
    swift_retain(v4);
  }

  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a2[1];
    *((void *)a1 + Hasher._combine(_:)(v0 & 1) = v8;
    uint64_t v9 = (int *)type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
    uint64_t v10 = v9[6];
    uint64_t v11 = &v7[v10];
    uint64_t v12 = (uint64_t)a2 + v10;
    uint64_t v13 = type metadata accessor for Date(0LL);
    uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16LL);
    uint64_t v15 = v4;
    uint64_t v16 = v8;
    v14(v11, v12, v13);
    uint64_t v17 = v9[7];
    id v18 = *(char **)((char *)a2 + v17);
    *(void *)&v7[v17] = v18;
    v7[v9[8]] = *((_BYTE *)a2 + v9[8]);
    uint64_t v19 = *(int *)(a3 + 20);
    uint64_t v20 = *(char **)((char *)a2 + v19);
    *(void *)&v7[v19] = v20;
    id v21 = v18;
    id v22 = v20;
  }

  return v7;
}

void sub_1004D4310(id *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
  uint64_t v5 = (char *)a1 + *(int *)(v4 + 24);
  uint64_t v6 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v6 - 8) + 8LL))(v5, v6);
}

void *sub_1004D438C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a2;
  uint64_t v7 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v7;
  uint64_t v8 = (int *)type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
  uint64_t v9 = v8[6];
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for Date(0LL);
  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16LL);
  id v14 = v6;
  id v15 = v7;
  v13(v10, v11, v12);
  uint64_t v16 = v8[7];
  uint64_t v17 = *(void **)(a2 + v16);
  *(void *)((char *)a1 + vswift_unknownObjectWeakDestroy(v0 + 16) = v17;
  *((_BYTE *)a1 + v8[8]) = *(_BYTE *)(a2 + v8[8]);
  uint64_t v18 = *(int *)(a3 + 20);
  uint64_t v19 = *(void **)(a2 + v18);
  *(void *)((char *)a1 + v18) = v19;
  id v20 = v17;
  id v21 = v19;
  return a1;
}

uint64_t sub_1004D444C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v8 = v7;

  uint64_t v9 = *(void **)(a2 + 8);
  uint64_t v10 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v9;
  id v11 = v9;

  uint64_t v12 = (int *)type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
  uint64_t v13 = v12[6];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 24LL))(v14, v15, v16);
  uint64_t v17 = v12[7];
  uint64_t v18 = *(void **)(a2 + v17);
  uint64_t v19 = *(void **)(a1 + v17);
  *(void *)(a1 + v17) = v18;
  id v20 = v18;

  *(_BYTE *)(a1 + v12[8]) = *(_BYTE *)(a2 + v12[8]);
  uint64_t v21 = *(int *)(a3 + 20);
  id v22 = *(void **)(a2 + v21);
  uint64_t v23 = *(void **)(a1 + v21);
  *(void *)(a1 + v2Hasher._combine(_:)(v0 & 1) = v22;
  id v24 = v22;

  return a1;
}

_OWORD *sub_1004D4520(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = (int *)type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
  uint64_t v7 = v6[6];
  id v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
  *(void *)((char *)a1 + v6[7]) = *(void *)((char *)a2 + v6[7]);
  *((_BYTE *)a1 + v6[8]) = *((_BYTE *)a2 + v6[8]);
  *(void *)((char *)a1 + *(int *)(a3 + 20)) = *(void *)((char *)a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1004D45BC(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = *a2;

  uint64_t v7 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = a2[1];

  id v8 = (int *)type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
  uint64_t v9 = v8[6];
  uint64_t v10 = a1 + v9;
  id v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v12 - 8) + 40LL))(v10, v11, v12);
  uint64_t v13 = v8[7];
  uint64_t v14 = *(void **)(a1 + v13);
  *(void *)(a1 + v1sub_10040A648(v1 + 3) = *(void *)((char *)a2 + v13);

  *(_BYTE *)(a1 + v8[8]) = *((_BYTE *)a2 + v8[8]);
  uint64_t v15 = *(int *)(a3 + 20);
  uint64_t v16 = *(void **)(a1 + v15);
  *(void *)(a1 + v15) = *(void *)((char *)a2 + v15);

  return a1;
}

uint64_t sub_1004D4680(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1004D468C);
}

uint64_t sub_1004D468C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(__chkstk_darwin(v8, v9) = -1;
  }
  return (v9 + 1);
}

uint64_t sub_1004D4708(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1004D4714);
}

uint64_t sub_1004D4714(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t sub_1004D478C(uint64_t a1)
{
  uint64_t result = type metadata accessor for IDSGroupEncryptionPublicIdentity(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_1004D4800()
{
  return sub_10040A2B0( &qword_1009BC108,  (uint64_t (*)(uint64_t))type metadata accessor for SecKey,  (uint64_t)&unk_10071D478);
}

uint64_t sub_1004D482C()
{
  return sub_10040A2B0( &qword_1009BC110,  (uint64_t (*)(uint64_t))type metadata accessor for SecKey,  (uint64_t)&unk_10071D4A0);
}

void *sub_1004D4858()
{
  return &unk_10071D510;
}

void *sub_1004D4864()
{
  return &unk_10071D518;
}

id sub_1004D4870()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for RegistrationRequestTracker()) init];
  qword_1009C7970 = (uint64_t)result;
  return result;
}

uint64_t type metadata accessor for RegistrationRequestTracker()
{
  return objc_opt_self(&OBJC_CLASS___IDSRegistrationRequestTracker);
}

uint64_t sub_1004D4A34()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

Swift::Int sub_1004D4A58(unint64_t *a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for IDSRegistrationEventStruct(0LL) - 8);
  unint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0) {
    unint64_t v3 = sub_1004D68C0(v3);
  }
  uint64_t v4 = *(void *)(v3 + 16);
  v6[0] = v3 + ((*(unsigned __int8 *)(v2 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  Swift::Int result = sub_1004D57EC(v6);
  *a1 = v3;
  return result;
}

void sub_1004D4B14(uint64_t a1)
{
  uint64_t v5 = (char *)&v86 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v8, v9);
  uint64_t v96 = (char *)&v86 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for IDSRegistrationEventStruct(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v13, v14);
  uint64_t v16 = (char *)&v86 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v17, v18);
  id v20 = (char *)&v86 - v19;
  __chkstk_darwin(v21, v22);
  uint64_t v110 = (uint64_t)&v86 - v23;
  __chkstk_darwin(v24, v25);
  uint64_t v104 = (char *)&v86 - v26;
  __chkstk_darwin(v27, v28);
  uint64_t v30 = (char *)&v86 - v29;
  uint64_t v91 = type metadata accessor for Logger(0LL);
  uint64_t v90 = *(void *)(v91 - 8);
  __chkstk_darwin(v31, v32);
  unint64_t v107 = (char *)&v86 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a1 += 16LL;
  swift_beginAccess(a1, v119, 0LL, 0LL);
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong(a1);
  if (!Strong) {
    return;
  }
  id v89 = Strong;
  id v35 = [(id)objc_opt_self(IDSDaemon) sharedInstance];
  if (!v35)
  {
LABEL_23:

    return;
  }

  uint64_t v36 = v35;
  id v37 = [v35 persistenceManager];
  if (!v37)
  {

    goto LABEL_23;
  }

  id v88 = v36;
  uint64_t v102 = v20;
  id v95 = v16;
  char v38 = v37;
  sub_10048AE00(0xDu);
  id v87 = v38;
  id v118 = sub_1004F5E7C();
  sub_1004D4A58((unint64_t *)&v118);
  uint64_t v40 = v118;
  uint64_t v41 = v118[2];
  if (v41)
  {
    unint64_t v42 = (*(unsigned __int8 *)(v12 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    unint64_t v86 = v118;
    uint64_t v43 = (uint64_t)v118 + v42;
    unint64_t v103 = &v116;
    uint64_t v101 = *(void *)(v12 + 72);
    *(void *)&__int128 v39 = 136316162LL;
    __int128 v94 = v39;
    unint64_t v93 = (char *)&type metadata for Any + 8;
    *(void *)&__int128 v39 = 136315394LL;
    __int128 v92 = v39;
    uint64_t v98 = v5;
    uint64_t v97 = v6;
    uint64_t v99 = v7;
    uint64_t v106 = v11;
    uint64_t v44 = (uint64_t)v102;
    uint64_t v45 = v110;
    uint64_t v46 = (uint64_t)v104;
    do
    {
      uint64_t v108 = v43;
      uint64_t v109 = v41;
      sub_1004D7E28(v43, (uint64_t)v30);
      uint64_t v116 = 0x6E776F6E6B6E75LL;
      unint64_t v117 = 0xE700000000000000LL;
      sub_100455A7C((uint64_t)&v30[*(int *)(v11 + 24)], (uint64_t)v5);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
      {
        sub_100455970((uint64_t)v5);
      }

      else
      {
        uint64_t v47 = v96;
        (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v96, v5, v6);
        uint64_t v112 = 0LL;
        unint64_t v113 = 0xE000000000000000LL;
        double v48 = Date.timeIntervalSince(_:)(v47);
        Double.write<A>(to:)( &v112,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation,  v48);
        uint64_t v49 = v112;
        unint64_t v50 = v113;
        uint64_t v51 = v47;
        uint64_t v45 = v110;
        (*(void (**)(char *, uint64_t))(v7 + 8))(v51, v6);
        swift_beginAccess(&v116, v111, 1LL, 0LL);
        unint64_t v52 = v117;
        uint64_t v116 = v49;
        unint64_t v117 = v50;
        swift_bridgeObjectRelease(v52);
      }

      uint64_t v53 = sub_1004D7EEC();
      unint64_t v55 = v54;
      sub_1004D7E28((uint64_t)v30, v46);
      sub_1004D7E28((uint64_t)v30, v45);
      sub_1004D7E28((uint64_t)v30, v44);
      swift_bridgeObjectRetain(v55);
      uint64_t v57 = (os_log_s *)Logger.logObject.getter(v56);
      LODWORD(v105) = static os_log_type_t.default.getter(v57);
      if (os_log_type_enabled(v57, (os_log_type_t)v105))
      {
        uint64_t v58 = swift_slowAlloc(52LL, -1LL);
        uint64_t v100 = swift_slowAlloc(128LL, -1LL);
        uint64_t v112 = v100;
        *(_DWORD *)uint64_t v58 = v94;
        uint64_t v59 = *(void *)(v46 + 8);
        unint64_t v60 = *(void *)(v46 + 16);
        swift_bridgeObjectRetain(v60);
        uint64_t v115 = sub_1003FFBB0(v59, v60, &v112);
        uint64_t v61 = v103;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, v103, v58 + 4, v58 + 12);
        swift_bridgeObjectRelease(v60);
        sub_1004D7E6C(v46);
        *(_WORD *)(v58 + 1sub_10040A648(v1 + 2) = 2080;
        swift_bridgeObjectRetain(v55);
        uint64_t v115 = sub_1003FFBB0(v53, v55, &v112);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, v61, v58 + 14, v58 + 22);
        swift_bridgeObjectRelease_n(v55, 3LL);
        *(_WORD *)(v58 + 2sub_10040A648(v1 + 2) = 2080;
        swift_beginAccess(&v116, v114, 0LL, 0LL);
        uint64_t v62 = v116;
        unint64_t v63 = v117;
        swift_bridgeObjectRetain(v117);
        uint64_t v115 = sub_1003FFBB0(v62, v63, &v112);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, v61, v58 + 24, v58 + 32);
        swift_bridgeObjectRelease(v63);
        *(_WORD *)(v58 + 3sub_10040A648(v1 + 2) = 2048;
        uint64_t v64 = v106;
        uint64_t v65 = *(void *)(v110 + *(int *)(v106 + 32));
        sub_1004D7E6C(v110);
        uint64_t v115 = v65;
        uint64_t v66 = v61;
        uint64_t v44 = (uint64_t)v102;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, v66, v58 + 34, v58 + 42);
        *(_WORD *)(v58 + 4sub_10040A648(v1 + 2) = 2080;
        uint64_t v67 = (uint64_t *)(v44 + *(int *)(v64 + 40));
        uint64_t v68 = v67[1];
        if (v68)
        {
          uint64_t v69 = *v67;
          unint64_t v70 = v67[1];
        }

        else
        {
          uint64_t v69 = 0LL;
          unint64_t v70 = 0xE000000000000000LL;
        }

        uint64_t v5 = v98;
        uint64_t v6 = v97;
        uint64_t v46 = (uint64_t)v104;
        swift_bridgeObjectRetain(v68);
        uint64_t v115 = sub_1003FFBB0(v69, v70, &v112);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, v103, v58 + 44, v58 + 52);
        swift_bridgeObjectRelease(v70);
        sub_1004D7E6C(v44);
        _os_log_impl( (void *)&_mh_execute_header,  v57,  (os_log_type_t)v105,  "Registration Event: %s { time: %s, timeElapsed: %s, result: %ld, splunkHint: %s }",  (uint8_t *)v58,  0x34u);
        uint64_t v71 = v100;
        swift_arrayDestroy(v100, 4LL, v93);
        swift_slowDealloc(v71, -1LL, -1LL);
        swift_slowDealloc(v58, -1LL, -1LL);

        uint64_t v7 = v99;
        uint64_t v45 = v110;
      }

      else
      {
        sub_1004D7E6C(v45);

        sub_1004D7E6C(v46);
        swift_bridgeObjectRelease_n(v55, 2LL);
        sub_1004D7E6C(v44);
      }

      uint64_t v11 = v106;
      char v72 = (uint64_t *)&v30[*(int *)(v106 + 44)];
      unint64_t v73 = v72[1];
      if (v73)
      {
        uint64_t v105 = *v72;
        uint64_t v74 = (uint64_t)v95;
        sub_1004D7E28((uint64_t)v30, (uint64_t)v95);
        uint64_t v75 = swift_bridgeObjectRetain_n(v73, 2LL);
        char v76 = (os_log_s *)Logger.logObject.getter(v75);
        os_log_type_t v77 = static os_log_type_t.default.getter(v76);
        if (os_log_type_enabled(v76, v77))
        {
          uint64_t v78 = swift_slowAlloc(22LL, -1LL);
          uint64_t v79 = swift_slowAlloc(64LL, -1LL);
          uint64_t v112 = v79;
          *(_DWORD *)uint64_t v78 = v92;
          uint64_t v81 = *(void *)(v74 + 8);
          unint64_t v80 = *(void *)(v74 + 16);
          swift_bridgeObjectRetain(v80);
          uint64_t v115 = sub_1003FFBB0(v81, v80, &v112);
          uint64_t v82 = v103;
          uint64_t v7 = v99;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, v103, v78 + 4, v78 + 12);
          swift_bridgeObjectRelease(v80);
          sub_1004D7E6C(v74);
          *(_WORD *)(v78 + 1sub_10040A648(v1 + 2) = 2080;
          swift_bridgeObjectRetain(v73);
          uint64_t v115 = sub_1003FFBB0(v105, v73, &v112);
          uint64_t v83 = v82;
          uint64_t v5 = v98;
          uint64_t v11 = v106;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, v83, v78 + 14, v78 + 22);
          swift_bridgeObjectRelease_n(v73, 3LL);
          _os_log_impl((void *)&_mh_execute_header, v76, v77, "%s baa signing digest : %s", (uint8_t *)v78, 0x16u);
          swift_arrayDestroy(v79, 2LL, (char *)&type metadata for Any + 8);
          uint64_t v84 = v79;
          uint64_t v6 = v97;
          swift_slowDealloc(v84, -1LL, -1LL);
          uint64_t v85 = v78;
          uint64_t v45 = v110;
          swift_slowDealloc(v85, -1LL, -1LL);
        }

        else
        {
          sub_1004D7E6C(v74);

          swift_bridgeObjectRelease_n(v73, 2LL);
        }

        sub_1004D7E6C((uint64_t)v30);
        swift_bridgeObjectRelease(v117);
        uint64_t v44 = (uint64_t)v102;
        uint64_t v46 = (uint64_t)v104;
      }

      else
      {
        sub_1004D7E6C((uint64_t)v30);
        swift_bridgeObjectRelease(v117);
      }

      uint64_t v43 = v108 + v101;
      uint64_t v41 = v109 - 1;
    }

    while (v109 != 1);
    uint64_t v40 = v86;
  }

  swift_bridgeObjectRelease(v40);

  (*(void (**)(char *, uint64_t))(v90 + 8))(v107, v91);
}

id sub_1004D5474()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RegistrationRequestTracker();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1004D54A8@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, char *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v16 = (int *)type metadata accessor for IDSRegistrationEventStruct(0LL);
  uint64_t v17 = (uint64_t)&a9[v16[6]];
  uint64_t v18 = type metadata accessor for Date(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v17, 1LL, 1LL, v18);
  id v20 = &a9[v16[10]];
  *(void *)id v20 = 0LL;
  *((void *)v20 + Hasher._combine(_:)(v0 & 1) = 0LL;
  __n128 v21 = &a9[v16[11]];
  *(void *)__n128 v21 = 0LL;
  *((void *)v21 + Hasher._combine(_:)(v0 & 1) = 0LL;
  *((void *)a9 + Hasher._combine(_:)(v0 & 1) = a1;
  *((void *)a9 + sub_10040A648(v1 + 2) = a2;
  sub_1004B10D4(a3, v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 32))(&a9[v16[7]], a4, v18);
  *(void *)&a9[v16[8]] = a5;
  *(void *)&a9[v16[9]] = a6;
  swift_bridgeObjectRelease(*((void *)v20 + 1));
  *(void *)id v20 = a7;
  *((void *)v20 + Hasher._combine(_:)(v0 & 1) = a8;
  uint64_t result = swift_bridgeObjectRelease(*((void *)v21 + 1));
  *(void *)__n128 v21 = a10;
  *((void *)v21 + Hasher._combine(_:)(v0 & 1) = a11;
  *(void *)a9 = a12;
  return result;
}

uint64_t sub_1004D55E4(char a1, int64_t a2, char a3, unint64_t a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
LABEL_29:
        uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Division by zero",  16LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14377LL,  0);
LABEL_31:
        __break(1u);
        return result;
      }

      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    uint64_t v7 = a2;
  }

  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  uint64_t v10 = sub_1003F5CB4((uint64_t *)&unk_1009BC260);
  uint64_t v11 = *(void *)(type metadata accessor for IDSRegistrationEventStruct(0LL) - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (v13 + 32) & ~v13;
  uint64_t v15 = (void *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  size_t v16 = j__malloc_size(v15);
  if (!v12) {
    goto LABEL_29;
  }
  if (v16 - v14 == 0x8000000000000000LL && v12 == -1)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Division results in an overflow",  31LL,  2LL,  "Swift/IntegerTypes.swift",  24LL,  2,  14384LL,  0);
    goto LABEL_31;
  }

  void v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  uint64_t v18 = type metadata accessor for IDSRegistrationEventStruct(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  unint64_t v21 = (unint64_t)v15 + v20;
  if ((a1 & 1) != 0)
  {
    unint64_t v22 = a4 + v20;
    if ((unint64_t)v15 < a4 || v21 >= v22 + *(void *)(v19 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v15 + v20, v22, v8, v18);
    }

    else if (v15 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v15 + v20);
    }

    *(void *)(a4 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
  }

  else
  {
    sub_1004D6E34(0LL, v8, v21, a4);
  }

  swift_bridgeObjectRelease(a4);
  return (uint64_t)v15;
}

Swift::Int sub_1004D57EC(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for IDSRegistrationEventStruct(0LL);
  uint64_t v140 = *(void *)(v4 - 8);
  uint64_t v141 = v4;
  __chkstk_darwin(v5, v6);
  uint64_t v137 = (uint64_t)&v131 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8, v9);
  uint64_t v147 = (uint64_t)&v131 - v10;
  __chkstk_darwin(v11, v12);
  uint64_t v144 = (unint64_t *)((char *)&v131 - v13);
  __chkstk_darwin(v14, v15);
  uint64_t v143 = (unint64_t *)((char *)&v131 - v16);
  Swift::Int v17 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v17);
  if (result >= v17)
  {
    if (v17 < 0) {
      goto LABEL_140;
    }
    if (v17) {
      return sub_1004D6150(0LL, v17, 1LL, a1);
    }
    return result;
  }

  if (v17 >= 0) {
    uint64_t v19 = v17;
  }
  else {
    uint64_t v19 = v17 + 1;
  }
  if (v17 < -1) {
    goto LABEL_148;
  }
  Swift::Int v133 = result;
  if (v17 < 2)
  {
    uint64_t v23 = (char *)_swiftEmptyArrayStorage;
    unint64_t v139 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v140 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v140 + 80));
    uint64_t v132 = _swiftEmptyArrayStorage;
    if (v17 != 1)
    {
      unint64_t v25 = _swiftEmptyArrayStorage[2];
LABEL_106:
      if (v25 >= 2)
      {
        uint64_t v124 = *a1;
        do
        {
          unint64_t v125 = v25 - 2;
          if (v25 < 2) {
            goto LABEL_135;
          }
          if (!v124) {
            goto LABEL_147;
          }
          uint64_t v126 = *(void *)&v23[16 * v125 + 32];
          uint64_t v127 = *(void *)&v23[16 * v25 + 24];
          sub_1004D635C( v124 + *(void *)(v140 + 72) * v126,  v124 + *(void *)(v140 + 72) * *(void *)&v23[16 * v25 + 16],  v124 + *(void *)(v140 + 72) * v127,  v139);
          if (v2) {
            break;
          }
          if (v127 < v126) {
            goto LABEL_136;
          }
          if ((swift_isUniquelyReferenced_nonNull_native(v23) & 1) == 0) {
            uint64_t v23 = sub_1004C4A88((uint64_t)v23);
          }
          if (v125 >= *((void *)v23 + 2)) {
            goto LABEL_137;
          }
          uint64_t v128 = &v23[16 * v125 + 32];
          *(void *)uint64_t v128 = v126;
          *((void *)v128 + Hasher._combine(_:)(v0 & 1) = v127;
          unint64_t v129 = *((void *)v23 + 2);
          if (v25 > v129) {
            goto LABEL_138;
          }
          memmove(&v23[16 * v25 + 16], &v23[16 * v25 + 32], 16 * (v129 - v25));
          *((void *)v23 + sub_10040A648(v1 + 2) = v129 - 1;
          unint64_t v25 = v129 - 1;
        }

        while (v129 > 2);
      }

uint64_t sub_1004D6150(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v33 = a1;
  uint64_t v34 = type metadata accessor for IDSRegistrationEventStruct(0LL);
  __chkstk_darwin(v7, v8);
  uint64_t v37 = (uint64_t)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (unint64_t *)((char *)&v31 - v12);
  uint64_t result = __chkstk_darwin(v14, v15);
  uint64_t v19 = (unint64_t *)((char *)&v31 - v18);
  uint64_t v36 = a3;
  uint64_t v32 = a2;
  if (a3 != a2)
  {
    uint64_t v20 = *(void *)(v17 + 72);
    uint64_t v39 = v20 * (v36 - 1);
    uint64_t v35 = v20;
    uint64_t v38 = v20 * v36;
LABEL_5:
    uint64_t v21 = 0LL;
    uint64_t v22 = v33;
    while (1)
    {
      uint64_t v23 = a4;
      uint64_t v24 = *a4;
      sub_1004D7E28(v38 + v21 + v24, (uint64_t)v19);
      sub_1004D7E28(v39 + v21 + v24, (uint64_t)v13);
      unint64_t v25 = *v19;
      unint64_t v26 = *v13;
      sub_1004D7E6C((uint64_t)v13);
      uint64_t result = sub_1004D7E6C((uint64_t)v19);
      BOOL v27 = v25 >= v26;
      a4 = v23;
      if (v27)
      {
LABEL_4:
        v39 += v35;
        v38 += v35;
        if (++v36 == v32) {
          return result;
        }
        goto LABEL_5;
      }

      uint64_t v28 = *v23;
      if (!*v23) {
        break;
      }
      uint64_t v29 = v28 + v38 + v21;
      uint64_t v30 = v28 + v39 + v21;
      sub_1004D7EA8(v29, v37);
      swift_arrayInitWithTakeFrontToBack(v29, v30, 1LL, v34);
      uint64_t result = sub_1004D7EA8(v37, v30);
      v21 -= v35;
      ++v22;
      a4 = v23;
      if (v36 == v22) {
        goto LABEL_4;
      }
    }

    __break(1u);
  }

  return result;
}

uint64_t sub_1004D635C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v53 = type metadata accessor for IDSRegistrationEventStruct(0LL);
  __chkstk_darwin(v8, v9);
  uint64_t v54 = (unint64_t *)((char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v11, v12);
  __n128 v14 = (unint64_t *)((char *)&v50 - v13);
  uint64_t v16 = *(void *)(v15 + 72);
  if (!v16)
  {
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
    goto LABEL_73;
  }

  if (a2 - a1 == 0x8000000000000000LL && v16 == -1) {
    goto LABEL_71;
  }
  int64_t v17 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000LL && v16 == -1) {
    goto LABEL_72;
  }
  uint64_t v18 = (uint64_t)(a2 - a1) / v16;
  unint64_t v57 = a1;
  unint64_t v56 = a4;
  uint64_t v19 = v17 / v16;
  if (v18 >= v17 / v16)
  {
    if ((v19 & 0x8000000000000000LL) == 0)
    {
      uint64_t v21 = v19 * v16;
      if (a4 < a2 || a2 + v21 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4, a2, v19, v53);
      }

      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront(a4);
      }

      unint64_t v32 = a4 + v21;
      unint64_t v55 = a4 + v21;
      unint64_t v57 = a2;
      if (v21 >= 1 && a1 < a2)
      {
        uint64_t v34 = -v16;
        unint64_t v51 = a4;
        unint64_t v52 = a1;
        do
        {
          unint64_t v35 = a3 + v34;
          sub_1004D7E28(v32 + v34, (uint64_t)v14);
          unint64_t v36 = a2 + v34;
          unint64_t v37 = a3;
          uint64_t v38 = v14;
          uint64_t v39 = v54;
          sub_1004D7E28(a2 + v34, (uint64_t)v54);
          unint64_t v40 = *v38;
          unint64_t v41 = *v39;
          uint64_t v42 = (uint64_t)v39;
          __n128 v14 = v38;
          sub_1004D7E6C(v42);
          sub_1004D7E6C((uint64_t)v38);
          if (v40 >= v41)
          {
            unint64_t v46 = v55;
            unint64_t v47 = v55 + v34;
            v55 += v34;
            if (v37 < v46 || v35 >= v46)
            {
              swift_arrayInitWithTakeFrontToBack(v35, v47, 1LL, v53);
              unint64_t v36 = a2;
              unint64_t v44 = v51;
              unint64_t v45 = v52;
            }

            else
            {
              unint64_t v45 = v52;
              if (v37 != v46) {
                swift_arrayInitWithTakeBackToFront(v35);
              }
              unint64_t v36 = a2;
              unint64_t v44 = v51;
            }
          }

          else
          {
            if (v37 < a2 || v35 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack(v35, a2 + v34, 1LL, v53);
              unint64_t v44 = v51;
              unint64_t v45 = v52;
            }

            else
            {
              BOOL v43 = v37 == a2;
              unint64_t v44 = v51;
              unint64_t v45 = v52;
              if (!v43) {
                swift_arrayInitWithTakeBackToFront(v35);
              }
            }

            v57 += v34;
          }

          unint64_t v32 = v55;
          if (v55 <= v44) {
            break;
          }
          a2 = v36;
          a3 = v35;
        }

        while (v36 > v45);
      }

      goto LABEL_69;
    }
  }

  else if ((v18 & 0x8000000000000000LL) == 0)
  {
    uint64_t v20 = v18 * v16;
    if (a4 < a1 || a1 + v20 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, a1, v18, v53);
    }

    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront(a4);
    }

    unint64_t v22 = a4 + v20;
    unint64_t v55 = a4 + v20;
    if (v20 >= 1 && a2 < a3)
    {
      uint64_t v24 = v54;
      do
      {
        sub_1004D7E28(a2, (uint64_t)v14);
        sub_1004D7E28(a4, (uint64_t)v24);
        unint64_t v25 = *v14;
        unint64_t v26 = *v24;
        sub_1004D7E6C((uint64_t)v24);
        sub_1004D7E6C((uint64_t)v14);
        unint64_t v27 = v57;
        if (v25 >= v26)
        {
          unint64_t v30 = v56 + v16;
          if (v57 < v56 || v57 >= v30)
          {
            swift_arrayInitWithTakeFrontToBack(v57, v56, 1LL, v53);
          }

          else if (v57 != v56)
          {
            swift_arrayInitWithTakeBackToFront(v57);
          }

          unint64_t v56 = v30;
          unint64_t v28 = a2;
        }

        else
        {
          unint64_t v28 = a2 + v16;
          if (v57 < a2 || v57 >= v28)
          {
            swift_arrayInitWithTakeFrontToBack(v57, a2, 1LL, v53);
          }

          else if (v57 == a2)
          {
            unint64_t v27 = a2;
          }

          else
          {
            swift_arrayInitWithTakeBackToFront(v57);
          }
        }

        unint64_t v57 = v27 + v16;
        a4 = v56;
        if (v56 >= v22) {
          break;
        }
        a2 = v28;
      }

      while (v28 < a3);
    }

uint64_t sub_1004D67B4(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  uint64_t v5 = *a3;
  uint64_t result = type metadata accessor for IDSRegistrationEventStruct(0LL);
  uint64_t v7 = *(void *)(*(void *)(result - 8) + 72LL);
  if (!v7)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v8 = v5 - v4;
  if (v5 - v4 == 0x8000000000000000LL && v7 == -1) {
    goto LABEL_14;
  }
  uint64_t v10 = v8 / v7;
  if (v8 / v7 < 0)
  {
LABEL_15:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
    __break(1u);
    return result;
  }

  if (v3 < v4 || v3 >= v4 + v10 * v7) {
    return swift_arrayInitWithTakeFrontToBack(v3, v4, v10, result);
  }
  if (v3 != v4) {
    return swift_arrayInitWithTakeBackToFront(v3);
  }
  return result;
}

uint64_t sub_1004D68C0(unint64_t a1)
{
  return sub_1004D55E4(0, *(void *)(a1 + 16), 0, a1);
}

void sub_1004D68D4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, NSString a8, uint64_t a9, uint64_t a10)
{
  uint64_t v27 = a6;
  sub_1003F5CB4(&qword_1009BC130);
  __chkstk_darwin(v13, v14);
  uint64_t v16 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v17 = [(id)objc_opt_self(IDSDaemon) sharedInstance];
  if (v17)
  {
    uint64_t v18 = v17;
    id v19 = [v17 persistenceManager];

    if (v19)
    {
      NSString v20 = String._bridgeToObjectiveC()();
      sub_100455A7C(a3, (uint64_t)v16);
      uint64_t v21 = type metadata accessor for Date(0LL);
      uint64_t v22 = *(void *)(v21 - 8);
      Class isa = 0LL;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v16, 1LL, v21) != 1)
      {
        Class isa = Date._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v22 + 8))(v16, v21);
      }

      v24.super.Class isa = Date._bridgeToObjectiveC()().super.isa;
      if (a8) {
        a8 = String._bridgeToObjectiveC()();
      }
      if (a10) {
        NSString v25 = String._bridgeToObjectiveC()();
      }
      else {
        NSString v25 = 0LL;
      }
      [v19 saveRegistrationEventWithBagKey:v20 requestStart:isa completionTime:v24.super.isa resultCode:a5 interface:v27 splunkHint:a8 baaSigningDigest:v25];
    }
  }

  else
  {
    __break(1u);
  }

void sub_1004D6AA4(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v8, v9);
  __n128 v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)&v51 - v14;
  sub_1003F5CB4(&qword_1009BC130);
  __chkstk_darwin(v16, v17);
  id v19 = (char *)&v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v20, v21);
  uint64_t v23 = (char *)&v51 - v22;
  if (!a1) {
    return;
  }
  id v54 = a1;
  id v24 = [v54 bagKey];
  if (!v24)
  {

    return;
  }

  NSString v25 = v24;
  uint64_t v53 = a2;
  uint64_t v26 = a3;
  uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
  uint64_t v29 = v28;

  if (([v54 wantsBagKey] & 1) == 0
    || (uint64_t v30 = String.count.getter(v27, v29), v30 < 1)
    || !CUTIsInternalInstall(v30, v31))
  {

    swift_bridgeObjectRelease(v29);
    return;
  }

  uint64_t v51 = v29;
  uint64_t v52 = v27;
  id v32 = [v54 requestStart];
  if (v32)
  {
    uint64_t v33 = v32;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v32);

    uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
    v34(v23, 0LL, 1LL, v6);
  }

  else
  {
    uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
    v34(v23, 1LL, 1LL, v6);
  }

  id v35 = [v54 responseReceived];
  if (!v35)
  {
    uint64_t v38 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v34)(v19, 1LL, 1LL, v6);
    goto LABEL_15;
  }

  unint64_t v36 = v35;
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v35);

  unint64_t v37 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
  v37(v19, v11, v6);
  v34(v19, 0LL, 1LL, v6);
  uint64_t v38 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v19, 1LL, v6);
  if ((_DWORD)v38 == 1)
  {
LABEL_15:
    Date.init()(v38);
    sub_100455970((uint64_t)v19);
    goto LABEL_16;
  }

  v37(v15, v19, v6);
LABEL_16:
  id v39 = [v54 splunkHint];
  if (v39)
  {
    unint64_t v40 = v39;
    uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
    BOOL v43 = v42;
  }

  else
  {
    uint64_t v41 = 0LL;
    BOOL v43 = 0LL;
  }

  id v44 = [v54 baaSigningDigest];
  if (v44)
  {
    unint64_t v45 = v44;
    uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
    uint64_t v48 = v47;
  }

  else
  {
    uint64_t v46 = 0LL;
    uint64_t v48 = 0LL;
  }

  uint64_t v49 = v41;
  uint64_t v50 = v51;
  sub_1004D68D4(v52, v51, (uint64_t)v23, (uint64_t)v15, v53, v26, v49, v43, v46, v48);
  swift_bridgeObjectRelease(v50);

  swift_bridgeObjectRelease(v48);
  swift_bridgeObjectRelease(v43);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v15, v6);
  sub_100455970((uint64_t)v23);
}

uint64_t sub_1004D6E34(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v4 < 0)
  {
LABEL_9:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_11;
  }

  uint64_t v8 = *(void *)(type metadata accessor for IDSRegistrationEventStruct(0LL) - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(v8 + 72);
  unint64_t v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
  uint64_t v12 = v10 * v4;
  unint64_t v13 = a3 + v12;
  unint64_t v14 = v11 + v12;
  if (v11 >= v13 || v14 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v13;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_11:
  __break(1u);
  return result;
}

id sub_1004D6F4C(int a1)
{
  int v62 = a1;
  uint64_t v1 = type metadata accessor for Locale(0LL);
  uint64_t v60 = *(void *)(v1 - 8);
  uint64_t v61 = v1;
  __chkstk_darwin(v2, v3);
  Swift::Int v59 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for IDSRegistrationEventStruct(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id result = [(id)objc_opt_self(IDSDaemon) sharedInstance];
  if (result)
  {
    uint64_t v12 = result;
    id v13 = [result persistenceManager];

    if (v13)
    {
      uint64_t v69 = sub_1004F5E7C();
      sub_1004D4A58((unint64_t *)&v69);
      uint64_t v67 = 0LL;
      unint64_t v68 = 0xE000000000000000LL;
      unint64_t v14 = v69;
      uint64_t v15 = v69[2];
      if (v15)
      {
        id v54 = v69;
        id v55 = v13;
        uint64_t v16 = (uint64_t)v69 + ((*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
        uint64_t v17 = *(void *)(v6 + 72);
        unint64_t v57 = 0x80000001008435D0LL;
        uint64_t v58 = v17;
        unint64_t v56 = (void *)0x80000001008435F0LL;
        do
        {
          sub_1004D7E28(v16, (uint64_t)v10);
          if (*(void *)&v10[*(int *)(v5 + 32)])
          {
            uint64_t v65 = *(void *)&v10[*(int *)(v5 + 32)];
            v66._uint64_t countAndFlagsBits = 0x6F72726520746968LL;
            v66._object = (void *)0xEA00000000002072LL;
            v18._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
            object = v18._object;
            String.append(_:)(v18);
            swift_bridgeObjectRelease(object);
            uint64_t countAndFlagsBits = v66._countAndFlagsBits;
            __n128 v21 = v66._object;
          }

          else
          {
            __n128 v21 = (void *)0xE900000000000064LL;
            uint64_t countAndFlagsBits = 0x6564656563637573LL;
          }

          uint64_t v64 = countAndFlagsBits;
          uint64_t v22 = (uint64_t *)&v10[*(int *)(v5 + 40)];
          uint64_t v23 = (void *)v22[1];
          if (v23)
          {
            uint64_t v24 = *v22;
            v66._uint64_t countAndFlagsBits = 0x756C7053203E3D20LL;
            v66._object = (void *)0xEB00000000206B6ELL;
            swift_bridgeObjectRetain(v23);
            v25._uint64_t countAndFlagsBits = v24;
            v25._object = v23;
            String.append(_:)(v25);
            swift_bridgeObjectRelease(v23);
            uint64_t v26 = v66._object;
            uint64_t v63 = v66._countAndFlagsBits;
          }

          else
          {
            uint64_t v63 = 0LL;
            uint64_t v26 = (void *)0xE000000000000000LL;
          }

          id v27 = [objc_allocWithZone(NSDateFormatter) init];
          uint64_t v28 = v5;
          uint64_t v29 = v59;
          static Locale.current.getter();
          Class isa = Locale._bridgeToObjectiveC()().super.isa;
          (*(void (**)(char *, uint64_t))(v60 + 8))(v29, v61);
          [v27 setLocale:isa];

          NSString v31 = String._bridgeToObjectiveC()();
          [v27 setDateFormat:v31];

          Class v32 = Date._bridgeToObjectiveC()().super.isa;
          id v33 = [v27 stringFromDate:v32];

          uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
          unint64_t v36 = v35;

          v66._uint64_t countAndFlagsBits = v34;
          v66._object = v36;
          uint64_t v5 = v28;
          v37._uint64_t countAndFlagsBits = 8250LL;
          v37._object = (void *)0xE200000000000000LL;
          String.append(_:)(v37);
          uint64_t v39 = *((void *)v10 + 1);
          uint64_t v38 = (void *)*((void *)v10 + 2);
          swift_bridgeObjectRetain(v38);
          v40._uint64_t countAndFlagsBits = v39;
          v40._object = v38;
          String.append(_:)(v40);
          swift_bridgeObjectRelease(v38);
          v41._uint64_t countAndFlagsBits = 32LL;
          v41._object = (void *)0xE100000000000000LL;
          String.append(_:)(v41);
          v42._uint64_t countAndFlagsBits = v64;
          v42._object = v21;
          String.append(_:)(v42);
          swift_bridgeObjectRelease(v21);
          v43._uint64_t countAndFlagsBits = v63;
          v43._object = v26;
          String.append(_:)(v43);
          swift_bridgeObjectRelease(v26);
          v44._uint64_t countAndFlagsBits = 10LL;
          v44._object = (void *)0xE100000000000000LL;
          String.append(_:)(v44);
          unint64_t v45 = v66._object;
          String.append(_:)(v66);
          swift_bridgeObjectRelease(v45);
          if ((v62 & 1) != 0)
          {
            uint64_t v46 = (uint64_t *)&v10[*(int *)(v28 + 44)];
            uint64_t v47 = (void *)v46[1];
            if (v47)
            {
              uint64_t v48 = *v46;
              v66._uint64_t countAndFlagsBits = 0LL;
              v66._object = (void *)0xE000000000000000LL;
              swift_bridgeObjectRetain(v47);
              _StringGuts.grow(_:)(27LL);
              uint64_t v49 = v66._object;
              swift_bridgeObjectRetain(v38);
              swift_bridgeObjectRelease(v49);
              v66._uint64_t countAndFlagsBits = v39;
              v66._object = v38;
              v50._uint64_t countAndFlagsBits = 0xD000000000000016LL;
              v50._object = v56;
              String.append(_:)(v50);
              v51._uint64_t countAndFlagsBits = v48;
              v51._object = v47;
              String.append(_:)(v51);
              swift_bridgeObjectRelease(v47);
              v52._uint64_t countAndFlagsBits = 10LL;
              v52._object = (void *)0xE100000000000000LL;
              String.append(_:)(v52);
              uint64_t v53 = v66._object;
              String.append(_:)(v66);
              swift_bridgeObjectRelease(v53);
            }
          }

          sub_1004D7E6C((uint64_t)v10);
          v16 += v58;
          --v15;
        }

        while (v15);

        swift_bridgeObjectRelease(v54);
        return (id)v67;
      }

      else
      {

        swift_bridgeObjectRelease(v14);
        return 0LL;
      }
    }

    else
    {
      return 0LL;
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t type metadata accessor for IDSRegistrationEventStruct(uint64_t a1)
{
  uint64_t result = qword_1009C7008;
  if (!qword_1009C7008) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for IDSRegistrationEventStruct);
  }
  return result;
}

char *sub_1004D744C(char *a1, char *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *(void *)a2;
    *(void *)uint64_t v4 = *(void *)a2;
    uint64_t v4 = (char *)(v16 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v16);
  }

  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v7 = *((void *)a2 + 2);
    *((void *)a1 + sub_10040A648(v1 + 2) = v7;
    uint64_t v8 = a3[6];
    uint64_t v9 = &a1[v8];
    uint64_t v10 = &a2[v8];
    uint64_t v11 = type metadata accessor for Date(0LL);
    uint64_t v12 = *(void *)(v11 - 8);
    id v13 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v12 + 48);
    __n128 v14 = swift_bridgeObjectRetain(v7);
    if (v13(v10, 1LL, v11, v14))
    {
      uint64_t v15 = sub_1003F5CB4(&qword_1009BC130);
      memcpy(v9, v10, *(void *)(*(void *)(v15 - 8) + 64LL));
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(&v4[a3[7]], &a2[a3[7]], v11);
    }

    else
    {
      uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
      v17(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0LL, 1LL, v11);
      v17(&v4[a3[7]], &a2[a3[7]], v11);
    }

    uint64_t v18 = a3[9];
    *(void *)&v4[a3[8]] = *(void *)&a2[a3[8]];
    *(void *)&v4[v18] = *(void *)&a2[v18];
    uint64_t v19 = a3[10];
    uint64_t v20 = a3[11];
    __n128 v21 = &v4[v19];
    uint64_t v22 = &a2[v19];
    uint64_t v23 = *((void *)v22 + 1);
    *(void *)__n128 v21 = *(void *)v22;
    *((void *)v21 + Hasher._combine(_:)(v0 & 1) = v23;
    uint64_t v24 = &v4[v20];
    Swift::String v25 = &a2[v20];
    uint64_t v26 = *((void *)v25 + 1);
    *(void *)uint64_t v24 = *(void *)v25;
    *((void *)v24 + Hasher._combine(_:)(v0 & 1) = v26;
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v26);
  }

  return v4;
}

uint64_t sub_1004D75B8(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[6];
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  int v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1LL, v5);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  if (!v7) {
    v8(v4, v5);
  }
  v8(a1 + a2[7], v5);
  swift_bridgeObjectRelease(*(void *)(a1 + a2[10] + 8));
  return swift_bridgeObjectRelease(*(void *)(a1 + a2[11] + 8));
}

uint64_t sub_1004D765C(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v6;
  uint64_t v7 = a3[6];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v11 + 48);
  __n128 v13 = swift_bridgeObjectRetain(v6);
  if (v12(v9, 1LL, v10, v13))
  {
    uint64_t v14 = sub_1003F5CB4(&qword_1009BC130);
    memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64LL));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(a1 + a3[7], a2 + a3[7], v10);
  }

  else
  {
    uint64_t v15 = *(void (**)(void *, const void *, uint64_t))(v11 + 16);
    v15(v8, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
    v15((void *)(a1 + a3[7]), (const void *)(a2 + a3[7]), v10);
  }

  uint64_t v16 = a3[9];
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  *(void *)(a1 + vswift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(a2 + v16);
  uint64_t v17 = a3[10];
  uint64_t v18 = a3[11];
  uint64_t v19 = (void *)(a1 + v17);
  uint64_t v20 = (void *)(a2 + v17);
  uint64_t v21 = v20[1];
  void *v19 = *v20;
  v19[1] = v21;
  uint64_t v22 = (void *)(a1 + v18);
  uint64_t v23 = (void *)(a2 + v18);
  uint64_t v24 = v23[1];
  *uint64_t v22 = *v23;
  v22[1] = v24;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v24);
  return a1;
}

char *sub_1004D779C(char *a1, char *a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *((void *)a1 + Hasher._combine(_:)(v0 & 1) = *((void *)a2 + 1);
  uint64_t v6 = *((void *)a2 + 2);
  uint64_t v7 = *((void *)a1 + 2);
  *((void *)a1 + sub_10040A648(v1 + 2) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a3[6];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = type metadata accessor for Date(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __n128 v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1LL, v11);
  int v15 = v13(v10, 1LL, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v9, v10, v11);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }

  if (v15)
  {
LABEL_6:
    uint64_t v16 = sub_1003F5CB4(&qword_1009BC130);
    memcpy(v9, v10, *(void *)(*(void *)(v16 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0LL, 1LL, v11);
LABEL_7:
  (*(void (**)(char *, char *, uint64_t))(v12 + 24))(&a1[a3[7]], &a2[a3[7]], v11);
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  uint64_t v17 = a3[10];
  uint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  *(void *)uint64_t v18 = *(void *)v19;
  uint64_t v20 = *((void *)v19 + 1);
  uint64_t v21 = *((void *)v18 + 1);
  *((void *)v18 + Hasher._combine(_:)(v0 & 1) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  uint64_t v22 = a3[11];
  uint64_t v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  *(void *)uint64_t v23 = *(void *)v24;
  uint64_t v25 = *((void *)v24 + 1);
  uint64_t v26 = *((void *)v23 + 1);
  *((void *)v23 + Hasher._combine(_:)(v0 & 1) = v25;
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRelease(v26);
  return a1;
}

uint64_t sub_1004D795C(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v6 = a3[6];
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9))
  {
    uint64_t v11 = sub_1003F5CB4(&qword_1009BC130);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64LL));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(a1 + a3[7], a2 + a3[7], v9);
  }

  else
  {
    uint64_t v12 = *(void (**)(void *, const void *, uint64_t))(v10 + 32);
    v12(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0LL, 1LL, v9);
    v12((void *)(a1 + a3[7]), (const void *)(a2 + a3[7]), v9);
  }

  uint64_t v13 = a3[9];
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  *(void *)(a1 + v1sub_10040A648(v1 + 3) = *(void *)(a2 + v13);
  uint64_t v14 = a3[11];
  *(_OWORD *)(a1 + a3[10]) = *(_OWORD *)(a2 + a3[10]);
  *(_OWORD *)(a1 + v14) = *(_OWORD *)(a2 + v14);
  return a1;
}

uint64_t sub_1004D7A70(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v6 = *(void *)(a1 + 16);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = a3[6];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1LL, v10);
  int v14 = v12(v9, 1LL, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v8, v9, v10);
      goto LABEL_7;
    }

    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }

  if (v14)
  {
LABEL_6:
    uint64_t v15 = sub_1003F5CB4(&qword_1009BC130);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v8, v9, v10);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
LABEL_7:
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 40))(a1 + a3[7], a2 + a3[7], v10);
  uint64_t v16 = a3[9];
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  *(void *)(a1 + vswift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(a2 + v16);
  uint64_t v17 = a3[10];
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (uint64_t *)(a2 + v17);
  uint64_t v21 = *v19;
  uint64_t v20 = v19[1];
  uint64_t v22 = v18[1];
  *uint64_t v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease(v22);
  uint64_t v23 = a3[11];
  uint64_t v24 = (void *)(a1 + v23);
  uint64_t v25 = (uint64_t *)(a2 + v23);
  uint64_t v27 = *v25;
  uint64_t v26 = v25[1];
  uint64_t v28 = v24[1];
  *uint64_t v24 = v27;
  v24[1] = v26;
  swift_bridgeObjectRelease(v28);
  return a1;
}

uint64_t sub_1004D7BFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1004D7C08);
}

uint64_t sub_1004D7C08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(__chkstk_darwin(v3, v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = sub_1003F5CB4(&qword_1009BC130);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a3 + 24);
    }

    else
    {
      uint64_t v10 = type metadata accessor for Date(0LL);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a3 + 28);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }

uint64_t sub_1004D7CAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1004D7CB8);
}

uint64_t sub_1004D7CB8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = (a2 - 1);
  }

  else
  {
    uint64_t v8 = sub_1003F5CB4(&qword_1009BC130);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a4 + 24);
    }

    else
    {
      uint64_t v10 = type metadata accessor for Date(0LL);
      uint64_t v9 = *(void *)(v10 - 8);
      uint64_t v11 = *(int *)(a4 + 28);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }

  return result;
}

void sub_1004D7D58(uint64_t a1)
{
  v6[0] = (char *)&value witness table for Builtin.Int64 + 64;
  v6[1] = &unk_10071D560;
  sub_1004B2554(319LL);
  if (v3 <= 0x3F)
  {
    void v6[2] = *(void *)(v2 - 8) + 64LL;
    uint64_t v4 = type metadata accessor for Date(319LL);
    if (v5 <= 0x3F)
    {
      void v6[3] = *(void *)(v4 - 8) + 64LL;
      void v6[4] = (char *)&value witness table for Builtin.Int64 + 64;
      v6[5] = (char *)&value witness table for Builtin.Int64 + 64;
      v6[6] = &unk_10071D578;
      v6[7] = &unk_10071D578;
      swift_initStructMetadata(a1, 256LL, 8LL, v6, a1 + 16);
    }
  }

uint64_t sub_1004D7E08()
{
  return 0LL;
}

uint64_t sub_1004D7E28(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for IDSRegistrationEventStruct(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1004D7E6C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for IDSRegistrationEventStruct(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1004D7EA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for IDSRegistrationEventStruct(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1004D7EEC()
{
  uint64_t v0 = type metadata accessor for Locale(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v2, v3);
  unint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v6 = [objc_allocWithZone(NSDateFormatter) init];
  static Locale.current.getter();
  Class isa = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v5, v0);
  [v6 setLocale:isa];

  NSString v8 = String._bridgeToObjectiveC()();
  [v6 setDateFormat:v8];

  Class v9 = Date._bridgeToObjectiveC()().super.isa;
  id v10 = [v6 stringFromDate:v9];

  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  return v11;
}

void sub_1004D8030()
{
  unk_1009C7985 = 0;
  unk_1009C7986 = -5120;
}

uint64_t sub_1004D805C()
{
  uint64_t v1 = (void *)(v0 + OBJC_IVAR___IDSQuerySDPersistenceManager_container);
  swift_beginAccess(v0 + OBJC_IVAR___IDSQuerySDPersistenceManager_container, v3, 0LL, 0LL);
  return swift_retain(*v1);
}

uint64_t sub_1004D80A4(uint64_t a1)
{
  return sub_1004AC458( a1,  &OBJC_IVAR___IDSQuerySDPersistenceManager_container,  (uint64_t (*)(uint64_t))&_swift_release);
}

uint64_t (*sub_1004D80B8(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_1004D80FC()
{
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR___IDSQuerySDPersistenceManager_filePath);
  swift_beginAccess(v0 + OBJC_IVAR___IDSQuerySDPersistenceManager_filePath, v4, 0LL, 0LL);
  uint64_t v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t sub_1004D8150(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = (void *)(v2 + OBJC_IVAR___IDSQuerySDPersistenceManager_filePath);
  swift_beginAccess(v5, v8, 1LL, 0LL);
  uint64_t v6 = v5[1];
  *unint64_t v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease(v6);
}

uint64_t (*sub_1004D81AC(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_1004D81F0()
{
  uint64_t v1 = (void *)(v0 + OBJC_IVAR___IDSQuerySDPersistenceManager_cleanupTimer);
  swift_beginAccess(v0 + OBJC_IVAR___IDSQuerySDPersistenceManager_cleanupTimer, v4, 0LL, 0LL);
  return swift_unknownObjectRetain(*v1, v2);
}

uint64_t sub_1004D8238(uint64_t a1)
{
  return sub_1004AC458( a1,  &OBJC_IVAR___IDSQuerySDPersistenceManager_cleanupTimer,  (uint64_t (*)(uint64_t))&_swift_unknownObjectRelease);
}

uint64_t (*sub_1004D824C(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

id sub_1004D8290(uint64_t a1, uint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  return sub_1004D82D0(a1, a2);
}

id sub_1004D82D0(uint64_t a1, uint64_t a2)
{
  uint64_t v47 = a1;
  uint64_t v48 = a2;
  uint64_t v3 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v4, v5);
  uint64_t v7 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v14, v15);
  uint64_t v17 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = v2;
  sub_10048ADB4(7u);
  uint64_t v19 = OBJC_IVAR___IDSQuerySDPersistenceManager_queue;
  sub_10041D3C4(0LL, (unint64_t *)&qword_1009B9830, &OBJC_CLASS___OS_dispatch_queue_ptr);
  static DispatchQoS.userInitiated.getter();
  (*(void (**)(char *, void, uint64_t))(v9 + 104))( v13,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:),  v8);
  v51[0] = _swiftEmptyArrayStorage;
  uint64_t v20 = sub_10040A2B0( &qword_1009B8E20,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v21 = sub_1003F5CB4((uint64_t *)&unk_1009B9840);
  uint64_t v22 = sub_10047E23C( (unint64_t *)&qword_1009B8E28,  (uint64_t *)&unk_1009B9840,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v23 = v3;
  uint64_t v24 = v47;
  dispatch thunk of SetAlgebra.init<A>(_:)(v51, v21, v22, v23, v20);
  *(void *)&v18[v19] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000022LL,  0x8000000100843650LL,  v17,  v7,  v13,  0LL);
  uint64_t v25 = v48;
  *(void *)&v18[OBJC_IVAR___IDSQuerySDPersistenceManager_container] = 0LL;
  uint64_t v26 = (uint64_t *)&v18[OBJC_IVAR___IDSQuerySDPersistenceManager_filePath];
  *uint64_t v26 = 0LL;
  v26[1] = 0LL;
  *(void *)&v18[OBJC_IVAR___IDSQuerySDPersistenceManager_cleanupTimer] = 0LL;
  swift_beginAccess(v26, v51, 1LL, 0LL);
  uint64_t v27 = v26[1];
  *uint64_t v26 = v24;
  v26[1] = v25;
  swift_bridgeObjectRetain(v25);

  swift_bridgeObjectRelease(v27);
  uint64_t v28 = (objc_class *)type metadata accessor for SDPersistenceManager(0LL);
  v50.receiver = v18;
  v50.super_class = v28;
  id v29 = objc_msgSendSuper2(&v50, "init");
  uint64_t v30 = (void *)objc_opt_self(&OBJC_CLASS___NSUserDefaults);
  id v31 = v29;
  id v32 = [v30 standardUserDefaults];
  NSString v33 = String._bridgeToObjectiveC()();
  id v34 = [v32 integerForKey:v33];

  if (v34 == (id)3)
  {
    uint64_t v35 = swift_bridgeObjectRelease(v25);
    unint64_t v36 = (os_log_s *)Logger.logObject.getter(v35);
    os_log_type_t v37 = static os_log_type_t.default.getter(v36);
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = swift_slowAlloc(22LL, -1LL);
      *(_DWORD *)uint64_t v38 = 134218240;
      uint64_t v49 = 3LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v38 + 4, v38 + 12);
      *(_WORD *)(v38 + 1sub_10040A648(v1 + 2) = 2048;
      uint64_t v49 = 3LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v38 + 14, v38 + 22);
      _os_log_impl( (void *)&_mh_execute_header,  v36,  v37,  "Version matches loading forceDeleteVersion: %ld persistedVersion: %ld",  (uint8_t *)v38,  0x16u);
      swift_slowDealloc(v38, -1LL, -1LL);
    }
  }

  else
  {
    char v39 = sub_10050A714(v24, v25);
    uint64_t v40 = swift_bridgeObjectRelease(v25);
    Swift::String v41 = (os_log_s *)Logger.logObject.getter(v40);
    os_log_type_t v42 = static os_log_type_t.default.getter(v41);
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = swift_slowAlloc(28LL, -1LL);
      *(_DWORD *)uint64_t v43 = 67109632;
      LODWORD(v49) = v39 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, (char *)&v49 + 4, v43 + 4, v43 + 8);
      *(_WORD *)(v43 + 8) = 2048;
      uint64_t v49 = 3LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v43 + 10, v43 + 18);
      *(_WORD *)(v43 + 18) = 2048;
      uint64_t v49 = (uint64_t)v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v43 + 20, v43 + 28);
      _os_log_impl( (void *)&_mh_execute_header,  v41,  v42,  "Did purge existing ids-query.db files: %{BOOL}d forceDeleteVersion: %ld persistedVersion: %ld",  (uint8_t *)v43,  0x1Cu);
      swift_slowDealloc(v43, -1LL, -1LL);
    }

    id v44 = [v30 standardUserDefaults];
    Class isa = Int._bridgeToObjectiveC()().super.super.isa;
    unint64_t v36 = (os_log_s *)String._bridgeToObjectiveC()();
    [v44 setValue:isa forKey:v36];
  }

  sub_1004D8838();
  return v31;
}

void sub_1004D8838()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ModelConfiguration(0LL);
  uint64_t v92 = *(os_log_s **)(v2 - 8);
  __chkstk_darwin(v3, v4);
  uint64_t v6 = (char *)&v88 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1003F5CB4(&qword_1009BCEE8);
  __chkstk_darwin(v7, v8);
  __n128 v10 = (char *)&v88 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11, v12);
  __n128 v14 = (char *)&v88 - v13;
  v15.n128_f64[0] = type metadata accessor for Schema.Version(0LL);
  uint64_t v17 = __chkstk_darwin(v15, v16);
  uint64_t v19 = (char *)&v88 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *(void *)v0) + 0x78LL))(v17);
  uint64_t v21 = swift_release(v20);
  if (!v20)
  {
    uint64_t v24 = sub_1003F5CB4(&qword_1009BCEF0);
    uint64_t v25 = swift_allocObject(v24, 192LL, 7LL);
    *(_OWORD *)(v25 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100719100;
    uint64_t v26 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable(0LL);
    uint64_t v27 = sub_10040A2B0( &qword_1009BC840,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable,  (uint64_t)&unk_100719F18);
    *(void *)(v25 + 3sub_10040A648(v1 + 2) = v26;
    *(void *)(v25 + 40) = v27;
    uint64_t v28 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice(0LL);
    uint64_t v29 = sub_10040A2B0( (unint64_t *)&unk_1009BC900,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A034);
    *(void *)(v25 + 48) = v28;
    *(void *)(v25 + 56) = v29;
    uint64_t v30 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession(0LL);
    uint64_t v31 = sub_10040A2B0( &qword_1009B9F70,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A150);
    *(void *)(v25 + 64) = v30;
    *(void *)(v25 + 7sub_10040A648(v1 + 2) = v31;
    uint64_t v32 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDPublicIdentity(0LL);
    uint64_t v33 = sub_10040A2B0( &qword_1009B9F88,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDPublicIdentity,  (uint64_t)&unk_10071A26C);
    *(void *)(v25 + 80) = v32;
    *(void *)(v25 + 88) = v33;
    uint64_t v34 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution(0LL);
    uint64_t v35 = sub_10040A2B0( &qword_1009B9FC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A4A4);
    *(void *)(v25 + 96) = v34;
    *(void *)(v25 + 104) = v35;
    uint64_t v36 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSGroupEncryptionKeyRollIndex(0LL);
    uint64_t v37 = sub_10040A2B0( &qword_1009B9FE0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSGroupEncryptionKeyRollIndex,  (uint64_t)&unk_10071A5C0);
    *(void *)(v25 + 11sub_10040A648(v1 + 2) = v36;
    *(void *)(v25 + 120) = v37;
    uint64_t v38 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDShortHandle(0LL);
    uint64_t v39 = sub_10040A2B0( &qword_1009B9FA0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDShortHandle,  (uint64_t)&unk_10071A388);
    *(void *)(v25 + 128) = v38;
    *(void *)(v25 + 136) = v39;
    uint64_t v40 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSOffGridDeliveryDonatedHandle(0LL);
    uint64_t v41 = sub_10040A2B0( (unint64_t *)&unk_1009BC920,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSOffGridDeliveryDonatedHandle,  (uint64_t)&unk_10071A6DC);
    *(void *)(v25 + 144) = v40;
    *(void *)(v25 + 15sub_10040A648(v1 + 2) = v41;
    uint64_t v42 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSRegistrationEvent(0LL);
    uint64_t v43 = sub_10040A2B0( &qword_1009BC540,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSRegistrationEvent,  (uint64_t)&unk_10071A7F8);
    *(void *)(v25 + 160) = v42;
    *(void *)(v25 + 168) = v43;
    uint64_t v44 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount(0LL);
    uint64_t v45 = sub_10040A2B0( &qword_1009BC4D0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQualifiedContactsCount,  (uint64_t)&unk_10071A914);
    *(void *)(v25 + 176) = v44;
    *(void *)(v25 + 184) = v45;
    Schema.Version.init(_:_:_:)(1LL, 0LL, 0LL);
    uint64_t v46 = type metadata accessor for Schema(0LL);
    swift_allocObject(v46, *(unsigned int *)(v46 + 48), *(unsigned __int16 *)(v46 + 52));
    uint64_t v47 = Schema.init(_:version:)(v25, v19);
    uint64_t v48 = &v1[OBJC_IVAR___IDSQuerySDPersistenceManager_logger];
    uint64_t v49 = v1;
    uint64_t v90 = (uint64_t)v48;
    objc_super v50 = (os_log_s *)Logger.logObject.getter(v49);
    os_log_type_t v51 = static os_log_type_t.default.getter(v50);
    BOOL v52 = os_log_type_enabled(v50, v51);
    uint64_t v91 = v6;
    if (v52)
    {
      uint64_t v53 = swift_slowAlloc(12LL, -1LL);
      uint64_t v89 = v2;
      id v54 = (uint8_t *)v53;
      uint64_t v55 = swift_slowAlloc(32LL, -1LL);
      uint64_t v88 = (char *)v47;
      uint64_t v56 = v55;
      *(_DWORD *)id v54 = 136315138;
      v94[0] = v55;
      uint64_t v57 = (*(uint64_t (**)(void))((swift_isaMask & *(void *)v49) + 0x90LL))();
      if (v58)
      {
        unint64_t v59 = v58;
      }

      else
      {
        uint64_t v57 = 7104878LL;
        unint64_t v59 = 0xE300000000000000LL;
      }

      uint64_t v93 = sub_1003FFBB0(v57, v59, v94);
      uint64_t v6 = v91;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, v94, v54 + 4, v54 + 12);

      swift_bridgeObjectRelease(v59);
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "File path provided for model configuration: %s", v54, 0xCu);
      swift_arrayDestroy(v56, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v60 = v56;
      uint64_t v47 = (uint64_t)v88;
      swift_slowDealloc(v60, -1LL, -1LL);
      uint64_t v61 = v54;
      uint64_t v2 = v89;
      swift_slowDealloc(v61, -1LL, -1LL);
    }

    else
    {
    }

    sub_1004D9228(v49, (uint64_t)v14);
    sub_100410FD0((uint64_t)v14, (uint64_t)v10, &qword_1009BCEE8);
    if ((*((unsigned int (**)(char *, uint64_t, uint64_t))v92 + 6))(v10, 1LL, v2) == 1)
    {
      sub_10040A274((uint64_t)v10, &qword_1009BCEE8);
      sub_1004D9478(0, v47, v49);
    }

    else
    {
      int v62 = v92;
      (*((void (**)(char *, char *, uint64_t))v92 + 4))(v6, v10, v2);
      type metadata accessor for ModelContainer(0LL);
      uint64_t v63 = sub_1003F5CB4((uint64_t *)&unk_1009BCEF8);
      uint64_t v64 = *((unsigned __int8 *)v62 + 80);
      uint64_t v65 = (v64 + 32) & ~v64;
      uint64_t v66 = swift_allocObject(v63, v65 + *((void *)v62 + 9), v64 | 7);
      uint64_t v67 = v6;
      uint64_t v68 = v66;
      *(_OWORD *)(v66 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1007184C0;
      (*((void (**)(uint64_t, char *, uint64_t))v62 + 2))(v66 + v65, v67, v2);
      uint64_t v69 = swift_retain(v47);
      uint64_t v70 = ModelContainer.__allocating_init(for:migrationPlan:configurations:)(v69, 0LL, 0LL, v68);
      uint64_t v88 = v14;
      uint64_t v71 = *(void (**)(uint64_t))((swift_isaMask & *(void *)v49) + 0x80LL);
      uint64_t v72 = swift_retain(v70);
      v71(v72);
      unint64_t v73 = v49;
      unint64_t v74 = (os_log_s *)Logger.logObject.getter(v73);
      os_log_type_t v75 = static os_log_type_t.default.getter(v74);
      if (os_log_type_enabled(v74, v75))
      {
        uint64_t v76 = swift_slowAlloc(12LL, -1LL);
        uint64_t v89 = v2;
        unint64_t v77 = (uint8_t *)v76;
        uint64_t v78 = swift_slowAlloc(32LL, -1LL);
        uint64_t v90 = v78;
        *(_DWORD *)unint64_t v77 = 136315138;
        v94[0] = v78;
        uint64_t v79 = (*(uint64_t (**)(void))((swift_isaMask & *(void *)v73) + 0x90LL))();
        if (v80)
        {
          unint64_t v81 = v80;
        }

        else
        {
          uint64_t v79 = 7104878LL;
          unint64_t v81 = 0xE300000000000000LL;
        }

        uint64_t v93 = sub_1003FFBB0(v79, v81, v94);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, v94, v77 + 4, v77 + 12);

        swift_bridgeObjectRelease(v81);
        _os_log_impl( (void *)&_mh_execute_header,  v74,  v75,  "Successfully initialized ModelContainer {filePath: %s}",  v77,  0xCu);
        uint64_t v82 = v90;
        swift_arrayDestroy(v90, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v82, -1LL, -1LL);
        uint64_t v83 = v77;
        uint64_t v2 = v89;
        swift_slowDealloc(v83, -1LL, -1LL);
      }

      else
      {
      }

      uint64_t v84 = v91;
      uint64_t v85 = [objc_allocWithZone((Class)type metadata accessor for ContainerLoadMetric()) init];
      v85[OBJC_IVAR____TtC17identityservicesdP33_534A9A00092BF767A56A700BAD85BE0F19ContainerLoadMetric_containerType] = 2;
      id v86 = [(id)objc_opt_self(IDSCoreAnalyticsLogger) defaultLogger];
      __n128 v14 = v88;
      if (!v86)
      {
        __break(1u);
        return;
      }

      uint64_t v87 = v86;
      [v86 logMetric:v85];
      swift_release(v70);

      (*((void (**)(char *, uint64_t))v92 + 1))(v84, v2);
    }

    sub_1004D9E04();
    swift_release(v47);
    sub_10040A274((uint64_t)v14, &qword_1009BCEE8);
    return;
  }

  uint64_t v92 = (os_log_s *)Logger.logObject.getter(v21);
  os_log_type_t v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v92, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v92, v22, "Container already loaded.", v23, 2u);
    swift_slowDealloc(v23, -1LL, -1LL);
  }
}

uint64_t sub_1004D9228@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v35 = a2;
  v3.n128_f64[0] = type metadata accessor for ModelConfiguration.CloudKitDatabase(0LL);
  __chkstk_darwin(v3, v4);
  uint64_t v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for URL(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v9, v10);
  __n128 v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13, v14);
  __n128 v16 = (char *)&v34 - v15;
  uint64_t v19 = __chkstk_darwin(v17, v18);
  uint64_t v21 = (char *)&v34 - v20;
  uint64_t v22 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *a1) + 0x90LL))(v19);
  if (v23)
  {
    uint64_t v24 = v22;
    uint64_t v25 = v23;
    uint64_t v26 = *(void (**)(uint64_t, uint64_t, __n128))((swift_isaMask & *a1) + 0x98LL);
    __n128 v27 = swift_bridgeObjectRetain(v23);
    v26(v24, v25, v27);
    URL.init(fileURLWithPath:)(v24, v25);
    swift_bridgeObjectRelease(v25);
    if (qword_1009C7020 != -1) {
      swift_once(&qword_1009C7020, sub_1004D8030);
    }
    URL.appendingPathComponent(_:)(qword_1009C7978, unk_1009C7980);
    uint64_t v28 = (*(uint64_t (**)(char *, char *, uint64_t))(v8 + 16))(v12, v16, v7);
    static ModelConfiguration.CloudKitDatabase.none.getter(v28);
    uint64_t v29 = v35;
    ModelConfiguration.init(_:schema:url:allowsSave:cloudKitDatabase:)(0LL, 0LL, 0LL, v12, 1LL, v6);
    uint64_t v30 = *(void (**)(char *, uint64_t))(v8 + 8);
    v30(v16, v7);
    v30(v21, v7);
    uint64_t v31 = type metadata accessor for ModelConfiguration(0LL);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56LL))( v29,  0LL,  1LL,  v31);
  }

  else
  {
    uint64_t v33 = type metadata accessor for ModelConfiguration(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56LL))( v35,  1LL,  1LL,  v33);
  }

uint64_t sub_1004D9478(char a1, uint64_t a2, void *a3)
{
  v6.n128_f64[0] = type metadata accessor for ModelConfiguration.GroupContainer(0LL);
  __chkstk_darwin(v6, v7);
  __n128 v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v10.n128_f64[0] = type metadata accessor for ModelConfiguration.CloudKitDatabase(0LL);
  __chkstk_darwin(v10, v11);
  __n128 v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for ModelConfiguration(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v18 = __chkstk_darwin(v16, v17);
  uint64_t v20 = (char *)&v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = static ModelConfiguration.CloudKitDatabase.none.getter(v18);
  static ModelConfiguration.GroupContainer.automatic.getter(v21);
  ModelConfiguration.init(_:schema:isStoredInMemoryOnly:allowsSave:groupContainer:cloudKitDatabase:)( 0LL,  0LL,  0LL,  1LL,  1LL,  v9,  v13);
  type metadata accessor for ModelContainer(0LL);
  uint64_t v22 = sub_1003F5CB4((uint64_t *)&unk_1009BCEF8);
  uint64_t v23 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v24 = (v23 + 32) & ~v23;
  uint64_t v25 = swift_allocObject(v22, v24 + *(void *)(v15 + 72), v23 | 7);
  *(_OWORD *)(v25 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1007184C0;
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 16))(v25 + v24, v20, v14);
  uint64_t v26 = swift_retain(a2);
  uint64_t v27 = ModelContainer.__allocating_init(for:migrationPlan:configurations:)(v26, 0LL, 0LL, v25);
  uint64_t v28 = *(uint64_t (**)(uint64_t))((swift_isaMask & *a3) + 0x80LL);
  uint64_t v29 = swift_retain(v27);
  uint64_t v30 = v28(v29);
  uint64_t v31 = (os_log_s *)Logger.logObject.getter(v30);
  os_log_type_t v32 = static os_log_type_t.default.getter(v31);
  BOOL v33 = os_log_type_enabled(v31, v32);
  if ((a1 & 1) != 0)
  {
    if (!v33) {
      goto LABEL_7;
    }
    uint64_t v34 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v34 = 0;
    os_log_type_t v35 = v32;
    uint64_t v36 = "Successfully initialized fallback in-memory ModelContainer";
  }

  else
  {
    if (!v33) {
      goto LABEL_7;
    }
    uint64_t v34 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v34 = 0;
    os_log_type_t v35 = v32;
    uint64_t v36 = "Successfully initialized in-memory ModelContainer";
  }

  _os_log_impl((void *)&_mh_execute_header, v31, v35, v36, v34, 2u);
  swift_slowDealloc(v34, -1LL, -1LL);
LABEL_7:

  uint64_t v37 = [objc_allocWithZone((Class)type metadata accessor for ContainerLoadMetric()) init];
  v37[OBJC_IVAR____TtC17identityservicesdP33_534A9A00092BF767A56A700BAD85BE0F19ContainerLoadMetric_containerType] = 1;
  id v38 = [(id)objc_opt_self(IDSCoreAnalyticsLogger) defaultLogger];
  if (v38)
  {
    uint64_t v39 = v38;
    [v38 logMetric:v37];
  }

  else
  {
    uint64_t v39 = (void *)Logger.logObject.getter(0LL);
    os_log_type_t v40 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled((os_log_t)v39, v40))
    {

      swift_release(v27);
      return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v20, v14);
    }

    uint64_t v41 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v41 = 0;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v39, v40, "Error initializing core analytics logger.", v41, 2u);
    swift_slowDealloc(v41, -1LL, -1LL);
  }

  swift_release(v27);

  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v20, v14);
}

void sub_1004D9928()
{
  id v0 = [(id)objc_opt_self(IDSDAccountController) sharedInstance];
  if (v0)
  {
    uint64_t v1 = v0;
    NSString v2 = String._bridgeToObjectiveC()();
    id v3 = [v1 registeredLocalURIsOnService:v2];

    if (v3)
    {
      uint64_t v4 = sub_10041D3C4(0LL, (unint64_t *)&unk_1009BC270, &OBJC_CLASS___IDSURI_ptr);
      static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

      return;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
}

id sub_1004D99EC()
{
  id result = [(id)objc_opt_self(IDSPeerIDManager) sharedInstance];
  if (!result) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1004D9A24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v29 = *(void *)(v9 - 8);
  __chkstk_darwin(v10, v11);
  __n128 v13 = (char *)v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v16, v17);
  uint64_t v19 = (char *)v28 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v28[1] = *(void *)&v4[OBJC_IVAR___IDSQuerySDPersistenceManager_queue];
  uint64_t v20 = (void *)swift_allocObject(&unk_100907F58, 56LL, 7LL);
  v20[2] = v4;
  void v20[3] = a3;
  v20[4] = a4;
  v20[5] = a1;
  v20[6] = a2;
  aBlock[4] = sub_10050AD10;
  os_log_type_t v32 = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1003F8400;
  aBlock[3] = &unk_100907F70;
  uint64_t v21 = _Block_copy(aBlock);
  uint64_t v22 = v4;
  swift_retain(a4);
  uint64_t v23 = swift_retain(a2);
  static DispatchQoS.unspecified.getter(v23);
  uint64_t v30 = _swiftEmptyArrayStorage;
  uint64_t v24 = sub_10040A2B0( (unint64_t *)&unk_1009BAC40,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v25 = sub_1003F5CB4((uint64_t *)&unk_1009B9870);
  uint64_t v26 = sub_10047E23C( (unint64_t *)&qword_1009BAC50,  (uint64_t *)&unk_1009B9870,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v30, v25, v26, v9, v24);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v19, v13, v21);
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v13, v9);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v19, v14);
  return swift_release(v32);
}

unint64_t sub_1004D9C3C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_1003F5CB4(&qword_1009BC958);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  __n128 v6 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v7 = *v6;
    id v8 = (id)*(v6 - 1);
    swift_bridgeObjectRetain(v7);
    unint64_t result = sub_100433024((uint64_t)v8);
    if ((v10 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v11 = 8 * result;
    *(void *)(v4[6] + v1Hasher._combine(_:)(v0 & 1) = v8;
    *(void *)(v4[7] + v1Hasher._combine(_:)(v0 & 1) = v7;
    uint64_t v12 = v4[2];
    BOOL v13 = __OFADD__(v12, 1LL);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    void v4[2] = v14;
    v6 += 2;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1004D9D44(uint64_t a1, uint64_t (*a2)(uint64_t), __n128 a3, __n128 a4)
{
  if (a1)
  {
    uint64_t v7 = swift_retain(a1);
    uint64_t v8 = a2(v7);
    if (v4)
    {
      uint64_t v9 = dispatch thunk of ModelContext.reset()(v8);
      swift_willThrow(v9);
    }

    return swift_release(a1);
  }

  else
  {
    __chkstk_darwin(a3, a4);
    return OS_dispatch_queue.asyncAndWait<A>(execute:)(sub_10050AF8C);
  }

uint64_t sub_1004D9E04()
{
  uint64_t v1 = v0;
  uint64_t v76 = type metadata accessor for DispatchWorkItemFlags(0LL);
  __chkstk_darwin(v2, v3);
  unint64_t v77 = (char *)&v72 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for OS_dispatch_source.TimerFlags(0LL);
  uint64_t v78 = *(void *)(v5 - 8);
  uint64_t v79 = v5;
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v12, v13);
  os_log_type_t v75 = (uint64_t *)((char *)&v72 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v15, v16);
  uint64_t v18 = (uint64_t *)((char *)&v72 - v17);
  uint64_t v81 = type metadata accessor for DispatchTime(0LL);
  uint64_t v19 = *(void *)(v81 - 8);
  __chkstk_darwin(v20, v21);
  uint64_t v23 = (char *)&v72 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v24, v25);
  uint64_t v27 = (char *)&v72 - v26;
  uint64_t v28 = sub_1004DA35C();
  uint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
  os_log_type_t v30 = static os_log_type_t.default.getter(v29);
  BOOL v31 = os_log_type_enabled(v29, v30);
  uint64_t v82 = v27;
  if (v31)
  {
    os_log_type_t v32 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)os_log_type_t v32 = 0;
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "Starting SD database cleanup timer.", v32, 2u);
    swift_slowDealloc(v32, -1LL, -1LL);
  }

  static DispatchTime.now()(v33);
  *uint64_t v18 = 10LL;
  unint64_t v73 = *(void (**)(void *, void, uint64_t))(v11 + 104);
  v73(v18, enum case for DispatchTimeInterval.seconds(_:), v10);
  + infix(_:_:)(v23, v18);
  unint64_t v74 = *(void (**)(void *, uint64_t))(v11 + 8);
  v74(v18, v10);
  uint64_t v34 = *(uint64_t (**)(char *, uint64_t))(v19 + 8);
  uint64_t v35 = v81;
  unint64_t v80 = v34;
  v34(v23, v81);
  sub_10041D3C4(0LL, (unint64_t *)&unk_1009BB170, &OBJC_CLASS___OS_dispatch_source_ptr);
  uint64_t v36 = *(void *)((char *)v1 + OBJC_IVAR___IDSQuerySDPersistenceManager_queue);
  aBlock[0] = _swiftEmptyArrayStorage;
  uint64_t v37 = sub_10040A2B0( (unint64_t *)&unk_1009BC3E0,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_source.TimerFlags,  (uint64_t)&protocol conformance descriptor for OS_dispatch_source.TimerFlags);
  uint64_t v38 = sub_1003F5CB4((uint64_t *)&unk_1009BB180);
  uint64_t v39 = sub_10047E23C(&qword_1009BC3F0, (uint64_t *)&unk_1009BB180, (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v40 = v38;
  uint64_t v41 = v79;
  uint64_t v42 = v37;
  uint64_t v43 = v82;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v40, v39, v79, v42);
  uint64_t v44 = static OS_dispatch_source.makeTimerSource(flags:queue:)(v9, v36);
  (*(void (**)(char *, uint64_t))(v78 + 8))(v9, v41);
  uint64_t v45 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v1) + 0xB0LL))(v44);
  uint64_t v46 = *(uint64_t (**)(uint64_t))((swift_isaMask & *v1) + 0xA8LL);
  uint64_t v47 = v46(v45);
  if (v47)
  {
    uint64_t v48 = v47;
    uint64_t ObjectType = swift_getObjectType(v47);
    objc_super v50 = v73;
    v73(v18, enum case for DispatchTimeInterval.never(_:), v10);
    os_log_type_t v51 = v75;
    *os_log_type_t v75 = 0LL;
    v50(v51, enum case for DispatchTimeInterval.nanoseconds(_:), v10);
    OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v43, v18, v51, ObjectType);
    swift_unknownObjectRelease(v48, v52);
    uint64_t v53 = (uint64_t (*)(void *, uint64_t))v74;
    v74(v51, v10);
    uint64_t v47 = v53(v18, v10);
  }

  uint64_t v54 = v46(v47);
  if (v54)
  {
    uint64_t v55 = v54;
    uint64_t v56 = swift_getObjectType(v54);
    uint64_t v57 = swift_allocObject(&unk_100908A08, 24LL, 7LL);
    *(void *)(v57 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
    aBlock[4] = sub_100510840;
    uint64_t v85 = v57;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1003F8400;
    aBlock[3] = &unk_100908A20;
    unint64_t v58 = _Block_copy(aBlock);
    uint64_t v83 = _swiftEmptyArrayStorage;
    uint64_t v59 = sub_10040A2B0( (unint64_t *)&unk_1009BAC40,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v60 = v1;
    uint64_t v61 = sub_1003F5CB4((uint64_t *)&unk_1009B9870);
    uint64_t v62 = sub_10047E23C( (unint64_t *)&qword_1009BAC50,  (uint64_t *)&unk_1009B9870,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v63 = v77;
    uint64_t v64 = v61;
    uint64_t v43 = v82;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v83, v64, v62, v76, v59);
    uint64_t v65 = type metadata accessor for DispatchWorkItem(0LL);
    swift_allocObject(v65, *(unsigned int *)(v65 + 48), *(unsigned __int16 *)(v65 + 52));
    uint64_t v66 = DispatchWorkItem.init(flags:block:)(v63, v58);
    swift_release(v85);
    OS_dispatch_source.setEventHandler(handler:)(v66, v56);
    swift_release(v66);
    uint64_t v54 = swift_unknownObjectRelease(v55, v67);
  }

  uint64_t v68 = v46(v54);
  if (v68)
  {
    uint64_t v69 = v68;
    swift_getObjectType(v68);
    OS_dispatch_source.resume()();
    swift_unknownObjectRelease(v69, v70);
  }

  return v80(v43, v35);
}

uint64_t sub_1004DA35C()
{
  uint64_t v1 = v0;
  __n128 v2 = (os_log_s *)Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Canceling cleanup timer.", v4, 2u);
    swift_slowDealloc(v4, -1LL, -1LL);
  }

  uint64_t result = (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0xA8LL))();
  if (result)
  {
    uint64_t v6 = result;
    swift_getObjectType(result);
    OS_dispatch_source.cancel()();
    return swift_unknownObjectRelease(v6, v7);
  }

  return result;
}

void sub_1004DA43C()
{
  uint64_t v1 = v0;
  __n128 v2 = (os_log_s *)((uint64_t (*)(void))Logger.logObject.getter)();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Cleanup timer fired.", v4, 2u);
    swift_slowDealloc(v4, -1LL, -1LL);
  }

  uint64_t v5 = (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x78LL))();
  uint64_t v6 = swift_release(v5);
  os_log_t oslog = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(oslog, v7);
  if (v5)
  {
    if (v8)
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v7, "Closing our SD database.", v9, 2u);
      swift_slowDealloc(v9, -1LL, -1LL);
    }

    (*(void (**)(void))((swift_isaMask & *v1) + 0x80LL))(0LL);
  }

  else
  {
    if (v8)
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v7, "SD database is already closed.", v10, 2u);
      swift_slowDealloc(v10, -1LL, -1LL);
    }
  }

id sub_1004DA668()
{
  return sub_1005039BC(0LL, (uint64_t (*)(void))type metadata accessor for SDPersistenceManager);
}

uint64_t sub_1004DA6FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v8 = &v18[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v9 = sub_1003F5CB4(&qword_1009BC298);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v11, v12);
  uint64_t v14 = &v18[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v19 = a2;
  uint64_t v20 = a3;
  uint64_t v15 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDPublicIdentity(0LL);
  uint64_t v21 = v15;
  Predicate.init(_:)(sub_100513B04, v18, 1LL, &v21);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 16))(v8, v14, v9);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v10 + 56))(v8, 0LL, 1LL, v9);
  uint64_t v16 = sub_10040A2B0( &qword_1009B9F88,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDPublicIdentity,  (uint64_t)&unk_10071A26C);
  dispatch thunk of ModelContext.delete<A>(model:where:includeSubclasses:)(v15, v8, 1LL, v15, v16);
  sub_10040A274((uint64_t)v8, &qword_1009BCB48);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v10 + 8))(v14, v9);
}

uint64_t sub_1004DA880@<X0>( uint64_t *a1@<X0>, void (*a2)(char *, void, uint64_t)@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v71 = a3;
  uint64_t v65 = a2;
  unint64_t v73 = a4;
  uint64_t v75 = type metadata accessor for PredicateExpressions.ComparisonOperator(0LL);
  uint64_t v55 = *(void *)(v75 - 8);
  uint64_t v5 = v55;
  __chkstk_darwin(v6, v7);
  unint64_t v74 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v67 = sub_1003F5CB4(&qword_1009BC548);
  uint64_t v69 = *(void *)(v67 - 8);
  __chkstk_darwin(v9, v10);
  __n128 v12 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_1003F5CB4(&qword_1009BCB70);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v15, v16);
  uint64_t v18 = (char *)&v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v63 = sub_1003F5CB4(&qword_1009BCB60);
  uint64_t v66 = *(void *)(v63 - 8);
  __chkstk_darwin(v19, v20);
  uint64_t v22 = (char *)&v55 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v70 = sub_1003F5CB4(&qword_1009BCB68);
  uint64_t v72 = *(void *)(v70 - 8);
  __chkstk_darwin(v23, v24);
  uint64_t v68 = (char *)&v55 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v26, v27);
  uint64_t v64 = (char *)&v55 - v28;
  uint64_t v29 = *a1;
  uint64_t v62 = v29;
  uint64_t v30 = sub_10047E23C( &qword_1009BCB88,  &qword_1009BCB70,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Variable<A>);
  uint64_t v59 = v30;
  static PredicateExpressions.build_Arg<A>(_:)(v29, v13, v30);
  uint64_t KeyPath = swift_getKeyPath(&unk_10071DA38);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v18, KeyPath, v13, v30);
  swift_release(KeyPath);
  uint64_t v61 = *(void (**)(char *, uint64_t))(v14 + 8);
  v61(v18, v13);
  uint64_t v60 = type metadata accessor for Date(0LL);
  static PredicateExpressions.build_Arg<A>(_:)(v65, v60);
  uint64_t v65 = *(void (**)(char *, void, uint64_t))(v5 + 104);
  os_log_type_t v32 = v74;
  uint64_t v33 = v75;
  v65(v74, enum case for PredicateExpressions.ComparisonOperator.lessThanOrEqual(_:), v75);
  uint64_t v34 = sub_10047E23C( &qword_1009BCB98,  &qword_1009BCB60,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.KeyPath<A, B>);
  uint64_t v58 = v34;
  uint64_t v35 = sub_10047E23C( &qword_1009BC598,  &qword_1009BC548,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Value<A>);
  uint64_t v57 = v35;
  uint64_t v56 = sub_10040A2B0( (unint64_t *)&unk_1009BC4A0,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  uint64_t v36 = v12;
  uint64_t v37 = v12;
  uint64_t v38 = v63;
  uint64_t v39 = v67;
  static PredicateExpressions.build_Comparison<A, B>(lhs:rhs:op:)(v22, v36, v32, v63, v67, v34, v35, v56);
  uint64_t v55 = *(void *)(v55 + 8);
  ((void (*)(char *, uint64_t))v55)(v32, v33);
  uint64_t v40 = *(void (**)(char *, uint64_t))(v69 + 8);
  uint64_t v41 = v37;
  v40(v37, v39);
  uint64_t v42 = *(void (**)(char *, uint64_t))(v66 + 8);
  v42(v22, v38);
  uint64_t v43 = v59;
  static PredicateExpressions.build_Arg<A>(_:)(v62, v13, v59);
  uint64_t v44 = swift_getKeyPath(&unk_10071DA38);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v18, v44, v13, v43);
  swift_release(v44);
  v61(v18, v13);
  static PredicateExpressions.build_Arg<A>(_:)(v71, v60);
  uint64_t v46 = v74;
  uint64_t v45 = v75;
  v65(v74, enum case for PredicateExpressions.ComparisonOperator.greaterThanOrEqual(_:), v75);
  uint64_t v47 = v68;
  static PredicateExpressions.build_Comparison<A, B>(lhs:rhs:op:)(v22, v41, v46, v38, v39, v58, v57, v56);
  ((void (*)(char *, uint64_t))v55)(v46, v45);
  v40(v41, v39);
  v42(v22, v38);
  uint64_t v48 = sub_1003F5CB4(&qword_1009BCED8);
  uint64_t v49 = v73;
  v73[3] = v48;
  v49[4] = sub_1005115B8( &qword_1009BCEE0,  &qword_1009BCED8,  (void (*)(void))sub_100512BA8,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.Disjunction<A, B>);
  sub_10040B2A8(v49);
  uint64_t v50 = sub_10047E23C( &qword_1009BCBE0,  &qword_1009BCB68,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Comparison<A, B>);
  os_log_type_t v51 = v64;
  uint64_t v52 = v70;
  static PredicateExpressions.build_Disjunction<A, B>(lhs:rhs:)(v64, v47, v70, v70, v50, v50);
  uint64_t v53 = *(void (**)(char *, uint64_t))(v72 + 8);
  v53(v47, v52);
  return ((uint64_t (*)(char *, uint64_t))v53)(v51, v52);
}

uint64_t sub_1004DAF94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1003F5CB4(&qword_1009BC8F0);
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1003F5CB4(&qword_1009BC820);
  __chkstk_darwin(v14, v15);
  uint64_t v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable(0LL);
  uint64_t v37 = a2;
  uint64_t v38 = a3;
  uint64_t v40 = a2;
  uint64_t v41 = a3;
  uint64_t v44 = v18;
  Predicate.init(_:)(sub_100513AB4, v39, 1LL, &v44);
  uint64_t v19 = sub_1003F5CB4(&qword_1009BC280);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL))(v17, 0LL, 1LL, v19);
  uint64_t v20 = sub_10040A2B0( &qword_1009BC840,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable,  (uint64_t)&unk_100719F18);
  dispatch thunk of ModelContext.delete<A>(model:where:includeSubclasses:)(v18, v17, 1LL, v18, v20);
  uint64_t result = sub_10040A274((uint64_t)v17, &qword_1009BC820);
  if (!v3)
  {
    uint64_t v22 = (uint64_t)v9;
    uint64_t v23 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice(0LL);
    uint64_t v26 = __chkstk_darwin(v24, v25);
    uint64_t v28 = v37;
    uint64_t v27 = v38;
    *(&v37 - sub_10040A648(v1 + 2) = v37;
    *(&v37 - Hasher._combine(_:)(v0 & 1) = v27;
    uint64_t v43 = v26;
    Predicate.init(_:)(sub_100513ABC, &v37 - 4, 1LL, &v43);
    uint64_t v29 = sub_1003F5CB4(&qword_1009BC290);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56LL))(v13, 0LL, 1LL, v29);
    uint64_t v30 = sub_10040A2B0( (unint64_t *)&unk_1009BC900,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A034);
    dispatch thunk of ModelContext.delete<A>(model:where:includeSubclasses:)(v23, v13, 1LL, v23, v30);
    sub_10040A274((uint64_t)v13, &qword_1009BC8F0);
    uint64_t v31 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession(0LL);
    uint64_t v34 = __chkstk_darwin(v32, v33);
    *(&v37 - sub_10040A648(v1 + 2) = v28;
    *(&v37 - Hasher._combine(_:)(v0 & 1) = v27;
    uint64_t v42 = v34;
    Predicate.init(_:)(sub_100513AC4, &v37 - 4, 1LL, &v42);
    uint64_t v35 = sub_1003F5CB4(&qword_1009BC288);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56LL))(v22, 0LL, 1LL, v35);
    uint64_t v36 = sub_10040A2B0( &qword_1009B9F70,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A150);
    dispatch thunk of ModelContext.delete<A>(model:where:includeSubclasses:)(v31, v22, 1LL, v31, v36);
    return sub_10040A274(v22, &qword_1009BC828);
  }

  return result;
}

uint64_t sub_1004DB2E0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v28 = a2;
  uint64_t v29 = a3;
  uint64_t v6 = sub_1003F5CB4(&qword_1009BC410);
  uint64_t v31 = *(void *)(v6 - 8);
  __chkstk_darwin(v7, v8);
  __n128 v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_1003F5CB4(&qword_1009BC848);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v13, v14);
  uint64_t v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_1003F5CB4(&qword_1009BC850);
  uint64_t v30 = *(void *)(v17 - 8);
  __chkstk_darwin(v18, v19);
  uint64_t v21 = (char *)&v28 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = *a1;
  uint64_t v23 = sub_10047E23C( &qword_1009BC860,  &qword_1009BC848,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Variable<A>);
  static PredicateExpressions.build_Arg<A>(_:)(v22, v11, v23);
  uint64_t KeyPath = swift_getKeyPath(&unk_10071D920);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v16, KeyPath, v11, v23);
  swift_release(KeyPath);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v16, v11);
  v32[0] = v28;
  v32[1] = v29;
  static PredicateExpressions.build_Arg<A>(_:)(v32, &type metadata for String);
  a4[3] = sub_1003F5CB4(&qword_1009BC858);
  a4[4] = sub_10051174C();
  sub_10040B2A8(a4);
  uint64_t v25 = sub_10047E23C( &qword_1009BC868,  &qword_1009BC850,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.KeyPath<A, B>);
  uint64_t v26 = sub_10047E23C( &qword_1009BC460,  &qword_1009BC410,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Value<A>);
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)( v21,  v10,  v17,  v6,  v25,  v26,  &protocol witness table for String);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v10, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v21, v17);
}

uint64_t sub_1004DB530@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v28 = a2;
  uint64_t v29 = a3;
  uint64_t v6 = sub_1003F5CB4(&qword_1009BC410);
  uint64_t v31 = *(void *)(v6 - 8);
  __chkstk_darwin(v7, v8);
  __n128 v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_1003F5CB4(&qword_1009BCD28);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v13, v14);
  uint64_t v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_1003F5CB4(&qword_1009BCD68);
  uint64_t v30 = *(void *)(v17 - 8);
  __chkstk_darwin(v18, v19);
  uint64_t v21 = (char *)&v28 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = *a1;
  uint64_t v23 = sub_10047E23C( &qword_1009BCD38,  &qword_1009BCD28,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Variable<A>);
  static PredicateExpressions.build_Arg<A>(_:)(v22, v11, v23);
  uint64_t KeyPath = swift_getKeyPath(&unk_10071DB28);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v16, KeyPath, v11, v23);
  swift_release(KeyPath);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v16, v11);
  v32[0] = v28;
  v32[1] = v29;
  static PredicateExpressions.build_Arg<A>(_:)(v32, &type metadata for String);
  a4[3] = sub_1003F5CB4(&qword_1009BCD70);
  a4[4] = sub_100513210();
  sub_10040B2A8(a4);
  uint64_t v25 = sub_10047E23C( &qword_1009BCD78,  &qword_1009BCD68,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.KeyPath<A, B>);
  uint64_t v26 = sub_10047E23C( &qword_1009BC460,  &qword_1009BC410,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Value<A>);
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)( v21,  v10,  v17,  v6,  v25,  v26,  &protocol witness table for String);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v10, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v21, v17);
}

uint64_t sub_1004DB780@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v28 = a2;
  uint64_t v29 = a3;
  uint64_t v6 = sub_1003F5CB4(&qword_1009BC410);
  uint64_t v31 = *(void *)(v6 - 8);
  __chkstk_darwin(v7, v8);
  __n128 v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_1003F5CB4(&qword_1009BC8A0);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v13, v14);
  uint64_t v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_1003F5CB4(&qword_1009BCC40);
  uint64_t v30 = *(void *)(v17 - 8);
  __chkstk_darwin(v18, v19);
  uint64_t v21 = (char *)&v28 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = *a1;
  uint64_t v23 = sub_10047E23C( &qword_1009BC8B0,  &qword_1009BC8A0,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Variable<A>);
  static PredicateExpressions.build_Arg<A>(_:)(v22, v11, v23);
  uint64_t KeyPath = swift_getKeyPath(&unk_10071D8D0);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v16, KeyPath, v11, v23);
  swift_release(KeyPath);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v16, v11);
  v32[0] = v28;
  v32[1] = v29;
  static PredicateExpressions.build_Arg<A>(_:)(v32, &type metadata for String);
  a4[3] = sub_1003F5CB4(&qword_1009BCC48);
  a4[4] = sub_100512DE8();
  sub_10040B2A8(a4);
  uint64_t v25 = sub_10047E23C( &qword_1009BCC58,  &qword_1009BCC40,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.KeyPath<A, B>);
  uint64_t v26 = sub_10047E23C( &qword_1009BC460,  &qword_1009BC410,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Value<A>);
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)( v21,  v10,  v17,  v6,  v25,  v26,  &protocol witness table for String);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v10, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v21, v17);
}

uint64_t sub_1004DBAE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v37 = a7;
  uint64_t v35 = a6;
  sub_1003F5CB4(&qword_1009BC828);
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1003F5CB4(&qword_1009BC820);
  __chkstk_darwin(v16, v17);
  __n128 v19 = (char *)&v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable(0LL);
  uint64_t v40 = a2;
  uint64_t v41 = a3;
  uint64_t v34 = a3;
  uint64_t v36 = a4;
  uint64_t v42 = a4;
  uint64_t v43 = a5;
  uint64_t v38 = a5;
  uint64_t v45 = v20;
  Predicate.init(_:)(sub_100513A70, v39, 1LL, &v45);
  uint64_t v21 = sub_1003F5CB4(&qword_1009BC280);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56LL))(v19, 0LL, 1LL, v21);
  uint64_t v22 = sub_10040A2B0( &qword_1009BC840,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable,  (uint64_t)&unk_100719F18);
  dispatch thunk of ModelContext.delete<A>(model:where:includeSubclasses:)(v20, v19, 1LL, v20, v22);
  uint64_t result = sub_10040A274((uint64_t)v19, &qword_1009BC820);
  if (!v7)
  {
    uint64_t v24 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession(0LL);
    uint64_t v27 = __chkstk_darwin(v25, v26);
    uint64_t v28 = v34;
    *(&v33 - 6) = a2;
    *(&v33 - 5) = v28;
    uint64_t v29 = v37;
    *(&v33 - 4) = v35;
    *(&v33 - sub_10040A648(v1 + 3) = v29;
    uint64_t v30 = v38;
    *(&v33 - sub_10040A648(v1 + 2) = v36;
    *(&v33 - Hasher._combine(_:)(v0 & 1) = v30;
    uint64_t v44 = v27;
    Predicate.init(_:)(sub_10050D518, &v33 - 8, 1LL, &v44);
    uint64_t v31 = sub_1003F5CB4(&qword_1009BC288);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56LL))(v15, 0LL, 1LL, v31);
    uint64_t v32 = sub_10040A2B0( &qword_1009B9F70,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A150);
    dispatch thunk of ModelContext.delete<A>(model:where:includeSubclasses:)(v24, v15, 1LL, v24, v32);
    return sub_10040A274((uint64_t)v15, &qword_1009BC828);
  }

  return result;
}

uint64_t sub_1004DBF00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v29 = a5;
  uint64_t v30 = a6;
  sub_1003F5CB4(&qword_1009BC828);
  __chkstk_darwin(v10, v11);
  __n128 v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1003F5CB4(&qword_1009BC820);
  __chkstk_darwin(v14, v15);
  __n128 v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable(0LL);
  uint64_t v32 = a2;
  uint64_t v33 = a3;
  uint64_t v34 = a4;
  uint64_t v36 = v18;
  Predicate.init(_:)(sub_1005138FC, v31, 1LL, &v36);
  uint64_t v19 = sub_1003F5CB4(&qword_1009BC280);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL))(v17, 0LL, 1LL, v19);
  uint64_t v20 = sub_10040A2B0( &qword_1009BC840,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable,  (uint64_t)&unk_100719F18);
  dispatch thunk of ModelContext.delete<A>(model:where:includeSubclasses:)(v18, v17, 1LL, v18, v20);
  uint64_t result = sub_10040A274((uint64_t)v17, &qword_1009BC820);
  if (!v6)
  {
    uint64_t v22 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession(0LL);
    uint64_t v25 = __chkstk_darwin(v23, v24);
    uint64_t v26 = v29;
    *(&v29 - 6) = a2;
    *(&v29 - 5) = v26;
    *(&v29 - 4) = v30;
    *(&v29 - sub_10040A648(v1 + 3) = a3;
    *(&v29 - sub_10040A648(v1 + 2) = a4;
    uint64_t v35 = v25;
    Predicate.init(_:)(sub_100513908, &v29 - 8, 1LL, &v35);
    uint64_t v27 = sub_1003F5CB4(&qword_1009BC288);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56LL))(v13, 0LL, 1LL, v27);
    uint64_t v28 = sub_10040A2B0( &qword_1009B9F70,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A150);
    dispatch thunk of ModelContext.delete<A>(model:where:includeSubclasses:)(v22, v13, 1LL, v22, v28);
    return sub_10040A274((uint64_t)v13, &qword_1009BC828);
  }

  return result;
}

uint64_t sub_1004DC154@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v69 = a3;
  uint64_t v70 = a4;
  uint64_t v60 = a2;
  unint64_t v73 = a5;
  uint64_t v6 = sub_1003F5CB4(&qword_1009BC410);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v71 = v6;
  uint64_t v72 = v7;
  __chkstk_darwin(v8, v9);
  uint64_t v67 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_1003F5CB4(&qword_1009BC858);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v74 = v11;
  uint64_t v75 = v12;
  __chkstk_darwin(v13, v14);
  uint64_t v65 = (char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_1003F5CB4(&qword_1009BC848);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v18, v19);
  uint64_t v21 = (char *)&v59 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = sub_1003F5CB4(&qword_1009BC850);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v63 = v22;
  uint64_t v64 = v23;
  __chkstk_darwin(v24, v25);
  uint64_t v27 = (char *)&v59 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = sub_1003F5CB4(&qword_1009BC6C8);
  uint64_t v61 = *(void *)(v28 - 8);
  __chkstk_darwin(v29, v30);
  uint64_t v32 = (char *)&v59 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v66 = sub_1003F5CB4(&qword_1009BCE78);
  uint64_t v68 = *(void *)(v66 - 8);
  __chkstk_darwin(v33, v34);
  uint64_t v62 = (char *)&v59 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v59 = *a1;
  uint64_t v36 = v59;
  v76[0] = v60;
  uint64_t v37 = sub_1003F5CB4(&qword_1009BAC90);
  static PredicateExpressions.build_Arg<A>(_:)(v76, v37);
  uint64_t v38 = sub_10047E23C( &qword_1009BC860,  &qword_1009BC848,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Variable<A>);
  static PredicateExpressions.build_Arg<A>(_:)(v36, v16, v38);
  uint64_t KeyPath = swift_getKeyPath(&unk_10071D920);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v21, KeyPath, v16, v38);
  swift_release(KeyPath);
  uint64_t v40 = *(void (**)(char *, uint64_t))(v17 + 8);
  v40(v21, v16);
  uint64_t v41 = sub_10047E23C( &qword_1009BC6F0,  &qword_1009BC6C8,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Value<A>);
  uint64_t v42 = sub_10047E23C( &qword_1009BC868,  &qword_1009BC850,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.KeyPath<A, B>);
  uint64_t v43 = sub_10047E23C(&qword_1009BC700, &qword_1009BAC90, (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v44 = v63;
  static PredicateExpressions.build_contains<A, B>(_:_:)( v32,  v27,  v28,  v63,  v41,  v42,  v43,  &protocol witness table for String);
  uint64_t v45 = *(void (**)(char *, uint64_t))(v64 + 8);
  v45(v27, v44);
  (*(void (**)(char *, uint64_t))(v61 + 8))(v32, v28);
  static PredicateExpressions.build_Arg<A>(_:)(v59, v16, v38);
  uint64_t v46 = swift_getKeyPath(&unk_10071D948);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v21, v46, v16, v38);
  swift_release(v46);
  v40(v21, v16);
  v76[0] = v69;
  v76[1] = v70;
  uint64_t v47 = v67;
  static PredicateExpressions.build_Arg<A>(_:)(v76, &type metadata for String);
  uint64_t v48 = sub_10047E23C( &qword_1009BC460,  &qword_1009BC410,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Value<A>);
  uint64_t v49 = v65;
  uint64_t v50 = v71;
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)( v27,  v47,  v44,  v71,  v42,  v48,  &protocol witness table for String);
  (*(void (**)(char *, uint64_t))(v72 + 8))(v47, v50);
  v45(v27, v44);
  uint64_t v51 = sub_1003F5CB4(&qword_1009BCEC8);
  uint64_t v52 = v73;
  v73[3] = v51;
  uint64_t v52[4] = sub_100513A00();
  sub_10040B2A8(v52);
  uint64_t v53 = sub_10047E23C( &qword_1009BCE98,  &qword_1009BCE78,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.SequenceContains<A, B>);
  uint64_t v54 = sub_10047E23C( &qword_1009BC898,  &qword_1009BC858,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Equal<A, B>);
  uint64_t v55 = v62;
  uint64_t v56 = v66;
  uint64_t v57 = v74;
  static PredicateExpressions.build_Conjunction<A, B>(lhs:rhs:)(v62, v49, v66, v74, v53, v54);
  (*(void (**)(char *, uint64_t))(v75 + 8))(v49, v57);
  return (*(uint64_t (**)(char *, uint64_t))(v68 + 8))(v55, v56);
}

uint64_t sub_1004DC60C@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void, void)@<X2>, uint64_t a4@<X3>, void (*a5)(void, void)@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  uint64_t v91 = a5;
  uint64_t v92 = a6;
  uint64_t v84 = a3;
  uint64_t v85 = a4;
  uint64_t v93 = a7;
  uint64_t v94 = a2;
  uint64_t v98 = sub_1003F5CB4(&qword_1009BC410);
  uint64_t v86 = *(void *)(v98 - 8);
  __chkstk_darwin(v8, v9);
  uint64_t v97 = (char *)&v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_1003F5CB4(&qword_1009BCC48);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v87 = v11;
  uint64_t v88 = v12;
  __chkstk_darwin(v13, v14);
  uint64_t v81 = (char *)&v75 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_1003F5CB4(&qword_1009BC8A0);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v18, v19);
  uint64_t v21 = (char *)&v75 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v95 = sub_1003F5CB4(&qword_1009BCC40);
  uint64_t v80 = *(void *)(v95 - 8);
  __chkstk_darwin(v22, v23);
  __n128 v25 = (char *)&v75 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = sub_1003F5CB4(&qword_1009BC6C8);
  uint64_t v79 = *(void *)(v26 - 8);
  __chkstk_darwin(v27, v28);
  __n128 v30 = (char *)&v75 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = sub_1003F5CB4(&qword_1009BCE50);
  uint64_t v32 = *(void *)(v31 - 8);
  uint64_t v82 = v31;
  uint64_t v83 = v32;
  __chkstk_darwin(v33, v34);
  uint64_t v78 = (char *)&v75 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v36 = sub_1003F5CB4(&qword_1009BCEA0);
  uint64_t v37 = *(void *)(v36 - 8);
  uint64_t v89 = v36;
  uint64_t v90 = v37;
  __chkstk_darwin(v38, v39);
  BOOL v99 = (char *)&v75 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v96 = *a1;
  uint64_t v41 = v96;
  uint64_t v100 = (void (*)(void, void))v94;
  uint64_t v42 = sub_1003F5CB4(&qword_1009BAC90);
  static PredicateExpressions.build_Arg<A>(_:)(&v100, v42);
  uint64_t v43 = sub_10047E23C( &qword_1009BC8B0,  &qword_1009BC8A0,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Variable<A>);
  uint64_t v94 = v43;
  static PredicateExpressions.build_Arg<A>(_:)(v41, v16, v43);
  uint64_t KeyPath = swift_getKeyPath(&unk_10071D8D0);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v21, KeyPath, v16, v43);
  swift_release(KeyPath);
  uint64_t v45 = *(void (**)(char *, uint64_t))(v17 + 8);
  v45(v21, v16);
  unint64_t v77 = v45;
  uint64_t v46 = sub_10047E23C( &qword_1009BC6F0,  &qword_1009BC6C8,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Value<A>);
  uint64_t v47 = sub_10047E23C( &qword_1009BCC58,  &qword_1009BCC40,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.KeyPath<A, B>);
  uint64_t v48 = sub_10047E23C(&qword_1009BC700, &qword_1009BAC90, (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v49 = v95;
  uint64_t v76 = v47;
  static PredicateExpressions.build_contains<A, B>(_:_:)( v30,  v25,  v26,  v95,  v46,  v47,  v48,  &protocol witness table for String);
  uint64_t v50 = *(void (**)(char *, uint64_t))(v80 + 8);
  v50(v25, v49);
  uint64_t v51 = v50;
  (*(void (**)(char *, uint64_t))(v79 + 8))(v30, v26);
  uint64_t v52 = v94;
  static PredicateExpressions.build_Arg<A>(_:)(v96, v16, v94);
  uint64_t v53 = swift_getKeyPath(&unk_10071DAB0);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v21, v53, v16, v52);
  swift_release(v53);
  v45(v21, v16);
  uint64_t v100 = v84;
  uint64_t v101 = v85;
  uint64_t v54 = v97;
  static PredicateExpressions.build_Arg<A>(_:)(&v100, &type metadata for String);
  uint64_t v85 = sub_10047E23C( &qword_1009BC460,  &qword_1009BC410,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Value<A>);
  uint64_t v55 = v81;
  uint64_t v56 = v49;
  uint64_t v57 = v49;
  uint64_t v58 = v98;
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)( v25,  v54,  v56,  v98,  v47,  v85,  &protocol witness table for String);
  uint64_t v84 = *(void (**)(void, void))(v86 + 8);
  v84(v54, v58);
  v51(v25, v57);
  uint64_t v59 = sub_10047E23C( &qword_1009BCE70,  &qword_1009BCE50,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.SequenceContains<A, B>);
  uint64_t v86 = sub_10047E23C( &qword_1009BCC60,  &qword_1009BCC48,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Equal<A, B>);
  uint64_t v60 = v78;
  uint64_t v61 = v82;
  uint64_t v62 = v87;
  static PredicateExpressions.build_Conjunction<A, B>(lhs:rhs:)(v78, v55, v82, v87, v59, v86);
  uint64_t v88 = *(void *)(v88 + 8);
  uint64_t v63 = v55;
  ((void (*)(char *, uint64_t))v88)(v55, v62);
  (*(void (**)(char *, uint64_t))(v83 + 8))(v60, v61);
  uint64_t v64 = v94;
  static PredicateExpressions.build_Arg<A>(_:)(v96, v16, v94);
  uint64_t v65 = swift_getKeyPath(&unk_10071D8F8);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v21, v65, v16, v64);
  swift_release(v65);
  v77(v21, v16);
  uint64_t v100 = v91;
  uint64_t v101 = v92;
  uint64_t v66 = v97;
  static PredicateExpressions.build_Arg<A>(_:)(&v100, &type metadata for String);
  uint64_t v67 = v95;
  uint64_t v68 = v98;
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)( v25,  v66,  v95,  v98,  v76,  v85,  &protocol witness table for String);
  v84(v66, v68);
  v51(v25, v67);
  uint64_t v69 = sub_1003F5CB4(&qword_1009BCEA8);
  uint64_t v70 = v93;
  v93[3] = v69;
  v70[4] = sub_100513928();
  sub_10040B2A8(v70);
  uint64_t v71 = sub_10047E23C( &qword_1009BCEC0,  &qword_1009BCEA0,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Conjunction<A, B>);
  uint64_t v72 = v99;
  uint64_t v73 = v89;
  static PredicateExpressions.build_Conjunction<A, B>(lhs:rhs:)(v99, v63, v89, v62, v71, v86);
  ((void (*)(char *, uint64_t))v88)(v63, v62);
  return (*(uint64_t (**)(char *, uint64_t))(v90 + 8))(v72, v73);
}

void sub_1004DCE30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((unint64_t)a2 >> 62)
  {
    if (a2 < 0) {
      uint64_t v24 = a2;
    }
    else {
      uint64_t v24 = a2 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a2);
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter(v24);
  }

  else
  {
    uint64_t v9 = *(void *)((a2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(a2);
  }

  uint64_t v26 = a4;
  uint64_t v25 = a3;
  if (!v9)
  {
    uint64_t v11 = _swiftEmptyArrayStorage;
LABEL_16:
    swift_bridgeObjectRelease(a2);
    uint64_t v21 = swift_allocObject(&unk_100907FA8, 32LL, 7LL);
    *(void *)(v21 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
    *(void *)(v21 + 24) = v11;
    uint64_t v22 = swift_allocObject(&unk_100907FD0, 32LL, 7LL);
    *(void *)(v22 + swift_unknownObjectWeakDestroy(v0 + 16) = v25;
    *(void *)(v22 + 24) = v26;
    __n128 v23 = *(void (**)(uint64_t (*)(uint64_t), uint64_t, id (*)(uint64_t), uint64_t))((swift_isaMask & *v4) + 0xE0LL);
    swift_bridgeObjectRetain(a1);
    swift_retain(v26);
    v23(sub_10050B15C, v21, sub_10050B174, v22);
    swift_release(v21);
    swift_release(v22);
    return;
  }

  if (v9 >= 1)
  {
    uint64_t v10 = 0LL;
    uint64_t v11 = _swiftEmptyArrayStorage;
    do
    {
      if ((a2 & 0xC000000000000001LL) != 0) {
        id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10, a2);
      }
      else {
        id v12 = *(id *)(a2 + 8 * v10 + 32);
      }
      __n128 v13 = v12;
      id v14 = objc_msgSend(v12, "prefixedURI", v25);
      uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      uint64_t v17 = v16;

      if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0) {
        uint64_t v11 = sub_10046D484(0LL, v11[2] + 1LL, 1, v11);
      }
      unint64_t v19 = v11[2];
      unint64_t v18 = v11[3];
      if (v19 >= v18 >> 1) {
        uint64_t v11 = sub_10046D484((void *)(v18 > 1), v19 + 1, 1, v11);
      }
      ++v10;
      void v11[2] = v19 + 1;
      uint64_t v20 = &v11[2 * v19];
      v20[4] = v15;
      v20[5] = v17;
    }

    while (v9 != v10);
    goto LABEL_16;
  }

  __break(1u);
}

uint64_t sub_1004DD050(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v9 = &v24[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  sub_1003F5CB4(&qword_1009BC820);
  __chkstk_darwin(v10, v11);
  __n128 v13 = &v24[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v14 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable(0LL);
  uint64_t v25 = a2;
  uint64_t v26 = a3;
  uint64_t v28 = v14;
  Predicate.init(_:)(sub_1005137D0, v24, 1LL, &v28);
  uint64_t v15 = sub_1003F5CB4(&qword_1009BC280);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL))(v13, 0LL, 1LL, v15);
  uint64_t v16 = sub_10040A2B0( &qword_1009BC840,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable,  (uint64_t)&unk_100719F18);
  dispatch thunk of ModelContext.delete<A>(model:where:includeSubclasses:)(v14, v13, 1LL, v14, v16);
  uint64_t result = sub_10040A274((uint64_t)v13, &qword_1009BC820);
  if (!v3)
  {
    uint64_t v18 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession(0LL);
    uint64_t v21 = __chkstk_darwin(v19, v20);
    *(void *)&v24[-16] = a2;
    *(void *)&v24[-8] = a3;
    uint64_t v27 = v21;
    Predicate.init(_:)(sub_1005137D8, &v24[-32], 1LL, &v27);
    uint64_t v22 = sub_1003F5CB4(&qword_1009BC288);
    (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56LL))(v9, 0LL, 1LL, v22);
    uint64_t v23 = sub_10040A2B0( &qword_1009B9F70,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A150);
    dispatch thunk of ModelContext.delete<A>(model:where:includeSubclasses:)(v18, v9, 1LL, v18, v23);
    return sub_10040A274((uint64_t)v9, &qword_1009BC828);
  }

  return result;
}

uint64_t sub_1004DD288@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v61 = a3;
  uint64_t v64 = a4;
  uint64_t v6 = sub_1003F5CB4(&qword_1009BC848);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v8, v9);
  __n128 v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_1003F5CB4(&qword_1009BC850);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v58 = v12;
  uint64_t v59 = v13;
  __chkstk_darwin(v14, v15);
  uint64_t v17 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v65 = sub_1003F5CB4(&qword_1009BC6C8);
  uint64_t v57 = *(void *)(v65 - 8);
  __chkstk_darwin(v18, v19);
  uint64_t v21 = (char *)&v51 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = sub_1003F5CB4(&qword_1009BCE78);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v62 = v22;
  uint64_t v63 = v23;
  __chkstk_darwin(v24, v25);
  uint64_t v60 = (char *)&v51 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v27, v28);
  uint64_t v56 = (char *)&v51 - v29;
  uint64_t v30 = *a1;
  uint64_t v54 = v30;
  uint64_t v66 = a2;
  uint64_t v55 = sub_1003F5CB4(&qword_1009BAC90);
  static PredicateExpressions.build_Arg<A>(_:)(&v66, v55);
  uint64_t v31 = sub_10047E23C( &qword_1009BC860,  &qword_1009BC848,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Variable<A>);
  static PredicateExpressions.build_Arg<A>(_:)(v30, v6, v31);
  uint64_t KeyPath = swift_getKeyPath(&unk_10071D920);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v11, KeyPath, v6, v31);
  swift_release(KeyPath);
  uint64_t v53 = *(void (**)(char *, uint64_t))(v7 + 8);
  v53(v11, v6);
  uint64_t v33 = sub_10047E23C( &qword_1009BC6F0,  &qword_1009BC6C8,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Value<A>);
  uint64_t v52 = v33;
  uint64_t v34 = sub_10047E23C( &qword_1009BC868,  &qword_1009BC850,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.KeyPath<A, B>);
  uint64_t v51 = v34;
  uint64_t v35 = sub_10047E23C(&qword_1009BC700, &qword_1009BAC90, (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v36 = v65;
  uint64_t v37 = v58;
  static PredicateExpressions.build_contains<A, B>(_:_:)( v21,  v17,  v65,  v58,  v33,  v34,  v35,  &protocol witness table for String);
  __n128 v38 = *(void (**)(char *, uint64_t))(v59 + 8);
  uint64_t v39 = v37;
  v38(v17, v37);
  uint64_t v40 = *(void (**)(char *, uint64_t))(v57 + 8);
  v40(v21, v36);
  uint64_t v66 = v61;
  static PredicateExpressions.build_Arg<A>(_:)(&v66, v55);
  static PredicateExpressions.build_Arg<A>(_:)(v54, v6, v31);
  uint64_t v41 = swift_getKeyPath(&unk_10071D948);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v11, v41, v6, v31);
  swift_release(v41);
  v53(v11, v6);
  uint64_t v42 = v60;
  uint64_t v43 = v65;
  static PredicateExpressions.build_contains<A, B>(_:_:)( v21,  v17,  v65,  v39,  v52,  v51,  v35,  &protocol witness table for String);
  v38(v17, v39);
  v40(v21, v43);
  uint64_t v44 = sub_1003F5CB4(&qword_1009BCE80);
  uint64_t v45 = v64;
  v64[3] = v44;
  v45[4] = sub_1005115B8( &qword_1009BCE88,  &qword_1009BCE80,  (void (*)(void))sub_10051386C,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.Conjunction<A, B>);
  sub_10040B2A8(v45);
  uint64_t v46 = sub_10047E23C( &qword_1009BCE98,  &qword_1009BCE78,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.SequenceContains<A, B>);
  uint64_t v47 = v56;
  uint64_t v48 = v62;
  static PredicateExpressions.build_Conjunction<A, B>(lhs:rhs:)(v56, v42, v62, v62, v46, v46);
  uint64_t v49 = *(void (**)(char *, uint64_t))(v63 + 8);
  v49(v42, v48);
  return ((uint64_t (*)(char *, uint64_t))v49)(v47, v48);
}

uint64_t sub_1004DD6BC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v61 = a3;
  uint64_t v64 = a4;
  uint64_t v6 = sub_1003F5CB4(&qword_1009BC8A0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v8, v9);
  __n128 v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_1003F5CB4(&qword_1009BCC40);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v58 = v12;
  uint64_t v59 = v13;
  __chkstk_darwin(v14, v15);
  uint64_t v17 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v65 = sub_1003F5CB4(&qword_1009BC6C8);
  uint64_t v57 = *(void *)(v65 - 8);
  __chkstk_darwin(v18, v19);
  uint64_t v21 = (char *)&v51 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = sub_1003F5CB4(&qword_1009BCE50);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v62 = v22;
  uint64_t v63 = v23;
  __chkstk_darwin(v24, v25);
  uint64_t v60 = (char *)&v51 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v27, v28);
  uint64_t v56 = (char *)&v51 - v29;
  uint64_t v30 = *a1;
  uint64_t v54 = v30;
  uint64_t v66 = a2;
  uint64_t v55 = sub_1003F5CB4(&qword_1009BAC90);
  static PredicateExpressions.build_Arg<A>(_:)(&v66, v55);
  uint64_t v31 = sub_10047E23C( &qword_1009BC8B0,  &qword_1009BC8A0,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Variable<A>);
  static PredicateExpressions.build_Arg<A>(_:)(v30, v6, v31);
  uint64_t KeyPath = swift_getKeyPath(&unk_10071D8D0);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v11, KeyPath, v6, v31);
  swift_release(KeyPath);
  uint64_t v53 = *(void (**)(char *, uint64_t))(v7 + 8);
  v53(v11, v6);
  uint64_t v33 = sub_10047E23C( &qword_1009BC6F0,  &qword_1009BC6C8,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Value<A>);
  uint64_t v52 = v33;
  uint64_t v34 = sub_10047E23C( &qword_1009BCC58,  &qword_1009BCC40,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.KeyPath<A, B>);
  uint64_t v51 = v34;
  uint64_t v35 = sub_10047E23C(&qword_1009BC700, &qword_1009BAC90, (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v36 = v65;
  uint64_t v37 = v58;
  static PredicateExpressions.build_contains<A, B>(_:_:)( v21,  v17,  v65,  v58,  v33,  v34,  v35,  &protocol witness table for String);
  __n128 v38 = *(void (**)(char *, uint64_t))(v59 + 8);
  uint64_t v39 = v37;
  v38(v17, v37);
  uint64_t v40 = *(void (**)(char *, uint64_t))(v57 + 8);
  v40(v21, v36);
  uint64_t v66 = v61;
  static PredicateExpressions.build_Arg<A>(_:)(&v66, v55);
  static PredicateExpressions.build_Arg<A>(_:)(v54, v6, v31);
  uint64_t v41 = swift_getKeyPath(&unk_10071D8F8);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v11, v41, v6, v31);
  swift_release(v41);
  v53(v11, v6);
  uint64_t v42 = v60;
  uint64_t v43 = v65;
  static PredicateExpressions.build_contains<A, B>(_:_:)( v21,  v17,  v65,  v39,  v52,  v51,  v35,  &protocol witness table for String);
  v38(v17, v39);
  v40(v21, v43);
  uint64_t v44 = sub_1003F5CB4(&qword_1009BCE58);
  uint64_t v45 = v64;
  v64[3] = v44;
  v45[4] = sub_1005115B8( &qword_1009BCE60,  &qword_1009BCE58,  (void (*)(void))sub_1005137E0,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.Conjunction<A, B>);
  sub_10040B2A8(v45);
  uint64_t v46 = sub_10047E23C( &qword_1009BCE70,  &qword_1009BCE50,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.SequenceContains<A, B>);
  uint64_t v47 = v56;
  uint64_t v48 = v62;
  static PredicateExpressions.build_Conjunction<A, B>(lhs:rhs:)(v56, v42, v62, v62, v46, v46);
  uint64_t v49 = *(void (**)(char *, uint64_t))(v63 + 8);
  v49(v42, v48);
  return ((uint64_t (*)(char *, uint64_t))v49)(v47, v48);
}

uint64_t sub_1004DDBC0()
{
  uint64_t v4 = (char *)v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1003F5CB4(&qword_1009BC828);
  __chkstk_darwin(v5, v6);
  __n128 v8 = (char *)v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1003F5CB4(&qword_1009BC8F0);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1003F5CB4(&qword_1009BC820);
  __chkstk_darwin(v13, v14);
  uint64_t v16 = (char *)v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable(0LL);
  uint64_t v18 = sub_1003F5CB4(&qword_1009BC280);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))(v16, 1LL, 1LL, v18);
  uint64_t v19 = sub_10040A2B0( &qword_1009BC840,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable,  (uint64_t)&unk_100719F18);
  dispatch thunk of ModelContext.delete<A>(model:where:includeSubclasses:)(v17, v16, 1LL, v17, v19);
  uint64_t result = sub_10040A274((uint64_t)v16, &qword_1009BC820);
  if (!v0)
  {
    uint64_t v21 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice(0LL);
    uint64_t v22 = sub_1003F5CB4(&qword_1009BC290);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56LL))(v12, 1LL, 1LL, v22);
    uint64_t v23 = sub_10040A2B0( (unint64_t *)&unk_1009BC900,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A034);
    dispatch thunk of ModelContext.delete<A>(model:where:includeSubclasses:)(v21, v12, 1LL, v21, v23);
    sub_10040A274((uint64_t)v12, &qword_1009BC8F0);
    uint64_t v24 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession(0LL);
    uint64_t v25 = sub_1003F5CB4(&qword_1009BC288);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56LL))(v8, 1LL, 1LL, v25);
    uint64_t v26 = sub_10040A2B0( &qword_1009B9F70,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A150);
    dispatch thunk of ModelContext.delete<A>(model:where:includeSubclasses:)(v24, v8, 1LL, v24, v26);
    sub_10040A274((uint64_t)v8, &qword_1009BC828);
    uint64_t v27 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDPublicIdentity(0LL);
    uint64_t v28 = sub_1003F5CB4(&qword_1009BC298);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56LL))(v4, 1LL, 1LL, v28);
    uint64_t v29 = sub_10040A2B0( &qword_1009B9F88,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDPublicIdentity,  (uint64_t)&unk_10071A26C);
    dispatch thunk of ModelContext.delete<A>(model:where:includeSubclasses:)(v27, v4, 1LL, v27, v29);
    return sub_10040A274((uint64_t)v4, &qword_1009BCB48);
  }

  return result;
}

uint64_t sub_1004DDFD0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, void *a6, uint64_t a7, unint64_t a8)
{
  uint64_t v15 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDPublicIdentity(0LL);
  swift_bridgeObjectRetain(a3);
  sub_1004028CC(a4, a5);
  id v16 = [a6 prefixedURI];
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
  uint64_t v19 = v18;

  sub_1004028CC(a7, a8);
  uint64_t v20 = sub_100445294(a2, a3, a4, a5, v17, v19, a7, a8);
  uint64_t v21 = sub_10040A2B0( &qword_1009B9F88,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDPublicIdentity,  (uint64_t)&unk_10071A26C);
  dispatch thunk of ModelContext.insert<A>(_:)(v20, v15, v21);
  return swift_release(v20);
}

void sub_1004DE2C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, void *a7)
{
  id v162 = a7;
  id v166 = a5;
  uint64_t v176 = a3;
  uint64_t v177 = a4;
  uint64_t v178 = a1;
  uint64_t v161 = type metadata accessor for Date(0LL);
  uint64_t v160 = *(void *)(v161 - 8);
  __chkstk_darwin(v9, v10);
  uint64_t v159 = (char *)&v152 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12, v13);
  uint64_t v158 = (char *)&v152 - v14;
  __chkstk_darwin(v15, v16);
  uint64_t v157 = (char *)&v152 - v17;
  __chkstk_darwin(v18, v19);
  uint64_t v156 = (char *)&v152 - v20;
  if ((unint64_t)a2 >> 62)
  {
    if (a2 < 0) {
      uint64_t v24 = a2;
    }
    else {
      uint64_t v24 = a2 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a2);
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter(v24);
    if (v21) {
      goto LABEL_3;
    }
LABEL_11:
    swift_bridgeObjectRelease(a2);
    uint64_t v23 = 0LL;
    goto LABEL_12;
  }

  uint64_t v21 = *(void *)((a2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a2);
  if (!v21) {
    goto LABEL_11;
  }
LABEL_3:
  if ((a2 & 0xC000000000000001LL) != 0)
  {
    id v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, a2);
  }

  else
  {
    if (!*(void *)((a2 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
      __break(1u);
      goto LABEL_62;
    }

    id v22 = *(id *)(a2 + 32);
  }

  uint64_t v23 = v22;
  swift_bridgeObjectRelease(a2);
LABEL_12:
  id v25 = [v166 prefixedURI];
  uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
  uint64_t v28 = v27;

  uint64_t v163 = a2;
  unint64_t v165 = (char *)v21;
  id v153 = v23;
  uint64_t v187 = v28;
  if (v23)
  {
    id v29 = [v23 senderCorrelationIdentifier];
    if (v29)
    {
      uint64_t v30 = v29;
      uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
      uint64_t v33 = v32;
    }

    else
    {
      uint64_t v31 = 0LL;
      uint64_t v33 = 0LL;
    }

    id v35 = [v23 shortHandle];
    if (v35)
    {
      uint64_t v36 = v35;
      uint64_t v23 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
      uint64_t v34 = v37;
    }

    else
    {
      uint64_t v23 = 0LL;
      uint64_t v34 = 0LL;
    }
  }

  else
  {
    uint64_t v34 = 0LL;
    uint64_t v31 = 0LL;
    uint64_t v33 = 0LL;
  }

  type metadata accessor for ArchiveHelper();
  sub_10041D3C4(0LL, &qword_1009BC468, &OBJC_CLASS___IDSQueryKeyTransparencyContext_ptr);
  char v38 = sub_10040A96C();
  uint64_t v39 = sub_10040A974(a6, v38 & 1);
  uint64_t v41 = v40;
  uint64_t v42 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable(0LL);
  uint64_t v43 = v177;
  swift_bridgeObjectRetain(v177);
  *(void *)&__int128 v149 = v39;
  *((void *)&v149 + Hasher._combine(_:)(v0 & 1) = v41;
  uint64_t v44 = sub_10043F954(v176, v43, v26, v187, v31, v33, (uint64_t)v23, v34, v149);
  uint64_t v45 = sub_10040A2B0( &qword_1009BC840,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable,  (uint64_t)&unk_100719F18);
  uint64_t v164 = v44;
  dispatch thunk of ModelContext.insert<A>(_:)(v44, v42, v45);
  uint64_t v46 = (uint64_t)v165;
  if (!v165) {
    goto LABEL_54;
  }
  uint64_t v155 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession(0LL);
  if (v46 < 1)
  {
LABEL_62:
    __break(1u);
    return;
  }

  uint64_t v47 = v163;
  unint64_t v154 = v163 & 0xC000000000000001LL;
  swift_bridgeObjectRetain(v163);
  uint64_t v48 = 0LL;
  do
  {
    uint64_t v187 = v48;
    if (v154) {
      id v79 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v48, v47);
    }
    else {
      id v79 = *(id *)(v47 + 8LL * (void)v48 + 32);
    }
    uint64_t v80 = v79;
    id v81 = [v79 pushTokenObject];
    id v82 = [v81 rawToken];

    uint64_t v83 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v82);
    uint64_t v185 = v84;
    uint64_t v186 = v83;

    id v184 = [v80 capabilities];
    LODWORD(v18Hasher._combine(_:)(v0 & 1) = [v80 ngmVersion];
    unsigned int v174 = [v80 legacyVersion];
    id v85 = [v80 KTLoggableData];
    if (v85)
    {
      uint64_t v86 = v85;
      uint64_t v175 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v85);
      uint64_t v183 = v87;
    }

    else
    {
      uint64_t v175 = 0LL;
      uint64_t v183 = (void *)0xF000000000000000LL;
    }

    id v88 = [v80 KTDeviceSignature];
    if (v88)
    {
      uint64_t v89 = v88;
      uint64_t v180 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v88);
      uint64_t v182 = v90;
    }

    else
    {
      uint64_t v180 = 0LL;
      uint64_t v182 = 0xF000000000000000LL;
    }

    id v91 = [v80 serializedLegacyPublicIdentity];
    if (v91)
    {
      uint64_t v92 = v91;
      uint64_t v172 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v91);
      unint64_t v179 = v93;
    }

    else
    {
      uint64_t v172 = 0LL;
      unint64_t v179 = 0xF000000000000000LL;
    }

    id v94 = [v80 serializedNGMDeviceIdentity];
    if (v94)
    {
      uint64_t v95 = v94;
      uint64_t v96 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v94);
      unint64_t v170 = v97;
      uint64_t v171 = v96;
    }

    else
    {
      unint64_t v170 = 0xF000000000000000LL;
      uint64_t v171 = 0LL;
    }

    id v98 = [v80 serializedNGMDevicePrekey];
    if (v98)
    {
      BOOL v99 = v98;
      uint64_t v169 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v98);
      unint64_t v168 = v100;
    }

    else
    {
      uint64_t v169 = 0LL;
      unint64_t v168 = 0xF000000000000000LL;
    }

    id v101 = [v80 serializedApplicationPublicKey];
    if (v101)
    {
      uint64_t v102 = v101;
      uint64_t v103 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v101);
      unint64_t v105 = v104;
    }

    else
    {
      uint64_t v103 = 0LL;
      unint64_t v105 = 0xF000000000000000LL;
    }

    unsigned __int8 v106 = [v80 mismatchedAccountFlag];
    unsigned __int8 v107 = [v80 ktCapableFlag];
    id v108 = [v80 anonymizedSenderID];
    if (v108)
    {
      uint64_t v109 = v108;
      char v110 = static String._unconditionallyBridgeFromObjectiveC(_:)(v108);
      uint64_t v112 = v111;
    }

    else
    {
      char v110 = 0;
      uint64_t v112 = 0LL;
    }

    uint64_t v167 = v112;
    unsigned __int8 v113 = [v80 verifiedBusiness];
    id v114 = [v80 gameCenterData];
    uint64_t v173 = v80;
    id v151 = [v80 familyEndpointData];
    LOBYTE(v148) = v113;
    char v146 = v110;
    uint64_t v147 = v112;
    BYTE1(v145) = v107;
    LOBYTE(v145) = v106;
    unint64_t v115 = v168;
    uint64_t v116 = v169;
    unint64_t v117 = v170;
    *((void *)&v144 + Hasher._combine(_:)(v0 & 1) = v170;
    uint64_t v118 = v171;
    *(void *)&__int128 v144 = v171;
    uint64_t v119 = v172;
    uint64_t v120 = v175;
    uint64_t v181 = sub_10050CEE8( v176,  v177,  v186,  (unint64_t)v185,  (uint64_t)v184,  (__int16)v181,  v174,  v175,  (unint64_t)v183,  v180,  v182,  v172,  v179,  v144,  v121,  v169,  v168,  v103,  SBYTE1(v103),  v105,  v145,  v146,  v147,  v148);

    swift_bridgeObjectRelease(v167);
    sub_10040AD00(v103, v105);
    sub_10040AD00(v116, v115);
    sub_10040AD00(v118, v117);
    sub_10040AD00(v119, v179);
    sub_10040AD00(v180, v182);
    sub_10040AD00(v120, (unint64_t)v183);

    uint64_t v122 = v181;
    sub_100402A84(v186, (unint64_t)v185);
    uint64_t v123 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice(0LL);
    uint64_t v124 = sub_10040A2B0( (unint64_t *)&unk_1009BC900,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A034);
    dispatch thunk of ModelContext.insert<A>(_:)(v122, v123, v124);
    uint64_t v188 = sub_10043F574();
    if (v188)
    {
      uint64_t v125 = swift_retain(v122);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v125);
      unint64_t v127 = *(void *)((v188 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      unint64_t v126 = *(void *)((v188 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
      if (v127 >= v126 >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v126 > 1, v127 + 1, 1LL);
      }
      uint64_t v128 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v127, v122);
      specialized Array._endMutation()(v128);
      sub_10043F814(v188);
    }

    else
    {
      sub_10043F814(0LL);
      swift_bridgeObjectRelease(0LL);
    }

    uint64_t v49 = v173;
    ++v187;
    id v50 = [v162 prefixedURI];
    uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
    uint64_t v185 = v52;
    uint64_t v186 = v51;

    id v53 = [v166 prefixedURI];
    uint64_t v54 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
    uint64_t v183 = v55;
    id v184 = v54;

    id v56 = [v49 pushTokenObject];
    id v57 = [v56 rawToken];

    uint64_t v182 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v57);
    uint64_t v180 = v58;

    id v59 = [v49 sessionToken];
    uint64_t v60 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v59);
    unint64_t v62 = v61;

    id v63 = [v49 expireDate];
    uint64_t v64 = v156;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v63);

    id v65 = [v49 refreshDate];
    uint64_t v66 = v157;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v65);

    [v49 queryTimeInterval];
    double v68 = v67;
    uint64_t v69 = v160;
    uint64_t v70 = *(void (**)(char *, char *, uint64_t))(v160 + 16);
    uint64_t v71 = v158;
    uint64_t v72 = v161;
    v70(v158, v64, v161);
    uint64_t v73 = v159;
    v70(v159, v66, v72);
    uint64_t v74 = v177;
    swift_bridgeObjectRetain(v177);
    uint64_t v150 = v71;
    uint64_t v75 = v155;
    uint64_t v76 = sub_100444084(v176, v74, v186, v185, (uint64_t)v184, v183, v182, v180, v68, v60, v62, v150, v73);
    unint64_t v77 = *(void (**)(char *, uint64_t))(v69 + 8);
    v77(v66, v72);
    v77(v64, v72);
    uint64_t v78 = sub_10040A2B0( &qword_1009B9F70,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A150);
    dispatch thunk of ModelContext.insert<A>(_:)(v76, v75, v78);

    uint64_t v48 = v187;
    swift_release(v181);
    swift_release(v76);
    uint64_t v47 = v163;
  }

  while (v165 != v48);
  swift_bridgeObjectRelease(v163);
LABEL_54:
  id v129 = v153;
  if (v153)
  {
    id v130 = [v153 shortHandle];
    uint64_t v131 = v164;
    if (v130)
    {
      uint64_t v132 = v130;
      uint64_t v133 = static String._unconditionallyBridgeFromObjectiveC(_:)(v130);
      uint64_t v135 = v134;

      uint64_t v136 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDShortHandle(0LL);
      id v137 = [v166 prefixedURI];
      uint64_t v138 = static String._unconditionallyBridgeFromObjectiveC(_:)(v137);
      uint64_t v140 = v139;

      uint64_t v141 = sub_100445DD4(v138, v140, v133, v135);
      uint64_t v142 = sub_10040A2B0( &qword_1009B9FA0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDShortHandle,  (uint64_t)&unk_10071A388);
      dispatch thunk of ModelContext.insert<A>(_:)(v141, v136, v142);
      swift_release(v141);
      swift_release(v131);

      return;
    }

    uint64_t v143 = v131;
  }

  else
  {
    uint64_t v143 = v164;
  }

  swift_release(v143);
}

id sub_1004DF048( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v49 = a7;
  uint64_t v50 = a8;
  uint64_t v48 = a6;
  uint64_t v51 = a1;
  uint64_t v52 = a2;
  uint64_t v47 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v11 = *(void *)(v47 - 8);
  __chkstk_darwin(v12, v13);
  __n128 v15 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v18, v19);
  uint64_t v21 = (char *)&v46 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v22 = [a5 prefixedURI];
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  uint64_t v25 = v24;

  sub_1004DF32C(a3, a4, v23, v25, v51);
  uint64_t v27 = v26;
  uint64_t v28 = swift_bridgeObjectRelease(v25);
  if (v27)
  {
    type metadata accessor for ArchiveHelper();
    sub_10041D3C4(0LL, &qword_1009BC468, &OBJC_CLASS___IDSQueryKeyTransparencyContext_ptr);
    char v30 = sub_10040A96C();
    uint64_t v31 = sub_10040A974(v50, v30 & 1);
    sub_10043F404(v31, v32);
    return (id)swift_release(v27);
  }

  else
  {
    uint64_t v35 = v48;
    uint64_t v34 = v49;
    uint64_t v36 = v21;
    uint64_t v51 = v16;
    uint64_t v52 = v17;
    uint64_t v37 = v47;
    id result = (id)im_primary_queue(v28, v29);
    if (result)
    {
      char v38 = result;
      uint64_t v39 = swift_allocObject(&unk_100908D78, 32LL, 7LL);
      *(void *)(v39 + swift_unknownObjectWeakDestroy(v0 + 16) = v35;
      *(void *)(v39 + 24) = v34;
      uint64_t v40 = v34;
      aBlock[4] = sub_100513540;
      uint64_t v55 = v39;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = sub_1003F8400;
      aBlock[3] = &unk_100908D90;
      uint64_t v41 = _Block_copy(aBlock);
      uint64_t v42 = swift_retain(v40);
      static DispatchQoS.unspecified.getter(v42);
      id v53 = _swiftEmptyArrayStorage;
      uint64_t v43 = sub_10040A2B0( (unint64_t *)&unk_1009BAC40,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v44 = sub_1003F5CB4((uint64_t *)&unk_1009B9870);
      uint64_t v45 = sub_10047E23C( (unint64_t *)&qword_1009BAC50,  (uint64_t *)&unk_1009B9870,  (uint64_t)&protocol conformance descriptor for [A]);
      dispatch thunk of SetAlgebra.init<A>(_:)(&v53, v44, v45, v37, v43);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v36, v15, v41);
      _Block_release(v41);

      (*(void (**)(char *, uint64_t))(v11 + 8))(v15, v37);
      (*(void (**)(char *, uint64_t))(v52 + 8))(v36, v51);
      return (id)swift_release(v55);
    }

    else
    {
      __break(1u);
    }
  }

  return result;
}

void sub_1004DF32C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = sub_1003F5CB4(&qword_1009BC280);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v13, v14);
  uint64_t v16 = &v21[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v25 = a1;
  uint64_t v26 = a2;
  uint64_t v27 = a3;
  uint64_t v28 = a4;
  uint64_t v30 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable(0LL);
  Predicate.init(_:)(sub_100513C1C, v24, 1LL, &v30);
  uint64_t v29 = (uint64_t)_swiftEmptyArrayStorage;
  id v22 = &v29;
  uint64_t v23 = v16;
  (*(void (**)(uint64_t, uint64_t (*)(uint64_t), char *))((swift_isaMask & *v5) + 0xE8LL))( a5,  sub_10050D1A4,  v21);
  uint64_t v17 = v29;
  if ((unint64_t)v29 >> 62)
  {
    if (v29 < 0) {
      uint64_t v19 = v29;
    }
    else {
      uint64_t v19 = v29 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v29);
    if (!_CocoaArrayWrapper.endIndex.getter(v19)) {
      goto LABEL_6;
    }
  }

  else
  {
    uint64_t v18 = *(void *)((v29 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(v29);
    if (!v18)
    {
LABEL_6:
      swift_bridgeObjectRelease(v17);
      (*(void (**)(char *, uint64_t))(v12 + 8))(v16, v11);
      swift_bridgeObjectRelease(v29);
      return;
    }
  }

  if ((v17 & 0xC000000000000001LL) != 0)
  {
    specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v17);
    goto LABEL_6;
  }

  if (*(void *)((v17 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
    swift_retain(*(void *)(v17 + 32));
    goto LABEL_6;
  }

  __break(1u);
}

uint64_t sub_1004DF7B0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v67 = a8;
  uint64_t v59 = a4;
  uint64_t v60 = a7;
  uint64_t v68 = a1;
  uint64_t v69 = a2;
  uint64_t v64 = a10;
  uint64_t v65 = a6;
  uint64_t v62 = a9;
  uint64_t v63 = a5;
  uint64_t v12 = type metadata accessor for Date(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v54 = v12;
  __chkstk_darwin(v14, v15);
  unint64_t v61 = (char *)&v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = v16;
  uint64_t v56 = v16;
  __chkstk_darwin(v18, v19);
  uint64_t v21 = (char *)&v54 - v20;
  uint64_t v55 = (char *)&v54 - v20;
  uint64_t v22 = *(void *)(sub_1003F5CB4(&qword_1009BC130) - 8);
  uint64_t v23 = *(void *)(v22 + 64);
  __chkstk_darwin(v24, v25);
  uint64_t v26 = (char *)&v54 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100410FD0(a3, (uint64_t)v26, &qword_1009BC130);
  uint64_t v58 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v58(v21, a4, v12);
  uint64_t v27 = *(unsigned __int8 *)(v22 + 80);
  uint64_t v28 = (v27 + 32) & ~v27;
  uint64_t v29 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v30 = (v23 + v29 + v28) & ~v29;
  uint64_t v57 = v29 | 7;
  unint64_t v31 = (v17 + v30 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v32 = (v31 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v33 = (v32 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v34 = (v33 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v35 = swift_allocObject(&unk_100907FF8, v34 + 16, v29 | 7 | v27);
  uint64_t v36 = v69;
  *(void *)(v35 + swift_unknownObjectWeakDestroy(v0 + 16) = v68;
  *(void *)(v35 + 24) = v36;
  sub_10041D378((uint64_t)v26, v35 + v28, &qword_1009BC130);
  uint64_t v37 = v35 + v30;
  char v38 = *(void (**)(uint64_t, char *, uint64_t))(v13 + 32);
  uint64_t v39 = v54;
  v38(v37, v55, v54);
  uint64_t v40 = v64;
  *(void *)(v35 + v3Hasher._combine(_:)(v0 & 1) = v63;
  *(void *)(v35 + v3sub_10040A648(v1 + 2) = v65;
  uint64_t v41 = (void *)(v35 + v33);
  uint64_t v42 = v61;
  uint64_t v43 = v67;
  *uint64_t v41 = v60;
  v41[1] = v43;
  uint64_t v44 = (void *)(v35 + v34);
  *uint64_t v44 = v62;
  v44[1] = v40;
  v58(v42, v59, v39);
  uint64_t v45 = (v29 + 40) & ~v29;
  uint64_t v46 = (void *)swift_allocObject(&unk_100908020, v45 + v56, v57);
  uint64_t v47 = v66;
  uint64_t v48 = v68;
  uint64_t v49 = v69;
  void v46[2] = v66;
  v46[3] = v48;
  v46[4] = v49;
  v38((uint64_t)v46 + v45, v42, v39);
  uint64_t v50 = *(void (**)(uint64_t (*)(uint64_t), uint64_t, void (*)(uint64_t), void *, __n128))((swift_isaMask & *v47) + 0xE0LL);
  swift_bridgeObjectRetain(v40);
  uint64_t v51 = v47;
  swift_bridgeObjectRetain_n(v49, 2LL);
  __n128 v52 = swift_bridgeObjectRetain(v67);
  v50(sub_10050D2CC, v35, sub_10050D414, v46, v52);
  swift_release(v46);
  return swift_release(v35);
}

uint64_t sub_1004DFA58( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v66 = a7;
  uint64_t v67 = a8;
  uint64_t v64 = a3;
  uint64_t v65 = a6;
  uint64_t v61 = a4;
  uint64_t v62 = a5;
  uint64_t v63 = a2;
  uint64_t v68 = a1;
  sub_1003F5CB4(&qword_1009BC530);
  __chkstk_darwin(v12, v13);
  uint64_t v57 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v56 = sub_1003F5CB4(&qword_1009BC538);
  uint64_t v15 = *(void *)(v56 - 8);
  __chkstk_darwin(v16, v17);
  uint64_t v54 = (char *)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for Date(0LL);
  uint64_t v59 = *(void *)(v19 - 8);
  uint64_t v60 = v19;
  __chkstk_darwin(v20, v21);
  uint64_t v23 = (char *)&v53 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1003F5CB4(&qword_1009BC130);
  __chkstk_darwin(v24, v25);
  uint64_t v27 = (char *)&v53 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v28 = [objc_allocWithZone(IMUserDefaults) init];
  NSString v29 = String._bridgeToObjectiveC()();
  id v30 = [v28 appValueForKey:v29];

  if (v30)
  {
    _bridgeAnyObjectToAny(_:)(v69, v30);
    swift_unknownObjectRelease(v30, v31);
  }

  else
  {
    memset(v69, 0, sizeof(v69));
  }

  sub_10041D378((uint64_t)v69, (uint64_t)v70, &qword_1009B92B8);
  uint64_t v58 = v11;
  uint64_t v55 = v15;
  if (!v70[3])
  {
LABEL_8:
    sub_10040A274((uint64_t)v70, &qword_1009B92B8);
    goto LABEL_9;
  }

  uint64_t v32 = sub_10041D3C4(0LL, (unint64_t *)&unk_1009BACA0, &OBJC_CLASS___NSNumber_ptr);
  if ((swift_dynamicCast(&v71, v70, (char *)&type metadata for Any + 8, v32, 6LL) & 1) != 0)
  {
    id v33 = v71;
    id v34 = [v71 unsignedIntegerValue];

    unint64_t v35 = (unint64_t)v34 + 1;
    if (v34 != (id)-1LL) {
      goto LABEL_10;
    }
    __break(1u);
    goto LABEL_8;
  }

uint64_t sub_1004DFF14@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v37 = a2;
  uint64_t v38 = type metadata accessor for PredicateExpressions.ComparisonOperator(0LL);
  uint64_t v36 = *(void *)(v38 - 8);
  __chkstk_darwin(v5, v6);
  __n128 v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_1003F5CB4(&qword_1009BCDF0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v40 = v9;
  uint64_t v41 = v10;
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_1003F5CB4(&qword_1009BC550);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v17, v18);
  __n128 v20 = (char *)&v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = sub_1003F5CB4(&qword_1009BCDF8);
  uint64_t v39 = *(void *)(v21 - 8);
  __chkstk_darwin(v22, v23);
  __n128 v25 = (char *)&v35 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = *a1;
  uint64_t v27 = sub_10047E23C( &qword_1009BC560,  &qword_1009BC550,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Variable<A>);
  static PredicateExpressions.build_Arg<A>(_:)(v26, v15, v27);
  uint64_t KeyPath = swift_getKeyPath(&unk_10071DB50);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v20, KeyPath, v15, v27);
  swift_release(KeyPath);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v20, v15);
  uint64_t v42 = v37;
  static PredicateExpressions.build_Arg<A>(_:)(&v42, &type metadata for UInt);
  uint64_t v29 = v36;
  uint64_t v30 = v38;
  (*(void (**)(char *, void, uint64_t))(v36 + 104))( v8,  enum case for PredicateExpressions.ComparisonOperator.lessThan(_:),  v38);
  a3[3] = sub_1003F5CB4(&qword_1009BCE00);
  a3[4] = sub_100513428();
  sub_10040B2A8(a3);
  uint64_t v31 = sub_10047E23C( &qword_1009BCE20,  &qword_1009BCDF8,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.KeyPath<A, B>);
  uint64_t v32 = sub_10047E23C( &qword_1009BCE28,  &qword_1009BCDF0,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Value<A>);
  uint64_t v33 = v40;
  static PredicateExpressions.build_Comparison<A, B>(lhs:rhs:op:)( v25,  v14,  v8,  v21,  v40,  v31,  v32,  &protocol witness table for UInt);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v8, v30);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v14, v33);
  return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v25, v21);
}

void sub_1004E01D4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15, v16);
  __n128 v18 = (char *)&v40 - v17;
  if (a1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v14, a5, v9);
    swift_errorRetain(a1);
    swift_bridgeObjectRetain(a4);
    swift_errorRetain(a1);
    swift_bridgeObjectRetain(a4);
    uint64_t v19 = swift_errorRetain(a1);
    __n128 v20 = (os_log_s *)Logger.logObject.getter(v19);
    os_log_type_t v21 = static os_log_type_t.default.getter(v20);
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = swift_slowAlloc(32LL, -1LL);
      uint64_t v40 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      uint64_t v41 = swift_slowAlloc(64LL, -1LL);
      uint64_t v43 = v41;
      *(_DWORD *)uint64_t v22 = 136315650;
      swift_bridgeObjectRetain(a4);
      uint64_t v42 = sub_1003FFBB0(a3, a4, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v22 + 4, v22 + 12);
      swift_bridgeObjectRelease_n(a4, 3LL);
      *(_WORD *)(v22 + 1sub_10040A648(v1 + 2) = 2080;
      uint64_t v23 = sub_10040A2B0( &qword_1009B9D98,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
      uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter(v9, v23);
      unint64_t v26 = v25;
      uint64_t v42 = sub_1003FFBB0(v24, v25, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v22 + 14, v22 + 22);
      swift_bridgeObjectRelease(v26);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v14, v9);
      *(_WORD *)(v22 + 2sub_10040A648(v1 + 2) = 2112;
      swift_errorRetain(a1);
      uint64_t v27 = _swift_stdlib_bridgeErrorToNSError(a1);
      uint64_t v42 = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v22 + 24, v22 + 32);
      id v28 = v40;
      *uint64_t v40 = v27;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl( (void *)&_mh_execute_header,  v20,  v21,  "Failed to save registration event for bagKey: %s completionTime: %s error: %@",  (uint8_t *)v22,  0x20u);
      uint64_t v29 = sub_1003F5CB4(&qword_1009B92C8);
      swift_arrayDestroy(v28, 1LL, v29);
      swift_slowDealloc(v28, -1LL, -1LL);
      uint64_t v30 = v41;
      swift_arrayDestroy(v41, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1LL, -1LL);
      swift_slowDealloc(v22, -1LL, -1LL);
      swift_errorRelease(a1);
    }

    else
    {
      swift_errorRelease(a1);
      swift_bridgeObjectRelease_n(a4, 2LL);

      (*(void (**)(char *, uint64_t))(v10 + 8))(v14, v9);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v40 - v17, a5, v9);
    uint64_t v31 = swift_bridgeObjectRetain_n(a4, 2LL);
    uint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
    os_log_type_t v33 = static os_log_type_t.default.getter(v32);
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = swift_slowAlloc(22LL, -1LL);
      uint64_t v35 = swift_slowAlloc(64LL, -1LL);
      uint64_t v43 = v35;
      *(_DWORD *)uint64_t v34 = 136315394;
      swift_bridgeObjectRetain(a4);
      uint64_t v42 = sub_1003FFBB0(a3, a4, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v34 + 4, v34 + 12);
      swift_bridgeObjectRelease_n(a4, 3LL);
      *(_WORD *)(v34 + 1sub_10040A648(v1 + 2) = 2080;
      uint64_t v36 = sub_10040A2B0( &qword_1009B9D98,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
      uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter(v9, v36);
      unint64_t v39 = v38;
      uint64_t v42 = sub_1003FFBB0(v37, v38, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v34 + 14, v34 + 22);
      swift_bridgeObjectRelease(v39);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v18, v9);
      _os_log_impl( (void *)&_mh_execute_header,  v32,  v33,  "Successfully saved registration event for bagKey: %s completionTime: %s",  (uint8_t *)v34,  0x16u);
      swift_arrayDestroy(v35, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1LL, -1LL);
      swift_slowDealloc(v34, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(a4, 2LL);

      (*(void (**)(char *, uint64_t))(v10 + 8))(v18, v9);
    }
  }

uint64_t sub_1004E0884(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, id a5, void *a6, char a7, uint64_t *a8)
{
  id v13 = [a5 prefixedURI];
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  uint64_t v16 = v15;

  uint64_t v59 = a1;
  uint64_t v60 = a3;
  sub_1004DF32C(a3, a4, v14, v16, a1);
  uint64_t v18 = v17;
  uint64_t result = swift_bridgeObjectRelease(v16);
  if (!v18) {
    return result;
  }
  uint64_t v56 = a4;
  uint64_t v20 = sub_10043F574();
  if (!v20) {
    return swift_release(v18);
  }
  uint64_t v21 = v20;
  char v55 = a7;
  if ((unint64_t)v20 >> 62)
  {
    if (v20 >= 0) {
      uint64_t v39 = v20 & 0xFFFFFFFFFFFFFF8LL;
    }
    else {
      uint64_t v39 = v20;
    }
    swift_bridgeObjectRetain(v20);
    uint64_t v40 = _CocoaArrayWrapper.endIndex.getter(v39);
    swift_bridgeObjectRelease(v21);
    if (v40)
    {
      swift_bridgeObjectRetain(v21);
      uint64_t v22 = _CocoaArrayWrapper.endIndex.getter(v39);
      swift_bridgeObjectRelease(v21);
      if (!v22)
      {
        uint64_t v53 = a2;
        uint64_t v54 = v18;
LABEL_23:
        id v41 = [a6 prefixedURI];
        uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
        uint64_t v44 = v43;

        id v45 = [a5 prefixedURI];
        uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
        uint64_t v48 = v47;

        uint64_t v49 = sub_1004E0C0C(v60, v56, v42, v44, v46, v48, (uint64_t)_swiftEmptyArrayStorage, v55 & 1, v59);
        swift_bridgeObjectRelease(v44);
        swift_bridgeObjectRelease(v48);
        swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
        swift_bridgeObjectRetain(v49);
        id v50 = v53;
        swift_retain(v54);
        uint64_t v51 = sub_10050CD28(v21, (uint64_t)v49, v54);
        swift_bridgeObjectRelease(v21);
        swift_bridgeObjectRelease_n(v49, 2LL);

        swift_release_n(v54, 2LL);
        uint64_t v52 = *a8;
        *a8 = (uint64_t)v51;
        return swift_bridgeObjectRelease(v52);
      }

      goto LABEL_5;
    }

    goto LABEL_24;
  }

  uint64_t v22 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  if (!v22)
  {
LABEL_24:
    swift_bridgeObjectRelease(v21);
    return swift_release(v18);
  }

void *sub_1004E0C0C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9)
{
  int v30 = a8;
  uint64_t v31 = a9;
  uint64_t v17 = sub_1003F5CB4(&qword_1009BC288);
  uint64_t v34 = *(void *)(v17 - 8);
  uint64_t v35 = v17;
  __chkstk_darwin(v18, v19);
  uint64_t v21 = &v29[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v33 = type metadata accessor for Date(0LL);
  uint64_t v32 = *(void *)(v33 - 8);
  uint64_t v24 = __chkstk_darwin(v22, v23);
  uint64_t v26 = &v29[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  Date.init()(v24);
  uint64_t v40 = a1;
  uint64_t v41 = a2;
  uint64_t v42 = a3;
  uint64_t v43 = a4;
  uint64_t v44 = a5;
  uint64_t v45 = a6;
  uint64_t v46 = a7;
  char v47 = v30;
  uint64_t v48 = v26;
  uint64_t v50 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession(0LL);
  Predicate.init(_:)(sub_10050D458, v39, 1LL, &v50);
  uint64_t v49 = _swiftEmptyArrayStorage;
  unint64_t v37 = &v49;
  unint64_t v38 = v21;
  (*(void (**)(uint64_t, uint64_t (*)(uint64_t), char *))((swift_isaMask & *v9) + 0xE8LL))( v31,  sub_100513D24,  v36);
  uint64_t v27 = v49;
  (*(void (**)(_BYTE *, uint64_t))(v34 + 8))(v21, v35);
  (*(void (**)(_BYTE *, uint64_t))(v32 + 8))(v26, v33);
  return v27;
}

uint64_t sub_1004E1028@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v56 = a4;
  uint64_t v57 = a5;
  uint64_t v53 = a3;
  uint64_t v51 = a2;
  uint64_t v60 = a6;
  uint64_t v61 = sub_1003F5CB4(&qword_1009BC410);
  uint64_t v55 = *(void *)(v61 - 8);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_1003F5CB4(&qword_1009BC848);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v13, v14);
  uint64_t v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v48 = sub_1003F5CB4(&qword_1009BC850);
  uint64_t v52 = *(void *)(v48 - 8);
  __chkstk_darwin(v17, v18);
  uint64_t v20 = (char *)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = sub_1003F5CB4(&qword_1009BC858);
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v58 = v21;
  uint64_t v59 = v22;
  __chkstk_darwin(v23, v24);
  uint64_t v54 = (char *)&v48 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v26, v27);
  uint64_t v50 = (char *)&v48 - v28;
  uint64_t v29 = *a1;
  uint64_t v30 = sub_10047E23C( &qword_1009BC860,  &qword_1009BC848,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Variable<A>);
  static PredicateExpressions.build_Arg<A>(_:)(v29, v11, v30);
  uint64_t KeyPath = swift_getKeyPath(&unk_10071D920);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v16, KeyPath, v11, v30);
  swift_release(KeyPath);
  uint64_t v49 = *(void (**)(char *, uint64_t))(v12 + 8);
  v49(v16, v11);
  uint64_t v62 = v51;
  uint64_t v63 = v53;
  static PredicateExpressions.build_Arg<A>(_:)(&v62, &type metadata for String);
  uint64_t v32 = sub_10047E23C( &qword_1009BC868,  &qword_1009BC850,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.KeyPath<A, B>);
  uint64_t v53 = v32;
  uint64_t v33 = sub_10047E23C( &qword_1009BC460,  &qword_1009BC410,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Value<A>);
  uint64_t v34 = v48;
  uint64_t v35 = v61;
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)( v20,  v10,  v48,  v61,  v32,  v33,  &protocol witness table for String);
  unint64_t v36 = *(void (**)(char *, uint64_t))(v55 + 8);
  v36(v10, v35);
  unint64_t v37 = *(void (**)(char *, uint64_t))(v52 + 8);
  v37(v20, v34);
  static PredicateExpressions.build_Arg<A>(_:)(v29, v11, v30);
  uint64_t v38 = swift_getKeyPath(&unk_10071D948);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v16, v38, v11, v30);
  swift_release(v38);
  v49(v16, v11);
  uint64_t v62 = v56;
  uint64_t v63 = v57;
  static PredicateExpressions.build_Arg<A>(_:)(&v62, &type metadata for String);
  uint64_t v39 = v54;
  uint64_t v40 = v61;
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)( v20,  v10,  v34,  v61,  v53,  v33,  &protocol witness table for String);
  v36(v10, v40);
  v37(v20, v34);
  uint64_t v41 = sub_1003F5CB4(&qword_1009BC870);
  uint64_t v42 = v60;
  void v60[3] = v41;
  v42[4] = sub_1005115B8( &qword_1009BC878,  &qword_1009BC870,  (void (*)(void))sub_10051174C,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.Conjunction<A, B>);
  sub_10040B2A8(v42);
  uint64_t v43 = sub_10047E23C( &qword_1009BC898,  &qword_1009BC858,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Equal<A, B>);
  uint64_t v44 = v50;
  uint64_t v45 = v58;
  static PredicateExpressions.build_Conjunction<A, B>(lhs:rhs:)(v50, v39, v58, v58, v43, v43);
  uint64_t v46 = *(void (**)(char *, uint64_t))(v59 + 8);
  v46(v39, v45);
  return ((uint64_t (*)(char *, uint64_t))v46)(v44, v45);
}

uint64_t sub_1004E1434(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  __n128 v23 = a2;
  sub_1003F5CB4(&qword_1009BC820);
  __chkstk_darwin(v5, v6);
  __n128 v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_1003F5CB4((uint64_t *)&unk_1009BCE30);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v11, v12);
  __n128 v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_1003F5CB4(&qword_1009BC280);
  uint64_t v16 = *(void *)(v15 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v8, a3, v15);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v8, 0LL, 1LL, v15);
  uint64_t v17 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable(0LL);
  uint64_t v18 = sub_10040A2B0( &qword_1009BC840,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable,  (uint64_t)&unk_100719F18);
  FetchDescriptor.init(predicate:sortBy:)(v8, _swiftEmptyArrayStorage, v17, v18);
  uint64_t v19 = dispatch thunk of ModelContext.fetch<A>(_:)(v14, v17, v18);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v14, v9);
  if (!v3)
  {
    uint64_t v21 = *v23;
    uint64_t *v23 = v19;
    return swift_bridgeObjectRelease(v21);
  }

  return result;
}

void sub_1004E15C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = sub_1003F5CB4(&qword_1009BC290);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v13, v14);
  uint64_t v16 = &v21[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v25 = a1;
  uint64_t v26 = a2;
  uint64_t v27 = a3;
  uint64_t v28 = a4;
  uint64_t v30 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice(0LL);
  Predicate.init(_:)(sub_10050D494, v24, 1LL, &v30);
  uint64_t v29 = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v22 = &v29;
  __n128 v23 = v16;
  (*(void (**)(uint64_t, uint64_t (*)(uint64_t), char *))((swift_isaMask & *v5) + 0xE8LL))( a5,  sub_10050D4A0,  v21);
  uint64_t v17 = v29;
  if ((unint64_t)v29 >> 62)
  {
    if (v29 < 0) {
      uint64_t v19 = v29;
    }
    else {
      uint64_t v19 = v29 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v29);
    if (!_CocoaArrayWrapper.endIndex.getter(v19)) {
      goto LABEL_6;
    }
  }

  else
  {
    uint64_t v18 = *(void *)((v29 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(v29);
    if (!v18)
    {
LABEL_6:
      swift_bridgeObjectRelease(v17);
      (*(void (**)(char *, uint64_t))(v12 + 8))(v16, v11);
      swift_bridgeObjectRelease(v29);
      return;
    }
  }

  if ((v17 & 0xC000000000000001LL) != 0)
  {
    specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v17);
    goto LABEL_6;
  }

  if (*(void *)((v17 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
    swift_retain(*(void *)(v17 + 32));
    goto LABEL_6;
  }

  __break(1u);
}

uint64_t sub_1004E18E0@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v80 = a4;
  uint64_t v81 = a5;
  uint64_t v73 = a2;
  uint64_t v74 = a3;
  id v88 = a6;
  uint64_t v7 = sub_1003F5CB4(&qword_1009BCA20);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v84 = v7;
  uint64_t v85 = v8;
  __chkstk_darwin(v9, v10);
  uint64_t v78 = (char *)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_1003F5CB4(&qword_1009BCD30);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v82 = v12;
  uint64_t v83 = v13;
  __chkstk_darwin(v14, v15);
  uint64_t v75 = (char *)&v68 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_1003F5CB4(&qword_1009BCD40);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v86 = v17;
  uint64_t v87 = v18;
  __chkstk_darwin(v19, v20);
  uint64_t v76 = (char *)&v68 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v70 = sub_1003F5CB4(&qword_1009BC410);
  uint64_t v72 = *(void *)(v70 - 8);
  __chkstk_darwin(v22, v23);
  uint64_t v25 = (char *)&v68 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = sub_1003F5CB4(&qword_1009BCD28);
  uint64_t v27 = *(void *)(v26 - 8);
  __chkstk_darwin(v28, v29);
  uint64_t v31 = (char *)&v68 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32 = sub_1003F5CB4(&qword_1009BCD68);
  uint64_t v69 = *(void *)(v32 - 8);
  __chkstk_darwin(v33, v34);
  unint64_t v36 = (char *)&v68 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v77 = sub_1003F5CB4(&qword_1009BCD70);
  uint64_t v79 = *(void *)(v77 - 8);
  __chkstk_darwin(v37, v38);
  id v71 = (char *)&v68 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v40 = *a1;
  uint64_t v41 = sub_10047E23C( &qword_1009BCD38,  &qword_1009BCD28,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Variable<A>);
  static PredicateExpressions.build_Arg<A>(_:)(v40, v26, v41);
  uint64_t KeyPath = swift_getKeyPath(&unk_10071DB28);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v31, KeyPath, v26, v41);
  swift_release(KeyPath);
  uint64_t v43 = *(void (**)(char *, uint64_t))(v27 + 8);
  v43(v31, v26);
  uint64_t v89 = v73;
  uint64_t v90 = v74;
  static PredicateExpressions.build_Arg<A>(_:)(&v89, &type metadata for String);
  uint64_t v44 = sub_10047E23C( &qword_1009BCD78,  &qword_1009BCD68,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.KeyPath<A, B>);
  uint64_t v45 = sub_10047E23C( &qword_1009BC460,  &qword_1009BC410,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Value<A>);
  uint64_t v46 = v70;
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)( v36,  v25,  v32,  v70,  v44,  v45,  &protocol witness table for String);
  (*(void (**)(char *, uint64_t))(v72 + 8))(v25, v46);
  (*(void (**)(char *, uint64_t))(v69 + 8))(v36, v32);
  static PredicateExpressions.build_Arg<A>(_:)(v40, v26, v41);
  uint64_t v47 = swift_getKeyPath(&unk_10071DB00);
  uint64_t v48 = v75;
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v31, v47, v26, v41);
  swift_release(v47);
  v43(v31, v26);
  uint64_t v89 = v80;
  uint64_t v90 = v81;
  uint64_t v49 = v78;
  static PredicateExpressions.build_Arg<A>(_:)(&v89, &type metadata for Data);
  uint64_t v50 = sub_10047E23C( &qword_1009BCD60,  &qword_1009BCD30,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.KeyPath<A, B>);
  uint64_t v51 = sub_10047E23C( &qword_1009BCA30,  &qword_1009BCA20,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Value<A>);
  unint64_t v52 = sub_100510F48();
  uint64_t v53 = v76;
  uint64_t v54 = v49;
  uint64_t v55 = v49;
  uint64_t v56 = v82;
  uint64_t v57 = v84;
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)(v48, v54, v82, v84, v50, v51, v52);
  (*(void (**)(char *, uint64_t))(v85 + 8))(v55, v57);
  (*(void (**)(char *, uint64_t))(v83 + 8))(v48, v56);
  uint64_t v58 = sub_1003F5CB4(&qword_1009BCD80);
  uint64_t v59 = v88;
  v88[3] = v58;
  v59[4] = sub_1005131A4();
  sub_10040B2A8(v59);
  uint64_t v60 = sub_10047E23C( &qword_1009BCDA0,  &qword_1009BCD70,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Equal<A, B>);
  uint64_t v61 = sub_10047E23C( &qword_1009BCDA8,  &qword_1009BCD40,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Equal<A, B>);
  uint64_t v62 = v71;
  uint64_t v63 = v53;
  uint64_t v64 = v53;
  uint64_t v65 = v77;
  uint64_t v66 = v86;
  static PredicateExpressions.build_Conjunction<A, B>(lhs:rhs:)(v71, v64, v77, v86, v60, v61);
  (*(void (**)(char *, uint64_t))(v87 + 8))(v63, v66);
  return (*(uint64_t (**)(char *, uint64_t))(v79 + 8))(v62, v65);
}

uint64_t sub_1004E1DF4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  __n128 v23 = a2;
  sub_1003F5CB4(&qword_1009BC8F0);
  __chkstk_darwin(v5, v6);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_1003F5CB4(&qword_1009BC8F8);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v11, v12);
  __n128 v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_1003F5CB4(&qword_1009BC290);
  uint64_t v16 = *(void *)(v15 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v8, a3, v15);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v8, 0LL, 1LL, v15);
  uint64_t v17 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice(0LL);
  uint64_t v18 = sub_10040A2B0( (unint64_t *)&unk_1009BC900,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A034);
  FetchDescriptor.init(predicate:sortBy:)(v8, _swiftEmptyArrayStorage, v17, v18);
  uint64_t v19 = dispatch thunk of ModelContext.fetch<A>(_:)(v14, v17, v18);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v14, v9);
  if (!v3)
  {
    uint64_t v21 = *v23;
    uint64_t *v23 = v19;
    return swift_bridgeObjectRelease(v21);
  }

  return result;
}

void sub_1004E1F80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_1003F5CB4(&qword_1009BC290);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v9, v10);
  __n128 v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v21 = a1;
  uint64_t v22 = a2;
  uint64_t v24 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice(0LL);
  Predicate.init(_:)(sub_10050D4B8, v20, 1LL, &v24);
  uint64_t v23 = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v18 = &v23;
  uint64_t v19 = v12;
  (*(void (**)(uint64_t, uint64_t (*)(uint64_t), char *))((swift_isaMask & *v3) + 0xE8LL))( a3,  sub_100513D10,  v17);
  uint64_t v13 = v23;
  if ((unint64_t)v23 >> 62)
  {
    if (v23 < 0) {
      uint64_t v15 = v23;
    }
    else {
      uint64_t v15 = v23 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v23);
    if (!_CocoaArrayWrapper.endIndex.getter(v15)) {
      goto LABEL_6;
    }
  }

  else
  {
    uint64_t v14 = *(void *)((v23 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(v23);
    if (!v14)
    {
LABEL_6:
      swift_bridgeObjectRelease(v13);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
      swift_bridgeObjectRelease(v23);
      return;
    }
  }

  if ((v13 & 0xC000000000000001LL) != 0)
  {
    specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v13);
    goto LABEL_6;
  }

  if (*(void *)((v13 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
    swift_retain(*(void *)(v13 + 32));
    goto LABEL_6;
  }

  __break(1u);
}

uint64_t sub_1004E228C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v29 = a2;
  uint64_t v30 = a3;
  uint64_t v6 = sub_1003F5CB4(&qword_1009BCA20);
  uint64_t v32 = *(void *)(v6 - 8);
  __chkstk_darwin(v7, v8);
  __n128 v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_1003F5CB4(&qword_1009BCD28);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v13, v14);
  uint64_t v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_1003F5CB4(&qword_1009BCD30);
  uint64_t v31 = *(void *)(v17 - 8);
  __chkstk_darwin(v18, v19);
  uint64_t v21 = (char *)&v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = *a1;
  uint64_t v23 = sub_10047E23C( &qword_1009BCD38,  &qword_1009BCD28,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Variable<A>);
  static PredicateExpressions.build_Arg<A>(_:)(v22, v11, v23);
  uint64_t KeyPath = swift_getKeyPath(&unk_10071DB00);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v16, KeyPath, v11, v23);
  swift_release(KeyPath);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v16, v11);
  v33[0] = v29;
  v33[1] = v30;
  static PredicateExpressions.build_Arg<A>(_:)(v33, &type metadata for Data);
  a4[3] = sub_1003F5CB4(&qword_1009BCD40);
  a4[4] = sub_100513118();
  sub_10040B2A8(a4);
  uint64_t v25 = sub_10047E23C( &qword_1009BCD60,  &qword_1009BCD30,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.KeyPath<A, B>);
  uint64_t v26 = sub_10047E23C( &qword_1009BCA30,  &qword_1009BCA20,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Value<A>);
  unint64_t v27 = sub_100510F48();
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)(v21, v10, v17, v6, v25, v26, v27);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v10, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v21, v17);
}

uint64_t sub_1004E24E0@<X0>( uint64_t *a1@<X0>, void (*a2)(void, void)@<X1>, uint64_t a3@<X2>, void (*a4)(void, void)@<X3>, uint64_t a5@<X4>, void (*a6)(void, void)@<X5>, uint64_t a7@<X6>, void (*a8)(void, void)@<X7>, void *a9@<X8>, unsigned __int8 a10, uint64_t a11)
{
  uint64_t v188 = a8;
  uint64_t v181 = a7;
  uint64_t v180 = a6;
  uint64_t v174 = a5;
  uint64_t v173 = a4;
  uint64_t v168 = a3;
  os_log_type_t v212 = a2;
  id v210 = a9;
  uint64_t v198 = a11;
  int v192 = a10;
  uint64_t v200 = type metadata accessor for PredicateExpressions.ComparisonOperator(0LL);
  uint64_t v197 = *(void *)(v200 - 8);
  __chkstk_darwin(v12, v13);
  uint64_t v196 = (char *)&v160 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v202 = sub_1003F5CB4(&qword_1009BC548);
  uint64_t v205 = *(void *)(v202 - 8);
  __chkstk_darwin(v15, v16);
  uint64_t v193 = (char *)&v160 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v199 = sub_1003F5CB4(&qword_1009BC8A8);
  uint64_t v203 = *(void *)(v199 - 8);
  __chkstk_darwin(v18, v19);
  Swift::Int v191 = (char *)&v160 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = sub_1003F5CB4(&qword_1009BC8B8);
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v206 = v21;
  uint64_t v207 = v22;
  __chkstk_darwin(v23, v24);
  uint64_t v194 = (char *)&v160 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v201 = sub_1003F5CB4(&qword_1009BC5B0);
  uint64_t v204 = *(void *)(v201 - 8);
  __chkstk_darwin(v26, v27);
  uint64_t v216 = (char *)&v160 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = sub_1003F5CB4(&qword_1009BCCB0);
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v208 = v29;
  uint64_t v209 = v30;
  __chkstk_darwin(v31, v32);
  uint64_t v195 = (char *)&v160 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v184 = sub_1003F5CB4(&qword_1009BCCB8);
  uint64_t v185 = *(void *)(v184 - 8);
  __chkstk_darwin(v34, v35);
  uint64_t v178 = (char *)&v160 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v182 = sub_1003F5CB4(&qword_1009BC5D8);
  uint64_t v183 = *(void *)(v182 - 8);
  __chkstk_darwin(v37, v38);
  uint64_t v176 = (char *)&v160 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v186 = sub_1003F5CB4(&qword_1009BCDB0);
  uint64_t v187 = *(void *)(v186 - 8);
  __chkstk_darwin(v40, v41);
  unint64_t v179 = (char *)&v160 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v218 = sub_1003F5CB4(&qword_1009BC410);
  uint64_t v167 = *(void (**)(char *, uint64_t))(v218 - 8);
  __chkstk_darwin(v43, v44);
  uint64_t v46 = (char *)&v160 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v47 = sub_1003F5CB4(&qword_1009BC8A0);
  uint64_t v48 = *(void *)(v47 - 8);
  uint64_t v49 = v47;
  __chkstk_darwin(v50, v51);
  uint64_t v53 = (char *)&v160 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v164 = sub_1003F5CB4(&qword_1009BCC40);
  uint64_t v165 = *(void *)(v164 - 8);
  __chkstk_darwin(v54, v55);
  uint64_t v57 = (char *)&v160 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v169 = sub_1003F5CB4(&qword_1009BCC48);
  uint64_t v170 = *(void *)(v169 - 8);
  __chkstk_darwin(v58, v59);
  id v166 = (char *)&v160 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v61, v62);
  uint64_t v163 = (char *)&v160 - v63;
  uint64_t v171 = sub_1003F5CB4(&qword_1009BCC50);
  uint64_t v172 = *(void *)(v171 - 8);
  __chkstk_darwin(v64, v65);
  uint64_t v213 = (char *)&v160 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v175 = sub_1003F5CB4(&qword_1009BCCA0);
  uint64_t v177 = *(void *)(v175 - 8);
  __chkstk_darwin(v67, v68);
  uint64_t v214 = (char *)&v160 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v189 = sub_1003F5CB4(&qword_1009BCDB8);
  uint64_t v190 = *(void *)(v189 - 8);
  __chkstk_darwin(v70, v71);
  uint64_t v215 = (char *)&v160 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v73 = *a1;
  uint64_t v219 = v73;
  uint64_t v74 = sub_10047E23C( &qword_1009BC8B0,  &qword_1009BC8A0,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Variable<A>);
  uint64_t v75 = v73;
  uint64_t v76 = v49;
  uint64_t v77 = v49;
  uint64_t v78 = v74;
  uint64_t v220 = v74;
  static PredicateExpressions.build_Arg<A>(_:)(v75, v77, v74);
  uint64_t KeyPath = swift_getKeyPath(&unk_10071D8D0);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v53, KeyPath, v76, v78);
  swift_release(KeyPath);
  id v217 = *(void (**)(char *, uint64_t))(v48 + 8);
  v217(v53, v76);
  uint64_t v221 = v212;
  uint64_t v222 = v168;
  uint64_t v211 = v46;
  static PredicateExpressions.build_Arg<A>(_:)(&v221, &type metadata for String);
  uint64_t v80 = sub_10047E23C( &qword_1009BCC58,  &qword_1009BCC40,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.KeyPath<A, B>);
  uint64_t v81 = sub_10047E23C( &qword_1009BC460,  &qword_1009BC410,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Value<A>);
  uint64_t v82 = v164;
  uint64_t v83 = v218;
  uint64_t v168 = v80;
  uint64_t v162 = v81;
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)( v57,  v46,  v164,  v218,  v80,  v81,  &protocol witness table for String);
  uint64_t v84 = (void (*)(char *, uint64_t))*((void *)v167 + 1);
  v84(v46, v83);
  uint64_t v85 = v84;
  uint64_t v167 = v84;
  os_log_type_t v212 = *(void (**)(void, void))(v165 + 8);
  uint64_t v86 = v82;
  v212(v57, v82);
  uint64_t v87 = v219;
  uint64_t v160 = v76;
  uint64_t v88 = v220;
  static PredicateExpressions.build_Arg<A>(_:)(v219, v76, v220);
  uint64_t v89 = swift_getKeyPath(&unk_10071DAB0);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v53, v89, v76, v88);
  swift_release(v89);
  v217(v53, v76);
  uint64_t v221 = v173;
  uint64_t v222 = v174;
  uint64_t v90 = v211;
  static PredicateExpressions.build_Arg<A>(_:)(&v221, &type metadata for String);
  id v91 = v166;
  uint64_t v92 = v218;
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)( v57,  v90,  v86,  v218,  v80,  v81,  &protocol witness table for String);
  v85(v90, v92);
  uint64_t v93 = v86;
  v212(v57, v86);
  uint64_t v94 = sub_10047E23C( &qword_1009BCC60,  &qword_1009BCC48,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Equal<A, B>);
  uint64_t v95 = v163;
  uint64_t v96 = v91;
  uint64_t v97 = v169;
  static PredicateExpressions.build_Conjunction<A, B>(lhs:rhs:)(v163, v91, v169, v169, v94, v94);
  id v98 = *(void (**)(char *, uint64_t))(v170 + 8);
  v98(v96, v97);
  v98(v95, v97);
  uint64_t v161 = v53;
  uint64_t v99 = v160;
  uint64_t v100 = v220;
  static PredicateExpressions.build_Arg<A>(_:)(v87, v160, v220);
  uint64_t v101 = swift_getKeyPath(&unk_10071D8F8);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v53, v101, v99, v100);
  swift_release(v101);
  uint64_t v102 = v217;
  v217(v53, v99);
  uint64_t v221 = v180;
  uint64_t v222 = v181;
  uint64_t v103 = v211;
  static PredicateExpressions.build_Arg<A>(_:)(&v221, &type metadata for String);
  uint64_t v104 = v93;
  uint64_t v105 = v93;
  uint64_t v106 = v218;
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)( v57,  v103,  v105,  v218,  v168,  v162,  &protocol witness table for String);
  v167(v103, v106);
  v212(v57, v104);
  uint64_t v107 = sub_10047E23C( &qword_1009BCC90,  &qword_1009BCC50,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Conjunction<A, B>);
  id v108 = v213;
  uint64_t v109 = v171;
  static PredicateExpressions.build_Conjunction<A, B>(lhs:rhs:)(v213, v95, v171, v97, v107, v94);
  v98(v95, v97);
  (*(void (**)(char *, uint64_t))(v172 + 8))(v108, v109);
  uint64_t v221 = v188;
  uint64_t v110 = sub_1003F5CB4(&qword_1009BC5F0);
  uint64_t v111 = v176;
  static PredicateExpressions.build_Arg<A>(_:)(&v221, v110);
  uint64_t v112 = v161;
  uint64_t v113 = v220;
  static PredicateExpressions.build_Arg<A>(_:)(v219, v99, v220);
  uint64_t v114 = swift_getKeyPath(&unk_10071DAD8);
  unint64_t v115 = v178;
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v112, v114, v99, v113);
  swift_release(v114);
  v102(v112, v99);
  uint64_t v116 = sub_10047E23C( &qword_1009BC600,  &qword_1009BC5D8,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Value<A>);
  uint64_t v117 = sub_10047E23C( &qword_1009BCCD0,  &qword_1009BCCB8,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.KeyPath<A, B>);
  uint64_t v118 = sub_10047E23C(&qword_1009BC610, &qword_1009BC5F0, (uint64_t)&protocol conformance descriptor for [A]);
  unint64_t v119 = sub_100510F48();
  uint64_t v120 = v179;
  __n128 v121 = v111;
  uint64_t v122 = v111;
  uint64_t v123 = v115;
  uint64_t v124 = v115;
  uint64_t v125 = v182;
  uint64_t v126 = v184;
  static PredicateExpressions.build_contains<A, B>(_:_:)(v121, v123, v182, v184, v116, v117, v118, v119);
  (*(void (**)(char *, uint64_t))(v185 + 8))(v124, v126);
  (*(void (**)(char *, uint64_t))(v183 + 8))(v122, v125);
  uint64_t v127 = sub_10047E23C( &qword_1009BCCD8,  &qword_1009BCCA0,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Conjunction<A, B>);
  uint64_t v128 = sub_10047E23C( &qword_1009BCDC0,  &qword_1009BCDB0,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.SequenceContains<A, B>);
  id v129 = v214;
  uint64_t v130 = v175;
  uint64_t v131 = v186;
  static PredicateExpressions.build_Conjunction<A, B>(lhs:rhs:)(v214, v120, v175, v186, v127, v128);
  (*(void (**)(char *, uint64_t))(v187 + 8))(v120, v131);
  (*(void (**)(char *, uint64_t))(v177 + 8))(v129, v130);
  LOBYTE(v22Hasher._combine(_:)(v0 & 1) = v192;
  static PredicateExpressions.build_Arg<A>(_:)(&v221, &type metadata for Bool);
  uint64_t v132 = v220;
  static PredicateExpressions.build_Arg<A>(_:)(v219, v99, v220);
  uint64_t v133 = swift_getKeyPath(&unk_10071D970);
  uint64_t v134 = v191;
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v112, v133, v99, v132);
  swift_release(v133);
  v217(v112, v99);
  uint64_t v135 = type metadata accessor for Date(0LL);
  uint64_t v136 = v193;
  static PredicateExpressions.build_Arg<A>(_:)(v198, v135);
  uint64_t v137 = v197;
  uint64_t v138 = v196;
  uint64_t v139 = v200;
  (*(void (**)(char *, void, uint64_t))(v197 + 104))( v196,  enum case for PredicateExpressions.ComparisonOperator.greaterThan(_:),  v200);
  uint64_t v140 = sub_10047E23C( &qword_1009BC8D8,  &qword_1009BC8A8,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.KeyPath<A, B>);
  uint64_t v141 = sub_10047E23C( &qword_1009BC598,  &qword_1009BC548,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Value<A>);
  uint64_t v142 = sub_10040A2B0( (unint64_t *)&unk_1009BC4A0,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  uint64_t v143 = v194;
  uint64_t v144 = v199;
  uint64_t v145 = v202;
  static PredicateExpressions.build_Comparison<A, B>(lhs:rhs:op:)(v134, v136, v138, v199, v202, v140, v141, v142);
  (*(void (**)(char *, uint64_t))(v137 + 8))(v138, v139);
  (*(void (**)(char *, uint64_t))(v205 + 8))(v136, v145);
  (*(void (**)(char *, uint64_t))(v203 + 8))(v134, v144);
  uint64_t v146 = sub_10047E23C( &qword_1009BC628,  &qword_1009BC5B0,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Value<A>);
  uint64_t v147 = sub_10047E23C( &qword_1009BCC98,  &qword_1009BC8B8,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Comparison<A, B>);
  uint64_t v148 = v195;
  __int128 v149 = v216;
  uint64_t v150 = v201;
  uint64_t v151 = v206;
  static PredicateExpressions.build_Disjunction<A, B>(lhs:rhs:)(v216, v143, v201, v206, v146, v147);
  (*(void (**)(char *, uint64_t))(v207 + 8))(v143, v151);
  (*(void (**)(char *, uint64_t))(v204 + 8))(v149, v150);
  uint64_t v152 = sub_1003F5CB4(&qword_1009BCDC8);
  id v153 = v210;
  v210[3] = v152;
  v153[4] = sub_1005132BC();
  sub_10040B2A8(v153);
  uint64_t v154 = sub_10047E23C( &qword_1009BCDE8,  &qword_1009BCDB8,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Conjunction<A, B>);
  uint64_t v155 = sub_10047E23C( &qword_1009BCD20,  &qword_1009BCCB0,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Disjunction<A, B>);
  uint64_t v156 = v215;
  uint64_t v157 = v189;
  uint64_t v158 = v208;
  static PredicateExpressions.build_Conjunction<A, B>(lhs:rhs:)(v215, v148, v189, v208, v154, v155);
  (*(void (**)(char *, uint64_t))(v209 + 8))(v148, v158);
  return (*(uint64_t (**)(char *, uint64_t))(v190 + 8))(v156, v157);
}

void sub_1004E3370( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10)
{
  uint64_t v35 = a8;
  uint64_t v34 = a7;
  uint64_t v36 = a10;
  uint64_t v33 = sub_1003F5CB4(&qword_1009BC288);
  uint64_t v31 = *(void *)(v33 - 8);
  __chkstk_darwin(v17, v18);
  uint64_t v20 = (char *)&v29 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32 = type metadata accessor for Date(0LL);
  uint64_t v30 = *(void *)(v32 - 8);
  uint64_t v23 = __chkstk_darwin(v21, v22);
  uint64_t v25 = (char *)&v29 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Date.init()(v23);
  uint64_t v41 = a1;
  uint64_t v42 = a2;
  uint64_t v43 = a3;
  uint64_t v44 = a4;
  uint64_t v45 = a5;
  uint64_t v46 = a6;
  uint64_t v47 = v34;
  uint64_t v48 = v35;
  char v49 = a9;
  __n128 v50 = v25;
  uint64_t v52 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession(0LL);
  Predicate.init(_:)(sub_10050D4C0, v40, 1LL, &v52);
  uint64_t v51 = (uint64_t)_swiftEmptyArrayStorage;
  __n128 v38 = &v51;
  uint64_t v39 = v20;
  (*(void (**)(uint64_t, uint64_t (*)(uint64_t), char *))((swift_isaMask & *v10) + 0xE8LL))( v36,  sub_100513D24,  v37);
  uint64_t v26 = v51;
  if ((unint64_t)v51 >> 62)
  {
    if (v51 < 0) {
      uint64_t v28 = v51;
    }
    else {
      uint64_t v28 = v51 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v51);
    if (!_CocoaArrayWrapper.endIndex.getter(v28)) {
      goto LABEL_6;
    }
  }

  else
  {
    uint64_t v27 = *(void *)((v51 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(v51);
    if (!v27)
    {
LABEL_6:
      swift_bridgeObjectRelease(v26);
      (*(void (**)(char *, uint64_t))(v31 + 8))(v20, v33);
      (*(void (**)(char *, uint64_t))(v30 + 8))(v25, v32);
      swift_bridgeObjectRelease(v51);
      return;
    }
  }

  if ((v26 & 0xC000000000000001LL) != 0)
  {
    specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v26);
    goto LABEL_6;
  }

  if (*(void *)((v26 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
    swift_retain(*(void *)(v26 + 32));
    goto LABEL_6;
  }

  __break(1u);
}

uint64_t sub_1004E3770@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, unsigned __int8 a11, uint64_t a12)
{
  uint64_t v185 = a8;
  uint64_t v179 = a7;
  uint64_t v177 = a6;
  uint64_t v169 = a5;
  uint64_t v171 = a4;
  uint64_t v208 = a3;
  uint64_t v166 = a2;
  uint64_t v207 = a9;
  uint64_t v197 = a12;
  int v189 = a11;
  uint64_t v184 = a10;
  uint64_t v196 = type metadata accessor for PredicateExpressions.ComparisonOperator(0LL);
  uint64_t v194 = *(void *)(v196 - 8);
  __chkstk_darwin(v13, v14);
  uint64_t v193 = (char *)&v158 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v199 = sub_1003F5CB4(&qword_1009BC548);
  uint64_t v202 = *(void *)(v199 - 8);
  __chkstk_darwin(v16, v17);
  uint64_t v190 = (char *)&v158 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v195 = sub_1003F5CB4(&qword_1009BC8A8);
  uint64_t v200 = *(void *)(v195 - 8);
  __chkstk_darwin(v19, v20);
  uint64_t v188 = (char *)&v158 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = sub_1003F5CB4(&qword_1009BC8B8);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v203 = v22;
  uint64_t v204 = v23;
  __chkstk_darwin(v24, v25);
  Swift::Int v191 = (char *)&v158 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v198 = sub_1003F5CB4(&qword_1009BC5B0);
  uint64_t v201 = *(void *)(v198 - 8);
  __chkstk_darwin(v27, v28);
  uint64_t v214 = (char *)&v158 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = sub_1003F5CB4(&qword_1009BCCB0);
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v205 = v30;
  uint64_t v206 = v31;
  __chkstk_darwin(v32, v33);
  int v192 = (char *)&v158 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v180 = sub_1003F5CB4(&qword_1009BCA20);
  uint64_t v182 = *(void *)(v180 - 8);
  __chkstk_darwin(v35, v36);
  uint64_t v175 = (char *)&v158 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v176 = sub_1003F5CB4(&qword_1009BCCB8);
  uint64_t v178 = *(void *)(v176 - 8);
  __chkstk_darwin(v38, v39);
  uint64_t v173 = (char *)&v158 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v181 = sub_1003F5CB4(&qword_1009BCCC0);
  uint64_t v183 = *(void *)(v181 - 8);
  __chkstk_darwin(v41, v42);
  uint64_t v174 = (char *)&v158 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v216 = sub_1003F5CB4(&qword_1009BC410);
  uint64_t v163 = *(void (**)(char *, uint64_t))(v216 - 8);
  __chkstk_darwin(v44, v45);
  uint64_t v47 = (char *)&v158 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v48 = sub_1003F5CB4(&qword_1009BC8A0);
  uint64_t v49 = *(void *)(v48 - 8);
  uint64_t v215 = v48;
  __chkstk_darwin(v50, v51);
  uint64_t v53 = (char *)&v158 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v210 = sub_1003F5CB4(&qword_1009BCC40);
  uint64_t v161 = *(void (**)(char *, uint64_t))(v210 - 8);
  __chkstk_darwin(v54, v55);
  uint64_t v57 = (char *)&v158 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v164 = sub_1003F5CB4(&qword_1009BCC48);
  uint64_t v165 = *(void *)(v164 - 8);
  __chkstk_darwin(v58, v59);
  uint64_t v162 = (char *)&v158 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v61, v62);
  uint64_t v160 = (char *)&v158 - v63;
  uint64_t v167 = sub_1003F5CB4(&qword_1009BCC50);
  uint64_t v168 = *(void *)(v167 - 8);
  __chkstk_darwin(v64, v65);
  uint64_t v211 = (char *)&v158 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v170 = sub_1003F5CB4(&qword_1009BCCA0);
  uint64_t v172 = *(void *)(v170 - 8);
  __chkstk_darwin(v67, v68);
  os_log_type_t v212 = (char *)&v158 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v186 = sub_1003F5CB4(&qword_1009BCCC8);
  uint64_t v187 = *(void *)(v186 - 8);
  __chkstk_darwin(v70, v71);
  uint64_t v213 = (char *)&v158 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v73 = *a1;
  uint64_t v217 = v73;
  uint64_t v74 = sub_10047E23C( &qword_1009BC8B0,  &qword_1009BC8A0,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Variable<A>);
  uint64_t v218 = v74;
  static PredicateExpressions.build_Arg<A>(_:)(v73, v48, v74);
  uint64_t KeyPath = swift_getKeyPath(&unk_10071D8D0);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v53, KeyPath, v48, v74);
  swift_release(KeyPath);
  uint64_t v209 = *(void (**)(char *, uint64_t))(v49 + 8);
  v209(v53, v48);
  uint64_t v219 = v166;
  uint64_t v220 = v208;
  uint64_t v158 = v47;
  static PredicateExpressions.build_Arg<A>(_:)(&v219, &type metadata for String);
  uint64_t v76 = sub_10047E23C( &qword_1009BCC58,  &qword_1009BCC40,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.KeyPath<A, B>);
  uint64_t v208 = sub_10047E23C( &qword_1009BC460,  &qword_1009BC410,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Value<A>);
  uint64_t v77 = v210;
  uint64_t v78 = v216;
  uint64_t v79 = v76;
  uint64_t v166 = v76;
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)( v57,  v47,  v210,  v216,  v76,  v208,  &protocol witness table for String);
  uint64_t v80 = (void (*)(char *, uint64_t))*((void *)v163 + 1);
  v80(v47, v78);
  uint64_t v163 = v80;
  uint64_t v81 = (void (*)(char *, uint64_t))*((void *)v161 + 1);
  uint64_t v82 = v57;
  uint64_t v83 = v77;
  v81(v57, v77);
  uint64_t v161 = v81;
  uint64_t v84 = v53;
  uint64_t v86 = v217;
  uint64_t v85 = v218;
  uint64_t v87 = v215;
  static PredicateExpressions.build_Arg<A>(_:)(v217, v215, v218);
  uint64_t v88 = swift_getKeyPath(&unk_10071DAB0);
  uint64_t v159 = v84;
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v84, v88, v87, v85);
  swift_release(v88);
  v209(v84, v87);
  uint64_t v219 = v171;
  uint64_t v220 = v169;
  uint64_t v89 = v158;
  static PredicateExpressions.build_Arg<A>(_:)(&v219, &type metadata for String);
  uint64_t v90 = v162;
  id v91 = v82;
  uint64_t v92 = v216;
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)( v82,  v89,  v83,  v216,  v79,  v208,  &protocol witness table for String);
  uint64_t v93 = v89;
  v80(v89, v92);
  v81(v91, v83);
  uint64_t v94 = sub_10047E23C( &qword_1009BCC60,  &qword_1009BCC48,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Equal<A, B>);
  uint64_t v95 = v160;
  uint64_t v96 = v164;
  static PredicateExpressions.build_Conjunction<A, B>(lhs:rhs:)(v160, v90, v164, v164, v94, v94);
  uint64_t v97 = *(void (**)(char *, uint64_t))(v165 + 8);
  v97(v90, v96);
  v97(v95, v96);
  id v98 = v159;
  uint64_t v99 = v215;
  uint64_t v100 = v218;
  static PredicateExpressions.build_Arg<A>(_:)(v86, v215, v218);
  uint64_t v101 = swift_getKeyPath(&unk_10071D8F8);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v98, v101, v99, v100);
  swift_release(v101);
  uint64_t v102 = v209;
  v209(v98, v99);
  uint64_t v219 = v177;
  uint64_t v220 = v179;
  static PredicateExpressions.build_Arg<A>(_:)(&v219, &type metadata for String);
  uint64_t v103 = v210;
  uint64_t v104 = v216;
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)( v91,  v93,  v210,  v216,  v166,  v208,  &protocol witness table for String);
  v163(v93, v104);
  v161(v91, v103);
  uint64_t v105 = sub_10047E23C( &qword_1009BCC90,  &qword_1009BCC50,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Conjunction<A, B>);
  uint64_t v106 = v211;
  uint64_t v107 = v167;
  static PredicateExpressions.build_Conjunction<A, B>(lhs:rhs:)(v211, v95, v167, v96, v105, v94);
  v97(v95, v96);
  (*(void (**)(char *, uint64_t))(v168 + 8))(v106, v107);
  uint64_t v108 = v218;
  uint64_t v109 = v215;
  static PredicateExpressions.build_Arg<A>(_:)(v217, v215, v218);
  uint64_t v110 = swift_getKeyPath(&unk_10071DAD8);
  uint64_t v111 = v173;
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v98, v110, v109, v108);
  swift_release(v110);
  uint64_t v112 = v109;
  v102(v98, v109);
  uint64_t v113 = v102;
  uint64_t v219 = v185;
  uint64_t v220 = v184;
  uint64_t v114 = v175;
  static PredicateExpressions.build_Arg<A>(_:)(&v219, &type metadata for Data);
  uint64_t v115 = sub_10047E23C( &qword_1009BCCD0,  &qword_1009BCCB8,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.KeyPath<A, B>);
  uint64_t v116 = sub_10047E23C( &qword_1009BCA30,  &qword_1009BCA20,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Value<A>);
  unint64_t v117 = sub_100510F48();
  uint64_t v118 = v174;
  unint64_t v119 = v114;
  uint64_t v120 = v114;
  uint64_t v121 = v176;
  uint64_t v122 = v180;
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)(v111, v119, v176, v180, v115, v116, v117);
  (*(void (**)(char *, uint64_t))(v182 + 8))(v120, v122);
  (*(void (**)(char *, uint64_t))(v178 + 8))(v111, v121);
  uint64_t v123 = sub_10047E23C( &qword_1009BCCD8,  &qword_1009BCCA0,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Conjunction<A, B>);
  uint64_t v124 = sub_10047E23C( &qword_1009BCCE0,  &qword_1009BCCC0,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Equal<A, B>);
  uint64_t v125 = v212;
  uint64_t v126 = v170;
  uint64_t v127 = v181;
  static PredicateExpressions.build_Conjunction<A, B>(lhs:rhs:)(v212, v118, v170, v181, v123, v124);
  (*(void (**)(char *, uint64_t))(v183 + 8))(v118, v127);
  (*(void (**)(char *, uint64_t))(v172 + 8))(v125, v126);
  LOBYTE(v219) = v189;
  static PredicateExpressions.build_Arg<A>(_:)(&v219, &type metadata for Bool);
  uint64_t v128 = v112;
  uint64_t v129 = v112;
  uint64_t v130 = v218;
  static PredicateExpressions.build_Arg<A>(_:)(v217, v129, v218);
  uint64_t v131 = swift_getKeyPath(&unk_10071D970);
  uint64_t v132 = v188;
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v98, v131, v128, v130);
  swift_release(v131);
  v113(v98, v128);
  uint64_t v133 = type metadata accessor for Date(0LL);
  uint64_t v134 = v190;
  static PredicateExpressions.build_Arg<A>(_:)(v197, v133);
  uint64_t v135 = v194;
  uint64_t v136 = v193;
  uint64_t v137 = v196;
  (*(void (**)(char *, void, uint64_t))(v194 + 104))( v193,  enum case for PredicateExpressions.ComparisonOperator.greaterThan(_:),  v196);
  uint64_t v138 = sub_10047E23C( &qword_1009BC8D8,  &qword_1009BC8A8,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.KeyPath<A, B>);
  uint64_t v139 = sub_10047E23C( &qword_1009BC598,  &qword_1009BC548,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Value<A>);
  uint64_t v140 = sub_10040A2B0( (unint64_t *)&unk_1009BC4A0,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  uint64_t v141 = v191;
  uint64_t v142 = v195;
  uint64_t v143 = v199;
  static PredicateExpressions.build_Comparison<A, B>(lhs:rhs:op:)(v132, v134, v136, v195, v199, v138, v139, v140);
  (*(void (**)(char *, uint64_t))(v135 + 8))(v136, v137);
  (*(void (**)(char *, uint64_t))(v202 + 8))(v134, v143);
  (*(void (**)(char *, uint64_t))(v200 + 8))(v132, v142);
  uint64_t v144 = sub_10047E23C( &qword_1009BC628,  &qword_1009BC5B0,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Value<A>);
  uint64_t v145 = sub_10047E23C( &qword_1009BCC98,  &qword_1009BC8B8,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Comparison<A, B>);
  uint64_t v146 = v192;
  uint64_t v147 = v214;
  uint64_t v148 = v198;
  uint64_t v149 = v203;
  static PredicateExpressions.build_Disjunction<A, B>(lhs:rhs:)(v214, v141, v198, v203, v144, v145);
  (*(void (**)(char *, uint64_t))(v204 + 8))(v141, v149);
  (*(void (**)(char *, uint64_t))(v201 + 8))(v147, v148);
  uint64_t v150 = sub_1003F5CB4(&qword_1009BCCE8);
  uint64_t v151 = v207;
  v207[3] = v150;
  v151[4] = sub_100512F28();
  sub_10040B2A8(v151);
  uint64_t v152 = sub_10047E23C( &qword_1009BCD18,  &qword_1009BCCC8,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Conjunction<A, B>);
  uint64_t v153 = sub_10047E23C( &qword_1009BCD20,  &qword_1009BCCB0,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Disjunction<A, B>);
  uint64_t v154 = v213;
  uint64_t v155 = v186;
  uint64_t v156 = v205;
  static PredicateExpressions.build_Conjunction<A, B>(lhs:rhs:)(v213, v146, v186, v205, v152, v153);
  (*(void (**)(char *, uint64_t))(v206 + 8))(v146, v156);
  return (*(uint64_t (**)(char *, uint64_t))(v187 + 8))(v154, v155);
}

uint64_t sub_1004E45E4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v23 = a2;
  sub_1003F5CB4(&qword_1009BC828);
  __chkstk_darwin(v5, v6);
  __n128 v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_1003F5CB4((uint64_t *)&unk_1009BC830);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v11, v12);
  __n128 v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_1003F5CB4(&qword_1009BC288);
  uint64_t v16 = *(void *)(v15 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v8, a3, v15);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v8, 0LL, 1LL, v15);
  uint64_t v17 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession(0LL);
  uint64_t v18 = sub_10040A2B0( &qword_1009B9F70,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A150);
  FetchDescriptor.init(predicate:sortBy:)(v8, _swiftEmptyArrayStorage, v17, v18);
  uint64_t v19 = dispatch thunk of ModelContext.fetch<A>(_:)(v14, v17, v18);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v14, v9);
  if (!v3)
  {
    uint64_t v21 = *v23;
    uint64_t *v23 = v19;
    return swift_bridgeObjectRelease(v21);
  }

  return result;
}

void *sub_1004E4770(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v15 = sub_1003F5CB4(&qword_1009BC288);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v17, v18);
  uint64_t v27 = a1;
  uint64_t v28 = a2;
  uint64_t v29 = a3;
  uint64_t v30 = a4;
  uint64_t v31 = a5;
  uint64_t v32 = a6;
  __n128 v20 = &v23[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v34 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession(0LL);
  Predicate.init(_:)(sub_10050D518, v26, 1LL, &v34);
  __n128 v33 = _swiftEmptyArrayStorage;
  __n128 v24 = &v33;
  __n128 v25 = v20;
  (*(void (**)(uint64_t, uint64_t (*)(uint64_t), char *))((swift_isaMask & *v7) + 0xE8LL))( a7,  sub_100513D24,  v23);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v20, v15);
  return v33;
}

uint64_t sub_1004E4A0C@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  uint64_t v76 = a6;
  uint64_t v77 = a7;
  uint64_t v72 = a4;
  uint64_t v73 = a5;
  uint64_t v78 = a8;
  uint64_t v79 = a3;
  uint64_t v67 = a2;
  uint64_t v85 = sub_1003F5CB4(&qword_1009BC410);
  __n128 v70 = *(void (**)(char *, uint64_t))(v85 - 8);
  __chkstk_darwin(v9, v10);
  __n128 v12 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_1003F5CB4(&qword_1009BC8A0);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v15, v16);
  __n128 v18 = (char *)&v65 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v84 = sub_1003F5CB4(&qword_1009BCC40);
  uint64_t v68 = *(void *)(v84 - 8);
  __chkstk_darwin(v19, v20);
  uint64_t v22 = (char *)&v65 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v82 = sub_1003F5CB4(&qword_1009BCC48);
  uint64_t v71 = *(void *)(v82 - 8);
  __chkstk_darwin(v23, v24);
  uint64_t v69 = (char *)&v65 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v26, v27);
  uint64_t v66 = (char *)&v65 - v28;
  uint64_t v29 = sub_1003F5CB4(&qword_1009BCC50);
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v74 = v29;
  uint64_t v75 = v30;
  __chkstk_darwin(v31, v32);
  uint64_t v83 = (char *)&v65 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v81 = *a1;
  uint64_t v34 = v81;
  uint64_t v35 = sub_10047E23C( &qword_1009BC8B0,  &qword_1009BC8A0,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Variable<A>);
  static PredicateExpressions.build_Arg<A>(_:)(v34, v13, v35);
  uint64_t KeyPath = swift_getKeyPath(&unk_10071D8D0);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v18, KeyPath, v13, v35);
  swift_release(KeyPath);
  uint64_t v80 = *(void (**)(char *, uint64_t))(v14 + 8);
  v80(v18, v13);
  uint64_t v86 = v67;
  uint64_t v87 = v79;
  uint64_t v37 = v12;
  static PredicateExpressions.build_Arg<A>(_:)(&v86, &type metadata for String);
  uint64_t v38 = sub_10047E23C( &qword_1009BCC58,  &qword_1009BCC40,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.KeyPath<A, B>);
  uint64_t v79 = sub_10047E23C( &qword_1009BC460,  &qword_1009BC410,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Value<A>);
  uint64_t v39 = v84;
  uint64_t v40 = v85;
  uint64_t v67 = v38;
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)( v22,  v12,  v84,  v85,  v38,  v79,  &protocol witness table for String);
  __n128 v41 = (void (*)(char *, uint64_t))*((void *)v70 + 1);
  v41(v12, v40);
  __n128 v42 = v41;
  __n128 v70 = v41;
  uint64_t v43 = *(void (**)(char *, uint64_t))(v68 + 8);
  v43(v22, v39);
  uint64_t v65 = v35;
  static PredicateExpressions.build_Arg<A>(_:)(v81, v13, v35);
  uint64_t v44 = swift_getKeyPath(&unk_10071DAB0);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v18, v44, v13, v35);
  swift_release(v44);
  v80(v18, v13);
  uint64_t v86 = v72;
  uint64_t v87 = v73;
  static PredicateExpressions.build_Arg<A>(_:)(&v86, &type metadata for String);
  __n128 v45 = v69;
  uint64_t v46 = v37;
  uint64_t v47 = v37;
  uint64_t v49 = v84;
  uint64_t v48 = v85;
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)( v22,  v46,  v84,  v85,  v38,  v79,  &protocol witness table for String);
  v42(v47, v48);
  v43(v22, v49);
  uint64_t v50 = sub_10047E23C( &qword_1009BCC60,  &qword_1009BCC48,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Equal<A, B>);
  uint64_t v51 = v82;
  uint64_t v52 = v66;
  static PredicateExpressions.build_Conjunction<A, B>(lhs:rhs:)(v66, v45, v82, v82, v50, v50);
  uint64_t v53 = *(void (**)(char *, uint64_t))(v71 + 8);
  v53(v45, v51);
  v53(v52, v51);
  uint64_t v54 = v65;
  static PredicateExpressions.build_Arg<A>(_:)(v81, v13, v65);
  uint64_t v55 = swift_getKeyPath(&unk_10071D8F8);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v18, v55, v13, v54);
  swift_release(v55);
  v80(v18, v13);
  uint64_t v86 = v76;
  uint64_t v87 = v77;
  static PredicateExpressions.build_Arg<A>(_:)(&v86, &type metadata for String);
  uint64_t v57 = v84;
  uint64_t v56 = v85;
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)( v22,  v47,  v84,  v85,  v67,  v79,  &protocol witness table for String);
  v70(v47, v56);
  v43(v22, v57);
  uint64_t v58 = sub_1003F5CB4(&qword_1009BCCA0);
  __n128 v59 = v78;
  v78[3] = v58;
  v59[4] = sub_100512E94();
  sub_10040B2A8(v59);
  uint64_t v60 = sub_10047E23C( &qword_1009BCC90,  &qword_1009BCC50,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Conjunction<A, B>);
  uint64_t v61 = v82;
  __n128 v62 = v83;
  uint64_t v63 = v74;
  static PredicateExpressions.build_Conjunction<A, B>(lhs:rhs:)(v83, v52, v74, v82, v60, v50);
  v53(v52, v61);
  return (*(uint64_t (**)(char *, uint64_t))(v75 + 8))(v62, v63);
}

void *sub_1004E4F8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = sub_1003F5CB4(&qword_1009BC288);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v13, v14);
  __n128 v16 = &v19[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v23 = a1;
  uint64_t v24 = a2;
  uint64_t v25 = a3;
  uint64_t v26 = a4;
  uint64_t v28 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession(0LL);
  Predicate.init(_:)(sub_10050D524, v22, 1LL, &v28);
  __n128 v27 = _swiftEmptyArrayStorage;
  __n128 v20 = &v27;
  uint64_t v21 = v16;
  (*(void (**)(uint64_t, uint64_t (*)(uint64_t), char *))((swift_isaMask & *v5) + 0xE8LL))( a5,  sub_100513D24,  v19);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v16, v11);
  return v27;
}

uint64_t sub_1004E5210@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  uint64_t v56 = a6;
  uint64_t v57 = a4;
  uint64_t v58 = a5;
  uint64_t v53 = a3;
  uint64_t v51 = a2;
  uint64_t v61 = a7;
  uint64_t v62 = sub_1003F5CB4(&qword_1009BC410);
  uint64_t v55 = *(void *)(v62 - 8);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_1003F5CB4(&qword_1009BC8A0);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v14, v15);
  uint64_t v17 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_1003F5CB4(&qword_1009BCC40);
  uint64_t v52 = *(void *)(v18 - 8);
  __chkstk_darwin(v19, v20);
  uint64_t v22 = (char *)&v49 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = sub_1003F5CB4(&qword_1009BCC48);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v59 = v23;
  uint64_t v60 = v24;
  __chkstk_darwin(v25, v26);
  uint64_t v54 = (char *)&v49 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v28, v29);
  uint64_t v50 = (char *)&v49 - v30;
  uint64_t v31 = *a1;
  uint64_t v32 = sub_10047E23C( &qword_1009BC8B0,  &qword_1009BC8A0,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Variable<A>);
  static PredicateExpressions.build_Arg<A>(_:)(v31, v12, v32);
  uint64_t KeyPath = swift_getKeyPath(&unk_10071D8D0);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v17, KeyPath, v12, v32);
  swift_release(KeyPath);
  uint64_t v49 = *(void (**)(char *, uint64_t))(v13 + 8);
  v49(v17, v12);
  uint64_t v63 = v51;
  uint64_t v64 = v53;
  static PredicateExpressions.build_Arg<A>(_:)(&v63, &type metadata for String);
  uint64_t v34 = sub_10047E23C( &qword_1009BCC58,  &qword_1009BCC40,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.KeyPath<A, B>);
  uint64_t v53 = v34;
  uint64_t v35 = sub_10047E23C( &qword_1009BC460,  &qword_1009BC410,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Value<A>);
  uint64_t v36 = v62;
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)( v22,  v11,  v18,  v62,  v34,  v35,  &protocol witness table for String);
  uint64_t v37 = *(void (**)(char *, uint64_t))(v55 + 8);
  v37(v11, v36);
  uint64_t v38 = *(void (**)(char *, uint64_t))(v52 + 8);
  v38(v22, v18);
  static PredicateExpressions.build_Arg<A>(_:)(v31, v12, v32);
  uint64_t v39 = swift_getKeyPath(v56);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v17, v39, v12, v32);
  swift_release(v39);
  v49(v17, v12);
  uint64_t v63 = v57;
  uint64_t v64 = v58;
  static PredicateExpressions.build_Arg<A>(_:)(&v63, &type metadata for String);
  uint64_t v40 = v54;
  uint64_t v41 = v62;
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)( v22,  v11,  v18,  v62,  v53,  v35,  &protocol witness table for String);
  v37(v11, v41);
  v38(v22, v18);
  uint64_t v42 = sub_1003F5CB4(&qword_1009BCC50);
  uint64_t v43 = v61;
  v61[3] = v42;
  v43[4] = sub_1005115B8( &qword_1009BCC78,  &qword_1009BCC50,  (void (*)(void))sub_100512DE8,  (uint64_t)&protocol conformance descriptor for <> PredicateExpressions.Conjunction<A, B>);
  sub_10040B2A8(v43);
  uint64_t v44 = sub_10047E23C( &qword_1009BCC60,  &qword_1009BCC48,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Equal<A, B>);
  __n128 v45 = v50;
  uint64_t v46 = v59;
  static PredicateExpressions.build_Conjunction<A, B>(lhs:rhs:)(v50, v40, v59, v59, v44, v44);
  uint64_t v47 = *(void (**)(char *, uint64_t))(v60 + 8);
  v47(v40, v46);
  return ((uint64_t (*)(char *, uint64_t))v47)(v45, v46);
}

void *sub_1004E5618(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_1003F5CB4(&qword_1009BC288);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = &v15[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v19 = a1;
  uint64_t v20 = a2;
  uint64_t v22 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession(0LL);
  Predicate.init(_:)(sub_100513CD4, v18, 1LL, &v22);
  uint64_t v21 = _swiftEmptyArrayStorage;
  uint64_t v16 = &v21;
  uint64_t v17 = v12;
  (*(void (**)(uint64_t, uint64_t (*)(uint64_t), char *))((swift_isaMask & *v3) + 0xE8LL))( a3,  sub_100513D24,  v15);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
  return v21;
}

void *sub_1004E5890(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = sub_1003F5CB4(&qword_1009BC288);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v13, v14);
  uint64_t v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for Date(0LL);
  uint64_t v26 = *(void *)(v17 - 8);
  uint64_t v27 = v17;
  uint64_t v20 = __chkstk_darwin(v18, v19);
  uint64_t v22 = (char *)&v25 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Date.init()(v20);
  uint64_t v32 = a1;
  uint64_t v33 = a2;
  uint64_t v34 = a3;
  uint64_t v35 = a4;
  uint64_t v36 = v22;
  uint64_t v38 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession(0LL);
  Predicate.init(_:)(sub_10050D548, v31, 1LL, &v38);
  uint64_t v37 = _swiftEmptyArrayStorage;
  __n128 v29 = &v37;
  uint64_t v30 = v16;
  (*(void (**)(uint64_t, uint64_t (*)(uint64_t), char *))((swift_isaMask & *v5) + 0xE8LL))( a5,  sub_100513D24,  v28);
  uint64_t v23 = v37;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v16, v11);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v22, v27);
  return v23;
}

uint64_t sub_1004E5B68@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  uint64_t v104 = a6;
  uint64_t v94 = a5;
  uint64_t v93 = a4;
  uint64_t v89 = a3;
  uint64_t v91 = a2;
  uint64_t v110 = a7;
  uint64_t v103 = type metadata accessor for PredicateExpressions.ComparisonOperator(0LL);
  uint64_t v101 = *(void *)(v103 - 8);
  __chkstk_darwin(v8, v9);
  uint64_t v100 = (char *)&v82 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v105 = sub_1003F5CB4(&qword_1009BC548);
  uint64_t v107 = *(void *)(v105 - 8);
  __chkstk_darwin(v11, v12);
  uint64_t v97 = (char *)&v82 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v102 = sub_1003F5CB4(&qword_1009BC8A8);
  uint64_t v106 = *(void *)(v102 - 8);
  __chkstk_darwin(v14, v15);
  uint64_t v95 = (char *)&v82 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_1003F5CB4(&qword_1009BC8B8);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v108 = v17;
  uint64_t v109 = v18;
  __chkstk_darwin(v19, v20);
  uint64_t v99 = (char *)&v82 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v87 = sub_1003F5CB4(&qword_1009BC410);
  uint64_t v88 = *(void *)(v87 - 8);
  __chkstk_darwin(v22, v23);
  uint64_t v25 = (char *)&v82 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = sub_1003F5CB4(&qword_1009BC8A0);
  uint64_t v27 = *(void *)(v26 - 8);
  __chkstk_darwin(v28, v29);
  uint64_t v31 = (char *)&v82 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32 = sub_1003F5CB4(&qword_1009BCC40);
  uint64_t v85 = *(void *)(v32 - 8);
  __chkstk_darwin(v33, v34);
  uint64_t v36 = (char *)&v82 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v90 = sub_1003F5CB4(&qword_1009BCC48);
  uint64_t v92 = *(void *)(v90 - 8);
  __chkstk_darwin(v37, v38);
  uint64_t v86 = (char *)&v82 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v40, v41);
  uint64_t v84 = (char *)&v82 - v42;
  uint64_t v96 = sub_1003F5CB4(&qword_1009BCC50);
  uint64_t v98 = *(void *)(v96 - 8);
  __chkstk_darwin(v43, v44);
  uint64_t v112 = (char *)&v82 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v46 = *a1;
  uint64_t v47 = sub_10047E23C( &qword_1009BC8B0,  &qword_1009BC8A0,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Variable<A>);
  uint64_t v83 = v46;
  static PredicateExpressions.build_Arg<A>(_:)(v46, v26, v47);
  uint64_t KeyPath = swift_getKeyPath(&unk_10071D8D0);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v31, KeyPath, v26, v47);
  swift_release(KeyPath);
  uint64_t v111 = *(void (**)(char *, uint64_t))(v27 + 8);
  v111(v31, v26);
  uint64_t v113 = v91;
  uint64_t v114 = v89;
  static PredicateExpressions.build_Arg<A>(_:)(&v113, &type metadata for String);
  uint64_t v49 = sub_10047E23C( &qword_1009BCC58,  &qword_1009BCC40,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.KeyPath<A, B>);
  uint64_t v91 = v49;
  uint64_t v89 = sub_10047E23C( &qword_1009BC460,  &qword_1009BC410,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Value<A>);
  uint64_t v50 = v32;
  uint64_t v82 = v32;
  uint64_t v51 = v87;
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)( v36,  v25,  v32,  v87,  v49,  v89,  &protocol witness table for String);
  uint64_t v52 = *(void (**)(char *, uint64_t))(v88 + 8);
  v52(v25, v51);
  uint64_t v53 = *(void (**)(char *, uint64_t))(v85 + 8);
  v53(v36, v50);
  static PredicateExpressions.build_Arg<A>(_:)(v46, v26, v47);
  uint64_t v54 = swift_getKeyPath(&unk_10071DAB0);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v31, v54, v26, v47);
  swift_release(v54);
  v111(v31, v26);
  uint64_t v113 = v93;
  uint64_t v114 = v94;
  static PredicateExpressions.build_Arg<A>(_:)(&v113, &type metadata for String);
  uint64_t v55 = v86;
  uint64_t v56 = v82;
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)( v36,  v25,  v82,  v51,  v91,  v89,  &protocol witness table for String);
  v52(v25, v51);
  v53(v36, v56);
  uint64_t v57 = sub_10047E23C( &qword_1009BCC60,  &qword_1009BCC48,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Equal<A, B>);
  uint64_t v58 = v84;
  uint64_t v59 = v90;
  static PredicateExpressions.build_Conjunction<A, B>(lhs:rhs:)(v84, v55, v90, v90, v57, v57);
  uint64_t v60 = *(void (**)(char *, uint64_t))(v92 + 8);
  v60(v55, v59);
  v60(v58, v59);
  static PredicateExpressions.build_Arg<A>(_:)(v83, v26, v47);
  uint64_t v61 = swift_getKeyPath(&unk_10071D970);
  uint64_t v62 = v95;
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v31, v61, v26, v47);
  swift_release(v61);
  v111(v31, v26);
  uint64_t v63 = type metadata accessor for Date(0LL);
  uint64_t v64 = v97;
  static PredicateExpressions.build_Arg<A>(_:)(v104, v63);
  uint64_t v66 = v100;
  uint64_t v65 = v101;
  uint64_t v67 = v103;
  (*(void (**)(char *, void, uint64_t))(v101 + 104))( v100,  enum case for PredicateExpressions.ComparisonOperator.greaterThan(_:),  v103);
  uint64_t v68 = sub_10047E23C( &qword_1009BC8D8,  &qword_1009BC8A8,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.KeyPath<A, B>);
  uint64_t v69 = sub_10047E23C( &qword_1009BC598,  &qword_1009BC548,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Value<A>);
  uint64_t v70 = sub_10040A2B0( (unint64_t *)&unk_1009BC4A0,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  uint64_t v71 = v99;
  uint64_t v72 = v102;
  uint64_t v73 = v105;
  static PredicateExpressions.build_Comparison<A, B>(lhs:rhs:op:)(v62, v64, v66, v102, v105, v68, v69, v70);
  (*(void (**)(char *, uint64_t))(v65 + 8))(v66, v67);
  (*(void (**)(char *, uint64_t))(v107 + 8))(v64, v73);
  (*(void (**)(char *, uint64_t))(v106 + 8))(v62, v72);
  uint64_t v74 = sub_1003F5CB4(&qword_1009BCC68);
  uint64_t v75 = v110;
  v110[3] = v74;
  v75[4] = sub_100512D54();
  sub_10040B2A8(v75);
  uint64_t v76 = sub_10047E23C( &qword_1009BCC90,  &qword_1009BCC50,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Conjunction<A, B>);
  uint64_t v77 = sub_10047E23C( &qword_1009BCC98,  &qword_1009BC8B8,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Comparison<A, B>);
  uint64_t v78 = v112;
  uint64_t v79 = v96;
  uint64_t v80 = v108;
  static PredicateExpressions.build_Conjunction<A, B>(lhs:rhs:)(v112, v71, v96, v108, v76, v77);
  (*(void (**)(char *, uint64_t))(v109 + 8))(v71, v80);
  return (*(uint64_t (**)(char *, uint64_t))(v98 + 8))(v78, v79);
}

uint64_t sub_1004E631C(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_1003F5CB4((uint64_t *)&unk_1009BC830);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (char *)v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_1003F5CB4(&qword_1009BC288);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v7, 1LL, 1LL, v14);
  uint64_t v15 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession(0LL);
  uint64_t v16 = sub_10040A2B0( &qword_1009B9F70,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A150);
  FetchDescriptor.init(predicate:sortBy:)(v7, _swiftEmptyArrayStorage, v15, v16);
  uint64_t v17 = dispatch thunk of ModelContext.fetch<A>(_:)(v13, v15, v16);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v13, v8);
  if (!v2)
  {
    uint64_t v19 = *a2;
    *a2 = v17;
    return swift_bridgeObjectRelease(v19);
  }

  return result;
}

uint64_t sub_1004E6488(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_1003F5CB4((uint64_t *)&unk_1009BC400);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (char *)v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_1003F5CB4(&qword_1009BC2E0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v7, 1LL, 1LL, v14);
  uint64_t v15 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDShortHandle(0LL);
  uint64_t v16 = sub_10040A2B0( &qword_1009B9FA0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDShortHandle,  (uint64_t)&unk_10071A388);
  FetchDescriptor.init(predicate:sortBy:)(v7, _swiftEmptyArrayStorage, v15, v16);
  uint64_t v17 = dispatch thunk of ModelContext.fetch<A>(_:)(v13, v15, v16);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v13, v8);
  if (!v2)
  {
    uint64_t v19 = *a2;
    *a2 = v17;
    return swift_bridgeObjectRelease(v19);
  }

  return result;
}

void sub_1004E65F4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, id a5, void **a6)
{
  id v10 = [a5 prefixedURI];
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  uint64_t v13 = v12;

  sub_1004DF32C(a3, a4, v11, v13, a1);
  uint64_t v15 = v14;
  swift_bridgeObjectRelease(v13);
  if (v15)
  {
    swift_retain(v15);
    uint64_t v16 = sub_10043F144();
    unint64_t v18 = v17;
    swift_release(v15);
  }

  else
  {
    uint64_t v16 = 0LL;
    unint64_t v18 = 0xF000000000000000LL;
  }

  type metadata accessor for ArchiveHelper();
  uint64_t v19 = sub_10041D3C4(0LL, &qword_1009BC468, &OBJC_CLASS___IDSQueryKeyTransparencyContext_ptr);
  uint64_t v20 = sub_10040AB44(v19, v16, v18, v19);
  swift_release(v15);
  sub_10040AD00(v16, v18);
  uint64_t v21 = *a6;
  *a6 = (void *)v20;
}

uint64_t sub_1004E67BC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v22 = sub_1003F5CB4(&qword_1009BC298);
  uint64_t v11 = *(void *)(v22 - 8);
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v16 = [a3 prefixedURI];
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
  uint64_t v19 = v18;

  uint64_t v27 = a4;
  uint64_t v28 = a5;
  uint64_t v29 = v17;
  uint64_t v30 = v19;
  uint64_t v31 = a1;
  uint64_t v32 = a2;
  uint64_t v34 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDPublicIdentity(0LL);
  Predicate.init(_:)(sub_10050D588, v26, 1LL, &v34);
  swift_bridgeObjectRelease(v19);
  __int128 v33 = xmmword_1007190F0;
  uint64_t v24 = v15;
  uint64_t v25 = &v33;
  (*(void (**)(void, uint64_t (*)(uint64_t), char *))((swift_isaMask & *v5) + 0xE8LL))( 0LL,  sub_10050D598,  v23);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v15, v22);
  return v33;
}

uint64_t sub_1004E6A54@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, void *a8@<X8>)
{
  uint64_t v101 = a6;
  uint64_t v102 = a7;
  uint64_t v94 = a4;
  uint64_t v95 = a5;
  uint64_t v90 = a3;
  uint64_t v91 = a2;
  uint64_t v109 = a8;
  uint64_t v9 = sub_1003F5CB4(&qword_1009BCA20);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v105 = v9;
  uint64_t v106 = v10;
  __chkstk_darwin(v11, v12);
  uint64_t v100 = (char *)&v83 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_1003F5CB4(&qword_1009BCBE8);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v103 = v14;
  uint64_t v104 = v15;
  __chkstk_darwin(v16, v17);
  uint64_t v96 = (char *)&v83 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = sub_1003F5CB4(&qword_1009BCBF0);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v107 = v19;
  uint64_t v108 = v20;
  __chkstk_darwin(v21, v22);
  uint64_t v99 = (char *)&v83 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v87 = sub_1003F5CB4(&qword_1009BC410);
  uint64_t v89 = *(void *)(v87 - 8);
  __chkstk_darwin(v24, v25);
  uint64_t v27 = (char *)&v83 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = sub_1003F5CB4(&qword_1009BCB70);
  uint64_t v29 = *(void *)(v28 - 8);
  __chkstk_darwin(v30, v31);
  __int128 v33 = (char *)&v83 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v110 = sub_1003F5CB4(&qword_1009BCB78);
  uint64_t v83 = *(void *)(v110 - 8);
  __chkstk_darwin(v34, v35);
  __n128 v37 = (char *)&v83 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v92 = sub_1003F5CB4(&qword_1009BCB80);
  uint64_t v93 = *(void *)(v92 - 8);
  __chkstk_darwin(v38, v39);
  uint64_t v86 = (char *)&v83 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v41, v42);
  uint64_t v85 = (char *)&v83 - v43;
  uint64_t v44 = sub_1003F5CB4(&qword_1009BCBF8);
  uint64_t v45 = *(void *)(v44 - 8);
  uint64_t v97 = v44;
  uint64_t v98 = v45;
  __chkstk_darwin(v46, v47);
  uint64_t v88 = (char *)&v83 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v49 = *a1;
  uint64_t v50 = sub_10047E23C( &qword_1009BCB88,  &qword_1009BCB70,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Variable<A>);
  uint64_t v84 = v49;
  static PredicateExpressions.build_Arg<A>(_:)(v49, v28, v50);
  uint64_t KeyPath = swift_getKeyPath(&unk_10071DA10);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v33, KeyPath, v28, v50);
  swift_release(KeyPath);
  uint64_t v111 = *(void (**)(char *, uint64_t))(v29 + 8);
  v111(v33, v28);
  uint64_t v112 = v91;
  uint64_t v113 = v90;
  static PredicateExpressions.build_Arg<A>(_:)(&v112, &type metadata for String);
  uint64_t v52 = sub_10047E23C( &qword_1009BCB90,  &qword_1009BCB78,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.KeyPath<A, B>);
  uint64_t v91 = v52;
  uint64_t v90 = sub_10047E23C( &qword_1009BC460,  &qword_1009BC410,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Value<A>);
  uint64_t v53 = v110;
  uint64_t v54 = v87;
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)( v37,  v27,  v110,  v87,  v52,  v90,  &protocol witness table for String);
  uint64_t v55 = *(void (**)(char *, uint64_t))(v89 + 8);
  v55(v27, v54);
  uint64_t v56 = *(void (**)(char *, uint64_t))(v83 + 8);
  v56(v37, v53);
  static PredicateExpressions.build_Arg<A>(_:)(v49, v28, v50);
  uint64_t v57 = swift_getKeyPath(&unk_10071DA60);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v33, v57, v28, v50);
  swift_release(v57);
  v111(v33, v28);
  uint64_t v112 = v94;
  uint64_t v113 = v95;
  static PredicateExpressions.build_Arg<A>(_:)(&v112, &type metadata for String);
  uint64_t v58 = v86;
  uint64_t v59 = v110;
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)( v37,  v27,  v110,  v54,  v91,  v90,  &protocol witness table for String);
  v55(v27, v54);
  v56(v37, v59);
  uint64_t v60 = sub_10047E23C( &qword_1009BCBD8,  &qword_1009BCB80,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Equal<A, B>);
  uint64_t v61 = v88;
  uint64_t v62 = v85;
  uint64_t v63 = v92;
  static PredicateExpressions.build_Conjunction<A, B>(lhs:rhs:)(v85, v58, v92, v92, v60, v60);
  uint64_t v64 = *(void (**)(char *, uint64_t))(v93 + 8);
  v64(v58, v63);
  v64(v62, v63);
  static PredicateExpressions.build_Arg<A>(_:)(v84, v28, v50);
  uint64_t v65 = swift_getKeyPath(&unk_10071DA88);
  uint64_t v66 = v96;
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v33, v65, v28, v50);
  swift_release(v65);
  v111(v33, v28);
  uint64_t v67 = v100;
  uint64_t v112 = v101;
  uint64_t v113 = v102;
  static PredicateExpressions.build_Arg<A>(_:)(&v112, &type metadata for Data);
  uint64_t v68 = sub_10047E23C( &qword_1009BCC00,  &qword_1009BCBE8,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.KeyPath<A, B>);
  uint64_t v69 = sub_10047E23C( &qword_1009BCA30,  &qword_1009BCA20,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Value<A>);
  unint64_t v70 = sub_100510F48();
  uint64_t v71 = v99;
  uint64_t v72 = v67;
  uint64_t v73 = v67;
  uint64_t v74 = v103;
  uint64_t v75 = v105;
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)(v66, v72, v103, v105, v68, v69, v70);
  (*(void (**)(char *, uint64_t))(v106 + 8))(v73, v75);
  (*(void (**)(char *, uint64_t))(v104 + 8))(v66, v74);
  uint64_t v76 = sub_1003F5CB4(&qword_1009BCC08);
  uint64_t v77 = v109;
  v109[3] = v76;
  v77[4] = sub_100512C34();
  sub_10040B2A8(v77);
  uint64_t v78 = sub_10047E23C( &qword_1009BCC30,  &qword_1009BCBF8,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Conjunction<A, B>);
  uint64_t v79 = sub_10047E23C( &qword_1009BCC38,  &qword_1009BCBF0,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Equal<A, B>);
  uint64_t v80 = v97;
  uint64_t v81 = v107;
  static PredicateExpressions.build_Conjunction<A, B>(lhs:rhs:)(v61, v71, v97, v107, v78, v79);
  (*(void (**)(char *, uint64_t))(v108 + 8))(v71, v81);
  return (*(uint64_t (**)(char *, uint64_t))(v98 + 8))(v61, v80);
}

uint64_t sub_1004E7158(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __n128 v31 = a3;
  sub_1003F5CB4(&qword_1009BCB48);
  __chkstk_darwin(v5, v6);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_1003F5CB4((uint64_t *)&unk_1009BCB50);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_1003F5CB4(&qword_1009BC298);
  uint64_t v16 = *(void *)(v15 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v8, a2, v15);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v8, 0LL, 1LL, v15);
  uint64_t v17 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDPublicIdentity(0LL);
  uint64_t v18 = sub_10040A2B0( &qword_1009B9F88,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDPublicIdentity,  (uint64_t)&unk_10071A26C);
  FetchDescriptor.init(predicate:sortBy:)(v8, _swiftEmptyArrayStorage, v17, v18);
  uint64_t v19 = dispatch thunk of ModelContext.fetch<A>(_:)(v14, v17, v18);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v14, v9);
  if (!v3)
  {
    __n128 v21 = v31;
    if ((unint64_t)v19 >> 62)
    {
      if (v19 < 0) {
        uint64_t v26 = v19;
      }
      else {
        uint64_t v26 = v19 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v19);
      uint64_t v27 = _CocoaArrayWrapper.endIndex.getter(v26);
      uint64_t result = swift_bridgeObjectRelease(v19);
      if (v27) {
        goto LABEL_4;
      }
    }

    else if (*(void *)((v19 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
LABEL_4:
      if ((v19 & 0xC000000000000001LL) != 0)
      {
        uint64_t v22 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v19);
      }

      else
      {
        if (!*(void *)((v19 & 0xFFFFFFFFFFFFF8LL) + 0x10))
        {
          __break(1u);
          return result;
        }

        uint64_t v22 = *(void *)(v19 + 32);
        swift_retain(v22);
      }

      swift_bridgeObjectRelease(v19);
      swift_retain(v22);
      uint64_t v23 = sub_100444D08();
      unint64_t v25 = v24;
      swift_release_n(v22, 2LL);
      goto LABEL_13;
    }

    swift_bridgeObjectRelease(v19);
    uint64_t v23 = 0LL;
    unint64_t v25 = 0xF000000000000000LL;
LABEL_13:
    uint64_t v28 = *v21;
    unint64_t v29 = v21[1];
    *__n128 v21 = v23;
    v21[1] = v25;
    return sub_10040AD00(v28, v29);
  }

  return result;
}

void *sub_1004E7498(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_1003F5CB4(&qword_1009BC298);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v9, v10);
  __n128 v12 = &v16[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v26 = _swiftEmptyArrayStorage;
  uint64_t v21 = a2;
  uint64_t v22 = a3;
  uint64_t v23 = a1;
  uint64_t v25 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDPublicIdentity(0LL);
  Predicate.init(_:)(sub_10050D5B0, v20, 1LL, &v25);
  unint64_t v24 = _swiftEmptyArrayStorage;
  uint64_t v17 = &v24;
  uint64_t v18 = v12;
  uint64_t v19 = &v26;
  (*(void (**)(void, uint64_t (*)(uint64_t), char *))((swift_isaMask & *v3) + 0xE8LL))( 0LL,  sub_10050D5BC,  v16);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
  uint64_t v13 = v26;
  swift_bridgeObjectRelease(v24);
  return v13;
}

uint64_t sub_1004E773C@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v82 = a4;
  uint64_t v71 = a2;
  uint64_t v72 = a3;
  uint64_t v88 = a5;
  uint64_t v81 = type metadata accessor for PredicateExpressions.ComparisonOperator(0LL);
  uint64_t v79 = *(void *)(v81 - 8);
  __chkstk_darwin(v6, v7);
  uint64_t v77 = (char *)&v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v83 = sub_1003F5CB4(&qword_1009BC548);
  uint64_t v85 = *(void *)(v83 - 8);
  __chkstk_darwin(v9, v10);
  uint64_t v74 = (char *)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v80 = sub_1003F5CB4(&qword_1009BCB60);
  uint64_t v84 = *(void *)(v80 - 8);
  __chkstk_darwin(v12, v13);
  uint64_t v73 = (char *)&v66 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_1003F5CB4(&qword_1009BCB68);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v86 = v15;
  uint64_t v87 = v16;
  __chkstk_darwin(v17, v18);
  uint64_t v75 = (char *)&v66 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v68 = sub_1003F5CB4(&qword_1009BC410);
  uint64_t v69 = *(void *)(v68 - 8);
  __chkstk_darwin(v20, v21);
  uint64_t v23 = (char *)&v66 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = sub_1003F5CB4(&qword_1009BCB70);
  uint64_t v25 = *(void *)(v24 - 8);
  __chkstk_darwin(v26, v27);
  unint64_t v29 = (char *)&v66 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = sub_1003F5CB4(&qword_1009BCB78);
  uint64_t v67 = *(void *)(v30 - 8);
  __chkstk_darwin(v31, v32);
  __n128 v34 = (char *)&v66 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v76 = sub_1003F5CB4(&qword_1009BCB80);
  uint64_t v78 = *(void *)(v76 - 8);
  __chkstk_darwin(v35, v36);
  unint64_t v70 = (char *)&v66 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v38 = *a1;
  uint64_t v39 = sub_10047E23C( &qword_1009BCB88,  &qword_1009BCB70,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Variable<A>);
  static PredicateExpressions.build_Arg<A>(_:)(v38, v24, v39);
  uint64_t KeyPath = swift_getKeyPath(&unk_10071DA10);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v29, KeyPath, v24, v39);
  swift_release(KeyPath);
  __n128 v41 = *(void (**)(char *, uint64_t))(v25 + 8);
  v41(v29, v24);
  v89[0] = v71;
  v89[1] = v72;
  static PredicateExpressions.build_Arg<A>(_:)(v89, &type metadata for String);
  uint64_t v42 = sub_10047E23C( &qword_1009BCB90,  &qword_1009BCB78,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.KeyPath<A, B>);
  uint64_t v43 = sub_10047E23C( &qword_1009BC460,  &qword_1009BC410,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Value<A>);
  uint64_t v44 = v68;
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)( v34,  v23,  v30,  v68,  v42,  v43,  &protocol witness table for String);
  (*(void (**)(char *, uint64_t))(v69 + 8))(v23, v44);
  (*(void (**)(char *, uint64_t))(v67 + 8))(v34, v30);
  static PredicateExpressions.build_Arg<A>(_:)(v38, v24, v39);
  uint64_t v45 = swift_getKeyPath(&unk_10071DA38);
  __n128 v46 = v73;
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v29, v45, v24, v39);
  swift_release(v45);
  v41(v29, v24);
  uint64_t v47 = type metadata accessor for Date(0LL);
  uint64_t v48 = v74;
  static PredicateExpressions.build_Arg<A>(_:)(v82, v47);
  uint64_t v49 = v79;
  uint64_t v50 = v77;
  uint64_t v51 = v81;
  (*(void (**)(char *, void, uint64_t))(v79 + 104))( v77,  enum case for PredicateExpressions.ComparisonOperator.greaterThan(_:),  v81);
  uint64_t v52 = sub_10047E23C( &qword_1009BCB98,  &qword_1009BCB60,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.KeyPath<A, B>);
  uint64_t v53 = sub_10047E23C( &qword_1009BC598,  &qword_1009BC548,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Value<A>);
  uint64_t v54 = sub_10040A2B0( (unint64_t *)&unk_1009BC4A0,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  uint64_t v55 = v75;
  uint64_t v56 = v80;
  uint64_t v57 = v83;
  static PredicateExpressions.build_Comparison<A, B>(lhs:rhs:op:)(v46, v48, v50, v80, v83, v52, v53, v54);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v50, v51);
  (*(void (**)(char *, uint64_t))(v85 + 8))(v48, v57);
  (*(void (**)(char *, uint64_t))(v84 + 8))(v46, v56);
  uint64_t v58 = sub_1003F5CB4(&qword_1009BCBA0);
  uint64_t v59 = v88;
  v88[3] = v58;
  v59[4] = sub_100512A90();
  sub_10040B2A8(v59);
  uint64_t v60 = sub_10047E23C( &qword_1009BCBD8,  &qword_1009BCB80,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Equal<A, B>);
  uint64_t v61 = sub_10047E23C( &qword_1009BCBE0,  &qword_1009BCB68,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Comparison<A, B>);
  uint64_t v62 = v70;
  uint64_t v63 = v76;
  uint64_t v64 = v86;
  static PredicateExpressions.build_Conjunction<A, B>(lhs:rhs:)(v70, v55, v76, v86, v60, v61);
  (*(void (**)(char *, uint64_t))(v87 + 8))(v55, v64);
  return (*(uint64_t (**)(char *, uint64_t))(v78 + 8))(v62, v63);
}

uint64_t sub_1004E7CF0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  __n128 v41 = a2;
  uint64_t v42 = a4;
  sub_1003F5CB4(&qword_1009BCB48);
  __chkstk_darwin(v6, v7);
  __n128 v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_1003F5CB4((uint64_t *)&unk_1009BCB50);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_1003F5CB4(&qword_1009BC298);
  uint64_t v17 = *(void *)(v16 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v9, a3, v16);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v9, 0LL, 1LL, v16);
  uint64_t v18 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDPublicIdentity(0LL);
  uint64_t v19 = sub_10040A2B0( &qword_1009B9F88,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDPublicIdentity,  (uint64_t)&unk_10071A26C);
  FetchDescriptor.init(predicate:sortBy:)(v9, _swiftEmptyArrayStorage, v18, v19);
  uint64_t v20 = dispatch thunk of ModelContext.fetch<A>(_:)(v15, v18, v19);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v15, v10);
  if (!v4)
  {
    uint64_t v22 = v41;
    uint64_t v23 = *v41;
    *__n128 v41 = v20;
    swift_bridgeObjectRelease(v23);
    uint64_t v24 = *v22;
    unint64_t v43 = (unint64_t)_swiftEmptyArrayStorage;
    if ((unint64_t)v24 >> 62)
    {
      if (v24 < 0) {
        uint64_t v39 = v24;
      }
      else {
        uint64_t v39 = v24 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain_n(v24, 2LL);
      uint64_t result = _CocoaArrayWrapper.endIndex.getter(v39);
      uint64_t v25 = result;
      __n128 v26 = v42;
      if (result) {
        goto LABEL_4;
      }
    }

    else
    {
      uint64_t v25 = *(void *)((v24 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      uint64_t result = swift_bridgeObjectRetain_n(v24, 2LL);
      __n128 v26 = v42;
      if (v25)
      {
LABEL_4:
        if (v25 < 1)
        {
          __break(1u);
          return result;
        }

        __n128 v41 = 0LL;
        for (uint64_t i = 0LL; i != v25; ++i)
        {
          if ((v24 & 0xC000000000000001LL) != 0)
          {
            uint64_t v29 = specialized _ArrayBuffer._getElementSlowPath(_:)(i, v24);
          }

          else
          {
            uint64_t v29 = *(void *)(v24 + 8 * i + 32);
            swift_retain(v29);
          }

          sub_100444A84();
          uint64_t v31 = v30;
          id v32 = objc_allocWithZone(&OBJC_CLASS___IDSURI);
          NSString v33 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v31);
          id v34 = [v32 initWithPrefixedURI:v33];
          swift_release(v29);

          if (v34)
          {
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v35);
            unint64_t v37 = *(void *)((v43 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
            unint64_t v36 = *(void *)((v43 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
            if (v37 >= v36 >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1LL);
            }
            uint64_t v28 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v37, v34);
            specialized Array._endMutation()(v28);
          }
        }

        swift_bridgeObjectRelease(v24);
        uint64_t v38 = (void *)v43;
        __n128 v26 = v42;
        goto LABEL_20;
      }
    }

    swift_bridgeObjectRelease(v24);
    uint64_t v38 = _swiftEmptyArrayStorage;
LABEL_20:
    swift_bridgeObjectRelease(v24);
    uint64_t v40 = *v26;
    *__n128 v26 = (uint64_t)v38;
    return swift_bridgeObjectRelease(v40);
  }

  return result;
}

void *sub_1004E8104(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = sub_1003F5CB4((uint64_t *)&unk_1009BC2A0);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v11, v12);
  uint64_t v14 = &v17[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v21 = a1;
  uint64_t v22 = a2;
  uint64_t v23 = a3;
  uint64_t v25 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution(0LL);
  Predicate.init(_:)(sub_10050D5D8, v20, 1LL, &v25);
  uint64_t v24 = _swiftEmptyArrayStorage;
  uint64_t v18 = &v24;
  uint64_t v19 = v14;
  (*(void (**)(uint64_t, uint64_t (*)(uint64_t), char *))((swift_isaMask & *v4) + 0xE8LL))( a4,  sub_10050D5E4,  v17);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v14, v9);
  return v24;
}

uint64_t sub_1004E838C@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v74 = a3;
  uint64_t v75 = a4;
  uint64_t v78 = a5;
  uint64_t v7 = sub_1003F5CB4(&qword_1009BCA20);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v76 = v7;
  uint64_t v77 = v8;
  __chkstk_darwin(v9, v10);
  uint64_t v72 = (char *)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_1003F5CB4(&qword_1009BCA28);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v79 = v12;
  uint64_t v80 = v13;
  __chkstk_darwin(v14, v15);
  unint64_t v70 = (char *)&v62 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_1003F5CB4(&qword_1009BC5C8);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v19, v20);
  uint64_t v22 = (char *)&v62 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = sub_1003F5CB4(&qword_1009BC5D0);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v68 = v23;
  uint64_t v69 = v24;
  __chkstk_darwin(v25, v26);
  uint64_t v28 = (char *)&v62 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v65 = sub_1003F5CB4(&qword_1009BC5D8);
  uint64_t v67 = *(void *)(v65 - 8);
  __chkstk_darwin(v29, v30);
  id v32 = (char *)&v62 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v71 = sub_1003F5CB4(&qword_1009BC5E0);
  uint64_t v73 = *(void *)(v71 - 8);
  __chkstk_darwin(v33, v34);
  uint64_t v66 = (char *)&v62 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v64 = *a1;
  uint64_t v36 = v64;
  v81[0] = a2;
  uint64_t v37 = sub_1003F5CB4(&qword_1009BC5F0);
  static PredicateExpressions.build_Arg<A>(_:)(v81, v37);
  uint64_t v38 = sub_10047E23C( &qword_1009BC5F8,  &qword_1009BC5C8,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Variable<A>);
  static PredicateExpressions.build_Arg<A>(_:)(v36, v17, v38);
  uint64_t KeyPath = swift_getKeyPath(&unk_10071D7B8);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v22, KeyPath, v17, v38);
  swift_release(KeyPath);
  uint64_t v63 = *(void (**)(char *, uint64_t))(v18 + 8);
  v63(v22, v17);
  uint64_t v40 = sub_10047E23C( &qword_1009BC600,  &qword_1009BC5D8,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Value<A>);
  uint64_t v41 = sub_10047E23C( &qword_1009BC608,  &qword_1009BC5D0,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.KeyPath<A, B>);
  uint64_t v62 = v41;
  uint64_t v42 = sub_10047E23C(&qword_1009BC610, &qword_1009BC5F0, (uint64_t)&protocol conformance descriptor for [A]);
  unint64_t v43 = sub_100510F48();
  uint64_t v44 = v65;
  uint64_t v45 = v68;
  uint64_t v46 = v41;
  unint64_t v47 = v43;
  static PredicateExpressions.build_contains<A, B>(_:_:)(v32, v28, v65, v68, v40, v46, v42, v43);
  uint64_t v48 = *(void (**)(char *, uint64_t))(v69 + 8);
  v48(v28, v45);
  (*(void (**)(char *, uint64_t))(v67 + 8))(v32, v44);
  static PredicateExpressions.build_Arg<A>(_:)(v64, v17, v38);
  uint64_t v49 = swift_getKeyPath(&unk_10071D9C0);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v22, v49, v17, v38);
  swift_release(v49);
  v63(v22, v17);
  v81[0] = v74;
  v81[1] = v75;
  uint64_t v50 = v72;
  static PredicateExpressions.build_Arg<A>(_:)(v81, &type metadata for Data);
  uint64_t v51 = sub_10047E23C( &qword_1009BCA30,  &qword_1009BCA20,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Value<A>);
  uint64_t v52 = v70;
  uint64_t v53 = v76;
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)(v28, v50, v45, v76, v62, v51, v47);
  (*(void (**)(char *, uint64_t))(v77 + 8))(v50, v53);
  v48(v28, v45);
  uint64_t v54 = sub_1003F5CB4(&qword_1009BCB38);
  uint64_t v55 = v78;
  v78[3] = v54;
  v55[4] = sub_100512A24();
  sub_10040B2A8(v55);
  uint64_t v56 = sub_10047E23C( &qword_1009BC630,  &qword_1009BC5E0,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.SequenceContains<A, B>);
  uint64_t v57 = sub_10047E23C( &qword_1009BCA60,  &qword_1009BCA28,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Equal<A, B>);
  uint64_t v58 = v66;
  uint64_t v59 = v71;
  uint64_t v60 = v79;
  static PredicateExpressions.build_Conjunction<A, B>(lhs:rhs:)(v66, v52, v71, v79, v56, v57);
  (*(void (**)(char *, uint64_t))(v80 + 8))(v52, v60);
  return (*(uint64_t (**)(char *, uint64_t))(v73 + 8))(v58, v59);
}

uint64_t sub_1004E8854(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v23 = a2;
  sub_1003F5CB4((uint64_t *)&unk_1009BC5A0);
  __chkstk_darwin(v5, v6);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_1003F5CB4(&qword_1009BC6B8);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v11, v12);
  __n128 v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_1003F5CB4((uint64_t *)&unk_1009BC2A0);
  uint64_t v16 = *(void *)(v15 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v8, a3, v15);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v8, 0LL, 1LL, v15);
  uint64_t v17 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution(0LL);
  uint64_t v18 = sub_10040A2B0( &qword_1009B9FC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A4A4);
  FetchDescriptor.init(predicate:sortBy:)(v8, &_swiftEmptyArrayStorage, v17, v18);
  uint64_t v19 = dispatch thunk of ModelContext.fetch<A>(_:)(v14, v17, v18);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v14, v9);
  if (!v3)
  {
    uint64_t v21 = *v23;
    uint64_t *v23 = v19;
    return swift_bridgeObjectRelease(v21);
  }

  return result;
}

void *sub_1004E89E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = sub_1003F5CB4((uint64_t *)&unk_1009BC2A0);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v13, v14);
  uint64_t v16 = &v19[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v23 = a1;
  uint64_t v24 = a2;
  uint64_t v25 = a3;
  uint64_t v26 = a4;
  uint64_t v28 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution(0LL);
  Predicate.init(_:)(sub_100513C04, v22, 1LL, &v28);
  uint64_t v27 = &_swiftEmptyArrayStorage;
  __n128 v20 = &v27;
  uint64_t v21 = v16;
  (*(void (**)(uint64_t, uint64_t (*)(uint64_t), char *))((swift_isaMask & *v5) + 0xE8LL))( a5,  sub_100513D38,  v19);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v16, v11);
  return v27;
}

void sub_1004E8C64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_1003F5CB4((uint64_t *)&unk_1009BC2A0);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = &v17[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v21 = a1;
  uint64_t v22 = a2;
  uint64_t v24 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution(0LL);
  Predicate.init(_:)(sub_10050D5FC, v20, 1LL, &v24);
  uint64_t v23 = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v18 = &v23;
  uint64_t v19 = v12;
  (*(void (**)(uint64_t, uint64_t (*)(uint64_t), char *))((swift_isaMask & *v3) + 0xE8LL))( a3,  sub_100513D38,  v17);
  uint64_t v13 = v23;
  if ((unint64_t)v23 >> 62)
  {
    if (v23 < 0) {
      uint64_t v15 = v23;
    }
    else {
      uint64_t v15 = v23 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v23);
    if (!_CocoaArrayWrapper.endIndex.getter(v15)) {
      goto LABEL_6;
    }
  }

  else
  {
    uint64_t v14 = *(void *)((v23 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(v23);
    if (!v14)
    {
LABEL_6:
      swift_bridgeObjectRelease(v13);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
      swift_bridgeObjectRelease(v23);
      return;
    }
  }

  if ((v13 & 0xC000000000000001LL) != 0)
  {
    specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v13);
    goto LABEL_6;
  }

  if (*(void *)((v13 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
    swift_retain(*(void *)(v13 + 32));
    goto LABEL_6;
  }

  __break(1u);
}

void *sub_1004E8F70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = sub_1003F5CB4((uint64_t *)&unk_1009BC2A0);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v15, v16);
  uint64_t v18 = &v21[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v25 = a5;
  uint64_t v26 = a1;
  uint64_t v27 = a2;
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v31 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution(0LL);
  Predicate.init(_:)(sub_10050D620, v24, 1LL, &v31);
  __n128 v30 = _swiftEmptyArrayStorage;
  uint64_t v22 = &v30;
  uint64_t v23 = v18;
  (*(void (**)(uint64_t, uint64_t (*)(uint64_t), char *))((swift_isaMask & *v6) + 0xE8LL))( a6,  sub_100513D38,  v21);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v18, v13);
  return v30;
}

uint64_t sub_1004E9208@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  uint64_t v135 = a5;
  uint64_t v136 = a6;
  uint64_t v132 = a4;
  uint64_t v131 = a3;
  uint64_t v146 = a7;
  uint64_t v9 = sub_1003F5CB4(&qword_1009BC5B0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v142 = v9;
  uint64_t v143 = v10;
  __chkstk_darwin(v11, v12);
  uint64_t v139 = (char *)&v114 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_1003F5CB4(&qword_1009BC5B8);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v140 = v14;
  uint64_t v141 = v15;
  __chkstk_darwin(v16, v17);
  uint64_t v137 = (char *)&v114 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = sub_1003F5CB4(&qword_1009BC5C0);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v144 = v19;
  uint64_t v145 = v20;
  __chkstk_darwin(v21, v22);
  uint64_t v138 = (char *)&v114 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v152 = sub_1003F5CB4(&qword_1009BC410);
  uint64_t v126 = *(void *)(v152 - 8);
  __chkstk_darwin(v24, v25);
  uint64_t v151 = (char *)&v114 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v123 = sub_1003F5CB4(&qword_1009BC6C0);
  uint64_t v125 = *(void *)(v123 - 8);
  __chkstk_darwin(v27, v28);
  unint64_t v119 = (char *)&v114 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v127 = sub_1003F5CB4(&qword_1009BC9D8);
  uint64_t v128 = *(void *)(v127 - 8);
  __chkstk_darwin(v30, v31);
  uint64_t v122 = (char *)&v114 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v33 = sub_1003F5CB4(&qword_1009BC5C8);
  uint64_t v34 = *(void *)(v33 - 8);
  __chkstk_darwin(v35, v36);
  uint64_t v38 = (char *)&v114 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v117 = sub_1003F5CB4(&qword_1009BC5D0);
  uint64_t v118 = *(void *)(v117 - 8);
  __chkstk_darwin(v39, v40);
  uint64_t v42 = (char *)&v114 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v115 = sub_1003F5CB4(&qword_1009BC5D8);
  uint64_t v116 = *(void *)(v115 - 8);
  __chkstk_darwin(v43, v44);
  uint64_t v46 = (char *)&v114 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v120 = sub_1003F5CB4(&qword_1009BC5E0);
  uint64_t v121 = *(void *)(v120 - 8);
  __chkstk_darwin(v47, v48);
  uint64_t v150 = (char *)&v114 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v129 = sub_1003F5CB4(&qword_1009BCAF8);
  uint64_t v130 = *(void *)(v129 - 8);
  __chkstk_darwin(v50, v51);
  uint64_t v149 = (char *)&v114 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v133 = sub_1003F5CB4(&qword_1009BCB00);
  uint64_t v134 = *(void *)(v133 - 8);
  __chkstk_darwin(v53, v54);
  uint64_t v124 = (char *)&v114 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v56 = *a1;
  uint64_t v148 = v56;
  uint64_t v153 = a2;
  uint64_t v57 = sub_1003F5CB4(&qword_1009BC5F0);
  static PredicateExpressions.build_Arg<A>(_:)(&v153, v57);
  uint64_t v58 = sub_10047E23C( &qword_1009BC5F8,  &qword_1009BC5C8,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Variable<A>);
  uint64_t v114 = v58;
  static PredicateExpressions.build_Arg<A>(_:)(v56, v33, v58);
  uint64_t KeyPath = swift_getKeyPath(&unk_10071D7B8);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v38, KeyPath, v33, v58);
  swift_release(KeyPath);
  uint64_t v60 = *(void (**)(char *, uint64_t))(v34 + 8);
  v60(v38, v33);
  uint64_t v147 = v60;
  uint64_t v61 = sub_10047E23C( &qword_1009BC600,  &qword_1009BC5D8,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Value<A>);
  uint64_t v62 = sub_10047E23C( &qword_1009BC608,  &qword_1009BC5D0,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.KeyPath<A, B>);
  uint64_t v63 = sub_10047E23C(&qword_1009BC610, &qword_1009BC5F0, (uint64_t)&protocol conformance descriptor for [A]);
  unint64_t v64 = sub_100510F48();
  uint64_t v65 = v46;
  uint64_t v66 = v46;
  uint64_t v67 = v42;
  uint64_t v68 = v42;
  uint64_t v69 = v115;
  uint64_t v70 = v117;
  static PredicateExpressions.build_contains<A, B>(_:_:)(v66, v68, v115, v117, v61, v62, v63, v64);
  (*(void (**)(char *, uint64_t))(v118 + 8))(v67, v70);
  (*(void (**)(char *, uint64_t))(v116 + 8))(v65, v69);
  uint64_t v71 = v114;
  static PredicateExpressions.build_Arg<A>(_:)(v148, v33, v114);
  uint64_t v72 = swift_getKeyPath(&unk_10071D830);
  uint64_t v73 = v119;
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v38, v72, v33, v71);
  swift_release(v72);
  v60(v38, v33);
  uint64_t v153 = v131;
  uint64_t v154 = v132;
  uint64_t v74 = v151;
  static PredicateExpressions.build_Arg<A>(_:)(&v153, &type metadata for String);
  uint64_t v75 = sub_10047E23C( &qword_1009BC6F8,  &qword_1009BC6C0,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.KeyPath<A, B>);
  uint64_t v132 = v75;
  uint64_t v131 = sub_10047E23C( &qword_1009BC460,  &qword_1009BC410,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Value<A>);
  uint64_t v76 = v122;
  uint64_t v77 = v73;
  uint64_t v78 = v73;
  uint64_t v79 = v123;
  uint64_t v80 = v152;
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)( v78,  v74,  v123,  v152,  v75,  v131,  &protocol witness table for String);
  uint64_t v126 = *(void *)(v126 + 8);
  ((void (*)(char *, uint64_t))v126)(v74, v80);
  uint64_t v125 = *(void *)(v125 + 8);
  uint64_t v81 = v77;
  ((void (*)(char *, uint64_t))v125)(v77, v79);
  uint64_t v82 = sub_10047E23C( &qword_1009BC630,  &qword_1009BC5E0,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.SequenceContains<A, B>);
  uint64_t v118 = sub_10047E23C( &qword_1009BC9E8,  &qword_1009BC9D8,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Equal<A, B>);
  uint64_t v83 = v150;
  uint64_t v84 = v120;
  uint64_t v85 = v127;
  static PredicateExpressions.build_Conjunction<A, B>(lhs:rhs:)(v150, v76, v120, v127, v82, v118);
  uint64_t v128 = *(void *)(v128 + 8);
  ((void (*)(char *, uint64_t))v128)(v76, v85);
  (*(void (**)(char *, uint64_t))(v121 + 8))(v83, v84);
  uint64_t v86 = v148;
  uint64_t v87 = v71;
  static PredicateExpressions.build_Arg<A>(_:)(v148, v33, v71);
  uint64_t v88 = swift_getKeyPath(&unk_10071D858);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v38, v88, v33, v71);
  swift_release(v88);
  v147(v38, v33);
  uint64_t v153 = v135;
  uint64_t v154 = v136;
  uint64_t v89 = v151;
  static PredicateExpressions.build_Arg<A>(_:)(&v153, &type metadata for String);
  uint64_t v90 = v152;
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)( v81,  v89,  v79,  v152,  v132,  v131,  &protocol witness table for String);
  ((void (*)(char *, uint64_t))v126)(v89, v90);
  ((void (*)(char *, uint64_t))v125)(v81, v79);
  uint64_t v91 = sub_10047E23C( &qword_1009BCB08,  &qword_1009BCAF8,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Conjunction<A, B>);
  uint64_t v92 = v124;
  uint64_t v93 = v149;
  uint64_t v94 = v129;
  static PredicateExpressions.build_Conjunction<A, B>(lhs:rhs:)(v149, v76, v129, v85, v91, v118);
  ((void (*)(char *, uint64_t))v128)(v76, v85);
  (*(void (**)(char *, uint64_t))(v130 + 8))(v93, v94);
  static PredicateExpressions.build_Arg<A>(_:)(v86, v33, v87);
  uint64_t v95 = swift_getKeyPath(&unk_10071D7E0);
  uint64_t v96 = v137;
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v38, v95, v33, v87);
  swift_release(v95);
  v147(v38, v33);
  LOBYTE(v15sub_10040A648(v1 + 3) = 1;
  uint64_t v97 = v139;
  static PredicateExpressions.build_Arg<A>(_:)(&v153, &type metadata for Bool);
  uint64_t v98 = sub_10047E23C( &qword_1009BC620,  &qword_1009BC5B8,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.KeyPath<A, B>);
  uint64_t v99 = sub_10047E23C( &qword_1009BC628,  &qword_1009BC5B0,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Value<A>);
  uint64_t v100 = v138;
  uint64_t v101 = v97;
  uint64_t v102 = v97;
  uint64_t v103 = v140;
  uint64_t v104 = v142;
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)( v96,  v101,  v140,  v142,  v98,  v99,  &protocol witness table for Bool);
  (*(void (**)(char *, uint64_t))(v143 + 8))(v102, v104);
  (*(void (**)(char *, uint64_t))(v141 + 8))(v96, v103);
  uint64_t v105 = sub_1003F5CB4(&qword_1009BCB10);
  uint64_t v106 = v146;
  v146[3] = v105;
  v106[4] = sub_1005128E0();
  sub_10040B2A8(v106);
  uint64_t v107 = sub_10047E23C( &qword_1009BCB30,  &qword_1009BCB00,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Conjunction<A, B>);
  uint64_t v108 = sub_10047E23C( &qword_1009BC638,  &qword_1009BC5C0,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Equal<A, B>);
  uint64_t v109 = v92;
  uint64_t v110 = v92;
  uint64_t v111 = v133;
  uint64_t v112 = v144;
  static PredicateExpressions.build_Conjunction<A, B>(lhs:rhs:)(v110, v100, v133, v144, v107, v108);
  (*(void (**)(char *, uint64_t))(v145 + 8))(v100, v112);
  return (*(uint64_t (**)(char *, uint64_t))(v134 + 8))(v109, v111);
}

void *sub_1004E9C70(uint64_t a1, uint64_t a2)
{
  __n128 v5 = &_swiftEmptySetSingleton;
  v4[3] = a1;
  void v4[4] = a2;
  void v4[5] = &v5;
  (*(void (**)(void, void (*)(uint64_t), void *))((swift_isaMask & *v2) + 0xE8LL))( 0LL,  sub_10050D62C,  v4);
  return v5;
}

uint64_t sub_1004E9CDC(void *a1, void *a2)
{
  uint64_t v5 = sub_1003F5CB4((uint64_t *)&unk_1009BC2A0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = &v21[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  id v11 = [a1 prefixedURI];
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  uint64_t v14 = v13;

  id v15 = [a2 prefixedURI];
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  uint64_t v18 = v17;

  uint64_t v25 = v16;
  uint64_t v26 = v18;
  uint64_t v27 = v12;
  uint64_t v28 = v14;
  uint64_t v30 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution(0LL);
  Predicate.init(_:)(sub_10050D848, v24, 1LL, &v30);
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(v18);
  unsigned __int8 v29 = 0;
  __n128 v22 = v10;
  uint64_t v23 = &v29;
  (*(void (**)(void, uint64_t (*)(uint64_t), char *))((swift_isaMask & *v2) + 0xE8LL))( 0LL,  sub_10050D868,  v21);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
  return v29;
}

uint64_t sub_1004E9F94@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, void *a7@<X8>)
{
  int v101 = a6;
  uint64_t v93 = a4;
  uint64_t v94 = a5;
  uint64_t v89 = a3;
  uint64_t v90 = a2;
  uint64_t v107 = a7;
  uint64_t v8 = sub_1003F5CB4(&qword_1009BC5B0);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v103 = v8;
  uint64_t v104 = v9;
  __chkstk_darwin(v10, v11);
  uint64_t v99 = (char *)&v81 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v100 = sub_1003F5CB4(&qword_1009BC5B8);
  uint64_t v102 = *(void *)(v100 - 8);
  __chkstk_darwin(v13, v14);
  uint64_t v95 = (char *)&v81 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_1003F5CB4(&qword_1009BC5C0);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v105 = v16;
  uint64_t v106 = v17;
  __chkstk_darwin(v18, v19);
  uint64_t v98 = (char *)&v81 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v86 = sub_1003F5CB4(&qword_1009BC410);
  uint64_t v88 = *(void *)(v86 - 8);
  __chkstk_darwin(v21, v22);
  __n128 v24 = (char *)&v81 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = sub_1003F5CB4(&qword_1009BC5C8);
  uint64_t v26 = *(void *)(v25 - 8);
  __chkstk_darwin(v27, v28);
  uint64_t v30 = (char *)&v81 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v108 = sub_1003F5CB4(&qword_1009BC6C0);
  uint64_t v82 = *(void *)(v108 - 8);
  __chkstk_darwin(v31, v32);
  uint64_t v34 = (char *)&v81 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v35 = sub_1003F5CB4(&qword_1009BC9D8);
  uint64_t v36 = *(void *)(v35 - 8);
  uint64_t v91 = v35;
  uint64_t v92 = v36;
  __chkstk_darwin(v37, v38);
  uint64_t v85 = (char *)&v81 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v40, v41);
  uint64_t v84 = (char *)&v81 - v42;
  uint64_t v43 = sub_1003F5CB4(&qword_1009BC9E0);
  uint64_t v44 = *(void *)(v43 - 8);
  uint64_t v96 = v43;
  uint64_t v97 = v44;
  __chkstk_darwin(v45, v46);
  uint64_t v87 = (char *)&v81 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v48 = *a1;
  uint64_t v49 = sub_10047E23C( &qword_1009BC5F8,  &qword_1009BC5C8,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Variable<A>);
  uint64_t v83 = v48;
  static PredicateExpressions.build_Arg<A>(_:)(v48, v25, v49);
  uint64_t KeyPath = swift_getKeyPath(&unk_10071D830);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v30, KeyPath, v25, v49);
  swift_release(KeyPath);
  uint64_t v109 = *(void (**)(char *, uint64_t))(v26 + 8);
  v109(v30, v25);
  uint64_t v110 = v90;
  uint64_t v111 = v89;
  static PredicateExpressions.build_Arg<A>(_:)(&v110, &type metadata for String);
  uint64_t v51 = sub_10047E23C( &qword_1009BC6F8,  &qword_1009BC6C0,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.KeyPath<A, B>);
  uint64_t v90 = v51;
  uint64_t v89 = sub_10047E23C( &qword_1009BC460,  &qword_1009BC410,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Value<A>);
  uint64_t v52 = v108;
  uint64_t v53 = v86;
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)( v34,  v24,  v108,  v86,  v51,  v89,  &protocol witness table for String);
  __n128 v54 = *(void (**)(char *, uint64_t))(v88 + 8);
  v54(v24, v53);
  uint64_t v55 = *(void (**)(char *, uint64_t))(v82 + 8);
  v55(v34, v52);
  static PredicateExpressions.build_Arg<A>(_:)(v48, v25, v49);
  uint64_t v56 = swift_getKeyPath(&unk_10071D858);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v30, v56, v25, v49);
  swift_release(v56);
  v109(v30, v25);
  uint64_t v110 = v93;
  uint64_t v111 = v94;
  static PredicateExpressions.build_Arg<A>(_:)(&v110, &type metadata for String);
  uint64_t v57 = v85;
  uint64_t v58 = v108;
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)( v34,  v24,  v108,  v53,  v90,  v89,  &protocol witness table for String);
  v54(v24, v53);
  v55(v34, v58);
  uint64_t v59 = sub_10047E23C( &qword_1009BC9E8,  &qword_1009BC9D8,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Equal<A, B>);
  uint64_t v60 = v87;
  uint64_t v61 = v84;
  uint64_t v62 = v91;
  static PredicateExpressions.build_Conjunction<A, B>(lhs:rhs:)(v84, v57, v91, v91, v59, v59);
  uint64_t v63 = *(void (**)(char *, uint64_t))(v92 + 8);
  v63(v57, v62);
  v63(v61, v62);
  static PredicateExpressions.build_Arg<A>(_:)(v83, v25, v49);
  uint64_t v64 = swift_getKeyPath(&unk_10071D7E0);
  uint64_t v65 = v95;
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v30, v64, v25, v49);
  swift_release(v64);
  v109(v30, v25);
  LOBYTE(v110) = v101;
  uint64_t v66 = v99;
  static PredicateExpressions.build_Arg<A>(_:)(&v110, &type metadata for Bool);
  uint64_t v67 = sub_10047E23C( &qword_1009BC620,  &qword_1009BC5B8,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.KeyPath<A, B>);
  uint64_t v68 = sub_10047E23C( &qword_1009BC628,  &qword_1009BC5B0,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Value<A>);
  uint64_t v69 = v98;
  uint64_t v70 = v66;
  uint64_t v71 = v66;
  uint64_t v72 = v100;
  uint64_t v73 = v103;
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)( v65,  v70,  v100,  v103,  v67,  v68,  &protocol witness table for Bool);
  (*(void (**)(char *, uint64_t))(v104 + 8))(v71, v73);
  (*(void (**)(char *, uint64_t))(v102 + 8))(v65, v72);
  uint64_t v74 = sub_1003F5CB4(&qword_1009BC9F0);
  uint64_t v75 = v107;
  v107[3] = v74;
  v75[4] = sub_100511D78();
  sub_10040B2A8(v75);
  uint64_t v76 = sub_10047E23C( &qword_1009BCA10,  &qword_1009BC9E0,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Conjunction<A, B>);
  uint64_t v77 = sub_10047E23C( &qword_1009BC638,  &qword_1009BC5C0,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Equal<A, B>);
  uint64_t v78 = v96;
  uint64_t v79 = v105;
  static PredicateExpressions.build_Conjunction<A, B>(lhs:rhs:)(v60, v69, v96, v105, v76, v77);
  (*(void (**)(char *, uint64_t))(v106 + 8))(v69, v79);
  return (*(uint64_t (**)(char *, uint64_t))(v97 + 8))(v60, v78);
}

uint64_t sub_1004EA68C(uint64_t a1, uint64_t a2, BOOL *a3)
{
  __n128 v22 = a3;
  sub_1003F5CB4((uint64_t *)&unk_1009BC5A0);
  __chkstk_darwin(v5, v6);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_1003F5CB4(&qword_1009BC6B8);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v11, v12);
  __n128 v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_1003F5CB4((uint64_t *)&unk_1009BC2A0);
  uint64_t v16 = *(void *)(v15 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v8, a2, v15);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v8, 0LL, 1LL, v15);
  uint64_t v17 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution(0LL);
  uint64_t v18 = sub_10040A2B0( &qword_1009B9FC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A4A4);
  FetchDescriptor.init(predicate:sortBy:)(v8, _swiftEmptyArrayStorage, v17, v18);
  uint64_t v19 = dispatch thunk of ModelContext.fetchCount<A>(_:)(v14, v17, v18);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v14, v9);
  if (!v3) {
    *__n128 v22 = v19 > 0;
  }
  return result;
}

void *sub_1004EA818(void *a1, void *a2)
{
  uint64_t v5 = sub_1003F5CB4((uint64_t *)&unk_1009BC2A0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = &v21[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  id v11 = [a1 prefixedURI];
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  uint64_t v14 = v13;

  id v15 = [a2 prefixedURI];
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  uint64_t v18 = v17;

  uint64_t v25 = v12;
  uint64_t v26 = v14;
  uint64_t v27 = v16;
  uint64_t v28 = v18;
  uint64_t v30 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution(0LL);
  Predicate.init(_:)(sub_10050D880, v24, 1LL, &v30);
  swift_bridgeObjectRelease(v18);
  swift_bridgeObjectRelease(v14);
  uint64_t v29 = _swiftEmptyArrayStorage;
  __n128 v22 = v10;
  uint64_t v23 = &v29;
  (*(void (**)(void, void (*)(uint64_t), char *))((swift_isaMask & *v2) + 0xE8LL))( 0LL,  sub_10050D88C,  v21);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
  return v29;
}

uint64_t sub_1004EAAD8@<X0>( uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v101 = a5;
  uint64_t v100 = a4;
  uint64_t v97 = a3;
  uint64_t v96 = a2;
  uint64_t v113 = a6;
  uint64_t v108 = sub_1003F5CB4(&qword_1009BC5B0);
  uint64_t v110 = *(void *)(v108 - 8);
  __chkstk_darwin(v7, v8);
  uint64_t v117 = (char *)&v89 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_1003F5CB4(&qword_1009BC5B8);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v106 = v10;
  uint64_t v107 = v11;
  __chkstk_darwin(v12, v13);
  uint64_t v104 = (char *)&v89 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v119 = sub_1003F5CB4(&qword_1009BC5C0);
  uint64_t v111 = *(void *)(v119 - 8);
  __chkstk_darwin(v15, v16);
  uint64_t v105 = (char *)&v89 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v93 = sub_1003F5CB4(&qword_1009BC410);
  uint64_t v95 = *(void *)(v93 - 8);
  __chkstk_darwin(v18, v19);
  uint64_t v90 = (char *)&v89 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = sub_1003F5CB4(&qword_1009BC5C8);
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v23, v24);
  uint64_t v26 = (char *)&v89 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v91 = sub_1003F5CB4(&qword_1009BC6C0);
  uint64_t v27 = *(void *)(v91 - 8);
  __chkstk_darwin(v28, v29);
  __n128 v31 = (char *)&v89 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v98 = sub_1003F5CB4(&qword_1009BC9D8);
  uint64_t v99 = *(void *)(v98 - 8);
  __chkstk_darwin(v32, v33);
  uint64_t v92 = (char *)&v89 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v35, v36);
  uint64_t v89 = (char *)&v89 - v37;
  uint64_t v38 = sub_1003F5CB4(&qword_1009BC9E0);
  uint64_t v39 = *(void *)(v38 - 8);
  uint64_t v102 = v38;
  uint64_t v103 = v39;
  __chkstk_darwin(v40, v41);
  uint64_t v94 = (char *)&v89 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v109 = sub_1003F5CB4(&qword_1009BC9F0);
  uint64_t v112 = *(void *)(v109 - 8);
  __chkstk_darwin(v43, v44);
  uint64_t v118 = (char *)&v89 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v46 = *a1;
  uint64_t v47 = sub_10047E23C( &qword_1009BC5F8,  &qword_1009BC5C8,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Variable<A>);
  uint64_t v116 = v46;
  static PredicateExpressions.build_Arg<A>(_:)(v46, v21, v47);
  uint64_t KeyPath = swift_getKeyPath(&unk_10071D830);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v26, KeyPath, v21, v47);
  swift_release(KeyPath);
  uint64_t v115 = *(void (**)(char *, uint64_t))(v22 + 8);
  v115(v26, v21);
  uint64_t v120 = v96;
  uint64_t v121 = v97;
  uint64_t v49 = v90;
  static PredicateExpressions.build_Arg<A>(_:)(&v120, &type metadata for String);
  uint64_t v50 = sub_10047E23C( &qword_1009BC6F8,  &qword_1009BC6C0,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.KeyPath<A, B>);
  uint64_t v97 = v50;
  uint64_t v96 = sub_10047E23C( &qword_1009BC460,  &qword_1009BC410,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Value<A>);
  uint64_t v51 = v91;
  uint64_t v52 = v93;
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)( v31,  v49,  v91,  v93,  v50,  v96,  &protocol witness table for String);
  uint64_t v53 = *(void (**)(char *, uint64_t))(v95 + 8);
  v53(v49, v52);
  __n128 v54 = *(void (**)(char *, uint64_t))(v27 + 8);
  v54(v31, v51);
  uint64_t v114 = v47;
  static PredicateExpressions.build_Arg<A>(_:)(v46, v21, v47);
  uint64_t v55 = swift_getKeyPath(&unk_10071D858);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v26, v55, v21, v47);
  swift_release(v55);
  uint64_t v56 = v115;
  v115(v26, v21);
  uint64_t v120 = v100;
  uint64_t v121 = v101;
  uint64_t v57 = v49;
  static PredicateExpressions.build_Arg<A>(_:)(&v120, &type metadata for String);
  uint64_t v58 = v92;
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)( v31,  v57,  v51,  v52,  v97,  v96,  &protocol witness table for String);
  v53(v57, v52);
  v54(v31, v51);
  uint64_t v59 = sub_10047E23C( &qword_1009BC9E8,  &qword_1009BC9D8,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Equal<A, B>);
  uint64_t v60 = v94;
  uint64_t v61 = v89;
  uint64_t v62 = v98;
  static PredicateExpressions.build_Conjunction<A, B>(lhs:rhs:)(v89, v58, v98, v98, v59, v59);
  uint64_t v63 = *(void (**)(char *, uint64_t))(v99 + 8);
  v63(v58, v62);
  v63(v61, v62);
  uint64_t v64 = v114;
  static PredicateExpressions.build_Arg<A>(_:)(v116, v21, v114);
  uint64_t v65 = swift_getKeyPath(&unk_10071D808);
  uint64_t v66 = v104;
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v26, v65, v21, v64);
  swift_release(v65);
  v56(v26, v21);
  LOBYTE(v120) = 0;
  uint64_t v67 = v117;
  static PredicateExpressions.build_Arg<A>(_:)(&v120, &type metadata for Bool);
  uint64_t v68 = sub_10047E23C( &qword_1009BC620,  &qword_1009BC5B8,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.KeyPath<A, B>);
  uint64_t v101 = v68;
  uint64_t v100 = sub_10047E23C( &qword_1009BC628,  &qword_1009BC5B0,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Value<A>);
  uint64_t v69 = v105;
  uint64_t v70 = v106;
  uint64_t v71 = v108;
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)( v66,  v67,  v106,  v108,  v68,  v100,  &protocol witness table for Bool);
  uint64_t v99 = *(void *)(v110 + 8);
  ((void (*)(char *, uint64_t))v99)(v67, v71);
  uint64_t v107 = *(void *)(v107 + 8);
  ((void (*)(char *, uint64_t))v107)(v66, v70);
  uint64_t v72 = sub_10047E23C( &qword_1009BCA10,  &qword_1009BC9E0,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Conjunction<A, B>);
  uint64_t v110 = sub_10047E23C( &qword_1009BC638,  &qword_1009BC5C0,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Equal<A, B>);
  uint64_t v73 = v119;
  uint64_t v74 = v69;
  uint64_t v75 = v69;
  uint64_t v76 = v102;
  static PredicateExpressions.build_Conjunction<A, B>(lhs:rhs:)(v60, v74, v102, v119, v72, v110);
  uint64_t v77 = *(void (**)(char *, uint64_t))(v111 + 8);
  v77(v75, v73);
  uint64_t v78 = v77;
  (*(void (**)(char *, uint64_t))(v103 + 8))(v60, v76);
  uint64_t v79 = v114;
  static PredicateExpressions.build_Arg<A>(_:)(v116, v21, v114);
  uint64_t v80 = swift_getKeyPath(&unk_10071D7E0);
  static PredicateExpressions.build_KeyPath<A, B>(root:keyPath:)(v26, v80, v21, v79);
  swift_release(v80);
  v115(v26, v21);
  LOBYTE(v120) = 1;
  uint64_t v81 = v117;
  static PredicateExpressions.build_Arg<A>(_:)(&v120, &type metadata for Bool);
  static PredicateExpressions.build_Equal<A, B>(lhs:rhs:)( v66,  v81,  v70,  v71,  v101,  v100,  &protocol witness table for Bool);
  ((void (*)(char *, uint64_t))v99)(v81, v71);
  ((void (*)(char *, uint64_t))v107)(v66, v70);
  uint64_t v82 = sub_1003F5CB4(&qword_1009BCAE8);
  uint64_t v83 = v113;
  v113[3] = v82;
  void v83[4] = sub_100512874();
  sub_10040B2A8(v83);
  uint64_t v84 = sub_10047E23C( &qword_1009BCA58,  &qword_1009BC9F0,  (uint64_t)&protocol conformance descriptor for PredicateExpressions.Conjunction<A, B>);
  uint64_t v86 = v118;
  uint64_t v85 = v119;
  uint64_t v87 = v109;
  static PredicateExpressions.build_Conjunction<A, B>(lhs:rhs:)(v118, v75, v109, v119, v84, v110);
  v78(v75, v85);
  return (*(uint64_t (**)(char *, uint64_t))(v112 + 8))(v86, v87);
}

void sub_1004EB374(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v70 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1003F5CB4((uint64_t *)&unk_1009BAC20);
  __chkstk_darwin(v8, v9);
  uint64_t v68 = (uint64_t *)((char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v11 = type metadata accessor for SenderKeyInfo(0LL);
  uint64_t v66 = *(void *)(v11 - 8);
  uint64_t v67 = v11;
  __chkstk_darwin(v12, v13);
  uint64_t v69 = (uint64_t)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15, v16);
  uint64_t v61 = (uint64_t)&v60 - v17;
  sub_1003F5CB4((uint64_t *)&unk_1009BC5A0);
  __chkstk_darwin(v18, v19);
  uint64_t v21 = (char *)&v60 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = sub_1003F5CB4(&qword_1009BC6B8);
  uint64_t v23 = *(void *)(v22 - 8);
  __chkstk_darwin(v24, v25);
  uint64_t v27 = (char *)&v60 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = sub_1003F5CB4((uint64_t *)&unk_1009BC2A0);
  uint64_t v29 = *(void *)(v28 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v21, a2, v28);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v21, 0LL, 1LL, v28);
  uint64_t v30 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution(0LL);
  uint64_t v31 = sub_10040A2B0( &qword_1009B9FC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A4A4);
  FetchDescriptor.init(predicate:sortBy:)(v21, _swiftEmptyArrayStorage, v30, v31);
  __n128 v32 = v65;
  uint64_t v33 = dispatch thunk of ModelContext.fetch<A>(_:)(v27, v30, v31);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v27, v22);
  if (!v32)
  {
    if ((unint64_t)v33 >> 62)
    {
      if (v33 < 0) {
        uint64_t v59 = v33;
      }
      else {
        uint64_t v59 = v33 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v33);
      uint64_t v34 = _CocoaArrayWrapper.endIndex.getter(v59);
    }

    else
    {
      uint64_t v34 = *(void *)((v33 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      swift_bridgeObjectRetain(v33);
    }

    __n128 v35 = v70;
    uint64_t v60 = 0LL;
    if (v34)
    {
      if (v34 < 1)
      {
        __break(1u);
        return;
      }

      uint64_t v36 = 0LL;
      unint64_t v63 = v33 & 0xC000000000000001LL;
      uint64_t v37 = _swiftEmptyArrayStorage;
      uint64_t v64 = v34;
      uint64_t v65 = a3;
      uint64_t v62 = v33;
      do
      {
        if (v63)
        {
          uint64_t v38 = specialized _ArrayBuffer._getElementSlowPath(_:)(v36, v33);
        }

        else
        {
          uint64_t v38 = *(void *)(v33 + 8 * v36 + 32);
          swift_retain(v38);
        }

        uint64_t v39 = sub_100446720();
        uint64_t v41 = v40;
        uint64_t v42 = sub_100446490();
        uint64_t v44 = v43;
        sub_100447148(v35);
        uint64_t v45 = sub_1004469B0();
        sub_100446C34();
        __n128 v35 = v70;
        uint64_t v46 = nullsub_36(v45);
        uint64_t v47 = v68;
        sub_10046BDE8(v39, v41, v42, v44, (uint64_t)v35, v46, v48, v49, v68, v50);
        uint64_t v52 = v66;
        uint64_t v51 = v67;
        (*(void (**)(void *, void, uint64_t, uint64_t))(v66 + 56))(v47, 0LL, 1LL, v67);
        swift_release(v38);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v52 + 48))(v47, 1LL, v51) == 1)
        {
          sub_10040A274((uint64_t)v47, (uint64_t *)&unk_1009BAC20);
          a3 = v65;
          uint64_t v33 = v62;
        }

        else
        {
          uint64_t v53 = v61;
          sub_1003F600C((uint64_t)v47, v61, type metadata accessor for SenderKeyInfo);
          sub_1003F600C(v53, v69, type metadata accessor for SenderKeyInfo);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v37);
          a3 = v65;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            uint64_t v37 = (void *)sub_100503C28( 0,  v37[2] + 1LL,  1,  (unint64_t)v37,  (uint64_t *)&unk_1009BB0F0,  type metadata accessor for SenderKeyInfo);
          }
          uint64_t v33 = v62;
          unint64_t v56 = v37[2];
          unint64_t v55 = v37[3];
          uint64_t v57 = v69;
          if (v56 >= v55 >> 1)
          {
            uint64_t v37 = (void *)sub_100503C28( v55 > 1,  v56 + 1,  1,  (unint64_t)v37,  (uint64_t *)&unk_1009BB0F0,  type metadata accessor for SenderKeyInfo);
            uint64_t v57 = v69;
          }

          v37[2] = v56 + 1;
          sub_1003F600C( v57,  (uint64_t)v37 + ((*(unsigned __int8 *)(v52 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80))
          + *(void *)(v52 + 72) * v56,
            type metadata accessor for SenderKeyInfo);
        }

        ++v36;
      }

      while (v64 != v36);
    }

    else
    {
      uint64_t v37 = _swiftEmptyArrayStorage;
    }

    swift_bridgeObjectRelease_n(v33, 2LL);
    uint64_t v58 = *a3;
    *a3 = v37;
    swift_bridgeObjectRelease(v58);
  }

uint64_t sub_1004EB850(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v27 = a2;
  uint64_t v28 = a3;
  uint64_t v26 = a1;
  sub_1003F5CB4((uint64_t *)&unk_1009BAC60);
  __chkstk_darwin(v10, v11);
  __n128 v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14, v15);
  uint64_t v17 = (char *)&v25 - v16;
  __chkstk_darwin(v18, v19);
  uint64_t v21 = (char *)&v25 - v20;
  uint64_t v22 = type metadata accessor for SenderKeyAndState(0LL);
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56LL);
  v23(v21, 1LL, 1LL, v22);
  v23(v17, 1LL, 1LL, v22);
  v23(v13, 1LL, 1LL, v22);
  uint64_t v30 = v6;
  uint64_t v31 = a4;
  uint64_t v32 = a5;
  uint64_t v33 = a6;
  uint64_t v34 = v13;
  __n128 v35 = v21;
  uint64_t v36 = v17;
  (*(void (**)(void, uint64_t (*)(os_log_s *), _BYTE *))((swift_isaMask & *v6) + 0xE8LL))( 0LL,  sub_10050D8A4,  v29);
  sub_100410FD0((uint64_t)v21, v26, (uint64_t *)&unk_1009BAC60);
  sub_100410FD0((uint64_t)v17, v27, (uint64_t *)&unk_1009BAC60);
  sub_10041D378((uint64_t)v13, v28, (uint64_t *)&unk_1009BAC60);
  sub_10040A274((uint64_t)v17, (uint64_t *)&unk_1009BAC60);
  return sub_10040A274((uint64_t)v21, (uint64_t *)&unk_1009BAC60);
}

uint64_t sub_1004EB9F0( os_log_s *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v399 = a8;
  uint64_t v395 = a7;
  uint64_t v370 = a6;
  uint64_t v404 = (uint64_t)a1;
  type metadata accessor for SenderKeyInfo(0LL);
  __chkstk_darwin(v12, v13);
  v382 = (uint64_t *)((char *)&v368 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_1003F5CB4((uint64_t *)&unk_1009BAC60);
  __chkstk_darwin(v15, v16);
  v394 = (char *)&v368 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18, v19);
  uint64_t v383 = (uint64_t)&v368 - v20;
  __chkstk_darwin(v21, v22);
  uint64_t v393 = (uint64_t)&v368 - v23;
  __chkstk_darwin(v24, v25);
  uint64_t v392 = (uint64_t)&v368 - v26;
  __chkstk_darwin(v27, v28);
  uint64_t v378 = (uint64_t)&v368 - v29;
  __chkstk_darwin(v30, v31);
  uint64_t v381 = (uint64_t)&v368 - v32;
  sub_1003F5CB4(&qword_1009BC130);
  __chkstk_darwin(v33, v34);
  v373 = (uint64_t *)((char *)&v368 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v36, v37);
  v390 = (uint64_t *)((char *)&v368 - v38);
  __chkstk_darwin(v39, v40);
  uint64_t v385 = (uint64_t)&v368 - v41;
  __chkstk_darwin(v42, v43);
  uint64_t v406 = (uint64_t)&v368 - v44;
  uint64_t v45 = type metadata accessor for Date(0LL);
  uint64_t v397 = *(void *)(v45 - 8);
  uint64_t v398 = v45;
  __chkstk_darwin(v46, v47);
  v369 = (char *)&v368 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v49, v50);
  v372 = (char *)&v368 - v51;
  __chkstk_darwin(v52, v53);
  v374 = (char *)&v368 - v54;
  __chkstk_darwin(v55, v56);
  v380 = (char *)&v368 - v57;
  __chkstk_darwin(v58, v59);
  v377 = (char *)&v368 - v60;
  __chkstk_darwin(v61, v62);
  v384 = (char *)&v368 - v63;
  __chkstk_darwin(v64, v65);
  v387 = (uint64_t *)((char *)&v368 - v66);
  __chkstk_darwin(v67, v68);
  uint64_t v386 = (uint64_t)&v368 - v69;
  __chkstk_darwin(v70, v71);
  v396 = (char *)&v368 - v72;
  sub_1003F5CB4(&qword_1009BCAD0);
  __chkstk_darwin(v73, v74);
  v389 = (uint64_t *)((char *)&v368 - ((v75 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v76, v77);
  uint64_t v79 = (uint64_t)&v368 - v78;
  uint64_t v405 = sub_1003F5CB4(&qword_1009BCAD8);
  uint64_t v403 = *(void *)(v405 - 8);
  __chkstk_darwin(v80, v81);
  uint64_t v388 = (uint64_t)&v368 - ((v82 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v83, v84);
  uint64_t v379 = (uint64_t)&v368 - v85;
  __chkstk_darwin(v86, v87);
  v376 = (char *)&v368 - v88;
  __chkstk_darwin(v89, v90);
  v375 = (char *)&v368 - v91;
  __chkstk_darwin(v92, v93);
  uint64_t v401 = (uint64_t)&v368 - v94;
  __chkstk_darwin(v95, v96);
  unint64_t v391 = (unint64_t)&v368 - v97;
  unint64_t v98 = (unint64_t)&selRef_notePNRSuccess;
  id v99 = [a3 prefixedURI];
  uint64_t v100 = static String._unconditionallyBridgeFromObjectiveC(_:)(v99);
  uint64_t v102 = v101;

  id v103 = [a4 prefixedURI];
  uint64_t v104 = static String._unconditionallyBridgeFromObjectiveC(_:)(v103);
  uint64_t v106 = v105;

  uint64_t v371 = a2;
  uint64_t v107 = (uint64_t)sub_1004E89E0(v100, v102, v104, v106, v404);
  swift_bridgeObjectRelease(v102);
  swift_bridgeObjectRelease(v106);
  *(void *)&__int128 v407 = _swiftEmptyArrayStorage;
  if (!((unint64_t)v107 >> 62))
  {
    uint64_t v108 = *(void *)((v107 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v108) {
      goto LABEL_3;
    }
LABEL_17:
    swift_bridgeObjectRelease(v107);
    unint64_t v113 = (unint64_t)_swiftEmptyArrayStorage;
    goto LABEL_18;
  }

  if (v107 < 0) {
    uint64_t v114 = v107;
  }
  else {
    uint64_t v114 = v107 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v107);
  uint64_t v108 = _CocoaArrayWrapper.endIndex.getter(v114);
  swift_bridgeObjectRelease(v107);
  if (!v108) {
    goto LABEL_17;
  }
LABEL_3:
  if (v108 >= 1)
  {
    uint64_t v100 = 0LL;
    unint64_t v98 = v107 & 0xC000000000000001LL;
    do
    {
      if (v98)
      {
        uint64_t v111 = specialized _ArrayBuffer._getElementSlowPath(_:)(v100, v107);
      }

      else
      {
        uint64_t v111 = *(void *)(v107 + 8 * v100 + 32);
        swift_retain(v111);
      }

      uint64_t v112 = sub_100447A94();
      if ((v112 & 1) != 0)
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v112);
        uint64_t v109 = *(void *)(v407 + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v109);
        uint64_t v110 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v109, v111);
        specialized ContiguousArray._endMutation()(v110);
      }

      else
      {
        swift_release(v111);
      }

      ++v100;
    }

    while (v108 != v100);
    swift_bridgeObjectRelease(v107);
    unint64_t v113 = v407;
LABEL_18:
    swift_bridgeObjectRetain(v113);
    if ((v113 & 0x8000000000000000LL) != 0) {
      goto LABEL_147;
    }
    uint64_t v115 = (void *)v113;
    if ((v113 & 0x4000000000000000LL) != 0) {
      goto LABEL_147;
    }
    goto LABEL_20;
  }

  __break(1u);
LABEL_149:
  uint64_t v362 = swift_retain(v106);
  uint64_t v122 = _CocoaArrayWrapper.endIndex.getter(v362);
  while (2)
  {
    unint64_t v113 = (unint64_t)v394;
    v396 = (char *)v122;
    if (!v122)
    {
LABEL_66:
      swift_release(v106);
LABEL_67:
      sub_100410FD0(v395, v113, (uint64_t *)&unk_1009BAC60);
      uint64_t v187 = type metadata accessor for SenderKeyAndState(0LL);
      uint64_t v401 = *(void *)(v187 - 8);
      if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v401 + 48))(v113, 1LL, v187) != 1)
      {
        swift_release(v106);
        sub_10040A274(v113, (uint64_t *)&unk_1009BAC60);
        return swift_bridgeObjectRelease(v409);
      }

      sub_10040A274(v113, (uint64_t *)&unk_1009BAC60);
      unint64_t v98 = (unint64_t)_swiftEmptyArrayStorage;
      unint64_t v400 = v187;
      if (v122)
      {
        uint64_t v402 = v102;
        if (v122 < 1)
        {
LABEL_165:
          __break(1u);
          goto LABEL_166;
        }

        unint64_t v188 = v106 & 0xC000000000000001LL;
        swift_retain(v106);
        int v189 = 0LL;
        uint64_t v190 = _swiftEmptyArrayStorage;
        Swift::Int v191 = &qword_1009BCAD8;
        do
        {
          if (v188)
          {
            uint64_t v192 = specialized _ArrayBuffer._getElementSlowPath(_:)(v189, v404);
          }

          else
          {
            uint64_t v192 = *(void *)(v404 + 8LL * (void)v189 + 32);
            swift_retain(v192);
          }

          uint64_t v193 = (char *)v390;
          sub_100449298((char *)v390);
          uint64_t v195 = v397;
          uint64_t v194 = v398;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v397 + 48))(v193, 1LL, v398) == 1)
          {
            sub_10040A274((uint64_t)v193, &qword_1009BC130);
            uint64_t v196 = v403;
            uint64_t v197 = (uint64_t)v389;
            uint64_t v198 = v405;
            (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v403 + 56))(v389, 1LL, 1LL, v405);
            swift_release(v192);
          }

          else
          {
            uint64_t v199 = *(void (**)(char *, char *, uint64_t))(v195 + 32);
            uint64_t v200 = v191;
            uint64_t v201 = v380;
            v199(v380, v193, v194);
            uint64_t v202 = v405;
            uint64_t v197 = (uint64_t)v389;
            uint64_t v203 = (char *)v389 + *(int *)(v405 + 48);
            uint64_t *v389 = v192;
            uint64_t v204 = v201;
            Swift::Int v191 = v200;
            uint64_t v205 = v194;
            uint64_t v198 = v202;
            v199(v203, v204, v205);
            uint64_t v196 = v403;
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v403 + 56))(v197, 0LL, 1LL, v198);
          }

          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v196 + 48))(v197, 1LL, v198) == 1)
          {
            sub_10040A274(v197, &qword_1009BCAD0);
          }

          else
          {
            uint64_t v206 = v379;
            sub_10041D378(v197, v379, v191);
            sub_10041D378(v206, v388, v191);
            if ((swift_isUniquelyReferenced_nonNull_native(v190) & 1) == 0) {
              uint64_t v190 = (void *)sub_100503A18(0, v190[2] + 1LL, 1, (unint64_t)v190);
            }
            unint64_t v208 = v190[2];
            unint64_t v207 = v190[3];
            uint64_t v209 = v403;
            if (v208 >= v207 >> 1)
            {
              uint64_t v210 = sub_100503A18(v207 > 1, v208 + 1, 1, (unint64_t)v190);
              uint64_t v209 = v403;
              uint64_t v190 = (void *)v210;
            }

            v190[2] = v208 + 1;
            sub_10041D378( v388,  (uint64_t)v190 + ((*(unsigned __int8 *)(v209 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v209 + 80))
            + *(void *)(v209 + 72) * v208,
              v191);
          }

          ++v189;
        }

        while (v396 != v189);
        uint64_t v106 = v404;
        swift_release(v404);
        uint64_t v102 = v402;
      }

      else
      {
        uint64_t v190 = _swiftEmptyArrayStorage;
      }

      swift_release(v106);
      *(void *)&__int128 v407 = v190;
      swift_bridgeObjectRetain(v190);
      sub_1005049D0(&v407);
      if (v102) {
        goto LABEL_169;
      }
      uint64_t v102 = 0LL;
      swift_bridgeObjectRelease(v190);
      v298 = (os_log_s *)v407;
      uint64_t v299 = *(void *)(v407 + 16);
      if (v299)
      {
        uint64_t v402 = 0LL;
        *(void *)&__int128 v407 = _swiftEmptyArrayStorage;
        specialized ContiguousArray.reserveCapacity(_:)(v299);
        uint64_t v300 = *(unsigned __int8 *)(v403 + 80);
        uint64_t v404 = (uint64_t)v298;
        uint64_t v301 = (uint64_t)v298 + ((v300 + 32) & ~v300);
        uint64_t v406 = *(void *)(v403 + 72);
        uint64_t v302 = v397;
        uint64_t v303 = v398;
        v304 = v376;
        v305 = v375;
        do
        {
          sub_100410FD0(v301, (uint64_t)v305, &qword_1009BCAD8);
          uint64_t v306 = *(int *)(v405 + 48);
          v307 = &v304[v306];
          uint64_t v308 = *(void *)v305;
          *(void *)v304 = *(void *)v305;
          (*(void (**)(char *, char *, uint64_t))(v302 + 16))(&v304[v306], &v305[v306], v303);
          swift_retain(v308);
          (*(void (**)(char *, uint64_t))(v302 + 8))(v307, v303);
          uint64_t v309 = sub_10040A274((uint64_t)v305, &qword_1009BCAD8);
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v309);
          uint64_t v310 = *(void *)(v407 + 16);
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v310);
          uint64_t v311 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v310, v308);
          specialized ContiguousArray._endMutation()(v311);
          v301 += v406;
          --v299;
        }

        while (v299);
        uint64_t v122 = v407;
        swift_release(v404);
        uint64_t v102 = v402;
      }

      else
      {
        swift_release(v407);
        uint64_t v122 = (uint64_t)_swiftEmptyArrayStorage;
      }

      uint64_t v100 = v398;
      unint64_t v98 = (unint64_t)v374;
      if ((unint64_t)v122 >> 62)
      {
        if (v122 < 0) {
          uint64_t v366 = v122;
        }
        else {
          uint64_t v366 = v122 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(v122);
        uint64_t v367 = _CocoaArrayWrapper.endIndex.getter(v366);
        swift_bridgeObjectRelease(v122);
        if (!v367) {
          goto LABEL_160;
        }
      }

      else if (!*(void *)((v122 & 0xFFFFFFFFFFFFF8LL) + 0x10))
      {
        goto LABEL_160;
      }

      if ((v122 & 0xC000000000000001LL) != 0)
      {
LABEL_166:
        uint64_t v245 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v122);
LABEL_133:
        swift_bridgeObjectRelease(v122);
        uint64_t v312 = type metadata accessor for SenderKeyDistributionManager(0LL);
        uint64_t v313 = (*(uint64_t (**)(void))(v312 + 792))();
        double v315 = v314;
        v316 = (char *)v387;
        uint64_t v317 = Date.init()(v313);
        Date.addingTimeInterval(_:)(v317, -v315);
        uint64_t v318 = v397;
        uint64_t v253 = *(void (**)(char *, uint64_t))(v397 + 8);
        v253(v316, v100);
        uint64_t v79 = (uint64_t)v373;
        sub_100449298(v373);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v318 + 48))(v79, 1LL, v100) != 1)
        {
          v320 = *(void (**)(char *, uint64_t, uint64_t))(v318 + 32);
          uint64_t v255 = (uint64_t)v372;
          v320(v372, v79, v100);
          if ((static Date.> infix(_:_:)(v255, v98) & 1) == 0) {
            goto LABEL_139;
          }
          uint64_t v402 = v102;
          uint64_t v321 = sub_100446720();
          uint64_t v406 = (uint64_t)v322;
          uint64_t v323 = sub_100446490();
          uint64_t v325 = v324;
          v326 = v387;
          sub_100447148((char *)v387);
          uint64_t v327 = sub_1004469B0();
          sub_100446C34();
          uint64_t v328 = nullsub_36(v327);
          uint64_t v330 = v329;
          v331 = v382;
          uint64_t v332 = v321;
          uint64_t v268 = v398;
          uint64_t v333 = v323;
          v334 = v372;
          sub_10046BDE8(v332, v406, v333, v325, (uint64_t)v326, v328, v335, v330, v382, v336);
          uint64_t v337 = sub_100447444();
          uint64_t v338 = v381;
          sub_100466FC0((uint64_t)v331, v337, v339, v381);
          (*(void (**)(uint64_t, void, uint64_t, unint64_t))(v401 + 56))(v338, 0LL, 1LL, v400);
          sub_100427794(v338, v370, (uint64_t *)&unk_1009BAC60);
          v340 = v369;
          (*(void (**)(char *, char *, uint64_t))(v397 + 16))(v369, v334, v268);
          uint64_t v341 = swift_retain_n(v245, 2LL);
          v342 = (void *)Logger.logObject.getter(v341);
          os_log_type_t v343 = static os_log_type_t.default.getter();
          int v344 = v343;
          if (!os_log_type_enabled((os_log_t)v342, v343))
          {
            swift_release_n(v245, 2LL);

            v253(v340, v268);
            swift_release(v245);
            v253(v334, v268);
            v361 = &v406;
            goto LABEL_142;
          }

          uint64_t v345 = swift_slowAlloc(22LL, -1LL);
          LODWORD(v406) = v344;
          uint64_t v346 = v345;
          uint64_t v405 = swift_slowAlloc(64LL, -1LL);
          *(void *)&__int128 v407 = v405;
          *(_DWORD *)uint64_t v346 = 136315394;
          uint64_t v347 = sub_10040A2B0( &qword_1009B9D98,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
          uint64_t v404 = (uint64_t)v342;
          uint64_t v348 = dispatch thunk of CustomStringConvertible.description.getter(v268, v347);
          unint64_t v350 = v349;
          uint64_t v408 = sub_1003FFBB0(v348, v349, (uint64_t *)&v407);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v408, &v409, v346 + 4, v346 + 12);
          swift_bridgeObjectRelease(v350);
          v253(v340, v268);
          *(_WORD *)(v346 + 1sub_10040A648(v1 + 2) = 2080;
          uint64_t v351 = sub_100446EB8();
          unint64_t v353 = v352;
          uint64_t v354 = Data.description.getter(v351, v352);
          unint64_t v356 = v355;
          sub_100402A84(v351, v353);
          uint64_t v408 = sub_1003FFBB0(v354, v356, (uint64_t *)&v407);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v408, &v409, v346 + 14, v346 + 22);
          swift_release_n(v245, 2LL);
          swift_bridgeObjectRelease(v356);
          os_log_t v357 = (os_log_t)v404;
          _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v404,  (os_log_type_t)v406,  "Last active offgrid device was seen at: %s token: %s",  (uint8_t *)v346,  0x16u);
          uint64_t v358 = v405;
          swift_arrayDestroy(v405, 2LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v358, -1LL, -1LL);
          swift_slowDealloc(v346, -1LL, -1LL);
          swift_release(v245);

          uint64_t v296 = v398;
          v253(v372, v398);
          v297 = &v406;
LABEL_138:
          v359 = (char *)*(v297 - 32);
          uint64_t v360 = v296;
LABEL_143:
          v253(v359, v360);
          return swift_bridgeObjectRelease(v409);
        }