@interface IDSDaemon
+ (BOOL)_canBulkMessageWithPriority:(int64_t)a3 adHocServiceType:(unsigned int)a4;
+ (BOOL)_commandIsSessionCommand:(int64_t)a3;
+ (BOOL)_commandIsSessionGroupSessionCommand:(int64_t)a3;
+ (BOOL)_shouldReplaceLocalDestination:(id)a3;
+ (BOOL)_topicAllowsNoEncryption:(id)a3 fromURI:(id)a4;
+ (BOOL)entitlementDictionary:(id)a3 isEntitledToAccessService:(id)a4 forEntitlement:(id)a5 forAccount:(id)a6 shouldWarn:(BOOL)a7;
+ (id)accountController;
+ (id)daemon;
+ (id)messageStoreForDataProtectionClass:(unsigned int)a3;
+ (id)pairingManager;
+ (id)progressBlockForSendParameters:(id)a3 messageContext:(id)a4 topic:(id)a5 forObject:(id)a6;
+ (id)serviceController;
+ (id)sharedInstance;
+ (id)uTunDeliveryController;
+ (void)_forwardSendMessageToAccountWithSendParameters:(id)a3 service:(id)a4 threadContext:(id)a5 guid:(id)a6 dataProtectionClass:(unsigned int)a7 willSendBlock:(id)a8 progressBlock:(id)a9 completionBlock:(id)a10;
+ (void)_performDuetCheckAndSendForServiceIdentifier:(id)a3 serviceDuetIdentifiers:(id)a4 sendParameters:(id)a5 logString:(id)a6 fromQueue:(id)a7 completionBlock:(id)a8;
+ (void)_sendLocalDeliveryMessagesForAccountUUID:(id)a3 threadContext:(id)a4 priority:(int64_t)a5 dataProtectionClass:(unsigned int)a6;
+ (void)_sendLocalDeliveryMessagesForAccountUUID:(id)a3 threadContext:(id)a4 priority:(int64_t)a5 messageTypes:(id)a6 dataProtectionClass:(unsigned int)a7;
+ (void)_sendMessageWithSendParameters:(id)a3 threadContext:(id)a4 onObject:(id)a5 willSendBlock:(id)a6 progressBlock:(id)a7 completionBlock:(id)a8;
+ (void)logAccessWarningForAccount:(id)a3 withService:(id)a4 entitlement:(id)a5 clientEntitlements:(id)a6 logMessage:(id)a7;
+ (void)sendMessageWithIDSSendParameters:(id)a3 messageContext:(id)a4 threadContext:(id)a5 progressBlock:(id)a6 onObject:(id)a7;
- (BOOL)_canBulkMessageWithParameters:(id)a3;
- (BOOL)_canSendMessageWithAccount:(id)a3 toDestination:(id)a4;
- (BOOL)_canSendNonUrgentInternetMessageForTopic:(id)a3;
- (BOOL)_checkContinuityEntitlementForMessageContext:(id)a3;
- (BOOL)_checkEntitlement:(id)a3 forAccountWithID:(id)a4 messageContext:(id)a5;
- (BOOL)_checkIfDupeAndNoteGuid:(id)a3 local:(BOOL)a4 topic:(id)a5;
- (BOOL)_checkIfDupeAndNoteGuid:(id)a3 local:(BOOL)a4 topic:(id)a5 forceNoteGuid:(BOOL)a6;
- (BOOL)_doesNiceMessageContainValidCombination:(id)a3;
- (BOOL)_hasNonUrgentInternetSendingBudget;
- (BOOL)_isBulkingStorageMessagesForService:(id)a3;
- (BOOL)_isDeviceInAccountRegistration:(id)a3 forService:(id)a4;
- (BOOL)_isSpamReportingV1ServerDisabled;
- (BOOL)_isUnderFirstDataProtectionLock;
- (BOOL)_primaryAccountExistsForService:(id)a3 withURI:(id)a4;
- (BOOL)_processNonMessagingPayloadWithCommand:(id)a3 dictionaryPayload:(id)a4 senderPushToken:(id)a5 topic:(id)a6 toURI:(id)a7 fromURI:(id)a8 peerResponseIdentifier:(id)a9 guid:(id)a10 service:(id)a11 idsMessageContext:(id)a12 messageContext:(id)a13;
- (BOOL)_processQueuedBroadcastsForServices:(id)a3 priority:(int64_t)a4 forceRetry:(BOOL)a5;
- (BOOL)_rollDieForNonUrgentInternetSend;
- (BOOL)_setupListenerConnection:(id)a3 listenerID:(id)a4 pid:(int)a5 setupInfo:(id)a6 entitlements:(id)a7 setupCompletionBlock:(id)a8;
- (BOOL)_shouldDropMessageForIncomingDecryptionErrorType:(int64_t)a3;
- (BOOL)_shouldDropMessageForIncomingErrorMessageWithDecryptionErrorType:(int64_t)a3;
- (BOOL)_shouldForgetCachedPeerTokensForDecryptionErrorType:(int64_t)a3 withOriginalDecryptionError:(id)a4;
- (BOOL)_shouldForgetCachedPeerTokensForIncomingRemoteDecryptionErrorType:(int64_t)a3;
- (BOOL)_shouldIncludeDefaultDeviceAsDestinationForMessageWithParams:(id)a3 service:(id)a4;
- (BOOL)_shouldLaunchClientForCapabilities:(unsigned int)a3;
- (BOOL)_shouldMessageBeProxied:(id)a3 service:(id)a4;
- (BOOL)_shouldRejectMessageOnCrossAccountService:(id)a3 fromSenderURI:(id)a4;
- (BOOL)_shouldRejectMessageOnFamilyService:(id)a3 fromSenderURI:(id)a4;
- (BOOL)_shouldReplyWithCertifiedDeliveryReceiptForDecryptionErrorType:(int64_t)a3;
- (BOOL)_shouldReplyWithRemoteDecryptionErrorMessageForDecryptionErrorType:(int64_t)a3;
- (BOOL)_shouldRetryForDecryptionErrorType:(int64_t)a3;
- (BOOL)_shouldStoreBeforeFirstUnlockIncomingLocalMessage:(id)a3 from:(id)a4 forTopic:(id)a5;
- (BOOL)client:(id)a3 isEntitledToAccessService:(id)a4 forAnyOfEntitlements:(id)a5 shouldWarn:(BOOL)a6;
- (BOOL)client:(id)a3 isEntitledToAccessService:(id)a4 forEntitlement:(id)a5 shouldWarn:(BOOL)a6;
- (BOOL)daemonInterface:(id)a3 shouldGrantAccessForPID:(int)a4 auditToken:(id *)a5 portName:(id)a6 listenerConnection:(id)a7 setupInfo:(id)a8 setupResponse:(id *)a9;
- (BOOL)dropMessageIfDropPointIsDetectedWithSendParameters:(id)a3;
- (BOOL)firewallDatabaseAllowsFromURI:(id)a3 mergeID:(id)a4 service:(id)a5;
- (BOOL)isFirewallEnabledForService:(id)a3;
- (BOOL)isFirewallOn;
- (BOOL)isFirewallOnForService:(id)a3;
- (BOOL)isMessageFromSelfForFromURI:(id)a3 service:(id)a4;
- (BOOL)shouldDropMessageIfOutOfFamilyPhoneNumber:(id)a3 forService:(id)a4 withAppleIDAccount:(id)a5;
- (BOOL)shouldFirewallDropMessageForFromURI:(id)a3 mergeID:(id)a4 service:(id)a5;
- (BOOL)shouldProxyMessageForService:(id)a3 toIdentifier:(id)a4;
- (BOOL)validateListenerForLocalObject:(id)a3;
- (BOOL)validateListenerForLocalObject:(id)a3 andCheckEntitlement:(id)a4;
- (BOOL)validateListenerForLocalObject:(id)a3 andCheckEntitlement:(id)a4 forAccessToServiceWithIdentifier:(id)a5;
- (BOOL)validateLocalObjectForPseudonym:(id)a3 andCheckEntitlement:(id)a4 forAccessToAnyOneOfServices:(id)a5;
- (BOOL)validateLocalObjectForPseudonym:(id)a3 andCheckEntitlement:(id)a4 forAccessToServices:(id)a5;
- (Class)_messageStoreClass;
- (IDSCertifiedDeliveryReplayCommitter)replayStateCommitter;
- (IDSDaemon)init;
- (IDSRegistrationConductor)registrationConductor;
- (IDSRegistrationHashProcessor)queryUpdateNotifier;
- (IDSTransparentEndpointViewer)transparentEndpointViewer;
- (double)_decryptionRetryIntervalForError:(id)a3;
- (double)_maximumNextStoredLoadTime;
- (double)_minimumNextStoredLoadTime;
- (double)_nonUrgentInternetSendProbabilityForCurrentWindow;
- (id)_IMTransferServiceController;
- (id)_commands;
- (id)_copyDirectMessagingMetadataForRemoteObject:(id)a3;
- (id)_decryptAOverCMessage:(id)a3 topic:(id)a4 fromDeviceID:(id)a5 error:(id *)a6;
- (id)_errorForMissingEntitlement:(id)a3;
- (id)_failureReasonMessageFromSecondaryError:(id)a3 ECError:(id)a4 andLegacyError:(id)a5;
- (id)_incomingMessageStorageDictionaryForPayload:(id)a3 topic:(id)a4 deviceID:(id)a5 btUUID:(id)a6 command:(id)a7 messageUUID:(id)a8 sequenceNumber:(id)a9 wantsAppAck:(BOOL)a10 expectsPeerResponse:(BOOL)a11 peerResponseIdentifier:(id)a12;
- (id)_localPushTopics;
- (id)_lockedRemoteObjectsWithNotificationService:(id)a3 entitlement:(id)a4 command:(id)a5 capabilities:(unsigned int)a6;
- (id)_lockedRemoteObjectsWithService:(id)a3 entitlement:(id)a4 command:(id)a5 capabilities:(unsigned int)a6;
- (id)_lockedRemoteObjectsWithService:(id)a3 entitlement:(id)a4 command:(id)a5 capabilities:(unsigned int)a6 ignoreService:(BOOL)a7;
- (id)_lockedRemoteObjectsWithService:(id)a3 entitlement:(id)a4 command:(id)a5 capabilities:(unsigned int)a6 ignoreService:(BOOL)a7 useNotificationServices:(BOOL)a8;
- (id)_lockedRemoteObjectsWithService:(id)a3 entitlements:(id)a4 command:(id)a5 capabilities:(unsigned int)a6 ignoreService:(BOOL)a7 useNotificationServices:(BOOL)a8;
- (id)_messageStoreForDataProtectionClass:(unsigned int)a3;
- (id)_newSetupInfoWithContext:(id)a3;
- (id)_payloadFromDecryptedData:(id)a3;
- (id)_populateDictionaryWithSenderKeyCheck:(id)a3 remoteURI:(id)a4 localURI:(id)a5 originalGUID:(id)a6;
- (id)_processNameToServiceName:(id)a3;
- (id)_pushTopics;
- (id)_replayKeyForNiceMessage:(id)a3 encryptedData:(id)a4;
- (id)_sessionWithInstanceID:(id)a3 messageContext:(id)a4 requiredEntitlement:(id)a5;
- (id)_sessionWithUniqueID:(id)a3 messageContext:(id)a4 requiredEntitlement:(id)a5;
- (id)_ultraConstrainedPushTopicsForTopics:(id)a3;
- (id)_updateDirectMessagingMetadataForRemoteObject:(id)a3 shouldBroadcastForRemoteObject:(BOOL)a4;
- (id)_validAccountForIncomingMessageSentToURI:(id)a3 service:(id)a4 outPseudonym:(id *)a5;
- (id)accountController;
- (id)accountWithIdentifier:(id)a3 localObject:(id)a4 requiredEntitlement:(id)a5;
- (id)activityStateMonitor;
- (id)broadcastAttemptQueueFromPriority:(int64_t)a3;
- (id)broadcasterForEntitlement:(id)a3 messageContext:(id)a4;
- (id)broadcasterForLocalObject:(id)a3 messageContext:(id)a4;
- (id)broadcasterForTopic:(id)a3 entitlement:(id)a4 command:(id)a5 messageContext:(id)a6;
- (id)broadcasterForTopic:(id)a3 entitlement:(id)a4 messageContext:(id)a5;
- (id)broadcasterForTopic:(id)a3 ignoreServiceListener:(BOOL)a4 messageContext:(id)a5;
- (id)broadcasterForTopic:(id)a3 messageContext:(id)a4;
- (id)broadcasterWithMessageContext:(id)a3;
- (id)centralRegListener;
- (id)cloudRelayRegisteredAccountWithError:(id *)a3;
- (id)copyDirectMessagingInfo;
- (id)currentDevice;
- (id)daemonCapabilities;
- (id)daemonMIGInterface;
- (id)daemonMIGQueryInterface;
- (id)daemonXPCInterface;
- (id)deliveryControllerQueuedIncomingMessageDictionary:(id)a3;
- (id)dequeueBroadcastWithID:(int64_t)a3 forMessageUUID:(id)a4 service:(id)a5 priority:(int64_t)a6;
- (id)deviceHeartbeatCenter;
- (id)encryptionController;
- (id)familyManager;
- (id)firewallNotificationCenter;
- (id)idStatusQueryController;
- (id)listenerForLocalObject:(id)a3;
- (id)listenerRemoteObjectForLocalObject:(id)a3;
- (id)messageStoreForDataProtectionClass:(unsigned int)a3;
- (id)messageStoreMigrator;
- (id)opportunisticDeliveryController;
- (id)pairingManager;
- (id)persistenceManager;
- (id)pushHandlerForAPSDelegatePort;
- (id)rapportDeliveryController;
- (id)registrationBroadcasterForTopic:(id)a3 messageContext:(id)a4;
- (id)registrationController;
- (id)registrationPushManager;
- (id)restrictions;
- (id)senderKeyDistributionManager;
- (id)serverBagForBagType:(int64_t)a3;
- (id)serverStorageStateMachine;
- (id)serviceController;
- (id)sessionController;
- (id)signInResponder;
- (id)systemMonitor;
- (id)uTunController;
- (id)uTunDeliveryController;
- (id)wpLinkManager;
- (int64_t)_cleanupFrequencyForRestrictedMessages;
- (int64_t)_currentSecondsIntoDay;
- (int64_t)_expirationTimeForRestrictedMessages;
- (int64_t)_messageTypeForConnection:(int64_t)a3;
- (int64_t)_signatureTypeForSigningAlgorithm:(int64_t)a3;
- (int64_t)_subscriptionSourceNumberForContext:(id)a3;
- (unint64_t)_maxMessagesForRunawayClientConsideration;
- (unint64_t)_maxOutgoingDatabasesSizeInMB;
- (unsigned)_dedupBehaviorForNiceMessage:(id)a3;
- (void)_IDSPowerLogDictionary:(id)a3 info:(id)a4;
- (void)_ackMessageWithSequenceNumber:(unsigned int)a3 forDeviceID:(id)a4 priority:(int64_t)a5 dataProtectionClass:(unsigned int)a6 connectionType:(int64_t)a7 guid:(id)a8;
- (void)_addIncomingGUIDsWithGuid:(id)a3 isLocal:(BOOL)a4 hasLock:(BOOL)a5;
- (void)_broadcastPendingMessageUpdateForNiceMessage:(id)a3 fromURI:(id)a4 toURI:(id)a5 forTopic:(id)a6 messageContext:(id)a7;
- (void)_callReplayCommitBlockForIncomingMessages:(id)a3;
- (void)_cleanUpOutgoingMessageDatabaseAndClearStatementCache;
- (void)_cleanupExpiredIncomingMessages;
- (void)_cleanupIncomingFilesDirectories;
- (void)_cleanupIncomingFilesDirectory:(id)a3;
- (void)_cleanupIncomingMessageDatabase;
- (void)_cleanupListenerWithPid:(int)a3;
- (void)_cleanupOutgoingExpiredMessages;
- (void)_cleanupOutgoingMessageDatabase;
- (void)_cleanupOutgoingMessages;
- (void)_cleanupOutgoingQWSMessages;
- (void)_cleanupRunawayClientOutgoingMessages;
- (void)_clearIDSState;
- (void)_dropQueuedBroadcastsForServices:(id)a3 priority:(int64_t)a4;
- (void)_enqueueBlock:(id)a3 identifier:(id)a4 withTimeout:(double)a5 forKey:(id)a6;
- (void)_failSavedMessageCleanly:(id)a3 withResponseCode:(int64_t)a4;
- (void)_failSavedMessagesCleanly:(id)a3 withResponseCode:(int64_t)a4;
- (void)_fetchAccountEntitlements:(id *)a3 listenerID:(id *)a4 inContext:(id)a5;
- (void)_flushBroadcastQueuesForServices:(id)a3 existingServices:(id)a4;
- (void)_handleDeliveryReceiptForSenderKeyCheck:(id)a3 remoteURI:(id)a4 remotePushToken:(id)a5 localURI:(id)a6 originalGUID:(id)a7;
- (void)_handleIncomingNiceAttachmentMessage:(id)a3 forTopic:(id)a4 fromURI:(id)a5 certifiedDeliveryContext:(id)a6 completionBlock:(id)a7;
- (void)_handleIncomingPushNiceMessage:(id)a3 forTopic:(id)a4 fromURI:(id)a5 messageContext:(id)a6;
- (void)_handleSpaceBecomingAvailableForUrgentLocalMessagesWithDataProtectionClasses:(id)a3 withMessageTypes:(id)a4;
- (void)_iterateOverConnectedListeners:(id)a3;
- (void)_launchServiceOnDemand:(id)a3;
- (void)_locked_printBroadcastAttemptMapForPriority:(int64_t)a3 service:(id)a4;
- (void)_nonUrgentInternetSendTimerFired;
- (void)_noteItemFromStorage:(id)a3;
- (void)_noteLastItemFromStorage:(id)a3;
- (void)_notifyTinkerServicesOfPairedDevice:(id)a3 withBlock:(id)a4;
- (void)_optionallyDecryptNiceMessage:(id)a3 encryptedData:(id)a4 forGroupID:(id)a5 forTopic:(id)a6 fromURI:(id)a7 certifiedDeliveryContext:(id)a8 completionBlock:(id)a9;
- (void)_optionallyDecryptNiceMessage:(id)a3 encryptedData:(id)a4 forGroupID:(id)a5 forTopic:(id)a6 fromURI:(id)a7 certifiedDeliveryContext:(id)a8 isLiveRetry:(BOOL)a9 completionBlock:(id)a10;
- (void)_performDuetCheckAndSendForAccount:(id)a3 sendParameters:(id)a4 logString:(id)a5 fromQueue:(id)a6 completionBlock:(id)a7;
- (void)_performSetup;
- (void)_pidSuspended:(int)a3;
- (void)_postAliveNotification;
- (void)_processCertifiedDeliveryReceiptForSenderKeyDistribution:(id)a3 service:(id)a4;
- (void)_processDeletingMessagesWithPriority:(int64_t)a3 reason:(id)a4 responseCode:(int64_t)a5 allowedTrafficClasses:(id)a6;
- (void)_processDisallowedMessages;
- (void)_processIncomingLocalMessage:(id)a3 topic:(id)a4 command:(id)a5 deviceID:(id)a6 btUUID:(id)a7 context:(id)a8 storedGUID:(id)a9 priority:(id)a10 connectionType:(int64_t)a11 didWakeHint:(BOOL)a12;
- (void)_processIncomingRemoteNiceMessage:(id)a3 forTopic:(id)a4 fromURI:(id)a5 storedGuid:(id)a6 messageContext:(id)a7;
- (void)_processIncomingRemoteResourceTransferMessage:(id)a3 forceDownload:(BOOL)a4 guid:(id)a5 context:(id)a6 specificOriginatorURI:(id)a7 broadcastTopic:(id)a8 toURI:(id)a9 topic:(id)a10 messageContext:(id)a11;
- (void)_processKTPeerUpdateMessageForService:(id)a3 localURI:(id)a4 remoteURI:(id)a5;
- (void)_processLocalMessagesWithAccountUUIDs:(id)a3 priority:(int64_t)a4 dataProtectionClass:(unsigned int)a5;
- (void)_processLocalMessagesWithAccountUUIDs:(id)a3 priority:(int64_t)a4 dataProtectionClass:(unsigned int)a5 messageTypes:(id)a6;
- (void)_processMessageError:(BOOL)a3 topLevelMessage:(id)a4 error:(id)a5 messageID:(id)a6 failureReasonMessage:(id)a7 service:(id)a8 serviceType:(id)a9 pushToken:(id)a10 fromURI:(id)a11 toURI:(id)a12 groupID:(id)a13 completionBlock:(id)a14;
- (void)_processMessagesUponUnpairing;
- (void)_processOutgoingNonUrgentInternetMessages;
- (void)_processStoredIncomingLocalMessage:(id)a3;
- (void)_processStoredIncomingLocalMessages;
- (void)_processStoredIncomingMessages;
- (void)_processStoredIncomingMessagesForCategory:(unsigned int)a3;
- (void)_processStoredIncomingRemoteMessagesWithGUIDs:(id)a3 ignoringGUIDs:(id)a4 controlCategory:(unsigned int)a5 lastTimeInterval:(double)a6 repeatedAttempt:(BOOL)a7;
- (void)_processStoredIncomingRemoteMessagesWithGUIDs:(id)a3 ignoringGUIDs:(id)a4 lastTimeInterval:(double)a5;
- (void)_processStoredMessagesIncludingClassD:(BOOL)a3;
- (void)_processStoredOutgoingUrgentMessagesProcessLocalAccounts:(BOOL)a3;
- (void)_registerForCheckpointAndVacuumDB;
- (void)_registerForDailyMetricReporting;
- (void)_registerForNetworkAvailableNotification;
- (void)_registerSysdiagnoseBlock;
- (void)_removeAccount:(id)a3 messageContext:(id)a4;
- (void)_removeAndDeregisterAccount:(id)a3 messageContext:(id)a4;
- (void)_removeListener:(id)a3;
- (void)_removeListenerWithRemoteXPCObject:(id)a3;
- (void)_removeLocalListenerObject:(id)a3;
- (void)_reregisterAndReidentify:(id)a3 account:(id)a4 messageContext:(id)a5;
- (void)_resetBroadcastQueuesForServices:(id)a3;
- (void)_resetPreferences;
- (void)_resetQueuedBroadcastsForServices:(id)a3 priority:(int64_t)a4;
- (void)_resourceAvailabilityChangedForIdentifiers:(id)a3 priorities:(id)a4 dataProtectionClasses:(id)a5;
- (void)_resourceAvailabilityChangedForIdentifiers:(id)a3 priorities:(id)a4 dataProtectionClasses:(id)a5 messageTypes:(id)a6;
- (void)_resourceAvailabilityChangedForIdentifiers:(id)a3 priority:(int64_t)a4 dataProtectionClass:(unsigned int)a5;
- (void)_resourceAvailabilityChangedForIdentifiers:(id)a3 priority:(int64_t)a4 dataProtectionClass:(unsigned int)a5 messageTypes:(id)a6;
- (void)_respondToAppleCareRequestID:(id)a3 withMessageContext:(id)a4 error:(id)a5;
- (void)_respondToRegistrationControlWithRequestID:(id)a3 status:(int64_t)a4 messageContext:(id)a5 error:(id)a6;
- (void)_respondToVMDataRequestWithData:(id)a3 requestID:(id)a4 error:(id)a5 messageContext:(id)a6;
- (void)_restrictedMessageCleanupTimerFired;
- (void)_sendCertifiedDeliveryReceiptForSenderKeyDistributionMessage:(id)a3 service:(id)a4 keyIDs:(id)a5;
- (void)_sendCertifiedDeliveryReceiptIfNeededForNiceMessage:(id)a3 service:(id)a4 failureReason:(id)a5 failureReasonMessage:(id)a6 generateDeliveryReceipt:(BOOL)a7;
- (void)_sendErrorMessage:(id)a3 originalCommand:(id)a4 fromURI:(id)a5 toDestinations:(id)a6 usingAccountWithUniqueID:(id)a7 useDictAsTopLevel:(BOOL)a8 dataToEncrypt:(id)a9 wantsResponse:(BOOL)a10 timeout:(double)a11 command:(id)a12 priority:(int64_t)a13 completionBlock:(id)a14;
- (void)_sendNiceMessageCheckpointIfNecessary:(id)a3 checkpoint:(int64_t)a4 service:(id)a5 additionalInformation:(id)a6;
- (void)_setupRestrictedMessageCleanupTimer;
- (void)_startPushHandlingLocked;
- (void)_stopPushHandling;
- (void)_storageTimerFired;
- (void)_submitLastResortCacheMetricForGUID:(id)a3 service:(id)a4;
- (void)_submitRegistrationAccountStatusMetric;
- (void)_terminate;
- (void)_updateNonUrgentInternetSendTimer;
- (void)_updatePushCommandsLocked;
- (void)_updateStorageTimerWithInterval:(double)a3;
- (void)acceptInvitation:(id)a3 messageContext:(id)a4;
- (void)acceptInvitation:(id)a3 withData:(id)a4 messageContext:(id)a5;
- (void)acknowledgeMessageWithGUID:(id)a3 forAccountWithUniqueID:(id)a4 broadcastTime:(id)a5 messageSize:(id)a6 priority:(id)a7 messageContext:(id)a8;
- (void)acknowledgeMessageWithStorageGUID:(id)a3 realGUID:(id)a4 forAccountWithUniqueID:(id)a5 broadcastTime:(id)a6 messageSize:(id)a7 priority:(id)a8 broadcastID:(int64_t)a9 connectionType:(int64_t)a10 messageContext:(id)a11;
- (void)acknowledgeOutgoingMessageWithGUID:(id)a3 alternateCallbackID:(id)a4 forAccountWithUniqueID:(id)a5 messageContext:(id)a6;
- (void)acknowledgeSessionID:(id)a3 clientID:(id)a4 messageContext:(id)a5;
- (void)addAccountWithLoginID:(id)a3 serviceName:(id)a4 uniqueID:(id)a5 accountType:(int)a6 accountInfo:(id)a7 messageContext:(id)a8;
- (void)addAliases:(id)a3 toAccount:(id)a4 messageContext:(id)a5;
- (void)appleCareSignInUserName:(id)a3 DSID:(id)a4 authToken:(id)a5 requestID:(id)a6 messageContext:(id)a7;
- (void)appleCareSignOutUserWithRequestID:(id)a3 messageContext:(id)a4;
- (void)authTokenChanged:(id)a3 forAccount:(id)a4 messageContext:(id)a5;
- (void)authenticateAccount:(id)a3 messageContext:(id)a4;
- (void)authenticatePhoneWithRequestUUID:(id)a3 messageContext:(id)a4;
- (void)cancelInvitation:(id)a3 messageContext:(id)a4;
- (void)cancelInvitation:(id)a3 withData:(id)a4 messageContext:(id)a5;
- (void)cancelInvitation:(id)a3 withRemoteEndedReasonOverride:(unsigned int)a4 messageContext:(id)a5;
- (void)cancelItemWithIdentifier:(id)a3 service:(id)a4 messageContext:(id)a5;
- (void)cancelMessageWithQueueOneIdentifier:(id)a3 fromID:(id)a4 service:(id)a5 accountUniqueID:(id)a6 messageIdentifier:(id)a7 messageContext:(id)a8;
- (void)cancelOpportunisticDataOnService:(id)a3 withIdentifier:(id)a4 messageContext:(id)a5;
- (void)cleanupSession:(id)a3 messageContext:(id)a4;
- (void)cleanupSessionWithInstanceID:(id)a3 messageContext:(id)a4;
- (void)clearIDSStateWithMessageContext:(id)a3;
- (void)closeSocketWithOptions:(id)a3 messageContext:(id)a4;
- (void)continuityClientInstanceCreatedWithMessageContext:(id)a3;
- (void)continuityStartAdvertisingOfType:(int64_t)a3 withData:(id)a4 withOptions:(id)a5 messageContext:(id)a6;
- (void)continuityStartScanningForType:(int64_t)a3 withData:(id)a4 mask:(id)a5 boostedScan:(BOOL)a6 duplicates:(BOOL)a7 messageContext:(id)a8;
- (void)continuityStartScanningForType:(int64_t)a3 withData:(id)a4 mask:(id)a5 messageContext:(id)a6;
- (void)continuityStartScanningForType:(int64_t)a3 withData:(id)a4 mask:(id)a5 peers:(id)a6 boostedScan:(BOOL)a7 duplicates:(BOOL)a8 messageContext:(id)a9;
- (void)continuityStartScanningForType:(int64_t)a3 withData:(id)a4 mask:(id)a5 peers:(id)a6 messageContext:(id)a7;
- (void)continuityStartTrackingPeer:(id)a3 forType:(int64_t)a4 messageContext:(id)a5;
- (void)continuityStopAdvertisingOfType:(int64_t)a3 messageContext:(id)a4;
- (void)continuityStopScanningForType:(int64_t)a3 messageContext:(id)a4;
- (void)continuityStopTrackingPeer:(id)a3 forType:(int64_t)a4 messageContext:(id)a5;
- (void)createAliasForParticipantID:(unint64_t)a3 salt:(id)a4 sessionID:(id)a5 messageContext:(id)a6;
- (void)deactivateAndPurgeIdentifyForAccount:(id)a3 messageContext:(id)a4;
- (void)dealloc;
- (void)declineInvitation:(id)a3 messageContext:(id)a4;
- (void)declineInvitation:(id)a3 withData:(id)a4 messageContext:(id)a5;
- (void)deletePendingResourceWithMessageGUID:(id)a3 messageContext:(id)a4;
- (void)deliveryController:(id)a3 dataReceived:(id)a4 topic:(id)a5 command:(id)a6 deviceID:(id)a7 btUUID:(id)a8 messageID:(id)a9 wantsAppAck:(BOOL)a10 expectsPeerResponse:(BOOL)a11 peerResponseIdentifier:(id)a12 messageUUID:(id)a13 priority:(int64_t)a14 isCompressed:(BOOL)a15 connectionType:(int64_t)a16 didWakeHint:(BOOL)a17;
- (void)deliveryController:(id)a3 device:(id)a4 supportsDirectMessaging:(BOOL)a5 isObliterating:(BOOL)a6;
- (void)deliveryController:(id)a3 didReceiveMessage:(id)a4 topic:(id)a5 command:(id)a6 deviceID:(id)a7 messageID:(id)a8;
- (void)deliveryController:(id)a3 messageReceived:(id)a4 topic:(id)a5 command:(id)a6 deviceID:(id)a7 btUUID:(id)a8 messageID:(id)a9 wantsAppAck:(BOOL)a10 expectsPeerResponse:(BOOL)a11 peerResponseIdentifier:(id)a12 messageUUID:(id)a13 priority:(int64_t)a14 isCompressed:(BOOL)a15 connectionType:(int64_t)a16 didWakeHint:(BOOL)a17;
- (void)deliveryController:(id)a3 protobufReceived:(id)a4 topic:(id)a5 command:(id)a6 deviceID:(id)a7 btUUID:(id)a8 messageID:(id)a9 wantsAppAck:(BOOL)a10 expectsPeerResponse:(BOOL)a11 peerResponseIdentifier:(id)a12 messageUUID:(id)a13 priority:(int64_t)a14 isCompressed:(BOOL)a15 connectionType:(int64_t)a16 didWakeHint:(BOOL)a17;
- (void)deliveryController:(id)a3 receivedAppLevelAckWithTopic:(id)a4 deviceID:(id)a5 btUUID:(id)a6 messageID:(id)a7 peerResponseIdentifier:(id)a8 priority:(int64_t)a9 connectionType:(int64_t)a10;
- (void)deliveryControllerHasSpaceforNonUrgentMessages:(id)a3 priority:(int64_t)a4 dataProtectionClass:(unsigned int)a5;
- (void)deliveryControllerHasSpaceforNonUrgentMessages:(id)a3 priority:(int64_t)a4 dataProtectionClass:(unsigned int)a5 ofTypes:(id)a6;
- (void)deliveryControllerHasSpaceforUrgentMessages:(id)a3 dataProtectionClass:(unsigned int)a4 ofTypes:(id)a5;
- (void)didAddPairedDevice:(id)a3;
- (void)didRemovePairedDevice:(id)a3;
- (void)didUpdatePairedDevice:(id)a3;
- (void)didUpdateProtocolForPairedDevice:(id)a3;
- (void)disableAccount:(id)a3 messageContext:(id)a4;
- (void)downloadPendingResourceWithMessageGUID:(id)a3 messageContext:(id)a4;
- (void)dropQueuedBroadcastsForServices:(id)a3;
- (void)duetInterface:(id)a3 resourceAvailabilityChangedForIdentifiers:(id)a4;
- (void)enableAccount:(id)a3 messageContext:(id)a4;
- (void)enableP2PlinksForSession:(id)a3 messageContext:(id)a4;
- (void)endSession:(id)a3 messageContext:(id)a4;
- (void)endSession:(id)a3 withData:(id)a4 messageContext:(id)a5;
- (void)enqueueBroadcast:(id)a3 forTopic:(id)a4 entitlement:(id)a5 command:(id)a6 capabilities:(unsigned int)a7 messageContext:(id)a8;
- (void)enqueueIncomingMessageBroadcast:(id)a3 broadcastData:(id)a4 forTopic:(id)a5 entitlement:(id)a6 command:(id)a7 capabilities:(unsigned int)a8 messageContext:(id)a9;
- (void)failedDecryptingMessage:(id)a3 reason:(int64_t)a4 forGroupID:(id)a5 onService:(id)a6 messageContext:(id)a7;
- (void)fetchPhoneUserSubscriptionSourceWithRequestUUID:(id)a3 messageContext:(id)a4;
- (void)forceDisableAccount:(id)a3 messageContext:(id)a4;
- (void)forceRemoveAccount:(id)a3 messageContext:(id)a4;
- (void)gameCenterModifyForUserName:(id)a3 messageContext:(id)a4;
- (void)gameCenterSignInWithUserName:(id)a3 authToken:(id)a4 password:(id)a5 accountInfo:(id)a6 accountStatus:(id)a7 handles:(id)a8 messageContext:(id)a9;
- (void)gameCenterSignOutWithMessageContext:(id)a3;
- (void)generatePhoneAuthenticationSignatureOverData:(id)a3 withRequestUUID:(id)a4 messageContext:(id)a5;
- (void)getDeliveryStatsWithMessageContext:(id)a3;
- (void)getLocalIncomingPowerAssertion:(id)a3 queue:(id)a4;
- (void)getParticipantIDForAlias:(unint64_t)a3 salt:(id)a4 sessionID:(id)a5 messageContext:(id)a6;
- (void)getProgressUpdateForIdentifier:(id)a3 service:(id)a4 messageContext:(id)a5;
- (void)handler:(id)a3 didReceiveMessage:(id)a4 forTopic:(id)a5 fromID:(id)a6 messageContext:(id)a7;
- (void)handler:(id)a3 didReceiveMessage:(id)a4 forUnknownTopic:(id)a5 messageContext:(id)a6;
- (void)handler:(id)a3 isConnectedChanged:(BOOL)a4;
- (void)handler:(id)a3 receivedNoStorageResponseForTopic:(id)a4 identifier:(id)a5 messageContext:(id)a6;
- (void)handler:(id)a3 receivedOfflineMessagePendingForTopic:(id)a4 messageContext:(id)a5;
- (void)hardDeregisterWithMessageContext:(id)a3;
- (void)homeKitGetAdminAccessTokensWithServiceUserID:(id)a3 accessoryID:(id)a4 pairingToken:(id)a5 messageContext:(id)a6;
- (void)homeKitGetConsentTokensWithServiceUserID:(id)a3 accessoryIDs:(id)a4 adminID:(id)a5 messageContext:(id)a6;
- (void)homeKitGetServiceUserIDsWithMessageContext:(id)a3;
- (void)homeKitGetUserAccessTokensWithServiceUserID:(id)a3 userID:(id)a4 userHandle:(id)a5 accessoryRequests:(id)a6 messageContext:(id)a7;
- (void)iCloudModifyForUserName:(id)a3 messageContext:(id)a4;
- (void)iCloudSignInHackWithUserName:(id)a3 password:(id)a4 messageContext:(id)a5;
- (void)iCloudSignInWithUserName:(id)a3 authToken:(id)a4 password:(id)a5 accountInfo:(id)a6 accountStatus:(id)a7 handles:(id)a8 messageContext:(id)a9;
- (void)iCloudSignOutHackWithMessageContext:(id)a3;
- (void)iCloudSignOutWithMessageContext:(id)a3;
- (void)iCloudUpdateForUserName:(id)a3 accountInfo:(id)a4 messageContext:(id)a5;
- (void)iTunesSignInWithUserName:(id)a3 authToken:(id)a4 password:(id)a5 accountInfo:(id)a6 accountStatus:(id)a7 handles:(id)a8 messageContext:(id)a9;
- (void)iTunesSignOutWithMessageContext:(id)a3;
- (void)incomingAccountSyncMessage:(id)a3 messageContext:(id)a4;
- (void)initialLocalSyncCompletedForServices:(id)a3 messageContext:(id)a4;
- (void)initialLocalSyncStartedForServices:(id)a3 messageContext:(id)a4;
- (void)joinGroupSession:(id)a3 withOptions:(id)a4 messageContext:(id)a5;
- (void)kickGetDependentForAccount:(id)a3 messageContext:(id)a4;
- (void)launchOnDemandServicesForNeedsLaunchOnNearbyDevicesChanged;
- (void)launchOnDemandServicesForQueuedBroadcastAttempts;
- (void)leaveGroupSession:(id)a3 participantInfo:(id)a4 options:(id)a5 messageContext:(id)a6;
- (void)localObjectDiedNotification:(id)a3;
- (void)logState;
- (void)manageDesignatedMembers:(id)a3 forGroup:(id)a4 sessionID:(id)a5 withType:(unsigned __int16)a6 messageContext:(id)a7;
- (void)networkStateChangedForLogTransportHint:(id)a3;
- (void)noteBlockedMessageFromURI:(id)a3 service:(id)a4;
- (void)notifyClients:(unint64_t)a3;
- (void)openSocketWithOptions:(id)a3 messageContext:(id)a4;
- (void)passwordChanged:(id)a3 forAccount:(id)a4 messageContext:(id)a5;
- (void)passwordUpdatedForAccount:(id)a3 messageContext:(id)a4;
- (void)persistPendingInvitation:(id)a3 forService:(id)a4 withUniqueID:(id)a5 messageContext:(id)a6;
- (void)persistReceivedInvitation:(id)a3 forService:(id)a4 withUniqueID:(id)a5 messageContext:(id)a6;
- (void)processDirectMessagingCapability:(BOOL)a3;
- (void)processDirectMessagingInfo:(id)a3;
- (void)provisionPseudonymForURI:(id)a3 onAccount:(id)a4 withProperties:(id)a5 requestProperties:(id)a6 requestUUID:(id)a7 messageContext:(id)a8;
- (void)queryHashForceUpdate:(id)a3 fromURI:(id)a4 messageUUID:(id)a5 updateHash:(id)a6 toURI:(id)a7 service:(id)a8;
- (void)reRegisterWithUserID:(id)a3 action:(id)a4 service:(id)a5 messageContext:(id)a6;
- (void)receivedDirectMsgSocketRequestForService:(id)a3 stream:(id)a4 flags:(unint64_t)a5;
- (void)reconnectSessionWithUniqueID:(id)a3 messageContext:(id)a4;
- (void)refreshBundleIDs;
- (void)regenerateRegisteredIdentityWithMessageContext:(id)a3;
- (void)registerAccount:(id)a3 messageContext:(id)a4;
- (void)registerForNotificationsOnServices:(id)a3 messageContext:(id)a4;
- (void)registerForQueryDBCleanup;
- (void)registerForRegistrationAccountStatusMetric;
- (void)registerForRegistrationEventTrackCleanup;
- (void)registerForSenderKeyCleanup;
- (void)registerPluginForGroup:(id)a3 options:(id)a4 messageContext:(id)a5;
- (void)registrationControlGetRegistrationStateForRegistrationType:(int64_t)a3 requestID:(id)a4 messageContext:(id)a5;
- (void)registrationControlSetRegistrationStateForRegistrationType:(int64_t)a3 toState:(int64_t)a4 requestID:(id)a5 messageContext:(id)a6;
- (void)registrationHashProcessor:(id)a3 didFlushCacheForService:(id)a4 remoteURI:(id)a5 localURI:(id)a6 guid:(id)a7;
- (void)releaseBroadcastAttemptQueue:(int64_t)a3;
- (void)remoteObjectDiedNotification:(id)a3;
- (void)removeAliases:(id)a3 fromAccount:(id)a4 messageContext:(id)a5;
- (void)removeListenerWithRemoteXPCObject:(id)a3;
- (void)removeLocalListenerObject:(id)a3;
- (void)removeParticipantIDs:(id)a3 forGroup:(id)a4 sessionID:(id)a5 messageContext:(id)a6;
- (void)removePendingInvitation:(id)a3 forService:(id)a4 messageContext:(id)a5;
- (void)removeReceivedInvitation:(id)a3 forService:(id)a4 messageContext:(id)a5;
- (void)removeWakingPushPriorityForServices:(id)a3;
- (void)renewPseudonym:(id)a3 onAccount:(id)a4 forUpdatedExpiryEpoch:(double)a5 requestProperties:(id)a6 requestUUID:(id)a7 messageContext:(id)a8;
- (void)repairAccountsWithMessageContext:(id)a3;
- (void)reportAction:(int64_t)a3 ofTempURI:(id)a4 fromURI:(id)a5 onAccount:(id)a6 requestUUID:(id)a7 messageContext:(id)a8;
- (void)reportDailyMetrics;
- (void)reportSpamMessage:(id)a3 serviceIdentifier:(id)a4 messageContext:(id)a5;
- (void)reportiMessageSpam:(id)a3 toURI:(id)a4 messageContext:(id)a5;
- (void)reportiMessageSpamCheckUnknown:(id)a3 count:(id)a4 requestID:(id)a5 messageContext:(id)a6;
- (void)reportiMessageUnknownSender:(id)a3 messageID:(id)a4 isBlackholed:(BOOL)a5 isJunked:(BOOL)a6 messageServerTimestamp:(id)a7 toURI:(id)a8 messageContext:(id)a9;
- (void)requestActiveParticipantsForGroupSession:(id)a3 messageContext:(id)a4;
- (void)requestCarrierTokenForSubscriptionSource:(id)a3 IMEI:(id)a4 carrierNonce:(id)a5 requestUUID:(id)a6 messageContext:(id)a7;
- (void)requestEncryptionKeyForGroup:(id)a3 participants:(id)a4 messageContext:(id)a5;
- (void)requestPublicKeysForRealTimeEncryption:(id)a3 forAccountWithID:(id)a4 messageContext:(id)a5;
- (void)requestRealTimeEncryptionMasterKeyMaterial:(id)a3 forGroup:(id)a4 messageContext:(id)a5;
- (void)requestURIsForParticipantIDs:(id)a3 withRequestID:(id)a4 forGroupSession:(id)a5 messageContext:(id)a6;
- (void)requestVMData:(id)a3 requestID:(id)a4 messageContext:(id)a5;
- (void)resetRealTimeEncryptionKeys:(id)a3 forGroup:(id)a4 messageContext:(id)a5;
- (void)respondToRegistrationControlActionWithRequestID:(id)a3 messageContext:(id)a4 error:(id)a5;
- (void)revokePseudonym:(id)a3 onAccount:(id)a4 requestProperties:(id)a5 requestUUID:(id)a6 messageContext:(id)a7;
- (void)sendAllocationRequest:(id)a3 options:(id)a4 messageContext:(id)a5;
- (void)sendAppAckWithGUID:(id)a3 toDestination:(id)a4 forAccountWithUniqueID:(id)a5 connectionType:(int64_t)a6 messageContext:(id)a7;
- (void)sendCertifiedDeliveryReceipt:(id)a3 serviceName:(id)a4 messageContext:(id)a5;
- (void)sendInvitation:(id)a3 withData:(id)a4 declineOnError:(BOOL)a5 messageContext:(id)a6;
- (void)sendInvitation:(id)a3 withOptions:(id)a4 messageContext:(id)a5;
- (void)sendMessageWithSendParameters:(id)a3 messageContext:(id)a4;
- (void)sendOpportunisticData:(id)a3 onService:(id)a4 usingAccountWithUniqueID:(id)a5 withIdentifier:(id)a6 options:(id)a7 messageContext:(id)a8;
- (void)sendRealTimeEncryptionMKMRecoveryRequest:(id)a3 toGroup:(id)a4;
- (void)sendRealTimeEncryptionMasterKeyMaterial:(id)a3 toGroup:(id)a4 messageContext:(id)a5;
- (void)sendRealTimeMediaPrekey:(id)a3 toGroup:(id)a4 messageContext:(id)a5;
- (void)sendServerMessage:(id)a3 command:(id)a4 usingAccountWithUniqueID:(id)a5 messageContext:(id)a6;
- (void)sendSessionMessage:(id)a3 toDestinations:(id)a4 forSessionWithUniqueID:(id)a5 messageContext:(id)a6;
- (void)setAudioEnabled:(BOOL)a3 forSessionWithUniqueID:(id)a4 messageContext:(id)a5;
- (void)setForceTCPFallbackOnCellUsingReinitiate:(BOOL)a3 forSessionWithUniqueID:(id)a4 messageContext:(id)a5;
- (void)setForceTCPFallbackOnWiFiUsingReinitiate:(BOOL)a3 forSessionWithUniqueID:(id)a4 messageContext:(id)a5;
- (void)setInviteTimetout:(int64_t)a3 forSessionWithUniqueID:(id)a4 messageContext:(id)a5;
- (void)setLinkPreferences:(id)a3 service:(id)a4 messageContext:(id)a5;
- (void)setListenerServices:(id)a3 commands:(id)a4 capabilities:(unsigned int)a5 messageContext:(id)a6;
- (void)setMuted:(BOOL)a3 forSessionWithUniqueID:(id)a4 messageContext:(id)a5;
- (void)setNSUUID:(id)a3 onDeviceWithUniqueID:(id)a4 forService:(id)a5 messageContext:(id)a6;
- (void)setPairedDeviceInfo:(id)a3 messageContext:(id)a4;
- (void)setPassword:(id)a3 forUsername:(id)a4 onService:(id)a5 messageContext:(id)a6;
- (void)setPhoneUserSubscriptionSource:(id)a3 withRequestUUID:(id)a4 messageContext:(id)a5;
- (void)setPreferInfraWiFi:(BOOL)a3 service:(id)a4 messageContext:(id)a5;
- (void)setPreferences:(id)a3 forSessionWithUniqueID:(id)a4 messageContext:(id)a5;
- (void)setQuickRelayUserTypeForSession:(id)a3 withUserType:(unsigned __int16)a4 messageContext:(id)a5;
- (void)setRequiredCapabilities:(id)a3 requiredLackOfCapabilities:(id)a4 forSessionWithUniqueID:(id)a5 messageContext:(id)a6;
- (void)setWakingPushPriority:(int64_t)a3 forTopic:(id)a4 messageContext:(id)a5;
- (void)setupAccountWithLoginID:(id)a3 serviceName:(id)a4 accountType:(int)a5 accountConfig:(id)a6 authToken:(id)a7 password:(id)a8 transactionID:(id)a9 messageContext:(id)a10;
- (void)setupNewSessionWithConfiguration:(id)a3 messageContext:(id)a4;
- (void)setupRealtimeEncryptionController:(id)a3 forAccountWithID:(id)a4 messageContext:(id)a5;
- (void)shutdown;
- (void)signData:(id)a3 withAlgorithm:(int64_t)a4 onService:(id)a5 options:(id)a6 requestUUID:(id)a7 messageContext:(id)a8;
- (void)startOTRTest:(id)a3 priority:(int64_t)a4 messageContext:(id)a5;
- (void)systemDidLeaveDataProtectionLock;
- (void)systemDidLeaveFirstDataProtectionLock;
- (void)systemDidLock;
- (void)systemDidUnlock;
- (void)systemDidWake;
- (void)systemWillSleep;
- (void)testCloudQRConnection:(id)a3 messageContext:(id)a4;
- (void)triggerFinalDeregisterWithMessageContext:(id)a3;
- (void)tryForceFamilyFetchWithMessageContext:(id)a3;
- (void)unregisterAccount:(id)a3 messageContext:(id)a4;
- (void)unregisterPluginForGroup:(id)a3 options:(id)a4 messageContext:(id)a5;
- (void)unvalidateAliases:(id)a3 forAccount:(id)a4 messageContext:(id)a5;
- (void)updateAccount:(id)a3 withAccountInfo:(id)a4 messageContext:(id)a5;
- (void)updateAuthorizationCredentials:(id)a3 token:(id)a4 forAccount:(id)a5 messageContext:(id)a6;
- (void)updateMembers:(id)a3 forGroup:(id)a4 sessionID:(id)a5 withContext:(id)a6 messagingCapabilities:(id)a7 triggeredLocally:(BOOL)a8 lightweightStatusDict:(id)a9 messageContext:(id)a10;
- (void)updateParticipantData:(id)a3 forGroup:(id)a4 sessionID:(id)a5 withContext:(id)a6 messageContext:(id)a7;
- (void)updateParticipantInfo:(id)a3 forGroup:(id)a4 sessionID:(id)a5 messageContext:(id)a6;
- (void)updateParticipantType:(unsigned __int16)a3 forGroup:(id)a4 sessionID:(id)a5 members:(id)a6 triggeredLocally:(BOOL)a7 withContext:(id)a8 lightweightStatusDict:(id)a9 messageContext:(id)a10;
- (void)updateSubServices:(id)a3 forService:(id)a4 deviceUniqueID:(id)a5 messageContext:(id)a6;
- (void)updateTopics;
- (void)updateUserWithOldUserName:(id)a3 newUserName:(id)a4 messageContext:(id)a5;
- (void)validateAliases:(id)a3 forAccount:(id)a4 messageContext:(id)a5;
- (void)validateListenerForLocalObject:(id)a3 andPerformBlock:(id)a4;
- (void)validateProfileForAccount:(id)a3 messageContext:(id)a4;
- (void)verifySignedData:(id)a3 matchesData:(id)a4 forAlgorithm:(int64_t)a5 onService:(id)a6 tokenUri:(id)a7 options:(id)a8 requestUUID:(id)a9 messageContext:(id)a10;
- (void)wakeClientForService:(id)a3 stream:(id)a4 flags:(unint64_t)a5;
- (void)writeIDSDirectMessageInfo:(_dmsg_info *)a3;
- (void)xpcObject:(id)a3 objectContext:(id)a4 messageContext:(id)a5;
@end

@implementation IDSDaemon

- (void)setupRealtimeEncryptionController:(id)a3 forAccountWithID:(id)a4 messageContext:(id)a5
{
  v7 = (__CFString *)a3;
  id v8 = a4;
  id v32 = a5;
  uint64_t v9 = OSLogHandleForIDSCategory("IDSDaemon");
  v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v34 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "setting up the realtime encryption controller for the unique ID: %@",  buf,  0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v11) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    v29 = v7;
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"setting up the realtime encryption controller for the unique ID: %@");
  }

  v12 = (void *)objc_claimAutoreleasedReturnValue( +[IDSGroupEncryptionController sharedInstance]( &OBJC_CLASS___IDSGroupEncryptionController,  "sharedInstance",  v29));
  if (!v12)
  {
    uint64_t v13 = OSLogHandleForIDSCategory("Warning");
    v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412546;
      v34 = @"IDSDaemon";
      __int16 v35 = 2112;
      v36 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "%@ - Could not initialize the realtime encryption controller for the unique ID: %@, ignoring...",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v15))
    {
      _IDSWarnV( @"IDSFoundation",  @"%@ - Could not initialize the realtime encryption controller for the unique ID: %@, ignoring...");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"%@ - Could not initialize the realtime encryption controller for the unique ID: %@, ignoring...");
      v30 = @"IDSDaemon";
      v31 = v7;
      _IDSLogTransport( @"Warning",  @"IDS",  @"%@ - Could not initialize the realtime encryption controller for the unique ID: %@, ignoring...");
    }
  }

  v16 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDAccountController sharedInstance]( &OBJC_CLASS___IDSDAccountController,  "sharedInstance",  v30,  v31));
  v17 = (void *)objc_claimAutoreleasedReturnValue([v16 accountWithUniqueID:v8]);

  v18 = (void *)objc_claimAutoreleasedReturnValue([v17 primaryRegistration]);
  v19 = (void *)objc_claimAutoreleasedReturnValue([v18 pushToken]);
  v20 = (void *)objc_claimAutoreleasedReturnValue([v17 service]);
  v21 = (void *)objc_claimAutoreleasedReturnValue([v20 identifier]);
  v22 = (void *)objc_claimAutoreleasedReturnValue( +[IDSPushToken pushTokenWithData:withServiceLoggingHint:]( &OBJC_CLASS___IDSPushToken,  "pushTokenWithData:withServiceLoggingHint:",  v19,  v21));

  v23 = (void *)objc_claimAutoreleasedReturnValue([v17 prefixedURIStringsFromRegistration]);
  v24 = (void *)objc_claimAutoreleasedReturnValue([v23 firstObject]);
  v25 = (void *)objc_claimAutoreleasedReturnValue([v17 service]);
  v26 = (void *)objc_claimAutoreleasedReturnValue([v25 identifier]);
  v27 = (void *)objc_claimAutoreleasedReturnValue( +[IDSURI URIWithPrefixedURI:withServiceLoggingHint:]( &OBJC_CLASS___IDSURI,  "URIWithPrefixedURI:withServiceLoggingHint:",  v24,  v26));
  [v12 setAccount:v8 fromURI:v27 forGroup:v7];

  id v28 = [v12 createRealTimeEncryptionFullIdentityForDevice:v22 completionBlock:0];
}

- (void)sendRealTimeMediaPrekey:(id)a3 toGroup:(id)a4 messageContext:(id)a5
{
  v7 = (__CFString *)a3;
  id v8 = (__CFString *)a4;
  id v9 = a5;
  uint64_t v10 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    v30 = v7;
    __int16 v31 = 2112;
    id v32 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "sending the device prekey for the unique ID: %@ to group: %@",  buf,  0x16u);
  }

  if (os_log_shim_legacy_logging_enabled(v12) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    v27 = v7;
    id v28 = v8;
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"sending the device prekey for the unique ID: %@ to group: %@");
  }

  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[IDSGroupEncryptionController sharedInstance]( &OBJC_CLASS___IDSGroupEncryptionController,  "sharedInstance",  v27,  v28));
  if (v13)
  {
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDSessionController sharedInstance](&OBJC_CLASS___IDSDSessionController, "sharedInstance"));
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 sessionWithUniqueID:v8]);

    if (v15)
    {
      v16 = (void *)objc_claimAutoreleasedReturnValue([v15 destinations]);
      v17 = (void *)objc_claimAutoreleasedReturnValue([v16 allObjects]);
      v18 = (void *)objc_claimAutoreleasedReturnValue([v15 uniqueID]);
      v19 = (void *)objc_claimAutoreleasedReturnValue([v15 destinationsLightweightStatus]);
      [v13 setMembers:v17 forGroup:v8 sessionID:v18 lightweightStatusDict:v19];

      v20 = (void *)objc_claimAutoreleasedReturnValue([v15 uniqueID]);
      [v13 sendPublicKeyToGroup:v8 sessionID:v20];
    }

    else
    {
      uint64_t v24 = OSLogHandleForIDSCategory("Warning");
      v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412546;
        v30 = @"IDSDaemon";
        __int16 v31 = 2112;
        id v32 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_ERROR,  "%@ - Could not find the session for the group: %@",  buf,  0x16u);
      }

      if (os_log_shim_legacy_logging_enabled(v26))
      {
        _IDSWarnV(@"IDSFoundation", @"%@ - Could not find the session for the group: %@");
        _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"%@ - Could not find the session for the group: %@");
        _IDSLogTransport(@"Warning", @"IDS", @"%@ - Could not find the session for the group: %@");
      }
    }
  }

  else
  {
    uint64_t v21 = OSLogHandleForIDSCategory("Warning");
    v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412802;
      v30 = @"IDSDaemon";
      __int16 v31 = 2112;
      id v32 = v7;
      __int16 v33 = 2112;
      v34 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_ERROR,  "%@ - Could not get the realtime encryption controller for the unique ID: %@, failing to send the prekey to group %@...",  buf,  0x20u);
    }

    if (os_log_shim_legacy_logging_enabled(v23))
    {
      _IDSWarnV( @"IDSFoundation",  @"%@ - Could not get the realtime encryption controller for the unique ID: %@, failing to send the prekey to group %@...");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"%@ - Could not get the realtime encryption controller for the unique ID: %@, failing to send the prekey to group %@...");
      _IDSLogTransport( @"Warning",  @"IDS",  @"%@ - Could not get the realtime encryption controller for the unique ID: %@, failing to send the prekey to group %@...");
    }
  }
}

- (void)requestPublicKeysForRealTimeEncryption:(id)a3 forAccountWithID:(id)a4 messageContext:(id)a5
{
  id v28 = a3;
  id v7 = a4;
  id v8 = a5;
  uint64_t v9 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "getting public keys for the real-time encryption...",  buf,  2u);
  }

  if (os_log_shim_legacy_logging_enabled(v11) && _IDSShouldLog(0LL, @"IDSDaemon")) {
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"getting public keys for the real-time encryption...");
  }
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[IDSGroupEncryptionController sharedInstance]( &OBJC_CLASS___IDSGroupEncryptionController,  "sharedInstance"));
  if (v12)
  {
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
    v14 = (void *)objc_claimAutoreleasedReturnValue([v13 accountWithUniqueID:v7]);

    uint64_t v15 = objc_alloc_init(&OBJC_CLASS___IMMessageContext);
    -[IMMessageContext setShouldBoost:](v15, "setShouldBoost:", 1LL);
    v16 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
    v17 = (void *)objc_claimAutoreleasedReturnValue([v14 service]);
    v18 = (void *)objc_claimAutoreleasedReturnValue([v17 pushTopic]);
    v19 = (void *)objc_claimAutoreleasedReturnValue( [v16 broadcasterForTopic:v18 entitlement:kIDSTestToolEntitlement command:0 messageContext:v15]);

    v20 = (void *)objc_claimAutoreleasedReturnValue([v12 publicKeys]);
    xpc_object_t v21 = xpc_dictionary_create(0LL, 0LL, 0LL);
    if (v21)
    {
      xpc_object_t v22 = xpc_int64_create(0LL);
      xpc_dictionary_set_value(v21, "object", v22);

      IMInsertBoolsToXPCDictionary(v21, "xpc-object");
      uint64_t v23 = (__CFDictionary *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
      CFDictionarySetValue(v23, @"object-type", @"public-keys");
      if (v20) {
        CFDictionarySetValue(v23, @"public-keys", v20);
      }
      id v27 = -[__CFDictionary copy](v23, "copy");
      IMInsertKeyedCodableObjectsToXPCDictionary(v21, "object-context");

      [v19 sendXPCObject:v21];
    }
  }

  else
  {
    uint64_t v24 = OSLogHandleForIDSCategory("Warning");
    v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v30 = @"IDSDaemon";
      _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_ERROR,  "%@ - Could not get the realtime encryption controller",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v26))
    {
      _IDSWarnV(@"IDSFoundation", @"%@ - Could not get the realtime encryption controller");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"%@ - Could not get the realtime encryption controller");
      _IDSLogTransport(@"Warning", @"IDS", @"%@ - Could not get the realtime encryption controller");
    }
  }
}

- (void)sendRealTimeEncryptionMasterKeyMaterial:(id)a3 toGroup:(id)a4 messageContext:(id)a5
{
  id v7 = (__CFString *)a3;
  id v8 = (__CFString *)a4;
  id v9 = a5;
  uint64_t v10 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    __int16 v33 = v7;
    __int16 v34 = 2112;
    __int16 v35 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "sending the master key material for the unique ID: %@ to group: %@",  buf,  0x16u);
  }

  if (os_log_shim_legacy_logging_enabled(v12) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    uint64_t v26 = v7;
    id v27 = v8;
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"sending the master key material for the unique ID: %@ to group: %@");
  }

  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[IDSGroupEncryptionController sharedInstance]( &OBJC_CLASS___IDSGroupEncryptionController,  "sharedInstance",  v26,  v27));
  if (v13)
  {
    v14 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDSessionController sharedInstance](&OBJC_CLASS___IDSDSessionController, "sharedInstance"));
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 sessionWithUniqueID:v8]);

    if (v15)
    {
      uint64_t v18 = im_primary_queue(v16, v17);
      v19 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v18);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_100004E90;
      block[3] = &unk_1008F5F58;
      id v29 = v13;
      v30 = v8;
      id v31 = v15;
      dispatch_async(v19, block);
    }

    else
    {
      uint64_t v23 = OSLogHandleForIDSCategory("Warning");
      uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412546;
        __int16 v33 = @"IDSDaemon";
        __int16 v34 = 2112;
        __int16 v35 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_ERROR,  "%@ - Could not find the session for the group: %@",  buf,  0x16u);
      }

      if (os_log_shim_legacy_logging_enabled(v25))
      {
        _IDSWarnV(@"IDSFoundation", @"%@ - Could not find the session for the group: %@");
        _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"%@ - Could not find the session for the group: %@");
        _IDSLogTransport(@"Warning", @"IDS", @"%@ - Could not find the session for the group: %@");
      }
    }
  }

  else
  {
    uint64_t v20 = OSLogHandleForIDSCategory("Warning");
    xpc_object_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412802;
      __int16 v33 = @"IDSDaemon";
      __int16 v34 = 2112;
      __int16 v35 = v7;
      __int16 v36 = 2112;
      v37 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "%@ - Could not get the realtime encryption controller for the unique ID: %@, failing to send the master key mate rial to group: %@",  buf,  0x20u);
    }

    if (os_log_shim_legacy_logging_enabled(v22))
    {
      _IDSWarnV( @"IDSFoundation",  @"%@ - Could not get the realtime encryption controller for the unique ID: %@, failing to send the master key material to group: %@");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"%@ - Could not get the realtime encryption controller for the unique ID: %@, failing to send the master key material to group: %@");
      _IDSLogTransport( @"Warning",  @"IDS",  @"%@ - Could not get the realtime encryption controller for the unique ID: %@, failing to send the master key material to group: %@");
    }
  }
}

- (void)sendRealTimeEncryptionMKMRecoveryRequest:(id)a3 toGroup:(id)a4
{
  v5 = (__CFString *)a3;
  v6 = (__CFString *)a4;
  uint64_t v7 = OSLogHandleForIDSCategory("IDSDaemon");
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    id v29 = v5;
    __int16 v30 = 2112;
    id v31 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "sending the master key material recovery request for the unique ID: %@ to group: %@",  buf,  0x16u);
  }

  if (os_log_shim_legacy_logging_enabled(v9) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    uint64_t v23 = v5;
    uint64_t v24 = v6;
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"sending the master key material recovery request for the unique ID: %@ to group: %@");
  }

  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[IDSGroupEncryptionController sharedInstance]( &OBJC_CLASS___IDSGroupEncryptionController,  "sharedInstance",  v23,  v24));
  if (v10)
  {
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDSessionController sharedInstance](&OBJC_CLASS___IDSDSessionController, "sharedInstance"));
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 sessionWithUniqueID:v6]);

    if (v12)
    {
      uint64_t v15 = im_primary_queue(v13, v14);
      uint64_t v16 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v15);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_1000052CC;
      block[3] = &unk_1008F5F80;
      id v26 = v10;
      id v27 = v6;
      dispatch_async(v16, block);
    }

    else
    {
      uint64_t v20 = OSLogHandleForIDSCategory("Warning");
      xpc_object_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412546;
        id v29 = @"IDSDaemon";
        __int16 v30 = 2112;
        id v31 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "%@ - Could not find the session for the group: %@",  buf,  0x16u);
      }

      if (os_log_shim_legacy_logging_enabled(v22))
      {
        _IDSWarnV(@"IDSFoundation", @"%@ - Could not find the session for the group: %@");
        _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"%@ - Could not find the session for the group: %@");
        _IDSLogTransport(@"Warning", @"IDS", @"%@ - Could not find the session for the group: %@");
      }
    }
  }

  else
  {
    uint64_t v17 = OSLogHandleForIDSCategory("Warning");
    uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412802;
      id v29 = @"IDSDaemon";
      __int16 v30 = 2112;
      id v31 = v5;
      __int16 v32 = 2112;
      __int16 v33 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "%@ - Could not get the realtime encryption controller for the unique ID: %@, failing to send the master key mate rial to group: %@",  buf,  0x20u);
    }

    if (os_log_shim_legacy_logging_enabled(v19))
    {
      _IDSWarnV( @"IDSFoundation",  @"%@ - Could not get the realtime encryption controller for the unique ID: %@, failing to send the master key material to group: %@");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"%@ - Could not get the realtime encryption controller for the unique ID: %@, failing to send the master key material to group: %@");
      _IDSLogTransport( @"Warning",  @"IDS",  @"%@ - Could not get the realtime encryption controller for the unique ID: %@, failing to send the master key material to group: %@");
    }
  }
}

- (void)requestRealTimeEncryptionMasterKeyMaterial:(id)a3 forGroup:(id)a4 messageContext:(id)a5
{
  uint64_t v7 = (__CFString *)a3;
  id v8 = (__CFString *)a4;
  id v9 = a5;
  uint64_t v10 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    __int16 v33 = v7;
    __int16 v34 = 2112;
    __int16 v35 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Request the master key material(MKM) for unique ID: %@ group: %@",  buf,  0x16u);
  }

  if (os_log_shim_legacy_logging_enabled(v12) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    id v26 = v7;
    id v27 = v8;
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Request the master key material(MKM) for unique ID: %@ group: %@");
  }

  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[IDSGroupEncryptionController sharedInstance]( &OBJC_CLASS___IDSGroupEncryptionController,  "sharedInstance",  v26,  v27));
  if (v13)
  {
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDSessionController sharedInstance](&OBJC_CLASS___IDSDSessionController, "sharedInstance"));
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 sessionWithUniqueID:v8]);

    if (v15)
    {
      uint64_t v18 = im_primary_queue(v16, v17);
      uint64_t v19 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v18);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_1000056F4;
      block[3] = &unk_1008F5F58;
      id v29 = v13;
      __int16 v30 = v8;
      id v31 = v15;
      dispatch_async(v19, block);
    }

    else
    {
      uint64_t v23 = OSLogHandleForIDSCategory("Warning");
      uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412546;
        __int16 v33 = @"IDSDaemon";
        __int16 v34 = 2112;
        __int16 v35 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_ERROR,  "%@ - Could not find the session for the group: %@",  buf,  0x16u);
      }

      if (os_log_shim_legacy_logging_enabled(v25))
      {
        _IDSWarnV(@"IDSFoundation", @"%@ - Could not find the session for the group: %@");
        _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"%@ - Could not find the session for the group: %@");
        _IDSLogTransport(@"Warning", @"IDS", @"%@ - Could not find the session for the group: %@");
      }
    }
  }

  else
  {
    uint64_t v20 = OSLogHandleForIDSCategory("Warning");
    xpc_object_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412802;
      __int16 v33 = @"IDSDaemon";
      __int16 v34 = 2112;
      __int16 v35 = v7;
      __int16 v36 = 2112;
      v37 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "%@ - Could not get the realtime encryption controller for the unique ID: %@, failing to send the master key mate rial to group: %@",  buf,  0x20u);
    }

    if (os_log_shim_legacy_logging_enabled(v22))
    {
      _IDSWarnV( @"IDSFoundation",  @"%@ - Could not get the realtime encryption controller for the unique ID: %@, failing to send the master key material to group: %@");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"%@ - Could not get the realtime encryption controller for the unique ID: %@, failing to send the master key material to group: %@");
      _IDSLogTransport( @"Warning",  @"IDS",  @"%@ - Could not get the realtime encryption controller for the unique ID: %@, failing to send the master key material to group: %@");
    }
  }
}

- (void)resetRealTimeEncryptionKeys:(id)a3 forGroup:(id)a4 messageContext:(id)a5
{
  uint64_t v7 = (__CFString *)a3;
  id v8 = (__CFString *)a4;
  id v9 = a5;
  uint64_t v10 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    uint64_t v25 = v7;
    __int16 v26 = 2112;
    id v27 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "resetting all keys for the unique ID: %@ group: %@",  buf,  0x16u);
  }

  if (os_log_shim_legacy_logging_enabled(v12) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    uint64_t v22 = v7;
    uint64_t v23 = v8;
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"resetting all keys for the unique ID: %@ group: %@");
  }

  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[IDSGroupEncryptionController sharedInstance]( &OBJC_CLASS___IDSGroupEncryptionController,  "sharedInstance",  v22,  v23));
  if (v13)
  {
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDSessionController sharedInstance](&OBJC_CLASS___IDSDSessionController, "sharedInstance"));
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 sessionWithUniqueID:v8]);

    if (v15)
    {
      [v13 resetKeysForGroup:v8 shouldRemoveCurrentParticipants:1];
    }

    else
    {
      uint64_t v19 = OSLogHandleForIDSCategory("Warning");
      uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412546;
        uint64_t v25 = @"IDSDaemon";
        __int16 v26 = 2112;
        id v27 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "%@ - Could not find the session for the group: %@",  buf,  0x16u);
      }

      if (os_log_shim_legacy_logging_enabled(v21))
      {
        _IDSWarnV(@"IDSFoundation", @"%@ - Could not find the session for the group: %@");
        _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"%@ - Could not find the session for the group: %@");
        _IDSLogTransport(@"Warning", @"IDS", @"%@ - Could not find the session for the group: %@");
      }
    }
  }

  else
  {
    uint64_t v16 = OSLogHandleForIDSCategory("Warning");
    uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412802;
      uint64_t v25 = @"IDSDaemon";
      __int16 v26 = 2112;
      id v27 = v7;
      __int16 v28 = 2112;
      id v29 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "%@ - Could not get the realtime encryption controller for the unique ID: %@, failing to send the master key mate rial to group: %@",  buf,  0x20u);
    }

    if (os_log_shim_legacy_logging_enabled(v18))
    {
      _IDSWarnV( @"IDSFoundation",  @"%@ - Could not get the realtime encryption controller for the unique ID: %@, failing to send the master key material to group: %@");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"%@ - Could not get the realtime encryption controller for the unique ID: %@, failing to send the master key material to group: %@");
      _IDSLogTransport( @"Warning",  @"IDS",  @"%@ - Could not get the realtime encryption controller for the unique ID: %@, failing to send the master key material to group: %@");
    }
  }
}

- (id)cloudRelayRegisteredAccountWithError:(id *)a3
{
  v4 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDServiceController sharedInstance](&OBJC_CLASS___IDSDServiceController, "sharedInstance"));
  v6 = (void *)objc_claimAutoreleasedReturnValue([v5 serviceWithIdentifier:@"com.apple.private.alloy.multiplex1"]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v4 appleIDAccountOnService:v6]);

  if (v7 && ([v7 isRegistered] & 1) != 0)
  {
    id v8 = v7;
  }

  else if (a3)
  {
    id v9 = objc_alloc(&OBJC_CLASS___NSError);
    id v8 = 0LL;
    *a3 = -[NSError initWithDomain:code:userInfo:](v9, "initWithDomain:code:userInfo:", IDSSendErrorDomain, 2LL, 0LL);
  }

  else
  {
    id v8 = 0LL;
  }

  return v8;
}

- (void)homeKitGetServiceUserIDsWithMessageContext:(id)a3
{
  id v4 = a3;
  id v17 = 0LL;
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon cloudRelayRegisteredAccountWithError:](self, "cloudRelayRegisteredAccountWithError:", &v17));
  id v6 = v17;
  if (v6)
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v4 localObject]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon broadcasterForLocalObject:messageContext:]( self,  "broadcasterForLocalObject:messageContext:",  v7,  v4));

    if (v8) {
      [v8 serviceUserIDs:0 error:v6];
    }
  }

  else
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v5 registration]);
    id v9 = objc_alloc_init(&OBJC_CLASS___IDSHomeKitCloudRelayServiceUserIDsMessage);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[IDSRegistrationKeyManager sharedInstance]( &OBJC_CLASS___IDSRegistrationKeyManager,  "sharedInstance"));
    -[IDSHomeKitCloudRelayServiceUserIDsMessage setIdentityPrivateKey:]( v9,  "setIdentityPrivateKey:",  [v10 identityPrivateKey]);

    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v8 registrationCert]);
    -[IDSHomeKitCloudRelayServiceUserIDsMessage setIDCertificate:](v9, "setIDCertificate:", v11);

    -[IDSHomeKitCloudRelayServiceUserIDsMessage setSubService:]( v9,  "setSubService:",  @"com.apple.private.alloy.willow");
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v8 dsHandle]);
    -[IDSHomeKitCloudRelayServiceUserIDsMessage setUserID:](v9, "setUserID:", v12);

    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[IDSPushHandler sharedInstanceWithPortName:]( &OBJC_CLASS___IDSPushHandler,  "sharedInstanceWithPortName:",  @"com.apple.identityservicesd.aps"));
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v13 pushToken]);
    -[IDSHomeKitCloudRelayServiceUserIDsMessage setPushToken:](v9, "setPushToken:", v14);

    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    v15[2] = sub_10001F700;
    v15[3] = &unk_1008F6538;
    v15[4] = self;
    id v16 = v4;
    -[IDSHomeKitCloudRelayServiceUserIDsMessage setCompletionBlock:](v9, "setCompletionBlock:", v15);
    -[FTMessageDelivery sendMessage:](self->_homeKitMessageDelivery, "sendMessage:", v9);
  }
}

- (void)homeKitGetAdminAccessTokensWithServiceUserID:(id)a3 accessoryID:(id)a4 pairingToken:(id)a5 messageContext:(id)a6
{
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  id v13 = a6;
  id v30 = 0LL;
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon cloudRelayRegisteredAccountWithError:]( self,  "cloudRelayRegisteredAccountWithError:",  &v30));
  id v15 = v30;
  if (v15)
  {
    id v16 = (void *)objc_claimAutoreleasedReturnValue([v13 localObject]);
    id v17 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon broadcasterForLocalObject:messageContext:]( self,  "broadcasterForLocalObject:messageContext:",  v16,  v13));

    if (v17) {
      [v17 adminAccessTokens:0 error:v15];
    }
  }

  else
  {
    id v17 = (void *)objc_claimAutoreleasedReturnValue([v14 registration]);
    uint64_t v18 = objc_alloc_init(&OBJC_CLASS___IDSHomeKitCloudRelayAdminAccessTokenMessage);
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue( +[IDSRegistrationKeyManager sharedInstance]( &OBJC_CLASS___IDSRegistrationKeyManager,  "sharedInstance"));
    -[IDSHomeKitCloudRelayAdminAccessTokenMessage setIdentityPrivateKey:]( v18,  "setIdentityPrivateKey:",  [v19 identityPrivateKey]);

    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v17 registrationCert]);
    -[IDSHomeKitCloudRelayAdminAccessTokenMessage setIDCertificate:](v18, "setIDCertificate:", v20);

    -[IDSHomeKitCloudRelayAdminAccessTokenMessage setSubService:]( v18,  "setSubService:",  @"com.apple.private.alloy.willow");
    -[IDSHomeKitCloudRelayAdminAccessTokenMessage setServiceUserID:](v18, "setServiceUserID:", v10);
    -[IDSHomeKitCloudRelayAdminAccessTokenMessage setAccessoryID:](v18, "setAccessoryID:", v11);
    -[IDSHomeKitCloudRelayAdminAccessTokenMessage setPairingToken:](v18, "setPairingToken:", v12);
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[IDSPushHandler sharedInstanceWithPortName:]( &OBJC_CLASS___IDSPushHandler,  "sharedInstanceWithPortName:",  @"com.apple.identityservicesd.aps"));
    id v22 = v13;
    uint64_t v23 = v14;
    id v24 = v12;
    id v25 = v11;
    id v26 = v10;
    id v27 = (void *)objc_claimAutoreleasedReturnValue([v21 pushToken]);
    -[IDSHomeKitCloudRelayAdminAccessTokenMessage setPushToken:](v18, "setPushToken:", v27);

    id v10 = v26;
    id v11 = v25;
    id v12 = v24;
    uint64_t v14 = v23;
    id v13 = v22;
    id v15 = 0LL;

    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3221225472LL;
    v28[2] = sub_10001FB14;
    v28[3] = &unk_1008F6538;
    v28[4] = self;
    id v29 = v13;
    -[IDSHomeKitCloudRelayAdminAccessTokenMessage setCompletionBlock:](v18, "setCompletionBlock:", v28);
    -[FTMessageDelivery sendMessage:](self->_homeKitMessageDelivery, "sendMessage:", v18);
  }
}

- (void)homeKitGetConsentTokensWithServiceUserID:(id)a3 accessoryIDs:(id)a4 adminID:(id)a5 messageContext:(id)a6
{
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  id v13 = a6;
  id v30 = 0LL;
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon cloudRelayRegisteredAccountWithError:]( self,  "cloudRelayRegisteredAccountWithError:",  &v30));
  id v15 = v30;
  if (v15)
  {
    id v16 = (void *)objc_claimAutoreleasedReturnValue([v13 localObject]);
    id v17 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon broadcasterForLocalObject:messageContext:]( self,  "broadcasterForLocalObject:messageContext:",  v16,  v13));

    if (v17) {
      [v17 consentTokens:0 error:v15];
    }
  }

  else
  {
    id v17 = (void *)objc_claimAutoreleasedReturnValue([v14 registration]);
    uint64_t v18 = objc_alloc_init(&OBJC_CLASS___IDSHomeKitCloudRelayConsentTokensMessage);
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue( +[IDSRegistrationKeyManager sharedInstance]( &OBJC_CLASS___IDSRegistrationKeyManager,  "sharedInstance"));
    -[IDSHomeKitCloudRelayConsentTokensMessage setIdentityPrivateKey:]( v18,  "setIdentityPrivateKey:",  [v19 identityPrivateKey]);

    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v17 registrationCert]);
    -[IDSHomeKitCloudRelayConsentTokensMessage setIDCertificate:](v18, "setIDCertificate:", v20);

    -[IDSHomeKitCloudRelayConsentTokensMessage setSubService:]( v18,  "setSubService:",  @"com.apple.private.alloy.willow");
    -[IDSHomeKitCloudRelayConsentTokensMessage setServiceUserID:](v18, "setServiceUserID:", v10);
    -[IDSHomeKitCloudRelayConsentTokensMessage setAdminID:](v18, "setAdminID:", v12);
    -[IDSHomeKitCloudRelayConsentTokensMessage setAccessoryIDs:](v18, "setAccessoryIDs:", v11);
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[IDSPushHandler sharedInstanceWithPortName:]( &OBJC_CLASS___IDSPushHandler,  "sharedInstanceWithPortName:",  @"com.apple.identityservicesd.aps"));
    id v22 = v13;
    uint64_t v23 = v14;
    id v24 = v12;
    id v25 = v11;
    id v26 = v10;
    id v27 = (void *)objc_claimAutoreleasedReturnValue([v21 pushToken]);
    -[IDSHomeKitCloudRelayConsentTokensMessage setPushToken:](v18, "setPushToken:", v27);

    id v10 = v26;
    id v11 = v25;
    id v12 = v24;
    uint64_t v14 = v23;
    id v13 = v22;
    id v15 = 0LL;

    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3221225472LL;
    v28[2] = sub_100020048;
    v28[3] = &unk_1008F6538;
    v28[4] = self;
    id v29 = v13;
    -[IDSHomeKitCloudRelayConsentTokensMessage setCompletionBlock:](v18, "setCompletionBlock:", v28);
    -[FTMessageDelivery sendMessage:](self->_homeKitMessageDelivery, "sendMessage:", v18);
  }
}

- (void)homeKitGetUserAccessTokensWithServiceUserID:(id)a3 userID:(id)a4 userHandle:(id)a5 accessoryRequests:(id)a6 messageContext:(id)a7
{
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  id v16 = a7;
  id v32 = 0LL;
  id v17 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon cloudRelayRegisteredAccountWithError:]( self,  "cloudRelayRegisteredAccountWithError:",  &v32));
  id v18 = v32;
  if (v18)
  {
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v16 localObject]);
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon broadcasterForLocalObject:messageContext:]( self,  "broadcasterForLocalObject:messageContext:",  v19,  v16));

    if (v20) {
      [v20 userAccessTokens:0 error:v18];
    }
  }

  else
  {
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v17 registration]);
    uint64_t v21 = objc_alloc_init(&OBJC_CLASS___IDSHomeKitCloudRelayUserAccessTokensMessage);
    id v28 = v12;
    id v29 = v14;
    id v22 = (void *)objc_claimAutoreleasedReturnValue( +[IDSRegistrationKeyManager sharedInstance]( &OBJC_CLASS___IDSRegistrationKeyManager,  "sharedInstance"));
    -[IDSHomeKitCloudRelayUserAccessTokensMessage setIdentityPrivateKey:]( v21,  "setIdentityPrivateKey:",  [v22 identityPrivateKey]);

    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v20 registrationCert]);
    -[IDSHomeKitCloudRelayUserAccessTokensMessage setIDCertificate:](v21, "setIDCertificate:", v23);

    -[IDSHomeKitCloudRelayUserAccessTokensMessage setSubService:]( v21,  "setSubService:",  @"com.apple.private.alloy.willow");
    -[IDSHomeKitCloudRelayUserAccessTokensMessage setServiceUserID:](v21, "setServiceUserID:", v28);
    -[IDSHomeKitCloudRelayUserAccessTokensMessage setUserID:](v21, "setUserID:", v13);
    -[IDSHomeKitCloudRelayUserAccessTokensMessage setUserHandle:](v21, "setUserHandle:", v14);
    id v24 = (void *)objc_claimAutoreleasedReturnValue( +[IDSPushHandler sharedInstanceWithPortName:]( &OBJC_CLASS___IDSPushHandler,  "sharedInstanceWithPortName:",  @"com.apple.identityservicesd.aps"));
    id v25 = v15;
    id v26 = v13;
    id v27 = (void *)objc_claimAutoreleasedReturnValue([v24 pushToken]);
    -[IDSHomeKitCloudRelayUserAccessTokensMessage setPushToken:](v21, "setPushToken:", v27);

    id v13 = v26;
    id v15 = v25;

    id v12 = v28;
    id v14 = v29;
    -[IDSHomeKitCloudRelayUserAccessTokensMessage setAccessoryRequests:](v21, "setAccessoryRequests:", v15);
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472LL;
    v30[2] = sub_10002045C;
    v30[3] = &unk_1008F6538;
    v30[4] = self;
    id v31 = v16;
    -[IDSHomeKitCloudRelayUserAccessTokensMessage setCompletionBlock:](v21, "setCompletionBlock:", v30);
    -[FTMessageDelivery sendMessage:](self->_homeKitMessageDelivery, "sendMessage:", v21);
  }
}

- (void)requestVMData:(id)a3 requestID:(id)a4 messageContext:(id)a5
{
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 localObject]);
  unsigned __int8 v12 = -[IDSDaemon validateListenerForLocalObject:andCheckEntitlement:]( self,  "validateListenerForLocalObject:andCheckEntitlement:",  v11,  kIDSVMEntitlement);

  if ((v12 & 1) != 0)
  {
    id v13 = -[IDSVMRequest initWithDataRepresentation:]( objc_alloc(&OBJC_CLASS___IDSVMRequest),  "initWithDataRepresentation:",  v8);
    id v14 = v13;
    if (v13)
    {
      if ((id)-[IDSVMRequest purpose](v13, "purpose") == (id)1)
      {
        id v15 = objc_alloc_init(&OBJC_CLASS___IDSVMRegistrationResponse);
        id v16 = (void *)objc_claimAutoreleasedReturnValue(-[IDSVMRegistrationResponse dataRepresentation](v15, "dataRepresentation"));

        -[IDSDaemon _respondToVMDataRequestWithData:requestID:error:messageContext:]( self,  "_respondToVMDataRequestWithData:requestID:error:messageContext:",  v16,  v9,  0LL,  v10);
        goto LABEL_13;
      }

      id v18 = (IDSVMRequest *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSVMErrorDomain,  2LL,  0LL));
      uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog vm](&OBJC_CLASS___IMRGLog, "vm"));
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_11;
      }
    }

    else
    {
      id v18 = (IDSVMRequest *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSVMErrorDomain,  2LL,  0LL));
      uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog vm](&OBJC_CLASS___IMRGLog, "vm"));
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
LABEL_11:
        int v20 = 138412546;
        id v21 = v9;
        __int16 v22 = 2112;
        uint64_t v23 = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "RequestID %@ client gave an unsupported request to the daemon. Returning error %@",  (uint8_t *)&v20,  0x16u);
      }
    }

    -[IDSDaemon _respondToVMDataRequestWithData:requestID:error:messageContext:]( self,  "_respondToVMDataRequestWithData:requestID:error:messageContext:",  0LL,  v9,  v18,  v10);
    goto LABEL_13;
  }

  id v14 = (IDSVMRequest *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSVMErrorDomain,  1LL,  0LL));
  id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog vm](&OBJC_CLASS___IMRGLog, "vm"));
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    int v20 = 138412546;
    id v21 = v9;
    __int16 v22 = 2112;
    uint64_t v23 = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "RequestID %@ client is unentitled. Returning error %@",  (uint8_t *)&v20,  0x16u);
  }

  -[IDSDaemon _respondToVMDataRequestWithData:requestID:error:messageContext:]( self,  "_respondToVMDataRequestWithData:requestID:error:messageContext:",  0LL,  v9,  v14,  v10);
LABEL_13:
}

- (void)_respondToVMDataRequestWithData:(id)a3 requestID:(id)a4 error:(id)a5 messageContext:(id)a6
{
  id v9 = a6;
  id v10 = a4;
  id v11 = a3;
  [v9 setReply:1];
  unsigned __int8 v12 = (void *)objc_claimAutoreleasedReturnValue([v9 localObject]);
  id v13 = (id)objc_claimAutoreleasedReturnValue( -[IDSDaemon broadcasterForLocalObject:messageContext:]( self,  "broadcasterForLocalObject:messageContext:",  v12,  v9));

  [v13 vmDataResponse:v11 forRequestID:v10 withError:0];
}

- (void)appleCareSignInUserName:(id)a3 DSID:(id)a4 authToken:(id)a5 requestID:(id)a6 messageContext:(id)a7
{
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  id v16 = a7;
  id v17 = (void *)objc_claimAutoreleasedReturnValue([v16 localObject]);
  unsigned int v18 = -[IDSDaemon validateListenerForLocalObject:andCheckEntitlement:]( self,  "validateListenerForLocalObject:andCheckEntitlement:",  v17,  kIDSAppleCareServicesEntitlement);

  if (v18)
  {
    uint64_t v19 = objc_claimAutoreleasedReturnValue([v13 _stripFZIDPrefix]);

    int v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"D:%@", v19));
    id v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjectsAndKeys:",  v20,  kIDSServiceDefaultsAuthorizationIDKey,  v12,  kIDSServiceDefaultsSelfHandleKey,  0LL));

    __int16 v22 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDRegistrationListener sharedInstance](&OBJC_CLASS___IDSDRegistrationListener, "sharedInstance"));
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472LL;
    v26[2] = sub_1000E1998;
    v26[3] = &unk_1008F9D98;
    v26[4] = self;
    id v27 = v15;
    id v28 = v16;
    id v23 = [v22 addBlockForRegistrationCompletion:v26];

    id v24 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon registrationConductor](self, "registrationConductor"));
    [v24 setShouldSupressRepairLogic:1];

    id v25 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon signInResponder](self, "signInResponder"));
    [v25 iCloudSignInWithUsername:v12 authToken:v14 password:0 accountInfo:v21 accountStatus:0 handles:0];

    id v13 = (id)v19;
  }
}

- (void)appleCareSignOutUserWithRequestID:(id)a3 messageContext:(id)a4
{
  id v10 = a3;
  id v6 = a4;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 localObject]);
  unsigned int v8 = -[IDSDaemon validateListenerForLocalObject:andCheckEntitlement:]( self,  "validateListenerForLocalObject:andCheckEntitlement:",  v7,  kIDSAppleCareServicesEntitlement);

  if (v8)
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon signInResponder](self, "signInResponder"));
    [v9 iCloudSignOut];

    -[IDSDaemon _respondToAppleCareRequestID:withMessageContext:error:]( self,  "_respondToAppleCareRequestID:withMessageContext:error:",  v10,  v6,  0LL);
  }
}

- (void)_respondToAppleCareRequestID:(id)a3 withMessageContext:(id)a4 error:(id)a5
{
  id v8 = a5;
  id v9 = a3;
  id v10 = (void *)objc_claimAutoreleasedReturnValue([a4 localObject]);
  id v11 = (id)objc_claimAutoreleasedReturnValue(-[IDSDaemon listenerRemoteObjectForLocalObject:](self, "listenerRemoteObjectForLocalObject:", v10));

  [v11 applecareResponseForRequestID:v9 withError:v8];
}

- (void)reportSpamMessage:(id)a3 serviceIdentifier:(id)a4 messageContext:(id)a5
{
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  uint64_t v11 = OSLogHandleForIDSCategory("SpamReporting");
  id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    id v13 = (void *)objc_claimAutoreleasedReturnValue([v10 localObject]);
    *(_DWORD *)buf = 138412546;
    id v41 = v13;
    __int16 v42 = 2112;
    id v43 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Told to report spam with localObject %@ for service: %@",  buf,  0x16u);
  }

  if (os_log_shim_legacy_logging_enabled(v14) && _IDSShouldLog(0LL, @"SpamReporting"))
  {
    v37 = (void *)objc_claimAutoreleasedReturnValue([v10 localObject]);
    id v38 = v9;
    _IDSLogV( 0LL,  @"IDSFoundation",  @"SpamReporting",  @"Told to report spam with localObject %@ for service: %@");
  }

  id v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "localObject", v37, v38));
  unsigned __int8 v16 = -[IDSDaemon validateListenerForLocalObject:andCheckEntitlement:]( self,  "validateListenerForLocalObject:andCheckEntitlement:",  v15,  kIDSReportSpamEntitlement);

  if ((v16 & 1) != 0)
  {
    if (-[IDSDaemon _isSpamReportingV1ServerDisabled](self, "_isSpamReportingV1ServerDisabled"))
    {
      uint64_t v17 = OSLogHandleForIDSCategory("SpamReporting");
      unsigned int v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "IDS Server reports that general spam reporting v1 is disabled.",  buf,  2u);
      }

      if (os_log_shim_legacy_logging_enabled(v19)
        && _IDSShouldLog(0LL, @"SpamReporting"))
      {
        _IDSLogV( 0LL,  @"IDSFoundation",  @"SpamReporting",  @"IDS Server reports that general spam reporting v1 is disabled.");
      }
    }

    else
    {
      id v23 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKey:kIDSGeneralSpamReportRecipientURIKey]);
      v39 = (void *)objc_claimAutoreleasedReturnValue([v23 _stripFZIDPrefix]);
      id v24 = (void *)objc_claimAutoreleasedReturnValue([v39 _bestGuessURI]);

      id v25 = v9;
      id v26 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDServiceController sharedInstance](&OBJC_CLASS___IDSDServiceController, "sharedInstance"));
      id v27 = (void *)objc_claimAutoreleasedReturnValue([v26 serviceWithIdentifier:v25]);

      id v28 = v25;
      if ([v27 adHocServiceType])
      {
        id v29 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDServiceController sharedInstance](&OBJC_CLASS___IDSDServiceController, "sharedInstance"));
        id v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "primaryServiceForAdhocServiceType:", objc_msgSend(v27, "adHocServiceType")));

        id v28 = (void *)objc_claimAutoreleasedReturnValue([v30 identifier]);
      }

      id v31 = -[NSMutableDictionary initWithDictionary:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithDictionary:",  v8);
      -[NSMutableDictionary setObject:forKey:](v31, "setObject:forKey:", v25, kIDSGeneralSpamReportSubServiceKey);
      -[NSMutableDictionary setObject:forKey:](v31, "setObject:forKey:", v28, kIDSGeneralSpamReportTopLevelServiceKey);
      id v32 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
      __int16 v33 = (void *)objc_claimAutoreleasedReturnValue([v32 accountWithServiceName:v25 aliasURI:v24]);

      if (v33)
      {
        [v33 reportMessage:v31 toURI:v24];
      }

      else
      {
        uint64_t v34 = OSLogHandleForIDSCategory("SpamReporting");
        __int16 v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
        if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412546;
          id v41 = v25;
          __int16 v42 = 2112;
          id v43 = v24;
          _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEFAULT,  "Couldn't find account with alias for service {serviceIdentifier: %@, alias: %@}",  buf,  0x16u);
        }

        if (os_log_shim_legacy_logging_enabled(v36)
          && _IDSShouldLog(0LL, @"SpamReporting"))
        {
          _IDSLogV( 0LL,  @"IDSFoundation",  @"SpamReporting",  @"Couldn't find account with alias for service {serviceIdentifier: %@, alias: %@}");
        }
      }
    }
  }

  else
  {
    uint64_t v20 = OSLogHandleForIDSCategory("SpamReporting");
    id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Process not entitled to report spam",  buf,  2u);
    }

    if (os_log_shim_legacy_logging_enabled(v22)
      && _IDSShouldLog(0LL, @"SpamReporting"))
    {
      _IDSLogV(0LL, @"IDSFoundation", @"SpamReporting", @"Process not entitled to report spam");
    }
  }
}

- (BOOL)_isSpamReportingV1ServerDisabled
{
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[IDSServerBag sharedInstance](&OBJC_CLASS___IDSServerBag, "sharedInstance"));
  v3 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKey:@"ids-general-spam-report-v1-is-disabled"]);

  if (v3 && (uint64_t v5 = objc_opt_class(&OBJC_CLASS___NSNumber, v4), (objc_opt_isKindOfClass(v3, v5) & 1) != 0))
  {
    unsigned int v6 = [v3 BOOLValue];
    uint64_t v7 = OSLogHandleForIDSCategory("SpamReporting");
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      id v9 = @"NO";
      if (v6) {
        id v9 = @"YES";
      }
      *(_DWORD *)buf = 138412290;
      id v13 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Server Bag provided us with v1 spam reporting value isDisabled: %@",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v10)
      && _IDSShouldLog(0LL, @"SpamReporting"))
    {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"SpamReporting",  @"Server Bag provided us with v1 spam reporting value isDisabled: %@");
    }
  }

  else
  {
    LOBYTE(v6) = 0;
  }

  return v6;
}

+ (id)sharedInstance
{
  if (qword_1009BEAE0 != -1) {
    dispatch_once(&qword_1009BEAE0, &stru_1008FAB08);
  }
  return (id)qword_1009BEAE8;
}

- (IDSDaemon)init
{
  v12.receiver = self;
  v12.super_class = (Class)&OBJC_CLASS___IDSDaemon;
  v2 = -[IDSDaemon init](&v12, "init");
  v3 = v2;
  if (v2)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon systemMonitor](v2, "systemMonitor"));
    unsigned int v5 = [v4 systemIsShuttingDown];

    if (!v5)
    {
      -[IDSDaemon _performSetup](v3, "_performSetup");
      id v9 = v3;
      goto LABEL_9;
    }

    uint64_t v6 = OSLogHandleForIDSCategory("Warning");
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "System is shutting down, not creating daemon",  v11,  2u);
    }

    if (os_log_shim_legacy_logging_enabled(v8))
    {
      _IDSWarnV(@"IDSFoundation", @"System is shutting down, not creating daemon");
      _IDSLogV(0LL, @"IDSFoundation", @"Warning", @"System is shutting down, not creating daemon");
      _IDSLogTransport(@"Warning", @"IDS", @"System is shutting down, not creating daemon");
    }
  }

  id v9 = 0LL;
LABEL_9:

  return v9;
}

- (void)_performSetup
{
  v3 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon pushHandlerForAPSDelegatePort](self, "pushHandlerForAPSDelegatePort"));
  [v3 setShouldWaitToSetTopics:1];

  uint64_t v4 = OSLogHandleForTransportCategory("IDSDaemon");
  unsigned int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[FTDeviceSupport sharedInstance](&OBJC_CLASS___FTDeviceSupport, "sharedInstance"));
    id v7 = (id)objc_claimAutoreleasedReturnValue([v6 deviceInformationString]);
    *(_DWORD *)buf = 138412546;
    *(void *)&uint8_t buf[4] = v7;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = geteuid();
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "identityservicesd launched (%@) user: %d",  buf,  0x12u);
  }

  uint64_t v9 = os_log_shim_legacy_logging_enabled(v8);
  if ((_DWORD)v9)
  {
    if (_IDSShouldLogTransport(v9))
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[FTDeviceSupport sharedInstance](&OBJC_CLASS___FTDeviceSupport, "sharedInstance"));
      v117 = (void *)objc_claimAutoreleasedReturnValue([v10 deviceInformationString]);
      uint64_t v119 = geteuid();
      _IDSLogTransport(@"IDSDaemon", @"IDS", @"identityservicesd launched (%@) user: %d");

      if (_IDSShouldLog(0LL, @"IDSDaemon"))
      {
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[FTDeviceSupport sharedInstance](&OBJC_CLASS___FTDeviceSupport, "sharedInstance", v117, v119));
        v117 = (void *)objc_claimAutoreleasedReturnValue([v11 deviceInformationString]);
        uint64_t v119 = geteuid();
        _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon", @"identityservicesd launched (%@) user: %d");
      }
    }
  }

  objc_super v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration", v117, v119));
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    id v13 = (void *)objc_claimAutoreleasedReturnValue(+[FTDeviceSupport sharedInstance](&OBJC_CLASS___FTDeviceSupport, "sharedInstance"));
    id v14 = (id)objc_claimAutoreleasedReturnValue([v13 deviceInformationString]);
    uid_t v15 = geteuid();
    *(_DWORD *)buf = 138412546;
    *(void *)&uint8_t buf[4] = v14;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "identityservicesd launched: (%@) user: %d",  buf,  0x12u);
  }

  unsigned __int8 v16 = (void *)objc_claimAutoreleasedReturnValue(+[IMLockdownManager sharedInstance](&OBJC_CLASS___IMLockdownManager, "sharedInstance"));
  unsigned int v17 = [v16 isInternalInstall];

  if (v17)
  {
    uint64_t v18 = OSLogHandleForTransportCategory("IDSDaemon");
    uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "Nov 10 2024";
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = "02:10:39";
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "    (build time %s %s)", buf, 0x16u);
    }

    uint64_t v21 = os_log_shim_legacy_logging_enabled(v20);
    if ((_DWORD)v21)
    {
      if (_IDSShouldLogTransport(v21))
      {
        v118 = "Nov 10 2024";
        v120 = "02:10:39";
        _IDSLogTransport(@"IDSDaemon", @"IDS", @"    (build time %s %s)");
        if (_IDSShouldLog(0LL, @"IDSDaemon"))
        {
          v118 = "Nov 10 2024";
          v120 = "02:10:39";
          _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon", @"    (build time %s %s)");
        }
      }
    }

    uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration", v118, v120));
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "Nov 10 2024";
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = "02:10:39";
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "    (build time %s %s)", buf, 0x16u);
    }
  }

  if (_os_feature_enabled_impl("IDS", "QuickerXPCListening"))
  {
    uint64_t v23 = OSLogHandleForIDSCategory("IDSDaemon");
    id v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "Opening up the grant MIG port", buf, 2u);
    }

    id v26 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon daemonMIGInterface](self, "daemonMIGInterface"));
    [v26 setDelegate:self];
    [v26 acceptIncomingGrantRequests];
    if (IMGetDomainBoolForKeyWithDefaultValue( @"com.apple.ids",  @"shouldAllowSimToHostXPC",  0LL)) {
      [v26 launchSim2HostServer];
    }
    uint64_t v27 = OSLogHandleForIDSCategory("IDSDaemon");
    id v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "Opening up the NSXPC Interface", buf, 2u);
    }

    id v30 = -[IDSDaemon daemonXPCInterface](self, "daemonXPCInterface");
    id v31 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon daemonMIGQueryInterface](self, "daemonMIGQueryInterface"));
    [v31 setDelegate:self];
    [v31 acceptIncomingGrantRequests];
    uint64_t v32 = OSLogHandleForIDSCategory("IDSDaemon");
    __int16 v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEBUG,  "Now accepting query grants, setup complete",  buf,  2u);
    }
  }

  __int16 v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "Loading services", buf, 2u);
  }

  id v36 = -[IDSDaemon serviceController](self, "serviceController");
  v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "Done loading services", buf, 2u);
  }

  id v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "Bringing up capabilities", buf, 2u);
  }

  id v39 = -[IDSDaemon daemonCapabilities](self, "daemonCapabilities");
  v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "Bringing up restrictions", buf, 2u);
  }

  id v41 = -[IDSDaemon restrictions](self, "restrictions");
  self->_deviceIsAsleep = 3;
  +[IMLocalObject _setExceptionHandlingDisabled:](&OBJC_CLASS___IMLocalObject, "_setExceptionHandlingDisabled:", 1LL);
  __int16 v42 = objc_alloc_init(&OBJC_CLASS___NSDate);
  birthDate = self->_birthDate;
  self->_birthDate = v42;

  id location = (id)0xAAAAAAAAAAAAAAAALL;
  objc_initWeak(&location, self);
  id v44 = objc_alloc_init(&OBJC_CLASS___BKSApplicationStateMonitor);
  id stateMonitor = self->_stateMonitor;
  self->_id stateMonitor = v44;

  id v46 = self->_stateMonitor;
  v123[0] = _NSConcreteStackBlock;
  v123[1] = 3221225472LL;
  v123[2] = sub_10010A2BC;
  v123[3] = &unk_1008FAB30;
  objc_copyWeak(&v124, &location);
  [v46 setHandler:v123];
  dispatch_queue_attr_t v47 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v48 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v47);
  uint64_t v49 = im_primary_base_queue(v48);
  v50 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v49);
  v51 = (OS_dispatch_queue *)dispatch_queue_create_with_target_V2("IDSDaemon internal queue", v48, v50);
  internalQueue = self->_internalQueue;
  self->_internalQueue = v51;

  v53 = objc_alloc_init(&OBJC_CLASS___IDSIPCBroadcaster);
  notifier = self->_notifier;
  self->_notifier = v53;

  memset(buf, 170, 16);
  pthread_mutexattr_init((pthread_mutexattr_t *)buf);
  pthread_mutexattr_settype((pthread_mutexattr_t *)buf, 2);
  pthread_mutex_init(&self->_listenerLock, (const pthread_mutexattr_t *)buf);
  pthread_mutexattr_destroy((pthread_mutexattr_t *)buf);
  v55 = -[NSMutableArray initWithCapacity:](objc_alloc(&OBJC_CLASS___NSMutableArray), "initWithCapacity:", 2LL);
  listeners = self->_listeners;
  self->_listeners = v55;

  v57 = objc_alloc(&OBJC_CLASS___IDSRateLimiter);
  v58 = (void *)objc_claimAutoreleasedReturnValue( +[IDSServerBag sharedInstanceForBagType:]( &OBJC_CLASS___IDSServerBag,  "sharedInstanceForBagType:",  0LL));
  v59 = (void *)objc_claimAutoreleasedReturnValue([v58 objectForKey:@"reg-update-limit"]);

  if (v59) {
    uint64_t v60 = (uint64_t)[v59 integerValue];
  }
  else {
    uint64_t v60 = 4LL;
  }

  v61 = (void *)objc_claimAutoreleasedReturnValue( +[IDSServerBag sharedInstanceForBagType:]( &OBJC_CLASS___IDSServerBag,  "sharedInstanceForBagType:",  0LL));
  v62 = (void *)objc_claimAutoreleasedReturnValue([v61 objectForKey:@"reg-update-time-limit"]);

  if (v62)
  {
    [v62 doubleValue];
    double v64 = v63;
  }

  else
  {
    double v64 = 3600.0;
  }

  v65 = -[IDSRateLimiter initWithLimit:timeLimit:](v57, "initWithLimit:timeLimit:", v60, v64);
  v66 = objc_alloc(&OBJC_CLASS___IDSRegistrationHashProcessor);
  v67 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon accountController](self, "accountController"));
  v68 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPeerIDManager sharedInstance](&OBJC_CLASS___IDSPeerIDManager, "sharedInstance"));
  v69 = (void *)objc_claimAutoreleasedReturnValue(+[IDSRegistrationKeyManager sharedInstance](&OBJC_CLASS___IDSRegistrationKeyManager, "sharedInstance"));
  v70 = -[IDSRegistrationHashProcessor initWithAccountController:peerIDManager:negativeRegistrationUpdateCache:registrationKeyManager:]( v66,  "initWithAccountController:peerIDManager:negativeRegistrationUpdateCache:registrationKeyManager:",  v67,  v68,  v65,  v69);
  queryUpdateNotifier = self->_queryUpdateNotifier;
  self->_queryUpdateNotifier = v70;

  v72 = NSHomeDirectory();
  v73 = (void *)objc_claimAutoreleasedReturnValue(v72);
  v126[0] = v73;
  v126[1] = @"/Library/IdentityServices/";
  v74 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v126, 2LL));
  v75 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPathComponents:](&OBJC_CLASS___NSURL, "fileURLWithPathComponents:", v74));
  v76 = (void *)objc_claimAutoreleasedReturnValue([v75 path]);

  v77 = -[IDSQuerySDPersistenceManager initWithFilePath:]( objc_alloc(&OBJC_CLASS___IDSQuerySDPersistenceManager),  "initWithFilePath:",  v76);
  persistenceManager = self->_persistenceManager;
  self->_persistenceManager = v77;

  if (_os_feature_enabled_impl("IDS", "SwiftDataForQueryCache"))
  {
    v79 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPeerIDManager sharedInstance](&OBJC_CLASS___IDSPeerIDManager, "sharedInstance"));
    [v79 setPersistenceManager:self->_persistenceManager];
  }

  if (_os_feature_enabled_impl("IDS", "CarrierPigeon"))
  {
    v80 = objc_alloc(&OBJC_CLASS___IDSSenderKeyDistributionManager);
    v81 = -[IDSSenderKeyDistributionManager initWithPersistenceManager:service:]( v80,  "initWithPersistenceManager:service:",  self->_persistenceManager,  IDSServiceNameiMessage);
    senderKeyDistributionManager = self->_senderKeyDistributionManager;
    self->_senderKeyDistributionManager = v81;

    v83 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDeliveryController sharedInstance](&OBJC_CLASS___IDSDeliveryController, "sharedInstance"));
    [v83 setSenderKeyDistributionManager:self->_senderKeyDistributionManager];
  }

  -[IDSRegistrationHashProcessor setDelegate:](self->_queryUpdateNotifier, "setDelegate:", self);
  v84 = objc_alloc_init(&OBJC_CLASS___IDSCertifiedDeliveryReplayCommitter);
  replayStateCommitter = self->_replayStateCommitter;
  self->_replayStateCommitter = v84;

  v86 = (FTMessageDelivery *)objc_alloc_init((Class)+[FTMessageDelivery HTTPMessageDeliveryClass]( &OBJC_CLASS___FTMessageDelivery,  "HTTPMessageDeliveryClass"));
  homeKitMessageDelivery = self->_homeKitMessageDelivery;
  self->_homeKitMessageDelivery = v86;

  -[FTMessageDelivery setUserAgent:]( self->_homeKitMessageDelivery,  "setUserAgent:",  @"com.apple.homeKit-cloud-relay");
  v88 = self->_homeKitMessageDelivery;
  v89 = (void *)objc_claimAutoreleasedReturnValue( +[IDSRegistrationRequestTracker sharedInstance]( &OBJC_CLASS___IDSRegistrationRequestTracker,  "sharedInstance"));
  -[FTMessageDelivery addRequestObserver:](v88, "addRequestObserver:", v89);

  v90 = objc_alloc_init(&OBJC_CLASS___IDSOpportunisticDeliveryController);
  opportunisticDeliveryController = self->_opportunisticDeliveryController;
  self->_opportunisticDeliveryController = v90;

  v92 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon systemMonitor](self, "systemMonitor"));
  [v92 setActive:1];

  v93 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon systemMonitor](self, "systemMonitor"));
  [v93 setReceivesMemoryWarnings:1];

  v94 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon systemMonitor](self, "systemMonitor"));
  [v94 setUsesPowerNotifications:1];

  v95 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon systemMonitor](self, "systemMonitor"));
  [v95 setWatchesSystemLockState:1];

  v96 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon systemMonitor](self, "systemMonitor"));
  [v96 addListener:self];

  v97 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon systemMonitor](self, "systemMonitor"));
  [v97 setWatchesDataProtectionLockState:1];

  id v98 = -[IDSDaemon uTunController](self, "uTunController");
  pthread_mutex_init(&self->_localIncomingGUIDsLock, 0LL);
  pthread_mutex_init(&self->_incomingLocalPowerAssertionLock, 0LL);
  v99 = objc_alloc_init(&OBJC_CLASS___IDSRegistrationConductor);
  registrationConductor = self->_registrationConductor;
  self->_registrationConductor = v99;

  -[IDSRegistrationConductor setup](self->_registrationConductor, "setup");
  v101 = objc_alloc_init(&OBJC_CLASS___IDSTransparentEndpointViewer);
  transparentEndpointViewer = self->_transparentEndpointViewer;
  self->_transparentEndpointViewer = v101;

  uint64_t v105 = im_primary_queue(v103, v104);
  v106 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v105);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10010A590;
  block[3] = &unk_1008F6010;
  void block[4] = self;
  dispatch_async(v106, block);

  v107 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDaemonPriorityQueueController sharedInstance]( &OBJC_CLASS___IDSDaemonPriorityQueueController,  "sharedInstance"));
  v108 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v107 queueForPriority:100]);
  dispatch_source_t v109 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0LL, 0LL, v108);
  v110 = (void *)qword_1009BEAF0;
  qword_1009BEAF0 = (uint64_t)v109;

  v113 = (dispatch_source_s *)qword_1009BEAF0;
  if (qword_1009BEAF0)
  {
    dispatch_time_t v114 = dispatch_time(0LL, 60000000000LL);
    dispatch_source_set_timer(v113, v114, 0x8BB2C97000uLL, 0x3B9ACA00uLL);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472LL;
    handler[2] = sub_10010B420;
    handler[3] = &unk_1008F6010;
    handler[4] = self;
    dispatch_source_set_event_handler((dispatch_source_t)qword_1009BEAF0, handler);
    dispatch_resume((dispatch_object_t)qword_1009BEAF0);
  }

  uint64_t v115 = im_primary_queue(v111, v112);
  v116 = (void *)objc_claimAutoreleasedReturnValue(v115);
  sub_100301AD8(&stru_1008FABE8, (uint64_t)@"IDS-Pref-List", (uint64_t)v116);

  objc_destroyWeak(&v124);
  objc_destroyWeak(&location);
}

- (void)_resetPreferences
{
  uint64_t v2 = OSLogHandleForIDSCategory("IDSDaemon");
  v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Resetting preferences to 0 for all services",  v10,  2u);
  }

  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue(+[IDSLinkPreferencesManager sharedInstance](&OBJC_CLASS___IDSLinkPreferencesManager, "sharedInstance"));
  [v5 resetPreferencesForAllServices];

  uint64_t v8 = im_primary_queue(v6, v7);
  uint64_t v9 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v8);
  dispatch_async(v9, &stru_1008FAC08);
}

- (void)_cleanupIncomingFilesDirectories
{
  v3 = (void *)objc_claimAutoreleasedReturnValue( +[IDSSocketPairResourceTransferReceiver incomingFilePath]( &OBJC_CLASS___IDSSocketPairResourceTransferReceiver,  "incomingFilePath"));
  -[IDSDaemon _cleanupIncomingFilesDirectory:](self, "_cleanupIncomingFilesDirectory:", v3);

  id v4 = (id)objc_claimAutoreleasedReturnValue( +[IDSSocketPairResourceTransferReceiver modernIncomingFilePath]( &OBJC_CLASS___IDSSocketPairResourceTransferReceiver,  "modernIncomingFilePath"));
  -[IDSDaemon _cleanupIncomingFilesDirectory:](self, "_cleanupIncomingFilesDirectory:", v4);
}

- (void)_cleanupIncomingFilesDirectory:(id)a3
{
  id v3 = a3;
  double v4 = ids_monotonic_time(v3);
  unsigned int v5 = NSHomeDirectory();
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  uint64_t v7 = objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:",  v6,  @"/Library/IdentityServices/delete/",  0LL));
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSString pathWithComponents:](&OBJC_CLASS___NSString, "pathWithComponents:", v7));

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  id v56 = 0LL;
  LOBYTE(v7) = [v9 createDirectoryAtPath:v8 withIntermediateDirectories:1 attributes:0 error:&v56];
  id v10 = v56;

  if ((v7 & 1) == 0)
  {
    uint64_t v12 = OSLogHandleForIDSCategory("Warning");
    id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412546;
      double v58 = *(double *)&v8;
      __int16 v59 = 2112;
      id v60 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "Failed to create to-be-deleted directory %@ error %@",  buf,  0x16u);
    }

    uint64_t v11 = os_log_shim_legacy_logging_enabled(v14);
    if ((_DWORD)v11)
    {
      _IDSWarnV(@"IDSFoundation", @"Failed to create to-be-deleted directory %@ error %@");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"Failed to create to-be-deleted directory %@ error %@");
      uint64_t v11 = _IDSLogTransport( @"Warning",  @"IDS",  @"Failed to create to-be-deleted directory %@ error %@");
    }
  }

  uint64_t v15 = StringGUID(v11);
  unsigned __int8 v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
  unsigned int v17 = NSHomeDirectory();
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:",  v18,  @"/Library/IdentityServices/delete/",  v16,  0LL));
  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSString pathWithComponents:](&OBJC_CLASS___NSString, "pathWithComponents:", v19));

  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  id v55 = 0LL;
  unsigned __int8 v22 = [v21 moveItemAtPath:v3 toPath:v20 error:&v55];
  id v23 = v55;

  if ((v22 & 1) == 0)
  {
    uint64_t v24 = OSLogHandleForIDSCategory("Warning");
    uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412546;
      double v58 = *(double *)&v8;
      __int16 v59 = 2112;
      id v60 = v23;
      _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_ERROR,  "Failed to move incoming files to to-be-deleted directory %@ error %@ -- delete anyway",  buf,  0x16u);
    }

    uint64_t v27 = os_log_shim_legacy_logging_enabled(v26);
    if ((_DWORD)v27)
    {
      _IDSWarnV( @"IDSFoundation",  @"Failed to move incoming files to to-be-deleted directory %@ error %@ -- delete anyway");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"Failed to move incoming files to to-be-deleted directory %@ error %@ -- delete anyway");
      uint64_t v27 = _IDSLogTransport( @"Warning",  @"IDS",  @"Failed to move incoming files to to-be-deleted directory %@ error %@ -- delete anyway");
    }

    double v28 = ids_monotonic_time(v27);
    uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
    [v29 removeItemAtPath:v3 error:0];

    double v31 = ids_monotonic_time(v30);
    uint64_t v32 = OSLogHandleForTransportCategory("IDSDaemon");
    __int16 v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      double v58 = v31 - v28;
      _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "Last resort file removal took %0.6lf seconds",  buf,  0xCu);
    }

    uint64_t v35 = os_log_shim_legacy_logging_enabled(v34);
    if ((_DWORD)v35)
    {
      if (_IDSShouldLogTransport(v35))
      {
        _IDSLogTransport(@"IDSDaemon", @"IDS", @"Last resort file removal took %0.6lf seconds");
        if (_IDSShouldLog(0LL, @"IDSDaemon")) {
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Last resort file removal took %0.6lf seconds");
        }
      }
    }
  }

  dispatch_time_t v36 = dispatch_time(0LL, 60000000000LL);
  dispatch_queue_global_t global_queue = dispatch_get_global_queue(9LL, 0LL);
  id v38 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10010C1DC;
  block[3] = &unk_1008F6010;
  id v39 = v8;
  id v54 = v39;
  dispatch_after(v36, v38, block);

  v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  id v52 = 0LL;
  unsigned __int8 v41 = [v40 createDirectoryAtPath:v3 withIntermediateDirectories:1 attributes:0 error:&v52];
  id v42 = v52;

  if ((v41 & 1) == 0)
  {
    uint64_t v44 = OSLogHandleForIDSCategory("Warning");
    v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v44);
    if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412546;
      double v58 = *(double *)&v3;
      __int16 v59 = 2112;
      id v60 = v42;
      _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_ERROR,  "Failed to create incoming files directory %@ error %@",  buf,  0x16u);
    }

    uint64_t v43 = os_log_shim_legacy_logging_enabled(v46);
    if ((_DWORD)v43)
    {
      _IDSWarnV(@"IDSFoundation", @"Failed to create incoming files directory %@ error %@");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"Failed to create incoming files directory %@ error %@");
      uint64_t v43 = _IDSLogTransport( @"Warning",  @"IDS",  @"Failed to create incoming files directory %@ error %@");
    }
  }

  double v47 = ids_monotonic_time(v43);
  uint64_t v48 = OSLogHandleForTransportCategory("IDSDaemon");
  uint64_t v49 = (os_log_s *)objc_claimAutoreleasedReturnValue(v48);
  if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    double v58 = v47 - v4;
    _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_DEFAULT,  "IDS incoming files directory cleanup-on-init took %0.6lf seconds",  buf,  0xCu);
  }

  uint64_t v51 = os_log_shim_legacy_logging_enabled(v50);
  if ((_DWORD)v51)
  {
    if (_IDSShouldLogTransport(v51))
    {
      _IDSLogTransport( @"IDSDaemon",  @"IDS",  @"IDS incoming files directory cleanup-on-init took %0.6lf seconds");
      if (_IDSShouldLog(0LL, @"IDSDaemon")) {
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"IDS incoming files directory cleanup-on-init took %0.6lf seconds");
      }
    }
  }
}

- (id)broadcastAttemptQueueFromPriority:(int64_t)a3
{
  if (a3 == 100)
  {
    p_syncQueuedBroadcastAttempts = &self->_syncQueuedBroadcastAttempts;
    syncQueuedBroadcastAttempts = self->_syncQueuedBroadcastAttempts;
    if (syncQueuedBroadcastAttempts) {
      return syncQueuedBroadcastAttempts;
    }
    goto LABEL_5;
  }

  if (a3 == 200)
  {
    p_syncQueuedBroadcastAttempts = &self->_defaultQueuedBroadcastAttempts;
    syncQueuedBroadcastAttempts = self->_defaultQueuedBroadcastAttempts;
    if (syncQueuedBroadcastAttempts) {
      return syncQueuedBroadcastAttempts;
    }
    goto LABEL_5;
  }

  if (a3 != 300)
  {
    p_syncQueuedBroadcastAttempts = &self->_queuedBroadcastAttempts;
    syncQueuedBroadcastAttempts = self->_queuedBroadcastAttempts;
    if (syncQueuedBroadcastAttempts) {
      return syncQueuedBroadcastAttempts;
    }
    goto LABEL_5;
  }

  p_syncQueuedBroadcastAttempts = &self->_urgentQueuedBroadcastAttempts;
  syncQueuedBroadcastAttempts = self->_urgentQueuedBroadcastAttempts;
  if (!syncQueuedBroadcastAttempts)
  {
LABEL_5:
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    uint64_t v6 = *p_syncQueuedBroadcastAttempts;
    *p_syncQueuedBroadcastAttempts = (NSMutableDictionary *)Mutable;

    syncQueuedBroadcastAttempts = *p_syncQueuedBroadcastAttempts;
  }

  return syncQueuedBroadcastAttempts;
}

- (void)releaseBroadcastAttemptQueue:(int64_t)a3
{
  switch(a3)
  {
    case 100LL:
      p_syncQueuedBroadcastAttempts = &self->_syncQueuedBroadcastAttempts;
      syncQueuedBroadcastAttempts = self->_syncQueuedBroadcastAttempts;
      break;
    case 200LL:
      p_syncQueuedBroadcastAttempts = &self->_defaultQueuedBroadcastAttempts;
      syncQueuedBroadcastAttempts = self->_defaultQueuedBroadcastAttempts;
      break;
    case 300LL:
      p_syncQueuedBroadcastAttempts = &self->_urgentQueuedBroadcastAttempts;
      syncQueuedBroadcastAttempts = self->_urgentQueuedBroadcastAttempts;
      break;
    default:
      p_syncQueuedBroadcastAttempts = &self->_queuedBroadcastAttempts;
      syncQueuedBroadcastAttempts = self->_queuedBroadcastAttempts;
      break;
  }

  if (!-[NSMutableDictionary count](syncQueuedBroadcastAttempts, "count"))
  {
    unsigned int v5 = *p_syncQueuedBroadcastAttempts;
    *p_syncQueuedBroadcastAttempts = 0LL;
  }

- (void)_postAliveNotification
{
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotificationWithOptions(DarwinNotifyCenter, kIDSDaemonLaunchedDistNotification, 0LL, 0LL, 0LL);
}

- (void)dealloc
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon idStatusQueryController](self, "idStatusQueryController"));
  [v3 removeCompletionBlockForUniqueIdentifier:@"IDSDaemon"];

  double v4 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon pairingManager](self, "pairingManager"));
  [v4 removeDelegate:self];

  -[IMDispatchTimer invalidate](self->_nonUrgentInternetSendTimer, "invalidate");
  nonUrgentInternetSendTimer = self->_nonUrgentInternetSendTimer;
  self->_nonUrgentInternetSendTimer = 0LL;

  -[IMDispatchTimer invalidate](self->_storageTimer, "invalidate");
  storageTimer = self->_storageTimer;
  self->_storageTimer = 0LL;

  restrictedMessageCleanupTimer = self->_restrictedMessageCleanupTimer;
  if (restrictedMessageCleanupTimer)
  {
    -[IMDispatchTimer invalidate](restrictedMessageCleanupTimer, "invalidate");
    uint64_t v8 = self->_restrictedMessageCleanupTimer;
    self->_restrictedMessageCleanupTimer = 0LL;
  }

  pthread_mutex_destroy(&self->_listenerLock);
  pthread_mutex_destroy(&self->_localIncomingGUIDsLock);
  pthread_mutex_destroy(&self->_incomingLocalPowerAssertionLock);
  -[FTMessageDelivery invalidate](self->_homeKitMessageDelivery, "invalidate");
  v9.receiver = self;
  v9.super_class = (Class)&OBJC_CLASS___IDSDaemon;
  -[IDSDaemon dealloc](&v9, "dealloc");
}

- (void)systemDidLock
{
  uint64_t v3 = OSLogHandleForIDSCategory("IDSDaemon");
  double v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "System did lock", v6, 2u);
  }

  -[IDSDaemon _processOutgoingNonUrgentInternetMessages](self, "_processOutgoingNonUrgentInternetMessages");
}

- (void)systemDidUnlock
{
  uint64_t v2 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "System did unlock", v5, 2u);
  }

  if (os_log_shim_legacy_logging_enabled(v4))
  {
  }

- (void)duetInterface:(id)a3 resourceAvailabilityChangedForIdentifiers:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = OSLogHandleForIDSCategory("IDSDaemon");
  objc_super v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Alerted that duet resource availability has changed.",  v12,  2u);
  }

  if (os_log_shim_legacy_logging_enabled(v10) && _IDSShouldLog(0LL, @"IDSDaemon")) {
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Alerted that duet resource availability has changed.");
  }
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[IDSUTunDeliveryController sharedInstance](&OBJC_CLASS___IDSUTunDeliveryController, "sharedInstance"));
  [v11 admissionPolicyChangedForTopic:0 allowed:1];

  -[IDSDaemon _resourceAvailabilityChangedForIdentifiers:priorities:dataProtectionClasses:]( self,  "_resourceAvailabilityChangedForIdentifiers:priorities:dataProtectionClasses:",  v7,  0LL,  0LL);
}

- (void)_terminate
{
  uint64_t v2 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "No more listeners terminating", v7, 2u);
  }

  if (os_log_shim_legacy_logging_enabled(v4))
  {
  }

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemonMIGInterface sharedInstance](&OBJC_CLASS___IDSDaemonMIGInterface, "sharedInstance"));
  [v5 denyIncomingGrantRequests];

  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDaemonMIGQueryInterface sharedInstance]( &OBJC_CLASS___IDSDaemonMIGQueryInterface,  "sharedInstance"));
  [v6 denyIncomingGrantRequests];

  IMSyncronizeAppPreferences();
  exit(0);
}

- (void)shutdown
{
  uint64_t v3 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Shutting down", v6, 2u);
  }

  -[IDSDaemon _terminate](self, "_terminate");
}

- (void)logState
{
  p_listenerLock = &self->_listenerLock;
  pthread_mutex_lock(&self->_listenerLock);
  _IMLog(@"======================================================================");
  _IMLog(@"===== Listener Information ===========================================");
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  obj = self->_listeners;
  id v3 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v19,  v23,  16LL);
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v20;
    do
    {
      for (i = 0LL; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v20 != v5) {
          objc_enumerationMutation(obj);
        }
        id v7 = *(void **)(*((void *)&v19 + 1) + 8LL * (void)i);
        if (![v7 type])
        {
          uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 remoteObject]);
          objc_super v9 = (void *)objc_claimAutoreleasedReturnValue([v7 ID]);
          [v8 pid];
          unsigned __int8 v16 = (void *)objc_claimAutoreleasedReturnValue([v8 processName]);
          _IMLog(@"     Listener ID: %@ (%d:%@)");
        }

        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v7 remoteObject]);
        _IMLog(@"   Remote Object: %@");

        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v7 localObject]);
        _IMLog(@"    Local Object: %@");

        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v7 entitlements]);
        _IMLog(@"    Entitlements: %@");

        id v13 = (void *)objc_claimAutoreleasedReturnValue([v7 commands]);
        _IMLog(@"        Commands: %@");

        uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  [v7 capabilities]));
        _IMLog(@"    Capabilities: %@");

        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v7 bundleID]);
        _IMLog(@"      Bundle IDs: %@");

        _IMLog(&stru_100912B50);
        _IMLog(@"===================================");
      }

      id v4 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v19,  v23,  16LL);
    }

    while (v4);
  }

  _IMLog(@"======================================================================");
  pthread_mutex_unlock(p_listenerLock);
}

- (id)_newSetupInfoWithContext:(id)a3
{
  id v102 = a3;
  im_assert_primary_base_queue(v102, v3);
  v101 = objc_autoreleasePoolPush();
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog timing](&OBJC_CLASS___IMRGLog, "timing"));
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);

  if (v5)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v102 objectForKey:@"agentRequested"]);
    if (v6)
    {
      uint64_t v7 = OSLogHandleForIDSCategory("TimingLogs");
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        objc_super v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        [v9 timeIntervalSinceDate:v6];
        *(_DWORD *)buf = 134217984;
        v163 = v10;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "IDSAgent took %f seconds to launch",  buf,  0xCu);
      }

      if (os_log_shim_legacy_logging_enabled(v11)
        && _IDSShouldLog(0LL, @"TimingLogs"))
      {
        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        [v12 timeIntervalSinceDate:v6];
        uint64_t v100 = v13;
        _IDSLogV(0LL, @"IDSFoundation", @"TimingLogs", @"IDSAgent took %f seconds to launch");
      }
    }
  }

  uint64_t v104 = -[NSMutableDictionary initWithCapacity:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithCapacity:",  6LL);
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon serviceController](self, "serviceController"));
  v125 = (void *)objc_claimAutoreleasedReturnValue([v14 allServices]);

  id v128 = [v125 count];
  v113 = -[NSMutableDictionary initWithCapacity:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithCapacity:",  v128);
  uint64_t v112 = -[NSMutableDictionary initWithCapacity:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithCapacity:",  v128);
  v141 = -[NSMutableDictionary initWithCapacity:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithCapacity:",  v128);
  v110 = -[NSMutableDictionary initWithCapacity:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithCapacity:",  v128);
  dispatch_time_t v114 = -[NSMutableDictionary initWithCapacity:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithCapacity:",  v128);
  v123 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  v127 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  __int128 v156 = 0u;
  __int128 v157 = 0u;
  __int128 v154 = 0u;
  __int128 v155 = 0u;
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPairingManager sharedInstance](&OBJC_CLASS___IDSPairingManager, "sharedInstance"));
  id obj = (id)objc_claimAutoreleasedReturnValue([v15 allPairedDevicesWithType:1]);

  id v137 = [obj countByEnumeratingWithState:&v154 objects:v161 count:16];
  if (v137)
  {
    uint64_t v135 = *(void *)v155;
    uint64_t v139 = IDSDevicePropertyIdentities;
    uint64_t v133 = IDSDeviceDefaultPairedDeviceUniqueID;
    do
    {
      for (i = 0LL; i != v137; i = (char *)i + 1)
      {
        if (*(void *)v155 != v135) {
          objc_enumerationMutation(obj);
        }
        unsigned int v17 = *(void **)(*((void *)&v154 + 1) + 8LL * (void)i);
        uint64_t v18 = objc_autoreleasePoolPush();
        __int128 v19 = (void *)objc_claimAutoreleasedReturnValue([v17 localIdentities]);
        __int128 v20 = (void *)objc_claimAutoreleasedReturnValue([v17 iCloudIdentities]);
        __int128 v21 = (void *)objc_claimAutoreleasedReturnValue([v17 dictionaryRepresentation]);
        id v22 = [v21 mutableCopy];

        [v22 setObject:v19 forKey:v139];
        id v23 = (void *)objc_claimAutoreleasedReturnValue([v17 dictionaryRepresentation]);
        id v24 = [v23 mutableCopy];

        [v24 setObject:v20 forKey:v139];
        uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v17 uniqueID]);
        if (v25)
        {
          uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v17 uniqueID]);
          unsigned __int8 v27 = [v26 isEqualToString:v133];

          if ((v27 & 1) == 0) {
            -[NSMutableArray addObject:](v123, "addObject:", v22);
          }
        }

        double v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "pushToken", v100));
        if (v28)
        {
          BOOL v29 = [v20 count] == 0;

          if (!v29) {
            -[NSMutableArray addObject:](v127, "addObject:", v24);
          }
        }

        objc_autoreleasePoolPop(v18);
      }

      id v137 = [obj countByEnumeratingWithState:&v154 objects:v161 count:16];
    }

    while (v137);
  }

  uint64_t v111 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  dispatch_source_t v109 = -[NSMutableDictionary initWithCapacity:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithCapacity:",  v128);
  v108 = -[NSMutableDictionary initWithCapacity:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithCapacity:",  v128);
  v138 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon familyManager](self, "familyManager"));
  double v31 = (void *)objc_claimAutoreleasedReturnValue([v30 familyHandles]);
  id v103 = [v31 copy];

  v107 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  v106 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  uint64_t v105 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  __int128 v152 = 0u;
  __int128 v153 = 0u;
  __int128 v150 = 0u;
  __int128 v151 = 0u;
  uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon familyManager](self, "familyManager"));
  __int16 v33 = (void *)objc_claimAutoreleasedReturnValue([v32 familyMembers]);

  id v34 = [v33 countByEnumeratingWithState:&v150 objects:v160 count:16];
  if (v34)
  {
    uint64_t v35 = *(void *)v151;
    do
    {
      for (j = 0LL; j != v34; j = (char *)j + 1)
      {
        if (*(void *)v151 != v35) {
          objc_enumerationMutation(v33);
        }
        v37 = *(void **)(*((void *)&v150 + 1) + 8LL * (void)j);
        id v38 = objc_autoreleasePoolPush();
        id v39 = (void *)objc_claimAutoreleasedReturnValue([v37 dictionaryRepresentation]);
        -[NSMutableSet addObject:](v138, "addObject:", v39);

        objc_autoreleasePoolPop(v38);
      }

      id v34 = [v33 countByEnumeratingWithState:&v150 objects:v160 count:16];
    }

    while (v34);
  }

  -[NSMutableDictionary setObject:forKey:](v111, "setObject:forKey:", v103, IDSFamilyHandlesKey);
  -[NSMutableDictionary setObject:forKey:](v111, "setObject:forKey:", v138, IDSFamilyMembersKey);
  __int128 v148 = 0u;
  __int128 v149 = 0u;
  __int128 v146 = 0u;
  __int128 v147 = 0u;
  id v115 = v125;
  id v121 = [v115 countByEnumeratingWithState:&v146 objects:v159 count:16];
  if (v121)
  {
    v116 = 0LL;
    uint64_t v120 = *(void *)v147;
    uint64_t v119 = kIDSRegistrationEntitlement;
    uint64_t v118 = kIDSMessagingEntitlement;
    uint64_t v117 = kIDSSessionEntitlement;
    do
    {
      for (k = 0LL; k != v121; k = (char *)k + 1)
      {
        if (*(void *)v147 != v120) {
          objc_enumerationMutation(v115);
        }
        v136 = *(void **)(*((void *)&v146 + 1) + 8LL * (void)k);
        context = objc_autoreleasePoolPush();
        id obja = (id)objc_claimAutoreleasedReturnValue(-[NSMutableArray lastObject](self->_listeners, "lastObject"));
        v134 = (void *)objc_claimAutoreleasedReturnValue([v136 identifier]);
        unsigned int v124 = -[IDSDaemon client:isEntitledToAccessService:forEntitlement:shouldWarn:]( self,  "client:isEntitledToAccessService:forEntitlement:shouldWarn:",  obja,  v134,  v119,  0LL);
        unsigned int v126 = -[IDSDaemon client:isEntitledToAccessService:forEntitlement:shouldWarn:]( self,  "client:isEntitledToAccessService:forEntitlement:shouldWarn:",  obja,  v134,  v118,  0LL);
        if ((v124 | v126 | -[IDSDaemon client:isEntitledToAccessService:forEntitlement:shouldWarn:]( self,  "client:isEntitledToAccessService:forEntitlement:shouldWarn:",  obja,  v134,  v117,  0LL)) == 1)
        {
          v40 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
          unsigned __int8 v41 = (void *)objc_claimAutoreleasedReturnValue([v40 accountsOnService:v136]);

          id v42 = [v41 count];
          uint64_t v43 = -[NSMutableArray initWithCapacity:](objc_alloc(&OBJC_CLASS___NSMutableArray), "initWithCapacity:", v42);
          v140 = -[NSMutableArray initWithCapacity:](objc_alloc(&OBJC_CLASS___NSMutableArray), "initWithCapacity:", v42);
          __int128 v144 = 0u;
          __int128 v145 = 0u;
          __int128 v142 = 0u;
          __int128 v143 = 0u;
          id v44 = v41;
          id v45 = [v44 countByEnumeratingWithState:&v142 objects:v158 count:16];
          if (v45)
          {
            uint64_t v46 = *(void *)v143;
            do
            {
              for (m = 0LL; m != v45; m = (char *)m + 1)
              {
                if (*(void *)v143 != v46) {
                  objc_enumerationMutation(v44);
                }
                uint64_t v48 = *(void **)(*((void *)&v142 + 1) + 8LL * (void)m);
                uint64_t v49 = objc_autoreleasePoolPush();
                uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue([v48 accountSetupInfo]);
                -[NSMutableArray addObject:](v43, "addObject:", v50);

                uint64_t v51 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDAccountController sharedInstance]( &OBJC_CLASS___IDSDAccountController,  "sharedInstance"));
                id v52 = (void *)objc_claimAutoreleasedReturnValue([v48 uniqueID]);
                unsigned int v53 = [v51 isEnabledAccount:v52];

                if (v53)
                {
                  id v54 = (void *)objc_claimAutoreleasedReturnValue([v48 uniqueID]);
                  -[NSMutableArray addObject:](v140, "addObject:", v54);
                }

                id v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v48, "dependentRegistrations", v100));
                id v56 = [v55 mutableCopy];

                if ([v56 count])
                {
                  v57 = (void *)objc_claimAutoreleasedReturnValue([v48 uniqueID]);
                  -[NSMutableDictionary setObject:forKey:](v141, "setObject:forKey:", v56, v57);
                }

                objc_autoreleasePoolPop(v49);
              }

              id v45 = [v44 countByEnumeratingWithState:&v142 objects:v158 count:16];
            }

            while (v45);
          }

          if ([v136 wantsTinkerDevices])
          {
            else {
              double v58 = v127;
            }
            id v59 = -[NSMutableArray copy](v58, "copy", v100);
            -[NSMutableDictionary setObject:forKey:](v110, "setObject:forKey:", v59, v134);
          }

          if (objc_msgSend(v136, "isFamilyService", v100))
          {
            id v60 = -[NSMutableDictionary copy](v111, "copy");
            -[NSMutableDictionary setObject:forKey:](v109, "setObject:forKey:", v60, v134);

            id v61 = -[NSMutableSet copy](v107, "copy");
            -[NSMutableDictionary setObject:forKey:](v108, "setObject:forKey:", v61, v134);
          }

          if (v126)
          {
            v62 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDeliveryController sharedInstance]( &OBJC_CLASS___IDSDeliveryController,  "sharedInstance"));
            id v63 = objc_msgSend( v62,  "effectiveMaxPayloadSizeIfCanUseLargePayload:",  objc_msgSend(v136, "canUseLargePayload"));

            double v64 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v63));
            -[NSMutableDictionary setObject:forKey:](v114, "setObject:forKey:", v64, v134);
          }

          else
          {
            -[NSMutableDictionary setObject:forKey:](v114, "setObject:forKey:", &off_100946D20, v134);
          }

          if (v124)
          {
            v65 = (void *)objc_claimAutoreleasedReturnValue(+[IDSRestrictions sharedInstance](&OBJC_CLASS___IDSRestrictions, "sharedInstance"));
            id v66 = [v65 restrictionReasonForService:v136];

            if (!v116) {
              v116 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
            }
            v67 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  v66));
            -[NSMutableDictionary setObject:forKey:](v116, "setObject:forKey:", v67, v134);
          }

          v68 = (void *)objc_claimAutoreleasedReturnValue([v136 identifier]);
          -[NSMutableDictionary setObject:forKey:](v113, "setObject:forKey:", v43, v68);

          v69 = (void *)objc_claimAutoreleasedReturnValue([v136 identifier]);
          -[NSMutableDictionary setObject:forKey:](v112, "setObject:forKey:", v140, v69);

          if ([v136 isInvitationService])
          {
            invitationStore = self->_invitationStore;
            v71 = (void *)objc_claimAutoreleasedReturnValue([v136 identifier]);
            v72 = (void *)objc_claimAutoreleasedReturnValue( -[IDSInvitationStore persistedPendingInvitationsForService:]( invitationStore,  "persistedPendingInvitationsForService:",  v71));

            if (v72)
            {
              v73 = (void *)objc_claimAutoreleasedReturnValue([v136 identifier]);
              -[NSMutableDictionary setObject:forKey:](v106, "setObject:forKey:", v72, v73);
            }

            v74 = self->_invitationStore;
            v75 = (void *)objc_claimAutoreleasedReturnValue([v136 identifier]);
            v76 = (void *)objc_claimAutoreleasedReturnValue( -[IDSInvitationStore persistedReceivedInvitationsForService:]( v74,  "persistedReceivedInvitationsForService:",  v75));

            if (v76)
            {
              v77 = (void *)objc_claimAutoreleasedReturnValue([v136 identifier]);
              -[NSMutableDictionary setObject:forKey:](v105, "setObject:forKey:", v76, v77);
            }
          }
        }

        objc_autoreleasePoolPop(context);
      }

      id v121 = [v115 countByEnumeratingWithState:&v146 objects:v159 count:16];
    }

    while (v121);
  }

  else
  {
    v116 = 0LL;
  }

  v78 = objc_autoreleasePoolPush();
  v79 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v79, OS_LOG_TYPE_DEBUG)) {
    sub_10069C5CC();
  }

  -[NSMutableDictionary setObject:forKey:](v104, "setObject:forKey:", v113, @"serviceInfo");
  v80 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v80, OS_LOG_TYPE_DEBUG)) {
    sub_10069C56C();
  }

  -[NSMutableDictionary setObject:forKey:](v104, "setObject:forKey:", v112, @"enabledAccountsInfo");
  v81 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v81, OS_LOG_TYPE_DEBUG)) {
    sub_10069C50C();
  }

  -[NSMutableDictionary setObject:forKey:](v104, "setObject:forKey:", v141, @"dependentDevices");
  v82 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v82, OS_LOG_TYPE_DEBUG)) {
    sub_10069C4AC();
  }

  -[NSMutableDictionary setObject:forKey:](v104, "setObject:forKey:", v110, @"linkedDevices");
  v83 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v83, OS_LOG_TYPE_DEBUG)) {
    sub_10069C44C();
  }

  -[NSMutableDictionary setObject:forKey:](v104, "setObject:forKey:", v109, @"familyInfo");
  v84 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v84, OS_LOG_TYPE_DEBUG)) {
    sub_10069C3EC();
  }

  -[NSMutableDictionary setObject:forKey:](v104, "setObject:forKey:", v108, @"familyDevices");
  v85 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v85, OS_LOG_TYPE_DEBUG)) {
    sub_10069C38C();
  }

  -[NSMutableDictionary setObject:forKey:](v104, "setObject:forKey:", v114, @"maxMessageSizes");
  v86 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v86, OS_LOG_TYPE_DEBUG)) {
    sub_10069C32C();
  }

  if (v116) {
    -[NSMutableDictionary setObject:forKey:](v104, "setObject:forKey:", v116, @"restrictionReasons");
  }
  v87 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration", v100));
  if (os_log_type_enabled(v87, OS_LOG_TYPE_DEBUG)) {
    sub_10069C2CC();
  }

  -[NSMutableDictionary setObject:forKey:](v104, "setObject:forKey:", v106, @"pendingInvitationMap");
  v88 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v88, OS_LOG_TYPE_DEBUG)) {
    sub_10069C26C();
  }

  uint64_t v89 = IDSLoggableDescriptionSalt(-[NSMutableDictionary setObject:forKey:](v104, "setObject:forKey:", v105, @"receivedInvitationMap"));
  v90 = (void *)objc_claimAutoreleasedReturnValue(v89);
  -[NSMutableDictionary setObject:forKey:](v104, "setObject:forKey:", v90, @"privateLoggingHash");

  v91 = +[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", sub_1002E08C0());
  v92 = (void *)objc_claimAutoreleasedReturnValue(v91);
  -[NSMutableDictionary setObject:forKey:](v104, "setObject:forKey:", v92, @"maxIMLSize");

  v93 = (void *)objc_claimAutoreleasedReturnValue(+[IDSCurrentDevice sharedInstance](&OBJC_CLASS___IDSCurrentDevice, "sharedInstance"));
  v94 = (void *)objc_claimAutoreleasedReturnValue([v93 deviceIdentifier]);

  if (v94) {
    -[NSMutableDictionary setObject:forKey:](v104, "setObject:forKey:", v94, @"deviceIdentifier");
  }

  objc_autoreleasePoolPop(v78);
  v95 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPairingManager sharedInstance](&OBJC_CLASS___IDSPairingManager, "sharedInstance"));
  v96 = (void *)objc_claimAutoreleasedReturnValue([v95 pairedDeviceUniqueID]);

  v97 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v97, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v163 = v96;
    _os_log_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_DEFAULT, "Active device uniqueID: %@", buf, 0xCu);
  }

  if (v96) {
    -[NSMutableDictionary setObject:forKey:](v104, "setObject:forKey:", v96, @"activeDeviceUniqueID");
  }

  objc_autoreleasePoolPop(v101);
  id v98 = v104;

  return v98;
}

- (void)_cleanupListenerWithPid:(int)a3
{
  uint64_t v3 = *(void *)&a3;
  p_listenerLock = &self->_listenerLock;
  pthread_mutex_lock(&self->_listenerLock);
  id v6 = (char *)-[NSMutableArray count](self->_listeners, "count");
  if ((uint64_t)(v6 - 1) >= 0)
  {
    do
    {
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableArray objectAtIndex:](self->_listeners, "objectAtIndex:", --v6));
      if (![v7 type])
      {
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 remoteObject]);
        if ([v8 pid] == (_DWORD)v3)
        {
          uint64_t v9 = OSLogHandleForIDSCategory("IDSDaemon");
          uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412546;
            uint64_t v15 = v8;
            __int16 v16 = 1024;
            int v17 = v3;
            _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Found existing listener %@ for pid %d, cleaning up",  buf,  0x12u);
          }

          if (os_log_shim_legacy_logging_enabled(v11)
            && _IDSShouldLog(0LL, @"IDSDaemon"))
          {
            uint64_t v12 = v8;
            uint64_t v13 = v3;
            _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Found existing listener %@ for pid %d, cleaning up");
          }

          -[IDSDaemon removeListenerWithRemoteXPCObject:](self, "removeListenerWithRemoteXPCObject:", v8, v12, v13);
          [v8 invalidate];
        }
      }
    }

    while ((uint64_t)v6 > 0);
  }

  pthread_mutex_unlock(p_listenerLock);
}

- (void)_resetBroadcastQueuesForServices:(id)a3
{
  id v4 = a3;
  -[IDSDaemon _resetQueuedBroadcastsForServices:priority:](self, "_resetQueuedBroadcastsForServices:priority:", v4, 0LL);
  BOOL v5 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDaemonPriorityQueueController sharedInstance]( &OBJC_CLASS___IDSDaemonPriorityQueueController,  "sharedInstance"));
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  v15[2] = sub_10010E1D8;
  v15[3] = &unk_1008F5F80;
  v15[4] = self;
  id v6 = v4;
  id v16 = v6;
  [v5 performBlockUrgentPriority:v15];

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDaemonPriorityQueueController sharedInstance]( &OBJC_CLASS___IDSDaemonPriorityQueueController,  "sharedInstance"));
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_10010E1E8;
  v13[3] = &unk_1008F5F80;
  v13[4] = self;
  id v8 = v6;
  id v14 = v8;
  [v7 performBlockDefaultPriority:v13];

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDaemonPriorityQueueController sharedInstance]( &OBJC_CLASS___IDSDaemonPriorityQueueController,  "sharedInstance"));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_10010E1F8;
  v11[3] = &unk_1008F5F80;
  v11[4] = self;
  id v12 = v8;
  id v10 = v8;
  [v9 performBlockSyncPriority:v11];
}

- (void)_flushBroadcastQueuesForServices:(id)a3 existingServices:(id)a4
{
  id v6 = a4;
  id v7 = a3;
  im_assert_primary_base_queue(v7, v8);
  id v9 = [v7 mutableCopy];

  [v9 intersectSet:v6];
  if ([v9 count])
  {
    -[IDSDaemon _processQueuedBroadcastsForServices:priority:forceRetry:]( self,  "_processQueuedBroadcastsForServices:priority:forceRetry:",  v9,  0LL,  1LL);
    id v10 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDaemonPriorityQueueController sharedInstance]( &OBJC_CLASS___IDSDaemonPriorityQueueController,  "sharedInstance"));
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472LL;
    v19[2] = sub_10010E3A4;
    v19[3] = &unk_1008F5F80;
    v19[4] = self;
    id v11 = v9;
    id v20 = v11;
    [v10 performBlockUrgentPriority:v19];

    id v12 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDaemonPriorityQueueController sharedInstance]( &OBJC_CLASS___IDSDaemonPriorityQueueController,  "sharedInstance"));
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    v17[2] = sub_10010E3B8;
    v17[3] = &unk_1008F5F80;
    v17[4] = self;
    id v13 = v11;
    id v18 = v13;
    [v12 performBlockDefaultPriority:v17];

    id v14 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDaemonPriorityQueueController sharedInstance]( &OBJC_CLASS___IDSDaemonPriorityQueueController,  "sharedInstance"));
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    v15[2] = sub_10010E3CC;
    v15[3] = &unk_1008F5F80;
    v15[4] = self;
    id v16 = v13;
    [v14 performBlockSyncPriority:v15];
  }
}

- (void)dropQueuedBroadcastsForServices:(id)a3
{
  id v4 = a3;
  -[IDSDaemon _dropQueuedBroadcastsForServices:priority:](self, "_dropQueuedBroadcastsForServices:priority:", v4, 0LL);
  BOOL v5 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDaemonPriorityQueueController sharedInstance]( &OBJC_CLASS___IDSDaemonPriorityQueueController,  "sharedInstance"));
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  v15[2] = sub_10010E534;
  v15[3] = &unk_1008F5F80;
  v15[4] = self;
  id v6 = v4;
  id v16 = v6;
  [v5 performBlockUrgentPriority:v15];

  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDaemonPriorityQueueController sharedInstance]( &OBJC_CLASS___IDSDaemonPriorityQueueController,  "sharedInstance"));
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_10010E544;
  v13[3] = &unk_1008F5F80;
  v13[4] = self;
  id v8 = v6;
  id v14 = v8;
  [v7 performBlockDefaultPriority:v13];

  id v9 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDaemonPriorityQueueController sharedInstance]( &OBJC_CLASS___IDSDaemonPriorityQueueController,  "sharedInstance"));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_10010E554;
  v11[3] = &unk_1008F5F80;
  v11[4] = self;
  id v12 = v8;
  id v10 = v8;
  [v9 performBlockSyncPriority:v11];
}

- (BOOL)_setupListenerConnection:(id)a3 listenerID:(id)a4 pid:(int)a5 setupInfo:(id)a6 entitlements:(id)a7 setupCompletionBlock:(id)a8
{
  uint64_t v11 = *(void *)&a5;
  id v14 = a3;
  id v15 = a4;
  id v16 = a6;
  id v86 = a7;
  v85 = (void (**)(id, NSMutableDictionary *, id))a8;
  im_assert_primary_base_queue(v85, v17);
  context = objc_autoreleasePoolPush();
  v87 = v14;
  if (!v14)
  {
    uint64_t v22 = OSLogHandleForIDSCategory("Warning");
    id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v89 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_ERROR,  "Tried to set up listener (ID: %@) with empty listener port",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v24))
    {
      _IDSWarnV(@"IDSFoundation", @"Tried to set up listener (ID: %@) with empty listener port");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"Tried to set up listener (ID: %@) with empty listener port");
      _IDSLogTransport( @"Warning",  @"IDS",  @"Tried to set up listener (ID: %@) with empty listener port");
    }

    goto LABEL_14;
  }

  if (![v15 length])
  {
    uint64_t v25 = OSLogHandleForIDSCategory("Warning");
    uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v89 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_ERROR,  "Tried to set up listener (port: %@) with empty ID",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v27))
    {
      _IDSWarnV(@"IDSFoundation", @"Tried to set up listener (port: %@) with empty ID");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"Tried to set up listener (port: %@) with empty ID");
      _IDSLogTransport(@"Warning", @"IDS", @"Tried to set up listener (port: %@) with empty ID");
    }

- (BOOL)validateListenerForLocalObject:(id)a3
{
  id v4 = a3;
  uint64_t v7 = 0LL;
  id v8 = &v7;
  uint64_t v9 = 0x2020000000LL;
  char v10 = 0;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_10010F238;
  v6[3] = &unk_1008FAC30;
  v6[4] = &v7;
  -[IDSDaemon validateListenerForLocalObject:andPerformBlock:]( self,  "validateListenerForLocalObject:andPerformBlock:",  v4,  v6);
  LOBYTE(self) = *((_BYTE *)v8 + 24);
  _Block_object_dispose(&v7, 8);

  return (char)self;
}

- (BOOL)validateListenerForLocalObject:(id)a3 andCheckEntitlement:(id)a4
{
  return -[IDSDaemon validateListenerForLocalObject:andCheckEntitlement:forAccessToServiceWithIdentifier:]( self,  "validateListenerForLocalObject:andCheckEntitlement:forAccessToServiceWithIdentifier:",  a3,  a4,  0LL);
}

- (BOOL)validateListenerForLocalObject:(id)a3 andCheckEntitlement:(id)a4 forAccessToServiceWithIdentifier:(id)a5
{
  id v8 = a3;
  id v9 = a4;
  uint64_t v17 = 0LL;
  id v18 = &v17;
  uint64_t v19 = 0x2020000000LL;
  char v20 = 0;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_10010F35C;
  v13[3] = &unk_1008FAC58;
  id v16 = &v17;
  v13[4] = self;
  id v10 = a5;
  id v14 = v10;
  id v11 = v9;
  id v15 = v11;
  -[IDSDaemon validateListenerForLocalObject:andPerformBlock:]( self,  "validateListenerForLocalObject:andPerformBlock:",  v8,  v13);
  LOBYTE(self) = *((_BYTE *)v18 + 24);

  _Block_object_dispose(&v17, 8);
  return (char)self;
}

- (void)validateListenerForLocalObject:(id)a3 andPerformBlock:(id)a4
{
  id v6 = a3;
  uint64_t v7 = (void (**)(id, id))a4;
  if (self->_isHardReset)
  {
    uint64_t v8 = OSLogHandleForIDSCategory("IDSDaemon");
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "Daemon was hard reset, ignoring incoming request",  buf,  2u);
    }

    if (os_log_shim_legacy_logging_enabled(v10) && _IDSShouldLog(1LL, @"IDSDaemon")) {
      _IDSLogV( 1LL,  @"IDSFoundation",  @"IDSDaemon",  @"Daemon was hard reset, ignoring incoming request");
    }
  }

  else if (v6)
  {
    p_listenerLock = &self->_listenerLock;
    pthread_mutex_lock(&self->_listenerLock);
    __int128 v26 = 0u;
    __int128 v27 = 0u;
    __int128 v28 = 0u;
    __int128 v29 = 0u;
    id v12 = self->_listeners;
    id v13 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v12,  "countByEnumeratingWithState:objects:count:",  &v26,  v32,  16LL);
    if (v13)
    {
      uint64_t v14 = *(void *)v27;
LABEL_10:
      uint64_t v15 = 0LL;
      while (1)
      {
        if (*(void *)v27 != v14) {
          objc_enumerationMutation(v12);
        }
        id v16 = *(void **)(*((void *)&v26 + 1) + 8 * v15);
        id v17 = (id)objc_claimAutoreleasedReturnValue([v16 localObject]);
        BOOL v18 = v17 == v6;

        if (v18) {
          break;
        }
        if (v13 == (id)++v15)
        {
          id v13 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v12,  "countByEnumeratingWithState:objects:count:",  &v26,  v32,  16LL);
          if (v13) {
            goto LABEL_10;
          }
          goto LABEL_16;
        }
      }

      id v19 = v16;

      if (!v19) {
        goto LABEL_19;
      }
      v7[2](v7, v19);
    }

    else
    {
LABEL_16:

LABEL_19:
      uint64_t v20 = OSLogHandleForIDSCategory("Warning");
      id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        id v31 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "No listener found for local object: %@",  buf,  0xCu);
      }

      if (os_log_shim_legacy_logging_enabled(v22))
      {
        _IDSWarnV(@"IDSFoundation", @"No listener found for local object: %@");
        _IDSLogV(0LL, @"IDSFoundation", @"Warning", @"No listener found for local object: %@");
        _IDSLogTransport(@"Warning", @"IDS", @"No listener found for local object: %@");
      }

      id v19 = 0LL;
    }

    pthread_mutex_unlock(p_listenerLock);
  }

  else
  {
    uint64_t v23 = OSLogHandleForIDSCategory("Warning");
    uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_ERROR,  "** Empty local object passed in for listener check",  buf,  2u);
    }

    if (os_log_shim_legacy_logging_enabled(v25))
    {
      _IDSWarnV(@"IDSFoundation", @"** Empty local object passed in for listener check");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"** Empty local object passed in for listener check");
      _IDSLogTransport(@"Warning", @"IDS", @"** Empty local object passed in for listener check");
    }
  }
}

- (void)_iterateOverConnectedListeners:(id)a3
{
  id v4 = a3;
  p_listenerLock = &self->_listenerLock;
  pthread_mutex_lock(&self->_listenerLock);
  listeners = self->_listeners;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_10010F848;
  v8[3] = &unk_1008FAC80;
  id v9 = v4;
  id v7 = v4;
  -[NSMutableArray enumerateObjectsUsingBlock:](listeners, "enumerateObjectsUsingBlock:", v8);
  pthread_mutex_unlock(p_listenerLock);
}

- (void)_removeListener:(id)a3
{
  id v4 = a3;
  if (v4)
  {
    uint64_t v5 = OSLogHandleForIDSCategory("IDSDaemon");
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      id v7 = (void *)objc_claimAutoreleasedReturnValue([v4 ID]);
      *(_DWORD *)buf = 138412290;
      id v86 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Removing listener ID: %@", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v8))
    {
      id v61 = (void *)objc_claimAutoreleasedReturnValue([v4 ID]);
      _IDSLogEventV(@"IDSFoundation", @"IDSDaemon", @"Removing listener ID: %@");
    }

    v74 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "localObject", v61));
    v75 = (void *)objc_claimAutoreleasedReturnValue([v4 entitlements]);
    if ([v75 hasEntitlement:kIDSContinuityEntitlement])
    {
      id v9 = (void *)objc_claimAutoreleasedReturnValue(+[IDSWPLinkManager sharedInstance](&OBJC_CLASS___IDSWPLinkManager, "sharedInstance"));
      [v9 clientInstancesRemoved];
    }

    if ([v75 hasEntitlement:kIDSLocalPairingEntitlement])
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDuetInterface sharedInstance](&OBJC_CLASS___IDSDuetInterface, "sharedInstance"));
      id v11 = (void *)objc_claimAutoreleasedReturnValue([v74 processName]);
      [v10 setInitialSyncInProgress:0 forClientID:v11];

      id v12 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDuetInterface sharedInstance](&OBJC_CLASS___IDSDuetInterface, "sharedInstance"));
      id v13 = (void *)objc_claimAutoreleasedReturnValue([v74 processName]);
      [v12 setReunionSyncInProgress:0 forClientID:v13];
    }

    if ([v75 hasEntitlement:kIDSAppleCareServicesEntitlement])
    {
      uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog appleCare](&OBJC_CLASS___IMRGLog, "appleCare"));
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Removed Apple Care listener", buf, 2u);
      }

      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon signInResponder](self, "signInResponder"));
      [v15 iCloudSignOut];

      id v16 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon registrationConductor](self, "registrationConductor"));
      [v16 setShouldSupressRepairLogic:0];

      id v17 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon registrationConductor](self, "registrationConductor"));
      [v17 kickiCloudRepair];
    }

    BOOL v18 = (void *)objc_claimAutoreleasedReturnValue([v4 ID]);
    id v19 = (void *)objc_claimAutoreleasedReturnValue([v4 remoteObject]);
    id v20 = sub_1001103E8(v18, v19);
    v73 = (void *)objc_claimAutoreleasedReturnValue(v20);

    id v21 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDSessionController sharedInstance](&OBJC_CLASS___IDSDSessionController, "sharedInstance"));
    [v21 cleanupSessionsForClient:v73];

    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(+[IDSUTunController sharedInstance](&OBJC_CLASS___IDSUTunController, "sharedInstance"));
    [v22 cleanupSocketsForClient:v73];

    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v4 services]);
    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue( +[IDSUTunDeliveryController sharedInstance]( &OBJC_CLASS___IDSUTunDeliveryController,  "sharedInstance"));
    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v23 allObjects]);
    [v24 defaultPeerSetPreferInfraWiFi:0 services:v25];

    -[IDSDaemon _resetBroadcastQueuesForServices:](self, "_resetBroadcastQueuesForServices:", v23);
    if (![v4 type])
    {
      __int128 v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
      __int128 v27 = (void *)objc_claimAutoreleasedReturnValue([v4 remoteObject]);
      [v26 removeObserver:self name:IMRemoteObjectDidDisconnectNotification object:v27];

      __int128 v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
      [v28 removeObserver:self name:IMLocalObjectDidDisconnectNotification object:v74];
    }

    [v74 invalidate];
    __int128 v29 = (void *)objc_claimAutoreleasedReturnValue([v4 bundleID]);
    id v72 = [v29 length];

    -[NSMutableArray removeObjectIdenticalTo:](self->_listeners, "removeObjectIdenticalTo:", v4);
    uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([v4 services]);
    id v31 = [v30 count];

    if (v31)
    {
      id v70 = -[NSMutableSet count](self->_listenerCachedServices, "count");
      uint64_t v32 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
      listenerCachedServices = self->_listenerCachedServices;
      self->_listenerCachedServices = v32;

      __int128 v82 = 0u;
      __int128 v83 = 0u;
      __int128 v80 = 0u;
      __int128 v81 = 0u;
      id v34 = self->_listeners;
      id v35 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v34,  "countByEnumeratingWithState:objects:count:",  &v80,  v93,  16LL);
      if (v35)
      {
        uint64_t v36 = *(void *)v81;
        do
        {
          for (i = 0LL; i != v35; i = (char *)i + 1)
          {
            if (*(void *)v81 != v36) {
              objc_enumerationMutation(v34);
            }
            uint64_t v38 = self->_listenerCachedServices;
            id v39 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v80 + 1) + 8 * (void)i) services]);
            -[NSMutableSet unionSet:](v38, "unionSet:", v39);
          }

          id v35 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v34,  "countByEnumeratingWithState:objects:count:",  &v80,  v93,  16LL);
        }

        while (v35);
      }

      -[IDSDaemon updateTopics](self, "updateTopics");
      uint64_t v40 = OSLogHandleForIDSCategory("IDSDaemon");
      unsigned __int8 v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
      if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
      {
        id v42 = -[NSMutableSet count](self->_listenerCachedServices, "count");
        *(_DWORD *)buf = 134218754;
        id v86 = v70;
        __int16 v87 = 2112;
        v88 = @"services";
        __int16 v89 = 2048;
        id v90 = v42;
        __int16 v91 = 2048;
        id v92 = v31;
        _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEBUG,  "We had %lu %@ before removing listener, now we have %lu. This listener had %lu.",  buf,  0x2Au);
      }

      if (os_log_shim_legacy_logging_enabled(v43) && _IDSShouldLog(1LL, @"IDSDaemon"))
      {
        id v66 = -[NSMutableSet count](self->_listenerCachedServices, "count");
        id v68 = v31;
        id v62 = v70;
        double v64 = @"services";
        _IDSLogV( 1LL,  @"IDSFoundation",  @"IDSDaemon",  @"We had %lu %@ before removing listener, now we have %lu. This listener had %lu.");
      }
    }

    id v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "commands", v62, v64, v66, v68));
    id v45 = [v44 count];

    if (v45)
    {
      id v71 = -[NSMutableSet count](self->_listenerCachedCommands, "count");
      uint64_t v46 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
      listenerCachedCommands = self->_listenerCachedCommands;
      self->_listenerCachedCommands = v46;

      __int128 v78 = 0u;
      __int128 v79 = 0u;
      __int128 v76 = 0u;
      __int128 v77 = 0u;
      uint64_t v48 = self->_listeners;
      id v49 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v48,  "countByEnumeratingWithState:objects:count:",  &v76,  v84,  16LL);
      if (v49)
      {
        uint64_t v50 = *(void *)v77;
        do
        {
          for (j = 0LL; j != v49; j = (char *)j + 1)
          {
            if (*(void *)v77 != v50) {
              objc_enumerationMutation(v48);
            }
            uint64_t v52 = self->_listenerCachedCommands;
            unsigned int v53 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v76 + 1) + 8 * (void)j) commands]);
            -[NSMutableSet unionSet:](v52, "unionSet:", v53);
          }

          id v49 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v48,  "countByEnumeratingWithState:objects:count:",  &v76,  v84,  16LL);
        }

        while (v49);
      }

      -[IDSDaemon _updatePushCommandsLocked](self, "_updatePushCommandsLocked");
      uint64_t v54 = OSLogHandleForIDSCategory("IDSDaemon");
      id v55 = (os_log_s *)objc_claimAutoreleasedReturnValue(v54);
      if (os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG))
      {
        id v56 = -[NSMutableSet count](self->_listenerCachedCommands, "count");
        *(_DWORD *)buf = 134218754;
        id v86 = v71;
        __int16 v87 = 2112;
        v88 = @"commands";
        __int16 v89 = 2048;
        id v90 = v56;
        __int16 v91 = 2048;
        id v92 = v45;
        _os_log_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_DEBUG,  "We had %lu %@ before removing listener, now we have %lu. This listener had %lu.",  buf,  0x2Au);
      }

      if (os_log_shim_legacy_logging_enabled(v57) && _IDSShouldLog(1LL, @"IDSDaemon"))
      {
        id v67 = -[NSMutableSet count](self->_listenerCachedCommands, "count");
        id v69 = v45;
        id v63 = v71;
        v65 = @"commands";
        _IDSLogV( 1LL,  @"IDSFoundation",  @"IDSDaemon",  @"We had %lu %@ before removing listener, now we have %lu. This listener had %lu.");
      }
    }

    IMSyncronizeAppPreferencesLater( -[IDSDaemon removeWakingPushPriorityForServices:]( self,  "removeWakingPushPriorityForServices:",  v23,  v63,  v65,  v67,  v69));
    if (v72) {
      -[IDSDaemon refreshBundleIDs](self, "refreshBundleIDs");
    }
  }

  else
  {
    uint64_t v58 = OSLogHandleForIDSCategory("Warning");
    id v59 = (os_log_s *)objc_claimAutoreleasedReturnValue(v58);
    if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_ERROR, "Tried to remove nil listener object", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled(v60))
    {
      _IDSWarnV(@"IDSFoundation", @"Tried to remove nil listener object");
      _IDSLogV(0LL, @"IDSFoundation", @"Warning", @"Tried to remove nil listener object");
      _IDSLogTransport(@"Warning", @"IDS", @"Tried to remove nil listener object");
    }
  }
}

- (void)_removeListenerWithRemoteXPCObject:(id)a3
{
  id v4 = a3;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  id v5 = -[NSMutableArray copy](self->_listeners, "copy");
  id v6 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v14;
    do
    {
      for (i = 0LL; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v14 != v7) {
          objc_enumerationMutation(v5);
        }
        id v9 = *(void **)(*((void *)&v13 + 1) + 8LL * (void)i);
        if (![v9 type])
        {
          id v10 = (id)objc_claimAutoreleasedReturnValue([v9 remoteObject]);
          BOOL v11 = v10 == v4;

          if (v11)
          {
            -[IDSDaemon _removeListener:](self, "_removeListener:", v9);
            id v12 = (void *)objc_claimAutoreleasedReturnValue( +[IMRemoteObjectBroadcaster defaultBroadcaster]( &OBJC_CLASS___IMRemoteObjectBroadcaster,  "defaultBroadcaster"));
            [v12 flushProxy:v4];
          }
        }
      }

      id v6 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }

    while (v6);
  }
}

- (id)listenerForLocalObject:(id)a3
{
  id v4 = a3;
  if (v4)
  {
    p_listenerLock = &self->_listenerLock;
    pthread_mutex_lock(&self->_listenerLock);
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    id v6 = self->_listeners;
    id v7 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v6,  "countByEnumeratingWithState:objects:count:",  &v14,  v18,  16LL);
    if (v7)
    {
      uint64_t v8 = *(void *)v15;
      while (2)
      {
        for (i = 0LL; i != v7; i = (char *)i + 1)
        {
          if (*(void *)v15 != v8) {
            objc_enumerationMutation(v6);
          }
          id v10 = *(void **)(*((void *)&v14 + 1) + 8LL * (void)i);
          id v11 = (id)objc_claimAutoreleasedReturnValue([v10 localObject]);
          BOOL v12 = v11 == v4;

          if (v12)
          {
            id v7 = v10;
            goto LABEL_12;
          }
        }

        id v7 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v6,  "countByEnumeratingWithState:objects:count:",  &v14,  v18,  16LL);
        if (v7) {
          continue;
        }
        break;
      }
    }

- (id)listenerRemoteObjectForLocalObject:(id)a3
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon listenerForLocalObject:](self, "listenerForLocalObject:", a3));
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 remoteObject]);

  return v4;
}

- (void)_removeLocalListenerObject:(id)a3
{
  id v4 = a3;
  if (v4)
  {
    __int128 v15 = 0u;
    __int128 v16 = 0u;
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    id v5 = self->_listeners;
    id v6 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v5,  "countByEnumeratingWithState:objects:count:",  &v13,  v17,  16LL);
    if (v6)
    {
      uint64_t v7 = *(void *)v14;
      while (2)
      {
        for (i = 0LL; i != v6; i = (char *)i + 1)
        {
          if (*(void *)v14 != v7) {
            objc_enumerationMutation(v5);
          }
          id v9 = *(void **)(*((void *)&v13 + 1) + 8LL * (void)i);
          id v10 = (id)objc_claimAutoreleasedReturnValue([v9 localObject]);
          BOOL v11 = v10 == v4;

          if (v11)
          {
            id v12 = v9;
            -[IDSDaemon _removeListener:](self, "_removeListener:", v12);

            if (v12) {
              -[IDSDaemon _removeListener:](self, "_removeListener:", v12);
            }
            goto LABEL_13;
          }
        }

        id v6 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v5,  "countByEnumeratingWithState:objects:count:",  &v13,  v17,  16LL);
        if (v6) {
          continue;
        }
        break;
      }
    }

    id v12 = 0LL;
LABEL_13:
  }
}

- (void)removeListenerWithRemoteXPCObject:(id)a3
{
}

- (void)removeLocalListenerObject:(id)a3
{
}

- (void)remoteObjectDiedNotification:(id)a3
{
  id v4 = a3;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 object]);
  uint64_t v6 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    id v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "remoteObjectDiedNotification: %@", buf, 0xCu);
  }

  pthread_mutex_lock(&self->_listenerLock);
  -[IDSDaemon removeListenerWithRemoteXPCObject:](self, "removeListenerWithRemoteXPCObject:", v5);
  pthread_mutex_unlock(&self->_listenerLock);
}

- (void)localObjectDiedNotification:(id)a3
{
  id v21 = a3;
  uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v21 object]);
  uint64_t v3 = OSLogHandleForIDSCategory("IDSDaemon");
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    id v34 = v25;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "localObjectDiedNotification: %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v5) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    id v19 = v25;
    _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon", @"localObjectDiedNotification: %@");
  }

  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "processName", v19));
  uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon _processNameToServiceName:](self, "_processNameToServiceName:", v22));
  if (v23)
  {
    uint64_t v6 = OSLogHandleForIDSCategory("IDSDaemon");
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v34 = v22;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Resetting link preferences for process %@",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v8) && _IDSShouldLog(0LL, @"IDSDaemon"))
    {
      id v20 = v22;
      _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon", @"Resetting link preferences for process %@");
    }

    id v9 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    -[NSMutableDictionary setObject:forKey:](v9, "setObject:forKey:", &off_100946D38, @"PacketsPerSecond");
    -[NSMutableDictionary setObject:forKey:](v9, "setObject:forKey:", &off_100946D38, @"InputBytesPerSecond");
    -[NSMutableDictionary setObject:forKey:](v9, "setObject:forKey:", &off_100946D38, @"OutputBytesPerSecond");
    __int128 v30 = 0u;
    __int128 v31 = 0u;
    __int128 v28 = 0u;
    __int128 v29 = 0u;
    id obj = v23;
    id v10 = [obj countByEnumeratingWithState:&v28 objects:v32 count:16];
    if (v10)
    {
      uint64_t v11 = *(void *)v29;
      do
      {
        id v12 = 0LL;
        do
        {
          if (*(void *)v29 != v11) {
            objc_enumerationMutation(obj);
          }
          uint64_t v13 = *(void *)(*((void *)&v28 + 1) + 8LL * (void)v12);
          __int128 v14 = (void *)objc_claimAutoreleasedReturnValue( +[IDSLinkPreferencesManager sharedInstance]( &OBJC_CLASS___IDSLinkPreferencesManager,  "sharedInstance",  v20));
          [v14 updateService:v13 withPreferences:v9];

          uint64_t v17 = im_primary_queue(v15, v16);
          BOOL v18 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v17);
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472LL;
          block[2] = sub_10011134C;
          block[3] = &unk_1008F6010;
          void block[4] = v13;
          dispatch_async(v18, block);

          id v12 = (char *)v12 + 1;
        }

        while (v10 != v12);
        id v10 = [obj countByEnumeratingWithState:&v28 objects:v32 count:16];
      }

      while (v10);
    }
  }

  pthread_mutex_lock(&self->_listenerLock);
  -[IDSDaemon removeLocalListenerObject:](self, "removeLocalListenerObject:", v25);
  pthread_mutex_unlock(&self->_listenerLock);
}

- (void)_registerForNetworkAvailableNotification
{
  SEL v3 = NSSelectorFromString(@"networkStateChangedForLogTransportHint:");
  if ((objc_opt_respondsToSelector(self, v3) & 1) != 0)
  {
    id v4 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
    [v4 addObserver:self selector:v3 name:IMNetworkChangedNotification object:0];
  }

- (id)_processNameToServiceName:(id)a3
{
  id v3 = a3;
  id v4 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  if ([v3 isEqualToString:@"callservicesd"])
  {
    uint64_t v5 = @"com.apple.private.alloy.phonecontinuity";
  }

  else if ([v3 isEqualToString:@"assistantd"])
  {
    uint64_t v5 = @"com.apple.private.alloy.siri.proxy";
  }

  else if ([v3 isEqualToString:@"companion_proxy"])
  {
    uint64_t v5 = @"com.apple.private.alloy.companionproxy";
  }

  else
  {
    if (![v3 isEqualToString:@"mediaplaybackd"])
    {
      id v6 = 0LL;
      goto LABEL_10;
    }

    uint64_t v5 = @"com.apple.private.alloy.fignero";
  }

  -[NSMutableArray addObject:](v4, "addObject:", v5);
  id v6 = -[NSMutableArray copy](v4, "copy");
LABEL_10:

  return v6;
}

- (id)_localPushTopics
{
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance", 0LL));
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 accountsWithType:2]);

  id v5 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v13;
    do
    {
      uint64_t v8 = 0LL;
      do
      {
        if (*(void *)v13 != v7) {
          objc_enumerationMutation(v4);
        }
        id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v12 + 1) + 8 * (void)v8) service]);
        id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 pushTopic]);
        -[NSMutableSet addObject:](v2, "addObject:", v10);

        uint64_t v8 = (char *)v8 + 1;
      }

      while (v6 != v8);
      id v6 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }

    while (v6);
  }

  return v2;
}

- (id)_ultraConstrainedPushTopicsForTopics:(id)a3
{
  id v4 = a3;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  id v5 = [v4 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = 0LL;
    uint64_t v8 = *(void *)v17;
    do
    {
      for (i = 0LL; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v17 != v8) {
          objc_enumerationMutation(v4);
        }
        uint64_t v10 = *(void *)(*((void *)&v16 + 1) + 8LL * (void)i);
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon serviceController](self, "serviceController"));
        __int128 v12 = (void *)objc_claimAutoreleasedReturnValue([v11 serviceWithPushTopic:v10]);
        unsigned int v13 = [v12 isUltraConstrainedPushAllowed];

        if (v13)
        {
          if (!v7) {
            uint64_t v7 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
          }
          -[NSMutableSet addObject:](v7, "addObject:", v10);
        }
      }

      id v6 = [v4 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }

    while (v6);
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  id v14 = -[NSMutableSet copy](v7, "copy");

  return v14;
}

- (id)_pushTopics
{
  id v34 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  id v3 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  context = objc_autoreleasePoolPush();
  __int16 v33 = self;
  __int128 v39 = 0u;
  __int128 v40 = 0u;
  __int128 v41 = 0u;
  __int128 v42 = 0u;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon serviceController](self, "serviceController"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 allServices]);

  id v6 = [v5 countByEnumeratingWithState:&v39 objects:v44 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v40;
    do
    {
      id v9 = 0LL;
      do
      {
        if (*(void *)v40 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = *(void **)(*((void *)&v39 + 1) + 8LL * (void)v9);
        uint64_t v11 = objc_autoreleasePoolPush();
        if ([v10 adHocServiceType] != 5)
        {
          __int128 v12 = (void *)objc_claimAutoreleasedReturnValue([v10 launchDarwinNotification]);
          if ([v12 length])
          {

LABEL_11:
            -[NSMutableSet addObject:](v3, "addObject:", v10);
            goto LABEL_12;
          }

          unsigned int v13 = (void *)objc_claimAutoreleasedReturnValue([v10 launchMachServiceNotification]);
          id v14 = [v13 length];

          if (v14) {
            goto LABEL_11;
          }
          listenerCachedServices = v33->_listenerCachedServices;
          __int128 v16 = (void *)objc_claimAutoreleasedReturnValue([v10 identifier]);
          LODWORD(listenerCachedServices) = -[NSMutableSet containsObject:]( listenerCachedServices,  "containsObject:",  v16);

          if ((_DWORD)listenerCachedServices) {
            goto LABEL_11;
          }
        }

- (void)_startPushHandlingLocked
{
  __int128 v42 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon _pushTopics](self, "_pushTopics"));
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithSet:](&OBJC_CLASS___NSMutableSet, "setWithSet:", v42));
  id v3 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  id v4 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  id v5 = -[IDSPersistentMap copyDictionaryRepresentation](self->_wakingPushPriorityStore, "copyDictionaryRepresentation");
  __int128 v48 = 0u;
  __int128 v49 = 0u;
  __int128 v50 = 0u;
  __int128 v51 = 0u;
  id v6 = v5;
  id v7 = [v6 countByEnumeratingWithState:&v48 objects:v61 count:16];
  if (v7)
  {
    uint64_t v8 = *(void *)v49;
    do
    {
      for (i = 0LL; i != v7; i = (char *)i + 1)
      {
        if (*(void *)v49 != v8) {
          objc_enumerationMutation(v6);
        }
        uint64_t v10 = *(void *)(*((void *)&v48 + 1) + 8LL * (void)i);
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKey:v10]);
        id v12 = [v11 integerValue];
        unsigned int v13 = v3;
        if (v12 != (id)2)
        {
          if (v12) {
            goto LABEL_10;
          }
          unsigned int v13 = v4;
        }

        -[NSMutableSet addObject:](v13, "addObject:", v10);
        [v2 removeObject:v10];
LABEL_10:
      }

      id v7 = [v6 countByEnumeratingWithState:&v48 objects:v61 count:16];
    }

    while (v7);
  }

  uint64_t v14 = OSLogHandleForIDSCategory("IDSDaemon");
  __int128 v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
    listenerCachedServices = self->_listenerCachedServices;
    *(_DWORD *)buf = 138413058;
    uint64_t v54 = listenerCachedServices;
    __int16 v55 = 2112;
    id v56 = v3;
    __int16 v57 = 2112;
    uint64_t v58 = v2;
    __int16 v59 = 2112;
    uint64_t v60 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "Starting push handling with services %@ waking topics: %@ opportunistic topics: %@ nonwaking topics %@",  buf,  0x2Au);
  }

  if (os_log_shim_legacy_logging_enabled(v17) && _IDSShouldLog(1LL, @"IDSDaemon"))
  {
    __int128 v39 = v2;
    __int128 v40 = v4;
    __int128 v37 = self->_listenerCachedServices;
    __int128 v38 = v3;
    _IDSLogV( 1LL,  @"IDSFoundation",  @"IDSDaemon",  @"Starting push handling with services %@ waking topics: %@ opportunistic topics: %@ nonwaking topics %@");
  }

  dispatch_queue_attr_t v18 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  __int128 v19 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v18);
  dispatch_queue_attr_t v20 = dispatch_queue_attr_make_with_qos_class(v19, QOS_CLASS_USER_INITIATED, 0);
  id v21 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v20);
  uint64_t v22 = im_primary_base_queue(v21);
  uint64_t v23 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v22);
  dispatch_queue_t v41 = dispatch_queue_create_with_target_V2("com.apple.idsdaemon.apsqueue", v21, v23);

  uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon pushHandlerForAPSDelegatePort](self, "pushHandlerForAPSDelegatePort"));
  uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon _commands](self, "_commands"));
  [v24 addListener:self wakingTopics:v3 opportunisticTopics:v2 nonWakingTopics:v4 commands:v25 queue:v41];

  __int128 v26 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon pushHandlerForAPSDelegatePort](self, "pushHandlerForAPSDelegatePort"));
  __int128 v27 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon _ultraConstrainedPushTopicsForTopics:](self, "_ultraConstrainedPushTopicsForTopics:", v42));
  [v26 setUltraConstrainedTopics:v27 forListener:self];

  unsigned int v28 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  __int128 v46 = 0u;
  __int128 v47 = 0u;
  __int128 v44 = 0u;
  __int128 v45 = 0u;
  __int128 v29 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon serviceController](self, "serviceController"));
  __int128 v30 = (void *)objc_claimAutoreleasedReturnValue([v29 allServices]);

  id v31 = [v30 countByEnumeratingWithState:&v44 objects:v52 count:16];
  if (v31)
  {
    uint64_t v32 = *(void *)v45;
    do
    {
      for (j = 0LL; j != v31; j = (char *)j + 1)
      {
        if (*(void *)v45 != v32) {
          objc_enumerationMutation(v30);
        }
        id v34 = *(void **)(*((void *)&v44 + 1) + 8LL * (void)j);
        if ((objc_msgSend(v34, "pushToWakeDisabled", v37, v38, v39, v40) & 1) == 0)
        {
          __int128 v35 = (void *)objc_claimAutoreleasedReturnValue([v34 pushTopic]);
          -[NSMutableArray addObject:](v28, "addObject:", v35);
        }
      }

      id v31 = [v30 countByEnumeratingWithState:&v44 objects:v52 count:16];
    }

    while (v31);
  }

  __int128 v36 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon pushHandlerForAPSDelegatePort](self, "pushHandlerForAPSDelegatePort"));
  [v36 configureAsMacNotificationCenterObserver:kFZTextAppBundleIdentifier withPushToWakeTopics:v28];
}

- (void)_stopPushHandling
{
  id v3 = (id)objc_claimAutoreleasedReturnValue(-[IDSDaemon pushHandlerForAPSDelegatePort](self, "pushHandlerForAPSDelegatePort"));
  [v3 removeListener:self];
}

- (void)updateTopics
{
  __int128 v37 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon _pushTopics](self, "_pushTopics"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithSet:](&OBJC_CLASS___NSMutableSet, "setWithSet:", v37));
  id v4 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  id v5 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  id v6 = -[IDSPersistentMap copyDictionaryRepresentation](self->_wakingPushPriorityStore, "copyDictionaryRepresentation");
  __int128 v38 = 0u;
  __int128 v39 = 0u;
  __int128 v40 = 0u;
  __int128 v41 = 0u;
  id v7 = v6;
  id v8 = [v7 countByEnumeratingWithState:&v38 objects:v50 count:16];
  if (v8)
  {
    uint64_t v9 = *(void *)v39;
    do
    {
      for (i = 0LL; i != v8; i = (char *)i + 1)
      {
        if (*(void *)v39 != v9) {
          objc_enumerationMutation(v7);
        }
        uint64_t v11 = *(void *)(*((void *)&v38 + 1) + 8LL * (void)i);
        id v12 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKey:v11]);
        id v13 = [v12 integerValue];
        uint64_t v14 = v4;
        if (v13 != (id)2)
        {
          if (v13) {
            goto LABEL_10;
          }
          uint64_t v14 = v5;
        }

        -[NSMutableSet addObject:](v14, "addObject:", v11);
        [v3 removeObject:v11];
LABEL_10:
      }

      id v8 = [v7 countByEnumeratingWithState:&v38 objects:v50 count:16];
    }

    while (v8);
  }

  uint64_t v15 = OSLogHandleForIDSCategory("IDSDaemon");
  __int128 v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    listenerCachedServices = self->_listenerCachedServices;
    *(_DWORD *)buf = 138413058;
    uint64_t v43 = listenerCachedServices;
    __int16 v44 = 2112;
    __int128 v45 = v4;
    __int16 v46 = 2112;
    __int128 v47 = v3;
    __int16 v48 = 2112;
    __int128 v49 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Updating push handling with services %@ waking topics: %@ opportunistic topics: %@ nonwaking topics: %@",  buf,  0x2Au);
  }

  if (os_log_shim_legacy_logging_enabled(v18) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    __int128 v35 = v3;
    __int128 v36 = v5;
    uint64_t v32 = self->_listenerCachedServices;
    id v34 = v4;
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Updating push handling with services %@ waking topics: %@ opportunistic topics: %@ nonwaking topics: %@");
  }

  __int128 v19 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon pushHandlerForAPSDelegatePort](self, "pushHandlerForAPSDelegatePort", v32, v34, v35, v36));
  [v19 setWakingTopics:v4 opportunisticTopics:v3 nonWakingTopics:v5 forListener:self];

  dispatch_queue_attr_t v20 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon pushHandlerForAPSDelegatePort](self, "pushHandlerForAPSDelegatePort"));
  id v21 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon _ultraConstrainedPushTopicsForTopics:](self, "_ultraConstrainedPushTopicsForTopics:", v37));
  [v20 setUltraConstrainedTopics:v21 forListener:self];

  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon _localPushTopics](self, "_localPushTopics"));
  uint64_t v23 = (NSMutableSet *)[v22 mutableCopy];

  -[NSMutableSet unionSet:](v23, "unionSet:", v3);
  -[NSMutableSet unionSet:](v23, "unionSet:", v4);
  -[NSMutableSet unionSet:](v23, "unionSet:", v5);
  uint64_t v24 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138412290;
    uint64_t v43 = v23;
    _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEBUG,  "Updating local push handling with topics: %@",  buf,  0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v26) && _IDSShouldLog(1LL, @"IDSDaemon"))
  {
    __int16 v33 = v23;
    _IDSLogV(1LL, @"IDSFoundation", @"IDSDaemon", @"Updating local push handling with topics: %@");
  }

  __int128 v27 = (void *)objc_claimAutoreleasedReturnValue( +[IDSUTunDeliveryController sharedInstance]( &OBJC_CLASS___IDSUTunDeliveryController,  "sharedInstance",  v33));
  [v27 setTopics:v23];

  unsigned int v28 = (char *)[v3 count];
  id v29 = -[NSMutableSet count](v4, "count");
  BOOL v30 = &v28[(void)v29 + (unint64_t)-[NSMutableSet count](v5, "count")] != 0LL;
  id v31 = (void *)objc_claimAutoreleasedReturnValue(+[IDSQuickRelayAllocator sharedInstance](&OBJC_CLASS___IDSQuickRelayAllocator, "sharedInstance"));
  [v31 enablePushHandler:v30];
}

- (id)_commands
{
  id v3 = -[NSMutableSet initWithObjects:]( objc_alloc(&OBJC_CLASS___NSMutableSet),  "initWithObjects:",  &off_100946D50,  &off_100946D68,  &off_100946D80,  &off_100946D98,  &off_100946DB0,  &off_100946DC8,  &off_100946DE0,  &off_100946DF8,  &off_100946E10,  &off_100946E28,  &off_100946E40,  &off_100946E58,  &off_100946E70,  &off_100946E88,  &off_100946EA0,  &off_100946EB8,  &off_100946ED0,  &off_100946EE8,  &off_100946F00,  &off_100946F18,  &off_100946F30,  &off_100946F48,  &off_100946F60,  &off_100946F78,  &off_100946F90,  &off_100946FA8,  &off_100946FC0,  &off_100946FD8,  &off_100946FF0,  &off_100947008,  &off_100947020,  &off_100947038,  &off_100947050,  &off_100947068,  &off_100947080,  &off_100947098,  &off_1009470B0,  &off_1009470C8,  &off_1009470E0,  &off_1009470F8,  &off_100947110,  &off_100947128,  &off_100947140,  &off_100947158,  &off_100947170,  &off_100947188,  &off_1009471A0,
         &off_1009471B8,
         &off_1009471D0,
         &off_1009471E8,
         &off_100947200,
         &off_100947218,
         &off_100947230,
         &off_100947248,
         &off_100947260,
         &off_100947278,
         &off_100947290,
         0LL);
  if (self->_listenerCachedCommands) {
    -[NSMutableSet unionSet:](v3, "unionSet:");
  }
  return v3;
}

- (void)_updatePushCommandsLocked
{
  uint64_t v3 = OSLogHandleForIDSCategory("IDSDaemon");
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    listenerCachedCommands = self->_listenerCachedCommands;
    *(_DWORD *)buf = 138412290;
    uint64_t v11 = listenerCachedCommands;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "Updating push handling with commands %@",  buf,  0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v6) && _IDSShouldLog(1LL, @"IDSDaemon"))
  {
    uint64_t v9 = self->_listenerCachedCommands;
    _IDSLogV(1LL, @"IDSFoundation", @"IDSDaemon", @"Updating push handling with commands %@");
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon pushHandlerForAPSDelegatePort](self, "pushHandlerForAPSDelegatePort", v9));
  id v8 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon _commands](self, "_commands"));
  [v7 setCommands:v8 forListener:self];
}

- (id)broadcasterWithMessageContext:(id)a3
{
  id v4 = a3;
  if (self->_isHardReset)
  {
    uint64_t v5 = OSLogHandleForIDSCategory("IDSDaemon");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "Daemon was hard reset, ignoring broadcast",  v11,  2u);
    }

    id v8 = 0LL;
  }

  else
  {
    p_listenerLock = &self->_listenerLock;
    pthread_mutex_lock(&self->_listenerLock);
    id v8 = (void *)objc_claimAutoreleasedReturnValue( -[IDSIPCBroadcaster broadcastProxyForTargets:messageContext:protocol:]( self->_notifier,  "broadcastProxyForTargets:messageContext:protocol:",  self->_listeners,  v4,  &OBJC_PROTOCOL___IDSDaemonListenerProtocol));
    pthread_mutex_unlock(p_listenerLock);
  }

  return v8;
}

- (id)broadcasterForLocalObject:(id)a3 messageContext:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  if (self->_isHardReset)
  {
    uint64_t v8 = OSLogHandleForIDSCategory("IDSDaemon");
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)__int128 v16 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "Daemon was hard reset, ignoring broadcast",  v16,  2u);
    }

    uint64_t v11 = 0LL;
  }

  else
  {
    id v12 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon listenerForLocalObject:](self, "listenerForLocalObject:", v6));
    if (v12)
    {
      notifier = self->_notifier;
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObject:](&OBJC_CLASS___NSArray, "arrayWithObject:", v12));
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( -[IDSIPCBroadcaster broadcastProxyForTargets:messageContext:protocol:]( notifier,  "broadcastProxyForTargets:messageContext:protocol:",  v14,  v7,  &OBJC_PROTOCOL___IDSDaemonListenerProtocol));
    }

    else
    {
      uint64_t v11 = 0LL;
    }
  }

  return v11;
}

- (id)broadcasterForEntitlement:(id)a3 messageContext:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  if (self->_isHardReset)
  {
    uint64_t v8 = OSLogHandleForIDSCategory("IDSDaemon");
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)id v13 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "Daemon was hard reset, ignoring broadcast",  v13,  2u);
    }

    uint64_t v11 = 0LL;
  }

  else
  {
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon broadcasterForTopic:entitlement:command:messageContext:]( self,  "broadcasterForTopic:entitlement:command:messageContext:",  0LL,  v6,  0LL,  v7));
  }

  return v11;
}

- (id)_lockedRemoteObjectsWithNotificationService:(id)a3 entitlement:(id)a4 command:(id)a5 capabilities:(unsigned int)a6
{
  return -[IDSDaemon _lockedRemoteObjectsWithService:entitlement:command:capabilities:ignoreService:useNotificationServices:]( self,  "_lockedRemoteObjectsWithService:entitlement:command:capabilities:ignoreService:useNotificationServices:",  a3,  a4,  a5,  *(void *)&a6,  0LL,  1LL);
}

- (id)_lockedRemoteObjectsWithService:(id)a3 entitlement:(id)a4 command:(id)a5 capabilities:(unsigned int)a6 ignoreService:(BOOL)a7 useNotificationServices:(BOOL)a8
{
  BOOL v8 = a8;
  BOOL v9 = a7;
  uint64_t v10 = *(void *)&a6;
  id v20 = a4;
  id v14 = a5;
  id v15 = a4;
  id v16 = a3;
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v20, 1LL));

  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon _lockedRemoteObjectsWithService:entitlements:command:capabilities:ignoreService:useNotificationServices:]( self,  "_lockedRemoteObjectsWithService:entitlements:command:capabilities:ignoreService:useNotificationServices:",  v16,  v17,  v14,  v10,  v9,  v8,  v20));
  return v18;
}

- (id)_lockedRemoteObjectsWithService:(id)a3 entitlements:(id)a4 command:(id)a5 capabilities:(unsigned int)a6 ignoreService:(BOOL)a7 useNotificationServices:(BOOL)a8
{
  id v14 = a3;
  id v15 = a4;
  id v16 = a5;
  uint64_t v34 = 0LL;
  __int128 v35 = &v34;
  uint64_t v36 = 0x3032000000LL;
  __int128 v37 = sub_100112DDC;
  __int128 v38 = sub_100112DEC;
  __int128 v39 = (NSMutableArray *)0xAAAAAAAAAAAAAAAALL;
  __int128 v39 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v14 identifier]);
  listeners = self->_listeners;
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472LL;
  v25[2] = sub_100112DF4;
  v25[3] = &unk_1008FACA8;
  id v19 = v16;
  id v26 = v19;
  unsigned int v31 = a6;
  BOOL v32 = a7;
  BOOL v33 = a8;
  id v20 = v14;
  id v27 = v20;
  id v21 = v17;
  id v28 = v21;
  id v22 = v15;
  id v29 = v22;
  BOOL v30 = &v34;
  -[NSMutableArray enumerateObjectsUsingBlock:](listeners, "enumerateObjectsUsingBlock:", v25);
  id v23 = (id)v35[5];

  _Block_object_dispose(&v34, 8);
  return v23;
}

- (id)_lockedRemoteObjectsWithService:(id)a3 entitlement:(id)a4 command:(id)a5 capabilities:(unsigned int)a6
{
  return -[IDSDaemon _lockedRemoteObjectsWithService:entitlement:command:capabilities:ignoreService:useNotificationServices:]( self,  "_lockedRemoteObjectsWithService:entitlement:command:capabilities:ignoreService:useNotificationServices:",  a3,  a4,  a5,  *(void *)&a6,  0LL,  0LL);
}

- (id)_lockedRemoteObjectsWithService:(id)a3 entitlement:(id)a4 command:(id)a5 capabilities:(unsigned int)a6 ignoreService:(BOOL)a7
{
  return -[IDSDaemon _lockedRemoteObjectsWithService:entitlement:command:capabilities:ignoreService:useNotificationServices:]( self,  "_lockedRemoteObjectsWithService:entitlement:command:capabilities:ignoreService:useNotificationServices:",  a3,  a4,  a5,  *(void *)&a6,  a7,  0LL);
}

- (id)broadcasterForTopic:(id)a3 entitlement:(id)a4 command:(id)a5 messageContext:(id)a6
{
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  id v13 = a6;
  if (self->_isHardReset)
  {
    uint64_t v14 = OSLogHandleForIDSCategory("IDSDaemon");
    id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Daemon was hard reset, ignoring broadcast",  buf,  2u);
    }

    uint64_t v17 = 0LL;
  }

  else if (v10 || v11 || v12)
  {
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon serviceController](self, "serviceController"));
    id v19 = (void *)objc_claimAutoreleasedReturnValue([v18 serviceWithPushTopic:v10]);

    uint64_t v20 = OSLogHandleForIDSCategory("IDSDaemon");
    id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138412546;
      id v26 = v19;
      __int16 v27 = 2112;
      id v28 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEBUG,  "Service found to find broadcaster %@   topic: %@",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v22) && _IDSShouldLog(1LL, @"IDSDaemon")) {
      _IDSLogV( 1LL,  @"IDSFoundation",  @"IDSDaemon",  @"Service found to find broadcaster %@   topic: %@");
    }
    pthread_mutex_lock(&self->_listenerLock);
    id v23 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon _lockedRemoteObjectsWithService:entitlement:command:capabilities:]( self,  "_lockedRemoteObjectsWithService:entitlement:command:capabilities:",  v19,  v11,  v12,  0LL));
    pthread_mutex_unlock(&self->_listenerLock);
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue( -[IDSIPCBroadcaster broadcastProxyForTargets:messageContext:protocol:]( self->_notifier,  "broadcastProxyForTargets:messageContext:protocol:",  v23,  v13,  &OBJC_PROTOCOL___IDSDaemonListenerProtocol));
  }

  else
  {
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon broadcasterWithMessageContext:](self, "broadcasterWithMessageContext:", v13));
  }

  return v17;
}

- (id)broadcasterForTopic:(id)a3 entitlement:(id)a4 messageContext:(id)a5
{
  return -[IDSDaemon broadcasterForTopic:entitlement:command:messageContext:]( self,  "broadcasterForTopic:entitlement:command:messageContext:",  a3,  a4,  0LL,  a5);
}

- (id)registrationBroadcasterForTopic:(id)a3 messageContext:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  if (([v6 isEqualToIgnoringCase:@"com.apple.madrid"] & 1) != 0
    || ([v6 isEqualToIgnoringCase:@"com.apple.ess"] & 1) != 0
    || ([v6 isEqualToIgnoringCase:@"com.apple.private.ac"] & 1) != 0
    || [v6 isEqualToIgnoringCase:@"com.apple.private.alloy.facetime.multi"])
  {
    BOOL v8 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon broadcasterForTopic:entitlement:messageContext:]( self,  "broadcasterForTopic:entitlement:messageContext:",  v6,  kIDSRegistrationEntitlement,  v7));
  }

  else
  {
    BOOL v8 = 0LL;
  }

  return v8;
}

- (id)broadcasterForTopic:(id)a3 messageContext:(id)a4
{
  return -[IDSDaemon broadcasterForTopic:ignoreServiceListener:messageContext:]( self,  "broadcasterForTopic:ignoreServiceListener:messageContext:",  a3,  0LL,  a4);
}

- (id)broadcasterForTopic:(id)a3 ignoreServiceListener:(BOOL)a4 messageContext:(id)a5
{
  BOOL v6 = a4;
  id v8 = a3;
  id v9 = a5;
  id v10 = objc_autoreleasePoolPush();
  if (self->_isHardReset)
  {
    uint64_t v11 = OSLogHandleForIDSCategory("IDSDaemon");
    id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Daemon was hard reset, ignoring broadcast",  buf,  2u);
    }

    uint64_t v14 = 0LL;
  }

  else if (v8)
  {
    id v15 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon serviceController](self, "serviceController"));
    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v15 serviceWithPushTopic:v8]);

    pthread_mutex_lock(&self->_listenerLock);
    v27[0] = kIDSMessagingEntitlement;
    v27[1] = kIDSRegistrationEntitlement;
    v27[2] = kIDSSessionEntitlement;
    v27[3] = kIDSSessionPrivateEntitlement;
    v27[4] = kIDSSelfSessionEntitlement;
    v27[5] = kIDSHighPriorityMessagingEntitlement;
    v27[6] = kIDSUrgentPriorityMessagingEntitlement;
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v27, 7LL));
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon _lockedRemoteObjectsWithService:entitlements:command:capabilities:ignoreService:useNotificationServices:]( self,  "_lockedRemoteObjectsWithService:entitlements:command:capabilities:ignoreService:useNotificationServices:",  v24,  v16,  0LL,  0LL,  v6,  0LL));
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v17));
    if ([v8 isEqualToIgnoringCase:@"com.apple.private.alloy.accountssync"])
    {
      id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog accountsDebugging](&OBJC_CLASS___IMRGLog, "accountsDebugging"));
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        id v26 = v18;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "All targets for broadcast %@", buf, 0xCu);
      }
    }

    if (([v8 isEqualToIgnoringCase:@"com.apple.private.alloy.health.sync.classc"] & 1) != 0
      || ([v8 isEqualToIgnoringCase:@"com.apple.private.alloy.fitnessfriends.icloud"] & 1) != 0 || objc_msgSend( v8,  "isEqualToIgnoringCase:",  @"com.apple.private.alloy.fitnessfriends.imessage"))
    {
      uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog healthDebugging](&OBJC_CLASS___IMRGLog, "healthDebugging"));
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        id v26 = v18;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "All targets for broadcast %@", buf, 0xCu);
      }
    }

    pthread_mutex_unlock(&self->_listenerLock);
    notifier = self->_notifier;
    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v18 allObjects]);
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( -[IDSIPCBroadcaster broadcastProxyForTargets:messageContext:protocol:]( notifier,  "broadcastProxyForTargets:messageContext:protocol:",  v22,  0LL,  &OBJC_PROTOCOL___IDSDaemonListenerProtocol));
  }

  else
  {
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon broadcasterWithMessageContext:](self, "broadcasterWithMessageContext:", v9));
  }

  objc_autoreleasePoolPop(v10);

  return v14;
}

- (void)_locked_printBroadcastAttemptMapForPriority:(int64_t)a3 service:(id)a4
{
  id v6 = a4;
  uint64_t v7 = OSLogHandleForTransportCategory("IDSDaemon");
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
  {
    v12[0] = 67109378;
    v12[1] = a3;
    __int16 v13 = 2112;
    id v14 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "Broadcast Priority: %d Service: %@ \n",  (uint8_t *)v12,  0x12u);
  }

  id v9 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon broadcastAttemptQueueFromPriority:](self, "broadcastAttemptQueueFromPriority:", a3));
  id v10 = v9;
  if (v9)
  {
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKey:v6]);
    [v11 enumerateObjectsUsingBlock:&stru_1008FACE8];
  }
}

- (void)enqueueBroadcast:(id)a3 forTopic:(id)a4 entitlement:(id)a5 command:(id)a6 capabilities:(unsigned int)a7 messageContext:(id)a8
{
  uint64_t v9 = *(void *)&a7;
  id v14 = a3;
  id v15 = a4;
  id v16 = a5;
  id v17 = a6;
  id v18 = a8;
  id v19 = objc_alloc_init(&OBJC_CLASS___IDSIncomingMessageBroadcast);
  uint64_t v20 = OSLogHandleForTransportCategory("IDSDaemon");
  id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134217984;
    int64_t v25 = -[IDSIncomingMessageBroadcast broadcastID](v19, "broadcastID");
    _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_INFO,  "Broadcast: outgoing generic notification %lld\n",  buf,  0xCu);
  }

  uint64_t v23 = os_log_shim_legacy_logging_enabled(v22);
  if ((_DWORD)v23 && _IDSShouldLogTransport(v23))
  {
    -[IDSIncomingMessageBroadcast broadcastID](v19, "broadcastID");
    _IDSLogTransport(@"IDSDaemon", @"IDS", @"Broadcast: outgoing generic notification %lld\n");
  }

  -[IDSDaemon enqueueIncomingMessageBroadcast:broadcastData:forTopic:entitlement:command:capabilities:messageContext:]( self,  "enqueueIncomingMessageBroadcast:broadcastData:forTopic:entitlement:command:capabilities:messageContext:",  v14,  v19,  v15,  v16,  v17,  v9,  v18);
}

- (void)enqueueIncomingMessageBroadcast:(id)a3 broadcastData:(id)a4 forTopic:(id)a5 entitlement:(id)a6 command:(id)a7 capabilities:(unsigned int)a8 messageContext:(id)a9
{
  uint64_t v93 = *(void *)&a8;
  id v14 = a3;
  id v15 = a4;
  id v16 = a5;
  id v17 = a6;
  id v18 = a7;
  id v19 = a9;
  state.opaque[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v105 = _os_activity_create( (void *)&_mh_execute_header,  "Working on outgoing broadcast",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[0] = 0xAAAAAAAAAAAAAAAALL;
  os_activity_scope_enter(v105, &state);
  uint64_t v20 = OSLogHandleForTransportCategory("IDSDaemon");
  id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
  {
    id v22 = [v15 broadcastID];
    *(_DWORD *)buf = 134217984;
    *(void *)&uint8_t buf[4] = v22;
    _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_INFO,  "Broadcast: starting to work on outgoing notification id %lld\n",  buf,  0xCu);
  }

  uint64_t v24 = os_log_shim_legacy_logging_enabled(v23);
  if ((_DWORD)v24 && _IDSShouldLogTransport(v24))
  {
    id v73 = [v15 broadcastID];
    _IDSLogTransport( @"IDSDaemon",  @"IDS",  @"Broadcast: starting to work on outgoing notification id %lld\n");
  }

  if (!self->_isHardReset)
  {
    if (!v14) {
      goto LABEL_71;
    }
    __int16 v91 = (void (**)(id, void *))objc_retainBlock(v14);
    id v84 = [v15 messagePriority];
    if (!v16)
    {
      __int128 v45 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon broadcasterWithMessageContext:](self, "broadcasterWithMessageContext:", v19));
      v91[2](v91, v45);

LABEL_70:
      goto LABEL_71;
    }

    context = objc_autoreleasePoolPush();
    id v29 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon serviceController](self, "serviceController"));
    id v92 = (void *)objc_claimAutoreleasedReturnValue([v29 serviceWithPushTopic:v16]);

    __int16 v89 = (void *)objc_claimAutoreleasedReturnValue([v92 identifier]);
    if (!v89)
    {
      uint64_t v46 = OSLogHandleForTransportCategory("IDSDaemon");
      __int128 v47 = (os_log_s *)objc_claimAutoreleasedReturnValue(v46);
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        *(void *)&uint8_t buf[4] = v16;
        _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_DEFAULT,  "Broadcast: Couldn't find a valid service for the given topic %@\n",  buf,  0xCu);
      }

      uint64_t v49 = os_log_shim_legacy_logging_enabled(v48);
      if ((_DWORD)v49 && _IDSShouldLogTransport(v49)) {
        _IDSLogTransport( @"IDSDaemon",  @"IDS",  @"Broadcast: Couldn't find a valid service for the given topic %@\n");
      }
      v91[2](v91, 0LL);
      goto LABEL_64;
    }

    unsigned int v86 = -[IDSDaemon _shouldLaunchClientForCapabilities:](self, "_shouldLaunchClientForCapabilities:", v93);
    p_listenerLock = &self->_listenerLock;
    pthread_mutex_lock(&self->_listenerLock);
    __int128 v83 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon _lockedRemoteObjectsWithNotificationService:entitlement:command:capabilities:]( self,  "_lockedRemoteObjectsWithNotificationService:entitlement:command:capabilities:",  v92,  v17,  v18,  v93));
    pthread_mutex_unlock(&self->_listenerLock);
    id v90 = [v83 count];
    unsigned int v88 = [v15 broadcastNeedsClientAck];
    uint64_t v30 = OSLogHandleForTransportCategory("IDSDaemon");
    unsigned int v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      id v32 = [v15 broadcastID];
      *(_DWORD *)buf = 134219010;
      *(void *)&uint8_t buf[4] = v32;
      __int16 v107 = 2112;
      id v108 = v16;
      __int16 v109 = 1024;
      *(_DWORD *)v110 = v88;
      *(_WORD *)&v110[4] = 1024;
      *(_DWORD *)&v110[6] = v90 != 0LL;
      LOWORD(v111) = 1024;
      *(_DWORD *)((char *)&v111 + 2) = v86;
      _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "Broadcast: scheduling broadcast %lld on topic %@ to clients needsTargetAck %d targetsAlive %d shouldLaunch %d\n",  buf,  0x28u);
    }

    uint64_t v34 = os_log_shim_legacy_logging_enabled(v33);
    if ((_DWORD)v34 && _IDSShouldLogTransport(v34))
    {
      BOOL v76 = v90 != 0LL;
      id v77 = (id)v86;
      id v73 = [v15 broadcastID];
      id v74 = v16;
      v75 = (void *)v88;
      _IDSLogTransport( @"IDSDaemon",  @"IDS",  @"Broadcast: scheduling broadcast %lld on topic %@ to clients needsTargetAck %d targetsAlive %d shouldLaunch %d\n");
    }

    if (!v90)
    {
      uint64_t v35 = OSLogHandleForTransportCategory("IDSDaemon");
      uint64_t v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
      {
        id v37 = [v15 broadcastID];
        *(_DWORD *)buf = 134219266;
        *(void *)&uint8_t buf[4] = v37;
        __int16 v107 = 2112;
        id v108 = v16;
        __int16 v109 = 2112;
        *(void *)v110 = v92;
        *(_WORD *)&v110[8] = 2112;
        id v111 = v17;
        __int16 v112 = 2112;
        id v113 = v18;
        __int16 v114 = 1024;
        int v115 = v93;
        _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "Broadcast: broadcast %lld of topic %@ doesn't find target with service %@ entitlement %@ command %@ capabilities %u",  buf,  0x3Au);
      }

      uint64_t v39 = os_log_shim_legacy_logging_enabled(v38);
      if ((_DWORD)v39 && _IDSShouldLogTransport(v39))
      {
        id v77 = v18;
        uint64_t v78 = v93;
        v75 = v92;
        BOOL v76 = (BOOL)v17;
        id v73 = [v15 broadcastID];
        id v74 = v16;
        _IDSLogTransport( @"IDSDaemon",  @"IDS",  @"Broadcast: broadcast %lld of topic %@ doesn't find target with service %@ entitlement %@ command %@ capabilities %u");
      }
    }

    if (v90) {
      int v40 = 1;
    }
    else {
      int v40 = v88;
    }
    int v80 = v40;
    if ((v40 | v86) != 1 || v90)
    {
      __int128 v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v92, "identifier", v73, v74, v75, v76, v77, v78));
      __int128 v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](&OBJC_CLASS___NSSet, "setWithObject:", v41));
      unsigned int v43 = -[IDSDaemon _processQueuedBroadcastsForServices:priority:forceRetry:]( self,  "_processQueuedBroadcastsForServices:priority:forceRetry:",  v42,  v84,  0LL);

      if (v43)
      {
        __int16 v44 = (void *)objc_claimAutoreleasedReturnValue( -[IDSIPCBroadcaster broadcastProxyForTargets:messageContext:protocol:]( self->_notifier,  "broadcastProxyForTargets:messageContext:protocol:",  v83,  v19,  &OBJC_PROTOCOL___IDSDaemonListenerProtocol));
        v91[2](v91, v44);
        [v15 setBroadcastPerformed:1];
      }

      else if (([v15 transient] & 1) == 0)
      {
        uint64_t v50 = OSLogHandleForTransportCategory("IDSDaemon");
        __int128 v51 = (os_log_s *)objc_claimAutoreleasedReturnValue(v50);
        if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
        {
          id v52 = [v15 broadcastID];
          *(_DWORD *)buf = 134217984;
          *(void *)&uint8_t buf[4] = v52;
          _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_DEFAULT,  "Broadcast: failed to deliver broadcast %lld to targets, enqueueing for later dispatch!\n",  buf,  0xCu);
        }

        uint64_t v54 = os_log_shim_legacy_logging_enabled(v53);
        if ((_DWORD)v54 && _IDSShouldLogTransport(v54))
        {
          id v73 = [v15 broadcastID];
          _IDSLogTransport( @"IDSDaemon",  @"IDS",  @"Broadcast: failed to deliver broadcast %lld to targets, enqueueing for later dispatch!\n");
        }

        char v79 = v86 ^ 1;
        goto LABEL_49;
      }
    }

    char v79 = v86 ^ 1;
    if ((v86 & ~v80 | v88) != 1)
    {
LABEL_60:
      if (!v90 && (v79 & 1) == 0) {
        -[IDSDaemon _launchServiceOnDemand:](self, "_launchServiceOnDemand:", v92);
      }

LABEL_64:
      objc_autoreleasePoolPop(context);
      if (v89)
      {
        uint64_t v68 = OSLogHandleForTransportCategory("IDSDaemon");
        id v69 = (os_log_s *)objc_claimAutoreleasedReturnValue(v68);
        if (os_log_type_enabled(v69, OS_LOG_TYPE_INFO))
        {
          id v70 = [v15 broadcastID];
          *(_DWORD *)buf = 134217984;
          *(void *)&uint8_t buf[4] = v70;
          _os_log_impl( (void *)&_mh_execute_header,  v69,  OS_LOG_TYPE_INFO,  "Broadcast: done working on outgoing notification id %lld\n",  buf,  0xCu);
        }

        uint64_t v72 = os_log_shim_legacy_logging_enabled(v71);
        if ((_DWORD)v72 && _IDSShouldLogTransport(v72))
        {
          [v15 broadcastID];
          _IDSLogTransport( @"IDSDaemon",  @"IDS",  @"Broadcast: done working on outgoing notification id %lld\n");
        }
      }

      goto LABEL_70;
    }

- (void)_launchServiceOnDemand:(id)a3
{
  id v3 = a3;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 identifier]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 launchMachServiceNotification]);

  if (v5)
  {
    id v6 = objc_claimAutoreleasedReturnValue([v3 launchMachServiceNotification]);
    uint64_t v7 = (_xpc_connection_s *)IMXPCCreateConnectionForService(1, [v6 UTF8String], 0, &stru_1008FAD50);

    if (v7)
    {
      uint64_t v8 = OSLogHandleForTransportCategory("IDSDaemon");
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        id v10 = (void *)objc_claimAutoreleasedReturnValue([v3 launchMachServiceNotification]);
        *(_DWORD *)buf = 138412546;
        uint64_t v25 = v10;
        __int16 v26 = 2112;
        uint64_t v27 = v4;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Broadcast: Broadcasting xpc wake notification %@ to awaken clients of %@.\n",  buf,  0x16u);
      }

      uint64_t v12 = os_log_shim_legacy_logging_enabled(v11);
      if ((_DWORD)v12 && _IDSShouldLogTransport(v12))
      {
        id v21 = (void *)objc_claimAutoreleasedReturnValue([v3 launchMachServiceNotification]);
        _IDSLogTransport( @"IDSDaemon",  @"IDS",  @"Broadcast: Broadcasting xpc wake notification %@ to awaken clients of %@.\n");
      }

      xpc_object_t v13 = xpc_dictionary_create(0LL, 0LL, 0LL);
      id v22 = (void *)objc_claimAutoreleasedReturnValue([v3 launchMachServiceNotification]);
      IMInsertNSStringsToXPCDictionary(v13, "IDSClientWake");

      xpc_connection_send_message(v7, v13);
    }

- (void)launchOnDemandServicesForQueuedBroadcastAttempts
{
  uint64_t v3 = OSLogHandleForTransportCategory("IDSDaemon");
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Launching on-demand services for queued broadcast attempts\n",  buf,  2u);
  }

  uint64_t v6 = os_log_shim_legacy_logging_enabled(v5);
  if ((_DWORD)v6 && _IDSShouldLogTransport(v6)) {
    _IDSLogTransport( @"IDSDaemon",  @"IDS",  @"Launching on-demand services for queued broadcast attempts\n");
  }
  uint64_t v7 = 0LL;
  p_listenerLock = &self->_listenerLock;
  do
  {
    uint64_t v23 = v7;
    int v8 = dword_100717618[v7];
    pthread_mutex_lock(p_listenerLock);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon broadcastAttemptQueueFromPriority:](self, "broadcastAttemptQueueFromPriority:", v8));
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 allKeys]);

    pthread_mutex_unlock(p_listenerLock);
    __int128 v27 = 0u;
    __int128 v28 = 0u;
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    id v11 = v10;
    id v12 = [v11 countByEnumeratingWithState:&v25 objects:v31 count:16];
    if (v12)
    {
      uint64_t v13 = *(void *)v26;
      do
      {
        for (i = 0LL; i != v12; i = (char *)i + 1)
        {
          if (*(void *)v26 != v13) {
            objc_enumerationMutation(v11);
          }
          uint64_t v15 = *(void *)(*((void *)&v25 + 1) + 8LL * (void)i);
          id v16 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon serviceController](self, "serviceController", v22));
          id v17 = (void *)objc_claimAutoreleasedReturnValue([v16 serviceWithName:v15]);

          if (v17)
          {
            -[IDSDaemon _launchServiceOnDemand:](self, "_launchServiceOnDemand:", v17);
          }

          else
          {
            uint64_t v18 = OSLogHandleForTransportCategory("IDSDaemon");
            uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
            if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              uint64_t v30 = v15;
              _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Couldn't find a valid service for the given identifier %@\n",  buf,  0xCu);
            }

            uint64_t v21 = os_log_shim_legacy_logging_enabled(v20);
            if ((_DWORD)v21)
            {
              if (_IDSShouldLogTransport(v21))
              {
                uint64_t v22 = v15;
                _IDSLogTransport( @"IDSDaemon",  @"IDS",  @"Couldn't find a valid service for the given identifier %@\n");
              }
            }
          }
        }

        id v12 = [v11 countByEnumeratingWithState:&v25 objects:v31 count:16];
      }

      while (v12);
    }

    uint64_t v7 = v23 + 1;
  }

  while (v23 != 3);
}

- (void)launchOnDemandServicesForNeedsLaunchOnNearbyDevicesChanged
{
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon serviceController](self, "serviceController"));
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 allServices]);

  id v5 = [v4 countByEnumeratingWithState:&v16 objects:v24 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v17;
    do
    {
      for (i = 0LL; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v17 != v6) {
          objc_enumerationMutation(v4);
        }
        int v8 = *(void **)(*((void *)&v16 + 1) + 8LL * (void)i);
        if ([v8 needsLaunchOnNearbyDevicesChanged])
        {
          uint64_t v9 = OSLogHandleForTransportCategory("IDSDaemon");
          id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
            id v11 = (void *)objc_claimAutoreleasedReturnValue([v8 identifier]);
            *(_DWORD *)buf = 136315394;
            uint64_t v21 = "-[IDSDaemon launchOnDemandServicesForNeedsLaunchOnNearbyDevicesChanged]";
            __int16 v22 = 2112;
            uint64_t v23 = v11;
            _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "%s: Launching on-demand service %@\n",  buf,  0x16u);
          }

          uint64_t v13 = os_log_shim_legacy_logging_enabled(v12);
          if ((_DWORD)v13 && _IDSShouldLogTransport(v13))
          {
            id v14 = "-[IDSDaemon launchOnDemandServicesForNeedsLaunchOnNearbyDevicesChanged]";
            uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v8 identifier]);
            _IDSLogTransport(@"IDSDaemon", @"IDS", @"%s: Launching on-demand service %@\n");
          }

          -[IDSDaemon _launchServiceOnDemand:](self, "_launchServiceOnDemand:", v8, v14, v15);
        }
      }

      id v5 = [v4 countByEnumeratingWithState:&v16 objects:v24 count:16];
    }

    while (v5);
  }
}

- (id)dequeueBroadcastWithID:(int64_t)a3 forMessageUUID:(id)a4 service:(id)a5 priority:(int64_t)a6
{
  id v10 = a4;
  id v11 = a5;
  pthread_mutex_lock(&self->_listenerLock);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon broadcastAttemptQueueFromPriority:](self, "broadcastAttemptQueueFromPriority:", a6));
  if ([v12 count] && objc_msgSend(v11, "length"))
  {
    uint64_t v13 = OSLogHandleForTransportCategory("IDSDaemon");
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      LODWORD(buf) = 134217984;
      *(void *)((char *)&buf + 4) = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "Broadcast: Received request to drop enqueued broadcast %lld\n",  (uint8_t *)&buf,  0xCu);
    }

    uint64_t v16 = os_log_shim_legacy_logging_enabled(v15);
    if ((_DWORD)v16 && _IDSShouldLogTransport(v16))
    {
      id v27 = (id)a3;
      _IDSLogTransport( @"IDSDaemon",  @"IDS",  @"Broadcast: Received request to drop enqueued broadcast %lld\n");
    }

    *(void *)&__int128 buf = 0LL;
    *((void *)&buf + 1) = &buf;
    uint64_t v38 = 0x3032000000LL;
    uint64_t v39 = sub_100112DDC;
    int v40 = sub_100112DEC;
    id v41 = 0LL;
    __int128 v17 = objc_autoreleasePoolPush();
    __int128 v18 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKey:v11]);
    __int128 v28 = _NSConcreteStackBlock;
    uint64_t v29 = 3221225472LL;
    uint64_t v30 = sub_100115E3C;
    unsigned int v31 = &unk_1008FAD78;
    int64_t v34 = a3;
    id v32 = v10;
    p___int128 buf = &buf;
    [v18 enumerateObjectsUsingBlock:&v28];
    if (*(void *)(*((void *)&buf + 1) + 40LL))
    {
      uint64_t v19 = OSLogHandleForTransportCategory("IDSDaemon");
      uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        id v21 = [*(id *)(*((void *)&buf + 1) + 40) broadcastID];
        *(_DWORD *)uint64_t v35 = 134217984;
        id v36 = v21;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_INFO,  "Broadcast: Dropping enqueued broadcast %lld\n",  v35,  0xCu);
      }

      uint64_t v23 = os_log_shim_legacy_logging_enabled(v22);
      if ((_DWORD)v23 && _IDSShouldLogTransport(v23))
      {
        id v27 = [*(id *)(*((void *)&buf + 1) + 40) broadcastID];
        *(void *)&double v24 = _IDSLogTransport( @"IDSDaemon",  @"IDS",  @"Broadcast: Dropping enqueued broadcast %lld\n").n128_u64[0];
      }

      objc_msgSend(v18, "removeObject:", *(void *)(*((void *)&buf + 1) + 40), v24, v27, v28, v29, v30, v31);
      if (![v18 count])
      {
        [v12 removeObjectForKey:v11];

        __int128 v18 = 0LL;
      }
    }

    objc_autoreleasePoolPop(v17);
    -[IDSDaemon releaseBroadcastAttemptQueue:](self, "releaseBroadcastAttemptQueue:", a6);
    pthread_mutex_unlock(&self->_listenerLock);
    id v25 = *(id *)(*((void *)&buf + 1) + 40LL);
    _Block_object_dispose(&buf, 8);
  }

  else
  {
    pthread_mutex_unlock(&self->_listenerLock);
    id v25 = 0LL;
  }

  return v25;
}

- (void)_resetQueuedBroadcastsForServices:(id)a3 priority:(int64_t)a4
{
  id v6 = a3;
  p_listenerLock = &self->_listenerLock;
  pthread_mutex_lock(&self->_listenerLock);
  int v8 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon broadcastAttemptQueueFromPriority:](self, "broadcastAttemptQueueFromPriority:", a4));
  if ([v8 count] && objc_msgSend(v6, "count"))
  {
    uint64_t v9 = OSLogHandleForTransportCategory("IDSDaemon");
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 138412546;
      id v27 = v6;
      __int16 v28 = 2048;
      int64_t v29 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "Broadcast: Resetting queued broadcasts for services %@ priority %ld \n",  buf,  0x16u);
    }

    uint64_t v12 = os_log_shim_legacy_logging_enabled(v11);
    if ((_DWORD)v12 && _IDSShouldLogTransport(v12))
    {
      id v19 = v6;
      int64_t v20 = a4;
      _IDSLogTransport( @"IDSDaemon",  @"IDS",  @"Broadcast: Resetting queued broadcasts for services %@ priority %ld \n");
    }

    uint64_t v13 = objc_autoreleasePoolPush();
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    id v14 = v6;
    id v15 = [v14 countByEnumeratingWithState:&v21 objects:v25 count:16];
    if (v15)
    {
      uint64_t v16 = *(void *)v22;
      do
      {
        __int128 v17 = 0LL;
        do
        {
          if (*(void *)v22 != v16) {
            objc_enumerationMutation(v14);
          }
          __int128 v18 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( v8,  "objectForKey:",  *(void *)(*((void *)&v21 + 1) + 8 * (void)v17),  v19,  v20,  (void)v21));
          [v18 enumerateObjectsUsingBlock:&stru_1008FAD98];

          __int128 v17 = (char *)v17 + 1;
        }

        while (v15 != v17);
        id v15 = [v14 countByEnumeratingWithState:&v21 objects:v25 count:16];
      }

      while (v15);
    }

    objc_autoreleasePoolPop(v13);
    pthread_mutex_unlock(p_listenerLock);
  }

  else
  {
    pthread_mutex_unlock(p_listenerLock);
  }
}

- (BOOL)_processQueuedBroadcastsForServices:(id)a3 priority:(int64_t)a4 forceRetry:(BOOL)a5
{
  BOOL v5 = a5;
  id v32 = a3;
  p_listenerLock = &self->_listenerLock;
  pthread_mutex_lock(&self->_listenerLock);
  uint64_t v33 = self;
  int64_t v34 = a4;
  int v8 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon broadcastAttemptQueueFromPriority:](self, "broadcastAttemptQueueFromPriority:", a4));
  if ([v8 count] && objc_msgSend(v32, "count"))
  {
    uint64_t v9 = OSLogHandleForTransportCategory("IDSDaemon");
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412802;
      *(void *)&uint8_t buf[4] = v32;
      *(_WORD *)&_BYTE buf[12] = 2048;
      *(void *)&buf[14] = v34;
      *(_WORD *)&_BYTE buf[22] = 1024;
      BOOL v50 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Broadcast: Processing queued broadcasts for services %@ priority %ld forceRetry %d \n",  buf,  0x1Cu);
    }

    uint64_t v12 = os_log_shim_legacy_logging_enabled(v11);
    if ((_DWORD)v12 && _IDSShouldLogTransport(v12))
    {
      int64_t v28 = v34;
      BOOL v29 = v5;
      id v27 = v32;
      _IDSLogTransport( @"IDSDaemon",  @"IDS",  @"Broadcast: Processing queued broadcasts for services %@ priority %ld forceRetry %d \n");
    }

    *(void *)__int128 buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    LOBYTE(v50) = 1;
    context = objc_autoreleasePoolPush();
    __int128 v42 = 0u;
    __int128 v43 = 0u;
    __int128 v40 = 0u;
    __int128 v41 = 0u;
    id obj = [v32 copy];
    uint64_t v13 = 0LL;
    id v14 = [obj countByEnumeratingWithState:&v40 objects:v48 count:16];
    if (v14)
    {
      uint64_t v15 = *(void *)v41;
      do
      {
        for (i = 0LL; i != v14; i = (char *)i + 1)
        {
          if (*(void *)v41 != v15) {
            objc_enumerationMutation(obj);
          }
          uint64_t v17 = *(void *)(*((void *)&v40 + 1) + 8LL * (void)i);
          __int128 v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKey:", v17, v27, v28, v29));
          id v19 = objc_alloc_init(&OBJC_CLASS___NSMutableIndexSet);
          v36[0] = _NSConcreteStackBlock;
          v36[1] = 3221225472LL;
          v36[2] = sub_1001165A0;
          v36[3] = &unk_1008FADC0;
          BOOL v39 = v5;
          v36[4] = v17;
          uint64_t v38 = buf;
          int64_t v20 = v19;
          id v37 = v20;
          [v18 enumerateObjectsUsingBlock:v36];
          [v18 removeObjectsAtIndexes:v20];
          id v21 = [v18 count];
          if (![v18 count])
          {

            [v8 removeObjectForKey:v17];
            __int128 v18 = 0LL;
          }

          if (!*(_BYTE *)(*(void *)&buf[8] + 24LL)) {
            -[IDSDaemon _locked_printBroadcastAttemptMapForPriority:service:]( v33,  "_locked_printBroadcastAttemptMapForPriority:service:",  v34,  v17);
          }

          v13 += (uint64_t)v21;
        }

        id v14 = [obj countByEnumeratingWithState:&v40 objects:v48 count:16];
      }

      while (v14);
    }

    objc_autoreleasePoolPop(context);
    -[IDSDaemon releaseBroadcastAttemptQueue:](v33, "releaseBroadcastAttemptQueue:", v34);
    pthread_mutex_unlock(p_listenerLock);
    if (v13)
    {
      uint64_t v22 = OSLogHandleForIDSCategory("IDSDaemon");
      __int128 v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int16 v44 = 134218242;
        uint64_t v45 = v13;
        __int16 v46 = 2112;
        id v47 = v32;
        _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "Processed queued broadcast attempts - %lu remaining for %@",  v44,  0x16u);
      }

      if (os_log_shim_legacy_logging_enabled(v24) && _IDSShouldLog(0LL, @"IDSDaemon")) {
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Processed queued broadcast attempts - %lu remaining for %@");
      }
    }

    BOOL v25 = *(_BYTE *)(*(void *)&buf[8] + 24LL) != 0;
    _Block_object_dispose(buf, 8);
  }

  else
  {
    pthread_mutex_unlock(p_listenerLock);
    BOOL v25 = 1;
  }

  return v25;
}

- (void)_dropQueuedBroadcastsForServices:(id)a3 priority:(int64_t)a4
{
  id v26 = a3;
  p_listenerLock = &self->_listenerLock;
  pthread_mutex_lock(&self->_listenerLock);
  __int128 v23 = self;
  int64_t v25 = a4;
  id v27 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon broadcastAttemptQueueFromPriority:](self, "broadcastAttemptQueueFromPriority:", a4));
  if ([v27 count] && objc_msgSend(v26, "count"))
  {
    uint64_t v6 = OSLogHandleForTransportCategory("IDSDaemon");
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 134217984;
      int64_t v35 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Dropping queued broadcasts for all services priority %ld",  buf,  0xCu);
    }

    uint64_t v9 = os_log_shim_legacy_logging_enabled(v8);
    if ((_DWORD)v9)
    {
      if (_IDSShouldLogTransport(v9))
      {
        int64_t v21 = a4;
        _IDSLogTransport( @"IDSDaemon",  @"IDS",  @"Dropping queued broadcasts for all services priority %ld");
        if (_IDSShouldLog(0LL, @"IDSDaemon"))
        {
          int64_t v21 = a4;
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Dropping queued broadcasts for all services priority %ld");
        }
      }
    }

    context = objc_autoreleasePoolPush();
    __int128 v31 = 0u;
    __int128 v32 = 0u;
    __int128 v29 = 0u;
    __int128 v30 = 0u;
    id v10 = v26;
    id v11 = [v10 countByEnumeratingWithState:&v29 objects:v33 count:16];
    if (v11)
    {
      uint64_t v12 = *(void *)v30;
      do
      {
        for (i = 0LL; i != v11; i = (char *)i + 1)
        {
          if (*(void *)v30 != v12) {
            objc_enumerationMutation(v10);
          }
          id v14 = *(void **)(*((void *)&v29 + 1) + 8LL * (void)i);
          uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "identifier", v21, context));
          uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v27 objectForKey:v15]);

          v28[0] = _NSConcreteStackBlock;
          v28[1] = 3221225472LL;
          v28[2] = sub_100116B60;
          v28[3] = &unk_1008FADE8;
          v28[4] = v14;
          [v16 enumerateObjectsUsingBlock:v28];
          [v16 removeAllObjects];
        }

        id v11 = [v10 countByEnumeratingWithState:&v29 objects:v33 count:16];
      }

      while (v11);
    }

    objc_autoreleasePoolPop(context);
    uint64_t v17 = OSLogHandleForTransportCategory("IDSDaemon");
    __int128 v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 134217984;
      int64_t v35 = v25;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Dropped queued broadcasts for all services priority %ld",  buf,  0xCu);
    }

    uint64_t v20 = os_log_shim_legacy_logging_enabled(v19);
    if ((_DWORD)v20)
    {
      if (_IDSShouldLogTransport(v20))
      {
        int64_t v21 = v25;
        _IDSLogTransport( @"IDSDaemon",  @"IDS",  @"Dropped queued broadcasts for all services priority %ld");
        if (_IDSShouldLog(0LL, @"IDSDaemon"))
        {
          int64_t v21 = v25;
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Dropped queued broadcasts for all services priority %ld");
        }
      }
    }

    -[IDSDaemon releaseBroadcastAttemptQueue:](v23, "releaseBroadcastAttemptQueue:", v25, v21);
    pthread_mutex_unlock(p_listenerLock);
  }

  else
  {
    pthread_mutex_unlock(p_listenerLock);
  }
}

- (BOOL)_shouldLaunchClientForCapabilities:(unsigned int)a3
{
  return ((kIDSListenerCapConsumesLaunchOnDemandOutgoingMessageUpdates | kIDSListenerCapConsumesLaunchOnDemandIncomingMessages | kIDSListenerCapConsumesLaunchOnDemandSessionMessages | kIDSListenerCapConsumesLaunchOnDemandIncomingData | kIDSListenerCapConsumesLaunchOnDemandIncomingProtobuf | kIDSListenerCapConsumesLaunchOnDemandIncomingResource | kIDSListenerCapConsumesLaunchOnDemandEngram | kIDSListenerCapConsumesLaunchOnDemandNetworkAvailableHint | kIDSListenerCapConsumesLaunchOnDemandAccessoryReportMessages | kIDSListenerCapConsumesLaunchOnDemandGroupSessionParticipantUpdates | kIDSListenerCapConsumesLaunchOnDemandPendingMessageUpdates | kIDSListenerCapConsumesLaunchOnDemandInvitationUpdates | kIDSListenerCapConsumesLaunchOnDemandPendingResource) & a3) != 0;
}

+ (void)logAccessWarningForAccount:(id)a3 withService:(id)a4 entitlement:(id)a5 clientEntitlements:(id)a6 logMessage:(id)a7
{
  id v11 = a3;
  id v12 = a4;
  id v13 = a5;
  id v14 = a6;
  id v15 = a7;
  if (([v15 isEqualToString:@"Allowing wildcard access"] & 1) == 0)
  {
    uint64_t v16 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"IDS access warning: %@ for service: %@ entitlement: %@ account: %@ entitlements: %@",  v15,  v12,  v13,  v11,  v14);
    uint64_t v17 = OSLogHandleForIDSCategory("Warning");
    __int128 v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 138412290;
      int64_t v25 = v16;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "%@", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v19))
    {
      _IDSWarnV(@"IDSFoundation", @"%@");
      _IDSLogV(0LL, @"IDSFoundation", @"Warning", @"%@");
      _IDSLogTransport(@"Warning", @"IDS", @"%@");
    }

    uint64_t v20 = OSLogHandleForTransportCategory("IDSDaemon");
    int64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      int64_t v25 = v16;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
    }

    uint64_t v23 = os_log_shim_legacy_logging_enabled(v22);
    if ((_DWORD)v23)
    {
      if (_IDSShouldLogTransport(v23))
      {
        _IDSLogTransport(@"IDSDaemon", @"IDS", @"%@");
      }
    }
  }
}

+ (BOOL)entitlementDictionary:(id)a3 isEntitledToAccessService:(id)a4 forEntitlement:(id)a5 forAccount:(id)a6 shouldWarn:(BOOL)a7
{
  BOOL v7 = a7;
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  if (![v12 count])
  {
    LOBYTE(v19) = 0;
    uint64_t v20 = @"############### No entitlements found";
    if (!@"############### No entitlements found") {
      goto LABEL_18;
    }
    goto LABEL_16;
  }

  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKey:v14]);
  if (v13 && (uint64_t v18 = objc_opt_class(&OBJC_CLASS___NSArray, v16), (objc_opt_isKindOfClass(v17, v18) & 1) != 0))
  {
    unsigned int v19 = [v17 containsObject:v13];
    if (v19) {
      uint64_t v20 = 0LL;
    }
    else {
      uint64_t v20 = @"############### Service not found";
    }
  }

  else
  {
    uint64_t v21 = objc_opt_class(&OBJC_CLASS___NSNumber, v16);
    if ((objc_opt_isKindOfClass(v17, v21) & 1) != 0
      && ([v14 isEqualToIgnoringCase:kIDSRegistrationEntitlement] & 1) == 0)
    {
      LOBYTE(v19) = [v17 BOOLValue];
      if (v13) {
        uint64_t v20 = @"Allowing wildcard access";
      }
      else {
        uint64_t v20 = 0LL;
      }
    }

    else
    {
      LOBYTE(v19) = 0;
      uint64_t v20 = @"############### Unknown entitlement type";
    }
  }

  if (v20)
  {
LABEL_16:
    if (v7) {
      [a1 logAccessWarningForAccount:v15 withService:v13 entitlement:v14 clientEntitlements:v12 logMessage:v20];
    }
  }

- (BOOL)client:(id)a3 isEntitledToAccessService:(id)a4 forEntitlement:(id)a5 shouldWarn:(BOOL)a6
{
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  id v11 = objc_autoreleasePoolPush();
  id v12 = (void *)objc_claimAutoreleasedReturnValue([v8 entitlements]);
  else {
    unsigned __int8 v13 = 0;
  }

  objc_autoreleasePoolPop(v11);
  return v13;
}

- (BOOL)client:(id)a3 isEntitledToAccessService:(id)a4 forAnyOfEntitlements:(id)a5 shouldWarn:(BOOL)a6
{
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  id v11 = objc_autoreleasePoolPush();
  id v12 = (void *)objc_claimAutoreleasedReturnValue([v8 entitlements]);
  else {
    unsigned __int8 v13 = 0;
  }

  objc_autoreleasePoolPop(v11);
  return v13;
}

- (BOOL)daemonInterface:(id)a3 shouldGrantAccessForPID:(int)a4 auditToken:(id *)a5 portName:(id)a6 listenerConnection:(id)a7 setupInfo:(id)a8 setupResponse:(id *)a9
{
  id v30 = a3;
  id v36 = a6;
  id v35 = a7;
  id v34 = a8;
  __int128 v31 = objc_alloc(&OBJC_CLASS___NSArray);
  uint64_t v12 = kIDSTestToolEntitlement;
  uint64_t v13 = kIDSRegistrationEntitlement;
  id v14 = -[NSArray initWithObjects:]( v31,  "initWithObjects:",  kIDSRegistrationEntitlement,  kIDSMessagingEntitlement,  kIDSSessionEntitlement,  kIDSRegistrationResetEntitlement,  kIDSiCloudSignInHackEntitlement,  kIDSEncryptionKeysEntitlement,  kIDSHighPriorityMessagingEntitlement,  kIDSUrgentPriorityMessagingEntitlement,  kIDSContinuityEntitlement,  kIDSSelfSessionEntitlement,  kIDSDeviceUUIDEntitlement,  kIDSSessionPrivateEntitlement,  kIDSBypassSizeCheckEntitlement,  kIDSPreferInfraWiFiEntitlement,  kIDSLinkPreferencesEntitlement,  kIDSLocalPairingEntitlement,  kIDSLocalPairingAPIEntitlement,  kIDSAccountSyncEntitlement,  kIDSAllowedTrafficClasses,  kIDSKeyRollingEntitlement,  kIDSReportiMessageSpamEntitlement,  kIDSForceEncryptionOffEntitlement,  kIDSSubServicesEntitlement,  kIDSAppleCareServicesEntitlement,  kIDSRegistrationControlEntitlement,  kIDSPhoneNumberAuthenticationEntitlement,  kIDSPhoneNumberAuthenticationPrivateEntitlement,  kIDSTestToolEntitlement,  kIDSStateResetEntitlement,  kIDSReportSpamEntitlement,  kIDSStatusKitPublishingForStatusTypeEntitlement,  kIDSStatusKitSubscriptionForStatusTypeEntitlement,  kIDSStatusKitPublishingForAllStatusTypeEntitlement,  kIDSStatusKitSubscriptionForAllStatusTypeEntitlement,  kIDSForceQuerySendParameterEntitlement,  0LL);
  id v15 = (NSDictionary *)IMDAuditTokenTaskCopyValuesForEntitlements(a5, v14);
  if (!v15) {
    id v15 = objc_alloc_init(&OBJC_CLASS___NSDictionary);
  }
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v15, "objectForKey:", v12));
  unsigned __int8 v17 = [v16 BOOLValue];

  if ((v17 & 1) != 0) {
    goto LABEL_4;
  }
  if (([v36 isEqualToIgnoringCase:@"com.apple.purplebuddy"] & 1) != 0
    || [v36 isEqualToIgnoringCase:@"com.apple.SetupAssistant"])
  {
    uint64_t v18 = -[NSMutableDictionary initWithDictionary:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithDictionary:",  v15);
    -[NSMutableDictionary removeObjectForKey:](v18, "removeObjectForKey:", v13);
    uint64_t v24 = -[NSMutableArray initWithObjects:]( objc_alloc(&OBJC_CLASS___NSMutableArray),  "initWithObjects:",  @"com.apple.ess",  @"com.apple.madrid",  0LL);
    -[NSMutableDictionary setObject:forKey:](v18, "setObject:forKey:", v24, v13);

    goto LABEL_13;
  }

  if ([v36 isEqualToIgnoringCase:@"com.apple.Preferences"]
    && IDSDebuggingRegistrationDebuggingEnabled())
  {
LABEL_4:
    uint64_t v18 = -[NSMutableDictionary initWithDictionary:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithDictionary:",  v15);
    -[NSMutableDictionary removeObjectForKey:](v18, "removeObjectForKey:", v13);
    unsigned int v19 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon serviceController](self, "serviceController"));
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v19 allServicesStrings]);
    -[NSMutableDictionary setObject:forKey:](v18, "setObject:forKey:", v20, v13);

    uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon serviceController](self, "serviceController"));
      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v22 allServicesStrings]);
      *(_DWORD *)__int128 buf = 138412546;
      *(void *)&uint8_t buf[4] = v36;
      *(_WORD *)&_BYTE buf[12] = 2112;
      *(void *)&buf[14] = v23;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Entitling portName %@ for all services %@",  buf,  0x16u);
    }
  }

  else
  {
    uint64_t v18 = (NSMutableDictionary *)v15;
  }

- (void)_pidSuspended:(int)a3
{
  uint64_t v3 = *(void *)&a3;
  uint64_t v5 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67109120;
    LODWORD(v16) = v3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "PID: %d was suspended", buf, 8u);
  }

  if (os_log_shim_legacy_logging_enabled(v7) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    uint64_t v14 = v3;
    _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon", @"PID: %d was suspended");
  }

  pthread_mutex_lock(&self->_listenerLock);
  id v8 = (char *)-[NSMutableArray count](self->_listeners, "count");
  if ((uint64_t)(v8 - 1) >= 0)
  {
    do
    {
      id v9 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableArray objectAtIndexedSubscript:]( self->_listeners,  "objectAtIndexedSubscript:",  --v8,  v14));
      if (![v9 type])
      {
        id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 remoteObject]);
        if ([v10 pid] == (_DWORD)v3)
        {
          uint64_t v11 = OSLogHandleForIDSCategory("IDSDaemon");
          uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)__int128 buf = 67109120;
            LODWORD(v16) = v3;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "PID: %d was suspended", buf, 8u);
          }

          if (os_log_shim_legacy_logging_enabled(v13)
            && _IDSShouldLog(1LL, @"IDSDaemon"))
          {
            uint64_t v14 = v3;
            _IDSLogV(1LL, @"IDSFoundation", @"IDSDaemon", @"PID: %d was suspended");
          }

          -[IDSDaemon removeListenerWithRemoteXPCObject:](self, "removeListenerWithRemoteXPCObject:", v10, v14);
          [v10 invalidate];
        }
      }
    }

    while ((uint64_t)v8 > 0);
  }

  pthread_mutex_unlock(&self->_listenerLock);
}

- (void)refreshBundleIDs
{
  uint64_t v3 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  id v4 = self->_listeners;
  id v5 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v4,  "countByEnumeratingWithState:objects:count:",  &v17,  v21,  16LL);
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v18;
    do
    {
      id v8 = 0LL;
      do
      {
        if (*(void *)v18 != v7) {
          objc_enumerationMutation(v4);
        }
        id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v17 + 1) + 8 * (void)v8) bundleID]);
        -[NSMutableArray addObject:](v3, "addObject:", v9);

        id v8 = (char *)v8 + 1;
      }

      while (v6 != v8);
      id v6 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v4,  "countByEnumeratingWithState:objects:count:",  &v17,  v21,  16LL);
    }

    while (v6);
  }

  id v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithBlock:](&OBJC_CLASS___NSPredicate, "predicateWithBlock:", &stru_1008FAE50));
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableArray filteredArrayUsingPredicate:](v3, "filteredArrayUsingPredicate:", v10));

  if (v11)
  {
    id location = (id)0xAAAAAAAAAAAAAAAALL;
    objc_initWeak(&location, self);
    internalQueue = (dispatch_queue_s *)self->_internalQueue;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100117FB0;
    block[3] = &unk_1008F93E0;
    objc_copyWeak(&v15, &location);
    id v14 = v11;
    dispatch_async(internalQueue, block);

    objc_destroyWeak(&v15);
    objc_destroyWeak(&location);
  }
}

- (void)setListenerServices:(id)a3 commands:(id)a4 capabilities:(unsigned int)a5 messageContext:(id)a6
{
  uint64_t v7 = *(void *)&a5;
  id v10 = a3;
  id v11 = a4;
  id v12 = a6;
  uint64_t v13 = OSLogHandleForIDSCategory("IDSDaemon");
  id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 138412802;
    *(void *)&uint8_t buf[4] = v10;
    *(_WORD *)&_BYTE buf[12] = 2112;
    *(void *)&buf[14] = v11;
    *(_WORD *)&_BYTE buf[22] = 1024;
    LODWORD(v43) = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "Incoming listener services %@ commands %@ caps %d",  buf,  0x1Cu);
  }

  if (os_log_shim_legacy_logging_enabled(v15) && _IDSShouldLog(1LL, @"IDSDaemon"))
  {
    id v20 = v11;
    uint64_t v21 = v7;
    id v19 = v10;
    _IDSLogV( 1LL,  @"IDSFoundation",  @"IDSDaemon",  @"Incoming listener services %@ commands %@ caps %d");
  }

  *(void *)__int128 buf = 0LL;
  *(void *)&buf[8] = buf;
  *(void *)&buf[16] = 0x3032000000LL;
  __int16 v43 = sub_100112DDC;
  int v44 = sub_100112DEC;
  id v45 = 0LL;
  uint64_t v36 = 0LL;
  id v37 = &v36;
  uint64_t v38 = 0x3032000000LL;
  BOOL v39 = sub_100112DDC;
  BOOL v40 = sub_100112DEC;
  id v41 = 0LL;
  uint64_t v30 = 0LL;
  __int128 v31 = &v30;
  uint64_t v32 = 0x3032000000LL;
  uint64_t v33 = sub_100112DDC;
  id v34 = sub_100112DEC;
  id v35 = 0LL;
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "localObject", v19, v20, v21));
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472LL;
  v22[2] = sub_1001183C4;
  v22[3] = &unk_1008FAE78;
  id v17 = v10;
  id v23 = v17;
  BOOL v26 = buf;
  id v27 = &v36;
  int64_t v28 = &v30;
  id v18 = v11;
  int v29 = v7;
  id v24 = v18;
  int64_t v25 = self;
  -[IDSDaemon validateListenerForLocalObject:andPerformBlock:]( self,  "validateListenerForLocalObject:andPerformBlock:",  v16,  v22);

  -[IDSDaemon _flushBroadcastQueuesForServices:existingServices:]( self,  "_flushBroadcastQueuesForServices:existingServices:",  v37[5],  v31[5]);
  _Block_object_dispose(&v30, 8);

  _Block_object_dispose(&v36, 8);
  _Block_object_dispose(buf, 8);
}

- (void)registerForNotificationsOnServices:(id)a3 messageContext:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v30 = 0LL;
  __int128 v31 = &v30;
  uint64_t v32 = 0x2020000000LL;
  char v33 = 0;
  uint64_t v24 = 0LL;
  int64_t v25 = &v24;
  uint64_t v26 = 0x3032000000LL;
  id v27 = sub_100112DDC;
  int64_t v28 = sub_100112DEC;
  id v29 = (id)0xAAAAAAAAAAAAAAAALL;
  id v29 = [v6 mutableCopy];
  uint64_t v18 = 0LL;
  id v19 = &v18;
  uint64_t v20 = 0x3032000000LL;
  uint64_t v21 = sub_100112DDC;
  uint64_t v22 = sub_100112DEC;
  id v23 = 0LL;
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 localObject]);
  id v10 = _NSConcreteStackBlock;
  uint64_t v11 = 3221225472LL;
  id v12 = sub_100118E2C;
  uint64_t v13 = &unk_1008FAEA0;
  uint64_t v15 = &v30;
  uint64_t v16 = &v18;
  id v17 = &v24;
  id v9 = v6;
  id v14 = v9;
  -[IDSDaemon validateListenerForLocalObject:andPerformBlock:]( self,  "validateListenerForLocalObject:andPerformBlock:",  v8,  &v10);

  if (*((_BYTE *)v31 + 24))
  {
    -[IDSDaemon _resetBroadcastQueuesForServices:]( self,  "_resetBroadcastQueuesForServices:",  v25[5],  v10,  v11,  v12,  v13);
    -[IDSDaemon _flushBroadcastQueuesForServices:existingServices:]( self,  "_flushBroadcastQueuesForServices:existingServices:",  v19[5],  v19[5]);
  }

  _Block_object_dispose(&v18, 8);
  _Block_object_dispose(&v24, 8);

  _Block_object_dispose(&v30, 8);
}

- (void)setWakingPushPriority:(int64_t)a3 forTopic:(id)a4 messageContext:(id)a5
{
  id v8 = a4;
  id v9 = a5;
  id v10 = (void *)objc_claimAutoreleasedReturnValue(-[IDSPersistentMap objectForKey:](self->_wakingPushPriorityStore, "objectForKey:", v8));
  uint64_t v11 = OSLogHandleForIDSCategory("IDSDaemon");
  id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 134218498;
    int64_t v20 = a3;
    __int16 v21 = 2112;
    id v22 = v8;
    __int16 v23 = 2112;
    uint64_t v24 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Setting wakingPushPriority %ld for topic %@, was %@",  buf,  0x20u);
  }

  if (os_log_shim_legacy_logging_enabled(v13) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    id v17 = v8;
    uint64_t v18 = v10;
    int64_t v16 = a3;
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Setting wakingPushPriority %ld for topic %@, was %@");
  }

  if (!v10 || (int)[v10 intValue] != a3)
  {
    wakingPushPriorityStore = self->_wakingPushPriorityStore;
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a3, v16, v17, v18));
    -[IDSPersistentMap setObject:forKey:](wakingPushPriorityStore, "setObject:forKey:", v15, v8);

    -[IDSDaemon updateTopics](self, "updateTopics");
  }
}

- (void)removeWakingPushPriorityForServices:(id)a3
{
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  id v4 = a3;
  id v5 = [v4 countByEnumeratingWithState:&v14 objects:v20 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v15;
    do
    {
      for (i = 0LL; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v15 != v6) {
          objc_enumerationMutation(v4);
        }
        uint64_t v8 = *(void *)(*((void *)&v14 + 1) + 8LL * (void)i);
        id v9 = (void *)objc_claimAutoreleasedReturnValue(-[IDSPersistentMap objectForKey:](self->_wakingPushPriorityStore, "objectForKey:", v8));

        if (v9)
        {
          uint64_t v10 = OSLogHandleForIDSCategory("IDSDaemon");
          uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)__int128 buf = 138412290;
            uint64_t v19 = v8;
            _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "Removing waking push priority for service %@ in store",  buf,  0xCu);
          }

          if (os_log_shim_legacy_logging_enabled(v12)
            && _IDSShouldLog(1LL, @"IDSDaemon"))
          {
            uint64_t v13 = v8;
            _IDSLogV( 1LL,  @"IDSFoundation",  @"IDSDaemon",  @"Removing waking push priority for service %@ in store");
          }

          -[IDSPersistentMap removeObjectForKey:](self->_wakingPushPriorityStore, "removeObjectForKey:", v8, v13);
        }
      }

      id v5 = [v4 countByEnumeratingWithState:&v14 objects:v20 count:16];
    }

    while (v5);
  }
}

- (void)xpcObject:(id)a3 objectContext:(id)a4 messageContext:(id)a5
{
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKey:@"object-type"]);
  if ([v11 isEqualToIgnoringCase:@"socket"])
  {
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKey:@"socket-type"]);
    if (![v12 isEqualToIgnoringCase:@"session-socket"])
    {
LABEL_19:

      goto LABEL_20;
    }

    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKey:@"sessionID"]);
    uint64_t v14 = OSLogHandleForIDSCategory("IDSDaemon");
    __int128 v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v30 = v13;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "received socket %@", buf, 0xCu);
    }

    if (xpc_get_type(v8) != (xpc_type_t)&_xpc_type_fd)
    {
      _IMWarn(@"Incorrect objet type passed in as file descriptor");
LABEL_18:

      goto LABEL_19;
    }

    unsigned int v28 = xpc_fd_dup(v8);
    __int128 v17 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDSessionController sharedInstance](&OBJC_CLASS___IDSDSessionController, "sharedInstance"));
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v17 sessionWithUniqueID:v13]);

    if (v18)
    {
      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v18 accountID]);
      int64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v10 localObject]);
      __int16 v21 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon accountWithIdentifier:localObject:requiredEntitlement:]( self,  "accountWithIdentifier:localObject:requiredEntitlement:",  v19,  v20,  kIDSSessionEntitlement));
      BOOL v22 = v21 == 0LL;

      if (!v22)
      {
        __int16 v23 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKey:@"raw-socket"]);
        id v24 = [v23 BOOLValue];

        [v18 startListeningOnClientSocket:v28 isRawSocket:v24];
        goto LABEL_18;
      }
    }

    else
    {
      uint64_t v25 = OSLogHandleForIDSCategory("Warning");
      uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 138412290;
        uint64_t v30 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_ERROR,  "IDSDaemon - Could not find session with uniqueID %@ to setup client socket, ignoring...",  buf,  0xCu);
      }

      if (os_log_shim_legacy_logging_enabled(v27))
      {
        _IDSWarnV( @"IDSFoundation",  @"IDSDaemon - Could not find session with uniqueID %@ to setup client socket, ignoring...");
        _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"IDSDaemon - Could not find session with uniqueID %@ to setup client socket, ignoring...");
        _IDSLogTransport( @"Warning",  @"IDS",  @"IDSDaemon - Could not find session with uniqueID %@ to setup client socket, ignoring...");
      }
    }

    goto LABEL_18;
  }

- (void)openSocketWithOptions:(id)a3 messageContext:(id)a4
{
  id v5 = (__CFString *)a3;
  id v6 = a4;
  id v7 = (__CFString *)objc_claimAutoreleasedReturnValue(-[__CFString objectForKey:](v5, "objectForKey:", @"service"));
  id v63 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString objectForKey:](v5, "objectForKey:", IDSOpenSocketOptionConnectionUUIDKey));
  uint64_t v60 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString objectForKey:](v5, "objectForKey:", IDSOpenSocketOptionAWDMetricsClientInitKey));
  id v61 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString objectForKey:](v5, "objectForKey:", IDSOpenSocketOptionPriorityKey));
  if (_IDSSupportsDirectMessaging())
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString objectForKey:](v5, "objectForKey:", IDSOpenSocketOptionIsDirectMsgSocket));
    unsigned int v9 = [v8 BOOLValue];
  }

  else
  {
    unsigned int v9 = 0;
  }

  id v10 = (void *)objc_claimAutoreleasedReturnValue([v6 localObject]);
  unsigned __int8 v11 = -[IDSDaemon validateListenerForLocalObject:andCheckEntitlement:forAccessToServiceWithIdentifier:]( self,  "validateListenerForLocalObject:andCheckEntitlement:forAccessToServiceWithIdentifier:",  v10,  kIDSSelfSessionEntitlement,  v7);

  if ((v11 & 1) != 0) {
    goto LABEL_5;
  }
  if (v9)
  {
    BOOL v18 = [v61 integerValue] == (id)300;
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v6 localObject]);
    if (v18)
    {
      if (-[IDSDaemon validateListenerForLocalObject:andCheckEntitlement:forAccessToServiceWithIdentifier:]( self,  "validateListenerForLocalObject:andCheckEntitlement:forAccessToServiceWithIdentifier:",  v19,  kIDSUrgentPriorityMessagingEntitlement,  v7))
      {
      }

      else
      {
        __int16 v47 = (void *)objc_claimAutoreleasedReturnValue([v6 localObject]);
        unsigned __int8 v48 = -[IDSDaemon validateListenerForLocalObject:andCheckEntitlement:forAccessToServiceWithIdentifier:]( self,  "validateListenerForLocalObject:andCheckEntitlement:forAccessToServiceWithIdentifier:",  v47,  kIDSHighPriorityMessagingEntitlement,  v7);

        if ((v48 & 1) == 0) {
          goto LABEL_63;
        }
      }
    }

    else
    {
      unsigned int v21 = -[IDSDaemon validateListenerForLocalObject:andCheckEntitlement:forAccessToServiceWithIdentifier:]( self,  "validateListenerForLocalObject:andCheckEntitlement:forAccessToServiceWithIdentifier:",  v19,  kIDSMessagingEntitlement,  v7);

      if (!v21) {
        goto LABEL_63;
      }
    }

- (void)closeSocketWithOptions:(id)a3 messageContext:(id)a4
{
  id v6 = a3;
  id v39 = a4;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKey:@"service"]);
  uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKey:IDSOpenSocketOptionPriorityKey]);
  if (_IDSSupportsDirectMessaging())
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKey:IDSOpenSocketOptionIsDirectMsgSocket]);
    unsigned int v9 = [v8 BOOLValue];
  }

  else
  {
    unsigned int v9 = 0;
  }

  id v10 = (void *)objc_claimAutoreleasedReturnValue([v39 localObject]);
  unsigned __int8 v11 = -[IDSDaemon validateListenerForLocalObject:andCheckEntitlement:forAccessToServiceWithIdentifier:]( self,  "validateListenerForLocalObject:andCheckEntitlement:forAccessToServiceWithIdentifier:",  v10,  kIDSSelfSessionEntitlement,  v7);

  if ((v11 & 1) != 0) {
    goto LABEL_5;
  }
  if (v9)
  {
    BOOL v18 = [v38 integerValue] == (id)300;
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v39 localObject]);
    if (v18)
    {
      if (-[IDSDaemon validateListenerForLocalObject:andCheckEntitlement:forAccessToServiceWithIdentifier:]( self,  "validateListenerForLocalObject:andCheckEntitlement:forAccessToServiceWithIdentifier:",  v19,  kIDSUrgentPriorityMessagingEntitlement,  v7))
      {
      }

      else
      {
        uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([v39 localObject]);
        unsigned __int8 v36 = -[IDSDaemon validateListenerForLocalObject:andCheckEntitlement:forAccessToServiceWithIdentifier:]( self,  "validateListenerForLocalObject:andCheckEntitlement:forAccessToServiceWithIdentifier:",  v35,  kIDSHighPriorityMessagingEntitlement,  v7);

        if ((v36 & 1) == 0) {
          goto LABEL_35;
        }
      }
    }

    else
    {
      unsigned int v21 = -[IDSDaemon validateListenerForLocalObject:andCheckEntitlement:forAccessToServiceWithIdentifier:]( self,  "validateListenerForLocalObject:andCheckEntitlement:forAccessToServiceWithIdentifier:",  v19,  kIDSMessagingEntitlement,  v7);

      if (!v21) {
        goto LABEL_35;
      }
    }

- (void)getDeliveryStatsWithMessageContext:(id)a3
{
  id v3 = a3;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[IDSUTunDeliveryController sharedInstance](&OBJC_CLASS___IDSUTunDeliveryController, "sharedInstance"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 syncPriorityMessageStatistics]);
  unsigned int v21 = (void *)objc_claimAutoreleasedReturnValue([v4 defaultPriorityMessageStatistics]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 urgentPriorityMessageStatistics]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v4 urgentCloudPriorityMessageStatistics]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v4 sendingMessageStatistics]);
  unsigned int v9 = (void *)objc_claimAutoreleasedReturnValue([v4 queuedIncomingMessageDictionary]);
  id v10 = (void *)objc_claimAutoreleasedReturnValue(+[IDSUTunController sharedInstance](&OBJC_CLASS___IDSUTunController, "sharedInstance"));
  id v11 = [v10 copyLinkStatsDict];

  uint64_t v12 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  uint64_t v13 = v12;
  if (v5) {
    -[NSMutableDictionary setObject:forKey:](v12, "setObject:forKey:", v5, @"syncMessagesStats");
  }
  if (v21) {
    -[NSMutableDictionary setObject:forKey:](v13, "setObject:forKey:", v21, @"defaultMessagesStats");
  }
  if (v6) {
    -[NSMutableDictionary setObject:forKey:](v13, "setObject:forKey:", v6, @"urgentMessagesStats");
  }
  if (v7) {
    -[NSMutableDictionary setObject:forKey:](v13, "setObject:forKey:", v7, @"urgentCloudMessagesStats");
  }
  if (v8) {
    -[NSMutableDictionary setObject:forKey:](v13, "setObject:forKey:", v8, @"sendingMessageStats");
  }
  if (v9) {
    -[NSMutableDictionary setObject:forKey:](v13, "setObject:forKey:", v9, @"queuedIncomingMessages");
  }
  if (v11) {
    -[NSMutableDictionary setObject:forKey:](v13, "setObject:forKey:", v11, @"linkStats");
  }

  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v3 localObject]);
  __int128 v15 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon broadcasterForLocalObject:messageContext:]( self,  "broadcasterForLocalObject:messageContext:",  v14,  v3));

  if (v15)
  {
    uint64_t v16 = OSLogHandleForTransportCategory("IDSDaemon");
    unsigned int v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Broadcasting delivery stats to client",  buf,  2u);
    }

    uint64_t v19 = os_log_shim_legacy_logging_enabled(v18);
    if ((_DWORD)v19)
    {
      if (_IDSShouldLogTransport(v19))
      {
        _IDSLogTransport(@"IDSDaemon", @"IDS", @"Broadcasting delivery stats to client");
      }
    }

    objc_msgSend(v15, "deliveryStats:", v13, self);
  }
}

- (void)persistPendingInvitation:(id)a3 forService:(id)a4 withUniqueID:(id)a5 messageContext:(id)a6
{
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  id v13 = a6;
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v13 localObject]);
  unsigned int v15 = -[IDSDaemon validateListenerForLocalObject:andCheckEntitlement:forAccessToServiceWithIdentifier:]( self,  "validateListenerForLocalObject:andCheckEntitlement:forAccessToServiceWithIdentifier:",  v14,  kIDSMessagingEntitlement,  v11);

  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon serviceController](self, "serviceController"));
  unsigned int v17 = (void *)objc_claimAutoreleasedReturnValue([v16 serviceWithIdentifier:v11]);

  if (v17 && ([v17 isInvitationService] & v15) == 1)
  {
    uint64_t v18 = OSLogHandleForIDSCategory("IDSDaemon");
    uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412546;
      id v30 = v12;
      __int16 v31 = 2112;
      id v32 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "persistPendingInvitation: persisting invitation {%@} for service {%@}",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v20) && _IDSShouldLog(0LL, @"IDSDaemon"))
    {
      id v27 = v12;
      id v28 = v11;
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"persistPendingInvitation: persisting invitation {%@} for service {%@}");
    }

    -[IDSInvitationStore persistPendingInvitation:forService:withUniqueID:]( self->_invitationStore,  "persistPendingInvitation:forService:withUniqueID:",  v10,  v11,  v12,  v27,  v28);
  }

  else
  {
    uint64_t v21 = OSLogHandleForIDSCategory("IDSDaemon");
    uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v23 = [v17 isInvitationService];
      uint64_t v24 = @"NO";
      *(_DWORD *)__int128 buf = 138413058;
      id v30 = v12;
      if (v23) {
        uint64_t v25 = @"YES";
      }
      else {
        uint64_t v25 = @"NO";
      }
      if (v15) {
        uint64_t v24 = @"YES";
      }
      __int16 v31 = 2112;
      id v32 = v11;
      __int16 v33 = 2112;
      uint64_t v34 = v25;
      __int16 v35 = 2112;
      unsigned __int8 v36 = v24;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "persistPendingInvitation: Cannot persist invitation {%@} for service {%@} isInvitationService {%@}, isMessagingEntitled {%@} ",  buf,  0x2Au);
    }

    if (os_log_shim_legacy_logging_enabled(v26) && _IDSShouldLog(0LL, @"IDSDaemon"))
    {
      [v17 isInvitationService];
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"persistPendingInvitation: Cannot persist invitation {%@} for service {%@} isInvitationService {%@}, isMessagingEntitled {%@} ");
    }
  }
}

- (void)persistReceivedInvitation:(id)a3 forService:(id)a4 withUniqueID:(id)a5 messageContext:(id)a6
{
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  id v13 = a6;
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v13 localObject]);
  unsigned int v15 = -[IDSDaemon validateListenerForLocalObject:andCheckEntitlement:forAccessToServiceWithIdentifier:]( self,  "validateListenerForLocalObject:andCheckEntitlement:forAccessToServiceWithIdentifier:",  v14,  kIDSMessagingEntitlement,  v11);

  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon serviceController](self, "serviceController"));
  unsigned int v17 = (void *)objc_claimAutoreleasedReturnValue([v16 serviceWithIdentifier:v11]);

  if (v17 && ([v17 isInvitationService] & v15) == 1)
  {
    uint64_t v18 = OSLogHandleForIDSCategory("IDSDaemon");
    uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412546;
      id v30 = v12;
      __int16 v31 = 2112;
      id v32 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "persistReceivedInvitation: persisting invitation {%@} for service {%@}",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v20) && _IDSShouldLog(0LL, @"IDSDaemon"))
    {
      id v27 = v12;
      id v28 = v11;
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"persistReceivedInvitation: persisting invitation {%@} for service {%@}");
    }

    -[IDSInvitationStore persistReceivedInvitation:forService:withUniqueID:]( self->_invitationStore,  "persistReceivedInvitation:forService:withUniqueID:",  v10,  v11,  v12,  v27,  v28);
  }

  else
  {
    uint64_t v21 = OSLogHandleForIDSCategory("IDSDaemon");
    uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v23 = [v17 isInvitationService];
      uint64_t v24 = @"NO";
      *(_DWORD *)__int128 buf = 138413058;
      id v30 = v12;
      if (v23) {
        uint64_t v25 = @"YES";
      }
      else {
        uint64_t v25 = @"NO";
      }
      if (v15) {
        uint64_t v24 = @"YES";
      }
      __int16 v31 = 2112;
      id v32 = v11;
      __int16 v33 = 2112;
      uint64_t v34 = v25;
      __int16 v35 = 2112;
      unsigned __int8 v36 = v24;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "persistReceivedInvitation: Cannot persist invitation {%@} for service {%@} isInvitationService {%@}, isMessagingEntitled {%@} ",  buf,  0x2Au);
    }

    if (os_log_shim_legacy_logging_enabled(v26) && _IDSShouldLog(0LL, @"IDSDaemon"))
    {
      [v17 isInvitationService];
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"persistReceivedInvitation: Cannot persist invitation {%@} for service {%@} isInvitationService {%@}, isMessagingEntitled {%@} ");
    }
  }
}

- (void)removePendingInvitation:(id)a3 forService:(id)a4 messageContext:(id)a5
{
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 localObject]);
  unsigned int v12 = -[IDSDaemon validateListenerForLocalObject:andCheckEntitlement:forAccessToServiceWithIdentifier:]( self,  "validateListenerForLocalObject:andCheckEntitlement:forAccessToServiceWithIdentifier:",  v11,  kIDSMessagingEntitlement,  v9);

  id v13 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon serviceController](self, "serviceController"));
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v13 serviceWithIdentifier:v9]);

  if (v14 && ([v14 isInvitationService] & v12) == 1)
  {
    uint64_t v15 = OSLogHandleForIDSCategory("IDSDaemon");
    uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412546;
      id v27 = v8;
      __int16 v28 = 2112;
      id v29 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "removePendingInvitation: removing invitations with identifiers {%@} for service {%@}",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v17) && _IDSShouldLog(0LL, @"IDSDaemon"))
    {
      id v24 = v8;
      id v25 = v9;
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"removePendingInvitation: removing invitations with identifiers {%@} for service {%@}");
    }

    -[IDSInvitationStore removePendingInvitation:forService:]( self->_invitationStore,  "removePendingInvitation:forService:",  v8,  v9,  v24,  v25);
  }

  else
  {
    uint64_t v18 = OSLogHandleForIDSCategory("IDSDaemon");
    uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v20 = [v14 isInvitationService];
      uint64_t v21 = @"NO";
      *(_DWORD *)__int128 buf = 138413058;
      id v27 = v8;
      if (v20) {
        uint64_t v22 = @"YES";
      }
      else {
        uint64_t v22 = @"NO";
      }
      if (v12) {
        uint64_t v21 = @"YES";
      }
      __int16 v28 = 2112;
      id v29 = v9;
      __int16 v30 = 2112;
      __int16 v31 = v22;
      __int16 v32 = 2112;
      __int16 v33 = v21;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "removePendingInvitation: Cannot remove invitations {%@} for service {%@} isInvitationService {%@}, isMessagingEntitled {%@} ",  buf,  0x2Au);
    }

    if (os_log_shim_legacy_logging_enabled(v23) && _IDSShouldLog(0LL, @"IDSDaemon"))
    {
      [v14 isInvitationService];
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"removePendingInvitation: Cannot remove invitations {%@} for service {%@} isInvitationService {%@}, isMessagingEntitled {%@} ");
    }
  }
}

- (void)removeReceivedInvitation:(id)a3 forService:(id)a4 messageContext:(id)a5
{
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 localObject]);
  unsigned int v12 = -[IDSDaemon validateListenerForLocalObject:andCheckEntitlement:forAccessToServiceWithIdentifier:]( self,  "validateListenerForLocalObject:andCheckEntitlement:forAccessToServiceWithIdentifier:",  v11,  kIDSMessagingEntitlement,  v9);

  id v13 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon serviceController](self, "serviceController"));
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v13 serviceWithIdentifier:v9]);

  if (v14 && ([v14 isInvitationService] & v12) == 1)
  {
    uint64_t v15 = OSLogHandleForIDSCategory("IDSDaemon");
    uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412546;
      id v27 = v8;
      __int16 v28 = 2112;
      id v29 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "removeReceivedInvitation: removing invitations with identifiers {%@} for service {%@}",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v17) && _IDSShouldLog(0LL, @"IDSDaemon"))
    {
      id v24 = v8;
      id v25 = v9;
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"removeReceivedInvitation: removing invitations with identifiers {%@} for service {%@}");
    }

    -[IDSInvitationStore removeReceivedInvitation:forService:]( self->_invitationStore,  "removeReceivedInvitation:forService:",  v8,  v9,  v24,  v25);
  }

  else
  {
    uint64_t v18 = OSLogHandleForIDSCategory("IDSDaemon");
    uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v20 = [v14 isInvitationService];
      uint64_t v21 = @"NO";
      *(_DWORD *)__int128 buf = 138413058;
      id v27 = v8;
      if (v20) {
        uint64_t v22 = @"YES";
      }
      else {
        uint64_t v22 = @"NO";
      }
      if (v12) {
        uint64_t v21 = @"YES";
      }
      __int16 v28 = 2112;
      id v29 = v9;
      __int16 v30 = 2112;
      __int16 v31 = v22;
      __int16 v32 = 2112;
      __int16 v33 = v21;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "removeReceivedInvitation: Cannot remove invitations {%@} for service {%@} isInvitationService {%@}, isMessagingEntitled {%@} ",  buf,  0x2Au);
    }

    if (os_log_shim_legacy_logging_enabled(v23) && _IDSShouldLog(0LL, @"IDSDaemon"))
    {
      [v14 isInvitationService];
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"removeReceivedInvitation: Cannot remove invitations {%@} for service {%@} isInvitationService {%@}, isMessagingEntitled {%@} ");
    }
  }
}

- (void)tryForceFamilyFetchWithMessageContext:(id)a3
{
  id v4 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon familyManager](self, "familyManager", a3));
  unsigned int v5 = [v4 canForceFamilyFetch];

  if (v5)
  {
    id v6 = (id)objc_claimAutoreleasedReturnValue(-[IDSDaemon familyManager](self, "familyManager"));
    [v6 forceFamilyFetch];
  }

- (id)deliveryControllerQueuedIncomingMessageDictionary:(id)a3
{
  p_listenerLock = &self->_listenerLock;
  pthread_mutex_lock(&self->_listenerLock);
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary allKeys](self->_queuedBroadcastAttempts, "allKeys"));
  id v6 = [v5 count];
  if (v6)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithCapacity:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithCapacity:",  v6));
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    __int128 v22 = 0u;
    uint64_t v18 = v5;
    id v8 = v5;
    id v9 = [v8 countByEnumeratingWithState:&v19 objects:v23 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = *(void *)v20;
      do
      {
        for (i = 0LL; i != v10; i = (char *)i + 1)
        {
          if (*(void *)v20 != v11) {
            objc_enumerationMutation(v8);
          }
          uint64_t v13 = *(void *)(*((void *)&v19 + 1) + 8LL * (void)i);
          uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKey:]( self->_queuedBroadcastAttempts,  "objectForKey:",  v13,  v18));
          id v15 = [v14 count];

          uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  v15));
          [v7 setObject:v16 forKey:v13];
        }

        id v10 = [v8 countByEnumeratingWithState:&v19 objects:v23 count:16];
      }

      while (v10);
    }

    unsigned int v5 = v18;
  }

  else
  {
    id v7 = 0LL;
  }

  pthread_mutex_unlock(p_listenerLock);

  return v7;
}

- (void)_notifyTinkerServicesOfPairedDevice:(id)a3 withBlock:(id)a4
{
  id v6 = a3;
  id v7 = (void (**)(id, void *, void *, void *, BOOL))a4;
  if (v7)
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKey:IDSDevicePropertyPushToken]);
    id v26 = v6;
    if (v8)
    {
      id v9 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKey:IDSDevicePropertyIdentities]);
      BOOL v10 = (unint64_t)[v9 count] > 1;
    }

    else
    {
      BOOL v10 = 0;
    }

    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon serviceController](self, "serviceController"));
    unsigned int v12 = (void *)objc_claimAutoreleasedReturnValue([v11 allTinkerServices]);

    if (!v10)
    {
      uint64_t v13 = objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "__imArrayByFilteringWithBlock:", &stru_1008FAF30));

      unsigned int v12 = (void *)v13;
    }

    __int128 v30 = 0u;
    __int128 v31 = 0u;
    __int128 v28 = 0u;
    __int128 v29 = 0u;
    id obj = v12;
    id v14 = [obj countByEnumeratingWithState:&v28 objects:v32 count:16];
    if (v14)
    {
      id v15 = v14;
      uint64_t v16 = *(void *)v29;
      do
      {
        for (i = 0LL; i != v15; i = (char *)i + 1)
        {
          if (*(void *)v29 != v16) {
            objc_enumerationMutation(obj);
          }
          uint64_t v18 = *(void **)(*((void *)&v28 + 1) + 8LL * (void)i);
          __int128 v19 = objc_alloc_init(&OBJC_CLASS___IMMessageContext);
          __int128 v20 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
          __int128 v21 = (void *)objc_claimAutoreleasedReturnValue([v18 pushTopic]);
          __int128 v22 = (void *)objc_claimAutoreleasedReturnValue([v20 broadcasterForTopic:v21 ignoreServiceListener:1 messageContext:v19]);

          uint64_t v23 = objc_autoreleasePoolPush();
          id v24 = (void *)objc_claimAutoreleasedReturnValue([v18 identifier]);
          id v25 = (void *)objc_claimAutoreleasedReturnValue([v18 pushTopic]);
          v7[2](v7, v22, v24, v25, [v18 adHocServiceType] == 2);

          objc_autoreleasePoolPop(v23);
        }

        id v15 = [obj countByEnumeratingWithState:&v28 objects:v32 count:16];
      }

      while (v15);
    }

    id v6 = v26;
  }
}

- (void)didAddPairedDevice:(id)a3
{
  id v4 = a3;
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:IDSDevicePropertyPairingType]);
  id v6 = [v5 integerValue];

  if (v6 == (id)1)
  {
    uint64_t v7 = IDSDevicePropertyIdentities;
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:IDSDevicePropertyIdentities]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue( +[IDSPairedDevice iCloudIdentitiesFromIdentities:]( &OBJC_CLASS___IDSPairedDevice,  "iCloudIdentitiesFromIdentities:",  v8));

    BOOL v10 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v7]);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[IDSPairedDevice localIdentitiesFromIdentities:]( &OBJC_CLASS___IDSPairedDevice,  "localIdentitiesFromIdentities:",  v10));

    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    v14[2] = sub_10011C18C;
    v14[3] = &unk_1008FAF58;
    id v15 = v4;
    id v16 = v11;
    id v17 = v9;
    id v12 = v9;
    id v13 = v11;
    -[IDSDaemon _notifyTinkerServicesOfPairedDevice:withBlock:]( self,  "_notifyTinkerServicesOfPairedDevice:withBlock:",  v15,  v14);
  }
}

- (void)didRemovePairedDevice:(id)a3
{
  id v4 = a3;
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:IDSDevicePropertyPairingType]);
  id v6 = [v5 integerValue];

  if (v6 == (id)1)
  {
    uint64_t v7 = IDSDevicePropertyIdentities;
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:IDSDevicePropertyIdentities]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue( +[IDSPairedDevice iCloudIdentitiesFromIdentities:]( &OBJC_CLASS___IDSPairedDevice,  "iCloudIdentitiesFromIdentities:",  v8));

    BOOL v10 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v7]);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[IDSPairedDevice localIdentitiesFromIdentities:]( &OBJC_CLASS___IDSPairedDevice,  "localIdentitiesFromIdentities:",  v10));

    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    v14[2] = sub_10011C454;
    v14[3] = &unk_1008FAF58;
    id v15 = v4;
    id v16 = v11;
    id v17 = v9;
    id v12 = v9;
    id v13 = v11;
    -[IDSDaemon _notifyTinkerServicesOfPairedDevice:withBlock:]( self,  "_notifyTinkerServicesOfPairedDevice:withBlock:",  v15,  v14);
  }
}

- (void)didUpdatePairedDevice:(id)a3
{
  id v4 = a3;
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:IDSDevicePropertyPairingType]);
  id v6 = [v5 integerValue];

  if (v6 == (id)1)
  {
    uint64_t v7 = IDSDevicePropertyIdentities;
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:IDSDevicePropertyIdentities]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue( +[IDSPairedDevice iCloudIdentitiesFromIdentities:]( &OBJC_CLASS___IDSPairedDevice,  "iCloudIdentitiesFromIdentities:",  v8));

    BOOL v10 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v7]);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[IDSPairedDevice localIdentitiesFromIdentities:]( &OBJC_CLASS___IDSPairedDevice,  "localIdentitiesFromIdentities:",  v10));

    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    v14[2] = sub_10011C71C;
    v14[3] = &unk_1008FAF58;
    id v15 = v4;
    id v16 = v11;
    id v17 = v9;
    id v12 = v9;
    id v13 = v11;
    -[IDSDaemon _notifyTinkerServicesOfPairedDevice:withBlock:]( self,  "_notifyTinkerServicesOfPairedDevice:withBlock:",  v15,  v14);
  }
}

- (void)didUpdateProtocolForPairedDevice:(id)a3
{
  id v4 = a3;
  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:IDSDevicePropertyPairingType]);
  id v6 = [v5 integerValue];

  if (v6 == (id)1)
  {
    uint64_t v7 = IDSDevicePropertyIdentities;
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:IDSDevicePropertyIdentities]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue( +[IDSPairedDevice iCloudIdentitiesFromIdentities:]( &OBJC_CLASS___IDSPairedDevice,  "iCloudIdentitiesFromIdentities:",  v8));

    BOOL v10 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v7]);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[IDSPairedDevice localIdentitiesFromIdentities:]( &OBJC_CLASS___IDSPairedDevice,  "localIdentitiesFromIdentities:",  v10));

    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    v14[2] = sub_10011C9E4;
    v14[3] = &unk_1008FAF58;
    id v15 = v4;
    id v16 = v11;
    id v17 = v9;
    id v12 = v9;
    id v13 = v11;
    -[IDSDaemon _notifyTinkerServicesOfPairedDevice:withBlock:]( self,  "_notifyTinkerServicesOfPairedDevice:withBlock:",  v15,  v14);
  }
}

- (void)registrationHashProcessor:(id)a3 didFlushCacheForService:(id)a4 remoteURI:(id)a5 localURI:(id)a6 guid:(id)a7
{
  id v23 = a3;
  id v12 = a4;
  id v13 = a5;
  id v14 = a6;
  id v15 = a7;
  id v16 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon serviceController](self, "serviceController"));
  id v17 = (void *)objc_claimAutoreleasedReturnValue([v16 serviceWithIdentifier:v12]);

  if (v17)
  {
    uint64_t v18 = objc_alloc_init(&OBJC_CLASS___IMMessageContext);
    __int128 v19 = (void *)objc_claimAutoreleasedReturnValue([v17 pushTopic]);
    __int128 v20 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon broadcasterForTopic:ignoreServiceListener:messageContext:]( self,  "broadcasterForTopic:ignoreServiceListener:messageContext:",  v19,  1LL,  v18));

    __int128 v21 = objc_autoreleasePoolPush();
    __int128 v22 = (void *)objc_claimAutoreleasedReturnValue([v17 pushTopic]);
    [v20 didFlushCacheForService:v22 remoteURI:v13 fromURI:v14 guid:v15];

    objc_autoreleasePoolPop(v21);
  }
}

- (IDSRegistrationHashProcessor)queryUpdateNotifier
{
  return self->_queryUpdateNotifier;
}

- (IDSCertifiedDeliveryReplayCommitter)replayStateCommitter
{
  return self->_replayStateCommitter;
}

- (IDSRegistrationConductor)registrationConductor
{
  return self->_registrationConductor;
}

- (IDSTransparentEndpointViewer)transparentEndpointViewer
{
  return self->_transparentEndpointViewer;
}

- (void).cxx_destruct
{
}

- (void)authenticatePhoneWithRequestUUID:(id)a3 messageContext:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 localObject]);
  uint64_t v9 = kIDSPhoneNumberAuthenticationPrivateEntitlement;
  unsigned __int8 v10 = -[IDSDaemon validateListenerForLocalObject:andCheckEntitlement:]( self,  "validateListenerForLocalObject:andCheckEntitlement:",  v8,  kIDSPhoneNumberAuthenticationPrivateEntitlement);

  uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog sms](&OBJC_CLASS___IMRGLog, "sms"));
  BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
  if ((v10 & 1) != 0)
  {
    if (v12)
    {
      id v13 = (void *)objc_claimAutoreleasedReturnValue([v7 localObject]);
      id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 processName]);
      *(_DWORD *)__int128 buf = 138412546;
      id v26 = v6;
      __int16 v27 = 2112;
      __int128 v28 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Authenticating phone {uuid: %@, client: %@}",  buf,  0x16u);
    }

    id v15 = sub_10015F3E0();
    id v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
    id v17 = (void *)objc_claimAutoreleasedReturnValue([v16 authenticatePhoneUser]);

    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472LL;
    v22[2] = sub_10015F420;
    v22[3] = &unk_1008FBB78;
    void v22[4] = self;
    id v23 = v7;
    id v24 = v6;
    [v17 registerResultBlock:v22];
  }

  else
  {
    if (v12)
    {
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v7 localObject]);
      __int128 v19 = (void *)objc_claimAutoreleasedReturnValue([v18 processName]);
      *(_DWORD *)__int128 buf = 138412290;
      id v26 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Missing phone number authentication entitlement -- failing authenticate phone request {client: %@}",  buf,  0xCu);
    }

    __int128 v20 = (void *)objc_claimAutoreleasedReturnValue([v7 localObject]);
    id v17 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon broadcasterForLocalObject:messageContext:]( self,  "broadcasterForLocalObject:messageContext:",  v20,  v7));

    if (v17)
    {
      __int128 v21 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon _errorForMissingEntitlement:](self, "_errorForMissingEntitlement:", v9));
      [v17 didAuthenticatePhoneWithAuthenticationCertificateData:0 requestUUID:v6 error:v21];
    }
  }
}

- (void)generatePhoneAuthenticationSignatureOverData:(id)a3 withRequestUUID:(id)a4 messageContext:(id)a5
{
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 localObject]);
  uint64_t v12 = kIDSPhoneNumberAuthenticationEntitlement;
  unsigned __int8 v13 = -[IDSDaemon validateListenerForLocalObject:andCheckEntitlement:]( self,  "validateListenerForLocalObject:andCheckEntitlement:",  v11,  kIDSPhoneNumberAuthenticationEntitlement);

  id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog sms](&OBJC_CLASS___IMRGLog, "sms"));
  BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
  if ((v13 & 1) != 0)
  {
    if (v15)
    {
      id v16 = (void *)objc_claimAutoreleasedReturnValue([v10 localObject]);
      id v17 = (void *)objc_claimAutoreleasedReturnValue([v16 processName]);
      if (v8) {
        uint64_t v18 = @"YES";
      }
      else {
        uint64_t v18 = @"NO";
      }
      *(_DWORD *)__int128 buf = 138413058;
      id v31 = v9;
      __int16 v32 = 2112;
      __int16 v33 = v17;
      __int16 v34 = 2112;
      __int16 v35 = v18;
      __int16 v36 = 2048;
      id v37 = [v8 length];
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Generating phone authentication signature over data {uuid: %@, client: %@, data: %@, length: %lu}",  buf,  0x2Au);
    }

    id v19 = sub_10015F3E0();
    __int128 v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
    __int128 v21 = (void *)objc_claimAutoreleasedReturnValue([v20 localPhoneAuthenticationCertificates]);

    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472LL;
    v26[2] = sub_10015F7E4;
    v26[3] = &unk_1008FBBA0;
    v26[4] = self;
    id v27 = v10;
    id v28 = v8;
    id v29 = v9;
    [v21 registerResultBlock:v26];
  }

  else
  {
    if (v15)
    {
      __int128 v22 = (void *)objc_claimAutoreleasedReturnValue([v10 localObject]);
      id v23 = (void *)objc_claimAutoreleasedReturnValue([v22 processName]);
      *(_DWORD *)__int128 buf = 138412290;
      id v31 = v23;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Missing phone number authentication entitlement -- failing phone authentication signature request {client: %@}",  buf,  0xCu);
    }

    id v24 = (void *)objc_claimAutoreleasedReturnValue([v10 localObject]);
    __int128 v21 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon broadcasterForLocalObject:messageContext:]( self,  "broadcasterForLocalObject:messageContext:",  v24,  v10));

    if (v21)
    {
      id v25 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon _errorForMissingEntitlement:](self, "_errorForMissingEntitlement:", v12));
      [v21 didGeneratePhoneAuthenticationSignature:0 nonce:0 certificates:0 labelIDs:0 inputData:0 requestUUID:v9 error:v25];
    }
  }
}

- (void)requestCarrierTokenForSubscriptionSource:(id)a3 IMEI:(id)a4 carrierNonce:(id)a5 requestUUID:(id)a6 messageContext:(id)a7
{
  id v12 = a3;
  id v104 = a4;
  id v103 = a5;
  id v13 = a6;
  id v14 = a7;
  BOOL v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog sms](&OBJC_CLASS___IMRGLog, "sms"));
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    id v16 = (void *)objc_claimAutoreleasedReturnValue([v14 localObject]);
    id v17 = (void *)objc_claimAutoreleasedReturnValue([v16 processName]);
    *(_DWORD *)__int128 buf = 138413314;
    id v120 = v13;
    __int16 v121 = 2112;
    v122 = v17;
    __int16 v123 = 2112;
    id v124 = v12;
    __int16 v125 = 2112;
    id v126 = v104;
    __int16 v127 = 2112;
    id v128 = v103;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Requesting carrier token {uuid: %@, client: %@, subscriptionSource: %@, IMEI: %@, carrierNonce: %@}",  buf,  0x34u);
  }

  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v14 localObject]);
  uint64_t v19 = kIDSPhoneNumberAuthenticationEntitlement;
  unsigned __int8 v20 = -[IDSDaemon validateListenerForLocalObject:andCheckEntitlement:]( self,  "validateListenerForLocalObject:andCheckEntitlement:",  v18,  kIDSPhoneNumberAuthenticationEntitlement);

  if ((v20 & 1) == 0)
  {
    id v64 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog sms](&OBJC_CLASS___IMRGLog, "sms"));
    if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
    {
      id v65 = (void *)objc_claimAutoreleasedReturnValue([v14 localObject]);
      id v66 = (void *)objc_claimAutoreleasedReturnValue([v65 processName]);
      *(_DWORD *)__int128 buf = 138412290;
      id v120 = v66;
      _os_log_impl( (void *)&_mh_execute_header,  v64,  OS_LOG_TYPE_DEFAULT,  "Missing phone number authentication entitlement -- failing phone carrier token request {client: %@}",  buf,  0xCu);
    }

    id v67 = (void *)objc_claimAutoreleasedReturnValue([v14 localObject]);
    __int128 v21 = (IDSGetSIMAuthTokenMessage *)objc_claimAutoreleasedReturnValue( -[IDSDaemon broadcasterForLocalObject:messageContext:]( self,  "broadcasterForLocalObject:messageContext:",  v67,  v14));

    id v23 = (IDSGetSIMAuthTokenMessage *)objc_claimAutoreleasedReturnValue( -[IDSDaemon _errorForMissingEntitlement:]( self,  "_errorForMissingEntitlement:",  v19));
    uint64_t v68 = v21;
    id v69 = v13;
    id v70 = v23;
    goto LABEL_26;
  }

  if (!v104 || !v103)
  {
    uint64_t v71 = IDSRegistrationControlErrorDomain;
    NSErrorUserInfoKey v117 = NSDebugDescriptionErrorKey;
    uint64_t v118 = @"Request was missing IMEI or carrier nonce";
    uint64_t v72 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v118,  &v117,  1LL));
    __int128 v21 = (IDSGetSIMAuthTokenMessage *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v71,  1LL,  v72));

    id v73 = (void *)objc_claimAutoreleasedReturnValue([v14 localObject]);
    id v23 = (IDSGetSIMAuthTokenMessage *)objc_claimAutoreleasedReturnValue( -[IDSDaemon broadcasterForLocalObject:messageContext:]( self,  "broadcasterForLocalObject:messageContext:",  v73,  v14));

    uint64_t v68 = v23;
    id v69 = v13;
    id v70 = v21;
LABEL_26:
    -[IDSGetSIMAuthTokenMessage didRequestCarrierTokenString:requestUUID:error:]( v68,  "didRequestCarrierTokenString:requestUUID:error:",  0LL,  v69,  v70);
    goto LABEL_35;
  }

  __int16 v102 = v12;
  __int128 v21 = objc_alloc_init(&OBJC_CLASS___IDSGetSIMAuthTokenMessage);
  __int128 v22 = (void *)objc_claimAutoreleasedReturnValue(+[FTDeviceSupport sharedInstance](&OBJC_CLASS___FTDeviceSupport, "sharedInstance"));
  id v23 = (IDSGetSIMAuthTokenMessage *)objc_claimAutoreleasedReturnValue([v22 model]);

  id v24 = (void *)objc_claimAutoreleasedReturnValue(+[FTDeviceSupport sharedInstance](&OBJC_CLASS___FTDeviceSupport, "sharedInstance"));
  uint64_t v25 = objc_claimAutoreleasedReturnValue([v24 productOSVersion]);

  id v26 = (void *)objc_claimAutoreleasedReturnValue(+[FTDeviceSupport sharedInstance](&OBJC_CLASS___FTDeviceSupport, "sharedInstance"));
  uint64_t v27 = objc_claimAutoreleasedReturnValue([v26 productBuildVersion]);

  -[IDSGetSIMAuthTokenMessage setHardwareVersion:](v21, "setHardwareVersion:", v23);
  id v100 = (void *)v25;
  -[IDSGetSIMAuthTokenMessage setOsVersion:](v21, "setOsVersion:", v25);
  v101 = (void *)v27;
  -[IDSGetSIMAuthTokenMessage setSoftwareVersion:](v21, "setSoftwareVersion:", v27);
  -[IDSGetSIMAuthTokenMessage setCarrierNonce:](v21, "setCarrierNonce:", v103);
  -[IDSGetSIMAuthTokenMessage setIMEI:](v21, "setIMEI:", v104);
  id v28 = (void *)objc_claimAutoreleasedReturnValue( +[IDSPushHandler sharedInstanceWithPortName:]( &OBJC_CLASS___IDSPushHandler,  "sharedInstanceWithPortName:",  @"com.apple.identityservicesd.aps"));
  uint64_t v29 = objc_claimAutoreleasedReturnValue([v28 pushToken]);

  -[IDSGetSIMAuthTokenMessage setPushToken:](v21, "setPushToken:", v29);
  char v30 = IDSAssignPushIdentityToMessage(v21);
  if (v29 && (v30 & 1) != 0)
  {
    id v31 = (void *)objc_claimAutoreleasedReturnValue(+[IDSCTAdapter sharedInstance](&OBJC_CLASS___IDSCTAdapter, "sharedInstance"));
    id v110 = 0LL;
    __int16 v32 = (void *)objc_claimAutoreleasedReturnValue([v31 currentSIMsWithError:&v110]);
    id v98 = v110;

    id v97 = (void *)v29;
    id v99 = v32;
    if (v32)
    {
      v108[0] = _NSConcreteStackBlock;
      v108[1] = 3221225472LL;
      v108[2] = sub_1001607B8;
      v108[3] = &unk_1008FBBC8;
      id v109 = v102;
      __int16 v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "__imArrayByFilteringWithBlock:", v108));
      __int16 v34 = (void *)objc_claimAutoreleasedReturnValue([v33 firstObject]);

      __int16 v35 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
      __int16 v36 = (void *)objc_claimAutoreleasedReturnValue([v35 registrationConductor]);
      id v37 = (void *)objc_claimAutoreleasedReturnValue([v36 userStore]);

      id v96 = v34;
      uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue([v34 SIMIdentifier]);
      id v39 = (void *)objc_claimAutoreleasedReturnValue([v37 userWithUniqueIdentifier:v38]);

      uint64_t v93 = v37;
      uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([v37 authenticationCertificateForUser:v39]);
      id v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog sms](&OBJC_CLASS___IMRGLog, "sms"));
      if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138413058;
        id v120 = v96;
        __int16 v121 = 2112;
        v122 = v99;
        __int16 v123 = 2112;
        id v124 = v39;
        __int16 v125 = 2112;
        id v126 = v40;
        _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEFAULT,  "Determined phone number identifier to use for carrier token request {matchingSIM: %@, availableSIMs:%@, phoneU ser: %@, phoneAuthenticationCertificate: %@}",  buf,  0x2Au);
      }

      __int16 v94 = v40;
      id v95 = v39;
      if (v39 && v40)
      {
        char v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog sms](&OBJC_CLASS___IMRGLog, "sms"));
        if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 138412546;
          id v120 = v39;
          __int16 v121 = 2112;
          v122 = v40;
          _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEFAULT,  "Adding phone number account to the carrier token request {phoneUser: %@, phoneAuthenticationCertificate: %@}",  buf,  0x16u);
        }

        __int16 v91 = (void *)objc_claimAutoreleasedReturnValue([v39 realmPrefixedIdentifier]);
        __int16 v43 = (void *)objc_claimAutoreleasedReturnValue([v40 dataRepresentation]);
        id v44 = (void *)objc_claimAutoreleasedReturnValue( +[IDSRegistrationKeyManager sharedInstance]( &OBJC_CLASS___IDSRegistrationKeyManager,  "sharedInstance"));
        id v45 = [v44 identityPrivateKey];
        __int16 v46 = (void *)objc_claimAutoreleasedReturnValue( +[IDSRegistrationKeyManager sharedInstance]( &OBJC_CLASS___IDSRegistrationKeyManager,  "sharedInstance"));
        -[IDSGetSIMAuthTokenMessage addAuthUserID:certificate:privateKey:publicKey:]( v21,  "addAuthUserID:certificate:privateKey:publicKey:",  v91,  v43,  v45,  [v46 identityPublicKey]);

        __int16 v47 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDServiceController sharedInstance](&OBJC_CLASS___IDSDServiceController, "sharedInstance"));
        uint64_t v48 = objc_claimAutoreleasedReturnValue([v47 serviceWithIdentifier:@"com.apple.private.alloy.multiplex1"]);

        uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
        BOOL v50 = (void *)objc_claimAutoreleasedReturnValue([v49 appleIDAccountOnService:v48]);

        id v92 = v50;
        __int128 v51 = (void *)objc_claimAutoreleasedReturnValue([v50 registration]);
        id v52 = (void *)objc_claimAutoreleasedReturnValue([v51 authenticationCert]);

        if (v52)
        {
          uint64_t v90 = v48;
          uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue([v50 registration]);
          id v54 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog sms](&OBJC_CLASS___IMRGLog, "sms"));
          if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)__int128 buf = 138412290;
            id v120 = v53;
            _os_log_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_DEFAULT,  "Adding Apple ID account to the carrier token request {registration: %@}",  buf,  0xCu);
          }

          uint64_t v55 = (void *)objc_claimAutoreleasedReturnValue([v53 idsUserID]);
          id v56 = (void *)objc_claimAutoreleasedReturnValue([v53 authenticationCert]);
          id v57 = (void *)objc_claimAutoreleasedReturnValue( +[IDSRegistrationKeyManager sharedInstance]( &OBJC_CLASS___IDSRegistrationKeyManager,  "sharedInstance"));
          __int16 v89 = v53;
          id v58 = [v57 identityPrivateKey];
          uint64_t v59 = (void *)objc_claimAutoreleasedReturnValue( +[IDSRegistrationKeyManager sharedInstance]( &OBJC_CLASS___IDSRegistrationKeyManager,  "sharedInstance"));
          -[IDSGetSIMAuthTokenMessage addAuthUserID:certificate:privateKey:publicKey:]( v21,  "addAuthUserID:certificate:privateKey:publicKey:",  v55,  v56,  v58,  [v59 identityPublicKey]);

          uint64_t v48 = v90;
        }

        sub_1001BFCFC();
        v105[0] = _NSConcreteStackBlock;
        v105[1] = 3221225472LL;
        v105[2] = sub_100160820;
        v105[3] = &unk_1008FBBF0;
        v105[4] = self;
        id v106 = v14;
        id v107 = v13;
        -[IDSGetSIMAuthTokenMessage setCompletionBlock:](v21, "setCompletionBlock:", v105);
        uint64_t v60 = (void *)v48;
        if (qword_1009BEBE0 != -1) {
          dispatch_once(&qword_1009BEBE0, &stru_1008FBC30);
        }
        id v12 = v102;
        id v61 = v100;
        id v62 = v97;
        [(id)qword_1009BEBD8 sendMessage:v21];

        id v63 = v92;
      }

      else
      {
        uint64_t v86 = IDSRegistrationControlErrorDomain;
        NSErrorUserInfoKey v111 = NSDebugDescriptionErrorKey;
        __int16 v112 = @"The selected phone number account is not currently authenticated";
        __int16 v87 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v112,  &v111,  1LL));
        uint64_t v60 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v86,  1LL,  v87));

        unsigned int v88 = (void *)objc_claimAutoreleasedReturnValue([v14 localObject]);
        id v63 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon broadcasterForLocalObject:messageContext:]( self,  "broadcasterForLocalObject:messageContext:",  v88,  v14));

        [v63 didRequestCarrierTokenString:0 requestUUID:v13 error:v60];
        id v12 = v102;
        id v61 = v100;
        id v62 = v97;
      }

      __int128 v83 = v109;
    }

    else
    {
      int v80 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog sms](&OBJC_CLASS___IMRGLog, "sms"));
      if (os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412290;
        id v120 = v98;
        _os_log_impl( (void *)&_mh_execute_header,  v80,  OS_LOG_TYPE_DEFAULT,  "Failed to fetch SIMs {SIMFetchError: %@}",  buf,  0xCu);
      }

      uint64_t v81 = IDSRegistrationControlErrorDomain;
      NSErrorUserInfoKey v113 = NSDebugDescriptionErrorKey;
      __int16 v114 = @"Unable to locate SIMs prior to fetching auth cert";
      __int128 v82 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v114,  &v113,  1LL));
      __int128 v83 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v81,  1LL,  v82));

      id v84 = (void *)objc_claimAutoreleasedReturnValue([v14 localObject]);
      v85 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon broadcasterForLocalObject:messageContext:]( self,  "broadcasterForLocalObject:messageContext:",  v84,  v14));

      [v85 didRequestCarrierTokenString:0 requestUUID:v13 error:v83];
      id v12 = v102;
      id v61 = v100;
      id v62 = (void *)v29;
    }

    id v77 = v98;
    char v79 = v99;
  }

  else
  {
    uint64_t v74 = IDSRegistrationControlErrorDomain;
    NSErrorUserInfoKey v115 = NSDebugDescriptionErrorKey;
    v116 = @"Unable to set push token or push identity on carrier token request message";
    id v75 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v116,  &v115,  1LL));
    uint64_t v76 = v74;
    id v62 = (void *)v29;
    id v77 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v76,  1LL,  v75));

    uint64_t v78 = (void *)objc_claimAutoreleasedReturnValue([v14 localObject]);
    char v79 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon broadcasterForLocalObject:messageContext:]( self,  "broadcasterForLocalObject:messageContext:",  v78,  v14));

    [v79 didRequestCarrierTokenString:0 requestUUID:v13 error:v77];
    id v12 = v102;
    id v61 = v100;
  }

LABEL_35:
}

- (id)_errorForMissingEntitlement:(id)a3
{
  id v3 = a3;
  id v4 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"IDS phone number authentication SPI requires entitlement: %@",  v3);

  unsigned int v5 = objc_alloc(&OBJC_CLASS___NSError);
  uint64_t v6 = IDSRegistrationControlErrorDomain;
  NSErrorUserInfoKey v10 = NSDebugDescriptionErrorKey;
  uint64_t v11 = v4;
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v11,  &v10,  1LL));
  id v8 = -[NSError initWithDomain:code:userInfo:](v5, "initWithDomain:code:userInfo:", v6, 3LL, v7);

  return v8;
}

- (void)setPhoneUserSubscriptionSource:(id)a3 withRequestUUID:(id)a4 messageContext:(id)a5
{
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 localObject]);
  uint64_t v12 = kIDSPhoneNumberAuthenticationEntitlement;
  unsigned __int8 v13 = -[IDSDaemon validateListenerForLocalObject:andCheckEntitlement:]( self,  "validateListenerForLocalObject:andCheckEntitlement:",  v11,  kIDSPhoneNumberAuthenticationEntitlement);

  id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog sms](&OBJC_CLASS___IMRGLog, "sms"));
  BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
  if ((v13 & 1) != 0)
  {
    if (v15)
    {
      id v16 = (void *)objc_claimAutoreleasedReturnValue([v10 localObject]);
      id v17 = (void *)objc_claimAutoreleasedReturnValue([v16 processName]);
      int v29 = 138412802;
      id v30 = v9;
      __int16 v31 = 2112;
      __int16 v32 = v17;
      __int16 v33 = 2112;
      id v34 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Setting phone user subscription source {uuid: %@, client: %@, subscriptionSource: %@}",  (uint8_t *)&v29,  0x20u);
    }

    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( +[FTSelectedPNRSubscription sharedInstance]( &OBJC_CLASS___FTSelectedPNRSubscription,  "sharedInstance"));
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v18 setSelectedPhoneNumberRegistrationSubscriptionNumber:v8]);

    unsigned __int8 v20 = (void *)objc_claimAutoreleasedReturnValue([v10 localObject]);
    __int128 v21 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon broadcasterForLocalObject:messageContext:]( self,  "broadcasterForLocalObject:messageContext:",  v20,  v10));

    if (!v21) {
      goto LABEL_11;
    }
    __int128 v22 = v21;
    id v23 = v8;
    id v24 = v9;
    uint64_t v25 = v19;
LABEL_10:
    [v22 didSetPhoneUserSubscriptionSource:v23 requestUUID:v24 error:v25];
LABEL_11:

    goto LABEL_12;
  }

  if (v15)
  {
    id v26 = (void *)objc_claimAutoreleasedReturnValue([v10 localObject]);
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v26 processName]);
    int v29 = 138412290;
    id v30 = v27;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Missing phone number authentication entitlement -- failing phone user subscription source request {client: %@}",  (uint8_t *)&v29,  0xCu);
  }

  id v28 = (void *)objc_claimAutoreleasedReturnValue([v10 localObject]);
  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon broadcasterForLocalObject:messageContext:]( self,  "broadcasterForLocalObject:messageContext:",  v28,  v10));

  if (v19)
  {
    __int128 v21 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon _errorForMissingEntitlement:](self, "_errorForMissingEntitlement:", v12));
    __int128 v22 = v19;
    id v23 = 0LL;
    id v24 = v9;
    uint64_t v25 = v21;
    goto LABEL_10;
  }

- (void)fetchPhoneUserSubscriptionSourceWithRequestUUID:(id)a3 messageContext:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 localObject]);
  uint64_t v9 = kIDSPhoneNumberAuthenticationEntitlement;
  unsigned __int8 v10 = -[IDSDaemon validateListenerForLocalObject:andCheckEntitlement:]( self,  "validateListenerForLocalObject:andCheckEntitlement:",  v8,  kIDSPhoneNumberAuthenticationEntitlement);

  uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog sms](&OBJC_CLASS___IMRGLog, "sms"));
  BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
  if ((v10 & 1) != 0)
  {
    if (v12)
    {
      unsigned __int8 v13 = (void *)objc_claimAutoreleasedReturnValue([v7 localObject]);
      id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 processName]);
      *(_DWORD *)__int128 buf = 138412546;
      id v27 = v6;
      __int16 v28 = 2112;
      int v29 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Fetching phone user subscription source {uuid: %@, client: %@}",  buf,  0x16u);
    }

    BOOL v15 = (void *)objc_claimAutoreleasedReturnValue( +[FTSelectedPNRSubscription sharedInstance]( &OBJC_CLASS___FTSelectedPNRSubscription,  "sharedInstance"));
    id v25 = 0LL;
    id v16 = (void *)objc_claimAutoreleasedReturnValue([v15 selectedPhoneNumberRegistrationSubscriptionWithError:&v25]);
    id v17 = v25;

    if (v16)
    {
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( &OBJC_CLASS___NSNumber,  "numberWithInteger:",  -[IDSDaemon _subscriptionSourceNumberForContext:]( self,  "_subscriptionSourceNumberForContext:",  v16)));
    }

    else
    {
      __int128 v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog sms](&OBJC_CLASS___IMRGLog, "sms"));
      if (os_log_type_enabled(v22, OS_LOG_TYPE_FAULT)) {
        sub_10069DA88((uint64_t)v17, v22);
      }

      uint64_t v18 = 0LL;
    }

    id v23 = (void *)objc_claimAutoreleasedReturnValue([v7 localObject]);
    id v24 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon broadcasterForLocalObject:messageContext:]( self,  "broadcasterForLocalObject:messageContext:",  v23,  v7));

    if (v24) {
      [v24 didFetchPhoneUserSubscriptionSource:v18 requestUUID:v6 error:v17];
    }

    goto LABEL_16;
  }

  if (v12)
  {
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v7 localObject]);
    unsigned __int8 v20 = (void *)objc_claimAutoreleasedReturnValue([v19 processName]);
    *(_DWORD *)__int128 buf = 138412290;
    id v27 = v20;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Missing phone number authentication entitlement -- failing phone user subscription source request {client: %@}",  buf,  0xCu);
  }

  __int128 v21 = (void *)objc_claimAutoreleasedReturnValue([v7 localObject]);
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon broadcasterForLocalObject:messageContext:]( self,  "broadcasterForLocalObject:messageContext:",  v21,  v7));

  if (v18)
  {
    id v17 = (id)objc_claimAutoreleasedReturnValue(-[IDSDaemon _errorForMissingEntitlement:](self, "_errorForMissingEntitlement:", v9));
    [v18 didSetPhoneUserSubscriptionSource:0 requestUUID:v6 error:v17];
LABEL_16:
  }
}

- (int64_t)_subscriptionSourceNumberForContext:(id)a3
{
  int64_t result = (int64_t)[a3 slotID];
  if (result != 2) {
    return result == 1;
  }
  return result;
}

- (id)_IMTransferServiceController
{
  if (qword_1009BED40 != -1) {
    dispatch_once(&qword_1009BED40, &stru_1008FC898);
  }
  return [(id)qword_1009BED38 sharedInstance];
}

- (id)accountWithIdentifier:(id)a3 localObject:(id)a4 requiredEntitlement:(id)a5
{
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon accountController](self, "accountController"));
  BOOL v12 = (void *)objc_claimAutoreleasedReturnValue([v11 accountWithUniqueID:v8]);

  if (v12)
  {
    unsigned __int8 v13 = (void *)objc_claimAutoreleasedReturnValue([v12 service]);
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 identifier]);

    if (-[IDSDaemon validateListenerForLocalObject:andCheckEntitlement:forAccessToServiceWithIdentifier:]( self,  "validateListenerForLocalObject:andCheckEntitlement:forAccessToServiceWithIdentifier:",  v9,  v10,  v14))
    {
      id v15 = v12;
    }

    else
    {
      uint64_t v19 = OSLogHandleForIDSCategory("IDSDaemon");
      unsigned __int8 v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412802;
        id v24 = v9;
        __int16 v25 = 2112;
        id v26 = v10;
        __int16 v27 = 2112;
        __int16 v28 = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "accountWithIdentifier failed entitlement check {localObject: %@, entitlement: %@, serviceIdentifier: %@}",  buf,  0x20u);
      }

      if (os_log_shim_legacy_logging_enabled(v21) && _IDSShouldLog(0LL, @"IDSDaemon")) {
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"accountWithIdentifier failed entitlement check {localObject: %@, entitlement: %@, serviceIdentifier: %@}");
      }
      id v15 = 0LL;
    }
  }

  else
  {
    uint64_t v16 = OSLogHandleForIDSCategory("IDSDaemon");
    id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412546;
      id v24 = v8;
      __int16 v25 = 2112;
      id v26 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "accountWithIdentifier could not find IDSDAccount {identifier: %@, localObject: %@}",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v18) && _IDSShouldLog(0LL, @"IDSDaemon")) {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"accountWithIdentifier could not find IDSDAccount {identifier: %@, localObject: %@}");
    }
    IMLogBacktrace(@"IDSDaemon");
    id v15 = 0LL;
  }

  return v15;
}

- (void)setupAccountWithLoginID:(id)a3 serviceName:(id)a4 accountType:(int)a5 accountConfig:(id)a6 authToken:(id)a7 password:(id)a8 transactionID:(id)a9 messageContext:(id)a10
{
  uint64_t v13 = *(void *)&a5;
  id v15 = (IDSDAccount *)a3;
  uint64_t v16 = (IDSDAccount *)a4;
  id v17 = a6;
  id v18 = a7;
  id v19 = a8;
  id v20 = a9;
  id v21 = a10;
  uint64_t v22 = objc_claimAutoreleasedReturnValue([v21 localObject]);
  id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138413570;
    v122 = v15;
    __int16 v123 = 2112;
    id v124 = v16;
    __int16 v125 = 1024;
    int v126 = v13;
    __int16 v127 = 2112;
    id v128 = v17;
    __int16 v129 = 2112;
    id v130 = v20;
    __int16 v131 = 2112;
    uint64_t v132 = v22;
    _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "IDSDaemon: SetupAccountWithLoginID %@ serviceName %@ accountType %d accountConfig %@ transactionID %@ localObject %@",  buf,  0x3Au);
  }

  if (!-[IDSDaemon validateListenerForLocalObject:andCheckEntitlement:forAccessToServiceWithIdentifier:]( self,  "validateListenerForLocalObject:andCheckEntitlement:forAccessToServiceWithIdentifier:",  v22,  kIDSRegistrationEntitlement,  v16))
  {
    id v30 = (void *)v22;
    __int16 v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
    if (os_log_type_enabled(v31, OS_LOG_TYPE_FAULT)) {
      sub_10069FE90();
    }

    __int16 v32 = objc_alloc(&OBJC_CLASS___NSError);
    uint64_t v33 = IDSAccountRegistrationErrorDomain;
    uint64_t v34 = 103LL;
    goto LABEL_17;
  }

  if (!-[IDSDAccount length](v15, "length"))
  {
    id v30 = (void *)v22;
    __int16 v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
    if (os_log_type_enabled(v35, OS_LOG_TYPE_FAULT)) {
      sub_10069FCB4();
    }

    __int16 v32 = objc_alloc(&OBJC_CLASS___NSError);
    uint64_t v33 = IDSAccountRegistrationErrorDomain;
    uint64_t v34 = 102LL;
LABEL_17:
    __int16 v36 = -[NSError initWithDomain:code:userInfo:](v32, "initWithDomain:code:userInfo:", v33, v34, 0LL);
    id v37 = self;
    uint64_t v38 = v30;
    id v39 = v30;
    goto LABEL_18;
  }

  __int16 v102 = (void *)v22;
  if (-[IDSDAccount length](v16, "length"))
  {
    id v24 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon serviceController](self, "serviceController"));
    __int16 v25 = (void *)objc_claimAutoreleasedReturnValue([v24 serviceWithIdentifier:v16]);

    id v101 = v18;
    if (v25)
    {
      if (![v25 adHocServiceType])
      {
        id v100 = v25;
        if ([v25 disabledOnTinkerWatch]
          && (id v44 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPairingManager sharedInstance](&OBJC_CLASS___IDSPairingManager, "sharedInstance")),
              unsigned int v45 = [v44 isCurrentDeviceTinkerConfiguredWatch],
              v44,
              v45))
        {
          __int16 v46 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
          if (os_log_type_enabled(v46, OS_LOG_TYPE_FAULT)) {
            sub_10069FDD4();
          }

          __int16 v47 = objc_alloc(&OBJC_CLASS___NSError);
          uint64_t v48 = IDSAccountRegistrationErrorDomain;
          uint64_t v49 = 107LL;
        }

        else
        {
          if ((IDSIsValidAccountType(v13) & 1) != 0)
          {
            BOOL v50 = (void *)objc_claimAutoreleasedReturnValue([v17 objectForKey:kIDSServiceDefaultsAuthorizationIDKey]);
            id v98 = (void *)objc_claimAutoreleasedReturnValue([v17 objectForKey:kIDSServiceDefaultsSelfHandleKey]);
            if ([v18 length])
            {
              __int128 v51 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
              if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)__int128 buf = 138412290;
                v122 = v15;
                _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_DEFAULT,  "  ** Setting auth token for loginID: %@",  buf,  0xCu);
              }

              sub_1001A4158(v18, v15, v50, v98, v16);
            }

            if ([v19 length])
            {
              id v52 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
              if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)__int128 buf = 138412290;
                v122 = v15;
                _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_DEFAULT,  "  ** Setting password for loginID: %@",  buf,  0xCu);
              }

              sub_1001A3F98(v19, v15, v50, v16);
            }

            __int16 v94 = v50;
            uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDAccountController sharedInstance]( &OBJC_CLASS___IDSDAccountController,  "sharedInstance"));
            id v54 = (IDSDAccount *)objc_claimAutoreleasedReturnValue([v53 accountWithServiceName:v16 loginID:v15]);

            id v95 = v19;
            id v99 = v20;
            if (v54)
            {
              -[IDSDAccount _updateAccountWithAccountInfo:](v54, "_updateAccountWithAccountInfo:", v17);
            }

            else
            {
              id v62 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
              if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)__int128 buf = 138412546;
                v122 = v16;
                __int16 v123 = 2112;
                id v124 = v15;
                _os_log_impl( (void *)&_mh_execute_header,  v62,  OS_LOG_TYPE_DEFAULT,  "Creating new account with service name %@ login ID %@",  buf,  0x16u);
              }

              id v63 = objc_alloc(&OBJC_CLASS___IDSDAccount);
              id v64 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringGUID](&OBJC_CLASS___NSString, "stringGUID"));
              id v65 = -[IDSDAccount initWithLoginID:service:uniqueID:accountType:accountConfig:]( v63,  "initWithLoginID:service:uniqueID:accountType:accountConfig:",  v15,  v100,  v64,  v13,  v17);

              id v54 = v65;
              id v66 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDAccountController sharedInstance]( &OBJC_CLASS___IDSDAccountController,  "sharedInstance"));
              [v66 addAccount:v54];

              id v67 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDAccount linkedAccounts](v54, "linkedAccounts"));
              if (![v67 count])
              {
                __int16 v91 = v67;
                id v92 = v21;
                id v68 = v17;
                uint64_t v93 = v16;
                id v69 = v15;
                id v70 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDServiceController sharedInstance]( &OBJC_CLASS___IDSDServiceController,  "sharedInstance"));
                id v96 = v54;
                uint64_t v71 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDAccount service](v54, "service"));
                uint64_t v72 = (void *)objc_claimAutoreleasedReturnValue([v70 linkedServicesForService:v71]);

                __int128 v118 = 0u;
                __int128 v119 = 0u;
                __int128 v116 = 0u;
                __int128 v117 = 0u;
                id v73 = v72;
                id v74 = [v73 countByEnumeratingWithState:&v116 objects:v120 count:16];
                if (v74)
                {
                  id v75 = v74;
                  uint64_t v76 = *(void *)v117;
                  do
                  {
                    for (i = 0LL; i != v75; i = (char *)i + 1)
                    {
                      if (*(void *)v117 != v76) {
                        objc_enumerationMutation(v73);
                      }
                      uint64_t v78 = *(void **)(*((void *)&v116 + 1) + 8LL * (void)i);
                      if ([v78 disabledOnTinkerWatch])
                      {
                        char v79 = (void *)objc_claimAutoreleasedReturnValue( +[IDSPairingManager sharedInstance]( &OBJC_CLASS___IDSPairingManager,  "sharedInstance"));
                        unsigned __int8 v80 = [v79 isCurrentDeviceTinkerConfiguredWatch];

                        if ((v80 & 1) != 0) {
                          continue;
                        }
                      }

                      uint64_t v81 = objc_alloc(&OBJC_CLASS___IDSDAccount);
                      __int128 v82 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringGUID](&OBJC_CLASS___NSString, "stringGUID"));
                      __int128 v83 = -[IDSDAccount initWithLoginID:service:uniqueID:accountType:accountConfig:]( v81,  "initWithLoginID:service:uniqueID:accountType:accountConfig:",  v69,  v78,  v82,  v13,  v68);

                      id v84 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                      if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)__int128 buf = 138412290;
                        v122 = v83;
                        _os_log_impl( (void *)&_mh_execute_header,  v84,  OS_LOG_TYPE_DEFAULT,  "  Creating a linked account: %@",  buf,  0xCu);
                      }

                      v85 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDAccountController sharedInstance]( &OBJC_CLASS___IDSDAccountController,  "sharedInstance"));
                      [v85 addAccount:v83];
                    }

                    id v75 = [v73 countByEnumeratingWithState:&v116 objects:v120 count:16];
                  }

                  while (v75);
                }

                id v15 = v69;
                id v21 = v92;
                uint64_t v16 = v93;
                id v17 = v68;
                id v54 = v96;
                id v67 = v91;
              }
            }

            uint64_t v86 = v54;
            id v97 = v54;
            v110[0] = _NSConcreteStackBlock;
            v110[1] = 3221225472LL;
            v110[2] = sub_1001A50A0;
            v110[3] = &unk_1008FCC90;
            id v87 = v99;
            id v111 = v87;
            id v88 = v21;
            id v112 = v88;
            uint64_t v38 = v102;
            id v89 = v102;
            id v113 = v89;
            id v114 = 0LL;
            NSErrorUserInfoKey v115 = self;
            -[IDSDAccount setupAccountWithCompletionBlock:](v86, "setupAccountWithCompletionBlock:", v110);
            uint64_t v90 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDAccount linkedAccounts](v86, "linkedAccounts"));
            v104[0] = _NSConcreteStackBlock;
            v104[1] = 3221225472LL;
            v104[2] = sub_1001A53EC;
            v104[3] = &unk_1008FCCB8;
            id v105 = v87;
            id v106 = v88;
            id v107 = v89;
            id v108 = 0LL;
            id v109 = self;
            objc_msgSend(v90, "__imForEach:", v104);

            __int16 v36 = 0LL;
            __int16 v43 = v94;
            id v19 = v95;
            id v20 = v99;
            __int16 v25 = v100;
            goto LABEL_27;
          }

          uint64_t v55 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
          if (os_log_type_enabled(v55, OS_LOG_TYPE_FAULT)) {
            sub_10069FE00(v13, v55, v56, v57, v58, v59, v60, v61);
          }

          __int16 v47 = objc_alloc(&OBJC_CLASS___NSError);
          uint64_t v48 = IDSAccountRegistrationErrorDomain;
          uint64_t v49 = 105LL;
        }

        __int16 v36 = -[NSError initWithDomain:code:userInfo:](v47, "initWithDomain:code:userInfo:", v48, v49, 0LL);
        uint64_t v38 = v102;
        __int16 v43 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon listenerRemoteObjectForLocalObject:]( self,  "listenerRemoteObjectForLocalObject:",  v102));
        [v43 setupCompleteForAccount:0 transactionID:0 setupError:v36];
        __int16 v25 = v100;
LABEL_27:

        id v18 = v101;
        goto LABEL_19;
      }

      id v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
      if (os_log_type_enabled(v26, OS_LOG_TYPE_FAULT)) {
        sub_10069FE64();
      }

      __int16 v27 = objc_alloc(&OBJC_CLASS___NSError);
      uint64_t v28 = IDSAccountRegistrationErrorDomain;
      uint64_t v29 = 106LL;
    }

    else
    {
      char v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
      if (os_log_type_enabled(v42, OS_LOG_TYPE_FAULT)) {
        sub_10069FD74();
      }

      __int16 v27 = objc_alloc(&OBJC_CLASS___NSError);
      uint64_t v28 = IDSAccountRegistrationErrorDomain;
      uint64_t v29 = 104LL;
    }

    __int16 v36 = -[NSError initWithDomain:code:userInfo:](v27, "initWithDomain:code:userInfo:", v28, v29, 0LL);
    uint64_t v38 = v102;
    __int16 v43 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon listenerRemoteObjectForLocalObject:](self, "listenerRemoteObjectForLocalObject:", v102));
    [v43 setupCompleteForAccount:0 transactionID:0 setupError:v36];
    goto LABEL_27;
  }

  uint64_t v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
  if (os_log_type_enabled(v40, OS_LOG_TYPE_FAULT)) {
    sub_10069FD14();
  }

  id v41 = objc_alloc(&OBJC_CLASS___NSError);
  __int16 v36 = -[NSError initWithDomain:code:userInfo:]( v41,  "initWithDomain:code:userInfo:",  IDSAccountRegistrationErrorDomain,  101LL,  0LL);
  uint64_t v38 = v102;
  id v37 = self;
  id v39 = v102;
LABEL_18:
  __int16 v25 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon listenerRemoteObjectForLocalObject:](v37, "listenerRemoteObjectForLocalObject:", v39));
  [v25 setupCompleteForAccount:0 transactionID:0 setupError:v36];
LABEL_19:
}

- (void)addAccountWithLoginID:(id)a3 serviceName:(id)a4 uniqueID:(id)a5 accountType:(int)a6 accountInfo:(id)a7 messageContext:(id)a8
{
  uint64_t v10 = *(void *)&a6;
  id v14 = (os_log_s *)a3;
  id v15 = a4;
  id v16 = a5;
  id v65 = a7;
  id v17 = (void *)objc_claimAutoreleasedReturnValue([a8 localObject]);
  id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    id v19 = (void *)objc_claimAutoreleasedReturnValue([v65 allKeys]);
    *(_DWORD *)__int128 buf = 138413570;
    uint64_t v72 = v14;
    __int16 v73 = 2112;
    id v74 = v15;
    __int16 v75 = 2112;
    uint64_t v76 = (uint64_t)v16;
    __int16 v77 = 1024;
    int v78 = v10;
    __int16 v79 = 2112;
    unsigned __int8 v80 = v19;
    __int16 v81 = 2112;
    __int128 v82 = v17;
    _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "IDSDaemon: AddAccountWithLoginID %@ serviceName %@ uniqueID %@ accountType %d accountInfo %@ localObject %@",  buf,  0x3Au);
  }

  if (![v15 length])
  {
    id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
    if (os_log_type_enabled(v21, OS_LOG_TYPE_FAULT)) {
      sub_10069FF7C();
    }
    goto LABEL_48;
  }

  if (-[IDSDaemon validateListenerForLocalObject:andCheckEntitlement:forAccessToServiceWithIdentifier:]( self,  "validateListenerForLocalObject:andCheckEntitlement:forAccessToServiceWithIdentifier:",  v17,  kIDSRegistrationEntitlement,  v15))
  {
    if ((IDSIsValidAccountType(v10) & 1) == 0)
    {
      id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
      if (os_log_type_enabled(v21, OS_LOG_TYPE_FAULT)) {
        sub_10069FE00(v10, v21, v25, v26, v27, v28, v29, v30);
      }
      goto LABEL_48;
    }

    if (!(_DWORD)v10)
    {
      id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Not allowing clients to add phone number accounts.",  buf,  2u);
      }

      goto LABEL_48;
    }

    id v20 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon serviceController](self, "serviceController"));
    id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue([v20 serviceWithIdentifier:v15]);

    if (!v21)
    {
      id v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
      if (os_log_type_enabled(v24, OS_LOG_TYPE_FAULT)) {
        sub_10069FFDC();
      }
      goto LABEL_25;
    }

    if (-[os_log_s disabledOnTinkerWatch](v21, "disabledOnTinkerWatch"))
    {
      uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPairingManager sharedInstance](&OBJC_CLASS___IDSPairingManager, "sharedInstance"));
      unsigned int v23 = [v22 isCurrentDeviceTinkerConfiguredWatch];

      if (v23)
      {
        id v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 138412290;
          uint64_t v72 = v21;
          _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "Tried to add tinker disabled service, ignoring {service: %@}",  buf,  0xCu);
        }

- (void)_removeAccount:(id)a3 messageContext:(id)a4
{
  id v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([a4 localObject]);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = 138412546;
    id v13 = v6;
    __int16 v14 = 2112;
    id v15 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "IDSDaemon _removeAccount %@ localObject %@",  (uint8_t *)&v12,  0x16u);
  }

  if ([v6 length])
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon accountWithIdentifier:localObject:requiredEntitlement:]( self,  "accountWithIdentifier:localObject:requiredEntitlement:",  v6,  v7,  kIDSRegistrationEntitlement));
    if (v9)
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
      [v10 removeAccount:v9];

      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v9 linkedAccounts]);
      objc_msgSend(v11, "__imForEach:", &stru_1008FCCD8);
    }
  }

  else
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
    if (os_log_type_enabled((os_log_t)v9, OS_LOG_TYPE_FAULT)) {
      sub_1006A009C();
    }
  }
}

- (void)_removeAndDeregisterAccount:(id)a3 messageContext:(id)a4
{
  id v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([a4 localObject]);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = 138412546;
    id v15 = v6;
    __int16 v16 = 2112;
    id v17 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "_removeAndDeregisterAccount %@ localObject %@",  (uint8_t *)&v14,  0x16u);
  }

  if ([v6 length])
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon accountWithIdentifier:localObject:requiredEntitlement:]( self,  "accountWithIdentifier:localObject:requiredEntitlement:",  v6,  v7,  kIDSRegistrationEntitlement));
    uint64_t v10 = v9;
    if (v9)
    {
      [v9 unregisterAccount];
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
      [v11 disableAccountWithUniqueID:v6];

      int v12 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
      [v12 removeAccount:v10];

      id v13 = (void *)objc_claimAutoreleasedReturnValue([v10 linkedAccounts]);
      objc_msgSend(v13, "__imForEach:", &stru_1008FCCF8);
    }
  }

  else
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
    if (os_log_type_enabled((os_log_t)v10, OS_LOG_TYPE_FAULT)) {
      sub_1006A009C();
    }
  }
}

- (void)updateAccount:(id)a3 withAccountInfo:(id)a4 messageContext:(id)a5
{
  id v8 = a3;
  id v9 = a4;
  id v33 = a5;
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v33 localObject]);
  uint64_t v11 = &IMInsertBoolsToXPCDictionary_ptr;
  int v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412546;
    id v41 = v8;
    __int16 v42 = 2112;
    __int16 v43 = v10;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "updateAccount %@ localObject %@", buf, 0x16u);
  }

  uint64_t v13 = objc_claimAutoreleasedReturnValue( -[IDSDaemon accountWithIdentifier:localObject:requiredEntitlement:]( self,  "accountWithIdentifier:localObject:requiredEntitlement:",  v8,  v10,  kIDSRegistrationEntitlement));
  int v14 = (void *)v13;
  if (v13)
  {
    uint64_t v31 = (void *)v13;
    uint64_t v32 = v10;
    id v15 = v9;
    v39[0] = kIDSServiceDefaultsRegisteredURIs;
    v39[1] = kIDSServiceDefaultsPseudonymsKey;
    v39[2] = kIDSServiceDefaultsVettedAliasesKey;
    __int128 v34 = 0u;
    __int128 v35 = 0u;
    __int128 v36 = 0u;
    __int128 v37 = 0u;
    id v16 = (id)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  v39,  3LL));
    id v17 = [v16 countByEnumeratingWithState:&v34 objects:v38 count:16];
    if (v17)
    {
      id v18 = v17;
      id v29 = v9;
      id v30 = v8;
      id v19 = 0LL;
      uint64_t v20 = *(void *)v35;
      do
      {
        for (i = 0LL; i != v18; i = (char *)i + 1)
        {
          if (*(void *)v35 != v20) {
            objc_enumerationMutation(v16);
          }
          uint64_t v22 = *(void **)(*((void *)&v34 + 1) + 8LL * (void)i);
          unsigned int v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "objectForKey:", v22, v29, v30));

          if (v23)
          {
            if (!v19) {
              id v19 = [v15 mutableCopy];
            }
            [v19 removeObjectForKey:v22];
            id v24 = (os_log_s *)objc_claimAutoreleasedReturnValue([v11[440] registration]);
            if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
            {
              uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v33 localObject]);
              uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v25 processName]);
              *(_DWORD *)__int128 buf = 138412546;
              id v41 = v26;
              __int16 v42 = 2112;
              __int16 v43 = v22;
              _os_log_error_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_ERROR,  "Found blocklisted key in updateAccount call! {process: %@, key: %@}",  buf,  0x16u);

              uint64_t v11 = &IMInsertBoolsToXPCDictionary_ptr;
            }
          }
        }

        id v18 = [v16 countByEnumeratingWithState:&v34 objects:v38 count:16];
      }

      while (v18);

      if (!v19)
      {
        id v9 = v29;
        id v8 = v30;
        int v14 = v31;
        goto LABEL_22;
      }

      id v27 = [v19 copy];
      uint64_t v28 = v15;
      id v15 = v27;
      id v9 = v29;
      id v8 = v30;
    }

    else
    {
      id v19 = 0LL;
      uint64_t v28 = v16;
    }

    int v14 = v31;

LABEL_22:
    [v14 _updateAccountWithAccountInfo:v15];

    uint64_t v10 = v32;
  }
}

- (void)enableAccount:(id)a3 messageContext:(id)a4
{
  id v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([a4 localObject]);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = 138412546;
    id v13 = v6;
    __int16 v14 = 2112;
    id v15 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "enableAccount %@ localObject %@",  (uint8_t *)&v12,  0x16u);
  }

  id v9 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon accountWithIdentifier:localObject:requiredEntitlement:]( self,  "accountWithIdentifier:localObject:requiredEntitlement:",  v6,  v7,  kIDSRegistrationEntitlement));
  if (v9)
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
    [v10 enableAccountWithUniqueID:v6];

    [v9 registerAccount];
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v9 linkedAccounts]);
    objc_msgSend(v11, "__imForEach:", &stru_1008FCD18);

    -[IDSDaemon updateTopics](self, "updateTopics");
  }
}

- (void)disableAccount:(id)a3 messageContext:(id)a4
{
  id v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([a4 localObject]);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = 138412546;
    id v13 = v6;
    __int16 v14 = 2112;
    id v15 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "disableAccount %@ localObject %@",  (uint8_t *)&v12,  0x16u);
  }

  id v9 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon accountWithIdentifier:localObject:requiredEntitlement:]( self,  "accountWithIdentifier:localObject:requiredEntitlement:",  v6,  v7,  kIDSRegistrationEntitlement));
  if (v9)
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
    [v10 disableAccountWithUniqueID:v6];

    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v9 linkedAccounts]);
    objc_msgSend(v11, "__imForEach:", &stru_1008FCD38);

    -[IDSDaemon updateTopics](self, "updateTopics");
  }
}

- (void)forceDisableAccount:(id)a3 messageContext:(id)a4
{
  id v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([a4 localObject]);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = 138412546;
    id v13 = v6;
    __int16 v14 = 2112;
    id v15 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "forceDisableAccount %@ localObject %@",  (uint8_t *)&v12,  0x16u);
  }

  id v9 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon accountWithIdentifier:localObject:requiredEntitlement:]( self,  "accountWithIdentifier:localObject:requiredEntitlement:",  v6,  v7,  kIDSRegistrationEntitlement));
  if (v9)
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
    [v10 forceDisableAccountWithUniqueID:v6];

    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v9 linkedAccounts]);
    objc_msgSend(v11, "__imForEach:", &stru_1008FCD58);

    -[IDSDaemon updateTopics](self, "updateTopics");
  }
}

- (void)authTokenChanged:(id)a3 forAccount:(id)a4 messageContext:(id)a5
{
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 localObject]);
  uint64_t v12 = OSLogHandleForIDSCategory("IDSDaemon");
  id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 138412546;
    id v24 = v9;
    __int16 v25 = 2112;
    uint64_t v26 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "auth token changed for account uniqueID %@ localObject %@",  buf,  0x16u);
  }

  if (os_log_shim_legacy_logging_enabled(v14) && _IDSShouldLog(1LL, @"IDSDaemon"))
  {
    id v21 = v9;
    uint64_t v22 = v11;
    _IDSLogV( 1LL,  @"IDSFoundation",  @"IDSDaemon",  @"auth token changed for account uniqueID %@ localObject %@");
  }

  id v15 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon accountWithIdentifier:localObject:requiredEntitlement:]( self,  "accountWithIdentifier:localObject:requiredEntitlement:",  v9,  v11,  kIDSRegistrationEntitlement,  v21,  v22));
  id v16 = v15;
  if (v15)
  {
    id v17 = (void *)objc_claimAutoreleasedReturnValue([v15 loginID]);
    id v18 = (void *)objc_claimAutoreleasedReturnValue([v16 service]);
    id v19 = (void *)objc_claimAutoreleasedReturnValue([v18 serviceName]);
    sub_1001A4158(v8, v17, 0LL, 0LL, v19);

    [v16 authenticationChanged];
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v16 linkedAccounts]);
    objc_msgSend(v20, "__imForEach:", &stru_1008FCD78);
  }
}

- (void)passwordChanged:(id)a3 forAccount:(id)a4 messageContext:(id)a5
{
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 localObject]);
  uint64_t v12 = OSLogHandleForIDSCategory("IDSDaemon");
  id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 138412546;
    id v25 = v9;
    __int16 v26 = 2112;
    id v27 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "password changed for account uniqueID %@ localObject %@",  buf,  0x16u);
  }

  if (os_log_shim_legacy_logging_enabled(v14) && _IDSShouldLog(1LL, @"IDSDaemon"))
  {
    id v22 = v9;
    unsigned int v23 = v11;
    _IDSLogV( 1LL,  @"IDSFoundation",  @"IDSDaemon",  @"password changed for account uniqueID %@ localObject %@");
  }

  id v15 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon accountWithIdentifier:localObject:requiredEntitlement:]( self,  "accountWithIdentifier:localObject:requiredEntitlement:",  v9,  v11,  kIDSRegistrationEntitlement,  v22,  v23));
  id v16 = v15;
  if (v15)
  {
    id v17 = (void *)objc_claimAutoreleasedReturnValue([v15 loginID]);
    id v18 = (void *)objc_claimAutoreleasedReturnValue([v16 dsID]);
    id v19 = (void *)objc_claimAutoreleasedReturnValue([v16 service]);
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v19 serviceName]);
    sub_1001A3F98(v8, v17, v18, v20);

    [v16 authenticationChanged];
    id v21 = (void *)objc_claimAutoreleasedReturnValue([v16 linkedAccounts]);
    objc_msgSend(v21, "__imForEach:", &stru_1008FCD98);
  }
}

- (void)authenticateAccount:(id)a3 messageContext:(id)a4
{
  id v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([a4 localObject]);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = 138412546;
    id v13 = v6;
    __int16 v14 = 2112;
    id v15 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "authenticateAccount uniqueID %@ localObject %@",  (uint8_t *)&v12,  0x16u);
  }

  id v9 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon accountWithIdentifier:localObject:requiredEntitlement:]( self,  "accountWithIdentifier:localObject:requiredEntitlement:",  v6,  v7,  kIDSRegistrationEntitlement));
  id v10 = v9;
  if (v9)
  {
    [v9 authenticateAccount];
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 linkedAccounts]);
    objc_msgSend(v11, "__imForEach:", &stru_1008FCDB8);
  }
}

- (void)passwordUpdatedForAccount:(id)a3 messageContext:(id)a4
{
  id v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([a4 localObject]);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = 138412546;
    id v13 = v6;
    __int16 v14 = 2112;
    id v15 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "passwordUpdatedForAccount %@ localObject %@",  (uint8_t *)&v12,  0x16u);
  }

  id v9 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon accountWithIdentifier:localObject:requiredEntitlement:]( self,  "accountWithIdentifier:localObject:requiredEntitlement:",  v6,  v7,  kIDSRegistrationEntitlement));
  id v10 = v9;
  if (v9)
  {
    [v9 passwordUpdated];
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 linkedAccounts]);
    objc_msgSend(v11, "__imForEach:", &stru_1008FCDD8);
  }
}

- (void)updateAuthorizationCredentials:(id)a3 token:(id)a4 forAccount:(id)a5 messageContext:(id)a6
{
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  id v13 = (void *)objc_claimAutoreleasedReturnValue([a6 localObject]);
  __int16 v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138413058;
    id v22 = v10;
    __int16 v23 = 2112;
    id v24 = v11;
    __int16 v25 = 2112;
    id v26 = v12;
    __int16 v27 = 2112;
    uint64_t v28 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "updateAuthorizationCredentials %@ token %@ account %@ localObject %@",  buf,  0x2Au);
  }

  id v15 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon accountWithIdentifier:localObject:requiredEntitlement:]( self,  "accountWithIdentifier:localObject:requiredEntitlement:",  v12,  v13,  kIDSRegistrationEntitlement));
  id v16 = v15;
  if (v15)
  {
    [v15 updateAuthorizationCredentials:v10 token:v11];
    id v17 = (void *)objc_claimAutoreleasedReturnValue([v16 linkedAccounts]);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472LL;
    v18[2] = sub_1001A7AFC;
    v18[3] = &unk_1008FBE88;
    id v19 = v10;
    id v20 = v11;
    objc_msgSend(v17, "__imForEach:", v18);
  }
}

- (void)validateProfileForAccount:(id)a3 messageContext:(id)a4
{
  id v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([a4 localObject]);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = 138412546;
    id v13 = v6;
    __int16 v14 = 2112;
    id v15 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "validateProfileForAccount %@ localObject %@",  (uint8_t *)&v12,  0x16u);
  }

  id v9 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon accountWithIdentifier:localObject:requiredEntitlement:]( self,  "accountWithIdentifier:localObject:requiredEntitlement:",  v6,  v7,  kIDSRegistrationEntitlement));
  id v10 = v9;
  if (v9)
  {
    [v9 validateProfile];
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 linkedAccounts]);
    objc_msgSend(v11, "__imForEach:", &stru_1008FCDF8);
  }
}

- (void)addAliases:(id)a3 toAccount:(id)a4 messageContext:(id)a5
{
  id v8 = a3;
  id v9 = a4;
  id v10 = (void *)objc_claimAutoreleasedReturnValue([a5 localObject]);
  id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412802;
    id v18 = v8;
    __int16 v19 = 2112;
    id v20 = v9;
    __int16 v21 = 2112;
    id v22 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "addAliases %@ toAccount %@ localObject %@",  buf,  0x20u);
  }

  int v12 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon accountWithIdentifier:localObject:requiredEntitlement:]( self,  "accountWithIdentifier:localObject:requiredEntitlement:",  v9,  v10,  kIDSRegistrationEntitlement));
  id v13 = v12;
  if (v12)
  {
    [v12 addAliases:v8];
    __int16 v14 = (void *)objc_claimAutoreleasedReturnValue([v13 linkedAccounts]);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    v15[2] = sub_1001A7F74;
    v15[3] = &unk_1008F9CE0;
    id v16 = v8;
    objc_msgSend(v14, "__imForEach:", v15);
  }
}

- (void)removeAliases:(id)a3 fromAccount:(id)a4 messageContext:(id)a5
{
  id v8 = a3;
  id v9 = a4;
  id v10 = (void *)objc_claimAutoreleasedReturnValue([a5 localObject]);
  id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412802;
    id v18 = v8;
    __int16 v19 = 2112;
    id v20 = v9;
    __int16 v21 = 2112;
    id v22 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "removeAliases %@ toAccount %@ localObject %@",  buf,  0x20u);
  }

  int v12 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon accountWithIdentifier:localObject:requiredEntitlement:]( self,  "accountWithIdentifier:localObject:requiredEntitlement:",  v9,  v10,  kIDSRegistrationEntitlement));
  id v13 = v12;
  if (v12)
  {
    [v12 removeAliases:v8];
    __int16 v14 = (void *)objc_claimAutoreleasedReturnValue([v13 linkedAccounts]);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    v15[2] = sub_1001A81E4;
    v15[3] = &unk_1008F9CE0;
    id v16 = v8;
    objc_msgSend(v14, "__imForEach:", v15);
  }
}

- (void)validateAliases:(id)a3 forAccount:(id)a4 messageContext:(id)a5
{
  id v8 = a3;
  id v9 = a4;
  id v10 = (void *)objc_claimAutoreleasedReturnValue([a5 localObject]);
  id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412802;
    id v18 = v8;
    __int16 v19 = 2112;
    id v20 = v9;
    __int16 v21 = 2112;
    id v22 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "validateAliases %@ forAccount %@ localObject %@",  buf,  0x20u);
  }

  int v12 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon accountWithIdentifier:localObject:requiredEntitlement:]( self,  "accountWithIdentifier:localObject:requiredEntitlement:",  v9,  v10,  kIDSRegistrationEntitlement));
  id v13 = v12;
  if (v12)
  {
    [v12 validateAliases:v8];
    __int16 v14 = (void *)objc_claimAutoreleasedReturnValue([v13 linkedAccounts]);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    v15[2] = sub_1001A8454;
    v15[3] = &unk_1008F9CE0;
    id v16 = v8;
    objc_msgSend(v14, "__imForEach:", v15);
  }
}

- (void)unvalidateAliases:(id)a3 forAccount:(id)a4 messageContext:(id)a5
{
  id v8 = a3;
  id v9 = a4;
  id v10 = (void *)objc_claimAutoreleasedReturnValue([a5 localObject]);
  id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412802;
    id v18 = v8;
    __int16 v19 = 2112;
    id v20 = v9;
    __int16 v21 = 2112;
    id v22 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "unvalidateAliases %@ forAccount %@ localObject %@",  buf,  0x20u);
  }

  int v12 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon accountWithIdentifier:localObject:requiredEntitlement:]( self,  "accountWithIdentifier:localObject:requiredEntitlement:",  v9,  v10,  kIDSRegistrationEntitlement));
  id v13 = v12;
  if (v12)
  {
    [v12 unvalidateAliases:v8];
    __int16 v14 = (void *)objc_claimAutoreleasedReturnValue([v13 linkedAccounts]);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    v15[2] = sub_1001A86C4;
    v15[3] = &unk_1008F9CE0;
    id v16 = v8;
    objc_msgSend(v14, "__imForEach:", v15);
  }
}

- (BOOL)validateLocalObjectForPseudonym:(id)a3 andCheckEntitlement:(id)a4 forAccessToServices:(id)a5
{
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  BOOL v11 = 1;
  if (_os_feature_enabled_impl("StrictEntitlementCheckForPseudonym", "IDS"))
  {
    uint64_t v18 = 0LL;
    __int16 v19 = &v18;
    uint64_t v20 = 0x2020000000LL;
    char v21 = 1;
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    v13[2] = sub_1001A88CC;
    v13[3] = &unk_1008FCE20;
    id v17 = &v18;
    id v14 = v10;
    id v15 = self;
    id v16 = v9;
    -[IDSDaemon validateListenerForLocalObject:andPerformBlock:]( self,  "validateListenerForLocalObject:andPerformBlock:",  v8,  v13);
    BOOL v11 = *((_BYTE *)v19 + 24) != 0;

    _Block_object_dispose(&v18, 8);
  }

  return v11;
}

- (BOOL)validateLocalObjectForPseudonym:(id)a3 andCheckEntitlement:(id)a4 forAccessToAnyOneOfServices:(id)a5
{
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  if (_os_feature_enabled_impl("StrictEntitlementCheckForPseudonym", "IDS"))
  {
    uint64_t v23 = 0LL;
    id v24 = &v23;
    uint64_t v25 = 0x2020000000LL;
    char v26 = 0;
    id v15 = _NSConcreteStackBlock;
    uint64_t v16 = 3221225472LL;
    id v17 = sub_1001A8D14;
    uint64_t v18 = &unk_1008FCE20;
    id v11 = v10;
    id v22 = &v23;
    id v19 = v11;
    uint64_t v20 = self;
    id v21 = v9;
    -[IDSDaemon validateListenerForLocalObject:andPerformBlock:]( self,  "validateListenerForLocalObject:andPerformBlock:",  v8,  &v15);
    if (*((_BYTE *)v24 + 24))
    {
      BOOL v12 = 1;
    }

    else
    {
      id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration", v15, v16, v17, v18, v19, v20));
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412290;
        id v28 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Pseudonym request failed entitlement check for access to any one of services %@",  buf,  0xCu);
      }

      BOOL v12 = *((_BYTE *)v24 + 24) != 0;
    }

    _Block_object_dispose(&v23, 8);
  }

  else
  {
    BOOL v12 = 1;
  }

  return v12;
}

- (void)provisionPseudonymForURI:(id)a3 onAccount:(id)a4 withProperties:(id)a5 requestProperties:(id)a6 requestUUID:(id)a7 messageContext:(id)a8
{
  id v14 = a3;
  id v15 = a4;
  id v16 = a5;
  id v17 = a6;
  id v18 = a7;
  id v19 = (void *)objc_claimAutoreleasedReturnValue([a8 localObject]);
  uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138413058;
    id v46 = v14;
    __int16 v47 = 2112;
    id v48 = v15;
    __int16 v49 = 2112;
    id v50 = v16;
    __int16 v51 = 2112;
    id v52 = v19;
    _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "provisionPseudonymForURI %@ onAccount %@ withProperties %@ localObject %@",  buf,  0x2Au);
  }

  uint64_t v21 = kIDSRegistrationEntitlement;
  id v22 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon accountWithIdentifier:localObject:requiredEntitlement:]( self,  "accountWithIdentifier:localObject:requiredEntitlement:",  v15,  v19,  kIDSRegistrationEntitlement));
  if (!v22)
  {
    uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon listenerRemoteObjectForLocalObject:](self, "listenerRemoteObjectForLocalObject:", v19));
    uint64_t v32 = IDSPseudonymErrorDomain;
    uint64_t v33 = 500LL;
LABEL_17:
    __int128 v36 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v32,  v33,  0LL));
    [v31 finishedProvisioningPseudonym:0 success:0 error:v36 forRequestUUID:v18];

    goto LABEL_18;
  }

  id v41 = v17;
  uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v16 allowedServices]);
  unsigned __int8 v24 = -[IDSDaemon validateLocalObjectForPseudonym:andCheckEntitlement:forAccessToServices:]( self,  "validateLocalObjectForPseudonym:andCheckEntitlement:forAccessToServices:",  v19,  v21,  v23);

  if ((v24 & 1) == 0)
  {
    id v28 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon listenerRemoteObjectForLocalObject:](self, "listenerRemoteObjectForLocalObject:", v19));
    uint64_t v29 = IDSPseudonymErrorDomain;
    uint64_t v30 = 500LL;
    goto LABEL_12;
  }

  if ((sub_1001A9380() & 1) == 0)
  {
    __int128 v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    id v17 = v41;
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEFAULT,  "provisionPseudonymForURI -- pseudonyms are disabled by the server!",  buf,  2u);
    }

    uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon listenerRemoteObjectForLocalObject:](self, "listenerRemoteObjectForLocalObject:", v19));
    uint64_t v32 = IDSPseudonymErrorDomain;
    uint64_t v33 = 100LL;
    goto LABEL_17;
  }

  uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(+[IMSystemMonitor sharedInstance](&OBJC_CLASS___IMSystemMonitor, "sharedInstance"));
  unsigned int v26 = [v25 isUnderFirstDataProtectionLock];

  if (!v26)
  {
    v42[0] = _NSConcreteStackBlock;
    v42[1] = 3221225472LL;
    v42[2] = sub_1001A940C;
    v42[3] = &unk_1008FCE48;
    v42[4] = self;
    id v37 = v19;
    id v43 = v37;
    id v38 = v18;
    id v44 = v38;
    if (([v22 provisionPseudonymForURI:v14 properties:v16 requestProperties:v41 completionBlock:v42] & 1) == 0)
    {
      id v39 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon listenerRemoteObjectForLocalObject:](self, "listenerRemoteObjectForLocalObject:", v37));
      uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSPseudonymErrorDomain,  600LL,  0LL));
      [v39 finishedProvisioningPseudonym:0 success:0 error:v40 forRequestUUID:v38];
    }

    goto LABEL_13;
  }

  __int16 v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "provisionPseudonymForURI -- under first unlock -- failing",  buf,  2u);
  }

  id v28 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon listenerRemoteObjectForLocalObject:](self, "listenerRemoteObjectForLocalObject:", v19));
  uint64_t v29 = IDSPseudonymErrorDomain;
  uint64_t v30 = 1000LL;
LABEL_12:
  __int128 v34 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v29,  v30,  0LL));
  [v28 finishedProvisioningPseudonym:0 success:0 error:v34 forRequestUUID:v18];

LABEL_13:
  id v17 = v41;
LABEL_18:
}

- (void)renewPseudonym:(id)a3 onAccount:(id)a4 forUpdatedExpiryEpoch:(double)a5 requestProperties:(id)a6 requestUUID:(id)a7 messageContext:(id)a8
{
  id v14 = a3;
  id v15 = a4;
  id v16 = a6;
  id v17 = a7;
  id v18 = (void *)objc_claimAutoreleasedReturnValue([a8 localObject]);
  id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138413058;
    id v45 = v14;
    __int16 v46 = 2112;
    id v47 = v15;
    __int16 v48 = 2048;
    double v49 = a5;
    __int16 v50 = 2112;
    __int16 v51 = v18;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "renewPseudonym %@ onAccount %@ forUpdatedExpiryEpoch %f localObject %@",  buf,  0x2Au);
  }

  uint64_t v20 = kIDSRegistrationEntitlement;
  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon accountWithIdentifier:localObject:requiredEntitlement:]( self,  "accountWithIdentifier:localObject:requiredEntitlement:",  v15,  v18,  kIDSRegistrationEntitlement));
  if (!v21)
  {
    uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon listenerRemoteObjectForLocalObject:](self, "listenerRemoteObjectForLocalObject:", v18));
    uint64_t v30 = IDSPseudonymErrorDomain;
    uint64_t v31 = 500LL;
LABEL_15:
    __int128 v35 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v30,  v31,  0LL));
    [v29 finishedRenewingPseudonym:0 success:0 error:v35 requestUUID:v17];

    goto LABEL_16;
  }

  uint64_t v40 = v17;
  id v22 = v16;
  uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v14 properties]);
  unsigned __int8 v24 = (void *)objc_claimAutoreleasedReturnValue([v23 allowedServices]);
  unsigned __int8 v25 = -[IDSDaemon validateLocalObjectForPseudonym:andCheckEntitlement:forAccessToAnyOneOfServices:]( self,  "validateLocalObjectForPseudonym:andCheckEntitlement:forAccessToAnyOneOfServices:",  v18,  v20,  v24);

  if ((v25 & 1) != 0)
  {
    id v16 = v22;
    if ((sub_1001A9380() & 1) == 0)
    {
      __int128 v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      id v17 = v40;
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "renewPseudonym -- pseudonyms are disabled by the server!",  buf,  2u);
      }

      uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon listenerRemoteObjectForLocalObject:](self, "listenerRemoteObjectForLocalObject:", v18));
      uint64_t v30 = IDSPseudonymErrorDomain;
      uint64_t v31 = 100LL;
      goto LABEL_15;
    }

    unsigned int v26 = (void *)objc_claimAutoreleasedReturnValue(+[IMSystemMonitor sharedInstance](&OBJC_CLASS___IMSystemMonitor, "sharedInstance"));
    unsigned int v27 = [v26 isUnderFirstDataProtectionLock];

    if (v27)
    {
      id v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      id v17 = v40;
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "renewPseudonym -- under first unlock -- failing",  buf,  2u);
      }

      uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon listenerRemoteObjectForLocalObject:](self, "listenerRemoteObjectForLocalObject:", v18));
      uint64_t v30 = IDSPseudonymErrorDomain;
      uint64_t v31 = 1000LL;
      goto LABEL_15;
    }

    v41[0] = _NSConcreteStackBlock;
    v41[1] = 3221225472LL;
    v41[2] = sub_1001A9918;
    v41[3] = &unk_1008FCE48;
    v41[4] = self;
    id v36 = v18;
    id v42 = v36;
    id v37 = v40;
    id v43 = v37;
    if (([v21 renewPseudonym:v14 forUpdatedExpiryEpoch:v22 requestProperties:v41 completionBlock:a5] & 1) == 0)
    {
      id v38 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon listenerRemoteObjectForLocalObject:](self, "listenerRemoteObjectForLocalObject:", v36));
      id v39 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSPseudonymErrorDomain,  600LL,  0LL));
      [v38 finishedRenewingPseudonym:0 success:0 error:v39 requestUUID:v37];
    }

    id v17 = v40;
  }

  else
  {
    uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon listenerRemoteObjectForLocalObject:](self, "listenerRemoteObjectForLocalObject:", v18));
    uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSPseudonymErrorDomain,  500LL,  0LL));
    id v17 = v40;
    [v32 finishedProvisioningPseudonym:0 success:0 error:v33 forRequestUUID:v40];

    id v16 = v22;
  }

- (void)revokePseudonym:(id)a3 onAccount:(id)a4 requestProperties:(id)a5 requestUUID:(id)a6 messageContext:(id)a7
{
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  id v16 = (void *)objc_claimAutoreleasedReturnValue([a7 localObject]);
  id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412802;
    id v43 = v12;
    __int16 v44 = 2112;
    id v45 = v13;
    __int16 v46 = 2112;
    id v47 = v16;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "revokePseudonym %@ onAccount %@ localObject %@",  buf,  0x20u);
  }

  uint64_t v18 = kIDSRegistrationEntitlement;
  id v19 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon accountWithIdentifier:localObject:requiredEntitlement:]( self,  "accountWithIdentifier:localObject:requiredEntitlement:",  v13,  v16,  kIDSRegistrationEntitlement));
  if (!v19)
  {
    unsigned int v27 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon listenerRemoteObjectForLocalObject:](self, "listenerRemoteObjectForLocalObject:", v16));
    uint64_t v28 = IDSPseudonymErrorDomain;
    uint64_t v29 = 500LL;
LABEL_15:
    uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v28,  v29,  0LL));
    [v27 finishedRevokingPseudonymWithSuccess:0 error:v33 requestUUID:v15];

    goto LABEL_16;
  }

  id v38 = v15;
  id v20 = v14;
  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v12 properties]);
  id v22 = (void *)objc_claimAutoreleasedReturnValue([v21 allowedServices]);
  unsigned __int8 v23 = -[IDSDaemon validateLocalObjectForPseudonym:andCheckEntitlement:forAccessToAnyOneOfServices:]( self,  "validateLocalObjectForPseudonym:andCheckEntitlement:forAccessToAnyOneOfServices:",  v16,  v18,  v22);

  if ((v23 & 1) != 0)
  {
    id v14 = v20;
    if ((sub_1001A9380() & 1) == 0)
    {
      uint64_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      id v15 = v38;
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "revokePseudonym -- pseudonyms are disabled by the server!",  buf,  2u);
      }

      unsigned int v27 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon listenerRemoteObjectForLocalObject:](self, "listenerRemoteObjectForLocalObject:", v16));
      uint64_t v28 = IDSPseudonymErrorDomain;
      uint64_t v29 = 100LL;
      goto LABEL_15;
    }

    unsigned __int8 v24 = (void *)objc_claimAutoreleasedReturnValue(+[IMSystemMonitor sharedInstance](&OBJC_CLASS___IMSystemMonitor, "sharedInstance"));
    unsigned int v25 = [v24 isUnderFirstDataProtectionLock];

    if (v25)
    {
      unsigned int v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      id v15 = v38;
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "revokePseudonym -- under first unlock -- failing",  buf,  2u);
      }

      unsigned int v27 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon listenerRemoteObjectForLocalObject:](self, "listenerRemoteObjectForLocalObject:", v16));
      uint64_t v28 = IDSPseudonymErrorDomain;
      uint64_t v29 = 1000LL;
      goto LABEL_15;
    }

    v39[0] = _NSConcreteStackBlock;
    v39[1] = 3221225472LL;
    v39[2] = sub_1001A9E00;
    void v39[3] = &unk_1008F6080;
    uint8_t v39[4] = self;
    id v34 = v16;
    id v40 = v34;
    id v35 = v38;
    id v41 = v35;
    if (([v19 revokePseudonym:v12 requestProperties:v20 completionBlock:v39] & 1) == 0)
    {
      id v36 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon listenerRemoteObjectForLocalObject:](self, "listenerRemoteObjectForLocalObject:", v34));
      id v37 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSPseudonymErrorDomain,  600LL,  0LL));
      [v36 finishedRevokingPseudonymWithSuccess:0 error:v37 requestUUID:v35];
    }

    id v15 = v38;
  }

  else
  {
    uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon listenerRemoteObjectForLocalObject:](self, "listenerRemoteObjectForLocalObject:", v16));
    uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSPseudonymErrorDomain,  500LL,  0LL));
    id v15 = v38;
    [v30 finishedProvisioningPseudonym:0 success:0 error:v31 forRequestUUID:v38];

    id v14 = v20;
  }

- (void)reportAction:(int64_t)a3 ofTempURI:(id)a4 fromURI:(id)a5 onAccount:(id)a6 requestUUID:(id)a7 messageContext:(id)a8
{
  id v14 = a4;
  id v15 = a5;
  id v16 = a6;
  id v17 = a7;
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([a8 localObject]);
  id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 67110402;
    int v36 = a3;
    __int16 v37 = 2112;
    id v38 = v14;
    __int16 v39 = 2112;
    id v40 = v15;
    __int16 v41 = 2112;
    id v42 = v16;
    __int16 v43 = 2112;
    id v44 = v17;
    __int16 v45 = 2112;
    __int16 v46 = v18;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "reportAction %d ofTempURI %@ fromURI %@ onAccount %@ requestUUID %@ localObject %@",  buf,  0x3Au);
  }

  id v20 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon accountWithIdentifier:localObject:requiredEntitlement:]( self,  "accountWithIdentifier:localObject:requiredEntitlement:",  v16,  v18,  kIDSRegistrationEntitlement));
  if (!v20)
  {
    uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon listenerRemoteObjectForLocalObject:](self, "listenerRemoteObjectForLocalObject:", v18));
    uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSServiceReportingErrorDomain,  500LL,  0LL));
    [v29 finishedReportingRequestUUID:v17 withError:v30];

    goto LABEL_13;
  }

  id v31 = v14;
  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[IDSServerBag sharedInstanceForBagType:]( &OBJC_CLASS___IDSServerBag,  "sharedInstanceForBagType:",  0LL));
  unsigned __int8 v23 = (void *)objc_claimAutoreleasedReturnValue([v21 objectForKey:@"enable-report-web-approval-status"]);
  if (!v23 || (uint64_t v24 = objc_opt_class(&OBJC_CLASS___NSNumber, v22), (objc_opt_isKindOfClass(v23, v24) & 1) == 0))
  {

    goto LABEL_11;
  }

  unsigned __int8 v25 = [v23 BOOLValue];

  if ((v25 & 1) != 0)
  {
LABEL_11:
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472LL;
    v32[2] = sub_1001AA1C4;
    v32[3] = &unk_1008FC148;
    v32[4] = self;
    id v33 = v18;
    id v34 = v17;
    id v14 = v31;
    [v20 reportAction:a3 ofTempURI:v31 fromURI:v15 withCompletion:v32];

    goto LABEL_13;
  }

  unsigned int v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "reportAction -- disabled by the server!",  buf,  2u);
  }

  unsigned int v27 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon listenerRemoteObjectForLocalObject:](self, "listenerRemoteObjectForLocalObject:", v18));
  uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSServiceReportingErrorDomain,  100LL,  0LL));
  [v27 finishedReportingRequestUUID:v17 withError:v28];

  id v14 = v31;
LABEL_13:
}

- (void)registerAccount:(id)a3 messageContext:(id)a4
{
  id v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([a4 localObject]);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = 138412546;
    id v13 = v6;
    __int16 v14 = 2112;
    id v15 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "registerAccount %@ localObject %@",  (uint8_t *)&v12,  0x16u);
  }

  id v9 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon accountWithIdentifier:localObject:requiredEntitlement:]( self,  "accountWithIdentifier:localObject:requiredEntitlement:",  v6,  v7,  kIDSRegistrationEntitlement));
  id v10 = v9;
  if (v9)
  {
    [v9 registerAccount];
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 linkedAccounts]);
    objc_msgSend(v11, "__imForEach:", &stru_1008FCE68);
  }
}

- (void)unregisterAccount:(id)a3 messageContext:(id)a4
{
  id v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([a4 localObject]);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = 138412546;
    id v13 = v6;
    __int16 v14 = 2112;
    id v15 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "unregisterAccount %@ localObject %@",  (uint8_t *)&v12,  0x16u);
  }

  id v9 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon accountWithIdentifier:localObject:requiredEntitlement:]( self,  "accountWithIdentifier:localObject:requiredEntitlement:",  v6,  v7,  kIDSRegistrationEntitlement));
  id v10 = v9;
  if (v9)
  {
    [v9 unregisterAccount];
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 linkedAccounts]);
    objc_msgSend(v11, "__imForEach:", &stru_1008FCE88);
  }
}

- (void)forceRemoveAccount:(id)a3 messageContext:(id)a4
{
  id v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([a4 localObject]);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v18 = 138412546;
    id v19 = v6;
    __int16 v20 = 2112;
    uint64_t v21 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "forceRemoveAccount %@ localObject %@",  (uint8_t *)&v18,  0x16u);
  }

  id v9 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon accountWithIdentifier:localObject:requiredEntitlement:]( self,  "accountWithIdentifier:localObject:requiredEntitlement:",  v6,  v7,  kIDSRegistrationEntitlement));
  id v10 = v9;
  if (v9)
  {
    if ([v9 isTemporary])
    {
      if (![v10 accountType])
      {
        id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 userUniqueIdentifier]);

        if (v11)
        {
          int v12 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon registrationConductor](self, "registrationConductor"));
          id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 userStore]);
          __int16 v14 = (void *)objc_claimAutoreleasedReturnValue([v10 userUniqueIdentifier]);
          id v15 = (void *)objc_claimAutoreleasedReturnValue([v13 userWithUniqueIdentifier:v14]);

          id v16 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon registrationConductor](self, "registrationConductor"));
          id v17 = (void *)objc_claimAutoreleasedReturnValue([v16 userStore]);
          [v17 forceRemoveUser:v15 silently:1];
        }
      }
    }
  }
}

- (void)_reregisterAndReidentify:(id)a3 account:(id)a4 messageContext:(id)a5
{
  id v8 = a3;
  id v9 = a4;
  id v10 = (void *)objc_claimAutoreleasedReturnValue([a5 localObject]);
  id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412802;
    id v22 = v8;
    __int16 v23 = 2112;
    id v24 = v9;
    __int16 v25 = 2112;
    unsigned int v26 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "_reregisterAndReidentify %@ account %@ localObject %@",  buf,  0x20u);
  }

  int v12 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon accountWithIdentifier:localObject:requiredEntitlement:]( self,  "accountWithIdentifier:localObject:requiredEntitlement:",  v9,  v10,  kIDSRegistrationEntitlement));
  id v13 = v12;
  if (v12)
  {
    __int16 v14 = (void *)objc_claimAutoreleasedReturnValue([v12 registration]);
    unsigned int v15 = [v14 registrationType];

    if (!v15)
    {
      id v16 = (void *)objc_claimAutoreleasedReturnValue( +[IDSRegistrationReasonTracker sharedInstance]( &OBJC_CLASS___IDSRegistrationReasonTracker,  "sharedInstance"));
      id v17 = (void *)objc_claimAutoreleasedReturnValue([v13 userUniqueIdentifier]);
      [v16 setPNRReason:10 forUserUniqueIdentifier:v17];
    }

    objc_msgSend(v13, "_reregisterAndReidentify:", objc_msgSend(v8, "BOOLValue"));
    int v18 = (void *)objc_claimAutoreleasedReturnValue([v13 linkedAccounts]);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472LL;
    v19[2] = sub_1001AAA98;
    v19[3] = &unk_1008F9CE0;
    id v20 = v8;
    objc_msgSend(v18, "__imForEach:", v19);
  }
}

- (void)deactivateAndPurgeIdentifyForAccount:(id)a3 messageContext:(id)a4
{
  id v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([a4 localObject]);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = 138412546;
    id v13 = v6;
    __int16 v14 = 2112;
    unsigned int v15 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "deactivateAndPurgeIdentifyForAccount %@ localObject %@",  (uint8_t *)&v12,  0x16u);
  }

  id v9 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon accountWithIdentifier:localObject:requiredEntitlement:]( self,  "accountWithIdentifier:localObject:requiredEntitlement:",  v6,  v7,  kIDSRegistrationEntitlement));
  id v10 = v9;
  if (v9)
  {
    [v9 deactivateAndPurgeIdentify];
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 linkedAccounts]);
    objc_msgSend(v11, "__imForEach:", &stru_1008FCEA8);
  }
}

- (void)hardDeregisterWithMessageContext:(id)a3
{
  id v4 = a3;
  unsigned int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 localObject]);
    int v10 = 138412290;
    id v11 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "hard deregister localObject %@",  (uint8_t *)&v10,  0xCu);
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue([v4 localObject]);
  unsigned int v8 = -[IDSDaemon validateListenerForLocalObject:andCheckEntitlement:]( self,  "validateListenerForLocalObject:andCheckEntitlement:",  v7,  kIDSRegistrationResetEntitlement);

  if (v8)
  {
    self->_isHardReset = 1;
    id v9 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
    [v9 hardDeregister];
  }
}

- (void)triggerFinalDeregisterWithMessageContext:(id)a3
{
  id v4 = a3;
  unsigned int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 localObject]);
    int v10 = 138412290;
    id v11 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Trigger final deregister localObject %@",  (uint8_t *)&v10,  0xCu);
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue([v4 localObject]);
  unsigned int v8 = -[IDSDaemon validateListenerForLocalObject:andCheckEntitlement:]( self,  "validateListenerForLocalObject:andCheckEntitlement:",  v7,  kIDSRegistrationResetEntitlement);

  if (v8)
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
    [v9 triggerFinalDeregister];
  }
}

- (void)kickGetDependentForAccount:(id)a3 messageContext:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  unsigned int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v7 localObject]);
    int v14 = 138412546;
    id v15 = v6;
    __int16 v16 = 2112;
    id v17 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Kicking get dependent for account %@ localObject %@",  (uint8_t *)&v14,  0x16u);
  }

  int v10 = (void *)objc_claimAutoreleasedReturnValue([v7 localObject]);
  id v11 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon accountWithIdentifier:localObject:requiredEntitlement:]( self,  "accountWithIdentifier:localObject:requiredEntitlement:",  v6,  v10,  kIDSiCloudSignInHackEntitlement));

  int v12 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
  id v13 = v12;
  if (v11) {
    [v12 issueGetDependentRequestForAccount:v11];
  }
  else {
    [v12 issueGetDependentRequest];
  }
}

- (void)reRegisterWithUserID:(id)a3 action:(id)a4 service:(id)a5 messageContext:(id)a6
{
  id v14 = a3;
  id v10 = a4;
  id v11 = a5;
  int v12 = (void *)objc_claimAutoreleasedReturnValue([a6 localObject]);
  LODWORD(self) = -[IDSDaemon validateListenerForLocalObject:andCheckEntitlement:]( self,  "validateListenerForLocalObject:andCheckEntitlement:",  v12,  kIDSiCloudSignInHackEntitlement);

  if ((_DWORD)self)
  {
    id v13 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDRegistrationPushManager sharedInstance]( &OBJC_CLASS___IDSDRegistrationPushManager,  "sharedInstance"));
    [v13 fakeIncomingPushForUserID:v14 style:v10 service:v11];
  }
}

- (void)repairAccountsWithMessageContext:(id)a3
{
  id v4 = a3;
  unsigned int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 localObject]);
    int v10 = 138412290;
    id v11 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Trigger accounts repair { localObject: %@ }",  (uint8_t *)&v10,  0xCu);
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue([v4 localObject]);
  unsigned int v8 = -[IDSDaemon validateListenerForLocalObject:andCheckEntitlement:]( self,  "validateListenerForLocalObject:andCheckEntitlement:",  v7,  kIDSiCloudSignInHackEntitlement);

  if (v8)
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon registrationConductor](self, "registrationConductor"));
    [v9 kickRepair];
  }
}

- (void)registerForRegistrationAccountStatusMetric
{
  uint64_t v3 = OSLogHandleForIDSCategory("IDSDaemon");
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Registering for Registration Account Status Metric",  buf,  2u);
  }

  if (os_log_shim_legacy_logging_enabled(v5) && _IDSShouldLog(0LL, @"IDSDaemon")) {
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Registering for Registration Account Status Metric");
  }
  *(void *)__int128 buf = 0xAAAAAAAAAAAAAAAALL;
  objc_initWeak((id *)buf, self);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472LL;
  handler[2] = sub_1001AB470;
  handler[3] = &unk_1008FA018;
  objc_copyWeak(&v7, (id *)buf);
  xpc_activity_register("com.apple.ids.registrationaccountstatusmetric", XPC_ACTIVITY_CHECK_IN, handler);
  objc_destroyWeak(&v7);
  objc_destroyWeak((id *)buf);
}

- (void)registerForRegistrationEventTrackCleanup
{
  uint64_t v3 = OSLogHandleForIDSCategory("IDSDaemon");
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Registering for Registration Event Tracker Cleanup",  buf,  2u);
  }

  if (os_log_shim_legacy_logging_enabled(v5) && _IDSShouldLog(0LL, @"IDSDaemon")) {
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Registering for Registration Event Tracker Cleanup");
  }
  *(void *)__int128 buf = 0xAAAAAAAAAAAAAAAALL;
  objc_initWeak((id *)buf, self);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472LL;
  handler[2] = sub_1001AB8A4;
  handler[3] = &unk_1008FA018;
  objc_copyWeak(&v7, (id *)buf);
  xpc_activity_register("com.apple.ids.registration.tracker", XPC_ACTIVITY_CHECK_IN, handler);
  objc_destroyWeak(&v7);
  objc_destroyWeak((id *)buf);
}

- (void)registerForSenderKeyCleanup
{
  uint64_t v3 = OSLogHandleForIDSCategory("IDSDaemon");
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Registering for Sender Key Cleanup", buf, 2u);
  }

  *(void *)__int128 buf = 0xAAAAAAAAAAAAAAAALL;
  objc_initWeak((id *)buf, self);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472LL;
  handler[2] = sub_1001ABD04;
  handler[3] = &unk_1008FA018;
  objc_copyWeak(&v7, (id *)buf);
  xpc_activity_register("com.apple.ids.senderkey.cleanup", XPC_ACTIVITY_CHECK_IN, handler);
  objc_destroyWeak(&v7);
  objc_destroyWeak((id *)buf);
}

- (void)registerForQueryDBCleanup
{
  uint64_t v2 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Registering for Query DB cleanup", v5, 2u);
  }

  xpc_activity_register("com.apple.ids.query.db.cleanup", XPC_ACTIVITY_CHECK_IN, &stru_1008FCEE8);
}

- (void)_submitRegistrationAccountStatusMetric
{
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  __int128 v38 = 0u;
  __int128 v39 = 0u;
  id v27 = [&off_1009488B0 countByEnumeratingWithState:&v36 objects:v41 count:16];
  if (v27)
  {
    uint64_t v26 = *(void *)v37;
    do
    {
      for (i = 0LL; i != v27; i = (char *)i + 1)
      {
        if (*(void *)v37 != v26) {
          objc_enumerationMutation(&off_1009488B0);
        }
        uint64_t v3 = *(void *)(*((void *)&v36 + 1) + 8LL * (void)i);
        uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDServiceController sharedInstance]( &OBJC_CLASS___IDSDServiceController,  "sharedInstance",  v26));
        uint64_t v5 = objc_claimAutoreleasedReturnValue([v4 serviceWithIdentifier:v3]);

        id v6 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
        id v31 = (void *)v5;
        id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 accountsOnService:v5]);

        unsigned int v30 = +[IDSRegistrationController systemSupportsPhoneNumberRegistration]( &OBJC_CLASS___IDSRegistrationController,  "systemSupportsPhoneNumberRegistration");
        __int128 v32 = 0u;
        __int128 v33 = 0u;
        __int128 v34 = 0u;
        __int128 v35 = 0u;
        id v8 = v7;
        id v9 = [v8 countByEnumeratingWithState:&v32 objects:v40 count:16];
        if (!v9)
        {

          char v12 = 0;
LABEL_21:
          id v20 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDAccountMetrics registrationAccountStatusMetricForNonexistentAccountWithType:serviceIdentifier:]( &OBJC_CLASS___IDSDAccountMetrics,  "registrationAccountStatusMetricForNonexistentAccountWithType:serviceIdentifier:",  1LL,  v3));
          uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(+[IDSRTCLogger loggerWithCategory:](&OBJC_CLASS___IDSRTCLogger, "loggerWithCategory:", 4000LL));
          [v21 logMetric:v20];

          id v22 = (void *)objc_claimAutoreleasedReturnValue(+[IDSCoreAnalyticsLogger defaultLogger](&OBJC_CLASS___IDSCoreAnalyticsLogger, "defaultLogger"));
          [v22 logMetric:v20];

          goto LABEL_22;
        }

        id v10 = v9;
        uint64_t v28 = v3;
        uint64_t v29 = i;
        char v11 = 0;
        char v12 = 0;
        uint64_t v13 = *(void *)v33;
        do
        {
          for (j = 0LL; j != v10; j = (char *)j + 1)
          {
            if (*(void *)v33 != v13) {
              objc_enumerationMutation(v8);
            }
            id v15 = *(void **)(*((void *)&v32 + 1) + 8LL * (void)j);
            if ([v15 accountType] == 1)
            {
              __int16 v16 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDAccountMetrics registrationAccountStatusMetricForAccount:]( &OBJC_CLASS___IDSDAccountMetrics,  "registrationAccountStatusMetricForAccount:",  v15));
              id v17 = (void *)objc_claimAutoreleasedReturnValue( +[IDSRTCLogger loggerWithCategory:]( &OBJC_CLASS___IDSRTCLogger,  "loggerWithCategory:",  4000LL));
              [v17 logMetric:v16];

              int v18 = (void *)objc_claimAutoreleasedReturnValue( +[IDSCoreAnalyticsLogger defaultLogger]( &OBJC_CLASS___IDSCoreAnalyticsLogger,  "defaultLogger"));
              [v18 logMetric:v16];
              char v11 = 1;
            }

            else
            {
              __int16 v16 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDAccountMetrics registrationAccountStatusMetricForAccount:]( &OBJC_CLASS___IDSDAccountMetrics,  "registrationAccountStatusMetricForAccount:",  v15));
              id v19 = (void *)objc_claimAutoreleasedReturnValue( +[IDSRTCLogger loggerWithCategory:]( &OBJC_CLASS___IDSRTCLogger,  "loggerWithCategory:",  4000LL));
              [v19 logMetric:v16];

              int v18 = (void *)objc_claimAutoreleasedReturnValue( +[IDSCoreAnalyticsLogger defaultLogger]( &OBJC_CLASS___IDSCoreAnalyticsLogger,  "defaultLogger"));
              [v18 logMetric:v16];
              char v12 = 1;
            }
          }

          id v10 = [v8 countByEnumeratingWithState:&v32 objects:v40 count:16];
        }

        while (v10);

        uint64_t v3 = v28;
        i = v29;
        if ((v11 & 1) == 0) {
          goto LABEL_21;
        }
LABEL_22:
        if (v30)
        {
          if ((v12 & 1) == 0)
          {
            __int16 v23 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDAccountMetrics registrationAccountStatusMetricForNonexistentAccountWithType:serviceIdentifier:]( &OBJC_CLASS___IDSDAccountMetrics,  "registrationAccountStatusMetricForNonexistentAccountWithType:serviceIdentifier:",  0LL,  v3));
            id v24 = (void *)objc_claimAutoreleasedReturnValue( +[IDSRTCLogger loggerWithCategory:]( &OBJC_CLASS___IDSRTCLogger,  "loggerWithCategory:",  4000LL));
            [v24 logMetric:v23];

            __int16 v25 = (void *)objc_claimAutoreleasedReturnValue( +[IDSCoreAnalyticsLogger defaultLogger]( &OBJC_CLASS___IDSCoreAnalyticsLogger,  "defaultLogger"));
            [v25 logMetric:v23];
          }
        }
      }

      id v27 = [&off_1009488B0 countByEnumeratingWithState:&v36 objects:v41 count:16];
    }

    while (v27);
  }

- (void)clearIDSStateWithMessageContext:(id)a3
{
  id v4 = a3;
  uint64_t v17 = 0LL;
  int v18 = &v17;
  uint64_t v19 = 0x2020000000LL;
  char v20 = 0;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 localObject]);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  v16[2] = sub_1001ACA44;
  v16[3] = &unk_1008FCF10;
  v16[4] = self;
  v16[5] = &v17;
  -[IDSDaemon validateListenerForLocalObject:andPerformBlock:]( self,  "validateListenerForLocalObject:andPerformBlock:",  v5,  v16);

  if (*((_BYTE *)v18 + 24))
  {
    uint64_t v6 = OSLogHandleForIDSCategory("IDSDaemon");
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      id v8 = (void *)objc_claimAutoreleasedReturnValue([v4 localObject]);
      *(_DWORD *)__int128 buf = 138412290;
      id v22 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Told to clear IDS state %@", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v9) && _IDSShouldLog(0LL, @"IDSDaemon"))
    {
      id v15 = (void *)objc_claimAutoreleasedReturnValue([v4 localObject]);
      _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon", @"Told to clear IDS state %@");
    }

    -[IDSDaemon _clearIDSState](self, "_clearIDSState", v15);
  }

  else
  {
    uint64_t v10 = OSLogHandleForIDSCategory("IDSDaemon");
    char v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      char v12 = (void *)objc_claimAutoreleasedReturnValue([v4 localObject]);
      *(_DWORD *)__int128 buf = 138412290;
      id v22 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Not entitled to clear IDS state %@",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v13) && _IDSShouldLog(0LL, @"IDSDaemon"))
    {
      id v15 = (void *)objc_claimAutoreleasedReturnValue([v4 localObject]);
      _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon", @"Not entitled to clear IDS state %@");
    }

    id v14 = (void *)objc_claimAutoreleasedReturnValue(+[IMUserDefaults sharedDefaults](&OBJC_CLASS___IMUserDefaults, "sharedDefaults", v15));
    [v14 setClearStateOnLaunch:0];
  }

  _Block_object_dispose(&v17, 8);
}

- (void)_clearIDSState
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[IMUserDefaults sharedDefaults](&OBJC_CLASS___IMUserDefaults, "sharedDefaults"));
  [v2 setClearStateOnLaunch:0];

  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPeerIDManager sharedInstance](&OBJC_CLASS___IDSPeerIDManager, "sharedInstance"));
  [v3 clearCacheAndPersistImmediately:1];

  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPublicKeyStorage sharedInstance](&OBJC_CLASS___IDSPublicKeyStorage, "sharedInstance"));
  [v4 clearCache];

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[IDSIDStatusQueryController sharedInstance]( &OBJC_CLASS___IDSIDStatusQueryController,  "sharedInstance"));
  [v5 clearCache];

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDMessageStore sharedInstanceForDataProtectionClass:]( &OBJC_CLASS___IDSDMessageStore,  "sharedInstanceForDataProtectionClass:",  1LL));
  [v6 deleteDatabase];

  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDMessageStore sharedInstanceForDataProtectionClass:]( &OBJC_CLASS___IDSDMessageStore,  "sharedInstanceForDataProtectionClass:",  0LL));
  [v7 deleteDatabase];

  id v8 = (id)objc_claimAutoreleasedReturnValue( +[IDSDMessageStore sharedInstanceForDataProtectionClass:]( &OBJC_CLASS___IDSDMessageStore,  "sharedInstanceForDataProtectionClass:",  2LL));
  [v8 deleteDatabase];
}

- (void)initialLocalSyncStartedForServices:(id)a3 messageContext:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = OSLogHandleForTransportCategory("LocalSetup");
  uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 136315394;
    *(void *)&uint8_t buf[4] = "-[IDSDaemon(Account) initialLocalSyncStartedForServices:messageContext:]";
    *(_WORD *)&_BYTE buf[12] = 2112;
    *(void *)&buf[14] = v6;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Initial: %s services: %@", buf, 0x16u);
  }

  uint64_t v11 = os_log_shim_legacy_logging_enabled(v10);
  if ((_DWORD)v11)
  {
    if (_IDSShouldLogTransport(v11))
    {
      int v18 = "-[IDSDaemon(Account) initialLocalSyncStartedForServices:messageContext:]";
      id v19 = v6;
      _IDSLogTransport(@"LocalSetup", @"IDS", @"Initial: %s services: %@");
      if (_IDSShouldLog(0LL, @"LocalSetup"))
      {
        int v18 = "-[IDSDaemon(Account) initialLocalSyncStartedForServices:messageContext:]";
        id v19 = v6;
        _IDSLogV(0LL, @"IDSFoundation", @"LocalSetup", @"Initial: %s services: %@");
      }
    }
  }

  *(void *)__int128 buf = 0LL;
  *(void *)&uint8_t buf[8] = buf;
  *(void *)&uint8_t buf[16] = 0x2020000000LL;
  char v24 = 0;
  char v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "localObject", v18, v19));
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472LL;
  v20[2] = sub_1001ACE2C;
  v20[3] = &unk_1008FCF38;
  v20[4] = self;
  id v13 = v6;
  id v21 = v13;
  id v22 = buf;
  -[IDSDaemon validateListenerForLocalObject:andPerformBlock:]( self,  "validateListenerForLocalObject:andPerformBlock:",  v12,  v20);

  if (*(_BYTE *)(*(void *)&buf[8] + 24LL))
  {
    if ([v13 count])
    {
      id v14 = (void *)objc_claimAutoreleasedReturnValue( +[IDSUTunDeliveryController sharedInstance]( &OBJC_CLASS___IDSUTunDeliveryController,  "sharedInstance"));
      [v14 defaultPeerSetPreferInfraWiFi:1 services:v13];
    }

    id v15 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDuetInterface sharedInstance](&OBJC_CLASS___IDSDuetInterface, "sharedInstance"));
    __int16 v16 = (void *)objc_claimAutoreleasedReturnValue([v7 localObject]);
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v16 processName]);
    [v15 setInitialSyncInProgress:1 forClientID:v17];
  }

  _Block_object_dispose(buf, 8);
}

- (void)initialLocalSyncCompletedForServices:(id)a3 messageContext:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = OSLogHandleForTransportCategory("LocalSetup");
  uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 136315394;
    *(void *)&uint8_t buf[4] = "-[IDSDaemon(Account) initialLocalSyncCompletedForServices:messageContext:]";
    *(_WORD *)&_BYTE buf[12] = 2112;
    *(void *)&buf[14] = v6;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Initial: %s services: %@", buf, 0x16u);
  }

  uint64_t v11 = os_log_shim_legacy_logging_enabled(v10);
  if ((_DWORD)v11)
  {
    if (_IDSShouldLogTransport(v11))
    {
      int v18 = "-[IDSDaemon(Account) initialLocalSyncCompletedForServices:messageContext:]";
      id v19 = v6;
      _IDSLogTransport(@"LocalSetup", @"IDS", @"Initial: %s services: %@");
      if (_IDSShouldLog(0LL, @"LocalSetup"))
      {
        int v18 = "-[IDSDaemon(Account) initialLocalSyncCompletedForServices:messageContext:]";
        id v19 = v6;
        _IDSLogV(0LL, @"IDSFoundation", @"LocalSetup", @"Initial: %s services: %@");
      }
    }
  }

  *(void *)__int128 buf = 0LL;
  *(void *)&uint8_t buf[8] = buf;
  *(void *)&uint8_t buf[16] = 0x2020000000LL;
  char v24 = 0;
  char v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "localObject", v18, v19));
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472LL;
  v20[2] = sub_1001AD168;
  v20[3] = &unk_1008FCF38;
  v20[4] = self;
  id v13 = v6;
  id v21 = v13;
  id v22 = buf;
  -[IDSDaemon validateListenerForLocalObject:andPerformBlock:]( self,  "validateListenerForLocalObject:andPerformBlock:",  v12,  v20);

  if (*(_BYTE *)(*(void *)&buf[8] + 24LL))
  {
    if ([v13 count])
    {
      id v14 = (void *)objc_claimAutoreleasedReturnValue( +[IDSUTunDeliveryController sharedInstance]( &OBJC_CLASS___IDSUTunDeliveryController,  "sharedInstance"));
      [v14 defaultPeerSetPreferInfraWiFi:0 services:v13];
    }

    id v15 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDuetInterface sharedInstance](&OBJC_CLASS___IDSDuetInterface, "sharedInstance"));
    __int16 v16 = (void *)objc_claimAutoreleasedReturnValue([v7 localObject]);
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v16 processName]);
    [v15 setInitialSyncInProgress:0 forClientID:v17];
  }

  _Block_object_dispose(buf, 8);
}

- (void)iCloudSignInWithUserName:(id)a3 authToken:(id)a4 password:(id)a5 accountInfo:(id)a6 accountStatus:(id)a7 handles:(id)a8 messageContext:(id)a9
{
  id v15 = a3;
  id v16 = a4;
  id v17 = a5;
  id v18 = a6;
  id v19 = a7;
  id v20 = a8;
  id v21 = a9;
  id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog iCloud](&OBJC_CLASS___IMRGLog, "iCloud"));
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v23 = (void *)objc_claimAutoreleasedReturnValue([v21 localObject]);
    int v27 = 138412546;
    id v28 = v15;
    __int16 v29 = 2112;
    unsigned int v30 = v23;
    _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "iCloudSignInWithUserName %@ localObject %@",  (uint8_t *)&v27,  0x16u);
  }

  char v24 = (void *)objc_claimAutoreleasedReturnValue([v21 localObject]);
  unsigned int v25 = -[IDSDaemon validateListenerForLocalObject:](self, "validateListenerForLocalObject:", v24);

  if (v25)
  {
    uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon signInResponder](self, "signInResponder"));
    [v26 iCloudSignInWithUsername:v15 authToken:v16 password:v17 accountInfo:v18 accountStatus:v19 handles:v20];
  }
}

- (void)iCloudUpdateForUserName:(id)a3 accountInfo:(id)a4 messageContext:(id)a5
{
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog iCloud](&OBJC_CLASS___IMRGLog, "iCloud"));
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    char v12 = (void *)objc_claimAutoreleasedReturnValue([v10 localObject]);
    int v16 = 138412546;
    id v17 = v8;
    __int16 v18 = 2112;
    id v19 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "iCloudUpdateForUserName %@ localObject %@",  (uint8_t *)&v16,  0x16u);
  }

  id v13 = (void *)objc_claimAutoreleasedReturnValue([v10 localObject]);
  unsigned int v14 = -[IDSDaemon validateListenerForLocalObject:](self, "validateListenerForLocalObject:", v13);

  if (v14)
  {
    id v15 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon signInResponder](self, "signInResponder"));
    [v15 iCloudUpdateForUsername:v8 accountInfo:v9];
  }
}

- (void)iCloudModifyForUserName:(id)a3 messageContext:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog iCloud](&OBJC_CLASS___IMRGLog, "iCloud"));
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v7 localObject]);
    int v13 = 138412546;
    id v14 = v6;
    __int16 v15 = 2112;
    int v16 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "iCloudModifyForUserName %@ localObject %@",  (uint8_t *)&v13,  0x16u);
  }

  id v10 = (void *)objc_claimAutoreleasedReturnValue([v7 localObject]);
  unsigned int v11 = -[IDSDaemon validateListenerForLocalObject:](self, "validateListenerForLocalObject:", v10);

  if (v11)
  {
    char v12 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon signInResponder](self, "signInResponder"));
    [v12 iCloudModifyForUsername:v6];
  }
}

- (void)iCloudSignOutWithMessageContext:(id)a3
{
  id v4 = a3;
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog iCloud](&OBJC_CLASS___IMRGLog, "iCloud"));
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 localObject]);
    int v10 = 138412290;
    unsigned int v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "iCloudSignOut %@", (uint8_t *)&v10, 0xCu);
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue([v4 localObject]);
  unsigned int v8 = -[IDSDaemon validateListenerForLocalObject:](self, "validateListenerForLocalObject:", v7);

  if (v8)
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon signInResponder](self, "signInResponder"));
    [v9 iCloudSignOut];
  }
}

- (void)iTunesSignInWithUserName:(id)a3 authToken:(id)a4 password:(id)a5 accountInfo:(id)a6 accountStatus:(id)a7 handles:(id)a8 messageContext:(id)a9
{
  id v15 = a3;
  id v16 = a4;
  id v17 = a5;
  id v18 = a6;
  id v19 = a7;
  id v20 = a8;
  id v21 = a9;
  id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog iCloud](&OBJC_CLASS___IMRGLog, "iCloud"));
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v23 = (void *)objc_claimAutoreleasedReturnValue([v21 localObject]);
    int v27 = 138412546;
    id v28 = v15;
    __int16 v29 = 2112;
    unsigned int v30 = v23;
    _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "iTunesSignInWithUserName %@ localObject %@",  (uint8_t *)&v27,  0x16u);
  }

  char v24 = (void *)objc_claimAutoreleasedReturnValue([v21 localObject]);
  unsigned int v25 = -[IDSDaemon validateListenerForLocalObject:](self, "validateListenerForLocalObject:", v24);

  if (v25)
  {
    uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon signInResponder](self, "signInResponder"));
    [v26 iTunesSignInWithUsername:v15 authToken:v16 password:v17 accountInfo:v18 accountStatus:v19 handles:v20];
  }
}

- (void)iTunesSignOutWithMessageContext:(id)a3
{
  id v4 = a3;
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog iCloud](&OBJC_CLASS___IMRGLog, "iCloud"));
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 localObject]);
    int v10 = 138412290;
    unsigned int v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "iTunesSignOut %@", (uint8_t *)&v10, 0xCu);
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue([v4 localObject]);
  unsigned int v8 = -[IDSDaemon validateListenerForLocalObject:](self, "validateListenerForLocalObject:", v7);

  if (v8)
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon signInResponder](self, "signInResponder"));
    [v9 iTunesSignOut];
  }
}

- (void)gameCenterSignInWithUserName:(id)a3 authToken:(id)a4 password:(id)a5 accountInfo:(id)a6 accountStatus:(id)a7 handles:(id)a8 messageContext:(id)a9
{
  id v15 = a3;
  id v16 = a9;
  id v17 = a8;
  id v18 = a7;
  id v19 = a6;
  id v20 = a5;
  id v21 = a4;
  id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog iCloud](&OBJC_CLASS___IMRGLog, "iCloud"));
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v23 = (void *)objc_claimAutoreleasedReturnValue([v16 localObject]);
    int v25 = 138412546;
    id v26 = v15;
    __int16 v27 = 2112;
    id v28 = v23;
    _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "gameCenterSignInWithUserName %@ localObject %@",  (uint8_t *)&v25,  0x16u);
  }

  char v24 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon signInResponder](self, "signInResponder"));
  [v24 gameCenterSignInWithUsername:v15 authToken:v21 password:v20 accountInfo:v19 accountStatus:v18 handles:v17];
}

- (void)gameCenterSignOutWithMessageContext:(id)a3
{
  id v4 = a3;
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog iCloud](&OBJC_CLASS___IMRGLog, "iCloud"));
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 localObject]);
    int v8 = 138412290;
    id v9 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "gameCenterSignOut %@", (uint8_t *)&v8, 0xCu);
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon signInResponder](self, "signInResponder"));
  [v7 gameCenterSignOut];
}

- (void)gameCenterModifyForUserName:(id)a3 messageContext:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog iCloud](&OBJC_CLASS___IMRGLog, "iCloud"));
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v7 localObject]);
    int v11 = 138412546;
    id v12 = v6;
    __int16 v13 = 2112;
    id v14 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "gameCenterModifyForUserName %@ localObject %@",  (uint8_t *)&v11,  0x16u);
  }

  int v10 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon signInResponder](self, "signInResponder"));
  [v10 gameCenterModifyForUserName:v6];
}

- (void)updateUserWithOldUserName:(id)a3 newUserName:(id)a4 messageContext:(id)a5
{
  id v12 = a3;
  id v8 = a4;
  id v9 = (void *)objc_claimAutoreleasedReturnValue([a5 localObject]);
  unsigned int v10 = -[IDSDaemon validateListenerForLocalObject:](self, "validateListenerForLocalObject:", v9);

  if (v10)
  {
    int v11 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon signInResponder](self, "signInResponder"));
    [v11 updateUserWithOldUsername:v12 newUsername:v8];
  }
}

- (void)iCloudSignInHackWithUserName:(id)a3 password:(id)a4 messageContext:(id)a5
{
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  int v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    if (v9) {
      id v12 = @"YES";
    }
    else {
      id v12 = @"NO";
    }
    __int16 v13 = (void *)objc_claimAutoreleasedReturnValue([v10 localObject]);
    int v18 = 138412802;
    id v19 = v8;
    __int16 v20 = 2112;
    id v21 = v12;
    __int16 v22 = 2112;
    __int16 v23 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "iCloud sign in hack with userName %@ and password %@ localObject %@",  (uint8_t *)&v18,  0x20u);
  }

  id v14 = (void *)objc_claimAutoreleasedReturnValue([v10 localObject]);
  unsigned int v15 = -[IDSDaemon validateListenerForLocalObject:andCheckEntitlement:]( self,  "validateListenerForLocalObject:andCheckEntitlement:",  v14,  kIDSiCloudSignInHackEntitlement);

  if (v15)
  {
    id v16 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon registrationConductor](self, "registrationConductor"));
    [v16 setShouldSupressRepairLogic:1];

    id v17 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon signInResponder](self, "signInResponder"));
    [v17 iCloudSignInWithUsername:v8 authToken:0 password:v9 accountInfo:0 accountStatus:0 handles:0];
  }
}

- (void)iCloudSignOutHackWithMessageContext:(id)a3
{
  id v4 = a3;
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 localObject]);
    int v11 = 138412290;
    id v12 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "iCloud sign out hack with localObject %@",  (uint8_t *)&v11,  0xCu);
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue([v4 localObject]);
  unsigned int v8 = -[IDSDaemon validateListenerForLocalObject:andCheckEntitlement:]( self,  "validateListenerForLocalObject:andCheckEntitlement:",  v7,  kIDSiCloudSignInHackEntitlement);

  if (v8)
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon registrationConductor](self, "registrationConductor"));
    [v9 setShouldSupressRepairLogic:1];

    id v10 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon signInResponder](self, "signInResponder"));
    [v10 iCloudSignOut];
  }
}

- (void)setPassword:(id)a3 forUsername:(id)a4 onService:(id)a5 messageContext:(id)a6
{
  id v10 = a3;
  id v11 = a4;
  id v12 = (__CFString *)a5;
  id v13 = a6;
  id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 localObject]);
  unsigned int v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    int v23 = 138412802;
    char v24 = v14;
    __int16 v25 = 2112;
    id v26 = v11;
    __int16 v27 = 2048;
    id v28 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "setPasswordForProfileID localObject %@ {username: %@, password: %p",  (uint8_t *)&v23,  0x20u);
  }

  if ((-[__CFString isEqualToString:](v12, "isEqualToString:", @"FaceTime") & 1) != 0)
  {
    id v16 = @"com.apple.ess";
  }

  else
  {
    unsigned int v17 = -[__CFString isEqualToString:](v12, "isEqualToString:", @"iMessage");
    id v16 = @"com.apple.madrid";
    if (!v17) {
      id v16 = v12;
    }
  }

  int v18 = v16;
  id v19 = (void *)objc_claimAutoreleasedReturnValue([v13 localObject]);
  if (-[IDSDaemon validateListenerForLocalObject:andCheckEntitlement:forAccessToServiceWithIdentifier:]( self,  "validateListenerForLocalObject:andCheckEntitlement:forAccessToServiceWithIdentifier:",  v19,  kIDSRegistrationEntitlement,  v18))
  {

LABEL_10:
    __int16 v22 = (void *)objc_claimAutoreleasedReturnValue(+[FTPasswordManager sharedInstance](&OBJC_CLASS___FTPasswordManager, "sharedInstance"));
    [v22 setPasswordForProfileID:0 username:v11 service:v12 password:v10 outRequestID:0 completionBlock:&stru_1008FCF58];

    goto LABEL_11;
  }

  __int16 v20 = (void *)objc_claimAutoreleasedReturnValue([v13 localObject]);
  unsigned int v21 = -[IDSDaemon validateListenerForLocalObject:andCheckEntitlement:]( self,  "validateListenerForLocalObject:andCheckEntitlement:",  v20,  kIDSTestToolEntitlement);

  if (v21) {
    goto LABEL_10;
  }
LABEL_11:
}

- (void)updateSubServices:(id)a3 forService:(id)a4 deviceUniqueID:(id)a5 messageContext:(id)a6
{
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  id v13 = a6;
  id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    int v18 = 138412802;
    id v19 = v10;
    __int16 v20 = 2112;
    id v21 = v11;
    __int16 v22 = 2112;
    id v23 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Updating sub services %@ for service %@ deviceUniqueID %@",  (uint8_t *)&v18,  0x20u);
  }

  unsigned int v15 = (void *)objc_claimAutoreleasedReturnValue([v13 localObject]);
  unsigned int v16 = -[IDSDaemon validateListenerForLocalObject:andCheckEntitlement:forAccessToServiceWithIdentifier:]( self,  "validateListenerForLocalObject:andCheckEntitlement:forAccessToServiceWithIdentifier:",  v15,  kIDSSubServicesEntitlement,  v11);

  if (v16)
  {
    unsigned int v17 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDServiceController sharedInstance](&OBJC_CLASS___IDSDServiceController, "sharedInstance"));
    [v17 updateSubServices:v10 forService:v11 deviceUniqueID:v12];
  }
}

- (void)setPairedDeviceInfo:(id)a3 messageContext:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  unsigned int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = 138412290;
    id v14 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Save paired device info: %@",  (uint8_t *)&v13,  0xCu);
  }

  id v9 = (void *)objc_claimAutoreleasedReturnValue([v7 localObject]);
  unsigned int v10 = -[IDSDaemon validateListenerForLocalObject:andCheckEntitlement:]( self,  "validateListenerForLocalObject:andCheckEntitlement:",  v9,  kIDSEncryptionKeysEntitlement);

  if (v10)
  {
    id v11 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPairingManager sharedInstance](&OBJC_CLASS___IDSPairingManager, "sharedInstance"));
    [v11 setPairedDeviceInfo:v6];

    id v12 = (void *)objc_claimAutoreleasedReturnValue(+[IDSAccountSync sharedInstance](&OBJC_CLASS___IDSAccountSync, "sharedInstance"));
    [v12 resetAndResynchronizeEverything];
  }
}

- (void)setNSUUID:(id)a3 onDeviceWithUniqueID:(id)a4 forService:(id)a5 messageContext:(id)a6
{
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  id v13 = a6;
  uint64_t v49 = 0LL;
  __int16 v50 = &v49;
  uint64_t v51 = 0x2020000000LL;
  char v52 = 0;
  id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 localObject]);
  id v42 = _NSConcreteStackBlock;
  uint64_t v43 = 3221225472LL;
  id v44 = sub_1001AECA0;
  __int16 v45 = &unk_1008FCF38;
  __int16 v46 = self;
  id v15 = v12;
  id v47 = v15;
  __int16 v48 = &v49;
  -[IDSDaemon validateListenerForLocalObject:andPerformBlock:]( self,  "validateListenerForLocalObject:andPerformBlock:",  v14,  &v42);

  if (*((_BYTE *)v50 + 24))
  {
    unsigned int v16 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
    unsigned int v17 = (void *)objc_claimAutoreleasedReturnValue([v16 cloudPairedIDForDeviceID:v11]);

    int v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      id v19 = (void *)objc_claimAutoreleasedReturnValue([v13 localObject]);
      *(_DWORD *)__int128 buf = 138413314;
      id v54 = v10;
      __int16 v55 = 2112;
      id v56 = v11;
      __int16 v57 = 2112;
      uint64_t v58 = v17;
      __int16 v59 = 2112;
      id v60 = v15;
      __int16 v61 = 2112;
      id v62 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Setting NSUUID %@ on device with uniqueID %@  current pariedID: %@  service %@ localObject %@",  buf,  0x34u);
    }

    uint64_t v20 = OSLogHandleForTransportCategory("CloudPairing");
    id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412802;
      id v54 = v10;
      __int16 v55 = 2112;
      id v56 = v11;
      __int16 v57 = 2112;
      uint64_t v58 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  " *** Cloud pairing detected setting BTUUID %@   on device ID: %@ **** (From: %@)",  buf,  0x20u);
    }

    uint64_t v23 = os_log_shim_legacy_logging_enabled(v22);
    if ((_DWORD)v23)
    {
      if (_IDSShouldLogTransport(v23))
      {
        id v40 = v11;
        __int16 v41 = v17;
        id v39 = v10;
        _IDSLogTransport( @"CloudPairing",  @"IDS",  @" *** Cloud pairing detected setting BTUUID %@   on device ID: %@ **** (From: %@)");
        if (_IDSShouldLog(0LL, @"CloudPairing"))
        {
          id v40 = v11;
          __int16 v41 = v17;
          id v39 = v10;
          _IDSLogV( 0LL,  @"IDSFoundation",  @"CloudPairing",  @" *** Cloud pairing detected setting BTUUID %@   on device ID: %@ **** (From: %@)");
        }
      }
    }

    char v24 = (void *)objc_claimAutoreleasedReturnValue( +[IMSystemMonitor sharedInstance]( &OBJC_CLASS___IMSystemMonitor,  "sharedInstance",  v39,  v40,  v41,  v42,  v43,  v44,  v45,  v46));
    unsigned int v25 = [v24 isUnderFirstDataProtectionLock];

    if (v25)
    {
      self->_cloudPairingBeforeFirstUnlock = 1;
      id v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  " => Noting it was before first unlock",  buf,  2u);
      }
    }

    if (v10 && v17 && [v17 isEqualToIgnoringCase:v10])
    {
      __int16 v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, " => Ignoring, no change", buf, 2u);
      }

      uint64_t v28 = OSLogHandleForTransportCategory("CloudPairing");
      __int16 v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, " => Ignoring, no change", buf, 2u);
      }

      uint64_t v31 = os_log_shim_legacy_logging_enabled(v30);
      if ((_DWORD)v31)
      {
        if (_IDSShouldLogTransport(v31))
        {
          _IDSLogTransport(@"CloudPairing", @"IDS", @" => Ignoring, no change");
        }
      }
    }

    else
    {
      __int128 v32 = (void *)objc_claimAutoreleasedReturnValue(+[IMLockdownManager sharedInstance](&OBJC_CLASS___IMLockdownManager, "sharedInstance"));
      unsigned int v33 = [v32 isInternalInstall];

      if (v33)
      {
        __int128 v34 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
        __int128 v35 = (void *)objc_claimAutoreleasedReturnValue([v34 propertiesForDeviceWithUniqueID:v11]);

        __int128 v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 138412290;
          id v54 = v35;
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "   => Device properties: %@", buf, 0xCu);
        }

        if ([v10 length])
        {
          __int128 v37 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"If this was unexpected, please file a radar (PEP Transport) and attach output of 'idstool dump'. See 17180900 for reference"));
          sub_10012E874(0, @"iCloud Pairing Added", v37, 1120LL);
        }

        else
        {
          __int128 v37 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"If this was unexpected, please file a radar (PEP Transport) and attach output of 'idstool dump'. See 17180900 for reference"));
          sub_10012E874(0, @"iCloud Pairing Removed", v37, 1073LL);
        }
      }

      __int128 v38 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
      [v38 setNSUUID:v10 onDeviceWithUniqueID:v11];

      im_dispatch_after_primary_queue(&stru_1008FCF78, 5.0);
    }
  }

  _Block_object_dispose(&v49, 8);
}

- (void)incomingAccountSyncMessage:(id)a3 messageContext:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  unsigned int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog accountSync](&OBJC_CLASS___IMRGLog, "accountSync"));
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v12 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Daemon received incoming account sync message",  v12,  2u);
  }

  id v9 = (void *)objc_claimAutoreleasedReturnValue([v7 localObject]);
  unsigned int v10 = -[IDSDaemon validateListenerForLocalObject:andCheckEntitlement:]( self,  "validateListenerForLocalObject:andCheckEntitlement:",  v9,  kIDSAccountSyncEntitlement);

  if (v10)
  {
    id v11 = (void *)objc_claimAutoreleasedReturnValue(+[IDSAccountSync sharedInstance](&OBJC_CLASS___IDSAccountSync, "sharedInstance"));
    [v11 incomingSyncMessage:v6];
  }
}

- (void)regenerateRegisteredIdentityWithMessageContext:(id)a3
{
  id v4 = a3;
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog keyRoll](&OBJC_CLASS___IMRGLog, "keyRoll"));
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Received request to regenerate registered identity",  buf,  2u);
  }

  id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 localObject]);
  unsigned __int8 v7 = -[IDSDaemon validateListenerForLocalObject:andCheckEntitlement:]( self,  "validateListenerForLocalObject:andCheckEntitlement:",  v6,  kIDSKeyRollingEntitlement);

  if ((v7 & 1) != 0)
  {
    unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue( +[IDSRegistrationKeyManager sharedInstance]( &OBJC_CLASS___IDSRegistrationKeyManager,  "sharedInstance"));
    [v8 regenerateRegisteredIdentity];
  }

  else
  {
    unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue(+[IMRGLog keyRoll](&OBJC_CLASS___IMRGLog, "keyRoll"));
    if (os_log_type_enabled((os_log_t)v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v9 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v8,  OS_LOG_TYPE_DEFAULT,  "Missing key rolling entitlement -- returning early",  v9,  2u);
    }
  }
}

- (void)systemDidLeaveFirstDataProtectionLock
{
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "System did leave first unlock, checking pending if we cloud paired before unlock",  buf,  2u);
  }

  if (self->_cloudPairingBeforeFirstUnlock)
  {
    self->_cloudPairingBeforeFirstUnlock = 0;
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v9 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "   we did! let's update accounts in a few seconds",  v9,  2u);
    }

    im_dispatch_after_primary_queue(&stru_1008FCF98, 10.0);
  }

  uint64_t v5 = OSLogHandleForIDSCategory("IDSDaemon");
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unsigned int v8 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "System has left first unlock: processing stored incoming messages.",  v8,  2u);
  }

  if (os_log_shim_legacy_logging_enabled(v7) && _IDSShouldLog(0LL, @"IDSDaemon")) {
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"System has left first unlock: processing stored incoming messages.");
  }
  -[IDSDaemon _processStoredMessagesIncludingClassD:](self, "_processStoredMessagesIncludingClassD:", 0LL);
}

- (void)registrationControlSetRegistrationStateForRegistrationType:(int64_t)a3 toState:(int64_t)a4 requestID:(id)a5 messageContext:(id)a6
{
  id v10 = a5;
  id v11 = a6;
  id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 localObject]);
  unsigned __int8 v13 = -[IDSDaemon validateListenerForLocalObject:andCheckEntitlement:]( self,  "validateListenerForLocalObject:andCheckEntitlement:",  v12,  kIDSRegistrationControlEntitlement);

  if ((v13 & 1) == 0)
  {
    uint64_t v26 = OSLogHandleForIDSCategory("Warning");
    __int16 v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_ERROR,  "Attempt to use the Registration Control API's without the correct entitlement, Failing request",  buf,  2u);
    }

    if (os_log_shim_legacy_logging_enabled(v28))
    {
      _IDSWarnV( @"IDSFoundation",  @"Attempt to use the Registration Control API's without the correct entitlement, Failing request");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"Attempt to use the Registration Control API's without the correct entitlement, Failing request");
      _IDSLogTransport( @"Warning",  @"IDS",  @"Attempt to use the Registration Control API's without the correct entitlement, Failing request");
    }

    __int16 v29 = objc_alloc(&OBJC_CLASS___NSError);
    char v24 = -[NSError initWithDomain:code:userInfo:]( v29,  "initWithDomain:code:userInfo:",  IDSRegistrationControlErrorDomain,  3LL,  0LL);
    -[IDSDaemon _respondToRegistrationControlWithRequestID:status:messageContext:error:]( self,  "_respondToRegistrationControlWithRequestID:status:messageContext:error:",  v10,  0LL,  v11,  v24);
    goto LABEL_11;
  }

  id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog iCloud](&OBJC_CLASS___IMRGLog, "iCloud"));
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    id v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a3));
    unsigned int v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a4));
    unsigned int v17 = (void *)objc_claimAutoreleasedReturnValue([v11 localObject]);
    *(_DWORD *)__int128 buf = 138412802;
    __int128 v32 = v15;
    __int16 v33 = 2112;
    __int128 v34 = v16;
    __int16 v35 = 2112;
    __int128 v36 = v17;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "registrationControlSetRegistrationStateForRegistrationType %@ registrationType %@ localObject %@",  buf,  0x20u);
  }

  int v18 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDRegistrationControl sharedInstance](&OBJC_CLASS___IDSDRegistrationControl, "sharedInstance"));
  id v30 = 0LL;
  [v18 updateRegistrationType:a3 toState:a4 error:&v30];
  id v19 = v30;

  -[IDSDaemon respondToRegistrationControlActionWithRequestID:messageContext:error:]( self,  "respondToRegistrationControlActionWithRequestID:messageContext:error:",  v10,  v11,  v19);
  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v11 localObject]);
  id v21 = (void *)objc_claimAutoreleasedReturnValue([v20 processName]);
  LODWORD(v18) = [v21 isEqualToString:@"Setup"];

  if ((_DWORD)v18)
  {
    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(+[FTDeviceSupport sharedInstance](&OBJC_CLASS___FTDeviceSupport, "sharedInstance"));
    id v23 = [v22 isGreenTea];

    char v24 = (NSError *)[[IDSRegistrationControlChosenMetric alloc] initWithControlRegistrationType:a3 registrationControlStatus:a4 isInterestingRegion:v23];
    unsigned int v25 = (void *)objc_claimAutoreleasedReturnValue(+[IDSAWDLogger logger](&OBJC_CLASS___IDSAWDLogger, "logger"));
    [v25 logMetric:v24];

LABEL_11:
  }
}

- (void)registrationControlGetRegistrationStateForRegistrationType:(int64_t)a3 requestID:(id)a4 messageContext:(id)a5
{
  id v8 = a4;
  id v9 = a5;
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 localObject]);
  unsigned __int8 v11 = -[IDSDaemon validateListenerForLocalObject:andCheckEntitlement:]( self,  "validateListenerForLocalObject:andCheckEntitlement:",  v10,  kIDSRegistrationControlEntitlement);

  if ((v11 & 1) != 0)
  {
    id v12 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDRegistrationControl sharedInstance](&OBJC_CLASS___IDSDRegistrationControl, "sharedInstance"));
    id v22 = 0LL;
    id v13 = [v12 registrationStateForRegistrationType:a3 error:&v22];
    id v14 = (NSError *)v22;

    id v15 = self;
    id v16 = v8;
    id v17 = v13;
  }

  else
  {
    uint64_t v18 = OSLogHandleForIDSCategory("Warning");
    id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "Attempt to use the Registration Control API's without the correct entitlement, Failing request",  buf,  2u);
    }

    if (os_log_shim_legacy_logging_enabled(v20))
    {
      _IDSWarnV( @"IDSFoundation",  @"Attempt to use the Registration Control API's without the correct entitlement, Failing request");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"Attempt to use the Registration Control API's without the correct entitlement, Failing request");
      _IDSLogTransport( @"Warning",  @"IDS",  @"Attempt to use the Registration Control API's without the correct entitlement, Failing request");
    }

    id v21 = objc_alloc(&OBJC_CLASS___NSError);
    id v14 = -[NSError initWithDomain:code:userInfo:]( v21,  "initWithDomain:code:userInfo:",  IDSRegistrationControlErrorDomain,  3LL,  0LL);
    id v15 = self;
    id v16 = v8;
    id v17 = 0LL;
  }

  -[IDSDaemon _respondToRegistrationControlWithRequestID:status:messageContext:error:]( v15,  "_respondToRegistrationControlWithRequestID:status:messageContext:error:",  v16,  v17,  v9,  v14);
}

- (void)respondToRegistrationControlActionWithRequestID:(id)a3 messageContext:(id)a4 error:(id)a5
{
  id v8 = a5;
  id v9 = a3;
  id v10 = (void *)objc_claimAutoreleasedReturnValue([a4 localObject]);
  id v11 = (id)objc_claimAutoreleasedReturnValue(-[IDSDaemon listenerRemoteObjectForLocalObject:](self, "listenerRemoteObjectForLocalObject:", v10));

  [v11 registrationControlResponseForRequestID:v9 withError:v8];
}

- (void)_respondToRegistrationControlWithRequestID:(id)a3 status:(int64_t)a4 messageContext:(id)a5 error:(id)a6
{
  id v10 = a6;
  id v11 = a5;
  id v12 = a3;
  [v11 setReply:1];
  id v13 = (void *)objc_claimAutoreleasedReturnValue([v11 localObject]);
  id v14 = (id)objc_claimAutoreleasedReturnValue( -[IDSDaemon broadcasterForLocalObject:messageContext:]( self,  "broadcasterForLocalObject:messageContext:",  v13,  v11));

  [v14 registrationControlStatusResponseForRequestID:a4 requestID:v12 withError:v10];
}

- (void)systemDidLeaveDataProtectionLock
{
  if (!self->_hasProcessedMessagesAfterFirstUnlock)
  {
    uint64_t v3 = OSLogHandleForIDSCategory("IDSDaemon");
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "System has left data protection lock: Checking Migration Status",  buf,  2u);
    }

    if (os_log_shim_legacy_logging_enabled(v5) && _IDSShouldLog(0LL, @"IDSDaemon")) {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"System has left data protection lock: Checking Migration Status");
    }
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDMessageStoreMigrator sharedInstance](&OBJC_CLASS___IDSDMessageStoreMigrator, "sharedInstance"));
    [v6 migrateClassA];

    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDMessageStoreMigrator sharedInstance](&OBJC_CLASS___IDSDMessageStoreMigrator, "sharedInstance"));
    [v7 migrateClassC];

    if (+[IMUserDefaults isFakingEveryUnlockAsFirstUnlock]( &OBJC_CLASS___IMUserDefaults,  "isFakingEveryUnlockAsFirstUnlock"))
    {
      self->_hasProcessedMessagesAfterFirstUnlock = 0;
      uint64_t v8 = OSLogHandleForIDSCategory("IDSDaemon");
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)id v11 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Faking data protection lock as first unlock: Processing stored messages.",  v11,  2u);
      }

      if (os_log_shim_legacy_logging_enabled(v10) && _IDSShouldLog(0LL, @"IDSDaemon")) {
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Faking data protection lock as first unlock: Processing stored messages.");
      }
      -[IDSDaemon _processStoredMessagesIncludingClassD:](self, "_processStoredMessagesIncludingClassD:", 0LL);
    }

    else
    {
      self->_hasProcessedMessagesAfterFirstUnlock = 1;
    }
  }

  -[IDSDaemon _processStoredIncomingLocalMessages](self, "_processStoredIncomingLocalMessages");
}

- (void)systemWillSleep
{
  uint64_t v3 = OSLogHandleForIDSCategory("IDSDaemon");
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "System going to sleep", v6, 2u);
  }

  self->_deviceIsAsleep = 1;
}

- (void)systemDidWake
{
  uint64_t v3 = OSLogHandleForIDSCategory("IDSDaemon");
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "System waking up", buf, 2u);
  }

  if (self->_deviceIsAsleep != 1)
  {
    uint64_t v6 = OSLogHandleForIDSCategory("Warning");
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int deviceIsAsleep = self->_deviceIsAsleep;
      *(_DWORD *)__int128 buf = 67109120;
      int v16 = deviceIsAsleep;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "IDSDaemon got a wake when it was not asleep! Current sleep state: %d",  buf,  8u);
    }

    if (os_log_shim_legacy_logging_enabled(v9))
    {
      _IDSWarnV(@"IDSFoundation", @"IDSDaemon got a wake when it was not asleep! Current sleep state: %d");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"IDSDaemon got a wake when it was not asleep! Current sleep state: %d");
      _IDSLogTransport( @"Warning",  @"IDS",  @"IDSDaemon got a wake when it was not asleep! Current sleep state: %d");
    }
  }

  self->_int deviceIsAsleep = 2;
  dispatch_time_t v10 = dispatch_time(0LL, 5000000000LL);
  uint64_t v12 = im_primary_queue(v10, v11);
  id v13 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v12);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001B0010;
  block[3] = &unk_1008F6010;
  void block[4] = self;
  dispatch_after(v10, v13, block);
}

+ (id)daemon
{
  return +[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance");
}

+ (id)uTunDeliveryController
{
  return +[IDSUTunDeliveryController sharedInstance](&OBJC_CLASS___IDSUTunDeliveryController, "sharedInstance");
}

+ (id)messageStoreForDataProtectionClass:(unsigned int)a3
{
  return +[IDSDMessageStore sharedInstanceForDataProtectionClass:]( &OBJC_CLASS___IDSDMessageStore,  "sharedInstanceForDataProtectionClass:",  *(void *)&a3);
}

+ (id)serviceController
{
  return +[IDSDServiceController sharedInstance](&OBJC_CLASS___IDSDServiceController, "sharedInstance");
}

+ (id)accountController
{
  return +[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance");
}

+ (id)pairingManager
{
  return +[IDSPairingManager sharedInstance](&OBJC_CLASS___IDSPairingManager, "sharedInstance");
}

- (id)serviceController
{
  return +[IDSDServiceController sharedInstance](&OBJC_CLASS___IDSDServiceController, "sharedInstance");
}

- (id)daemonCapabilities
{
  return +[IDSDaemonCapabilities sharedInstance](&OBJC_CLASS___IDSDaemonCapabilities, "sharedInstance");
}

- (id)restrictions
{
  return +[IDSRestrictions sharedInstance](&OBJC_CLASS___IDSRestrictions, "sharedInstance");
}

- (id)opportunisticDeliveryController
{
  return self->_opportunisticDeliveryController;
}

- (id)uTunController
{
  return +[IDSUTunController sharedInstance](&OBJC_CLASS___IDSUTunController, "sharedInstance");
}

- (id)uTunDeliveryController
{
  return +[IDSUTunDeliveryController sharedInstance](&OBJC_CLASS___IDSUTunDeliveryController, "sharedInstance");
}

- (id)rapportDeliveryController
{
  return +[IDSRapportDeliveryController sharedInstance](&OBJC_CLASS___IDSRapportDeliveryController, "sharedInstance");
}

- (id)registrationController
{
  return +[IDSRegistrationController sharedInstance](&OBJC_CLASS___IDSRegistrationController, "sharedInstance");
}

- (id)accountController
{
  return +[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance");
}

- (id)signInResponder
{
  return self->_signInResponder;
}

- (id)deviceHeartbeatCenter
{
  return +[IDSDeviceHeartbeatCenter sharedInstance](&OBJC_CLASS___IDSDeviceHeartbeatCenter, "sharedInstance");
}

- (id)pairingManager
{
  return +[IDSPairingManager sharedInstance](&OBJC_CLASS___IDSPairingManager, "sharedInstance");
}

- (id)encryptionController
{
  return +[IDSEncryptionController sharedInstance](&OBJC_CLASS___IDSEncryptionController, "sharedInstance");
}

- (id)sessionController
{
  return +[IDSDSessionController sharedInstance](&OBJC_CLASS___IDSDSessionController, "sharedInstance");
}

- (id)currentDevice
{
  return +[IDSCurrentDevice sharedInstance](&OBJC_CLASS___IDSCurrentDevice, "sharedInstance");
}

- (id)daemonMIGInterface
{
  return +[IDSDaemonMIGInterface sharedInstance](&OBJC_CLASS___IDSDaemonMIGInterface, "sharedInstance");
}

- (id)daemonMIGQueryInterface
{
  return +[IDSDaemonMIGQueryInterface sharedInstance](&OBJC_CLASS___IDSDaemonMIGQueryInterface, "sharedInstance");
}

- (id)idStatusQueryController
{
  return +[IDSIDStatusQueryController sharedInstance](&OBJC_CLASS___IDSIDStatusQueryController, "sharedInstance");
}

- (id)messageStoreForDataProtectionClass:(unsigned int)a3
{
  return objc_msgSend((id)objc_opt_class(self, a2), "messageStoreForDataProtectionClass:", *(void *)&a3);
}

- (id)messageStoreMigrator
{
  return +[IDSDMessageStoreMigrator sharedInstance](&OBJC_CLASS___IDSDMessageStoreMigrator, "sharedInstance");
}

- (id)systemMonitor
{
  return +[IMSystemMonitor sharedInstance](&OBJC_CLASS___IMSystemMonitor, "sharedInstance");
}

- (id)registrationPushManager
{
  return +[IDSDRegistrationPushManager sharedInstance](&OBJC_CLASS___IDSDRegistrationPushManager, "sharedInstance");
}

- (id)centralRegListener
{
  return +[IDSDRegistrationListener sharedInstance](&OBJC_CLASS___IDSDRegistrationListener, "sharedInstance");
}

- (id)serverStorageStateMachine
{
  return +[IDSServerStorageStateMachine sharedInstance](&OBJC_CLASS___IDSServerStorageStateMachine, "sharedInstance");
}

- (id)daemonXPCInterface
{
  return +[IDSDaemonXPCInterface sharedInstance](&OBJC_CLASS___IDSDaemonXPCInterface, "sharedInstance");
}

- (id)pushHandlerForAPSDelegatePort
{
  return +[IDSPushHandler sharedInstanceWithPortName:]( &OBJC_CLASS___IDSPushHandler,  "sharedInstanceWithPortName:",  @"com.apple.identityservicesd.aps");
}

- (id)serverBagForBagType:(int64_t)a3
{
  return +[IDSServerBag sharedInstanceForBagType:](&OBJC_CLASS___IDSServerBag, "sharedInstanceForBagType:", a3);
}

- (id)activityStateMonitor
{
  return +[IDSActivityMonitorStateManager sharedInstance]( &OBJC_CLASS___IDSActivityMonitorStateManager,  "sharedInstance");
}

- (id)familyManager
{
  return +[IDSFamilyManager sharedInstance](&OBJC_CLASS___IDSFamilyManager, "sharedInstance");
}

- (id)firewallNotificationCenter
{
  return self->_firewallNotificationCenter;
}

- (id)persistenceManager
{
  return self->_persistenceManager;
}

- (id)senderKeyDistributionManager
{
  return self->_senderKeyDistributionManager;
}

- (void)_registerForDailyMetricReporting
{
  uint64_t v3 = OSLogHandleForIDSCategory("IDSDaemon");
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Registering for daily metric reporting.",  buf,  2u);
  }

  *(void *)__int128 buf = 0xAAAAAAAAAAAAAAAALL;
  objc_initWeak((id *)buf, self);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472LL;
  handler[2] = sub_100265290;
  handler[3] = &unk_1008FA018;
  objc_copyWeak(&v7, (id *)buf);
  xpc_activity_register("com.apple.ids.dailymetricreport", XPC_ACTIVITY_CHECK_IN, handler);
  objc_destroyWeak(&v7);
  objc_destroyWeak((id *)buf);
}

- (void)reportDailyMetrics
{
  uint64_t v2 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Reporting daily PNR status and daily account added notifications.",  v8,  2u);
  }

  if (os_log_shim_legacy_logging_enabled(v4) && _IDSShouldLog(0LL, @"IDSDaemon")) {
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Reporting daily PNR status and daily account added notifications.");
  }
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[IDSSMSRegistrationCenter sharedInstance](&OBJC_CLASS___IDSSMSRegistrationCenter, "sharedInstance"));
  [v5 reportDailyMetric];

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v6 postNotificationName:@"com.apple.ids.daemonDailyMetricNotification" object:0];

  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[IDSAppleIDNotificationCenter sharedInstance]( &OBJC_CLASS___IDSAppleIDNotificationCenter,  "sharedInstance"));
  [v7 reportDailyNotificationMetrics];
}

- (void)deliveryController:(id)a3 device:(id)a4 supportsDirectMessaging:(BOOL)a5 isObliterating:(BOOL)a6
{
  if (a6) {
    -[IDSDaemon notifyClients:](self, "notifyClients:", 2LL, a4, a5);
  }
}

- (void)writeIDSDirectMessageInfo:(_dmsg_info *)a3
{
  a3->var0 = 1;
  *(void *)&a3->var3 = 0x600000000000000LL;
}

- (id)copyDirectMessagingInfo
{
  uint64_t v3 = objc_alloc_init(&OBJC_CLASS___NSMutableData);
  v5[0] = 0LL;
  v5[1] = 0LL;
  -[IDSDaemon writeIDSDirectMessageInfo:](self, "writeIDSDirectMessageInfo:", v5);
  -[NSMutableData appendBytes:length:](v3, "appendBytes:length:", v5, 16LL);
  return v3;
}

- (void)processDirectMessagingCapability:(BOOL)a3
{
  if (_IDSSupportsDirectMessaging(self, a2) && !a3)
  {
    uint64_t v5 = OSLogHandleForIDSCategory("IDSDaemon-DM");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "direct messaging capability not supported by peer",  v8,  2u);
    }

    if (os_log_shim_legacy_logging_enabled(v7))
    {
      if (_IDSShouldLog(0LL, @"IDSDaemon-DM")) {
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon-DM",  @"direct messaging capability not supported by peer");
      }
    }

    -[IDSDaemon notifyClients:](self, "notifyClients:", 0LL);
  }

- (void)processDirectMessagingInfo:(id)a3
{
  id v4 = a3;
  if (_IDSSupportsDirectMessaging(v4, v5))
  {
    if ((unint64_t)[v4 length] > 0xF)
    {
      uint64_t v9 = OSLogHandleForIDSCategory("IDSDaemon-DM");
      dispatch_time_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "processing direct messaging info", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled(v11)
        && _IDSShouldLog(0LL, @"IDSDaemon-DM"))
      {
        _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon-DM", @"processing direct messaging info");
      }

      uint64_t v29 = 0LL;
      uint64_t v30 = 0LL;
      [v4 getBytes:&v29 length:16];
      uint64_t v27 = 0LL;
      uint64_t v28 = 0LL;
      -[IDSDaemon writeIDSDirectMessageInfo:](self, "writeIDSDirectMessageInfo:", &v27);
      else {
        uint64_t v12 = v29;
      }
      uint64_t v13 = (_DWORD)v12 != 0;
      uint64_t v14 = OSLogHandleForIDSCategory("IDSDaemon-DM");
      id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 67109632;
        *(_DWORD *)__int128 v32 = v12;
        *(_WORD *)&v32[4] = 1024;
        *(_DWORD *)&v32[6] = v27;
        LOWORD(v33) = 1024;
        *(_DWORD *)((char *)&v33 + 2) = v29;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "direct messaging info: resolved version %u (l:%u r:%u)",  buf,  0x14u);
      }

      if (os_log_shim_legacy_logging_enabled(v16)
        && _IDSShouldLog(0LL, @"IDSDaemon-DM"))
      {
        uint64_t v25 = v27;
        uint64_t v26 = v29;
        uint64_t v24 = v12;
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon-DM",  @"direct messaging info: resolved version %u (l:%u r:%u)");
      }

      char v17 = bswap64(v28 & v30);
      if ((v17 & 2) != 0)
      {
        uint64_t v18 = OSLogHandleForIDSCategory("IDSDaemon-DM");
        id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "direct messaging info: peer supports device connection",  buf,  2u);
        }

        v13 |= 4uLL;
        if (os_log_shim_legacy_logging_enabled(v20)
          && _IDSShouldLog(0LL, @"IDSDaemon-DM"))
        {
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon-DM",  @"direct messaging info: peer supports device connection");
        }
      }

      if ((v17 & 4) != 0)
      {
        uint64_t v21 = OSLogHandleForIDSCategory("IDSDaemon-DM");
        id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "direct messaging info: peer supports concise ACKs",  buf,  2u);
        }

        v13 |= 8uLL;
        if (os_log_shim_legacy_logging_enabled(v23)
          && _IDSShouldLog(0LL, @"IDSDaemon-DM"))
        {
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon-DM",  @"direct messaging info: peer supports concise ACKs");
        }
      }

      -[IDSDaemon notifyClients:](self, "notifyClients:", v13, v24, v25, v26);
    }

    else
    {
      uint64_t v6 = OSLogHandleForIDSCategory("IDSDaemon-DM");
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int128 buf = 134218240;
        *(void *)__int128 v32 = [v4 length];
        *(_WORD *)&v32[8] = 2048;
        uint64_t v33 = 16LL;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Invalid message size (%lu < %zu)", buf, 0x16u);
      }

      if (os_log_shim_legacy_logging_enabled(v8)
        && _IDSShouldLog(2LL, @"IDSDaemon-DM"))
      {
        [v4 length];
        _IDSLogV(2LL, @"IDSFoundation", @"IDSDaemon-DM", @"Invalid message size (%lu < %zu)");
      }
    }
  }
}

- (void)notifyClients:(unint64_t)a3
{
  if (_IDSSupportsDirectMessaging(self, a2) && qword_1009C07E8 != a3)
  {
    if ((a3 & 1) != 0)
    {
      pthread_mutex_lock(&self->_listenerLock);

      pthread_mutex_unlock(&self->_listenerLock);
    }

    if (dword_1009B7A90 == -1) {
      notify_register_check("com.apple.ids.direct-messaging", &dword_1009B7A90);
    }
    uint64_t v5 = OSLogHandleForIDSCategory("IDSDaemon-DM");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 134217984;
      unint64_t v9 = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "notifying clients with state: %llu",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v7))
    {
    }

    notify_set_state(dword_1009B7A90, a3);
    notify_post("com.apple.ids.direct-messaging");
    qword_1009C07E8 = a3;
  }

- (void)receivedDirectMsgSocketRequestForService:(id)a3 stream:(id)a4 flags:(unint64_t)a5
{
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = OSLogHandleForIDSCategory("IDSDaemon-DM");
  uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412290;
    id v16 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Received direct messaging connection for service: %@",  buf,  0xCu);
  }

  uint64_t v13 = os_log_shim_legacy_logging_enabled(v12);
  if ((_DWORD)v13)
  {
    uint64_t v13 = _IDSShouldLog(0LL, @"IDSDaemon-DM");
    if ((_DWORD)v13) {
      uint64_t v13 = _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon-DM",  @"Received direct messaging connection for service: %@");
    }
  }
}

- (id)_updateDirectMessagingMetadataForRemoteObject:(id)a3 shouldBroadcastForRemoteObject:(BOOL)a4
{
  BOOL v4 = a4;
  id v5 = a3;
  uint64_t v7 = _IDSSupportsDirectMessaging(v5, v6);
  if ((_DWORD)v7)
  {
    BOOL v55 = v4;
    id v56 = v5;
    im_assert_primary_base_queue(v7, v8);
    id v9 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDServiceController sharedInstance](&OBJC_CLASS___IDSDServiceController, "sharedInstance"));
    __int16 v57 = (void *)objc_claimAutoreleasedReturnValue([v9 allServicesStrings]);

    if (v57 && [v57 count])
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPairingManager sharedInstance](&OBJC_CLASS___IDSPairingManager, "sharedInstance"));
      id v54 = (void *)objc_claimAutoreleasedReturnValue([v10 pairedDeviceUniqueID]);

      if (v54)
      {
        unsigned __int8 v53 = -[NSUUID initWithUUIDString:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDString:", v54);
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v5 entitlements]);
        uint64_t v12 = kIDSMessagingEntitlement;
        if (([v11 hasEntitlement:kIDSMessagingEntitlement] & 1) != 0
          || ([v11 hasEntitlement:kIDSUrgentPriorityMessagingEntitlement] & 1) != 0
          || ([v11 hasEntitlement:kIDSHighPriorityMessagingEntitlement] & 1) != 0)
        {
          uint64_t v58 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
          __int128 v59 = 0u;
          __int128 v60 = 0u;
          __int128 v61 = 0u;
          __int128 v62 = 0u;
          id v13 = v57;
          id v14 = [v13 countByEnumeratingWithState:&v59 objects:v69 count:16];
          if (v14)
          {
            uint64_t v15 = *(void *)v60;
            do
            {
              for (i = 0LL; i != v14; i = (char *)i + 1)
              {
                if (*(void *)v60 != v15) {
                  objc_enumerationMutation(v13);
                }
                uint64_t v17 = *(void *)(*((void *)&v59 + 1) + 8LL * (void)i);
                if ([v11 hasService:v17 forEntitlement:v12])
                {
                  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDServiceController sharedInstance]( &OBJC_CLASS___IDSDServiceController,  "sharedInstance"));
                  id v19 = (void *)objc_claimAutoreleasedReturnValue([v18 serviceWithName:v17]);

                  if ([v19 allowWakingMessages]
                    && [v19 dataProtectionClass] != 1
                    && ([v19 shouldProtectTrafficUsingClassA] & 1) == 0)
                  {
                    -[NSMutableArray addObject:](v58, "addObject:", v17);
                  }
                }
              }

              id v14 = [v13 countByEnumeratingWithState:&v59 objects:v69 count:16];
            }

            while (v14);
          }

          if (-[NSMutableArray count](v58, "count"))
          {
            uint64_t v20 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
            uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(-[NSUUID UUIDString](v53, "UUIDString"));
            -[NSMutableDictionary setObject:forKeyedSubscript:]( v20,  "setObject:forKeyedSubscript:",  v21,  @"peerIDForDirectMsg");

            -[NSMutableDictionary setObject:forKeyedSubscript:]( v20,  "setObject:forKeyedSubscript:",  v58,  @"directMsgAllowedForServices");
            id v22 = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", getpid());
            uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
            -[NSMutableDictionary setObject:forKeyedSubscript:]( v20,  "setObject:forKeyedSubscript:",  v23,  @"pidForIDSD");

            uint64_t v24 = OSLogHandleForIDSCategory("IDSDaemon-DM");
            uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
            if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v56 localObject]);
              uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v26 processName]);
              *(_DWORD *)__int128 buf = 138412802;
              unsigned int v64 = v27;
              __int16 v65 = 2112;
              __int128 v66 = v20;
              __int16 v67 = 1024;
              BOOL v68 = v55;
              _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "completing setup info for %@ : %@, broadcast %d",  buf,  0x1Cu);
            }

            if (os_log_shim_legacy_logging_enabled(v28)
              && _IDSShouldLog(0LL, @"IDSDaemon-DM"))
            {
              uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v56 localObject]);
              __int16 v50 = (void *)objc_claimAutoreleasedReturnValue([v29 processName]);
              _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon-DM",  @"completing setup info for %@ : %@, broadcast %d");
            }

            if (!v55) {
              goto LABEL_51;
            }
            uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
            uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v56 localObject]);
            __int128 v32 = (void *)objc_claimAutoreleasedReturnValue([v30 broadcasterForLocalObject:v31 messageContext:0]);

            [v32 receivedMetadataForDirectMessaging:v20];
            goto LABEL_50;
          }

          uint64_t v39 = OSLogHandleForIDSCategory("IDSDaemon-DM");
          id v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
          if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
          {
            __int16 v41 = (void *)objc_claimAutoreleasedReturnValue([v56 localObject]);
            id v42 = (void *)objc_claimAutoreleasedReturnValue([v41 processName]);
            *(_DWORD *)__int128 buf = 138412290;
            unsigned int v64 = v42;
            _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEFAULT,  "No allowed services when processing %@",  buf,  0xCu);
          }

          if (!os_log_shim_legacy_logging_enabled(v43)
            || !_IDSShouldLog(0LL, @"IDSDaemon-DM"))
          {
            uint64_t v20 = 0LL;
LABEL_51:

LABEL_52:
            goto LABEL_53;
          }

          __int128 v32 = (void *)objc_claimAutoreleasedReturnValue([v56 localObject]);
          char v52 = (void *)objc_claimAutoreleasedReturnValue([v32 processName]);
          _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon-DM", @"No allowed services when processing %@");
        }

        else
        {
          uint64_t v44 = OSLogHandleForIDSCategory("IDSDaemon-DM");
          __int16 v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v44);
          if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
          {
            __int16 v46 = (void *)objc_claimAutoreleasedReturnValue([v5 localObject]);
            id v47 = (void *)objc_claimAutoreleasedReturnValue([v46 processName]);
            *(_DWORD *)__int128 buf = 138412290;
            unsigned int v64 = v47;
            _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEFAULT,  "No entitlements when processing %@",  buf,  0xCu);
          }

          if (!os_log_shim_legacy_logging_enabled(v48)
            || !_IDSShouldLog(0LL, @"IDSDaemon-DM"))
          {
            uint64_t v20 = 0LL;
            goto LABEL_52;
          }

          uint64_t v58 = (NSMutableArray *)objc_claimAutoreleasedReturnValue([v5 localObject]);
          __int128 v32 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableArray processName](v58, "processName"));
          _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon-DM", @"No entitlements when processing %@");
        }

        uint64_t v20 = 0LL;
LABEL_50:

        goto LABEL_51;
      }
    }

    else
    {
      uint64_t v33 = OSLogHandleForIDSCategory("IDSDaemon-DM");
      __int128 v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v35 = (void *)objc_claimAutoreleasedReturnValue([v5 localObject]);
        __int128 v36 = (void *)objc_claimAutoreleasedReturnValue([v35 processName]);
        *(_DWORD *)__int128 buf = 138412290;
        unsigned int v64 = v36;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "No services when processing %@", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled(v37)
        && _IDSShouldLog(0LL, @"IDSDaemon-DM"))
      {
        __int128 v38 = (void *)objc_claimAutoreleasedReturnValue([v5 localObject]);
        uint64_t v51 = (void *)objc_claimAutoreleasedReturnValue([v38 processName]);
        _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon-DM", @"No services when processing %@");
      }
    }

    uint64_t v20 = 0LL;
LABEL_53:
    id v5 = v56;
    goto LABEL_54;
  }

  uint64_t v20 = 0LL;
LABEL_54:

  return v20;
}

- (id)_copyDirectMessagingMetadataForRemoteObject:(id)a3
{
  id v4 = a3;
  if (_IDSSupportsDirectMessaging(v4, v5)) {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon _updateDirectMessagingMetadataForRemoteObject:shouldBroadcastForRemoteObject:]( self,  "_updateDirectMessagingMetadataForRemoteObject:shouldBroadcastForRemoteObject:",  v4,  0LL));
  }
  else {
    uint64_t v6 = 0LL;
  }

  return v6;
}

- (void)wakeClientForService:(id)a3 stream:(id)a4 flags:(unint64_t)a5
{
  id v7 = a3;
  id v8 = a4;
  if ((a5 & 0x40) != 0)
  {
    uint64_t v10 = (int *)&kIDSListenerCapConsumesLaunchOnDemandIncomingMessages;
LABEL_8:
    int v9 = *v10;
    goto LABEL_9;
  }

  if ((a5 & 0x20) != 0)
  {
    uint64_t v10 = (int *)&kIDSListenerCapConsumesLaunchOnDemandIncomingData;
    goto LABEL_8;
  }

  if ((a5 & 0x80) != 0) {
    int v9 = kIDSListenerCapConsumesLaunchOnDemandIncomingProtobuf;
  }
  else {
    int v9 = 0;
  }
LABEL_9:
  uint64_t v11 = 100LL;
  if ((a5 & 0x10) == 0) {
    uint64_t v11 = 200LL;
  }
  if ((a5 & 8) != 0) {
    uint64_t v12 = 300LL;
  }
  else {
    uint64_t v12 = v11;
  }
  id v13 = -[IDSIncomingMessageBroadcast initWithBroadcastBlock:needsClientAck:messageUUID:priority:senderID:sequenceNumber:]( objc_alloc(&OBJC_CLASS___IDSIncomingMessageBroadcast),  "initWithBroadcastBlock:needsClientAck:messageUUID:priority:senderID:sequenceNumber:",  0LL,  0LL,  @"65AC1229-66CB-4C74-BE47-F5342D60E37E",  v12,  @"65AC1229-66CB-4C74-BE47-F5342D60E37E",  1LL);
  xpc_object_t v14 = xpc_dictionary_create(0LL, 0LL, 0LL);
  id v30 = v8;
  xpc_object_t v15 = xpc_string_create((const char *)[v30 UTF8String]);
  IMInsertBoolsToXPCDictionary(v14, "xpc-object");
  uint64_t v31 = v15;
  xpc_dictionary_set_value(v14, "object", v15);
  id v16 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  CFDictionarySetValue((CFMutableDictionaryRef)v16, @"object-type", @"direct-messaging-socket-received");
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  a5,  1LL,  0LL));
  if (v17) {
    CFDictionarySetValue((CFMutableDictionaryRef)v16, @"object-flags", v17);
  }

  if (v7) {
    CFDictionarySetValue((CFMutableDictionaryRef)v16, @"object-recipient", v7);
  }
  id v29 = -[NSMutableDictionary copy](v16, "copy");
  IMInsertKeyedCodableObjectsToXPCDictionary(v14, "object-context");

  uint64_t v18 = OSLogHandleForIDSCategory("IDSDaemon-DM");
  id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412290;
    id v42 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "issuing connected socket to client %@",  buf,  0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v20) && _IDSShouldLog(0LL, @"IDSDaemon-DM"))
  {
    id v29 = v7;
    _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon-DM", @"issuing connected socket to client %@");
  }

  v39[0] = _NSConcreteStackBlock;
  v39[1] = 3221225472LL;
  v39[2] = sub_100272CB0;
  void v39[3] = &unk_1008FF208;
  id v40 = v14;
  id v21 = v14;
  id v22 = objc_retainBlock(v39);
  uint64_t v23 = objc_alloc_init(&OBJC_CLASS___IMMessageContext);
  -[IMMessageContext setShouldBoost:](v23, "setShouldBoost:", 1LL, v29, 0LL);
  uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDaemonPriorityQueueController sharedInstance]( &OBJC_CLASS___IDSDaemonPriorityQueueController,  "sharedInstance"));
  v33[0] = _NSConcreteStackBlock;
  v33[1] = 3221225472LL;
  v33[2] = sub_100272CBC;
  v33[3] = &unk_1008FF230;
  __int128 v36 = v23;
  id v37 = v22;
  v33[4] = self;
  __int128 v34 = v13;
  int v38 = v9;
  id v35 = v7;
  uint64_t v25 = v23;
  id v26 = v7;
  uint64_t v27 = v13;
  uint64_t v28 = v22;
  [v24 performBlockWithPriority:v33 priority:v12];
}

+ (BOOL)_canBulkMessageWithPriority:(int64_t)a3 adHocServiceType:(unsigned int)a4
{
  return a4 != 2 && a4 != 5 && a3 != 300;
}

+ (void)sendMessageWithIDSSendParameters:(id)a3 messageContext:(id)a4 threadContext:(id)a5 progressBlock:(id)a6 onObject:(id)a7
{
  id v11 = a3;
  id v12 = a4;
  id v13 = a5;
  id v14 = a6;
  id v15 = a7;
  state.opaque[1] = 0xAAAAAAAAAAAAAAAALL;
  __int128 v61 = _os_activity_create( (void *)&_mh_execute_header,  "Daemon sendMessage with parameters",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[0] = 0xAAAAAAAAAAAAAAAALL;
  os_activity_scope_enter(v61, &state);
  id v16 = (void *)objc_claimAutoreleasedReturnValue([v13 serviceIdentifier]);
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v13 servicePushTopic]);
  id v42 = (void *)objc_claimAutoreleasedReturnValue([v13 listenerID]);
  __int16 v46 = (void *)objc_claimAutoreleasedReturnValue([v13 entitlements]);
  id v18 = [v13 serviceAdHocType];
  __int16 v45 = (void *)objc_claimAutoreleasedReturnValue([v13 accountDescription]);
  id v19 = (void *)objc_claimAutoreleasedReturnValue([v13 subService]);
  if ([v19 length]) {
    uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue([v13 subService]);
  }
  else {
    uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue([v13 serviceIdentifier]);
  }

  unsigned __int8 v41 = [v13 silentlyFailMessagesOnSwitch];
  if ([a1 entitlementDictionary:v46 isEntitledToAccessService:v16 forEntitlement:kIDSMessagingEntitlement forAccount:v45 shouldWarn:0])
  {
    if ([a1 entitlementDictionary:v46 isEntitledToAccessService:v16 forEntitlement:kIDSBypassSizeCheckEntitlement forAccount:v45 shouldWarn:0]) {
      [v11 setBypassSizeCheck:1];
    }
    id v39 = [v11 priority];
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(+[IDSTrafficMonitor sharedInstance](&OBJC_CLASS___IDSTrafficMonitor, "sharedInstance"));
    unsigned __int8 v21 = [v20 noteOutgoingMessageForService:v44 serviceType:v18 requestor:v42];

    if ((v21 & 1) != 0)
    {
      unsigned int v22 = [v11 homeKitPayload];
      [v11 setEncryptPayload:1];
      if (v22)
      {
        [v11 setCompressPayload:0];
        [v11 setEncryptPayload:0];
      }

      if ([v11 forceEncryptionOff]
        && [v16 isEqualToString:@"com.apple.private.alloy.keychainsync"]
        && [a1 entitlementDictionary:v46 isEntitledToAccessService:v16 forEntitlement:kIDSForceEncryptionOffEntitlement forAccount:v45 shouldWarn:0])
      {
        uint64_t v23 = OSLogHandleForIDSCategory("IDSDaemon");
        uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 138412290;
          id v63 = v16;
          _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "Forcing encryption off for message on %@",  buf,  0xCu);
        }

        if (os_log_shim_legacy_logging_enabled(v25)
          && _IDSShouldLog(0LL, @"IDSDaemon"))
        {
          __int128 v36 = v16;
          _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon", @"Forcing encryption off for message on %@");
        }

        objc_msgSend(v11, "setEncryptPayload:", 0, v36);
      }

      [v12 setShouldBoost:v39 == (id)300];
      id v26 = (void *)objc_claimAutoreleasedReturnValue([v11 requireAllRegistrationProperties]);
      int v38 = v16;
      if (v26
        || (id v26 = (void *)objc_claimAutoreleasedReturnValue([v11 interestingRegistrationProperties])) != 0)
      {
      }

      else
      {
        __int128 v34 = (void *)objc_claimAutoreleasedReturnValue([v11 requireLackOfRegistrationProperties]);
        BOOL v35 = v34 == 0LL;

        if (v35)
        {
          uint64_t v27 = v17;
          uint64_t v28 = v15;
          id v29 = v14;
          id v30 = v12;
          id v40 = 0LL;
          goto LABEL_25;
        }
      }

      v57[0] = _NSConcreteStackBlock;
      v57[1] = 3221225472LL;
      v57[2] = sub_10034D3F0;
      v57[3] = &unk_100901CC8;
      id v58 = v11;
      id v59 = v12;
      id v40 = objc_retainBlock(v57);

      uint64_t v27 = v17;
      uint64_t v28 = v15;
      id v29 = v14;
      id v30 = v12;
LABEL_25:
      v47[0] = _NSConcreteStackBlock;
      v47[1] = 3221225472LL;
      v47[2] = sub_10034D78C;
      v47[3] = &unk_100901CF0;
      id v37 =  _os_activity_create( (void *)&_mh_execute_header,  "Send message with send parameters",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
      uint64_t v48 = v37;
      id v49 = v11;
      id v50 = v30;
      unsigned __int8 v56 = v41;
      id v51 = v44;
      id v52 = v13;
      id v55 = a1;
      id v53 = v28;
      id v54 = v27;
      [a1 _sendMessageWithSendParameters:v49 threadContext:v52 onObject:v53 willSendBlock:v40 progressBlock:v29 completionBlock:v47];

      id v12 = v30;
      id v14 = v29;
      id v15 = v28;
      uint64_t v17 = v27;
      id v16 = v38;

      goto LABEL_30;
    }

    uint64_t v31 = OSLogHandleForIDSCategory("Warning");
    __int128 v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v63 = v44;
      _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_ERROR,  "*** Over budget, failing sendMessage on service: %@",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v33))
    {
      _IDSWarnV(@"IDSFoundation", @"*** Over budget, failing sendMessage on service: %@");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"*** Over budget, failing sendMessage on service: %@");
      _IDSLogTransport(@"Warning", @"IDS", @"*** Over budget, failing sendMessage on service: %@");
    }
  }

+ (void)_forwardSendMessageToAccountWithSendParameters:(id)a3 service:(id)a4 threadContext:(id)a5 guid:(id)a6 dataProtectionClass:(unsigned int)a7 willSendBlock:(id)a8 progressBlock:(id)a9 completionBlock:(id)a10
{
  id v14 = a3;
  id v15 = a4;
  id v41 = a5;
  id v16 = a6;
  id v42 = a8;
  id v17 = a9;
  id v18 = a10;
  id v19 = (void *)objc_claimAutoreleasedReturnValue([v14 data]);

  if (v19)
  {
    uint64_t v20 = OSLogHandleForIDSCategory("IDSDaemon");
    unsigned __int8 v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
    {
      id v39 = v15;
      id v22 = (id)objc_claimAutoreleasedReturnValue([v14 accountUUID]);
      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v14 data]);
      unsigned int v24 = [v23 length];
      id v25 = (id)objc_claimAutoreleasedReturnValue([v14 destinations]);
      id v26 = (void *)objc_claimAutoreleasedReturnValue([v14 identifier]);
      *(_DWORD *)__int128 buf = 138413314;
      id v49 = v22;
      __int16 v50 = 1024;
      *(_DWORD *)id v51 = v24;
      *(_WORD *)&v51[4] = 2112;
      *(void *)&v51[6] = v25;
      *(_WORD *)&v51[14] = 2112;
      *(void *)&v51[16] = v26;
      *(_WORD *)&v51[24] = 2112;
      *(void *)&v51[26] = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEBUG,  "account %@ sendMessage with data size: %d to: %@ identifier: %@ guid: %@",  buf,  0x30u);

      id v15 = v39;
    }

    if (os_log_shim_legacy_logging_enabled(v27) && _IDSShouldLog(1LL, @"IDSDaemon"))
    {
      uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v14 accountUUID]);
      id v29 = (void *)objc_claimAutoreleasedReturnValue([v14 data]);
      [v29 length];
      id v30 = (void *)objc_claimAutoreleasedReturnValue([v14 destinations]);
      uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v14 identifier]);
      _IDSLogV( 1LL,  @"IDSFoundation",  @"IDSDaemon",  @"account %@ sendMessage with data size: %d to: %@ identifier: %@ guid: %@");
LABEL_12:
    }
  }

  else
  {
    uint64_t v32 = OSLogHandleForIDSCategory("IDSDaemon");
    uint64_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
    {
      id v34 = (id)objc_claimAutoreleasedReturnValue([v14 accountUUID]);
      id v35 = (id)objc_claimAutoreleasedReturnValue([v14 message]);
      id v36 = (id)objc_claimAutoreleasedReturnValue([v14 destinations]);
      id v37 = (void *)objc_claimAutoreleasedReturnValue([v14 identifier]);
      *(_DWORD *)__int128 buf = 138413314;
      id v49 = v34;
      __int16 v50 = 2112;
      *(void *)id v51 = v35;
      *(_WORD *)&v51[8] = 2112;
      *(void *)&v51[10] = v36;
      *(_WORD *)&v51[18] = 2112;
      *(void *)&v51[20] = v37;
      *(_WORD *)&v51[28] = 2112;
      *(void *)&v51[30] = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEBUG,  "account %@ sendMessage: %@ to: %@ identifier: %@ guid: %@",  buf,  0x34u);
    }

    if (os_log_shim_legacy_logging_enabled(v38) && _IDSShouldLog(1LL, @"IDSDaemon"))
    {
      uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v14 accountUUID]);
      id v29 = (void *)objc_claimAutoreleasedReturnValue([v14 message]);
      id v30 = (void *)objc_claimAutoreleasedReturnValue([v14 destinations]);
      uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v14 identifier]);
      _IDSLogV( 1LL,  @"IDSFoundation",  @"IDSDaemon",  @"account %@ sendMessage: %@ to: %@ identifier: %@ guid: %@");
      goto LABEL_12;
    }
  }

  v43[0] = _NSConcreteStackBlock;
  v43[1] = 3221225472LL;
  v43[2] = sub_10034EB68;
  v43[3] = &unk_100901D18;
  id v46 = v18;
  id v44 = v16;
  id v45 = v14;
  unsigned int v47 = a7;
  +[IDSDAccount sendMessageWithSendParameters:service:threadContext:willSendBlock:progressBlock:completionBlock:]( &OBJC_CLASS___IDSDAccount,  "sendMessageWithSendParameters:service:threadContext:willSendBlock:progressBlock:completionBlock:",  v45,  v15,  v41,  v42,  v17,  v43);
}

+ (void)_sendMessageWithSendParameters:(id)a3 threadContext:(id)a4 onObject:(id)a5 willSendBlock:(id)a6 progressBlock:(id)a7 completionBlock:(id)a8
{
  id v13 = a3;
  id v14 = a4;
  id v299 = a5;
  id v300 = a6;
  id v301 = a7;
  v308 = (void (**)(id, IDSDeliveryContext *))a8;
  id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 subService]);
  if ([v15 length]) {
    id v16 = (void *)objc_claimAutoreleasedReturnValue([v14 subService]);
  }
  else {
    id v16 = (void *)objc_claimAutoreleasedReturnValue([v14 serviceIdentifier]);
  }
  v307 = v16;

  v305 = (void *)objc_claimAutoreleasedReturnValue([v13 subService]);
  v302 = (void *)objc_claimAutoreleasedReturnValue([v14 serviceDuetIdentifiers]);
  id v17 = [v14 serviceIsDSBased];
  v303 = (void *)objc_claimAutoreleasedReturnValue([v14 primaryRegistrationDSHandle]);
  id v18 = [v14 serviceAdHocType];
  v304 = (void *)objc_claimAutoreleasedReturnValue([v14 aliasStrings]);
  unsigned int v296 = [v14 dataProtectionClass];
  unsigned __int8 v19 = [v14 isRegistrationActive];
  char v20 = [v14 shouldProtectTrafficUsingClassA];
  int v21 = [v14 dataProtectionClass];
  id v22 = (void *)objc_claimAutoreleasedReturnValue([v14 serviceIdentifier]);
  int v23 = sub_100351824(v20, v21, v22);

  if ((v19 & 1) != 0)
  {
    int v289 = v23;
    if (!v23
      || (unsigned int v24 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPairingManager sharedInstance](&OBJC_CLASS___IDSPairingManager, "sharedInstance")),
          id v25 = (void *)objc_claimAutoreleasedReturnValue([v24 pairedDeviceUniqueID]),
          unsigned __int8 v26 = +[IDSEncryptionHelpers areDataProtectionKeysAvailableForService:withDataProtectionClass:fromDevice:]( &OBJC_CLASS___IDSEncryptionHelpers,  "areDataProtectionKeysAvailableForService:withDataProtectionClass:fromDevice:",  v307,  1LL,  v25),  v25,  v24,  (v26 & 1) != 0))
    {
      v295 = (void *)objc_claimAutoreleasedReturnValue([v13 fromID]);
      if (([v13 disableAliasValidation] & 1) == 0)
      {
        v298 = v295;
        v293 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString _stripFZIDPrefix](v298, "_stripFZIDPrefix"));

        __int128 v327 = 0u;
        __int128 v328 = 0u;
        __int128 v325 = 0u;
        __int128 v326 = 0u;
        uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v13 destinations]);
        uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v27 destinationURIs]);

        id v29 = [v28 countByEnumeratingWithState:&v325 objects:v349 count:16];
        if (v29)
        {
          uint64_t v30 = *(void *)v326;
          while (2)
          {
            for (i = 0LL; i != v29; i = (char *)i + 1)
            {
              if (*(void *)v326 != v30) {
                objc_enumerationMutation(v28);
              }
              uint64_t v32 = *(__CFString **)(*((void *)&v325 + 1) + 8LL * (void)i);
              if (-[__CFString hasSuffix:](v32, "hasSuffix:", @"inbox.appleid.apple.com"))
              {
                id v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMIDSLog daemon](&OBJC_CLASS___IMIDSLog, "daemon"));
                if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v43 = (__CFString *)(id)objc_claimAutoreleasedReturnValue([v13 messageUUID]);
                  id v44 = (__CFString *)(id)objc_claimAutoreleasedReturnValue([v13 destinations]);
                  *(_DWORD *)__int128 buf = 138412802;
                  v332 = v32;
                  __int16 v333 = 2114;
                  v334 = v43;
                  __int16 v335 = 2112;
                  v336 = v44;
                  _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEFAULT,  "At least one destination is mako {destinationURI: %@, guid: %{public}@, destinations: %@}",  buf,  0x20u);
                }

                uint64_t v33 = 1LL;
                goto LABEL_27;
              }
            }

            id v29 = [v28 countByEnumeratingWithState:&v325 objects:v349 count:16];
            if (v29) {
              continue;
            }
            break;
          }
        }

        uint64_t v33 = 0LL;
LABEL_27:

        v297 = (void *)objc_claimAutoreleasedReturnValue([v303 _stripFZIDPrefix]);
        uint64_t v45 = _IDSPrefersPhoneNumbersForServiceIdentifier(v307);
        id v46 = (void *)objc_claimAutoreleasedReturnValue([v14 pseudonyms]);
        v295 = (void *)_IDSCopyCallerIDWithSelfMessagingHint(v293, v304, v46, v297, v17, v45, v33);

        [v13 setFromID:v295];
        v294 = (IDSURI *)objc_claimAutoreleasedReturnValue([v295 _bestGuessURI]);
        if (v298 && v294 && (-[IDSURI isEqualToString:](v294, "isEqualToString:", v298) & 1) == 0)
        {
          uint64_t v73 = OSLogHandleForIDSCategory("Warning");
          id v74 = (os_log_s *)objc_claimAutoreleasedReturnValue(v73);
          if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__int128 buf = 138412546;
            v332 = v298;
            __int16 v333 = 2112;
            v334 = (const __CFString *)v294;
            _os_log_impl( (void *)&_mh_execute_header,  v74,  OS_LOG_TYPE_ERROR,  "sendMessage - fromID (%@) does not match the account (%@). We are forced to fail this message send.",  buf,  0x16u);
          }

          if (os_log_shim_legacy_logging_enabled(v75))
          {
            _IDSWarnV( @"IDSFoundation",  @"sendMessage - fromID (%@) does not match the account (%@). We are forced to fail this message send.");
            _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"sendMessage - fromID (%@) does not match the account (%@). We are forced to fail this message send.");
            _IDSLogTransport( @"Warning",  @"IDS",  @"sendMessage - fromID (%@) does not match the account (%@). We are forced to fail this message send.");
          }

          if (!v308) {
            goto LABEL_318;
          }
          uint64_t v76 = objc_alloc(&OBJC_CLASS___NSError);
          v291 = -[NSError initWithDomain:code:userInfo:]( v76,  "initWithDomain:code:userInfo:",  IDSSendErrorDomain,  7LL,  0LL);
          v292 = -[IDSDeliveryContext initWithResponseCode:error:lastCall:]( objc_alloc(&OBJC_CLASS___IDSDeliveryContext),  "initWithResponseCode:error:lastCall:",  7LL,  v291,  1LL);
          v308[2](v308, v292);
LABEL_317:

LABEL_318:
          goto LABEL_319;
        }
      }

      if ([v305 length])
      {
        v298 = v305;
      }

      else
      {
        v298 = (__CFString *)(id)objc_claimAutoreleasedReturnValue([v14 servicePushTopic]);
      }

      unsigned int v47 = (void *)objc_claimAutoreleasedReturnValue([a1 serviceController]);
      v297 = (void *)objc_claimAutoreleasedReturnValue([v47 serviceWithPushTopic:v298]);

      uint64_t v48 = objc_alloc(&OBJC_CLASS___IDSURI);
      id v49 = (void *)objc_claimAutoreleasedReturnValue([v13 fromID]);
      __int16 v50 = (void *)objc_claimAutoreleasedReturnValue([v49 _bestGuessURI]);
      v294 = -[IDSURI initWithPrefixedURI:](v48, "initWithPrefixedURI:", v50);

      if ([v297 supportsOfflineDelivery])
      {
        id v51 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPeerIDManager sharedInstance](&OBJC_CLASS___IDSPeerIDManager, "sharedInstance"));
        id v52 = (void *)objc_claimAutoreleasedReturnValue([v51 shortHandleForURI:v294 fromURI:v294]);
        [v13 setFromShortHandle:v52];
      }

      id v53 = (id)objc_claimAutoreleasedReturnValue([v13 destinations]);
      id v54 = (void *)objc_claimAutoreleasedReturnValue([v53 destinationURIs]);
      uint64_t v55 = kIDSServiceDefaultsSentinelSelfAlias;
      unsigned int v56 = [v54 containsObject:kIDSServiceDefaultsSentinelSelfAlias];

      if (v56)
      {
        __int16 v57 = (void *)objc_claimAutoreleasedReturnValue([v13 destinations]);
        id v58 = (void *)objc_claimAutoreleasedReturnValue([v57 destinationURIs]);
        id v53 = [v58 mutableCopy];

        [v53 removeObject:v55];
        if (v303) {
          [v53 addObject:v303];
        }
        id v59 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDestination destinationWithStrings:]( &OBJC_CLASS___IDSDestination,  "destinationWithStrings:",  v53));
        [v13 setDestinations:v59];
      }

      uint64_t v60 = OSLogHandleForTransportCategory("IDSDaemon");
      __int128 v61 = (os_log_s *)objc_claimAutoreleasedReturnValue(v60);
      if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
      {
        if ([v13 priority] == (id)300)
        {
          __int128 v62 = @"URGENT";
        }

        else if ([v13 priority] == (id)200)
        {
          __int128 v62 = @"Default";
        }

        else
        {
          __int128 v62 = @"Sync";
        }

        id v63 = (__CFString *)(id)objc_claimAutoreleasedReturnValue([v13 identifier]);
        unsigned int v64 = (__CFString *)(id)objc_claimAutoreleasedReturnValue([v13 messageType]);
        id v53 = (id)objc_claimAutoreleasedReturnValue([v13 destinations]);
        uint64_t v65 = IMLoggingStringForArray(v304);
        id v66 = (id)objc_claimAutoreleasedReturnValue(v65);
        qos_class_t v67 = qos_class_self();
        *(_DWORD *)__int128 buf = 138545410;
        BOOL v68 = @"not local type";
        BOOL v69 = (_DWORD)v18 == 5 || (_DWORD)v18 == 2;
        v332 = v62;
        __int16 v333 = 2114;
        if (v69) {
          BOOL v68 = @"adhoc type 2";
        }
        v334 = v63;
        __int16 v335 = 2112;
        v336 = v64;
        __int16 v337 = 2112;
        v338 = v307;
        __int16 v339 = 2112;
        id v340 = v53;
        __int16 v341 = 2112;
        v342 = v295;
        __int16 v343 = 2112;
        id v344 = v66;
        __int16 v345 = 2114;
        v346 = v68;
        __int16 v347 = 1024;
        qos_class_t v348 = v67;
        _os_log_impl( (void *)&_mh_execute_header,  v61,  OS_LOG_TYPE_DEFAULT,  "Daemon sending message with priority %{public}@ guid: %{public}@ messageType: %@, serviceIdentifier: %@ to: %@ from: %@   aliases: %@  service type: %{public}@   QoS=0x%x",  buf,  0x58u);
      }

      uint64_t v71 = os_log_shim_legacy_logging_enabled(v70);
      if ((_DWORD)v71 && _IDSShouldLogTransport(v71))
      {
        if ([v13 priority] == (id)300) {
          uint64_t v72 = @"URGENT";
        }
        else {
          uint64_t v72 = [v13 priority] == (id)200 ? @"Default" : @"Sync";
        }
        __int16 v77 = (void *)objc_claimAutoreleasedReturnValue([v13 identifier]);
        id v53 = (id)objc_claimAutoreleasedReturnValue([v13 messageType]);
        int v78 = (void *)objc_claimAutoreleasedReturnValue([v13 destinations]);
        uint64_t v79 = IMLoggingStringForArray(v304);
        unsigned __int8 v80 = (void *)objc_claimAutoreleasedReturnValue(v79);
        BOOL v81 = (_DWORD)v18 == 5 || (_DWORD)v18 == 2;
        __int128 v82 = v81 ? @"adhoc type 2" : @"not local type";
        v280 = v82;
        uint64_t v281 = qos_class_self();
        v255 = v72;
        v268 = v77;
        v278 = v295;
        v279 = v80;
        v275 = v307;
        v277 = v78;
        id v272 = v53;
        _IDSLogTransport( @"IDSDaemon",  @"IDS",  @"Daemon sending message with priority %{public}@ guid: %{public}@ messageType: %@, serviceIdentifier: %@ to: %@   from: %@   aliases: %@  service type: %{public}@   QoS=0x%x");

        if (_IDSShouldLog(0LL, @"IDSDaemon"))
        {
          if (objc_msgSend(v13, "priority", v72, v77, v53, v307, v78, v295, v80, v82, v281) == (id)300)
          {
            __int128 v83 = @"URGENT";
          }

          else if ([v13 priority] == (id)200)
          {
            __int128 v83 = @"Default";
          }

          else
          {
            __int128 v83 = @"Sync";
          }

          id v84 = (void *)objc_claimAutoreleasedReturnValue([v13 identifier]);
          id v53 = (id)objc_claimAutoreleasedReturnValue([v13 messageType]);
          v85 = (void *)objc_claimAutoreleasedReturnValue([v13 destinations]);
          uint64_t v86 = IMLoggingStringForArray(v304);
          id v87 = (void *)objc_claimAutoreleasedReturnValue(v86);
          v280 = v82;
          uint64_t v281 = qos_class_self();
          v278 = v295;
          v279 = v87;
          v275 = v307;
          v277 = v85;
          v268 = v84;
          id v272 = v53;
          v255 = (__CFString *)v83;
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Daemon sending message with priority %{public}@ guid: %{public}@ messageType: %@, serviceIdentifier: %@ to: %@   from: %@   aliases: %@  service type: %{public}@   QoS=0x%x");
        }
      }

      id v88 = (void *)objc_claimAutoreleasedReturnValue([v13 command]);
      BOOL v89 = v88 == 0LL;

      if (v89)
      {
        uint64_t v90 = (void *)objc_claimAutoreleasedReturnValue([v13 protobuf]);

        if (v90)
        {
          __int16 v91 = &off_100947A70;
        }

        else
        {
          id v92 = (void *)objc_claimAutoreleasedReturnValue([v13 data]);

          if (v92) {
            __int16 v91 = &off_100947A88;
          }
          else {
            __int16 v91 = &off_100947AA0;
          }
        }

        [v13 setCommand:v91];
      }

      BOOL v93 = (_DWORD)v18 == 2;
      if ((_DWORD)v18 == 5) {
        BOOL v93 = 1;
      }
      BOOL v287 = v93;
      if ((_DWORD)v18 == 5 || (_DWORD)v18 == 2)
      {
        id v53 = (id)objc_claimAutoreleasedReturnValue([a1 uTunDeliveryController]);
        unsigned int v94 = [v53 localSetupInProgress];
      }

      else
      {
        unsigned int v94 = 0;
      }

      if ((_DWORD)v18 == 5 || (_DWORD)v18 == 2) {

      }
      if (v94) {
        [v13 setBypassDuet:1];
      }
      if ([a1 _shouldReplaceLocalDestination:v14])
      {
        uint64_t v95 = OSLogHandleForIDSCategory("IDSDaemon");
        id v96 = (os_log_s *)objc_claimAutoreleasedReturnValue(v95);
        if (os_log_type_enabled(v96, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v96,  OS_LOG_TYPE_DEFAULT,  "Proxy outgoing message, setting current paired device as local destination",  buf,  2u);
        }

        if (os_log_shim_legacy_logging_enabled(v97)
          && _IDSShouldLog(0LL, @"IDSDaemon"))
        {
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Proxy outgoing message, setting current paired device as local destination");
        }

        id v98 = (void *)objc_claimAutoreleasedReturnValue([a1 pairingManager]);
        id v99 = (void *)objc_claimAutoreleasedReturnValue([v98 pairedDeviceUniqueID]);
        [v13 setLocalDestinationDeviceUUID:v99];
      }

      id v100 = (void *)objc_claimAutoreleasedReturnValue([v13 localDestinationDeviceUUID]);
      id v101 = [v100 length];

      if (((_DWORD)v18 == 5 || (_DWORD)v18 == 2) && !v101)
      {
        __int16 v102 = (void *)objc_claimAutoreleasedReturnValue([v13 destinations]);
        id v103 = (void *)objc_claimAutoreleasedReturnValue([v102 destinationURIs]);
        id v104 = (void *)objc_claimAutoreleasedReturnValue([v103 allObjects]);
        id v105 = (void *)objc_claimAutoreleasedReturnValue([v104 firstObject]);
        id v324 = 0LL;
        v292 = (IDSDeliveryContext *)objc_claimAutoreleasedReturnValue([v105 _stripPotentialTokenURIWithToken:&v324]);
        v291 = (NSError *)v324;

        id v106 = (void *)objc_claimAutoreleasedReturnValue([v13 destinations]);
        id v107 = (void *)objc_claimAutoreleasedReturnValue([v106 destinationURIs]);
        id v108 = (void *)objc_claimAutoreleasedReturnValue([v107 allObjects]);
        id v109 = (void *)objc_claimAutoreleasedReturnValue([v108 firstObject]);
        unsigned int v110 = [v109 isEqualToIgnoringCase:IDSDefaultPairedDevice];

        id v111 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPairingManager sharedInstance](&OBJC_CLASS___IDSPairingManager, "sharedInstance"));
        LODWORD(v106) = [v111 activePairedDeviceHasPairingType:1];

        if (((v110 & v106 ^ 1 | [v14 serviceWantsTinkerDevices]) & 1) == 0)
        {
          uint64_t v114 = OSLogHandleForIDSCategory("Warning");
          NSErrorUserInfoKey v115 = (os_log_s *)objc_claimAutoreleasedReturnValue(v114);
          if (os_log_type_enabled(v115, OS_LOG_TYPE_ERROR))
          {
            __int128 v116 = (__CFString *)(id)objc_claimAutoreleasedReturnValue([v13 messageUUID]);
            *(_DWORD *)__int128 buf = 138412546;
            v332 = v116;
            __int16 v333 = 2112;
            v334 = v307;
            _os_log_impl( (void *)&_mh_execute_header,  v115,  OS_LOG_TYPE_ERROR,  "sendMessage - sending to tinker IDSDefaultPairedDevice. Failing message... { guid: %@, service: %@ }",  buf,  0x16u);
          }

          if (os_log_shim_legacy_logging_enabled(v117))
          {
            v260 = (void *)objc_claimAutoreleasedReturnValue([v13 messageUUID]);
            _IDSWarnV( @"IDSFoundation",  @"sendMessage - sending to tinker IDSDefaultPairedDevice. Failing message... { guid: %@, service: %@ }");

            v261 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "messageUUID", v260, v307));
            _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"sendMessage - sending to tinker IDSDefaultPairedDevice. Failing message... { guid: %@, service: %@ }");

            v262 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "messageUUID", v261, v307));
            _IDSLogTransport( @"Warning",  @"IDS",  @"sendMessage - sending to tinker IDSDefaultPairedDevice. Failing message... { guid: %@, service: %@ }");
          }

          if (!v308) {
            goto LABEL_317;
          }
          __int128 v118 = objc_alloc(&OBJC_CLASS___NSError);
          NSErrorUserInfoKey v329 = NSDebugDescriptionErrorKey;
          v330 = @"Default paired watch is Tinker, but sending service is not Tinker aware. If you need to send locally to a Tinker watch, please contact IDS Engineering to have your service reconfigured";
          __int128 v119 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v330,  &v329,  1LL));
          v290 = -[NSError initWithDomain:code:userInfo:]( v118,  "initWithDomain:code:userInfo:",  IDSSendErrorDomain,  32LL,  v119);

          id v120 = -[IDSDeliveryContext initWithResponseCode:error:lastCall:]( objc_alloc(&OBJC_CLASS___IDSDeliveryContext),  "initWithResponseCode:error:lastCall:",  32LL,  v290,  1LL);
          v308[2](v308, v120);
          goto LABEL_316;
        }

        if ((v110 & 1) != 0
          || -[IDSDeliveryContext isEqualToIgnoringCase:]( v292,  "isEqualToIgnoringCase:",  IDSLocalDeviceIdentity))
        {
          id v112 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPairingManager sharedInstance](&OBJC_CLASS___IDSPairingManager, "sharedInstance"));
          uint64_t v113 = objc_claimAutoreleasedReturnValue([v112 pairedDeviceUniqueID]);
        }

        else
        {
          __int16 v121 = (void *)objc_claimAutoreleasedReturnValue([v13 destinations]);
          v122 = (void *)objc_claimAutoreleasedReturnValue([v121 destinationURIs]);
          __int16 v123 = (void *)objc_claimAutoreleasedReturnValue([v122 allObjects]);
          id v112 = (void *)objc_claimAutoreleasedReturnValue([v123 firstObject]);

          uint64_t v113 = objc_claimAutoreleasedReturnValue([v112 _stripFZIDPrefix]);
        }

        id v124 = (void *)v113;
        [v13 setLocalDestinationDeviceUUID:v113];
      }

      if ([v13 liveMessageDelivery]
        && ([v14 serviceAllowLiveMessageDelivery] & 1) != 0)
      {
        uint64_t v125 = 7LL;
      }

      else if ((_DWORD)v18 == 5 || (_DWORD)v18 == 2)
      {
        if ((([v13 allowCloudDelivery] & 1) != 0
           || [v13 nonCloudWaking])
          && ([v14 shouldAllowCloudDelivery] & 1) != 0)
        {
          uint64_t v125 = 6LL;
        }

        else if ([v14 serviceAllowProxyDelivery])
        {
          uint64_t v125 = 2LL;
        }

        else
        {
          uint64_t v125 = 4LL;
        }
      }

      else if ([v14 serviceAllowLocalDelivery] {
             && [v14 serviceAdHocType] == 1)
      }
      {
        uint64_t v125 = 5LL;
      }

      else
      {
        uint64_t v125 = 1LL;
      }

      int v126 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", v125));
      [v13 setMessageType:v126];

      if ([v13 priority] == (id)300)
      {
        int v126 = (void *)objc_claimAutoreleasedReturnValue([v13 messageType]);
        BOOL v127 = [v126 integerValue] == (id)1;

        if (v127
          || (int v126 = (void *)objc_claimAutoreleasedReturnValue([a1 accountController]),
              id v128 = (void *)objc_claimAutoreleasedReturnValue([v13 accountUUID]),
              __int16 v129 = (void *)objc_claimAutoreleasedReturnValue([v126 accountWithUniqueID:v128]),
              BOOL v130 = [v129 accountType] == 2,
              v129,
              v128,
              v126,
              !v130))
        {
          [v13 setBypassStorage:1];
        }
      }

      if (objc_msgSend( a1,  "_canBulkMessageWithPriority:adHocServiceType:",  objc_msgSend(v13, "priority"),  v18))
      {
        v291 = 0LL;
      }

      else
      {
        v291 = (NSError *)(id)objc_claimAutoreleasedReturnValue([v13 identifier]);
      }

      v292 = (IDSDeliveryContext *)objc_claimAutoreleasedReturnValue([a1 messageStoreForDataProtectionClass:v296]);
      if (!v292)
      {
        uint64_t v131 = OSLogHandleForIDSCategory("IDSDaemon");
        uint64_t v132 = (os_log_s *)objc_claimAutoreleasedReturnValue(v131);
        if (os_log_type_enabled(v132, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v133 = IDSDataProtectionClassStringFromDataProtectionClass(v296);
          v134 = (__CFString *)(id)objc_claimAutoreleasedReturnValue(v133);
          *(_DWORD *)__int128 buf = 138412546;
          v332 = v134;
          __int16 v333 = 2112;
          v334 = v307;
          _os_log_impl( (void *)&_mh_execute_header,  v132,  OS_LOG_TYPE_DEFAULT,  "Didn't find message store for data protection class %@ for %@",  buf,  0x16u);
        }

        if (os_log_shim_legacy_logging_enabled(v135)
          && _IDSShouldLog(0LL, @"IDSDaemon"))
        {
          uint64_t v136 = IDSDataProtectionClassStringFromDataProtectionClass(v296);
          v263 = (void *)objc_claimAutoreleasedReturnValue(v136);
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Didn't find message store for data protection class %@ for %@");
        }

        if (!v308) {
          goto LABEL_317;
        }
        id v137 = objc_alloc(&OBJC_CLASS___NSError);
        v290 = -[NSError initWithDomain:code:userInfo:]( v137,  "initWithDomain:code:userInfo:",  IDSSendErrorDomain,  18LL,  0LL);
        id v120 = -[IDSDeliveryContext initWithResponseCode:error:lastCall:]( objc_alloc(&OBJC_CLASS___IDSDeliveryContext),  "initWithResponseCode:error:lastCall:",  18LL,  v290,  1LL);
        v308[2](v308, v120);
        uint64_t v138 = OSLogHandleForTransportCategory("IDSDaemon");
        uint64_t v139 = (os_log_s *)objc_claimAutoreleasedReturnValue(v138);
        if (os_log_type_enabled(v139, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v140 = IDSDataProtectionClassStringFromDataProtectionClass(v296);
          v141 = (__CFString *)(id)objc_claimAutoreleasedReturnValue(v140);
          *(_DWORD *)__int128 buf = 138412546;
          v332 = v141;
          __int16 v333 = 2112;
          v334 = v307;
          _os_log_impl( (void *)&_mh_execute_header,  v139,  OS_LOG_TYPE_DEFAULT,  "Data protection class %@ is unavailable for %@, failing outgoing message",  buf,  0x16u);
        }

        uint64_t v143 = os_log_shim_legacy_logging_enabled(v142);
        if ((_DWORD)v143)
        {
          if (_IDSShouldLogTransport(v143))
          {
            uint64_t v144 = IDSDataProtectionClassStringFromDataProtectionClass(v296);
            v264 = (void *)objc_claimAutoreleasedReturnValue(v144);
            _IDSLogTransport( @"IDSDaemon",  @"IDS",  @"Data protection class %@ is unavailable for %@, failing outgoing message");

            if (_IDSShouldLog(0LL, @"IDSDaemon"))
            {
              uint64_t v145 = IDSDataProtectionClassStringFromDataProtectionClass(v296);
              v265 = (void *)objc_claimAutoreleasedReturnValue(v145);
              _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Data protection class %@ is unavailable for %@, failing outgoing message");
            }
          }
        }

        goto LABEL_316;
      }

      if ([v13 priority] == (id)300)
      {
        if ((_DWORD)v18 == 5 || (_DWORD)v18 == 2)
        {
          int v126 = (void *)objc_claimAutoreleasedReturnValue( +[IDSUTunDeliveryController sharedInstance]( &OBJC_CLASS___IDSUTunDeliveryController,  "sharedInstance"));
          unsigned int v286 = [v126 hasSpaceForMessagesWithPriority:300 dataProtectionClass:v296];
        }

        else
        {
          unsigned int v286 = 1;
        }
      }

      else
      {
        unsigned int v286 = 0;
      }

      v290 = (NSError *)objc_claimAutoreleasedReturnValue([v297 allowedTrafficClasses]);
      if ((-[NSError containsObject:]( v290,  "containsObject:",  @"com.apple.ids.trafficclass.nanoregistry.check") & 1) != 0 || (-[NSError containsObject:]( v290,  "containsObject:",  @"com.apple.ids.trafficclass.nanoregistry.configure") & 1) != 0)
      {
        unsigned int v284 = 1;
      }

      else
      {
        unsigned int v284 = -[NSError containsObject:]( v290,  "containsObject:",  @"com.apple.ids.trafficclass.nanoregistry.update");
      }

      if (([v13 bypassStorage] & 1) != 0
        || ([v13 bypassDuet] & 1) != 0
        || ([v13 requireBluetooth] & 1) != 0)
      {
        unsigned int v146 = 1;
      }

      else
      {
        unsigned int v146 = [v13 requireLocalWiFi] | v284;
      }

      unsigned int v288 = v146;
      if ((_DWORD)v18 == 5 || (_DWORD)v18 == 2)
      {
        int v126 = (void *)objc_claimAutoreleasedReturnValue([a1 uTunDeliveryController]);
        unsigned int v147 = v288 & ~objc_msgSend( v126,  "hasSpaceForMessagesWithPriority:dataProtectionClass:",  objc_msgSend(v13, "priority"),  v296);
      }

      else
      {
        unsigned int v147 = 0;
      }

      if ((_DWORD)v18 == 5 || (_DWORD)v18 == 2) {

      }
      if (v147)
      {
        uint64_t v148 = OSLogHandleForTransportCategory("IDSDaemon");
        __int128 v149 = (os_log_s *)objc_claimAutoreleasedReturnValue(v148);
        if (os_log_type_enabled(v149, OS_LOG_TYPE_DEFAULT))
        {
          if ([v13 priority] == (id)300)
          {
            __int128 v150 = @"URGENT";
          }

          else if ([v13 priority] == (id)200)
          {
            __int128 v150 = @"Default";
          }

          else
          {
            __int128 v150 = @"Sync";
          }

          uint64_t v151 = IDSDataProtectionClassStringFromDataProtectionClass(v296);
          __int128 v152 = (__CFString *)(id)objc_claimAutoreleasedReturnValue(v151);
          *(_DWORD *)__int128 buf = 138412546;
          v332 = v150;
          __int16 v333 = 2112;
          v334 = v152;
          _os_log_impl( (void *)&_mh_execute_header,  v149,  OS_LOG_TYPE_DEFAULT,  "Telling clients (via IDSResponsePersisted) not to replay this message if the daemon crashes because the %@ p riority queue (dataProtectionClass: %@) is full",  buf,  0x16u);
        }

        uint64_t v154 = os_log_shim_legacy_logging_enabled(v153);
        if ((_DWORD)v154 && _IDSShouldLogTransport(v154))
        {
          if ([v13 priority] == (id)300) {
            __int128 v155 = @"URGENT";
          }
          else {
            __int128 v155 = [v13 priority] == (id)200 ? @"Default" : @"Sync";
          }
          uint64_t v156 = IDSDataProtectionClassStringFromDataProtectionClass(v296);
          v259 = v155;
          v269 = (void *)objc_claimAutoreleasedReturnValue(v156);
          _IDSLogTransport( @"IDSDaemon",  @"IDS",  @"Telling clients (via IDSResponsePersisted) not to replay this message if the daemon crashes because the %@ priority queue (dataProtectionClass: %@) is full");

          if (_IDSShouldLog(0LL, @"IDSDaemon"))
          {
            if (objc_msgSend(v13, "priority", v155, v269) == (id)300)
            {
              __int128 v157 = @"URGENT";
            }

            else if ([v13 priority] == (id)200)
            {
              __int128 v157 = @"Default";
            }

            else
            {
              __int128 v157 = @"Sync";
            }

            uint64_t v158 = IDSDataProtectionClassStringFromDataProtectionClass(v296);
            v259 = (__CFString *)v157;
            v269 = (void *)objc_claimAutoreleasedReturnValue(v158);
            _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Telling clients (via IDSResponsePersisted) not to replay this message if the daemon crashes because the %@ priority queue (dataProtectionClass: %@) is full");
          }
        }

        v159 = -[IDSDeliveryContext initWithResponseCode:error:lastCall:]( objc_alloc(&OBJC_CLASS___IDSDeliveryContext),  "initWithResponseCode:error:lastCall:",  11LL,  0LL,  0LL);
        v308[2](v308, v159);
      }

      v160 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "message", v259, v269));

      if (!v160)
      {
LABEL_260:
        v215 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "pairingManager", v266, v270, v273));
        id v120 = (IDSDeliveryContext *)objc_claimAutoreleasedReturnValue([v215 pairedDeviceUniqueID]);

        v216 = (void *)objc_claimAutoreleasedReturnValue([v13 localDestinationDeviceUUID]);
        unsigned __int8 v217 = -[IDSDeliveryContext isEqualToIgnoringCase:](v120, "isEqualToIgnoringCase:", v216);
        if ([v216 length]) {
          char v218 = v217;
        }
        else {
          char v218 = 1;
        }
        int v219 = v289;
        if ((v218 & 1) == 0)
        {
          uint64_t v220 = OSLogHandleForTransportCategory("IDSDaemon");
          v221 = (os_log_s *)objc_claimAutoreleasedReturnValue(v220);
          if (os_log_type_enabled(v221, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)__int128 buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v221,  OS_LOG_TYPE_DEFAULT,  "This local Message is not for the current device, sending to the database to be taken care of later",  buf,  2u);
          }

          uint64_t v223 = os_log_shim_legacy_logging_enabled(v222);
          if ((_DWORD)v223)
          {
            if (_IDSShouldLogTransport(v223))
            {
              _IDSLogTransport( @"IDSDaemon",  @"IDS",  @"This local Message is not for the current device, sending to the database to be taken care of later");
              if (_IDSShouldLog(0LL, @"IDSDaemon")) {
                _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"This local Message is not for the current device, sending to the database to be taken care of later");
              }
            }
          }

          unsigned int v286 = 0;
          unsigned int v288 = 0;
          int v219 = v289;
        }

        if (!v219) {
          goto LABEL_291;
        }
        v322 = 0LL;
        v224 = (void *)objc_claimAutoreleasedReturnValue([v13 protobuf]);

        if (v224)
        {
          v225 = objc_alloc(&OBJC_CLASS___IDSProtobuf);
          v226 = (void *)objc_claimAutoreleasedReturnValue([v13 protobuf]);
          v227 = -[IDSProtobuf initWithDictionary:](v225, "initWithDictionary:", v226);

          v228 = (void *)objc_claimAutoreleasedReturnValue(-[IDSProtobuf data](v227, "data"));
          v229 = (IDSProtobuf *)objc_claimAutoreleasedReturnValue( +[IDSEncryptionHelpers encryptLocalDeliveryPayload:toDevice:forService:withDataProtectionClass:encryptionType:priority:error:]( &OBJC_CLASS___IDSEncryptionHelpers,  "encryptLocalDeliveryPayload:toDevice:forService:withDataProtectionClass:encryptionTy pe:priority:error:",  v228,  v216,  v307,  1LL,  1LL,  300LL,  &v322));

          if (v229)
          {
            -[IDSProtobuf setData:](v227, "setData:", v229);
            v230 = (void *)objc_claimAutoreleasedReturnValue(-[IDSProtobuf dictionaryRepresentation](v227, "dictionaryRepresentation"));
            [v13 setProtobuf:v230];

LABEL_290:
LABEL_291:
            uint64_t v243 = OSLogHandleForTransportCategory("IDSDaemon");
            v244 = (os_log_s *)objc_claimAutoreleasedReturnValue(v243);
            if (os_log_type_enabled(v244, OS_LOG_TYPE_DEFAULT))
            {
              v245 = @"NO";
              if (v286) {
                v246 = @"YES";
              }
              else {
                v246 = @"NO";
              }
              *(_DWORD *)__int128 buf = 138413058;
              v332 = (const __CFString *)v291;
              if (v288) {
                v247 = @"YES";
              }
              else {
                v247 = @"NO";
              }
              v334 = v246;
              __int16 v333 = 2112;
              __int16 v335 = 2112;
              if (v284) {
                v245 = @"YES";
              }
              v336 = v247;
              __int16 v337 = 2112;
              v338 = v245;
              _os_log_impl( (void *)&_mh_execute_header,  v244,  OS_LOG_TYPE_DEFAULT,  "Store outgoing message {guid: %@, canSendUrgent: %@, forceImmediateSend: %@, hasSpecialTrafficClass: %@}",  buf,  0x2Au);
            }

            uint64_t v249 = os_log_shim_legacy_logging_enabled(v248);
            if ((_DWORD)v249 && _IDSShouldLogTransport(v249))
            {
              if (v286) {
                v250 = @"YES";
              }
              else {
                v250 = @"NO";
              }
              if (v288) {
                v251 = @"YES";
              }
              else {
                v251 = @"NO";
              }
              if (v284) {
                v252 = @"YES";
              }
              else {
                v252 = @"NO";
              }
              v274 = v251;
              v276 = v252;
              v267 = v291;
              v271 = v250;
              _IDSLogTransport( @"IDSDaemon",  @"IDS",  @"Store outgoing message {guid: %@, canSendUrgent: %@, forceImmediateSend: %@, hasSpecialTrafficClass: %@}");
              if (_IDSShouldLog(0LL, @"IDSDaemon"))
              {
                v274 = v251;
                v276 = v252;
                v267 = v291;
                v271 = v250;
                _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Store outgoing message {guid: %@, canSendUrgent: %@, forceImmediateSend: %@, hasSpecialTrafficClass: %@}");
              }
            }

            v253 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDaemonPriorityQueueController sharedInstance]( &OBJC_CLASS___IDSDaemonPriorityQueueController,  "sharedInstance",  v267,  v271,  v274,  v276));
            v254 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v253, "queueForPriority:", (int)objc_msgSend(v13, "priority")));
            v309[0] = _NSConcreteStackBlock;
            v309[1] = 3221225472LL;
            v309[2] = sub_100351E84;
            v309[3] = &unk_100901E30;
            v316 = v308;
            id v310 = v13;
            id v319 = a1;
            id v311 = v297;
            id v312 = v14;
            unsigned int v320 = v296;
            id v317 = v300;
            id v318 = v301;
            BOOL v321 = v287;
            id v313 = v299;
            v314 = v307;
            id v315 = v302;
            -[IDSDeliveryContext storeOutgoingMessageWithSendParameters:guid:canSend:canBypassSimilarMessages:fromQueue:completionBlock:]( v292,  "storeOutgoingMessageWithSendParameters:guid:canSend:canBypassSimilarMessages:fromQueue:completionBlock:",  v310,  v291,  v286 | v288,  v288,  v254,  v309);

LABEL_315:
            goto LABEL_316;
          }

          v229 = v227;
        }

        else
        {
          v231 = (void *)objc_claimAutoreleasedReturnValue([v13 data]);

          if (v231)
          {
            v232 = (void *)objc_claimAutoreleasedReturnValue([v13 data]);
            v229 = (IDSProtobuf *)objc_claimAutoreleasedReturnValue( +[IDSEncryptionHelpers encryptLocalDeliveryPayload:toDevice:forService:withDataProtectionClass:encryptionType:priority:error:]( &OBJC_CLASS___IDSEncryptionHelpers,  "encryptLocalDeliveryPayload:toDevice:forService:withDataProtectionClass:encryption Type:priority:error:",  v232,  v216,  v307,  1LL,  1LL,  300LL,  &v322));

            if (v229)
            {
              [v13 setData:v229];
              goto LABEL_290;
            }

+ (BOOL)_shouldReplaceLocalDestination:(id)a3
{
  id v3 = a3;
  unsigned int v4 = [v3 serviceAdHocType];
  unsigned __int8 v5 = [v3 serviceAllowProxyDelivery];

  if (v4 == 2 || v4 == 5) {
    return v5;
  }
  else {
    return 0;
  }
}

+ (void)_sendLocalDeliveryMessagesForAccountUUID:(id)a3 threadContext:(id)a4 priority:(int64_t)a5 dataProtectionClass:(unsigned int)a6
{
  uint64_t v6 = *(void *)&a6;
  int v9 = (__CFString *)a3;
  id v80 = a4;
  uint64_t v76 = v9;
  if (v9)
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[IDSUTunDeliveryController sharedInstance]( &OBJC_CLASS___IDSUTunDeliveryController,  "sharedInstance"));
    unsigned __int8 v11 = [v10 hasSpaceForMessagesWithPriority:a5 dataProtectionClass:v6];

    if ((v11 & 1) != 0)
    {
      uint64_t v73 = objc_autoreleasePoolPush();
      id v12 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPairingManager sharedInstance](&OBJC_CLASS___IDSPairingManager, "sharedInstance"));
      id v74 = (void *)objc_claimAutoreleasedReturnValue([v12 pairedDeviceUniqueID]);

      uint64_t v13 = OSLogHandleForIDSCategory("IDSDaemon");
      id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        id v15 = @"Sync";
        if (a5 == 200) {
          id v15 = @"Default";
        }
        if (a5 == 300) {
          id v15 = @"URGENT";
        }
        id v16 = @"Class D";
        if ((_DWORD)v6 == 1) {
          id v16 = @"Class A";
        }
        *(_DWORD *)__int128 buf = 138413058;
        unsigned int v94 = v76;
        *(void *)id v96 = v15;
        __int16 v95 = 2112;
        *(_WORD *)&v96[8] = 2112;
        if (!(_DWORD)v6) {
          id v16 = @"Class C";
        }
        *(void *)&v96[10] = v16;
        *(_WORD *)&v96[18] = 2112;
        *(void *)&v96[20] = v74;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Performing query for account UUID %@ priority %@ class %@ Local Device ID %@ ",  buf,  0x2Au);
      }

      if (os_log_shim_legacy_logging_enabled(v17) && _IDSShouldLog(0LL, @"IDSDaemon"))
      {
        id v18 = @"Sync";
        if (a5 == 200) {
          id v18 = @"Default";
        }
        if (a5 == 300) {
          id v18 = @"URGENT";
        }
        unsigned __int8 v19 = @"Class D";
        if ((_DWORD)v6 == 1) {
          unsigned __int8 v19 = @"Class A";
        }
        if (!(_DWORD)v6) {
          unsigned __int8 v19 = @"Class C";
        }
        uint64_t v71 = v19;
        uint64_t v72 = v74;
        BOOL v68 = v76;
        uint64_t v70 = v18;
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Performing query for account UUID %@ priority %@ class %@ Local Device ID %@ ");
      }

      __int128 v82 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDMessageStore sharedInstanceForDataProtectionClass:]( &OBJC_CLASS___IDSDMessageStore,  "sharedInstanceForDataProtectionClass:",  v6,  v68,  v70,  v71,  v72));
      uint64_t v75 = (void *)objc_claimAutoreleasedReturnValue( [v82 unsentNonUrgentMessagesForAccountUUID:v76 priority:a5 byteLimit:0x200000 upToLimit:10 localDestinationDeviceID:v74]);
      uint64_t v20 = OSLogHandleForIDSCategory("IDSDaemon");
      int v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        id v22 = (const __CFString *)[v75 count];
        *(_DWORD *)__int128 buf = 134217984;
        unsigned int v94 = v22;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Got %lu query messages", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled(v23) && _IDSShouldLog(0LL, @"IDSDaemon"))
      {
        id v69 = [v75 count];
        _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon", @"Got %lu query messages");
      }

      if (objc_msgSend(v75, "count", v69))
      {
        __int128 v91 = 0u;
        __int128 v92 = 0u;
        __int128 v89 = 0u;
        __int128 v90 = 0u;
        id obj = v75;
        id v79 = [obj countByEnumeratingWithState:&v89 objects:v97 count:16];
        if (!v79) {
          goto LABEL_49;
        }
        uint64_t v78 = *(void *)v90;
        while (1)
        {
          for (i = 0LL; i != v79; i = (char *)i + 1)
          {
            if (*(void *)v90 != v78) {
              objc_enumerationMutation(obj);
            }
            id v25 = *(void **)(*((void *)&v89 + 1) + 8LL * (void)i);
            context = objc_autoreleasePoolPush();
            unsigned __int8 v26 = (void *)objc_claimAutoreleasedReturnValue([v25 guid]);
            [v82 markOutgoingMessageWithGUID:v26 asSent:1];

            id v27 = [v25 copySendParameters];
            uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v27 data]);

            if (v28)
            {
              uint64_t v29 = OSLogHandleForIDSCategory("IDSDaemon");
              uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
              if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v31 = (__CFString *)(id)objc_claimAutoreleasedReturnValue([v80 accountDescription]);
                uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([v27 data]);
                unsigned int v33 = [v32 length];
                id v34 = (id)objc_claimAutoreleasedReturnValue([v27 destinations]);
                id v35 = (id)objc_claimAutoreleasedReturnValue([v27 identifier]);
                id v36 = (void *)objc_claimAutoreleasedReturnValue([v25 guid]);
                *(_DWORD *)__int128 buf = 138413314;
                unsigned int v94 = v31;
                __int16 v95 = 1024;
                *(_DWORD *)id v96 = v33;
                *(_WORD *)&v96[4] = 2112;
                *(void *)&v96[6] = v34;
                *(_WORD *)&v96[14] = 2112;
                *(void *)&v96[16] = v35;
                *(_WORD *)&v96[24] = 2112;
                *(void *)&v96[26] = v36;
                _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEBUG,  "account %@ _sendLocalDeliveryMessagesForAccountUUID with data size: %d to: %@ identifier: %@ guid: %@",  buf,  0x30u);
              }

              if (os_log_shim_legacy_logging_enabled(v37)
                && _IDSShouldLog(1LL, @"IDSDaemon"))
              {
                uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue([v80 accountDescription]);
                id v39 = (void *)objc_claimAutoreleasedReturnValue([v27 data]);
                [v39 length];
                id v40 = (void *)objc_claimAutoreleasedReturnValue([v27 destinations]);
                id v41 = (void *)objc_claimAutoreleasedReturnValue([v27 identifier]);
                id v42 = (void *)objc_claimAutoreleasedReturnValue([v25 guid]);
                _IDSLogV( 1LL,  @"IDSFoundation",  @"IDSDaemon",  @"account %@ _sendLocalDeliveryMessagesForAccountUUID with data size: %d to: %@ identifier: %@ guid: %@");
LABEL_46:
              }
            }

            else
            {
              uint64_t v43 = OSLogHandleForIDSCategory("IDSDaemon");
              id v44 = (os_log_s *)objc_claimAutoreleasedReturnValue(v43);
              if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
              {
                uint64_t v45 = (__CFString *)(id)objc_claimAutoreleasedReturnValue([v80 accountDescription]);
                id v46 = (id)objc_claimAutoreleasedReturnValue([v27 message]);
                id v47 = (id)objc_claimAutoreleasedReturnValue([v27 destinations]);
                id v48 = (id)objc_claimAutoreleasedReturnValue([v27 identifier]);
                id v49 = (void *)objc_claimAutoreleasedReturnValue([v25 guid]);
                *(_DWORD *)__int128 buf = 138413314;
                unsigned int v94 = v45;
                __int16 v95 = 2112;
                *(void *)id v96 = v46;
                *(_WORD *)&v96[8] = 2112;
                *(void *)&v96[10] = v47;
                *(_WORD *)&v96[18] = 2112;
                *(void *)&v96[20] = v48;
                *(_WORD *)&v96[28] = 2112;
                *(void *)&v96[30] = v49;
                _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEBUG,  "account %@ _sendLocalDeliveryMessagesForAccountUUID: %@ to: %@ identifier: %@ guid: %@",  buf,  0x34u);
              }

              if (os_log_shim_legacy_logging_enabled(v50)
                && _IDSShouldLog(1LL, @"IDSDaemon"))
              {
                uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue([v80 accountDescription]);
                id v39 = (void *)objc_claimAutoreleasedReturnValue([v27 message]);
                id v40 = (void *)objc_claimAutoreleasedReturnValue([v27 destinations]);
                id v41 = (void *)objc_claimAutoreleasedReturnValue([v27 identifier]);
                id v42 = (void *)objc_claimAutoreleasedReturnValue([v25 guid]);
                _IDSLogV( 1LL,  @"IDSFoundation",  @"IDSDaemon",  @"account %@ _sendLocalDeliveryMessagesForAccountUUID: %@ to: %@ identifier: %@ guid: %@");
                goto LABEL_46;
              }
            }

            v84[0] = _NSConcreteStackBlock;
            v84[1] = 3221225472LL;
            v84[2] = sub_100353F58;
            v84[3] = &unk_100901E58;
            id v51 = v80;
            id v85 = v51;
            id v52 = v27;
            id v86 = v52;
            id v87 = v25;
            id v88 = v82;
            id v53 = objc_retainBlock(v84);
            id v54 = (void *)objc_claimAutoreleasedReturnValue([v51 servicePushTopic]);
            uint64_t v55 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
            unsigned int v56 = (void *)objc_claimAutoreleasedReturnValue( [a1 progressBlockForSendParameters:v52 messageContext:0 topic:v54 forObject:v55]);

            __int16 v57 = (void *)objc_claimAutoreleasedReturnValue([a1 serviceController]);
            id v58 = (void *)objc_claimAutoreleasedReturnValue([v51 servicePushTopic]);
            id v59 = (void *)objc_claimAutoreleasedReturnValue([v57 serviceWithPushTopic:v58]);

            +[IDSDAccount sendMessageWithSendParameters:service:threadContext:willSendBlock:progressBlock:completionBlock:]( &OBJC_CLASS___IDSDAccount,  "sendMessageWithSendParameters:service:threadContext:willSendBlock:progressBlock:completionBlock:",  v52,  v59,  v51,  0LL,  v56,  v53);
            objc_autoreleasePoolPop(context);
          }

          id v79 = [obj countByEnumeratingWithState:&v89 objects:v97 count:16];
          if (!v79)
          {
LABEL_49:

            break;
          }
        }
      }

      objc_autoreleasePoolPop(v73);
    }

    else
    {
      uint64_t v63 = OSLogHandleForIDSCategory("IDSDaemon");
      unsigned int v64 = (os_log_s *)objc_claimAutoreleasedReturnValue(v63);
      if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v65 = @"Sync";
        if (a5 == 200) {
          uint64_t v65 = @"Default";
        }
        if (a5 == 300) {
          uint64_t v65 = @"URGENT";
        }
        id v66 = @"Class D";
        if ((_DWORD)v6 == 1) {
          id v66 = @"Class A";
        }
        if (!(_DWORD)v6) {
          id v66 = @"Class C";
        }
        *(_DWORD *)__int128 buf = 138412546;
        unsigned int v94 = v65;
        __int16 v95 = 2112;
        *(void *)id v96 = v66;
        _os_log_impl( (void *)&_mh_execute_header,  v64,  OS_LOG_TYPE_DEFAULT,  "No space in local delivery queues for messages with priority %@ dataProtectionClass %@, bailing.",  buf,  0x16u);
      }

      if (os_log_shim_legacy_logging_enabled(v67) && _IDSShouldLog(0LL, @"IDSDaemon")) {
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"No space in local delivery queues for messages with priority %@ dataProtectionClass %@, bailing.");
      }
    }
  }

  else
  {
    uint64_t v60 = OSLogHandleForIDSCategory("Warning");
    __int128 v61 = (os_log_s *)objc_claimAutoreleasedReturnValue(v60);
    if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v61,  OS_LOG_TYPE_ERROR,  "_sendLocalDeliveryMessagesForAccountUUID called with no accountUUID.",  buf,  2u);
    }

    if (os_log_shim_legacy_logging_enabled(v62))
    {
      _IDSWarnV(@"IDSFoundation", @"_sendLocalDeliveryMessagesForAccountUUID called with no accountUUID.");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"_sendLocalDeliveryMessagesForAccountUUID called with no accountUUID.");
      _IDSLogTransport( @"Warning",  @"IDS",  @"_sendLocalDeliveryMessagesForAccountUUID called with no accountUUID.");
    }
  }
}

+ (void)_sendLocalDeliveryMessagesForAccountUUID:(id)a3 threadContext:(id)a4 priority:(int64_t)a5 messageTypes:(id)a6 dataProtectionClass:(unsigned int)a7
{
  uint64_t v7 = *(void *)&a7;
  unsigned __int8 v11 = (const __CFString *)a3;
  id v83 = a4;
  id v78 = a6;
  id v79 = (__CFString *)v11;
  if (v11)
  {
    id v12 = (void *)objc_claimAutoreleasedReturnValue( +[IDSUTunDeliveryController sharedInstance]( &OBJC_CLASS___IDSUTunDeliveryController,  "sharedInstance"));
    unsigned __int8 v13 = [v12 hasSpaceForMessagesWithPriority:a5 dataProtectionClass:v7];

    if ((v13 & 1) != 0)
    {
      uint64_t v75 = objc_autoreleasePoolPush();
      id v14 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPairingManager sharedInstance](&OBJC_CLASS___IDSPairingManager, "sharedInstance"));
      uint64_t v76 = (void *)objc_claimAutoreleasedReturnValue([v14 pairedDeviceUniqueID]);

      uint64_t v15 = OSLogHandleForIDSCategory("IDSDaemon");
      id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v17 = @"Sync";
        if (a5 == 200) {
          uint64_t v17 = @"Default";
        }
        if (a5 == 300) {
          uint64_t v17 = @"URGENT";
        }
        id v18 = @"Class D";
        if ((_DWORD)v7 == 1) {
          id v18 = @"Class A";
        }
        *(_DWORD *)__int128 buf = 138413058;
        uint64_t v97 = v11;
        *(void *)id v99 = v17;
        __int16 v98 = 2112;
        *(_WORD *)&v99[8] = 2112;
        if (!(_DWORD)v7) {
          id v18 = @"Class C";
        }
        *(void *)&v99[10] = v18;
        *(_WORD *)&v99[18] = 2112;
        *(void *)&v99[20] = v76;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Performing query for account UUID %@ priority %@ class %@ Local Device ID %@ ",  buf,  0x2Au);
      }

      if (os_log_shim_legacy_logging_enabled(v19) && _IDSShouldLog(0LL, @"IDSDaemon"))
      {
        uint64_t v20 = @"Sync";
        if (a5 == 200) {
          uint64_t v20 = @"Default";
        }
        if (a5 == 300) {
          uint64_t v20 = @"URGENT";
        }
        int v21 = @"Class D";
        if ((_DWORD)v7 == 1) {
          int v21 = @"Class A";
        }
        if (!(_DWORD)v7) {
          int v21 = @"Class C";
        }
        uint64_t v73 = v21;
        id v74 = v76;
        uint64_t v70 = v11;
        uint64_t v72 = v20;
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Performing query for account UUID %@ priority %@ class %@ Local Device ID %@ ");
      }

      id v85 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDMessageStore sharedInstanceForDataProtectionClass:]( &OBJC_CLASS___IDSDMessageStore,  "sharedInstanceForDataProtectionClass:",  v7,  v70,  v72,  v73,  v74));
      __int16 v77 = (void *)objc_claimAutoreleasedReturnValue( [v85 unsentNonUrgentMessagesForAccountUUID:v11 priority:a5 byteLimit:0x200000 upToLimit:10 localDestinationDeviceID:v76 messageTypes:v78]);
      uint64_t v22 = OSLogHandleForIDSCategory("IDSDaemon");
      uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v24 = (const __CFString *)[v77 count];
        *(_DWORD *)__int128 buf = 134217984;
        uint64_t v97 = v24;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Got %lu query messages", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled(v25) && _IDSShouldLog(0LL, @"IDSDaemon"))
      {
        id v71 = [v77 count];
        _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon", @"Got %lu query messages");
      }

      if (objc_msgSend(v77, "count", v71))
      {
        __int128 v94 = 0u;
        __int128 v95 = 0u;
        __int128 v92 = 0u;
        __int128 v93 = 0u;
        id obj = v77;
        id v82 = [obj countByEnumeratingWithState:&v92 objects:v100 count:16];
        if (!v82) {
          goto LABEL_49;
        }
        uint64_t v81 = *(void *)v93;
        while (1)
        {
          for (i = 0LL; i != v82; i = (char *)i + 1)
          {
            if (*(void *)v93 != v81) {
              objc_enumerationMutation(obj);
            }
            id v27 = *(void **)(*((void *)&v92 + 1) + 8LL * (void)i);
            context = objc_autoreleasePoolPush();
            uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v27 guid]);
            [v85 markOutgoingMessageWithGUID:v28 asSent:1];

            id v29 = [v27 copySendParameters];
            uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([v29 data]);

            if (v30)
            {
              uint64_t v31 = OSLogHandleForIDSCategory("IDSDaemon");
              uint64_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
              if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
              {
                unsigned int v33 = (__CFString *)(id)objc_claimAutoreleasedReturnValue([v83 accountDescription]);
                id v34 = (void *)objc_claimAutoreleasedReturnValue([v29 data]);
                unsigned int v35 = [v34 length];
                id v36 = (id)objc_claimAutoreleasedReturnValue([v29 destinations]);
                id v37 = (id)objc_claimAutoreleasedReturnValue([v29 identifier]);
                uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue([v27 guid]);
                *(_DWORD *)__int128 buf = 138413314;
                uint64_t v97 = v33;
                __int16 v98 = 1024;
                *(_DWORD *)id v99 = v35;
                *(_WORD *)&v99[4] = 2112;
                *(void *)&v99[6] = v36;
                *(_WORD *)&v99[14] = 2112;
                *(void *)&v99[16] = v37;
                *(_WORD *)&v99[24] = 2112;
                *(void *)&v99[26] = v38;
                _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEBUG,  "account %@ _sendLocalDeliveryMessagesForAccountUUID with data size: %d to: %@ identifier: %@ guid: %@",  buf,  0x30u);
              }

              if (os_log_shim_legacy_logging_enabled(v39)
                && _IDSShouldLog(1LL, @"IDSDaemon"))
              {
                id v40 = (void *)objc_claimAutoreleasedReturnValue([v83 accountDescription]);
                id v41 = (void *)objc_claimAutoreleasedReturnValue([v29 data]);
                [v41 length];
                id v42 = (void *)objc_claimAutoreleasedReturnValue([v29 destinations]);
                uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue([v29 identifier]);
                id v44 = (void *)objc_claimAutoreleasedReturnValue([v27 guid]);
                _IDSLogV( 1LL,  @"IDSFoundation",  @"IDSDaemon",  @"account %@ _sendLocalDeliveryMessagesForAccountUUID with data size: %d to: %@ identifier: %@ guid: %@");
LABEL_46:
              }
            }

            else
            {
              uint64_t v45 = OSLogHandleForIDSCategory("IDSDaemon");
              id v46 = (os_log_s *)objc_claimAutoreleasedReturnValue(v45);
              if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
              {
                id v47 = (__CFString *)(id)objc_claimAutoreleasedReturnValue([v83 accountDescription]);
                id v48 = (id)objc_claimAutoreleasedReturnValue([v29 message]);
                id v49 = (id)objc_claimAutoreleasedReturnValue([v29 destinations]);
                id v50 = (id)objc_claimAutoreleasedReturnValue([v29 identifier]);
                id v51 = (void *)objc_claimAutoreleasedReturnValue([v27 guid]);
                *(_DWORD *)__int128 buf = 138413314;
                uint64_t v97 = v47;
                __int16 v98 = 2112;
                *(void *)id v99 = v48;
                *(_WORD *)&v99[8] = 2112;
                *(void *)&v99[10] = v49;
                *(_WORD *)&v99[18] = 2112;
                *(void *)&v99[20] = v50;
                *(_WORD *)&v99[28] = 2112;
                *(void *)&v99[30] = v51;
                _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEBUG,  "account %@ _sendLocalDeliveryMessagesForAccountUUID: %@ to: %@ identifier: %@ guid: %@",  buf,  0x34u);
              }

              if (os_log_shim_legacy_logging_enabled(v52)
                && _IDSShouldLog(1LL, @"IDSDaemon"))
              {
                id v40 = (void *)objc_claimAutoreleasedReturnValue([v83 accountDescription]);
                id v41 = (void *)objc_claimAutoreleasedReturnValue([v29 message]);
                id v42 = (void *)objc_claimAutoreleasedReturnValue([v29 destinations]);
                uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue([v29 identifier]);
                id v44 = (void *)objc_claimAutoreleasedReturnValue([v27 guid]);
                _IDSLogV( 1LL,  @"IDSFoundation",  @"IDSDaemon",  @"account %@ _sendLocalDeliveryMessagesForAccountUUID: %@ to: %@ identifier: %@ guid: %@");
                goto LABEL_46;
              }
            }

            v87[0] = _NSConcreteStackBlock;
            v87[1] = 3221225472LL;
            v87[2] = sub_10035522C;
            v87[3] = &unk_100901E58;
            id v53 = v83;
            id v88 = v53;
            id v54 = v29;
            id v89 = v54;
            __int128 v90 = v27;
            id v91 = v85;
            uint64_t v55 = objc_retainBlock(v87);
            unsigned int v56 = (void *)objc_claimAutoreleasedReturnValue([v53 servicePushTopic]);
            __int16 v57 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
            id v58 = (void *)objc_claimAutoreleasedReturnValue( [a1 progressBlockForSendParameters:v54 messageContext:0 topic:v56 forObject:v57]);

            id v59 = (void *)objc_claimAutoreleasedReturnValue([a1 serviceController]);
            uint64_t v60 = (void *)objc_claimAutoreleasedReturnValue([v53 servicePushTopic]);
            __int128 v61 = (void *)objc_claimAutoreleasedReturnValue([v59 serviceWithPushTopic:v60]);

            +[IDSDAccount sendMessageWithSendParameters:service:threadContext:willSendBlock:progressBlock:completionBlock:]( &OBJC_CLASS___IDSDAccount,  "sendMessageWithSendParameters:service:threadContext:willSendBlock:progressBlock:completionBlock:",  v54,  v61,  v53,  0LL,  v58,  v55);
            objc_autoreleasePoolPop(context);
          }

          id v82 = [obj countByEnumeratingWithState:&v92 objects:v100 count:16];
          if (!v82)
          {
LABEL_49:

            break;
          }
        }
      }

      objc_autoreleasePoolPop(v75);
    }

    else
    {
      uint64_t v65 = OSLogHandleForIDSCategory("IDSDaemon");
      id v66 = (os_log_s *)objc_claimAutoreleasedReturnValue(v65);
      if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v67 = @"Sync";
        if (a5 == 200) {
          uint64_t v67 = @"Default";
        }
        if (a5 == 300) {
          uint64_t v67 = @"URGENT";
        }
        BOOL v68 = @"Class D";
        if ((_DWORD)v7 == 1) {
          BOOL v68 = @"Class A";
        }
        if (!(_DWORD)v7) {
          BOOL v68 = @"Class C";
        }
        *(_DWORD *)__int128 buf = 138412546;
        uint64_t v97 = v67;
        __int16 v98 = 2112;
        *(void *)id v99 = v68;
        _os_log_impl( (void *)&_mh_execute_header,  v66,  OS_LOG_TYPE_DEFAULT,  "No space in local delivery queues for messages with priority %@ dataProtectionClass %@, bailing.",  buf,  0x16u);
      }

      if (os_log_shim_legacy_logging_enabled(v69) && _IDSShouldLog(0LL, @"IDSDaemon")) {
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"No space in local delivery queues for messages with priority %@ dataProtectionClass %@, bailing.");
      }
    }
  }

  else
  {
    uint64_t v62 = OSLogHandleForIDSCategory("Warning");
    uint64_t v63 = (os_log_s *)objc_claimAutoreleasedReturnValue(v62);
    if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v63,  OS_LOG_TYPE_ERROR,  "_sendLocalDeliveryMessagesForAccountUUID called with no accountUUID.",  buf,  2u);
    }

    if (os_log_shim_legacy_logging_enabled(v64))
    {
      _IDSWarnV(@"IDSFoundation", @"_sendLocalDeliveryMessagesForAccountUUID called with no accountUUID.");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"_sendLocalDeliveryMessagesForAccountUUID called with no accountUUID.");
      _IDSLogTransport( @"Warning",  @"IDS",  @"_sendLocalDeliveryMessagesForAccountUUID called with no accountUUID.");
    }
  }
}

- (void)_failSavedMessagesCleanly:(id)a3 withResponseCode:(int64_t)a4
{
  id v6 = a3;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDaemonPriorityQueueController sharedInstance]( &OBJC_CLASS___IDSDaemonPriorityQueueController,  "sharedInstance"));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_100355864;
  v9[3] = &unk_1008FEDE8;
  id v10 = v6;
  unsigned __int8 v11 = self;
  int64_t v12 = a4;
  id v8 = v6;
  [v7 performBlockMainQueue:v9];
}

- (void)_failSavedMessageCleanly:(id)a3 withResponseCode:(int64_t)a4
{
  id v6 = a3;
  im_assert_primary_base_queue(v6, v7);
  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
  int v9 = (void *)objc_claimAutoreleasedReturnValue([v6 accountGUID]);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v8 accountWithUniqueID:v9]);

  unsigned __int8 v11 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
  int64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v6 mainAccountGuid]);
  unsigned __int8 v13 = (void *)objc_claimAutoreleasedReturnValue([v11 accountWithUniqueID:v12]);

  id v14 = (void *)objc_claimAutoreleasedReturnValue([v10 service]);
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 pushTopic]);

  id v16 = (void *)objc_claimAutoreleasedReturnValue([v13 service]);
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v16 pushTopic]);

  id v18 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDaemonPriorityQueueController sharedInstance]( &OBJC_CLASS___IDSDaemonPriorityQueueController,  "sharedInstance"));
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472LL;
  v22[2] = sub_100355AFC;
  v22[3] = &unk_1008FCFC0;
  id v23 = v15;
  unsigned int v24 = self;
  id v26 = v17;
  int64_t v27 = a4;
  id v25 = v6;
  id v19 = v17;
  id v20 = v6;
  id v21 = v15;
  [v18 performBlockSyncPriority:v22];
}

- (void)_cleanUpOutgoingMessageDatabaseAndClearStatementCache
{
}

- (void)_cleanupOutgoingMessageDatabase
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDaemonPriorityQueueController sharedInstance]( &OBJC_CLASS___IDSDaemonPriorityQueueController,  "sharedInstance"));
  [v3 assertRunningWithPriority:100];

  unsigned int v4 = objc_autoreleasePoolPush();
  -[IDSDaemon _cleanupOutgoingMessages](self, "_cleanupOutgoingMessages");
  -[IDSDaemon _cleanupOutgoingQWSMessages](self, "_cleanupOutgoingQWSMessages");
  -[IDSDaemon _cleanupOutgoingExpiredMessages](self, "_cleanupOutgoingExpiredMessages");
  -[IDSDaemon _cleanupRunawayClientOutgoingMessages](self, "_cleanupRunawayClientOutgoingMessages");
  objc_autoreleasePoolPop(v4);
}

- (void)_cleanupOutgoingMessages
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDaemonPriorityQueueController sharedInstance]( &OBJC_CLASS___IDSDaemonPriorityQueueController,  "sharedInstance"));
  [v3 assertRunningWithPriority:100];

  uint64_t v4 = OSLogHandleForTransportCategory("IDSDaemon");
  unsigned __int8 v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Beginning cleanup of outgoing message database",  buf,  2u);
  }

  uint64_t v7 = os_log_shim_legacy_logging_enabled(v6);
  if ((_DWORD)v7 && _IDSShouldLogTransport(v7)) {
    *(void *)&double v8 = _IDSLogTransport( @"IDSDaemon",  @"IDS",  @"Beginning cleanup of outgoing message database").n128_u64[0];
  }
  int v9 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDMessageStore allExpiredOutgoingMessages:]( &OBJC_CLASS___IDSDMessageStore,  "allExpiredOutgoingMessages:",  2500LL,  v8));
  -[IDSDaemon _failSavedMessagesCleanly:withResponseCode:]( self,  "_failSavedMessagesCleanly:withResponseCode:",  v9,  12LL);
  uint64_t v10 = OSLogHandleForTransportCategory("IDSDaemon");
  unsigned __int8 v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    id v12 = [v9 count];
    *(_DWORD *)__int128 buf = 134217984;
    id v23 = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Cleaned up %lu expired messages", buf, 0xCu);
  }

  uint64_t v14 = os_log_shim_legacy_logging_enabled(v13);
  if ((_DWORD)v14 && _IDSShouldLogTransport(v14))
  {
    id v19 = [v9 count];
    *(void *)&double v15 = _IDSLogTransport(@"IDSDaemon", @"IDS", @"Cleaned up %lu expired messages").n128_u64[0];
  }

  id v16 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDMessageStore uniqueAccountGUIDsForUnsentOutgoingMessages:]( &OBJC_CLASS___IDSDMessageStore,  "uniqueAccountGUIDsForUnsentOutgoingMessages:",  5000LL,  v15,  v19));
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDaemonPriorityQueueController sharedInstance]( &OBJC_CLASS___IDSDaemonPriorityQueueController,  "sharedInstance"));
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472LL;
  v20[2] = sub_1003563F8;
  v20[3] = &unk_1008F5F80;
  v20[4] = self;
  id v21 = v16;
  id v18 = v16;
  [v17 performBlockMainQueue:v20];
}

- (void)_cleanupRunawayClientOutgoingMessages
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDaemonPriorityQueueController sharedInstance]( &OBJC_CLASS___IDSDaemonPriorityQueueController,  "sharedInstance"));
  [v3 assertRunningWithPriority:100];

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDaemonPriorityQueueController sharedInstance]( &OBJC_CLASS___IDSDaemonPriorityQueueController,  "sharedInstance"));
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  void v5[2] = sub_100356948;
  v5[3] = &unk_1008F6010;
  v5[4] = self;
  [v4 performBlockMainQueue:v5];
}

- (unint64_t)_maxOutgoingDatabasesSizeInMB
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[IDSServerBag sharedInstanceForBagType:](&OBJC_CLASS___IDSServerBag, "sharedInstanceForBagType:", 1LL));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKey:@"max-ids-database-size"]);

  if (v3)
  {
    int v4 = [v3 intValue];
    if (v4 <= 30) {
      unint64_t v5 = 30LL;
    }
    else {
      unint64_t v5 = v4;
    }
  }

  else
  {
    unint64_t v5 = 50LL;
  }

  return v5;
}

- (unint64_t)_maxMessagesForRunawayClientConsideration
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[IDSServerBag sharedInstanceForBagType:](&OBJC_CLASS___IDSServerBag, "sharedInstanceForBagType:", 1LL));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKey:@"max-ids-database-client-enqueued"]);

  if (v3) {
    unint64_t v4 = (int)[v3 intValue];
  }
  else {
    unint64_t v4 = 2000LL;
  }

  return v4;
}

- (void)_cleanupOutgoingQWSMessages
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDaemonPriorityQueueController sharedInstance]( &OBJC_CLASS___IDSDaemonPriorityQueueController,  "sharedInstance"));
  [v3 assertRunningWithPriority:100];

  uint64_t v4 = OSLogHandleForTransportCategory("IDSDaemon");
  unint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Beginning cleanup of outgoing message database for quickswitched messages",  buf,  2u);
  }

  uint64_t v7 = os_log_shim_legacy_logging_enabled(v6);
  if ((_DWORD)v7 && _IDSShouldLogTransport(v7)) {
    *(void *)&double v8 = _IDSLogTransport( @"IDSDaemon",  @"IDS",  @"Beginning cleanup of outgoing message database for quickswitched messages").n128_u64[0];
  }
  int v9 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDMessageStore allOutgoingMessagesPendingDeleteWithLimit:]( &OBJC_CLASS___IDSDMessageStore,  "allOutgoingMessagesPendingDeleteWithLimit:",  2500LL,  v8));
  -[IDSDaemon _failSavedMessagesCleanly:withResponseCode:]( self,  "_failSavedMessagesCleanly:withResponseCode:",  v9,  24LL);
  uint64_t v10 = OSLogHandleForTransportCategory("IDSDaemon");
  unsigned __int8 v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Ending cleanup of outgoing message database for quickswitched messages",  v14,  2u);
  }

  uint64_t v13 = os_log_shim_legacy_logging_enabled(v12);
  if ((_DWORD)v13 && _IDSShouldLogTransport(v13)) {
    _IDSLogTransport( @"IDSDaemon",  @"IDS",  @"Ending cleanup of outgoing message database for quickswitched messages");
  }
}

- (void)_cleanupOutgoingExpiredMessages
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDaemonPriorityQueueController sharedInstance]( &OBJC_CLASS___IDSDaemonPriorityQueueController,  "sharedInstance"));
  [v3 assertRunningWithPriority:100];

  uint64_t v4 = OSLogHandleForTransportCategory("IDSDaemon");
  unint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Beginning cleanup of outgoing message database for messages older than 2 days past enqueue date",  buf,  2u);
  }

  uint64_t v7 = os_log_shim_legacy_logging_enabled(v6);
  if ((_DWORD)v7 && _IDSShouldLogTransport(v7)) {
    *(void *)&double v8 = _IDSLogTransport( @"IDSDaemon",  @"IDS",  @"Beginning cleanup of outgoing message database for messages older than 2 days past enqueue date").n128_u64[0];
  }
  int v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date", v8));
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 dateByAddingTimeInterval:-172800.0]);
  uint64_t v11 = IMGetCachedDomainIntForKey(@"com.apple.ids", @"pendingMessageTimeout");
  if (v11 >= 1)
  {
    uint64_t v12 = objc_claimAutoreleasedReturnValue([v9 dateByAddingTimeInterval:-(double)v11]);

    uint64_t v10 = (void *)v12;
  }

  uint64_t v13 = OSLogHandleForTransportCategory("IDSDaemon");
  uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    [v10 timeIntervalSinceReferenceDate];
    *(_DWORD *)__int128 buf = 134217984;
    id v32 = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Using Time Interval %f", buf, 0xCu);
  }

  uint64_t v17 = os_log_shim_legacy_logging_enabled(v16);
  if ((_DWORD)v17 && _IDSShouldLogTransport(v17))
  {
    [v10 timeIntervalSinceReferenceDate];
    uint64_t v30 = v19;
    *(void *)&double v18 = _IDSLogTransport(@"IDSDaemon", @"IDS", @"Using Time Interval %f").n128_u64[0];
  }

  objc_msgSend(v10, "timeIntervalSinceReferenceDate", v18, v30);
  double v21 = v20;
  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPairingManager sharedInstance](&OBJC_CLASS___IDSPairingManager, "sharedInstance"));
  id v23 = (void *)objc_claimAutoreleasedReturnValue([v22 pairedDeviceUniqueID]);
  unsigned int v24 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDMessageStore outgoingMessagesWithEnqueueDateOlderThan:notToDestinationDeviceID:andLimit:]( &OBJC_CLASS___IDSDMessageStore,  "outgoingMessagesWithEnqueueDateOlderThan:notToDestinationDeviceID:andLimit:",  (uint64_t)v21,  v23,  2500LL));

  -[IDSDaemon _failSavedMessagesCleanly:withResponseCode:]( self,  "_failSavedMessagesCleanly:withResponseCode:",  v24,  25LL);
  uint64_t v25 = OSLogHandleForTransportCategory("IDSDaemon");
  id v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    id v27 = [v24 count];
    *(_DWORD *)__int128 buf = 134217984;
    id v32 = v27;
    _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "Ending cleanup of %lu outgoing message database for older than 2 days past enqueue date",  buf,  0xCu);
  }

  uint64_t v29 = os_log_shim_legacy_logging_enabled(v28);
  if ((_DWORD)v29 && _IDSShouldLogTransport(v29))
  {
    [v24 count];
    _IDSLogTransport( @"IDSDaemon",  @"IDS",  @"Ending cleanup of %lu outgoing message database for older than 2 days past enqueue date");
  }
}

- (void)_cleanupIncomingMessageDatabase
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDaemonPriorityQueueController sharedInstance]( &OBJC_CLASS___IDSDaemonPriorityQueueController,  "sharedInstance"));
  [v3 assertRunningWithPriority:100];

  uint64_t v4 = objc_autoreleasePoolPush();
  -[IDSDaemon _cleanupExpiredIncomingMessages](self, "_cleanupExpiredIncomingMessages");
  objc_autoreleasePoolPop(v4);
}

- (void)_cleanupExpiredIncomingMessages
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDaemonPriorityQueueController sharedInstance]( &OBJC_CLASS___IDSDaemonPriorityQueueController,  "sharedInstance"));
  [v2 assertRunningWithPriority:100];

  uint64_t v3 = OSLogHandleForTransportCategory("IDSDaemon");
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Beginning cleanup of outgoing message database",  v14,  2u);
  }

  uint64_t v6 = os_log_shim_legacy_logging_enabled(v5);
  if ((_DWORD)v6 && _IDSShouldLogTransport(v6)) {
    *(void *)&double v7 = _IDSLogTransport( @"IDSDaemon",  @"IDS",  @"Beginning cleanup of outgoing message database").n128_u64[0];
  }
  +[NSDate timeIntervalSinceReferenceDate](&OBJC_CLASS___NSDate, "timeIntervalSinceReferenceDate", v7);
  double v9 = v8;
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[IDSServerBag sharedInstance](&OBJC_CLASS___IDSServerBag, "sharedInstance"));
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKey:@"incoming-message-cleanup-threshold"]);

  if (v11)
  {
    [v11 doubleValue];
    double v13 = v12;
  }

  else
  {
    double v13 = 2592000.0;
  }

  +[IDSDMessageStore deleteExpiredIncomingMessagesOlderThan:withLimit:]( &OBJC_CLASS___IDSDMessageStore,  "deleteExpiredIncomingMessagesOlderThan:withLimit:",  500LL,  v9 - v13);
}

- (void)_registerForCheckpointAndVacuumDB
{
  uint64_t v2 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Registering for Checkpointing and Vacuum",  v5,  2u);
  }

  xpc_activity_register("com.apple.ids.dbvacuum", XPC_ACTIVITY_CHECK_IN, &stru_100901EF0);
}

- (void)sendServerMessage:(id)a3 command:(id)a4 usingAccountWithUniqueID:(id)a5 messageContext:(id)a6
{
  id v28 = a3;
  id v29 = a4;
  id v10 = a5;
  id v11 = a6;
  double v12 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
  double v13 = (void *)objc_claimAutoreleasedReturnValue([v12 accountWithUniqueID:v10]);

  if (v13)
  {
    *(void *)&__int128 buf = 0LL;
    *((void *)&buf + 1) = &buf;
    uint64_t v38 = 0x3032000000LL;
    uint64_t v39 = sub_100356518;
    id v40 = sub_100356528;
    id v41 = 0LL;
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v11 localObject]);
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472LL;
    v32[2] = sub_100357A34;
    v32[3] = &unk_1008FCF38;
    v32[4] = self;
    id v15 = v13;
    id v33 = v15;
    p___int128 buf = &buf;
    -[IDSDaemon validateListenerForLocalObject:andPerformBlock:]( self,  "validateListenerForLocalObject:andPerformBlock:",  v14,  v32);

    if (*(void *)(*((void *)&buf + 1) + 40LL))
    {
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[IDSTrafficMonitor sharedInstance](&OBJC_CLASS___IDSTrafficMonitor, "sharedInstance"));
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v15 service]);
      double v18 = (void *)objc_claimAutoreleasedReturnValue([v17 identifier]);
      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v15 service]);
      id v20 = [v19 adHocServiceType];
      unsigned __int8 v21 = [v16 noteOutgoingServerMessageForService:v18 serviceType:v20 requestor:*(void *)(*((void *)&buf + 1) + 40)];

      if ((v21 & 1) != 0)
      {
        v30[0] = _NSConcreteStackBlock;
        v30[1] = 3221225472LL;
        v30[2] = sub_100357AD8;
        v30[3] = &unk_1008F8A50;
        id v31 = v11;
        [v15 sendServerMessage:v28 command:v29 completionBlock:v30];
      }

      else
      {
        uint64_t v25 = OSLogHandleForIDSCategory("Warning");
        id v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)unsigned int v35 = 138412290;
          id v36 = v15;
          _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_ERROR,  "*** Over budget, failing sendMessage on account: %@",  v35,  0xCu);
        }

        if (os_log_shim_legacy_logging_enabled(v27))
        {
          _IDSWarnV(@"IDSFoundation", @"*** Over budget, failing sendMessage on account: %@");
          _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"*** Over budget, failing sendMessage on account: %@");
          _IDSLogTransport(@"Warning", @"IDS", @"*** Over budget, failing sendMessage on account: %@");
        }
      }
    }

    _Block_object_dispose(&buf, 8);
  }

  else
  {
    uint64_t v22 = OSLogHandleForIDSCategory("IDSDaemon");
    id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "No account found for ID: %@",  (uint8_t *)&buf,  0xCu);
    }
  }
}

- (BOOL)_canSendMessageWithAccount:(id)a3 toDestination:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = OSLogHandleForIDSCategory("IDSDaemon");
  double v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412546;
    id v55 = v6;
    __int16 v56 = 2112;
    id v57 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Daemon Attempting To Send message from account %@ to destinations %@",  buf,  0x16u);
  }

  if (os_log_shim_legacy_logging_enabled(v10) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    id v51 = v6;
    id v53 = v7;
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Daemon Attempting To Send message from account %@ to destinations %@");
  }

  id v11 = (void *)objc_claimAutoreleasedReturnValue([v7 destinationURIs]);
  BOOL v12 = (unint64_t)[v11 count] > 1;

  if (v12)
  {
    uint64_t v13 = OSLogHandleForIDSCategory("IDSDaemon");
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Attempting to send to more than 1 destination, if this is not possible, this will fail further down the daemon",  buf,  2u);
    }

    if (os_log_shim_legacy_logging_enabled(v15) && _IDSShouldLog(0LL, @"IDSDaemon")) {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Attempting to send to more than 1 destination, if this is not possible, this will fail further down the daemon");
    }
LABEL_25:
    char v26 = 1;
    goto LABEL_26;
  }

  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v6 service]);
  unsigned int v17 = [v16 shouldAllowProxyDelivery];

  if (v17)
  {
    uint64_t v18 = OSLogHandleForIDSCategory("IDSService");
    uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "This service supports proxy delivery, which means a local account is allowed to send to a remote destination, al lowing this message to send",  buf,  2u);
    }

    if (os_log_shim_legacy_logging_enabled(v20) && _IDSShouldLog(0LL, @"IDSService")) {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSService",  @"This service supports proxy delivery, which means a local account is allowed to send to a remote destination, allowing this message to send");
    }
    goto LABEL_25;
  }

  unsigned __int8 v21 = (void *)objc_claimAutoreleasedReturnValue([v6 service]);
  unsigned int v22 = [v21 allowSendingMessagesToInactiveDevice];

  if (v22)
  {
    uint64_t v23 = OSLogHandleForIDSCategory("IDSService");
    uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "This service supports sending messages to an inactive device, it is allowed to proceed",  buf,  2u);
    }

    if (os_log_shim_legacy_logging_enabled(v25) && _IDSShouldLog(0LL, @"IDSService")) {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSService",  @"This service supports sending messages to an inactive device, it is allowed to proceed");
    }
    goto LABEL_25;
  }

  id v28 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon pairingManager](self, "pairingManager"));
  id v29 = (void *)objc_claimAutoreleasedReturnValue([v28 pairedDevicePushToken]);
  uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "__imHexString"));

  id v31 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon pairingManager](self, "pairingManager"));
  id v32 = (void *)objc_claimAutoreleasedReturnValue([v31 pairedDeviceUniqueID]);

  id v33 = (void *)objc_claimAutoreleasedReturnValue([v7 destinationURIs]);
  id v34 = (void *)objc_claimAutoreleasedReturnValue([v33 allObjects]);
  unsigned int v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "__imFirstObject"));

  uint64_t v36 = OSLogHandleForIDSCategory("IDSDaemon");
  id v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 138412290;
    id v55 = v7;
    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "Looking at local destination %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v38) && _IDSShouldLog(1LL, @"IDSDaemon"))
  {
    id v52 = v7;
    _IDSLogV(1LL, @"IDSFoundation", @"IDSDaemon", @"Looking at local destination %@");
  }

  uint64_t v39 = OSLogHandleForIDSCategory("IDSDaemon");
  id v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
  if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 138412290;
    id v55 = v30;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "The paired device push token is %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v41) && _IDSShouldLog(1LL, @"IDSDaemon"))
  {
    id v52 = v30;
    _IDSLogV(1LL, @"IDSFoundation", @"IDSDaemon", @"The paired device push token is %@");
  }

  uint64_t v42 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v43 = (os_log_s *)objc_claimAutoreleasedReturnValue(v42);
  if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)__int128 buf = 138412290;
    id v55 = v32;
    _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "The paired device UUID is %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v44) && _IDSShouldLog(1LL, @"IDSDaemon"))
  {
    id v52 = v32;
    _IDSLogV(1LL, @"IDSFoundation", @"IDSDaemon", @"The paired device UUID is %@");
  }

  unsigned int v45 = objc_msgSend(v35, "isEqualToIgnoringCase:", IDSDefaultPairedDevice, v52);
  id v46 = (void *)objc_claimAutoreleasedReturnValue([v35 _stripFZIDPrefix]);
  unsigned int v47 = [v46 isEqualToIgnoringCase:v32];

  id v48 = [v35 length];
  if (v48)
  {
    id v48 = [v30 length];
    if (v48) {
      LODWORD(v48) = [v35 containsString:v30];
    }
  }

  if (((v45 | v47) & 1) != 0 || (_DWORD)v48)
  {
    id v49 = (void *)objc_claimAutoreleasedReturnValue(+[IDSQuickSwitchHelper sharedInstance](&OBJC_CLASS___IDSQuickSwitchHelper, "sharedInstance"));
    unsigned __int8 v50 = [v49 isQuickSwitchingToAnotherDevice];

    char v26 = v50 ^ 1;
  }

  else
  {
    char v26 = 0;
  }

LABEL_26:
  return v26;
}

- (void)_fetchAccountEntitlements:(id *)a3 listenerID:(id *)a4 inContext:(id)a5
{
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([a5 localObject]);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_1003583F0;
  v9[3] = &unk_100901F10;
  void v9[4] = a3;
  v9[5] = a4;
  -[IDSDaemon validateListenerForLocalObject:andPerformBlock:]( self,  "validateListenerForLocalObject:andPerformBlock:",  v8,  v9);
}

- (void)sendOpportunisticData:(id)a3 onService:(id)a4 usingAccountWithUniqueID:(id)a5 withIdentifier:(id)a6 options:(id)a7 messageContext:(id)a8
{
  id v14 = a3;
  id v15 = a4;
  id v16 = a5;
  id v17 = a6;
  id v18 = a7;
  id v19 = a8;
  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v19 localObject]);
  if (-[IDSDaemon validateListenerForLocalObject:andCheckEntitlement:]( self,  "validateListenerForLocalObject:andCheckEntitlement:",  v20,  kIDSMessagingEntitlement))
  {

LABEL_4:
    uint64_t v23 = OSLogHandleForIDSCategory("IDSDaemon");
    uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412546;
      id v35 = v17;
      __int16 v36 = 2112;
      id v37 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "Received data %@ to be cached and sent opportunistically on service %@",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v25) && _IDSShouldLog(0LL, @"IDSDaemon"))
    {
      id v32 = v17;
      id v33 = v15;
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Received data %@ to be cached and sent opportunistically on service %@");
    }

    char v26 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon opportunisticDeliveryController](self, "opportunisticDeliveryController", v32, v33));
    id v27 = [[IDSOpportunisticOptions alloc] initWithDictionary:v18];
    [v26 addOpportunisticData:v14 serviceName:v15 accountUniqueID:v16 identifier:v17 options:v27 completion:0];

    goto LABEL_10;
  }

  unsigned __int8 v21 = (void *)objc_claimAutoreleasedReturnValue([v19 localObject]);
  unsigned __int8 v22 = -[IDSDaemon validateListenerForLocalObject:andCheckEntitlement:]( self,  "validateListenerForLocalObject:andCheckEntitlement:",  v21,  kIDSTestToolEntitlement);

  if ((v22 & 1) != 0) {
    goto LABEL_4;
  }
  uint64_t v28 = OSLogHandleForIDSCategory("IDSDaemon");
  id v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([v19 localObject]);
    *(_DWORD *)__int128 buf = 138412546;
    id v35 = v30;
    __int16 v36 = 2112;
    id v37 = v16;
    _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "Tried to send opportunistic data without entitlement {localObject: %@, uniqueID: %@}",  buf,  0x16u);
  }

  if (os_log_shim_legacy_logging_enabled(v31) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    char v26 = (void *)objc_claimAutoreleasedReturnValue([v19 localObject]);
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Tried to send opportunistic data without entitlement {localObject: %@, uniqueID: %@}");
LABEL_10:
  }
}

- (void)cancelOpportunisticDataOnService:(id)a3 withIdentifier:(id)a4 messageContext:(id)a5
{
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 localObject]);
  if (-[IDSDaemon validateListenerForLocalObject:andCheckEntitlement:]( self,  "validateListenerForLocalObject:andCheckEntitlement:",  v11,  kIDSMessagingEntitlement))
  {

LABEL_4:
    uint64_t v14 = OSLogHandleForIDSCategory("IDSDaemon");
    id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412546;
      id v25 = v9;
      __int16 v26 = 2112;
      id v27 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Cancel opportunistic send {identifier: %@, serviceName: %@}",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v16) && _IDSShouldLog(0LL, @"IDSDaemon"))
    {
      id v22 = v9;
      id v23 = v8;
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Cancel opportunistic send {identifier: %@, serviceName: %@}");
    }

    id v17 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon opportunisticDeliveryController](self, "opportunisticDeliveryController", v22, v23));
    [v17 removeOpportunisticDataForIdentifier:v9 serviceName:v8 completion:0];
    goto LABEL_10;
  }

  BOOL v12 = (void *)objc_claimAutoreleasedReturnValue([v10 localObject]);
  unsigned __int8 v13 = -[IDSDaemon validateListenerForLocalObject:andCheckEntitlement:]( self,  "validateListenerForLocalObject:andCheckEntitlement:",  v12,  kIDSTestToolEntitlement);

  if ((v13 & 1) != 0) {
    goto LABEL_4;
  }
  uint64_t v18 = OSLogHandleForIDSCategory("IDSDaemon");
  id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v10 localObject]);
    *(_DWORD *)__int128 buf = 138412546;
    id v25 = v20;
    __int16 v26 = 2112;
    id v27 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Tried to cancel opportunistic data without entitlement {localObject: %@, identifier: %@}",  buf,  0x16u);
  }

  if (os_log_shim_legacy_logging_enabled(v21) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    id v17 = (void *)objc_claimAutoreleasedReturnValue([v10 localObject]);
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Tried to cancel opportunistic data without entitlement {localObject: %@, identifier: %@}");
LABEL_10:
  }
}

- (BOOL)dropMessageIfDropPointIsDetectedWithSendParameters:(id)a3
{
  id v3 = a3;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 dropMessageIndicatorCommand]);

  if (v4)
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 dropMessageIndicatorCommand]);
    id v6 = [v5 integerValue];

    uint64_t v7 = OSLogHandleForIDSCategory("IDSDaemon");
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 134217984;
      id v15 = v6;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "%li Drop point detected.", buf, 0xCu);
    }

    if (v6 == (id)100)
    {
      uint64_t v10 = OSLogHandleForIDSCategory("IDSDaemon");
      id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Sender's IDSDaemon will drop message.",  buf,  2u);
      }

      LOBYTE(v4) = 1;
    }

    else
    {
      LOBYTE(v4) = 0;
    }
  }

  return (char)v4;
}

- (BOOL)shouldDropMessageIfOutOfFamilyPhoneNumber:(id)a3 forService:(id)a4 withAppleIDAccount:(id)a5
{
  id v7 = a3;
  id v8 = a4;
  id v9 = a5;
  if ([v8 iCloudBasedService] && objc_msgSend(v8, "isFamilyService"))
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 prefixedURIStringsFromRegistration]);
    unsigned int v11 = [v10 containsObject:v7] ^ 1;
  }

  else
  {
    LOBYTE(v11) = 0;
  }

  return v11;
}

- (int64_t)_signatureTypeForSigningAlgorithm:(int64_t)a3
{
  int64_t v3 = -1000LL;
  if (a3 == 2) {
    int64_t v3 = 1LL;
  }
  if (a3 == 3) {
    return 2LL;
  }
  else {
    return v3;
  }
}

- (void)signData:(id)a3 withAlgorithm:(int64_t)a4 onService:(id)a5 options:(id)a6 requestUUID:(id)a7 messageContext:(id)a8
{
  id v14 = a3;
  id v15 = a5;
  id v16 = a6;
  id v17 = a7;
  id v18 = a8;
  uint64_t v20 = im_primary_queue(v18, v19);
  uint64_t v21 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v20);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100358E48;
  block[3] = &unk_1008FFA20;
  id v28 = v18;
  id v29 = v16;
  id v30 = v17;
  id v31 = v14;
  id v33 = self;
  int64_t v34 = a4;
  id v32 = v15;
  id v22 = v15;
  id v23 = v14;
  id v24 = v17;
  id v25 = v16;
  id v26 = v18;
  dispatch_async(v21, block);
}

- (void)verifySignedData:(id)a3 matchesData:(id)a4 forAlgorithm:(int64_t)a5 onService:(id)a6 tokenUri:(id)a7 options:(id)a8 requestUUID:(id)a9 messageContext:(id)a10
{
  id v15 = a3;
  id v16 = a4;
  id v17 = a6;
  id v18 = a7;
  id v19 = a8;
  id v20 = a9;
  id v21 = a10;
  uint64_t v23 = im_primary_queue(v21, v22);
  id v24 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v23);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100359764;
  block[3] = &unk_100901F38;
  id v34 = v21;
  id v35 = v19;
  id v36 = v20;
  id v37 = v15;
  id v38 = v16;
  id v39 = v17;
  id v40 = v18;
  uint64_t v41 = self;
  int64_t v42 = a5;
  id v25 = v18;
  id v26 = v17;
  id v27 = v16;
  id v28 = v15;
  id v29 = v20;
  id v30 = v19;
  id v31 = v21;
  dispatch_async(v24, block);
}

- (void)sendMessageWithSendParameters:(id)a3 messageContext:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v9 = im_primary_queue(v7, v8);
  uint64_t v10 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v9);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10035A75C;
  block[3] = &unk_1008F5F58;
  void block[4] = self;
  id v15 = v7;
  id v16 = v6;
  id v11 = v6;
  id v12 = v7;
  dispatch_block_t v13 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, block);
  dispatch_async(v10, v13);
}

- (void)sendCertifiedDeliveryReceipt:(id)a3 serviceName:(id)a4 messageContext:(id)a5
{
  id v7 = a3;
  id v89 = a4;
  id v87 = a5;
  id v88 = v7;
  if (v7 && v89)
  {
    id v8 = [[IDSCertifiedDeliveryContext alloc] initWithDictionaryRepresentation:v7];
    if ([v8 generateDeliveryReceipt])
    {
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 queryUpdateNotifier]);
      id v11 = objc_alloc(&OBJC_CLASS___IDSURI);
      id v12 = (void *)objc_claimAutoreleasedReturnValue([v8 localURI]);
      dispatch_block_t v13 = -[IDSURI initWithPrefixedURI:](v11, "initWithPrefixedURI:", v12);
      id v14 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDServiceController sharedInstance](&OBJC_CLASS___IDSDServiceController, "sharedInstance"));
      id v15 = (void *)objc_claimAutoreleasedReturnValue([v8 service]);
      id v16 = (void *)objc_claimAutoreleasedReturnValue([v14 serviceWithPushTopic:v15]);
      id v17 = (void *)objc_claimAutoreleasedReturnValue([v10 devicesHashForURI:v13 andService:v16]);

      if (v17)
      {
        id v18 = [[IDSCertifiedDeliveryContext alloc] initWithCertifiedDeliveryContext:v8 queryHash:v17];

        uint64_t v19 = OSLogHandleForIDSCategory("IDSDAccount");
        id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          id v21 = (id)objc_claimAutoreleasedReturnValue([v17 debugDescription]);
          uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v18 localURI]);
          uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v18 service]);
          *(_DWORD *)__int128 buf = 134218754;
          id v95 = v18;
          __int16 v96 = 2112;
          id v97 = v21;
          __int16 v98 = 2112;
          id v99 = v22;
          __int16 v100 = 2112;
          id v101 = v23;
          _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "Added query update hash to certified delivery receipt {certifiedDeliveryReceipt: %p, hash: %@, fromURI: %@, service: %@}",  buf,  0x2Au);
        }

        if (os_log_shim_legacy_logging_enabled(v24)
          && _IDSShouldLog(0LL, @"IDSDAccount"))
        {
          id v25 = (void *)objc_claimAutoreleasedReturnValue([v17 debugDescription]);
          uint64_t v75 = (void *)objc_claimAutoreleasedReturnValue([v18 localURI]);
          uint64_t v76 = (void *)objc_claimAutoreleasedReturnValue([v18 service]);
          id v71 = v18;
          uint64_t v73 = v25;
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDAccount",  @"Added query update hash to certified delivery receipt {certifiedDeliveryReceipt: %p, hash: %@, fromURI: %@, service: %@}");
        }
      }

      else
      {
        id v18 = v8;
      }
    }

    else
    {
      id v18 = v8;
    }

    uint64_t v26 = OSLogHandleForIDSCategory("IDSDaemon");
    id v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v95 = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "sendCertifiedDeliveryReceipt - { certifiedDeliveryContext: %@ }",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v28) && _IDSShouldLog(0LL, @"IDSDaemon"))
    {
      id v71 = v18;
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"sendCertifiedDeliveryReceipt - { certifiedDeliveryContext: %@ }");
    }

    id v29 = (void *)objc_claimAutoreleasedReturnValue( +[IDSEncryptionController sharedInstance]( &OBJC_CLASS___IDSEncryptionController,  "sharedInstance",  v71,  v73,  v75,  v76));
    v92[0] = _NSConcreteStackBlock;
    v92[1] = 3221225472LL;
    v92[2] = sub_10035D2E4;
    v92[3] = &unk_1008F5F80;
    v92[4] = self;
    id v30 = v18;
    id v93 = v30;
    [v29 performSyncBlock:v92 priority:300];

    id v31 = (void *)objc_claimAutoreleasedReturnValue([v30 replayKey]);
    if (v31)
    {
      replayKeyToMessageUUIDMap = self->_replayKeyToMessageUUIDMap;
      id v33 = (void *)objc_claimAutoreleasedReturnValue([v30 replayKey]);
      -[NSMutableDictionary removeObjectForKey:](replayKeyToMessageUUIDMap, "removeObjectForKey:", v33);
    }

    id v34 = [[IDSCertifiedDeliveryReceiptMessage alloc] initWithCertifiedDeliveryContext:v30];
    if (_os_feature_enabled_impl("IDS", "EncryptedReceipt")
      && [v30 originalEncryptionType] == (id)5
      && [v34 certifiedDeliveryVersion] == (id)2)
    {
      id v35 = (void *)objc_claimAutoreleasedReturnValue([v30 remoteURI]);
      id v36 = (void *)objc_claimAutoreleasedReturnValue([v30 service]);
      id v83 = (void *)objc_claimAutoreleasedReturnValue( +[IDSURI URIWithPrefixedURI:withServiceLoggingHint:]( &OBJC_CLASS___IDSURI,  "URIWithPrefixedURI:withServiceLoggingHint:",  v35,  v36));

      id v37 = (void *)objc_claimAutoreleasedReturnValue([v30 localURI]);
      id v38 = (void *)objc_claimAutoreleasedReturnValue([v30 service]);
      id v82 = (void *)objc_claimAutoreleasedReturnValue( +[IDSURI URIWithPrefixedURI:withServiceLoggingHint:]( &OBJC_CLASS___IDSURI,  "URIWithPrefixedURI:withServiceLoggingHint:",  v37,  v38));

      id v84 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
      if (_os_feature_enabled_impl("IDS", "CarrierPigeon"))
      {
        id v39 = (void *)objc_claimAutoreleasedReturnValue([v30 originalGUID]);
        uint64_t v40 = objc_claimAutoreleasedReturnValue( -[IDSDaemon _populateDictionaryWithSenderKeyCheck:remoteURI:localURI:originalGUID:]( self,  "_populateDictionaryWithSenderKeyCheck:remoteURI:localURI:originalGUID:",  v84,  v83,  v82,  v39));

        id v84 = (void *)v40;
      }

      uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue([v34 queryHash]);
      int64_t v42 = (NSMutableData *)[v41 copy];

      if (!v42) {
        int64_t v42 = -[NSMutableData initWithLength:](objc_alloc(&OBJC_CLASS___NSMutableData), "initWithLength:", 32LL);
      }
      __int16 v77 = v42;
      [v84 setObject:v42 forKey:IDSQueryHashKey];
      id v43 = [v84 copy];
      uint64_t v44 = JWEncodeDictionary(v43);
      uint64_t v81 = (void *)objc_claimAutoreleasedReturnValue(v44);

      unsigned int v45 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPeerIDManager sharedInstance](&OBJC_CLASS___IDSPeerIDManager, "sharedInstance"));
      id v46 = (void *)objc_claimAutoreleasedReturnValue([v30 senderToken]);
      unsigned int v47 = (void *)objc_claimAutoreleasedReturnValue([v30 service]);
      id v48 = (void *)objc_claimAutoreleasedReturnValue( +[IDSPushToken pushTokenWithData:withServiceLoggingHint:]( &OBJC_CLASS___IDSPushToken,  "pushTokenWithData:withServiceLoggingHint:",  v46,  v47));
      id v49 = (void *)objc_claimAutoreleasedReturnValue([v30 service]);
      id v80 = (void *)objc_claimAutoreleasedReturnValue([v45 endpointForPushToken:v48 URI:v83 service:v49 fromURI:v82]);

      uint64_t v91 = 2LL;
      id v78 = objc_alloc(&OBJC_CLASS___IDSCryptionContext);
      id v86 = (void *)objc_claimAutoreleasedReturnValue([v30 originalGUID]);
      unsigned __int8 v50 = (void *)objc_claimAutoreleasedReturnValue( +[IDSPushHandler sharedInstanceWithPortName:]( &OBJC_CLASS___IDSPushHandler,  "sharedInstanceWithPortName:",  @"com.apple.identityservicesd.aps"));
      id v51 = (void *)objc_claimAutoreleasedReturnValue([v50 pushToken]);
      id v52 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPushToken pushTokenWithData:](&OBJC_CLASS___IDSPushToken, "pushTokenWithData:", v51));
      id v53 = (void *)objc_claimAutoreleasedReturnValue([v30 senderToken]);
      id v54 = (void *)objc_claimAutoreleasedReturnValue([v30 service]);
      id v55 = (void *)objc_claimAutoreleasedReturnValue( +[IDSPushToken pushTokenWithData:withServiceLoggingHint:]( &OBJC_CLASS___IDSPushToken,  "pushTokenWithData:withServiceLoggingHint:",  v53,  v54));
      __int16 v56 = (void *)objc_claimAutoreleasedReturnValue([v30 service]);
      id v79 = -[IDSCryptionContext initWithGuid:sendingURI:sendingPushToken:receivingURI:receivingPushToken:service:]( v78,  "initWithGuid:sendingURI:sendingPushToken:receivingURI:receivingPushToken:service:",  v86,  v82,  v52,  v83,  v55,  v56);

      id v57 = (void *)objc_claimAutoreleasedReturnValue(+[IDSEncryptionController sharedInstance](&OBJC_CLASS___IDSEncryptionController, "sharedInstance"));
      id v90 = 0LL;
      id v58 = (void *)objc_claimAutoreleasedReturnValue( [v57 publicKeyEncryptData:v81 encryptionContext:v79 forceSizeOptimizations:0 resetState:0 withEncryptedAttributes :0 toEndpoint:v80 usedEncryptionType:&v91 priority:300 metadata:0 error:&v90]);
      id v59 = v90;
      [v34 setEncryptedData:v58];

      if (v59)
      {
        uint64_t v60 = OSLogHandleForIDSCategory("IDSDaemon");
        __int128 v61 = (os_log_s *)objc_claimAutoreleasedReturnValue(v60);
        if (os_log_type_enabled(v61, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v62 = (void *)objc_claimAutoreleasedReturnValue([v59 localizedDescription]);
          *(_DWORD *)__int128 buf = 138412290;
          id v95 = v62;
          _os_log_impl( (void *)&_mh_execute_header,  v61,  OS_LOG_TYPE_DEBUG,  "Failed to encrypt certified delivery receipt { encryptionError: %@ } ",  buf,  0xCu);
        }

        if (os_log_shim_legacy_logging_enabled(v63)
          && _IDSShouldLog(2LL, @"IDSDaemon"))
        {
          uint64_t v72 = (void *)objc_claimAutoreleasedReturnValue([v59 localizedDescription]);
          _IDSLogV( 2LL,  @"IDSFoundation",  @"IDSDaemon",  @"Failed to encrypt certified delivery receipt { encryptionError: %@ } ");
        }
      }

      if (v91 == 5)
      {
        uint64_t v64 = IDSEncryptionTypeStringFromEncryptionType(5LL);
        uint64_t v65 = (void *)objc_claimAutoreleasedReturnValue(v64);
        [v34 setEncryptionType:v65];

        [v34 setQueryHash:0];
      }

      else
      {
        [v34 setEncryptedData:0];
      }

      uint64_t v66 = OSLogHandleForIDSCategory("IDSDaemon");
      uint64_t v67 = (os_log_s *)objc_claimAutoreleasedReturnValue(v66);
      if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
      {
        BOOL v68 = (void *)objc_claimAutoreleasedReturnValue([v84 allKeys]);
        *(_DWORD *)__int128 buf = 138412546;
        id v95 = v59;
        __int16 v96 = 2112;
        id v97 = v68;
        _os_log_impl( (void *)&_mh_execute_header,  v67,  OS_LOG_TYPE_DEFAULT,  "Will send encrypted receipt { encryptionError: %@, dictToSerialize.keys: %@ }",  buf,  0x16u);
      }

      if (os_log_shim_legacy_logging_enabled(v69) && _IDSShouldLog(0LL, @"IDSDaemon"))
      {
        uint64_t v72 = v59;
        id v74 = (void *)objc_claimAutoreleasedReturnValue([v84 allKeys]);
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Will send encrypted receipt { encryptionError: %@, dictToSerialize.keys: %@ }");
      }
    }

    uint64_t v70 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDeliveryController sharedInstance]( &OBJC_CLASS___IDSDeliveryController,  "sharedInstance",  v72,  v74));
    [v70 sendIDSMessage:v34 service:0 topic:v89 completionBlock:0];
  }
}

- (void)cancelMessageWithQueueOneIdentifier:(id)a3 fromID:(id)a4 service:(id)a5 accountUniqueID:(id)a6 messageIdentifier:(id)a7 messageContext:(id)a8
{
  id v14 = a3;
  id v15 = a4;
  id v16 = a5;
  id v17 = a6;
  id v18 = a7;
  id v19 = a8;
  uint64_t v20 = OSLogHandleForIDSCategory("IDSDaemon");
  id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v19 localObject]);
    *(_DWORD *)__int128 buf = 138413570;
    id v42 = v14;
    __int16 v43 = 2112;
    id v44 = v15;
    __int16 v45 = 2112;
    id v46 = v16;
    __int16 v47 = 2112;
    id v48 = v18;
    __int16 v49 = 2112;
    id v50 = v17;
    __int16 v51 = 2048;
    id v52 = v22;
    _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "cancelMessageWithQueueOneIdentifier: %@  fromID: %@  service: %@ messageIdentifier: %@ accountUniqueID: %@ localObject %p",  buf,  0x3Eu);
  }

  if (os_log_shim_legacy_logging_enabled(v23) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    id v32 = v17;
    id v33 = (void *)objc_claimAutoreleasedReturnValue([v19 localObject]);
    id v30 = v16;
    id v31 = v18;
    id v28 = v14;
    id v29 = v15;
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"cancelMessageWithQueueOneIdentifier: %@  fromID: %@  service: %@ messageIdentifier: %@ accountUniqueID: %@ localObject %p");
  }

  if (objc_msgSend(v14, "length", v28, v29, v30, v31, v32, v33))
  {
    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v19 localObject]);
    unsigned int v25 = -[IDSDaemon validateListenerForLocalObject:andCheckEntitlement:forAccessToServiceWithIdentifier:]( self,  "validateListenerForLocalObject:andCheckEntitlement:forAccessToServiceWithIdentifier:",  v24,  kIDSMessagingEntitlement,  v16);

    if (v25)
    {
      id v26 = [[IDSCancelMessage alloc] initWithQueueOneIdentifier:v14 fromID:v15];
      id v27 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDeliveryController sharedInstance](&OBJC_CLASS___IDSDeliveryController, "sharedInstance"));
      v34[0] = _NSConcreteStackBlock;
      v34[1] = 3221225472LL;
      v34[2] = sub_10035D65C;
      v34[3] = &unk_100901F88;
      id v35 = v14;
      id v36 = v15;
      id v37 = v16;
      id v38 = v18;
      id v39 = v19;
      id v40 = v17;
      [v27 sendIDSMessage:v26 service:0 topic:v37 completionBlock:v34];
    }
  }
}

- (void)_sendErrorMessage:(id)a3 originalCommand:(id)a4 fromURI:(id)a5 toDestinations:(id)a6 usingAccountWithUniqueID:(id)a7 useDictAsTopLevel:(BOOL)a8 dataToEncrypt:(id)a9 wantsResponse:(BOOL)a10 timeout:(double)a11 command:(id)a12 priority:(int64_t)a13 completionBlock:(id)a14
{
  BOOL v76 = a8;
  id v20 = a3;
  id v21 = a4;
  id v80 = a5;
  id v22 = a6;
  id v23 = a7;
  id v77 = a9;
  id v78 = a12;
  id v79 = a14;
  uint64_t v24 = OSLogHandleForIDSCategory("IDSDaemon");
  unsigned int v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "sendErrorMessage - finding Account", buf, 2u);
  }

  id v27 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon accountController](self, "accountController"));
  id v28 = (void *)objc_claimAutoreleasedReturnValue([v27 accountWithUniqueID:v23]);

  if (v28)
  {
    if ([v21 integerValue] == (id)101)
    {
      uint64_t v29 = OSLogHandleForIDSCategory("IDSDaemon");
      id v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "Got a 101 - not sending 120", buf, 2u);
      }
    }

    else
    {
      uint64_t v35 = OSLogHandleForIDSCategory("IDSDaemon");
      id v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int128 buf = 138412290;
        id v85 = v28;
        _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEBUG,  "sendErrorMessage - got account %@",  buf,  0xCu);
      }

      if (os_log_shim_legacy_logging_enabled(v37) && _IDSShouldLog(1LL, @"IDSDaemon"))
      {
        uint64_t v64 = v28;
        _IDSLogV(1LL, @"IDSFoundation", @"IDSDaemon", @"sendErrorMessage - got account %@");
      }

      id v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "primaryRegistration", v64));
      id v39 = (void *)objc_claimAutoreleasedReturnValue([v38 dsHandle]);
      id v74 = (void *)objc_claimAutoreleasedReturnValue([v39 _stripFZIDPrefix]);

      id v40 = (void *)objc_claimAutoreleasedReturnValue([v28 service]);
      id v41 = [v40 shouldRegisterUsingDSHandle];

      id v42 = (void *)objc_claimAutoreleasedReturnValue([v28 service]);
      __int16 v43 = (void *)objc_claimAutoreleasedReturnValue([v42 identifier]);
      uint64_t v44 = _IDSPrefersPhoneNumbersForServiceIdentifier(v43);

      __int16 v45 = (void *)objc_claimAutoreleasedReturnValue([v80 unprefixedURI]);
      id v46 = (void *)objc_claimAutoreleasedReturnValue([v28 unprefixedURIStringsFromRegistration]);
      __int16 v47 = (void *)objc_claimAutoreleasedReturnValue([v28 pseudonyms]);
      uint64_t v75 = (void *)_IDSCopyCallerIDWithPseudonyms(v45, v46, v47, v74, v41, v44);

      uint64_t v48 = OSLogHandleForIDSCategory("IDSDaemon");
      __int16 v49 = (os_log_s *)objc_claimAutoreleasedReturnValue(v48);
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
      {
        id v50 = (void *)objc_claimAutoreleasedReturnValue([v28 unprefixedURIStringsFromRegistration]);
        *(_DWORD *)__int128 buf = 138412546;
        id v85 = v75;
        __int16 v86 = 2112;
        id v87 = v50;
        _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_DEBUG,  "sendErrorMessage - using fromID %@ given aliases %@",  buf,  0x16u);
      }

      if (os_log_shim_legacy_logging_enabled(v51) && _IDSShouldLog(1LL, @"IDSDaemon"))
      {
        uint64_t v65 = v75;
        uint64_t v67 = (void *)objc_claimAutoreleasedReturnValue([v28 unprefixedURIStringsFromRegistration]);
        _IDSLogV( 1LL,  @"IDSFoundation",  @"IDSDaemon",  @"sendErrorMessage - using fromID %@ given aliases %@");
      }

      id v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "destinationURIs", v65, v67));
      id v53 = (void *)objc_claimAutoreleasedReturnValue([v52 allObjects]);
      id v54 = sub_10011BB60(v53, v28);
      id v55 = (void *)objc_claimAutoreleasedReturnValue(v54);

      __int16 v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v55));
      uint64_t v57 = objc_claimAutoreleasedReturnValue(+[IDSDestination destinationWithStrings:](&OBJC_CLASS___IDSDestination, "destinationWithStrings:", v56));

      id v58 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringGUID](&OBJC_CLASS___NSString, "stringGUID"));
      uint64_t v59 = OSLogHandleForIDSCategory("IDSDaemon");
      uint64_t v60 = (os_log_s *)objc_claimAutoreleasedReturnValue(v59);
      if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138413058;
        id v85 = v28;
        __int16 v86 = 2112;
        id v87 = v20;
        __int16 v88 = 2112;
        uint64_t v89 = v57;
        __int16 v90 = 2112;
        uint64_t v91 = v58;
        _os_log_impl( (void *)&_mh_execute_header,  v60,  OS_LOG_TYPE_DEFAULT,  "account %@ sendErrorMessage: %@ to: %@ - guid %@",  buf,  0x2Au);
      }

      if (os_log_shim_legacy_logging_enabled(v61) && _IDSShouldLog(0LL, @"IDSDaemon"))
      {
        uint64_t v70 = v57;
        id v71 = v58;
        uint64_t v66 = v28;
        id v68 = v20;
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"account %@ sendErrorMessage: %@ to: %@ - guid %@");
      }

      uint64_t v62 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceNow:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceNow:",  a11,  v66,  v68,  v70,  v71));
      v81[0] = _NSConcreteStackBlock;
      v81[1] = 3221225472LL;
      v81[2] = sub_10035E1DC;
      v81[3] = &unk_100901FB0;
      id v83 = v79;
      id v63 = v58;
      id v82 = v63;
      LOWORD(v73) = 0;
      LOWORD(v72) = 0;
      BYTE1(v69) = a10;
      LOBYTE(v69) = 0;
      objc_msgSend( v28,  "sendMessage:params:bulkedPayload:fromID:toDestinations:useDictAsTopLevel:dataToEncrypt:encryptPayload:wantsRespo nse:expirationDate:command:wantsDeliveryStatus:wantsCertifiedDelivery:deliveryStatusContext:messageUUID:priority :localDelivery:disallowRefresh:willSendBlock:completionBlock:",  v20,  0,  0,  v75,  v57,  v76,  v77,  v69,  v62,  v78,  v72,  0,  0,  a13,  v73,  0,  v81);

      id v22 = (id)v57;
    }
  }

  else
  {
    uint64_t v32 = OSLogHandleForIDSCategory("IDSDaemon");
    id v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v85 = v23;
      _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEBUG,  "(Messaging) No account found for ID: %@",  buf,  0xCu);
    }

    IMLogBacktrace(@"IDSDaemon");
  }
}

- (void)_sendCertifiedDeliveryReceiptIfNeededForNiceMessage:(id)a3 service:(id)a4 failureReason:(id)a5 failureReasonMessage:(id)a6 generateDeliveryReceipt:(BOOL)a7
{
  BOOL v7 = a7;
  id v11 = a3;
  id v41 = a4;
  id v37 = a5;
  id v38 = a6;
  id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 certifiedDeliveryVersion]);
  uint64_t v13 = (uint64_t)[v12 integerValue];

  if (v13 >= 1)
  {
    id v40 = (void *)objc_claimAutoreleasedReturnValue([v11 certifiedDeliveryRTS]);
    id v39 = (void *)objc_claimAutoreleasedReturnValue([v11 pushUUID]);
    if (!v40)
    {
      uint64_t v14 = OSLogHandleForIDSCategory("Warning");
      id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 138412546;
        __int16 v43 = v39;
        __int16 v44 = 2048;
        uint64_t v45 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "No certified delivery RTS found in payload with cdv { guid: %@, cdv: %ld }",  buf,  0x16u);
      }

      if (os_log_shim_legacy_logging_enabled(v16))
      {
        _IDSWarnV( @"IDSFoundation",  @"No certified delivery RTS found in payload with cdv { guid: %@, cdv: %ld }");
        _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"No certified delivery RTS found in payload with cdv { guid: %@, cdv: %ld }");
        _IDSLogTransport( @"Warning",  @"IDS",  @"No certified delivery RTS found in payload with cdv { guid: %@, cdv: %ld }");
      }
    }

    id v17 = objc_alloc(&OBJC_CLASS___IDSCertifiedDeliveryContext);
    id v18 = (void *)objc_claimAutoreleasedReturnValue([v11 encryptionTypeStr]);
    uint64_t v20 = IDSEncryptionTypeFromEncryptionTypeString(v18, v19);
    id v21 = (void *)objc_claimAutoreleasedReturnValue([v11 senderPushToken]);
    id v22 = (void *)objc_claimAutoreleasedReturnValue([v21 rawToken]);
    id v23 = [v17 initWithGUID:v39 service:v41 encryptionType:v20 certifiedDeliveryVersion:v13 certifiedDeliveryRTS:v40 senderToken:v22 failureReason:v37  failureReasonMessage:v38];

    if (v7)
    {
      id v35 = objc_alloc(&OBJC_CLASS___IDSCertifiedDeliveryContext);
      id v36 = (void *)objc_claimAutoreleasedReturnValue([v11 encryptionTypeStr]);
      uint64_t v25 = IDSEncryptionTypeFromEncryptionTypeString(v36, v24);
      uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v11 senderPushToken]);
      id v27 = (void *)objc_claimAutoreleasedReturnValue([v26 rawToken]);
      id v28 = (void *)objc_claimAutoreleasedReturnValue([v11 toURI]);
      uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v28 prefixedURI]);
      id v30 = (void *)objc_claimAutoreleasedReturnValue([v11 fromURI]);
      uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v30 prefixedURI]);
      id v32 = [v35 initWithGUID:v39 service:v41 encryptionType:v25 certifiedDeliveryVersion:v13 certifiedDeliveryRTS:v40 senderToken:v27 localURI:v29 remoteURI:v31];

      [v32 setGenerateDeliveryReceipt:1];
    }

    else
    {
      id v32 = v23;
    }

    id v33 = [[IDSCertifiedDeliveryReceiptMessage alloc] initWithCertifiedDeliveryContext:v32];
    uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDeliveryController sharedInstance](&OBJC_CLASS___IDSDeliveryController, "sharedInstance"));
    [v34 sendIDSMessage:v33 service:0 topic:v41 completionBlock:0];
  }
}

- (void)_sendCertifiedDeliveryReceiptForSenderKeyDistributionMessage:(id)a3 service:(id)a4 keyIDs:(id)a5
{
  id v7 = a3;
  id v31 = a4;
  id v32 = a5;
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 certifiedDeliveryVersion]);
  id v9 = [v8 integerValue];

  if (v9)
  {
    id v29 = objc_alloc(&OBJC_CLASS___IDSCertifiedDeliveryContext);
    id v30 = (void *)objc_claimAutoreleasedReturnValue([v7 pushUUID]);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v7 encryptionTypeStr]);
    uint64_t v28 = IDSEncryptionTypeFromEncryptionTypeString(v10, v11);
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v7 certifiedDeliveryRTS]);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v7 senderPushToken]);
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v13 rawToken]);
    id v15 = (void *)objc_claimAutoreleasedReturnValue([v7 toURI]);
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 prefixedURI]);
    id v17 = (void *)objc_claimAutoreleasedReturnValue([v7 fromURI]);
    id v18 = (void *)objc_claimAutoreleasedReturnValue([v17 prefixedURI]);
    id v19 = [v29 initWithGUID:v30 service:v31 encryptionType:v28 certifiedDeliveryVersion:v9 certifiedDeliveryRTS:v12 senderToken:v14 localURI:v16 remoteURI:v18];

    if ([v32 count])
    {
      uint64_t v37 = IDSSenderKeyIDCheckKey;
      id v38 = v32;
      uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v38,  &v37,  1LL));
      [v19 setDeliveryStatusContext:v20];

      [v19 setGenerateDeliveryReceipt:1];
    }

    uint64_t v21 = OSLogHandleForIDSCategory("IDSDaemon_SenderKey");
    id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v23 = [v19 generateDeliveryReceipt];
      uint64_t v24 = @"NO";
      if (v23) {
        uint64_t v24 = @"YES";
      }
      *(_DWORD *)__int128 buf = 138412546;
      id v34 = v32;
      __int16 v35 = 2112;
      id v36 = v24;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "Sending certified delivery receipt for keyIDs: %@ generateDeliveryReceipt: %@",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v25)
      && _IDSShouldLog(0LL, @"IDSDaemon_SenderKey"))
    {
      [v19 generateDeliveryReceipt];
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon_SenderKey",  @"Sending certified delivery receipt for keyIDs: %@ generateDeliveryReceipt: %@");
    }

    id v26 = [[IDSCertifiedDeliveryReceiptMessage alloc] initWithCertifiedDeliveryContext:v19];
    id v27 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDeliveryController sharedInstance](&OBJC_CLASS___IDSDeliveryController, "sharedInstance"));
    [v27 sendIDSMessage:v26 service:0 topic:v31 completionBlock:0];
  }
}

- (void)_processCertifiedDeliveryReceiptForSenderKeyDistribution:(id)a3 service:(id)a4
{
  id v13 = a3;
  uint64_t v6 = objc_opt_class(&OBJC_CLASS___NSDictionary, v5);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v13 rawMessage]);
  id v8 = sub_10028D3BC(v6, v7, IDSDeliveryStatusContextKey);
  id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);

  if (v9)
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKey:IDSSenderKeyIDCheckKey]);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v13 senderPushToken]);
    id v12 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon senderKeyDistributionManager](self, "senderKeyDistributionManager"));
    [v12 updateDeliveredStateWithKeyIDStrings:v10 pushToken:v11];
  }
}

- (void)setPreferInfraWiFi:(BOOL)a3 service:(id)a4 messageContext:(id)a5
{
  BOOL v6 = a3;
  id v8 = a4;
  id v9 = (void *)objc_claimAutoreleasedReturnValue([a5 localObject]);
  LODWORD(self) = -[IDSDaemon validateListenerForLocalObject:andCheckEntitlement:forAccessToServiceWithIdentifier:]( self,  "validateListenerForLocalObject:andCheckEntitlement:forAccessToServiceWithIdentifier:",  v9,  kIDSPreferInfraWiFiEntitlement,  v8);

  if ((_DWORD)self)
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[IDSUTunDeliveryController sharedInstance]( &OBJC_CLASS___IDSUTunDeliveryController,  "sharedInstance"));
    id v12 = v8;
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v12, 1LL));
    [v10 defaultPeerSetPreferInfraWiFi:v6 services:v11];
  }
}

- (void)setLinkPreferences:(id)a3 service:(id)a4 messageContext:(id)a5
{
  id v12 = a3;
  id v8 = a4;
  id v9 = (void *)objc_claimAutoreleasedReturnValue([a5 localObject]);
  LODWORD(self) = -[IDSDaemon validateListenerForLocalObject:andCheckEntitlement:forAccessToServiceWithIdentifier:]( self,  "validateListenerForLocalObject:andCheckEntitlement:forAccessToServiceWithIdentifier:",  v9,  kIDSLinkPreferencesEntitlement,  v8);

  if ((_DWORD)self)
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[IDSLinkPreferencesManager sharedInstance]( &OBJC_CLASS___IDSLinkPreferencesManager,  "sharedInstance"));
    [v10 updateService:v8 withPreferences:v12];

    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[IDSUTunDeliveryController sharedInstance]( &OBJC_CLASS___IDSUTunDeliveryController,  "sharedInstance"));
    [v11 defaultPeerSetLinkPreferences:v8];
  }
}

- (void)startOTRTest:(id)a3 priority:(int64_t)a4 messageContext:(id)a5
{
  id v7 = a3;
  id v8 = a5;
  uint64_t v9 = OSLogHandleForTransportCategory("IDSDaemon");
  uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412290;
    id v19 = v7;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "start OTR test for %@", buf, 0xCu);
  }

  uint64_t v12 = os_log_shim_legacy_logging_enabled(v11);
  if ((_DWORD)v12)
  {
    if (_IDSShouldLogTransport(v12))
    {
      id v15 = v7;
      _IDSLogTransport(@"IDSDaemon", @"IDS", @"start OTR test for %@");
      if (_IDSShouldLog(0LL, @"IDSDaemon"))
      {
        id v15 = v7;
        _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon", @"start OTR test for %@");
      }
    }
  }

  id v13 = (void *)objc_claimAutoreleasedReturnValue( +[IDSUTunDeliveryController sharedInstance]( &OBJC_CLASS___IDSUTunDeliveryController,  "sharedInstance",  v15));
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  v16[2] = sub_10035EEBC;
  v16[3] = &unk_100901FD8;
  id v17 = v8;
  id v14 = v8;
  [v13 findDefaultPeerToForceOTRNegotiation:v7 priority:a4 completionBlock:v16];
}

- (void)testCloudQRConnection:(id)a3 messageContext:(id)a4
{
  id v5 = a3;
  id v6 = a4;
  uint64_t v7 = OSLogHandleForTransportCategory("IDSDaemon");
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "clean up existing QuickRelay connection for cloud messaging",  buf,  2u);
  }

  uint64_t v10 = os_log_shim_legacy_logging_enabled(v9);
  if ((_DWORD)v10)
  {
    if (_IDSShouldLogTransport(v10))
    {
      _IDSLogTransport( @"IDSDaemon",  @"IDS",  @"clean up existing QuickRelay connection for cloud messaging");
      if (_IDSShouldLog(0LL, @"IDSDaemon")) {
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"clean up existing QuickRelay connection for cloud messaging");
      }
    }
  }

  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[IDSUTunController sharedInstance](&OBJC_CLASS___IDSUTunController, "sharedInstance"));
  uint64_t v12 = kIDSDefaultPairedDeviceID;
  [v11 disconnectGlobalLinkForDevice:kIDSDefaultPairedDeviceID isReinitiating:0 completionHandler:0];

  uint64_t v13 = OSLogHandleForTransportCategory("IDSDaemon");
  id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v18 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "start a new QuickRelay connection for cloud messaging",  v18,  2u);
  }

  uint64_t v16 = os_log_shim_legacy_logging_enabled(v15);
  if ((_DWORD)v16)
  {
    if (_IDSShouldLogTransport(v16))
    {
      _IDSLogTransport(@"IDSDaemon", @"IDS", @"start a new QuickRelay connection for cloud messaging");
      if (_IDSShouldLog(0LL, @"IDSDaemon")) {
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"start a new QuickRelay connection for cloud messaging");
      }
    }
  }

  id v17 = (void *)objc_claimAutoreleasedReturnValue(+[IDSUTunController sharedInstance](&OBJC_CLASS___IDSUTunController, "sharedInstance"));
  [v17 startGlobalLinkForDevice:v12];
}

- (void)failedDecryptingMessage:(id)a3 reason:(int64_t)a4 forGroupID:(id)a5 onService:(id)a6 messageContext:(id)a7
{
  id v12 = a3;
  id v42 = a5;
  id v51 = a6;
  id v43 = a7;
  id v13 = objc_alloc(&OBJC_CLASS___IDSIncomingNiceMessage);
  uint64_t v15 = objc_opt_class(&OBJC_CLASS___NSDictionary, v14);
  uint64_t v45 = v12;
  id v16 = sub_10028D3BC(v15, v12, IDSIncomingMessagePushPayloadKey);
  id v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
  id v18 = [v13 initWithMessageDictionary:v17 topic:v51];

  id v46 = (void *)objc_claimAutoreleasedReturnValue([v18 fromURI]);
  id v50 = (void *)objc_claimAutoreleasedReturnValue([v18 toURI]);
  __int16 v47 = (void *)objc_claimAutoreleasedReturnValue([v18 senderPushToken]);
  value = (void *)objc_claimAutoreleasedReturnValue([v18 pushUUID]);
  __int16 v44 = (void *)objc_claimAutoreleasedReturnValue([v18 command]);
  id v19 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon serviceController](self, "serviceController"));
  __int16 v49 = (void *)objc_claimAutoreleasedReturnValue([v19 serviceWithPushTopic:v51]);

  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v50 prefixedURI]);
  id v22 = (void *)objc_claimAutoreleasedReturnValue([v20 accountOnService:v49 withAliasURI:v21]);

  if (v22)
  {
    if (([v22 shouldRegisterUsingDSHandle] & 1) != 0
      || (unsigned int v23 = (void *)objc_claimAutoreleasedReturnValue([v50 prefixedURI]),
          unsigned __int8 v24 = [v22 hasAliasURI:v23],
          v23,
          (v24 & 1) != 0))
    {
      id v41 = [[IDSIncomingNiceMessage alloc] initWithMessageDictionary:v45 topic:v51];
      uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a4));
      -[IDSDaemon _sendCertifiedDeliveryReceiptIfNeededForNiceMessage:service:failureReason:failureReasonMessage:generateDeliveryReceipt:]( self,  "_sendCertifiedDeliveryReceiptIfNeededForNiceMessage:service:failureReason:failureReasonMessage:generateDeliveryReceipt:",  v41,  v51,  v25,  0LL,  0LL);

      id v26 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      uint64_t v27 = IDSGetUUIDData(value);
      uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
      if (v28) {
        CFDictionarySetValue((CFMutableDictionaryRef)v26, IDSFailedUUIDKey, v28);
      }

      if (value) {
        CFDictionarySetValue((CFMutableDictionaryRef)v26, IDSFailedMessageIDKey, value);
      }
      id v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a4));
      if (v29) {
        CFDictionarySetValue((CFMutableDictionaryRef)v26, IDSFailureReasonKey, v29);
      }

      id v30 = (void *)objc_claimAutoreleasedReturnValue([v47 rawToken]);
      id v31 = (void *)objc_claimAutoreleasedReturnValue([v46 prefixedURI]);
      id v32 = (void *)_IDSCopyIDForTokenWithURI(v30, v31);

      id v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](&OBJC_CLASS___NSSet, "setWithObject:", v32));
      id v34 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDestination destinationWithStrings:]( &OBJC_CLASS___IDSDestination,  "destinationWithStrings:",  v33));
      __int16 v35 = (void *)objc_claimAutoreleasedReturnValue([v22 uniqueID]);
      id v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 120LL));
      v52[0] = _NSConcreteStackBlock;
      v52[1] = 3221225472LL;
      v52[2] = sub_10035F818;
      v52[3] = &unk_1008F8A50;
      id v53 = v47;
      LOBYTE(v40) = 1;
      -[IDSDaemon _sendErrorMessage:originalCommand:fromURI:toDestinations:usingAccountWithUniqueID:useDictAsTopLevel:dataToEncrypt:wantsResponse:timeout:command:priority:completionBlock:]( self,  "_sendErrorMessage:originalCommand:fromURI:toDestinations:usingAccountWithUniqueID:useDictAsTopLevel:dataToEncryp t:wantsResponse:timeout:command:priority:completionBlock:",  v26,  v44,  v50,  v34,  v35,  1LL,  -1.0,  0LL,  v40,  v36,  300LL,  v52);
    }

    else
    {
      uint64_t v37 = OSLogHandleForIDSCategory("Warning");
      id v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 138412546;
        id v55 = v22;
        __int16 v56 = 2112;
        uint64_t v57 = v50;
        _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_ERROR,  "Account: %@ does not have alias URI: %@",  buf,  0x16u);
      }

      if (os_log_shim_legacy_logging_enabled(v39))
      {
        _IDSWarnV(@"IDSFoundation", @"Account: %@ does not have alias URI: %@");
        _IDSLogV(0LL, @"IDSFoundation", @"Warning", @"Account: %@ does not have alias URI: %@");
        _IDSLogTransport(@"Warning", @"IDS", @"Account: %@ does not have alias URI: %@");
      }
    }
  }
}

- (id)_populateDictionaryWithSenderKeyCheck:(id)a3 remoteURI:(id)a4 localURI:(id)a5 originalGUID:(id)a6
{
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  id v57 = a6;
  id v13 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPeerIDManager sharedInstance](&OBJC_CLASS___IDSPeerIDManager, "sharedInstance"));
  id v73 = v11;
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v73, 1LL));
  uint64_t v71 = IDSRegistrationPropertySupportsSenderKey;
  uint64_t v72 = &__kCFBooleanTrue;
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v72,  &v71,  1LL));
  id v16 = (void *)objc_claimAutoreleasedReturnValue( [v13 endpointsForURIs:v14 service:IDSServiceNameiMessage fromURI:v12 withCapabilities:v15]);

  id v17 = (void *)objc_claimAutoreleasedReturnValue([v16 objectForKey:v11]);
  if ([v17 count])
  {
    uint64_t v18 = objc_claimAutoreleasedReturnValue( -[IDSSenderKeyDistributionManager encryptingKeyIDsFor:localURI:]( self->_senderKeyDistributionManager,  "encryptingKeyIDsFor:localURI:",  v11,  v12));
    id v19 = (void *)v18;
    if (v18) {
      uint64_t v20 = (void *)v18;
    }
    else {
      uint64_t v20 = &__NSArray0__struct;
    }
    id v21 = v20;

    uint64_t v22 = objc_claimAutoreleasedReturnValue( -[IDSSenderKeyDistributionManager decryptingKeyIDsFor:localURI:]( self->_senderKeyDistributionManager,  "decryptingKeyIDsFor:localURI:",  v11,  v12));
    unsigned int v23 = (void *)v22;
    if (v22) {
      unsigned __int8 v24 = (void *)v22;
    }
    else {
      unsigned __int8 v24 = &__NSArray0__struct;
    }
    id v25 = v24;

    id v26 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon persistenceManager](self, "persistenceManager"));
    unsigned int v27 = [v26 senderKeyMessageSupportedFor:v17];

    uint64_t v28 = OSLogHandleForIDSCategory("IDSDaemon_SenderKey");
    id v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      id v30 = @"NO";
      *(_DWORD *)__int128 buf = 138413570;
      id v60 = v57;
      if (v27) {
        id v30 = @"YES";
      }
      __int16 v61 = 2112;
      uint64_t v62 = v30;
      __int16 v63 = 2112;
      id v64 = v21;
      __int16 v65 = 2112;
      id v66 = v25;
      __int16 v67 = 2112;
      id v68 = v11;
      __int16 v69 = 2112;
      id v70 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "Piggybacking on c=101 (originalGUID: %@) to send sender keyIDs useNewEncoding: %@ encryptingKeyIDs: %@ decryptin gKeyIDs: %@ {remoteURI: %@, localURI:%@}",  buf,  0x3Eu);
    }

    if (os_log_shim_legacy_logging_enabled(v31)
      && _IDSShouldLog(0LL, @"IDSDaemon_SenderKey"))
    {
      if (v27) {
        id v32 = @"YES";
      }
      else {
        id v32 = @"NO";
      }
      id v55 = v11;
      id v56 = v12;
      id v53 = v21;
      id v54 = v25;
      id v50 = v57;
      id v52 = v32;
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon_SenderKey",  @"Piggybacking on c=101 (originalGUID: %@) to send sender keyIDs useNewEncoding: %@ encryptingKeyIDs: %@ decryptingKeyIDs: %@ {remoteURI: %@, localURI:%@}");
    }

    if (v27)
    {
      if ([v21 count])
      {
        uint64_t v33 = JWEncodeArray(v21);
        id v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
        [v10 setObject:v34 forKeyedSubscript:IDSDeliveryEncryptingSenderKeyIDs];
      }

      if (!objc_msgSend(v25, "count", v50, v52, v53, v54, v55, v56))
      {
        uint64_t v35 = OSLogHandleForIDSCategory("IDSDaemon_SenderKey");
        id v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 138412290;
          id v60 = v11;
          _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "We have no decryptingKeyIDs from remoteURI: %@ - sending empty",  buf,  0xCu);
        }

        if (os_log_shim_legacy_logging_enabled(v37)
          && _IDSShouldLog(0LL, @"IDSDaemon_SenderKey"))
        {
          id v51 = v11;
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon_SenderKey",  @"We have no decryptingKeyIDs from remoteURI: %@ - sending empty");
        }
      }

      id v58 = 0LL;
      id v38 = (void *)objc_claimAutoreleasedReturnValue( +[NSPropertyListSerialization dataWithPropertyList:format:options:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "dataWithPropertyList:format:options:error:",  v25,  200LL,  0LL,  &v58,  v51));
      id v39 = v58;
      uint64_t v40 = v39;
      if (v38 || !v39)
      {
        [v10 setObject:v38 forKeyedSubscript:IDSDeliveryDecryptingSenderKeyIDs];
      }

      else
      {
        uint64_t v41 = OSLogHandleForIDSCategory("IDSDaemon_SenderKey");
        id v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
        if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 138412290;
          id v60 = v25;
          _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEFAULT,  "Error serializing decryptingKeyIDs: %@",  buf,  0xCu);
        }

        if (os_log_shim_legacy_logging_enabled(v43)
          && _IDSShouldLog(0LL, @"IDSDaemon_SenderKey"))
        {
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon_SenderKey",  @"Error serializing decryptingKeyIDs: %@");
        }
      }
    }

    else
    {
      __int16 v44 = (void *)objc_claimAutoreleasedReturnValue([v21 firstObject]);

      if (v44)
      {
        uint64_t v45 = objc_alloc(&OBJC_CLASS___NSData);
        id v46 = (void *)objc_claimAutoreleasedReturnValue([v21 firstObject]);
        __int16 v47 = -[NSData initWithBase64EncodedString:options:](v45, "initWithBase64EncodedString:options:", v46, 0LL);

        [v10 setObject:v47 forKeyedSubscript:@"sK-E"];
      }

      uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "__imArrayByApplyingBlock:", &stru_100901FF8, v50, v52, v53, v54, v55, v56));
      uint64_t v48 = JWEncodeArray(v40);
      id v38 = (void *)objc_claimAutoreleasedReturnValue(v48);
      [v10 setObject:v38 forKeyedSubscript:@"sK-D"];
    }
  }

  return v10;
}

- (void)_handleDeliveryReceiptForSenderKeyCheck:(id)a3 remoteURI:(id)a4 remotePushToken:(id)a5 localURI:(id)a6 originalGUID:(id)a7
{
  id v12 = (const __CFDictionary *)a3;
  id v13 = (__CFString *)a4;
  id v79 = (__CFString *)a5;
  uint64_t v14 = (__CFString *)a6;
  id v78 = (__CFString *)a7;
  Value = 0LL;
  if (v12 && IDSDeliveryEncryptingSenderKeyIDs) {
    Value = (void *)CFDictionaryGetValue(v12, IDSDeliveryEncryptingSenderKeyIDs);
  }
  id v76 = Value;
  uint64_t v16 = JWDecodeArray(v76);
  id v17 = (__CFString *)objc_claimAutoreleasedReturnValue(v16);
  if (IDSDeliveryDecryptingSenderKeyIDs) {
    BOOL v18 = v12 != 0LL;
  }
  else {
    BOOL v18 = 0;
  }
  if (v18) {
    id v19 = (void *)CFDictionaryGetValue(v12, IDSDeliveryDecryptingSenderKeyIDs);
  }
  else {
    id v19 = 0LL;
  }
  id v77 = v19;
  uint64_t v20 = JWDecodeArray(v77);
  id v21 = (__CFString *)objc_claimAutoreleasedReturnValue(v20);
  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  id v80 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  uint64_t v23 = OSLogHandleForIDSCategory("IDSDaemon_SenderKey");
  unsigned __int8 v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138413570;
    id v83 = v78;
    __int16 v84 = 2112;
    id v85 = v14;
    __int16 v86 = 2112;
    id v87 = v13;
    __int16 v88 = 2112;
    uint64_t v89 = v79;
    __int16 v90 = 2112;
    uint64_t v91 = v17;
    __int16 v92 = 2112;
    id v93 = v21;
    _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "Handling c=101 (originalGUID: %@) for sender key check { localURI: %@ remoteURI: %@ remotePushToken: %@ encrypting KeyIDs: %@ decryptingKeyIDs: %@ }",  buf,  0x3Eu);
  }

  if (os_log_shim_legacy_logging_enabled(v25)
    && _IDSShouldLog(0LL, @"IDSDaemon_SenderKey"))
  {
    __int16 v69 = v17;
    id v70 = v21;
    __int16 v65 = v13;
    __int16 v67 = v79;
    uint64_t v59 = v78;
    uint64_t v62 = v14;
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon_SenderKey",  @"Handling c=101 (originalGUID: %@) for sender key check { localURI: %@ remoteURI: %@ remotePushToken: %@ encryptingKeyIDs: %@ decryptingKeyIDs: %@ }");
  }

  if (-[__CFString count](v17, "count", v59, v62, v65, v67, v69, v70))
  {
    id v26 = (void *)objc_claimAutoreleasedReturnValue( -[IDSSenderKeyDistributionManager missingRemoteEncryptingKeyIDs:]( self->_senderKeyDistributionManager,  "missingRemoteEncryptingKeyIDs:",  v17));
    [v22 addObjectsFromArray:v26];
    uint64_t v27 = OSLogHandleForIDSCategory("IDSDaemon_SenderKey");
    uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      id v29 = [v26 count];
      id v30 = @"NO";
      if (!v29) {
        id v30 = @"YES";
      }
      *(_DWORD *)__int128 buf = 138412546;
      id v83 = v30;
      __int16 v84 = 2112;
      id v85 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "Do we have the keyID needed to decrypt from them? %@ %@",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v31)
      && _IDSShouldLog(0LL, @"IDSDaemon_SenderKey"))
    {
      id v32 = [v26 count];
      uint64_t v33 = @"NO";
      if (!v32) {
        uint64_t v33 = @"YES";
      }
      id v60 = v33;
      __int16 v63 = v17;
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon_SenderKey",  @"Do we have the keyID needed to decrypt from them? %@ %@");
    }
  }

  if (v21)
  {
    if (-[__CFString count](v21, "count"))
    {
      id v34 = (void *)objc_claimAutoreleasedReturnValue( -[IDSSenderKeyDistributionManager remoteMissingDecryptingKeyIDs:remoteURI:localURI:]( self->_senderKeyDistributionManager,  "remoteMissingDecryptingKeyIDs:remoteURI:localURI:",  v21,  v13,  v14));
      [v80 addObjectsFromArray:v34];
      uint64_t v35 = OSLogHandleForIDSCategory("IDSDaemon_SenderKey");
      id v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
      {
        id v37 = [v34 count];
        id v38 = @"NO";
        if (!v37) {
          id v38 = @"YES";
        }
        *(_DWORD *)__int128 buf = 138412546;
        id v83 = v38;
        __int16 v84 = 2112;
        id v85 = v21;
        _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "Do they have the keyID needed to decrypt from us? %@ %@",  buf,  0x16u);
      }

      if (os_log_shim_legacy_logging_enabled(v39)
        && _IDSShouldLog(0LL, @"IDSDaemon_SenderKey"))
      {
        id v40 = [v34 count];
        uint64_t v41 = @"NO";
        if (!v40) {
          uint64_t v41 = @"YES";
        }
        id v60 = v41;
        __int16 v63 = v21;
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon_SenderKey",  @"Do they have the keyID needed to decrypt from us? %@ %@");
      }

      -[IDSSenderKeyDistributionManager updateDeliveredStateWithKeyIDStrings:pushToken:]( self->_senderKeyDistributionManager,  "updateDeliveredStateWithKeyIDStrings:pushToken:",  v21,  v79,  v60,  v63);
    }

    else
    {
      uint64_t v42 = OSLogHandleForIDSCategory("IDSDaemon_SenderKey");
      uint64_t v43 = (os_log_s *)objc_claimAutoreleasedReturnValue(v42);
      if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412546;
        id v83 = v13;
        __int16 v84 = 2112;
        id v85 = v79;
        _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEFAULT,  "Received empty decryptingKeyIDs from remoteURI: %@ remotePushToken: %@ - we should reset",  buf,  0x16u);
      }

      if (os_log_shim_legacy_logging_enabled(v44)
        && _IDSShouldLog(0LL, @"IDSDaemon_SenderKey"))
      {
        id v60 = v13;
        __int16 v63 = v79;
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon_SenderKey",  @"Received empty decryptingKeyIDs from remoteURI: %@ remotePushToken: %@ - we should reset");
      }

      -[IDSSenderKeyDistributionManager resetKeyStateWithKeyIDs:senderURI:receiverURI:]( self->_senderKeyDistributionManager,  "resetKeyStateWithKeyIDs:senderURI:receiverURI:",  0LL,  v14,  v13,  v60,  v63);
    }
  }

  if (objc_msgSend(v22, "count", v60, v63) || objc_msgSend(v80, "count"))
  {
    -[IDSSenderKeyDistributionManager triggerKeyRecoveryToURI:fromURI:keysToSend:keysToRequest:]( self->_senderKeyDistributionManager,  "triggerKeyRecoveryToURI:fromURI:keysToSend:keysToRequest:",  v13,  v14,  v80,  v22);
  }

  else
  {
    if (v12)
    {
      uint64_t v75 = (id)CFDictionaryGetValue(v12, @"sK-E");
      uint64_t v45 = (void *)CFDictionaryGetValue(v12, @"sK-D");
    }

    else
    {
      uint64_t v75 = 0LL;
      uint64_t v45 = 0LL;
    }

    id v72 = v45;
    uint64_t v46 = JWDecodeArray(v72);
    id v74 = (void *)objc_claimAutoreleasedReturnValue(v46);
    if (v75)
    {
      id v73 = (__CFString *)objc_claimAutoreleasedReturnValue([v75 base64EncodedStringWithOptions:0]);
      senderKeyDistributionManager = self->_senderKeyDistributionManager;
      uint64_t v81 = v73;
      uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v81, 1LL));
      uint64_t v71 = (void *)objc_claimAutoreleasedReturnValue( -[IDSSenderKeyDistributionManager missingRemoteEncryptingKeyIDs:]( senderKeyDistributionManager,  "missingRemoteEncryptingKeyIDs:",  v48));

      if ([v71 count]) {
        __int16 v49 = @"NO";
      }
      else {
        __int16 v49 = @"YES";
      }
      uint64_t v50 = OSLogHandleForIDSCategory("IDSDaemon_SenderKey");
      id v51 = (os_log_s *)objc_claimAutoreleasedReturnValue(v50);
      if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138413058;
        id v83 = v49;
        __int16 v84 = 2112;
        id v85 = v73;
        __int16 v86 = 2112;
        id v87 = v14;
        __int16 v88 = 2112;
        uint64_t v89 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_DEFAULT,  "(Legacy) Do we have the keyID needed to decrypt from them? %@ %@ {localURI: %@, remoteURI:%@}",  buf,  0x2Au);
      }

      if (os_log_shim_legacy_logging_enabled(v52)
        && _IDSShouldLog(0LL, @"IDSDaemon_SenderKey"))
      {
        id v66 = v14;
        id v68 = v13;
        __int16 v61 = v49;
        id v64 = v73;
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon_SenderKey",  @"(Legacy) Do we have the keyID needed to decrypt from them? %@ %@ {localURI: %@, remoteURI:%@}");
      }
    }

    if (objc_msgSend(v74, "count", v61, v64, v66, v68))
    {
      id v53 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v74, "__imArrayByApplyingBlock:", &stru_100902018));
      id v54 = (void *)objc_claimAutoreleasedReturnValue( -[IDSSenderKeyDistributionManager remoteMissingDecryptingKeyIDs:remoteURI:localURI:]( self->_senderKeyDistributionManager,  "remoteMissingDecryptingKeyIDs:remoteURI:localURI:",  v53,  v13,  v14));
      if ([v54 count]) {
        id v55 = @"NO";
      }
      else {
        id v55 = @"YES";
      }
      uint64_t v56 = OSLogHandleForIDSCategory("IDSDaemon_SenderKey");
      id v57 = (os_log_s *)objc_claimAutoreleasedReturnValue(v56);
      if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138413058;
        id v83 = v55;
        __int16 v84 = 2112;
        id v85 = v53;
        __int16 v86 = 2112;
        id v87 = v14;
        __int16 v88 = 2112;
        uint64_t v89 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_DEFAULT,  "(Legacy) Do they have the keyID needed to decrypt from us? %@ %@ {localURI: %@, remoteURI:%@}",  buf,  0x2Au);
      }

      if (os_log_shim_legacy_logging_enabled(v58)
        && _IDSShouldLog(0LL, @"IDSDaemon_SenderKey"))
      {
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon_SenderKey",  @"(Legacy) Do they have the keyID needed to decrypt from us? %@ %@ {localURI: %@, remoteURI:%@}");
      }
    }
  }
}

- (void)deliveryControllerHasSpaceforUrgentMessages:(id)a3 dataProtectionClass:(unsigned int)a4 ofTypes:(id)a5
{
  uint64_t v6 = *(void *)&a4;
  id v8 = a3;
  id v9 = a5;
  uint64_t v10 = OSLogHandleForIDSCategory("IDSDaemon");
  id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    id v12 = @"Class D";
    if ((_DWORD)v6 == 1) {
      id v12 = @"Class A";
    }
    if (!(_DWORD)v6) {
      id v12 = @"Class C";
    }
    *(_DWORD *)__int128 buf = 138412546;
    uint64_t v20 = @"URGENT";
    __int16 v21 = 2112;
    uint64_t v22 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Alerted that local delivery controller now has space for %@ messages at class %@.",  buf,  0x16u);
  }

  if (os_log_shim_legacy_logging_enabled(v13) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    uint64_t v14 = @"Class D";
    if ((_DWORD)v6 == 1) {
      uint64_t v14 = @"Class A";
    }
    if (!(_DWORD)v6) {
      uint64_t v14 = @"Class C";
    }
    id v17 = @"URGENT";
    BOOL v18 = v14;
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Alerted that local delivery controller now has space for %@ messages at class %@.");
  }

  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v6, v17, v18));
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObject:](&OBJC_CLASS___NSArray, "arrayWithObject:", v15));
  -[IDSDaemon _handleSpaceBecomingAvailableForUrgentLocalMessagesWithDataProtectionClasses:withMessageTypes:]( self,  "_handleSpaceBecomingAvailableForUrgentLocalMessagesWithDataProtectionClasses:withMessageTypes:",  v16,  v9);
}

- (void)deliveryControllerHasSpaceforNonUrgentMessages:(id)a3 priority:(int64_t)a4 dataProtectionClass:(unsigned int)a5 ofTypes:(id)a6
{
  uint64_t v7 = *(void *)&a5;
  id v10 = a3;
  id v11 = a6;
  uint64_t v12 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v14 = @"Sync";
    if (a4 == 200) {
      uint64_t v14 = @"Default";
    }
    if (a4 == 300) {
      uint64_t v14 = @"URGENT";
    }
    *(_DWORD *)__int128 buf = 138412290;
    uint64_t v23 = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "Alerted that local delivery controller now has space for %@ messages.",  buf,  0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v15) && _IDSShouldLog(1LL, @"IDSDaemon"))
  {
    uint64_t v16 = @"Sync";
    if (a4 == 200) {
      uint64_t v16 = @"Default";
    }
    if (a4 == 300) {
      uint64_t v16 = @"URGENT";
    }
    __int16 v21 = v16;
    _IDSLogV( 1LL,  @"IDSFoundation",  @"IDSDaemon",  @"Alerted that local delivery controller now has space for %@ messages.");
  }

  id v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a4, v21));
  BOOL v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObject:](&OBJC_CLASS___NSArray, "arrayWithObject:", v17));
  id v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v7));
  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObject:](&OBJC_CLASS___NSArray, "arrayWithObject:", v19));
  -[IDSDaemon _resourceAvailabilityChangedForIdentifiers:priorities:dataProtectionClasses:messageTypes:]( self,  "_resourceAvailabilityChangedForIdentifiers:priorities:dataProtectionClasses:messageTypes:",  0LL,  v18,  v20,  v11);
}

- (void)deliveryControllerHasSpaceforNonUrgentMessages:(id)a3 priority:(int64_t)a4 dataProtectionClass:(unsigned int)a5
{
  uint64_t v5 = *(void *)&a5;
  id v8 = a3;
  uint64_t v9 = OSLogHandleForIDSCategory("IDSDaemon");
  id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    id v11 = @"Sync";
    if (a4 == 200) {
      id v11 = @"Default";
    }
    if (a4 == 300) {
      id v11 = @"URGENT";
    }
    *(_DWORD *)__int128 buf = 138412290;
    uint64_t v20 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "Alerted that local delivery controller now has space for %@ messages.",  buf,  0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v12) && _IDSShouldLog(1LL, @"IDSDaemon"))
  {
    uint64_t v13 = @"Sync";
    if (a4 == 200) {
      uint64_t v13 = @"Default";
    }
    if (a4 == 300) {
      uint64_t v13 = @"URGENT";
    }
    BOOL v18 = v13;
    _IDSLogV( 1LL,  @"IDSFoundation",  @"IDSDaemon",  @"Alerted that local delivery controller now has space for %@ messages.");
  }

  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a4, v18));
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObject:](&OBJC_CLASS___NSArray, "arrayWithObject:", v14));
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v5));
  id v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObject:](&OBJC_CLASS___NSArray, "arrayWithObject:", v16));
  -[IDSDaemon _resourceAvailabilityChangedForIdentifiers:priorities:dataProtectionClasses:]( self,  "_resourceAvailabilityChangedForIdentifiers:priorities:dataProtectionClasses:",  0LL,  v15,  v17);
}

- (void)_resourceAvailabilityChangedForIdentifiers:(id)a3 priorities:(id)a4 dataProtectionClasses:(id)a5
{
  id v8 = a3;
  id v9 = a4;
  id v26 = a5;
  uint64_t v10 = OSLogHandleForTransportCategory("IDSDaemon");
  id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412546;
    id v39 = v8;
    __int16 v40 = 2112;
    id v41 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Resource availability changed, identifiers: %@ priorities %@",  buf,  0x16u);
  }

  uint64_t v13 = os_log_shim_legacy_logging_enabled(v12);
  if ((_DWORD)v13)
  {
    if (_IDSShouldLogTransport(v13))
    {
      id v22 = v8;
      id v23 = v9;
      _IDSLogTransport( @"IDSDaemon",  @"IDS",  @"Resource availability changed, identifiers: %@ priorities %@");
      if (_IDSShouldLog(0LL, @"IDSDaemon"))
      {
        id v22 = v8;
        id v23 = v9;
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Resource availability changed, identifiers: %@ priorities %@");
      }
    }
  }

  if (!objc_msgSend(v9, "count", v22, v23))
  {
    uint64_t v14 = objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:",  &off_100947AD0,  &off_100947AB8,  0LL));

    id v9 = (id)v14;
  }

  if (![v26 count])
  {
    uint64_t v15 = objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:",  &off_100947AE8,  &off_100947B00,  &off_100947B18,  0LL));

    id v26 = (id)v15;
  }

  __int128 v34 = 0u;
  __int128 v35 = 0u;
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  id obj = v9;
  id v27 = [obj countByEnumeratingWithState:&v32 objects:v37 count:16];
  if (v27)
  {
    uint64_t v25 = *(void *)v33;
    do
    {
      uint64_t v16 = 0LL;
      do
      {
        if (*(void *)v33 != v25) {
          objc_enumerationMutation(obj);
        }
        id v17 = *(void **)(*((void *)&v32 + 1) + 8LL * (void)v16);
        __int128 v28 = 0u;
        __int128 v29 = 0u;
        __int128 v30 = 0u;
        __int128 v31 = 0u;
        id v18 = v26;
        id v19 = [v18 countByEnumeratingWithState:&v28 objects:v36 count:16];
        if (v19)
        {
          uint64_t v20 = *(void *)v29;
          do
          {
            __int16 v21 = 0LL;
            do
            {
              if (*(void *)v29 != v20) {
                objc_enumerationMutation(v18);
              }
              -[IDSDaemon _resourceAvailabilityChangedForIdentifiers:priority:dataProtectionClass:]( self,  "_resourceAvailabilityChangedForIdentifiers:priority:dataProtectionClass:",  v8,  [v17 integerValue],  objc_msgSend(*(id *)(*((void *)&v28 + 1) + 8 * (void)v21), "intValue"));
              __int16 v21 = (char *)v21 + 1;
            }

            while (v19 != v21);
            id v19 = [v18 countByEnumeratingWithState:&v28 objects:v36 count:16];
          }

          while (v19);
        }

        uint64_t v16 = (char *)v16 + 1;
      }

      while (v16 != v27);
      id v27 = [obj countByEnumeratingWithState:&v32 objects:v37 count:16];
    }

    while (v27);
  }
}

- (void)_resourceAvailabilityChangedForIdentifiers:(id)a3 priorities:(id)a4 dataProtectionClasses:(id)a5 messageTypes:(id)a6
{
  id v10 = a3;
  id v11 = a4;
  id v30 = a5;
  id v12 = a6;
  uint64_t v13 = OSLogHandleForTransportCategory("IDSDaemon");
  uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412546;
    id v44 = v10;
    __int16 v45 = 2112;
    id v46 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Resource availability changed, identifiers: %@ priorities %@",  buf,  0x16u);
  }

  uint64_t v16 = os_log_shim_legacy_logging_enabled(v15);
  if ((_DWORD)v16)
  {
    if (_IDSShouldLogTransport(v16))
    {
      id v26 = v10;
      id v27 = v11;
      _IDSLogTransport( @"IDSDaemon",  @"IDS",  @"Resource availability changed, identifiers: %@ priorities %@");
      if (_IDSShouldLog(0LL, @"IDSDaemon"))
      {
        id v26 = v10;
        id v27 = v11;
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Resource availability changed, identifiers: %@ priorities %@");
      }
    }
  }

  if (!objc_msgSend(v11, "count", v26, v27))
  {
    uint64_t v17 = objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:",  &off_100947AD0,  &off_100947AB8,  0LL));

    id v11 = (id)v17;
  }

  if (![v30 count])
  {
    uint64_t v18 = objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:",  &off_100947AE8,  &off_100947B00,  &off_100947B18,  0LL));

    id v30 = (id)v18;
  }

  __int128 v39 = 0u;
  __int128 v40 = 0u;
  __int128 v37 = 0u;
  __int128 v38 = 0u;
  id obj = v11;
  id v31 = [obj countByEnumeratingWithState:&v37 objects:v42 count:16];
  if (v31)
  {
    uint64_t v29 = *(void *)v38;
    do
    {
      uint64_t v19 = 0LL;
      do
      {
        if (*(void *)v38 != v29)
        {
          uint64_t v20 = v19;
          objc_enumerationMutation(obj);
          uint64_t v19 = v20;
        }

        uint64_t v32 = v19;
        __int16 v21 = *(void **)(*((void *)&v37 + 1) + 8 * v19);
        __int128 v33 = 0u;
        __int128 v34 = 0u;
        __int128 v35 = 0u;
        __int128 v36 = 0u;
        id v22 = v30;
        id v23 = [v22 countByEnumeratingWithState:&v33 objects:v41 count:16];
        if (v23)
        {
          uint64_t v24 = *(void *)v34;
          do
          {
            uint64_t v25 = 0LL;
            do
            {
              if (*(void *)v34 != v24) {
                objc_enumerationMutation(v22);
              }
              -[IDSDaemon _resourceAvailabilityChangedForIdentifiers:priority:dataProtectionClass:messageTypes:]( self,  "_resourceAvailabilityChangedForIdentifiers:priority:dataProtectionClass:messageTypes:",  v10,  [v21 integerValue],  objc_msgSend(*(id *)(*((void *)&v33 + 1) + 8 * (void)v25), "intValue"),  v12);
              uint64_t v25 = (char *)v25 + 1;
            }

            while (v23 != v25);
            id v23 = [v22 countByEnumeratingWithState:&v33 objects:v41 count:16];
          }

          while (v23);
        }

        uint64_t v19 = v32 + 1;
      }

      while ((id)(v32 + 1) != v31);
      id v31 = [obj countByEnumeratingWithState:&v37 objects:v42 count:16];
    }

    while (v31);
  }
}

- (void)_resourceAvailabilityChangedForIdentifiers:(id)a3 priority:(int64_t)a4 dataProtectionClass:(unsigned int)a5
{
  id v8 = a3;
  im_assert_primary_base_queue(v8, v9);
  id v10 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  id v11 = [v8 count];
  uint64_t v43 = v8;
  if ([v8 count])
  {
    id v37 = v11;
    unsigned int v38 = a5;
    int64_t v40 = a4;
    context = objc_autoreleasePoolPush();
    __int128 v39 = self;
    id v12 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon serviceController](self, "serviceController"));
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 allServices]);

    __int128 v60 = 0u;
    __int128 v61 = 0u;
    __int128 v58 = 0u;
    __int128 v59 = 0u;
    id obj = v13;
    id v14 = [obj countByEnumeratingWithState:&v58 objects:v64 count:16];
    if (v14)
    {
      id v15 = v14;
      uint64_t v42 = *(void *)v59;
      do
      {
        for (i = 0LL; i != v15; i = (char *)i + 1)
        {
          if (*(void *)v59 != v42) {
            objc_enumerationMutation(obj);
          }
          uint64_t v17 = *(void **)(*((void *)&v58 + 1) + 8LL * (void)i);
          __int128 v54 = 0u;
          __int128 v55 = 0u;
          __int128 v56 = 0u;
          __int128 v57 = 0u;
          id v18 = v43;
          id v19 = [v18 countByEnumeratingWithState:&v54 objects:v63 count:16];
          if (v19)
          {
            id v20 = v19;
            uint64_t v21 = *(void *)v55;
            while (2)
            {
              for (j = 0LL; j != v20; j = (char *)j + 1)
              {
                if (*(void *)v55 != v21) {
                  objc_enumerationMutation(v18);
                }
                uint64_t v23 = *(void *)(*((void *)&v54 + 1) + 8LL * (void)j);
                uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v17 duetIdentifiers]);
                LODWORD(v23) = [v24 containsObject:v23];

                if ((_DWORD)v23)
                {
                  uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDAccountController sharedInstance]( &OBJC_CLASS___IDSDAccountController,  "sharedInstance"));
                  id v26 = (void *)objc_claimAutoreleasedReturnValue([v25 accountsOnService:v17]);

                  __int128 v52 = 0u;
                  __int128 v53 = 0u;
                  __int128 v50 = 0u;
                  __int128 v51 = 0u;
                  id v27 = v26;
                  id v28 = [v27 countByEnumeratingWithState:&v50 objects:v62 count:16];
                  if (v28)
                  {
                    id v29 = v28;
                    uint64_t v30 = *(void *)v51;
                    do
                    {
                      for (k = 0LL; k != v29; k = (char *)k + 1)
                      {
                        if (*(void *)v51 != v30) {
                          objc_enumerationMutation(v27);
                        }
                        -[NSMutableSet addObject:](v10, "addObject:", v32);
                      }

                      id v29 = [v27 countByEnumeratingWithState:&v50 objects:v62 count:16];
                    }

                    while (v29);
                  }

                  goto LABEL_24;
                }
              }

              id v20 = [v18 countByEnumeratingWithState:&v54 objects:v63 count:16];
              if (v20) {
                continue;
              }
              break;
            }
          }

- (void)_resourceAvailabilityChangedForIdentifiers:(id)a3 priority:(int64_t)a4 dataProtectionClass:(unsigned int)a5 messageTypes:(id)a6
{
  id v10 = a3;
  id v11 = a6;
  im_assert_primary_base_queue(v11, v12);
  uint64_t v13 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  id v14 = [v10 count];
  __int16 v45 = v10;
  if ([v10 count])
  {
    id v39 = v14;
    id v40 = v11;
    unsigned int v41 = a5;
    context = objc_autoreleasePoolPush();
    uint64_t v42 = self;
    id v15 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon serviceController](self, "serviceController"));
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 allServices]);

    __int128 v64 = 0u;
    __int128 v65 = 0u;
    __int128 v62 = 0u;
    __int128 v63 = 0u;
    id obj = v16;
    id v46 = [obj countByEnumeratingWithState:&v62 objects:v68 count:16];
    if (v46)
    {
      uint64_t v44 = *(void *)v63;
      do
      {
        for (i = 0LL; i != v46; i = (char *)i + 1)
        {
          if (*(void *)v63 != v44) {
            objc_enumerationMutation(obj);
          }
          id v18 = *(void **)(*((void *)&v62 + 1) + 8LL * (void)i);
          __int128 v58 = 0u;
          __int128 v59 = 0u;
          __int128 v60 = 0u;
          __int128 v61 = 0u;
          id v19 = v45;
          id v20 = [v19 countByEnumeratingWithState:&v58 objects:v67 count:16];
          if (v20)
          {
            id v21 = v20;
            uint64_t v22 = *(void *)v59;
            while (2)
            {
              for (j = 0LL; j != v21; j = (char *)j + 1)
              {
                if (*(void *)v59 != v22) {
                  objc_enumerationMutation(v19);
                }
                uint64_t v24 = *(void *)(*((void *)&v58 + 1) + 8LL * (void)j);
                uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v18 duetIdentifiers]);
                LODWORD(v24) = [v25 containsObject:v24];

                if ((_DWORD)v24)
                {
                  id v26 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDAccountController sharedInstance]( &OBJC_CLASS___IDSDAccountController,  "sharedInstance"));
                  id v27 = (void *)objc_claimAutoreleasedReturnValue([v26 accountsOnService:v18]);

                  __int128 v56 = 0u;
                  __int128 v57 = 0u;
                  __int128 v54 = 0u;
                  __int128 v55 = 0u;
                  id v28 = v27;
                  id v29 = [v28 countByEnumeratingWithState:&v54 objects:v66 count:16];
                  if (v29)
                  {
                    id v30 = v29;
                    uint64_t v31 = *(void *)v55;
                    do
                    {
                      for (k = 0LL; k != v30; k = (char *)k + 1)
                      {
                        if (*(void *)v55 != v31) {
                          objc_enumerationMutation(v28);
                        }
                        -[NSMutableSet addObject:](v13, "addObject:", v33);
                      }

                      id v30 = [v28 countByEnumeratingWithState:&v54 objects:v66 count:16];
                    }

                    while (v30);
                  }

                  goto LABEL_24;
                }
              }

              id v21 = [v19 countByEnumeratingWithState:&v58 objects:v67 count:16];
              if (v21) {
                continue;
              }
              break;
            }
          }

- (void)_processLocalMessagesWithAccountUUIDs:(id)a3 priority:(int64_t)a4 dataProtectionClass:(unsigned int)a5
{
  id v64 = a3;
  im_assert_primary_base_queue(v64, v7);
  uint64_t v8 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v10 = [v64 count];
    id v11 = @"Sync";
    if (a4 == 200) {
      id v11 = @"Default";
    }
    if (a4 == 300) {
      id v11 = @"URGENT";
    }
    uint64_t v12 = @"Class A";
    if (a5 != 1) {
      uint64_t v12 = @"Class D";
    }
    *(_DWORD *)__int128 buf = 67109634;
    *(_DWORD *)id v80 = v10;
    *(_WORD *)&v80[4] = 2112;
    *(void *)&v80[6] = v11;
    if (a5) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = @"Class C";
    }
    *(_WORD *)&v80[14] = 2112;
    *(void *)&v80[16] = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "_processLocalMessagesWithAccountUUIDs with number of accountUUIDs %d priority %@ class %@",  buf,  0x1Cu);
  }

  if (os_log_shim_legacy_logging_enabled(v14) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    id v15 = [v64 count];
    uint64_t v16 = @"Sync";
    if (a4 == 200) {
      uint64_t v16 = @"Default";
    }
    if (a4 == 300) {
      uint64_t v16 = @"URGENT";
    }
    uint64_t v17 = @"Class D";
    if (a5 == 1) {
      uint64_t v17 = @"Class A";
    }
    if (!a5) {
      uint64_t v17 = @"Class C";
    }
    __int128 v59 = v16;
    __int128 v60 = v17;
    id v58 = v15;
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"_processLocalMessagesWithAccountUUIDs with number of accountUUIDs %d priority %@ class %@");
  }

  uint64_t v18 = OSLogHandleForIDSCategory("IDSDaemon");
  id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
  {
    id v20 = @"Sync";
    if (a4 == 200) {
      id v20 = @"Default";
    }
    if (a4 == 300) {
      id v20 = @"URGENT";
    }
    id v21 = @"Class A";
    if (a5 != 1) {
      id v21 = @"Class D";
    }
    *(_DWORD *)__int128 buf = 138412802;
    *(void *)id v80 = v64;
    *(void *)&v80[10] = v20;
    *(_WORD *)&v80[8] = 2112;
    if (!a5) {
      id v21 = @"Class C";
    }
    *(_WORD *)&v80[18] = 2112;
    *(void *)&v80[20] = v21;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEBUG,  "_processLocalMessagesWithAccountUUIDs accountUUIDs %@ priority %@ class %@",  buf,  0x20u);
  }

  if (os_log_shim_legacy_logging_enabled(v22) && _IDSShouldLog(1LL, @"IDSDaemon"))
  {
    uint64_t v23 = @"Sync";
    if (a4 == 200) {
      uint64_t v23 = @"Default";
    }
    if (a4 == 300) {
      uint64_t v23 = @"URGENT";
    }
    uint64_t v24 = @"Class D";
    if (a5 == 1) {
      uint64_t v24 = @"Class A";
    }
    if (!a5) {
      uint64_t v24 = @"Class C";
    }
    __int128 v59 = v23;
    __int128 v60 = v24;
    id v58 = v64;
    _IDSLogV( 1LL,  @"IDSFoundation",  @"IDSDaemon",  @"_processLocalMessagesWithAccountUUIDs accountUUIDs %@ priority %@ class %@");
  }

  if (objc_msgSend(v64, "count", v58, v59, v60))
  {
    __int128 v63 = (void *)objc_claimAutoreleasedReturnValue([v64 objectAtIndex:0]);
    [v64 removeObjectAtIndex:0];
    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
    id v26 = (void *)objc_claimAutoreleasedReturnValue([v25 accountWithUniqueID:v63]);

    v75[0] = _NSConcreteStackBlock;
    v75[1] = 3221225472LL;
    v75[2] = sub_100362C88;
    v75[3] = &unk_100902040;
    v75[4] = self;
    id v76 = v64;
    int64_t v77 = a4;
    unsigned int v78 = a5;
    id v27 = objc_retainBlock(v75);
    dispatch_block_t block = v27;
    if (!v26)
    {
      uint64_t v29 = im_primary_queue(v27, v28);
      id v30 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v29);
      dispatch_async(v30, block);
    }

    uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v26 service]);
    if ([v31 adHocServiceType] == 2)
    {
    }

    else
    {
      __int128 v35 = (void *)objc_claimAutoreleasedReturnValue([v26 service]);
      BOOL v36 = [v35 adHocServiceType] == 5;

      if (!v36)
      {
        uint64_t v52 = OSLogHandleForIDSCategory("IDSDaemon");
        BOOL v53 = (os_log_s *)objc_claimAutoreleasedReturnValue(v52);
        if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 138412546;
          *(void *)id v80 = v63;
          *(_WORD *)&v80[8] = 2112;
          *(void *)&v80[10] = v26;
          _os_log_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_DEFAULT,  "Skipping invalid accountUUID %@ for account %@",  buf,  0x16u);
        }

        uint64_t v55 = os_log_shim_legacy_logging_enabled(v54);
        if ((_DWORD)v55)
        {
          uint64_t v55 = _IDSShouldLog(0LL, @"IDSDaemon");
          if ((_DWORD)v55) {
            uint64_t v55 = _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Skipping invalid accountUUID %@ for account %@");
          }
        }

        uint64_t v57 = im_primary_queue(v55, v56);
        id v39 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v57);
        dispatch_async(v39, block);
        goto LABEL_68;
      }
    }

    id v37 = objc_alloc_init(&OBJC_CLASS___IDSSendParameters);
    [v37 setPriority:a4];
    unsigned int v38 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v26 superAccount]);
    id v39 = v38;
    if (!v38
      || (id v40 = -[dispatch_queue_s newSendMessageContext](v38, "newSendMessageContext"),
          unsigned int v41 = (void *)objc_claimAutoreleasedReturnValue([v26 service]),
          uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue([v41 pushTopic]),
          [v40 setSubService:v42],
          v42,
          v41,
          !v40))
    {
      id v40 = [v26 newSendMessageContext];
    }

    uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue([v40 subService]);
    if ([v43 length]) {
      uint64_t v44 = objc_claimAutoreleasedReturnValue([v40 subService]);
    }
    else {
      uint64_t v44 = objc_claimAutoreleasedReturnValue([v40 serviceIdentifier]);
    }
    __int16 v45 = (void *)v44;

    id v46 = (void *)objc_claimAutoreleasedReturnValue([v40 serviceDuetIdentifiers]);
    int64_t v47 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDaemonPriorityQueueController sharedInstance]( &OBJC_CLASS___IDSDaemonPriorityQueueController,  "sharedInstance"));
    v65[0] = _NSConcreteStackBlock;
    v65[1] = 3221225472LL;
    v65[2] = sub_100362C9C;
    v65[3] = &unk_1009020E0;
    v65[4] = self;
    id v66 = v45;
    id v67 = v46;
    id v68 = v37;
    int64_t v73 = a4;
    id v69 = v26;
    id v70 = v40;
    unsigned int v74 = a5;
    id v72 = block;
    id v71 = v63;
    id v48 = v40;
    id v49 = v37;
    id v50 = v46;
    id v51 = v45;
    [v47 performBlockWithPriority:v65 priority:a4];

LABEL_68:
    goto LABEL_69;
  }

  uint64_t v32 = OSLogHandleForIDSCategory("IDSDaemon");
  BOOL v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "No pending non-urgent local messages to send, returning",  buf,  2u);
  }

  if (os_log_shim_legacy_logging_enabled(v34) && _IDSShouldLog(0LL, @"IDSDaemon")) {
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"No pending non-urgent local messages to send, returning");
  }
LABEL_69:
}

- (void)_processLocalMessagesWithAccountUUIDs:(id)a3 priority:(int64_t)a4 dataProtectionClass:(unsigned int)a5 messageTypes:(id)a6
{
  id v67 = a3;
  id v66 = a6;
  im_assert_primary_base_queue(v66, v10);
  uint64_t v11 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v13 = [v67 count];
    uint64_t v14 = @"Sync";
    if (a4 == 200) {
      uint64_t v14 = @"Default";
    }
    if (a4 == 300) {
      uint64_t v14 = @"URGENT";
    }
    id v15 = @"Class A";
    if (a5 != 1) {
      id v15 = @"Class D";
    }
    *(_DWORD *)__int128 buf = 67109634;
    *(_DWORD *)id v85 = v13;
    *(_WORD *)&v85[4] = 2112;
    *(void *)&v85[6] = v14;
    if (a5) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = @"Class C";
    }
    *(_WORD *)&v85[14] = 2112;
    *(void *)&v85[16] = v16;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "_processLocalMessagesWithAccountUUIDs with number of accountUUIDs %d priority %@ class %@",  buf,  0x1Cu);
  }

  if (os_log_shim_legacy_logging_enabled(v17) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    id v18 = [v67 count];
    id v19 = @"Sync";
    if (a4 == 200) {
      id v19 = @"Default";
    }
    if (a4 == 300) {
      id v19 = @"URGENT";
    }
    id v20 = @"Class D";
    if (a5 == 1) {
      id v20 = @"Class A";
    }
    if (!a5) {
      id v20 = @"Class C";
    }
    __int128 v61 = v19;
    __int128 v62 = v20;
    id v60 = v18;
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"_processLocalMessagesWithAccountUUIDs with number of accountUUIDs %d priority %@ class %@");
  }

  uint64_t v21 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v23 = @"Sync";
    if (a4 == 200) {
      uint64_t v23 = @"Default";
    }
    if (a4 == 300) {
      uint64_t v23 = @"URGENT";
    }
    uint64_t v24 = @"Class A";
    if (a5 != 1) {
      uint64_t v24 = @"Class D";
    }
    *(_DWORD *)__int128 buf = 138412802;
    *(void *)id v85 = v67;
    *(void *)&v85[10] = v23;
    *(_WORD *)&v85[8] = 2112;
    if (!a5) {
      uint64_t v24 = @"Class C";
    }
    *(_WORD *)&v85[18] = 2112;
    *(void *)&v85[20] = v24;
    _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEBUG,  "_processLocalMessagesWithAccountUUIDs accountUUIDs %@ priority %@ class %@",  buf,  0x20u);
  }

  if (os_log_shim_legacy_logging_enabled(v25) && _IDSShouldLog(1LL, @"IDSDaemon"))
  {
    id v26 = @"Sync";
    if (a4 == 200) {
      id v26 = @"Default";
    }
    if (a4 == 300) {
      id v26 = @"URGENT";
    }
    id v27 = @"Class D";
    if (a5 == 1) {
      id v27 = @"Class A";
    }
    if (!a5) {
      id v27 = @"Class C";
    }
    __int128 v61 = v26;
    __int128 v62 = v27;
    id v60 = v67;
    _IDSLogV( 1LL,  @"IDSFoundation",  @"IDSDaemon",  @"_processLocalMessagesWithAccountUUIDs accountUUIDs %@ priority %@ class %@");
  }

  if (objc_msgSend(v67, "count", v60, v61, v62))
  {
    __int128 v65 = (void *)objc_claimAutoreleasedReturnValue([v67 objectAtIndex:0]);
    [v67 removeObjectAtIndex:0];
    uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
    uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v28 accountWithUniqueID:v65]);

    v79[0] = _NSConcreteStackBlock;
    v79[1] = 3221225472LL;
    v79[2] = sub_1003638C4;
    v79[3] = &unk_100901860;
    v79[4] = self;
    id v80 = v67;
    int64_t v82 = a4;
    unsigned int v83 = a5;
    id v30 = v66;
    id v81 = v30;
    uint64_t v31 = objc_retainBlock(v79);
    dispatch_block_t block = v31;
    if (!v29)
    {
      uint64_t v33 = im_primary_queue(v31, v32);
      uint64_t v34 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v33);
      dispatch_async(v34, block);
    }

    __int128 v35 = (void *)objc_claimAutoreleasedReturnValue([v29 service]);
    if ([v35 adHocServiceType] == 2)
    {
    }

    else
    {
      id v39 = (void *)objc_claimAutoreleasedReturnValue([v29 service]);
      BOOL v40 = [v39 adHocServiceType] == 5;

      if (!v40)
      {
        uint64_t v54 = OSLogHandleForIDSCategory("IDSDaemon");
        uint64_t v55 = (os_log_s *)objc_claimAutoreleasedReturnValue(v54);
        if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 138412546;
          *(void *)id v85 = v65;
          *(_WORD *)&v85[8] = 2112;
          *(void *)&v85[10] = v29;
          _os_log_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_DEFAULT,  "Skipping invalid accountUUID %@ for account %@",  buf,  0x16u);
        }

        uint64_t v57 = os_log_shim_legacy_logging_enabled(v56);
        if ((_DWORD)v57)
        {
          uint64_t v57 = _IDSShouldLog(0LL, @"IDSDaemon");
          if ((_DWORD)v57) {
            uint64_t v57 = _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Skipping invalid accountUUID %@ for account %@");
          }
        }

        uint64_t v59 = im_primary_queue(v57, v58);
        id v64 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v59);
        dispatch_async(v64, block);
        goto LABEL_68;
      }
    }

    id v41 = objc_alloc_init(&OBJC_CLASS___IDSSendParameters);
    [v41 setPriority:a4];
    id v64 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v29 superAccount]);
    if (!v64
      || (id v42 = -[dispatch_queue_s newSendMessageContext](v64, "newSendMessageContext"),
          uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue([v29 service]),
          uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue([v43 pushTopic]),
          [v42 setSubService:v44],
          v44,
          v43,
          !v42))
    {
      id v42 = [v29 newSendMessageContext];
    }

    __int16 v45 = (void *)objc_claimAutoreleasedReturnValue([v42 subService]);
    if ([v45 length]) {
      uint64_t v46 = objc_claimAutoreleasedReturnValue([v42 subService]);
    }
    else {
      uint64_t v46 = objc_claimAutoreleasedReturnValue([v42 serviceIdentifier]);
    }
    int64_t v47 = (void *)v46;

    id v48 = (void *)objc_claimAutoreleasedReturnValue([v42 serviceDuetIdentifiers]);
    id v49 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDaemonPriorityQueueController sharedInstance]( &OBJC_CLASS___IDSDaemonPriorityQueueController,  "sharedInstance"));
    v68[0] = _NSConcreteStackBlock;
    v68[1] = 3221225472LL;
    v68[2] = sub_1003638D8;
    v68[3] = &unk_100902158;
    v68[4] = self;
    id v69 = v47;
    id v70 = v48;
    id v71 = v41;
    int64_t v77 = a4;
    id v72 = v29;
    id v73 = v42;
    id v74 = v30;
    unsigned int v78 = a5;
    id v76 = block;
    id v75 = v65;
    id v50 = v42;
    id v51 = v41;
    id v52 = v48;
    id v53 = v47;
    [v49 performBlockWithPriority:v68 priority:a4];

LABEL_68:
    goto LABEL_69;
  }

  uint64_t v36 = OSLogHandleForIDSCategory("IDSDaemon");
  id v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "No pending non-urgent local messages to send, returning",  buf,  2u);
  }

  if (os_log_shim_legacy_logging_enabled(v38) && _IDSShouldLog(0LL, @"IDSDaemon")) {
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"No pending non-urgent local messages to send, returning");
  }
LABEL_69:
}

+ (void)_performDuetCheckAndSendForServiceIdentifier:(id)a3 serviceDuetIdentifiers:(id)a4 sendParameters:(id)a5 logString:(id)a6 fromQueue:(id)a7 completionBlock:(id)a8
{
  id v13 = a3;
  id v39 = a4;
  id v14 = a5;
  id v15 = a6;
  uint64_t v16 = (dispatch_queue_s *)a7;
  uint64_t v17 = (void (**)(id, uint64_t))a8;
  dispatch_assert_queue_V2(v16);
  id v18 = (void *)objc_claimAutoreleasedReturnValue([v14 duetIdentifiersOverride]);
  if (![v18 count])
  {
    id v19 = v39;

    id v18 = v19;
  }

  id v20 = [v14 priority];
  uint64_t v21 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    if (v20 == (id)300) {
      uint64_t v23 = @"URGENT";
    }
    else {
      uint64_t v23 = @"non-urgent";
    }
    id v24 = (id)objc_claimAutoreleasedReturnValue([v14 accountUUID]);
    unsigned int v25 = [v14 bypassDuet];
    id v26 = @"NO";
    *(_DWORD *)__int128 buf = 138413570;
    id v41 = v23;
    __int16 v42 = 2112;
    if (v25) {
      id v26 = @"YES";
    }
    id v43 = v24;
    __int16 v44 = 2112;
    id v45 = v13;
    __int16 v46 = 2112;
    int64_t v47 = v18;
    __int16 v48 = 2112;
    id v49 = v26;
    __int16 v50 = 2112;
    id v51 = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "Performing duet check for priority %@ for account %@ serviceIdentifier %@ duetIdentifiers %@ bypassDuet %@  logString: %@",  buf,  0x3Eu);
  }

  if (os_log_shim_legacy_logging_enabled(v27) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    if (v20 == (id)300) {
      uint64_t v28 = @"URGENT";
    }
    else {
      uint64_t v28 = @"non-urgent";
    }
    uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v14 accountUUID]);
    unsigned int v30 = [v14 bypassDuet];
    uint64_t v31 = @"NO";
    if (v30) {
      uint64_t v31 = @"YES";
    }
    id v37 = v31;
    id v38 = v15;
    id v35 = v13;
    uint64_t v36 = v18;
    uint64_t v33 = v28;
    uint64_t v34 = v29;
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Performing duet check for priority %@ for account %@ serviceIdentifier %@ duetIdentifiers %@ bypassDuet %@  logString: %@");
  }

  if (!objc_msgSend(v14, "bypassDuet", v33, v34, v35, v36, v37, v38))
  {
    if (v20 == (id)300)
    {
      if (v17) {
        v17[2](v17, 1LL);
      }

      uint64_t v17 = 0LL;
    }

    uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDuetInterface sharedInstance](&OBJC_CLASS___IDSDuetInterface, "sharedInstance"));
    objc_msgSend( v32,  "checkAvailabilityForValues:priority:logString:fromQueue:withCompletionBlock:",  v18,  objc_msgSend(v14, "priority"),  v15,  v16,  v17);

    goto LABEL_26;
  }

  if (v17)
  {
    v17[2](v17, 1LL);
LABEL_26:
  }
}

- (void)_performDuetCheckAndSendForAccount:(id)a3 sendParameters:(id)a4 logString:(id)a5 fromQueue:(id)a6 completionBlock:(id)a7
{
  id v12 = a7;
  id v13 = a6;
  id v14 = a5;
  id v15 = a4;
  id v16 = a3;
  id v18 = (void *)objc_opt_class(self, v17);
  id v22 = (id)objc_claimAutoreleasedReturnValue([v16 service]);
  id v19 = (void *)objc_claimAutoreleasedReturnValue([v22 identifier]);
  id v20 = (void *)objc_claimAutoreleasedReturnValue([v16 service]);

  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v20 duetIdentifiers]);
  [v18 _performDuetCheckAndSendForServiceIdentifier:v19 serviceDuetIdentifiers:v21 sendParameters:v15 logString:v14 fromQueue:v13 completionBlock:v12];
}

- (BOOL)_canBulkMessageWithParameters:(id)a3
{
  id v3 = a3;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 accountUUID]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 accountWithUniqueID:v5]);

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 service]);
  if ([v7 adHocServiceType] == 2)
  {
  }

  else
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v6 service]);
    unsigned int v9 = [v8 adHocServiceType];

    if (v9 != 5)
    {
      BOOL v10 = [v3 priority] != (id)300;
      goto LABEL_6;
    }
  }

  BOOL v10 = 0;
LABEL_6:

  return v10;
}

- (void)_nonUrgentInternetSendTimerFired
{
  nonUrgentInternetSendTimer = self->_nonUrgentInternetSendTimer;
  self->_nonUrgentInternetSendTimer = 0LL;

  uint64_t v4 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Non-urgent internet send timer fired.", v7, 2u);
  }

  -[IDSDaemon _processOutgoingNonUrgentInternetMessages](self, "_processOutgoingNonUrgentInternetMessages");
}

- (void)_updateNonUrgentInternetSendTimer
{
  uint64_t v3 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(-[IMDispatchTimer fireDate](self->_nonUrgentInternetSendTimer, "fireDate"));
    *(_DWORD *)__int128 buf = 138412290;
    double v32 = *(double *)&v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Scheduling a non-urgent internet send timer if needed. Existing timer fire date? %@",  buf,  0xCu);
  }

  if ((os_log_shim_legacy_logging_enabled(v6) & 1) != 0 && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(-[IMDispatchTimer fireDate](self->_nonUrgentInternetSendTimer, "fireDate"));
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Scheduling a non-urgent internet send timer if needed. Existing timer fire date? %@");
  }

  if (!self->_nonUrgentInternetSendTimer)
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon serverBagForBagType:](self, "serverBagForBagType:", 1LL));
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKey:@"nonurgent_internet_send_interval"]);

    uint64_t v10 = objc_opt_class(&OBJC_CLASS___NSNumber, v9);
    if ((objc_opt_isKindOfClass(v8, v10) & 1) != 0)
    {
      [v8 doubleValue];
      double v12 = v11;
    }

    else
    {
      double v12 = 1800.0;
    }

    id v13 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon serverBagForBagType:](self, "serverBagForBagType:", 1LL, v29));
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 objectForKey:@"nonurgent_internet_send_interval_max_fuzz"]);

    uint64_t v16 = objc_opt_class(&OBJC_CLASS___NSNumber, v15);
    if ((objc_opt_isKindOfClass(v14, v16) & 1) != 0)
    {
      [v14 doubleValue];
      uint32_t v18 = (int)v17;
    }

    else
    {
      uint32_t v18 = 300;
    }

    double v19 = (double)arc4random_uniform(v18);
    uint64_t v20 = OSLogHandleForIDSCategory("IDSDaemon");
    uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 134218496;
      double v32 = v12;
      __int16 v33 = 2048;
      double v34 = v19;
      __int16 v35 = 2048;
      double v36 = v12 + v19;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "timeInterval for _nonUrgentInternetSendTimer as %f + %f = %f",  buf,  0x20u);
    }

    if (os_log_shim_legacy_logging_enabled(v22))
    {
      if (_IDSShouldLog(0LL, @"IDSDaemon")) {
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"timeInterval for _nonUrgentInternetSendTimer as %f + %f = %f");
      }
    }

    uint64_t v23 = objc_alloc(&OBJC_CLASS___IMDispatchTimer);
    uint64_t v25 = im_primary_queue(v23, v24);
    id v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472LL;
    v30[2] = sub_100364668;
    v30[3] = &unk_1008F8088;
    void v30[4] = self;
    uint64_t v27 = -[IMDispatchTimer initWithQueue:interval:repeats:handlerBlock:]( v23,  "initWithQueue:interval:repeats:handlerBlock:",  v26,  (unint64_t)(v12 + v19),  0LL,  v30);
    nonUrgentInternetSendTimer = self->_nonUrgentInternetSendTimer;
    self->_nonUrgentInternetSendTimer = v27;
  }

- (BOOL)_hasNonUrgentInternetSendingBudget
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(-[IMDispatchTimer fireDate](self->_nonUrgentInternetSendTimer, "fireDate"));
  uint64_t v3 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    [v2 timeIntervalSinceNow];
    *(_DWORD *)__int128 buf = 138412546;
    id v14 = v2;
    __int16 v15 = 2048;
    double v16 = fabs(v5);
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Checking _hasNonUrgentInternetSendingBudget, fireDate is %@, %f",  buf,  0x16u);
  }

  if (os_log_shim_legacy_logging_enabled(v6) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    [v2 timeIntervalSinceNow];
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Checking _hasNonUrgentInternetSendingBudget, fireDate is %@, %f");
  }

  if (v2 && ([v2 timeIntervalSinceNow], fabs(v7) > 60.0))
  {
    uint64_t v8 = OSLogHandleForIDSCategory("IDSDaemon");
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v14 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Last non-urgent internet send was too recent...waiting until next lock or non-urgent internet send to try again. Next fire date is %@.",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v10) && _IDSShouldLog(0LL, @"IDSDaemon")) {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Last non-urgent internet send was too recent...waiting until next lock or non-urgent internet send to try again. Next fire date is %@.");
    }
    BOOL v11 = 0;
  }

  else
  {
    BOOL v11 = 1;
  }

  return v11;
}

- (int64_t)_currentSecondsIntoDay
{
  uint64_t v2 = -[NSCalendar initWithCalendarIdentifier:]( objc_alloc(&OBJC_CLASS___NSCalendar),  "initWithCalendarIdentifier:",  NSCalendarIdentifierGregorian);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSTimeZone timeZoneForSecondsFromGMT:](&OBJC_CLASS___NSTimeZone, "timeZoneForSecondsFromGMT:", 0LL));
  -[NSCalendar setTimeZone:](v2, "setTimeZone:", v3);

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  double v5 = (void *)objc_claimAutoreleasedReturnValue(-[NSCalendar components:fromDate:](v2, "components:fromDate:", 224LL, v4));

  uint64_t v6 = 3600 * (void)[v5 hour];
  uint64_t v7 = v6 + 60 * (void)[v5 minute];
  uint64_t v8 = (char *)[v5 second] + v7;

  return (int64_t)v8;
}

- (double)_nonUrgentInternetSendProbabilityForCurrentWindow
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[IDSServerBag sharedInstanceForBagType:](&OBJC_CLASS___IDSServerBag, "sharedInstanceForBagType:", 1LL));
  id v52 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKey:@"md-low-priority-send-window-constraints"]);

  if (!v52)
  {
    uint64_t v24 = OSLogHandleForIDSCategory("IDSDaemon");
    uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "Non-urgent internet send probability windows are not specified in the server bag - returning 1.0",  buf,  2u);
    }

    double v7 = 1.0;
    if (os_log_shim_legacy_logging_enabled(v26) && _IDSShouldLog(0LL, @"IDSDaemon")) {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Non-urgent internet send probability windows are not specified in the server bag - returning 1.0");
    }
    goto LABEL_61;
  }

  uint64_t v4 = objc_opt_class(&OBJC_CLASS___NSArray, v3);
  if ((objc_opt_isKindOfClass(v52, v4) & 1) != 0)
  {
    uint64_t v53 = -[IDSDaemon _currentSecondsIntoDay](self, "_currentSecondsIntoDay");
    __int128 v55 = 0u;
    __int128 v56 = 0u;
    __int128 v57 = 0u;
    __int128 v58 = 0u;
    id obj = v52;
    id v6 = [obj countByEnumeratingWithState:&v55 objects:v67 count:16];
    double v7 = 1.0;
    if (v6)
    {
      uint64_t v8 = *(void *)v56;
      while (2)
      {
        for (i = 0LL; i != v6; i = (char *)i + 1)
        {
          if (*(void *)v56 != v8) {
            objc_enumerationMutation(obj);
          }
          uint64_t v10 = *(void **)(*((void *)&v55 + 1) + 8LL * (void)i);
          uint64_t v11 = objc_opt_class(&OBJC_CLASS___NSDictionary, v5);
          if ((objc_opt_isKindOfClass(v10, v11) & 1) != 0)
          {
            double v12 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKey:@"start-time"]);
            id v13 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKey:@"end-time"]);
            uint64_t v14 = objc_claimAutoreleasedReturnValue([v10 objectForKey:@"probability"]);
            __int16 v15 = (void *)v14;
            if (v12) {
              BOOL v16 = v13 == 0LL;
            }
            else {
              BOOL v16 = 1;
            }
            if (v16 || v14 == 0)
            {
              uint64_t v18 = OSLogHandleForIDSCategory("Warning");
              double v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
              if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)__int128 buf = 138412802;
                double v60 = *(double *)&v12;
                __int16 v61 = 2112;
                __int128 v62 = v13;
                __int16 v63 = 2112;
                id v64 = v15;
                _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "Non-urgent internet send probability window is not fully defined: (%@, %@, %@)",  buf,  0x20u);
              }

              if (os_log_shim_legacy_logging_enabled(v20))
              {
                _IDSWarnV( @"IDSFoundation",  @"Non-urgent internet send probability window is not fully defined: (%@, %@, %@)");
                _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"Non-urgent internet send probability window is not fully defined: (%@, %@, %@)");
                __int16 v48 = v13;
                id v49 = v15;
                int64_t v47 = v12;
                _IDSLogTransport( @"Warning",  @"IDS",  @"Non-urgent internet send probability window is not fully defined: (%@, %@, %@)");
              }
            }

            else if (v53 >= (uint64_t)[v12 integerValue] {
                   && v53 <= (uint64_t)[v13 integerValue])
            }
            {
              uint64_t v32 = OSLogHandleForIDSCategory("IDSDaemon");
              __int16 v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
              if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)__int128 buf = 138413058;
                double v60 = *(double *)&v12;
                __int16 v61 = 2112;
                __int128 v62 = v13;
                __int16 v63 = 2112;
                id v64 = v15;
                __int16 v65 = 2048;
                uint64_t v66 = v53;
                _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "We are currently in send window (%@, %@, %@). The time is currently %ld",  buf,  0x2Au);
              }

              if (os_log_shim_legacy_logging_enabled(v34)
                && _IDSShouldLog(0LL, @"IDSDaemon"))
              {
                id v49 = v15;
                uint64_t v50 = v53;
                int64_t v47 = v12;
                __int16 v48 = v13;
                _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"We are currently in send window (%@, %@, %@). The time is currently %ld");
              }

              objc_msgSend(v15, "doubleValue", v47, v48, v49, v50);
              if (v35 >= 0.0) {
                double v36 = v35;
              }
              else {
                double v36 = 0.0;
              }
              int64_t nonUrgentInternetLastAttempt = self->_nonUrgentInternetLastAttempt;
              double v7 = fmin(v36, 1.0);
              if (nonUrgentInternetLastAttempt >= (uint64_t)[v12 integerValue])
              {
                int64_t v38 = self->_nonUrgentInternetLastAttempt;
                if (v38 <= (uint64_t)[v13 integerValue])
                {
                  uint64_t v39 = OSLogHandleForIDSCategory("IDSDaemon");
                  BOOL v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
                  if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
                  {
                    int64_t v41 = self->_nonUrgentInternetLastAttempt;
                    *(_DWORD *)__int128 buf = 134217984;
                    double v60 = *(double *)&v41;
                    _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEFAULT,  "Last non-urgent internet message attempt %ld is in this window - forcing probability to 0.0",  buf,  0xCu);
                  }

                  double v7 = 0.0;
                  if (os_log_shim_legacy_logging_enabled(v42)
                    && _IDSShouldLog(0LL, @"IDSDaemon"))
                  {
                    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Last non-urgent internet message attempt %ld is in this window - forcing probability to 0.0");
                  }
                }
              }

              goto LABEL_56;
            }
          }

          else
          {
            uint64_t v21 = OSLogHandleForIDSCategory("Warning");
            uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
            if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)__int128 buf = 138412290;
              double v60 = *(double *)&v10;
              _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_ERROR,  "Non-urgent internet send probability window is not of the correct type! %@",  buf,  0xCu);
            }

            if (os_log_shim_legacy_logging_enabled(v23))
            {
              _IDSWarnV( @"IDSFoundation",  @"Non-urgent internet send probability window is not of the correct type! %@");
              _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"Non-urgent internet send probability window is not of the correct type! %@");
              int64_t v47 = v10;
              _IDSLogTransport( @"Warning",  @"IDS",  @"Non-urgent internet send probability window is not of the correct type! %@");
            }
          }
        }

        id v6 = [obj countByEnumeratingWithState:&v55 objects:v67 count:16];
        if (v6) {
          continue;
        }
        break;
      }
    }

- (BOOL)_rollDieForNonUrgentInternetSend
{
  int64_t v3 = -[IDSDaemon _currentSecondsIntoDay](self, "_currentSecondsIntoDay");
  -[IDSDaemon _nonUrgentInternetSendProbabilityForCurrentWindow]( self,  "_nonUrgentInternetSendProbabilityForCurrentWindow");
  double v5 = v4;
  uint64_t v6 = OSLogHandleForIDSCategory("IDSDaemon");
  double v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int64_t nonUrgentInternetLastAttempt = self->_nonUrgentInternetLastAttempt;
    if (nonUrgentInternetLastAttempt <= 0) {
      uint64_t v9 = -1LL;
    }
    else {
      uint64_t v9 = v3 - nonUrgentInternetLastAttempt;
    }
    *(_DWORD *)__int128 buf = 134218240;
    uint64_t v26 = v9;
    __int16 v27 = 2048;
    double v28 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Rolling die to attempt non-urgent internet send. Last check was %ld seconds ago. Probability = %f.",  buf,  0x16u);
  }

  if ((os_log_shim_legacy_logging_enabled(v10) & 1) != 0 && _IDSShouldLog(0LL, @"IDSDaemon")) {
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Rolling die to attempt non-urgent internet send. Last check was %ld seconds ago. Probability = %f.");
  }
  self->_int64_t nonUrgentInternetLastAttempt = v3;
  if (v5 <= 2.22044605e-16)
  {
    uint64_t v18 = OSLogHandleForIDSCategory("IDSDaemon");
    double v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Probability is 0, cannot send.", buf, 2u);
    }

    return 0;
  }

  else if (v5 >= 1.0)
  {
    uint64_t v21 = OSLogHandleForIDSCategory("IDSDaemon");
    uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Probability is >= 1, can send.", buf, 2u);
    }

    return 1;
  }

  else
  {
    double v11 = (double)(arc4random() & 0x7FFFFFFF);
    double v12 = v5 * 2147483650.0;
    BOOL v13 = v12 >= v11;
    uint64_t v14 = OSLogHandleForIDSCategory("IDSDaemon");
    __int16 v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v16 = @"NO";
      if (v12 >= v11) {
        BOOL v16 = @"YES";
      }
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v26 = (uint64_t)v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Rolled the die - can send? %@", buf, 0xCu);
    }
  }

  return v13;
}

- (BOOL)_canSendNonUrgentInternetMessageForTopic:(id)a3
{
  id v4 = a3;
  uint64_t v5 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "_canSendNonUrgentInternetMessageForTopic ",  buf,  2u);
  }

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon pushHandlerForAPSDelegatePort](self, "pushHandlerForAPSDelegatePort"));
  unsigned __int8 v9 = [v8 isConnected];

  if ((v9 & 1) == 0)
  {
    uint64_t v13 = OSLogHandleForIDSCategory("IDSDaemon");
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Push is not connected - skipping send attempt.",  buf,  2u);
    }

    goto LABEL_21;
  }

  if (!-[IDSDaemon _rollDieForNonUrgentInternetSend](self, "_rollDieForNonUrgentInternetSend"))
  {
    uint64_t v16 = OSLogHandleForIDSCategory("IDSDaemon");
    uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "We can't send further non-urgent internet messages in this window, skipping.",  buf,  2u);
    }

    if (os_log_shim_legacy_logging_enabled(v18) && _IDSShouldLog(0LL, @"IDSDaemon")) {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"We can't send further non-urgent internet messages in this window, skipping.");
    }
LABEL_21:
    BOOL v12 = 0;
    goto LABEL_29;
  }

  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon serverBagForBagType:](self, "serverBagForBagType:", 1LL));
  double v11 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKey:@"sync_topics_allowed_to_send_immediately"]);

  if (v11 && ([v11 containsObject:v4] & 1) != 0)
  {
    BOOL v12 = 1;
  }

  else
  {
    uint64_t v19 = OSLogHandleForIDSCategory("IDSDaemon");
    uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v24 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "Server Bag policy for sending message immediately for topic - %@ does not exist. This message will proceed with default behavior",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v21) && _IDSShouldLog(0LL, @"IDSDaemon")) {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Server Bag policy for sending message immediately for topic - %@ does not exist. This message will proceed with default behavior");
    }
    BOOL v12 = 0;
  }

LABEL_29:
  return v12;
}

- (void)_processOutgoingNonUrgentInternetMessages
{
  uint64_t v2 = OSLogHandleForIDSCategory("IDSDaemon");
  int64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "_processOutgoingNonUrgentInternetMessages",  buf,  2u);
  }

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[IDSPushHandler sharedInstanceWithPortName:]( &OBJC_CLASS___IDSPushHandler,  "sharedInstanceWithPortName:",  @"com.apple.identityservicesd.aps"));
  unsigned __int8 v6 = [v5 isConnected];

  if ((v6 & 1) != 0)
  {
    if (-[IDSDaemon _hasNonUrgentInternetSendingBudget](self, "_hasNonUrgentInternetSendingBudget"))
    {
      if (-[IDSDaemon _rollDieForNonUrgentInternetSend](self, "_rollDieForNonUrgentInternetSend"))
      {
        -[IMDispatchTimer invalidate](self->_nonUrgentInternetSendTimer, "invalidate");
        nonUrgentInternetSendTimer = self->_nonUrgentInternetSendTimer;
        self->_nonUrgentInternetSendTimer = 0LL;

        __int128 v116 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
        uint64_t v8 = objc_autoreleasePoolPush();
        unsigned __int8 v9 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDMessageStore unsentOutgoingMessagesUpToLimit:priority:localDestinationDeviceID:]( &OBJC_CLASS___IDSDMessageStore,  "unsentOutgoingMessagesUpToLimit:priority:localDestinationDeviceID:",  10000LL,  200LL,  0LL));
        if (v9) {
          -[NSMutableArray addObjectsFromArray:](v116, "addObjectsFromArray:", v9);
        }
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDMessageStore unsentOutgoingMessagesUpToLimit:priority:localDestinationDeviceID:]( &OBJC_CLASS___IDSDMessageStore,  "unsentOutgoingMessagesUpToLimit:priority:localDestinationDeviceID:",  10000LL,  100LL,  0LL));
        if (v10) {
          -[NSMutableArray addObjectsFromArray:](v116, "addObjectsFromArray:", v10);
        }

        objc_autoreleasePoolPop(v8);
        id v127 = -[NSMutableArray count](v116, "count");
        if (v127)
        {
          uint64_t v11 = OSLogHandleForIDSCategory("IDSDaemon");
          BOOL v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)__int128 buf = 134217984;
            id v160 = v127;
            _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Processing stored %lu non-urgent internet outgoing messages",  buf,  0xCu);
          }

          if (os_log_shim_legacy_logging_enabled(v13)
            && _IDSShouldLog(0LL, @"IDSDaemon"))
          {
            id v103 = v127;
            _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Processing stored %lu non-urgent internet outgoing messages");
          }

          v122 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
          __int128 v157 = 0u;
          __int128 v158 = 0u;
          __int128 v155 = 0u;
          __int128 v156 = 0u;
          id obj = v116;
          id v14 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v155,  v172,  16LL);
          if (!v14)
          {
            v134 = 0LL;
            goto LABEL_69;
          }

          v134 = 0LL;
          uint64_t v136 = *(void *)v156;
          while (1)
          {
            uint64_t v15 = 0LL;
            do
            {
              if (*(void *)v156 != v136) {
                objc_enumerationMutation(obj);
              }
              uint64_t v16 = *(void **)(*((void *)&v155 + 1) + 8LL * (void)v15);
              uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDAccountController sharedInstance]( &OBJC_CLASS___IDSDAccountController,  "sharedInstance",  v103));
              uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v16 accountGUID]);
              uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v17 accountWithUniqueID:v18]);

              uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v19 service]);
              id v21 = [v20 dataProtectionClass];

              if (v19)
              {
                uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v19 service]);
                if ([v22 adHocServiceType] == 2)
                {

LABEL_28:
                  ++v134;
                  goto LABEL_39;
                }

                uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v19 service]);
                BOOL v24 = [v23 adHocServiceType] == 5;

                if (v24) {
                  goto LABEL_28;
                }
              }

              uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v16 dataToEncrypt]);
              if (v25)
              {
              }

              else if (([v16 encryptPayload] & 1) == 0)
              {
                __int128 v153 = 0u;
                __int128 v154 = 0u;
                __int128 v151 = 0u;
                __int128 v152 = 0u;
                uint64_t v32 = v122;
                id v33 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v32,  "countByEnumeratingWithState:objects:count:",  &v151,  v171,  16LL);
                if (v33)
                {
                  uint64_t v34 = *(void *)v152;
                  while (2)
                  {
                    for (i = 0LL; i != v33; i = (char *)i + 1)
                    {
                      if (*(void *)v152 != v34) {
                        objc_enumerationMutation(v32);
                      }
                      double v36 = *(void **)(*((void *)&v151 + 1) + 8LL * (void)i);
                      if ([v36 canCombineWithMessage:v16])
                      {
                        [v36 combineWithMessage:v16];

                        goto LABEL_38;
                      }
                    }

                    id v33 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v32,  "countByEnumeratingWithState:objects:count:",  &v151,  v171,  16LL);
                    if (v33) {
                      continue;
                    }
                    break;
                  }
                }

                -[NSMutableArray addObject:](v32, "addObject:", v16);
                goto LABEL_38;
              }

              uint64_t v26 = OSLogHandleForIDSCategory("IDSDaemon");
              __int16 v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
              if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
              {
                id v28 = (id)objc_claimAutoreleasedReturnValue([v16 guid]);
                *(_DWORD *)__int128 buf = 138412290;
                id v160 = v28;
                _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "Not combining encrypted message - %@",  buf,  0xCu);
              }

              if (os_log_shim_legacy_logging_enabled(v29)
                && _IDSShouldLog(0LL, @"IDSDaemon"))
              {
                id v103 = (void *)objc_claimAutoreleasedReturnValue([v16 guid]);
                _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon", @"Not combining encrypted message - %@");
              }

              -[NSMutableArray addObject:](v122, "addObject:", v16, v103);
LABEL_38:
              int v30 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon _messageStoreForDataProtectionClass:]( self,  "_messageStoreForDataProtectionClass:",  v21));
              uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v16 guid]);
              [v30 markOutgoingMessageWithGUID:v31 asSent:1];

LABEL_39:
              uint64_t v15 = (char *)v15 + 1;
            }

            while (v15 != v14);
            id v37 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v155,  v172,  16LL);
            id v14 = v37;
            if (!v37)
            {
LABEL_69:

              if (-[NSMutableArray count](v122, "count"))
              {
                -[IDSDaemon _updateNonUrgentInternetSendTimer](self, "_updateNonUrgentInternetSendTimer");
                uint64_t v47 = OSLogHandleForIDSCategory("IDSDaemon");
                __int16 v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(v47);
                if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
                {
                  id v49 = -[NSMutableArray count](v122, "count");
                  *(_DWORD *)__int128 buf = 134218496;
                  id v160 = v127;
                  __int16 v161 = 2048;
                  id v162 = v49;
                  __int16 v163 = 2048;
                  id v164 = v134;
                  _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_DEFAULT,  "Reduced outgoing non-urgent internet messages from %lu to %lu (omitted %lu).",  buf,  0x20u);
                }

                if (os_log_shim_legacy_logging_enabled(v50)
                  && _IDSShouldLog(0LL, @"IDSDaemon"))
                {
                  id v105 = -[NSMutableArray count](v122, "count");
                  unsigned int v110 = v134;
                  id v103 = v127;
                  _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Reduced outgoing non-urgent internet messages from %lu to %lu (omitted %lu).");
                }

                __int128 v149 = 0u;
                __int128 v150 = 0u;
                __int128 v147 = 0u;
                __int128 v148 = 0u;
                uint64_t v117 = v122;
                __int16 v121 = (char *)-[NSMutableArray countByEnumeratingWithState:objects:count:]( v117,  "countByEnumeratingWithState:objects:count:",  &v147,  v170,  16LL);
                if (v121)
                {
                  uint64_t v120 = *(void *)v148;
                  do
                  {
                    id v51 = 0LL;
                    do
                    {
                      if (*(void *)v148 != v120)
                      {
                        id v52 = v51;
                        objc_enumerationMutation(v117);
                        id v51 = v52;
                      }

                      id obja = v51;
                      uint64_t v53 = *(void **)(*((void *)&v147 + 1) + 8LL * (void)v51);
                      contexta = objc_autoreleasePoolPush();
                      uint64_t v54 = OSLogHandleForIDSCategory("IDSDaemon");
                      __int128 v55 = (os_log_s *)objc_claimAutoreleasedReturnValue(v54);
                      if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_WORD *)__int128 buf = 0;
                        _os_log_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_DEFAULT,  "sendNonUrgentInternetMessage - finding Account",  buf,  2u);
                      }

                      if (os_log_shim_legacy_logging_enabled(v56)
                        && _IDSShouldLog(0LL, @"IDSDaemon"))
                      {
                        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"sendNonUrgentInternetMessage - finding Account");
                      }

                      v146[0] = _NSConcreteStackBlock;
                      v146[1] = 3221225472LL;
                      v146[2] = sub_100366D00;
                      v146[3] = &unk_1008F6010;
                      v146[4] = v53;
                      uint64_t v135 = objc_retainBlock(v146);
                      __int128 v57 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDAccountController sharedInstance]( &OBJC_CLASS___IDSDAccountController,  "sharedInstance"));
                      __int128 v58 = (void *)objc_claimAutoreleasedReturnValue([v53 accountGUID]);
                      id v137 = (void *)objc_claimAutoreleasedReturnValue([v57 accountWithUniqueID:v58]);

                      if (v137)
                      {
                        uint64_t v59 = OSLogHandleForIDSCategory("IDSDaemon");
                        double v60 = (os_log_s *)objc_claimAutoreleasedReturnValue(v59);
                        if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
                        {
                          *(_DWORD *)__int128 buf = 138412290;
                          id v160 = v137;
                          _os_log_impl( (void *)&_mh_execute_header,  v60,  OS_LOG_TYPE_DEFAULT,  "sendNonUrgentInternetMessage - got account %@",  buf,  0xCu);
                        }

                        if (os_log_shim_legacy_logging_enabled(v61)
                          && _IDSShouldLog(0LL, @"IDSDaemon"))
                        {
                          id v103 = v137;
                          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"sendNonUrgentInternetMessage - got account %@");
                        }

                        v144[0] = _NSConcreteStackBlock;
                        v144[1] = 3221225472LL;
                        v144[2] = sub_100367130;
                        v144[3] = &unk_100902180;
                        id v128 = v137;
                        id v145 = v128;
                        __int16 v129 = objc_retainBlock(v144);
                        __int128 v62 = (void *)objc_claimAutoreleasedReturnValue([v53 combinedMessages]);
                        BOOL v63 = [v62 count] == 0;

                        if (v63)
                        {
                          ((void (*)(void *, void *))v129[2])(v129, v53);
                        }

                        else
                        {
                          CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0LL, 0LL, &kCFTypeArrayCallBacks);
                          if (Mutable)
                          {
                            __int16 v65 = (void *)objc_claimAutoreleasedReturnValue([v53 message]);
                            BOOL v66 = v65 == 0LL;

                            if (!v66)
                            {
                              id v67 = (void *)objc_claimAutoreleasedReturnValue([v53 message]);
                              CFArrayAppendValue(Mutable, v67);
                            }
                          }

                          __int128 v142 = 0u;
                          __int128 v143 = 0u;
                          __int128 v140 = 0u;
                          __int128 v141 = 0u;
                          id v68 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v53, "combinedMessages", v103, v105, v110));
                          id v69 = [v68 countByEnumeratingWithState:&v140 objects:v169 count:16];
                          if (v69)
                          {
                            uint64_t v70 = *(void *)v141;
                            do
                            {
                              for (j = 0LL; j != v69; j = (char *)j + 1)
                              {
                                if (*(void *)v141 != v70) {
                                  objc_enumerationMutation(v68);
                                }
                                if (Mutable)
                                {
                                  id v72 = *(void **)(*((void *)&v140 + 1) + 8LL * (void)j);
                                  id v73 = (void *)objc_claimAutoreleasedReturnValue([v72 message]);
                                  BOOL v74 = v73 == 0LL;

                                  if (!v74)
                                  {
                                    id v75 = (void *)objc_claimAutoreleasedReturnValue([v72 message]);
                                    CFArrayAppendValue(Mutable, v75);
                                  }
                                }
                              }

                              id v69 = [v68 countByEnumeratingWithState:&v140 objects:v169 count:16];
                            }

                            while (v69);
                          }

                          uint64_t v76 = OSLogHandleForIDSCategory("IDSDaemon");
                          int64_t v77 = (os_log_s *)objc_claimAutoreleasedReturnValue(v76);
                          if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
                          {
                            unsigned int v78 = (void *)objc_claimAutoreleasedReturnValue([v53 combinedMessages]);
                            id v79 = (char *)[v78 count];
                            id v80 = (id)objc_claimAutoreleasedReturnValue([v53 destinations]);
                            id v81 = (id)objc_claimAutoreleasedReturnValue([v53 fromID]);
                            int64_t v82 = v79 + 1;
                            id v83 = (id)objc_claimAutoreleasedReturnValue([v53 guid]);
                            *(_DWORD *)__int128 buf = 138413314;
                            id v160 = v128;
                            __int16 v161 = 2048;
                            id v162 = v82;
                            __int16 v163 = 2112;
                            id v164 = v80;
                            __int16 v165 = 2112;
                            id v166 = v81;
                            __int16 v167 = 2112;
                            id v168 = v83;
                            _os_log_impl( (void *)&_mh_execute_header,  v77,  OS_LOG_TYPE_DEFAULT,  "account %@ sendNonUrgentInternetMessage: bulked: %lu to: %@ identifier: %@ guid: %@",  buf,  0x34u);
                          }

                          if (os_log_shim_legacy_logging_enabled(v84))
                          {
                            if (_IDSShouldLog(0LL, @"IDSDaemon"))
                            {
                              id v85 = (void *)objc_claimAutoreleasedReturnValue([v53 combinedMessages]);
                              __int16 v86 = (char *)[v85 count];
                              id v87 = (void *)objc_claimAutoreleasedReturnValue([v53 destinations]);
                              id v112 = (void *)objc_claimAutoreleasedReturnValue([v53 fromID]);
                              uint64_t v113 = (void *)objc_claimAutoreleasedReturnValue([v53 guid]);
                              id v106 = v86 + 1;
                              id v111 = v87;
                              id v104 = v128;
                              _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"account %@ sendNonUrgentInternetMessage: bulked: %lu to: %@ identifier: %@ guid: %@");
                            }
                          }

                          id v125 = objc_msgSend(v53, "copySendParameters", v104, v106, v111, v112, v113);
                          int v126 = (void *)objc_claimAutoreleasedReturnValue([v53 fromID]);
                          id v124 = (void *)objc_claimAutoreleasedReturnValue([v53 destinations]);
                          unsigned int v119 = [v53 useDictAsTopLevel];
                          __int16 v123 = (void *)objc_claimAutoreleasedReturnValue([v53 dataToEncrypt]);
                          unsigned __int8 v118 = [v53 encryptPayload];
                          unsigned __int8 v88 = [v53 wantsResponse];
                          uint64_t v89 = (void *)objc_claimAutoreleasedReturnValue([v53 expirationDate]);
                          __int16 v90 = (void *)objc_claimAutoreleasedReturnValue([v53 command]);
                          unsigned __int8 v91 = [v53 wantsDeliveryStatus];
                          unsigned __int8 v92 = [v53 wantsCertifiedDelivery];
                          id v93 = (void *)objc_claimAutoreleasedReturnValue([v53 deliveryStatusContext]);
                          __int128 v94 = (void *)objc_claimAutoreleasedReturnValue([v53 messageUUID]);
                          id v95 = [v53 priority];
                          v138[0] = _NSConcreteStackBlock;
                          v138[1] = 3221225472LL;
                          v138[2] = sub_1003676B0;
                          v138[3] = &unk_1008F7CA0;
                          v138[4] = v53;
                          uint64_t v139 = v135;
                          LOWORD(v115) = 0;
                          BYTE1(v114) = v92;
                          LOBYTE(v114) = v91;
                          BYTE1(v107) = v88;
                          LOBYTE(v107) = v118;
                          objc_msgSend( v128,  "sendMessage:params:bulkedPayload:fromID:toDestinations:useDictAsTopLevel:dataToEncrypt:encry ptPayload:wantsResponse:expirationDate:command:wantsDeliveryStatus:wantsCertifiedDelivery:de liveryStatusContext:messageUUID:priority:localDelivery:disallowRefresh:willSendBlock:completionBlock:",  0,  v125,  Mutable,  v126,  v124,  v119,  v123,  v107,  v89,  v90,  v114,  v93,  v94,  v95,  v115,  0,  v138);
                        }
                      }

                      else
                      {
                        uint64_t v96 = OSLogHandleForIDSCategory("Warning");
                        id v97 = (os_log_s *)objc_claimAutoreleasedReturnValue(v96);
                        if (os_log_type_enabled(v97, OS_LOG_TYPE_ERROR))
                        {
                          id v98 = (id)objc_claimAutoreleasedReturnValue([v53 accountGUID]);
                          id v99 = (void *)objc_claimAutoreleasedReturnValue([v53 guid]);
                          *(_DWORD *)__int128 buf = 138412546;
                          id v160 = v98;
                          __int16 v161 = 2112;
                          id v162 = v99;
                          _os_log_impl( (void *)&_mh_execute_header,  v97,  OS_LOG_TYPE_ERROR,  "No account found for ID: %@ - can't send %@",  buf,  0x16u);
                        }

                        if (os_log_shim_legacy_logging_enabled(v100))
                        {
                          id v101 = (void *)objc_claimAutoreleasedReturnValue([v53 accountGUID]);
                          id v108 = (void *)objc_claimAutoreleasedReturnValue([v53 guid]);
                          _IDSWarnV(@"IDSFoundation", @"No account found for ID: %@ - can't send %@");

                          __int16 v102 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v53, "accountGUID", v101, v108));
                          id v109 = (void *)objc_claimAutoreleasedReturnValue([v53 guid]);
                          _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"No account found for ID: %@ - can't send %@");

                          id v103 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v53, "accountGUID", v102, v109));
                          id v105 = (id)objc_claimAutoreleasedReturnValue([v53 guid]);
                          _IDSLogTransport( @"Warning",  @"IDS",  @"No account found for ID: %@ - can't send %@");
                        }

                        ((void (*)(void))v135[2])();
                      }

                      objc_autoreleasePoolPop(contexta);
                      id v51 = obja + 1;
                    }

                    while (obja + 1 != v121);
                    __int16 v121 = (char *)-[NSMutableArray countByEnumeratingWithState:objects:count:]( v117,  "countByEnumeratingWithState:objects:count:",  &v147,  v170,  16LL);
                  }

                  while (v121);
                }
              }

              break;
            }
          }
        }
      }

      else
      {
        uint64_t v44 = OSLogHandleForIDSCategory("IDSDaemon");
        uint64_t v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v44);
        if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEFAULT,  "We can't send further non-urgent internet messages in this window, skipping.",  buf,  2u);
        }

        if (os_log_shim_legacy_logging_enabled(v46)
          && _IDSShouldLog(0LL, @"IDSDaemon"))
        {
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"We can't send further non-urgent internet messages in this window, skipping.");
        }
      }
    }

    else
    {
      uint64_t v41 = OSLogHandleForIDSCategory("IDSDaemon");
      uint64_t v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
      if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEFAULT,  "Lack budget to perform non-urgent internet send, skipping.",  buf,  2u);
      }

      if (os_log_shim_legacy_logging_enabled(v43) && _IDSShouldLog(0LL, @"IDSDaemon")) {
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Lack budget to perform non-urgent internet send, skipping.");
      }
    }
  }

  else
  {
    uint64_t v38 = OSLogHandleForIDSCategory("IDSDaemon");
    uint64_t v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);
    if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "Push is not connected - skipping send attempt.",  buf,  2u);
    }
  }

- (void)_enqueueBlock:(id)a3 identifier:(id)a4 withTimeout:(double)a5 forKey:(id)a6
{
  id v10 = a3;
  id v11 = a4;
  id v12 = a6;
  incomingMessageMultiQueue = self->_incomingMessageMultiQueue;
  if (!incomingMessageMultiQueue)
  {
    id v14 = objc_alloc(&OBJC_CLASS___IMMultiQueue);
    uint64_t v16 = im_primary_queue(v14, v15);
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
    uint64_t v18 = -[IMMultiQueue initWithQueue:](v14, "initWithQueue:", v17);
    uint64_t v19 = self->_incomingMessageMultiQueue;
    self->_incomingMessageMultiQueue = v18;

    incomingMessageMultiQueue = self->_incomingMessageMultiQueue;
  }

  unsigned int v20 = -[IMMultiQueue addBlock:withTimeout:forKey:description:]( incomingMessageMultiQueue,  "addBlock:withTimeout:forKey:description:",  v10,  v12,  v11,  a5);
  id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMIDSLog daemon](&OBJC_CLASS___IMIDSLog, "daemon"));
  BOOL v22 = os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
  if (v20)
  {
    if (v22)
    {
      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue( -[IMMultiQueue loggableOverviewForKey:]( self->_incomingMessageMultiQueue,  "loggableOverviewForKey:",  v12));
      int v24 = 138412802;
      id v25 = v12;
      __int16 v26 = 2112;
      id v27 = v11;
      __int16 v28 = 2112;
      uint64_t v29 = v23;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Enqueueing block in multiqueue {key: %@, identifier: %@, queueState: %@}",  (uint8_t *)&v24,  0x20u);
    }
  }

  else if (v22)
  {
    int v24 = 138412546;
    id v25 = v12;
    __int16 v26 = 2112;
    id v27 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Enqueueing block in multiqueue {key: %@, identifier: %@}",  (uint8_t *)&v24,  0x16u);
  }
}

- (BOOL)_shouldDropMessageForIncomingErrorMessageWithDecryptionErrorType:(int64_t)a3
{
  return a3 == 202;
}

- (BOOL)_shouldDropMessageForIncomingDecryptionErrorType:(int64_t)a3
{
  return a3 == 601 || (a3 & 0xFFFFFFFFFFFFFFFDLL) == 200;
}

- (BOOL)_shouldForgetCachedPeerTokensForIncomingRemoteDecryptionErrorType:(int64_t)a3
{
  BOOL result = 1;
  if (a3 > 801)
  {
    return 0;
  }

  if (a3 > 499)
  {
    return 0;
  }

  if (!a3 || a3 == 202 || a3 == 400) {
    return 0;
  }
  return result;
}

- (BOOL)_shouldForgetCachedPeerTokensForDecryptionErrorType:(int64_t)a3 withOriginalDecryptionError:(id)a4
{
  id v5 = a4;
  unsigned __int8 v6 = (void *)objc_claimAutoreleasedReturnValue([v5 userInfo]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKeyedSubscript:NSUnderlyingErrorKey]);

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v5 domain]);
  if (![v8 isEqualToString:IDSDecryptionErrorDomain]
    || [v5 code] != (id)15)
  {
    goto LABEL_7;
  }

  unsigned __int8 v9 = (void *)objc_claimAutoreleasedReturnValue([v7 domain]);
  if (([v9 isEqualToString:@"com.apple.messageprotection"] & 1) == 0)
  {

LABEL_7:
    goto LABEL_8;
  }

  id v10 = [v7 code];

  if (v10 == (id)802)
  {
LABEL_14:
    BOOL v11 = 0;
    goto LABEL_15;
  }

- (BOOL)_shouldReplyWithRemoteDecryptionErrorMessageForDecryptionErrorType:(int64_t)a3
{
  BOOL result = 1;
  if (a3 <= 600)
  {
    if (a3 && a3 != 202 && a3 != 501) {
      return result;
    }
    return 0;
  }

  return result;
}

- (BOOL)_shouldReplyWithCertifiedDeliveryReceiptForDecryptionErrorType:(int64_t)a3
{
  return (unint64_t)(a3 - 900) >= 4 && a3 != 601 && a3;
}

- (BOOL)_shouldRetryForDecryptionErrorType:(int64_t)a3
{
  BOOL result = 1;
  if (a3 > 899)
  {
    return 0;
  }

  if (!a3 || a3 == 202 || a3 == 501) {
    return 0;
  }
  return result;
}

- (id)_failureReasonMessageFromSecondaryError:(id)a3 ECError:(id)a4 andLegacyError:(id)a5
{
  id v7 = a5;
  id v8 = a4;
  unsigned __int8 v9 = (void *)objc_claimAutoreleasedReturnValue( +[IDSMessageMetricReporter errorToReportForNGMError:]( &OBJC_CLASS___IDSMessageMetricReporter,  "errorToReportForNGMError:",  a3));
  id v10 = (void *)objc_claimAutoreleasedReturnValue( +[IDSMessageMetricReporter errorToReportForNGMError:]( &OBJC_CLASS___IDSMessageMetricReporter,  "errorToReportForNGMError:",  v8));

  BOOL v11 = (void *)objc_claimAutoreleasedReturnValue( +[IDSMessageMetricReporter errorToReportForLegacyError:]( &OBJC_CLASS___IDSMessageMetricReporter,  "errorToReportForLegacyError:",  v7));
  if (v9) {
    BOOL v12 = v10 == 0LL;
  }
  else {
    BOOL v12 = 1;
  }
  int v13 = !v12;
  if (v13 == 1 && v11 != 0LL)
  {
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v9 domain]);
    id v18 = [v9 code];
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v10 domain]);
    id v20 = [v10 code];
    id v21 = (void *)objc_claimAutoreleasedReturnValue([v11 domain]);
    BOOL v22 = (__CFString *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"secondary-%@-%ld ec-%@-%ld legacy-%@-%ld",  v17,  v18,  v19,  v20,  v21,  [v11 code]));

LABEL_21:
    goto LABEL_22;
  }

  if (v13)
  {
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v9 domain]);
    id v15 = [v9 code];
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v10 domain]);
    uint64_t v16 = +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"secondary-%@-%ld ec-%@-%ld",  v17,  v15,  v19,  [v10 code]);
LABEL_20:
    BOOL v22 = (__CFString *)objc_claimAutoreleasedReturnValue(v16);
    goto LABEL_21;
  }

  if (v10 && v11)
  {
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v10 domain]);
    id v23 = [v10 code];
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v11 domain]);
    uint64_t v16 = +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"ec-%@-%ld legacy-%@-%ld",  v17,  v23,  v19,  [v11 code]);
    goto LABEL_20;
  }

  if (v9 && v11)
  {
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v9 domain]);
    id v24 = [v9 code];
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v11 domain]);
    uint64_t v16 = +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"secondary-%@-%ld legacy-%@-%ld",  v17,  v24,  v19,  [v11 code]);
    goto LABEL_20;
  }

  if (v9)
  {
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v9 domain]);
    __int16 v26 = +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"secondary-%@-%ld",  v17,  [v9 code]);
  }

  else if (v10)
  {
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v10 domain]);
    __int16 v26 = +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"ec-%@-%ld",  v17,  [v10 code]);
  }

  else
  {
    if (!v11)
    {
      BOOL v22 = &stru_100912B50;
      goto LABEL_23;
    }

    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v11 domain]);
    __int16 v26 = +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"legacy-%@-%ld",  v17,  [v11 code]);
  }

  BOOL v22 = (__CFString *)objc_claimAutoreleasedReturnValue(v26);
LABEL_22:

LABEL_23:
  return v22;
}

- (void)_optionallyDecryptNiceMessage:(id)a3 encryptedData:(id)a4 forGroupID:(id)a5 forTopic:(id)a6 fromURI:(id)a7 certifiedDeliveryContext:(id)a8 completionBlock:(id)a9
{
  LOBYTE(v9) = 0;
  -[IDSDaemon _optionallyDecryptNiceMessage:encryptedData:forGroupID:forTopic:fromURI:certifiedDeliveryContext:isLiveRetry:completionBlock:]( self,  "_optionallyDecryptNiceMessage:encryptedData:forGroupID:forTopic:fromURI:certifiedDeliveryContext:isLiveRetry:completionBlock:",  a3,  a4,  a5,  a6,  a7,  a8,  v9,  a9);
}

- (double)_decryptionRetryIntervalForError:(id)a3
{
  id v3 = a3;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 domain]);
  if ([v4 isEqualToString:IDSDecryptionErrorDomain])
  {
    id v5 = [v3 code];

    double v6 = 2.0;
    if (v5 == (id)2) {
      goto LABEL_6;
    }
  }

  else
  {
  }

  double v6 = 0.0;
LABEL_6:

  return v6;
}

+ (BOOL)_topicAllowsNoEncryption:(id)a3 fromURI:(id)a4
{
  id v5 = a3;
  id v6 = a4;
  id v7 = -[NSSet initWithObjects:]( objc_alloc(&OBJC_CLASS___NSSet),  "initWithObjects:",  @"mailto:support@apple.com",  @"mailto:info@apple.com",  @"mailto:alert@apple.com",  0LL);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 prefixedURI]);
  if (IMStringIsEmail(v8))
  {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v6 prefixedURI]);
    if ([v9 hasSuffix:@".apple.com"])
    {
      unsigned __int8 v10 = 1;
    }

    else
    {
      BOOL v11 = (void *)objc_claimAutoreleasedReturnValue([v6 prefixedURI]);
      unsigned __int8 v10 = -[NSSet containsObject:](v7, "containsObject:", v11);
    }
  }

  else
  {
    unsigned __int8 v10 = 0;
  }

  if ([v5 isEqualToString:@"com.apple.madrid"] && (v10 & 1) != 0
    || ([v5 isEqualToString:@"com.apple.private.alloy.bulletinboard"] & 1) != 0
    || ([v5 isEqualToString:@"com.apple.private.alloy.keychainsync"] & 1) != 0)
  {
    unsigned __int8 v12 = 1;
  }

  else
  {
    unsigned __int8 v12 = [v5 isEqualToString:@"com.apple.private.alloy.willow"];
  }

  return v12;
}

- (void)_submitLastResortCacheMetricForGUID:(id)a3 service:(id)a4
{
  id v5 = a4;
  id v6 = a3;
  id v7 = [[IDSMissingMessageMetric alloc] initWithReason:706 guid:v6 service:v5 additionalInformation:0];

  +[IDSMissingMessageMetricReporter sendMetric:](&OBJC_CLASS___IDSMissingMessageMetricReporter, "sendMetric:", v7);
}

- (void)_sendNiceMessageCheckpointIfNecessary:(id)a3 checkpoint:(int64_t)a4 service:(id)a5 additionalInformation:(id)a6
{
  id v10 = a3;
  id v11 = a5;
  id v12 = a6;
  int v13 = (void *)objc_claimAutoreleasedReturnValue([v10 pushUUID]);
  id v14 = (void *)objc_claimAutoreleasedReturnValue([v10 wantsCheckpointing]);
  unsigned int v15 = [v14 BOOLValue];

  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon serverBagForBagType:](self, "serverBagForBagType:", 1LL));
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v16 objectForKey:@"disable-message-checkpointing"]);
  unsigned int v18 = [v17 BOOLValue];

  uint64_t v19 = OSLogHandleForIDSCategory("MessageCheckpointing");
  id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    id v21 = @"NO";
    *(_DWORD *)__int128 buf = 134218754;
    int64_t v26 = a4;
    if (v15) {
      BOOL v22 = @"YES";
    }
    else {
      BOOL v22 = @"NO";
    }
    if (v18) {
      id v21 = @"YES";
    }
    __int16 v27 = 2112;
    __int16 v28 = v13;
    __int16 v29 = 2112;
    int v30 = v22;
    __int16 v31 = 2112;
    uint64_t v32 = v21;
    _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "At checkpoint %ld for guid %@. Wants checkpointing %@ disabled by bag key %@",  buf,  0x2Au);
  }

  if (os_log_shim_legacy_logging_enabled(v23)
    && _IDSShouldLog(0LL, @"MessageCheckpointing"))
  {
    _IDSLogV( 0LL,  @"IDSFoundation",  @"MessageCheckpointing",  @"At checkpoint %ld for guid %@. Wants checkpointing %@ disabled by bag key %@");
  }

  if (((v15 ^ 1 | v18) & 1) == 0)
  {
    id v24 = [[IDSMissingMessageMetric alloc] initWithReason:a4 guid:v13 service:v11 additionalInformation:v12];
    +[IDSMissingMessageMetricReporter sendMetric:](&OBJC_CLASS___IDSMissingMessageMetricReporter, "sendMetric:", v24);
  }
}

- (void)_callReplayCommitBlockForIncomingMessages:(id)a3
{
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  id obj = a3;
  id v4 = [obj countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v20;
    do
    {
      for (i = 0LL; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v20 != v6) {
          objc_enumerationMutation(obj);
        }
        id v8 = *(void **)(*((void *)&v19 + 1) + 8LL * (void)i);
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 message]);
        id v10 = objc_alloc(&OBJC_CLASS___IDSIncomingNiceMessage);
        id v11 = (void *)objc_claimAutoreleasedReturnValue([v8 topic]);
        id v12 = [v10 initWithMessageDictionary:v9 topic:v11];

        int v13 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon _replayKeyForNiceMessage:encryptedData:]( self,  "_replayKeyForNiceMessage:encryptedData:",  v12,  0LL));
        id v14 = (void *)objc_claimAutoreleasedReturnValue( +[IDSEncryptionController sharedInstance]( &OBJC_CLASS___IDSEncryptionController,  "sharedInstance"));
        v17[0] = _NSConcreteStackBlock;
        v17[1] = 3221225472LL;
        v17[2] = sub_1003686D8;
        v17[3] = &unk_1008F5F80;
        v17[4] = self;
        id v15 = v13;
        id v18 = v15;
        [v14 performAsyncBlock:v17 priority:300];

        if (v15) {
          -[NSMutableDictionary removeObjectForKey:](self->_replayKeyToMessageUUIDMap, "removeObjectForKey:", v15);
        }
      }

      id v5 = [obj countByEnumeratingWithState:&v19 objects:v23 count:16];
    }

    while (v5);
  }
}

- (id)_replayKeyForNiceMessage:(id)a3 encryptedData:(id)a4
{
  id v5 = a3;
  id v6 = a4;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 pushUUID]);
  if (v6 || (id v6 = (id)objc_claimAutoreleasedReturnValue([v5 encryptedPayload])) != 0)
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v5 groupIDData]);
    if (v8)
    {
      uint64_t v9 = -[ENGroupID initWithDataRepresentation:]( objc_alloc(&OBJC_CLASS___ENGroupID),  "initWithDataRepresentation:",  v8);

      BOOL v10 = v9 != 0LL;
    }

    else
    {
      BOOL v10 = 0;
    }

    id v11 = (void *)objc_claimAutoreleasedReturnValue([v5 encryptionTypeStr]);
    int v13 = IDSEncryptionTypeFromEncryptionTypeString(v11, v12) != 4 || v10;
    if (v13 == 1)
    {
      id v14 = (void *)objc_claimAutoreleasedReturnValue( +[IDSRegistrationKeyManager sharedInstance]( &OBJC_CLASS___IDSRegistrationKeyManager,  "sharedInstance"));
      id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 fullDeviceIdentityContainer]);
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 legacyFullIdentity]);
    }

    else
    {
      uint64_t v16 = 0LL;
    }

    id v17 = objc_alloc(&OBJC_CLASS___IDSCertifiedDeliveryReplayKey);
    id v18 = (void *)objc_claimAutoreleasedReturnValue([v6 _FTOptionallyDecompressData]);
    id v19 = [v17 initWithPayload:v18 legacyIdentity:v16];
  }

  else
  {
    uint64_t v21 = OSLogHandleForIDSCategory("IDSDaemon");
    __int128 v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v25 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "No payload data present in message %@ unable create a replay key.",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v23) && _IDSShouldLog(0LL, @"IDSDaemon")) {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"No payload data present in message %@ unable create a replay key.");
    }
    id v19 = 0LL;
  }

  return v19;
}

- (void)_optionallyDecryptNiceMessage:(id)a3 encryptedData:(id)a4 forGroupID:(id)a5 forTopic:(id)a6 fromURI:(id)a7 certifiedDeliveryContext:(id)a8 isLiveRetry:(BOOL)a9 completionBlock:(id)a10
{
  uint64_t v16 = (__CFString *)a3;
  id v17 = a4;
  id v18 = a5;
  id v19 = (__CFString *)a6;
  id v92 = a7;
  id v20 = a8;
  id v21 = a10;
  __int128 v22 = (void (**)(void, void, void, void))v21;
  if (v16 && v21)
  {
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v17 _FTOptionallyDecompressData]);
    if (!v23)
    {
      id v24 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString encryptedPayload](v16, "encryptedPayload"));
      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v24 _FTOptionallyDecompressData]);
    }

    else {
      unsigned __int8 v88 = 0LL;
    }
    value = (void *)objc_claimAutoreleasedReturnValue(-[__CFString encryptionTypeStr](v16, "encryptionTypeStr"));
    uint64_t v26 = IDSEncryptionTypeFromEncryptionTypeString(value, v25);
    uint64_t v27 = 3LL;
    if (!v18) {
      uint64_t v27 = v26;
    }
    uint64_t v87 = v27;
    __int16 v90 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString toURI](v16, "toURI"));
    uint64_t v89 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString senderPushToken](v16, "senderPushToken"));
    unsigned __int8 v91 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString command](v16, "command"));
    if (-[__CFString isEqualToString:](v19, "isEqualToString:", IDSServiceNameiMessageLite))
    {
      BOOL v29 = [v91 integerValue] == (id)100;
      if (!v23) {
        goto LABEL_19;
      }
    }

    else
    {
      BOOL v29 = 0;
      if (!v23) {
        goto LABEL_19;
      }
    }

    if (v87 == 2)
    {
      if (((objc_msgSend((id)objc_opt_class(self, v28), "_topicAllowsNoEncryption:fromURI:", v19, v92) | v29) & 1) == 0)
      {
        int v30 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSGenericErrorDomain,  202LL,  0LL));
        __int16 v31 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
        uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString rawMessage](v16, "rawMessage"));
        if (v32)
        {
          CFDictionarySetValue((CFMutableDictionaryRef)v31, IDSIncomingMessagePushPayloadKey, v32);
        }

        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          sub_1006A8818();
        }

        if (value) {
          CFDictionarySetValue((CFMutableDictionaryRef)v31, IDSIncomingMessageOriginalEncryptionTypeKey, value);
        }
        ((void (**)(void, NSMutableDictionary *, NSMutableDictionary *, id))v22)[2](v22, v31, v30, v20);

        goto LABEL_28;
      }
    }

    else if (!v29)
    {
      if (v90 && v89)
      {
        uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon serviceController](self, "serviceController"));
        int v30 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue([v34 serviceWithPushTopic:v19]);

        if (v30)
        {
          __int16 v86 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon _validAccountForIncomingMessageSentToURI:service:outPseudonym:]( self,  "_validAccountForIncomingMessageSentToURI:service:outPseudonym:",  v90,  v30,  0LL));
          if (v86)
          {
            double v35 = (void *)objc_claimAutoreleasedReturnValue([v92 prefixedURI]);
            else {
              id v80 = (void *)objc_claimAutoreleasedReturnValue([v89 rawToken]);
            }

            uint64_t v84 = (void *)objc_claimAutoreleasedReturnValue( +[IDSEncryptionController sharedInstance]( &OBJC_CLASS___IDSEncryptionController,  "sharedInstance"));
            id v49 = (void *)objc_claimAutoreleasedReturnValue([v84 failedTokenCache]);
            unsigned int v81 = [v49 underLimitForItem:v80];

            id v85 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary queryService](v30, "queryService"));
            uint64_t v50 = OSLogHandleForIDSCategory("IDSDaemon");
            id v51 = (os_log_s *)objc_claimAutoreleasedReturnValue(v50);
            if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
            {
              id v52 = @"NO";
              *(_DWORD *)__int128 buf = 138413058;
              if (v81) {
                id v52 = @"YES";
              }
              __int128 v116 = v52;
              __int16 v117 = 2112;
              unsigned __int8 v118 = v89;
              __int16 v119 = 2112;
              uint64_t v120 = v85;
              __int16 v121 = 2112;
              id v122 = v92;
              _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_DEFAULT,  "Noting peer token {shouldNoteToken: %@, token: %@, service: %@, fromIdentifier: %@}",  buf,  0x2Au);
            }

            if (os_log_shim_legacy_logging_enabled(v53)
              && _IDSShouldLog(0LL, @"IDSDaemon"))
            {
              uint64_t v54 = @"NO";
              if (v81) {
                uint64_t v54 = @"YES";
              }
              uint64_t v70 = v85;
              id v71 = v92;
              __int16 v65 = v54;
              id v67 = v89;
              _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Noting peer token {shouldNoteToken: %@, token: %@, service: %@, fromIdentifier: %@}");
            }

            if (v81)
            {
              __int128 v55 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPeerIDManager sharedInstance](&OBJC_CLASS___IDSPeerIDManager, "sharedInstance"));
              [v55 notePeerToken:v89 forURI:v92 fromURI:v90 service:v85];

              uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue( +[IDSIDStatusQueryController sharedInstance]( &OBJC_CLASS___IDSIDStatusQueryController,  "sharedInstance"));
              [v56 noteIncomingID:v92 fromService:v85];
            }

            int64_t v82 = (__CFString *)objc_claimAutoreleasedReturnValue(-[__CFString pushUUID](v16, "pushUUID", v65, v67, v70, v71));
            uint64_t v57 = OSLogHandleForIDSCategory("1to1EC");
            __int128 v58 = (os_log_s *)objc_claimAutoreleasedReturnValue(v57);
            if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)__int128 buf = 138412546;
              __int128 v116 = v82;
              __int16 v117 = 2112;
              unsigned __int8 v118 = value;
              _os_log_impl( (void *)&_mh_execute_header,  v58,  OS_LOG_TYPE_DEFAULT,  "Decrypting message %@ of encryption type \"%@\"",  buf,  0x16u);
            }

            if (os_log_shim_legacy_logging_enabled(v59)
              && _IDSShouldLog(0LL, @"1to1EC"))
            {
              BOOL v66 = v82;
              id v68 = value;
              _IDSLogV( 0LL,  @"IDSFoundation",  @"1to1EC",  @"Decrypting message %@ of encryption type \"%@\"");
            }

            if (_os_feature_enabled_impl("IDS", "GFTPerfSignpostCollection")
              && IDSCommandIsGroupSessionCommand(v91))
            {
              kdebug_trace(722010440, [v91 integerValue], 0, 0, 0);
            }

            -[IDSDaemon _sendNiceMessageCheckpointIfNecessary:checkpoint:service:additionalInformation:]( self,  "_sendNiceMessageCheckpointIfNecessary:checkpoint:service:additionalInformation:",  v16,  9200LL,  v19,  0LL,  v66,  v68);
            double v60 = (void *)objc_claimAutoreleasedReturnValue(+[IMLockdownManager sharedInstance](&OBJC_CLASS___IMLockdownManager, "sharedInstance"));
            unsigned int v78 = [v60 isInternalInstall];

            if (v78)
            {
              else {
                +[IDSNGMSwizzler uninstallMethods](&OBJC_CLASS___IDSNGMSwizzler, "uninstallMethods");
              }
            }

            uint64_t v61 = objc_claimAutoreleasedReturnValue( -[IDSDaemon _replayKeyForNiceMessage:encryptedData:]( self,  "_replayKeyForNiceMessage:encryptedData:",  v16,  v23));
            __int128 v62 = (void *)v61;
            if (v61)
            {
              -[NSMutableDictionary setObject:forKey:](self->_replayKeyToMessageUUIDMap, "setObject:forKey:", v82, v61);
              __int128 v62 = (void *)v61;
            }

            int64_t v77 = v62;
            v94[0] = _NSConcreteStackBlock;
            v94[1] = 3221225472LL;
            v94[2] = sub_100369828;
            v94[3] = &unk_100902220;
            id v95 = v91;
            id v96 = v88;
            id v76 = v92;
            id v97 = v76;
            id v75 = v89;
            id v98 = v75;
            id v99 = self;
            id v79 = v82;
            uint64_t v100 = v79;
            id v101 = v19;
            id v74 = v90;
            id v102 = v74;
            id v103 = v30;
            BOOL v114 = a9;
            id v104 = v16;
            id v105 = v17;
            id v73 = v18;
            id v106 = v73;
            id v107 = v20;
            id v112 = v22;
            uint64_t v113 = v87;
            id v108 = value;
            id v72 = v23;
            id v109 = v72;
            id v63 = v86;
            id v110 = v63;
            id v83 = v77;
            id v111 = v83;
            id v64 = objc_retainBlock(v94);
            LOBYTE(v69) = a9;
            [v63 decryptMessageData:v72 guid:v79 localURI:v74 remoteURI:v76 pushToken:v75 groupID:v73 encryptionType:v87 isLiveRetry:v69 replayKey:v83 completionBlock:v64];
          }

          else
          {
            uint64_t v45 = OSLogHandleForIDSCategory("Warning");
            uint64_t v46 = (os_log_s *)objc_claimAutoreleasedReturnValue(v45);
            if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)__int128 buf = 138412546;
              __int128 v116 = v19;
              __int16 v117 = 2112;
              unsigned __int8 v118 = v90;
              _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_ERROR,  "No account found for topic: %@   toURI: %@",  buf,  0x16u);
            }

            if (os_log_shim_legacy_logging_enabled(v47))
            {
              _IDSWarnV(@"IDSFoundation", @"No account found for topic: %@   toURI: %@");
              _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"No account found for topic: %@   toURI: %@");
              __n128 v48 = _IDSLogTransport( @"Warning",  @"IDS",  @"No account found for topic: %@   toURI: %@");
            }

            ((void (*)(void (**)(void, void, void, void), void, void, id, __n128))v22[2])( v22,  0LL,  0LL,  v20,  v48);
          }
        }

        else
        {
          uint64_t v42 = OSLogHandleForIDSCategory("Warning");
          uint64_t v43 = (os_log_s *)objc_claimAutoreleasedReturnValue(v42);
          if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__int128 buf = 138412290;
            __int128 v116 = v19;
            _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_ERROR,  "Incoming message for topic: %@  but no service found",  buf,  0xCu);
          }

          if (os_log_shim_legacy_logging_enabled(v44))
          {
            _IDSWarnV(@"IDSFoundation", @"Incoming message for topic: %@  but no service found");
            _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"Incoming message for topic: %@  but no service found");
            _IDSLogTransport( @"Warning",  @"IDS",  @"Incoming message for topic: %@  but no service found");
          }
        }
      }

      else
      {
        uint64_t v36 = OSLogHandleForIDSCategory("Warning");
        id v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
        if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__int128 buf = 138412802;
          __int128 v116 = v16;
          __int16 v117 = 2112;
          unsigned __int8 v118 = v90;
          __int16 v119 = 2112;
          uint64_t v120 = v89;
          _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_ERROR,  "Incoming message %@ missing routing information -- failing {toURI: %@, senderPushToken: %@}",  buf,  0x20u);
        }

        if (os_log_shim_legacy_logging_enabled(v38))
        {
          _IDSWarnV( @"IDSFoundation",  @"Incoming message %@ missing routing information -- failing {toURI: %@, senderPushToken: %@}");
          _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"Incoming message %@ missing routing information -- failing {toURI: %@, senderPushToken: %@}");
          id v67 = v90;
          uint64_t v70 = v89;
          __int16 v65 = v16;
          *(void *)&double v39 = _IDSLogTransport( @"Warning",  @"IDS",  @"Incoming message %@ missing routing information -- failing {toURI: %@, senderPushToken: %@}").n128_u64[0];
        }

        int v30 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSGenericErrorDomain,  202LL,  0LL,  v39,  v65,  v67,  v70));
        uint64_t v40 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
        uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString rawMessage](v16, "rawMessage"));
        if (v41)
        {
          CFDictionarySetValue((CFMutableDictionaryRef)v40, IDSIncomingMessagePushPayloadKey, v41);
        }

        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          sub_1006A8818();
        }

        if (value) {
          CFDictionarySetValue((CFMutableDictionaryRef)v40, IDSIncomingMessageOriginalEncryptionTypeKey, value);
        }
        ((void (**)(void, NSMutableDictionary *, NSMutableDictionary *, id))v22)[2](v22, v40, v30, v20);
      }

      goto LABEL_28;
    }

- (void)_handleIncomingNiceAttachmentMessage:(id)a3 forTopic:(id)a4 fromURI:(id)a5 certifiedDeliveryContext:(id)a6 completionBlock:(id)a7
{
  id v11 = a3;
  id v55 = a4;
  id v12 = a5;
  id v54 = a6;
  id v13 = a7;
  uint64_t v56 = v11;
  if (v11 && v13)
  {
    id v51 = v13;
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v11 toURI]);
    id v15 = (void *)objc_claimAutoreleasedReturnValue([v11 senderPushToken]);
    uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue([v11 pushUUID]);
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon serviceController](self, "serviceController"));
    id v52 = (void *)objc_claimAutoreleasedReturnValue([v16 serviceWithPushTopic:v55]);

    id v17 = v52;
    if (!v52)
    {
      _IMWarn(@"Incoming message for topic: %@  but no service found");
LABEL_44:

      id v13 = v51;
      goto LABEL_45;
    }

    __n128 v48 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon _validAccountForIncomingMessageSentToURI:service:outPseudonym:]( self,  "_validAccountForIncomingMessageSentToURI:service:outPseudonym:",  v14,  v52,  0LL));
    if (!v48)
    {
      _IMWarn(@"No account found for topic: %@   toURI: %@");
      (*((void (**)(id, void, void, id))v51 + 2))(v51, 0LL, 0LL, v54);
LABEL_43:

      id v17 = v52;
      goto LABEL_44;
    }

    id v18 = (void *)objc_claimAutoreleasedReturnValue([v56 encryptedPayload]);
    id v49 = (void *)objc_claimAutoreleasedReturnValue([v18 _FTOptionallyDecompressData]);

    value = (void *)objc_claimAutoreleasedReturnValue([v56 encryptionTypeStr]);
    uint64_t v44 = IDSEncryptionTypeFromEncryptionTypeString(value, v19);
    uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon _replayKeyForNiceMessage:encryptedData:]( self,  "_replayKeyForNiceMessage:encryptedData:",  v56,  v49));
    if (v46)
    {
      replayKeyToMessageUUIDMap = self->_replayKeyToMessageUUIDMap;
      id v21 = (void *)objc_claimAutoreleasedReturnValue([v56 pushUUID]);
      -[NSMutableDictionary setObject:forKey:](replayKeyToMessageUUIDMap, "setObject:forKey:", v21, v46);
    }

    uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue([v56 payloadMetadataData]);
    if (!v49) {
      goto LABEL_10;
    }
    if (v44 != 2)
    {
      __int128 v75 = 0u;
      __int128 v76 = 0u;
      __int128 v73 = 0u;
      __int128 v74 = 0u;
      theDict = (NSMutableDictionary *)(id)objc_claimAutoreleasedReturnValue([v52 allInterestedQueryServices]);
      id v24 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:]( theDict,  "countByEnumeratingWithState:objects:count:",  &v73,  v85,  16LL);
      if (v24)
      {
        uint64_t v25 = *(void *)v74;
        do
        {
          for (i = 0LL; i != v24; i = (char *)i + 1)
          {
            if (*(void *)v74 != v25) {
              objc_enumerationMutation(theDict);
            }
            uint64_t v27 = *(void *)(*((void *)&v73 + 1) + 8LL * (void)i);
            uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPeerIDManager sharedInstance](&OBJC_CLASS___IDSPeerIDManager, "sharedInstance"));
            [v28 notePeerToken:v15 forURI:v12 fromURI:v14 service:v27];

            BOOL v29 = (void *)objc_claimAutoreleasedReturnValue( +[IDSIDStatusQueryController sharedInstance]( &OBJC_CLASS___IDSIDStatusQueryController,  "sharedInstance"));
            [v29 noteIncomingID:v12 fromService:v27];
          }

          id v24 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:]( theDict,  "countByEnumeratingWithState:objects:count:",  &v73,  v85,  16LL);
        }

        while (v24);
      }

      unsigned int v30 = [v12 isEqualToURI:v14];
      uint64_t v31 = OSLogHandleForIDSCategory("MessageService");
      uint64_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
      {
        id v33 = @"NO";
        *(_DWORD *)__int128 buf = 134218754;
        unsigned int v78 = v49;
        if (v30) {
          id v33 = @"YES";
        }
        __int16 v79 = 2112;
        id v80 = v50;
        __int16 v81 = 2112;
        id v82 = v12;
        __int16 v83 = 2112;
        uint64_t v84 = v33;
        _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "Incoming message attachment data: %p ID: %@  from: %@ fromMe: %@",  buf,  0x2Au);
      }

      if (os_log_shim_legacy_logging_enabled(v34))
      {
        uint64_t v43 = v50;
        _IDSLogEventV( @"IDSFoundation",  @"MessageService",  @"Incoming message attachment data: %p ID: %@  from: %@ fromMe: %@");
      }

      v58[0] = _NSConcreteStackBlock;
      v58[1] = 3221225472LL;
      v58[2] = sub_10036B528;
      v58[3] = &unk_1009022B8;
      id v59 = v56;
      id v60 = v45;
      id v35 = v12;
      id v61 = v35;
      id v36 = v15;
      id v62 = v36;
      id v63 = self;
      id v37 = v14;
      id v64 = v37;
      id v65 = v52;
      id v38 = v50;
      id v66 = v38;
      id v71 = v51;
      id v67 = value;
      id v68 = v54;
      uint64_t v72 = v44;
      id v69 = v55;
      id v39 = v48;
      id v70 = v39;
      uint64_t v40 = objc_retainBlock(v58);
      LOBYTE(v43) = 0;
      [v39 decryptMessageData:v49 guid:v38 localURI:v37 remoteURI:v35 pushToken:v36 groupID:0 encryptionType:v44 isLiveRetry:v43 replayKey:v46 completionBlock:v40];

      goto LABEL_42;
    }

    if (!objc_msgSend((id)objc_opt_class(self, v22), "_topicAllowsNoEncryption:fromURI:", v55, v12))
    {
      theDict = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSGenericErrorDomain,  202LL,  0LL));
      uint64_t v41 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue([v56 rawMessage]);
      if (v42)
      {
        CFDictionarySetValue((CFMutableDictionaryRef)v41, IDSIncomingMessagePushPayloadKey, v42);
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_1006A8818();
      }

      if (value) {
        CFDictionarySetValue((CFMutableDictionaryRef)v41, IDSIncomingMessageOriginalEncryptionTypeKey, value);
      }
      (*((void (**)(id, NSMutableDictionary *, NSMutableDictionary *, id))v51 + 2))(v51, v41, theDict, v54);
    }

    else
    {
LABEL_10:
      theDict = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v56 rawMessage]);
      if (v23)
      {
        CFDictionarySetValue((CFMutableDictionaryRef)theDict, IDSIncomingMessagePushPayloadKey, v23);
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_1006A8818();
      }

      if (value) {
        CFDictionarySetValue((CFMutableDictionaryRef)theDict, IDSIncomingMessageOriginalEncryptionTypeKey, value);
      }
      if (v49) {
        CFDictionarySetValue((CFMutableDictionaryRef)theDict, IDSIncomingMessageDecryptedDataKey, v49);
      }
      (*((void (**)(id, NSMutableDictionary *, void, id))v51 + 2))(v51, theDict, 0LL, v54);
    }

- (void)getLocalIncomingPowerAssertion:(id)a3 queue:(id)a4
{
  id v6 = a3;
  id v7 = (dispatch_queue_s *)a4;
  pthread_mutex_lock(&self->_incomingLocalPowerAssertionLock);
  if (!self->_incomingLocalPowerAssertion)
  {
    id v8 = objc_alloc(&OBJC_CLASS___IMPowerAssertion);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v6 identifier]);
    BOOL v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"IDS-receive-%@",  v9));
    id v11 = -[IMPowerAssertion initWithIdentifier:timeout:](v8, "initWithIdentifier:timeout:", v10, 120.0);
    incomingLocalPowerAssertion = self->_incomingLocalPowerAssertion;
    self->_incomingLocalPowerAssertion = v11;
  }

  ++self->_incomingLocalPowerAssertionClients;
  pthread_mutex_unlock(&self->_incomingLocalPowerAssertionLock);
  else {
    int64_t v13 = 2000000000LL;
  }
  dispatch_time_t v14 = dispatch_time(0LL, v13);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10036D320;
  block[3] = &unk_1008F6010;
  void block[4] = self;
  dispatch_after(v14, v7, block);
}

- (void)_IDSPowerLogDictionary:(id)a3 info:(id)a4
{
}

- (void)_processIncomingLocalMessage:(id)a3 topic:(id)a4 command:(id)a5 deviceID:(id)a6 btUUID:(id)a7 context:(id)a8 storedGUID:(id)a9 priority:(id)a10 connectionType:(int64_t)a11 didWakeHint:(BOOL)a12
{
  id v208 = a3;
  id v17 = (char *)a4;
  id v210 = a5;
  id v207 = a6;
  id v202 = a7;
  id v18 = (__CFDictionary *)a8;
  v209 = (char *)a9;
  id v206 = a10;
  im_assert_primary_base_queue(v206, v19);
  key = (void *)IDSMessageContextOutgoingResponseIdentifierKey;
  uint64_t v211 = (char *)objc_claimAutoreleasedReturnValue(-[__CFDictionary objectForKey:](v18, "objectForKey:"));
  v203 = (void *)objc_claimAutoreleasedReturnValue(-[__CFDictionary objectForKey:](v18, "objectForKey:", IDSMessageContextSequenceNumberKey));
  uint64_t v20 = OSLogHandleForIDSCategory("GUIDTRACE");
  id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412802;
    v302 = v211;
    __int16 v303 = 2112;
    v304 = v17;
    __int16 v305 = 1024;
    LODWORD(v306) = a12;
    _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "INCOMING-LOCAL_DELIVERY:%@ SERVICE:%@ didWakeHint:%d",  buf,  0x1Cu);
  }

  if (os_log_shim_legacy_logging_enabled(v22) && _IDSShouldLog(0LL, @"GUIDTRACE"))
  {
    id v168 = v17;
    BOOL v173 = a12;
    __int16 v165 = v211;
    _IDSLogV( 0LL,  @"IDSFoundation",  @"GUIDTRACE",  @"INCOMING-LOCAL_DELIVERY:%@ SERVICE:%@ didWakeHint:%d");
  }

  uint64_t v23 = OSLogHandleForTransportCategory("IDSDaemon");
  id v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 138413314;
    v302 = v209;
    __int16 v303 = 2112;
    v304 = v211;
    __int16 v305 = 2112;
    v306 = v17;
    __int16 v307 = 2112;
    id v308 = v210;
    __int16 v309 = 1024;
    BOOL v310 = a12;
    _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_INFO,  "Broadcast: Processing incoming local message storage guid %@ real message guid %@ topic %@ command %@ didWakeHint %d",  buf,  0x30u);
  }

  uint64_t v26 = os_log_shim_legacy_logging_enabled(v25);
  if ((_DWORD)v26 && _IDSShouldLogTransport(v26))
  {
    id v176 = v210;
    BOOL v178 = a12;
    id v168 = v211;
    BOOL v173 = (BOOL)v17;
    __int16 v165 = v209;
    *(void *)&double v27 = _IDSLogTransport( @"IDSDaemon",  @"IDS",  @"Broadcast: Processing incoming local message storage guid %@ real message guid %@ topic %@ command %@ didWakeHint %d").n128_u64[0];
  }

  uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon serviceController](self, "serviceController", v27, v165, v168, v173, v176, v178));
  v212 = (void *)objc_claimAutoreleasedReturnValue([v28 serviceWithPushTopic:v17]);

  if (v212)
  {
    BOOL v29 = (void *)objc_claimAutoreleasedReturnValue([v212 serviceName]);
    unsigned int v30 = [v29 isEqualToString:@"com.apple.private.alloy.connectivity.monitor"];

    if (v30)
    {
      -[IDSDaemon _ackMessageWithSequenceNumber:forDeviceID:priority:dataProtectionClass:connectionType:guid:]( self,  "_ackMessageWithSequenceNumber:forDeviceID:priority:dataProtectionClass:connectionType:guid:",  [v203 unsignedIntValue],  v207,  objc_msgSend(v206, "integerValue"),  objc_msgSend(v212, "dataProtectionClass"),  a11,  v211);
      goto LABEL_94;
    }

    id v35 = (void *)objc_claimAutoreleasedReturnValue(+[IDSTrafficMonitor sharedInstance](&OBJC_CLASS___IDSTrafficMonitor, "sharedInstance"));
    id v36 = (void *)objc_claimAutoreleasedReturnValue([v212 identifier]);
    [v35 noteIncomingLocalMessageForService:v36];

    if (a12)
    {
      v299[0] = @"IDSDeviceDidWakeHintTopic";
      v299[1] = @"IDSDeviceDidWakeHintGUID";
      id v37 = (const __CFString *)v211;
      if (!v211) {
        id v37 = &stru_100912B50;
      }
      v300[0] = v17;
      v300[1] = v37;
      id v38 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v300,  v299,  2LL));
      -[IDSDaemon _IDSPowerLogDictionary:info:]( self,  "_IDSPowerLogDictionary:info:",  @"IDS Local Message Received",  v38);
    }

    id v39 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
    uint64_t v200 = (void *)objc_claimAutoreleasedReturnValue([v39 appleIDAccountOnService:v212]);

    if ([v200 isRegistered])
    {
      uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([v200 prefixedURIStringsFromRegistration]);
      uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue([v40 firstObject]);
    }

    else
    {
      uint64_t v41 = 0LL;
    }

    uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue([v212 queryService]);
    uint64_t v191 = (void *)objc_claimAutoreleasedReturnValue( +[IDSURI URIWithPrefixedURI:withServiceLoggingHint:]( &OBJC_CLASS___IDSURI,  "URIWithPrefixedURI:withServiceLoggingHint:",  v41,  v42));

    id v201 = (void *)objc_claimAutoreleasedReturnValue([v200 fromIDForCBUUID:v202 deviceID:v207]);
    if (!v201)
    {
      uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPairingManager sharedInstance](&OBJC_CLASS___IDSPairingManager, "sharedInstance"));
      uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue([v43 pairedDeviceUniqueID]);
      id v201 = (void *)_IDSCopyIDForDeviceUniqueID();
    }

    uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue([v212 queryService]);
    uint64_t v199 = (void *)objc_claimAutoreleasedReturnValue( +[IDSURI URIWithPrefixedURI:withServiceLoggingHint:]( &OBJC_CLASS___IDSURI,  "URIWithPrefixedURI:withServiceLoggingHint:",  v201,  v45));

    v198 = -[IDSIncomingMessageBroadcast initWithBroadcastBlock:needsClientAck:messageUUID:priority:senderID:sequenceNumber:]( [IDSIncomingMessageBroadcast alloc],  "initWithBroadcastBlock:needsClientAck:messageUUID:priority:senderID:sequenceNumber:",  0,  0,  v211,  (int)[v206 intValue],  v207,  objc_msgSend(v203, "unsignedIntValue"));
    if ([v199 isTokenURI])
    {
      uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPeerIDManager sharedInstance](&OBJC_CLASS___IDSPeerIDManager, "sharedInstance"));
      uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue([v199 tokenFreeURI]);
      __n128 v48 = (void *)objc_claimAutoreleasedReturnValue([v199 pushToken]);
      id v49 = (void *)objc_claimAutoreleasedReturnValue([v212 queryService]);
      uint64_t v50 = (char *)objc_claimAutoreleasedReturnValue( [v46 senderCorrelationIdentifierForURI:v47 pushToken:v48 fromURI:v191 service:v49]);

      uint64_t v51 = OSLogHandleForIDSCategory("IDSDaemon");
      id v52 = (os_log_s *)objc_claimAutoreleasedReturnValue(v51);
      if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v53 = (char *)objc_claimAutoreleasedReturnValue([v199 tokenFreeURI]);
        id v54 = (void *)objc_claimAutoreleasedReturnValue([v199 pushToken]);
        *(_DWORD *)__int128 buf = 138413058;
        v302 = v211;
        __int16 v303 = 2112;
        v304 = v50;
        __int16 v305 = 2112;
        v306 = v53;
        __int16 v307 = 2112;
        id v308 = v54;
        _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_DEFAULT,  "Found sender correlation identifier { guid: %@, senderCorrelationIdentifier: %@, fromID: %@, token: %@ }",  buf,  0x2Au);
      }

      if (os_log_shim_legacy_logging_enabled(v55) && _IDSShouldLog(0LL, @"IDSDaemon"))
      {
        uint64_t v174 = (void *)objc_claimAutoreleasedReturnValue([v199 tokenFreeURI]);
        v177 = (void *)objc_claimAutoreleasedReturnValue([v199 pushToken]);
        id v166 = v211;
        BOOL v169 = v50;
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Found sender correlation identifier { guid: %@, senderCorrelationIdentifier: %@, fromID: %@, token: %@ }");
      }
    }

    else
    {
      uint64_t v50 = 0LL;
    }

    CFMutableDictionaryRef Mutable = (__CFDictionary *)-[__CFDictionary mutableCopy](v18, "mutableCopy", v166, v169, v174, v177);
    if (!Mutable) {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    }
    uint64_t v57 = v209;
    if (v57) {
      CFDictionarySetValue(Mutable, IDSMessageContextStorageGuidKey, v57);
    }

    id v58 = v210;
    id v210 = v58;
    if (v58)
    {
      CFDictionarySetValue(Mutable, IDSMessageContextOriginalCommandKey, v58);
      id v58 = v210;
    }

    +[NSDate timeIntervalSinceReferenceDate](&OBJC_CLASS___NSDate, "timeIntervalSinceReferenceDate");
    id v59 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
    if (v59) {
      CFDictionarySetValue(Mutable, IDSMessageContextBroadcastTimeKey, v59);
    }

    id v60 = v206;
    if (v60)
    {
      id v61 = v60;
      CFDictionarySetValue(Mutable, IDSMessageContextPriorityKey, v60);
      id v60 = v61;
    }

    uint64_t v188 = v60;

    id v62 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithLongLong:",  -[IDSIncomingMessageBroadcast broadcastID](v198, "broadcastID")));
    if (v62) {
      CFDictionarySetValue(Mutable, IDSMessageContextBroadcastIDKey, v62);
    }

    id v17 = v17;
    if (v17) {
      CFDictionarySetValue(Mutable, IDSMessageContextServiceIdentifierKey, v17);
    }

    id v63 = v41;
    if (v63)
    {
      id v64 = v63;
      CFDictionarySetValue(Mutable, IDSMessageContextToIDKey, v63);
      id v63 = v64;
    }

    uint64_t v192 = v63;

    id v65 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", a11));
    if (v65) {
      CFDictionarySetValue(Mutable, IDSMessageContextConnectionTypeKey, v65);
    }

    id v66 = v50;
    if (v66)
    {
      id v67 = v66;
      CFDictionarySetValue(Mutable, IDSMessageContextSenderCorrelationIdentifierKey, v66);
      id v66 = v67;
    }

    uint64_t v190 = v66;

    id v68 = v211;
    if (v68)
    {
      id v69 = v68;
      CFDictionarySetValue(Mutable, IDSMessageContextOriginalGUIDKey, v68);
      id v68 = v69;
    }

    id v70 = v68;

    uint64_t v72 = objc_opt_class(&OBJC_CLASS___NSDictionary, v71);
    if ((objc_opt_isKindOfClass(v208, v72) & 1) != 0)
    {
      __int128 v73 = (const void *)IDSMessageResourceTransferSandboxExtensionKey;
      __int128 v74 = (void *)objc_claimAutoreleasedReturnValue([v208 objectForKey:IDSMessageResourceTransferSandboxExtensionKey]);
      if (v74) {
        CFDictionarySetValue(Mutable, v73, v74);
      }

      __int128 v75 = (const void *)IDSMessageResourceTransferURLKey;
      __int128 v76 = (void *)objc_claimAutoreleasedReturnValue([v208 objectForKey:IDSMessageResourceTransferURLKey]);
      if (v76) {
        CFDictionarySetValue(Mutable, v75, v76);
      }

      int64_t v77 = (const void *)IDSMessageResourceTransferMetadataKey;
      unsigned int v78 = (void *)objc_claimAutoreleasedReturnValue([v208 objectForKey:IDSMessageResourceTransferMetadataKey]);
      if (v78) {
        CFDictionarySetValue(Mutable, v77, v78);
      }
    }

    uint64_t v197 = Mutable;

    id v193 = (void *)objc_claimAutoreleasedReturnValue([v212 superService]);
    if ([v193 length])
    {
      __int16 v79 = v193;

      id v17 = v79;
    }

    uint64_t v80 = (uint64_t)[v210 unsignedIntegerValue];
    if (v80 <= 148)
    {
      char v81 = v80 - 100;
      id v82 = v212;
      __int16 v83 = v210;
      if ((unint64_t)(v80 - 100) <= 0x2F)
      {
        if (((1LL << v81) & 0x4001100F7LL) == 0)
        {
          if (((1LL << v81) & 0xDB8000000000LL) != 0)
          {
LABEL_71:
            v271[0] = _NSConcreteStackBlock;
            v271[1] = 3221225472LL;
            v271[2] = sub_10036F7D4;
            v271[3] = &unk_100902308;
            uint64_t v84 = v271;
            v271[4] = v208;
            id v272 = v57;
            v273 = v17;
            id v274 = v192;
            id v275 = v201;
            v276 = v197;
            keya = objc_retainBlock(v271);

LABEL_72:
            id v85 = (id *)(v84 + 4);
            __int16 v86 = (int *)&kIDSListenerCapConsumesLaunchOnDemandIncomingData;
LABEL_78:
            int v88 = *v86;
            id v89 = *v85;
LABEL_79:

            id v18 = v197;
LABEL_80:
            if (!keya)
            {

LABEL_93:
              goto LABEL_94;
            }

            __int16 v90 = objc_alloc_init(&OBJC_CLASS___IMMessageContext);
            -[IMMessageContext setShouldBoost:](v90, "setShouldBoost:", 1LL);
            if (-[IDSIncomingMessageBroadcast broadcastNeedsClientAck](v198, "broadcastNeedsClientAck"))
            {
              uint64_t v92 = OSLogHandleForTransportCategory("IDSDaemon");
              id v93 = (os_log_s *)objc_claimAutoreleasedReturnValue(v92);
              if (os_log_type_enabled(v93, OS_LOG_TYPE_INFO))
              {
                int64_t v94 = -[IDSIncomingMessageBroadcast broadcastID](v198, "broadcastID");
                *(_DWORD *)__int128 buf = 138412546;
                v302 = v70;
                __int16 v303 = 2048;
                v304 = (char *)v94;
                _os_log_impl( (void *)&_mh_execute_header,  v93,  OS_LOG_TYPE_INFO,  "Broadcast: incoming local message %@ requires client ack, broadcast ID %lld\n",  buf,  0x16u);
              }

              uint64_t v96 = os_log_shim_legacy_logging_enabled(v95);
              if ((_DWORD)v96 && _IDSShouldLogTransport(v96))
              {
                __int16 v167 = (char *)v70;
                id v170 = -[IDSIncomingMessageBroadcast broadcastID](v198, "broadcastID");
                *(void *)&double v91 = _IDSLogTransport( @"IDSDaemon",  @"IDS",  @"Broadcast: incoming local message %@ requires client ack, broadcast ID %lld\n").n128_u64[0];
              }
            }

            id v97 = (IMMessageContext *)objc_claimAutoreleasedReturnValue( +[IDSDaemonPriorityQueueController sharedInstance]( &OBJC_CLASS___IDSDaemonPriorityQueueController,  "sharedInstance",  v91,  v167,  v170));
            if (v188)
            {
              v221[0] = _NSConcreteStackBlock;
              v221[1] = 3221225472LL;
              v221[2] = sub_10037070C;
              v221[3] = &unk_100902398;
              v221[4] = self;
              id v222 = v212;
              id v223 = v188;
              v228 = keya;
              v224 = v198;
              v225 = v17;
              id v226 = v210;
              int v229 = v88;
              v227 = v90;
              -[IMMessageContext performBlockWithPriority:priority:]( v97,  "performBlockWithPriority:priority:",  v221,  (int)[v223 intValue]);

              id v98 = &v222;
              id v99 = &v223;
              uint64_t v100 = (id *)&v228;
              id v101 = (id *)&v224;
              id v102 = (id *)&v225;
              id v103 = &v226;
              id v97 = v227;
            }

            else
            {
              v213[0] = _NSConcreteStackBlock;
              v213[1] = 3221225472LL;
              v213[2] = sub_1003707B4;
              v213[3] = &unk_1009023C0;
              v213[4] = self;
              id v214 = v212;
              int v219 = keya;
              v215 = v198;
              v216 = v17;
              id v217 = v210;
              int v220 = v88;
              char v218 = v90;
              -[IMMessageContext performBlockMainQueue:](v97, "performBlockMainQueue:", v213);
              id v98 = &v214;
              id v99 = (id *)&v219;
              uint64_t v100 = (id *)&v215;
              id v101 = (id *)&v216;
              id v102 = &v217;
              id v103 = (id *)&v218;
            }

LABEL_92:
            goto LABEL_93;
          }

          goto LABEL_117;
        }

        goto LABEL_76;
      }

      goto LABEL_117;
    }

    id v82 = v212;
    __int16 v83 = v210;
    if (v80 <= 226)
    {
      if ((unint64_t)(v80 - 149) <= 0x2F)
      {
        if (((1LL << (v80 + 107)) & 0xC20380000000LL) != 0)
        {
LABEL_76:
          v262[0] = _NSConcreteStackBlock;
          v262[1] = 3221225472LL;
          v262[2] = sub_10036F87C;
          v262[3] = &unk_100902330;
          uint64_t v87 = v262;
          v262[4] = v200;
          id v263 = v82;
          id v264 = v208;
          id v210 = v83;
          id v265 = v210;
          v266 = v57;
          v267 = v17;
          id v268 = v192;
          id v269 = v201;
          v270 = v197;
          keya = objc_retainBlock(v262);

LABEL_77:
          id v85 = (id *)(v87 + 4);
          __int16 v86 = (int *)&kIDSListenerCapConsumesLaunchOnDemandIncomingMessages;
          goto LABEL_78;
        }

        if (v80 == 149) {
          goto LABEL_71;
        }
      }

      goto LABEL_117;
    }

    if (v80 > 241)
    {
      switch(v80)
      {
        case 242LL:
          v277[0] = _NSConcreteStackBlock;
          v277[1] = 3221225472LL;
          v277[2] = sub_10036F72C;
          v277[3] = &unk_100902308;
          uint64_t v84 = v277;
          v277[4] = v208;
          v278 = v57;
          v279 = v17;
          id v280 = v192;
          id v281 = v201;
          v282 = v197;
          keya = objc_retainBlock(v277);
          -[IDSIncomingMessageBroadcast setBroadcastNeedsClientAck:](v198, "setBroadcastNeedsClientAck:", 1LL);

          goto LABEL_72;
        case 243LL:
          v283[0] = _NSConcreteStackBlock;
          v283[1] = 3221225472LL;
          v283[2] = sub_10036F614;
          v283[3] = &unk_100902308;
          id v284 = v208;
          v285 = v57;
          unsigned int v286 = v17;
          id v287 = v192;
          id v288 = v201;
          int v289 = v197;
          keya = objc_retainBlock(v283);
          -[IDSIncomingMessageBroadcast setBroadcastNeedsClientAck:](v198, "setBroadcastNeedsClientAck:", 1LL);

          id v85 = &v284;
          __int16 v86 = (int *)&kIDSListenerCapConsumesLaunchOnDemandIncomingProtobuf;
          goto LABEL_78;
        case 244LL:
          v257[0] = _NSConcreteStackBlock;
          v257[1] = 3221225472LL;
          v257[2] = sub_1003700A0;
          v257[3] = &unk_1008F95C8;
          id v89 = (id)objc_claimAutoreleasedReturnValue( -[__CFDictionary objectForKey:]( v197,  "objectForKey:",  IDSMessageContextIncomingResponseIdentifierKey));
          id v258 = v89;
          v259 = v17;
          id v260 = v192;
          v261 = v197;
          keya = objc_retainBlock(v257);
          -[IDSIncomingMessageBroadcast setBroadcastNeedsClientAck:](v198, "setBroadcastNeedsClientAck:", 1LL);

          id v210 = 0LL;
          int v88 = kIDSListenerCapConsumesLaunchOnDemandOutgoingMessageUpdates;
          goto LABEL_79;
      }

      goto LABEL_117;
    }

    if (v80 == 227)
    {
      v290[0] = _NSConcreteStackBlock;
      v290[1] = 3221225472LL;
      v290[2] = sub_10036F514;
      v290[3] = &unk_1009022E0;
      uint64_t v87 = v290;
      id v210 = v210;
      v290[4] = v210;
      id v291 = v208;
      v292 = v57;
      v293 = v17;
      id v294 = v192;
      id v295 = v201;
      unsigned int v296 = v197;
      keya = objc_retainBlock(v290);
      -[IDSIncomingMessageBroadcast setBroadcastNeedsClientAck:](v198, "setBroadcastNeedsClientAck:", 1LL);

      goto LABEL_77;
    }

    if (v80 == 228)
    {
      v189 = (void *)objc_claimAutoreleasedReturnValue([v208 _FTOptionallyDecompressData]);
      uint64_t v115 = JWDecodeDictionary(v189);
      v187 = (void *)objc_claimAutoreleasedReturnValue(v115);
      id v116 = [[IDSSendParameters alloc] initWithDictionary:v187];
      __int16 v117 = (void *)objc_claimAutoreleasedReturnValue([v116 groupData]);

      if (v117)
      {
        uint64_t v119 = objc_opt_class(&OBJC_CLASS___IDSDestination, v118);
        uint64_t v120 = (void *)objc_claimAutoreleasedReturnValue([v116 groupData]);
        __int16 v121 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedUnarchiver ids_secureUnarchiveObjectOfClass:withData:]( &OBJC_CLASS___NSKeyedUnarchiver,  "ids_secureUnarchiveObjectOfClass:withData:",  v119,  v120));

        [v116 setDestinations:v121];
      }

      else
      {
        __int16 v121 = (void *)objc_claimAutoreleasedReturnValue([v116 destinations]);
        id v128 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v121));
        __int16 v129 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDestination destinationWithStrings:]( &OBJC_CLASS___IDSDestination,  "destinationWithStrings:",  v128));

        [v116 setDestinations:v129];
      }

      BOOL v130 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon serviceController](self, "serviceController"));
      v185 = (void *)objc_claimAutoreleasedReturnValue([v130 serviceWithPushTopic:v17]);

      uint64_t v131 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
      uint64_t v132 = (void *)objc_claimAutoreleasedReturnValue([v131 accountsOnService:v185 withType:0]);

      keyb = (void *)objc_claimAutoreleasedReturnValue([v132 firstObject]);
      __int128 v255 = 0u;
      __int128 v256 = 0u;
      __int128 v253 = 0u;
      __int128 v254 = 0u;
      id obja = v132;
      id v133 = [obja countByEnumeratingWithState:&v253 objects:v298 count:16];
      if (v133)
      {
        uint64_t v134 = *(void *)v254;
        while (2)
        {
          for (i = 0LL; i != v133; i = (char *)i + 1)
          {
            if (*(void *)v254 != v134) {
              objc_enumerationMutation(obja);
            }
            uint64_t v136 = *(void **)(*((void *)&v253 + 1) + 8LL * (void)i);
            id v137 = (void *)objc_claimAutoreleasedReturnValue([v136 unprefixedURIStringsFromRegistration]);
            uint64_t v138 = (void *)objc_claimAutoreleasedReturnValue([v116 originalfromID]);
            uint64_t v139 = (void *)objc_claimAutoreleasedReturnValue([v138 _stripFZIDPrefix]);
            unsigned int v140 = [v137 containsObject:v139];

            if (v140)
            {
              id v141 = v136;

              keyb = v141;
              goto LABEL_149;
            }
          }

          id v133 = [obja countByEnumeratingWithState:&v253 objects:v298 count:16];
          if (v133) {
            continue;
          }
          break;
        }
      }

- (void)_processStoredIncomingLocalMessage:(id)a3
{
  id v4 = a3;
  uint64_t v5 = OSLogHandleForIDSCategory("IDSDaemon");
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    id v7 = (id)objc_claimAutoreleasedReturnValue([v4 guid]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v4 topic]);
    *(_DWORD *)__int128 buf = 138412546;
    id v74 = v7;
    __int16 v75 = 2112;
    __int128 v76 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Processing stored incoming local message %@ topic %@",  buf,  0x16u);
  }

  if (os_log_shim_legacy_logging_enabled(v9) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    id v59 = (void *)objc_claimAutoreleasedReturnValue([v4 guid]);
    id v62 = (void *)objc_claimAutoreleasedReturnValue([v4 topic]);
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Processing stored incoming local message %@ topic %@");
  }

  BOOL v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "message", v59, v62));
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKey:@"IDSIncomingLocalMessageService"]);
  uint64_t v71 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKey:@"IDSIncomingLocalMessageDeviceID"]);
  id v70 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKey:@"IDSIncomingLocalMessageBTUUID"]);
  uint64_t v72 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKey:@"IDSIncomingLocalMessageCommand"]);
  id v68 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKey:@"IDSIncomingLocalMessagePayload"]);
  id v12 = objc_alloc(&OBJC_CLASS___NSMutableDictionary);
  int64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKey:@"IDSIncomingLocalMessageContext"]);
  dispatch_time_t v14 = -[NSMutableDictionary initWithDictionary:](v12, "initWithDictionary:", v13);

  id v15 = (void *)objc_claimAutoreleasedReturnValue([v4 guid]);
  -[NSMutableDictionary setObject:forKey:](v14, "setObject:forKey:", v15, IDSMessageContextStorageGuidKey);

  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon serviceController](self, "serviceController"));
  id v17 = (void *)objc_claimAutoreleasedReturnValue([v16 serviceWithPushTopic:v11]);

  if (!sub_100351824( (char)[v17 shouldProtectTrafficUsingClassA],  (int)objc_msgSend(v17, "dataProtectionClass"),  v11))
  {
    id v69 = (void *)objc_claimAutoreleasedReturnValue([v4 guid]);
    LOBYTE(v65) = 0;
    -[IDSDaemon _processIncomingLocalMessage:topic:command:deviceID:btUUID:context:storedGUID:priority:connectionType:didWakeHint:]( self,  "_processIncomingLocalMessage:topic:command:deviceID:btUUID:context:storedGUID:priority:connectionType:didWakeHint:",  v68,  v11,  v72,  v71,  v70,  v14,  v69,  0LL,  0LL,  v65);
    goto LABEL_48;
  }

  id v18 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon serviceController](self, "serviceController"));
  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v19 serviceWithPushTopic:v11]);
  id v69 = (void *)objc_claimAutoreleasedReturnValue([v18 localAccountOnService:v20]);

  id v21 = (void *)objc_claimAutoreleasedReturnValue([v69 fromIDForCBUUID:v70 deviceID:v71]);
  if (!v21)
  {
    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPairingManager sharedInstance](&OBJC_CLASS___IDSPairingManager, "sharedInstance"));
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v22 pairedDeviceUniqueID]);
    id v21 = (void *)_IDSCopyIDForDeviceUniqueID();
  }

  uint64_t v24 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412290;
    id v74 = v21;
    _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "Using fromID for this message as %@",  buf,  0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v26) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    id v60 = v21;
    _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon", @"Using fromID for this message as %@");
  }

  double v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "_stripFZIDPrefix", v60));
  unsigned int v28 = +[IDSEncryptionHelpers areDataProtectionKeysAvailableForService:withDataProtectionClass:fromDevice:]( &OBJC_CLASS___IDSEncryptionHelpers,  "areDataProtectionKeysAvailableForService:withDataProtectionClass:fromDevice:",  v11,  1LL,  v27);

  if (!v28)
  {
    uint64_t v33 = OSLogHandleForIDSCategory("IDSDaemon");
    double v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      id v35 = (id)objc_claimAutoreleasedReturnValue([v4 guid]);
      id v36 = (void *)objc_claimAutoreleasedReturnValue([v4 topic]);
      *(_DWORD *)__int128 buf = 138412546;
      id v74 = v35;
      __int16 v75 = 2112;
      __int128 v76 = v36;
      _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "Class A key not avaialble for message %@ on topic %@",  buf,  0x16u);
    }

    id v32 = (id)objc_claimAutoreleasedReturnValue([v4 guid]);
    id v67 = (void *)objc_claimAutoreleasedReturnValue([v4 topic]);
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Class A key not avaialble for message %@ on topic %@");
LABEL_35:

LABEL_36:
    goto LABEL_48;
  }

  id v29 = [v72 unsignedIntegerValue];
  if (v29 == (id)243)
  {
    id v38 = -[IDSProtobuf initWithDictionary:](objc_alloc(&OBJC_CLASS___IDSProtobuf), "initWithDictionary:", v68);
    id v39 = (void *)objc_claimAutoreleasedReturnValue(-[IDSProtobuf data](v38, "data"));
    uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([v21 _stripFZIDPrefix]);
    id v67 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon _decryptAOverCMessage:topic:fromDeviceID:error:]( self,  "_decryptAOverCMessage:topic:fromDeviceID:error:",  v39,  v11,  v40,  0LL));

    if (v67)
    {
      -[IDSProtobuf setData:](v38, "setData:");
      id v32 = (id)objc_claimAutoreleasedReturnValue(-[IDSProtobuf dictionaryRepresentation](v38, "dictionaryRepresentation"));
    }

    else
    {
      id v32 = 0LL;
    }

LABEL_33:
    if (v32) {
      goto LABEL_34;
    }
    goto LABEL_37;
  }

  if (v29 == (id)242)
  {
    uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue([v21 _stripFZIDPrefix]);
    uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon _decryptAOverCMessage:topic:fromDeviceID:error:]( self,  "_decryptAOverCMessage:topic:fromDeviceID:error:",  v68,  v11,  v41,  0LL));

    if (v42)
    {
      id v32 = v42;
      id v67 = v32;
LABEL_34:
      uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue([v4 guid]);
      LOBYTE(v65) = 0;
      -[IDSDaemon _processIncomingLocalMessage:topic:command:deviceID:btUUID:context:storedGUID:priority:connectionType:didWakeHint:]( self,  "_processIncomingLocalMessage:topic:command:deviceID:btUUID:context:storedGUID:priority:connectionType:didWakeHint:",  v32,  v11,  v72,  v71,  v70,  v14,  v43,  0LL,  0LL,  v65);

      goto LABEL_35;
    }
  }

  else if (v29 == (id)227)
  {
    unsigned int v30 = (void *)objc_claimAutoreleasedReturnValue([v21 _stripFZIDPrefix]);
    id v67 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon _decryptAOverCMessage:topic:fromDeviceID:error:]( self,  "_decryptAOverCMessage:topic:fromDeviceID:error:",  v68,  v11,  v30,  0LL));

    if (v67)
    {
      uint64_t v31 = JWDecodeDictionary(v67);
      id v32 = (id)objc_claimAutoreleasedReturnValue(v31);
      goto LABEL_33;
    }
  }

  id v67 = 0LL;
LABEL_37:
  uint64_t v44 = OSLogHandleForIDSCategory("Warning");
  uint64_t v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v44);
  if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
  {
    uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKey:]( v14,  "objectForKey:",  IDSMessageContextOutgoingResponseIdentifierKey));
    *(_DWORD *)__int128 buf = 138413058;
    id v74 = v72;
    __int16 v75 = 2112;
    __int128 v76 = v21;
    __int16 v77 = 2112;
    unsigned int v78 = v11;
    __int16 v79 = 2112;
    uint64_t v80 = v46;
    _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_ERROR,  "We failed to decrypt class A data on a class C service even when we had keys, Please collect logs and file a bug: Original Command: %@ From Device: %@ Service: %@ GUID: %@",  buf,  0x2Au);
  }

  if (os_log_shim_legacy_logging_enabled(v47))
  {
    uint64_t v48 = IDSMessageContextOutgoingResponseIdentifierKey;
    id v66 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKey:]( v14,  "objectForKey:",  IDSMessageContextOutgoingResponseIdentifierKey));
    _IDSWarnV( @"IDSFoundation",  @"We failed to decrypt class A data on a class C service even when we had keys, Please collect logs and file a bug: Original Command: %@ From Device: %@ Service: %@ GUID: %@");

    id v49 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v14, "objectForKey:", v48, v72, v21, v11, v66));
    _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"We failed to decrypt class A data on a class C service even when we had keys, Please collect logs and file a bug: Original Command: %@ From Device: %@ Service: %@ GUID: %@");

    uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v14, "objectForKey:", v48, v72, v21, v11, v49));
    id v64 = v11;
    id v65 = v50;
    id v61 = v72;
    id v63 = v21;
    _IDSLogTransport( @"Warning",  @"IDS",  @"We failed to decrypt class A data on a class C service even when we had keys, Please collect logs and file a bug: Original Command: %@ From Device: %@ Service: %@ GUID: %@");
  }

  uint64_t v51 = OSLogHandleForTransportCategory("AoverC");
  id v52 = (os_log_s *)objc_claimAutoreleasedReturnValue(v51);
  if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKey:]( v14,  "objectForKey:",  IDSMessageContextOutgoingResponseIdentifierKey));
    *(_DWORD *)__int128 buf = 138413058;
    id v74 = v72;
    __int16 v75 = 2112;
    __int128 v76 = v21;
    __int16 v77 = 2112;
    unsigned int v78 = v11;
    __int16 v79 = 2112;
    uint64_t v80 = v53;
    _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_DEFAULT,  "We failed to decrypt class A data on a class C service even when we had keys, Please collect logs and file a bug: Original Command: %@ From Device: %@ Service: %@ GUID: %@",  buf,  0x2Au);
  }

  uint64_t v55 = os_log_shim_legacy_logging_enabled(v54);
  if ((_DWORD)v55)
  {
    if (_IDSShouldLogTransport(v55))
    {
      uint64_t v56 = IDSMessageContextOutgoingResponseIdentifierKey;
      id v64 = v11;
      id v65 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKey:]( v14,  "objectForKey:",  IDSMessageContextOutgoingResponseIdentifierKey));
      id v61 = v72;
      id v63 = v21;
      _IDSLogTransport( @"AoverC",  @"IDS",  @"We failed to decrypt class A data on a class C service even when we had keys, Please collect logs and file a bug: Original Command: %@ From Device: %@ Service: %@ GUID: %@");

      if (_IDSShouldLog(0LL, @"AoverC"))
      {
        uint64_t v57 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v14, "objectForKey:", v56, v72, v21, v11, v65));
        id v64 = v11;
        id v65 = v57;
        id v61 = v72;
        id v63 = v21;
        _IDSLogV( 0LL,  @"IDSFoundation",  @"AoverC",  @"We failed to decrypt class A data on a class C service even when we had keys, Please collect logs and file a bug: Original Command: %@ From Device: %@ Service: %@ GUID: %@");
      }
    }
  }

  id v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "guid", v61, v63, v64, v65));
  +[IDSDMessageStore deleteIncomingMessageWithGUID:]( &OBJC_CLASS___IDSDMessageStore,  "deleteIncomingMessageWithGUID:",  v58);

LABEL_48:
}

- (void)_processStoredIncomingLocalMessages
{
  uint64_t v3 = OSLogHandleForIDSCategory("IDSDaemon");
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 136315138;
    id v18 = "-[IDSDaemon(Messaging) _processStoredIncomingLocalMessages]";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%s", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v5) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    id v11 = "-[IDSDaemon(Messaging) _processStoredIncomingLocalMessages]";
    _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon", @"%s");
  }

  id v6 = objc_autoreleasePoolPush();
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDMessageStore incomingMessagesUpToLimit:messageTransportType:success:]( &OBJC_CLASS___IDSDMessageStore,  "incomingMessagesUpToLimit:messageTransportType:success:",  5000LL,  1LL,  0LL));
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  id v8 = [v7 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v8)
  {
    uint64_t v9 = *(void *)v13;
    do
    {
      BOOL v10 = 0LL;
      do
      {
        if (*(void *)v13 != v9) {
          objc_enumerationMutation(v7);
        }
        -[IDSDaemon _processStoredIncomingLocalMessage:]( self,  "_processStoredIncomingLocalMessage:",  *(void *)(*((void *)&v12 + 1) + 8LL * (void)v10),  v11);
        BOOL v10 = (char *)v10 + 1;
      }

      while (v8 != v10);
      id v8 = [v7 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }

    while (v8);
  }

  objc_autoreleasePoolPop(v6);
}

- (void)_processStoredIncomingRemoteMessagesWithGUIDs:(id)a3 ignoringGUIDs:(id)a4 controlCategory:(unsigned int)a5 lastTimeInterval:(double)a6 repeatedAttempt:(BOOL)a7
{
  BOOL v8 = a7;
  id v112 = a3;
  id v110 = a4;
  state.opaque[1] = 0xAAAAAAAAAAAAAAAALL;
  id v125 = _os_activity_create( (void *)&_mh_execute_header,  "Processing stored incoming remote messages",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[0] = 0xAAAAAAAAAAAAAAAALL;
  os_activity_scope_enter(v125, &state);
  uint64_t v108 = self;
  if (self->_processingStoredIncomingRemoteMessages && !v8)
  {
    if (!self->_processingStoredIncomingRemoteMessagesControlCategories)
    {
      __int128 v12 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      processingStoredIncomingRemoteMessagesControlCategories = self->_processingStoredIncomingRemoteMessagesControlCategories;
      self->_processingStoredIncomingRemoteMessagesControlCategories = v12;
    }

    uint64_t v111 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a5));
    if ((-[NSMutableArray containsObject:]( self->_processingStoredIncomingRemoteMessagesControlCategories,  "containsObject:",  v111) & 1) == 0) {
      -[NSMutableArray addObject:](self->_processingStoredIncomingRemoteMessagesControlCategories, "addObject:", v111);
    }
    uint64_t v14 = OSLogHandleForIDSCategory("IDSDaemon");
    __int128 v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = self->_processingStoredIncomingRemoteMessagesControlCategories;
      *(_DWORD *)__int128 buf = 136315394;
      id v128 = "-[IDSDaemon(Messaging) _processStoredIncomingRemoteMessagesWithGUIDs:ignoringGUIDs:controlCategory:lastTime"
             "Interval:repeatedAttempt:]";
      __int16 v129 = 2112;
      double v130 = *(double *)&v16;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "%s: ignoring, already processing queued control categories %@",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v17) && _IDSShouldLog(0LL, @"IDSDaemon")) {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"%s: ignoring, already processing queued control categories %@");
    }
    goto LABEL_105;
  }

  self->_processingStoredIncomingRemoteMessages = 1;
  uint64_t v18 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    id v20 = [v112 count];
    id v21 = @"NO";
    id v128 = "-[IDSDaemon(Messaging) _processStoredIncomingRemoteMessagesWithGUIDs:ignoringGUIDs:controlCategory:lastTimeIn"
           "terval:repeatedAttempt:]";
    *(_DWORD *)__int128 buf = 136315650;
    if (v8) {
      id v21 = @"YES";
    }
    __int16 v129 = 2048;
    double v130 = *(double *)&v20;
    __int16 v131 = 2112;
    uint64_t v132 = (uint64_t)v21;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "%s: GUIDs count %lu {repeatedAttempt: %@}",  buf,  0x20u);
  }

  if (os_log_shim_legacy_logging_enabled(v22) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    id v23 = [v112 count];
    uint64_t v24 = @"NO";
    if (v8) {
      uint64_t v24 = @"YES";
    }
    id v100 = v23;
    id v102 = v24;
    id v98 = "-[IDSDaemon(Messaging) _processStoredIncomingRemoteMessagesWithGUIDs:ignoringGUIDs:controlCategory:lastTimeInt"
          "erval:repeatedAttempt:]";
    _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon", @"%s: GUIDs count %lu {repeatedAttempt: %@}");
  }

  -[IDSDaemon _minimumNextStoredLoadTime](self, "_minimumNextStoredLoadTime", v98, v100, v102);
  double v26 = v25;
  if (v110) {
    uint64_t v111 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet setWithSet:](&OBJC_CLASS___NSMutableSet, "setWithSet:"));
  }
  else {
    uint64_t v111 = 0LL;
  }
  double v27 = objc_autoreleasePoolPush();
  unsigned int v28 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDMessageStore incomingMessagesUpToLimit:controlCategory:messageTransportType:success:]( &OBJC_CLASS___IDSDMessageStore,  "incomingMessagesUpToLimit:controlCategory:messageTransportType:success:",  500LL,  a5,  2LL,  0LL));
  id v29 = (void *)objc_claimAutoreleasedReturnValue([v28 sortedArrayUsingComparator:&stru_100902400]);

  objc_autoreleasePoolPop(v27);
  context = objc_autoreleasePoolPush();
  id v106 = [v29 count];
  uint64_t v30 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
  if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
  {
    id v32 = (const char *)[v29 count];
    uint64_t v33 = @"YES";
    *(_DWORD *)__int128 buf = 134218242;
    id v128 = v32;
    __int16 v129 = 2112;
    double v130 = *(double *)&v33;
    _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "Processing %lu stored incoming remote messages {shouldRepeat %@}",  buf,  0x16u);
  }

  if (os_log_shim_legacy_logging_enabled(v34) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    id v35 = (const __CFString *)[v29 count];
    id v36 = @"YES";
    id v99 = v35;
    double v101 = *(double *)&v36;
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Processing %lu stored incoming remote messages {shouldRepeat %@}");
  }

  __int128 v122 = 0u;
  __int128 v123 = 0u;
  __int128 v121 = 0u;
  __int128 v120 = 0u;
  id obj = v29;
  id v37 = [obj countByEnumeratingWithState:&v120 objects:v126 count:16];
  if (!v37)
  {

    uint64_t v109 = 0LL;
    goto LABEL_80;
  }

  uint64_t v109 = 0LL;
  uint64_t v38 = *(void *)v121;
  do
  {
    for (i = 0LL; i != v37; i = (char *)i + 1)
    {
      if (*(void *)v121 != v38) {
        objc_enumerationMutation(obj);
      }
      uint64_t v40 = *(void **)(*((void *)&v120 + 1) + 8LL * (void)i);
      uint64_t v41 = objc_autoreleasePoolPush();
      uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue(+[IMSystemMonitor sharedInstance](&OBJC_CLASS___IMSystemMonitor, "sharedInstance"));
      unsigned int v43 = [v42 isUnderFirstDataProtectionLock];

      if (!v43) {
        goto LABEL_41;
      }
      uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon serviceController](v108, "serviceController"));
      uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue([v40 topic]);
      uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue([v44 serviceWithPushTopic:v45]);

      if ([v46 dataProtectionClass])
      {

LABEL_41:
        if (v112)
        {
          id v7 = (void *)objc_claimAutoreleasedReturnValue([v40 guid]);
          if (([v112 containsObject:v7] & 1) == 0)
          {

LABEL_57:
            ++v109;
            goto LABEL_71;
          }

          if (!v110)
          {

            goto LABEL_58;
          }
        }

        else if (!v110)
        {
LABEL_58:
          id v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "guid", v99, *(void *)&v101));
          [v111 addObject:v52];

          if ([v40 controlCategory]
            && [v40 expirationDate]
            && (id v53 = [v40 expirationDate],
                uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date")),
                [v54 timeIntervalSince1970],
                LODWORD(v53) = v55 > (double)(uint64_t)v53,
                v54,
                (_DWORD)v53))
          {
            uint64_t v56 = OSLogHandleForIDSCategory("IDSDaemon");
            uint64_t v57 = (os_log_s *)objc_claimAutoreleasedReturnValue(v56);
            if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
            {
              id v58 = (char *)(id)objc_claimAutoreleasedReturnValue([v40 topic]);
              id v59 = (void *)objc_claimAutoreleasedReturnValue([v40 guid]);
              *(_DWORD *)__int128 buf = 138412802;
              id v128 = v58;
              __int16 v129 = 2112;
              double v130 = *(double *)&v59;
              __int16 v131 = 2112;
              uint64_t v132 = (uint64_t)v40;
              _os_log_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_DEFAULT,  "Found expired message for topic %@ storedGuid %@: %@",  buf,  0x20u);
            }

            if (os_log_shim_legacy_logging_enabled(v60)
              && _IDSShouldLog(0LL, @"IDSDaemon"))
            {
              id v61 = (__CFString *)objc_claimAutoreleasedReturnValue([v40 topic]);
              double v101 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue([v40 guid]));
              id v103 = v40;
              id v99 = v61;
              _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Found expired message for topic %@ storedGuid %@: %@");
            }

            id v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "guid", v99, *(void *)&v101, v103));
            +[IDSDMessageStore deleteIncomingMessageWithGUID:]( &OBJC_CLASS___IDSDMessageStore,  "deleteIncomingMessageWithGUID:",  v62);
          }

          else
          {
            id v63 = objc_alloc(&OBJC_CLASS___IDSIncomingNiceMessage);
            id v64 = (void *)objc_claimAutoreleasedReturnValue([v40 message]);
            id v65 = (void *)objc_claimAutoreleasedReturnValue([v40 topic]);
            id v66 = [v63 initWithMessageDictionary:v64 topic:v65];

            id v67 = (void *)objc_claimAutoreleasedReturnValue([v40 fromID]);
            id v68 = (void *)objc_claimAutoreleasedReturnValue([v40 topic]);
            id v69 = (void *)objc_claimAutoreleasedReturnValue( +[IDSURI URIWithPrefixedURI:withServiceLoggingHint:]( &OBJC_CLASS___IDSURI,  "URIWithPrefixedURI:withServiceLoggingHint:",  v67,  v68));

            id v70 = (void *)objc_claimAutoreleasedReturnValue([v40 topic]);
            uint64_t v71 = (void *)objc_claimAutoreleasedReturnValue([v40 guid]);
            -[IDSDaemon _processIncomingRemoteNiceMessage:forTopic:fromURI:storedGuid:messageContext:]( v108,  "_processIncomingRemoteNiceMessage:forTopic:fromURI:storedGuid:messageContext:",  v66,  v70,  v69,  v71,  0LL);
          }

          goto LABEL_71;
        }

        uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "guid", v99, *(void *)&v101));
        unsigned int v48 = [v110 containsObject:v47];

        if (v112)
        {

          if ((v48 & 1) != 0) {
            goto LABEL_57;
          }
        }

        else if (v48)
        {
          goto LABEL_57;
        }

        goto LABEL_58;
      }

      uint64_t v49 = OSLogHandleForIDSCategory("IDSDaemon");
      uint64_t v50 = (os_log_s *)objc_claimAutoreleasedReturnValue(v49);
      if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_DEFAULT,  " => Deferring message, service wants messages after first unlock only",  buf,  2u);
      }

      if (os_log_shim_legacy_logging_enabled(v51) && _IDSShouldLog(0LL, @"IDSDaemon")) {
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @" => Deferring message, service wants messages after first unlock only");
      }

LABEL_71:
      objc_autoreleasePoolPop(v41);
    }

    id v37 = [obj countByEnumeratingWithState:&v120 objects:v126 count:16];
  }

  while (v37);

  if (v109 >= 1)
  {
    -[IDSDaemon _minimumNextStoredLoadTime](v108, "_minimumNextStoredLoadTime");
    double v26 = a6 / (double)(500 - v109) * 500.0;
    if (v26 < v72)
    {
      -[IDSDaemon _minimumNextStoredLoadTime](v108, "_minimumNextStoredLoadTime");
      goto LABEL_79;
    }

    -[IDSDaemon _maximumNextStoredLoadTime](v108, "_maximumNextStoredLoadTime");
    if (v26 > v97)
    {
LABEL_78:
      -[IDSDaemon _maximumNextStoredLoadTime](v108, "_maximumNextStoredLoadTime");
LABEL_79:
      double v26 = v73;
    }
  }

- (void)_processStoredIncomingRemoteMessagesWithGUIDs:(id)a3 ignoringGUIDs:(id)a4 lastTimeInterval:(double)a5
{
}

- (double)_minimumNextStoredLoadTime
{
  return 2.0;
}

- (double)_maximumNextStoredLoadTime
{
  return 60.0;
}

- (void)_processStoredIncomingMessages
{
}

- (void)_processStoredIncomingMessagesForCategory:(unsigned int)a3
{
}

- (void)_processDeletingMessagesWithPriority:(int64_t)a3 reason:(id)a4 responseCode:(int64_t)a5 allowedTrafficClasses:(id)a6
{
  id v10 = a4;
  id v11 = a6;
  im_assert_primary_base_queue(v11, v12);
  __int128 v13 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDaemonPriorityQueueController sharedInstance]( &OBJC_CLASS___IDSDaemonPriorityQueueController,  "sharedInstance"));
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  v16[2] = sub_100372688;
  v16[3] = &unk_100902478;
  id v17 = v11;
  uint64_t v18 = self;
  int64_t v20 = a3;
  int64_t v21 = a5;
  id v19 = v10;
  id v14 = v10;
  id v15 = v11;
  [v13 performBlockWithPriority:v16 priority:a3];
}

- (void)_processDisallowedMessages
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[IDSUTunDeliveryController sharedInstance](&OBJC_CLASS___IDSUTunDeliveryController, "sharedInstance"));
  id v4 = (id)objc_claimAutoreleasedReturnValue([v3 allowedTrafficClasses]);

  -[IDSDaemon _processDeletingMessagesWithPriority:reason:responseCode:allowedTrafficClasses:]( self,  "_processDeletingMessagesWithPriority:reason:responseCode:allowedTrafficClasses:",  300LL,  @"Revision lock forced failure",  20LL,  v4);
  -[IDSDaemon _processDeletingMessagesWithPriority:reason:responseCode:allowedTrafficClasses:]( self,  "_processDeletingMessagesWithPriority:reason:responseCode:allowedTrafficClasses:",  200LL,  @"Revision lock forced failure",  20LL,  v4);
  -[IDSDaemon _processDeletingMessagesWithPriority:reason:responseCode:allowedTrafficClasses:]( self,  "_processDeletingMessagesWithPriority:reason:responseCode:allowedTrafficClasses:",  100LL,  @"Revision lock forced failure",  20LL,  v4);
}

- (void)_processMessagesUponUnpairing
{
}

- (void)_processStoredOutgoingUrgentMessagesProcessLocalAccounts:(BOOL)a3
{
  BOOL v3 = a3;
  uint64_t v4 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = @"NO";
    if (v3) {
      id v6 = @"YES";
    }
    *(_DWORD *)__int128 buf = 138412290;
    uint64_t v104 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Processing stored outgoing urgent messages LocalOnly: %@",  buf,  0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v7) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    BOOL v8 = @"NO";
    if (v3) {
      BOOL v8 = @"YES";
    }
    id v70 = v8;
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Processing stored outgoing urgent messages LocalOnly: %@");
  }

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance", v70));
  id v10 = v9;
  if (v3)
  {
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v9 accountsWithType:2]);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithArray:](&OBJC_CLASS___NSMutableArray, "arrayWithArray:", v11));

    __int128 v13 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPairingManager sharedInstance](&OBJC_CLASS___IDSPairingManager, "sharedInstance"));
    id v82 = (void *)objc_claimAutoreleasedReturnValue([v13 pairedDeviceUniqueID]);
  }

  else
  {
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v9 accountsWithType:1]);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithArray:](&OBJC_CLASS___NSMutableArray, "arrayWithArray:", v14));

    id v15 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 accountsWithType:0]);
    [v12 addObjectsFromArray:v16];

    __int128 v13 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
    id v17 = (void *)objc_claimAutoreleasedReturnValue([v13 accountsWithType:3]);
    [v12 addObjectsFromArray:v17];

    id v82 = 0LL;
  }

  uint64_t v86 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  __int128 v101 = 0u;
  __int128 v102 = 0u;
  __int128 v99 = 0u;
  __int128 v100 = 0u;
  id obj = v12;
  id v18 = [obj countByEnumeratingWithState:&v99 objects:v108 count:16];
  if (v18)
  {
    uint64_t v19 = *(void *)v100;
    do
    {
      for (i = 0LL; i != v18; i = (char *)i + 1)
      {
        if (*(void *)v100 != v19) {
          objc_enumerationMutation(obj);
        }
        int64_t v21 = *(void **)(*((void *)&v99 + 1) + 8LL * (void)i);
        uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v21 uniqueID]);

        if (v22)
        {
          id v23 = (void *)objc_claimAutoreleasedReturnValue([v21 uniqueID]);
          -[NSMutableArray addObject:](v86, "addObject:", v23);
        }
      }

      id v18 = [obj countByEnumeratingWithState:&v99 objects:v108 count:16];
    }

    while (v18);
  }

  uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDMessageStore allUnsentOutgoingMessagesForAccounts:localDestinationDeviceID:priority:hardLimit:]( &OBJC_CLASS___IDSDMessageStore,  "allUnsentOutgoingMessagesForAccounts:localDestinationDeviceID:priority:hardLimit:",  v86,  v82,  300LL,  10000LL));
  char v81 = objc_alloc_init(&OBJC_CLASS___IMMessageContext);
  -[IMMessageContext setShouldBoost:](v81, "setShouldBoost:", 1LL);
  uint64_t v25 = OSLogHandleForIDSCategory("IDSDaemon");
  double v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    double v27 = (const __CFString *)[v24 count];
    *(_DWORD *)__int128 buf = 134217984;
    uint64_t v104 = v27;
    _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "Processing stored %lu outgoing urgent priority messages",  buf,  0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v28) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    uint64_t v71 = (__CFString *)[v24 count];
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Processing stored %lu outgoing urgent priority messages");
  }

  __int128 v97 = 0u;
  __int128 v98 = 0u;
  __int128 v95 = 0u;
  __int128 v96 = 0u;
  id v83 = v24;
  id v88 = [v83 countByEnumeratingWithState:&v95 objects:v107 count:16];
  if (v88)
  {
    uint64_t v87 = *(void *)v96;
    do
    {
      for (j = 0LL; j != v88; j = (char *)j + 1)
      {
        if (*(void *)v96 != v87) {
          objc_enumerationMutation(v83);
        }
        uint64_t v30 = *(void **)(*((void *)&v95 + 1) + 8LL * (void)j);
        uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDAccountController sharedInstance]( &OBJC_CLASS___IDSDAccountController,  "sharedInstance",  v71,  v77,  v78,  v79,  v80));
        id v32 = (void *)objc_claimAutoreleasedReturnValue([v30 accountGUID]);
        uint64_t v33 = (__CFString *)objc_claimAutoreleasedReturnValue([v31 accountWithUniqueID:v32]);

        if (!v33)
        {
          uint64_t v34 = OSLogHandleForIDSCategory("Warning");
          id v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
          if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
          {
            id v36 = (__CFString *)objc_claimAutoreleasedReturnValue([v30 accountGUID]);
            *(_DWORD *)__int128 buf = 138412290;
            uint64_t v104 = v36;
            _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_ERROR,  "Found stored outgoing message from account with guid %@ which no longer exists.",  buf,  0xCu);
          }

          if (os_log_shim_legacy_logging_enabled(v37))
          {
            double v73 = (void *)objc_claimAutoreleasedReturnValue([v30 accountGUID]);
            _IDSWarnV( @"IDSFoundation",  @"Found stored outgoing message from account with guid %@ which no longer exists.");

            uint64_t v74 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "accountGUID", v73));
            _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"Found stored outgoing message from account with guid %@ which no longer exists.");

            double v72 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "accountGUID", v74));
            _IDSLogTransport( @"Warning",  @"IDS",  @"Found stored outgoing message from account with guid %@ which no longer exists.");
          }
        }

        uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString service](v33, "service", v72));
        dispatch_time_t v89 = (void *)objc_claimAutoreleasedReturnValue([v38 pushTopic]);

        if (v89)
        {
          id v39 = [v30 copySendParameters];
          uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([v39 data]);

          if (v40)
          {
            uint64_t v41 = OSLogHandleForIDSCategory("IDSDaemon");
            uint64_t v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
            if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
            {
              unsigned int v43 = (void *)objc_claimAutoreleasedReturnValue([v39 data]);
              unsigned int v44 = [v43 length];
              id v45 = (id)objc_claimAutoreleasedReturnValue([v39 destinations]);
              id v46 = (id)objc_claimAutoreleasedReturnValue([v39 identifier]);
              uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue([v30 guid]);
              *(_DWORD *)__int128 buf = 138413314;
              uint64_t v104 = v33;
              __int16 v105 = 1024;
              *(_DWORD *)id v106 = v44;
              *(_WORD *)&v106[4] = 2112;
              *(void *)&v106[6] = v45;
              *(_WORD *)&v106[14] = 2112;
              *(void *)&v106[16] = v46;
              *(_WORD *)&v106[24] = 2112;
              *(void *)&v106[26] = v47;
              _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEBUG,  "account %@ _processStoredOutgoingUrgentMessagesProcessLocalAccounts for with data size: %d to: %@ identi fier: %@ guid: %@",  buf,  0x30u);
            }

            if (os_log_shim_legacy_logging_enabled(v48)
              && _IDSShouldLog(1LL, @"IDSDaemon"))
            {
              uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue([v39 data]);
              id v50 = [v49 length];
              uint64_t v51 = (void *)objc_claimAutoreleasedReturnValue([v39 destinations]);
              id v52 = (void *)objc_claimAutoreleasedReturnValue([v39 identifier]);
              id v53 = (void *)objc_claimAutoreleasedReturnValue([v30 guid]);
              __int16 v79 = v52;
              uint64_t v80 = v53;
              id v77 = v50;
              unsigned int v78 = v51;
              uint64_t v71 = v33;
              _IDSLogV( 1LL,  @"IDSFoundation",  @"IDSDaemon",  @"account %@ _processStoredOutgoingUrgentMessagesProcessLocalAccounts for with data size: %d to: %@ identifier: %@ guid: %@");
              goto LABEL_54;
            }
          }

          else
          {
            uint64_t v60 = OSLogHandleForIDSCategory("IDSDaemon");
            id v61 = (os_log_s *)objc_claimAutoreleasedReturnValue(v60);
            if (os_log_type_enabled(v61, OS_LOG_TYPE_DEBUG))
            {
              id v62 = (id)objc_claimAutoreleasedReturnValue([v39 message]);
              id v63 = (id)objc_claimAutoreleasedReturnValue([v39 destinations]);
              id v64 = (id)objc_claimAutoreleasedReturnValue([v39 identifier]);
              id v65 = (void *)objc_claimAutoreleasedReturnValue([v30 guid]);
              *(_DWORD *)__int128 buf = 138413314;
              uint64_t v104 = v33;
              __int16 v105 = 2112;
              *(void *)id v106 = v62;
              *(_WORD *)&v106[8] = 2112;
              *(void *)&v106[10] = v63;
              *(_WORD *)&v106[18] = 2112;
              *(void *)&v106[20] = v64;
              *(_WORD *)&v106[28] = 2112;
              *(void *)&v106[30] = v65;
              _os_log_impl( (void *)&_mh_execute_header,  v61,  OS_LOG_TYPE_DEBUG,  "account %@ _processStoredOutgoingUrgentMessagesProcessLocalAccounts for message: %@ to: %@ identifier: %@ guid: %@",  buf,  0x34u);
            }

            if (os_log_shim_legacy_logging_enabled(v66)
              && _IDSShouldLog(1LL, @"IDSDaemon"))
            {
              uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue([v39 message]);
              uint64_t v51 = (void *)objc_claimAutoreleasedReturnValue([v39 destinations]);
              id v52 = (void *)objc_claimAutoreleasedReturnValue([v39 identifier]);
              id v53 = (void *)objc_claimAutoreleasedReturnValue([v30 guid]);
              __int16 v79 = v52;
              uint64_t v80 = v53;
              id v77 = v49;
              unsigned int v78 = v51;
              uint64_t v71 = v33;
              _IDSLogV( 1LL,  @"IDSFoundation",  @"IDSDaemon",  @"account %@ _processStoredOutgoingUrgentMessagesProcessLocalAccounts for message: %@ to: %@ identifier: %@ guid: %@");
LABEL_54:
            }
          }

          v90[0] = _NSConcreteStackBlock;
          v90[1] = 3221225472LL;
          v90[2] = sub_1003742A0;
          v90[3] = &unk_100901E58;
          id v91 = v89;
          uint64_t v92 = self;
          uint64_t v93 = v30;
          id v58 = v39;
          id v94 = v58;
          id v59 = objc_retainBlock(v90);
          -[__CFString sendMessageWithSendParameters:willSendBlock:completionBlock:]( v33,  "sendMessageWithSendParameters:willSendBlock:completionBlock:",  v58,  0LL,  v59);

          goto LABEL_56;
        }

        uint64_t v54 = OSLogHandleForIDSCategory("Warning");
        double v55 = (os_log_s *)objc_claimAutoreleasedReturnValue(v54);
        if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
        {
          uint64_t v56 = (__CFString *)objc_claimAutoreleasedReturnValue([v30 guid]);
          *(_DWORD *)__int128 buf = 138412290;
          uint64_t v104 = v56;
          _os_log_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_ERROR,  "Old outgoing message %@ has no relevant account, cleaning up.",  buf,  0xCu);
        }

        if (os_log_shim_legacy_logging_enabled(v57))
        {
          __int16 v75 = (void *)objc_claimAutoreleasedReturnValue([v30 guid]);
          _IDSWarnV(@"IDSFoundation", @"Old outgoing message %@ has no relevant account, cleaning up.");

          __int128 v76 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "guid", v75));
          _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"Old outgoing message %@ has no relevant account, cleaning up.");

          uint64_t v71 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "guid", v76));
          _IDSLogTransport( @"Warning",  @"IDS",  @"Old outgoing message %@ has no relevant account, cleaning up.");
        }

        id v58 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "guid", v71));
        id v59 = (void *)objc_claimAutoreleasedReturnValue([v30 alternateGUID]);
        +[IDSDMessageStore deleteOutgoingMessageWithGUID:alternateGUID:]( &OBJC_CLASS___IDSDMessageStore,  "deleteOutgoingMessageWithGUID:alternateGUID:",  v58,  v59);
LABEL_56:
      }

      id v88 = [v83 countByEnumeratingWithState:&v95 objects:v107 count:16];
    }

    while (v88);
  }

  uint64_t v67 = OSLogHandleForIDSCategory("IDSDaemon");
  id v68 = (os_log_s *)objc_claimAutoreleasedReturnValue(v67);
  if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v68,  OS_LOG_TYPE_DEFAULT,  "Finished processing stored outgoing messages",  buf,  2u);
  }
}

- (void)_handleSpaceBecomingAvailableForUrgentLocalMessagesWithDataProtectionClasses:(id)a3 withMessageTypes:(id)a4
{
  id v5 = a3;
  id v6 = (_UNKNOWN **)a4;
  im_assert_primary_base_queue(v6, v7);
  uint64_t v8 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Handling Space Becoming available for urgent local messages",  buf,  2u);
  }

  if (os_log_shim_legacy_logging_enabled(v10) && _IDSShouldLog(0LL, @"IDSDaemon")) {
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Handling Space Becoming available for urgent local messages");
  }
  if (!v5) {
    id v5 = (id)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:",  &off_100947AE8,  &off_100947B00,  &off_100947B18,  0LL));
  }
  id v11 = &off_100948928;
  __int128 v38 = 0u;
  __int128 v39 = 0u;
  if (v6) {
    id v11 = v6;
  }
  uint64_t v28 = v11;
  __int128 v36 = 0uLL;
  __int128 v37 = 0uLL;
  id obj = v5;
  id v29 = [obj countByEnumeratingWithState:&v36 objects:v42 count:16];
  if (v29)
  {
    uint64_t v27 = *(void *)v37;
    do
    {
      uint64_t v12 = 0LL;
      do
      {
        if (*(void *)v37 != v27)
        {
          uint64_t v13 = v12;
          objc_enumerationMutation(obj);
          uint64_t v12 = v13;
        }

        uint64_t v30 = v12;
        uint64_t v31 = *(void **)(*((void *)&v36 + 1) + 8 * v12);
        id v14 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
        id v15 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDMessageStore unsentUrgentAccountUUIDsWithDataProtectionClass:withMessageTypes:]( IDSDMessageStore,  "unsentUrgentAccountUUIDsWithDataProtectionClass:withMessageTypes:",  [v31 intValue],  v28));
        __int128 v34 = 0u;
        __int128 v35 = 0u;
        __int128 v32 = 0u;
        __int128 v33 = 0u;
        id v16 = [v15 countByEnumeratingWithState:&v32 objects:v41 count:16];
        if (v16)
        {
          uint64_t v17 = *(void *)v33;
          do
          {
            for (i = 0LL; i != v16; i = (char *)i + 1)
            {
              if (*(void *)v33 != v17) {
                objc_enumerationMutation(v15);
              }
              uint64_t v19 = *(void *)(*((void *)&v32 + 1) + 8LL * (void)i);
              int64_t v20 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDAccountController sharedInstance]( &OBJC_CLASS___IDSDAccountController,  "sharedInstance"));
              int64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v20 accountWithUniqueID:v19]);

              if (v21)
              {
                uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v21 service]);
                if ([v22 adHocServiceType] == 2)
                {
                }

                else
                {
                  id v23 = (void *)objc_claimAutoreleasedReturnValue([v21 service]);
                  BOOL v24 = [v23 adHocServiceType] == 5;

                  if (!v24) {
                    goto LABEL_25;
                  }
                }

                -[NSMutableArray addObject:](v14, "addObject:", v19);
              }

- (void)_processStoredMessagesIncludingClassD:(BOOL)a3
{
  BOOL v3 = a3;
  +[IDSDMessageStore deletePostponedMessages](&OBJC_CLASS___IDSDMessageStore, "deletePostponedMessages");
  -[IDSDaemon _processStoredIncomingMessages](self, "_processStoredIncomingMessages");
  +[IDSDMessageStore markOutgoingMessagesAsUnsentIncludingClassD:]( &OBJC_CLASS___IDSDMessageStore,  "markOutgoingMessagesAsUnsentIncludingClassD:",  v3);
  -[IDSDaemon _handleSpaceBecomingAvailableForUrgentLocalMessagesWithDataProtectionClasses:withMessageTypes:]( self,  "_handleSpaceBecomingAvailableForUrgentLocalMessagesWithDataProtectionClasses:withMessageTypes:",  0LL,  0LL);
  -[IDSDaemon _updateNonUrgentInternetSendTimer](self, "_updateNonUrgentInternetSendTimer");
  -[IDSDaemon _resourceAvailabilityChangedForIdentifiers:priorities:dataProtectionClasses:]( self,  "_resourceAvailabilityChangedForIdentifiers:priorities:dataProtectionClasses:",  0LL,  0LL,  0LL);
}

- (void)_processMessageError:(BOOL)a3 topLevelMessage:(id)a4 error:(id)a5 messageID:(id)a6 failureReasonMessage:(id)a7 service:(id)a8 serviceType:(id)a9 pushToken:(id)a10 fromURI:(id)a11 toURI:(id)a12 groupID:(id)a13 completionBlock:(id)a14
{
  BOOL v52 = a3;
  id v53 = a4;
  id v60 = a5;
  id v56 = a6;
  id v61 = a7;
  id v57 = a8;
  id v58 = a9;
  id v59 = a10;
  id v18 = a11;
  id v19 = a12;
  id v55 = a13;
  id v20 = a14;
  uint64_t v21 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Processing Error", buf, 2u);
  }

  unsigned int v24 = [v18 isEqualToURI:v19];
  signed int v25 = [v60 intValue];
  if (+[IDSNGMPublicDeviceIdentity shouldMarkForStateReset:]( &OBJC_CLASS___IDSNGMPublicDeviceIdentity,  "shouldMarkForStateReset:",  v61))
  {
    double v26 = (void *)objc_claimAutoreleasedReturnValue( +[IDSPushHandler sharedInstanceWithPortName:]( &OBJC_CLASS___IDSPushHandler,  "sharedInstanceWithPortName:",  @"com.apple.identityservicesd.aps"));
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v26 pushToken]);
    uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPushToken pushTokenWithData:](&OBJC_CLASS___IDSPushToken, "pushTokenWithData:", v27));

    id v29 = (void *)objc_claimAutoreleasedReturnValue(+[IDSEncryptionController sharedInstance](&OBJC_CLASS___IDSEncryptionController, "sharedInstance"));
    uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([v57 identifier]);
    unsigned int v31 = [v29 markForStateResetWithOurURI:v19 ourPushToken:v28 theirURI:v18 theirPushToken:v59 service:v30];

    uint64_t v32 = OSLogHandleForIDSCategory("IDSDaemon");
    __int128 v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      __int128 v34 = @"NO";
      if (v31) {
        __int128 v34 = @"YES";
      }
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v67 = v34;
      _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "_processMessageError: IDSEncryptionController did markForStateReset: %@",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v35) && _IDSShouldLog(0LL, @"IDSDaemon"))
    {
      __int128 v36 = @"NO";
      if (v31) {
        __int128 v36 = @"YES";
      }
      id v50 = v36;
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"_processMessageError: IDSEncryptionController did markForStateReset: %@");
    }
  }

  if (-[IDSDaemon _shouldForgetCachedPeerTokensForIncomingRemoteDecryptionErrorType:]( self,  "_shouldForgetCachedPeerTokensForIncomingRemoteDecryptionErrorType:",  v25,  v50))
  {
    __int128 v37 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPeerIDManager sharedInstance](&OBJC_CLASS___IDSPeerIDManager, "sharedInstance"));
    [v37 forgetPeerTokensForURI:v18 fromURI:v19 service:v58];
  }

  BOOL v39 = -[IDSDaemon _shouldDropMessageForIncomingErrorMessageWithDecryptionErrorType:]( self,  "_shouldDropMessageForIncomingErrorMessageWithDecryptionErrorType:",  v25);
  if (v25 > 499LL)
  {
    if (v25 > 799LL)
    {
      switch(v25)
      {
        case 800:
          uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDGroupContextController sharedInstance]( &OBJC_CLASS___IDSDGroupContextController,  "sharedInstance"));
          v62[0] = _NSConcreteStackBlock;
          v62[1] = 3221225472LL;
          v62[2] = sub_100375A3C;
          v62[3] = &unk_1009024F0;
          id v63 = v55;
          id v64 = v20;
          BOOL v65 = v39;
          [v40 groupContextForProtectionSpace:0 withCompletion:v62];

          break;
        case 801:
        case 804:
          goto LABEL_90;
        case 802:
          uint64_t v43 = OSLogHandleForIDSCategory("IDSDaemon");
          unsigned int v44 = (os_log_s *)objc_claimAutoreleasedReturnValue(v43);
          if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)__int128 buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEFAULT,  "Got an incoming error of type IDSEncryptionErrorTypeEngramStaleGroupDecryptionFailure -- this is unexpected",  buf,  2u);
          }

          if (os_log_shim_legacy_logging_enabled(v45)
            && _IDSShouldLog(0LL, @"IDSDaemon"))
          {
            _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Got an incoming error of type IDSEncryptionErrorTypeEngramStaleGroupDecryptionFailure -- this is unexpected");
          }

          break;
        case 803:
          if (_IMWillLog(@"MessageService", v38)) {
            _IMAlwaysLog( 0LL,  @"MessageService",  @" => Engram fetch group decryption failure for messageID: %@");
          }
          goto LABEL_90;
        default:
          goto LABEL_91;
      }

      goto LABEL_92;
    }

    switch(v25)
    {
      case 500:
        goto LABEL_90;
      case 600:
        if (_IMWillLog(@"MessageService", v38))
        {
          id v51 = v56;
          _IMAlwaysLog(0LL, @"MessageService", @" => Remote identity encryption failure for messageID: %@");
        }

        if (!v24 || v52)
        {
          id v46 = (void *)objc_claimAutoreleasedReturnValue( +[IDSEncryptionController sharedInstance]( &OBJC_CLASS___IDSEncryptionController,  "sharedInstance",  v51));
          [v46 logRemoteDecryptionErrorForToken:v59 deviceID:0 forURI:v18 fromURI:v19 forService:v58 messageData:0 type:1];
        }

        goto LABEL_90;
      case 601:
        if (_IMWillLog(@"MessageService", v38))
        {
          id v51 = v56;
          _IMAlwaysLog(0LL, @"MessageService", @" => Remote Identity decryption failure for messageID: %@");
        }

        if (!v24 || v52)
        {
          uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue( +[IDSEncryptionController sharedInstance]( &OBJC_CLASS___IDSEncryptionController,  "sharedInstance",  v51));
          [v41 logRemoteDecryptionErrorForToken:v59 deviceID:0 forURI:v18 fromURI:v19 forService:v58 messageData:0 type:1];
        }

- (id)_payloadFromDecryptedData:(id)a3
{
  id v3 = a3;
  uint64_t v5 = objc_opt_class(&OBJC_CLASS___NSDictionary, v4);
  if ((objc_opt_isKindOfClass(v3, v5) & 1) != 0)
  {
    id v7 = v3;
  }

  else
  {
    uint64_t v8 = objc_opt_class(&OBJC_CLASS___NSData, v6);
    if ((objc_opt_isKindOfClass(v3, v8) & 1) != 0)
    {
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v3 _FTOptionallyDecompressData]);
      uint64_t v10 = JWDecodeDictionary(v9);
      id v7 = (id)objc_claimAutoreleasedReturnValue(v10);
      if (![v7 count])
      {
        uint64_t v11 = JWDecodeDictionary(v3);
        uint64_t v12 = objc_claimAutoreleasedReturnValue(v11);

        id v7 = (id)v12;
      }
    }

    else
    {
      id v7 = 0LL;
    }
  }

  v30[0] = IDSMessageResourceTransferSandboxExtensionKey;
  v30[1] = IDSMessageResourceTransferURLKey;
  v30[2] = IDSMessageResourceTransferMetadataKey;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  id v13 = (id)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v30, 3LL));
  id v14 = [v13 countByEnumeratingWithState:&v25 objects:v29 count:16];
  if (!v14)
  {
    id v16 = 0LL;
    uint64_t v22 = v13;
    goto LABEL_22;
  }

  id v15 = v14;
  id v16 = 0LL;
  uint64_t v17 = *(void *)v26;
  do
  {
    for (i = 0LL; i != v15; i = (char *)i + 1)
    {
      if (*(void *)v26 != v17) {
        objc_enumerationMutation(v13);
      }
      uint64_t v19 = *(void *)(*((void *)&v25 + 1) + 8LL * (void)i);
      id v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKey:", v19, (void)v25));

      if (v20)
      {
        if (!v16) {
          id v16 = [v7 mutableCopy];
        }
        [v16 removeObjectForKey:v19];
      }
    }

    id v15 = [v13 countByEnumeratingWithState:&v25 objects:v29 count:16];
  }

  while (v15);

  if (v16)
  {
    id v21 = [v16 copy];
    uint64_t v22 = v7;
    id v7 = v21;
LABEL_22:
  }

  id v23 = v7;

  return v23;
}

+ (BOOL)_commandIsSessionCommand:(int64_t)a3
{
  if (qword_1009C0BF8 != -1) {
    dispatch_once(&qword_1009C0BF8, &stru_100902510);
  }
  uint64_t v4 = (void *)qword_1009C0BF0;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a3));
  LOBYTE(v4) = [v4 containsObject:v5];

  return (char)v4;
}

+ (BOOL)_commandIsSessionGroupSessionCommand:(int64_t)a3
{
  if (qword_1009C0C08 != -1) {
    dispatch_once(&qword_1009C0C08, &stru_100902530);
  }
  uint64_t v4 = (void *)qword_1009C0C00;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a3));
  LOBYTE(v4) = [v4 containsObject:v5];

  return (char)v4;
}

- (BOOL)_processNonMessagingPayloadWithCommand:(id)a3 dictionaryPayload:(id)a4 senderPushToken:(id)a5 topic:(id)a6 toURI:(id)a7 fromURI:(id)a8 peerResponseIdentifier:(id)a9 guid:(id)a10 service:(id)a11 idsMessageContext:(id)a12 messageContext:(id)a13
{
  id v18 = a11;
  id v19 = a3;
  id v20 = a4;
  id v109 = a5;
  id v21 = a6;
  id v107 = a7;
  id v110 = a8;
  id v106 = a9;
  id v103 = a10;
  id v104 = a11;
  id v108 = a12;
  uint64_t v22 = (IMMessageContext *)a13;
  id v23 = v22;
  if (v19)
  {
    if (!v22)
    {
      id v23 = objc_alloc_init(&OBJC_CLASS___IMMessageContext);
      -[IMMessageContext setShouldBoost:](v23, "setShouldBoost:", 1LL);
    }

    unsigned int v24 = (char *)[v19 integerValue];
    unsigned int v25 = +[IDSDaemon _commandIsSessionCommand:](&OBJC_CLASS___IDSDaemon, "_commandIsSessionCommand:", v24);
    __int128 v27 = v21;
    if (v24 != (char *)232 && v25)
    {
      uint64_t v28 = objc_opt_class(&OBJC_CLASS___NSString, v26);
      id v29 = sub_10028D3BC(v28, v20, IDSDSessionMessageSessionID);
      uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
      if (![v30 length])
      {
        uint64_t v45 = OSLogHandleForIDSCategory("IDSDaemon");
        id v46 = (os_log_s *)objc_claimAutoreleasedReturnValue(v45);
        if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 138412290;
          id v118 = v19;
          _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEFAULT,  "No session ID provided in the message for command code %@, discarding message...",  buf,  0xCu);
        }

        if (os_log_shim_legacy_logging_enabled(v47)
          && _IDSShouldLog(0LL, @"IDSDaemon"))
        {
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"No session ID provided in the message for command code %@, discarding message...");
        }

        goto LABEL_80;
      }

      unsigned int v31 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDSessionController sharedInstance](&OBJC_CLASS___IDSDSessionController, "sharedInstance"));
      id v18 = (id)objc_claimAutoreleasedReturnValue([v31 sessionWithUniqueID:v30]);

      if (!v18)
      {
        uint64_t v48 = OSLogHandleForIDSCategory("IDSDaemon");
        uint64_t v49 = (os_log_s *)objc_claimAutoreleasedReturnValue(v48);
        if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 138412546;
          id v118 = v30;
          __int16 v119 = 2112;
          id v120 = v19;
          _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_DEFAULT,  "Couldn't find session with ID %@ for command code %@, discarding message...",  buf,  0x16u);
        }

        if (os_log_shim_legacy_logging_enabled(v50)
          && _IDSShouldLog(0LL, @"IDSDaemon"))
        {
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Couldn't find session with ID %@ for command code %@, discarding message...");
        }

        goto LABEL_80;
      }
    }

    BOOL v32 = 0;
    switch((unint64_t)v24)
    {
      case 0xE8uLL:
        uint64_t v33 = OSLogHandleForIDSCategory("IDSDaemon");
        __int128 v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v35 = IDSLoggableDescriptionForObjectOnService(v20, v21);
          __int128 v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
          *(_DWORD *)__int128 buf = 138412546;
          id v118 = v110;
          __int16 v119 = 2112;
          id v120 = v36;
          _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "Received session invitation fromID %@, processing message %@",  buf,  0x16u);

          __int128 v27 = v21;
        }

        if (os_log_shim_legacy_logging_enabled(v37)
          && _IDSShouldLog(0LL, @"IDSDaemon"))
        {
          uint64_t v38 = IDSLoggableDescriptionForObjectOnService(v20, v27);
          id v100 = v110;
          __int128 v101 = (void *)objc_claimAutoreleasedReturnValue(v38);
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Received session invitation fromID %@, processing message %@");
        }

        uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDSessionController sharedInstance]( &OBJC_CLASS___IDSDSessionController,  "sharedInstance",  v100,  v101));
        [v30 processIncomingInvitationWithPayload:v20 topic:v27 fromToken:v109 fromURI:v110 toURI:v107 idsMessageContext:v108 messageContext:v23];
        break;
      case 0xE9uLL:
        uint64_t v51 = OSLogHandleForIDSCategory("IDSDaemon");
        BOOL v52 = (os_log_s *)objc_claimAutoreleasedReturnValue(v51);
        if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v53 = IDSLoggableDescriptionForObjectOnService(v20, v21);
          uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue(v53);
          *(_DWORD *)__int128 buf = 138412546;
          id v118 = v110;
          __int16 v119 = 2112;
          id v120 = v54;
          _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_DEFAULT,  "Received accept response fromID %@, processing message %@",  buf,  0x16u);

          __int128 v27 = v21;
        }

        if (os_log_shim_legacy_logging_enabled(v55)
          && _IDSShouldLog(0LL, @"IDSDaemon"))
        {
          uint64_t v56 = IDSLoggableDescriptionForObjectOnService(v20, v27);
          id v100 = v110;
          __int128 v101 = (void *)objc_claimAutoreleasedReturnValue(v56);
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Received accept response fromID %@, processing message %@");
        }

        uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDSessionController sharedInstance]( &OBJC_CLASS___IDSDSessionController,  "sharedInstance",  v100,  v101));
        [v30 processIncomingSessionAcceptMessage:v20 fromToken:v109 fromURI:v110 idsMessageContext:v108];
        break;
      case 0xEAuLL:
        uint64_t v57 = OSLogHandleForIDSCategory("IDSDaemon");
        id v58 = (os_log_s *)objc_claimAutoreleasedReturnValue(v57);
        if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v59 = IDSLoggableDescriptionForObjectOnService(v20, v21);
          id v60 = (void *)objc_claimAutoreleasedReturnValue(v59);
          *(_DWORD *)__int128 buf = 138412546;
          id v118 = v110;
          __int16 v119 = 2112;
          id v120 = v60;
          _os_log_impl( (void *)&_mh_execute_header,  v58,  OS_LOG_TYPE_DEFAULT,  "Received decline response fromID %@, processing message %@",  buf,  0x16u);

          __int128 v27 = v21;
        }

        if (os_log_shim_legacy_logging_enabled(v61)
          && _IDSShouldLog(0LL, @"IDSDaemon"))
        {
          uint64_t v62 = IDSLoggableDescriptionForObjectOnService(v20, v27);
          id v100 = v110;
          __int128 v101 = (void *)objc_claimAutoreleasedReturnValue(v62);
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Received decline response fromID %@, processing message %@");
        }

        uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDSessionController sharedInstance]( &OBJC_CLASS___IDSDSessionController,  "sharedInstance",  v100,  v101));
        [v30 processIncomingSessionDeclineMessage:v20 fromToken:v109 fromURI:v110 idsMessageContext:v108];
        break;
      case 0xEBuLL:
        uint64_t v63 = OSLogHandleForIDSCategory("IDSDaemon");
        id v64 = (os_log_s *)objc_claimAutoreleasedReturnValue(v63);
        if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v65 = IDSLoggableDescriptionForObjectOnService(v20, v21);
          uint64_t v66 = (void *)objc_claimAutoreleasedReturnValue(v65);
          *(_DWORD *)__int128 buf = 138412546;
          id v118 = v110;
          __int16 v119 = 2112;
          id v120 = v66;
          _os_log_impl( (void *)&_mh_execute_header,  v64,  OS_LOG_TYPE_DEFAULT,  "Received cancel response fromID %@, processing message %@",  buf,  0x16u);

          __int128 v27 = v21;
        }

        if (os_log_shim_legacy_logging_enabled(v67)
          && _IDSShouldLog(0LL, @"IDSDaemon"))
        {
          uint64_t v68 = IDSLoggableDescriptionForObjectOnService(v20, v27);
          id v100 = v110;
          __int128 v101 = (void *)objc_claimAutoreleasedReturnValue(v68);
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Received cancel response fromID %@, processing message %@");
        }

        uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDSessionController sharedInstance]( &OBJC_CLASS___IDSDSessionController,  "sharedInstance",  v100,  v101));
        [v30 processIncomingSessionCancelMessage:v20 fromToken:v109 fromURI:v110 idsMessageContext:v108];
        break;
      case 0xECuLL:
        uint64_t v69 = OSLogHandleForIDSCategory("IDSDaemon");
        id v70 = (os_log_s *)objc_claimAutoreleasedReturnValue(v69);
        if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v71 = IDSLoggableDescriptionForObjectOnService(v20, v21);
          double v72 = (void *)objc_claimAutoreleasedReturnValue(v71);
          *(_DWORD *)__int128 buf = 138412546;
          id v118 = v110;
          __int16 v119 = 2112;
          id v120 = v72;
          _os_log_impl( (void *)&_mh_execute_header,  v70,  OS_LOG_TYPE_DEFAULT,  "Received session message fromID %@, processing message %@",  buf,  0x16u);

          __int128 v27 = v21;
        }

        if (os_log_shim_legacy_logging_enabled(v73)
          && _IDSShouldLog(0LL, @"IDSDaemon"))
        {
          uint64_t v74 = IDSLoggableDescriptionForObjectOnService(v20, v27);
          id v100 = v110;
          __int128 v101 = (void *)objc_claimAutoreleasedReturnValue(v74);
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Received session message fromID %@, processing message %@");
        }

        uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDSessionController sharedInstance]( &OBJC_CLASS___IDSDSessionController,  "sharedInstance",  v100,  v101));
        [v30 processIncomingSessionMessage:v20 fromToken:v109 fromURI:v110 idsMessageContext:v108];
        break;
      case 0xEDuLL:
        uint64_t v75 = OSLogHandleForIDSCategory("IDSDaemon");
        __int128 v76 = (os_log_s *)objc_claimAutoreleasedReturnValue(v75);
        if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v77 = IDSLoggableDescriptionForObjectOnService(v20, v21);
          unsigned int v78 = (void *)objc_claimAutoreleasedReturnValue(v77);
          *(_DWORD *)__int128 buf = 138412546;
          id v118 = v110;
          __int16 v119 = 2112;
          id v120 = v78;
          _os_log_impl( (void *)&_mh_execute_header,  v76,  OS_LOG_TYPE_DEFAULT,  "Received session end message fromID %@, processing message %@",  buf,  0x16u);

          __int128 v27 = v21;
        }

        if (os_log_shim_legacy_logging_enabled(v79)
          && _IDSShouldLog(0LL, @"IDSDaemon"))
        {
          uint64_t v80 = IDSLoggableDescriptionForObjectOnService(v20, v27);
          id v100 = v110;
          __int128 v101 = (void *)objc_claimAutoreleasedReturnValue(v80);
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Received session end message fromID %@, processing message %@");
        }

        uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDSessionController sharedInstance]( &OBJC_CLASS___IDSDSessionController,  "sharedInstance",  v100,  v101));
        [v30 processIncomingSessionEndMessage:v20 fromToken:v109 fromURI:v110 idsMessageContext:v108];
        break;
      case 0xEEuLL:
        uint64_t v86 = OSLogHandleForIDSCategory("IDSDaemon");
        uint64_t v87 = (os_log_s *)objc_claimAutoreleasedReturnValue(v86);
        if (os_log_type_enabled(v87, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v88 = IDSLoggableDescriptionForObjectOnService(v20, v21);
          dispatch_time_t v89 = (void *)objc_claimAutoreleasedReturnValue(v88);
          *(_DWORD *)__int128 buf = 138412546;
          id v118 = v110;
          __int16 v119 = 2112;
          id v120 = v89;
          _os_log_impl( (void *)&_mh_execute_header,  v87,  OS_LOG_TYPE_DEFAULT,  "Received session reinitiate message fromID %@, processing message %@",  buf,  0x16u);

          __int128 v27 = v21;
        }

        if (os_log_shim_legacy_logging_enabled(v90)
          && _IDSShouldLog(0LL, @"IDSDaemon"))
        {
          uint64_t v91 = IDSLoggableDescriptionForObjectOnService(v20, v27);
          id v100 = v110;
          __int128 v101 = (void *)objc_claimAutoreleasedReturnValue(v91);
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Received session reinitiate message fromID %@, processing message %@");
        }

        uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDSessionController sharedInstance]( &OBJC_CLASS___IDSDSessionController,  "sharedInstance",  v100,  v101));
        [v30 processIncomingSessionReinitiateMessage:v20 fromToken:v109 fromURI:v110 idsMessageContext:v108];
        break;
      case 0xEFuLL:
        goto LABEL_18;
      case 0xF0uLL:
      case 0xF1uLL:
      case 0xF2uLL:
      case 0xF3uLL:
        goto LABEL_81;
      case 0xF4uLL:
        char v81 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
        id v82 = (void *)objc_claimAutoreleasedReturnValue([v109 rawToken]);
        id v83 = [v82 length];
        if (v83
          && (id v18 = (id)objc_claimAutoreleasedReturnValue([v110 prefixedURI]), objc_msgSend( v18,  "length")))
        {
          id v84 = (void *)objc_claimAutoreleasedReturnValue([v109 rawToken]);
          uint64_t v85 = (void *)objc_claimAutoreleasedReturnValue([v110 prefixedURI]);
          uint64_t v30 = (void *)_IDSCopyIDForTokenWithURI(v84, v85);
        }

        else
        {
          uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([v110 prefixedURI]);
          if (!v83) {
            goto LABEL_75;
          }
        }

LABEL_75:
        uint64_t v92 = (void *)objc_claimAutoreleasedReturnValue( +[IDSURI URIWithPrefixedURI:withServiceLoggingHint:]( &OBJC_CLASS___IDSURI,  "URIWithPrefixedURI:withServiceLoggingHint:",  v30,  v27));
        if (v30) {
          CFDictionarySetValue((CFMutableDictionaryRef)v81, IDSMessageContextFromIDKey, v30);
        }
        uint64_t v93 = (const void *)IDSMessageContextFromServerStorageKey;
        id v94 = (void *)objc_claimAutoreleasedReturnValue([v108 objectForKey:IDSMessageContextFromServerStorageKey]);
        if (v94) {
          CFDictionarySetValue((CFMutableDictionaryRef)v81, v93, v94);
        }

        v111[0] = _NSConcreteStackBlock;
        v111[1] = 3221225472LL;
        v111[2] = sub_100376FCC;
        v111[3] = &unk_1008F95A0;
        id v112 = v106;
        id v113 = v27;
        id v114 = v107;
        id v115 = v92;
        id v116 = v81;
        __int128 v95 = v81;
        uint64_t v96 = kIDSMessagingEntitlement;
        uint64_t v97 = kIDSListenerCapConsumesLaunchOnDemandOutgoingMessageUpdates;
        __int16 v105 = v95;
        id v98 = v92;
        -[IDSDaemon enqueueBroadcast:forTopic:entitlement:command:capabilities:messageContext:]( self,  "enqueueBroadcast:forTopic:entitlement:command:capabilities:messageContext:",  v111,  v113,  v96,  0LL,  v97,  v23);

        break;
      default:
LABEL_18:
        uint64_t v39 = OSLogHandleForIDSCategory("IDSDaemon");
        uint64_t v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
        if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v41 = IDSLoggableDescriptionForObjectOnService(v20, v21);
          uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue(v41);
          *(_DWORD *)__int128 buf = 138412546;
          id v118 = v110;
          __int16 v119 = 2112;
          id v120 = v42;
          _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEFAULT,  "Received group session message fromID %@, processing message %@",  buf,  0x16u);

          __int128 v27 = v21;
        }

        if (os_log_shim_legacy_logging_enabled(v43)
          && _IDSShouldLog(0LL, @"IDSDaemon"))
        {
          uint64_t v44 = IDSLoggableDescriptionForObjectOnService(v20, v27);
          id v100 = v110;
          __int128 v101 = (void *)objc_claimAutoreleasedReturnValue(v44);
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Received group session message fromID %@, processing message %@");
        }

        uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDSessionController sharedInstance]( &OBJC_CLASS___IDSDSessionController,  "sharedInstance",  v100,  v101));
        [v30 processIncomingGroupSessionMessage:v20 fromToken:v109 fromURI:v110 toURI:v107 topic:v27 idsMessageContext:v108];
        break;
    }

- (BOOL)_doesNiceMessageContainValidCombination:(id)a3
{
  id v3 = a3;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 originalCommand]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 command]);
  uint64_t v6 = v5;
  if (v4 && ([v5 isEqualToNumber:&off_100947D10] & 1) == 0)
  {
    uint64_t v8 = OSLogHandleForIDSCategory("Warning");
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "We received an IDS Message that had an original command key, however its command was not FTCommandIDAttachmentMessage",  v12,  2u);
    }

    if (os_log_shim_legacy_logging_enabled(v10))
    {
      _IDSWarnV( @"IDSFoundation",  @"We received an IDS Message that had an original command key, however its command was not FTCommandIDAttachmentMessage");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"We received an IDS Message that had an original command key, however its command was not FTCommandIDAttachmentMessage");
      _IDSLogTransport( @"Warning",  @"IDS",  @"We received an IDS Message that had an original command key, however its command was not FTCommandIDAttachmentMessage");
    }

    BOOL v7 = 0;
  }

  else
  {
    BOOL v7 = 1;
  }

  return v7;
}

- (id)_validAccountForIncomingMessageSentToURI:(id)a3 service:(id)a4 outPseudonym:(id *)a5
{
  id v7 = a3;
  id v8 = a4;
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon accountController](self, "accountController"));
  __int128 v36 = v8;
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 accountsOnService:v8]);

  __int128 v42 = 0u;
  __int128 v43 = 0u;
  __int128 v40 = 0u;
  __int128 v41 = 0u;
  id obj = v10;
  id v11 = [obj countByEnumeratingWithState:&v40 objects:v52 count:16];
  if (v11)
  {
    id v12 = v11;
    id v13 = 0LL;
    uint64_t v39 = *(void *)v41;
LABEL_3:
    uint64_t v14 = 0LL;
    while (1)
    {
      if (*(void *)v41 != v39) {
        objc_enumerationMutation(obj);
      }
      id v15 = *(void **)(*((void *)&v40 + 1) + 8 * v14);
      id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMIDSLog daemon](&OBJC_CLASS___IMIDSLog, "daemon"));
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      {
        BOOL v32 = (void *)objc_claimAutoreleasedReturnValue([v15 uniqueID]);
        uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([v15 unprefixedURIStringsFromRegistration]);
        __int128 v34 = (void *)objc_claimAutoreleasedReturnValue([v15 aliases]);
        *(_DWORD *)__int128 buf = 138413058;
        id v45 = v7;
        __int16 v46 = 2112;
        uint64_t v47 = v32;
        __int16 v48 = 2112;
        uint64_t v49 = v33;
        __int16 v50 = 2112;
        uint64_t v51 = v34;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEBUG,  "Checking if this message corresponds to a selected alias {toURI: %@, accountUniqueID: %@, aliasStrings: %@, aliases: %@}",  buf,  0x2Au);
      }

      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v15 unprefixedURIStringsFromRegistration]);
      id v18 = (void *)objc_claimAutoreleasedReturnValue([v7 unprefixedURI]);
      unsigned int v19 = [v17 containsObject:v18];

      id v20 = (void *)objc_claimAutoreleasedReturnValue([v15 aliases]);
      id v21 = (void *)objc_claimAutoreleasedReturnValue([v7 unprefixedURI]);
      unsigned int v22 = [v20 containsObject:v21] ? objc_msgSend(v15, "isEnabled") : 0;

      id v23 = (void *)objc_claimAutoreleasedReturnValue([v15 dsHandle]);
      unsigned int v24 = (void *)objc_claimAutoreleasedReturnValue([v7 prefixedURI]);
      unsigned int v25 = [v23 isEqualToString:v24];

      uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v7 prefixedURI]);
      LODWORD(v23) = [v26 _appearsToBePseudonymID];

      if ((_DWORD)v23)
      {
        __int128 v27 = (void *)objc_claimAutoreleasedReturnValue([v7 prefixedURI]);
        uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v15 pseudonymForPseudonymURIString:v27]);

        BOOL v29 = v28 != 0LL;
        if (a5 && v28) {
          *a5 = v28;
        }
      }

      else
      {
        BOOL v29 = 0;
      }

      if (((v19 | v22 | v25) & 1) != 0 || v29)
      {
        id v30 = v15;

        BOOL v31 = [v30 accountType] != 2 || v29;
        id v13 = v30;
        if (v31) {
          break;
        }
      }

      if (v12 == (id)++v14)
      {
        id v12 = [obj countByEnumeratingWithState:&v40 objects:v52 count:16];
        id v30 = v13;
        if (v12) {
          goto LABEL_3;
        }
        break;
      }
    }
  }

  else
  {
    id v30 = 0LL;
  }

  return v30;
}

- (BOOL)_shouldRejectMessageOnCrossAccountService:(id)a3 fromSenderURI:(id)a4
{
  id v6 = a4;
  if ([a3 tinkerMessagingOnly])
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon pairingManager](self, "pairingManager"));
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 pairedDeviceHandlesWithPairingType:1]);

    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v6 prefixedURI]);
    unsigned __int8 v10 = [v8 containsObject:v9];

    char v11 = v10 ^ 1;
  }

  else
  {
    char v11 = 0;
  }

  return v11;
}

- (BOOL)_shouldRejectMessageOnFamilyService:(id)a3 fromSenderURI:(id)a4
{
  id v6 = a4;
  if ([a3 isFamilyService])
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon familyManager](self, "familyManager"));
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 familyHandles]);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v6 unprefixedURI]);
    unsigned __int8 v10 = [v8 containsObject:v9];

    char v11 = v10 ^ 1;
  }

  else
  {
    char v11 = 0;
  }

  return v11;
}

- (BOOL)_primaryAccountExistsForService:(id)a3 withURI:(id)a4
{
  id v6 = a4;
  id v7 = a3;
  id v8 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon accountController](self, "accountController"));
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 accountsOnService:v7]);

  if (v9 && [v9 count])
  {
    unsigned __int8 v10 = (void *)objc_claimAutoreleasedReturnValue([v9 firstObject]);
    char v11 = (void *)objc_claimAutoreleasedReturnValue([v10 primaryAccount]);

    id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 service]);
    id v13 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon accountController](self, "accountController"));
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v6 prefixedURI]);
    id v15 = (void *)objc_claimAutoreleasedReturnValue([v13 accountOnService:v12 withAliasURI:v14]);

    BOOL v16 = v15 != 0LL;
  }

  else
  {
    BOOL v16 = 0;
  }

  return v16;
}

- (BOOL)firewallDatabaseAllowsFromURI:(id)a3 mergeID:(id)a4 service:(id)a5
{
  id v7 = a3;
  id v8 = a5;
  id v9 = a4;
  id v10 = [[IDSFirewallEntry alloc] initWithURI:v7 andLastSeenDate:0];
  [v10 setMergeID:v9];

  char v11 = (void *)objc_claimAutoreleasedReturnValue(+[IDSFirewallStore sharedInstance](&OBJC_CLASS___IDSFirewallStore, "sharedInstance"));
  id v12 = [v8 controlCategory];

  LOBYTE(v12) = [v11 isAllowed:v10 category:v12];
  if ((v12 & 1) != 0)
  {
    BOOL v13 = 1;
  }

  else
  {
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v7 prefixedURI]);
    BOOL v13 = +[IMUserDefaults handleInFirewallAllowList:](&OBJC_CLASS___IMUserDefaults, "handleInFirewallAllowList:", v14);
  }

  return v13;
}

- (BOOL)isFirewallOn
{
  return +[IMUserDefaults isFirewallEnabled](&OBJC_CLASS___IMUserDefaults, "isFirewallEnabled");
}

- (BOOL)isFirewallEnabledForService:(id)a3
{
  id v3 = a3;
  if (+[IMUserDefaults shouldFirewallDropForAllCategories]( &OBJC_CLASS___IMUserDefaults,  "shouldFirewallDropForAllCategories"))
  {
    unsigned __int8 v4 = [v3 allowCrossAccountMessages];
  }

  else
  {
    unsigned __int8 v4 = [v3 isFirewallEnabled];
  }

  BOOL v5 = v4;

  return v5;
}

- (BOOL)isFirewallOnForService:(id)a3
{
  id v4 = a3;
  if (-[IDSDaemon isFirewallOn](self, "isFirewallOn")) {
    BOOL v5 = -[IDSDaemon isFirewallEnabledForService:](self, "isFirewallEnabledForService:", v4);
  }
  else {
    BOOL v5 = 0;
  }

  return v5;
}

- (BOOL)shouldFirewallDropMessageForFromURI:(id)a3 mergeID:(id)a4 service:(id)a5
{
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  if (-[IDSDaemon isFirewallOnForService:](self, "isFirewallOnForService:", v10)
    && !-[IDSDaemon isMessageFromSelfForFromURI:service:](self, "isMessageFromSelfForFromURI:service:", v8, v10))
  {
    unsigned int v11 = !-[IDSDaemon firewallDatabaseAllowsFromURI:mergeID:service:]( self,  "firewallDatabaseAllowsFromURI:mergeID:service:",  v8,  v9,  v10);
  }

  else
  {
    LOBYTE(v11) = 0;
  }

  return v11;
}

- (void)noteBlockedMessageFromURI:(id)a3 service:(id)a4
{
  id v5 = a4;
  id v6 = a3;
  id v9 = [[IDSFirewallEntry alloc] initWithURI:v6 andLastSeenDate:0];

  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[IDSFirewallStore sharedInstance](&OBJC_CLASS___IDSFirewallStore, "sharedInstance"));
  id v8 = [v5 controlCategory];

  [v7 addToBlockedList:v9 forCategory:v8];
}

- (int64_t)_cleanupFrequencyForRestrictedMessages
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[IDSServerBag sharedInstance](&OBJC_CLASS___IDSServerBag, "sharedInstance"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKey:@"cleanup_frequency_for_expired_restricted_messages"]);

  if (v3 && (uint64_t v5 = objc_opt_class(&OBJC_CLASS___NSNumber, v4), (objc_opt_isKindOfClass(v3, v5) & 1) != 0))
  {
    id v6 = v3;
    [v6 doubleValue];
    double v8 = v7;
    uint64_t v9 = OSLogHandleForIDSCategory("IDSDaemon");
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 134217984;
      double v15 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Server Bag provided us with %f sec cleanupFrequencyForRestrictedMessages",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v11) && _IDSShouldLog(0LL, @"IDSDaemon")) {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Server Bag provided us with %f sec cleanupFrequencyForRestrictedMessages");
    }

    int64_t v12 = (uint64_t)v8;
  }

  else
  {
    int64_t v12 = 600LL;
  }

  return v12;
}

- (int64_t)_expirationTimeForRestrictedMessages
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[IDSServerBag sharedInstance](&OBJC_CLASS___IDSServerBag, "sharedInstance"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKey:@"expiration_time_for_blocked_restricted_messages"]);

  double v5 = 300.0;
  if (v3)
  {
    uint64_t v6 = objc_opt_class(&OBJC_CLASS___NSNumber, v4);
    if ((objc_opt_isKindOfClass(v3, v6) & 1) != 0)
    {
      id v7 = v3;
      [v7 doubleValue];
      double v5 = v8;
      uint64_t v9 = OSLogHandleForIDSCategory("IDSDaemon");
      id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 134217984;
        double v19 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Server Bag provided us with %f sec expirationTimeForRestrictedMessages",  buf,  0xCu);
      }

      if (os_log_shim_legacy_logging_enabled(v11) && _IDSShouldLog(0LL, @"IDSDaemon"))
      {
        double v17 = v5;
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Server Bag provided us with %f sec expirationTimeForRestrictedMessages");
      }
    }
  }

  int64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now", *(void *)&v17));
  BOOL v13 = (void *)objc_claimAutoreleasedReturnValue([v12 dateByAddingTimeInterval:v5]);
  [v13 timeIntervalSince1970];
  double v15 = v14;

  return (uint64_t)v15;
}

- (BOOL)isMessageFromSelfForFromURI:(id)a3 service:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  double v8 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon accountController](self, "accountController"));
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v6 prefixedURI]);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v8 accountOnService:v7 withAliasURI:v9]);

  if (v10) {
    goto LABEL_2;
  }
  int64_t v12 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon accountController](self, "accountController"));
  BOOL v13 = (void *)objc_claimAutoreleasedReturnValue([v6 unprefixedURI]);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v12 accountOnService:v7 withVettedAliasURI:v13]);

  if ([v10 shouldAutoRegisterAllHandles])
  {

LABEL_6:
    BOOL v11 = -[IDSDaemon _primaryAccountExistsForService:withURI:]( self,  "_primaryAccountExistsForService:withURI:",  v7,  v6);
    id v10 = 0LL;
    goto LABEL_7;
  }

  if (!v10) {
    goto LABEL_6;
  }
LABEL_2:
  BOOL v11 = 1;
LABEL_7:

  return v11;
}

- (void)queryHashForceUpdate:(id)a3 fromURI:(id)a4 messageUUID:(id)a5 updateHash:(id)a6 toURI:(id)a7 service:(id)a8
{
  id v20 = a3;
  id v14 = a4;
  id v15 = a5;
  id v16 = a6;
  id v17 = a7;
  id v18 = a8;
  BOOL v19 = [v20 unsignedIntegerValue] == (id)101
     && +[IMUserDefaults forceFlushOnDeliveryReceipt](&OBJC_CLASS___IMUserDefaults, "forceFlushOnDeliveryReceipt");
  if (+[IDSRegistrationCacheStateTransportPolicy shouldHandleMessageWithUpdateHash:command:]( &OBJC_CLASS___IDSRegistrationCacheStateTransportPolicy,  "shouldHandleMessageWithUpdateHash:command:",  v16,  v20)
    || v19)
  {
    -[IDSRegistrationHashProcessor handleRegistrationUpdateForHash:localURI:remoteURI:service:guid:forceUpdate:]( self->_queryUpdateNotifier,  "handleRegistrationUpdateForHash:localURI:remoteURI:service:guid:forceUpdate:",  v16,  v17,  v14,  v18,  v15,  v19);
  }
}

- (void)_processKTPeerUpdateMessageForService:(id)a3 localURI:(id)a4 remoteURI:(id)a5
{
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  BOOL v11 = v10;
  if (v8 && v9 && v10)
  {
    uint64_t v12 = OSLogHandleForIDSCategory("IDSDaemon");
    BOOL v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412802;
      id v37 = v8;
      __int16 v38 = 2112;
      id v39 = v9;
      __int16 v40 = 2112;
      __int128 v41 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Processing KTPeerUpdateMessage { service: %@ localURI: %@ remoteURI: %@ }",  buf,  0x20u);
    }

    if (os_log_shim_legacy_logging_enabled(v14) && _IDSShouldLog(0LL, @"IDSDaemon"))
    {
      id v33 = v9;
      uint64_t v35 = v11;
      id v31 = v8;
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Processing KTPeerUpdateMessage { service: %@ localURI: %@ remoteURI: %@ }");
    }

    id v15 = (void *)objc_claimAutoreleasedReturnValue( +[IDSIDStatusQueryController sharedInstance]( &OBJC_CLASS___IDSIDStatusQueryController,  "sharedInstance",  v31,  v33,  v35));
    [v15 removeCachedIDStatusForURI:v11 service:v8];

    id v16 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPeerIDManager sharedInstance](&OBJC_CLASS___IDSPeerIDManager, "sharedInstance"));
    [v16 forgetPeerTokensForURI:v11 service:v8];

    id v17 = (void *)objc_claimAutoreleasedReturnValue( +[IDSKeyTransparencyVerifier sharedInstance]( &OBJC_CLASS___IDSKeyTransparencyVerifier,  "sharedInstance"));
    [v17 clearTransparencyCacheForService:v8 peerURI:v11];

    id v18 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon serviceController](self, "serviceController"));
    BOOL v19 = (void *)objc_claimAutoreleasedReturnValue([v18 serviceWithIdentifier:v8]);

    if (v19)
    {
      id v20 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
      id v21 = (void *)objc_claimAutoreleasedReturnValue([v19 pushTopic]);
      unsigned int v22 = objc_alloc_init(&OBJC_CLASS___IMMessageContext);
      id v23 = (void *)objc_claimAutoreleasedReturnValue([v20 broadcasterForTopic:v21 ignoreServiceListener:1 messageContext:v22]);

      uint64_t v24 = OSLogHandleForIDSCategory("IDSDaemon");
      unsigned int v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412546;
        id v37 = v8;
        __int16 v38 = 2112;
        id v39 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "Broadcasting didFlushCacheFromKTPeerUpdateForService { service: %@ peerURI: %@ }",  buf,  0x16u);
      }

      if (os_log_shim_legacy_logging_enabled(v26) && _IDSShouldLog(0LL, @"IDSDaemon"))
      {
        id v32 = v8;
        __int128 v34 = v11;
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Broadcasting didFlushCacheFromKTPeerUpdateForService { service: %@ peerURI: %@ }");
      }

      __int128 v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "prefixedURI", v32, v34));
      [v23 didFlushCacheFromKTPeerUpdateForService:v8 peerURI:v27];
    }

    else
    {
      uint64_t v28 = OSLogHandleForIDSCategory("IDSDaemon");
      BOOL v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412290;
        id v37 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "No idsService registered for %@ -- not broadcasting didFlushCacheFromKTPeerUpdateForService",  buf,  0xCu);
      }

      if (os_log_shim_legacy_logging_enabled(v30) && _IDSShouldLog(0LL, @"IDSDaemon")) {
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"No idsService registered for %@ -- not broadcasting didFlushCacheFromKTPeerUpdateForService");
      }
    }
  }
}

- (void)_processIncomingRemoteNiceMessage:(id)a3 forTopic:(id)a4 fromURI:(id)a5 storedGuid:(id)a6 messageContext:(id)a7
{
  id v12 = a3;
  BOOL v13 = (uint64_t (*)(uint64_t, uint64_t))a4;
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t))a5;
  id v208 = a6;
  id v206 = a7;
  state.opaque[1] = 0xAAAAAAAAAAAAAAAALL;
  id v245 = _os_activity_create( (void *)&_mh_execute_header,  "Incoming remote message",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[0] = 0xAAAAAAAAAAAAAAAALL;
  os_activity_scope_enter(v245, &state);
  uint64_t v15 = OSLogHandleForIDSCategory("IDSDaemon");
  id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138413314;
    *(void *)&uint8_t buf[4] = v12;
    *(_WORD *)&_BYTE buf[12] = 2112;
    *(void *)&buf[14] = v14;
    *(_WORD *)&_BYTE buf[22] = 2112;
    v247 = v13;
    *(_WORD *)uint64_t v248 = 2112;
    *(void *)&v248[2] = v208;
    *(_WORD *)&v248[10] = 2112;
    *(void *)&v248[12] = @"YES";
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "_processIncomingRemoteMessage: %@ fromID: %@ forTopic: %@ storedGUID %@ IDSXAccountBlastdoor %@",  buf,  0x34u);
  }

  if (os_log_shim_legacy_logging_enabled(v17) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    id v167 = v208;
    id v170 = @"YES";
    v159 = v14;
    id v164 = v13;
    id v151 = v12;
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"_processIncomingRemoteMessage: %@ fromID: %@ forTopic: %@ storedGUID %@ IDSXAccountBlastdoor %@");
  }

  id v18 = (void *)objc_claimAutoreleasedReturnValue( +[IMLockdownManager sharedInstance]( &OBJC_CLASS___IMLockdownManager,  "sharedInstance",  v151,  v159,  v164,  v167,  v170));
  if (![v18 isInternalInstall])
  {

    goto LABEL_15;
  }

  unsigned int v19 = [v13 isEqualToString:@"com.apple.madrid"];

  if (!v19 || !+[IMUserDefaults isDroppingMadridMessages](&OBJC_CLASS___IMUserDefaults, "isDroppingMadridMessages"))
  {
LABEL_15:
    if (!v13)
    {
      +[IDSDMessageStore deleteIncomingMessageWithGUID:]( &OBJC_CLASS___IDSDMessageStore,  "deleteIncomingMessageWithGUID:",  v208);
      goto LABEL_62;
    }

    id v23 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon serviceController](self, "serviceController"));
    id v207 = (void *)objc_claimAutoreleasedReturnValue([v23 serviceWithPushTopic:v13]);

    if (!v207)
    {
      uint64_t v25 = OSLogHandleForIDSCategory("Warning");
      uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 138412290;
        *(void *)&uint8_t buf[4] = v13;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "Found no service for topic! %@", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled(v27))
      {
        _IDSWarnV(@"IDSFoundation", @"Found no service for topic! %@");
        _IDSLogV(0LL, @"IDSFoundation", @"Warning", @"Found no service for topic! %@");
        uint64_t v152 = v13;
        *(void *)&double v24 = _IDSLogTransport(@"Warning", @"IDS", @"Found no service for topic! %@").n128_u64[0];
      }
    }

    v205 = (uint64_t (*)(uint64_t, uint64_t))objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "pushUUID", v24, v152));
    if (![v13 isEqualToString:IDSServiceNameiMessageLite]
      || (uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v12 command]),
          BOOL v29 = [v28 integerValue] == (id)100,
          v28,
          !v29))
    {
      char v36 = 0;
      goto LABEL_53;
    }

    uint64_t v30 = objc_alloc(&OBJC_CLASS___NSMutableDictionary);
    id v31 = (void *)objc_claimAutoreleasedReturnValue([v12 rawMessage]);
    CFMutableDictionaryRef theDict = -[NSMutableDictionary initWithDictionary:](v30, "initWithDictionary:", v31);

    id v32 = (void *)objc_claimAutoreleasedReturnValue([v12 receiverShortHandle]);
    id v33 = (void *)objc_claimAutoreleasedReturnValue([v12 toURI]);
    if (v33)
    {
      __int128 v34 = (void *)objc_claimAutoreleasedReturnValue([v12 toURI]);
      uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([v34 prefixedURI]);
      if ([v35 length])
      {

LABEL_33:
        goto LABEL_34;
      }

      if (!v32) {
        goto LABEL_34;
      }
    }

    else if (!v32)
    {
LABEL_34:
      uint64_t v38 = objc_claimAutoreleasedReturnValue([v12 senderShortHandle]);
      id v39 = (void *)v38;
      if (v14)
      {
        __int16 v40 = (void *)objc_claimAutoreleasedReturnValue([v14 prefixedURI]);
        if ([v40 length])
        {
          __int128 v41 = v14;
LABEL_42:

          goto LABEL_43;
        }

        if (!v39)
        {
          __int128 v41 = v14;
          goto LABEL_43;
        }
      }

      else if (!v38)
      {
        __int128 v41 = 0LL;
LABEL_43:
        id v43 = [[IDSIncomingNiceMessage alloc] initWithMessageDictionary:theDict topic:v13];

        uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue([v43 senderPushToken]);
        id v45 = (void *)objc_claimAutoreleasedReturnValue([v43 toURI]);
        uint64_t v46 = OSLogHandleForIDSCategory("IDSDaemon");
        uint64_t v47 = (os_log_s *)objc_claimAutoreleasedReturnValue(v46);
        if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 138413058;
          *(void *)&uint8_t buf[4] = v45;
          *(_WORD *)&_BYTE buf[12] = 2112;
          *(void *)&buf[14] = v32;
          *(_WORD *)&_BYTE buf[22] = 2112;
          v247 = v41;
          *(_WORD *)uint64_t v248 = 2112;
          *(void *)&v248[2] = v39;
          _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_DEFAULT,  "Incoming iML, gathering full handles toURI: %@, receiverShortHandle: %@, fromURI: %@, senderShortHandle: %@",  buf,  0x2Au);
        }

        uint64_t v49 = os_log_shim_legacy_logging_enabled(v48);
        if ((_DWORD)v49)
        {
          uint64_t v49 = _IDSShouldLog(0LL, @"IDSDaemon");
          if ((_DWORD)v49)
          {
            __int16 v165 = v41;
            id v168 = v39;
            uint64_t v153 = v45;
            id v160 = v32;
            uint64_t v49 = _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Incoming iML, gathering full handles toURI: %@, receiverShortHandle: %@, fromURI: %@, senderShortHandle: %@");
          }
        }

        if (v44 && v45 && v41)
        {
          uint64_t v51 = im_primary_queue(v49, v50);
          BOOL v52 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v51);
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472LL;
          block[2] = sub_10037A6F8;
          block[3] = &unk_1008F60E8;
          void block[4] = self;
          id v241 = v44;
          id v242 = v45;
          uint64_t v243 = v41;
          dispatch_async(v52, block);
        }

        char v36 = 1;
        uint64_t v14 = v41;
        id v12 = v43;
LABEL_53:
        if (-[IDSDaemon _shouldRejectMessageOnCrossAccountService:fromSenderURI:]( self,  "_shouldRejectMessageOnCrossAccountService:fromSenderURI:",  v207,  v14,  v153,  v160,  v165,  v168))
        {
          uint64_t v53 = OSLogHandleForIDSCategory("IDSDaemon");
          uint64_t v54 = (os_log_s *)objc_claimAutoreleasedReturnValue(v53);
          if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)__int128 buf = 138412546;
            *(void *)&uint8_t buf[4] = v205;
            *(_WORD *)&_BYTE buf[12] = 2112;
            *(void *)&buf[14] = v14;
            _os_log_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_DEFAULT,  "Message %@ is coming from an account that is not permited to send to this device. Sender Was: %@",  buf,  0x16u);
          }

          if (os_log_shim_legacy_logging_enabled(v55)
            && _IDSShouldLog(0LL, @"IDSDaemon"))
          {
            __int128 v154 = v205;
            __int16 v161 = v14;
            _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Message %@ is coming from an account that is not permited to send to this device. Sender Was: %@");
          }

          -[objc_class deleteIncomingMessageWithGUID:]( -[IDSDaemon _messageStoreClass](self, "_messageStoreClass", v154, v161),  "deleteIncomingMessageWithGUID:",  v208);
          id v56 = [[IDSMissingMessageMetric alloc] initWithReason:702 guid:v205 service:v13 additionalInformation:0];
          +[IDSMissingMessageMetricReporter sendMetric:]( &OBJC_CLASS___IDSMissingMessageMetricReporter,  "sendMetric:",  v56);
          -[IDSDaemon _sendCertifiedDeliveryReceiptIfNeededForNiceMessage:service:failureReason:failureReasonMessage:generateDeliveryReceipt:]( self,  "_sendCertifiedDeliveryReceiptIfNeededForNiceMessage:service:failureReason:failureReasonMessage:generateDeliveryReceipt:",  v12,  v13,  &off_100947D28,  0LL,  0LL);
          goto LABEL_60;
        }

        if (sub_1003CC744(v14))
        {
          uint64_t v57 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon accountController](self, "accountController"));
          id v58 = (void *)objc_claimAutoreleasedReturnValue([v14 prefixedURI]);
          uint64_t v59 = (uint64_t (*)(uint64_t, uint64_t))objc_claimAutoreleasedReturnValue( [v57 accountOnService:v207 withAliasURI:v58]);

          if (!v59)
          {
            uint64_t v76 = OSLogHandleForIDSCategory("IDSDaemon");
            uint64_t v77 = (os_log_s *)objc_claimAutoreleasedReturnValue(v76);
            if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)__int128 buf = 138412546;
              *(void *)&uint8_t buf[4] = v205;
              *(_WORD *)&_BYTE buf[12] = 2112;
              *(void *)&buf[14] = v14;
              _os_log_impl( (void *)&_mh_execute_header,  v77,  OS_LOG_TYPE_DEFAULT,  "Told to filter message %@ from %@",  buf,  0x16u);
            }

            if (os_log_shim_legacy_logging_enabled(v78)
              && _IDSShouldLog(0LL, @"IDSDaemon"))
            {
              __int128 v154 = v205;
              __int16 v161 = v14;
              _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon", @"Told to filter message %@ from %@");
            }

            +[IDSDMessageStore deleteIncomingMessageWithGUID:]( &OBJC_CLASS___IDSDMessageStore,  "deleteIncomingMessageWithGUID:",  v208,  v154,  v161);
            id v56 = [[IDSMissingMessageMetric alloc] initWithReason:702 guid:v205 service:v13 additionalInformation:0];
            +[IDSMissingMessageMetricReporter sendMetric:]( &OBJC_CLASS___IDSMissingMessageMetricReporter,  "sendMetric:",  v56);
            -[IDSDaemon _sendCertifiedDeliveryReceiptIfNeededForNiceMessage:service:failureReason:failureReasonMessage:generateDeliveryReceipt:]( self,  "_sendCertifiedDeliveryReceiptIfNeededForNiceMessage:service:failureReason:failureReasonMessage:generateDeliveryReceipt:",  v12,  v13,  &off_100947D28,  0LL,  0LL);
            goto LABEL_60;
          }

          uint64_t v60 = OSLogHandleForIDSCategory("IDSDaemon");
          uint64_t v61 = (os_log_s *)objc_claimAutoreleasedReturnValue(v60);
          if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)__int128 buf = 138412546;
            *(void *)&uint8_t buf[4] = v14;
            *(_WORD *)&_BYTE buf[12] = 2112;
            *(void *)&buf[14] = v59;
            _os_log_impl( (void *)&_mh_execute_header,  v61,  OS_LOG_TYPE_DEFAULT,  "Ignoring filtered list for own aliases. {Alias: %@; Account: %@;}",
              buf,
              0x16u);
          }

          if (os_log_shim_legacy_logging_enabled(v62)
            && _IDSShouldLog(0LL, @"IDSDaemon"))
          {
            __int128 v154 = v14;
            __int16 v161 = v59;
            _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Ignoring filtered list for own aliases. {Alias: %@; Account: %@;}");
          }
        }

        if ((objc_msgSend(v207, "allowCrossAccountMessages", v154, v161) & 1) == 0
          && !-[IDSDaemon isMessageFromSelfForFromURI:service:](self, "isMessageFromSelfForFromURI:service:", v14, v207))
        {
          uint64_t v72 = OSLogHandleForIDSCategory("IDSDaemon");
          uint64_t v73 = (os_log_s *)objc_claimAutoreleasedReturnValue(v72);
          if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v74 = (void *)objc_claimAutoreleasedReturnValue([v207 identifier]);
            *(_DWORD *)__int128 buf = 138412802;
            *(void *)&uint8_t buf[4] = v205;
            *(_WORD *)&_BYTE buf[12] = 2112;
            *(void *)&buf[14] = v74;
            *(_WORD *)&_BYTE buf[22] = 2112;
            v247 = v14;
            _os_log_impl( (void *)&_mh_execute_header,  v73,  OS_LOG_TYPE_DEFAULT,  "Dropping message %@ from %@ because it is not on the cross-account allowlist and is coming from %@",  buf,  0x20u);
          }

          if (os_log_shim_legacy_logging_enabled(v75)
            && _IDSShouldLog(0LL, @"IDSDaemon"))
          {
            id v162 = (NSDate *)objc_claimAutoreleasedReturnValue([v207 identifier]);
            CFMutableDictionaryRef v166 = (CFMutableDictionaryRef)v14;
            __int128 v155 = v205;
            _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Dropping message %@ from %@ because it is not on the cross-account allowlist and is coming from %@");
          }

          +[IDSDMessageStore deleteIncomingMessageWithGUID:]( &OBJC_CLASS___IDSDMessageStore,  "deleteIncomingMessageWithGUID:",  v208,  v155,  v162,  v166);
          id v56 = [[IDSMissingMessageMetric alloc] initWithReason:710 guid:v205 service:v13 additionalInformation:0];
          +[IDSMissingMessageMetricReporter sendMetric:]( &OBJC_CLASS___IDSMissingMessageMetricReporter,  "sendMetric:",  v56);
          -[IDSDaemon _sendCertifiedDeliveryReceiptIfNeededForNiceMessage:service:failureReason:failureReasonMessage:generateDeliveryReceipt:]( self,  "_sendCertifiedDeliveryReceiptIfNeededForNiceMessage:service:failureReason:failureReasonMessage:generateDeliveryReceipt:",  v12,  v13,  &off_100947D40,  0LL,  0LL);
          goto LABEL_60;
        }

        if (!-[IDSDaemon _doesNiceMessageContainValidCombination:]( self,  "_doesNiceMessageContainValidCombination:",  v12))
        {
          +[IDSDMessageStore deleteIncomingMessageWithGUID:]( &OBJC_CLASS___IDSDMessageStore,  "deleteIncomingMessageWithGUID:",  v208);
          goto LABEL_61;
        }

        id v56 = (id)objc_claimAutoreleasedReturnValue([v12 expirationDate]);
        if ([v56 unsignedLongLongValue])
        {
          uint64_t v63 = -[NSDate initWithTimeIntervalSince1970:]( [NSDate alloc],  "initWithTimeIntervalSince1970:",  (double)(unint64_t)[v56 unsignedLongLongValue]);
          uint64_t v64 = OSLogHandleForIDSCategory("IDSDaemon");
          uint64_t v65 = (os_log_s *)objc_claimAutoreleasedReturnValue(v64);
          if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)__int128 buf = 138412546;
            *(void *)&uint8_t buf[4] = v56;
            *(_WORD *)&_BYTE buf[12] = 2112;
            *(void *)&buf[14] = v63;
            _os_log_impl( (void *)&_mh_execute_header,  v65,  OS_LOG_TYPE_DEFAULT,  "Message specifies an expiration date %@ %@",  buf,  0x16u);
          }

          if (os_log_shim_legacy_logging_enabled(v66)
            && _IDSShouldLog(0LL, @"IDSDaemon"))
          {
            __int128 v155 = (uint64_t (*)(uint64_t, uint64_t))v56;
            id v162 = v63;
            _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Message specifies an expiration date %@ %@");
          }

          -[NSDate timeIntervalSinceNow](v63, "timeIntervalSinceNow", v155, v162);
          if (v67 + 5.0 < 0.0)
          {
            uint64_t v68 = OSLogHandleForIDSCategory("IDSDaemon");
            uint64_t v69 = (os_log_s *)objc_claimAutoreleasedReturnValue(v68);
            if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)__int128 buf = 138412546;
              *(void *)&uint8_t buf[4] = v205;
              *(_WORD *)&_BYTE buf[12] = 2112;
              *(void *)&buf[14] = v13;
              _os_log_impl( (void *)&_mh_execute_header,  v69,  OS_LOG_TYPE_DEFAULT,  "Message %@ for topic %@ has expired! Dropping.",  buf,  0x16u);
            }

            if (os_log_shim_legacy_logging_enabled(v70)
              && _IDSShouldLog(0LL, @"IDSDaemon"))
            {
              __int128 v155 = v205;
              id v162 = (NSDate *)v13;
              _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Message %@ for topic %@ has expired! Dropping.");
            }

            +[IDSDMessageStore deleteIncomingMessageWithGUID:]( &OBJC_CLASS___IDSDMessageStore,  "deleteIncomingMessageWithGUID:",  v208,  v155,  v162);
            id v71 = [[IDSMissingMessageMetric alloc] initWithReason:712 guid:v205 service:v13 additionalInformation:0];
            +[IDSMissingMessageMetricReporter sendMetric:]( &OBJC_CLASS___IDSMissingMessageMetricReporter,  "sendMetric:",  v71);
            goto LABEL_204;
          }
        }

        if (-[IDSDaemon _checkIfDupeAndNoteGuid:local:topic:]( self,  "_checkIfDupeAndNoteGuid:local:topic:",  v205,  0LL,  v13))
        {
          uint64_t v79 = OSLogHandleForIDSCategory("IDSDaemon");
          uint64_t v80 = (os_log_s *)objc_claimAutoreleasedReturnValue(v79);
          if (os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)__int128 buf = 138412290;
            *(void *)&uint8_t buf[4] = v205;
            _os_log_impl( (void *)&_mh_execute_header,  v80,  OS_LOG_TYPE_DEFAULT,  "Received remote message %@ is a duplicate. Ignoring.",  buf,  0xCu);
          }

          if (os_log_shim_legacy_logging_enabled(v81)
            && _IDSShouldLog(0LL, @"IDSDaemon"))
          {
            __int128 v155 = v205;
            _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Received remote message %@ is a duplicate. Ignoring.");
          }

          +[IDSDMessageStore deleteIncomingMessageWithGUID:]( &OBJC_CLASS___IDSDMessageStore,  "deleteIncomingMessageWithGUID:",  v208,  v155);
          goto LABEL_60;
        }

        [v206 setShouldBoost:1];
        uint64_t v63 = (NSDate *)objc_claimAutoreleasedReturnValue([v12 command]);
        uint64_t v82 = objc_claimAutoreleasedReturnValue([v12 commandContext]);
        CFMutableDictionaryRef theDicta = (CFMutableDictionaryRef)objc_claimAutoreleasedReturnValue([v12 toURI]);
        uint64_t v199 = (void *)objc_claimAutoreleasedReturnValue([v12 reportID]);
        uint64_t v83 = objc_claimAutoreleasedReturnValue([v12 groupIDData]);
        if (v83) {
          v195 = -[ENGroupID initWithDataRepresentation:]( objc_alloc(&OBJC_CLASS___ENGroupID),  "initWithDataRepresentation:",  v83);
        }
        else {
          v195 = 0LL;
        }
        v198 = (void *)objc_claimAutoreleasedReturnValue([v12 peerResponseIdentifier]);
        uint64_t v197 = (void *)objc_claimAutoreleasedReturnValue([v12 wantsAppAck]);
        uint64_t v196 = (void *)objc_claimAutoreleasedReturnValue([v12 expectsPeerResponse]);
        BOOL v184 = -[NSDate integerValue](v63, "integerValue") == (id)104;
        BOOL v181 = -[NSDate integerValue](v63, "integerValue") == (id)120;
        id v191 = -[NSDate integerValue](v63, "integerValue");
        id v188 = -[NSDate integerValue](v63, "integerValue");
        id v193 = (void *)v82;
        v194 = (void *)v83;
        if ([v13 isEqualToString:@"com.apple.private.alloy.willow"])
        {
          BOOL v178 = -[NSDate integerValue](v63, "integerValue") == (id)250;
          BOOL v176 = -[NSDate integerValue](v63, "integerValue") == (id)251;
        }

        else
        {
          BOOL v178 = 0;
          BOOL v176 = 0;
        }

        uint64_t v85 = objc_opt_class(&OBJC_CLASS___NSDictionary, v84);
        uint64_t v86 = (void *)objc_claimAutoreleasedReturnValue([v12 rawMessage]);
        id v87 = sub_10028D3BC(v85, v86, IDSDeliveryStatusContextKey);
        id v202 = (void *)objc_claimAutoreleasedReturnValue(v87);

        if (-[NSDate integerValue](v63, "integerValue") == (id)101)
        {
          uint64_t v88 = (void *)objc_claimAutoreleasedReturnValue([v202 objectForKey:IDSSenderKeyIDCheckKey]);
          BOOL v89 = v88 != 0LL;
        }

        else
        {
          BOOL v89 = 0;
        }

        uint64_t v200 = (void *)objc_claimAutoreleasedReturnValue([v12 senderPushToken]);
        uint64_t v90 = (void *)objc_claimAutoreleasedReturnValue(+[IDSTrafficMonitor sharedInstance](&OBJC_CLASS___IDSTrafficMonitor, "sharedInstance"));
        uint64_t v91 = (void *)objc_claimAutoreleasedReturnValue([v207 identifier]);
        [v90 noteIncomingMessageForService:v91];

        uint64_t v92 = OSLogHandleForIDSCategory("GUIDTRACE");
        uint64_t v93 = (os_log_s *)objc_claimAutoreleasedReturnValue(v92);
        if (os_log_type_enabled(v93, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 138412546;
          *(void *)&uint8_t buf[4] = v205;
          *(_WORD *)&_BYTE buf[12] = 2112;
          *(void *)&buf[14] = v13;
          _os_log_impl( (void *)&_mh_execute_header,  v93,  OS_LOG_TYPE_DEFAULT,  "INCOMING-APS_DELIVERY:%@ SERVICE:%@",  buf,  0x16u);
        }

        if (os_log_shim_legacy_logging_enabled(v94)
          && _IDSShouldLog(0LL, @"GUIDTRACE"))
        {
          __int128 v155 = v205;
          id v162 = (NSDate *)v13;
          _IDSLogV(0LL, @"IDSFoundation", @"GUIDTRACE", @"INCOMING-APS_DELIVERY:%@ SERVICE:%@");
        }

        __int128 v95 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "certifiedDeliveryVersion", v155, v162));
        uint64_t v186 = (uint64_t)[v95 integerValue];

        id v201 = (void *)objc_claimAutoreleasedReturnValue([v12 updateHash]);
        uint64_t v96 = objc_claimAutoreleasedReturnValue([v12 encryptedPayload]);
        uint64_t v97 = (void *)v96;
        if (v89)
        {
          uint64_t v98 = OSLogHandleForIDSCategory("IDSDaemon");
          __int128 v99 = (os_log_s *)objc_claimAutoreleasedReturnValue(v98);
          if (os_log_type_enabled(v99, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)__int128 buf = 138412290;
            *(void *)&uint8_t buf[4] = v205;
            _os_log_impl( (void *)&_mh_execute_header,  v99,  OS_LOG_TYPE_DEFAULT,  "Received delivery receipt for sender key distribution message %@",  buf,  0xCu);
          }

          if (os_log_shim_legacy_logging_enabled(v100)
            && _IDSShouldLog(0LL, @"IDSDaemon"))
          {
            uint64_t v156 = (uint64_t)v205;
            _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Received delivery receipt for sender key distribution message %@");
          }

          -[IDSDaemon _processCertifiedDeliveryReceiptForSenderKeyDistribution:service:]( self,  "_processCertifiedDeliveryReceiptForSenderKeyDistribution:service:",  v12,  v13,  v156);
          +[IDSDMessageStore deleteIncomingMessageWithGUID:]( &OBJC_CLASS___IDSDMessageStore,  "deleteIncomingMessageWithGUID:",  v208);
          goto LABEL_203;
        }

        uint64_t v180 = (void *)v96;
        if (v96 && -[NSDate unsignedIntValue](v63, "unsignedIntValue") == 101)
        {
          char v101 = 1;
        }

        else
        {
          -[IDSDaemon queryHashForceUpdate:fromURI:messageUUID:updateHash:toURI:service:]( self,  "queryHashForceUpdate:fromURI:messageUUID:updateHash:toURI:service:",  v63,  v14,  v205,  v201,  theDicta,  v207);
          char v101 = 0;
        }

        if (v191 == (id)130)
        {
          uint64_t v97 = v180;
          if ([v207 tunnelService])
          {
            uint64_t v102 = OSLogHandleForIDSCategory("IDSDaemon");
            id v103 = (os_log_s *)objc_claimAutoreleasedReturnValue(v102);
            if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)__int128 buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v103,  OS_LOG_TYPE_DEFAULT,  "Received registration update message on tunnel service, ignoring...",  buf,  2u);
            }

            if (os_log_shim_legacy_logging_enabled(v104)
              && _IDSShouldLog(0LL, @"IDSDaemon"))
            {
              _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Received registration update message on tunnel service, ignoring...");
            }
          }

- (id)_messageStoreForDataProtectionClass:(unsigned int)a3
{
  return +[IDSDMessageStore sharedInstanceForDataProtectionClass:]( &OBJC_CLASS___IDSDMessageStore,  "sharedInstanceForDataProtectionClass:",  *(void *)&a3);
}

- (BOOL)_isUnderFirstDataProtectionLock
{
  if (CUTIsInternalInstall(self, a2)
    && +[IMUserDefaults isFakingEveryUnlockAsFirstUnlock]( &OBJC_CLASS___IMUserDefaults,  "isFakingEveryUnlockAsFirstUnlock"))
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[IMSystemMonitor sharedInstance](&OBJC_CLASS___IMSystemMonitor, "sharedInstance"));
    unsigned __int8 v3 = [v2 isUnderDataProtectionLock];
  }

  else
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[IMSystemMonitor sharedInstance](&OBJC_CLASS___IMSystemMonitor, "sharedInstance"));
    unsigned __int8 v3 = [v2 isUnderFirstDataProtectionLock];
  }

  BOOL v4 = v3;

  return v4;
}

- (void)_broadcastPendingMessageUpdateForNiceMessage:(id)a3 fromURI:(id)a4 toURI:(id)a5 forTopic:(id)a6 messageContext:(id)a7
{
  id v11 = a4;
  id v12 = a5;
  id v13 = a6;
  id v14 = a7;
  id v15 = a3;
  id v16 = (const void *)objc_claimAutoreleasedReturnValue([v15 command]);
  uint64_t v17 = objc_claimAutoreleasedReturnValue([v15 encryptedPayload]);
  id v18 = (void *)objc_claimAutoreleasedReturnValue([v15 pushUUID]);

  unsigned int v19 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  uint64_t v20 = (__CFDictionary *)v19;
  if (v16) {
    CFDictionarySetValue((CFMutableDictionaryRef)v19, IDSMessageContextOriginalCommandKey, v16);
  }
  char v36 = (void *)v16;
  id v21 = (void *)objc_claimAutoreleasedReturnValue([v12 prefixedURI]);
  if (v21) {
    CFDictionarySetValue(v20, IDSMessageContextToIDKey, v21);
  }
  unsigned int v33 = kIDSListenerCapConsumesLaunchOnDemandPendingMessageUpdates;

  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v11 prefixedURI]);
  if (v22) {
    CFDictionarySetValue(v20, IDSMessageContextFromIDKey, v22);
  }
  uint64_t v35 = (void *)v17;

  id v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v17 != 0));
  if (v23) {
    CFDictionarySetValue(v20, IDSMessageContextMessageHadEncryptedData, v23);
  }

  [v14 setShouldBoost:1];
  v41[0] = _NSConcreteStackBlock;
  v41[1] = 3221225472LL;
  v41[2] = sub_100382904;
  v41[3] = &unk_1008F95A0;
  id v24 = v18;
  id v42 = v24;
  id v25 = v13;
  id v43 = v25;
  id v44 = v12;
  id v45 = v11;
  uint64_t v46 = v20;
  uint64_t v26 = v20;
  id v27 = v11;
  id v28 = v12;
  v37[0] = _NSConcreteStackBlock;
  v37[1] = 3221225472LL;
  v37[2] = sub_100382918;
  v37[3] = &unk_1009027C8;
  id v39 = v25;
  __int16 v40 = objc_retainBlock(v41);
  id v38 = v24;
  uint64_t v29 = kIDSMessagingEntitlement;
  id v30 = v25;
  id v31 = v24;
  id v32 = v40;
  -[IDSDaemon enqueueBroadcast:forTopic:entitlement:command:capabilities:messageContext:]( self,  "enqueueBroadcast:forTopic:entitlement:command:capabilities:messageContext:",  v37,  v30,  v29,  0LL,  v33,  v14);
}

- (Class)_messageStoreClass
{
  return (Class)objc_opt_class(&OBJC_CLASS___IDSDMessageStore, a2);
}

- (void)_processIncomingRemoteResourceTransferMessage:(id)a3 forceDownload:(BOOL)a4 guid:(id)a5 context:(id)a6 specificOriginatorURI:(id)a7 broadcastTopic:(id)a8 toURI:(id)a9 topic:(id)a10 messageContext:(id)a11
{
  BOOL v15 = a4;
  id v68 = a3;
  id key = a5;
  id v65 = a6;
  id v61 = a7;
  id v62 = a8;
  id v64 = a9;
  id v69 = a10;
  id v63 = a11;
  uint64_t v16 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Received an IDS Payload for a Resource Tranfer over the Internet, looking at it",  buf,  2u);
  }

  if (os_log_shim_legacy_logging_enabled(v18) && _IDSShouldLog(0LL, @"IDSDaemon")) {
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Received an IDS Payload for a Resource Tranfer over the Internet, looking at it");
  }
  uint64_t v19 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v21 = objc_claimAutoreleasedReturnValue([v68 objectForKey:IDSIncomingMessageDecryptedDataKey]);
    uint64_t v22 = (void *)v21;
    id v23 = @"NO";
    if (v15) {
      id v23 = @"YES";
    }
    *(_DWORD *)__int128 buf = 138412546;
    uint64_t v93 = v23;
    __int16 v94 = 2112;
    uint64_t v95 = v21;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Force download? %@, Payload is %@", buf, 0x16u);
  }

  if ((os_log_shim_legacy_logging_enabled(v24) & 1) != 0)
  {
    int v25 = _IDSShouldLog(0LL, @"IDSDaemon");
    uint64_t v26 = IDSIncomingMessageDecryptedDataKey;
    if (v25)
    {
      if (v15) {
        id v27 = @"YES";
      }
      else {
        id v27 = @"NO";
      }
      uint64_t v53 = v27;
      uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue([v68 objectForKey:IDSIncomingMessageDecryptedDataKey]);
      _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon", @"Force download? %@, Payload is %@");
    }
  }

  else
  {
    uint64_t v26 = IDSIncomingMessageDecryptedDataKey;
  }

  id v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v68, "objectForKey:", v26, v53, v54));
  uint64_t v29 = JWDecodeDictionary(v28);
  id v30 = (__CFString *)objc_claimAutoreleasedReturnValue(v29);

  uint64_t v59 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString objectForKey:](v30, "objectForKey:", @"attach-meta"));
  id v31 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString objectForKey:](v30, "objectForKey:", @"attach-mmcs-dict"));
  uint64_t v66 = -[IDSServiceProperties initWithServiceIdentifier:]( objc_alloc(&OBJC_CLASS___IDSServiceProperties),  "initWithServiceIdentifier:",  v69);
  if (-[IDSServiceProperties wantsPendingResourceUpdates](v66, "wantsPendingResourceUpdates") && !v15)
  {
    id v32 = (void *)objc_claimAutoreleasedReturnValue([v31 _numberForKey:@"file-size"]);
    id v33 = [v32 integerValue];

    id v34 = [v65 mutableCopy];
    uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v33));
    [v34 setObject:v35 forKeyedSubscript:IDSMessageContextFileSize];

    if (!self->_pendingIncomingResources)
    {
      CFMutableDictionaryRef Mutable = (NSMutableDictionary *)CFDictionaryCreateMutable( 0LL,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
      pendingIncomingResources = self->_pendingIncomingResources;
      self->_pendingIncomingResources = Mutable;
    }

    id v38 = objc_alloc_init(&OBJC_CLASS___IDSPendingIncomingResourceTransfer);
    -[IDSPendingIncomingResourceTransfer setTopLevelPayload:](v38, "setTopLevelPayload:", v68);
    -[IDSPendingIncomingResourceTransfer setGuid:](v38, "setGuid:", key);
    -[IDSPendingIncomingResourceTransfer setContext:](v38, "setContext:", v65);
    -[IDSPendingIncomingResourceTransfer setSpecificOriginatorURI:](v38, "setSpecificOriginatorURI:", v61);
    -[IDSPendingIncomingResourceTransfer setBroadcastTopic:](v38, "setBroadcastTopic:", v62);
    -[IDSPendingIncomingResourceTransfer setToURI:](v38, "setToURI:", v64);
    -[IDSPendingIncomingResourceTransfer setTopic:](v38, "setTopic:", v69);
    -[IDSPendingIncomingResourceTransfer setMessageContext:](v38, "setMessageContext:", v63);
    if (v38) {
      CFDictionarySetValue((CFMutableDictionaryRef)self->_pendingIncomingResources, key, v38);
    }
    v85[0] = _NSConcreteStackBlock;
    v85[1] = 3221225472LL;
    v85[2] = sub_100383408;
    v85[3] = &unk_100902308;
    id v86 = v59;
    id v39 = key;
    id v87 = v39;
    id v40 = v62;
    id v88 = v40;
    id v89 = v64;
    id v90 = v61;
    id v91 = v34;
    id v58 = v34;
    __int128 v41 = objc_retainBlock(v85);
    v80[0] = _NSConcreteStackBlock;
    v80[1] = 3221225472LL;
    v80[2] = sub_10038341C;
    v80[3] = &unk_100902610;
    id v81 = v39;
    id v82 = v40;
    id v83 = v69;
    id v84 = v41;
    id v42 = v41;
    id v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 245LL));
    -[IDSDaemon enqueueBroadcast:forTopic:entitlement:command:capabilities:messageContext:]( self,  "enqueueBroadcast:forTopic:entitlement:command:capabilities:messageContext:",  v80,  v82,  kIDSMessagingEntitlement,  v43,  kIDSListenerCapConsumesLaunchOnDemandPendingResource,  v63);

    id v44 = v86;
    goto LABEL_31;
  }

  uint64_t v45 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v46 = (os_log_s *)objc_claimAutoreleasedReturnValue(v45);
  if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412290;
    uint64_t v93 = v30;
    _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "DictIS %@", buf, 0xCu);
  }

  if (v31)
  {
    id v38 = (IDSPendingIncomingResourceTransfer *)objc_claimAutoreleasedReturnValue([v31 _dataForKey:@"decryption-key"]);
    uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue([v31 _numberForKey:@"file-size"]);
    id v55 = [v48 integerValue];

    id v58 = (id)objc_claimAutoreleasedReturnValue([v31 _stringForKey:@"mmcs-signature-hex"]);
    id v42 = (void *)objc_claimAutoreleasedReturnValue([v31 _stringForKey:@"mmcs-url"]);
    id v44 = (void *)objc_claimAutoreleasedReturnValue([v31 _stringForKey:@"mmcs-owner"]);
    uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
    uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue([v49 _randomTemporaryPathWithSuffix:0]);

    uint64_t v51 = (void *)objc_claimAutoreleasedReturnValue(-[IDSServiceProperties dataUsageBundleID](v66, "dataUsageBundleID"));
    uint64_t v57 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon _IMTransferServiceController](self, "_IMTransferServiceController"));
    id v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringGUID](&OBJC_CLASS___NSString, "stringGUID"));
    BOOL v52 = (void *)objc_claimAutoreleasedReturnValue([v58 _FTDataFromHexString]);
    v70[0] = _NSConcreteStackBlock;
    v70[1] = 3221225472LL;
    v70[2] = sub_100383680;
    v70[3] = &unk_1009027F0;
    id v71 = key;
    uint64_t v72 = v30;
    id v73 = v65;
    id v74 = v62;
    id v75 = v64;
    id v76 = v61;
    uint64_t v77 = self;
    id v78 = v69;
    id v79 = v63;
    [v57 receiveFileTransfer:v56 topic:v74 path:v50 requestURLString:v42 ownerID:v44 sourceAppID:v51 signature:v52 decryptionKey:v38 fileSize:v55 progressBlock :0 completionBlock:v70];

LABEL_31:
  }
}

- (void)_handleIncomingPushNiceMessage:(id)a3 forTopic:(id)a4 fromURI:(id)a5 messageContext:(id)a6
{
  id v10 = a3;
  id v11 = a4;
  id v50 = a5;
  id v12 = a6;
  -[IDSDaemon _sendNiceMessageCheckpointIfNecessary:checkpoint:service:additionalInformation:]( self,  "_sendNiceMessageCheckpointIfNecessary:checkpoint:service:additionalInformation:",  v10,  9100LL,  v11,  0LL);
  id v13 = (void *)objc_claimAutoreleasedReturnValue([v10 storageFlags]);
  id v14 = (void *)objc_claimAutoreleasedReturnValue([v10 command]);
  unsigned __int8 v15 = [v13 unsignedIntValue];
  unsigned __int8 v16 = [v13 unsignedIntValue];
  if ((v16 & 1) != 0)
  {
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon serverStorageStateMachine](self, "serverStorageStateMachine"));
    [v17 recievedMessageFromStorageForTopic:v11];
  }

  unsigned int v18 = v15 & 2;
  if ((v15 & 2) != 0)
  {
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon serverStorageStateMachine](self, "serverStorageStateMachine"));
    [v19 recievedLastMessageFromStorageForTopic:v11];

    if ([v14 integerValue] == (id)255)
    {
      -[IDSDaemon _noteLastItemFromStorage:](self, "_noteLastItemFromStorage:", 0LL);
      goto LABEL_34;
    }

- (void)_storageTimerFired
{
  storageTimer = self->_storageTimer;
  self->_storageTimer = 0LL;

  uint64_t v4 = OSLogHandleForIDSCategory("IDSDaemon");
  double v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    messagesReceivedDuringStorage = self->_messagesReceivedDuringStorage;
    *(_DWORD *)os_activity_scope_state_s buf = 138412290;
    id v14 = messagesReceivedDuringStorage;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Storage timer fired, guids we need to process: %@",  buf,  0xCu);
  }

  if ((os_log_shim_legacy_logging_enabled(v7) & 1) != 0 && _IDSShouldLog(0LL, @"IDSDaemon")) {
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Storage timer fired, guids we need to process: %@");
  }
  id v8 = self->_messagesReceivedDuringStorage;
  id v9 = self->_messagesReceivedDuringStorage;
  self->_messagesReceivedDuringStorage = 0LL;

  if (-[IDSDaemon _isUnderFirstDataProtectionLock](self, "_isUnderFirstDataProtectionLock"))
  {
    uint64_t v10 = OSLogHandleForIDSCategory("IDSDaemon");
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)os_activity_scope_state_s buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "We're under first data protection lock. Holding messages and not sending to clients.",  buf,  2u);
    }

    if (os_log_shim_legacy_logging_enabled(v12) && _IDSShouldLog(0LL, @"IDSDaemon")) {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"We're under first data protection lock. Holding messages and not sending to clients.");
    }
  }

  else
  {
    -[IDSDaemon _processStoredIncomingRemoteMessagesWithGUIDs:ignoringGUIDs:lastTimeInterval:]( self,  "_processStoredIncomingRemoteMessagesWithGUIDs:ignoringGUIDs:lastTimeInterval:",  v8,  0LL,  0.0);
  }
}

- (void)_updateStorageTimerWithInterval:(double)a3
{
  if (a3 > 0.0)
  {
    uint64_t v5 = OSLogHandleForIDSCategory("IDSDaemon");
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)os_activity_scope_state_s buf = 134217984;
      double v18 = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Scheduling a storage invalidation timer in: %f",  buf,  0xCu);
    }

    storageTimer = self->_storageTimer;
    if (storageTimer)
    {
      -[IMDispatchTimer invalidate](storageTimer, "invalidate");
      id v9 = self->_storageTimer;
      self->_storageTimer = 0LL;
    }

    uint64_t v10 = objc_alloc(&OBJC_CLASS___IMDispatchTimer);
    uint64_t v12 = im_primary_queue(v10, v11);
    id v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    v16[2] = sub_100384B54;
    v16[3] = &unk_1008F8088;
    void v16[4] = self;
    id v14 = -[IMDispatchTimer initWithQueue:interval:repeats:handlerBlock:]( v10,  "initWithQueue:interval:repeats:handlerBlock:",  v13,  (unint64_t)a3,  0LL,  v16);
    unsigned __int8 v15 = self->_storageTimer;
    self->_storageTimer = v14;
  }

- (void)_noteItemFromStorage:(id)a3
{
  id v4 = a3;
  uint64_t v5 = OSLogHandleForIDSCategory("IDSDaemon");
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)os_activity_scope_state_s buf = 138412290;
    id v12 = v4;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Noting item from storage (%@)", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v7) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    id v10 = v4;
    _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon", @"Noting item from storage (%@)");
  }

  if (!self->_messagesReceivedDuringStorage)
  {
    id v8 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
    messagesReceivedDuringStorage = self->_messagesReceivedDuringStorage;
    self->_messagesReceivedDuringStorage = v8;
  }

  if (v4) {
    -[NSMutableSet addObject:](self->_messagesReceivedDuringStorage, "addObject:", v4);
  }
  -[IDSDaemon _updateStorageTimerWithInterval:](self, "_updateStorageTimerWithInterval:", 15.0, v10);
}

- (void)_noteLastItemFromStorage:(id)a3
{
  id v4 = a3;
  uint64_t v5 = OSLogHandleForIDSCategory("IDSDaemon");
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)os_activity_scope_state_s buf = 138412290;
    id v12 = v4;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Noting last item from storage (%@)", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v7) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    id v10 = v4;
    _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon", @"Noting last item from storage (%@)");
  }

  if (!self->_messagesReceivedDuringStorage)
  {
    id v8 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
    messagesReceivedDuringStorage = self->_messagesReceivedDuringStorage;
    self->_messagesReceivedDuringStorage = v8;
  }

  if (v4) {
    -[NSMutableSet addObject:](self->_messagesReceivedDuringStorage, "addObject:", v4);
  }
  -[IDSDaemon _updateStorageTimerWithInterval:](self, "_updateStorageTimerWithInterval:", 2.0, v10);
}

- (void)_restrictedMessageCleanupTimerFired
{
  unsigned __int8 v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
  [v3 timeIntervalSince1970];
  uint64_t v5 = v4;

  uint64_t v6 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)os_activity_scope_state_s buf = 134217984;
    uint64_t v15 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Restricted message cleanup timer fired at %f",  buf,  0xCu);
  }

  uint64_t v9 = os_log_shim_legacy_logging_enabled(v8);
  if ((_DWORD)v9)
  {
    uint64_t v9 = _IDSShouldLog(0LL, @"IDSDaemon");
    if ((_DWORD)v9) {
      uint64_t v9 = _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Restricted message cleanup timer fired at %f");
    }
  }

  uint64_t v11 = im_primary_queue(v9, v10);
  id v12 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v11);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100384F88;
  block[3] = &unk_1008F68C8;
  void block[5] = v5;
  void block[4] = self;
  dispatch_async(v12, block);
}

- (void)_setupRestrictedMessageCleanupTimer
{
  double v3 = (double)-[IDSDaemon _cleanupFrequencyForRestrictedMessages](self, "_cleanupFrequencyForRestrictedMessages");
  uint64_t v4 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)os_activity_scope_state_s buf = 134217984;
    double v17 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Scheduling a restricted message cleanup timer every %f sec",  buf,  0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v6) && _IDSShouldLog(0LL, @"IDSDaemon")) {
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Scheduling a restricted message cleanup timer every %f sec");
  }
  restrictedMessageCleanupTimer = self->_restrictedMessageCleanupTimer;
  if (restrictedMessageCleanupTimer)
  {
    -[IMDispatchTimer invalidate](restrictedMessageCleanupTimer, "invalidate");
    uint64_t v8 = self->_restrictedMessageCleanupTimer;
    self->_restrictedMessageCleanupTimer = 0LL;
  }

  uint64_t v9 = objc_alloc(&OBJC_CLASS___IMDispatchTimer);
  uint64_t v11 = im_primary_queue(v9, v10);
  id v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  v15[2] = sub_100385358;
  v15[3] = &unk_1008F8088;
  void v15[4] = self;
  id v13 = -[IMDispatchTimer initWithQueue:interval:repeats:handlerBlock:]( v9,  "initWithQueue:interval:repeats:handlerBlock:",  v12,  (unint64_t)v3,  1LL,  v15);
  storageTimer = self->_storageTimer;
  self->_storageTimer = v13;
}

- (BOOL)_isBulkingStorageMessagesForService:(id)a3
{
  if (!self->_storageTimer) {
    return 0;
  }
  id v4 = a3;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon serverStorageStateMachine](self, "serverStorageStateMachine"));
  unsigned __int8 v6 = [v5 inflightServerStorageStateMachineForTopic:v4];

  return v6;
}

- (void)networkStateChangedForLogTransportHint:(id)a3
{
  id v22 = a3;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v22 name]);
  unsigned int v5 = [v4 isEqualToString:IMNetworkChangedNotification];

  if (v5)
  {
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v22 userInfo]);
    unsigned __int8 v6 = (void *)objc_claimAutoreleasedReturnValue([v21 objectForKeyedSubscript:IMNetworkChangedNotificationNetworkAvailableKey]);
    unsigned int v7 = [v6 BOOLValue];

    if (v7)
    {
      __int128 v26 = 0u;
      __int128 v27 = 0u;
      __int128 v24 = 0u;
      __int128 v25 = 0u;
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon serviceController](self, "serviceController"));
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 allServices]);

      id v10 = [v9 countByEnumeratingWithState:&v24 objects:v30 count:16];
      if (v10)
      {
        uint64_t v11 = *(void *)v25;
        uint64_t v12 = kIDSMessagingEntitlement;
        uint64_t v13 = kIDSListenerCapConsumesLaunchOnDemandNetworkAvailableHint;
        do
        {
          for (i = 0LL; i != v10; i = (char *)i + 1)
          {
            if (*(void *)v25 != v11) {
              objc_enumerationMutation(v9);
            }
            uint64_t v15 = *(void **)(*((void *)&v24 + 1) + 8LL * (void)i);
            if ([v15 wantsNetworkAvailableHint])
            {
              uint64_t v16 = OSLogHandleForIDSCategory("IDSDaemon");
              double v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
              if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)os_activity_scope_state_s buf = 138412290;
                unsigned __int8 v29 = v15;
                _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Hinting service to check transport log {service: %@, reason: connected}",  buf,  0xCu);
              }

              if (os_log_shim_legacy_logging_enabled(v18)
                && _IDSShouldLog(0LL, @"IDSDaemon"))
              {
                uint64_t v20 = v15;
                _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Hinting service to check transport log {service: %@, reason: connected}");
              }

              v23[0] = _NSConcreteStackBlock;
              v23[1] = 3221225472LL;
              v23[2] = sub_1003856A8;
              v23[3] = &unk_100902840;
              v23[4] = v15;
              uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "pushTopic", v20));
              -[IDSDaemon enqueueBroadcast:forTopic:entitlement:command:capabilities:messageContext:]( self,  "enqueueBroadcast:forTopic:entitlement:command:capabilities:messageContext:",  v23,  v19,  v12,  0LL,  v13,  0LL);
            }
          }

          id v10 = [v9 countByEnumeratingWithState:&v24 objects:v30 count:16];
        }

        while (v10);
      }
    }
  }
}

- (void)handler:(id)a3 isConnectedChanged:(BOOL)a4
{
  BOOL v4 = a4;
  id v5 = a3;
  uint64_t v6 = OSLogHandleForIDSCategory("IDSDaemon");
  unsigned int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)os_activity_scope_state_s buf = 67109120;
    BOOL v10 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "IDSPushHandler signaled isConnected %d",  buf,  8u);
  }
}

- (void)handler:(id)a3 didReceiveMessage:(id)a4 forTopic:(id)a5 fromID:(id)a6 messageContext:(id)a7
{
  id v50 = a3;
  id v51 = a4;
  id v11 = a5;
  id v12 = a6;
  id v57 = a7;
  uint64_t v48 = v12;
  id v62 = v11;
  id v52 = (void *)objc_claimAutoreleasedReturnValue( +[IDSURI URIWithPrefixedURI:withServiceLoggingHint:]( &OBJC_CLASS___IDSURI,  "URIWithPrefixedURI:withServiceLoggingHint:",  v12,  v11));
  id v53 = [[IDSIncomingNiceMessage alloc] initWithMessageDictionary:v51 topic:v11];
  uint64_t v13 = OSLogHandleForIDSCategory("IDSDaemon");
  id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)os_activity_scope_state_s buf = 138413314;
    id v69 = v50;
    __int16 v70 = 2112;
    id v71 = v53;
    __int16 v72 = 2112;
    id v73 = v52;
    __int16 v74 = 2112;
    id v75 = v11;
    __int16 v76 = 2048;
    id v77 = v57;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "handler %@ didReceiveMessage: %@ fromURI: %@ forTopic: %@ context: %p",  buf,  0x34u);
  }

  if (os_log_shim_legacy_logging_enabled(v15) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    id v46 = v11;
    id v47 = v57;
    id v43 = v53;
    uint64_t v45 = v52;
    id v41 = v50;
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"handler %@ didReceiveMessage: %@ fromURI: %@ forTopic: %@ context: %p");
  }

  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v53, "messageList", v41, v43, v45, v46, v47));

  if (v16)
  {
    double v17 = (void *)objc_claimAutoreleasedReturnValue([v53 messageList]);
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "__imArrayByFilteringWithBlock:", &stru_100902860));

    uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue([v53 storageFlags]);
    unsigned __int8 v19 = [v49 unsignedIntValue];
    unsigned int v20 = [v49 unsignedIntValue];
    id v21 = [v18 count];
    id v61 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon _commands](self, "_commands"));
    uint64_t v22 = OSLogHandleForIDSCategory("IDSDaemon");
    unsigned int v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      id v24 = [v18 count];
      *(_DWORD *)os_activity_scope_state_s buf = 134217984;
      id v69 = v24;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "Given message list from server. Dissecting into %ld individual messages",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v25) && _IDSShouldLog(0LL, @"IDSDaemon"))
    {
      id v42 = [v18 count];
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Given message list from server. Dissecting into %ld individual messages");
    }

    __int128 v65 = 0u;
    __int128 v66 = 0u;
    __int128 v63 = 0u;
    __int128 v64 = 0u;
    id obj = v18;
    id v26 = [obj countByEnumeratingWithState:&v63 objects:v67 count:16];
    if (v26)
    {
      __int128 v27 = 0LL;
      uint64_t v60 = *(void *)v64;
      unsigned int v28 = v19 & 1;
      id key = (void *)IDSStorageFlagsKey;
      uint64_t v54 = 1LL - (void)v21;
      int v29 = (v20 >> 1) & 1;
      do
      {
        uint64_t v30 = 0LL;
        char v55 = v27;
        id v31 = &v27[v54];
        do
        {
          if (*(void *)v64 != v60) {
            objc_enumerationMutation(obj);
          }
          uint64_t v32 = (__CFDictionary *)objc_msgSend( *(id *)(*((void *)&v63 + 1) + 8 * (void)v30),  "mutableCopy",  v42,  v44);
          else {
            uint64_t v33 = v28;
          }
          id v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v33));
          if (v34) {
            CFDictionarySetValue(v32, key, v34);
          }
          id v35 = [[IDSIncomingNiceMessage alloc] initWithMessageDictionary:v32 topic:v62];
          uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([v35 command]);
          if ([v61 containsObject:v36])
          {
            id v37 = (void *)objc_claimAutoreleasedReturnValue([v35 fromURI]);
            -[IDSDaemon _handleIncomingPushNiceMessage:forTopic:fromURI:messageContext:]( self,  "_handleIncomingPushNiceMessage:forTopic:fromURI:messageContext:",  v35,  v62,  v37,  v57);
          }

          else
          {
            uint64_t v38 = OSLogHandleForIDSCategory("IDSDaemon");
            id v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);
            if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)os_activity_scope_state_s buf = 138412546;
              id v69 = v36;
              __int16 v70 = 2112;
              id v71 = v35;
              _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "Submessage command is not recognized -- dropping. {subMessageCommand: %@, subMessage: %@}",  buf,  0x16u);
            }

            if (os_log_shim_legacy_logging_enabled(v40)
              && _IDSShouldLog(0LL, @"IDSDaemon"))
            {
              id v42 = v36;
              id v44 = v35;
              _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Submessage command is not recognized -- dropping. {subMessageCommand: %@, subMessage: %@}");
            }
          }

          uint64_t v30 = (char *)v30 + 1;
        }

        while (v26 != v30);
        id v26 = [obj countByEnumeratingWithState:&v63 objects:v67 count:16];
        __int128 v27 = (char *)v30 + (void)v55;
      }

      while (v26);
    }
  }

  else
  {
    -[IDSDaemon _handleIncomingPushNiceMessage:forTopic:fromURI:messageContext:]( self,  "_handleIncomingPushNiceMessage:forTopic:fromURI:messageContext:",  v53,  v11,  v52,  v57);
  }
}

- (void)handler:(id)a3 receivedOfflineMessagePendingForTopic:(id)a4 messageContext:(id)a5
{
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  uint64_t v11 = OSLogHandleForIDSCategory("IDSDaemon");
  id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)os_activity_scope_state_s buf = 138412290;
    id v17 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "receivedOfflineMessagePendingForTopic: %@",  buf,  0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v13) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    id v15 = v9;
    _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon", @"receivedOfflineMessagePendingForTopic: %@");
  }

  -[IDSDaemon _updateStorageTimerWithInterval:](self, "_updateStorageTimerWithInterval:", 15.0, v15);
  id v14 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon serverStorageStateMachine](self, "serverStorageStateMachine"));
  [v14 incomingStorageRequestForTopic:v9 primary:1 messageContext:v10];
}

- (void)handler:(id)a3 receivedNoStorageResponseForTopic:(id)a4 identifier:(id)a5 messageContext:(id)a6
{
  id v8 = a6;
  id v9 = a4;
  id v10 = (id)objc_claimAutoreleasedReturnValue(-[IDSDaemon serverStorageStateMachine](self, "serverStorageStateMachine"));
  [v10 recievedNoStorageResponseForTopic:v9 messageContext:v8];
}

- (void)handler:(id)a3 didReceiveMessage:(id)a4 forUnknownTopic:(id)a5 messageContext:(id)a6
{
  id v21 = a4;
  uint64_t v7 = IDSUUIDKey;
  id v8 = a5;
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v21 objectForKey:v7]);
  uint64_t v11 = objc_opt_class(&OBJC_CLASS___NSString, v10);
  if ((objc_opt_isKindOfClass(v9, v11) & 1) != 0)
  {
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v21 objectForKey:v7]);
    uint64_t v13 = objc_claimAutoreleasedReturnValue(+[NSData _IDSDataFromBase64String:](&OBJC_CLASS___NSData, "_IDSDataFromBase64String:", v12));
  }

  else
  {
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v21 objectForKey:v7]);
    uint64_t v15 = objc_opt_class(&OBJC_CLASS___NSData, v14);
    if ((objc_opt_isKindOfClass(v12, v15) & 1) == 0)
    {
      uint64_t v19 = JWUUIDPushObjectToString(0LL);
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(v19);
      goto LABEL_7;
    }

    uint64_t v13 = objc_claimAutoreleasedReturnValue([v21 objectForKey:v7]);
  }

  uint64_t v16 = (void *)v13;
  uint64_t v17 = JWUUIDPushObjectToString(v13);
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(v17);

LABEL_7:
  id v20 = [[IDSMissingMessageMetric alloc] initWithReason:707 guid:v18 service:v8 additionalInformation:0];

  +[IDSMissingMessageMetricReporter sendMetric:](&OBJC_CLASS___IDSMissingMessageMetricReporter, "sendMetric:", v20);
}

- (id)_decryptAOverCMessage:(id)a3 topic:(id)a4 fromDeviceID:(id)a5 error:(id *)a6
{
  id v9 = a3;
  id v10 = a4;
  id v11 = a5;
  id v12 = (void *)objc_claimAutoreleasedReturnValue(+[IDSCurrentDevice sharedInstance](&OBJC_CLASS___IDSCurrentDevice, "sharedInstance"));
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 encryptionClassAKey]);

  if (v13)
  {
    id v21 = 0LL;
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[IDSEncryptionHelpers decryptLocalDeliveryPayload:forService:withDataProtectionClass:fromDevice:encryptionType:priority:error:]( &OBJC_CLASS___IDSEncryptionHelpers,  "decryptLocalDeliveryPayload:forService:withDataProtectionClass:fromDevice:encryptionType:priority:error:",  v9,  v10,  1LL,  v11,  1LL,  300LL,  &v21));
    id v15 = v21;
    if (v14)
    {
      id v16 = v14;
    }

    else
    {
      uint64_t v17 = OSLogHandleForIDSCategory("AOVERCEncryption");
      uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)os_activity_scope_state_s buf = 138412290;
        id v23 = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Encryption failed with error %@",  buf,  0xCu);
      }

      if (os_log_shim_legacy_logging_enabled(v19)
        && _IDSShouldLog(0LL, @"AOVERCEncryption"))
      {
        _IDSLogV(0LL, @"IDSFoundation", @"AOVERCEncryption", @"Encryption failed with error %@");
      }

      if (a6) {
        *a6 = v15;
      }
    }
  }

  else
  {
    uint64_t v14 = 0LL;
  }

  return v14;
}

- (void)deliveryController:(id)a3 didReceiveMessage:(id)a4 topic:(id)a5 command:(id)a6 deviceID:(id)a7 messageID:(id)a8
{
  id v14 = a3;
  id v15 = a4;
  id v16 = a5;
  id v17 = a6;
  id v18 = a7;
  id v19 = a8;
  uint64_t v20 = OSLogHandleForTransportCategory("IDSDaemon");
  id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)os_activity_scope_state_s buf = 134218498;
    id v37 = v15;
    __int16 v38 = 2112;
    id v39 = v16;
    __int16 v40 = 2112;
    id v41 = v17;
    _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Incoming message %p on service %@ command %@",  buf,  0x20u);
  }

  uint64_t v23 = os_log_shim_legacy_logging_enabled(v22);
  if ((_DWORD)v23)
  {
    uint64_t v23 = _IDSShouldLogTransport(v23);
    if ((_DWORD)v23)
    {
      _IDSLogTransport(@"IDSDaemon", @"IDS", @"Incoming message %p on service %@ command %@");
      uint64_t v23 = _IDSShouldLog(0LL, @"IDSDaemon");
      if ((_DWORD)v23) {
        uint64_t v23 = _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Incoming message %p on service %@ command %@");
      }
    }
  }

  uint64_t v25 = im_primary_queue(v23, v24);
  id v26 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v25);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1003866B0;
  block[3] = &unk_1008F8D18;
  void block[4] = self;
  id v32 = v16;
  id v33 = v17;
  id v34 = v15;
  id v35 = v18;
  id v27 = v18;
  id v28 = v15;
  id v29 = v17;
  id v30 = v16;
  dispatch_async(v26, block);
}

- (id)_incomingMessageStorageDictionaryForPayload:(id)a3 topic:(id)a4 deviceID:(id)a5 btUUID:(id)a6 command:(id)a7 messageUUID:(id)a8 sequenceNumber:(id)a9 wantsAppAck:(BOOL)a10 expectsPeerResponse:(BOOL)a11 peerResponseIdentifier:(id)a12
{
  id v31 = a3;
  id v17 = a4;
  id v32 = a5;
  id v18 = a6;
  id v19 = a7;
  id v20 = a8;
  id v21 = a9;
  id v22 = a12;
  if ([v17 length])
  {
    uint64_t v23 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    uint64_t v24 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    uint64_t v25 = (__CFDictionary *)v24;
    if (v20) {
      CFDictionarySetValue((CFMutableDictionaryRef)v24, IDSMessageContextOutgoingResponseIdentifierKey, v20);
    }
    if (v22) {
      CFDictionarySetValue(v25, IDSMessageContextIncomingResponseIdentifierKey, v22);
    }
    id v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a11));
    if (v26) {
      CFDictionarySetValue(v25, IDSMessageContextExpectsPeerResponseKey, v26);
    }

    if (a10) {
      CFDictionarySetValue(v25, IDSMessageContextWantsAppAckKey, &__kCFBooleanTrue);
    }
    if (v21) {
      CFDictionarySetValue(v25, IDSMessageContextSequenceNumberKey, v21);
    }
    if (v25) {
      CFDictionarySetValue((CFMutableDictionaryRef)v23, @"IDSIncomingLocalMessageContext", v25);
    }
    if (v31) {
      CFDictionarySetValue((CFMutableDictionaryRef)v23, @"IDSIncomingLocalMessagePayload", v31);
    }
    if (v17) {
      CFDictionarySetValue((CFMutableDictionaryRef)v23, @"IDSIncomingLocalMessageService", v17);
    }
    if (v32) {
      CFDictionarySetValue((CFMutableDictionaryRef)v23, @"IDSIncomingLocalMessageDeviceID", v32);
    }
    if (v18) {
      CFDictionarySetValue((CFMutableDictionaryRef)v23, @"IDSIncomingLocalMessageBTUUID", v18);
    }
    if (v19) {
      CFDictionarySetValue((CFMutableDictionaryRef)v23, @"IDSIncomingLocalMessageCommand", v19);
    }
  }

  else
  {
    uint64_t v27 = OSLogHandleForIDSCategory("Warning");
    id v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)os_activity_scope_state_s buf = 136315138;
      id v34 = "-[IDSDaemon(Messaging) _incomingMessageStorageDictionaryForPayload:topic:deviceID:btUUID:command:messageUUID"
            ":sequenceNumber:wantsAppAck:expectsPeerResponse:peerResponseIdentifier:]";
      _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_ERROR,  "%s: invalid topic for saving incoming message, ignoring!",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v29))
    {
      _IDSWarnV(@"IDSFoundation", @"%s: invalid topic for saving incoming message, ignoring!");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"%s: invalid topic for saving incoming message, ignoring!");
      _IDSLogTransport( @"Warning",  @"IDS",  @"%s: invalid topic for saving incoming message, ignoring!");
    }

    uint64_t v23 = 0LL;
  }

  return v23;
}

- (BOOL)_shouldStoreBeforeFirstUnlockIncomingLocalMessage:(id)a3 from:(id)a4 forTopic:(id)a5
{
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  id v11 = v10;
  if (v8 && [v10 length])
  {
    id v12 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon serviceController](self, "serviceController"));
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 serviceWithPushTopic:v11]);

    if (!sub_100351824( (char)[v13 shouldProtectTrafficUsingClassA],  (int)objc_msgSend(v13, "dataProtectionClass"),  v11)) {
      goto LABEL_11;
    }
    id v14 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPairingManager sharedInstance](&OBJC_CLASS___IDSPairingManager, "sharedInstance"));
    id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 pairedDeviceUniqueID]);
    unsigned __int8 v16 = +[IDSEncryptionHelpers areDataProtectionKeysAvailableForService:withDataProtectionClass:fromDevice:]( &OBJC_CLASS___IDSEncryptionHelpers,  "areDataProtectionKeysAvailableForService:withDataProtectionClass:fromDevice:",  v11,  1LL,  v15);

    if ((v16 & 1) != 0) {
      goto LABEL_11;
    }
    uint64_t v17 = OSLogHandleForIDSCategory("IDSDaemon");
    id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)os_activity_scope_state_s buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Incoming A over C message but keys are not available, sending to storage",  buf,  2u);
    }

    if (os_log_shim_legacy_logging_enabled(v19) && _IDSShouldLog(0LL, @"IDSDaemon")) {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Incoming A over C message but keys are not available, sending to storage");
    }
    if ([v13 dataProtectionClass])
    {
LABEL_11:
      BOOL v20 = 0;
    }

    else
    {
      uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon _messageStoreForDataProtectionClass:]( self,  "_messageStoreForDataProtectionClass:",  2LL));
      v27[0] = _NSConcreteStackBlock;
      v27[1] = 3221225472LL;
      v27[2] = sub_10038700C;
      v27[3] = &unk_100902888;
      id v28 = v11;
      LOBYTE(v26) = 0;
      [v25 storeIncomingMessage:v8 forTopic:v28 fromID:v9 messageUUID:0 messagePayload:0 isLocal:1 dedupBehavior:v26 completionBlock:v27];

      BOOL v20 = 1;
    }
  }

  else
  {
    uint64_t v21 = OSLogHandleForIDSCategory("Warning");
    id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)os_activity_scope_state_s buf = 136315138;
      id v30 = "-[IDSDaemon(Messaging) _shouldStoreBeforeFirstUnlockIncomingLocalMessage:from:forTopic:]";
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_ERROR,  "%s: invalid parameters for saving incoming message, ignoring!",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v23))
    {
      _IDSWarnV(@"IDSFoundation", @"%s: invalid parameters for saving incoming message, ignoring!");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"%s: invalid parameters for saving incoming message, ignoring!");
      _IDSLogTransport( @"Warning",  @"IDS",  @"%s: invalid parameters for saving incoming message, ignoring!");
    }

    BOOL v20 = 0;
  }

  return v20;
}

- (void)deliveryController:(id)a3 protobufReceived:(id)a4 topic:(id)a5 command:(id)a6 deviceID:(id)a7 btUUID:(id)a8 messageID:(id)a9 wantsAppAck:(BOOL)a10 expectsPeerResponse:(BOOL)a11 peerResponseIdentifier:(id)a12 messageUUID:(id)a13 priority:(int64_t)a14 isCompressed:(BOOL)a15 connectionType:(int64_t)a16 didWakeHint:(BOOL)a17
{
  id v56 = a3;
  id v59 = a4;
  id v23 = a5;
  id v60 = a6;
  id v24 = a7;
  id v58 = a8;
  id v25 = a9;
  id v57 = a12;
  id v26 = a13;
  uint64_t v27 = OSLogHandleForTransportCategory("IDSDaemon");
  id v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)os_activity_scope_state_s buf = 134218498;
    id v81 = v59;
    __int16 v82 = 2112;
    id v83 = v23;
    __int16 v84 = 2112;
    id v85 = v60;
    _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "Incoming protobuf %p on service %@ command %@",  buf,  0x20u);
  }

  uint64_t v30 = os_log_shim_legacy_logging_enabled(v29);
  if ((_DWORD)v30)
  {
    if (_IDSShouldLogTransport(v30))
    {
      id v53 = v23;
      id v55 = v60;
      id v52 = v59;
      _IDSLogTransport(@"IDSDaemon", @"IDS", @"Incoming protobuf %p on service %@ command %@");
      if (_IDSShouldLog(0LL, @"IDSDaemon"))
      {
        id v53 = v23;
        id v55 = v60;
        id v52 = v59;
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Incoming protobuf %p on service %@ command %@");
      }
    }
  }

  if (-[IDSDaemon _checkIfDupeAndNoteGuid:local:topic:]( self,  "_checkIfDupeAndNoteGuid:local:topic:",  v26,  1LL,  v23,  v52,  v53,  v55))
  {
    uint64_t v31 = OSLogHandleForIDSCategory("IDSDaemon");
    id v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)os_activity_scope_state_s buf = 138412290;
      id v81 = v26;
      _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "Received local protobuf %@ is a duplicate. Ignoring.",  buf,  0xCu);
    }

    uint64_t v34 = os_log_shim_legacy_logging_enabled(v33);
    if ((_DWORD)v34)
    {
      uint64_t v34 = _IDSShouldLog(0LL, @"IDSDaemon");
      if ((_DWORD)v34) {
        uint64_t v34 = _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Received local protobuf %@ is a duplicate. Ignoring.");
      }
    }

    uint64_t v36 = im_primary_queue(v34, v35);
    id v37 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v36);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1003876A4;
    block[3] = &unk_100902450;
    void block[4] = self;
    id v74 = v23;
    id v75 = v25;
    id v76 = v24;
    int64_t v78 = a14;
    int64_t v79 = a16;
    id v77 = v26;
    id v38 = v26;
    id v39 = v24;
    id v40 = v25;
    id v41 = v23;
    dispatch_block_t v42 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, block);
    dispatch_async(v37, v42);
  }

  else
  {
    id v43 = (void *)objc_claimAutoreleasedReturnValue([v59 dictionaryRepresentation]);
    LOWORD(v54) = __PAIR16__(a11, a10);
    id v44 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon _incomingMessageStorageDictionaryForPayload:topic:deviceID:btUUID:command:messageUUID:sequenceNumber:wantsAppAck:expectsPeerResponse:peerResponseIdentifier:]( self,  "_incomingMessageStorageDictionaryForPayload:topic:deviceID:btUUID:command:messageUUID:sequenceNumb er:wantsAppAck:expectsPeerResponse:peerResponseIdentifier:",  v43,  v23,  v24,  v58,  v60,  v26,  v25,  v54,  v57));

    uint64_t v47 = im_primary_queue(v45, v46);
    uint64_t v48 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v47);
    v61[0] = _NSConcreteStackBlock;
    v61[1] = 3221225472LL;
    v61[2] = sub_100387740;
    v61[3] = &unk_1009028B0;
    v61[4] = self;
    id v62 = v23;
    id v63 = v44;
    id v64 = v58;
    id v65 = v25;
    int64_t v70 = a14;
    int64_t v71 = a16;
    id v66 = v24;
    id v67 = v26;
    id v68 = v59;
    id v69 = v60;
    BOOL v72 = a17;
    id v49 = v26;
    id v38 = v24;
    id v39 = v25;
    id v40 = v44;
    id v50 = v23;
    dispatch_block_t v51 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, v61);
    dispatch_async(v48, v51);
  }
}

- (void)deliveryController:(id)a3 dataReceived:(id)a4 topic:(id)a5 command:(id)a6 deviceID:(id)a7 btUUID:(id)a8 messageID:(id)a9 wantsAppAck:(BOOL)a10 expectsPeerResponse:(BOOL)a11 peerResponseIdentifier:(id)a12 messageUUID:(id)a13 priority:(int64_t)a14 isCompressed:(BOOL)a15 connectionType:(int64_t)a16 didWakeHint:(BOOL)a17
{
  id v54 = a3;
  id v57 = a4;
  id v23 = a5;
  id v58 = a6;
  id v24 = a7;
  id v56 = a8;
  id v25 = a9;
  id v55 = a12;
  id v26 = a13;
  uint64_t v27 = OSLogHandleForTransportCategory("IDSDaemon");
  id v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)os_activity_scope_state_s buf = 134218498;
    id v79 = v57;
    __int16 v80 = 2112;
    id v81 = v23;
    __int16 v82 = 2112;
    id v83 = v58;
    _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "Incoming data %p on service %@ command %@",  buf,  0x20u);
  }

  uint64_t v30 = os_log_shim_legacy_logging_enabled(v29);
  if ((_DWORD)v30)
  {
    if (_IDSShouldLogTransport(v30))
    {
      id v51 = v23;
      id v53 = v58;
      id v50 = v57;
      _IDSLogTransport(@"IDSDaemon", @"IDS", @"Incoming data %p on service %@ command %@");
      if (_IDSShouldLog(0LL, @"IDSDaemon"))
      {
        id v51 = v23;
        id v53 = v58;
        id v50 = v57;
        _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon", @"Incoming data %p on service %@ command %@");
      }
    }
  }

  if (-[IDSDaemon _checkIfDupeAndNoteGuid:local:topic:]( self,  "_checkIfDupeAndNoteGuid:local:topic:",  v26,  1LL,  v23,  v50,  v51,  v53))
  {
    uint64_t v31 = OSLogHandleForIDSCategory("IDSDaemon");
    id v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)os_activity_scope_state_s buf = 138412290;
      id v79 = v26;
      _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "Received local data %@ is a duplicate. Ignoring.",  buf,  0xCu);
    }

    uint64_t v34 = os_log_shim_legacy_logging_enabled(v33);
    if ((_DWORD)v34)
    {
      uint64_t v34 = _IDSShouldLog(0LL, @"IDSDaemon");
      if ((_DWORD)v34) {
        uint64_t v34 = _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Received local data %@ is a duplicate. Ignoring.");
      }
    }

    uint64_t v36 = im_primary_queue(v34, v35);
    id v37 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v36);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100388088;
    block[3] = &unk_100902450;
    void block[4] = self;
    id v72 = v23;
    id v73 = v25;
    id v74 = v24;
    int64_t v76 = a14;
    int64_t v77 = a16;
    id v75 = v26;
    id v38 = v26;
    id v39 = v24;
    id v40 = v25;
    id v41 = v23;
    dispatch_block_t v42 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, block);
    dispatch_async(v37, v42);
  }

  else
  {
    LOWORD(v52) = __PAIR16__(a11, a10);
    id v43 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon _incomingMessageStorageDictionaryForPayload:topic:deviceID:btUUID:command:messageUUID:sequenceNumber:wantsAppAck:expectsPeerResponse:peerResponseIdentifier:]( self,  "_incomingMessageStorageDictionaryForPayload:topic:deviceID:btUUID:command:messageUUID:sequenceNumb er:wantsAppAck:expectsPeerResponse:peerResponseIdentifier:",  v57,  v23,  v24,  v56,  v58,  v26,  v25,  v52,  v55));
    uint64_t v45 = im_primary_queue(v43, v44);
    uint64_t v46 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v45);
    v59[0] = _NSConcreteStackBlock;
    v59[1] = 3221225472LL;
    v59[2] = sub_100388124;
    v59[3] = &unk_1009028B0;
    v59[4] = self;
    id v60 = v23;
    id v61 = v43;
    id v62 = v56;
    id v63 = v25;
    int64_t v68 = a14;
    int64_t v69 = a16;
    id v64 = v24;
    id v65 = v26;
    id v66 = v57;
    id v67 = v58;
    BOOL v70 = a17;
    id v47 = v26;
    id v38 = v24;
    id v39 = v25;
    id v40 = v43;
    id v48 = v23;
    dispatch_block_t v49 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, v59);
    dispatch_async(v46, v49);
  }
}

- (void)deliveryController:(id)a3 messageReceived:(id)a4 topic:(id)a5 command:(id)a6 deviceID:(id)a7 btUUID:(id)a8 messageID:(id)a9 wantsAppAck:(BOOL)a10 expectsPeerResponse:(BOOL)a11 peerResponseIdentifier:(id)a12 messageUUID:(id)a13 priority:(int64_t)a14 isCompressed:(BOOL)a15 connectionType:(int64_t)a16 didWakeHint:(BOOL)a17
{
  id v59 = a3;
  id v62 = a4;
  id v23 = a5;
  id v24 = a6;
  id v25 = a7;
  id v60 = a8;
  id v61 = a9;
  id v26 = a12;
  id v63 = a13;
  uint64_t v27 = OSLogHandleForTransportCategory("IDSDaemon");
  id v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)os_activity_scope_state_s buf = 134218498;
    id v84 = v62;
    __int16 v85 = 2112;
    id v86 = v23;
    __int16 v87 = 2112;
    id v88 = v24;
    _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "Incoming message %p on service %@ command %@",  buf,  0x20u);
  }

  uint64_t v30 = os_log_shim_legacy_logging_enabled(v29);
  if ((_DWORD)v30)
  {
    if (_IDSShouldLogTransport(v30))
    {
      id v57 = v23;
      id v58 = v24;
      id v56 = v62;
      _IDSLogTransport(@"IDSDaemon", @"IDS", @"Incoming message %p on service %@ command %@");
      if (_IDSShouldLog(0LL, @"IDSDaemon"))
      {
        id v57 = v23;
        id v58 = v24;
        id v56 = v62;
        _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon", @"Incoming message %p on service %@ command %@");
      }
    }
  }

  BOOL v31 = -[IDSDaemon _checkIfDupeAndNoteGuid:local:topic:forceNoteGuid:]( self,  "_checkIfDupeAndNoteGuid:local:topic:forceNoteGuid:",  v63,  1,  v23,  +[IDSDaemon _commandIsSessionCommand:]( IDSDaemon,  "_commandIsSessionCommand:",  objc_msgSend(v24, "integerValue", v56, v57, v58)));
  if (v31)
  {
    uint64_t v33 = OSLogHandleForIDSCategory("IDSDaemon");
    uint64_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)os_activity_scope_state_s buf = 138412290;
      id v84 = v63;
      _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "Received local message %@ is a duplicate. Ignoring.",  buf,  0xCu);
    }

    uint64_t v36 = os_log_shim_legacy_logging_enabled(v35);
    if ((_DWORD)v36)
    {
      uint64_t v36 = _IDSShouldLog(0LL, @"IDSDaemon");
      if ((_DWORD)v36) {
        uint64_t v36 = _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Received local message %@ is a duplicate. Ignoring.");
      }
    }

    uint64_t v38 = im_primary_queue(v36, v37);
    id v39 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v38);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100388A84;
    block[3] = &unk_100902450;
    void block[4] = self;
    id v79 = v23;
    id v80 = v61;
    id v81 = v25;
    v82[1] = a14;
    v82[2] = a16;
    v82[0] = v63;
    id v40 = v61;
    id v41 = v63;
    id v42 = v25;
    id v43 = v23;
    dispatch_block_t v44 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, block);
    dispatch_async(v39, v44);

    uint64_t v45 = &v79;
    uint64_t v46 = &v80;
    id v47 = &v81;
    id v48 = (id *)v82;
  }

  else
  {
    uint64_t v49 = im_primary_queue(v31, v32);
    id v50 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v49);
    v64[0] = _NSConcreteStackBlock;
    v64[1] = 3221225472LL;
    v64[2] = sub_100388B20;
    v64[3] = &unk_1009028D8;
    void v64[4] = self;
    id v65 = v23;
    id v66 = v60;
    id v67 = v25;
    id v68 = v62;
    int64_t v69 = (dispatch_queue_s *)v24;
    id v70 = v63;
    id v71 = v61;
    BOOL v75 = a10;
    BOOL v76 = a11;
    id v72 = v26;
    int64_t v73 = a14;
    int64_t v74 = a16;
    BOOL v77 = a17;
    id v51 = v61;
    id v52 = v63;
    id v53 = v25;
    id v54 = v23;
    dispatch_block_t v55 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, v64);
    dispatch_async(v50, v55);

    uint64_t v45 = &v65;
    uint64_t v46 = &v66;
    id v47 = &v67;
    id v48 = &v68;
    id v39 = v69;
  }
}

- (void)deliveryController:(id)a3 receivedAppLevelAckWithTopic:(id)a4 deviceID:(id)a5 btUUID:(id)a6 messageID:(id)a7 peerResponseIdentifier:(id)a8 priority:(int64_t)a9 connectionType:(int64_t)a10
{
  id v34 = a3;
  id v16 = a4;
  id v17 = a5;
  id v18 = a6;
  id v19 = a7;
  id v20 = a8;
  uint64_t v21 = OSLogHandleForTransportCategory("IDSDaemon");
  id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)os_activity_scope_state_s buf = 138412290;
    id v44 = v16;
    _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "Incoming app level ack on service %@",  buf,  0xCu);
  }

  uint64_t v24 = os_log_shim_legacy_logging_enabled(v23);
  if ((_DWORD)v24)
  {
    if (_IDSShouldLogTransport(v24))
    {
      _IDSLogTransport(@"IDSDaemon", @"IDS", @"Incoming app level ack on service %@");
    }
  }

  LOWORD(v33) = 0;
  id v25 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon _incomingMessageStorageDictionaryForPayload:topic:deviceID:btUUID:command:messageUUID:sequenceNumber:wantsAppAck:expectsPeerResponse:peerResponseIdentifier:]( self,  "_incomingMessageStorageDictionaryForPayload:topic:deviceID:btUUID:command:messageUUID:sequenceNumber :wantsAppAck:expectsPeerResponse:peerResponseIdentifier:",  0LL,  v16,  v17,  v18,  &off_100947DA0,  v20,  v19,  v33,  v20));
  uint64_t v27 = im_primary_queue(v25, v26);
  id v28 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v27);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1003893FC;
  block[3] = &unk_100902900;
  void block[4] = self;
  id v36 = v25;
  id v37 = v18;
  id v38 = v16;
  id v39 = &off_100947DA0;
  id v40 = v17;
  int64_t v41 = a9;
  int64_t v42 = a10;
  id v29 = v17;
  id v30 = v16;
  id v31 = v18;
  id v32 = v25;
  dispatch_async(v28, block);
}

- (void)cancelItemWithIdentifier:(id)a3 service:(id)a4 messageContext:(id)a5
{
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  uint64_t v11 = OSLogHandleForIDSCategory("IDSDaemon");
  id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v10 localObject]);
    *(_DWORD *)os_activity_scope_state_s buf = 138412546;
    id v21 = v8;
    __int16 v22 = 2048;
    uint64_t v23 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Received cancel request for message %@ from localObject %p",  buf,  0x16u);
  }

  if (os_log_shim_legacy_logging_enabled(v14) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    id v18 = v8;
    id v19 = (void *)objc_claimAutoreleasedReturnValue([v10 localObject]);
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Received cancel request for message %@ from localObject %p");
  }

  id v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "localObject", v18, v19));
  unsigned int v16 = -[IDSDaemon validateListenerForLocalObject:andCheckEntitlement:forAccessToServiceWithIdentifier:]( self,  "validateListenerForLocalObject:andCheckEntitlement:forAccessToServiceWithIdentifier:",  v15,  kIDSMessagingEntitlement,  v9);

  if (v16 && [v8 length])
  {
    +[IDSDMessageStore deleteOutgoingMessageWithGUID:alternateGUID:]( &OBJC_CLASS___IDSDMessageStore,  "deleteOutgoingMessageWithGUID:alternateGUID:",  v8,  0LL);
    id v17 = (void *)objc_claimAutoreleasedReturnValue( +[IDSUTunDeliveryController sharedInstance]( &OBJC_CLASS___IDSUTunDeliveryController,  "sharedInstance"));
    [v17 cancelMessageID:v8];
  }
}

- (void)downloadPendingResourceWithMessageGUID:(id)a3 messageContext:(id)a4
{
  id v13 = (id)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](self->_pendingIncomingResources, "objectForKey:", a3, a4));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v13 topLevelPayload]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v13 guid]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v13 context]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v13 specificOriginatorURI]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v13 broadcastTopic]);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v13 toURI]);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v13 topic]);
  id v12 = (void *)objc_claimAutoreleasedReturnValue([v13 messageContext]);
  -[IDSDaemon _processIncomingRemoteResourceTransferMessage:forceDownload:guid:context:specificOriginatorURI:broadcastTopic:toURI:topic:messageContext:]( self,  "_processIncomingRemoteResourceTransferMessage:forceDownload:guid:context:specificOriginatorURI:broadcastTopic:toURI: topic:messageContext:",  v5,  1LL,  v6,  v7,  v8,  v9,  v10,  v11,  v12);
}

- (void)deletePendingResourceWithMessageGUID:(id)a3 messageContext:(id)a4
{
  id v5 = a3;
  id v7 = v5;
  if (v5)
  {
    pendingIncomingResources = self->_pendingIncomingResources;
    if (pendingIncomingResources)
    {
      CFDictionaryRemoveValue((CFMutableDictionaryRef)pendingIncomingResources, v5);
      id v5 = v7;
    }
  }

  +[IDSDMessageStore deleteIncomingMessageWithGUID:]( &OBJC_CLASS___IDSDMessageStore,  "deleteIncomingMessageWithGUID:",  v5);
}

- (void)getProgressUpdateForIdentifier:(id)a3 service:(id)a4 messageContext:(id)a5
{
  id v32 = a3;
  id v30 = a4;
  id v35 = a5;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v35 localObject]);
  LODWORD(a4) = -[IDSDaemon validateListenerForLocalObject:andCheckEntitlement:forAccessToServiceWithIdentifier:]( self,  "validateListenerForLocalObject:andCheckEntitlement:forAccessToServiceWithIdentifier:",  v7,  kIDSMessagingEntitlement,  v30);

  if ((_DWORD)a4 && [v32 length])
  {
    __int128 v38 = 0u;
    __int128 v39 = 0u;
    __int128 v36 = 0u;
    __int128 v37 = 0u;
    id obj = (id)objc_claimAutoreleasedReturnValue( +[IDSDMessageStore allOutgoingMessagesByGUID:]( &OBJC_CLASS___IDSDMessageStore,  "allOutgoingMessagesByGUID:",  v32));
    id v8 = [obj countByEnumeratingWithState:&v36 objects:v46 count:16];
    if (v8)
    {
      uint64_t v34 = *(void *)v37;
      do
      {
        for (i = 0LL; i != v8; i = (char *)i + 1)
        {
          if (*(void *)v37 != v34) {
            objc_enumerationMutation(obj);
          }
          id v10 = *(void **)(*((void *)&v36 + 1) + 8LL * (void)i);
          id v11 = [v10 copySendParameters];
          [v11 setWantsProgress:1];
          if ([v10 sent])
          {
            id v12 = (void *)objc_claimAutoreleasedReturnValue( +[IDSUTunDeliveryController sharedInstance]( &OBJC_CLASS___IDSUTunDeliveryController,  "sharedInstance"));
            [v12 kickProgressBlockForMessageID:v32];
          }

          else
          {
            id v13 = (void *)objc_claimAutoreleasedReturnValue([v35 localObject]);
            id v12 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon broadcasterForLocalObject:messageContext:]( self,  "broadcasterForLocalObject:messageContext:",  v13,  v35));

            if (v12)
            {
              uint64_t v14 = objc_alloc_init(&OBJC_CLASS___IDSDeliveryContext);
              -[IDSDeliveryContext setIdsResponseCode:](v14, "setIdsResponseCode:", 0LL);
              -[IDSDeliveryContext setLastCall:](v14, "setLastCall:", 0LL);
              id v15 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
              uint64_t v16 = OSLogHandleForIDSCategory("IDSDaemon");
              id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
              if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
              {
                id v18 = (id)objc_claimAutoreleasedReturnValue([v11 identifier]);
                id v19 = -[IDSDeliveryContext idsResponseCode](v14, "idsResponseCode");
                id v20 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDeliveryContext responseError](v14, "responseError"));
                *(_DWORD *)os_activity_scope_state_s buf = 138412802;
                id v41 = v18;
                __int16 v42 = 2048;
                id v43 = v19;
                __int16 v44 = 2112;
                uint64_t v45 = v20;
                _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Sending not started update to listener on %@ with responseCode %ld error %@ - 0/0 bytes",  buf,  0x20u);
              }

              if (os_log_shim_legacy_logging_enabled(v21)
                && _IDSShouldLog(0LL, @"IDSDaemon"))
              {
                __int16 v22 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue([v11 identifier]);
                id v28 = -[IDSDeliveryContext idsResponseCode](v14, "idsResponseCode");
                id v29 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDeliveryContext responseError](v14, "responseError"));
                uint64_t v27 = v22;
                _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Sending not started update to listener on %@ with responseCode %ld error %@ - 0/0 bytes");
              }

              uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "identifier", v27, v28, v29));
              uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v11 alternateCallbackID]);
              id v25 = (void *)objc_claimAutoreleasedReturnValue([v11 mainAccountUUID]);
              uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDeliveryContext responseError](v14, "responseError"));
              uint64_t v27 = v15;
              [v12 messageIdentifier:v23 alternateCallbackID:v24 forAccount:v25 updatedWithResponseCode:0 error:v26 lastCall:-[IDSDeliveryContext lastCall](v14 context:"lastCall")];
            }
          }
        }

        id v8 = [obj countByEnumeratingWithState:&v36 objects:v46 count:16];
      }

      while (v8);
    }
  }
}

+ (id)progressBlockForSendParameters:(id)a3 messageContext:(id)a4 topic:(id)a5 forObject:(id)a6
{
  id v9 = a3;
  id v10 = a4;
  id v11 = a5;
  id v12 = a6;
  if ([v9 wantsProgress])
  {
    v30[0] = 0LL;
    v30[1] = v30;
    v30[2] = 0x2020000000LL;
    void v30[3] = -1LL;
    v29[0] = 0LL;
    v29[1] = v29;
    v29[2] = 0x2020000000LL;
    v29[3] = -1LL;
    v27[0] = 0LL;
    v27[1] = v27;
    v27[2] = 0x3032000000LL;
    v27[3] = sub_100356518;
    void v27[4] = sub_100356528;
    id v28 = (id)0xAAAAAAAAAAAAAAAALL;
    id v28 = (id)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    v25[0] = 0LL;
    v25[1] = v25;
    v25[2] = 0x3032000000LL;
    v25[3] = sub_100356518;
    void v25[4] = sub_100356528;
    id v26 = 0LL;
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    v16[2] = sub_100389E74;
    v16[3] = &unk_100902928;
    uint64_t v21 = v25;
    __int16 v22 = v30;
    uint64_t v23 = v29;
    uint64_t v24 = v27;
    id v17 = v9;
    id v18 = v10;
    id v19 = v12;
    id v20 = v11;
    id v13 = objc_retainBlock(v16);

    _Block_object_dispose(v25, 8);
    _Block_object_dispose(v27, 8);

    _Block_object_dispose(v29, 8);
    _Block_object_dispose(v30, 8);
  }

  else
  {
    id v13 = 0LL;
  }

  uint64_t v14 = objc_retainBlock(v13);

  return v14;
}

- (void)_ackMessageWithSequenceNumber:(unsigned int)a3 forDeviceID:(id)a4 priority:(int64_t)a5 dataProtectionClass:(unsigned int)a6 connectionType:(int64_t)a7 guid:(id)a8
{
  uint64_t v10 = *(void *)&a6;
  uint64_t v12 = *(void *)&a3;
  id v14 = a4;
  id v15 = a8;
  if (a5 == 100 || a5 == 200 || a5 == 300)
  {
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon uTunDeliveryController](self, "uTunDeliveryController"));
    id v17 = [v16 copyPeerWithID:v14];

    if ([v17 sendAckForMessageWithSequenceNumber:v12 priority:a5 dataProtectionClass:v10 connectionType:a7])
    {
      -[IDSDaemon _addIncomingGUIDsWithGuid:isLocal:hasLock:]( self,  "_addIncomingGUIDsWithGuid:isLocal:hasLock:",  v15,  1LL,  0LL);
    }

    else
    {
      uint64_t v18 = OSLogHandleForIDSCategory("Warning");
      id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)os_activity_scope_state_s buf = 67109634;
        int v25 = v12;
        __int16 v26 = 2112;
        id v27 = v17;
        __int16 v28 = 2048;
        int64_t v29 = a5;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "Please file a radar! Could not ack message with sequence number %u for peer %@ priority %ld\n",  buf,  0x1Cu);
      }

      if (os_log_shim_legacy_logging_enabled(v20))
      {
        _IDSWarnV( @"IDSFoundation",  @"Please file a radar! Could not ack message with sequence number %u for peer %@ priority %ld\n");
        _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"Please file a radar! Could not ack message with sequence number %u for peer %@ priority %ld\n");
        _IDSLogTransport( @"Warning",  @"IDS",  @"Please file a radar! Could not ack message with sequence number %u for peer %@ priority %ld\n");
      }
    }
  }

  else
  {
    uint64_t v21 = OSLogHandleForIDSCategory("IDSDaemon");
    __int16 v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)os_activity_scope_state_s buf = 67109120;
      int v25 = a5;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "Cannot ack message locally without proper priority value (%d)",  buf,  8u);
    }

    if (os_log_shim_legacy_logging_enabled(v23) && _IDSShouldLog(0LL, @"IDSDaemon")) {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Cannot ack message locally without proper priority value (%d)");
    }
  }
}

- (void)_addIncomingGUIDsWithGuid:(id)a3 isLocal:(BOOL)a4 hasLock:(BOOL)a5
{
  BOOL v6 = a4;
  id v15 = a3;
  if (!a5) {
    pthread_mutex_lock(&self->_localIncomingGUIDsLock);
  }
  id v8 = &OBJC_IVAR___IDSDaemon__remoteIncomingGUIDs;
  if (v6) {
    id v8 = &OBJC_IVAR___IDSDaemon__localIncomingGUIDs;
  }
  uint64_t v9 = *v8;
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)((char *)&self->super.isa + v9) first]);
  id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)((char *)&self->super.isa + v9) second]);
  if (([v10 containsObject:v15] & 1) == 0
    && ([v11 containsObject:v15] & 1) == 0)
  {
    if (v10 && (unint64_t)[v10 count] < 0x1F4)
    {
      [v10 addObject:v15];
      if (a5) {
        goto LABEL_12;
      }
      goto LABEL_11;
    }

    uint64_t v12 = -[NSMutableSet initWithObjects:](objc_alloc(&OBJC_CLASS___NSMutableSet), "initWithObjects:", v15, 0LL);
    id v13 = -[IMPair initWithFirst:second:](objc_alloc(&OBJC_CLASS___IMPair), "initWithFirst:second:", v12, v10);
    id v14 = *(Class *)((char *)&self->super.isa + v9);
    *(Class *)((char *)&self->super.isa + v9) = (Class)v13;
  }

  if (!a5) {
LABEL_11:
  }
    pthread_mutex_unlock(&self->_localIncomingGUIDsLock);
LABEL_12:
}

- (void)acknowledgeOutgoingMessageWithGUID:(id)a3 alternateCallbackID:(id)a4 forAccountWithUniqueID:(id)a5 messageContext:(id)a6
{
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  id v13 = a6;
  uint64_t v14 = OSLogHandleForIDSCategory("IDSDaemon");
  id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v13 localObject]);
    *(_DWORD *)os_activity_scope_state_s buf = 138412802;
    id v24 = v10;
    __int16 v25 = 2112;
    id v26 = v11;
    __int16 v27 = 2048;
    __int16 v28 = v16;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Received acknowledgement for outgoing message %@ alternateCallbackID %@ from localObject %p",  buf,  0x20u);
  }

  if (os_log_shim_legacy_logging_enabled(v17) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    id v21 = v11;
    __int16 v22 = (void *)objc_claimAutoreleasedReturnValue([v13 localObject]);
    id v20 = v10;
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Received acknowledgement for outgoing message %@ alternateCallbackID %@ from localObject %p");
  }

  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "localObject", v20, v21, v22));
  id v19 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon accountWithIdentifier:localObject:requiredEntitlement:]( self,  "accountWithIdentifier:localObject:requiredEntitlement:",  v12,  v18,  kIDSMessagingEntitlement));
}

- (void)acknowledgeMessageWithStorageGUID:(id)a3 realGUID:(id)a4 forAccountWithUniqueID:(id)a5 broadcastTime:(id)a6 messageSize:(id)a7 priority:(id)a8 broadcastID:(int64_t)a9 connectionType:(int64_t)a10 messageContext:(id)a11
{
  id v17 = a3;
  id v61 = a4;
  id v60 = a5;
  id v18 = a6;
  id v59 = a7;
  id v19 = a8;
  id v20 = a11;
  uint64_t v21 = OSLogHandleForTransportCategory("IDSDaemon");
  __int16 v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
  {
    id v23 = (id)objc_claimAutoreleasedReturnValue([v20 localObject]);
    id v24 = (void *)objc_claimAutoreleasedReturnValue([v20 localObject]);
    __int16 v25 = (void *)objc_claimAutoreleasedReturnValue([v24 processName]);
    *(_DWORD *)os_activity_scope_state_s buf = 138544130;
    id v70 = v17;
    __int16 v71 = 2114;
    id v72 = v61;
    __int16 v73 = 2048;
    id v74 = v23;
    __int16 v75 = 2114;
    BOOL v76 = v25;
    _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_INFO,  "Broadcast: Received acknowledgement for message stored as %{public}@ real guid %{public}@ from localObject %p proc essName %{public}@",  buf,  0x2Au);
  }

  uint64_t v27 = os_log_shim_legacy_logging_enabled(v26);
  if ((_DWORD)v27 && _IDSShouldLogTransport(v27))
  {
    __int16 v28 = (void *)objc_claimAutoreleasedReturnValue([v20 localObject]);
    int64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v20 localObject]);
    id v57 = v28;
    id v58 = (void *)objc_claimAutoreleasedReturnValue([v29 processName]);
    id v53 = v17;
    id v56 = v61;
    _IDSLogTransport( @"IDSDaemon",  @"IDS",  @"Broadcast: Received acknowledgement for message stored as %{public}@ real guid %{public}@ from localObject %p processName %{public}@");
  }

  id v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "localObject", v53, v56, v57, v58));
  id v31 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon accountWithIdentifier:localObject:requiredEntitlement:]( self,  "accountWithIdentifier:localObject:requiredEntitlement:",  v60,  v30,  kIDSMessagingEntitlement));

  if (v31)
  {
    if (a9 >= 1)
    {
      id v32 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDaemonPriorityQueueController sharedInstance]( &OBJC_CLASS___IDSDaemonPriorityQueueController,  "sharedInstance"));
      v62[0] = _NSConcreteStackBlock;
      v62[1] = 3221225472LL;
      v62[2] = sub_10038B3D0;
      v62[3] = &unk_100902950;
      id v63 = v31;
      id v64 = self;
      int64_t v67 = a9;
      id v65 = v61;
      id v66 = v19;
      int64_t v68 = a10;
      objc_msgSend(v32, "performBlock:withImplicitPriority:", v62, (int)objc_msgSend(v66, "intValue"));
    }

    if (v17) {
      +[IDSDMessageStore deleteIncomingMessageWithGUID:]( &OBJC_CLASS___IDSDMessageStore,  "deleteIncomingMessageWithGUID:",  v17);
    }
    if (v18)
    {
      uint64_t v33 = OSLogHandleForTransportCategory("IDSDaemon");
      uint64_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        id v35 = (void *)objc_claimAutoreleasedReturnValue([v31 service]);
        __int128 v36 = (void *)objc_claimAutoreleasedReturnValue([v35 identifier]);
        *(_DWORD *)os_activity_scope_state_s buf = 138412802;
        id v70 = v36;
        __int16 v71 = 2112;
        id v72 = v17;
        __int16 v73 = 2112;
        id v74 = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "Message on %@ with storage guid %@ experienced broadcast time %@",  buf,  0x20u);
      }

      uint64_t v38 = os_log_shim_legacy_logging_enabled(v37);
      if ((_DWORD)v38)
      {
        if (_IDSShouldLogTransport(v38))
        {
          __int128 v39 = (void *)objc_claimAutoreleasedReturnValue([v31 service]);
          id v54 = (void *)objc_claimAutoreleasedReturnValue([v39 identifier]);
          _IDSLogTransport( @"IDSDaemon",  @"IDS",  @"Message on %@ with storage guid %@ experienced broadcast time %@");

          if (_IDSShouldLog(0LL, @"IDSDaemon"))
          {
            id v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "service", v54, v17, v18));
            dispatch_block_t v55 = (void *)objc_claimAutoreleasedReturnValue([v40 identifier]);
            _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Message on %@ with storage guid %@ experienced broadcast time %@");
          }
        }
      }

      id v41 = objc_alloc(&OBJC_CLASS___IDSClientProcessReceivedMessageMetric);
      __int16 v42 = (void *)objc_claimAutoreleasedReturnValue([v31 service]);
      id v43 = (void *)objc_claimAutoreleasedReturnValue([v42 identifier]);
      id v44 = [v59 unsignedIntegerValue];
      [v18 doubleValue];
      id v46 = objc_msgSend( v41,  "initWithServiceIdentifier:messageSize:deltaTime:priority:",  v43,  v44,  (unint64_t)(v45 * 1000.0),  objc_msgSend(v19, "integerValue"));

      id v47 = (void *)objc_claimAutoreleasedReturnValue(+[IDSCoreAnalyticsLogger defaultLogger](&OBJC_CLASS___IDSCoreAnalyticsLogger, "defaultLogger"));
      [v47 logMetric:v46];

      id v48 = (void *)objc_claimAutoreleasedReturnValue(+[IDSAWDLogging sharedInstance](&OBJC_CLASS___IDSAWDLogging, "sharedInstance"));
      uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue([v31 service]);
      id v50 = (void *)objc_claimAutoreleasedReturnValue([v49 identifier]);
      id v51 = [v59 unsignedIntegerValue];
      [v18 doubleValue];
      objc_msgSend( v48,  "clientProcessReceivedMessage:messageSize:deltaTime:priority:",  v50,  v51,  (unint64_t)(v52 * 1000.0),  objc_msgSend(v19, "integerValue"));
    }
  }
}

- (void)acknowledgeMessageWithGUID:(id)a3 forAccountWithUniqueID:(id)a4 broadcastTime:(id)a5 messageSize:(id)a6 priority:(id)a7 messageContext:(id)a8
{
  id v14 = a3;
  id v15 = a4;
  id v16 = a5;
  id v49 = a6;
  id v48 = a7;
  id v17 = a8;
  uint64_t v18 = OSLogHandleForIDSCategory("IDSDaemon");
  id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    id v20 = (void *)objc_claimAutoreleasedReturnValue([v17 localObject]);
    *(_DWORD *)os_activity_scope_state_s buf = 138412546;
    id v51 = v14;
    __int16 v52 = 2048;
    id v53 = v20;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Received acknowledgement for message %@ from localObject %p",  buf,  0x16u);
  }

  if (os_log_shim_legacy_logging_enabled(v21) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    id v44 = v14;
    id v47 = (void *)objc_claimAutoreleasedReturnValue([v17 localObject]);
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Received acknowledgement for message %@ from localObject %p");
  }

  __int16 v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "localObject", v44, v47));
  id v23 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon accountWithIdentifier:localObject:requiredEntitlement:]( self,  "accountWithIdentifier:localObject:requiredEntitlement:",  v15,  v22,  kIDSMessagingEntitlement));

  if (v23)
  {
    if (v14) {
      +[IDSDMessageStore deleteIncomingMessageWithGUID:]( &OBJC_CLASS___IDSDMessageStore,  "deleteIncomingMessageWithGUID:",  v14);
    }
    if (v16)
    {
      uint64_t v24 = OSLogHandleForTransportCategory("IDSDaemon");
      __int16 v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v23 service]);
        uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v26 identifier]);
        *(_DWORD *)os_activity_scope_state_s buf = 138412802;
        id v51 = v27;
        __int16 v52 = 2112;
        id v53 = v14;
        __int16 v54 = 2112;
        id v55 = v16;
        _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "Message on %@ with storage guid %@ experienced broadcast time %@",  buf,  0x20u);
      }

      uint64_t v29 = os_log_shim_legacy_logging_enabled(v28);
      if ((_DWORD)v29)
      {
        if (_IDSShouldLogTransport(v29))
        {
          id v30 = (void *)objc_claimAutoreleasedReturnValue([v23 service]);
          double v45 = (void *)objc_claimAutoreleasedReturnValue([v30 identifier]);
          _IDSLogTransport( @"IDSDaemon",  @"IDS",  @"Message on %@ with storage guid %@ experienced broadcast time %@");

          if (_IDSShouldLog(0LL, @"IDSDaemon"))
          {
            id v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "service", v45, v14, v16));
            id v46 = (void *)objc_claimAutoreleasedReturnValue([v31 identifier]);
            _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Message on %@ with storage guid %@ experienced broadcast time %@");
          }
        }
      }

      id v32 = objc_alloc(&OBJC_CLASS___IDSClientProcessReceivedMessageMetric);
      uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([v23 service]);
      uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([v33 identifier]);
      id v35 = [v49 unsignedIntegerValue];
      [v16 doubleValue];
      id v37 = objc_msgSend( v32,  "initWithServiceIdentifier:messageSize:deltaTime:priority:",  v34,  v35,  (unint64_t)(v36 * 1000.0),  objc_msgSend(v48, "integerValue"));

      uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue(+[IDSCoreAnalyticsLogger defaultLogger](&OBJC_CLASS___IDSCoreAnalyticsLogger, "defaultLogger"));
      [v38 logMetric:v37];

      __int128 v39 = (void *)objc_claimAutoreleasedReturnValue(+[IDSAWDLogging sharedInstance](&OBJC_CLASS___IDSAWDLogging, "sharedInstance"));
      id v40 = (void *)objc_claimAutoreleasedReturnValue([v23 service]);
      id v41 = (void *)objc_claimAutoreleasedReturnValue([v40 identifier]);
      id v42 = [v49 unsignedIntegerValue];
      [v16 doubleValue];
      objc_msgSend( v39,  "clientProcessReceivedMessage:messageSize:deltaTime:priority:",  v41,  v42,  (unint64_t)(v43 * 1000.0),  objc_msgSend(v48, "integerValue"));
    }
  }
}

- (void)sendAppAckWithGUID:(id)a3 toDestination:(id)a4 forAccountWithUniqueID:(id)a5 connectionType:(int64_t)a6 messageContext:(id)a7
{
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a7;
  int64_t v32 = a6;
  uint64_t v16 = OSLogHandleForIDSCategory("IDSDaemon");
  id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v15 localObject]);
    *(_DWORD *)os_activity_scope_state_s buf = 138412802;
    id v36 = v12;
    __int16 v37 = 2112;
    id v38 = v13;
    __int16 v39 = 2048;
    id v40 = v18;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Request to send app-level ack for message %@ to %@ from localObject %p",  buf,  0x20u);
  }

  if (os_log_shim_legacy_logging_enabled(v19) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    id v30 = (void *)objc_claimAutoreleasedReturnValue([v15 localObject]);
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Request to send app-level ack for message %@ to %@ from localObject %p");
  }

  if (v12 && v13)
  {
    id v20 = (void *)objc_claimAutoreleasedReturnValue([v15 localObject]);
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon accountWithIdentifier:localObject:requiredEntitlement:]( self,  "accountWithIdentifier:localObject:requiredEntitlement:",  v14,  v20,  kIDSMessagingEntitlement));

    if (v21)
    {
      __int16 v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObject:](&OBJC_CLASS___NSArray, "arrayWithObject:", v13));
      id v23 = sub_10011BB60(v22, v21);
      id v31 = (void *)objc_claimAutoreleasedReturnValue(v23);

      uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v31));
      __int16 v25 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDestination destinationWithStrings:]( &OBJC_CLASS___IDSDestination,  "destinationWithStrings:",  v24));

      id v26 = objc_alloc_init(&OBJC_CLASS___IDSSendParameters);
      uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionary](&OBJC_CLASS___NSDictionary, "dictionary"));
      [v26 setMessage:v27];

      [v26 setDestinations:v25];
      [v26 setUseDictAsTopLevel:1];
      [v26 setPeerResponseIdentifier:v12];
      uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 244LL));
      [v26 setCommand:v28];

      [v26 setPriority:300];
      uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithLongLong:",  -[IDSDaemon _messageTypeForConnection:](self, "_messageTypeForConnection:", v32)));
      [v26 setMessageType:v29];

      v33[0] = _NSConcreteStackBlock;
      v33[1] = 3221225472LL;
      v33[2] = sub_10038BDE0;
      v33[3] = &unk_1008F8A50;
      id v34 = v12;
      [v21 sendMessageWithSendParameters:v26 willSendBlock:0 completionBlock:v33];
    }
  }
}

- (int64_t)_messageTypeForConnection:(int64_t)a3
{
  int64_t v3 = 4LL;
  if (a3 != 1) {
    int64_t v3 = 1LL;
  }
  if (a3 == 2) {
    return 6LL;
  }
  else {
    return v3;
  }
}

- (BOOL)_checkIfDupeAndNoteGuid:(id)a3 local:(BOOL)a4 topic:(id)a5 forceNoteGuid:(BOOL)a6
{
  BOOL v6 = a6;
  BOOL v8 = a4;
  id v10 = a3;
  id v11 = a5;
  if ([v10 length])
  {
    id v12 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon serviceController](self, "serviceController"));
    id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 serviceWithIdentifier:v11]);

    if ([v13 allowsDuplicates])
    {
      BOOL v14 = 0;
LABEL_27:

      goto LABEL_28;
    }

    pthread_mutex_lock(&self->_localIncomingGUIDsLock);
    id v15 = (void *)objc_claimAutoreleasedReturnValue(-[IMPair first](self->_localIncomingGUIDs, "first"));
    if ([v15 containsObject:v10])
    {

      BOOL v14 = 1;
      if (!v8) {
        goto LABEL_25;
      }
    }

    else
    {
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(-[IMPair second](self->_localIncomingGUIDs, "second"));
      unsigned __int8 v17 = [v16 containsObject:v10];

      if (!v8)
      {
        if ((v17 & 1) != 0)
        {
          BOOL v14 = 1;
        }

        else
        {
          if ([v11 containsString:@"continuity"])
          {
            uint64_t v19 = OSLogHandleForIDSCategory("IDSDaemon");
            id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
            if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)os_activity_scope_state_s buf = 138412802;
              id v32 = v10;
              __int16 v33 = 2112;
              id v34 = @"Cloud Fallback";
              __int16 v35 = 2112;
              id v36 = v11;
              _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "The delivery path for message with guid %@ is %@, service: %@",  buf,  0x20u);
            }

            if (os_log_shim_legacy_logging_enabled(v21)
              && _IDSShouldLog(0LL, @"IDSDaemon"))
            {
              uint64_t v29 = @"Cloud Fallback";
              id v30 = v11;
              id v28 = v10;
              _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"The delivery path for message with guid %@ is %@, service: %@");
            }
          }

          BOOL v14 = 0;
        }

        goto LABEL_25;
      }

      if ((v17 & 1) == 0)
      {
        uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(-[IMPair first](self->_remoteIncomingGUIDs, "first"));
        if ([v18 containsObject:v10])
        {
        }

        else
        {
          __int16 v22 = (void *)objc_claimAutoreleasedReturnValue(-[IMPair second](self->_remoteIncomingGUIDs, "second"));
          unsigned __int8 v23 = [v22 containsObject:v10];

          if ((v23 & 1) == 0)
          {
            if ([v11 containsString:@"continuity"])
            {
              uint64_t v25 = OSLogHandleForIDSCategory("IDSDaemon");
              id v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
              if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)os_activity_scope_state_s buf = 138412802;
                id v32 = v10;
                __int16 v33 = 2112;
                id v34 = @"Local";
                __int16 v35 = 2112;
                id v36 = v11;
                _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "The delivery path for message with guid %@ is %@, service: %@",  buf,  0x20u);
              }

              if (os_log_shim_legacy_logging_enabled(v27)
                && _IDSShouldLog(0LL, @"IDSDaemon"))
              {
                uint64_t v29 = @"Local";
                id v30 = v11;
                id v28 = v10;
                _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"The delivery path for message with guid %@ is %@, service: %@");
              }
            }

            BOOL v14 = 0;
            if (!v8) {
              goto LABEL_25;
            }
LABEL_24:
            if (!v6)
            {
LABEL_26:
              pthread_mutex_unlock(&self->_localIncomingGUIDsLock);
              goto LABEL_27;
            }

- (BOOL)_checkIfDupeAndNoteGuid:(id)a3 local:(BOOL)a4 topic:(id)a5
{
  return -[IDSDaemon _checkIfDupeAndNoteGuid:local:topic:forceNoteGuid:]( self,  "_checkIfDupeAndNoteGuid:local:topic:forceNoteGuid:",  a3,  a4,  a5,  0LL);
}

- (BOOL)shouldProxyMessageForService:(id)a3 toIdentifier:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  im_assert_primary_base_queue(v7, v8);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon pairingManager](self, "pairingManager"));
  unsigned int v10 = [v9 isPaired];

  if (v10
    && (id v11 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon pairingManager](self, "pairingManager")),
        unsigned __int8 v12 = [v11 activePairedDeviceHasPairingType:1],
        v11,
        (v12 & 1) == 0)
    && [v6 shouldAllowProxyDelivery])
  {
    id v13 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
    double v43 = (void *)objc_claimAutoreleasedReturnValue([v13 accountsOnService:v6]);

    if ([v43 count] == (id)1)
    {
      uint64_t v14 = OSLogHandleForIDSCategory("IDSDaemon");
      id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)os_activity_scope_state_s buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Only 1 account exists on this service, We will need to proxy this message to our local device for broadcast",  buf,  2u);
      }

      if (os_log_shim_legacy_logging_enabled(v16) && _IDSShouldLog(0LL, @"IDSDaemon")) {
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Only 1 account exists on this service, We will need to proxy this message to our local device for broadcast");
      }
      BOOL v17 = 1;
    }

    else
    {
      __int128 v50 = 0u;
      __int128 v51 = 0u;
      __int128 v48 = 0u;
      __int128 v49 = 0u;
      id obj = v43;
      id v42 = [obj countByEnumeratingWithState:&v48 objects:v57 count:16];
      if (v42)
      {
        uint64_t v39 = *(void *)v49;
        uint64_t v38 = IDSDevicePropertyIdentities;
        uint64_t v19 = IDSDevicePropertyIdentitiesURI;
        do
        {
          uint64_t v20 = 0LL;
          do
          {
            if (*(void *)v49 != v39)
            {
              uint64_t v21 = v20;
              objc_enumerationMutation(obj);
              uint64_t v20 = v21;
            }

            uint64_t v40 = v20;
            __int16 v22 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(*((void *)&v48 + 1) + 8 * v20),  "defaultPairedDependentRegistration",  v36,  v37));
            if (v22)
            {
              uint64_t v23 = OSLogHandleForIDSCategory("IDSDaemon");
              uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
              if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)os_activity_scope_state_s buf = 138412290;
                id v53 = v22;
                _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "Found Default paired device %@ ",  buf,  0xCu);
              }

              if (os_log_shim_legacy_logging_enabled(v25)
                && _IDSShouldLog(0LL, @"IDSDaemon"))
              {
                id v36 = v22;
                _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon", @"Found Default paired device %@ ");
              }

              id v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "objectForKey:", v38, v36));
              __int128 v46 = 0u;
              __int128 v47 = 0u;
              __int128 v44 = 0u;
              __int128 v45 = 0u;
              id v27 = v26;
              id v28 = [v27 countByEnumeratingWithState:&v44 objects:v56 count:16];
              if (v28)
              {
                uint64_t v29 = *(void *)v45;
                while (2)
                {
                  for (i = 0LL; i != v28; i = (char *)i + 1)
                  {
                    if (*(void *)v45 != v29) {
                      objc_enumerationMutation(v27);
                    }
                    id v31 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(*((void *)&v44 + 1) + 8 * (void)i),  "_stringForKey:",  v19,  v36));
                    uint64_t v32 = OSLogHandleForIDSCategory("IDSDaemon");
                    __int16 v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
                    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)os_activity_scope_state_s buf = 138412546;
                      id v53 = v31;
                      __int16 v54 = 2112;
                      id v55 = v7;
                      _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "Comparing %@  To %@ ",  buf,  0x16u);
                    }

                    if (os_log_shim_legacy_logging_enabled(v34)
                      && _IDSShouldLog(0LL, @"IDSDaemon"))
                    {
                      id v36 = v31;
                      id v37 = v7;
                      _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon", @"Comparing %@  To %@ ");
                    }

                    char v35 = _FTAreIDsEquivalent(v31, v7);

                    if ((v35 & 1) != 0)
                    {

                      BOOL v17 = 0;
                      goto LABEL_43;
                    }
                  }

                  id v28 = [v27 countByEnumeratingWithState:&v44 objects:v56 count:16];
                  if (v28) {
                    continue;
                  }
                  break;
                }
              }
            }

            uint64_t v20 = v40 + 1;
          }

          while ((id)(v40 + 1) != v42);
          id v42 = [obj countByEnumeratingWithState:&v48 objects:v57 count:16];
          BOOL v17 = 1;
        }

        while (v42);
      }

      else
      {
        BOOL v17 = 1;
      }

- (BOOL)_shouldMessageBeProxied:(id)a3 service:(id)a4
{
  id v5 = a3;
  id v6 = a4;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 pushTopic]);
  unsigned int v8 = [v7 isEqualToString:@"com.apple.madrid"];

  if (v8
    && (uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v5 command]),
        unsigned int v10 = [v9 isEqualToNumber:&off_100947DB8],
        v9,
        v10)
    && (id v11 = (void *)objc_claimAutoreleasedReturnValue([v5 dataToEncrypt]),
        id v12 = [v11 length],
        v11,
        !v12))
  {
    uint64_t v15 = OSLogHandleForIDSCategory("IDSDaemon");
    uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v17 = (void *)objc_claimAutoreleasedReturnValue([v5 messageUUID]);
      *(_DWORD *)os_activity_scope_state_s buf = 138412290;
      uint64_t v21 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Not Proxying this message %@ payload is currently a typing indicator",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v18) && _IDSShouldLog(0LL, @"IDSDaemon"))
    {
      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v5 messageUUID]);
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Not Proxying this message %@ payload is currently a typing indicator");
    }

    BOOL v13 = 0;
  }

  else
  {
    BOOL v13 = 1;
  }

  return v13;
}

- (BOOL)_shouldIncludeDefaultDeviceAsDestinationForMessageWithParams:(id)a3 service:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue([v6 fromID]);
  im_assert_primary_base_queue(v8, v9);
  unsigned int v10 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon pairingManager](self, "pairingManager"));
  unsigned int v11 = [v10 isPaired];

  if (!v11) {
    goto LABEL_5;
  }
  id v12 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon pairingManager](self, "pairingManager"));
  unsigned __int8 v13 = [v12 isCurrentDeviceTinkerConfiguredWatch];

  if ((v13 & 1) != 0) {
    goto LABEL_5;
  }
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon pairingManager](self, "pairingManager"));
  unsigned __int8 v15 = [v14 activePairedDeviceHasPairingType:1];

  if ((v15 & 1) != 0) {
    goto LABEL_5;
  }
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v7 pushTopic]);
  uint64_t v19 = IDSServiceNameiMessage;
  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v6 command]);
  if (![v20 isEqualToNumber:&off_100947AB8]
    || (uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v6 deliveryMinimumTime])) == 0)
  {

LABEL_14:
    goto LABEL_15;
  }

  __int16 v22 = (void *)objc_claimAutoreleasedReturnValue([v6 queueOneIdentifier]);

  if (v22)
  {
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon pairingManager](self, "pairingManager"));
    unsigned __int8 v24 = [v23 pairedDeviceSupportsSendLaterMessages];

    if ((v24 & 1) == 0) {
      goto LABEL_5;
    }
  }

- (BOOL)_isDeviceInAccountRegistration:(id)a3 forService:(id)a4
{
  id v5 = a3;
  id v6 = a4;
  id v7 = v6;
  if (v5 && [v6 length])
  {
    unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDServiceController sharedInstance](&OBJC_CLASS___IDSDServiceController, "sharedInstance"));
    uint64_t v25 = v7;
    unsigned int v10 = (void *)objc_claimAutoreleasedReturnValue([v9 serviceWithPushTopic:v7]);
    unsigned int v11 = (void *)objc_claimAutoreleasedReturnValue([v8 accountsOnService:v10]);

    __int128 v36 = 0u;
    __int128 v37 = 0u;
    __int128 v34 = 0u;
    __int128 v35 = 0u;
    id obj = v11;
    id v29 = [obj countByEnumeratingWithState:&v34 objects:v39 count:16];
    if (v29)
    {
      char v27 = 0;
      uint64_t v28 = *(void *)v35;
      uint64_t v12 = IDSDevicePropertyPushToken;
      do
      {
        for (i = 0LL; i != v29; i = (char *)i + 1)
        {
          if (*(void *)v35 != v28) {
            objc_enumerationMutation(obj);
          }
          uint64_t v14 = *(void **)(*((void *)&v34 + 1) + 8LL * (void)i);
          __int128 v30 = 0u;
          __int128 v31 = 0u;
          __int128 v32 = 0u;
          __int128 v33 = 0u;
          unsigned __int8 v15 = (void *)objc_claimAutoreleasedReturnValue([v14 dependentRegistrations]);
          id v16 = [v15 countByEnumeratingWithState:&v30 objects:v38 count:16];
          if (v16)
          {
            id v17 = v16;
            uint64_t v18 = *(void *)v31;
            while (2)
            {
              for (j = 0LL; j != v17; j = (char *)j + 1)
              {
                if (*(void *)v31 != v18) {
                  objc_enumerationMutation(v15);
                }
                uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v5 rawToken]);
                unsigned __int8 v22 = [v20 isEqualToData:v21];

                if ((v22 & 1) != 0)
                {
                  char v27 = 1;
                  goto LABEL_18;
                }
              }

              id v17 = [v15 countByEnumeratingWithState:&v30 objects:v38 count:16];
              if (v17) {
                continue;
              }
              break;
            }
          }

- (unsigned)_dedupBehaviorForNiceMessage:(id)a3
{
  id v3 = a3;
  BOOL v4 = (void *)objc_claimAutoreleasedReturnValue([v3 certifiedDeliveryVersion]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 storageFlags]);
  if ((uint64_t)[v4 integerValue] < 1 || (uint64_t)objc_msgSend(v5, "integerValue") < 1)
  {
    unsigned __int8 v7 = 0;
  }

  else
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 retryCount]);
    else {
      unsigned __int8 v7 = 2;
    }
  }

  return v7;
}

- (void)_registerSysdiagnoseBlock
{
  id location = (id)0xAAAAAAAAAAAAAAAALL;
  objc_initWeak(&location, self);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_10038D514;
  v6[3] = &unk_1008F97C8;
  objc_copyWeak(&v7, &location);
  uint64_t v4 = im_primary_queue(v2, v3);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  sub_100301AD8(v6, (uint64_t)@"IDS-DAEMON-MESSAGING", (uint64_t)v5);

  objc_destroyWeak(&v7);
  objc_destroyWeak(&location);
}

- (id)wpLinkManager
{
  return +[IDSWPLinkManager sharedInstance](&OBJC_CLASS___IDSWPLinkManager, "sharedInstance");
}

- (BOOL)_checkContinuityEntitlementForMessageContext:(id)a3
{
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([a3 localObject]);
  LOBYTE(self) = -[IDSDaemon validateListenerForLocalObject:andCheckEntitlement:]( self,  "validateListenerForLocalObject:andCheckEntitlement:",  v4,  kIDSContinuityEntitlement);

  return (char)self;
}

- (void)continuityClientInstanceCreatedWithMessageContext:(id)a3
{
  id v5 = a3;
  if (-[IDSDaemon _checkContinuityEntitlementForMessageContext:](self, "_checkContinuityEntitlementForMessageContext:"))
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon wpLinkManager](self, "wpLinkManager"));
    [v4 clientInstanceCreatedWithMessageContext:v5];
  }
}

- (void)continuityStartAdvertisingOfType:(int64_t)a3 withData:(id)a4 withOptions:(id)a5 messageContext:(id)a6
{
  id v12 = a4;
  id v10 = a5;
  if (-[IDSDaemon _checkContinuityEntitlementForMessageContext:]( self,  "_checkContinuityEntitlementForMessageContext:",  a6))
  {
    unsigned int v11 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon wpLinkManager](self, "wpLinkManager"));
    [v11 startAdvertisingOfType:a3 withData:v12 withOptions:v10];
  }
}

- (void)continuityStopAdvertisingOfType:(int64_t)a3 messageContext:(id)a4
{
  if (-[IDSDaemon _checkContinuityEntitlementForMessageContext:]( self,  "_checkContinuityEntitlementForMessageContext:",  a4))
  {
    id v6 = (id)objc_claimAutoreleasedReturnValue(-[IDSDaemon wpLinkManager](self, "wpLinkManager"));
    [v6 stopAdvertisingOfType:a3];
  }

- (void)continuityStartScanningForType:(int64_t)a3 withData:(id)a4 mask:(id)a5 peers:(id)a6 messageContext:(id)a7
{
  id v15 = a4;
  id v12 = a5;
  id v13 = a6;
  if (-[IDSDaemon _checkContinuityEntitlementForMessageContext:]( self,  "_checkContinuityEntitlementForMessageContext:",  a7))
  {
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon wpLinkManager](self, "wpLinkManager"));
    [v14 startScanningForType:a3 withData:v15 mask:v12 peers:v13];
  }
}

- (void)continuityStartScanningForType:(int64_t)a3 withData:(id)a4 mask:(id)a5 messageContext:(id)a6
{
  id v12 = a4;
  id v10 = a5;
  if (-[IDSDaemon _checkContinuityEntitlementForMessageContext:]( self,  "_checkContinuityEntitlementForMessageContext:",  a6))
  {
    unsigned int v11 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon wpLinkManager](self, "wpLinkManager"));
    [v11 startScanningForType:a3 withData:v12 mask:v10];
  }
}

- (void)continuityStartScanningForType:(int64_t)a3 withData:(id)a4 mask:(id)a5 peers:(id)a6 boostedScan:(BOOL)a7 duplicates:(BOOL)a8 messageContext:(id)a9
{
  BOOL v9 = a8;
  BOOL v10 = a7;
  id v18 = a4;
  id v15 = a5;
  id v16 = a6;
  if (-[IDSDaemon _checkContinuityEntitlementForMessageContext:]( self,  "_checkContinuityEntitlementForMessageContext:",  a9))
  {
    id v17 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon wpLinkManager](self, "wpLinkManager"));
    [v17 startScanningForType:a3 withData:v18 mask:v15 peers:v16 boostedScan:v10 duplicates:v9];
  }
}

- (void)continuityStartScanningForType:(int64_t)a3 withData:(id)a4 mask:(id)a5 boostedScan:(BOOL)a6 duplicates:(BOOL)a7 messageContext:(id)a8
{
  BOOL v9 = a7;
  BOOL v10 = a6;
  id v16 = a4;
  id v14 = a5;
  if (-[IDSDaemon _checkContinuityEntitlementForMessageContext:]( self,  "_checkContinuityEntitlementForMessageContext:",  a8))
  {
    id v15 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon wpLinkManager](self, "wpLinkManager"));
    [v15 startScanningForType:a3 withData:v16 mask:v14 boostedScan:v10 duplicates:v9];
  }
}

- (void)continuityStopScanningForType:(int64_t)a3 messageContext:(id)a4
{
  if (-[IDSDaemon _checkContinuityEntitlementForMessageContext:]( self,  "_checkContinuityEntitlementForMessageContext:",  a4))
  {
    id v6 = (id)objc_claimAutoreleasedReturnValue(-[IDSDaemon wpLinkManager](self, "wpLinkManager"));
    [v6 stopScanningForType:a3];
  }

- (void)continuityStartTrackingPeer:(id)a3 forType:(int64_t)a4 messageContext:(id)a5
{
  id v9 = a3;
  if (-[IDSDaemon _checkContinuityEntitlementForMessageContext:]( self,  "_checkContinuityEntitlementForMessageContext:",  a5))
  {
    unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon wpLinkManager](self, "wpLinkManager"));
    [v8 continuityStartTrackingPeer:v9 forType:a4];
  }
}

- (void)continuityStopTrackingPeer:(id)a3 forType:(int64_t)a4 messageContext:(id)a5
{
  id v9 = a3;
  if (-[IDSDaemon _checkContinuityEntitlementForMessageContext:]( self,  "_checkContinuityEntitlementForMessageContext:",  a5))
  {
    unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon wpLinkManager](self, "wpLinkManager"));
    [v8 continuityStopTrackingPeer:v9 forType:a4];
  }
}

- (void)reportiMessageSpam:(id)a3 toURI:(id)a4 messageContext:(id)a5
{
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  uint64_t v11 = OSLogHandleForIDSCategory("iMessageSpam");
  id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    id v13 = (void *)objc_claimAutoreleasedReturnValue([v10 localObject]);
    *(_DWORD *)os_activity_scope_state_s buf = 138412290;
    uint64_t v29 = (uint64_t)v13;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Told to report iMessage spam with localObject %@",  buf,  0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v14) && _IDSShouldLog(0LL, @"iMessageSpam"))
  {
    char v27 = (void *)objc_claimAutoreleasedReturnValue([v10 localObject]);
    _IDSLogV( 0LL,  @"IDSFoundation",  @"iMessageSpam",  @"Told to report iMessage spam with localObject %@");
  }

  id v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "localObject", v27));
  unsigned __int8 v16 = -[IDSDaemon validateListenerForLocalObject:andCheckEntitlement:]( self,  "validateListenerForLocalObject:andCheckEntitlement:",  v15,  kIDSReportiMessageSpamEntitlement);

  if ((v16 & 1) != 0)
  {
    id v17 = (void *)objc_claimAutoreleasedReturnValue([v9 _stripFZIDPrefix]);
    uint64_t v18 = objc_claimAutoreleasedReturnValue([v17 _bestGuessURI]);

    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v19 accountWithServiceName:@"com.apple.madrid" aliasURI:v18]);

    if (v20)
    {
      [v20 reportSpamWithMessages:v8 toURI:v18];
    }

    else
    {
      uint64_t v24 = OSLogHandleForIDSCategory("iMessageSpam");
      uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)os_activity_scope_state_s buf = 138412290;
        uint64_t v29 = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "Couldn't find iMessage account with alias %@",  buf,  0xCu);
      }

      if (os_log_shim_legacy_logging_enabled(v26)
        && _IDSShouldLog(0LL, @"iMessageSpam"))
      {
        _IDSLogV( 0LL,  @"IDSFoundation",  @"iMessageSpam",  @"Couldn't find iMessage account with alias %@");
      }
    }

    id v9 = (id)v18;
  }

  else
  {
    uint64_t v21 = OSLogHandleForIDSCategory("iMessageSpam");
    unsigned __int8 v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)os_activity_scope_state_s buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "Process not entitled to report iMessage spam",  buf,  2u);
    }

    if (os_log_shim_legacy_logging_enabled(v23)
      && _IDSShouldLog(0LL, @"iMessageSpam"))
    {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"iMessageSpam",  @"Process not entitled to report iMessage spam");
    }
  }
}

- (void)reportiMessageUnknownSender:(id)a3 messageID:(id)a4 isBlackholed:(BOOL)a5 isJunked:(BOOL)a6 messageServerTimestamp:(id)a7 toURI:(id)a8 messageContext:(id)a9
{
  BOOL v11 = a6;
  BOOL v12 = a5;
  id v15 = a3;
  id v16 = a4;
  id v17 = a7;
  id v18 = a8;
  id v19 = a9;
  uint64_t v20 = OSLogHandleForIDSCategory("iMessageSpam");
  uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    unsigned __int8 v22 = (void *)objc_claimAutoreleasedReturnValue([v19 localObject]);
    *(_DWORD *)os_activity_scope_state_s buf = 138412290;
    uint64_t v38 = (uint64_t)v22;
    _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Told to report iMessage unknown sender with localObject %@",  buf,  0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v23) && _IDSShouldLog(0LL, @"iMessageSpam"))
  {
    __int128 v36 = (void *)objc_claimAutoreleasedReturnValue([v19 localObject]);
    _IDSLogV( 0LL,  @"IDSFoundation",  @"iMessageSpam",  @"Told to report iMessage unknown sender with localObject %@");
  }

  uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "localObject", v36));
  unsigned __int8 v25 = -[IDSDaemon validateListenerForLocalObject:andCheckEntitlement:]( self,  "validateListenerForLocalObject:andCheckEntitlement:",  v24,  kIDSReportiMessageSpamEntitlement);

  if ((v25 & 1) != 0)
  {
    uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v18 _stripFZIDPrefix]);
    uint64_t v27 = objc_claimAutoreleasedReturnValue([v26 _bestGuessURI]);

    uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
    uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v28 accountWithServiceName:@"com.apple.madrid" aliasURI:v27]);

    if (v29)
    {
      [v29 reportiMessageUnknownSender:v15 messageID:v16 isBlackholed:v12 isJunked:v11 messageServerTimestamp:v17 toURI:v27];
    }

    else
    {
      uint64_t v33 = OSLogHandleForIDSCategory("iMessageSpam");
      __int128 v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)os_activity_scope_state_s buf = 138412290;
        uint64_t v38 = v27;
        _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "Couldn't find iMessage account with alias %@",  buf,  0xCu);
      }

      if (os_log_shim_legacy_logging_enabled(v35)
        && _IDSShouldLog(0LL, @"iMessageSpam"))
      {
        _IDSLogV( 0LL,  @"IDSFoundation",  @"iMessageSpam",  @"Couldn't find iMessage account with alias %@");
      }
    }

    id v18 = (id)v27;
  }

  else
  {
    uint64_t v30 = OSLogHandleForIDSCategory("iMessageSpam");
    __int128 v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)os_activity_scope_state_s buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "Process not entitled to report iMessage unknown sender",  buf,  2u);
    }

    if (os_log_shim_legacy_logging_enabled(v32)
      && _IDSShouldLog(0LL, @"iMessageSpam"))
    {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"iMessageSpam",  @"Process not entitled to report iMessage unknown sender");
    }
  }
}

- (void)reportiMessageSpamCheckUnknown:(id)a3 count:(id)a4 requestID:(id)a5 messageContext:(id)a6
{
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  id v13 = a6;
  uint64_t v14 = OSLogHandleForIDSCategory("iMessageSpam");
  id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    id v16 = (void *)objc_claimAutoreleasedReturnValue([v13 localObject]);
    *(_DWORD *)os_activity_scope_state_s buf = 138412290;
    uint64_t v29 = v16;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Told to check unknown sender with localObject %@",  buf,  0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v17) && _IDSShouldLog(0LL, @"iMessageSpam"))
  {
    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v13 localObject]);
    _IDSLogV( 0LL,  @"IDSFoundation",  @"iMessageSpam",  @"Told to check unknown sender with localObject %@");
  }

  id v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "localObject", v24));
  unsigned __int8 v19 = -[IDSDaemon validateListenerForLocalObject:andCheckEntitlement:]( self,  "validateListenerForLocalObject:andCheckEntitlement:",  v18,  kIDSReportiMessageSpamEntitlement);

  if ((v19 & 1) != 0)
  {
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(+[IDSRegistrationCenter sharedInstance](&OBJC_CLASS___IDSRegistrationCenter, "sharedInstance"));
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472LL;
    v25[2] = sub_1003CFC40;
    v25[3] = &unk_1009042F8;
    void v25[4] = self;
    id v26 = v13;
    id v27 = v12;
    [v20 reportiMessageSpamCheckUnknown:v10 count:v11 completionBlock:v25];
  }

  else
  {
    uint64_t v21 = OSLogHandleForIDSCategory("iMessageSpam");
    unsigned __int8 v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)os_activity_scope_state_s buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "Process not entitled to check unknown sender",  buf,  2u);
    }

    if (os_log_shim_legacy_logging_enabled(v23)
      && _IDSShouldLog(0LL, @"iMessageSpam"))
    {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"iMessageSpam",  @"Process not entitled to check unknown sender");
    }
  }
}

- (BOOL)_checkEntitlement:(id)a3 forAccountWithID:(id)a4 messageContext:(id)a5
{
  id v8 = a3;
  id v9 = a4;
  id v10 = a5;
  id v11 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
  id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 accountWithUniqueID:v9]);

  if (v12)
  {
    id v13 = (void *)objc_claimAutoreleasedReturnValue([v10 localObject]);
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v12 service]);
    id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 identifier]);
    BOOL v16 = -[IDSDaemon validateListenerForLocalObject:andCheckEntitlement:forAccessToServiceWithIdentifier:]( self,  "validateListenerForLocalObject:andCheckEntitlement:forAccessToServiceWithIdentifier:",  v13,  v8,  v15);
  }

  else
  {
    uint64_t v17 = OSLogHandleForIDSCategory("IDSDaemon");
    id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)os_activity_scope_state_s buf = 138412290;
      id v22 = v9;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "No account found for ID: %@", buf, 0xCu);
    }

    IMLogBacktrace(@"IDSDaemon");
    BOOL v16 = 0;
  }

  return v16;
}

- (id)_sessionWithUniqueID:(id)a3 messageContext:(id)a4 requiredEntitlement:(id)a5
{
  id v8 = a4;
  id v9 = a5;
  id v10 = a3;
  id v11 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDSessionController sharedInstance](&OBJC_CLASS___IDSDSessionController, "sharedInstance"));
  id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 sessionWithUniqueID:v10]);

  if (v12
    && (id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 accountID]),
        unsigned int v14 = -[IDSDaemon _checkEntitlement:forAccountWithID:messageContext:]( self,  "_checkEntitlement:forAccountWithID:messageContext:",  v9,  v13,  v8),  v13,  v14))
  {
    id v15 = v12;
  }

  else
  {
    id v15 = 0LL;
  }

  return v15;
}

- (id)_sessionWithInstanceID:(id)a3 messageContext:(id)a4 requiredEntitlement:(id)a5
{
  id v8 = a4;
  id v9 = a5;
  id v10 = a3;
  id v11 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDSessionController sharedInstance](&OBJC_CLASS___IDSDSessionController, "sharedInstance"));
  id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 sessionWithInstanceID:v10]);

  if (v12
    && (id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 accountID]),
        unsigned int v14 = -[IDSDaemon _checkEntitlement:forAccountWithID:messageContext:]( self,  "_checkEntitlement:forAccountWithID:messageContext:",  v9,  v13,  v8),  v13,  v14))
  {
    id v15 = v12;
  }

  else
  {
    id v15 = 0LL;
  }

  return v15;
}

- (void)setupNewSessionWithConfiguration:(id)a3 messageContext:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = OSLogHandleForIDSCategory("IDSDaemon");
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)os_activity_scope_state_s buf = 138412290;
    id v21 = v6;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "setupNewSession configuration: %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v10) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    id v19 = v6;
    *(void *)&double v11 = _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"setupNewSession configuration: %@").n128_u64[0];
  }

  id v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKey:", IDSSessionAccountIDKey, v11, v19));
  if (-[IDSDaemon _checkEntitlement:forAccountWithID:messageContext:]( self,  "_checkEntitlement:forAccountWithID:messageContext:",  kIDSSessionEntitlement,  v12,  v7))
  {
    id v13 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKey:IDSSessionClientID]);
    unsigned int v14 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDSessionController sharedInstance](&OBJC_CLASS___IDSDSessionController, "sharedInstance"));
    id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 setupNewOutgoingSessionWithOptions:v6]);

    BOOL v16 = (void *)objc_claimAutoreleasedReturnValue([v7 localObject]);
    id v17 = sub_1001103E8(v13, v16);
    id v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
    [v15 setClientID:v18];
  }
}

- (void)cleanupSession:(id)a3 messageContext:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = OSLogHandleForIDSCategory("IDSDaemon");
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v7 localObject]);
    *(_DWORD *)os_activity_scope_state_s buf = 138412546;
    id v20 = v6;
    __int16 v21 = 2112;
    id v22 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "cleanup session %@ local object %@", buf, 0x16u);
  }

  if (os_log_shim_legacy_logging_enabled(v11) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    id v17 = v6;
    id v18 = (void *)objc_claimAutoreleasedReturnValue([v7 localObject]);
    _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon", @"cleanup session %@ local object %@");
  }

  id v12 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon _sessionWithUniqueID:messageContext:requiredEntitlement:]( self,  "_sessionWithUniqueID:messageContext:requiredEntitlement:",  v6,  v7,  kIDSSessionEntitlement,  v17,  v18));
  if (v12)
  {
    id v13 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDSessionController sharedInstance](&OBJC_CLASS___IDSDSessionController, "sharedInstance"));
    [v13 cleanupSession:v6 shouldCleanSessionStatus:1];
  }

  else
  {
    uint64_t v14 = OSLogHandleForIDSCategory("IDSDaemon");
    id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)os_activity_scope_state_s buf = 138412290;
      id v20 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Could not find session with uniqueID %@ to clean up, ignoring...",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v16) && _IDSShouldLog(0LL, @"IDSDaemon")) {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Could not find session with uniqueID %@ to clean up, ignoring...");
    }
  }
}

- (void)cleanupSessionWithInstanceID:(id)a3 messageContext:(id)a4
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = OSLogHandleForIDSCategory("IDSDaemon");
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v7 localObject]);
    *(_DWORD *)os_activity_scope_state_s buf = 138412546;
    id v20 = v6;
    __int16 v21 = 2112;
    id v22 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "cleanup session instance %@ local object %@",  buf,  0x16u);
  }

  if (os_log_shim_legacy_logging_enabled(v11) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    id v17 = v6;
    id v18 = (void *)objc_claimAutoreleasedReturnValue([v7 localObject]);
    _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon", @"cleanup session instance %@ local object %@");
  }

  id v12 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon _sessionWithInstanceID:messageContext:requiredEntitlement:]( self,  "_sessionWithInstanceID:messageContext:requiredEntitlement:",  v6,  v7,  kIDSSessionEntitlement,  v17,  v18));
  if (v12)
  {
    id v13 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDSessionController sharedInstance](&OBJC_CLASS___IDSDSessionController, "sharedInstance"));
    [v13 cleanupSessionWithInstanceID:v6];
  }

  else
  {
    uint64_t v14 = OSLogHandleForIDSCategory("IDSDaemon");
    id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)os_activity_scope_state_s buf = 138412290;
      id v20 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Could not find session with instanceID %@ to clean up, ignoring...",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v16) && _IDSShouldLog(0LL, @"IDSDaemon")) {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Could not find session with instanceID %@ to clean up, ignoring...");
    }
  }
}

- (void)sendInvitation:(id)a3 withOptions:(id)a4 messageContext:(id)a5
{
  uint64_t v8 = (__CFString *)a3;
  id v9 = a4;
  id v10 = a5;
  uint64_t v11 = OSLogHandleForIDSCategory("IDSDaemon");
  id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)os_activity_scope_state_s buf = 138412290;
    id v22 = v8;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "sendInvitation %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v13) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    id v20 = v8;
    *(void *)&double v14 = _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon", @"sendInvitation %@").n128_u64[0];
  }

  id v15 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon _sessionWithUniqueID:messageContext:requiredEntitlement:]( self,  "_sessionWithUniqueID:messageContext:requiredEntitlement:",  v8,  v10,  kIDSSessionEntitlement,  v14,  v20));
  uint64_t v16 = v15;
  if (v15)
  {
    [v15 sendInvitationWithOptions:v9 declineOnError:0];
  }

  else
  {
    uint64_t v17 = OSLogHandleForIDSCategory("Warning");
    id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)os_activity_scope_state_s buf = 138412546;
      id v22 = @"IDSDaemon";
      __int16 v23 = 2112;
      uint64_t v24 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "%@ - Could not find session with uniqueID %@ to send invitation, ignoring...",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v19))
    {
      _IDSWarnV( @"IDSFoundation",  @"%@ - Could not find session with uniqueID %@ to send invitation, ignoring...");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"%@ - Could not find session with uniqueID %@ to send invitation, ignoring...");
      _IDSLogTransport( @"Warning",  @"IDS",  @"%@ - Could not find session with uniqueID %@ to send invitation, ignoring...");
    }
  }
}

- (void)sendInvitation:(id)a3 withData:(id)a4 declineOnError:(BOOL)a5 messageContext:(id)a6
{
  BOOL v7 = a5;
  id v10 = (__CFString *)a3;
  uint64_t v11 = (__CFString *)a4;
  id v12 = a6;
  uint64_t v13 = OSLogHandleForIDSCategory("IDSDaemon");
  double v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    id v15 = @"NO";
    *(_DWORD *)os_activity_scope_state_s buf = 138412802;
    uint64_t v28 = v10;
    __int16 v29 = 2112;
    if (v7) {
      id v15 = @"YES";
    }
    uint64_t v30 = v11;
    __int16 v31 = 2112;
    uint64_t v32 = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "sendInvitation %@ with data %@ declineOnError %@",  buf,  0x20u);
  }

  if (os_log_shim_legacy_logging_enabled(v16) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    id v18 = @"NO";
    if (v7) {
      id v18 = @"YES";
    }
    unsigned __int8 v25 = v11;
    id v26 = v18;
    uint64_t v24 = v10;
    *(void *)&double v17 = _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"sendInvitation %@ with data %@ declineOnError %@").n128_u64[0];
  }

  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon _sessionWithUniqueID:messageContext:requiredEntitlement:]( self,  "_sessionWithUniqueID:messageContext:requiredEntitlement:",  v10,  v12,  kIDSSessionPrivateEntitlement,  v17,  v24,  v25,  v26));
  id v20 = v19;
  if (v19)
  {
    [v19 sendInvitationWithData:v11 declineOnError:v7];
  }

  else
  {
    uint64_t v21 = OSLogHandleForIDSCategory("Warning");
    id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)os_activity_scope_state_s buf = 138412546;
      uint64_t v28 = @"IDSDaemon";
      __int16 v29 = 2112;
      uint64_t v30 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_ERROR,  "%@ - Could not find session with uniqueID %@ to send invitation with data to, ignoring...",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v23))
    {
      _IDSWarnV( @"IDSFoundation",  @"%@ - Could not find session with uniqueID %@ to send invitation with data to, ignoring...");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"%@ - Could not find session with uniqueID %@ to send invitation with data to, ignoring...");
      _IDSLogTransport( @"Warning",  @"IDS",  @"%@ - Could not find session with uniqueID %@ to send invitation with data to, ignoring...");
    }
  }
}

- (void)acceptInvitation:(id)a3 messageContext:(id)a4
{
  id v6 = (__CFString *)a3;
  id v7 = a4;
  uint64_t v8 = OSLogHandleForIDSCategory("IDSDaemon");
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)os_activity_scope_state_s buf = 138412290;
    uint64_t v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "acceptInvitation %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v10) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    double v17 = v6;
    *(void *)&double v11 = _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon", @"acceptInvitation %@").n128_u64[0];
  }

  id v12 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon _sessionWithUniqueID:messageContext:requiredEntitlement:]( self,  "_sessionWithUniqueID:messageContext:requiredEntitlement:",  v6,  v7,  kIDSSessionEntitlement,  v11,  v17));
  uint64_t v13 = v12;
  if (v12)
  {
    [v12 acceptInvitation];
  }

  else
  {
    uint64_t v14 = OSLogHandleForIDSCategory("Warning");
    id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)os_activity_scope_state_s buf = 138412546;
      uint64_t v19 = @"IDSDaemon";
      __int16 v20 = 2112;
      uint64_t v21 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "%@ - Could not find session with uniqueID %@ to accept invitation, ignoring...",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v16))
    {
      _IDSWarnV( @"IDSFoundation",  @"%@ - Could not find session with uniqueID %@ to accept invitation, ignoring...");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"%@ - Could not find session with uniqueID %@ to accept invitation, ignoring...");
      _IDSLogTransport( @"Warning",  @"IDS",  @"%@ - Could not find session with uniqueID %@ to accept invitation, ignoring...");
    }
  }
}

- (void)acceptInvitation:(id)a3 withData:(id)a4 messageContext:(id)a5
{
  uint64_t v8 = (__CFString *)a3;
  id v9 = (__CFString *)a4;
  id v10 = a5;
  uint64_t v11 = OSLogHandleForIDSCategory("IDSDaemon");
  id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)os_activity_scope_state_s buf = 138412546;
    uint64_t v23 = v8;
    __int16 v24 = 2112;
    unsigned __int8 v25 = v9;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "acceptInvitation %@ with data %@", buf, 0x16u);
  }

  if (os_log_shim_legacy_logging_enabled(v13) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    __int16 v20 = v8;
    uint64_t v21 = v9;
    *(void *)&double v14 = _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"acceptInvitation %@ with data %@").n128_u64[0];
  }

  id v15 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon _sessionWithUniqueID:messageContext:requiredEntitlement:]( self,  "_sessionWithUniqueID:messageContext:requiredEntitlement:",  v8,  v10,  kIDSSessionPrivateEntitlement,  v14,  v20,  v21));
  uint64_t v16 = v15;
  if (v15)
  {
    [v15 acceptInvitationWithData:v9];
  }

  else
  {
    uint64_t v17 = OSLogHandleForIDSCategory("Warning");
    id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)os_activity_scope_state_s buf = 138412546;
      uint64_t v23 = @"IDSDaemon";
      __int16 v24 = 2112;
      unsigned __int8 v25 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "%@ - Could not find session with uniqueID %@ to accept invitation with data with, ignoring...",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v19))
    {
      _IDSWarnV( @"IDSFoundation",  @"%@ - Could not find session with uniqueID %@ to accept invitation with data with, ignoring...");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"%@ - Could not find session with uniqueID %@ to accept invitation with data with, ignoring...");
      _IDSLogTransport( @"Warning",  @"IDS",  @"%@ - Could not find session with uniqueID %@ to accept invitation with data with, ignoring...");
    }
  }
}

- (void)cancelInvitation:(id)a3 messageContext:(id)a4
{
  id v6 = (__CFString *)a3;
  id v7 = a4;
  uint64_t v8 = OSLogHandleForIDSCategory("IDSDaemon");
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)os_activity_scope_state_s buf = 138412290;
    uint64_t v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "cancelInvitation %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v10) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    uint64_t v17 = v6;
    *(void *)&double v11 = _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon", @"cancelInvitation %@").n128_u64[0];
  }

  id v12 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon _sessionWithUniqueID:messageContext:requiredEntitlement:]( self,  "_sessionWithUniqueID:messageContext:requiredEntitlement:",  v6,  v7,  kIDSSessionEntitlement,  v11,  v17));
  uint64_t v13 = v12;
  if (v12)
  {
    [v12 cancelInvitation];
  }

  else
  {
    uint64_t v14 = OSLogHandleForIDSCategory("Warning");
    id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)os_activity_scope_state_s buf = 138412546;
      uint64_t v19 = @"IDSDaemon";
      __int16 v20 = 2112;
      uint64_t v21 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "%@ - Could not find session with uniqueID %@ to cancel invitation, ignoring...",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v16))
    {
      _IDSWarnV( @"IDSFoundation",  @"%@ - Could not find session with uniqueID %@ to cancel invitation, ignoring...");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"%@ - Could not find session with uniqueID %@ to cancel invitation, ignoring...");
      _IDSLogTransport( @"Warning",  @"IDS",  @"%@ - Could not find session with uniqueID %@ to cancel invitation, ignoring...");
    }
  }
}

- (void)cancelInvitation:(id)a3 withData:(id)a4 messageContext:(id)a5
{
  uint64_t v8 = (__CFString *)a3;
  id v9 = (__CFString *)a4;
  id v10 = a5;
  uint64_t v11 = OSLogHandleForIDSCategory("IDSDaemon");
  id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)os_activity_scope_state_s buf = 138412546;
    uint64_t v23 = v8;
    __int16 v24 = 2112;
    unsigned __int8 v25 = v9;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "cancelInvitation %@ with data %@", buf, 0x16u);
  }

  if (os_log_shim_legacy_logging_enabled(v13) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    __int16 v20 = v8;
    uint64_t v21 = v9;
    *(void *)&double v14 = _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"cancelInvitation %@ with data %@").n128_u64[0];
  }

  id v15 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon _sessionWithUniqueID:messageContext:requiredEntitlement:]( self,  "_sessionWithUniqueID:messageContext:requiredEntitlement:",  v8,  v10,  kIDSSessionPrivateEntitlement,  v14,  v20,  v21));
  uint64_t v16 = v15;
  if (v15)
  {
    [v15 cancelInvitationWithData:v9];
  }

  else
  {
    uint64_t v17 = OSLogHandleForIDSCategory("Warning");
    id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)os_activity_scope_state_s buf = 138412546;
      uint64_t v23 = @"IDSDaemon";
      __int16 v24 = 2112;
      unsigned __int8 v25 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "%@ - Could not find session with uniqueID %@ to cancel invitation with data with, ignoring...",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v19))
    {
      _IDSWarnV( @"IDSFoundation",  @"%@ - Could not find session with uniqueID %@ to cancel invitation with data with, ignoring...");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"%@ - Could not find session with uniqueID %@ to cancel invitation with data with, ignoring...");
      _IDSLogTransport( @"Warning",  @"IDS",  @"%@ - Could not find session with uniqueID %@ to cancel invitation with data with, ignoring...");
    }
  }
}

- (void)cancelInvitation:(id)a3 withRemoteEndedReasonOverride:(unsigned int)a4 messageContext:(id)a5
{
  uint64_t v6 = *(void *)&a4;
  uint64_t v8 = (__CFString *)a3;
  id v9 = a5;
  uint64_t v10 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)os_activity_scope_state_s buf = 138412546;
    id v22 = v8;
    __int16 v23 = 1024;
    LODWORD(v24) = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "cancelInvitation %@ with remote ended reason override %u",  buf,  0x12u);
  }

  if (os_log_shim_legacy_logging_enabled(v12) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    uint64_t v19 = v8;
    uint64_t v20 = v6;
    *(void *)&double v13 = _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"cancelInvitation %@ with remote ended reason override %u").n128_u64[0];
  }

  double v14 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon _sessionWithUniqueID:messageContext:requiredEntitlement:]( self,  "_sessionWithUniqueID:messageContext:requiredEntitlement:",  v8,  v9,  kIDSSessionPrivateEntitlement,  v13,  v19,  v20));
  id v15 = v14;
  if (v14)
  {
    [v14 cancelInvitationWithRemoteEndedReasonOverride:v6];
  }

  else
  {
    uint64_t v16 = OSLogHandleForIDSCategory("Warning");
    uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)os_activity_scope_state_s buf = 138412546;
      id v22 = @"IDSDaemon";
      __int16 v23 = 2112;
      __int16 v24 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "%@ - Could not find session with uniqueID %@ to cancel invitation with remote ended reason override with, ignoring...",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v18))
    {
      _IDSWarnV( @"IDSFoundation",  @"%@ - Could not find session with uniqueID %@ to cancel invitation with remote ended reason override with, ignoring...");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"%@ - Could not find session with uniqueID %@ to cancel invitation with remote ended reason override with, ignoring...");
      _IDSLogTransport( @"Warning",  @"IDS",  @"%@ - Could not find session with uniqueID %@ to cancel invitation with remote ended reason override with, ignoring...");
    }
  }
}

- (void)declineInvitation:(id)a3 messageContext:(id)a4
{
  uint64_t v6 = (__CFString *)a3;
  id v7 = a4;
  uint64_t v8 = OSLogHandleForIDSCategory("IDSDaemon");
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)os_activity_scope_state_s buf = 138412290;
    uint64_t v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "declineInvitation %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v10) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    uint64_t v17 = v6;
    *(void *)&double v11 = _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon", @"declineInvitation %@").n128_u64[0];
  }

  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon _sessionWithUniqueID:messageContext:requiredEntitlement:]( self,  "_sessionWithUniqueID:messageContext:requiredEntitlement:",  v6,  v7,  kIDSSessionEntitlement,  v11,  v17));
  double v13 = v12;
  if (v12)
  {
    [v12 declineInvitation];
  }

  else
  {
    uint64_t v14 = OSLogHandleForIDSCategory("Warning");
    id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)os_activity_scope_state_s buf = 138412546;
      uint64_t v19 = @"IDSDaemon";
      __int16 v20 = 2112;
      uint64_t v21 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "%@ - Could not find session with uniqueID %@ to decline invitation, ignoring...",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v16))
    {
      _IDSWarnV( @"IDSFoundation",  @"%@ - Could not find session with uniqueID %@ to decline invitation, ignoring...");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"%@ - Could not find session with uniqueID %@ to decline invitation, ignoring...");
      _IDSLogTransport( @"Warning",  @"IDS",  @"%@ - Could not find session with uniqueID %@ to decline invitation, ignoring...");
    }
  }
}

- (void)declineInvitation:(id)a3 withData:(id)a4 messageContext:(id)a5
{
  uint64_t v8 = (__CFString *)a3;
  id v9 = (__CFString *)a4;
  id v10 = a5;
  uint64_t v11 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)os_activity_scope_state_s buf = 138412546;
    __int16 v23 = v8;
    __int16 v24 = 2112;
    unsigned __int8 v25 = v9;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "declineInvitation %@ with data %@", buf, 0x16u);
  }

  if (os_log_shim_legacy_logging_enabled(v13) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    __int16 v20 = v8;
    uint64_t v21 = v9;
    *(void *)&double v14 = _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"declineInvitation %@ with data %@").n128_u64[0];
  }

  id v15 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon _sessionWithUniqueID:messageContext:requiredEntitlement:]( self,  "_sessionWithUniqueID:messageContext:requiredEntitlement:",  v8,  v10,  kIDSSessionPrivateEntitlement,  v14,  v20,  v21));
  uint64_t v16 = v15;
  if (v15)
  {
    [v15 declineInvitationWithData:v9];
  }

  else
  {
    uint64_t v17 = OSLogHandleForIDSCategory("Warning");
    uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)os_activity_scope_state_s buf = 138412546;
      __int16 v23 = @"IDSDaemon";
      __int16 v24 = 2112;
      unsigned __int8 v25 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "%@ - Could not find session with uniqueID %@ to decline invitation with data with, ignoring...",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v19))
    {
      _IDSWarnV( @"IDSFoundation",  @"%@ - Could not find session with uniqueID %@ to decline invitation with data with, ignoring...");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"%@ - Could not find session with uniqueID %@ to decline invitation with data with, ignoring...");
      _IDSLogTransport( @"Warning",  @"IDS",  @"%@ - Could not find session with uniqueID %@ to decline invitation with data with, ignoring...");
    }
  }
}

- (void)reconnectSessionWithUniqueID:(id)a3 messageContext:(id)a4
{
  uint64_t v6 = (__CFString *)a3;
  id v7 = a4;
  uint64_t v8 = OSLogHandleForIDSCategory("IDSDaemon");
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)os_activity_scope_state_s buf = 138412290;
    uint64_t v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "reconnectSessionWithUniqueID %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v10) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    uint64_t v17 = v6;
    *(void *)&double v11 = _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"reconnectSessionWithUniqueID %@").n128_u64[0];
  }

  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon _sessionWithUniqueID:messageContext:requiredEntitlement:]( self,  "_sessionWithUniqueID:messageContext:requiredEntitlement:",  v6,  v7,  kIDSSessionEntitlement,  v11,  v17));
  uint64_t v13 = v12;
  if (v12)
  {
    [v12 reconnectSession];
  }

  else
  {
    uint64_t v14 = OSLogHandleForIDSCategory("Warning");
    id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)os_activity_scope_state_s buf = 138412546;
      uint64_t v19 = @"IDSDaemon";
      __int16 v20 = 2112;
      uint64_t v21 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "%@ - Could not find session with uniqueID %@ to reconnect session, ignoring...",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v16))
    {
      _IDSWarnV( @"IDSFoundation",  @"%@ - Could not find session with uniqueID %@ to reconnect session, ignoring...");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"%@ - Could not find session with uniqueID %@ to reconnect session, ignoring...");
      _IDSLogTransport( @"Warning",  @"IDS",  @"%@ - Could not find session with uniqueID %@ to reconnect session, ignoring...");
    }
  }
}

- (void)endSession:(id)a3 messageContext:(id)a4
{
  uint64_t v6 = (__CFString *)a3;
  id v7 = a4;
  uint64_t v8 = OSLogHandleForIDSCategory("IDSDaemon");
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)os_activity_scope_state_s buf = 138412290;
    uint64_t v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "endSession %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v10) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    uint64_t v17 = v6;
    *(void *)&double v11 = _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon", @"endSession %@").n128_u64[0];
  }

  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon _sessionWithUniqueID:messageContext:requiredEntitlement:]( self,  "_sessionWithUniqueID:messageContext:requiredEntitlement:",  v6,  v7,  kIDSSessionEntitlement,  v11,  v17));
  uint64_t v13 = v12;
  if (v12)
  {
    [v12 endSession];
  }

  else
  {
    uint64_t v14 = OSLogHandleForIDSCategory("Warning");
    id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)os_activity_scope_state_s buf = 138412546;
      uint64_t v19 = @"IDSDaemon";
      __int16 v20 = 2112;
      uint64_t v21 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "%@ - Could not find session with uniqueID %@ to end session, ignoring...",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v16))
    {
      _IDSWarnV( @"IDSFoundation",  @"%@ - Could not find session with uniqueID %@ to end session, ignoring...");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"%@ - Could not find session with uniqueID %@ to end session, ignoring...");
      _IDSLogTransport( @"Warning",  @"IDS",  @"%@ - Could not find session with uniqueID %@ to end session, ignoring...");
    }
  }
}

- (void)endSession:(id)a3 withData:(id)a4 messageContext:(id)a5
{
  uint64_t v8 = (__CFString *)a3;
  id v9 = a4;
  id v10 = a5;
  uint64_t v11 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)os_activity_scope_state_s buf = 138412546;
    __int16 v23 = v8;
    __int16 v24 = 2048;
    unsigned __int8 v25 = (__CFString *)[v9 length];
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "endSessionWithData %@ (data length %lu)",  buf,  0x16u);
  }

  if (os_log_shim_legacy_logging_enabled(v13) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    __int16 v20 = v8;
    id v21 = [v9 length];
    *(void *)&double v14 = _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"endSessionWithData %@ (data length %lu)").n128_u64[0];
  }

  id v15 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon _sessionWithUniqueID:messageContext:requiredEntitlement:]( self,  "_sessionWithUniqueID:messageContext:requiredEntitlement:",  v8,  v10,  kIDSSessionPrivateEntitlement,  v14,  v20,  v21));
  uint64_t v16 = v15;
  if (v15)
  {
    [v15 endSessionWithData:v9];
  }

  else
  {
    uint64_t v17 = OSLogHandleForIDSCategory("Warning");
    uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)os_activity_scope_state_s buf = 138412546;
      __int16 v23 = @"IDSDaemon";
      __int16 v24 = 2112;
      unsigned __int8 v25 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "%@ - Could not find session with uniqueID %@ to end session with data, ignoring...",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v19))
    {
      _IDSWarnV( @"IDSFoundation",  @"%@ - Could not find session with uniqueID %@ to end session with data, ignoring...");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"%@ - Could not find session with uniqueID %@ to end session with data, ignoring...");
      _IDSLogTransport( @"Warning",  @"IDS",  @"%@ - Could not find session with uniqueID %@ to end session with data, ignoring...");
    }
  }
}

- (void)sendSessionMessage:(id)a3 toDestinations:(id)a4 forSessionWithUniqueID:(id)a5 messageContext:(id)a6
{
  id v10 = (__CFString *)a3;
  id v11 = a4;
  id v12 = a5;
  id v13 = a6;
  uint64_t v14 = OSLogHandleForIDSCategory("IDSDaemon");
  id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)os_activity_scope_state_s buf = 138412802;
    id v27 = v10;
    __int16 v28 = 2112;
    id v29 = v12;
    __int16 v30 = 2112;
    id v31 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "sendSessionMessage %@ to session %@ with context %@",  buf,  0x20u);
  }

  if (os_log_shim_legacy_logging_enabled(v16) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    id v24 = v12;
    id v25 = v13;
    __int16 v23 = v10;
    *(void *)&double v17 = _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"sendSessionMessage %@ to session %@ with context %@").n128_u64[0];
  }

  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon _sessionWithUniqueID:messageContext:requiredEntitlement:]( self,  "_sessionWithUniqueID:messageContext:requiredEntitlement:",  v12,  v13,  kIDSSessionPrivateEntitlement,  v17,  v23,  v24,  v25));
  uint64_t v19 = v18;
  if (v18)
  {
    [v18 sendSessionMessage:v10 toDestinations:v11];
  }

  else
  {
    uint64_t v20 = OSLogHandleForIDSCategory("Warning");
    id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)os_activity_scope_state_s buf = 138412546;
      id v27 = @"IDSDaemon";
      __int16 v28 = 2112;
      id v29 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "%@ - Could not find session with uniqueID %@ to send message to, ignoring...",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v22))
    {
      _IDSWarnV( @"IDSFoundation",  @"%@ - Could not find session with uniqueID %@ to send message to, ignoring...");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"%@ - Could not find session with uniqueID %@ to send message to, ignoring...");
      _IDSLogTransport( @"Warning",  @"IDS",  @"%@ - Could not find session with uniqueID %@ to send message to, ignoring...");
    }
  }
}

- (void)setAudioEnabled:(BOOL)a3 forSessionWithUniqueID:(id)a4 messageContext:(id)a5
{
  BOOL v6 = a3;
  uint64_t v8 = (__CFString *)a4;
  id v9 = a5;
  uint64_t v10 = OSLogHandleForIDSCategory("IDSDaemon");
  id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    id v12 = @"NO";
    if (v6) {
      id v12 = @"YES";
    }
    *(_DWORD *)os_activity_scope_state_s buf = 138412546;
    id v24 = v8;
    __int16 v25 = 2112;
    id v26 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "setAudioEnabled:forSessionWithUniqueID %@ %@",  buf,  0x16u);
  }

  if (os_log_shim_legacy_logging_enabled(v13) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    id v15 = @"NO";
    if (v6) {
      id v15 = @"YES";
    }
    id v21 = v8;
    uint64_t v22 = v15;
    *(void *)&double v14 = _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"setAudioEnabled:forSessionWithUniqueID %@ %@").n128_u64[0];
  }

  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon _sessionWithUniqueID:messageContext:requiredEntitlement:]( self,  "_sessionWithUniqueID:messageContext:requiredEntitlement:",  v8,  v9,  kIDSSessionEntitlement,  v14,  v21,  v22));
  double v17 = v16;
  if (v16)
  {
    [v16 setAudioEnabled:v6];
  }

  else
  {
    uint64_t v18 = OSLogHandleForIDSCategory("Warning");
    uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)os_activity_scope_state_s buf = 138412546;
      id v24 = @"IDSDaemon";
      __int16 v25 = 2112;
      id v26 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "%@ - Could not find session with uniqueID %@ to set audio enabled, ignoring...",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v20))
    {
      _IDSWarnV( @"IDSFoundation",  @"%@ - Could not find session with uniqueID %@ to set audio enabled, ignoring...");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"%@ - Could not find session with uniqueID %@ to set audio enabled, ignoring...");
      _IDSLogTransport( @"Warning",  @"IDS",  @"%@ - Could not find session with uniqueID %@ to set audio enabled, ignoring...");
    }
  }
}

- (void)setMuted:(BOOL)a3 forSessionWithUniqueID:(id)a4 messageContext:(id)a5
{
  BOOL v6 = a3;
  uint64_t v8 = (__CFString *)a4;
  id v9 = a5;
  uint64_t v10 = OSLogHandleForIDSCategory("IDSDaemon");
  id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    id v12 = @"NO";
    if (v6) {
      id v12 = @"YES";
    }
    *(_DWORD *)os_activity_scope_state_s buf = 138412546;
    id v24 = v8;
    __int16 v25 = 2112;
    id v26 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "setMuted:forSessionWithUniqueID %@ %@",  buf,  0x16u);
  }

  if (os_log_shim_legacy_logging_enabled(v13) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    id v15 = @"NO";
    if (v6) {
      id v15 = @"YES";
    }
    id v21 = v8;
    uint64_t v22 = v15;
    *(void *)&double v14 = _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"setMuted:forSessionWithUniqueID %@ %@").n128_u64[0];
  }

  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon _sessionWithUniqueID:messageContext:requiredEntitlement:]( self,  "_sessionWithUniqueID:messageContext:requiredEntitlement:",  v8,  v9,  kIDSSessionEntitlement,  v14,  v21,  v22));
  double v17 = v16;
  if (v16)
  {
    [v16 setMuted:v6];
  }

  else
  {
    uint64_t v18 = OSLogHandleForIDSCategory("Warning");
    uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)os_activity_scope_state_s buf = 138412546;
      id v24 = @"IDSDaemon";
      __int16 v25 = 2112;
      id v26 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "%@ - Could not find session with uniqueID %@ to set muted, ignoring...",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v20))
    {
      _IDSWarnV(@"IDSFoundation", @"%@ - Could not find session with uniqueID %@ to set muted, ignoring...");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"%@ - Could not find session with uniqueID %@ to set muted, ignoring...");
      _IDSLogTransport( @"Warning",  @"IDS",  @"%@ - Could not find session with uniqueID %@ to set muted, ignoring...");
    }
  }
}

- (void)setPreferences:(id)a3 forSessionWithUniqueID:(id)a4 messageContext:(id)a5
{
  uint64_t v8 = (__CFString *)a3;
  id v9 = (__CFString *)a4;
  id v10 = a5;
  uint64_t v11 = OSLogHandleForIDSCategory("IDSDaemon");
  id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)os_activity_scope_state_s buf = 138412546;
    __int16 v23 = v9;
    __int16 v24 = 2112;
    __int16 v25 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "setPreferences:forSessionWithUniqueID %@ %@",  buf,  0x16u);
  }

  if (os_log_shim_legacy_logging_enabled(v13) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    uint64_t v20 = v9;
    id v21 = v8;
    *(void *)&double v14 = _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"setPreferences:forSessionWithUniqueID %@ %@").n128_u64[0];
  }

  id v15 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon _sessionWithUniqueID:messageContext:requiredEntitlement:]( self,  "_sessionWithUniqueID:messageContext:requiredEntitlement:",  v9,  v10,  kIDSSessionEntitlement,  v14,  v20,  v21));
  uint64_t v16 = v15;
  if (v15)
  {
    [v15 setPreferences:v8];
  }

  else
  {
    uint64_t v17 = OSLogHandleForIDSCategory("Warning");
    uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)os_activity_scope_state_s buf = 138412546;
      __int16 v23 = @"IDSDaemon";
      __int16 v24 = 2112;
      __int16 v25 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "%@ - Could not find session with uniqueID %@ to set preferences, ignoring...",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v19))
    {
      _IDSWarnV( @"IDSFoundation",  @"%@ - Could not find session with uniqueID %@ to set preferences, ignoring...");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"%@ - Could not find session with uniqueID %@ to set preferences, ignoring...");
      _IDSLogTransport( @"Warning",  @"IDS",  @"%@ - Could not find session with uniqueID %@ to set preferences, ignoring...");
    }
  }
}

- (void)setRequiredCapabilities:(id)a3 requiredLackOfCapabilities:(id)a4 forSessionWithUniqueID:(id)a5 messageContext:(id)a6
{
  id v10 = (__CFString *)a3;
  id v11 = a4;
  id v12 = (__CFString *)a5;
  id v13 = a6;
  uint64_t v14 = OSLogHandleForIDSCategory("IDSDaemon");
  id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)os_activity_scope_state_s buf = 138412802;
    id v27 = v12;
    __int16 v28 = 2112;
    id v29 = v10;
    __int16 v30 = 2112;
    id v31 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "setRequiredCapabilities:requiredCapabilities:forSessionWithUniqueID %@ %@ %@",  buf,  0x20u);
  }

  if (os_log_shim_legacy_logging_enabled(v16) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    __int16 v24 = v10;
    id v25 = v11;
    __int16 v23 = v12;
    *(void *)&double v17 = _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"setRequiredCapabilities:requiredCapabilities:forSessionWithUniqueID %@ %@ %@").n128_u64[0];
  }

  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon _sessionWithUniqueID:messageContext:requiredEntitlement:]( self,  "_sessionWithUniqueID:messageContext:requiredEntitlement:",  v12,  v13,  kIDSSessionEntitlement,  v17,  v23,  v24,  v25));
  uint64_t v19 = v18;
  if (v18)
  {
    [v18 setRequiredCapabilities:v10 requiredLackOfCapabilities:v11];
  }

  else
  {
    uint64_t v20 = OSLogHandleForIDSCategory("Warning");
    id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)os_activity_scope_state_s buf = 138412546;
      id v27 = @"IDSDaemon";
      __int16 v28 = 2112;
      id v29 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "%@ - Could not find session with uniqueID %@ to set preferences, ignoring...",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v22))
    {
      _IDSWarnV( @"IDSFoundation",  @"%@ - Could not find session with uniqueID %@ to set preferences, ignoring...");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"%@ - Could not find session with uniqueID %@ to set preferences, ignoring...");
      _IDSLogTransport( @"Warning",  @"IDS",  @"%@ - Could not find session with uniqueID %@ to set preferences, ignoring...");
    }
  }
}

- (void)setInviteTimetout:(int64_t)a3 forSessionWithUniqueID:(id)a4 messageContext:(id)a5
{
  uint64_t v8 = (__CFString *)a4;
  id v9 = a5;
  uint64_t v10 = OSLogHandleForIDSCategory("IDSDaemon");
  id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)os_activity_scope_state_s buf = 138412546;
    uint64_t v22 = v8;
    __int16 v23 = 2048;
    int64_t v24 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "setInviteTimeout:forSessionWithUniqueID %@ %ld",  buf,  0x16u);
  }

  if (os_log_shim_legacy_logging_enabled(v12) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    uint64_t v19 = v8;
    int64_t v20 = a3;
    *(void *)&double v13 = _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"setInviteTimeout:forSessionWithUniqueID %@ %ld").n128_u64[0];
  }

  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon _sessionWithUniqueID:messageContext:requiredEntitlement:]( self,  "_sessionWithUniqueID:messageContext:requiredEntitlement:",  v8,  v9,  kIDSSessionEntitlement,  v13,  v19,  v20));
  id v15 = v14;
  if (v14)
  {
    [v14 setInviteTimeout:a3];
  }

  else
  {
    uint64_t v16 = OSLogHandleForIDSCategory("Warning");
    double v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)os_activity_scope_state_s buf = 138412546;
      uint64_t v22 = @"IDSDaemon";
      __int16 v23 = 2112;
      int64_t v24 = (int64_t)v8;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "%@ - Could not find session with uniqueID %@ to set invite timeout, ignoring...",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v18))
    {
      _IDSWarnV( @"IDSFoundation",  @"%@ - Could not find session with uniqueID %@ to set invite timeout, ignoring...");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"%@ - Could not find session with uniqueID %@ to set invite timeout, ignoring...");
      _IDSLogTransport( @"Warning",  @"IDS",  @"%@ - Could not find session with uniqueID %@ to set invite timeout, ignoring...");
    }
  }
}

- (void)acknowledgeSessionID:(id)a3 clientID:(id)a4 messageContext:(id)a5
{
  uint64_t v8 = (__CFString *)a3;
  id v9 = (__CFString *)a4;
  id v10 = a5;
  uint64_t v11 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)os_activity_scope_state_s buf = 138412546;
    id v25 = v8;
    __int16 v26 = 2112;
    id v27 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "acknowledge sessionID: %@ clientID: %@",  buf,  0x16u);
  }

  if (os_log_shim_legacy_logging_enabled(v13) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    uint64_t v22 = v8;
    __int16 v23 = v9;
    *(void *)&double v14 = _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"acknowledge sessionID: %@ clientID: %@").n128_u64[0];
  }

  id v15 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon _sessionWithUniqueID:messageContext:requiredEntitlement:]( self,  "_sessionWithUniqueID:messageContext:requiredEntitlement:",  v8,  v10,  kIDSSessionEntitlement,  v14,  v22,  v23));
  if (v15)
  {
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v10 localObject]);
    id v17 = sub_1001103E8(v9, v16);
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
    [v15 setClientID:v18];
  }

  else
  {
    uint64_t v19 = OSLogHandleForIDSCategory("Warning");
    int64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)os_activity_scope_state_s buf = 138412546;
      id v25 = @"IDSDaemon";
      __int16 v26 = 2112;
      id v27 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "%@ - Could not find session with uniqueID %@ to acknowledge session ID, ignoring...",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v21))
    {
      _IDSWarnV( @"IDSFoundation",  @"%@ - Could not find session with uniqueID %@ to acknowledge session ID, ignoring...");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"%@ - Could not find session with uniqueID %@ to acknowledge session ID, ignoring...");
      _IDSLogTransport( @"Warning",  @"IDS",  @"%@ - Could not find session with uniqueID %@ to acknowledge session ID, ignoring...");
    }
  }
}

- (void)sendAllocationRequest:(id)a3 options:(id)a4 messageContext:(id)a5
{
  uint64_t v8 = (__CFString *)a3;
  id v9 = a4;
  id v10 = a5;
  uint64_t v11 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)os_activity_scope_state_s buf = 138412290;
    id v27 = v8;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "sendAllocationRequest %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v13) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    id v25 = v8;
    *(void *)&double v14 = _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon", @"sendAllocationRequest %@").n128_u64[0];
  }

  id v15 = (void *)objc_claimAutoreleasedReturnValue(+[IMLockdownManager sharedInstance](&OBJC_CLASS___IMLockdownManager, "sharedInstance", v14, v25));
  unsigned __int8 v16 = [v15 isInternalInstall];

  if ((v16 & 1) != 0)
  {
    id v17 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon _sessionWithUniqueID:messageContext:requiredEntitlement:]( self,  "_sessionWithUniqueID:messageContext:requiredEntitlement:",  v8,  v10,  kIDSSessionEntitlement));
    uint64_t v18 = v17;
    if (v17)
    {
      [v17 sendAllocationRequest:v9];
    }

    else
    {
      uint64_t v22 = OSLogHandleForIDSCategory("Warning");
      __int16 v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)os_activity_scope_state_s buf = 138412546;
        id v27 = @"IDSDaemon";
        __int16 v28 = 2112;
        id v29 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_ERROR,  "%@ - Could not find session with uniqueID %@ to send allocation request, ignoring...",  buf,  0x16u);
      }

      if (os_log_shim_legacy_logging_enabled(v24))
      {
        _IDSWarnV( @"IDSFoundation",  @"%@ - Could not find session with uniqueID %@ to send allocation request, ignoring...");
        _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"%@ - Could not find session with uniqueID %@ to send allocation request, ignoring...");
        _IDSLogTransport( @"Warning",  @"IDS",  @"%@ - Could not find session with uniqueID %@ to send allocation request, ignoring...");
      }
    }
  }

  else
  {
    uint64_t v19 = OSLogHandleForIDSCategory("Warning");
    int64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)os_activity_scope_state_s buf = 138412290;
      id v27 = @"IDSDaemon";
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "%@ - Operation supported on internal install only",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v21))
    {
      _IDSWarnV(@"IDSFoundation", @"%@ - Operation supported on internal install only");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"%@ - Operation supported on internal install only");
      _IDSLogTransport(@"Warning", @"IDS", @"%@ - Operation supported on internal install only");
    }
  }
}

- (void)updateMembers:(id)a3 forGroup:(id)a4 sessionID:(id)a5 withContext:(id)a6 messagingCapabilities:(id)a7 triggeredLocally:(BOOL)a8 lightweightStatusDict:(id)a9 messageContext:(id)a10
{
  BOOL v10 = a8;
  id v16 = a3;
  id v17 = a4;
  id v18 = a5;
  id v19 = a6;
  id v20 = a7;
  id v21 = a9;
  id v22 = a10;
  uint64_t v23 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    id v25 = [v21 count];
    __int16 v26 = @"NO";
    *(_DWORD *)os_activity_scope_state_s buf = 138413570;
    *(void *)&uint8_t buf[4] = v16;
    if (v10) {
      __int16 v26 = @"YES";
    }
    *(_WORD *)&_BYTE buf[12] = 2112;
    *(void *)&buf[14] = v17;
    __int16 v42 = 2112;
    id v43 = v19;
    __int16 v44 = 2112;
    id v45 = v20;
    __int16 v46 = 2112;
    uint64_t v47 = v26;
    __int16 v48 = 2048;
    id v49 = v25;
    _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "updateMembers %@, for Group %@, context %@, capabilities %@, triggered locally %@, lightweightStatusDict count:%lu",  buf,  0x3Eu);
  }

  if (os_log_shim_legacy_logging_enabled(v27) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    if (v10) {
      id v29 = @"YES";
    }
    else {
      id v29 = @"NO";
    }
    uint64_t v39 = v29;
    id v40 = [v21 count];
    id v37 = v19;
    id v38 = v20;
    id v35 = v16;
    id v36 = v17;
    *(void *)&double v28 = _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"updateMembers %@, for Group %@, context %@, capabilities %@, triggered locally %@, lightweightStatusDict count:%lu").n128_u64[0];
  }

  __int16 v30 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon _sessionWithUniqueID:messageContext:requiredEntitlement:]( self,  "_sessionWithUniqueID:messageContext:requiredEntitlement:",  v18,  v22,  kIDSSessionEntitlement,  v28,  v35,  v36,  v37,  v38,  v39,  v40,  *(_OWORD *)buf));
  id v31 = v30;
  if (v30)
  {
    [v30 updateMembers:v16 withContext:v19 messagingCapabilities:v20 triggeredLocally:v10 lightweightStatusDict:v21];
  }

  else
  {
    uint64_t v32 = OSLogHandleForIDSCategory("Warning");
    uint64_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)os_activity_scope_state_s buf = 138412546;
      *(void *)&uint8_t buf[4] = @"IDSDaemon";
      *(_WORD *)&_BYTE buf[12] = 2112;
      *(void *)&buf[14] = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_ERROR,  "%@ - Could not find session with uniqueID %@ to update members, ignoring...",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v34))
    {
      _IDSWarnV( @"IDSFoundation",  @"%@ - Could not find session with uniqueID %@ to update members, ignoring...");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"%@ - Could not find session with uniqueID %@ to update members, ignoring...");
      _IDSLogTransport( @"Warning",  @"IDS",  @"%@ - Could not find session with uniqueID %@ to update members, ignoring...");
    }
  }
}

- (void)manageDesignatedMembers:(id)a3 forGroup:(id)a4 sessionID:(id)a5 withType:(unsigned __int16)a6 messageContext:(id)a7
{
  uint64_t v8 = a6;
  uint64_t v12 = (__CFString *)a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a7;
  uint64_t v16 = OSLogHandleForIDSCategory("IDSDaemon");
  id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)os_activity_scope_state_s buf = 138412802;
    id v29 = v12;
    __int16 v30 = 2112;
    id v31 = v13;
    __int16 v32 = 1024;
    int v33 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "manageDesignatedMembers %@, for Group %@, type: %u",  buf,  0x1Cu);
  }

  if (os_log_shim_legacy_logging_enabled(v18) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    id v26 = v13;
    uint64_t v27 = v8;
    id v25 = v12;
    *(void *)&double v19 = _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"manageDesignatedMembers %@, for Group %@, type: %u").n128_u64[0];
  }

  id v20 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon _sessionWithUniqueID:messageContext:requiredEntitlement:]( self,  "_sessionWithUniqueID:messageContext:requiredEntitlement:",  v14,  v15,  kIDSSessionEntitlement,  v19,  v25,  v26,  v27));
  id v21 = v20;
  if (v20)
  {
    [v20 manageDesignatedMembers:v12 withType:v8];
  }

  else
  {
    uint64_t v22 = OSLogHandleForIDSCategory("Warning");
    uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)os_activity_scope_state_s buf = 138412546;
      id v29 = @"IDSDaemon";
      __int16 v30 = 2112;
      id v31 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_ERROR,  "%@ - Could not find session with uniqueID %@ to update members, ignoring...",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v24))
    {
      _IDSWarnV( @"IDSFoundation",  @"%@ - Could not find session with uniqueID %@ to update members, ignoring...");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"%@ - Could not find session with uniqueID %@ to update members, ignoring...");
      _IDSLogTransport( @"Warning",  @"IDS",  @"%@ - Could not find session with uniqueID %@ to update members, ignoring...");
    }
  }
}

- (void)removeParticipantIDs:(id)a3 forGroup:(id)a4 sessionID:(id)a5 messageContext:(id)a6
{
  BOOL v10 = (__CFString *)a3;
  id v11 = a4;
  id v12 = a5;
  id v13 = a6;
  uint64_t v14 = OSLogHandleForIDSCategory("IDSDaemon");
  id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)os_activity_scope_state_s buf = 138412546;
    id v26 = v10;
    __int16 v27 = 2112;
    id v28 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "removeParticipantIDs %@, for Group %@",  buf,  0x16u);
  }

  if (os_log_shim_legacy_logging_enabled(v16) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    uint64_t v23 = v10;
    id v24 = v11;
    *(void *)&double v17 = _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"removeParticipantIDs %@, for Group %@").n128_u64[0];
  }

  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon _sessionWithUniqueID:messageContext:requiredEntitlement:]( self,  "_sessionWithUniqueID:messageContext:requiredEntitlement:",  v12,  v13,  kIDSSessionEntitlement,  v17,  v23,  v24));
  double v19 = v18;
  if (v18)
  {
    [v18 removeParticipantIDs:v10];
  }

  else
  {
    uint64_t v20 = OSLogHandleForIDSCategory("Warning");
    id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)os_activity_scope_state_s buf = 138412546;
      id v26 = @"IDSDaemon";
      __int16 v27 = 2112;
      id v28 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "%@ - Could not find session with uniqueID %@ to removeParticipantIDs, ignoring...",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v22))
    {
      _IDSWarnV( @"IDSFoundation",  @"%@ - Could not find session with uniqueID %@ to removeParticipantIDs, ignoring...");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"%@ - Could not find session with uniqueID %@ to removeParticipantIDs, ignoring...");
      _IDSLogTransport( @"Warning",  @"IDS",  @"%@ - Could not find session with uniqueID %@ to removeParticipantIDs, ignoring...");
    }
  }
}

- (void)updateParticipantData:(id)a3 forGroup:(id)a4 sessionID:(id)a5 withContext:(id)a6 messageContext:(id)a7
{
  id v12 = (__CFString *)a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  id v16 = a7;
  uint64_t v17 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)os_activity_scope_state_s buf = 138412802;
    __int16 v30 = v12;
    __int16 v31 = 2112;
    id v32 = v13;
    __int16 v33 = 2112;
    id v34 = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "updateParticipantData %@, for Group %@, context %@",  buf,  0x20u);
  }

  if (os_log_shim_legacy_logging_enabled(v19) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    id v27 = v13;
    id v28 = v15;
    id v26 = v12;
    *(void *)&double v20 = _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"updateParticipantData %@, for Group %@, context %@").n128_u64[0];
  }

  id v21 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon _sessionWithUniqueID:messageContext:requiredEntitlement:]( self,  "_sessionWithUniqueID:messageContext:requiredEntitlement:",  v14,  v16,  kIDSSessionEntitlement,  v20,  v26,  v27,  v28));
  uint64_t v22 = v21;
  if (v21)
  {
    [v21 updateParticipantData:v12 withContext:v15];
  }

  else
  {
    uint64_t v23 = OSLogHandleForIDSCategory("Warning");
    id v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)os_activity_scope_state_s buf = 138412546;
      __int16 v30 = @"IDSDaemon";
      __int16 v31 = 2112;
      id v32 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_ERROR,  "%@ - Could not find session with uniqueID %@ to update members, ignoring...",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v25))
    {
      _IDSWarnV( @"IDSFoundation",  @"%@ - Could not find session with uniqueID %@ to update members, ignoring...");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"%@ - Could not find session with uniqueID %@ to update members, ignoring...");
      _IDSLogTransport( @"Warning",  @"IDS",  @"%@ - Could not find session with uniqueID %@ to update members, ignoring...");
    }
  }
}

- (void)updateParticipantInfo:(id)a3 forGroup:(id)a4 sessionID:(id)a5 messageContext:(id)a6
{
  BOOL v10 = (__CFString *)a3;
  id v11 = a4;
  id v12 = a5;
  id v13 = a6;
  uint64_t v14 = OSLogHandleForIDSCategory("IDSDaemon");
  id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)os_activity_scope_state_s buf = 138412546;
    id v26 = v10;
    __int16 v27 = 2112;
    id v28 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "updateParticipantData %@, for Group %@",  buf,  0x16u);
  }

  if (os_log_shim_legacy_logging_enabled(v16) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    uint64_t v23 = v10;
    id v24 = v11;
    *(void *)&double v17 = _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"updateParticipantData %@, for Group %@").n128_u64[0];
  }

  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon _sessionWithUniqueID:messageContext:requiredEntitlement:]( self,  "_sessionWithUniqueID:messageContext:requiredEntitlement:",  v12,  v13,  kIDSSessionEntitlement,  v17,  v23,  v24));
  uint64_t v19 = v18;
  if (v18)
  {
    [v18 updateParticipantInfo:v10];
  }

  else
  {
    uint64_t v20 = OSLogHandleForIDSCategory("Warning");
    id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)os_activity_scope_state_s buf = 138412546;
      id v26 = @"IDSDaemon";
      __int16 v27 = 2112;
      id v28 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "%@ - Could not find session with uniqueID %@ to update members, ignoring...",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v22))
    {
      _IDSWarnV( @"IDSFoundation",  @"%@ - Could not find session with uniqueID %@ to update members, ignoring...");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"%@ - Could not find session with uniqueID %@ to update members, ignoring...");
      _IDSLogTransport( @"Warning",  @"IDS",  @"%@ - Could not find session with uniqueID %@ to update members, ignoring...");
    }
  }
}

- (void)updateParticipantType:(unsigned __int16)a3 forGroup:(id)a4 sessionID:(id)a5 members:(id)a6 triggeredLocally:(BOOL)a7 withContext:(id)a8 lightweightStatusDict:(id)a9 messageContext:(id)a10
{
  BOOL v11 = a7;
  uint64_t v14 = a3;
  id v16 = a4;
  id v17 = a5;
  id v18 = a6;
  id v19 = a8;
  id v20 = a9;
  id v21 = a10;
  uint64_t v22 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)os_activity_scope_state_s buf = 67109634;
    *(_DWORD *)id v35 = v14;
    *(_WORD *)&uint8_t v35[4] = 2112;
    *(void *)&v35[6] = v16;
    *(_WORD *)&v35[14] = 2112;
    *(void *)&v35[16] = v19;
    _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "updateParticipantType %u, for Group %@, context %@",  buf,  0x1Cu);
  }

  if (os_log_shim_legacy_logging_enabled(v24) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    id v32 = v16;
    id v33 = v19;
    uint64_t v31 = v14;
    *(void *)&double v25 = _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"updateParticipantType %u, for Group %@, context %@").n128_u64[0];
  }

  id v26 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon _sessionWithUniqueID:messageContext:requiredEntitlement:]( self,  "_sessionWithUniqueID:messageContext:requiredEntitlement:",  v17,  v21,  kIDSSessionEntitlement,  v25,  v31,  v32,  v33));
  __int16 v27 = v26;
  if (v26)
  {
    [v26 updateParticipantType:v14 members:v18 triggeredLocally:v11 withContext:v19 lightweightStatusDict:v20];
  }

  else
  {
    uint64_t v28 = OSLogHandleForIDSCategory("Warning");
    id v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)os_activity_scope_state_s buf = 138412546;
      *(void *)id v35 = @"IDSDaemon";
      *(_WORD *)&v35[8] = 2112;
      *(void *)&v35[10] = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_ERROR,  "%@ - Could not find session with uniqueID %@ to update participantType, ignoring...",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v30))
    {
      _IDSWarnV( @"IDSFoundation",  @"%@ - Could not find session with uniqueID %@ to update participantType, ignoring...");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"%@ - Could not find session with uniqueID %@ to update participantType, ignoring...");
      _IDSLogTransport( @"Warning",  @"IDS",  @"%@ - Could not find session with uniqueID %@ to update participantType, ignoring...");
    }
  }
}

- (void)joinGroupSession:(id)a3 withOptions:(id)a4 messageContext:(id)a5
{
  uint64_t v8 = (__CFString *)a3;
  id v9 = (__CFString *)a4;
  id v10 = a5;
  uint64_t v11 = OSLogHandleForIDSCategory("IDSDaemon");
  id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)os_activity_scope_state_s buf = 138412546;
    uint64_t v23 = v8;
    __int16 v24 = 2112;
    double v25 = v9;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "joinGroupSession %@, options: %@", buf, 0x16u);
  }

  if (os_log_shim_legacy_logging_enabled(v13) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    id v20 = v8;
    id v21 = v9;
    *(void *)&double v14 = _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"joinGroupSession %@, options: %@").n128_u64[0];
  }

  id v15 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon _sessionWithUniqueID:messageContext:requiredEntitlement:]( self,  "_sessionWithUniqueID:messageContext:requiredEntitlement:",  v8,  v10,  kIDSSessionEntitlement,  v14,  v20,  v21));
  id v16 = v15;
  if (v15)
  {
    [v15 joinWithOptions:v9 messageContext:v10];
  }

  else
  {
    uint64_t v17 = OSLogHandleForIDSCategory("Warning");
    id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)os_activity_scope_state_s buf = 138412546;
      uint64_t v23 = @"IDSDaemon";
      __int16 v24 = 2112;
      double v25 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "%@ - Could not find session with uniqueID %@ to join group session, ignoring...",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v19))
    {
      _IDSWarnV( @"IDSFoundation",  @"%@ - Could not find session with uniqueID %@ to join group session, ignoring...");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"%@ - Could not find session with uniqueID %@ to join group session, ignoring...");
      _IDSLogTransport( @"Warning",  @"IDS",  @"%@ - Could not find session with uniqueID %@ to join group session, ignoring...");
    }
  }
}

- (void)setQuickRelayUserTypeForSession:(id)a3 withUserType:(unsigned __int16)a4 messageContext:(id)a5
{
  uint64_t v6 = a4;
  id v8 = a3;
  id v9 = a5;
  uint64_t v10 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)os_activity_scope_state_s buf = 67109120;
    LODWORD(v21) = v6;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "setQuickRelayUserTypeForSession %u", buf, 8u);
  }

  if (os_log_shim_legacy_logging_enabled(v12) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    uint64_t v19 = v6;
    *(void *)&double v13 = _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"setQuickRelayUserTypeForSession %u").n128_u64[0];
  }

  double v14 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon _sessionWithUniqueID:messageContext:requiredEntitlement:]( self,  "_sessionWithUniqueID:messageContext:requiredEntitlement:",  v8,  v9,  kIDSSessionEntitlement,  v13,  v19));
  id v15 = v14;
  if (v14)
  {
    [v14 setQuickRelayUserTypeForSession:v6];
  }

  else
  {
    uint64_t v16 = OSLogHandleForIDSCategory("Warning");
    uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)os_activity_scope_state_s buf = 138412546;
      id v21 = @"IDSDaemon";
      __int16 v22 = 2112;
      id v23 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "%@ - Could not find session with uniqueID %@ to update members, ignoring...",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v18))
    {
      _IDSWarnV( @"IDSFoundation",  @"%@ - Could not find session with uniqueID %@ to update members, ignoring...");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"%@ - Could not find session with uniqueID %@ to update members, ignoring...");
      _IDSLogTransport( @"Warning",  @"IDS",  @"%@ - Could not find session with uniqueID %@ to update members, ignoring...");
    }
  }
}

- (void)leaveGroupSession:(id)a3 participantInfo:(id)a4 options:(id)a5 messageContext:(id)a6
{
  uint64_t v10 = (__CFString *)a3;
  uint64_t v11 = (__CFString *)a4;
  id v12 = a5;
  id v13 = a6;
  uint64_t v14 = OSLogHandleForIDSCategory("IDSDaemon");
  id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)os_activity_scope_state_s buf = 138412802;
    __int16 v27 = v10;
    __int16 v28 = 2112;
    id v29 = v11;
    __int16 v30 = 2112;
    id v31 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "leaveGroupSession %@, participantInfo: %@ options: %@",  buf,  0x20u);
  }

  if (os_log_shim_legacy_logging_enabled(v16) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    __int16 v24 = v11;
    id v25 = v12;
    id v23 = v10;
    *(void *)&double v17 = _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"leaveGroupSession %@, participantInfo: %@ options: %@").n128_u64[0];
  }

  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon _sessionWithUniqueID:messageContext:requiredEntitlement:]( self,  "_sessionWithUniqueID:messageContext:requiredEntitlement:",  v10,  v13,  kIDSSessionEntitlement,  v17,  v23,  v24,  v25));
  uint64_t v19 = v18;
  if (v18)
  {
    [v18 leaveGroupSession:v11 options:v12];
  }

  else
  {
    uint64_t v20 = OSLogHandleForIDSCategory("Warning");
    id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)os_activity_scope_state_s buf = 138412546;
      __int16 v27 = @"IDSDaemon";
      __int16 v28 = 2112;
      id v29 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "%@ - Could not find session with uniqueID %@ to leave group session, ignoring...",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v22))
    {
      _IDSWarnV( @"IDSFoundation",  @"%@ - Could not find session with uniqueID %@ to leave group session, ignoring...");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"%@ - Could not find session with uniqueID %@ to leave group session, ignoring...");
      _IDSLogTransport( @"Warning",  @"IDS",  @"%@ - Could not find session with uniqueID %@ to leave group session, ignoring...");
    }
  }
}

- (void)requestActiveParticipantsForGroupSession:(id)a3 messageContext:(id)a4
{
  uint64_t v6 = (__CFString *)a3;
  id v7 = a4;
  uint64_t v8 = OSLogHandleForIDSCategory("IDSDaemon");
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)os_activity_scope_state_s buf = 138412290;
    uint64_t v19 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "requestActiveParticipants for group session: %@",  buf,  0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v10) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    double v17 = v6;
    *(void *)&double v11 = _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"requestActiveParticipants for group session: %@").n128_u64[0];
  }

  id v12 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon _sessionWithUniqueID:messageContext:requiredEntitlement:]( self,  "_sessionWithUniqueID:messageContext:requiredEntitlement:",  v6,  v7,  kIDSSessionEntitlement,  v11,  v17));
  if (v12)
  {
    id v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjectsAndKeys:",  &off_100948088,  IDSGlobalLinkOptionSessionInfoRequestTypeKey,  0LL));
    [v12 requestSessionInfoWithOptions:v13];
  }

  else
  {
    uint64_t v14 = OSLogHandleForIDSCategory("Warning");
    id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)os_activity_scope_state_s buf = 138412546;
      uint64_t v19 = @"IDSDaemon";
      __int16 v20 = 2112;
      id v21 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "%@ - Could not find session with uniqueID %@ for requestActiveParticipants, ignoring...",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v16))
    {
      _IDSWarnV( @"IDSFoundation",  @"%@ - Could not find session with uniqueID %@ for requestActiveParticipants, ignoring...");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"%@ - Could not find session with uniqueID %@ for requestActiveParticipants, ignoring...");
      _IDSLogTransport( @"Warning",  @"IDS",  @"%@ - Could not find session with uniqueID %@ for requestActiveParticipants, ignoring...");
    }
  }
}

- (void)requestURIsForParticipantIDs:(id)a3 withRequestID:(id)a4 forGroupSession:(id)a5 messageContext:(id)a6
{
  id v10 = a3;
  id v11 = a4;
  id v12 = (__CFString *)a5;
  id v13 = a6;
  uint64_t v14 = OSLogHandleForIDSCategory("IDSDaemon");
  id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)os_activity_scope_state_s buf = 138412290;
    id v25 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "requestURIsForParticipantIDs for group session: %@",  buf,  0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v16) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    id v23 = v12;
    *(void *)&double v17 = _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"requestURIsForParticipantIDs for group session: %@").n128_u64[0];
  }

  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon _sessionWithUniqueID:messageContext:requiredEntitlement:]( self,  "_sessionWithUniqueID:messageContext:requiredEntitlement:",  v12,  v13,  kIDSSessionEntitlement,  v17,  v23));
  uint64_t v19 = v18;
  if (v18)
  {
    [v18 requestURIsForParticipantIDs:v10 withRequestID:v11];
  }

  else
  {
    uint64_t v20 = OSLogHandleForIDSCategory("Warning");
    id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)os_activity_scope_state_s buf = 138412546;
      id v25 = @"IDSDaemon";
      __int16 v26 = 2112;
      __int16 v27 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "%@ - Could not find session with uniqueID %@ for requestActiveParticipants, ignoring...",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v22))
    {
      _IDSWarnV( @"IDSFoundation",  @"%@ - Could not find session with uniqueID %@ for requestActiveParticipants, ignoring...");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"%@ - Could not find session with uniqueID %@ for requestActiveParticipants, ignoring...");
      _IDSLogTransport( @"Warning",  @"IDS",  @"%@ - Could not find session with uniqueID %@ for requestActiveParticipants, ignoring...");
    }
  }
}

- (void)registerPluginForGroup:(id)a3 options:(id)a4 messageContext:(id)a5
{
  uint64_t v8 = (__CFString *)a3;
  id v9 = (__CFString *)a4;
  id v10 = a5;
  uint64_t v11 = OSLogHandleForIDSCategory("IDSDaemon");
  id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)os_activity_scope_state_s buf = 138412546;
    id v23 = v8;
    __int16 v24 = 2112;
    id v25 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "registerPluginForGroup %@, options: %@",  buf,  0x16u);
  }

  if (os_log_shim_legacy_logging_enabled(v13) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    uint64_t v20 = v8;
    id v21 = v9;
    *(void *)&double v14 = _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"registerPluginForGroup %@, options: %@").n128_u64[0];
  }

  id v15 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon _sessionWithUniqueID:messageContext:requiredEntitlement:]( self,  "_sessionWithUniqueID:messageContext:requiredEntitlement:",  v8,  v10,  kIDSSessionEntitlement,  v14,  v20,  v21));
  uint64_t v16 = v15;
  if (v15)
  {
    [v15 registerPluginWithOptions:v9 messageContext:v10];
  }

  else
  {
    uint64_t v17 = OSLogHandleForIDSCategory("Warning");
    uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)os_activity_scope_state_s buf = 138412546;
      id v23 = @"IDSDaemon";
      __int16 v24 = 2112;
      id v25 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "%@ - Could not find session with uniqueID %@ to register plugin, ignoring...",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v19))
    {
      _IDSWarnV( @"IDSFoundation",  @"%@ - Could not find session with uniqueID %@ to register plugin, ignoring...");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"%@ - Could not find session with uniqueID %@ to register plugin, ignoring...");
      _IDSLogTransport( @"Warning",  @"IDS",  @"%@ - Could not find session with uniqueID %@ to register plugin, ignoring...");
    }
  }
}

- (void)unregisterPluginForGroup:(id)a3 options:(id)a4 messageContext:(id)a5
{
  uint64_t v8 = (__CFString *)a3;
  id v9 = (__CFString *)a4;
  id v10 = a5;
  uint64_t v11 = OSLogHandleForIDSCategory("IDSDaemon");
  id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)os_activity_scope_state_s buf = 138412546;
    id v23 = v8;
    __int16 v24 = 2112;
    id v25 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "unregisterPluginForGroup %@, options: %@",  buf,  0x16u);
  }

  if (os_log_shim_legacy_logging_enabled(v13) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    uint64_t v20 = v8;
    id v21 = v9;
    *(void *)&double v14 = _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"unregisterPluginForGroup %@, options: %@").n128_u64[0];
  }

  id v15 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon _sessionWithUniqueID:messageContext:requiredEntitlement:]( self,  "_sessionWithUniqueID:messageContext:requiredEntitlement:",  v8,  v10,  kIDSSessionEntitlement,  v14,  v20,  v21));
  uint64_t v16 = v15;
  if (v15)
  {
    [v15 unregisterPluginWithOptions:v9 messageContext:v10];
  }

  else
  {
    uint64_t v17 = OSLogHandleForIDSCategory("Warning");
    uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)os_activity_scope_state_s buf = 138412546;
      id v23 = @"IDSDaemon";
      __int16 v24 = 2112;
      id v25 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "%@ - Could not find session with uniqueID %@ to unregister plugin, ignoring...",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v19))
    {
      _IDSWarnV( @"IDSFoundation",  @"%@ - Could not find session with uniqueID %@ to unregister plugin, ignoring...");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"%@ - Could not find session with uniqueID %@ to unregister plugin, ignoring...");
      _IDSLogTransport( @"Warning",  @"IDS",  @"%@ - Could not find session with uniqueID %@ to unregister plugin, ignoring...");
    }
  }
}

- (void)requestEncryptionKeyForGroup:(id)a3 participants:(id)a4 messageContext:(id)a5
{
  uint64_t v8 = (__CFString *)a3;
  id v9 = a4;
  id v10 = a5;
  uint64_t v11 = OSLogHandleForIDSCategory("IDSDaemon");
  id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)os_activity_scope_state_s buf = 138412802;
    __int16 v24 = v8;
    __int16 v25 = 2048;
    id v26 = [v9 count];
    __int16 v27 = 2112;
    id v28 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "requestEncryptionKeyForGroup %@, for %lu participants %@",  buf,  0x20u);
  }

  if (os_log_shim_legacy_logging_enabled(v13) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    id v21 = [v9 count];
    id v22 = v9;
    uint64_t v20 = v8;
    *(void *)&double v14 = _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"requestEncryptionKeyForGroup %@, for %lu participants %@").n128_u64[0];
  }

  id v15 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon _sessionWithUniqueID:messageContext:requiredEntitlement:]( self,  "_sessionWithUniqueID:messageContext:requiredEntitlement:",  v8,  v10,  kIDSSessionEntitlement,  v14,  v20,  v21,  v22));
  uint64_t v16 = v15;
  if (v15)
  {
    [v15 requestEncryptionKeyForParticipantIDs:v9];
  }

  else
  {
    uint64_t v17 = OSLogHandleForIDSCategory("Warning");
    uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)os_activity_scope_state_s buf = 138412546;
      __int16 v24 = @"IDSDaemon";
      __int16 v25 = 2112;
      id v26 = 0LL;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "%@ - Could not find session with uniqueID %@ to request encryption keys, ignoring...",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v19))
    {
      _IDSWarnV( @"IDSFoundation",  @"%@ - Could not find session with uniqueID %@ to request encryption keys, ignoring...");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"%@ - Could not find session with uniqueID %@ to request encryption keys, ignoring...");
      _IDSLogTransport( @"Warning",  @"IDS",  @"%@ - Could not find session with uniqueID %@ to request encryption keys, ignoring...");
    }
  }
}

- (void)createAliasForParticipantID:(unint64_t)a3 salt:(id)a4 sessionID:(id)a5 messageContext:(id)a6
{
  id v10 = a4;
  id v11 = a5;
  id v12 = a6;
  uint64_t v13 = OSLogHandleForIDSCategory("IDSDaemon");
  double v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)os_activity_scope_state_s buf = 134218242;
    __int16 v25 = (const __CFString *)a3;
    __int16 v26 = 2112;
    id v27 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "createAliasForParticipantID %llu salt %@",  buf,  0x16u);
  }

  if (os_log_shim_legacy_logging_enabled(v15) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    unint64_t v22 = a3;
    id v23 = v10;
    *(void *)&double v16 = _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"createAliasForParticipantID %llu salt %@").n128_u64[0];
  }

  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon _sessionWithUniqueID:messageContext:requiredEntitlement:]( self,  "_sessionWithUniqueID:messageContext:requiredEntitlement:",  v11,  v12,  kIDSSessionEntitlement,  v16,  v22,  v23));
  uint64_t v18 = v17;
  if (v17)
  {
    [v17 createAliasForParticipantID:a3 salt:v10];
  }

  else
  {
    uint64_t v19 = OSLogHandleForIDSCategory("Warning");
    uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)os_activity_scope_state_s buf = 138412546;
      __int16 v25 = @"IDSDaemon";
      __int16 v26 = 2112;
      id v27 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "%@ - Could not find session with uniqueID %@ to update members, ignoring...",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v21))
    {
      _IDSWarnV( @"IDSFoundation",  @"%@ - Could not find session with uniqueID %@ to update members, ignoring...");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"%@ - Could not find session with uniqueID %@ to update members, ignoring...");
      _IDSLogTransport( @"Warning",  @"IDS",  @"%@ - Could not find session with uniqueID %@ to update members, ignoring...");
    }
  }
}

- (void)getParticipantIDForAlias:(unint64_t)a3 salt:(id)a4 sessionID:(id)a5 messageContext:(id)a6
{
  id v10 = a4;
  id v11 = a5;
  id v12 = a6;
  uint64_t v13 = OSLogHandleForIDSCategory("IDSDaemon");
  double v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)os_activity_scope_state_s buf = 134218242;
    __int16 v25 = (const __CFString *)a3;
    __int16 v26 = 2112;
    id v27 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "getParticipantIDForAlias %llu salt %@",  buf,  0x16u);
  }

  if (os_log_shim_legacy_logging_enabled(v15) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    unint64_t v22 = a3;
    id v23 = v10;
    *(void *)&double v16 = _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"getParticipantIDForAlias %llu salt %@").n128_u64[0];
  }

  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon _sessionWithUniqueID:messageContext:requiredEntitlement:]( self,  "_sessionWithUniqueID:messageContext:requiredEntitlement:",  v11,  v12,  kIDSSessionEntitlement,  v16,  v22,  v23));
  uint64_t v18 = v17;
  if (v17)
  {
    [v17 getParticipantIDForAlias:a3 salt:v10];
  }

  else
  {
    uint64_t v19 = OSLogHandleForIDSCategory("Warning");
    uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)os_activity_scope_state_s buf = 138412546;
      __int16 v25 = @"IDSDaemon";
      __int16 v26 = 2112;
      id v27 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "%@ - Could not find session with uniqueID %@ to update members, ignoring...",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v21))
    {
      _IDSWarnV( @"IDSFoundation",  @"%@ - Could not find session with uniqueID %@ to update members, ignoring...");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"%@ - Could not find session with uniqueID %@ to update members, ignoring...");
      _IDSLogTransport( @"Warning",  @"IDS",  @"%@ - Could not find session with uniqueID %@ to update members, ignoring...");
    }
  }
}

- (void)enableP2PlinksForSession:(id)a3 messageContext:(id)a4
{
  uint64_t v6 = (__CFString *)a3;
  id v7 = a4;
  uint64_t v8 = OSLogHandleForIDSCategory("IDSDaemon");
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)os_activity_scope_state_s buf = 138412290;
    uint64_t v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "enableP2PlinksForSession %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v10) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    uint64_t v17 = v6;
    *(void *)&double v11 = _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon", @"enableP2PlinksForSession %@").n128_u64[0];
  }

  id v12 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon _sessionWithUniqueID:messageContext:requiredEntitlement:]( self,  "_sessionWithUniqueID:messageContext:requiredEntitlement:",  v6,  v7,  kIDSSessionEntitlement,  v11,  v17));
  uint64_t v13 = v12;
  if (v12)
  {
    [v12 enableP2Plinks];
  }

  else
  {
    uint64_t v14 = OSLogHandleForIDSCategory("Warning");
    uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)os_activity_scope_state_s buf = 138412546;
      uint64_t v19 = @"IDSDaemon";
      __int16 v20 = 2112;
      uint64_t v21 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "%@ - Could not find session with uniqueID %@ to update members, ignoring...",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v16))
    {
      _IDSWarnV( @"IDSFoundation",  @"%@ - Could not find session with uniqueID %@ to update members, ignoring...");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"%@ - Could not find session with uniqueID %@ to update members, ignoring...");
      _IDSLogTransport( @"Warning",  @"IDS",  @"%@ - Could not find session with uniqueID %@ to update members, ignoring...");
    }
  }
}

- (void)setForceTCPFallbackOnWiFiUsingReinitiate:(BOOL)a3 forSessionWithUniqueID:(id)a4 messageContext:(id)a5
{
  BOOL v6 = a3;
  id v8 = a4;
  id v9 = a5;
  uint64_t v10 = OSLogHandleForIDSCategory("IDSDaemon");
  double v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    id v12 = @"NO";
    if (v6) {
      id v12 = @"YES";
    }
    *(_DWORD *)os_activity_scope_state_s buf = 138412546;
    __int16 v24 = v12;
    __int16 v25 = 2112;
    id v26 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "setForceTCPFallbackOnWiFiUsingReinitiate: %@ %@",  buf,  0x16u);
  }

  if (os_log_shim_legacy_logging_enabled(v13) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    uint64_t v15 = @"NO";
    if (v6) {
      uint64_t v15 = @"YES";
    }
    uint64_t v21 = v15;
    id v22 = v8;
    *(void *)&double v14 = _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"setForceTCPFallbackOnWiFiUsingReinitiate: %@ %@").n128_u64[0];
  }

  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon _sessionWithUniqueID:messageContext:requiredEntitlement:]( self,  "_sessionWithUniqueID:messageContext:requiredEntitlement:",  v8,  v9,  kIDSSessionEntitlement,  v14,  v21,  v22));
  uint64_t v17 = v16;
  if (v16)
  {
    [v16 setForceTCPFallbackOnWiFiUsingReinitiate:v6];
  }

  else
  {
    uint64_t v18 = OSLogHandleForIDSCategory("Warning");
    uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)os_activity_scope_state_s buf = 138412546;
      __int16 v24 = @"IDSDaemon";
      __int16 v25 = 2112;
      id v26 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "%@ - Could not find session with uniqueID %@ to setForceTCPFallbackOnWiFiUsingReinitiate, ignoring...",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v20))
    {
      _IDSWarnV( @"IDSFoundation",  @"%@ - Could not find session with uniqueID %@ to setForceTCPFallbackOnWiFiUsingReinitiate, ignoring...");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"%@ - Could not find session with uniqueID %@ to setForceTCPFallbackOnWiFiUsingReinitiate, ignoring...");
      _IDSLogTransport( @"Warning",  @"IDS",  @"%@ - Could not find session with uniqueID %@ to setForceTCPFallbackOnWiFiUsingReinitiate, ignoring...");
    }
  }
}

- (void)setForceTCPFallbackOnCellUsingReinitiate:(BOOL)a3 forSessionWithUniqueID:(id)a4 messageContext:(id)a5
{
  BOOL v6 = a3;
  id v8 = a4;
  id v9 = a5;
  uint64_t v10 = OSLogHandleForIDSCategory("IDSDaemon");
  double v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    id v12 = @"NO";
    if (v6) {
      id v12 = @"YES";
    }
    *(_DWORD *)os_activity_scope_state_s buf = 138412546;
    __int16 v24 = v12;
    __int16 v25 = 2112;
    id v26 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "setForceTCPFallbackOnCellUsingReinitiate: %@ %@",  buf,  0x16u);
  }

  if (os_log_shim_legacy_logging_enabled(v13) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    uint64_t v15 = @"NO";
    if (v6) {
      uint64_t v15 = @"YES";
    }
    uint64_t v21 = v15;
    id v22 = v8;
    *(void *)&double v14 = _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"setForceTCPFallbackOnCellUsingReinitiate: %@ %@").n128_u64[0];
  }

  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon _sessionWithUniqueID:messageContext:requiredEntitlement:]( self,  "_sessionWithUniqueID:messageContext:requiredEntitlement:",  v8,  v9,  kIDSSessionEntitlement,  v14,  v21,  v22));
  uint64_t v17 = v16;
  if (v16)
  {
    [v16 setForceTCPFallbackOnCellUsingReinitiate:v6];
  }

  else
  {
    uint64_t v18 = OSLogHandleForIDSCategory("Warning");
    uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)os_activity_scope_state_s buf = 138412546;
      __int16 v24 = @"IDSDaemon";
      __int16 v25 = 2112;
      id v26 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "%@ - Could not find session with uniqueID %@ to setForceTCPFallbackOnCellUsingReinitiate, ignoring...",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v20))
    {
      _IDSWarnV( @"IDSFoundation",  @"%@ - Could not find session with uniqueID %@ to setForceTCPFallbackOnCellUsingReinitiate, ignoring...");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"%@ - Could not find session with uniqueID %@ to setForceTCPFallbackOnCellUsingReinitiate, ignoring...");
      _IDSLogTransport( @"Warning",  @"IDS",  @"%@ - Could not find session with uniqueID %@ to setForceTCPFallbackOnCellUsingReinitiate, ignoring...");
    }
  }
}

@end