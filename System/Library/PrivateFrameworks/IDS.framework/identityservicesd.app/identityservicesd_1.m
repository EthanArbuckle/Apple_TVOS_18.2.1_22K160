void sub_1001040BC(uint64_t a1, void *a2)
{
  id v4;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a2);
  v4 = a2;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10010410C(uint64_t a1, int a2)
{
  v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5 = @"NO";
    if (a2) {
      v5 = @"YES";
    }
    *(_DWORD *)buf = 138412290;
    v13 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Trusted device upsert task final block called {timedOut: %@}",  buf,  0xCu);
  }

  v6 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100104250;
  block[3] = &unk_1008FA6C0;
  char v11 = a2;
  block[4] = *(void *)(a1 + 32);
  __int128 v8 = *(_OWORD *)(a1 + 40);
  id v7 = (id)v8;
  __int128 v10 = v8;
  dispatch_async(v6, block);
}

uint64_t sub_100104250(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 56))
  {
    uint64_t v2 = objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _clientErrorWithCode:-4000 debugDescription:@"Timed out upserting key transparency device record" underlyingError:0]);
    uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8LL);
    v4 = *(void **)(v3 + 40);
    *(void *)(v3 + 40) = v2;
  }

  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))( result,  *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL));
  }
  return result;
}

void sub_10010452C(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  id v6 = a4;
  if ((a3 & 1) != 0)
  {
    id v7 = *(void **)(a1 + 32);
    double v8 = *(double *)(a1 + 72);
    uint64_t v9 = *(unsigned __int8 *)(a1 + 80);
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472LL;
    v21[2] = sub_100104700;
    v21[3] = &unk_1008FA7A8;
    id v10 = *(id *)(a1 + 64);
    uint64_t v11 = *(void *)(a1 + 32);
    v12 = *(void **)(a1 + 40);
    id v25 = v10;
    v21[4] = v11;
    id v22 = v12;
    id v23 = *(id *)(a1 + 48);
    id v24 = *(id *)(a1 + 56);
    char v27 = *(_BYTE *)(a1 + 80);
    uint64_t v26 = *(void *)(a1 + 72);
    [v7 _createZoneIfNeededUsingTimeIntervalForRequest:v9 isNonDiscretionary:v21 completion:v8];

    v13 = v25;
LABEL_13:

    goto LABEL_14;
  }

  v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
  BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v15)
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Device to device encryption is not currently able to be determined for this CloudKit container -- not upserting trusted device record",  buf,  2u);
    }

    uint64_t v16 = *(void *)(a1 + 64);
    if (v16)
    {
      v17 = *(void **)(a1 + 32);
      v18 = @"Failed to fetch device-to-device encryption availability status";
      uint64_t v19 = -1000LL;
      id v20 = v6;
LABEL_12:
      v13 = (void *)objc_claimAutoreleasedReturnValue([v17 _clientErrorWithCode:v19 debugDescription:v18 underlyingError:v20]);
      (*(void (**)(uint64_t, void *))(v16 + 16))(v16, v13);
      goto LABEL_13;
    }
  }

  else
  {
    if (v15)
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Device to device encryption is not currently available for this CloudKit container -- not upserting trusted device record",  buf,  2u);
    }

    uint64_t v16 = *(void *)(a1 + 64);
    if (v16)
    {
      v17 = *(void **)(a1 + 32);
      v18 = @"Device-to-device encryption is not available";
      uint64_t v19 = -3000LL;
      id v20 = 0LL;
      goto LABEL_12;
    }
  }

void sub_100104700(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!v3)
  {
    id v6 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _cloudKitRecordForDeviceRecord:*(void *)(a1 + 40)]);
    if (v7)
    {
      -[NSMutableArray addObject:](v6, "addObject:", v7);
      __int128 v39 = 0u;
      __int128 v40 = 0u;
      __int128 v37 = 0u;
      __int128 v38 = 0u;
      id v8 = *(id *)(a1 + 48);
      id v9 = [v8 countByEnumeratingWithState:&v37 objects:v43 count:16];
      if (v9)
      {
        id v10 = v9;
        uint64_t v11 = *(void *)v38;
        do
        {
          for (i = 0LL; i != v10; i = (char *)i + 1)
          {
            if (*(void *)v38 != v11) {
              objc_enumerationMutation(v8);
            }
            v13 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _cloudKitRecordForDeviceRecord:*(void *)(*((void *)&v37 + 1) + 8 * (void)i)]);
            -[NSMutableArray addObject:](v6, "addObject:", v13);
          }

          id v10 = [v8 countByEnumeratingWithState:&v37 objects:v43 count:16];
        }

        while (v10);
      }

      v14 = *(void **)(a1 + 56);
      v36[0] = _NSConcreteStackBlock;
      v36[1] = 3221225472LL;
      v36[2] = sub_100104B64;
      v36[3] = &unk_1008FA730;
      v36[4] = *(void *)(a1 + 32);
      BOOL v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "__imArrayByApplyingBlock:", v36));
      if (qword_1009BEAB8 != -1) {
        dispatch_once(&qword_1009BEAB8, &stru_1008FAA98);
      }
      uint64_t v16 = (void *)qword_1009BEAB0;
      if (!qword_1009BEAB0)
      {
        v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
        if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT)) {
          sub_10069BE84();
        }

        uint64_t v16 = (void *)qword_1009BEAB0;
      }

      id v18 = [objc_alloc((Class)v16) initWithRecordsToSave:v6 recordIDsToDelete:v15];
      [v18 setSavePolicy:2];
      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) container]);
      id v20 = (void *)objc_claimAutoreleasedReturnValue([v18 configuration]);
      [v20 setContainer:v19];

      if (*(_BYTE *)(a1 + 80))
      {
        v21 = (void *)objc_claimAutoreleasedReturnValue([v18 configuration]);
        [v21 setDiscretionaryNetworkBehavior:0];
      }

      double v22 = *(double *)(a1 + 72);
      id v23 = (void *)objc_claimAutoreleasedReturnValue([v18 configuration]);
      [v23 setTimeoutIntervalForRequest:v22];

      v29 = _NSConcreteStackBlock;
      uint64_t v30 = 3221225472LL;
      v31 = sub_100104B70;
      v32 = &unk_1008FA780;
      uint64_t v33 = *(void *)(a1 + 32);
      id v35 = *(id *)(a1 + 64);
      id v34 = *(id *)(a1 + 40);
      [v18 setModifyRecordsCompletionBlock:&v29];
      id v24 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog KeyTransparency]( &OBJC_CLASS___IDSFoundationLog,  "KeyTransparency",  v29,  v30,  v31,  v32,  v33));
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        id v42 = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "Starting CloudKit operation to modify (save) KT record {operation: %@}",  buf,  0xCu);
      }

      id v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
      [v25 addOperation:v18];
    }

    else
    {
      uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
        sub_10069BE24();
      }

      uint64_t v27 = *(void *)(a1 + 64);
      if (v27)
      {
        v28 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _clientErrorWithCode:-2000 debugDescription:@"Unable to create CloudKit record for provided device record" underlyingError:0]);
        (*(void (**)(uint64_t, void *))(v27 + 16))(v27, v28);
      }
    }

    goto LABEL_30;
  }

  v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_10069BF00();
  }

  uint64_t v5 = *(void *)(a1 + 64);
  if (v5)
  {
    id v6 = (NSMutableArray *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _clientErrorWithCode:-1000 debugDescription:0 underlyingError:v3]);
    (*(void (**)(uint64_t, NSMutableArray *))(v5 + 16))(v5, v6);
LABEL_30:
  }
}

id sub_100104B64(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _recordIDForDeviceRecord:a2];
}

void sub_100104B70(id *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([a1[4] queue]);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  v15[2] = sub_100104C80;
  v15[3] = &unk_1008FA758;
  id v16 = v7;
  id v17 = v8;
  id v11 = a1[4];
  id v18 = v9;
  id v19 = v11;
  id v21 = a1[6];
  id v20 = a1[5];
  id v12 = v9;
  id v13 = v8;
  id v14 = v7;
  dispatch_async(v10, v15);
}

void sub_100104C80(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v5 = *(void *)(a1 + 48);
    int v12 = 138412802;
    uint64_t v13 = v3;
    __int16 v14 = 2112;
    uint64_t v15 = v4;
    __int16 v16 = 2112;
    uint64_t v17 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Completed CloudKit save record operation {savedRecords: %@, deletedRecordIDs: %@, operationError: %@}",  (uint8_t *)&v12,  0x20u);
  }

  uint64_t v6 = *(void *)(a1 + 48);
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
  id v8 = v7;
  if (v6)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_10069BF2C();
    }

    [*(id *)(a1 + 56) setCachedRecordZone:0];
    uint64_t v9 = *(void *)(a1 + 72);
    if (v9)
    {
      id v10 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 56) _clientErrorWithCode:-1000 debugDescription:0 underlyingError:*(void *)(a1 + 48)]);
      (*(void (**)(uint64_t, void *))(v9 + 16))(v9, v10);
    }
  }

  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v12) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "CloudKit save operation for trusted device succeeded",  (uint8_t *)&v12,  2u);
    }

    [*(id *)(a1 + 56) setLastSuccessfulUpsertDeviceRecord:*(void *)(a1 + 64)];
    uint64_t v11 = *(void *)(a1 + 72);
    if (v11) {
      (*(void (**)(uint64_t, void))(v11 + 16))(v11, 0LL);
    }
  }

void sub_100105100( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

void sub_100105128(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001051C8;
  block[3] = &unk_1008F96D8;
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  id v9 = v3;
  uint64_t v10 = v6;
  block[4] = v5;
  id v7 = v3;
  dispatch_async(v4, block);
}

void sub_1001051C8(uint64_t a1)
{
  v1 = *(void **)(a1 + 32);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_100105244;
  v4[3] = &unk_1008FA648;
  __int128 v3 = *(_OWORD *)(a1 + 40);
  id v2 = (id)v3;
  __int128 v5 = v3;
  objc_msgSend(v1, "_no_timeout_nukeKeyTransparencyDeviceRecordsWithCompletion:", v4);
}

void sub_100105244(uint64_t a1, void *a2)
{
  id v4 = a2;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100105294(uint64_t a1, int a2)
{
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    __int128 v5 = @"NO";
    if (a2) {
      __int128 v5 = @"YES";
    }
    *(_DWORD *)buf = 138412290;
    uint64_t v13 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Key transparency device record nuke task final block called {timedOut: %@}",  buf,  0xCu);
  }

  uint64_t v6 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001053D8;
  block[3] = &unk_1008FA6C0;
  char v11 = a2;
  block[4] = *(void *)(a1 + 32);
  __int128 v8 = *(_OWORD *)(a1 + 40);
  id v7 = (id)v8;
  __int128 v10 = v8;
  dispatch_async(v6, block);
}

uint64_t sub_1001053D8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 56))
  {
    uint64_t v2 = objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _clientErrorWithCode:-4000 debugDescription:@"Timed out nuking key transparency device records" underlyingError:0]);
    uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8LL);
    id v4 = *(void **)(v3 + 40);
    *(void *)(v3 + 40) = v2;
  }

  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))( result,  *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL));
  }
  return result;
}

void sub_100105720(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  __int128 v10 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10010581C;
  block[3] = &unk_1008F8440;
  id v16 = v7;
  id v17 = v8;
  id v18 = v9;
  id v11 = *(id *)(a1 + 40);
  uint64_t v19 = *(void *)(a1 + 32);
  id v20 = v11;
  id v12 = v9;
  id v13 = v8;
  id v14 = v7;
  dispatch_async(v10, block);
}

void sub_10010581C(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v5 = *(void *)(a1 + 48);
    int v12 = 138412802;
    uint64_t v13 = v3;
    __int16 v14 = 2112;
    uint64_t v15 = v4;
    __int16 v16 = 2112;
    uint64_t v17 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Completed CloudKit zone modification (delete) operation {savedRecordZones: %@, deletedRecordZoneIDs: %@, modifyError: %@}",  (uint8_t *)&v12,  0x20u);
  }

  uint64_t v6 = *(void *)(a1 + 48);
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
  id v8 = v7;
  if (v6)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_10069BF8C();
    }

    uint64_t v9 = *(void *)(a1 + 64);
    if (v9)
    {
      __int128 v10 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 56) _clientErrorWithCode:-1000 debugDescription:0 underlyingError:*(void *)(a1 + 48)]);
      (*(void (**)(uint64_t, void *))(v9 + 16))(v9, v10);
    }
  }

  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v12) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Successfully deleted CloudKit zone",  (uint8_t *)&v12,  2u);
    }

    uint64_t v11 = *(void *)(a1 + 64);
    if (v11) {
      (*(void (**)(uint64_t, void))(v11 + 16))(v11, 0LL);
    }
  }

void sub_100105C34( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
}

void sub_100105C68(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queue]);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_100105D0C;
  v7[3] = &unk_1008FA560;
  uint64_t v5 = *(void *)(a1 + 32);
  __int128 v9 = *(_OWORD *)(a1 + 40);
  v7[4] = v5;
  id v8 = v3;
  id v6 = v3;
  dispatch_async(v4, v7);
}

void sub_100105D0C(uint64_t a1)
{
  v1 = *(void **)(a1 + 32);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_100105D90;
  v4[3] = &unk_1008FA818;
  uint64_t v6 = *(void *)(a1 + 56);
  __int128 v3 = *(_OWORD *)(a1 + 40);
  id v2 = (id)v3;
  __int128 v5 = v3;
  objc_msgSend(v1, "_no_timeout_fetchKeyTransparencyDeviceRecordsWithCompletion:", v4);
}

void sub_100105D90(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1[5] + 8LL);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v5;
  id v12 = v5;

  uint64_t v9 = *(void *)(a1[6] + 8LL);
  __int128 v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v6;
  id v11 = v6;

  (*(void (**)(void))(a1[4] + 16LL))();
}

void sub_100105E1C(uint64_t a1, int a2)
{
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = @"NO";
    if (a2) {
      id v5 = @"YES";
    }
    *(_DWORD *)buf = 138412290;
    __int16 v14 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Key transparency device record fetch task final block called {timedOut: %@}",  buf,  0xCu);
  }

  id v6 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100105F68;
  block[3] = &unk_1008FA5B0;
  char v12 = a2;
  void block[4] = *(void *)(a1 + 32);
  __int128 v8 = *(_OWORD *)(a1 + 40);
  id v7 = (id)v8;
  __int128 v10 = v8;
  uint64_t v11 = *(void *)(a1 + 56);
  dispatch_async(v6, block);
}

uint64_t sub_100105F68(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    uint64_t v2 = objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _clientErrorWithCode:-4000 debugDescription:@"Timed out fetching key transparency device records" underlyingError:0]);
    uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8LL);
    uint64_t v4 = *(void **)(v3 + 40);
    *(void *)(v3 + 40) = v2;
  }

  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))( result,  *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL),  *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL));
  }
  return result;
}

id sub_100106388(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) currentDeviceRecordsPromise]);
    int v5 = 138412290;
    id v6 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Clearing cached promise for key transparency device records {promise: %@}",  (uint8_t *)&v5,  0xCu);
  }

  return [*(id *)(a1 + 32) setCurrentDeviceRecordsPromise:0];
}

void sub_100106458(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = a2;
  int v5 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v3 queue]);
  dispatch_assert_queue_V2(v5);

  id v6 = [v4 state];
  uint64_t v7 = *(void *)(a1 + 40);
  if (v6)
  {
    id v8 = (id)objc_claimAutoreleasedReturnValue([v4 error]);

    (*(void (**)(uint64_t, void, id))(v7 + 16))(v7, 0LL, v8);
  }

  else
  {
    id v8 = (id)objc_claimAutoreleasedReturnValue([v4 value]);

    (*(void (**)(uint64_t, id, void))(v7 + 16))(v7, v8, 0LL);
  }
}

void sub_100106670(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  id v6 = a4;
  if ((a3 & 1) != 0)
  {
    double v7 = *(double *)(a1 + 48);
    uint64_t v8 = *(unsigned __int8 *)(a1 + 56);
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472LL;
    v20[2] = sub_1001067F0;
    v20[3] = &unk_1008FA928;
    uint64_t v9 = *(void **)(a1 + 40);
    id v10 = *(id *)(a1 + 32);
    uint64_t v11 = *(void *)(a1 + 40);
    id v21 = v10;
    uint64_t v22 = v11;
    char v24 = *(_BYTE *)(a1 + 56);
    uint64_t v23 = *(void *)(a1 + 48);
    [v9 _createZoneIfNeededUsingTimeIntervalForRequest:v8 isNonDiscretionary:v20 completion:v7];
    char v12 = v21;
  }

  else
  {
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
    BOOL v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
    if (v6)
    {
      if (v14)
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Device to device encryption is not currently available for this CloudKit container -- not fetching trusted device record",  buf,  2u);
      }

      __int16 v16 = *(void **)(a1 + 32);
      uint64_t v15 = *(void **)(a1 + 40);
      uint64_t v17 = @"Failed to fetch device-to-device encryption availability status";
      uint64_t v18 = -1000LL;
      id v19 = v6;
    }

    else
    {
      if (v14)
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Device to device encryption is not currently available for this CloudKit container -- not fetching trusted device record",  buf,  2u);
      }

      __int16 v16 = *(void **)(a1 + 32);
      uint64_t v15 = *(void **)(a1 + 40);
      uint64_t v17 = @"Device-to-device encryption is not available";
      uint64_t v18 = -3000LL;
      id v19 = 0LL;
    }

    char v12 = (void *)objc_claimAutoreleasedReturnValue([v15 _clientErrorWithCode:v18 debugDescription:v17 underlyingError:v19]);
    [v16 failWithError:v12];
  }
}

void sub_1001067F0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_10069C0E4();
    }

    int v5 = *(void **)(a1 + 32);
    id v6 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 40) _clientErrorWithCode:-1000 debugDescription:0 underlyingError:v3]);
    [v5 failWithError:v6];
  }

  else
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithValue:](&OBJC_CLASS___NSPredicate, "predicateWithValue:", 1LL));
    if (qword_1009BEAC8 != -1) {
      dispatch_once(&qword_1009BEAC8, &stru_1008FAAB8);
    }
    double v7 = (void *)qword_1009BEAC0;
    if (!qword_1009BEAC0)
    {
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
      if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT)) {
        sub_10069C068();
      }

      double v7 = (void *)qword_1009BEAC0;
    }

    id v9 = objc_alloc((Class)v7);
    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _recordType]);
    id v11 = [v9 initWithRecordType:v10 predicate:v6];

    if (qword_1009BEAD8 != -1) {
      dispatch_once(&qword_1009BEAD8, &stru_1008FAAD8);
    }
    char v12 = (void *)qword_1009BEAD0;
    if (!qword_1009BEAD0)
    {
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
      if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT)) {
        sub_10069BFEC();
      }

      char v12 = (void *)qword_1009BEAD0;
    }

    id v14 = [objc_alloc((Class)v12) initWithQuery:v11];
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _zoneID]);
    [v14 setZoneID:v15];

    __int16 v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) container]);
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v14 configuration]);
    [v17 setContainer:v16];

    if (*(_BYTE *)(a1 + 56))
    {
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v14 configuration]);
      [v18 setDiscretionaryNetworkBehavior:0];
    }

    double v19 = *(double *)(a1 + 48);
    id v20 = (void *)objc_claimAutoreleasedReturnValue([v14 configuration]);
    [v20 setTimeoutIntervalForRequest:v19];

    v31[0] = 0LL;
    v31[1] = v31;
    v31[2] = 0x3032000000LL;
    v31[3] = sub_100103584;
    v31[4] = sub_100103594;
    v32 = (NSMutableArray *)0xAAAAAAAAAAAAAAAALL;
    v32 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472LL;
    v30[2] = sub_100106C3C;
    v30[3] = &unk_1008FA888;
    v30[4] = *(void *)(a1 + 40);
    v30[5] = v31;
    [v14 setRecordFetchedBlock:v30];
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472LL;
    v26[2] = sub_100106E00;
    v26[3] = &unk_1008FA900;
    v29 = v31;
    int8x16_t v25 = *(int8x16_t *)(a1 + 32);
    id v21 = (id)v25.i64[0];
    int8x16_t v27 = vextq_s8(v25, v25, 8uLL);
    id v22 = v11;
    id v28 = v22;
    [v14 setQueryCompletionBlock:v26];
    uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      id v34 = v22;
      __int16 v35 = 2112;
      id v36 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "Starting CloudKit operation to query KT records {query: %@, operation: %@}",  buf,  0x16u);
    }

    char v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) database]);
    [v24 addOperation:v14];

    _Block_object_dispose(v31, 8);
  }
}

void sub_100106C18( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
}

void sub_100106C3C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queue]);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_100106CD8;
  v7[3] = &unk_1008F7E58;
  uint64_t v5 = *(void *)(a1 + 40);
  id v8 = v3;
  uint64_t v9 = v5;
  id v6 = v3;
  dispatch_async(v4, v7);
}

id sub_100106CD8(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = *(void **)(a1 + 32);
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 encryptedValues]);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"IDSKTDevice"]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:@"IDSKTMetadata"]);
    int v8 = 138412802;
    uint64_t v9 = v3;
    __int16 v10 = 2112;
    id v11 = v5;
    __int16 v12 = 2112;
    uint64_t v13 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Fetched CloudKit record of trusted device {record: %@, device: %@, deviceMetadata: %@}",  (uint8_t *)&v8,  0x20u);
  }

  return [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) addObject:*(void *)(a1 + 32)];
}

void sub_100106E00(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  double v7 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queue]);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_100106EEC;
  v12[3] = &unk_1008FA8D8;
  id v13 = v6;
  id v14 = v5;
  uint64_t v18 = *(void *)(a1 + 56);
  id v8 = *(id *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 32);
  id v15 = v8;
  uint64_t v16 = v9;
  id v17 = *(id *)(a1 + 48);
  id v10 = v5;
  id v11 = v6;
  dispatch_async(v7, v12);
}

void sub_100106EEC(void *a1)
{
  uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = (void *)a1[4];
    id v4 = (void *)a1[5];
    uint64_t v5 = *(void *)(*(void *)(a1[9] + 8LL) + 40LL);
    *(_DWORD *)buf = 138412802;
    v31 = v3;
    __int16 v32 = 2112;
    uint64_t v33 = v4;
    __int16 v34 = 2112;
    uint64_t v35 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Completed CloudKit query for trusted devices {queryError: %@, cursor: %@ results: %@}",  buf,  0x20u);
  }

  __int128 v27 = 0u;
  __int128 v28 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  uint64_t v23 = a1;
  id v6 = *(id *)(*(void *)(a1[9] + 8LL) + 40LL);
  id v7 = [v6 countByEnumeratingWithState:&v25 objects:v29 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v26;
    do
    {
      for (i = 0LL; i != v8; i = (char *)i + 1)
      {
        if (*(void *)v26 != v9) {
          objc_enumerationMutation(v6);
        }
        id v11 = *(void **)(*((void *)&v25 + 1) + 8LL * (void)i);
        __int16 v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          id v13 = (void *)objc_claimAutoreleasedReturnValue([v11 encryptedValues]);
          id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 objectForKeyedSubscript:@"IDSKTDevice"]);
          id v15 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKeyedSubscript:@"IDSKTMetadata"]);
          *(_DWORD *)buf = 138412546;
          v31 = v14;
          __int16 v32 = 2112;
          uint64_t v33 = v15;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Found device data from CloudKit record {device: %@, deviceMetadata: %@}",  buf,  0x16u);
        }
      }

      id v8 = [v6 countByEnumeratingWithState:&v25 objects:v29 count:16];
    }

    while (v8);
  }

  uint64_t v16 = (void *)v23[4];
  if (v16)
  {
    if ([v16 code] == (id)11)
    {
LABEL_21:
      [(id)v23[6] fulfillWithValue:&__NSArray0__struct];
      return;
    }

    if (v23[4]) {
      goto LABEL_16;
    }
  }

  if (![*(id *)(*(void *)(v23[9] + 8) + 40) count]) {
    goto LABEL_21;
  }
LABEL_16:
  if ([*(id *)(*(void *)(v23[9] + 8) + 40) count])
  {
    id v17 = *(void **)(*(void *)(v23[9] + 8LL) + 40LL);
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472LL;
    v24[2] = sub_10010725C;
    v24[3] = &unk_1008FA8B0;
    v24[4] = v23[7];
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "__imArrayByApplyingBlock:", v24));
    if (v18) {
      double v19 = v18;
    }
    else {
      double v19 = &__NSArray0__struct;
    }
    [(id)v23[6] fulfillWithValue:v19];
  }

  else
  {
    id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
      sub_10069C110();
    }

    [(id)v23[7] setCachedRecordZone:0];
    id v21 = (void *)v23[6];
    id v22 = (void *)objc_claimAutoreleasedReturnValue( [(id)v23[7] _clientErrorWithCode:-1000 debugDescription:0 underlyingError:v23[4]]);
    [v21 failWithError:v22];
  }

id sub_10010725C(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _deviceRecordForCloudKitRecord:a2];
}

void sub_100107C60(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = im_primary_queue(v3, v4);
  id v6 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v5);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100107D0C;
  block[3] = &unk_1008F5F58;
  id v11 = v3;
  id v7 = *(id *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  id v12 = v7;
  uint64_t v13 = v8;
  id v9 = v3;
  dispatch_async(v6, block);
}

void sub_100107D0C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Failed to force sync KVS.", buf, 2u);
    }

    uint64_t v5 = *(void **)(a1 + 40);
    id v6 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 48) _clientErrorWithCode:-5000 debugDescription:@"Failed to sync KVS." underlyingError:*(void *)(a1 + 32)]);
    [v5 failWithError:v6];
  }

  else
  {
    if (v4)
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Successfully force synced KVS.", v8, 2u);
    }

    id v7 = *(void **)(a1 + 40);
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
    [v7 fulfillWithValue:v6];
  }
}

double sub_100107FAC(void *a1, uint64_t a2, double a3)
{
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([a1 objectForKey:a2]);
  if (v5)
  {
    uint64_t v6 = objc_opt_class(&OBJC_CLASS___NSNumber, v4);
    if ((objc_opt_isKindOfClass(v5, v6) & 1) != 0)
    {
      [v5 doubleValue];
      a3 = v7;
    }
  }

  return a3;
}

id sub_100108014(void *a1, id a2)
{
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "objectForKey:"));
  if (v4)
  {
    uint64_t v5 = objc_opt_class(&OBJC_CLASS___NSNumber, v3);
    if ((objc_opt_isKindOfClass(v4, v5) & 1) != 0) {
      a2 = [v4 BOOLValue];
    }
  }

  return a2;
}

void sub_100108070(id a1)
{
  if (!qword_1009BEA30)
  {
    v1 = (void **)IMWeakLinkSymbol("CKCurrentUserDefaultName", @"CloudKit");
    if (v1) {
      uint64_t v2 = *v1;
    }
    else {
      uint64_t v2 = 0LL;
    }
    objc_storeStrong((id *)&qword_1009BEA30, v2);
  }

void sub_1001080C0(id a1)
{
  qword_1009BEA40 = IMWeakLinkClass(@"CKContainer", @"CloudKit");
}

void sub_1001080EC(id a1)
{
  qword_1009BEA50 = IMWeakLinkClass(@"CKRecordID", @"CloudKit");
}

void sub_100108118(id a1)
{
  qword_1009BEA60 = IMWeakLinkClass(@"CKRecordZoneID", @"CloudKit");
}

void sub_100108144(id a1)
{
  qword_1009BEA70 = IMWeakLinkClass(@"CKRecord", @"CloudKit");
}

void sub_100108170(id a1)
{
  qword_1009BEA80 = IMWeakLinkClass(@"CKRecordZone", @"CloudKit");
}

void sub_10010819C(id a1)
{
  qword_1009BEA90 = IMWeakLinkClass(@"CKFetchRecordZonesOperation", @"CloudKit");
}

void sub_1001081C8(id a1)
{
  qword_1009BEAA0 = IMWeakLinkClass(@"CKModifyRecordZonesOperation", @"CloudKit");
}

void sub_1001081F4(id a1)
{
  qword_1009BEAB0 = IMWeakLinkClass(@"CKModifyRecordsOperation", @"CloudKit");
}

void sub_100108220(id a1)
{
  qword_1009BEAC0 = IMWeakLinkClass(@"CKQuery", @"CloudKit");
}

void sub_10010824C(id a1)
{
  qword_1009BEAD0 = IMWeakLinkClass(@"CKQueryOperation", @"CloudKit");
}

void sub_100108278( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

  ;
}

void sub_1001082A4(uint64_t a1@<X8>)
{
  *(void *)(v1 - _Block_object_dispose(va, 8) = a1;
}

void sub_100108B9C(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog delivery_oversized](&OBJC_CLASS___IDSFoundationLog, "delivery_oversized"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = 136315651;
    uint64_t v5 = "IDSIMLFanoutFactoryComponent.m";
    __int16 v6 = 1024;
    int v7 = 85;
    __int16 v8 = 2113;
    uint64_t v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s:%d %{private}@", (uint8_t *)&v4, 0x1Cu);
  }
}

void sub_100109278(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___IDSDaemon);
  uint64_t v2 = (void *)qword_1009BEAE8;
  qword_1009BEAE8 = (uint64_t)v1;
}

void sub_10010A2BC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v5 = OSLogHandleForIDSCategory("IDSDaemon");
  __int16 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138412290;
    id v24 = v3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Application state changed: %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v7) && _IDSShouldLog(1LL, @"IDSDaemon"))
  {
    id v20 = v3;
    _IDSLogV(1LL, @"IDSFoundation", @"IDSDaemon", @"Application state changed: %@");
  }

  __int16 v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKey:", BKSApplicationStateProcessIDKey, v20));
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKey:BKSApplicationStateKey]);
  id v10 = v9;
  if (v8) {
    BOOL v11 = v9 == 0LL;
  }
  else {
    BOOL v11 = 1;
  }
  if (!v11 && [v9 intValue] == 2)
  {
    uint64_t v12 = OSLogHandleForIDSCategory("IDSDaemon");
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v14 = [v8 intValue];
      *(_DWORD *)buf = 67109120;
      LODWORD(v24) = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, " => Pid %d suspended!", buf, 8u);
    }

    uint64_t v16 = os_log_shim_legacy_logging_enabled(v15);
    if ((_DWORD)v16)
    {
      uint64_t v16 = _IDSShouldLog(0LL, @"IDSDaemon");
      if ((_DWORD)v16)
      {
        [v8 intValue];
        uint64_t v16 = _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon", @" => Pid %d suspended!");
      }
    }

    uint64_t v18 = im_primary_queue(v16, v17);
    double v19 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v18);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10010A568;
    block[3] = &unk_1008F5F80;
    void block[4] = WeakRetained;
    id v22 = v8;
    dispatch_async(v19, block);
  }
}

id sub_10010A568(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_pidSuspended:", objc_msgSend(*(id *)(a1 + 40), "intValue"));
}

void sub_10010A590(uint64_t a1)
{
  uint64_t v2 = objc_autoreleasePoolPush();
  [*(id *)(a1 + 32) _cleanupIncomingFilesDirectories];
  [*(id *)(a1 + 32) _resetPreferences];
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uTunDeliveryController]);
  [v3 setDelegate:*(void *)(a1 + 32)];

  int v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) rapportDeliveryController]);
  [v4 setDelegate:*(void *)(a1 + 32)];

  id v5 = [*(id *)(a1 + 32) registrationController];
  id v6 = [*(id *)(a1 + 32) registrationPushManager];
  id v7 = [*(id *)(a1 + 32) centralRegListener];
  __int16 v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountController]);
  [v8 loadStoredAccounts];

  uint64_t v9 = objc_alloc(&OBJC_CLASS___IDSDSignInResponder);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 520) userStore]);
  BOOL v11 = -[IDSDSignInResponder initWithUserStore:](v9, "initWithUserStore:", v10);
  uint64_t v12 = *(void *)(a1 + 32);
  uint64_t v13 = *(void **)(v12 + 416);
  *(void *)(v12 + 416) = v11;

  unsigned int v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deviceHeartbeatCenter]);
  [v14 setup];

  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) pairingManager]);
  [v15 addDelegate:*(void *)(a1 + 32)];

  id v16 = [*(id *)(a1 + 32) encryptionController];
  id v17 = [*(id *)(a1 + 32) sessionController];
  id v18 = +[IDSQuickRelayAllocator sharedInstance](&OBJC_CLASS___IDSQuickRelayAllocator, "sharedInstance");
  id v19 = [*(id *)(a1 + 32) currentDevice];
  id v20 = +[IDSClientChannelManager sharedInstance](&OBJC_CLASS___IDSClientChannelManager, "sharedInstance");
  id v21 = +[IDSLocalMultiplexer sharedInstance](&OBJC_CLASS___IDSLocalMultiplexer, "sharedInstance");
  id v22 = +[IDSGroupAgent sharedInstance](&OBJC_CLASS___IDSGroupAgent, "sharedInstance");
  uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDuetInterface sharedInstance](&OBJC_CLASS___IDSDuetInterface, "sharedInstance"));
  [v23 setDelegate:*(void *)(a1 + 32)];

  [*(id *)(a1 + 32) _registerForCheckpointAndVacuumDB];
  id v24 = (void *)objc_claimAutoreleasedReturnValue(+[IDSAWDLogging sharedInstance](&OBJC_CLASS___IDSAWDLogging, "sharedInstance"));
  __int128 v25 = (void *)objc_claimAutoreleasedReturnValue([v24 AWDServerConnection]);
  v76[0] = _NSConcreteStackBlock;
  v76[1] = 3221225472LL;
  v76[2] = sub_10010ADC0;
  v76[3] = &unk_1008FAB58;
  id v26 = v24;
  id v77 = v26;
  [v25 registerQueriableMetric:2555929 callback:v76];

  [*(id *)(a1 + 32) registerForRegistrationAccountStatusMetric];
  [*(id *)(a1 + 32) registerForRegistrationEventTrackCleanup];
  [*(id *)(a1 + 32) registerForSenderKeyCleanup];
  [*(id *)(a1 + 32) registerForQueryDBCleanup];
  [*(id *)(a1 + 32) _registerForDailyMetricReporting];
  __int128 v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) idStatusQueryController]);
  v75[0] = _NSConcreteStackBlock;
  v75[1] = 3221225472LL;
  v75[2] = sub_10010ADC8;
  v75[3] = &unk_1008FAB80;
  v75[4] = *(void *)(a1 + 32);
  [v27 addCompletionBlock:v75 forUniqueIdentifier:@"IDSDaemon"];

  __int128 v28 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPeerIDManager sharedInstance](&OBJC_CLASS___IDSPeerIDManager, "sharedInstance"));
  v74[0] = _NSConcreteStackBlock;
  v74[1] = 3221225472LL;
  v74[2] = sub_10010B00C;
  v74[3] = &unk_1008FABA8;
  v74[4] = *(void *)(a1 + 32);
  [v28 addClientDataUpdateBlock:v74 forToken:@"idsdaemon-peeridmanager-clientdatablock"];

  if ((_os_feature_enabled_impl("IDS", "QuickerXPCListening") & 1) == 0)
  {
    uint64_t v29 = OSLogHandleForIDSCategory("IDSDaemon");
    uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "Opening up the grant MIG port", buf, 2u);
    }

    __int16 v32 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) daemonMIGInterface]);
    [v32 setDelegate:*(void *)(a1 + 32)];
    [v32 acceptIncomingGrantRequests];
    if (IMGetDomainBoolForKeyWithDefaultValue( @"com.apple.ids",  @"shouldAllowSimToHostXPC",  0LL)) {
      [v32 launchSim2HostServer];
    }
    uint64_t v33 = OSLogHandleForIDSCategory("IDSDaemon");
    __int16 v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "Opening up the NSXPC Interface", buf, 2u);
    }

    id v36 = [*(id *)(a1 + 32) daemonXPCInterface];
    __int128 v37 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) daemonMIGQueryInterface]);
    [v37 setDelegate:*(void *)(a1 + 32)];
    [v37 acceptIncomingGrantRequests];
    uint64_t v38 = OSLogHandleForIDSCategory("IDSDaemon");
    __int128 v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);
    if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEBUG,  "Now accepting query grants, setup complete",  buf,  2u);
    }
  }

  v41 = (void *)objc_claimAutoreleasedReturnValue(+[IMUserDefaults sharedDefaults](&OBJC_CLASS___IMUserDefaults, "sharedDefaults"));
  unsigned int v42 = [v41 clearStateOnLaunch];

  if (v42)
  {
    uint64_t v43 = OSLogHandleForIDSCategory("IDSDaemon");
    v44 = (os_log_s *)objc_claimAutoreleasedReturnValue(v43);
    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEFAULT,  "Found default to clear IDS state on launch",  buf,  2u);
    }

    [*(id *)(a1 + 32) _clearIDSState];
  }

  id v46 = [*(id *)(a1 + 32) messageStoreMigrator];
  [*(id *)(a1 + 32) _processStoredMessagesIncludingClassD:1];
  v47 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) serverStorageStateMachine]);
  [v47 reissuePersistedRequests];

  [*(id *)(a1 + 32) _startPushHandlingLocked];
  v48 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) pushHandlerForAPSDelegatePort]);
  [v48 setShouldWaitToSetTopics:0];

  [*(id *)(a1 + 32) _registerForNetworkAvailableNotification];
  v49 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) activityStateMonitor]);
  [v49 setup];

  v72[0] = _NSConcreteStackBlock;
  v72[1] = 3221225472LL;
  v72[2] = sub_10010B418;
  v72[3] = &unk_1008F6010;
  v72[4] = *(void *)(a1 + 32);
  im_dispatch_after_primary_queue(v72, 3.0);
  id v50 = [*(id *)(a1 + 32) familyManager];
  v51 = objc_alloc_init(&OBJC_CLASS___IDSInvitationStore);
  uint64_t v52 = *(void *)(a1 + 32);
  v53 = *(void **)(v52 + 448);
  *(void *)(v52 + 44_Block_object_dispose(va, 8) = v51;

  v54 = objc_alloc(&OBJC_CLASS___IDSPersistentMap);
  uint64_t v56 = objc_opt_class(&OBJC_CLASS___NSString, v55);
  v58 = +[NSSet setWithObjects:]( &OBJC_CLASS___NSSet,  "setWithObjects:",  v56,  objc_opt_class(&OBJC_CLASS___NSNumber, v57),  0LL);
  v59 = (void *)objc_claimAutoreleasedReturnValue(v58);
  v60 = -[IDSPersistentMap initWithIdentifier:versionNumber:decodableClasses:migrationBlock:]( v54,  "initWithIdentifier:versionNumber:decodableClasses:migrationBlock:",  @"com.apple.identityservicesd.waking-push-priority",  1LL,  v59,  0LL);
  uint64_t v61 = *(void *)(a1 + 32);
  v62 = *(void **)(v61 + 456);
  *(void *)(v61 + 456) = v60;

  v63 = objc_alloc_init(&OBJC_CLASS___IDSFirewallNotificationCenter);
  uint64_t v64 = *(void *)(a1 + 32);
  v65 = *(void **)(v64 + 464);
  *(void *)(v64 + 464) = v63;

  v66 = objc_alloc_init(&OBJC_CLASS___IDSBlastDoorConnectionHelper);
  uint64_t v67 = *(void *)(a1 + 32);
  v68 = *(void **)(v67 + 472);
  *(void *)(v67 + 472) = v66;

  v69 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  uint64_t v70 = *(void *)(a1 + 32);
  v71 = *(void **)(v70 + 480);
  *(void *)(v70 + 480) = v69;

  [*(id *)(a1 + 32) _setupRestrictedMessageCleanupTimer];
  [*(id *)(a1 + 32) _registerSysdiagnoseBlock];
  +[IDSTemporaryPhoneAlertManager clearFollowups](&OBJC_CLASS___IDSTemporaryPhoneAlertManager, "clearFollowups");

  objc_autoreleasePoolPop(v2);
}

id sub_10010ADC0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) queryAndSubmitStatusForAccounts];
}

void sub_10010ADC8(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, void *a6)
{
  id v11 = a2;
  id v12 = a3;
  id v13 = a4;
  id v14 = a6;
  id v30 = 0LL;
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  v11,  1LL,  &v30));
  id v16 = v30;
  uint64_t v17 = OSLogHandleForIDSCategory("IDSDaemon");
  id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    id v19 = @"NO";
    *(_DWORD *)buf = 138413570;
    id v32 = v11;
    if ((_DWORD)a5) {
      id v19 = @"YES";
    }
    __int16 v33 = 2112;
    id v34 = v12;
    __int16 v35 = 2112;
    id v36 = v13;
    __int16 v37 = 2112;
    uint64_t v38 = v19;
    __int16 v39 = 2112;
    id v40 = v14;
    __int16 v41 = 2112;
    id v42 = v16;
    _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "Got id query completed with updates %@ fromURI %@ service %@ success %@ error %@ encodeError %@",  buf,  0x3Eu);
  }

  if (os_log_shim_legacy_logging_enabled(v20) && _IDSShouldLog(1LL, @"IDSDaemon"))
  {
    id v21 = @"NO";
    if ((_DWORD)a5) {
      id v21 = @"YES";
    }
    id v28 = v14;
    id v29 = v16;
    id v26 = v13;
    __int128 v27 = v21;
    id v24 = v11;
    id v25 = v12;
    _IDSLogV( 1LL,  @"IDSFoundation",  @"IDSDaemon",  @"Got id query completed with updates %@ fromURI %@ service %@ success %@ error %@ encodeError %@");
  }

  id v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "broadcasterWithMessageContext:", 0, v24, v25, v26, v27, v28, v29));
  uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v12 prefixedURI]);
  [v22 IDQueryCompletedWithFromURI:v23 idStatusUpdates:v15 service:v13 success:a5 error:v14];
}

void sub_10010B00C(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) serviceController]);
  id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 serviceWithIdentifier:v9]);
  unsigned int v15 = [v14 shouldHaveRestrictedStorage];

  if (!v15)
  {
    uint64_t v21 = OSLogHandleForIDSCategory("IDSDaemon");
    id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v12 pushToken]);
      *(_DWORD *)buf = 138412290;
      __int16 v37 = v23;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "Adding identity to last resort cache for token %@",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v24) && _IDSShouldLog(0LL, @"IDSDaemon"))
    {
      __int16 v33 = (void *)objc_claimAutoreleasedReturnValue([v12 pushToken]);
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Adding identity to last resort cache for token %@");
    }

    id v25 = (void *)objc_claimAutoreleasedReturnValue( +[IDSPublicIdentityCache sharedInstance]( &OBJC_CLASS___IDSPublicIdentityCache,  "sharedInstance",  v33));
    id v26 = (void *)objc_claimAutoreleasedReturnValue([v12 publicDeviceIdentityContainer]);
    __int128 v27 = (void *)objc_claimAutoreleasedReturnValue([v12 pushToken]);
    id v28 = (void *)objc_claimAutoreleasedReturnValue([v12 URI]);
    id v35 = 0LL;
    [v25 addIdentity:v26 forToken:v27 uri:v28 service:v9 error:&v35];
    id v20 = v35;

    if (v20)
    {
      uint64_t v29 = OSLogHandleForIDSCategory("IDSDaemon");
      id v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v12 pushToken]);
        *(_DWORD *)buf = 138412546;
        __int16 v37 = v31;
        __int16 v38 = 2112;
        id v39 = v20;
        _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "Error adding identity to last resort cache { token: %@, error: %@ }",  buf,  0x16u);
      }

      if (os_log_shim_legacy_logging_enabled(v32) && _IDSShouldLog(0LL, @"IDSDaemon"))
      {
        id v34 = (void *)objc_claimAutoreleasedReturnValue([v12 pushToken]);
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Error adding identity to last resort cache { token: %@, error: %@ }");
      }
    }

    goto LABEL_18;
  }

  uint64_t v16 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    id v18 = (void *)objc_claimAutoreleasedReturnValue([v12 pushTokenObject]);
    *(_DWORD *)buf = 138412546;
    __int16 v37 = v18;
    __int16 v38 = 2112;
    id v39 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Not adding identity to last resort cache for token %@ service: %@",  buf,  0x16u);
  }

  if (os_log_shim_legacy_logging_enabled(v19) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    id v20 = (id)objc_claimAutoreleasedReturnValue([v12 pushTokenObject]);
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Not adding identity to last resort cache for token %@ service: %@");
LABEL_18:
  }
}

void sub_10010B3CC(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x10010B328LL);
  }

  _Unwind_Resume(a1);
}

id sub_10010B418(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _postAliveNotification];
}

void sub_10010B420(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 424) negativeRegistrationUpdateCache]);
  [v2 cleanupExpiredItems];

  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPublicIdentityCache sharedInstance](&OBJC_CLASS___IDSPublicIdentityCache, "sharedInstance"));
  id v8 = 0LL;
  [v3 cleanupWithError:&v8];
  id v4 = v8;

  if (v4)
  {
    uint64_t v5 = OSLogHandleForIDSCategory("IDSDaemon");
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v10 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Error cleaning last resort cache { error: %@ }",  buf,  0xCu);
    }
  }
}

NSString *__cdecl sub_10010B584(id a1)
{
  uint64_t v1 = OSLogHandleForIDSCategory("Sysdiagnose-Oversized");
  uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue(+[IMUserDefaults sharedDefaults](&OBJC_CLASS___IMUserDefaults, "sharedDefaults"));
    id v4 = [v3 copyMultipleForCurrentKeys:0 appID:@"com.apple.conference"];
    *(_DWORD *)buf = 138412290;
    id v24 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Conference Prefs %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v5)
    && _IDSShouldLog(0LL, @"Sysdiagnose-Oversized"))
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[IMUserDefaults sharedDefaults](&OBJC_CLASS___IMUserDefaults, "sharedDefaults"));
    id v20 = [v6 copyMultipleForCurrentKeys:0 appID:@"com.apple.conference"];
    _IDSLogV(0LL, @"IDSFoundation", @"Sysdiagnose-Oversized", @"Conference Prefs %@");
  }

  uint64_t v7 = OSLogHandleForIDSCategory("Sysdiagnose-Oversized");
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue(+[IMUserDefaults sharedDefaults](&OBJC_CLASS___IMUserDefaults, "sharedDefaults"));
    id v10 = [v9 copyMultipleForCurrentKeys:0 appID:@"com.apple.ids"];
    *(_DWORD *)buf = 138412290;
    id v24 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "IDS Prefs %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v11)
    && _IDSShouldLog(0LL, @"Sysdiagnose-Oversized"))
  {
    id v12 = (void *)objc_claimAutoreleasedReturnValue(+[IMUserDefaults sharedDefaults](&OBJC_CLASS___IMUserDefaults, "sharedDefaults"));
    id v21 = [v12 copyMultipleForCurrentKeys:0 appID:@"com.apple.ids"];
    _IDSLogV(0LL, @"IDSFoundation", @"Sysdiagnose-Oversized", @"IDS Prefs %@");
  }

  uint64_t v13 = OSLogHandleForIDSCategory("Sysdiagnose-Oversized");
  id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v15 = (void *)objc_claimAutoreleasedReturnValue(+[IMUserDefaults sharedDefaults](&OBJC_CLASS___IMUserDefaults, "sharedDefaults"));
    id v16 = [v15 copyMultipleForCurrentKeys:0 appID:kCFPreferencesCurrentApplication];
    *(_DWORD *)buf = 138412290;
    id v24 = v16;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "IDSD Prefs %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v17)
    && _IDSShouldLog(0LL, @"Sysdiagnose-Oversized"))
  {
    id v18 = (void *)objc_claimAutoreleasedReturnValue(+[IMUserDefaults sharedDefaults](&OBJC_CLASS___IMUserDefaults, "sharedDefaults"));
    id v22 = [v18 copyMultipleForCurrentKeys:0 appID:kCFPreferencesCurrentApplication];
    _IDSLogV(0LL, @"IDSFoundation", @"Sysdiagnose-Oversized", @"IDSD Prefs %@");
  }

  return 0LL;
}

void sub_10010BA10(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[IDSUTunDeliveryController sharedInstance](&OBJC_CLASS___IDSUTunDeliveryController, "sharedInstance"));
  [v1 defaultPeerSetLinkPreferences:@"dummyService"];
}

uint64_t sub_10010C1DC(uint64_t a1)
{
  double v2 = ids_monotonic_time(a1);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  [v3 removeItemAtPath:*(void *)(a1 + 32) error:0];

  double v5 = ids_monotonic_time(v4);
  uint64_t v6 = OSLogHandleForTransportCategory("IDSDaemon");
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    double v11 = v5 - v2;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Delayed background file removal took %0.6lf seconds",  buf,  0xCu);
  }

  uint64_t result = os_log_shim_legacy_logging_enabled(v8);
  if ((_DWORD)result)
  {
    uint64_t result = _IDSShouldLogTransport(result);
    if ((_DWORD)result)
    {
      _IDSLogTransport(@"IDSDaemon", @"IDS", @"Delayed background file removal took %0.6lf seconds");
      uint64_t result = _IDSShouldLog(0LL, @"IDSDaemon");
      if ((_DWORD)result) {
        return _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Delayed background file removal took %0.6lf seconds");
      }
    }
  }

  return result;
}

id sub_10010E1D8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _resetQueuedBroadcastsForServices:*(void *)(a1 + 40) priority:300];
}

id sub_10010E1E8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _resetQueuedBroadcastsForServices:*(void *)(a1 + 40) priority:200];
}

id sub_10010E1F8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _resetQueuedBroadcastsForServices:*(void *)(a1 + 40) priority:100];
}

id sub_10010E3A4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _processQueuedBroadcastsForServices:*(void *)(a1 + 40) priority:300 forceRetry:1];
}

id sub_10010E3B8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _processQueuedBroadcastsForServices:*(void *)(a1 + 40) priority:200 forceRetry:1];
}

id sub_10010E3CC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _processQueuedBroadcastsForServices:*(void *)(a1 + 40) priority:100 forceRetry:1];
}

id sub_10010E534(uint64_t a1)
{
  return [*(id *)(a1 + 32) _dropQueuedBroadcastsForServices:*(void *)(a1 + 40) priority:300];
}

id sub_10010E544(uint64_t a1)
{
  return [*(id *)(a1 + 32) _dropQueuedBroadcastsForServices:*(void *)(a1 + 40) priority:200];
}

id sub_10010E554(uint64_t a1)
{
  return [*(id *)(a1 + 32) _dropQueuedBroadcastsForServices:*(void *)(a1 + 40) priority:100];
}

void sub_10010EFBC( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, void *a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, __int128 buf)
{
  if (a2 == 1)
  {
    id v31 = objc_begin_catch(a1);

    uint64_t v32 = OSLogHandleForIDSCategory("Warning");
    __int16 v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v31;
      _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_ERROR,  "Exception generating setup information for listener: %@",  (uint8_t *)&buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v34))
    {
      _IDSWarnV(@"IDSFoundation", @"Exception generating setup information for listener: %@");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"Exception generating setup information for listener: %@");
      _IDSLogTransport(@"Warning", @"IDS", @"Exception generating setup information for listener: %@");
    }

    IMLogBacktrace(0LL);
    IMLogSimulateCrashForException(v31);

    objc_end_catch();
    JUMPOUT(0x10010EDC4LL);
  }

  _Unwind_Resume(a1);
}

void sub_10010F220( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_10010F238(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
  return result;
}

void sub_10010F344( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

id sub_10010F35C(uint64_t a1, uint64_t a2)
{
  id result = [*(id *)(a1 + 32) client:a2 isEntitledToAccessService:*(void *)(a1 + 40) forEntitlement:*(void *)(a1 + 48) shouldWarn:1];
  *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = (_BYTE)result;
  return result;
}

void sub_10010F848(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = a2;
  id v10 = (id)objc_claimAutoreleasedReturnValue([v3 remoteObject]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 services]);
  double v5 = (void *)objc_claimAutoreleasedReturnValue([v3 notificationServices]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v3 entitlements]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v3 commands]);
  id v8 = [v3 capabilities];
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v3 bundleID]);

  (*(void (**)(uint64_t, id, void *, void *, void *, void *, id, void *))(v2 + 16))( v2,  v10,  v4,  v5,  v6,  v7,  v8,  v9);
}

void sub_100110214( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint8_t buf)
{
  if (a2 == 1)
  {
    objc_begin_catch(exception_object);
    objc_end_catch();
    JUMPOUT(0x100110098LL);
  }

  _Unwind_Resume(exception_object);
}

id sub_1001103E8(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t v6 = objc_opt_class(&OBJC_CLASS___IMRemoteObject, v5);
  if ((objc_opt_isKindOfClass(v4, v6) & 1) == 0)
  {
    uint64_t v8 = objc_opt_class(&OBJC_CLASS___IMLocalObject, v7);
    if ((objc_opt_isKindOfClass(v4, v8) & 1) == 0)
    {
      uint64_t v13 = OSLogHandleForIDSCategory("IDSDaemon");
      id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        id v22 = v4;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "_IDSSessionClientID unknown class type for %@",  buf,  0xCu);
      }

      id v16 = @"_IDSSessionClientID unknown class type for %@";
      goto LABEL_18;
    }
  }

  id v9 = (_xpc_connection_s *)objc_claimAutoreleasedReturnValue([v4 connection]);
  id v10 = v9;
  if (!v9)
  {
    if ((objc_opt_respondsToSelector(v3, "pid") & 1) != 0)
    {
      id pid = [v4 pid];
      goto LABEL_7;
    }

    uint64_t v17 = OSLogHandleForIDSCategory("IDSDaemon");
    id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v22 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "_IDSSessionClientID failed to get pid from %@",  buf,  0xCu);
    }

    if (!os_log_shim_legacy_logging_enabled(v19) || (_IDSShouldLog(0LL, @"IDSDaemon") & 1) == 0)
    {
LABEL_19:
      id v12 = v3;
      goto LABEL_20;
    }

    id v16 = @"_IDSSessionClientID failed to get pid from %@";
LABEL_18:
    _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon", v16);
    goto LABEL_19;
  }

  id pid = (id)xpc_connection_get_pid(v9);
LABEL_7:
  id v12 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@.[%d]", v3, pid));

LABEL_20:
  return v12;
}

void sub_1001107A0( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, __int128 buf)
{
  if (a2 == 1)
  {
    id v19 = objc_begin_catch(a1);
    uint64_t v20 = OSLogHandleForIDSCategory("Warning");
    id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "Exception removing listener object: %@",  (uint8_t *)&buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v22))
    {
      _IDSWarnV(@"IDSFoundation", @"Exception removing listener object: %@");
      _IDSLogV(0LL, @"IDSFoundation", @"Warning", @"Exception removing listener object: %@");
      _IDSLogTransport(@"Warning", @"IDS", @"Exception removing listener object: %@");
    }

    IMLogBacktrace(0LL);
    IMLogSimulateCrashForException(v19);

    objc_end_catch();
    JUMPOUT(0x100110760LL);
  }

  _Unwind_Resume(a1);
}

void sub_100110A2C( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, __int128 buf)
{
  if (a2 == 1)
  {
    id v19 = objc_begin_catch(a1);
    uint64_t v20 = OSLogHandleForIDSCategory("Warning");
    id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "Exception removing local listener object: %@",  (uint8_t *)&buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v22))
    {
      _IDSWarnV(@"IDSFoundation", @"Exception removing local listener object: %@");
      _IDSLogV(0LL, @"IDSFoundation", @"Warning", @"Exception removing local listener object: %@");
      _IDSLogTransport(@"Warning", @"IDS", @"Exception removing local listener object: %@");
    }

    IMLogBacktrace(0LL);
    IMLogSimulateCrashForException(v19);

    objc_end_catch();
    JUMPOUT(0x1001109D8LL);
  }

  _Unwind_Resume(a1);
}

void sub_100110CFC( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, __int128 buf)
{
  if (a2 == 1)
  {
    id v19 = objc_begin_catch(a1);
    uint64_t v20 = OSLogHandleForIDSCategory("Warning");
    id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "Exception removing local listener object: %@",  (uint8_t *)&buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v22))
    {
      _IDSWarnV(@"IDSFoundation", @"Exception removing local listener object: %@");
      _IDSLogV(0LL, @"IDSFoundation", @"Warning", @"Exception removing local listener object: %@");
      _IDSLogTransport(@"Warning", @"IDS", @"Exception removing local listener object: %@");
    }

    IMLogBacktrace(0LL);
    IMLogSimulateCrashForException(v19);

    objc_end_catch();
    JUMPOUT(0x100110CBCLL);
  }

  _Unwind_Resume(a1);
}

void sub_10011134C(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[IDSUTunDeliveryController sharedInstance](&OBJC_CLASS___IDSUTunDeliveryController, "sharedInstance"));
  [v2 defaultPeerSetLinkPreferences:*(void *)(a1 + 32)];
}

void sub_100112DC4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_100112DDC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100112DEC(uint64_t a1)
{
}

void sub_100112DF4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 entitlements]);
  if (*(void *)(a1 + 32))
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 commands]);
    if ([*(id *)(a1 + 32) integerValue] == (id)227
      || [*(id *)(a1 + 32) integerValue] == (id)243
      || [*(id *)(a1 + 32) integerValue] == (id)242
      || [*(id *)(a1 + 32) integerValue] == (id)245
      || [*(id *)(a1 + 32) integerValue] == (id)250
      || [*(id *)(a1 + 32) integerValue] == (id)251
      || [*(id *)(a1 + 32) integerValue] == (id)244
      || [*(id *)(a1 + 32) integerValue] == (id)153
      || [*(id *)(a1 + 32) integerValue] == (id)315
      || [*(id *)(a1 + 32) integerValue] == (id)121
      || [*(id *)(a1 + 32) integerValue] == (id)246
      || [*(id *)(a1 + 32) integerValue] == (id)248
      || [*(id *)(a1 + 32) integerValue] == (id)247
      || [*(id *)(a1 + 32) integerValue] == (id)249)
    {
      unsigned int v6 = 1;
    }

    else
    {
      unsigned int v6 = [v5 containsObject:*(void *)(a1 + 32)];
    }
  }

  else
  {
    unsigned int v6 = 1;
  }

  if (*(_DWORD *)(a1 + 72)) {
    BOOL v7 = (*(_DWORD *)(a1 + 72) & ~[v3 capabilities]) != 0;
  }
  else {
    BOOL v7 = 0;
  }
  if (*(_BYTE *)(a1 + 76))
  {
    if (((v6 ^ 1 | v7) & 1) != 0) {
      goto LABEL_45;
    }
  }

  else
  {
    if (*(_BYTE *)(a1 + 77)) {
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v3 notificationServices]);
    }
    else {
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v3 services]);
    }
    id v9 = v8;
    else {
      unsigned int v10 = 0;
    }

    if (((v10 | v7 | v6 ^ 1) & 1) != 0) {
      goto LABEL_45;
    }
  }

  if ([v4 hasAnyEntitlements])
  {
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    id v11 = *(id *)(a1 + 56);
    id v12 = [v11 countByEnumeratingWithState:&v16 objects:v20 count:16];
    if (v12)
    {
      id v13 = v12;
      uint64_t v14 = *(void *)v17;
      while (2)
      {
        for (i = 0LL; i != v13; i = (char *)i + 1)
        {
          if (*(void *)v17 != v14) {
            objc_enumerationMutation(v11);
          }
          if (objc_msgSend( v4,  "hasService:forEntitlement:",  *(void *)(a1 + 48),  *(void *)(*((void *)&v16 + 1) + 8 * (void)i),  (void)v16))
          {
            [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) addObject:v3];
            goto LABEL_44;
          }
        }

        id v13 = [v11 countByEnumeratingWithState:&v16 objects:v20 count:16];
        if (v13) {
          continue;
        }
        break;
      }
    }

LABEL_45:
}

  return 0;
}

        uint64_t v29 = 0LL;
        uint64_t v15 = 0;
LABEL_243:

        goto LABEL_244;
      }

      if (v13 != 224 || var0[1])
      {
        uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          *(void *)&uint8_t buf[4] = v186;
          _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "%@: encryption expects 0xe000 - packet is corrupt",  buf,  0xCu);
        }

        goto LABEL_45;
      }

      v84 = *((unsigned __int16 *)var0 + 1);
      v85 = bswap32(*((_DWORD *)var0 + 1));
      v86 = sub_1003BB3A8( (uint64_t)-[IDSDeviceConnectionInfo incomingEncryptionTableBySSRC](v8, "incomingEncryptionTableBySSRC"),  v85);
      v87 = (double *)objc_claimAutoreleasedReturnValue(v86);
      uint64_t v29 = v87;
      if (!v87)
      {
        v105 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
        if (os_log_type_enabled(v105, OS_LOG_TYPE_DEFAULT))
        {
          if (var2 >= 0x28) {
            v106 = 40LL;
          }
          else {
            v106 = var2;
          }
          v107 = objc_claimAutoreleasedReturnValue( +[NSData dataWithBytesNoCopy:length:freeWhenDone:]( &OBJC_CLASS___NSData,  "dataWithBytesNoCopy:length:freeWhenDone:",  var0,  v106,  0LL));
          v108 = (void *)v107;
          v109 = " ...";
          *(_DWORD *)buf = 138413058;
          *(void *)&uint8_t buf[4] = v186;
          *(_WORD *)&buf[12] = 1024;
          if (var2 < 0x29) {
            v109 = "";
          }
          *(_DWORD *)&buf[14] = v85;
          *(_WORD *)&buf[18] = 2112;
          *(void *)&buf[20] = v107;
          *(_WORD *)&buf[28] = 2080;
          *(void *)&buf[30] = v109;
          _os_log_impl( (void *)&_mh_execute_header,  v105,  OS_LOG_TYPE_DEFAULT,  "%@: unable to find decryption context for ssrc:%08x data:[%@%s]",  buf,  0x26u);
        }

        uint64_t v29 = 0LL;
        goto LABEL_174;
      }

      if ([v87 didInvalidate])
      {
        v88 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
        if (os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412802;
          *(void *)&uint8_t buf[4] = v186;
          *(_WORD *)&buf[12] = 2112;
          *(void *)&buf[14] = v29;
          *(_WORD *)&buf[22] = 1024;
          *(_DWORD *)&buf[24] = v85;
          _os_log_impl( (void *)&_mh_execute_header,  v88,  OS_LOG_TYPE_DEFAULT,  "%@: connection %@ is already invalidated for ssrc:%08x - dropping this incoming packet",  buf,  0x1Cu);
        }

LABEL_174:
        uint64_t v15 = 1;
        goto LABEL_243;
      }

      var0 += 8;
      var2 -= 8LL;
      v135 = sub_1001FD140( (uint64_t)[v29 encryptionState],  bswap32(v84) >> 16,  (unsigned __int8 *)var0,  var2,  0);
      uint64_t v15 = 1;
      if ((_DWORD)v135)
      {
        v136 = v135;
        if ((_DWORD)v135 != 4)
        {
          v137 = -[IDSDeviceConnectionInfo portMap](v8, "portMap");
          v138 = (void *)objc_claimAutoreleasedReturnValue([v29 addressPair]);
          v139 = (void *)objc_claimAutoreleasedReturnValue([v138 localAddress]);
          -[IDSUTunController releasePortIfNecessary:port:]( self,  "releasePortIfNecessary:port:",  v137,  [v139 saPortHostOrder]);

          v140 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Decryption failure: %u",  v136));
          -[IDSUTunController removeConnection:fromDeviceConnectionInfo:removeCode:removeReason:]( self,  "removeConnection:fromDeviceConnectionInfo:removeCode:removeReason:",  v29,  v8,  5301LL,  v140);
        }

        goto LABEL_243;
      }

      __int128 v16 = v29;
    }

    else
    {
      uint64_t v15 = 0;
      __int128 v16 = 0LL;
    }

    v190 = (int8x16_t *)0xAAAAAAAAAAAAAAAALL;
    v189 = -1431655766;
    __int128 v17 = *var0;
    __int128 v18 = (v17 >> 5) & 3;
    if (v18)
    {
      if (v18 != 1)
      {
        v185 = v16;
        uint64_t v22 = [v16 encryptionEnabled];
        oslog = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
        uint64_t v23 = os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT);
        if (!v22)
        {
          if (v23)
          {
            id v30 = (void *)objc_claimAutoreleasedReturnValue( +[NSData dataWithBytesNoCopy:length:freeWhenDone:]( &OBJC_CLASS___NSData,  "dataWithBytesNoCopy:length:freeWhenDone:",  var0,  var2,  0LL));
            *(_DWORD *)buf = 138412802;
            *(void *)&uint8_t buf[4] = v186;
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = (v17 >> 5) & 3;
            *(_WORD *)&buf[18] = 2112;
            *(void *)&buf[20] = v30;
            _os_log_impl( (void *)&_mh_execute_header,  oslog,  OS_LOG_TYPE_DEFAULT,  "%@: dropping unknown proto[0x%01x] packet [%@]",  buf,  0x1Cu);
          }

          goto LABEL_157;
        }

        if (v23)
        {
          id v24 = (void *)objc_claimAutoreleasedReturnValue( +[NSData dataWithBytesNoCopy:length:freeWhenDone:]( &OBJC_CLASS___NSData,  "dataWithBytesNoCopy:length:freeWhenDone:",  var0,  var2,  0LL));
          *(_DWORD *)buf = 138412802;
          *(void *)&uint8_t buf[4] = v186;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = (v17 >> 5) & 3;
          *(_WORD *)&buf[18] = 2112;
          *(void *)&buf[20] = v24;
          _os_log_impl( (void *)&_mh_execute_header,  oslog,  OS_LOG_TYPE_DEFAULT,  "%@: dropping unknown proto[0x%01x] packet (encrypted) [%@]",  buf,  0x1Cu);
        }
}

        goto LABEL_66;
      }

      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([obj objectForKeyedSubscript:v17]);
      if (!v23)
      {
        if (v7)
        {
          v120 = NSUnderlyingErrorKey;
          v121 = v7;
          id v25 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v121,  &v120,  1LL));
        }

        else
        {
          id v25 = 0LL;
        }

        v51 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"IDSKTRegistrationDataManagerErrorDomain",  -2002LL,  v25));
        uint64_t v52 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
        if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412802;
          *(void *)v125 = @"kt-sig-resp";
          *(_WORD *)&v125[8] = 2112;
          *(void *)&v125[10] = &off_100947E78;
          *(_WORD *)&v125[18] = 2112;
          *(void *)&v125[20] = v51;
          _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_DEFAULT,  "Reporting KT metric { metricName: %@, errorCode: %@, error: %@ }",  buf,  0x20u);
        }

        v53 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger"));
        [v53 logResultForEvent:@"kt-sig-resp" hardFailure:1 result:v51];

        v54 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
        if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)v125 = v18;
          *(_WORD *)&v125[4] = 2112;
          *(void *)&v125[6] = v17;
          *(_WORD *)&v125[14] = 2112;
          *(void *)&v125[16] = v51;
          *(_WORD *)&v125[24] = 2112;
          *(void *)&v125[26] = v109;
          _os_log_error_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_ERROR,  "No signature data from KT for KT Application. { keyIndex: %u, ktApplication: %@, error: %@, underlyingError: %@ }",  buf,  0x26u);
        }

        goto LABEL_65;
      }

      id v24 = (void *)objc_claimAutoreleasedReturnValue([v21 unregisteredKTData]);
      id v25 = (void *)objc_claimAutoreleasedReturnValue([v24 ktDataForRegistration]);

      if (!v25
        || (id v26 = (void *)objc_claimAutoreleasedReturnValue([v23 tbsKTIDSRegistrationData]),
            __int128 v27 = [v25 isEqualToData:v26],
            v26,
            (v27 & 1) == 0))
      {
        if (v7)
        {
          v118 = NSUnderlyingErrorKey;
          v119 = v7;
          id v40 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v119,  &v118,  1LL));
        }

        else
        {
          id v40 = 0LL;
        }

        v47 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"IDSKTRegistrationDataManagerErrorDomain",  -2003LL,  v40));
        v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
        if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412802;
          *(void *)v125 = @"kt-sig-resp";
          *(_WORD *)&v125[8] = 2112;
          *(void *)&v125[10] = &off_100947E90;
          *(_WORD *)&v125[18] = 2112;
          *(void *)&v125[20] = v47;
          _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_DEFAULT,  "Reporting KT metric { metricName: %@, errorCode: %@, error: %@ }",  buf,  0x20u);
        }

        v49 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger"));
        [v49 logResultForEvent:@"kt-sig-resp" hardFailure:1 result:v47];

        id v50 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
        if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
        {
          v106 = (void *)objc_claimAutoreleasedReturnValue([v23 tbsKTIDSRegistrationData]);
          *(_DWORD *)buf = 138413314;
          *(void *)v125 = v25;
          *(_WORD *)&v125[8] = 2112;
          *(void *)&v125[10] = v106;
          *(_WORD *)&v125[18] = 1024;
          *(_DWORD *)&v125[20] = v18;
          *(_WORD *)&v125[24] = 2112;
          *(void *)&v125[26] = v47;
          v126 = 2112;
          v127 = v109;
          _os_log_error_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_ERROR,  "KT data requiring signature not matching between transparency and IDS. { IDSKTData: %@, TransparencyKTData: %@, keyIndex: %u, error: %@, underlyingError: %@ }",  buf,  0x30u);
        }

        goto LABEL_64;
      }

      id v28 = objc_claimAutoreleasedReturnValue([v23 signature]);
      if (!v28
        || (uint64_t v29 = (void *)v28,
            id v30 = (void *)objc_claimAutoreleasedReturnValue([v23 publicKey]),
            v30,
            v29,
            !v30))
      {
        if (v7)
        {
          v116 = NSUnderlyingErrorKey;
          v117 = v7;
          id v40 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v117,  &v116,  1LL));
        }

        else
        {
          id v40 = 0LL;
        }

        v47 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"IDSKTRegistrationDataManagerErrorDomain",  -2004LL,  v40));
        uint64_t v55 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
        if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412802;
          *(void *)v125 = @"kt-sig-resp";
          *(_WORD *)&v125[8] = 2112;
          *(void *)&v125[10] = &off_100947EA8;
          *(_WORD *)&v125[18] = 2112;
          *(void *)&v125[20] = v47;
          _os_log_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_DEFAULT,  "Reporting KT metric { metricName: %@, errorCode: %@, error: %@ }",  buf,  0x20u);
        }

        uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger"));
        [v56 logResultForEvent:@"kt-sig-resp" hardFailure:1 result:v47];

        id v50 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
        if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109634;
          *(_DWORD *)v125 = v18;
          *(_WORD *)&v125[4] = 2112;
          *(void *)&v125[6] = v47;
          *(_WORD *)&v125[14] = 2112;
          *(void *)&v125[16] = v109;
          _os_log_error_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_ERROR,  "No signature or public key provided from transparency for key index. { keyIndex: %u, error: %@, underlyingError: %@ }",  buf,  0x1Cu);
        }

        __break(1u);
        return result;
      }
    }

    else
    {
      uint64_t v34 = *(void *)(v40 + 16);
      if (v34) {
        goto LABEL_35;
      }
    }

    return swift_release(v33);
  }

  return result;
}

    id v40 = (v25 - 1) & v25;
    id v42 = v26;
    uint64_t v23 = __clz(__rbit64(v25)) + (v26 << 6);
LABEL_46:
    id v28 = (uint64_t *)(*(void *)(a3 + 48) + 16 * v23);
    id v30 = *v28;
    uint64_t v29 = v28[1];
    Hasher.init(_seed:)(&__s1, *(void *)(a4 + 40));
    sub_1004028CC(v30, v29);
    Data.hash(into:)(&__s1, v30, v29);
    id v31 = Hasher._finalize()() & ~(-1LL << *(_BYTE *)(a4 + 32));
    if (((*(void *)(v44 + ((v31 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v31) & 1) != 0) {
      __asm { BR              X8 }
    }

    sub_100402A84(v30, v29);
    uint64_t v22 = v40;
    __int128 v19 = v42;
  }

  __int128 v27 = v19 + 4;
  if (v19 + 4 >= v37) {
    goto LABEL_48;
  }
  id v25 = *(void *)(v34 + 8 * v27);
  if (v25)
  {
    id v26 = v19 + 4;
    goto LABEL_45;
  }

  while (1)
  {
    id v26 = v27 + 1;
    if (__OFADD__(v27, 1LL)) {
      goto LABEL_52;
    }
    if (v26 >= v37) {
      break;
    }
    id v25 = *(void *)(v34 + 8 * v26);
    ++v27;
    if (v25) {
      goto LABEL_45;
    }
  }

void sub_100113974(id a1, IDSIncomingMessageBroadcast *a2, unint64_t a3, BOOL *a4)
{
  id v4 = a2;
  uint64_t v5 = OSLogHandleForTransportCategory("IDSDaemon");
  unsigned int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    int v7 = 134217984;
    int64_t v8 = -[IDSIncomingMessageBroadcast broadcastID](v4, "broadcastID");
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "\t\tBroadcast ID: %lld\n", (uint8_t *)&v7, 0xCu);
  }
}

void sub_1001146D0( _Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1001142A4LL);
  }

  os_activity_scope_leave((os_activity_scope_state_t)(v16 - 200));
  cut_arc_os_release(v16 - 184);
  _Unwind_Resume(exc_buf);
}

uint64_t sub_100114B7C(uint64_t a1, uint64_t a2)
{
  if (a2 != 1)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 96));
    pthread_mutex_lock((pthread_mutex_t *)(*(void *)(a1 + 32) + 8LL));
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _lockedRemoteObjectsWithNotificationService:*(void *)(a1 + 40) entitlement:*(void *)(a1 + 48) command:*(void *)(a1 + 56) capabilities:*(unsigned int *)(a1 + 112)]);
    pthread_mutex_unlock((pthread_mutex_t *)(*(void *)(a1 + 32) + 8LL));
    if ([v5 count])
    {
      uint64_t v6 = OSLogHandleForTransportCategory("IDSDaemon");
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        int64_t v8 = *(void **)(a1 + 104);
        uint64_t v9 = *(void *)(a1 + 64);
        *(_DWORD *)buf = 134218242;
        id v37 = v8;
        __int16 v38 = 2112;
        uint64_t v39 = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_INFO,  "Broadcast: Performing enqueued broadcast %lld for topic %@\n",  buf,  0x16u);
      }

      uint64_t v11 = os_log_shim_legacy_logging_enabled(v10);
      if ((_DWORD)v11 && _IDSShouldLogTransport(v11))
      {
        uint64_t v34 = *(void *)(a1 + 104);
        uint64_t v35 = *(void *)(a1 + 64);
        _IDSLogTransport( @"IDSDaemon",  @"IDS",  @"Broadcast: Performing enqueued broadcast %lld for topic %@\n");
      }

      id v12 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(*(void *)(a1 + 32) + 128),  "broadcastProxyForTargets:messageContext:protocol:",  v5,  *(void *)(a1 + 72),  &OBJC_PROTOCOL___IDSDaemonListenerProtocol,  v34,  v35));
      (*(void (**)(void))(*(void *)(a1 + 88) + 16LL))();
    }

    else
    {
      id v13 = *(void **)(a1 + 80);
      if (!v13 || ([v13 timeIntervalSinceNow], fabs(v14) <= 300.0))
      {
        uint64_t v23 = OSLogHandleForTransportCategory("IDSDaemon");
        id v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
          id v25 = [WeakRetained broadcastID];
          uint64_t v26 = *(void *)(a1 + 40);
          uint64_t v27 = *(void *)(a1 + 48);
          uint64_t v29 = *(void *)(a1 + 56);
          uint64_t v28 = *(void *)(a1 + 64);
          int v30 = *(_DWORD *)(a1 + 112);
          *(_DWORD *)buf = 134219266;
          id v37 = v25;
          __int16 v38 = 2112;
          uint64_t v39 = v28;
          __int16 v40 = 2112;
          uint64_t v41 = v26;
          __int16 v42 = 2112;
          uint64_t v43 = v27;
          __int16 v44 = 2112;
          uint64_t v45 = v29;
          __int16 v46 = 1024;
          int v47 = v30;
          _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "Broadcast: enqueued broadcast %lld of topic %@ doesn't find target with service %@ entitlement %@ command %@ capabilities %u",  buf,  0x3Au);
        }

        uint64_t v32 = os_log_shim_legacy_logging_enabled(v31);
        if ((_DWORD)v32 && _IDSShouldLogTransport(v32))
        {
          [WeakRetained broadcastID];
          _IDSLogTransport( @"IDSDaemon",  @"IDS",  @"Broadcast: enqueued broadcast %lld of topic %@ doesn't find target with service %@ entitlement %@ command %@ capabilities %u");
        }

        uint64_t v3 = 0LL;
        goto LABEL_25;
      }

      uint64_t v15 = OSLogHandleForTransportCategory("IDSDaemon");
      uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        __int128 v17 = *(void **)(a1 + 104);
        uint64_t v18 = *(void *)(a1 + 80);
        uint64_t v19 = *(void *)(a1 + 64);
        *(_DWORD *)buf = 134218498;
        id v37 = v17;
        __int16 v38 = 2112;
        uint64_t v39 = v18;
        __int16 v40 = 2112;
        uint64_t v41 = v19;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Broadcast: Broadcast %lld enqueued at %@ has timed out - Calling timed out broadcast block for topic %@ with n il broadcaster to allow cleanup\n",  buf,  0x20u);
      }

      uint64_t v21 = os_log_shim_legacy_logging_enabled(v20);
      if ((_DWORD)v21 && _IDSShouldLogTransport(v21)) {
        _IDSLogTransport( @"IDSDaemon",  @"IDS",  @"Broadcast: Broadcast %lld enqueued at %@ has timed out - Calling timed out broadcast block for topic %@ with nil broadcaster to allow cleanup\n");
      }
      (*(void (**)(void, void, uint64_t))(*(void *)(a1 + 88) + 16LL))(*(void *)(a1 + 88), 0LL, v22);
    }

    uint64_t v3 = 1LL;
LABEL_25:

    return v3;
  }

  (*(void (**)(void))(*(void *)(a1 + 88) + 16LL))();
  return 1LL;
}

void sub_100115598(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1001154F8LL);
  }

  _Unwind_Resume(a1);
}

void sub_100115DDC( _Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x100115CC4LL);
  }

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(exc_buf);
}

void sub_100115E3C(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v9 = a2;
  if ([v9 broadcastID] == *(id *)(a1 + 48))
  {
    int v7 = (void *)objc_claimAutoreleasedReturnValue([v9 messageUUID]);
    unsigned int v8 = [v7 isEqualToIgnoringCase:*(void *)(a1 + 32)];

    if (v8)
    {
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a2);
      *a4 = 1;
    }
  }
}

void sub_100116108(id a1, IDSIncomingMessageBroadcast *a2, unint64_t a3, BOOL *a4)
{
}

void sub_1001165A0(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v7 = a2;
  if (([v7 broadcastPerformed] & 1) == 0)
  {
    unsigned int v8 = (uint64_t (**)(void, void))objc_claimAutoreleasedReturnValue([v7 broadcastBlock]);
    int v9 = v8[2](v8, 0LL);

    uint64_t v10 = OSLogHandleForTransportCategory("IDSDaemon");
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      id v12 = [v7 broadcastID];
      uint64_t v13 = *(void *)(a1 + 32);
      unsigned int v14 = [v7 broadcastNeedsClientAck];
      int v15 = *(unsigned __int8 *)(a1 + 56);
      *(_DWORD *)buf = 134219010;
      id v20 = v12;
      __int16 v21 = 2112;
      uint64_t v22 = v13;
      __int16 v23 = 1024;
      int v24 = v9;
      __int16 v25 = 1024;
      unsigned int v26 = v14;
      __int16 v27 = 1024;
      int v28 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "Broadcast: previously enqueued broadcast %lld for service %@ succeeded %d needsClientAck %d forceRetry %d \n",  buf,  0x28u);
    }

    uint64_t v17 = os_log_shim_legacy_logging_enabled(v16);
    if ((_DWORD)v17 && _IDSShouldLogTransport(v17))
    {
      [v7 broadcastID];
      [v7 broadcastNeedsClientAck];
      *(void *)&double v18 = _IDSLogTransport( @"IDSDaemon",  @"IDS",  @"Broadcast: previously enqueued broadcast %lld for service %@ succeeded %d needsClientAck %d forceRetry %d \n").n128_u64[0];
    }

    if ((v9 & 1) != 0)
    {
      objc_msgSend(v7, "setBroadcastPerformed:", 1, v18);
    }

    else
    {
      *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 0;
      *a4 = 1;
    }
  }
}

void sub_100116B60(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = OSLogHandleForTransportCategory("IDSDaemon");
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = (id)objc_claimAutoreleasedReturnValue([v3 messageUUID]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
    *(_DWORD *)buf = 138412546;
    id v14 = v6;
    __int16 v15 = 2112;
    uint64_t v16 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Dropping %@ for %@", buf, 0x16u);
  }

  uint64_t v9 = os_log_shim_legacy_logging_enabled(v8);
  if ((_DWORD)v9)
  {
    if (_IDSShouldLogTransport(v9))
    {
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v3 messageUUID]);
      id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
      _IDSLogTransport(@"IDSDaemon", @"IDS", @"Dropping %@ for %@");

      if (_IDSShouldLog(0LL, @"IDSDaemon"))
      {
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "messageUUID", v11, v12));
        id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
        _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon", @"Dropping %@ for %@");
      }
    }
  }

  if ((objc_msgSend(v3, "broadcastPerformed", v11, v12) & 1) == 0)
  {
    uint64_t v10 = (void (**)(void, void))objc_claimAutoreleasedReturnValue([v3 broadcastBlock]);
    v10[2](v10, 1LL);
  }
}

void sub_1001179CC(_Unwind_Exception *a1)
{
}

void sub_1001179F4(uint64_t a1, void *a2)
{
}

BOOL sub_100117F90(id a1, id a2, NSDictionary *a3)
{
  return objc_msgSend(a2, "length", a3) != 0;
}

void sub_100117FB0(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v4 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    uint64_t v10 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Updating interested bundle IDs to: %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v7) && _IDSShouldLog(1LL, @"IDSDaemon"))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    _IDSLogV(1LL, @"IDSFoundation", @"IDSDaemon", @"Updating interested bundle IDs to: %@");
  }

  objc_msgSend(WeakRetained[48], "updateInterestedBundleIDs:", *(void *)(a1 + 32), v8);

  objc_autoreleasePoolPop(v2);
}

void sub_1001183C4(uint64_t a1, void *a2)
{
  id v68 = a2;
  v69 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  v72 = (void *)objc_claimAutoreleasedReturnValue([v68 entitlements]);
  if ([v72 hasAnyEntitlements])
  {
    __int128 v83 = 0u;
    __int128 v84 = 0u;
    __int128 v81 = 0u;
    __int128 v82 = 0u;
    id obj = *(id *)(a1 + 32);
    id v2 = [obj countByEnumeratingWithState:&v81 objects:v94 count:16];
    if (v2)
    {
      uint64_t v3 = *(void *)v82;
      uint64_t v4 = kIDSRegistrationEntitlement;
      uint64_t v5 = kIDSSessionEntitlement;
      uint64_t v6 = kIDSMessagingEntitlement;
      do
      {
        for (i = 0LL; i != v2; i = (char *)i + 1)
        {
          if (*(void *)v82 != v3) {
            objc_enumerationMutation(obj);
          }
          uint64_t v8 = *(void *)(*((void *)&v81 + 1) + 8LL * (void)i);
          v93[0] = v4;
          v93[1] = v5;
          v93[2] = v6;
          uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v93, 3LL));
          unsigned int v10 = [v72 hasService:v8 forAnyOfEntitlements:v9];

          if (v10) {
            -[NSMutableSet addObject:](v69, "addObject:", v8);
          }
        }

        id v2 = [obj countByEnumeratingWithState:&v81 objects:v94 count:16];
      }

      while (v2);
    }
  }

  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL), v69);
  id v11 = [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) copy];
  uint64_t v12 = *(void *)(*(void *)(a1 + 64) + 8LL);
  uint64_t v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 40) = v11;

  id v14 = (void *)objc_claimAutoreleasedReturnValue([v68 notificationServices]);
  id v15 = [v14 copy];
  uint64_t v16 = *(void *)(*(void *)(a1 + 72) + 8LL);
  uint64_t v17 = *(void **)(v16 + 40);
  *(void *)(v16 + 40) = v15;

  uint64_t v18 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
  {
    id v20 = *(const __CFString **)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
    __int16 v21 = *(void **)(a1 + 40);
    int v22 = *(_DWORD *)(a1 + 80);
    *(_DWORD *)buf = 138412802;
    v88 = v20;
    __int16 v89 = 2112;
    id v90 = v21;
    __int16 v91 = 1024;
    LODWORD(v92) = v22;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEBUG,  "Allowing listener services %@ commands %@ caps %d",  buf,  0x1Cu);
  }

  if (os_log_shim_legacy_logging_enabled(v23) && _IDSShouldLog(1LL, @"IDSDaemon"))
  {
    id v66 = *(id *)(a1 + 40);
    id v67 = (id)*(unsigned int *)(a1 + 80);
    v65 = *(const __CFString **)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
    _IDSLogV( 1LL,  @"IDSFoundation",  @"IDSDaemon",  @"Allowing listener services %@ commands %@ caps %d");
  }

  uint64_t v24 = OSLogHandleForIDSCategory("IDSDaemon");
  __int16 v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v26 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
    *(_DWORD *)buf = 138412802;
    v88 = @"services";
    __int16 v89 = 2112;
    id v90 = v26;
    __int16 v91 = 2112;
    id v92 = v68;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "Got %@ %@ for listener %@", buf, 0x20u);
  }

  if (os_log_shim_legacy_logging_enabled(v27) && _IDSShouldLog(1LL, @"IDSDaemon"))
  {
    id v66 = *(id *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
    id v67 = v68;
    v65 = @"services";
    _IDSLogV(1LL, @"IDSFoundation", @"IDSDaemon", @"Got %@ %@ for listener %@");
  }

  if (!*(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL))
  {
    uint64_t v28 = objc_claimAutoreleasedReturnValue(+[NSSet set](&OBJC_CLASS___NSSet, "set"));
    uint64_t v29 = *(void *)(*(void *)(a1 + 56) + 8LL);
    int v30 = *(void **)(v29 + 40);
    *(void *)(v29 + 40) = v28;
  }

  if (v68)
  {
    uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v68 services]);
    if (([v31 isEqualToSet:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)] & 1) == 0)
    {
      [v68 setServices:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
      if ([v31 isSubsetOfSet:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)])
      {
        uint64_t v32 = a1;
        __int16 v33 = *(void **)(*(void *)(a1 + 48) + 112LL);
        if (!v33)
        {
          uint64_t v34 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
          uint64_t v35 = *(void *)(a1 + 48);
          id v36 = *(void **)(v35 + 112);
          *(void *)(v35 + 112) = v34;

          __int16 v33 = *(void **)(*(void *)(a1 + 48) + 112LL);
          uint64_t v32 = a1;
        }

        objc_msgSend(v33, "unionSet:", *(void *)(*(void *)(*(void *)(v32 + 56) + 8) + 40), v65, v66, v67);
      }

      else
      {
        id v37 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
        uint64_t v38 = *(void *)(a1 + 48);
        uint64_t v39 = *(void **)(v38 + 112);
        *(void *)(v38 + 112) = v37;

        __int128 v79 = 0u;
        __int128 v80 = 0u;
        __int128 v77 = 0u;
        __int128 v78 = 0u;
        id v40 = *(id *)(*(void *)(a1 + 48) + 72LL);
        id v41 = [v40 countByEnumeratingWithState:&v77 objects:v86 count:16];
        if (v41)
        {
          uint64_t v42 = *(void *)v78;
          do
          {
            for (j = 0LL; j != v41; j = (char *)j + 1)
            {
              if (*(void *)v78 != v42) {
                objc_enumerationMutation(v40);
              }
              __int16 v44 = *(void **)(*(void *)(a1 + 48) + 112LL);
              [v44 unionSet:v45];
            }

            id v41 = [v40 countByEnumeratingWithState:&v77 objects:v86 count:16];
          }

          while (v41);
        }
      }

      objc_msgSend(*(id *)(a1 + 48), "updateTopics", v65, v66, v67);
    }
  }

  id v46 = *(id *)(a1 + 40);
  uint64_t v47 = OSLogHandleForIDSCategory("IDSDaemon");
  v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(v47);
  if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138412802;
    v88 = @"commands";
    __int16 v89 = 2112;
    id v90 = v46;
    __int16 v91 = 2112;
    id v92 = v68;
    _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEBUG, "Got %@ %@ for listener %@", buf, 0x20u);
  }

  if (os_log_shim_legacy_logging_enabled(v49) && _IDSShouldLog(1LL, @"IDSDaemon"))
  {
    id v66 = v46;
    id v67 = v68;
    v65 = @"commands";
    _IDSLogV(1LL, @"IDSFoundation", @"IDSDaemon", @"Got %@ %@ for listener %@");
  }

  id v50 = v68;
  if (v46)
  {
    if (!v68) {
      goto LABEL_64;
    }
  }

  else
  {
    id v46 = (id)objc_claimAutoreleasedReturnValue(+[NSSet set](&OBJC_CLASS___NSSet, "set"));
    id v50 = v68;
    if (!v68) {
      goto LABEL_64;
    }
  }

  v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "commands", v65, v66, v67));
  if (([v51 isEqualToSet:v46] & 1) == 0)
  {
    [v68 setCommands:v46];
    if ([v51 isSubsetOfSet:v46])
    {
      uint64_t v52 = *(void **)(*(void *)(a1 + 48) + 120LL);
      if (!v52)
      {
        v53 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
        uint64_t v54 = *(void *)(a1 + 48);
        uint64_t v55 = *(void **)(v54 + 120);
        *(void *)(v54 + 120) = v53;

        uint64_t v52 = *(void **)(*(void *)(a1 + 48) + 120LL);
      }

      [v52 unionSet:v46];
    }

    else
    {
      uint64_t v56 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
      uint64_t v57 = *(void *)(a1 + 48);
      v58 = *(void **)(v57 + 120);
      *(void *)(v57 + 120) = v56;

      __int128 v75 = 0u;
      __int128 v76 = 0u;
      __int128 v73 = 0u;
      __int128 v74 = 0u;
      id v59 = *(id *)(*(void *)(a1 + 48) + 72LL);
      id v60 = [v59 countByEnumeratingWithState:&v73 objects:v85 count:16];
      if (v60)
      {
        uint64_t v61 = *(void *)v74;
        do
        {
          for (k = 0LL; k != v60; k = (char *)k + 1)
          {
            if (*(void *)v74 != v61) {
              objc_enumerationMutation(v59);
            }
            v63 = *(void **)(*(void *)(a1 + 48) + 120LL);
            uint64_t v64 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v73 + 1) + 8 * (void)k) commands]);
            [v63 unionSet:v64];
          }

          id v60 = [v59 countByEnumeratingWithState:&v73 objects:v85 count:16];
        }

        while (v60);
      }
    }

    [*(id *)(a1 + 48) _updatePushCommandsLocked];
  }

  id v50 = v68;
LABEL_64:
}

void sub_100118DF4(_Unwind_Exception *a1)
{
}

void sub_100118E2C(void *a1, void *a2)
{
  id v3 = a2;
  *(_BYTE *)(*(void *)(a1[5] + 8LL) + 24LL) = 1;
  uint64_t v4 = objc_claimAutoreleasedReturnValue([v3 notificationServices]);
  uint64_t v5 = *(void *)(a1[6] + 8LL);
  uint64_t v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  uint64_t v7 = OSLogHandleForTransportCategory("IDSDaemon");
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(*(void *)(a1[6] + 8LL) + 40LL);
    uint64_t v10 = *(void *)(*(void *)(a1[7] + 8LL) + 40LL);
    *(_DWORD *)buf = 136315650;
    __int16 v21 = "-[IDSDaemon registerForNotificationsOnServices:messageContext:]_block_invoke";
    __int16 v22 = 2112;
    uint64_t v23 = v9;
    __int16 v24 = 2112;
    uint64_t v25 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%s: received client request to change notification services from %@ to %@ \n",  buf,  0x20u);
  }

  uint64_t v12 = os_log_shim_legacy_logging_enabled(v11);
  if ((_DWORD)v12 && _IDSShouldLogTransport(v12))
  {
    uint64_t v18 = *(void *)(*(void *)(a1[6] + 8LL) + 40LL);
    uint64_t v19 = *(void *)(*(void *)(a1[7] + 8LL) + 40LL);
    uint64_t v17 = "-[IDSDaemon registerForNotificationsOnServices:messageContext:]_block_invoke";
    *(void *)&double v13 = _IDSLogTransport( @"IDSDaemon",  @"IDS",  @"%s: received client request to change notification services from %@ to %@ \n").n128_u64[0];
  }

  objc_msgSend( *(id *)(*(void *)(a1[7] + 8) + 40),  "minusSet:",  *(void *)(*(void *)(a1[6] + 8) + 40),  v13,  v17,  v18,  v19);
  [*(id *)(*(void *)(a1[6] + 8) + 40) unionSet:a1[4]];
  id v14 = [*(id *)(*(void *)(a1[6] + 8) + 40) copy];
  uint64_t v15 = *(void *)(a1[6] + 8LL);
  uint64_t v16 = *(void **)(v15 + 40);
  *(void *)(v15 + 40) = v14;
}

LABEL_63:
}

      __int16 v44 = (IDSUTunConnection *)objc_claimAutoreleasedReturnValue( -[IDSLocalDeliveryQueue nextSocketPairMessageNotOnServices:]( self->_deliveryQueue,  "nextSocketPairMessageNotOnServices:",  v14,  v135));

      uint64_t v45 = objc_claimAutoreleasedReturnValue(-[IDSUTunConnection context](v44, "context"));
      id v37 = v38;
      id v36 = (void *)v45;
      uint64_t v35 = v44;
      if (!v44)
      {

        id v36 = (void *)v45;
        goto LABEL_189;
      }
    }

    id v46 = [v36 manualQueueRemoval];
    if ((v46 & 1) == 0)
    {
      [v36 setUnderlyingSocketPairMessage:0];
      -[IDSLocalDeliveryQueue dequeueMessage:](self->_deliveryQueue, "dequeueMessage:", v36);
    }

    if (!self->_sendingPowerAssertion)
    {
      if (v38)
      {
        uint64_t v47 = (__CFString *)(id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"IDSUTunConnection-sending-%@",  v38));
      }

      else
      {
        uint64_t v47 = @"IDSUTunConnection-sending";
      }

      v48 = -[IMPowerAssertion initWithIdentifier:timeout:]( objc_alloc(&OBJC_CLASS___IMPowerAssertion),  "initWithIdentifier:timeout:",  v47,  120.0);
      sendingPowerAssertion = self->_sendingPowerAssertion;
      self->_sendingPowerAssertion = v48;

      id v50 = OSLogHandleForIDSCategory("UTunConnection");
      v51 = (os_log_s *)objc_claimAutoreleasedReturnValue(v50);
      if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v52 = self->_sendingPowerAssertion;
        *(_DWORD *)buf = 138412546;
        v187 = self;
        v188 = 2112;
        *(void *)v189 = v52;
        _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_DEFAULT,  "%@ created sending power assertion %@",  buf,  0x16u);
      }

      if (os_log_shim_legacy_logging_enabled(v53)
        && _IDSShouldLog(0LL, @"UTunConnection"))
      {
        v135 = self;
        v137 = self->_sendingPowerAssertion;
        _IDSLogV(0LL, @"IDSFoundation", @"UTunConnection", @"%@ created sending power assertion %@");
      }
    }

    -[IDSUTunConnection setTopic:](v35, "setTopic:", v38, v135, v137);
    if (self->_supportDynamicServices && (objc_opt_respondsToSelector(v35, "setStreamID:") & 1) != 0)
    {
      v181 = 0;
      v180 = -21846;
      if (self->_supportDynamicServicesOptimization)
      {
        if (-[IDSUTunPeerServiceMap translateServiceName:toStreamID:createIfNotFound:mappingCreated:remoteInstanceID:remoteInstanceIDChanged:]( self->_outgoingServiceMap,  "translateServiceName:toStreamID:createIfNotFound:mappingCreated:remoteInstanceID:remoteInstanceIDChanged:",  v38,  &v180,  0LL,  0LL,  remoteInstanceID,  &v181))
        {
          uint64_t v54 = OSLogHandleForIDSCategory("UTunConnection");
          uint64_t v55 = (os_log_s *)objc_claimAutoreleasedReturnValue(v54);
          if (os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v56 = (IDSUTunConnection *)(id)objc_claimAutoreleasedReturnValue([v36 messageUUID]);
            *(_DWORD *)buf = 138412802;
            v187 = v56;
            v188 = 2112;
            *(void *)v189 = v38;
            *(_WORD *)&v189[8] = 1024;
            *(_DWORD *)v190 = v180;
            _os_log_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_DEBUG,  "Translated message %@ with servicename %@ to streamID %u",  buf,  0x1Cu);
          }

          if (os_log_shim_legacy_logging_enabled(v57)
            && _IDSShouldLog(2LL, @"UTunConnection"))
          {
            v58 = (IDSUTunConnection *)objc_claimAutoreleasedReturnValue([v36 messageUUID]);
            v137 = (IMPowerAssertion *)v38;
            v138 = v180;
            v135 = v58;
            _IDSLogV( 2LL,  @"IDSFoundation",  @"UTunConnection",  @"Translated message %@ with servicename %@ to streamID %u");
          }

          -[IDSUTunConnection setStreamID:](v35, "setStreamID:", v180, v135);
          -[IDSUTunConnection setUseDynamicServiceName:](v35, "setUseDynamicServiceName:", 0LL);
        }

        else
        {
          -[IDSUTunConnection setUseDynamicServiceName:](v35, "setUseDynamicServiceName:", 1LL);
          v179 = 0;
          v178 = 0;
          if (-[IDSUTunPeerServiceMap translateServiceName:toStreamID:createIfNotFound:mappingCreated:remoteInstanceID:remoteInstanceIDChanged:]( self->_incomingServiceMap,  "translateServiceName:toStreamID:createIfNotFound:mappingCreated:remoteInstanceID:remoteInstanceIDChanged:",  v38,  &v178,  1LL,  &v179,  remoteInstanceID,  &v181))
          {
            id v59 = OSLogHandleForIDSCategory("UTunConnection");
            id v60 = (os_log_s *)objc_claimAutoreleasedReturnValue(v59);
            if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
            {
              log = v60;
              uint64_t v61 = (IDSUTunConnection *)(id)objc_claimAutoreleasedReturnValue([v36 messageUUID]);
              v62 = v178;
              v63 = v179;
              uint64_t v64 = -[IDSUTunConnection streamID](v35, "streamID");
              *(_DWORD *)buf = 138413314;
              v65 = @"YES";
              if (!v63) {
                v65 = @"NO";
              }
              v187 = v61;
              v188 = 2112;
              *(void *)v189 = v38;
              *(_WORD *)&v189[8] = 1024;
              *(_DWORD *)v190 = v62;
              *(_WORD *)&v190[4] = 2112;
              *(void *)&v190[6] = v65;
              *(_WORD *)&v190[14] = 1024;
              *(_DWORD *)&v190[16] = v64;
              _os_log_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_DEFAULT,  "Piggybacking message %@ with servicename %@ with incoming streamID %u created %@ (old id %u)",  buf,  0x2Cu);

              id v60 = log;
            }

            if (os_log_shim_legacy_logging_enabled(v66)
              && _IDSShouldLog(0LL, @"UTunConnection"))
            {
              id v67 = (IDSUTunConnection *)objc_claimAutoreleasedReturnValue([v36 messageUUID]);
              id v68 = v178;
              if (v179) {
                v69 = @"YES";
              }
              else {
                v69 = @"NO";
              }
              v139 = v69;
              v140 = -[IDSUTunConnection streamID](v35, "streamID");
              v137 = (IMPowerAssertion *)v38;
              v138 = v68;
              v135 = v67;
              _IDSLogV( 0LL,  @"IDSFoundation",  @"UTunConnection",  @"Piggybacking message %@ with servicename %@ with incoming streamID %u created %@ (old id %u)");
            }

            -[IDSUTunConnection setStreamID:](v35, "setStreamID:", v178, v135);
            if (!self->_incomingServiceMapUpdateCounter)
            {
              Mutable = (NSMutableDictionary *)CFDictionaryCreateMutable( 0LL,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
              incomingServiceMapUpdateCounter = self->_incomingServiceMapUpdateCounter;
              self->_incomingServiceMapUpdateCounter = Mutable;
            }

            CFDictionarySetValue((CFMutableDictionaryRef)self->_incomingServiceMapUpdateCounter, v38, &off_100947620);
          }

          else
          {
            v72 = OSLogHandleForTransportCategory("UTunConnection");
            __int128 v73 = (os_log_s *)objc_claimAutoreleasedReturnValue(v72);
            if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
            {
              __int128 v74 = (IDSUTunConnection *)(id)objc_claimAutoreleasedReturnValue([v36 messageUUID]);
              *(_DWORD *)buf = 138412546;
              v187 = v74;
              v188 = 2112;
              *(void *)v189 = v38;
              _os_log_impl( (void *)&_mh_execute_header,  v73,  OS_LOG_TYPE_DEFAULT,  "Remote instance changed while receiving message %@ with topic %@ - continue and dispatch reconnect",  buf,  0x16u);
            }

            __int128 v76 = os_log_shim_legacy_logging_enabled(v75);
            if ((_DWORD)v76)
            {
              if (_IDSShouldLogTransport(v76))
              {
                v135 = (IDSUTunConnection *)objc_claimAutoreleasedReturnValue([v36 messageUUID]);
                v137 = (IMPowerAssertion *)v38;
                _IDSLogTransport( @"UTunConnection",  @"IDS",  @"Remote instance changed while receiving message %@ with topic %@ - continue and dispatch reconnect");

                if (_IDSShouldLog(0LL, @"UTunConnection"))
                {
                  v135 = (IDSUTunConnection *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "messageUUID", v135, v38));
                  v137 = (IMPowerAssertion *)v38;
                  _IDSLogV( 0LL,  @"IDSFoundation",  @"UTunConnection",  @"Remote instance changed while receiving message %@ with topic %@ - continue and dispatch reconnect");
                }
              }
            }

            -[IDSUTunConnection setStreamID:](v35, "setStreamID:", 0LL, v135);
          }
        }
      }

      else
      {
        -[IDSUTunConnection setUseDynamicServiceName:](v35, "setUseDynamicServiceName:", 1LL);
      }
    }

    __int128 v77 = objc_claimAutoreleasedReturnValue(-[IDSUTunConnection serviceController](self, "serviceController"));
    __int128 v78 = (void *)objc_claimAutoreleasedReturnValue([(id)v77 serviceWithPushTopic:v38]);
    loga = (os_log_t)objc_claimAutoreleasedReturnValue([v78 dataUsageBundleID]);

    LOBYTE(v77) = !self->_shouldUseIPsecLink;
    __int128 v79 = -[IDSUTunConnection _isMagnetConnection](self, "_isMagnetConnection");
    if ((v77 & 1) != 0)
    {
      if (v79)
      {
        __int128 v82 = (id)-[IDSUTunConnection _currentLink](self, "_currentLink") != (id)1;
        goto LABEL_115;
      }

void sub_10011A084( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void *a9)
{
  id v46 = a2;
  id v12 = a8;
  id v13 = a9;
  kdebug_trace(722010224LL, 0LL, 0LL, 0LL, 0LL);
  uint64_t v14 = OSLogHandleForTransportCategory("IDSDaemon");
  uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)v48 = a6;
    *(_WORD *)&v48[4] = 2112;
    *(void *)&v48[6] = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "client's openSocketWithOptions call returned socket %d, error %@",  buf,  0x12u);
  }

  uint64_t v17 = os_log_shim_legacy_logging_enabled(v16);
  if ((_DWORD)v17)
  {
    if (_IDSShouldLogTransport(v17))
    {
      uint64_t v38 = a6;
      id v41 = v13;
      _IDSLogTransport( @"IDSDaemon",  @"IDS",  @"client's openSocketWithOptions call returned socket %d, error %@");
      if (_IDSShouldLog(0LL, @"IDSDaemon"))
      {
        uint64_t v38 = a6;
        id v41 = v13;
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"client's openSocketWithOptions call returned socket %d, error %@");
      }
    }
  }

  else {
    uint64_t v18 = 0LL;
  }
  id v19 = objc_msgSend( [IDSLocalDeliverySocketOpenedMetric alloc],  "initWithService:isToDefaultPairedDevice:openError:socketError:",  *(void *)(a1 + 32),  *(_BYTE *)(a1 + 80) != 0,  v18,  objc_msgSend(v13, "code", v38, v41));
  id v20 = (void *)objc_claimAutoreleasedReturnValue(+[IDSCoreAnalyticsLogger defaultLogger](&OBJC_CLASS___IDSCoreAnalyticsLogger, "defaultLogger"));
  [v20 logMetric:v19];

  __int16 v21 = (void *)objc_claimAutoreleasedReturnValue(+[IDSAWDLogging sharedInstance](&OBJC_CLASS___IDSAWDLogging, "sharedInstance"));
  objc_msgSend( v21,  "socketOpenedForService:isToDefaultPairedDevice:openError:socketError:",  *(void *)(a1 + 32),  *(_BYTE *)(a1 + 80) != 0,  v18,  objc_msgSend(v13, "code"));

  if (v13)
  {
    xpc_object_t v22 = 0LL;
  }

  else
  {
    xpc_object_t v22 = xpc_fd_create(a6);
    close(a6);
  }

  uint64_t v23 = OSLogHandleForIDSCategory("IDSDaemon");
  __int16 v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v25 = *(void *)(a1 + 40);
    uint64_t v26 = *(void *)(a1 + 48);
    *(_DWORD *)buf = 138413314;
    *(void *)v48 = v25;
    *(_WORD *)&v48[8] = 1024;
    *(_DWORD *)&v48[10] = a6;
    __int16 v49 = 2112;
    uint64_t v50 = v26;
    __int16 v51 = 2112;
    id v52 = v13;
    __int16 v53 = 2112;
    xpc_object_t v54 = v22;
    _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "utun finished connection options[%@] socket(%d) handlerID[%@] error[%@] socketObject[%@]\n",  buf,  0x30u);
  }

  if (os_log_shim_legacy_logging_enabled(v27) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    id v44 = v13;
    xpc_object_t v45 = v22;
    uint64_t v42 = a6;
    uint64_t v43 = *(void *)(a1 + 48);
    uint64_t v39 = *(void *)(a1 + 40);
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"utun finished connection options[%@] socket(%d) handlerID[%@] error[%@] socketObject[%@]\n");
  }

  uint64_t v28 = *(void **)(a1 + 56);
  uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "localObject", v39, v42, v43, v44, v45));
  int v30 = (void *)objc_claimAutoreleasedReturnValue([v28 broadcasterForLocalObject:v29 messageContext:*(void *)(a1 + 64)]);

  xpc_object_t v31 = xpc_dictionary_create(0LL, 0LL, 0LL);
  IMInsertBoolsToXPCDictionary(v31, "xpc-object");
  xpc_dictionary_set_value(v31, "object", v22);
  uint64_t v32 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  -[NSMutableDictionary setObject:forKey:]( v32,  "setObject:forKey:",  @"device-socket",  @"object-type",  1LL,  0LL);
  id v33 = -[NSMutableDictionary setObject:forKey:]( v32,  "setObject:forKey:",  *(void *)(a1 + 48),  @"completionHandlerID");
  if (*(void *)(a1 + 72))
  {
    double v34 = ids_monotonic_time(v33);
    uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDeviceConnectionAWDMetrics sharedInstance]( &OBJC_CLASS___IDSDeviceConnectionAWDMetrics,  "sharedInstance"));
    [v35 setDaemonOpenSocketCompletionTime:*(void *)(a1 + 72) forConnectionUUID:v34];

    id v36 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDeviceConnectionAWDMetrics sharedInstance]( &OBJC_CLASS___IDSDeviceConnectionAWDMetrics,  "sharedInstance"));
    id v37 = (void *)objc_claimAutoreleasedReturnValue([v36 awdMetricsForConnectionUUID:*(void *)(a1 + 72)]);
    -[NSMutableDictionary setObject:forKey:](v32, "setObject:forKey:", v37, @"metrics");
  }

  if (v13) {
    -[NSMutableDictionary setObject:forKey:](v32, "setObject:forKey:", v13, @"error");
  }
  id v40 = -[NSMutableDictionary copy](v32, "copy");
  IMInsertKeyedCodableObjectsToXPCDictionary(v31, "object-context");

  objc_msgSend(v30, "sendXPCObject:", v31, v40, 0);
}

void sub_10011AADC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v12 = [[IDSLocalDeliverySocketClosedMetric alloc] initWithService:*(void *)(a1 + 32) isToDefaultPairedDevice:*(unsigned __int8 *)(a1 + 40) closeError:0 socketError:0 bytesSent:a3 packetsSent:a2 bytesReceived:a5 packetsReceived:a4];
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[IDSCoreAnalyticsLogger defaultLogger](&OBJC_CLASS___IDSCoreAnalyticsLogger, "defaultLogger"));
  [v10 logMetric:v12];

  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[IDSAWDLogging sharedInstance](&OBJC_CLASS___IDSAWDLogging, "sharedInstance"));
  [v11 socketClosedForService:*(void *)(a1 + 32) isToDefaultPairedDevice:*(unsigned __int8 *)(a1 + 40) closeError:0 socketError:0 bytesSent:a3 packetsSent:a2 bytesReceived:a5 packetsReceived:a4];
}

id sub_10011BADC(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 isEqualToIgnoringCase:kIDSServiceDefaultsSentinelSelfAlias])
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 primaryRegistration]);
    id v6 = (id)objc_claimAutoreleasedReturnValue([v5 dsHandle]);
  }

  else
  {
    id v6 = v3;
  }

  return v6;
}

id sub_10011BB60(void *a1, void *a2)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_10011BBE4;
  v6[3] = &unk_1008F8348;
  id v7 = a2;
  id v3 = v7;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "__imArrayByApplyingBlock:", v6));

  return v4;
}

id sub_10011BBE4(uint64_t a1, void *a2)
{
  return sub_10011BADC(a2, *(void **)(a1 + 32));
}

BOOL sub_10011C014(id a1, IDSServiceProperties *a2)
{
  return -[IDSServiceProperties adHocServiceType](a2, "adHocServiceType") == 2;
}

void sub_10011C18C(void *a1, void *a2, void *a3, void *a4, int a5)
{
  id v9 = a3;
  id v10 = a4;
  if (a2)
  {
    id v11 = a2;
    id v12 = -[NSMutableDictionary initWithDictionary:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithDictionary:",  a1[4]);
    id v13 = (__CFDictionary *)v12;
    if (v9) {
      CFDictionarySetValue((CFMutableDictionaryRef)v12, IDSDevicePropertyService, v9);
    }
    if (a5) {
      uint64_t v14 = (void *)a1[5];
    }
    else {
      uint64_t v14 = (void *)a1[6];
    }
    id v15 = [v14 copy];
    if (v15) {
      CFDictionarySetValue(v13, IDSDevicePropertyIdentities, v15);
    }

    uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      int v17 = 138412290;
      id v18 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "broadcasting tinkerDeviceAdded on %@",  (uint8_t *)&v17,  0xCu);
    }

    [v11 service:v10 tinkerDeviceAdded:v13];
  }
}

void sub_10011C454(void *a1, void *a2, void *a3, void *a4, int a5)
{
  id v9 = a3;
  id v10 = a4;
  if (a2)
  {
    id v11 = a2;
    id v12 = -[NSMutableDictionary initWithDictionary:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithDictionary:",  a1[4]);
    id v13 = (__CFDictionary *)v12;
    if (v9) {
      CFDictionarySetValue((CFMutableDictionaryRef)v12, IDSDevicePropertyService, v9);
    }
    if (a5) {
      uint64_t v14 = (void *)a1[5];
    }
    else {
      uint64_t v14 = (void *)a1[6];
    }
    id v15 = [v14 copy];
    if (v15) {
      CFDictionarySetValue(v13, IDSDevicePropertyIdentities, v15);
    }

    uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      int v17 = 138412290;
      id v18 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "broadcasting tinkerDeviceRemoved on %@",  (uint8_t *)&v17,  0xCu);
    }

    [v11 service:v10 tinkerDeviceRemoved:v13];
  }
}

void sub_10011C71C(void *a1, void *a2, void *a3, void *a4, int a5)
{
  id v9 = a3;
  id v10 = a4;
  if (a2)
  {
    id v11 = a2;
    id v12 = -[NSMutableDictionary initWithDictionary:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithDictionary:",  a1[4]);
    id v13 = (__CFDictionary *)v12;
    if (v9) {
      CFDictionarySetValue((CFMutableDictionaryRef)v12, IDSDevicePropertyService, v9);
    }
    if (a5) {
      uint64_t v14 = (void *)a1[5];
    }
    else {
      uint64_t v14 = (void *)a1[6];
    }
    id v15 = [v14 copy];
    if (v15) {
      CFDictionarySetValue(v13, IDSDevicePropertyIdentities, v15);
    }

    uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      int v17 = 138412290;
      id v18 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "broadcasting tinkerDeviceUpdated on %@",  (uint8_t *)&v17,  0xCu);
    }

    [v11 service:v10 tinkerDeviceUpdated:v13];
  }
}

void sub_10011C9E4(void *a1, void *a2, void *a3, void *a4, int a5)
{
  id v9 = a3;
  id v10 = a4;
  if (a2)
  {
    id v11 = a2;
    id v12 = -[NSMutableDictionary initWithDictionary:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithDictionary:",  a1[4]);
    id v13 = (__CFDictionary *)v12;
    if (v9) {
      CFDictionarySetValue((CFMutableDictionaryRef)v12, IDSDevicePropertyService, v9);
    }
    if (a5) {
      uint64_t v14 = (void *)a1[5];
    }
    else {
      uint64_t v14 = (void *)a1[6];
    }
    id v15 = [v14 copy];
    if (v15) {
      CFDictionarySetValue(v13, IDSDevicePropertyIdentities, v15);
    }

    uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      int v17 = 138412290;
      id v18 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "broadcasting tinkerDeviceUpdated on %@",  (uint8_t *)&v17,  0xCu);
    }

    [v11 service:v10 tinkerDeviceUpdated:v13];
  }
}

void sub_10011CE94( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_10011CEE4(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___IDSDaemonMIGInterface);
  id v2 = (void *)qword_1009BEB00;
  qword_1009BEB00 = (uint64_t)v1;
}

uint64_t sub_10011D18C(uint64_t result)
{
  if (!*(_BYTE *)(*(void *)(result + 32) + 40LL))
  {
    uint64_t v1 = result;
    uint64_t v2 = OSLogHandleForIDSCategory("Warning");
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = *(void *)(v1 + 32);
      *(_DWORD *)buf = 138412290;
      uint64_t v7 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "IDSDaemonMIGInterface auth port died: %@",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v5))
    {
      _IDSWarnV(@"IDSFoundation", @"IDSDaemonMIGInterface auth port died: %@");
      _IDSLogV(0LL, @"IDSFoundation", @"Warning", @"IDSDaemonMIGInterface auth port died: %@");
      _IDSLogTransport(@"Warning", @"IDS", @"IDSDaemonMIGInterface auth port died: %@");
    }

    exit(-1);
  }

  return result;
}

void sub_10011D2D8(id a1, OS_xpc_object *a2, OS_xpc_object *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = a3;
  uint64_t v7 = v4;
  uint64_t v8 = v5;
  xpc_type_t type = xpc_get_type(v8);
  if (type != (xpc_type_t)&_xpc_type_error)
  {
    if (type != (xpc_type_t)&_xpc_type_dictionary)
    {
      id v10 = xpc_copy_description(v8);
      if (_IMWillLog(@"IDSDaemonMIGInterface", v11))
      {
        xpc_connection_get_pid(v7);
        _IMAlwaysLog(0LL, @"IDSDaemonMIGInterface", @"received unknown from peer(%d): %s");
      }

      free(v10);
      goto LABEL_50;
    }

    id v15 = v8;
    if (xpc_dictionary_get_BOOL(v15, "setup-request"))
    {
      if (_IMWillLog(@"IDSDaemonMIGInterface", v17))
      {
        id v18 = xpc_copy_description(v15);
        if (_IMWillLog(@"IDSDaemonMIGInterface", v19))
        {
          xpc_connection_get_pid(v7);
          _IMAlwaysLog(0LL, @"IDSDaemonMIGInterface", @"received message from peer(%d): %s");
        }

        free(v18);
      }

      *(void *)buf = _NSConcreteStackBlock;
      uint64_t v34 = 3221225472LL;
      uint64_t v35 = sub_10011DB1C;
      id v36 = &unk_1008F5F80;
      id v37 = v15;
      uint64_t v38 = v7;
      id v20 = (void (**)(void))dispatch_block_create((dispatch_block_flags_t)0LL, buf);
    }

    else if (xpc_dictionary_get_BOOL(v15, "xpc-object"))
    {
      uint64_t v27 = OSLogHandleForIDSCategory("IDSDaemonMIGInterface");
      uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "Incoming file descriptor request", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled(v29)
        && _IDSShouldLog(1LL, @"IDSDaemonMIGInterface"))
      {
        _IDSLogV(1LL, @"IDSFoundation", @"IDSDaemonMIGInterface", @"Incoming file descriptor request");
      }

      *(void *)buf = _NSConcreteStackBlock;
      uint64_t v34 = 3221225472LL;
      uint64_t v35 = sub_10011DE98;
      id v36 = &unk_1008F5F80;
      id v37 = v7;
      uint64_t v38 = v15;
      id v20 = (void (**)(void))dispatch_block_create((dispatch_block_flags_t)0LL, buf);
    }

    else
    {
      *(void *)buf = _NSConcreteStackBlock;
      uint64_t v34 = 3221225472LL;
      uint64_t v35 = sub_10011E000;
      id v36 = &unk_1008F5F80;
      id v37 = v7;
      uint64_t v38 = v15;
      id v20 = (void (**)(void))dispatch_block_create((dispatch_block_flags_t)0LL, buf);
      if (_os_feature_enabled_impl("IDS", "UseNewThreadArch_v1"))
      {
LABEL_47:
        v20[2](v20);
LABEL_49:

        goto LABEL_50;
      }
    }

    sub_10011DDF4(v20);
    goto LABEL_49;
  }

  if (v8 == (OS_xpc_object *)&_xpc_error_connection_invalid)
  {
    uint64_t v21 = OSLogHandleForIDSCategory("IDSDaemonMIGInterface");
    xpc_object_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = xpc_connection_get_pid(v7);
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "peer(%d) received XPC_ERROR_CONNECTION_INVALID",  buf,  8u);
    }

    if (os_log_shim_legacy_logging_enabled(v23)
      && _IDSShouldLog(0LL, @"IDSDaemonMIGInterface"))
    {
      xpc_connection_get_pid(v7);
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemonMIGInterface",  @"peer(%d) received XPC_ERROR_CONNECTION_INVALID");
    }

    uint64_t v24 = im_local_object_from_connection(v7);
    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
    uint64_t v26 = v25;
    if (v25)
    {
      [v25 _portDidBecomeInvalid];
      CFRelease(v26);
    }

    xpc_connection_cancel(v7);
  }

  else if (v8 == (OS_xpc_object *)&_xpc_error_connection_interrupted)
  {
    uint64_t v30 = OSLogHandleForIDSCategory("IDSDaemonMIGInterface");
    xpc_object_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = xpc_connection_get_pid(v7);
      _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "peer(%d) received XPC_ERROR_CONNECTION_INTERRUPTED",  buf,  8u);
    }

    if (os_log_shim_legacy_logging_enabled(v32)
      && _IDSShouldLog(0LL, @"IDSDaemonMIGInterface"))
    {
      xpc_connection_get_pid(v7);
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemonMIGInterface",  @"peer(%d) received XPC_ERROR_CONNECTION_INTERRUPTED");
    }
  }

  else if (v8 == (OS_xpc_object *)&_xpc_error_termination_imminent)
  {
    uint64_t v12 = OSLogHandleForIDSCategory("IDSDaemonMIGInterface");
    id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = xpc_connection_get_pid(v7);
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "peer(%d) received XPC_ERROR_TERMINATION_IMMINENT",  buf,  8u);
    }

    if (os_log_shim_legacy_logging_enabled(v14)
      && _IDSShouldLog(0LL, @"IDSDaemonMIGInterface"))
    {
      xpc_connection_get_pid(v7);
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemonMIGInterface",  @"peer(%d) received XPC_ERROR_TERMINATION_IMMINENT");
    }
  }

void sub_10011D950(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x10011D44CLL);
  }

  _Unwind_Resume(a1);
}

id sub_10011DA1C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "__setupServer");
}

void sub_10011DB1C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemonMIGInterface sharedInstance](&OBJC_CLASS___IDSDaemonMIGInterface, "sharedInstance"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 delegate]);

  uint64_t v4 = IMGetXPCStringFromDictionary(*(void *)(a1 + 32), "portName");
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  uint64_t v6 = IMGetXPCDictionaryFromDictionary(*(void *)(a1 + 32), "setupInfo");
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  uint64_t pid = xpc_connection_get_pid(*(xpc_connection_t *)(a1 + 40));
  if (+[IDSUserManagement isThreadDataSeparated](&OBJC_CLASS___IDSUserManagement, "isThreadDataSeparated")
    || !_os_feature_enabled_impl("IDS", "RejectDataSeparatedClients"))
  {
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = *(void *)(a1 + 40);
      *(_DWORD *)xpc_object_t v22 = 138412802;
      *(void *)&v22[4] = v5;
      *(_WORD *)&v22[12] = 1024;
      *(_DWORD *)&v22[14] = pid;
      *(_WORD *)&v22[18] = 2112;
      *(void *)&v22[20] = v19;
      _os_log_error_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "Data separated port name request for: %@ from pid: %d -- rejecting %@",  v22,  0x1Cu);
    }

    LOBYTE(v12) = 0;
    id v13 = 0LL;
  }

  else
  {
    *(void *)&__int128 v9 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)xpc_object_t v22 = v9;
    *(_OWORD *)&v22[16] = v9;
    xpc_connection_get_audit_token(*(void *)(a1 + 40), v22);
    if (v3 && *(void *)(a1 + 40))
    {
      id v10 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemonMIGInterface sharedInstance](&OBJC_CLASS___IDSDaemonMIGInterface, "sharedInstance"));
      uint64_t v11 = *(void *)(a1 + 40);
      *(_OWORD *)buf = *(_OWORD *)v22;
      *(_OWORD *)&uint8_t buf[16] = *(_OWORD *)&v22[16];
      id v20 = 0LL;
      unsigned int v12 = [v3 daemonInterface:v10 shouldGrantAccessForPID:pid auditToken:buf portName:v5 listenerConnection:v11 setupInfo:v7 setupResponse:&v20];
      id v13 = v20;
    }

    else
    {
      id v13 = 0LL;
      unsigned int v12 = 1;
    }

    id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = @"NO";
      *(_DWORD *)buf = 138412802;
      *(void *)&uint8_t buf[4] = v5;
      if (v12) {
        uint64_t v16 = @"YES";
      }
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = pid;
      *(_WORD *)&buf[18] = 2112;
      *(void *)&buf[20] = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Port name request for: %@ from pid: %d granted: %@",  buf,  0x1Cu);
    }
  }

  xpc_object_t reply = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 32));
  id v18 = reply;
  if (reply)
  {
    if (v13) {
      xpc_dictionary_set_value(reply, "response", v13);
    }
    xpc_dictionary_set_BOOL(v18, "granted", v12);
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 40), v18);
  }
}

void sub_10011DDF4(void *a1)
{
  id v1 = a1;
  v7[0] = 0xAAAAAAAAAAAAAAAALL;
  v7[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v2 = pthread_main_thread_np();
  pthread_dependency_init_np(v7, v2, 0LL);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_10011E2A4;
  v4[3] = &unk_1008F8FE8;
  id v5 = v1;
  uint64_t v6 = v7;
  id v3 = v1;
  dispatch_async(&_dispatch_main_q, v4);
  pthread_dependency_wait_np(v7);
}

void sub_10011DE98(uint64_t a1)
{
  uint64_t v2 = im_local_object_from_connection(*(void *)(a1 + 32));
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  if (!v3) {
    goto LABEL_10;
  }
  xpc_object_t value = xpc_dictionary_get_value(*(xpc_object_t *)(a1 + 40), "object");
  id v13 = (id)objc_claimAutoreleasedReturnValue(value);
  uint64_t v5 = IMGetXPCDictionaryFromDictionary(*(void *)(a1 + 40), "object-context");
  id v12 = (id)objc_claimAutoreleasedReturnValue(v5);
  int v6 = xpc_fd_dup(v13);
  close(v6);
  uint64_t v7 = &OBJC_PROTOCOL___IDSDaemonProtocol;
  objc_method_description MethodDescription = protocol_getMethodDescription((Protocol *)v7, "xpcObject:objectContext:", 1, 1);
  types = MethodDescription.types;
  if (!MethodDescription.name)
  {
    types = protocol_getMethodDescription((Protocol *)v7, "xpcObject:objectContext:", 0, 1).types;
    if (types) {
      goto LABEL_4;
    }
LABEL_6:
    id v10 = 0LL;
    goto LABEL_7;
  }

  if (!MethodDescription.types) {
    goto LABEL_6;
  }
LABEL_4:
  id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSMethodSignature signatureWithObjCTypes:]( &OBJC_CLASS___NSMethodSignature,  "signatureWithObjCTypes:",  types,  v12,  v13));
LABEL_7:

  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSInvocation invocationWithMethodSignature:]( &OBJC_CLASS___NSInvocation,  "invocationWithMethodSignature:",  v10));
  [v11 retainArguments];
  [v11 setSelector:"xpcObject:objectContext:"];
  [v11 setArgument:&v13 atIndex:2];
  [v11 setArgument:&v12 atIndex:3];
  if (v11) {
    [v3 _enqueueInvocation:v11];
  }
  CFRelease(v3);

LABEL_10:
}

void sub_10011E000(uint64_t a1)
{
  uint64_t v2 = im_local_object_from_connection(*(void *)(a1 + 32));
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  if (+[IDSUserManagement isThreadDataSeparated](&OBJC_CLASS___IDSUserManagement, "isThreadDataSeparated")
    && _os_feature_enabled_impl("IDS", "RejectDataSeparatedClients"))
  {
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v6 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138412802;
      uint64_t v17 = v3;
      __int16 v18 = 2112;
      uint64_t v19 = v5;
      __int16 v20 = 2112;
      uint64_t v21 = v6;
      _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "Data separated request came in to %@ from peer: %@ -- rejecting %@",  buf,  0x20u);
    }

void sub_10011E240(uint64_t a1)
{
  uint64_t v2 = (void *)IMCreateInvocationFromXPCObjectWithProtocol( *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  0LL);
  uint64_t v4 = v2;
  if (v2)
  {
    [*(id *)(a1 + 40) _enqueueInvocationWithPriority:v2 priority:*(unsigned int *)(a1 + 56)];
    uint64_t v2 = v4;
  }

  id v3 = *(const void **)(a1 + 40);
  if (v3)
  {
    CFRelease(v3);
    uint64_t v2 = v4;
  }
}

uint64_t sub_10011E2A4(uint64_t a1)
{
  return pthread_dependency_fulfill_np(*(void *)(a1 + 40), 0LL);
}

uint64_t sub_10011E4CC(void *a1)
{
  id v1 = a1;
  if (([v1 isEqualToString:@"com.apple.private.alloy.facetime.multi"] & 1) != 0
    || ([v1 isEqualToString:@"com.apple.private.alloy.arcade.fastsync"] & 1) != 0
    || ([v1 isEqualToString:@"com.apple.private.alloy.airdrop.walkaway"] & 1) != 0
    || ([v1 isEqualToString:@"com.apple.private.alloy.carmelsync"] & 1) != 0
    || ([v1 isEqualToString:@"com.apple.private.alloy.notes"] & 1) != 0
    || ([v1 isEqualToString:@"com.apple.private.alloy.dropin.communication"] & 1) != 0
    || ([v1 isEqualToString:@"com.apple.private.alloy.safari.groupactivities"] & 1) != 0
    || ([v1 isEqualToString:@"com.apple.private.alloy.gftaastest.communication"] & 1) != 0
    || ([v1 isEqualToString:@"com.apple.private.alloy.groupRemoteControl.cloud"] & 1) != 0)
  {
    uint64_t v2 = 1LL;
  }

  else
  {
    uint64_t v2 = (uint64_t)[v1 isEqualToString:@"com.apple.private.alloy.groupRemoteControl.session"];
  }

  return v2;
}

void sub_10011F454(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___IDSLinkPreferencesManager);
  uint64_t v2 = (void *)qword_1009BEB18;
  qword_1009BEB18 = (uint64_t)v1;
}

void sub_1001200F8(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) copy];
  IDSPowerLogDictionary(@"IDSLinkPreferenceRequest", v1);
}

uint64_t IDSProtoKeyTransparencyTrustedDeviceReadFrom(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
    return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  }
  while (2)
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    switch((v6 >> 3))
    {
      case 1u:
        uint64_t Data = PBReaderReadData(a2);
        uint64_t v13 = objc_claimAutoreleasedReturnValue(Data);
        uint64_t v14 = 32LL;
        goto LABEL_26;
      case 2u:
        uint64_t v16 = objc_alloc_init(&OBJC_CLASS___IDSProtoKeyTransparencyTrustedService);
        [(id)a1 addTrustedServices:v16];
        v25[0] = 0xAAAAAAAAAAAAAAAALL;
        v25[1] = 0xAAAAAAAAAAAAAAAALL;
        if (PBReaderPlaceMark(a2, v25)
          && (IDSProtoKeyTransparencyTrustedServiceReadFrom((uint64_t)v16, a2) & 1) != 0)
        {
          PBReaderRecallMark(a2, v25);

LABEL_38:
          if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          }
          continue;
        }

        return 0LL;
      case 3u:
        uint64_t String = PBReaderReadString(a2);
        uint64_t v13 = objc_claimAutoreleasedReturnValue(String);
        uint64_t v14 = 16LL;
        goto LABEL_26;
      case 4u:
        uint64_t v18 = PBReaderReadString(a2);
        uint64_t v13 = objc_claimAutoreleasedReturnValue(v18);
        uint64_t v14 = 24LL;
LABEL_26:
        uint64_t v19 = *(void **)(a1 + v14);
        *(void *)(a1 + v14) = v13;

        goto LABEL_38;
      case 5u:
        char v20 = 0;
        unsigned int v21 = 0;
        uint64_t v22 = 0LL;
        *(_BYTE *)(a1 + 48) |= 1u;
        while (2)
        {
          unint64_t v23 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v23 == -1LL || v23 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v24 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v23);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23 + 1;
            v22 |= (unint64_t)(v24 & 0x7F) << v20;
            if (v24 < 0)
            {
              v20 += 7;
              BOOL v9 = v21++ >= 9;
              if (v9)
              {
                uint64_t v22 = 0LL;
                goto LABEL_37;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v22 = 0LL;
        }
LABEL_37:
        *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 112), 8) = v22;
        goto LABEL_38;
      default:
        uint64_t result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result) {
          return result;
        }
        goto LABEL_38;
    }
  }

uint64_t sub_1001216CC(uint64_t a1)
{
  return 1LL;
}

void sub_100121EA0(uint64_t a1, void *a2)
{
  id v3 = a2;
  char v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSFirewall](&OBJC_CLASS___IDSFoundationLog, "IDSFirewall"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    id v13 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Continuing to adding entries to firewall with queryError %@",  buf,  0xCu);
  }

  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _firewallStore]);
  unsigned __int8 v6 = [v5 addEntries:*(void *)(a1 + 40) forImpactedServices:*(void *)(*(void *)(a1 + 32) + 24) category:*(unsigned int *)(*(void *)(a1 + 32) + 8) isDonated:1];

  if ((v6 & 1) != 0)
  {
    unint64_t v7 = 0LL;
  }

  else
  {
    uint64_t v8 = IDSFirewallErrorDomain;
    NSErrorUserInfoKey v10 = NSLocalizedDescriptionKey;
    uint64_t v11 = @"Failed to add entries to allow list.";
    BOOL v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v11,  &v10,  1LL));
    unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v8,  4LL,  v9));
  }

  [*(id *)(a1 + 32) scheduleProcessStoredRemoteIncomingMessages];
  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_100122128(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSFirewall](&OBJC_CLASS___IDSFoundationLog, "IDSFirewall"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 40);
    int v4 = *(_DWORD *)(*(void *)(a1 + 32) + 8LL);
    *(_DWORD *)buf = 67109378;
    int v13 = v4;
    __int16 v14 = 2112;
    uint64_t v15 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Update to category %u removeEntries %@",  buf,  0x12u);
  }

  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _firewallStore]);
  unsigned __int8 v6 = [v5 removeAllEntries:*(void *)(a1 + 40) forImpactedServices:*(void *)(*(void *)(a1 + 32) + 24) category:*(unsigned int *)(*(void *)(a1 + 32) + 8)];

  if ((v6 & 1) != 0)
  {
    unint64_t v7 = 0LL;
  }

  else
  {
    uint64_t v8 = IDSFirewallErrorDomain;
    NSErrorUserInfoKey v10 = NSLocalizedDescriptionKey;
    uint64_t v11 = @"Failed to remove entries from allow list.";
    BOOL v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v11,  &v10,  1LL));
    unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v8,  4LL,  v9));
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_1001223A4(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSFirewall](&OBJC_CLASS___IDSFoundationLog, "IDSFirewall"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 40);
    int v4 = *(_DWORD *)(*(void *)(a1 + 32) + 8LL);
    *(_DWORD *)buf = 67109378;
    int v13 = v4;
    __int16 v14 = 2112;
    uint64_t v15 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Update to category %u removeDonatedEntries %@",  buf,  0x12u);
  }

  unsigned int v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _firewallStore]);
  unsigned __int8 v6 = [v5 removeEntries:*(void *)(a1 + 40) forImpactedServices:*(void *)(*(void *)(a1 + 32) + 24) category:*(unsigned int *)(*(void *)(a1 + 32) + 8) isDonated:1];

  if ((v6 & 1) != 0)
  {
    unint64_t v7 = 0LL;
  }

  else
  {
    uint64_t v8 = IDSFirewallErrorDomain;
    NSErrorUserInfoKey v10 = NSLocalizedDescriptionKey;
    uint64_t v11 = @"Failed to remove entries from allow list.";
    BOOL v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v11,  &v10,  1LL));
    unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v8,  4LL,  v9));
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_1001227D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSFirewall](&OBJC_CLASS___IDSFoundationLog, "IDSFirewall"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 40);
    int v6 = *(_DWORD *)(*(void *)(a1 + 32) + 8LL);
    *(_DWORD *)buf = 67109634;
    int v15 = v6;
    __int16 v16 = 2112;
    id v17 = v3;
    __int16 v18 = 2112;
    uint64_t v19 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Update to category %u queryError %@ addEntries %@",  buf,  0x1Cu);
  }

  unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _firewallStore]);
  unsigned __int8 v8 = [v7 addEntries:*(void *)(a1 + 40) forImpactedServices:*(void *)(*(void *)(a1 + 32) + 24) category:*(unsigned int *)(*(void *)(a1 + 32) + 8) isDonated:1];

  if ((v8 & 1) != 0)
  {
    [*(id *)(a1 + 32) scheduleProcessStoredRemoteIncomingMessages];
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  else
  {
    uint64_t v9 = IDSFirewallErrorDomain;
    NSErrorUserInfoKey v12 = NSLocalizedDescriptionKey;
    int v13 = @"Failed to add entries to the allow list after successfully removing entries.";
    NSErrorUserInfoKey v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v13,  &v12,  1LL));
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v9,  4LL,  v10));

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
}

id sub_1001233DC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) processStoredRemoteIncomingMessagesForCategoryFired];
}

void sub_1001234EC(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
  [v2 _processStoredIncomingMessagesForCategory:*(unsigned int *)(*(void *)(a1 + 32) + 8)];
}

void sub_100123D18( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, void *a9)
{
  id v11 = a9;
  NSErrorUserInfoKey v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSFirewall](&OBJC_CLASS___IDSFoundationLog, "IDSFirewall"));
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = @"NO";
    if (a6) {
      int v13 = @"YES";
    }
    *(_DWORD *)buf = 138412546;
    uint64_t v43 = v13;
    __int16 v44 = 2112;
    id v45 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Received query result with success {%@} and result {%@}",  buf,  0x16u);
  }

  __int16 v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSFirewall](&OBJC_CLASS___IDSFoundationLog, "IDSFirewall"));
  BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
  if (a6)
  {
    if (v15)
    {
      __int16 v16 = *(const __CFString **)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      uint64_t v43 = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Populating merge for handles {%@}",  buf,  0xCu);
    }

    __int128 v37 = 0u;
    __int128 v38 = 0u;
    __int128 v35 = 0u;
    __int128 v36 = 0u;
    id v17 = *(id *)(a1 + 40);
    id v18 = [v17 countByEnumeratingWithState:&v35 objects:v41 count:16];
    if (v18)
    {
      id v19 = v18;
      uint64_t v20 = *(void *)v36;
      do
      {
        unsigned int v21 = 0LL;
        do
        {
          if (*(void *)v36 != v20) {
            objc_enumerationMutation(v17);
          }
          uint64_t v22 = *(void **)(*((void *)&v35 + 1) + 8LL * (void)v21);
          unint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "mergeID", (void)v35));
          if (v23) {
            goto LABEL_14;
          }
          char v24 = (void *)objc_claimAutoreleasedReturnValue([v22 uri]);
          uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKey:v24]);

          if (v25)
          {
            uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v22 uri]);
            unint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKey:v26]);

            uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v23 firstObject]);
            if (v27)
            {
              uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v23 firstObject]);
              uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v28 senderCorrelationIdentifier]);
              [v22 setMergeID:v29];
            }

void sub_100124F40(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 state] == (id)1)
  {
    id v25 = (id)objc_claimAutoreleasedReturnValue([v3 error]);

    int v4 = (void *)objc_claimAutoreleasedReturnValue([v25 userInfo]);
    uint64_t v5 = (NSMutableDictionary *)[v4 mutableCopy];

    if (!v5) {
      uint64_t v5 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    }
    -[NSMutableDictionary setObject:forKey:]( v5,  "setObject:forKey:",  *(void *)(a1 + 32),  @"IDSPipelineParameter");
    int v6 = objc_alloc(&OBJC_CLASS___NSError);
    unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v25 domain]);
    unsigned __int8 v8 = -[NSError initWithDomain:code:userInfo:]( v6,  "initWithDomain:code:userInfo:",  v7,  [v25 code],  v5);

    [*(id *)(a1 + 40) failWithError:v8];
  }

  else
  {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v3 value]);

    NSErrorUserInfoKey v10 = objc_alloc_init(&OBJC_CLASS___IDSPeerAggregatableMessage);
    id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) pushTokenObject]);
    -[IDSPeerAggregatableMessage setTargetToken:](v10, "setTargetToken:", v11);

    NSErrorUserInfoKey v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) sessionToken]);
    -[IDSPeerAggregatableMessage setTargetSessionToken:](v10, "setTargetSessionToken:", v12);

    -[IDSPeerAggregatableMessage setTargetPeerID:](v10, "setTargetPeerID:", *(void *)(a1 + 56));
    int v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  *(unsigned __int8 *)(a1 + 72)));
    -[IDSPeerAggregatableMessage setWantsDeliveryStatus:](v10, "setWantsDeliveryStatus:", v13);

    -[IDSPeerAggregatableMessage setWantsCertifiedDelivery:]( v10,  "setWantsCertifiedDelivery:",  *(unsigned __int8 *)(a1 + 73));
    __int16 v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) anonymizedSenderID]);
    -[IDSPeerAggregatableMessage setAnonymizedSenderID:](v10, "setAnonymizedSenderID:", v14);

    BOOL v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) expireDate]);
    -[IDSPeerAggregatableMessage setExpirationDate:](v10, "setExpirationDate:", v15);

    -[IDSPeerAggregatableMessage setCommand:](v10, "setCommand:", &off_1009472F0);
    __int16 v16 = (void *)objc_claimAutoreleasedReturnValue([v9 dataLength]);
    -[IDSPeerAggregatableMessage setDataLength:](v10, "setDataLength:", v16);

    id v17 = (void *)objc_claimAutoreleasedReturnValue([v9 encryptedResult]);
    id v18 = (void *)objc_claimAutoreleasedReturnValue([v17 data]);
    -[IDSPeerAggregatableMessage setEncryptedData:](v10, "setEncryptedData:", v18);

    id v19 = (void *)objc_claimAutoreleasedReturnValue([v17 payloadMetadata]);
    id v20 = [v19 length];

    if (v20)
    {
      unsigned int v21 = (void *)objc_claimAutoreleasedReturnValue([v17 payloadMetadata]);
      -[IDSPeerAggregatableMessage setPayloadMetadata:](v10, "setPayloadMetadata:", v21);
    }

    if ([v17 encryptionType] != (id)2)
    {
      uint64_t v22 = IDSEncryptionTypeStringFromEncryptionType([v17 encryptionType]);
      unint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
      -[IDSPeerAggregatableMessage setEncryptionType:](v10, "setEncryptionType:", v23);
    }

    char v24 = (void *)objc_claimAutoreleasedReturnValue([v9 fileCleanupBlock]);
    if (v24)
    {
      v26[0] = _NSConcreteStackBlock;
      v26[1] = 3221225472LL;
      v26[2] = sub_100125298;
      v26[3] = &unk_1008F7CA0;
      id v27 = *(id *)(a1 + 64);
      id v28 = v24;
      -[IDSPeerAggregatableMessage setCompletionBlock:](v10, "setCompletionBlock:", v26);
    }

    [*(id *)(a1 + 40) fulfillWithValue:v10];
  }

uint64_t sub_100125298(uint64_t a1)
{
  id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog delivery](&OBJC_CLASS___IDSFoundationLog, "delivery"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "GUID %@ Finished sending attachment. Cleaning up temporary file.",  (uint8_t *)&v5,  0xCu);
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

id sub_100125350(uint64_t a1, void *a2)
{
  id v3 = a2;
  [*(id *)(a1 + 32) setAggregatableMessages:v3];
  int v4 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  id v5 = v3;
  id v6 = [v5 countByEnumeratingWithState:&v28 objects:v34 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v29;
    do
    {
      for (i = 0LL; i != v7; i = (char *)i + 1)
      {
        if (*(void *)v29 != v8) {
          objc_enumerationMutation(v5);
        }
        NSErrorUserInfoKey v10 = *(void **)(*((void *)&v28 + 1) + 8LL * (void)i);
        id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 targetPeerID]);
        NSErrorUserInfoKey v12 = (void *)objc_claimAutoreleasedReturnValue([v10 targetToken]);
        int v13 = (void *)objc_claimAutoreleasedReturnValue([v11 URIByAddingPushToken:v12]);

        if (v13) {
          -[NSMutableDictionary setObject:forKey:](v4, "setObject:forKey:", v10, v13);
        }
      }

      id v7 = [v5 countByEnumeratingWithState:&v28 objects:v34 count:16];
    }

    while (v7);
  }

  __int16 v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog delivery](&OBJC_CLASS___IDSFoundationLog, "delivery"));
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v15 = *(void *)(a1 + 40);
    *(_DWORD *)buf = 138412290;
    uint64_t v33 = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "GUID %@ finished constructing aggregatable messages",  buf,  0xCu);
  }

  __int16 v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) guid]);
  id v17 = [v16 copy];

  uint64_t v22 = _NSConcreteStackBlock;
  uint64_t v23 = 3221225472LL;
  char v24 = sub_1001255C4;
  id v25 = &unk_1008F5F80;
  id v26 = v17;
  id v27 = (id)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary debugDescription](v4, "debugDescription"));
  id v18 = v27;
  id v19 = v17;
  cut_dispatch_log_queue(&v22);
  id v20 = (void *)objc_claimAutoreleasedReturnValue( +[CUTUnsafePromise fulfilledPromiseWithValue:]( &OBJC_CLASS___CUTUnsafePromise,  "fulfilledPromiseWithValue:",  *(void *)(a1 + 32),  v22,  v23,  v24,  v25));

  return v20;
}

void sub_1001255C4(uint64_t a1)
{
  id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog delivery_oversized](&OBJC_CLASS___IDSFoundationLog, "delivery_oversized"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    int v5 = 138412546;
    uint64_t v6 = v3;
    __int16 v7 = 2112;
    uint64_t v8 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "GUID %@ Message to send per destination:\n%@",  (uint8_t *)&v5,  0x16u);
  }
}

void sub_100125B2C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v7 = a2;
  id v8 = a5;
  uint64_t v9 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queue]);
  dispatch_assert_queue_V2(v9);

  if (v8)
  {
    NSErrorUserInfoKey v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog engram](&OBJC_CLASS___IMRGLog, "engram"));
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543362;
      id v18 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Account identity cluster election failed {error: %{public}@}",  buf,  0xCu);
    }

    v15[0] = NSLocalizedDescriptionKey;
    v15[1] = NSUnderlyingErrorKey;
    v16[0] = @"Engram key election failed";
    v16[1] = v8;
    id v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v16,  v15,  2LL));
    NSErrorUserInfoKey v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"IDSEngramKeyStoreErrorDomain",  -6000LL,  v11));

    int v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) seal]);
    [v13 failWithError:v12];
  }

  else
  {
    __int16 v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) seal]);
    [v14 fulfillWithValue:v7];
  }
}

void sub_100125CD0(uint64_t a1, void *a2)
{
  id v7 = a2;
  id v3 = [v7 state];
  if (v3 == (id)1)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v5 = (void *)objc_claimAutoreleasedReturnValue([v7 error]);
    (*(void (**)(uint64_t, void, void *))(v6 + 16))(v6, 0LL, v5);
    goto LABEL_5;
  }

  if (!v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = (void *)objc_claimAutoreleasedReturnValue([v7 value]);
    (*(void (**)(uint64_t, void *, void))(v4 + 16))(v4, v5, 0LL);
LABEL_5:
  }
}

void sub_100126018(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v7 = a2;
  id v8 = a5;
  uint64_t v9 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queue]);
  dispatch_assert_queue_V2(v9);

  if (v8)
  {
    NSErrorUserInfoKey v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog engram](&OBJC_CLASS___IMRGLog, "engram"));
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138543618;
      id v17 = v8;
      __int16 v18 = 2114;
      uint64_t v19 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Existing account identity cluster fetch failed {error: %{public}@}, seal: %{public}@",  buf,  0x16u);
    }

    v14[0] = NSLocalizedDescriptionKey;
    v14[1] = NSUnderlyingErrorKey;
    v15[0] = @"Engram key election failed";
    v15[1] = v8;
    NSErrorUserInfoKey v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v15,  v14,  2LL));
    int v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"IDSEngramKeyStoreErrorDomain",  -6000LL,  v12));

    [*(id *)(a1 + 40) failWithError:v13];
  }

  else
  {
    [*(id *)(a1 + 40) fulfillWithValue:v7];
  }
}

void sub_1001261AC(uint64_t a1, void *a2)
{
  id v7 = a2;
  id v3 = [v7 state];
  if (v3 == (id)1)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v5 = (void *)objc_claimAutoreleasedReturnValue([v7 error]);
    (*(void (**)(uint64_t, void, void *))(v6 + 16))(v6, 0LL, v5);
    goto LABEL_5;
  }

  if (!v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = (void *)objc_claimAutoreleasedReturnValue([v7 value]);
    (*(void (**)(uint64_t, void *, void))(v4 + 16))(v4, v5, 0LL);
LABEL_5:
  }
}

void sub_100126440(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) keychainWrapper]);
    id v9 = objc_msgSend((id)objc_opt_class(*(void *)(a1 + 32), v8), "_keychainIdentifier");
    NSErrorUserInfoKey v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    id v32 = 0LL;
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v7 dataForIdentifier:v10 error:&v32]);
    id v12 = v32;

    if (v11)
    {
      int v13 = (void *)objc_claimAutoreleasedReturnValue([v5 adminServiceIdentityWithType:1]);
      __int16 v14 = v13;
      if (v13)
      {
        id v31 = v12;
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v13 publicServiceIdentityAdminWithError:&v31]);
        id v16 = v31;

        if (v15)
        {
          id v30 = v16;
          id v17 = (void *)objc_claimAutoreleasedReturnValue( +[IDSMPFullDeviceIdentity deviceIdentityFromDataRepresentation:publicAdminServiceIdentity:error:]( &OBJC_CLASS___IDSMPFullDeviceIdentity,  "deviceIdentityFromDataRepresentation:publicAdminServiceIdentity:error:",  v11,  v15,  &v30));
          id v18 = v30;

          if (v17)
          {
            uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog engram](&OBJC_CLASS___IMRGLog, "engram"));
            if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138543362;
              id v34 = v17;
              _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_INFO,  "existingFullDeviceIdentity -- success {deviceIdentity: %{public}@}",  buf,  0xCu);
            }

            (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
            id v20 = v18;
          }

          else
          {
            NSErrorUserInfoKey v39 = NSLocalizedDescriptionKey;
            id v40 = @"Unable to extract device identity from serialized data";
            __int128 v28 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v40,  &v39,  1LL));
            id v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"IDSEngramKeyStoreErrorDomain",  -3000LL,  v28));

            __int128 v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog engram](&OBJC_CLASS___IMRGLog, "engram"));
            if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138543875;
              id v34 = v20;
              __int16 v35 = 2114;
              __int128 v36 = v15;
              __int16 v37 = 2113;
              __int128 v38 = v11;
              _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "Failed existingFullDeviceidentity -- failed to create deviceIdentity {error: %{public}@, publicAdminIden tity: %{public}@, data: %{private}@}",  buf,  0x20u);
            }

            (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
          }
        }

        else
        {
          NSErrorUserInfoKey v41 = NSLocalizedDescriptionKey;
          uint64_t v42 = @"Cluster missing public admin identity with type A";
          id v26 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v42,  &v41,  1LL));
          id v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"IDSEngramKeyStoreErrorDomain",  -3000LL,  v26));

          id v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog engram](&OBJC_CLASS___IMRGLog, "engram"));
          if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138543618;
            id v34 = v20;
            __int16 v35 = 2114;
            __int128 v36 = v14;
            _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "Failed existingFullDeviceIdentity -- missing publicAdminIdentity {error: %{public}@, fullAdminIdentity: %{public}@}",  buf,  0x16u);
          }

          (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
        }
      }

      else
      {
        NSErrorUserInfoKey v43 = NSLocalizedDescriptionKey;
        __int16 v44 = @"Cluster missing full admin identity with type A";
        char v24 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v44,  &v43,  1LL));
        id v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"IDSEngramKeyStoreErrorDomain",  -3000LL,  v24));

        id v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog engram](&OBJC_CLASS___IMRGLog, "engram"));
        if (os_log_type_enabled(v25, OS_LOG_TYPE_FAULT)) {
          sub_10069C8A0((uint64_t)v20, (uint64_t)v5, v25);
        }

        (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
      }
    }

    else
    {
      if (+[IDSKeychainWrapper isItemNotFoundError:](&OBJC_CLASS___IDSKeychainWrapper, "isItemNotFoundError:", v12))
      {
        NSErrorUserInfoKey v45 = NSLocalizedDescriptionKey;
        id v46 = @"No registered account identity. Please re-register";
        uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v46,  &v45,  1LL));
        id v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"IDSEngramKeyStoreErrorDomain",  -5000LL,  v22));

        uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog engram](&OBJC_CLASS___IMRGLog, "engram"));
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138543362;
          id v34 = v20;
          _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "Failed existingFullDeviceIdentity -- keychain item not found {error: %{public}@}",  buf,  0xCu);
        }
      }

      else
      {
        uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog engram](&OBJC_CLASS___IMRGLog, "engram"));
        if (os_log_type_enabled(v23, OS_LOG_TYPE_FAULT)) {
          sub_10069C82C((uint64_t)v12, v23);
        }
        id v20 = v12;
      }

      (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
    }
  }

  else
  {
    unsigned int v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog engram](&OBJC_CLASS___IMRGLog, "engram"));
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543362;
      id v34 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Failed existingFullDeviceIdentity -- missing cluster {error: %{public}@}",  buf,  0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
}

void sub_1001272DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog ConnectivityMonitor](&OBJC_CLASS___IDSFoundationLog, "ConnectivityMonitor"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    id v6 = [v3 idsResponseCode];
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 responseError]);
    int v15 = 138412802;
    uint64_t v16 = v5;
    __int16 v17 = 2048;
    id v18 = v6;
    __int16 v19 = 2112;
    id v20 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Connectivity monitor %@ got response %ld with error %@",  (uint8_t *)&v15,  0x20u);
  }

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v3 responseError]);
  BOOL v9 = v8 == 0LL;

  NSErrorUserInfoKey v10 = objc_alloc_init(&OBJC_CLASS___IDSConnectivityMonitorMetricProperties);
  -[IDSConnectivityMonitorMetricProperties setSuccess:](v10, "setSuccess:", v9);
  -[IDSConnectivityMonitorMetricProperties setTerminusConnected:](v10, "setTerminusConnected:", 1LL);
  -[IDSConnectivityMonitorMetricProperties setTerminusRegistered:](v10, "setTerminusRegistered:", 1LL);
  -[IDSConnectivityMonitorMetricProperties setTerminusNearby:](v10, "setTerminusNearby:", 1LL);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPairingManager sharedInstance](&OBJC_CLASS___IDSPairingManager, "sharedInstance"));
  id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 pairedDeviceUUIDString]);
  -[IDSConnectivityMonitorMetricProperties setPairedDeviceCBUUIDString:](v10, "setPairedDeviceCBUUIDString:", v12);

  [*(id *)(a1 + 40) timeConnected];
  -[IDSConnectivityMonitorMetricProperties setTimeConnected:](v10, "setTimeConnected:");
  [*(id *)(a1 + 40) timeDisconnected];
  -[IDSConnectivityMonitorMetricProperties setTimeDisconnected:](v10, "setTimeDisconnected:");
  int v13 = -[IDSConnectivityMonitorMetric initWithProperties:]( objc_alloc(&OBJC_CLASS___IDSConnectivityMonitorMetric),  "initWithProperties:",  v10);
  __int16 v14 = (void *)objc_claimAutoreleasedReturnValue(+[IDSRTCLogger loggerWithCategory:](&OBJC_CLASS___IDSRTCLogger, "loggerWithCategory:", 3000LL));
  [v14 logMetric:v13];
}

void sub_100127E3C(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___IDSFamilyManager);
  id v2 = (void *)qword_1009BEB28;
  qword_1009BEB28 = (uint64_t)v1;
}

void sub_1001280D4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = OSLogHandleForIDSCategory("IDSFamilyManager");
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    id v21 = [v6 code];
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Family Fetch returned with error code: %ld",  buf,  0xCu);
  }

  uint64_t v10 = os_log_shim_legacy_logging_enabled(v9);
  if ((_DWORD)v10)
  {
    uint64_t v10 = _IDSShouldLog(0LL, @"IDSFamilyManager");
    if ((_DWORD)v10)
    {
      [v6 code];
      uint64_t v10 = _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSFamilyManager",  @"Family Fetch returned with error code: %ld");
    }
  }

  uint64_t v12 = im_primary_queue(v10, v11);
  int v13 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v12);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100128294;
  block[3] = &unk_1008F5F58;
  id v17 = v6;
  id v18 = v5;
  uint64_t v19 = *(void *)(a1 + 32);
  id v14 = v5;
  id v15 = v6;
  dispatch_async(v13, block);
}

id sub_100128294(uint64_t a1)
{
  context = objc_autoreleasePoolPush();
  uint64_t v28 = a1;
  if ([*(id *)(a1 + 32) code])
  {
    uint64_t v2 = OSLogHandleForIDSCategory("IDSFamilyManager");
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Error fetching family, will allow trying again later.",  buf,  2u);
    }

    if (os_log_shim_legacy_logging_enabled(v4)
      && _IDSShouldLog(0LL, @"IDSFamilyManager"))
    {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSFamilyManager",  @"Error fetching family, will allow trying again later.");
    }

    *(_BYTE *)(*(void *)(a1 + 48) + 13LL) = 0;
    *(_BYTE *)(*(void *)(a1 + 48) + 12LL) = 1;
  }

  else
  {
    id v27 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
    char v24 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
    __int128 v30 = 0u;
    __int128 v31 = 0u;
    __int128 v32 = 0u;
    __int128 v33 = 0u;
    id obj = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) members]);
    id v5 = [obj countByEnumeratingWithState:&v30 objects:v34 count:16];
    if (v5)
    {
      uint64_t v6 = *(void *)v31;
      do
      {
        for (i = 0LL; i != v5; i = (char *)i + 1)
        {
          if (*(void *)v31 != v6) {
            objc_enumerationMutation(obj);
          }
          uint64_t v8 = *(void **)(*((void *)&v30 + 1) + 8LL * (void)i);
          uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v28 + 48) handlesFromFamilyMember:v8]);
          id v10 = objc_alloc(&OBJC_CLASS___IDSFamilyMember);
          uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v8 dsid]);
          uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v8 appleID]);
          id v13 = [v10 initWithiCloudID:v11 appleID:v12 handles:v9 devices:0];

          [*(id *)(*(void *)(v28 + 48) + 32) unionSet:v9];
          -[NSMutableSet addObject:](v27, "addObject:", v13);
        }

        id v5 = [obj countByEnumeratingWithState:&v30 objects:v34 count:16];
      }

      while (v5);
    }

    objc_storeStrong((id *)(*(void *)(v28 + 48) + 16LL), v27);
    objc_storeStrong((id *)(*(void *)(v28 + 48) + 24LL), v24);
    *(_BYTE *)(*(void *)(v28 + 48) + 13LL) = 0;
    id v14 = -[NSMutableSet count](v27, "count");
    uint64_t v15 = v28;
    if (!v14)
    {
      uint64_t v16 = OSLogHandleForIDSCategory("IDSFamilyManager");
      id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Device is not part of a family. Will not allow force fetch until family updates.",  buf,  2u);
      }

      if (os_log_shim_legacy_logging_enabled(v18)
        && _IDSShouldLog(0LL, @"IDSFamilyManager"))
      {
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSFamilyManager",  @"Device is not part of a family. Will not allow force fetch until family updates.");
      }

      uint64_t v15 = v28;
      *(_BYTE *)(*(void *)(v28 + 48) + 12LL) = 0;
    }

    if (*(_BYTE *)(*(void *)(v15 + 48) + 14LL))
    {
      uint64_t v19 = OSLogHandleForIDSCategory("IDSFamilyManager");
      id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "Pulling out previously stored messages sent to a family service.",  buf,  2u);
      }

      if (os_log_shim_legacy_logging_enabled(v21)
        && _IDSShouldLog(0LL, @"IDSFamilyManager"))
      {
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSFamilyManager",  @"Pulling out previously stored messages sent to a family service.");
      }

      *(_BYTE *)(*(void *)(v28 + 48) + 14LL) = 0;
      uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
      [v22 _processStoredIncomingMessages];
    }
  }

  objc_autoreleasePoolPop(context);
  return [*(id *)(v28 + 48) _notifyFamilyServicesOfUpdate];
}

void sub_10012A4B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, char a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
}

uint64_t sub_10012A4F0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10012A500(uint64_t a1)
{
}

void sub_10012A508(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, void *a6, void *a7)
{
  id v10 = a4;
  id v11 = a7;
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = sub_1002B1E4C(a6);
  id v12 = [v11 encryptionType];

  *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = v12;
  uint64_t v13 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id v14 = *(void **)(v13 + 40);
  *(void *)(v13 + 40) = v10;
  id v15 = v10;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

uint64_t sub_10012A5A4(uint64_t a1, uint64_t a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_10012A5F8;
  v3[3] = &unk_1008F7948;
  v3[4] = *(void *)(a1 + 32);
  return IDSTransportThreadAddBlock(v3, a2);
}

id *sub_10012A5F8(id *result, char a2)
{
  if ((a2 & 1) == 0)
  {
    uint64_t v2 = result;
    uint64_t result = (id *)[result[4] _cancelConnectionAndResetDataConnections:1 shouldObliterate:0 encryptionFailure:1 shouldTriggerCorruptionRecovery:0];
    *((_BYTE *)v2[4] + 40) = 0;
  }

  return result;
}

uint64_t sub_10012A638(uint64_t a1, uint64_t a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_10012A68C;
  v3[3] = &unk_1008F7948;
  v3[4] = *(void *)(a1 + 32);
  return IDSTransportThreadAddBlock(v3, a2);
}

id *sub_10012A68C(id *result, char a2)
{
  if ((a2 & 1) == 0)
  {
    uint64_t v2 = result;
    uint64_t result = (id *)[result[4] _cancelConnectionAndResetDataConnections:1 shouldObliterate:0 encryptionFailure:1 shouldTriggerCorruptionRecovery:0];
    *((_BYTE *)v2[4] + 40) = 0;
  }

  return result;
}

void sub_10012ADE0(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = v5;
  switch((int)a2)
  {
    case 0:
    case 4:
      if (v5) {
        CFErrorRef v7 = nw_error_copy_cf_error(v5);
      }
      else {
        CFErrorRef v7 = 0LL;
      }
      id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = nw_connection_state_to_string(a2);
        uint64_t v13 = *(void *)(a1 + 32);
        uint64_t v14 = *(void *)(a1 + 40);
        int v15 = *(_DWORD *)(v14 + 24);
        uint64_t v16 = *(void *)(v14 + 8);
        *(_DWORD *)buf = 136316419;
        uint64_t v50 = v12;
        __int16 v51 = 2048;
        uint64_t v52 = v13;
        __int16 v53 = 2112;
        *(void *)xpc_object_t v54 = v13;
        *(_WORD *)&v54[8] = 1024;
        *(_DWORD *)&v54[10] = v15;
        __int16 v55 = 2112;
        CFErrorRef v56 = v7;
        __int16 v57 = 2113;
        uint64_t v58 = v16;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "control channel connection event %s for nw_connection (%p) %@ {socket:%d} event error: %@, deviceUniqueID[%{private}@]",  buf,  0x3Au);
      }

      v42[0] = _NSConcreteStackBlock;
      v42[1] = 3221225472LL;
      v42[2] = sub_10012B3DC;
      v42[3] = &unk_1008F8800;
      int8x16_t v37 = *(int8x16_t *)(a1 + 32);
      id v17 = (id)v37.i64[0];
      int8x16_t v43 = vextq_s8(v37, v37, 8uLL);
      IDSTransportThreadAddBlock(v42, v18);
      uint64_t v19 = (void *)v43.i64[1];
      goto LABEL_22;
    case 3:
      if (v5)
      {
        CFErrorRef v8 = nw_error_copy_cf_error(v5);
        if (v8)
        {
          CFErrorRef v9 = v8;
          int connected_socket = -1;
LABEL_15:
          id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v21 = *(void *)(a1 + 32);
            uint64_t v22 = *(__CFError **)(*(void *)(a1 + 40) + 8LL);
            *(_DWORD *)buf = 134219011;
            uint64_t v50 = v21;
            __int16 v51 = 2112;
            uint64_t v52 = v21;
            __int16 v53 = 1024;
            *(_DWORD *)xpc_object_t v54 = connected_socket;
            *(_WORD *)&v54[4] = 2112;
            *(void *)&v54[6] = v9;
            __int16 v55 = 2113;
            CFErrorRef v56 = v22;
            _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "control channel connect ready for nw_connection (%p) %@ {socket:%d}, event error: %@, deviceUniqueID[%{private}@]",  buf,  0x30u);
          }

          v44[0] = _NSConcreteStackBlock;
          v44[1] = 3221225472LL;
          v44[2] = sub_10012B2C4;
          v44[3] = &unk_1008FB180;
          int8x16_t v38 = *(int8x16_t *)(a1 + 32);
          id v23 = (id)v38.i64[0];
          int8x16_t v45 = vextq_s8(v38, v38, 8uLL);
          int v47 = connected_socket;
          id v46 = *(id *)(a1 + 48);
          IDSTransportThreadAddBlock(v44, v24);

          goto LABEL_23;
        }
      }

      int connected_socket = nw_connection_get_connected_socket(*(void *)(a1 + 32));
      if ((connected_socket & 0x80000000) == 0)
      {
        CFErrorRef v9 = 0LL;
        goto LABEL_15;
      }

      __int128 v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v34 = *(void *)(a1 + 32);
        __int16 v35 = *(__CFError **)(*(void *)(a1 + 40) + 8LL);
        *(_DWORD *)buf = 134219011;
        uint64_t v50 = v34;
        __int16 v51 = 2112;
        uint64_t v52 = v34;
        __int16 v53 = 1024;
        *(_DWORD *)xpc_object_t v54 = connected_socket;
        *(_WORD *)&v54[4] = 2112;
        *(void *)&v54[6] = 0LL;
        __int16 v55 = 2113;
        CFErrorRef v56 = v35;
        _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "control channel connect ready for nw_connection (%p) %@ {socket:%d}, event error: %@, deviceUniqueID[%{private}@]",  buf,  0x30u);
      }

      v48[0] = _NSConcreteStackBlock;
      v48[1] = 3221225472LL;
      v48[2] = sub_10012B2AC;
      v48[3] = &unk_1008F7948;
      v48[4] = *(void *)(a1 + 40);
      IDSTransportThreadAddBlock(v48, v36);
LABEL_23:

      return;
    case 5:
      if (v5) {
        CFErrorRef v7 = nw_error_copy_cf_error(v5);
      }
      else {
        CFErrorRef v7 = 0LL;
      }
      id v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v26 = nw_connection_state_to_string(5LL);
        uint64_t v27 = *(void *)(a1 + 32);
        uint64_t v28 = *(void *)(a1 + 40);
        int v29 = *(_DWORD *)(v28 + 24);
        uint64_t v30 = *(void *)(v28 + 8);
        *(_DWORD *)buf = 136316419;
        uint64_t v50 = v26;
        __int16 v51 = 2048;
        uint64_t v52 = v27;
        __int16 v53 = 2112;
        *(void *)xpc_object_t v54 = v27;
        *(_WORD *)&v54[8] = 1024;
        *(_DWORD *)&v54[10] = v29;
        __int16 v55 = 2112;
        CFErrorRef v56 = v7;
        __int16 v57 = 2113;
        uint64_t v58 = v30;
        _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "control channel connection event %s for nw_connection (%p) %@ {socket:%d} event error: %@, deviceUniqueID[%{private}@]",  buf,  0x3Au);
      }

      v40[0] = _NSConcreteStackBlock;
      v40[1] = 3221225472LL;
      v40[2] = sub_10012B470;
      v40[3] = &unk_1008F8800;
      int8x16_t v39 = *(int8x16_t *)(a1 + 32);
      id v31 = (id)v39.i64[0];
      int8x16_t v41 = vextq_s8(v39, v39, 8uLL);
      IDSTransportThreadAddBlock(v40, v32);
      uint64_t v19 = (void *)v41.i64[1];
LABEL_22:

      goto LABEL_23;
    default:
      goto LABEL_23;
  }

id sub_10012B2AC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _cancelConnectionAndResetDataConnections:0 shouldObliterate:0 encryptionFailure:0 shouldTriggerCorruptionRecovery:0];
}

void sub_10012B2C4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(void *)(v1 + 144) == *(void *)(a1 + 40))
  {
    *(_DWORD *)(v1 + 24) = *(_DWORD *)(a1 + 56);
    uint64_t v4 = *(unsigned int *)(a1 + 56);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    void v7[2] = sub_10012B3CC;
    v7[3] = &unk_1008F6010;
    uint64_t v8 = *(void *)(a1 + 32);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_10012B3D4;
    v6[3] = &unk_1008F6010;
    void v6[4] = v8;
    IDSTransportThreadAddSocket(v4, v7, v6);
    uint64_t v5 = *(void *)(a1 + 48);
    if (v5) {
      [*(id *)(*(void *)(a1 + 32) + 72) insertObject:v5 atIndex:0];
    }
    [*(id *)(a1 + 32) _checkSendNewMessage];
  }

  else
  {
    uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "control channel connect ready but connection already canceled - exit without TPAddSocket",  buf,  2u);
    }
  }

id sub_10012B3CC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) readFromConnection];
}

id sub_10012B3D4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) writeToConnection];
}

void sub_10012B3DC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2[18] == *(void *)(a1 + 40))
  {
    _[v2 cancelConnection];
  }

  else
  {
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "control channel failure/invalid event but connection already canceled - exit without causing additional cleanup",  v4,  2u);
    }
  }

void sub_10012B470(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v2 + 168))
  {
    *(_BYTE *)(v2 + 16_Block_object_dispose((const void *)(v1 - 112), 8) = 0;
    id v3 = (os_log_s *)*(id *)(*(void *)(a1 + 32) + 176LL);
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void **)(v4 + 176);
    *(void *)(v4 + 176) = 0LL;

    if (v3 == *(os_log_s **)(a1 + 40))
    {
      [*(id *)(a1 + 32) _callHandlerWithMessage:0 resetDataConnections:*(unsigned __int8 *)(*(void *)(a1 + 32) + 184) shouldObliterate:*(unsigned __int8 *)(*(void *)(a1 + 32) + 185) decryptionFailed:*(unsigned __int8 *)(*(void *)(a1 + 32) + 186) shouldTriggerCorruptionRecovery:*(unsigned __int8 *)(*(void *)(a1 + 32) + 187)];
    }

    else
    {
      uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = *(void *)(a1 + 40);
        uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 144LL);
        int v11 = 138412802;
        uint64_t v12 = v7;
        __int16 v13 = 2112;
        uint64_t v14 = v8;
        __int16 v15 = 2112;
        uint64_t v16 = v3;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "control channel connection %@ canceled, _connection %@, _canceledConnection %@",  (uint8_t *)&v11,  0x20u);
      }
    }
  }

  else
  {
    if (*(void *)(a1 + 40) != *(void *)(v2 + 144)) {
      return;
    }
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 40);
      uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 144LL);
      int v11 = 138412546;
      uint64_t v12 = v9;
      __int16 v13 = 2112;
      uint64_t v14 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "gatherDataToInvestigate_59608320: connection: %@, _connection: %@",  (uint8_t *)&v11,  0x16u);
    }
  }
}

void sub_10012C47C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, void *a6)
{
  id v9 = a4;
  id v10 = a5;
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [a6 encryptionType];
  uint64_t v11 = sub_1002B1D88(v10);

  *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = v11;
  uint64_t v12 = *(void *)(*(void *)(a1 + 56) + 8LL);
  __int16 v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 40) = v9;
  id v14 = v9;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10012C518(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
  [v1 issueDependentIDQueriesWithCompletionBlock:0];
}

uint64_t sub_10012C550(uint64_t a1, uint64_t a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_10012C5A4;
  v3[3] = &unk_1008F7948;
  v3[4] = *(void *)(a1 + 32);
  return IDSTransportThreadAddBlock(v3, a2);
}

id *sub_10012C5A4(id *result, char a2)
{
  if ((a2 & 1) == 0) {
    return (id *)[result[4] _cancelConnectionAndResetDataConnections:1 shouldObliterate:0 encryptionFailure:1 shouldTriggerCorruptionRecovery:0];
  }
  return result;
}

void sub_10012C5C4(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
  [v1 issueDependentIDQueriesWithCompletionBlock:0];
}

uint64_t sub_10012C5FC(uint64_t a1, uint64_t a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_10012C650;
  v3[3] = &unk_1008F7948;
  v3[4] = *(void *)(a1 + 32);
  return IDSTransportThreadAddBlock(v3, a2);
}

id *sub_10012C650(id *result, char a2)
{
  if ((a2 & 1) == 0) {
    return (id *)[result[4] _cancelConnectionAndResetDataConnections:1 shouldObliterate:0 encryptionFailure:1 shouldTriggerCorruptionRecovery:0];
  }
  return result;
}

void sub_10012DEC0(id a1)
{
  off_1009BEB30 = (_UNKNOWN *)IMWeakLinkSymbol("SecMPCopyProtectedMsgHash", @"MessageProtection");
}

void sub_10012E874(int a1, void *a2, void *a3, uint64_t a4)
{
}

void sub_10012E884(int a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  id v8 = a3;
  id v9 = a4;
  id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    id v19 = v8;
    __int16 v20 = 2112;
    id v21 = v9;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%@ - %@", buf, 0x16u);
  }

  if ((IMGetCachedDomainBoolForKey(@"com.apple.conference", @"NotifySMS") & 1) != 0 || a1)
  {
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[IMUserNotification userNotificationWithIdentifier:title:message:defaultButton:alternateButton:otherButton:]( &OBJC_CLASS___IMUserNotification,  "userNotificationWithIdentifier:title:message:defaultButton:alternateButton:otherButton:",  @"Registration",  v8,  v9,  @"OK",  0LL,  0LL));
    [v11 setUsesNotificationCenter:1];
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[IMUserNotificationCenter sharedInstance](&OBJC_CLASS___IMUserNotificationCenter, "sharedInstance"));
    [v12 addUserNotification:v11 listener:0];

    __int16 v13 = (void *)objc_claimAutoreleasedReturnValue(+[IMLockdownManager sharedInstance](&OBJC_CLASS___IMLockdownManager, "sharedInstance"));
    if ([v13 isInternalInstall])
    {

      if ((int)a5 < 1)
      {
LABEL_12:

        goto LABEL_13;
      }
    }

    else
    {
      char v14 = IMGetCachedDomainBoolForKey(@"com.apple.conference", @"NotifySounds");
    }

    __int16 v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
    unsigned int v16 = [v15 fileExistsAtPath:@"/usr/local/bin/figplaySS"];

    if (v16)
    {
      id v17 = objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString, "stringWithFormat:", @"%@ -ssid %d", @"/usr/local/bin/figplaySS", a5));
      IMPerformSystem([v17 UTF8String]);
    }

    goto LABEL_12;
  }

uint64_t sub_10012EAA4(int a1)
{
  else {
    return qword_100717668[a1 + 1];
  }
}

uint64_t sub_10012EAC8(uint64_t a1)
{
  else {
    return dword_100717760[a1 + 1];
  }
}

CFStringRef _StringForIDSRegistrationType(unsigned int a1)
{
  if (a1 > 3) {
    return @"Unrecognized";
  }
  else {
    return off_1008FB250[a1];
  }
}

CFStringRef sub_10012EB10(uint64_t a1)
{
  else {
    return off_1008FB270[a1 + 2];
  }
}

__CFString *sub_10012EB38(void *a1)
{
  id v1 = a1;
  if ((IDSIsiMessageRegistrationServiceType() & 1) != 0)
  {
    uint64_t v2 = @"Messenger";
  }

  else if ((IDSIsFaceTimeRegistrationServiceType(v1) & 1) != 0 {
         || (IDSIsCallingRegistrationServiceType(v1) & 1) != 0
  }
         || (IDSIsMultiwayRegistrationServiceType(v1) & 1) != 0)
  {
    uint64_t v2 = @"Invitation";
  }

  else
  {
    uint64_t v2 = v1;
    uint64_t v2 = @"com.apple.private.alloy";
  }

LABEL_8:
  return v2;
}

__CFString *sub_10012EBC4(void *a1)
{
  id v1 = a1;
  if ((IDSIsiMessageRegistrationServiceType() & 1) != 0)
  {
    uint64_t v2 = @"com.apple.madrid";
LABEL_9:

    goto LABEL_10;
  }

  if ((IDSIsFaceTimeRegistrationServiceType(v1) & 1) != 0)
  {
    uint64_t v2 = @"com.apple.ess";
    goto LABEL_9;
  }

  if ((IDSIsCallingRegistrationServiceType(v1) & 1) != 0)
  {
    uint64_t v2 = @"com.apple.private.ac";
    goto LABEL_9;
  }

  uint64_t v2 = v1;
  if (IDSIsMultiwayRegistrationServiceType(v1))
  {
    uint64_t v2 = @"com.apple.private.alloy.facetime.multi";
    goto LABEL_9;
  }

__CFString *sub_10012EC50(unsigned int a1)
{
  if (a1 > 3) {
    return 0LL;
  }
  else {
    return off_1008FB410[a1];
  }
}

void *sub_10012EC70(void *a1)
{
  id v1 = a1;
  unsigned int v2 = [v1 registrationType];
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v1 mainID]);

  if (v3)
  {
    if ([v1 registrationType] == 1
      && (uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v1 profileID]),
          id v5 = [v4 length],
          v4,
          !v5))
    {
      char v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_31;
      }
      int v20 = 138412290;
      id v21 = v1;
      unsigned int v16 = "Missing ProfileID, Not sending IDS Authentication/Register for: %@";
    }

    else if ([v1 registrationType] == 1 {
           && (uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v1 regionID]),
    }
               id v7 = [v6 length],
               v6,
               !v7))
    {
      char v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_31;
      }
      int v20 = 138412290;
      id v21 = v1;
      unsigned int v16 = "Missing regionID, Not sending IDS Authentication/Register for: %@";
    }

    else
    {
      if ([v1 registrationType] != 1
        || (id v8 = (void *)objc_claimAutoreleasedReturnValue([v1 regionBasePhoneNumber]),
            id v9 = [v8 length],
            v8,
            v9))
      {
        id v10 = (void *)objc_claimAutoreleasedReturnValue([v1 authenticationCert]);
        uint64_t v11 = v10;
        if (v10 || v2 == 3)
        {

          if (!v11) {
            goto LABEL_11;
          }
        }

        else
        {
          uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v1 authenticationToken]);

          if (v12)
          {
LABEL_11:
            __int16 v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
            if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
            {
              int v20 = 138412290;
              id v21 = v1;
              _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Sending IDS Authentication for: %@",  (uint8_t *)&v20,  0xCu);
            }

            char v14 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSRegistrationCenter sharedInstance]( &OBJC_CLASS___IDSRegistrationCenter,  "sharedInstance"));
            id v15 = -[os_log_s authenticateRegistration:](v14, "authenticateRegistration:", v1);
LABEL_21:
            id v3 = v15;
            goto LABEL_32;
          }
        }

        id v17 = (void *)objc_claimAutoreleasedReturnValue([v1 authenticationCert]);

        char v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
        BOOL v18 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
        if (v17)
        {
          if (v18)
          {
            int v20 = 138412290;
            id v21 = v1;
            _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Sending IDS Registration for: %@",  (uint8_t *)&v20,  0xCu);
          }

          char v14 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSRegistrationCenter sharedInstance]( &OBJC_CLASS___IDSRegistrationCenter,  "sharedInstance"));
          id v15 = -[os_log_s sendRegistration:](v14, "sendRegistration:", v1);
          goto LABEL_21;
        }

        if (v18)
        {
          int v20 = 138412290;
          id v21 = v1;
          unsigned int v16 = "Not sending IDS Registration or Authentication for: %@";
          goto LABEL_30;
        }

LABEL_31:
        id v3 = 0LL;
        goto LABEL_32;
      }

      char v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_31;
      }
      int v20 = 138412290;
      id v21 = v1;
      unsigned int v16 = "Missing regionBasePhoneNumber, Not sending IDS Authentication/Register for: %@";
    }

    LOBYTE(v54[0]) = 16 * v5;
    if ((_DWORD)v5)
    {
      id v21 = (id)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", &v53, (int)(v6 - &v53)));
      uint64_t v22 = OSLogHandleForTransportCategory("UGL");
      id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)__int16 v51 = v5;
        *(_WORD *)&v51[4] = 1024;
        *(_DWORD *)&v51[6] = v6 - &v53;
        _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "createConnectionData - done (#ipv4: %d, length: %dB).",  buf,  0xEu);
      }

      id v25 = os_log_shim_legacy_logging_enabled(v24);
      if ((_DWORD)v25)
      {
        id v25 = _IDSShouldLogTransport(v25);
        if ((_DWORD)v25)
        {
          _IDSLogTransport(@"UGL", @"IDS", @"createConnectionData - done (#ipv4: %d, length: %dB).");
          id v25 = _IDSShouldLog(0LL, @"UGL");
          if ((_DWORD)v25) {
            id v25 = _IDSLogV( 0LL,  @"IDSFoundation",  @"UGL",  @"createConnectionData - done (#ipv4: %d, length: %dB).");
          }
        }
      }

      if (self->_dataReadyHandler)
      {
        uint64_t v27 = im_primary_queue(v25, v26);
        uint64_t v28 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v27);
        v42[0] = _NSConcreteStackBlock;
        v42[1] = 3221225472LL;
        v42[2] = sub_1001516B0;
        v42[3] = &unk_1008F5F80;
        void v42[4] = self;
        int v29 = &v43;
        id v21 = v21;
        int8x16_t v43 = v21;
        uint64_t v30 = v42;
LABEL_48:
        dispatch_async(v28, v30);

        goto LABEL_49;
      }

      goto LABEL_49;
    }
  }

  else
  {

    LOBYTE(v54[0]) = 0;
  }

  id v31 = OSLogHandleForTransportCategory("UGL");
  uint64_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
  if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "failed to create connection data", buf, 2u);
  }

  uint64_t v34 = os_log_shim_legacy_logging_enabled(v33);
  if ((_DWORD)v34)
  {
    if (_IDSShouldLogTransport(v34))
    {
      _IDSLogTransport(@"UGL", @"IDS", @"failed to create connection data");
    }
  }

  __int16 v35 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObject:forKey:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObject:forKey:",  @"failed to create connection data",  NSLocalizedDescriptionKey,  v39));
  id v21 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"UDPGlobalLink",  8001LL,  v35));

  if (self->_dataReadyHandler)
  {
    int8x16_t v38 = im_primary_queue(v36, v37);
    uint64_t v28 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v38);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10015169C;
    block[3] = &unk_1008F5F80;
    void block[4] = self;
    int v29 = &v45;
    id v21 = v21;
    int8x16_t v45 = v21;
    uint64_t v30 = block;
    goto LABEL_48;
  }

  pthread_mutex_unlock(p_deviceIDToPeerLock);

  return v14;
}

  v47[0] = _NSConcreteStackBlock;
  v47[1] = 3221225472LL;
  v47[2] = sub_10027DCC8;
  v47[3] = &unk_1008FF428;
  v47[4] = self;
  v48 = v14;
  __int16 v49 = v17;
  uint64_t v50 = v16;
  __int16 v51 = v19;
  id v40 = v19;
  int8x16_t v41 = v16;
  uint64_t v42 = v17;
  int8x16_t v43 = v14;
  LOWORD(v44) = 0;
  -[IDSIDStatusQueryController _lookupIDStatusForURIs:fromIdentity:fromURI:fromService:lightQuery:allowQuery:forceQuery:bypassLimit:reason:completionBlock:]( self,  "_lookupIDStatusForURIs:fromIdentity:fromURI:fromService:lightQuery:allowQuery:forceQuery:bypassLimit:reason:completionBlock:",  v43,  v15,  v41,  v42,  v45,  v46,  v44,  v18,  v47);
}

  uint64_t v42 = objc_msgSend(v19, "forceRefresh", v47);
  int8x16_t v43 = [v19 bypassLimit];
  v55[0] = _NSConcreteStackBlock;
  v55[1] = 3221225472LL;
  v55[2] = sub_10027E404;
  v55[3] = &unk_1008FF450;
  v55[4] = v21;
  CFErrorRef v56 = v51;
  __int16 v57 = v18;
  uint64_t v58 = v53;
  id v60 = v20;
  uint64_t v61 = a7;
  id v59 = v19;
  uint64_t v50 = v20;
  __int16 v49 = v19;
  __int16 v44 = v53;
  int8x16_t v45 = v18;
  id v46 = v51;
  BYTE1(v4_Block_object_dispose((const void *)(v1 - 112), 8) = v43;
  LOBYTE(v4_Block_object_dispose((const void *)(v1 - 112), 8) = v42;
  -[IDSIDStatusQueryController _lookupIDStatusForURIs:fromIdentity:fromURI:fromService:lightQuery:allowQuery:forceQuery:bypassLimit:reason:completionBlock:]( v21,  "_lookupIDStatusForURIs:fromIdentity:fromURI:fromService:lightQuery:allowQuery:forceQuery:bypassLimit:reason:completionBlock:",  v46,  v54,  v44,  v45,  a9,  a10,  v48,  v52,  v55);
}
}

          __break(1u);
          return result;
        }

        goto LABEL_29;
      }
    }
  }

  __break(1u);
}

  swift_release(v241);
  v119 = (char *)v224[1];
  v120 = *((void *)v119 + 8);
  v231 = v119 + 64;
  v121 = 1LL << v119[32];
  if (v121 < 64) {
    v122 = ~(-1LL << v121);
  }
  else {
    v122 = -1LL;
  }
  v123 = v122 & v120;
  v232 = (unint64_t)(v121 + 63) >> 6;
  v228 = &v252;
  v227 = v224 + 4;
  v233 = v119;
  swift_bridgeObjectRetain(v119);
  v124 = 0LL;
  v226 = (uint64_t *)((char *)&type metadata for Any + 8);
  v125 = v222;
  while (2)
  {
    v129 = (uint64_t)v223;
    if (v123)
    {
      v235 = (v123 - 1) & v123;
      v236 = v124;
      v130 = __clz(__rbit64(v123)) | (v124 << 6);
      goto LABEL_49;
    }

    v131 = __OFADD__(v124, 1LL);
    v132 = v124 + 1;
    if (v131) {
      goto LABEL_109;
    }
    if (v132 >= v232) {
      goto LABEL_102;
    }
    v133 = *(void *)&v231[8 * v132];
    if (!v133)
    {
      v134 = v132 + 1;
      if (v132 + 1 < v232)
      {
        v133 = *(void *)&v231[8 * v134];
        if (v133) {
          goto LABEL_47;
        }
        v134 = v132 + 2;
        if (v132 + 2 < v232)
        {
          v133 = *(void *)&v231[8 * v134];
          if (v133) {
            goto LABEL_47;
          }
          v134 = v132 + 3;
          if (v132 + 3 < v232)
          {
            v133 = *(void *)&v231[8 * v134];
            if (v133)
            {
LABEL_47:
              v132 = v134;
              goto LABEL_48;
            }

            while (1)
            {
              v132 = v134 + 1;
              if (__OFADD__(v134, 1LL)) {
                goto LABEL_111;
              }
              if (v132 >= v232) {
                break;
              }
              v133 = *(void *)&v231[8 * v132];
              ++v134;
              if (v133) {
                goto LABEL_48;
              }
            }
          }
        }
      }

NSString *sub_10012F01C()
{
  Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0LL, 0LL, 0LL);
  CFDictionaryAddValue(Mutable, kSecClass, kSecClassGenericPassword);
  CFDictionaryAddValue(Mutable, kSecAttrService, @"AppleIDClientIdentifier");
  CFDictionaryAddValue(Mutable, kSecReturnData, kCFBooleanTrue);
  CFTypeRef result = 0LL;
  id v1 = 0LL;
  if (SecItemCopyMatching(Mutable, &result)) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = result == 0LL;
  }
  if (!v2)
  {
    id v3 = objc_alloc(&OBJC_CLASS___NSString);
    id v1 = -[NSString initWithData:encoding:](v3, "initWithData:encoding:", result, 4LL);
    CFRelease(result);
  }

  if (Mutable) {
    CFRelease(Mutable);
  }
  return v1;
}

id sub_10012F10C(void *a1)
{
  id v1 = a1;
  BOOL v2 = (void *)objc_claimAutoreleasedReturnValue([v1 componentsSeparatedByString:@":"]);
  if ([v2 count] == (id)2)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 objectAtIndex:1]);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v3 longLongValue]));
    if ([v4 longLongValue])
    {
      id v5 = v4;
    }

    else
    {
      uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registrationAuthKit](&OBJC_CLASS___IMRGLog, "registrationAuthKit"));
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        int v8 = 138412290;
        id v9 = v1;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "DSID NSNumber extracted from the profile id is null. profileId: %@",  (uint8_t *)&v8,  0xCu);
      }

      id v5 = 0LL;
    }
  }

  else
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue(+[IMRGLog registrationAuthKit](&OBJC_CLASS___IMRGLog, "registrationAuthKit"));
    if (os_log_type_enabled((os_log_t)v3, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 138412290;
      id v9 = v1;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v3,  OS_LOG_TYPE_DEFAULT,  "Could not split the profileId in order to send only the numerical part to AuthKit. profileId: %@",  (uint8_t *)&v8,  0xCu);
    }

    id v5 = 0LL;
  }

  return v5;
}

void sub_10012F638( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
}

uint64_t sub_10012F65C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10012F670(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_10012F71C;
    v6[3] = &unk_1008FB460;
    uint64_t v5 = *(void *)(a1 + 32);
    id v7 = *(id *)(a1 + 40);
    id v8 = v3;
    [WeakRetained _fetchCachedObjectForKey:v5 completion:v6];
  }
}

uint64_t sub_10012F71C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

id sub_10012FB88(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _performEvictionSweep];
}

void sub_100130018(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 evictionDate]);
  id v8 = [v7 compare:*(void *)(a1 + 32)];

  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utilities](&OBJC_CLASS___IDSFoundationLog, "utilities"));
  id v10 = v9;
  if (v8 == (id)-1LL)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG)) {
      sub_10069CCC8((uint64_t)v5, v6, v10);
    }

    [*(id *)(a1 + 40) addObject:v5];
  }

  else
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v6 evictionDate]);
      int v12 = 138478083;
      id v13 = v5;
      __int16 v14 = 2114;
      id v15 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Not evicting item {key: %{private}@, evictionDate: %{public}@",  (uint8_t *)&v12,  0x16u);
    }
  }
}

void sub_100130308(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queue]);
  dispatch_assert_queue_V2(v4);

  if (v3)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) object]);
    unsigned __int8 v6 = [v3 isEqual:v5];

    if ((v6 & 1) != 0)
    {
      id v7 = *(void **)(a1 + 40);
      [*(id *)(a1 + 32) ttlInSeconds];
      objc_msgSend(v7, "bumpEvictionDateToSecondsFromNow:");
    }

    else
    {
      uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utilities](&OBJC_CLASS___IDSFoundationLog, "utilities"));
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = *(void *)(a1 + 48);
        id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) object]);
        int v14 = 138478339;
        uint64_t v15 = v12;
        __int16 v16 = 2113;
        id v17 = v13;
        __int16 v18 = 2113;
        id v19 = v3;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Delegate replace cached object {key: %{private}@, previous: %{private}@, replacement: %{private}@}",  (uint8_t *)&v14,  0x20u);
      }

      [*(id *)(a1 + 32) cacheObject:v3 forKey:*(void *)(a1 + 48)];
    }

    id v10 = *(void (**)(void))(*(void *)(a1 + 56) + 16LL);
  }

  else
  {
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utilities](&OBJC_CLASS___IDSFoundationLog, "utilities"));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 48);
      int v14 = 138477827;
      uint64_t v15 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Replacement object is nil {key: %{private}@}",  (uint8_t *)&v14,  0xCu);
    }

    if (*(void *)(a1 + 40)) {
      [*(id *)(a1 + 32) evictCachedObjectForKey:*(void *)(a1 + 48)];
    }
    id v10 = *(void (**)(void))(*(void *)(a1 + 56) + 16LL);
  }

  v10();
}

void sub_100130D88(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___IDSRegistrationReasonTracker);
  BOOL v2 = (void *)qword_1009BEB48;
  qword_1009BEB48 = (uint64_t)v1;
}

void sub_100130E8C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

uint64_t sub_100130EA8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    uint64_t v2 = OSLogHandleForIDSCategory("Sysdiagnose-Oversized");
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained PNRReasonByUserID]);
      *(_DWORD *)buf = 138412290;
      id v13 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Most Recent PNR Reasons %@", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v5)
      && _IDSShouldLog(0LL, @"Sysdiagnose-Oversized"))
    {
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained PNRReasonByUserID]);
      _IDSLogV(0LL, @"IDSFoundation", @"Sysdiagnose-Oversized", @"Most Recent PNR Reasons %@");
    }

    uint64_t v6 = OSLogHandleForIDSCategory("Sysdiagnose-Oversized");
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      id v8 = [WeakRetained mostRecentIDSRegistrationReason];
      *(_DWORD *)buf = 134217984;
      id v13 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Most Recent IDS Registration Reason %ld",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v9)
      && _IDSShouldLog(0LL, @"Sysdiagnose-Oversized"))
    {
      [WeakRetained mostRecentIDSRegistrationReason];
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Sysdiagnose-Oversized",  @"Most Recent IDS Registration Reason %ld");
    }
  }

  return 0LL;
}

void sub_10013107C(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x100130FFCLL);
  }

  _Unwind_Resume(a1);
}

void sub_100132458(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController_oversize]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController_oversize"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(a1 + 56)) {
      id v3 = @"YES";
    }
    else {
      id v3 = @"NO";
    }
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    uint64_t v6 = *(void *)(a1 + 48);
    int v7 = 138413058;
    uint64_t v8 = v4;
    __int16 v9 = 2112;
    id v10 = v3;
    __int16 v11 = 2112;
    uint64_t v12 = v5;
    __int16 v13 = 2112;
    uint64_t v14 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Returning MkM collection to broadcast { destinationURI: %@, shouldIncludePeerKeys: %@, collection: %@, self: %@ }",  (uint8_t *)&v7,  0x2Au);
  }
}

void sub_100132874( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10013288C(uint64_t a1, void *a2, _BYTE *a3)
{
  uint64_t v5 = *(void **)(a1 + 32);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([a2 keyIndex]);
  int v7 = (void *)objc_claimAutoreleasedReturnValue([v6 UUIDString]);
  LODWORD(v5) = [v5 isEqualToString:v7];

  if ((_DWORD)v5)
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
    *a3 = 1;
  }

void sub_100132AFC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_100132B28(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained automaticResetBlock]);
    id v4 = objc_retainBlock(v3);
    int v7 = 138412546;
    id v8 = WeakRetained;
    __int16 v9 = 2112;
    id v10 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Automatic cache reset timer fired { sself: %@, resetBlock: %@ }",  (uint8_t *)&v7,  0x16u);
  }

  if (WeakRetained)
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained automaticResetBlock]);

    if (v5)
    {
      uint64_t v6 = (void (**)(void, void))objc_claimAutoreleasedReturnValue([WeakRetained automaticResetBlock]);
      ((void (**)(void, id))v6)[2](v6, WeakRetained);
    }
  }
}

void sub_1001332B8( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

void sub_100133554(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___IDSPACStateTracker);
  uint64_t v2 = (void *)qword_1009BEB68;
  qword_1009BEB68 = (uint64_t)v1;
}

void sub_10013627C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a3;
  if (a4)
  {
    NSErrorUserInfoKey v14 = NSUnderlyingErrorKey;
    uint64_t v15 = a4;
    id v8 = a4;
    __int16 v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v15,  &v14,  1LL));
    id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"IDSValidationSessionErrorDomain",  -3000LL,  v9));
  }

  else
  {
    id v11 = 0LL;
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v7 objectAtIndexedSubscript:0]);
    [*(id *)(a1 + 32) setBAACert:v12];

    __int16 v13 = (void *)objc_claimAutoreleasedReturnValue([v7 objectAtIndexedSubscript:1]);
    [*(id *)(a1 + 32) setIntermediateRootCert:v13];

    [*(id *)(a1 + 32) setBIKKeyRef:a2];
    objc_msgSend(*(id *)(a1 + 32), "setStateFlags:", (unint64_t)objc_msgSend(*(id *)(a1 + 32), "stateFlags") | 1);
    objc_msgSend( *(id *)(a1 + 32),  "setStateFlags:",  (unint64_t)objc_msgSend(*(id *)(a1 + 32), "stateFlags") | 0x10);
    id v10 = 0LL;
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10013672C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10013674C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  if (!v8) {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) |= 4u;
  }
  __int16 v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    if (v8) {
      id v10 = @"YES";
    }
    else {
      id v10 = @"NO";
    }
    if (a2) {
      id v11 = @"YES";
    }
    else {
      id v11 = @"NO";
    }
    *(_DWORD *)buf = 138413058;
    *(void *)uint64_t v64 = v10;
    *(_WORD *)&v64[8] = 2112;
    *(void *)&v64[10] = v11;
    *(_WORD *)&v64[18] = 2048;
    *(void *)&v64[20] = [v7 count];
    __int16 v65 = 2112;
    id v66 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Completed device identity fetch {success: %@, referenceKey: %@, certificates: %lu, error: %@}",  buf,  0x2Au);
  }

  uint64_t v62 = 0LL;
  unsigned int v61 = 0;
  uint64_t v60 = 0LL;
  uint64_t v12 = 0LL;
  if ([*(id *)(a1 + 32) _shouldUseAbsintheV3])
  {
    int v13 = sub_100635278( (uint64_t)&v60,  (uint64_t)&v62,  (uint64_t)&v61,  *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL));
    if (v13) {
      BOOL v14 = 1;
    }
    else {
      BOOL v14 = v60 == 0;
    }
    if (!v14 && v62 != 0)
    {
      objc_msgSend(*(id *)(a1 + 32), "setPscSession:");
      __int16 v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", v62, v61));
      [*(id *)(a1 + 32) setHelloMessage:v18];

      id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        id v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) UDID]);
        id v22 = [v21 length];
        id v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) helloMessage]);
        id v24 = [v23 length];
        *(_DWORD *)buf = 134218240;
        *(void *)uint64_t v64 = v22;
        *(_WORD *)&v64[8] = 2048;
        *(void *)&v64[10] = v24;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Successfully initialized validation session and hello message {UDUD.length: %ld, helloMessage.length: %ld}",  buf,  0x16u);
      }

      if ([*(id *)(a1 + 32) _shouldUseDebugPiscoLogging])
      {
        id v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog sysdiagnose_oversized](&OBJC_CLASS___IMRGLog, "sysdiagnose_oversized"));
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        {
          int v26 = *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)uint64_t v64 = v26;
          _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "[Pisco] {sessionOptionFlags: %u}",  buf,  8u);
        }

        uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog sysdiagnose_oversized](&OBJC_CLASS___IMRGLog, "sysdiagnose_oversized"));
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) helloMessage]);
          *(_DWORD *)buf = 138412290;
          *(void *)uint64_t v64 = v28;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "[Pisco] {helloMessage: %@}", buf, 0xCu);
        }
      }

      uint64_t v12 = 0LL;
      if (v8) {
        goto LABEL_55;
      }
      goto LABEL_35;
    }

    int v16 = v13;
    id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
    if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT))
    {
      id v50 = [*(id *)(a1 + 32) pscSession];
      __int16 v51 = @"YES";
      if (v50) {
        uint64_t v52 = @"YES";
      }
      else {
        uint64_t v52 = @"NO";
      }
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)uint64_t v64 = v16;
      *(_WORD *)&v64[4] = 2112;
      if (!v62) {
        __int16 v51 = @"NO";
      }
      *(void *)&v64[6] = v52;
      *(_WORD *)&v64[14] = 2112;
      *(void *)&v64[16] = v51;
      _os_log_fault_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_FAULT,  "Failed to initialize validation session {helloStatus: %d, session: %@, helloMessageBytes: %@}",  buf,  0x1Cu);
    }

    if (v60)
    {
      sub_100668A98(v60);
      uint64_t v60 = 0LL;
    }

    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"IDSValidationSessionErrorDomain",  -3000LL,  0LL));
  }

  if (v8)
  {
LABEL_55:
    [*(id *)(a1 + 32) setLastBAAError:v8];
    goto LABEL_56;
  }

uint64_t sub_100136F7C(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16LL))(a1[6], a1[4], a1[5]);
}

void sub_1001379DC(void *a1, void *a2)
{
  uint64_t v3 = a1[7];
  id v4 = a2;
  uint64_t v5 = -[IDSValidationSigningResult initWithAbsintheResultData:absintheServerKey:absintheError:baaResult:]( objc_alloc(&OBJC_CLASS___IDSValidationSigningResult),  "initWithAbsintheResultData:absintheServerKey:absintheError:baaResult:",  a1[4],  a1[5],  a1[6],  v4);

  (*(void (**)(uint64_t, IDSValidationSigningResult *))(v3 + 16))(v3, v5);
}

void sub_100137A50(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = a2;
  id v4 = -[IDSValidationSigningResult initWithAbsintheResultData:absintheServerKey:absintheError:baaResult:]( objc_alloc(&OBJC_CLASS___IDSValidationSigningResult),  "initWithAbsintheResultData:absintheServerKey:absintheError:baaResult:",  0LL,  0LL,  0LL,  v3);

  (*(void (**)(uint64_t, IDSValidationSigningResult *))(v2 + 16))(v2, v4);
}

void sub_100137B6C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 absintheError]);
  if (v4) {
    goto LABEL_2;
  }
  uint64_t v24 = objc_claimAutoreleasedReturnValue([v3 absintheServerKey]);
  if (!v24) {
    goto LABEL_3;
  }
  id v4 = (void *)v24;
  uint64_t v25 = objc_claimAutoreleasedReturnValue([v3 absintheResultData]);
  if (!v25)
  {
LABEL_2:
  }

  else
  {
    int v26 = (void *)v25;
    id v27 = [*(id *)(a1 + 32) mechanism];

    if (!v27)
    {
      uint64_t v5 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) sha256Digest]);
      int v29 = (void *)objc_claimAutoreleasedReturnValue([v28 base64EncodedStringWithOptions:0]);

      if (v29)
      {
        CFDictionarySetValue((CFMutableDictionaryRef)v5, @"absinthe-message", v29);
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_10069D424();
      }

      uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue([v3 absintheResultData]);
      int8x16_t v39 = (void *)objc_claimAutoreleasedReturnValue([v38 base64EncodedStringWithOptions:0]);

      if (v39)
      {
        CFDictionarySetValue((CFMutableDictionaryRef)v5, @"absinthe-signature", v39);
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_10069D3A4();
      }

      id v40 = (void *)objc_claimAutoreleasedReturnValue([v3 absintheServerKey]);
      int8x16_t v41 = (void *)objc_claimAutoreleasedReturnValue([v40 base64EncodedStringWithOptions:0]);

      if (v41)
      {
        CFDictionarySetValue((CFMutableDictionaryRef)v5, @"absinthe-serv-key", v41);
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_10069D324();
      }

      uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) UDID]);
      if (v42)
      {
        CFDictionarySetValue((CFMutableDictionaryRef)v5, @"absinthe-udid", v42);
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_10069D2A4();
      }

      int v43 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) serialNumber]);
      if (v43)
      {
        CFDictionarySetValue((CFMutableDictionaryRef)v5, @"absinthe-serial-number", v43);
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_10069D224();
      }

      id v44 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) IMEI]);
      if (v44) {
        CFDictionarySetValue((CFMutableDictionaryRef)v5, @"absinthe-imei", v44);
      }

      id v45 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) MEID]);
      if (v45) {
        CFDictionarySetValue((CFMutableDictionaryRef)v5, @"absinthe-meid", v45);
      }

      else {
        id v46 = @"false";
      }
      CFDictionarySetValue((CFMutableDictionaryRef)v5, @"absinthe-v4", v46);
      else {
        int v47 = @"false";
      }
      CFDictionarySetValue((CFMutableDictionaryRef)v5, @"absinthe-baa", v47);
      goto LABEL_5;
    }
  }

void sub_100138A90( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, char a33)
{
}

uint64_t sub_100138AD8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100138AE8(uint64_t a1)
{
}

void sub_100138AF0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    uint64_t v20 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Starting fetch of device identity for validation session {validityInMinutes: %@}",  buf,  0xCu);
  }

  v17[0] = kMAOptionsBAAKeychainLabel;
  v17[1] = kMAOptionsBAAValidity;
  uint64_t v6 = *(void *)(a1 + 32);
  v18[0] = @"com.apple.IDS";
  v18[1] = v6;
  v17[2] = kMAOptionsBAAOIDSToInclude;
  v16[0] = kMAOptionsBAAOIDUCRTDeviceIdentifiers;
  v16[1] = kMAOptionsBAAOIDDeviceOSInformation;
  void v16[2] = kMAOptionsBAAOIDProductType;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v16, 3LL));
  v18[2] = v7;
  id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v18,  v17,  3LL));

  __int16 v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) BAAQueue]);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_100138CD8;
  v12[3] = &unk_1008FB708;
  uint64_t v10 = *(void *)(a1 + 40);
  __int128 v14 = *(_OWORD *)(a1 + 48);
  uint64_t v15 = *(void *)(a1 + 64);
  void v12[4] = v10;
  id v13 = v3;
  id v11 = v3;
  DeviceIdentityIssueClientCertificateWithCompletion(v9, v8, v12);
}

void sub_100138CD8(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  __int16 v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    if (a2) {
      uint64_t v10 = @"YES";
    }
    else {
      uint64_t v10 = @"NO";
    }
    *(_DWORD *)buf = 138412802;
    uint64_t v24 = v10;
    __int16 v25 = 2048;
    id v26 = [v7 count];
    __int16 v27 = 2112;
    id v28 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Completed fetch of device identity for validation session {referenceKey: %@, certificates: %lu, error: %@}",  buf,  0x20u);
  }

  id v11 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) BAAQueue]);
  dispatch_assert_queue_V2(v11);

  uint64_t v12 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100138E9C;
  block[3] = &unk_1008FB6E0;
  uint64_t v22 = a2;
  __int128 v21 = *(_OWORD *)(a1 + 56);
  id v18 = v7;
  id v19 = v8;
  __int128 v16 = *(_OWORD *)(a1 + 40);
  id v13 = (id)v16;
  __int128 v20 = v16;
  id v14 = v8;
  id v15 = v7;
  dispatch_async(v12, block);
}

uint64_t sub_100138E9C(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = *(void *)(a1 + 80);
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL), *(id *)(a1 + 32));
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL), *(id *)(a1 + 40));
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_100138EF8(uint64_t a1, int a2)
{
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = @"NO";
    if (a2) {
      uint64_t v5 = @"YES";
    }
    *(_DWORD *)buf = 138412290;
    id v14 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Device identity fetch final block called {timedOut: %@}",  buf,  0xCu);
  }

  uint64_t v6 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100139044;
  block[3] = &unk_1008FB780;
  char v12 = a2;
  __int128 v11 = *(_OWORD *)(a1 + 56);
  __int128 v8 = *(_OWORD *)(a1 + 40);
  id v7 = (id)v8;
  __int128 v10 = v8;
  void block[4] = *(void *)(a1 + 32);
  dispatch_async(v6, block);
}

void sub_100139044(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 72))
  {
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 0LL;
    uint64_t v2 = *(void *)(*(void *)(a1 + 56) + 8LL);
    id v3 = *(void **)(v2 + 40);
    *(void *)(v2 + 40) = 0LL;

    NSErrorUserInfoKey v13 = NSDebugDescriptionErrorKey;
    id v14 = @"Timed out requesting device identity";
    id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v14,  &v13,  1LL));
    uint64_t v5 = objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"IDSValidationSessionInternalErrorDomain",  -11000LL,  v4));
    uint64_t v6 = *(void *)(*(void *)(a1 + 64) + 8LL);
    id v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;
  }

  if (*(void *)(a1 + 40))
  {
    __int128 v8 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queue]);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1001391B0;
    block[3] = &unk_1008FB758;
    id v10 = *(id *)(a1 + 40);
    __int128 v11 = *(_OWORD *)(a1 + 48);
    uint64_t v12 = *(void *)(a1 + 64);
    dispatch_async(v8, block);
  }

uint64_t sub_1001391B0(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void))(a1[4] + 16LL))( a1[4],  *(void *)(*(void *)(a1[5] + 8LL) + 24LL),  *(void *)(*(void *)(a1[6] + 8LL) + 40LL),  *(void *)(*(void *)(a1[7] + 8LL) + 40LL));
}

void sub_1001398C8(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___IDSDAccountController);
  uint64_t v2 = (void *)qword_1009BEB90;
  qword_1009BEB90 = (uint64_t)v1;
}

void sub_10013A1D0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_10013A1F8(id a1, IDSDAccountController *a2)
{
}

uint64_t sub_10013A200(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    state.opaque[1] = 0xAAAAAAAAAAAAAAAALL;
    v118 = _os_activity_create( (void *)&_mh_execute_header,  "ids/registration/account-controller/state",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    state.opaque[0] = 0xAAAAAAAAAAAAAAAALL;
    os_activity_scope_enter(v118, &state);
    v102 = (__CFString *)objc_claimAutoreleasedReturnValue([WeakRetained[7] iCloudSystemAccountWithError:0]);
    v103 = WeakRetained;
    v101 = (__CFString *)objc_claimAutoreleasedReturnValue([WeakRetained[7] iTunesSystemAccountWithError:0]);
    uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog sysdiagnose_oversized](&OBJC_CLASS___IMRGLog, "sysdiagnose_oversized"));
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      v123 = v102;
      __int16 v124 = 2112;
      v125 = v101;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Current system account state { iCloudAccount: %@, iTunesAccount: %@ }",  buf,  0x16u);
    }

    id v3 = (void *)objc_claimAutoreleasedReturnValue(+[FTDeviceSupport sharedInstance](&OBJC_CLASS___FTDeviceSupport, "sharedInstance"));
    v100 = (__CFString *)objc_claimAutoreleasedReturnValue([v3 deviceName]);

    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[FTDeviceSupport sharedInstance](&OBJC_CLASS___FTDeviceSupport, "sharedInstance"));
    v99 = (__CFString *)objc_claimAutoreleasedReturnValue([v4 model]);

    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[FTDeviceSupport sharedInstance](&OBJC_CLASS___FTDeviceSupport, "sharedInstance"));
    v98 = (__CFString *)objc_claimAutoreleasedReturnValue([v5 productName]);

    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[FTDeviceSupport sharedInstance](&OBJC_CLASS___FTDeviceSupport, "sharedInstance"));
    v97 = (__CFString *)objc_claimAutoreleasedReturnValue([v6 productVersion]);

    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[FTDeviceSupport sharedInstance](&OBJC_CLASS___FTDeviceSupport, "sharedInstance"));
    v96 = (void *)objc_claimAutoreleasedReturnValue([v7 productBuildVersion]);

    __int128 v8 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPushHandler sharedInstance](&OBJC_CLASS___IDSPushHandler, "sharedInstance"));
    v95 = (void *)objc_claimAutoreleasedReturnValue([v8 pushToken]);

    __int16 v9 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPushHandler sharedInstance](&OBJC_CLASS___IDSPushHandler, "sharedInstance"));
    id v10 = [v9 copyPushIdentity];

    __int128 v11 = (void *)objc_claimAutoreleasedReturnValue(+[IDSCurrentDevice sharedInstance](&OBJC_CLASS___IDSCurrentDevice, "sharedInstance"));
    v94 = (void *)objc_claimAutoreleasedReturnValue([v11 deviceIdentifier]);

    uint64_t v14 = IMGetEnvironmentName(v12, v13);
    v93 = (void *)objc_claimAutoreleasedReturnValue(v14);
    id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog sysdiagnose_oversized](&OBJC_CLASS___IMRGLog, "sysdiagnose_oversized"));
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      id v16 = (id)objc_claimAutoreleasedReturnValue([v95 debugDescription]);
      int v17 = _os_feature_enabled_impl("IDS", "PrototypeMode");
      id v18 = @"NO";
      *(_DWORD *)buf = 138414594;
      v123 = v100;
      __int16 v124 = 2112;
      if (v17) {
        id v18 = @"YES";
      }
      v125 = v99;
      __int16 v126 = 2112;
      v127 = v98;
      __int16 v128 = 2112;
      v129 = v97;
      __int16 v130 = 2112;
      uint64_t v131 = (uint64_t)v96;
      __int16 v132 = 2112;
      id v133 = v16;
      __int16 v134 = 2112;
      id v135 = v10;
      __int16 v136 = 2112;
      v137 = v94;
      __int16 v138 = 2112;
      v139 = v18;
      __int16 v140 = 2112;
      v141 = v93;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Current IDS device state { deviceName: %@, model: %@, productName: %@, productVersion: %@, build: %@, pushToken: %@, pushIdentity: %@, idsUniqueID: %@, prototypeMode: %@, environment: %@ }",  buf,  0x66u);
    }

    if (v10) {
      CFRelease(v10);
    }
    id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog sysdiagnose_oversized](&OBJC_CLASS___IMRGLog, "sysdiagnose_oversized"));
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      if (+[IDSRegistrationController isBuddyShowing](&OBJC_CLASS___IDSRegistrationController, "isBuddyShowing")) {
        __int128 v20 = @"NO";
      }
      else {
        __int128 v20 = @"YES";
      }
      __int128 v21 = (void *)objc_claimAutoreleasedReturnValue(+[IMSystemMonitor sharedInstance](&OBJC_CLASS___IMSystemMonitor, "sharedInstance"));
      else {
        uint64_t v22 = @"NO";
      }
      id v23 = (void *)objc_claimAutoreleasedReturnValue(+[IMSystemMonitor sharedInstance](&OBJC_CLASS___IMSystemMonitor, "sharedInstance"));
      else {
        uint64_t v24 = @"NO";
      }
      __int16 v25 = (void *)objc_claimAutoreleasedReturnValue(+[IMSystemMonitor sharedInstance](&OBJC_CLASS___IMSystemMonitor, "sharedInstance"));
      else {
        id v26 = @"NO";
      }
      *(_DWORD *)buf = 138413058;
      v123 = v20;
      __int16 v124 = 2112;
      v125 = v22;
      __int16 v126 = 2112;
      v127 = v24;
      __int16 v128 = 2112;
      v129 = v26;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Current IDS system monitor state { isSetup: %@, isUnderDataProtectionLock: %@, isUnderFirstDataProtectionLock: % @, systemIsShuttingDown: %@ }",  buf,  0x2Au);
    }

    __int16 v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog sysdiagnose_oversized](&OBJC_CLASS___IMRGLog, "sysdiagnose_oversized"));
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      id v28 = (void *)objc_claimAutoreleasedReturnValue( +[IDSRegistrationKeyManager sharedInstance]( &OBJC_CLASS___IDSRegistrationKeyManager,  "sharedInstance"));
      int v29 = (__CFString *)objc_claimAutoreleasedReturnValue([v28 publicMessageProtectionData]);
      *(_DWORD *)buf = 138412290;
      v123 = v29;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "Current IDS message protection state { publicMessageProtectionData: %@ }",  buf,  0xCu);
    }

    id v92 = (__CFString *)objc_claimAutoreleasedReturnValue( +[FTServerBag sharedInstanceForBagType:]( &OBJC_CLASS___FTServerBag,  "sharedInstanceForBagType:",  0LL));
    uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog sysdiagnose_oversized](&OBJC_CLASS___IMRGLog, "sysdiagnose_oversized"));
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      else {
        id v31 = @"NO";
      }
      else {
        uint64_t v32 = @"NO";
      }
      unsigned int v33 = -[__CFString isServerAvailable](v92, "isServerAvailable");
      uint64_t v34 = objc_claimAutoreleasedReturnValue(-[__CFString apsEnvironmentName](v92, "apsEnvironmentName"));
      __int16 v35 = (void *)v34;
      if (v33) {
        uint64_t v36 = @"YES";
      }
      else {
        uint64_t v36 = @"NO";
      }
      *(_DWORD *)buf = 138413314;
      v123 = v92;
      __int16 v124 = 2112;
      v125 = v31;
      __int16 v126 = 2112;
      v127 = v32;
      __int16 v128 = 2112;
      v129 = v36;
      __int16 v130 = 2112;
      uint64_t v131 = v34;
      _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "Current IDS server bag state { serverBag: %@, isLoaded: %@, isLoading: %@, isServerAvailable: %@, environment: %@ }",  buf,  0x34u);
    }

    v104 = (void *)objc_claimAutoreleasedReturnValue(+[FTServiceStatus sharedInstance](&OBJC_CLASS___FTServiceStatus, "sharedInstance"));
    int8x16_t v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog sysdiagnose_oversized](&OBJC_CLASS___IMRGLog, "sysdiagnose_oversized"));
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue(+[FTDeviceSupport sharedInstance](&OBJC_CLASS___FTDeviceSupport, "sharedInstance"));
      int8x16_t v39 = (__CFString *)objc_claimAutoreleasedReturnValue([v38 deviceRegionInfo]);
      else {
        id v40 = @"NO";
      }
      unsigned int v41 = [v104 faceTimeAudioSupported];
      unsigned int v42 = [v104 faceTimeMultiwaySupported];
      if (v41) {
        int v43 = @"YES";
      }
      else {
        int v43 = @"NO";
      }
      *(_DWORD *)buf = 138413058;
      if (v42) {
        id v44 = @"YES";
      }
      else {
        id v44 = @"NO";
      }
      v123 = v39;
      __int16 v124 = 2112;
      v125 = v40;
      __int16 v126 = 2112;
      v127 = v43;
      __int16 v128 = 2112;
      v129 = v44;
      _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "Current IDS service capability state { regionInfo: %@, iMessageSupported: %@, faceTimeAudioSupported: %@, faceTi meMultiwaySupported: %@ }",  buf,  0x2Au);
    }

    id v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog sysdiagnose_oversized](&OBJC_CLASS___IMRGLog, "sysdiagnose_oversized"));
    if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
    {
      id v46 = (void *)objc_claimAutoreleasedReturnValue( +[IDSSMSRegistrationCenter sharedInstance]( &OBJC_CLASS___IDSSMSRegistrationCenter,  "sharedInstance"));
      int v47 = (void *)objc_claimAutoreleasedReturnValue([v46 validators]);
      v48 = (__CFString *)objc_claimAutoreleasedReturnValue( +[IDSLogFormatter descriptionForArray:options:]( &OBJC_CLASS___IDSLogFormatter,  "descriptionForArray:options:",  v47,  16LL));
      *(_DWORD *)buf = 138412290;
      v123 = v48;
      _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEFAULT,  "Current IDS phone number validation state { stateMachines: %@ }",  buf,  0xCu);
    }

    NSErrorUserInfoKey v49 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog sysdiagnose_oversized](&OBJC_CLASS___IMRGLog, "sysdiagnose_oversized"));
    if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
    {
      id v50 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
      __int16 v51 = (void *)objc_claimAutoreleasedReturnValue([v50 registrationConductor]);
      uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue([v51 userStore]);
      id v53 = (__CFString *)objc_claimAutoreleasedReturnValue([v52 debugDescription]);
      *(_DWORD *)buf = 138412290;
      v123 = v53;
      _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_DEFAULT,  "Current IDS user store state { userStore: %@ }",  buf,  0xCu);
    }

    id v54 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog sysdiagnose_oversized](&OBJC_CLASS___IMRGLog, "sysdiagnose_oversized"));
    if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
    {
      id v55 = (void *)objc_claimAutoreleasedReturnValue(+[IDSCTAdapter sharedInstance](&OBJC_CLASS___IDSCTAdapter, "sharedInstance"));
      else {
        CFErrorRef v56 = @"NO";
      }
      id v57 = (void *)objc_claimAutoreleasedReturnValue(+[IDSCTAdapter sharedInstance](&OBJC_CLASS___IDSCTAdapter, "sharedInstance"));
      id v58 = (__CFString *)(id)objc_claimAutoreleasedReturnValue([v57 currentSIMsWithError:0]);
      id v59 = (void *)objc_claimAutoreleasedReturnValue(+[FTUserConfiguration sharedInstance](&OBJC_CLASS___FTUserConfiguration, "sharedInstance"));
      uint64_t v60 = (void *)objc_claimAutoreleasedReturnValue([v59 selectedPhoneNumberRegistrationSubscriptionLabels]);
      unsigned int v61 = (__CFString *)objc_claimAutoreleasedReturnValue( +[IDSLogFormatter descriptionForArray:options:]( &OBJC_CLASS___IDSLogFormatter,  "descriptionForArray:options:",  v60,  0LL));
      *(_DWORD *)buf = 138412802;
      v123 = v56;
      __int16 v124 = 2112;
      v125 = v58;
      __int16 v126 = 2112;
      v127 = v61;
      _os_log_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_DEFAULT,  "Current IDS phone profile state { isPNRSupported: %@, SIMs: %@, selectedTelephonyLabelID: %@ }",  buf,  0x20u);
    }

    uint64_t v62 = (void *)objc_claimAutoreleasedReturnValue([v103 accounts]);
    v63 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog sysdiagnose_oversized](&OBJC_CLASS___IMRGLog, "sysdiagnose_oversized"));
    if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "Current IDS accounts list:", buf, 2u);
    }

    __int128 v115 = 0u;
    __int128 v116 = 0u;
    __int128 v113 = 0u;
    __int128 v114 = 0u;
    id v64 = v62;
    id v65 = [v64 countByEnumeratingWithState:&v113 objects:v121 count:16];
    if (v65)
    {
      uint64_t v66 = *(void *)v114;
      do
      {
        for (i = 0LL; i != v65; i = (char *)i + 1)
        {
          if (*(void *)v114 != v66) {
            objc_enumerationMutation(v64);
          }
          id v68 = *(void **)(*((void *)&v113 + 1) + 8LL * (void)i);
          v69 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog sysdiagnose_oversized](&OBJC_CLASS___IMRGLog, "sysdiagnose_oversized"));
          if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v70 = (__CFString *)objc_claimAutoreleasedReturnValue([v68 debugDescription]);
            *(_DWORD *)buf = 138412290;
            v123 = v70;
            _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
          }
        }

        id v65 = [v64 countByEnumeratingWithState:&v113 objects:v121 count:16];
      }

      while (v65);
    }

    v71 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog sysdiagnose_oversized](&OBJC_CLASS___IMRGLog, "sysdiagnose_oversized"));
    if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v71,  OS_LOG_TYPE_DEFAULT,  "Current IDS account info dictionaries:",  buf,  2u);
    }

    __int128 v111 = 0u;
    __int128 v112 = 0u;
    __int128 v109 = 0u;
    __int128 v110 = 0u;
    id v72 = v64;
    id v73 = [v72 countByEnumeratingWithState:&v109 objects:v120 count:16];
    if (v73)
    {
      uint64_t v74 = *(void *)v110;
      do
      {
        for (j = 0LL; j != v73; j = (char *)j + 1)
        {
          if (*(void *)v110 != v74) {
            objc_enumerationMutation(v72);
          }
          __int128 v76 = *(void **)(*((void *)&v109 + 1) + 8LL * (void)j);
          __int128 v77 = (void *)objc_claimAutoreleasedReturnValue([v76 service]);
          __int128 v78 = (void *)objc_claimAutoreleasedReturnValue([v77 pushTopic]);
          unsigned __int8 v79 = [&off_1009487A8 containsObject:v78];

          if ((v79 & 1) != 0)
          {
            __int128 v80 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog sysdiagnose_oversized](&OBJC_CLASS___IMRGLog, "sysdiagnose_oversized"));
            if (os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT))
            {
              __int128 v81 = (__CFString *)objc_claimAutoreleasedReturnValue([v76 accountInfo]);
              *(_DWORD *)buf = 138412290;
              v123 = v81;
              _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
            }
          }
        }

        id v73 = [v72 countByEnumeratingWithState:&v109 objects:v120 count:16];
      }

      while (v73);
    }

    __int128 v107 = 0u;
    __int128 v108 = 0u;
    __int128 v105 = 0u;
    __int128 v106 = 0u;
    id v82 = v72;
    id v83 = [v82 countByEnumeratingWithState:&v105 objects:v119 count:16];
    if (v83)
    {
      uint64_t v84 = *(void *)v106;
      do
      {
        for (k = 0LL; k != v83; k = (char *)k + 1)
        {
          if (*(void *)v106 != v84) {
            objc_enumerationMutation(v82);
          }
          v86 = *(void **)(*((void *)&v105 + 1) + 8LL * (void)k);
          v87 = (void *)objc_claimAutoreleasedReturnValue([v86 service]);
          v88 = (void *)objc_claimAutoreleasedReturnValue([v87 pushTopic]);
          unsigned __int8 v89 = [&off_1009487C0 containsObject:v88];

          if ((v89 & 1) != 0)
          {
            id v90 = (void *)objc_claimAutoreleasedReturnValue([v86 dependentRegistrations]);
            [v90 enumerateObjectsUsingBlock:&stru_1008FB868];
          }
        }

        id v83 = [v82 countByEnumeratingWithState:&v105 objects:v119 count:16];
      }

      while (v83);
    }

    os_activity_scope_leave(&state);
    cut_arc_os_release(&v118);

    id WeakRetained = v103;
  }

  return 0LL;
}

void sub_10013AFB0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, os_activity_scope_state_s state,char a51)
{
}

void sub_10013B094(id a1, id a2, unint64_t a3, BOOL *a4)
{
  uint64_t v4 = IDSDevicePropertyService;
  id v5 = a2;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKey:v4]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKey:IDSDevicePropertyPushToken]);
  __int128 v8 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKey:IDSDevicePropertyName]);
  __int16 v9 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKey:IDSDevicePropertyHardwareVersion]);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKey:IDSDevicePropertyPrivateDeviceData]);
  __int128 v11 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKey:IDSDevicePropertySubServices]);
  uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKey:IDSDevicePropertyIdentities]);
  id v23 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKey:IDSDevicePropertyLinkedUserURIs]);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKey:IDSDevicePropertyClientData]);
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKey:_IDSIdentityClientDataMessageProtectionIdentityKey]);
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKey:IDSDevicePropertyIsHSATrustedDevice]);

  id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog sysdiagnose_oversized](&OBJC_CLASS___IMRGLog, "sysdiagnose_oversized"));
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v22 = v11;
    id v16 = v9;
    int v17 = v8;
    id v18 = v6;
    id v19 = (void *)objc_claimAutoreleasedReturnValue([v7 debugDescription]);
    __int128 v21 = v7;
    __int128 v20 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKey:IDSPrivateDeviceDataUniqueID]);
    *(_DWORD *)buf = 138415106;
    id v26 = v17;
    __int16 v27 = 2112;
    id v28 = v18;
    __int16 v29 = 2112;
    uint64_t v30 = v16;
    __int16 v31 = 2112;
    uint64_t v32 = v19;
    __int16 v33 = 2112;
    uint64_t v34 = v20;
    __int16 v35 = 2112;
    uint64_t v36 = v23;
    __int16 v37 = 2112;
    uint64_t v38 = v10;
    __int16 v39 = 2112;
    id v40 = v22;
    __int16 v41 = 2112;
    unsigned int v42 = v24;
    __int16 v43 = 2112;
    id v44 = v12;
    __int16 v45 = 2112;
    id v46 = v13;
    __int16 v47 = 2112;
    v48 = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "  * Device Name: %@    Service: %@     Hardware: %@    Token: %@   Unique ID: %@   Linked URIs: %@   Device Data: %@   Sub-services: %@   Identities: %@   Client data: %@   public key: %@ HSA trusted: %@",  buf,  0x7Au);

    id v7 = v21;
    uint64_t v6 = v18;
    __int128 v8 = v17;
    __int16 v9 = v16;
    __int128 v11 = v22;
  }
}

void sub_10013B614(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v5 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Hard deregister complete, clearing accounts and shutting down daemon",  v5,  2u);
  }

  [*(id *)(a1 + 32) _persistAccounts:0];
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userDefaults]);
  [v3 synchronizeAppID:@"com.apple.identityservicesd"];

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
  [v4 shutdown];
}

id sub_10013C06C(uint64_t a1)
{
  id v1 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _inUseUsernames]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 allObjects]);

  return v2;
}

id sub_10013C0A8(uint64_t a1)
{
  id v1 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _inUseProfileIDs]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 allObjects]);

  return v2;
}

void sub_10013C690(id a1, id a2)
{
  id v2 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 uniqueID]);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 138412290;
    id v7 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Removing linked account: %@",  (uint8_t *)&v6,  0xCu);
  }

  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
  [v5 removeAccount:v2];
}

id sub_1001415B0(id a1, NSString *a2)
{
  id v2 = a2;
  if (-[NSString isEqualToString:](v2, "isEqualToString:", kIDSServiceDefaultsSentinelSelfAlias)) {
    id v3 = 0LL;
  }
  else {
    id v3 = -[IDSURI initWithPrefixedURI:](objc_alloc(&OBJC_CLASS___IDSURI), "initWithPrefixedURI:", v2);
  }

  return v3;
}

void sub_1001417D0(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  [v3 addPrimaryAccount:v4];
  id v5 = *(void **)(a1 + 32);
  id v6 = (id)objc_claimAutoreleasedReturnValue([v4 uniqueID]);

  [v5 enablePrimaryAccountWithUniqueID:v6];
}

LABEL_47:
          uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDAccountController accountsOnService:withType:]( self,  "accountsOnService:withType:",  v21,  v17));
          __int16 v33 = [v32 _copyForEnumerating];

          v117 = 0u;
          v118 = 0u;
          __int128 v115 = 0u;
          __int128 v116 = 0u;
          uint64_t v34 = v33;
          __int16 v35 = [v34 countByEnumeratingWithState:&v115 objects:v126 count:16];
          if (!v35)
          {

            __int128 v110 = 0LL;
            self = v100;
            id v54 = v107;
LABEL_85:
            id v58 = objc_autoreleasePoolPush();
            id v59 = objc_alloc(&OBJC_CLASS___IDSDAccount);
            uint64_t v60 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringGUID](&OBJC_CLASS___NSString, "stringGUID"));
            unsigned int v61 = (void *)objc_claimAutoreleasedReturnValue([v4 accountInfo]);
            uint64_t v62 = (void *)objc_claimAutoreleasedReturnValue([v4 uniqueID]);
            v63 = -[IDSDAccount initAdHocAccountWithLoginID:service:uniqueID:accountType:accountConfig:primaryAccount:]( v59,  "initAdHocAccountWithLoginID:service:uniqueID:accountType:accountConfig:primaryAccount:",  v54,  v21,  v60,  v108,  v61,  v62);

            id v6 = &IMInsertBoolsToXPCDictionary_ptr;
            id v64 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
            if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
            {
              id v65 = (uint64_t (*__ptr32 *)(int, int, id))objc_claimAutoreleasedReturnValue([v63 smallDescription]);
              *(_DWORD *)buf = 138412290;
              __int16 v128 = v65;
              _os_log_impl( (void *)&_mh_execute_header,  v64,  OS_LOG_TYPE_DEFAULT,  "  => Created ad hoc account %@",  buf,  0xCu);
            }

            __int16 v27 = (os_log_s *)v63;
            -[IDSDAccountController _addAccount:](self, "_addAccount:", v63);
            objc_autoreleasePoolPop(v58);
            int v17 = v108;
            goto LABEL_93;
          }

          uint64_t v36 = v35;
          v98 = v21;
          __int16 v37 = 0LL;
          __int128 v110 = 0LL;
          uint64_t v38 = 0;
          __int16 v39 = *(void *)v116;
          id obj = v34;
          do
          {
            for (j = 0LL; j != v36; j = (char *)j + 1)
            {
              if (*(void *)v116 != v39) {
                objc_enumerationMutation(obj);
              }
              __int16 v41 = *(void **)(*((void *)&v115 + 1) + 8LL * (void)j);
              if ((_DWORD)v17 != 3 && (_DWORD)v17)
              {
                __int16 v43 = 1;
                if (!v37) {
                  goto LABEL_61;
                }
              }

              else
              {
                __int16 v43 = [v42 isEqualToString:v106];

                if (!v37) {
                  goto LABEL_61;
                }
              }

              if (v43)
              {
                id v44 = (os_log_s *)objc_claimAutoreleasedReturnValue([v6[440] registration]);
                if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
                {
                  __int16 v45 = (uint64_t (*__ptr32 *)(int, int, id))objc_claimAutoreleasedReturnValue([v41 smallDescription]);
                  *(_DWORD *)buf = 138412290;
                  __int16 v128 = v45;
                  _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEFAULT,  "  => Found **extra** adhoc account %@, deleting...",  buf,  0xCu);

                  id v6 = &IMInsertBoolsToXPCDictionary_ptr;
                }

                uint64_t v38 = 1;
              }
      }
    }
  }
}
            }

            __int16 v33 = [v113 countByEnumeratingWithState:&v117 objects:v127 count:16];
          }

          while (v33);
        }

        __int128 v21 = v108 + 1;
      }

      while ((id)(v108 + 1) != v106);
      __int128 v106 = [obj countByEnumeratingWithState:&v121 objects:v133 count:16];
    }

    while (v106);
  }

  uint64_t v60 = *(void **)(v116 + 32);
  unsigned int v61 = *(void *)(v116 + 56);
  uint64_t v62 = (void *)objc_claimAutoreleasedReturnValue([v102 prefixedURI]);
  v63 = *(void *)(v116 + 64);
  id v64 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v116 + 72) objectForKey:kIDSQRAllocateKey_GroupID]);
  [v60 _storeMappingFromPushTokenToURIs:v61 fromID:v62 service:v103 cert:v63 forGroup:v64];

  if (-[NSMutableArray count](v112, "count"))
  {
    id v65 = *(void **)(v116 + 88);
    if (v65)
    {
      uint64_t v66 = v65;
      if ((unint64_t)[v66 length] > 0x1F)
      {
        id v72 = malloc(0x20uLL);
        v88 = v66;
        unsigned __int8 v89 = [v88 bytes];
        id v90 = v89[1];
        void *v72 = *v89;
        v72[1] = v90;
        __int16 v91 = *((unsigned int *)v72 + 4);
        id v92 = malloc(v91);
        *((void *)v72 + 3) = v92;
        memcpy(v92, (char *)[v88 bytes] + 32, v91);
      }

      else
      {
        id v67 = OSLogHandleForTransportCategory("QRAllocator");
        id v68 = (os_log_s *)objc_claimAutoreleasedReturnValue(v67);
        if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
        {
          v69 = [v66 length];
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)v129 = v69;
          *(_WORD *)&v129[4] = 1024;
          *(_DWORD *)&v129[6] = 32;
          _os_log_impl( (void *)&_mh_execute_header,  v68,  OS_LOG_TYPE_DEFAULT,  "Failed type check! {key: %@, class: %@}",  buf,  0xEu);
        }

        v71 = os_log_shim_legacy_logging_enabled(v70);
        if ((_DWORD)v71)
        {
          if (_IDSShouldLogTransport(v71))
          {
            v95 = [v66 length];
            _IDSLogTransport( @"QRAllocator",  @"IDS",  @"deserializeQRConnectStatus failed, bad length: %u %u");
            if (_IDSShouldLog(0LL, @"QRAllocator"))
            {
              objc_msgSend(v66, "length", v95, 32);
              _IDSLogV( 0LL,  @"IDSFoundation",  @"QRAllocator",  @"deserializeQRConnectStatus failed, bad length: %u %u");
            }
          }
        }

        id v72 = 0LL;
      }
    }

    else
    {
      id v72 = 0LL;
    }

    LODWORD(v97) = 0;
    v93 =  objc_msgSend( *(id *)(v116 + 32),  "_setupAllocation:fromURI:sessionID:isSessionIDRemoteDeviceID:options:prevConnectStatus:requestUUID:connect ReadyHandler:withPreferredLocalInterface:",  v112,  *(void *)(v116 + 96),  *(void *)(v116 + 80),  *(unsigned __int8 *)(v116 + 121),  *(void *)(v116 + 72),  v72,  *(void *)(v116 + 104),  *(void *)(v116 + 112),  v97,  v98);
  }

  else
  {
    id v73 = OSLogHandleForTransportCategory("QRAllocator");
    uint64_t v74 = (os_log_s *)objc_claimAutoreleasedReturnValue(v73);
    if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
    {
      __int128 v75 = *(void *)(v116 + 56);
      *(_DWORD *)buf = 138412546;
      *(void *)v129 = v75;
      *(_WORD *)&v129[8] = 2112;
      *(void *)__int16 v130 = v101;
      _os_log_impl( (void *)&_mh_execute_header,  v74,  OS_LOG_TYPE_DEFAULT,  "could not look up recipient's push tokens, ID: %@, errors: %@ ",  buf,  0x16u);
    }

    __int128 v77 = os_log_shim_legacy_logging_enabled(v76);
    if ((_DWORD)v77)
    {
      if (_IDSShouldLogTransport(v77))
      {
        v94 = *(void **)(v116 + 56);
        v96 = v101;
        _IDSLogTransport( @"QRAllocator",  @"IDS",  @"could not look up recipient's push tokens, ID: %@, errors: %@ ");
        if (_IDSShouldLog(0LL, @"QRAllocator"))
        {
          v94 = *(void **)(v116 + 56);
          v96 = v101;
          _IDSLogV( 0LL,  @"IDSFoundation",  @"QRAllocator",  @"could not look up recipient's push tokens, ID: %@, errors: %@ ");
        }
      }
    }

    if (*(void *)(v116 + 48))
    {
      __int128 v78 = OSLogHandleForTransportCategory("QRAllocator");
      unsigned __int8 v79 = (os_log_s *)objc_claimAutoreleasedReturnValue(v78);
      if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
      {
        __int128 v80 = *(void *)(v116 + 48);
        *(_DWORD *)buf = 138412290;
        *(void *)v129 = v80;
        _os_log_impl( (void *)&_mh_execute_header,  v79,  OS_LOG_TYPE_DEFAULT,  "Missing expected default paired device's push token %@",  buf,  0xCu);
      }

      id v82 = os_log_shim_legacy_logging_enabled(v81);
      if ((_DWORD)v82)
      {
        if (_IDSShouldLogTransport(v82))
        {
          v94 = *(void **)(v116 + 48);
          _IDSLogTransport( @"QRAllocator",  @"IDS",  @"Missing expected default paired device's push token %@");
          if (_IDSShouldLog(0LL, @"QRAllocator"))
          {
            v94 = *(void **)(v116 + 48);
            _IDSLogV( 0LL,  @"IDSFoundation",  @"QRAllocator",  @"Missing expected default paired device's push token %@");
          }
        }
      }
    }

    if (*(void *)(v116 + 112))
    {
      id v83 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObject:forKey:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObject:forKey:",  @"No recipient is found.",  NSLocalizedDescriptionKey));
      uint64_t v84 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"QRAllocator",  7001LL,  v83));

      (*(void (**)(void, void *, void, uint64_t))(*(void *)(v116 + 112) + 16LL))( *(void *)(v116 + 112),  v84,  0LL,  v85);
    }

    v86 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v116 + 32), "_findSessionWithID:", *(void *)(v116 + 80), v94, v96, v97, v98));
    v87 = v86;
    if (v86 && *(_BYTE *)(v116 + 120)) {
      [v86 setHasPendingAllocation:0 forIDSSession:*(void *)(v116 + 80)];
    }
  }
}

          id v19 = 0LL;
          int v17 = 0LL;
          id v10 = v34;
          goto LABEL_18;
        }
      }

      id v19 = 0LL;
      int v17 = 0LL;
      id v10 = v37;
      goto LABEL_18;
    }

    __int128 v21 = __CocoaSet.Iterator.next()(v8);
    if (!v21) {
      goto LABEL_57;
    }
    uint64_t v22 = v21;
    __int16 v51 = v21;
    id v23 = sub_10041D3C4(0LL, (unint64_t *)&unk_1009BC270, &OBJC_CLASS___IDSURI_ptr);
    swift_unknownObjectRetain(v22, v24);
    swift_dynamicCast(&v52, &v51, (char *)&type metadata for Swift.AnyObject + 8, v23, 7LL);
    id v19 = v52;
    swift_unknownObjectRelease(v22, v25);
    if (!v19)
    {
LABEL_56:
      id v3 = v53;
LABEL_57:
      sub_10041D3BC(v3);
      return (void *)v2;
    }

          id v19 = 0LL;
          int v17 = 0LL;
          id v10 = v34;
          goto LABEL_18;
        }
      }

      id v19 = 0LL;
      int v17 = 0LL;
      id v10 = v37;
      goto LABEL_18;
    }

    __int128 v21 = __CocoaSet.Iterator.next()(v8);
    if (!v21) {
      goto LABEL_57;
    }
    uint64_t v22 = v21;
    __int16 v51 = v21;
    id v23 = type metadata accessor for IDSGroupEncryptionControllerMember();
    swift_unknownObjectRetain(v22, v24);
    swift_dynamicCast(&v52, &v51, (char *)&type metadata for Swift.AnyObject + 8, v23, 7LL);
    id v19 = v52;
    swift_unknownObjectRelease(v22, v25);
    if (!v19)
    {
LABEL_56:
      id v3 = v53;
LABEL_57:
      sub_10041D3BC(v3);
      return (void *)v2;
    }

          id v19 = 0LL;
          int v17 = 0LL;
          id v10 = v34;
          goto LABEL_18;
        }
      }

      id v19 = 0LL;
      int v17 = 0LL;
      id v10 = v37;
      goto LABEL_18;
    }

    __int128 v21 = __CocoaSet.Iterator.next()(v8);
    if (!v21) {
      goto LABEL_57;
    }
    uint64_t v22 = v21;
    __int16 v51 = v21;
    id v23 = sub_10041D3C4(0LL, (unint64_t *)&qword_1009BBE30, &OBJC_CLASS___IDSPushToken_ptr);
    swift_unknownObjectRetain(v22, v24);
    swift_dynamicCast(&v52, &v51, (char *)&type metadata for Swift.AnyObject + 8, v23, 7LL);
    id v19 = v52;
    swift_unknownObjectRelease(v22, v25);
    if (!v19)
    {
LABEL_56:
      id v3 = v53;
LABEL_57:
      sub_10041D3BC(v3);
      return (void *)v2;
    }

        v179 = (v80 - 1) & v80;
        v180 = v81;
        __int128 v78 = __clz(__rbit64(v80)) + (v81 << 6);
      }

      id v83 = (uint64_t *)(v73[6] + 16 * v78);
      uint64_t v84 = *v83;
      v85 = (void *)v83[1];
      uint64_t v36 = *(void *)(v73[7] + 8 * v78);
      v203._countAndFlagsBits = 0LL;
      v203._object = (void *)0xE000000000000000LL;
      swift_bridgeObjectRetain(v85);
      swift_bridgeObjectRetain(v36);
      _StringGuts.grow(_:)(25LL);
      swift_bridgeObjectRelease(v203._object);
      strcpy((char *)&v203, "---------- ");
      HIDWORD(v203._object) = -352321536;
      v86._countAndFlagsBits = v84;
      v86._object = v85;
      String.append(_:)(v86);
      swift_bridgeObjectRelease(v85);
      v87._countAndFlagsBits = 0x2D2D2D2D2D2D2D20LL;
      v87._object = (void *)0xEC0000000A2D2D2DLL;
      String.append(_:)(v87);
      object = (uint64_t)v203._object;
      String.append(_:)(v203);
      swift_bridgeObjectRelease(object);
      if ((unint64_t)v36 >> 62)
      {
        if (v36 < 0) {
          v171 = v36;
        }
        else {
          v171 = v36 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(v36);
        v88 = _CocoaArrayWrapper.endIndex.getter(v171);
        swift_bridgeObjectRelease(v36);
        if (!v88) {
          goto LABEL_31;
        }
      }

      else
      {
        v88 = *(void *)((v36 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        if (!v88) {
          goto LABEL_31;
        }
      }

      if (v88 < 1)
      {
        __break(1u);
        goto LABEL_101;
      }

      a3 = 0LL;
      v196 = v36 & 0xC000000000000001LL;
      v197 = v88;
      v198 = v36;
      do
      {
        if (v196)
        {
          v94 = specialized _ArrayBuffer._getElementSlowPath(_:)(a3, v36);
        }

        else
        {
          v94 = *(void *)(v36 + 8 * a3 + 32);
          swift_retain(v94);
        }

        v95._countAndFlagsBits = 0xD00000000000001FLL;
        v95._object = v194;
        String.append(_:)(v95);
        strcpy((char *)&v203, "keyID: ");
        v203._object = (void *)0xE700000000000000LL;
        v96 = sub_100446490();
        v98 = v97;
        v99 = Data.base64EncodedString(options:)(0LL);
        sub_100402A84(v96, v98);
        String.append(_:)(v99);
        swift_bridgeObjectRelease(v99._object);
        v100._countAndFlagsBits = 10LL;
        v100._object = (void *)0xE100000000000000LL;
        String.append(_:)(v100);
        v101 = v203._object;
        String.append(_:)(v203);
        swift_bridgeObjectRelease(v101);
        v203._countAndFlagsBits = 0LL;
        v203._object = (void *)0xE000000000000000LL;
        _StringGuts.grow(_:)(23LL);
        swift_bridgeObjectRelease(v203._object);
        v203._countAndFlagsBits = 0xD000000000000014LL;
        v203._object = v193;
        v102 = sub_10044782C();
        v103 = (v102 & 1) == 0;
        if ((v102 & 1) != 0) {
          v104 = 1702195828LL;
        }
        else {
          v104 = 0x65736C6166LL;
        }
        if (v103) {
          __int128 v105 = 0xE500000000000000LL;
        }
        else {
          __int128 v105 = 0xE400000000000000LL;
        }
        __int128 v106 = v105;
        String.append(_:)(*(Swift::String *)&v104);
        swift_bridgeObjectRelease(v105);
        v107._countAndFlagsBits = 10LL;
        v107._object = (void *)0xE100000000000000LL;
        String.append(_:)(v107);
        __int128 v108 = v203._object;
        String.append(_:)(v203);
        swift_bridgeObjectRelease(v108);
        strcpy((char *)&v203, "createdAt: ");
        HIDWORD(v203._object) = -352321536;
        sub_100447148(v35);
        object = sub_10040A2B0( &qword_1009B9D98,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
        __int128 v109 = v201;
        v110._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v201, object);
        __int128 v111 = v110._object;
        String.append(_:)(v110);
        swift_bridgeObjectRelease(v111);
        v199 = *(void (**)(char *, uint64_t))(v200 + 8);
        v199(v35, v109);
        v112._countAndFlagsBits = 10LL;
        v112._object = (void *)0xE100000000000000LL;
        String.append(_:)(v112);
        __int128 v113 = v203._object;
        String.append(_:)(v203);
        swift_bridgeObjectRelease(v113);
        if ((sub_10044782C() & 1) != 0)
        {
          v203._countAndFlagsBits = 0LL;
          v203._object = (void *)0xE000000000000000LL;
          _StringGuts.grow(_:)(20LL);
          swift_bridgeObjectRelease(v203._object);
          v203._countAndFlagsBits = 0xD000000000000011LL;
          v203._object = v191;
          __int128 v114 = sub_1004481E0();
          __int128 v115 = (v114 & 1) == 0;
          if ((v114 & 1) != 0) {
            __int128 v116 = 1702195828LL;
          }
          else {
            __int128 v116 = 0x65736C6166LL;
          }
          if (v115) {
            v117 = 0xE500000000000000LL;
          }
          else {
            v117 = 0xE400000000000000LL;
          }
          v118 = v117;
          String.append(_:)(*(Swift::String *)&v116);
          swift_bridgeObjectRelease(v117);
          v119._countAndFlagsBits = 10LL;
          v119._object = (void *)0xE100000000000000LL;
          String.append(_:)(v119);
          v120 = v203._object;
          String.append(_:)(v203);
          swift_bridgeObjectRelease(v120);
          v121 = sub_100448B80();
          if (v122)
          {
            v123 = v121;
            __int16 v124 = v122;
            v125 = v35;
            __int16 v126 = v188;
            sub_100448EF8(v188);
            v127 = v126;
            if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v200 + 48))(v126, 1LL, v201) == 1)
            {
              swift_bridgeObjectRelease(v124);
              sub_10040A274((uint64_t)v126, &qword_1009BC130);
            }

            else
            {
              __int16 v128 = v201;
              v129 = v183;
              (*(void (**)(char *, void *, uint64_t))(v200 + 32))(v183, v127, v201);
              strcpy((char *)&v203, "sentGUID: ");
              BYTE3(v203._object) = 0;
              HIDWORD(v203._object) = -369098752;
              v130._countAndFlagsBits = v123;
              v130._object = v124;
              String.append(_:)(v130);
              swift_bridgeObjectRelease(v124);
              v131._countAndFlagsBits = 10LL;
              v131._object = (void *)0xE100000000000000LL;
              String.append(_:)(v131);
              __int16 v132 = v203._object;
              String.append(_:)(v203);
              swift_bridgeObjectRelease(v132);
              strcpy((char *)&v203, "sentAt: ");
              BYTE1(v203._object) = 0;
              WORD1(v203._object) = 0;
              HIDWORD(v203._object) = -402653184;
              v133._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v128, object);
              __int16 v134 = v133._object;
              String.append(_:)(v133);
              swift_bridgeObjectRelease(v134);
              v135._countAndFlagsBits = 10LL;
              v135._object = (void *)0xE100000000000000LL;
              String.append(_:)(v135);
              __int16 v136 = v203._object;
              String.append(_:)(v203);
              swift_bridgeObjectRelease(v136);
              v199(v129, v128);
            }

            __int16 v35 = (char *)v125;
          }

          v203._countAndFlagsBits = 0LL;
          v203._object = (void *)0xE000000000000000LL;
          _StringGuts.grow(_:)(25LL);
          swift_bridgeObjectRelease(v203._object);
          v203._countAndFlagsBits = 0xD000000000000016LL;
          v203._object = v190;
          v137 = sub_100447A94();
          __int16 v138 = (v137 & 1) == 0;
          if ((v137 & 1) != 0) {
            v139 = 1702195828LL;
          }
          else {
            v139 = 0x65736C6166LL;
          }
          if (v138) {
            __int16 v140 = 0xE500000000000000LL;
          }
          else {
            __int16 v140 = 0xE400000000000000LL;
          }
          v141 = v140;
          String.append(_:)(*(Swift::String *)&v139);
          swift_bridgeObjectRelease(v140);
          v142._countAndFlagsBits = 10LL;
          v142._object = (void *)0xE100000000000000LL;
          String.append(_:)(v142);
          v143 = v203._object;
          String.append(_:)(v203);
          swift_bridgeObjectRelease(v143);
          if ((sub_100447A94() & 1) != 0)
          {
            v144 = v187;
            sub_100447DA4(v187);
            if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v200 + 48))(v144, 1LL, v201) == 1)
            {
              sub_10040A274((uint64_t)v144, &qword_1009BC130);
            }

            else
            {
              v145 = v201;
              v146 = v182;
              (*(void (**)(char *, void *, uint64_t))(v200 + 32))(v182, v144, v201);
              v203._countAndFlagsBits = 0LL;
              v203._object = (void *)0xE000000000000000LL;
              _StringGuts.grow(_:)(25LL);
              swift_bridgeObjectRelease(v203._object);
              v203._countAndFlagsBits = 0xD000000000000016LL;
              v203._object = v181;
              v147._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v145, object);
              v148 = v147._object;
              String.append(_:)(v147);
              swift_bridgeObjectRelease(v148);
              v149._countAndFlagsBits = 10LL;
              v149._object = (void *)0xE100000000000000LL;
              String.append(_:)(v149);
              v150 = v203._object;
              String.append(_:)(v203);
              swift_bridgeObjectRelease(v150);
              v199(v146, v145);
            }
          }

          v151 = v192;
          sub_100449298(v192);
          v152 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v200 + 48);
          if (v152(v151, 1LL, v201) == 1)
          {
            sub_10040A274((uint64_t)v151, &qword_1009BC130);
          }

          else
          {
            v153 = v201;
            v154 = v185;
            (*(void (**)(char *, void *, uint64_t))(v200 + 32))(v185, v151, v201);
            v203._countAndFlagsBits = 0LL;
            v203._object = (void *)0xE000000000000000LL;
            _StringGuts.grow(_:)(17LL);
            swift_bridgeObjectRelease(v203._object);
            strcpy((char *)&v203, "lastActiveAt: ");
            HIBYTE(v203._object) = -18;
            v155._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v153, object);
            v156 = v155._object;
            String.append(_:)(v155);
            swift_bridgeObjectRelease(v156);
            v157._countAndFlagsBits = 10LL;
            v157._object = (void *)0xE100000000000000LL;
            String.append(_:)(v157);
            v158 = v203._object;
            String.append(_:)(v203);
            swift_bridgeObjectRelease(v158);
            v199(v154, v153);
          }

          sub_100449638(v195);
          v159 = v195;
          if (v152(v195, 1LL, v201) == 1)
          {
            sub_10040A274((uint64_t)v159, &qword_1009BC130);
          }

          else
          {
            v160 = v201;
            v161 = v186;
            (*(void (**)(char *, void *, uint64_t))(v200 + 32))(v186, v159, v201);
            v203._countAndFlagsBits = 0LL;
            v203._object = (void *)0xE000000000000000LL;
            _StringGuts.grow(_:)(20LL);
            swift_bridgeObjectRelease(v203._object);
            v203._countAndFlagsBits = 0xD000000000000011LL;
            v203._object = v184;
            v162._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v160, object);
            v163 = v162._object;
            String.append(_:)(v162);
            swift_bridgeObjectRelease(v163);
            v164._countAndFlagsBits = 10LL;
            v164._object = (void *)0xE100000000000000LL;
            String.append(_:)(v164);
            v165 = v203._object;
            String.append(_:)(v203);
            swift_bridgeObjectRelease(v165);
            v199(v161, v160);
          }

          __int16 v91 = (void *)0xE000000000000000LL;
          v203._countAndFlagsBits = 0LL;
          v203._object = (void *)0xE000000000000000LL;
          _StringGuts.grow(_:)(23LL);
          swift_bridgeObjectRelease(v203._object);
          v203._countAndFlagsBits = 0xD000000000000013LL;
          v203._object = v189;
          v166 = sub_100446EB8();
          v168 = v167;
          isa = Data._bridgeToObjectiveC()().super.isa;
          sub_100402A84(v166, v168);
          v170 = -[objc_class __imHexString](isa, "__imHexString");

          if (v170)
          {
            unsigned __int8 v89 = static String._unconditionallyBridgeFromObjectiveC(_:)(v170);
            __int16 v91 = v90;
          }

          else
          {
            unsigned __int8 v89 = 0LL;
          }

          v92._countAndFlagsBits = v89;
          v92._object = v91;
          String.append(_:)(v92);
          swift_bridgeObjectRelease(v91);
          v93._countAndFlagsBits = 2601LL;
          v93._object = (void *)0xE200000000000000LL;
          String.append(_:)(v93);
          object = (uint64_t)v203._object;
          String.append(_:)(v203);
          swift_bridgeObjectRelease(object);
        }

        ++a3;
        swift_release(v94);
        uint64_t v36 = v198;
      }

      while (v197 != a3);
LABEL_31:
      swift_bridgeObjectRelease(v36);
      id v73 = v178;
      id v72 = v180;
      __int128 v77 = v179;
    }
  }

  v177 = 0LL;
  v198 = v36 & 0xC000000000000001LL;
  v178 = &_swiftEmptyDictionarySingleton;
  uint64_t v38 = 4LL;
  v196 = a3;
  v197 = v36;
  v194 = (void *)v37;
  while (1)
  {
    id v44 = v38 - 4;
    if (v198)
    {
      __int16 v41 = specialized _ArrayBuffer._getElementSlowPath(_:)(v38 - 4, v36);
      __int16 v43 = (void (*)(char *, uint64_t))(v38 - 3);
      if (__OFADD__(v44, 1LL)) {
        goto LABEL_101;
      }
    }

    else
    {
      __int16 v41 = *(void *)(v36 + 8 * v38);
      swift_retain(v41);
      __int16 v43 = (void (*)(char *, uint64_t))(v38 - 3);
      if (__OFADD__(v44, 1LL))
      {
LABEL_101:
        __break(1u);
LABEL_102:
        __break(1u);
LABEL_103:
        __break(1u);
LABEL_104:
        __break(1u);
        goto LABEL_105;
      }
    }

    if (!a3) {
      break;
    }
    __int16 v45 = sub_1004469B0();
    __int16 v47 = v46;
    v48 = sub_1004F7CD4(v45, v46, a3);
    swift_bridgeObjectRelease(v47);
    if ((v48 & 1) != 0) {
      break;
    }
    NSErrorUserInfoKey v49 = sub_100446C34();
    __int16 v51 = v50;
    object = sub_1004F7CD4(v49, v50, a3);
    swift_bridgeObjectRelease(v51);
    if ((object & 1) != 0) {
      break;
    }
LABEL_6:
    swift_release(v41);
    ++v38;
  }

  v199 = v43;
  v203._countAndFlagsBits = sub_1004469B0();
  v203._object = v52;
  v53._countAndFlagsBits = 2108704LL;
  v53._object = (void *)0xE300000000000000LL;
  String.append(_:)(v53);
  v54._countAndFlagsBits = sub_100446C34();
  object = (uint64_t)v54._object;
  String.append(_:)(v54);
  swift_bridgeObjectRelease(object);
  id v55 = v41;
  countAndFlagsBits = v203._countAndFlagsBits;
  id v57 = v203._object;
  id v58 = v55;
  swift_retain(v55);
  sub_100482178((uint64_t)v177, 0LL);
  id v59 = (uint64_t)v178;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v178);
  v203._countAndFlagsBits = v59;
  a3 = sub_100417D94(countAndFlagsBits, (uint64_t)v57);
  uint64_t v62 = *(void *)(v59 + 16);
  v63 = (v61 & 1) == 0;
  id v64 = v62 + v63;
  if (__OFADD__(v62, v63)) {
    goto LABEL_103;
  }
  id v65 = v61;
  if (*(void *)(v59 + 24) >= v64)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_100509A6C();
      v178 = (void *)v203._countAndFlagsBits;
    }

    goto LABEL_21;
  }

  sub_1005092F8(v64, isUniquelyReferenced_nonNull_native);
  v178 = (void *)v203._countAndFlagsBits;
  uint64_t v66 = sub_100417D94(countAndFlagsBits, (uint64_t)v57);
  if ((v65 & 1) == (v67 & 1))
  {
    a3 = v66;
LABEL_21:
    swift_bridgeObjectRelease(0x8000000000000000LL);
    uint64_t v36 = (uint64_t)v178;
    id v68 = v178;
    if ((v65 & 1) == 0)
    {
      v178[(a3 >> 6) + 8] |= 1LL << a3;
      v69 = (uint64_t *)(*(void *)(v36 + 48) + 16 * a3);
      os_log_s *v69 = countAndFlagsBits;
      v69[1] = (uint64_t)v57;
      *(void *)(*(void *)(v36 + 56) + 8 * a3) = _swiftEmptyArrayStorage;
      uint64_t v70 = *(void *)(v36 + 16);
      v71 = v70 + 1;
      object = __OFADD__(v70, 1LL);
      swift_bridgeObjectRetain(v36);
      if ((object & 1) != 0) {
        goto LABEL_104;
      }
      *(void *)(v36 + 16) = v71;
      id v68 = v57;
    }

    swift_bridgeObjectRetain(v68);
    __int16 v39 = *(void *)(v36 + 56);
    id v40 = swift_bridgeObjectRelease(v36);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v40);
    object = *(void *)((*(void *)(v39 + 8 * a3) & 0xFFFFFFFFFFFFF8LL) + 0x10);
    sub_1005039EC(object);
    __int16 v41 = v58;
    unsigned int v42 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(object, v58);
    specialized Array._endMutation()(v42);
    swift_bridgeObjectRelease(v57);
    v177 = sub_1004F7E08;
    a3 = v196;
    uint64_t v36 = v197;
    __int16 v37 = (uint64_t)v194;
    __int16 v43 = v199;
    goto LABEL_6;
  }

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

BOOL sub_100143B04(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 service]);
  BOOL v4 = v3 == *(void **)(a1 + 32);

  return v4;
}

void sub_100144208(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = 138412290;
    id v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Importing account: %@", (uint8_t *)&v14, 0xCu);
  }

  id v8 = [v6 mutableCopy];
  [v8 addEntriesFromDictionary:v6];
  uint64_t v9 = kFZServiceDefaultsLoginAsKey;
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKey:kFZServiceDefaultsLoginAsKey]);
  __int128 v11 = (void *)objc_claimAutoreleasedReturnValue([v10 _stripFZIDPrefix]);
  uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = 138412546;
    id v15 = v10;
    __int16 v16 = 2112;
    int v17 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Login ID: %@, new login: %@",  (uint8_t *)&v14,  0x16u);
  }

  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( NSNumber,  "numberWithInt:",  [v10 _FZIDType] == (id)1));
  [v8 setObject:v13 forKey:kIDSServiceDefaultsAccountTypeKey];

  [v8 removeObjectForKey:@"AuthToken"];
  if (v11) {
    [v8 setObject:v11 forKey:v9];
  }
  [*(id *)(a1 + 32) setObject:v8 forKey:v5];
}

void sub_100144694(_Unwind_Exception *a1)
{
}

uint64_t sub_100144C00()
{
  else {
    uint64_t v0 = 1831LL;
  }
  id v1 = (void *)objc_claimAutoreleasedReturnValue(+[FTDeviceSupport sharedInstance](&OBJC_CLASS___FTDeviceSupport, "sharedInstance"));
  unsigned int v2 = [v1 supportsEmojiImages];

  return v0 + v2;
}

void sub_1001455C4(uint64_t a1)
{
  unsigned int v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Re-register timer hit", buf, 2u);
  }

  if (![*(id *)(a1 + 32) hasForcedReRegistered] || *(_BYTE *)(a1 + 40))
  {
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "We still need to re-register, triggering it now...",  buf,  2u);
    }

    BOOL v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accounts]);
    id v5 = [v4 _copyForEnumerating];

    __int128 v15 = 0u;
    __int128 v16 = 0u;
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    id v6 = v5;
    id v7 = [v6 countByEnumeratingWithState:&v13 objects:v19 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v14;
      while (2)
      {
        for (i = 0LL; i != v8; i = (char *)i + 1)
        {
          if (*(void *)v14 != v9) {
            objc_enumerationMutation(v6);
          }
          __int128 v11 = *(void **)(*((void *)&v13 + 1) + 8LL * (void)i);
          if ((objc_msgSend(v11, "isAdHocAccount", (void)v13) & 1) == 0
            && [v11 isRegistered]
            && [v11 isEnabled])
          {
            uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
            if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              id v18 = v11;
              _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "We picked %@ to re-register",  buf,  0xCu);
            }

            [v11 registerAccount];
            goto LABEL_21;
          }
        }

        id v8 = [v6 countByEnumeratingWithState:&v13 objects:v19 count:16];
        if (v8) {
          continue;
        }
        break;
      }
    }

void sub_1001457FC(uint64_t a1)
{
  if (!+[IDSRegistrationController systemSupportsPhoneNumberRegistration]( &OBJC_CLASS___IDSRegistrationController,  "systemSupportsPhoneNumberRegistration"))
  {
    unsigned int v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userDefaults]);
    unsigned __int8 v3 = [v2 appBoolForKey:@"GDRRequestMadeForRelayRepair"];

    if ((v3 & 1) == 0)
    {
      uint64_t v39 = a1;
      BOOL v4 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDServiceController sharedInstance](&OBJC_CLASS___IDSDServiceController, "sharedInstance"));
      uint64_t v5 = objc_claimAutoreleasedReturnValue([v4 serviceWithIdentifier:@"com.apple.madrid"]);

      id v6 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDServiceController sharedInstance](&OBJC_CLASS___IDSDServiceController, "sharedInstance"));
      uint64_t v7 = objc_claimAutoreleasedReturnValue([v6 serviceWithIdentifier:@"com.apple.ess"]);

      uint64_t v38 = (void *)v5;
      id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountsOnService:v5]);
      __int16 v37 = (void *)v7;
      uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountsOnService:v7]);
      __int128 v52 = 0u;
      __int128 v53 = 0u;
      __int128 v54 = 0u;
      __int128 v55 = 0u;
      id v9 = v8;
      id v10 = [v9 countByEnumeratingWithState:&v52 objects:v61 count:16];
      if (v10)
      {
        id v11 = v10;
        uint64_t v12 = *(void *)v53;
        do
        {
          for (i = 0LL; i != v11; i = (char *)i + 1)
          {
            if (*(void *)v53 != v12) {
              objc_enumerationMutation(v9);
            }
            __int128 v14 = *(void **)(*((void *)&v52 + 1) + 8LL * (void)i);
            if ([v14 accountType] == 1)
            {
              __int128 v15 = (void *)objc_claimAutoreleasedReturnValue([v14 unprefixedURIStringsFromRegistration]);
              __int128 v48 = 0u;
              __int128 v49 = 0u;
              __int128 v50 = 0u;
              __int128 v51 = 0u;
              id v16 = v15;
              id v17 = [v16 countByEnumeratingWithState:&v48 objects:v60 count:16];
              if (v17)
              {
                id v18 = v17;
                uint64_t v19 = *(void *)v49;
                while (2)
                {
                  for (j = 0LL; j != v18; j = (char *)j + 1)
                  {
                    if (*(void *)v49 != v19) {
                      objc_enumerationMutation(v16);
                    }
                    if (IMStringIsPhoneNumber(*(void *)(*((void *)&v48 + 1) + 8LL * (void)j)))
                    {
                      __int128 v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)buf = 138412290;
                        id v59 = v14;
                        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "We found a phone number alias on the iMessage account, triggering GDR request for %@",  buf,  0xCu);
                      }

                      [*(id *)(a1 + 32) issueGetDependentRequestForAccount:v14];
                      goto LABEL_21;
                    }
                  }

                  id v18 = [v16 countByEnumeratingWithState:&v48 objects:v60 count:16];
                  if (v18) {
                    continue;
                  }
                  break;
                }
              }

void sub_100145EF8(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
  [v1 _cleanUpOutgoingMessageDatabaseAndClearStatementCache];
}

LABEL_57:
        }

        else
        {
          __int128 v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            v102 = (os_log_s *)v11;
            _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Bad preference domain { service: %@ }",  buf,  0xCu);
          }
        }

LABEL_59:
        id v10 = (char *)v10 + 1;
      }

      while (v10 != v8);
      id v8 = [v6 countByEnumeratingWithState:&v94 objects:v108 count:16];
    }

    while (v8);
  }

  __int128 v55 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
  {
    CFErrorRef v56 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  -[NSMutableDictionary count](v2->_accountIDMap, "count")));
    *(_DWORD *)buf = 138412290;
    v102 = v56;
    _os_log_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_DEFAULT,  "Loaded legacy accounts { count: %@ }",  buf,  0xCu);
  }

  id v57 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v57, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    v102 = (os_log_s *)v74;
    _os_log_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_INFO,  "Enabling legacy accounts { accounts: %@ }",  buf,  0xCu);
  }

  __int128 v80 = 0u;
  __int128 v81 = 0u;
  __int128 v78 = 0u;
  unsigned __int8 v79 = 0u;
  id v58 = v74;
  id v59 = [v58 countByEnumeratingWithState:&v78 objects:v98 count:16];
  if (v59)
  {
    uint64_t v60 = v59;
    unsigned int v61 = *(void *)v79;
    do
    {
      for (j = 0LL; j != v60; j = (char *)j + 1)
      {
        if (*(void *)v79 != v61) {
          objc_enumerationMutation(v58);
        }
        -[IDSDAccountController _enableAccountWithUniqueID:]( v2,  "_enableAccountWithUniqueID:",  *(void *)(*((void *)&v78 + 1) + 8LL * (void)j));
      }

      uint64_t v60 = [v58 countByEnumeratingWithState:&v78 objects:v98 count:16];
    }

    while (v60);
  }
}

void sub_100148940( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, char a40, uint64_t a41, uint64_t a42, uint64_t a43, char a44)
{
}

void sub_100148988(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, char a8)
{
  uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8LL);
  if (*(_BYTE *)(v8 + 24)) {
    char v9 = a6;
  }
  else {
    char v9 = 0;
  }
  *(_BYTE *)(v8 + 24) = v9;
  uint64_t v10 = *(void *)(*(void *)(a1 + 48) + 8LL);
  if (*(_BYTE *)(v10 + 24)) {
    char v11 = a8;
  }
  else {
    char v11 = 0;
  }
  *(_BYTE *)(v10 + 24) = v11;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t sub_1001489C0(void *a1)
{
  uint64_t result = a1[4];
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void, void, void, void, void, void, void))(result + 16))( result,  0LL,  0LL,  0LL,  0LL,  *(unsigned __int8 *)(*(void *)(a1[5] + 8LL) + 24LL),  0LL,  *(unsigned __int8 *)(*(void *)(a1[6] + 8LL) + 24LL),  0LL);
  }
  return result;
}

void sub_1001490D8(uint64_t a1)
{
  if ([*(id *)(a1 + 32) isLoading])
  {
    unsigned int v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v13) = 0;
      unsigned __int8 v3 = "Waiting on accounts to load, the account controller isn't ready yet";
      BOOL v4 = v2;
      uint32_t v5 = 2;
LABEL_7:
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, v3, (uint8_t *)&v13, v5);
    }
  }

  else
  {
    [*(id *)(a1 + 32) _updateDeviceProperties];
    [*(id *)(a1 + 32) _kickRemoteCacheWipe];
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userDefaults]);
    uint64_t v7 = +[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", sub_100144C00());
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    [v6 setAppValue:v8 forKey:@"ReRegisteredForDevices"];

    char v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userDefaults]);
    uint64_t v10 = _IDSServiceDictionaryRepresentableHash();
    char v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    [v9 setAppValue:v11 forKey:@"ReRegisteredForDevicesHash"];

    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userDefaults]);
    [v12 setAppBool:0 forKey:@"ReRegisterForAliasRepair"];

    unsigned int v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = 134217984;
      uint64_t v14 = sub_100144C00();
      unsigned __int8 v3 = "Re-registered succesfully, setting force re-register version to %llu";
      BOOL v4 = v2;
      uint32_t v5 = 12;
      goto LABEL_7;
    }
  }
}

id sub_10014B4AC(uint64_t a1)
{
  return [*(id *)(a1 + 32) saveDevicePropertiesWithOldKeys:*(void *)(a1 + 40)];
}

void sub_10014B4B8(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  uint32_t v5 = (void *)objc_claimAutoreleasedReturnValue([a3 objectForKey:IDSDevicePropertyNSUUID]);
  if (v6 && v5) {
    [*(id *)(a1 + 32) setObject:v5 forKey:v6];
  }
}

void sub_10014B84C(uint64_t a1)
{
  unsigned int v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registrationAuthKit](&OBJC_CLASS___IMRGLog, "registrationAuthKit"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    if (*(_BYTE *)(a1 + 48)) {
      uint32_t v5 = @"YES";
    }
    else {
      uint32_t v5 = @"NO";
    }
    int v7 = 138412802;
    uint64_t v8 = v3;
    __int16 v9 = 2048;
    uint64_t v10 = v4;
    __int16 v11 = 2112;
    uint64_t v12 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Updating AuthKit for DSID: %@, AKAppleIDServiceType: %ld and inUse: %@",  (uint8_t *)&v7,  0x20u);
  }

  id v6 = objc_alloc_init((Class)IMWeakLinkClass(@"AKAppleIDAuthenticationController", @"AuthKit"));
  [v6 setAppleIDWithDSID:*(void *)(a1 + 32) inUse:*(unsigned __int8 *)(a1 + 48) forService:*(void *)(a1 + 40)];
}

void sub_10014BB9C(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

void sub_10014C398( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

uint64_t sub_10014C3B0(uint64_t result, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  if (*(void *)(result + 32) == a2)
  {
    *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = a3;
    *a4 = 1;
  }

  return result;
}

uint64_t sub_10014C3D8(uint64_t result, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  if (*(void *)(result + 32) == a2)
  {
    *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = a3;
    *a4 = 1;
  }

  return result;
}

uint64_t sub_10014C61C(uint64_t a1, _DWORD **a2)
{
  **a2 = 1467207418;
  kdebug_trace(722010320LL, 0LL, 0LL, 0LL, 0LL);
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 32) + 40LL) + 16LL))();
}

uint64_t sub_10014C7D4(uint64_t a1, _DWORD **a2)
{
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog Multiplexer](&OBJC_CLASS___IDSFoundationLog, "Multiplexer"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "listener read callback!", v6, 2u);
  }

  IDSLinkPacketBufferAddBufferStart(a2, -(uint64_t)[*(id *)(a1 + 32) packetizationHeadroom]);
  **a2 = 1467207418;
  kdebug_trace(722010320LL, 0LL, 0LL, 0LL, 0LL);
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 32) + 40LL) + 16LL))();
}

void sub_10014CC78(_Unwind_Exception *a1)
{
}

id sub_10014CCB0(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id result = [a2 unsignedIntValue];
  if ((_DWORD)result == *(_DWORD *)(a1 + 40))
  {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = a3;
    *a4 = 1;
  }

  return result;
}

void sub_10014CE80(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___IDSLocalMultiplexer);
  unsigned int v2 = (void *)qword_1009BEBA0;
  qword_1009BEBA0 = (uint64_t)v1;
}

id sub_10014D94C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 152) objectForKeyedSubscript:*(void *)(a1 + 40)]);
  id v4 = [v3 tryConsumePacketBuffer:a2];

  uint32_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog Multiplexer](&OBJC_CLASS___IDSFoundationLog, "Multiplexer"));
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = @"NO";
    if ((_DWORD)v4) {
      id v6 = @"YES";
    }
    int v8 = 138412290;
    __int16 v9 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "incoming packet consumed? %@",  (uint8_t *)&v8,  0xCu);
  }

  return v4;
}

uint64_t sub_10014F6F4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  0LL,  *(void *)(a1 + 32));
}

LABEL_107:
  id v92 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObject:forKey:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObject:forKey:",  @"No addresss pair is on same network, cannot connect.",  NSLocalizedDescriptionKey,  v102));
  id v16 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"UDPGlobalLink",  8005LL,  v92));

  v93 = OSLogHandleForTransportCategory("UGL");
  v94 = (os_log_s *)objc_claimAutoreleasedReturnValue(v93);
  if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v94,  OS_LOG_TYPE_DEFAULT,  "No addresss pair is on same network, cannot connect.",  buf,  2u);
  }

  v96 = os_log_shim_legacy_logging_enabled(v95);
  if ((_DWORD)v96)
  {
    v96 = _IDSShouldLogTransport(v96);
    if ((_DWORD)v96)
    {
      _IDSLogTransport(@"UGL", @"IDS", @"No addresss pair is on same network, cannot connect.");
      v96 = _IDSShouldLog(0LL, @"UGL");
      if ((_DWORD)v96) {
        v96 = _IDSLogV( 0LL,  @"IDSFoundation",  @"UGL",  @"No addresss pair is on same network, cannot connect.");
      }
    }
  }

  if (v114->_completionHandler)
  {
    v98 = im_primary_queue(v96, v97);
    v99 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v98);
    v121[0] = _NSConcreteStackBlock;
    v121[1] = 3221225472LL;
    v121[2] = sub_100150854;
    v121[3] = &unk_1008F5F80;
    v121[4] = v114;
    id v16 = v16;
    v122 = v16;
    dispatch_async(v99, v121);
  }

  uint64_t v14 = @"No addresss pair is on same network, cannot connect.";
LABEL_116:

LABEL_121:
}

  v240 = kIDSQRAllocateKey_AppID;
  v241 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", kIDSQRAllocateKey_AppID, v949, v992, v1035));
  v243 = objc_opt_class(&OBJC_CLASS___NSString, v242);
  v244 = objc_opt_isKindOfClass(v241, v243);

  v245 = (NSString *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v240]);
  v246 = v245;
  if ((v244 & 1) != 0)
  {
    appID = self->_appID;
    self->_appID = v245;
LABEL_109:

    goto LABEL_116;
  }

  if (v246)
  {
    v248 = OSLogHandleForIDSCategory("QRAllocator");
    v249 = (os_log_s *)objc_claimAutoreleasedReturnValue(v248);
    if (os_log_type_enabled(v249, OS_LOG_TYPE_DEBUG))
    {
      v250 = (id)objc_claimAutoreleasedReturnValue([v4 objectForKey:v240]);
      v252 = (id)objc_opt_class(&OBJC_CLASS___NSString, v251);
      v253 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v240]);
      v255 = (id)objc_opt_class(v253, v254);
      *(_DWORD *)buf = 138412802;
      v1070 = v250;
      v1071 = 2112;
      v1072 = v252;
      v1073 = 2112;
      v1074 = v255;
      _os_log_impl( (void *)&_mh_execute_header,  v249,  OS_LOG_TYPE_DEBUG,  "Unexpected datatype. %@ should be of type %@, not %@",  buf,  0x20u);
    }

    if (os_log_shim_legacy_logging_enabled(v256))
    {
      if (_IDSShouldLog(1LL, @"QRAllocator"))
      {
        appID = (NSString *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v240]);
        v258 = objc_opt_class(&OBJC_CLASS___NSString, v257);
        v259 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v240]);
        v993 = v258;
        v1036 = objc_opt_class(v259, v260);
        v950 = appID;
        _IDSLogV( 1LL,  @"IDSFoundation",  @"QRAllocator",  @"Unexpected datatype. %@ should be of type %@, not %@");

        goto LABEL_109;
      }
    }
  }

uint64_t sub_100150814(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 32) + 40LL) + 16LL))();
}

uint64_t sub_100150824(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 32) + 40LL) + 16LL))();
}

uint64_t sub_100150834(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 32) + 40LL) + 16LL))();
}

uint64_t sub_100150844(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 32) + 40LL) + 16LL))();
}

uint64_t sub_100150854(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 32) + 40LL) + 16LL))();
}

uint64_t sub_10015169C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 32) + 32LL) + 16LL))();
}

uint64_t sub_1001516B0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 32) + 32LL) + 16LL))();
}

uint64_t sub_100151B88(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 32) + 40LL) + 16LL))();
}

id sub_100151B98(uint64_t a1)
{
  return [*(id *)(a1 + 32) _sendConnectionCheckRequest];
}

id sub_1001520D4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _sendNominateRequest];
}

id sub_100152360(uint64_t a1)
{
  return [*(id *)(a1 + 32) _startConnectionEcho:*(double *)(a1 + 40)];
}

uint64_t sub_1001528B8(uint64_t a1, uint64_t a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_10015290C;
  v3[3] = &unk_1008F7948;
  v3[4] = *(void *)(a1 + 32);
  return IDSTransportThreadAddBlock(v3, a2);
}

id sub_10015290C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _handleEchoTimer];
}

BOOL sub_100152F30(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 1);
  if (v2 != 2) {
    return 0LL;
  }
  unsigned int v3 = bswap32(*(_DWORD *)(a1 + 4));
  BOOL v4 = HIWORD(v3) == 49320 || (v3 & 0xFF000000) == 167772160;
  if (v4 || (v3 & 0xFFF00000) == -1408237568) {
    return 0LL;
  }
  unsigned int v6 = bswap32(*(_DWORD *)(a2 + 4));
  BOOL result = 1LL;
  if ((v6 & 0xFFFF0000) != 0xC0A80000 && (v6 & 0xFF000000) != 0xA000000 && (v6 & 0xFFF00000) != 0xAC100000) {
    return 0LL;
  }
  return result;
}

LABEL_94:
  return 1;
}

          v218 = v91;
          v96 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistration idsUserID](self->_registrationInfo, "idsUserID"));
          if ([v96 length])
          {
            v97 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistration idsUserID](self->_registrationInfo, "idsUserID"));
            v98 = [v97 _FZIDType] != (id)1;
          }

          else
          {
            v98 = 1;
          }

          if ((_DWORD)v35 == 1 && v98)
          {
            v99 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistration profileID](self->_registrationInfo, "profileID"));
            v100 = [v99 length];

            if (!v100) {
              goto LABEL_118;
            }
            v234 = 0u;
            v235 = 0u;
            v232 = 0u;
            v233 = 0u;
            v101 = (void *)objc_claimAutoreleasedReturnValue( +[IDSRegistrationKeychainManager sharedInstance]( &OBJC_CLASS___IDSRegistrationKeychainManager,  "sharedInstance"));
            v102 = (void *)objc_claimAutoreleasedReturnValue([v101 registrations]);

            v103 = [v102 countByEnumeratingWithState:&v232 objects:v244 count:16];
            if (v103)
            {
              v104 = v103;
              __int128 v105 = *(void *)v233;
              while (2)
              {
                for (j = 0LL; j != v104; j = (char *)j + 1)
                {
                  if (*(void *)v233 != v105) {
                    objc_enumerationMutation(v102);
                  }
                  __int128 v107 = *(void **)(*((void *)&v232 + 1) + 8LL * (void)j);
                  __int128 v108 = (void *)objc_claimAutoreleasedReturnValue([v107 registrationCert]);
                  if (v108 && [v107 registrationType] == 1)
                  {
                    __int128 v109 = (void *)objc_claimAutoreleasedReturnValue([v107 profileID]);
                    __int128 v110 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistration profileID](self->_registrationInfo, "profileID"));
                    __int128 v111 = [v109 isEqualToIgnoringCase:v110];

                    if (v111)
                    {
                      __int128 v112 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                      if (os_log_type_enabled(v112, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)buf = 138412290;
                        *(void *)v239 = v107;
                        _os_log_impl( (void *)&_mh_execute_header,  v112,  OS_LOG_TYPE_DEFAULT,  "Setting idsUserID (for auth cert), isCDMA, and keyPairSignature on registration using existing registration with the same profileID { keychainRegistration: %@ }",  buf,  0xCu);
                      }

                      __int128 v114 = (void *)objc_claimAutoreleasedReturnValue( +[FTDeviceSupport sharedInstance]( &OBJC_CLASS___FTDeviceSupport,  "sharedInstance"));
                      __int128 v115 = [v114 isC2KEquipment];

                      __int128 v116 = self->_registrationInfo;
                      v117 = (void *)objc_claimAutoreleasedReturnValue([v107 idsUserID]);
                      -[IDSRegistration setIdsUserID:](v116, "setIdsUserID:", v117);

                      v118 = self->_registrationInfo;
                      v119 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v115));
                      -[IDSRegistration setIsCDMA:](v118, "setIsCDMA:", v119);

                      v120 = self->_registrationInfo;
                      v121 = (void *)objc_claimAutoreleasedReturnValue( +[IDSRegistrationKeyManager sharedInstance]( &OBJC_CLASS___IDSRegistrationKeyManager,  "sharedInstance"));
                      v122 = (void *)objc_claimAutoreleasedReturnValue([v121 keyPairSignature]);
                      -[IDSRegistration setKeyPairSignature:](v120, "setKeyPairSignature:", v122);

                      goto LABEL_116;
                    }
                  }

                  else
                  {
                  }
                }

                v104 = [v102 countByEnumeratingWithState:&v232 objects:v244 count:16];
                if (v104) {
                  continue;
                }
                break;
              }
            }

uint64_t sub_100154218(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 32) + 40LL) + 16LL))();
}

id sub_100155A48(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _processStunBindingRequest:*(void *)(a1 + 40) fromDevice:*(void *)(a1 + 48) localIfIndex:*(unsigned int *)(a1 + 320) localAddress:a1 + 56 remmoteAddress:a1 + 184 arrivalTime:*(double *)(a1 + 312)];
}

void sub_1001564B8(id a1)
{
  if (!qword_1009BEBA8)
  {
    memset(v5, 170, sizeof(v5));
    double v1 = ids_monotonic_time(a1);
    uint64_t v2 = gettimeofday(&v5[1], 0LL);
    double v3 = ids_monotonic_time(v2);
    uint64_t v4 = gettimeofday(v5, 0LL);
    if (ids_monotonic_time(v4) - v3 < v3 - v1)
    {
      v5[1] = v5[0];
      double v1 = v3;
    }

    qword_1009BEBA8 = vcvtd_n_u64_f64( (double)v5[1].tv_sec + (double)v5[1].tv_usec * 0.000001 + 2208988800.0 - v1,  0x20uLL);
  }

void sub_100156E30(uint64_t a1)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _metricContainerForMetricType:2555929]);
  if (v4)
  {
    uint64_t v2 = *(void **)(a1 + 32);
    double v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) awdRepresentation]);
    [v2 _submitAWDMetric:v3 withContainer:v4];
  }
}

void sub_100156F58(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _metricContainerForMetricType:2555931]);
  if (v3)
  {
    id v2 = objc_alloc_init((Class)IMWeakLinkClass(@"AWDIDSRegistrationCompleted", @"WirelessDiagnostics"));
    [v2 setRegistrationType:*(unsigned int *)(a1 + 56)];
    [v2 setServiceIdentifier:*(void *)(a1 + 40)];
    [v2 setWasSuccessful:*(unsigned __int8 *)(a1 + 60)];
    [v2 setRegistrationError:*(unsigned int *)(a1 + 48)];
    [*(id *)(a1 + 32) _submitAWDMetric:v2 withContainer:v3];
  }
}

void sub_100157038(id a1)
{
  double v1 = objc_alloc_init(&OBJC_CLASS___IDSWPLinkManager);
  id v2 = (void *)qword_1009BEBC0;
  qword_1009BEBC0 = (uint64_t)v1;
}

id sub_100157558(uint64_t a1)
{
  return _[*(id *)(a1 + 32) setDelegateOnMainQueue:*(void *)(a1 + 40)];
}

id sub_10015774C(uint64_t a1)
{
  return [*(id *)(a1 + 32) manager:*(void *)(a1 + 40) cbuuidDidConnect:*(void *)(a1 + 48) isAlwaysConnected:1];
}

void sub_1001577FC(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 72LL);
  if (!v2)
  {
    id v3 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
    uint64_t v4 = *(void *)(a1 + 32);
    uint32_t v5 = *(void **)(v4 + 72);
    *(void *)(v4 + 72) = v3;

    id v2 = *(void **)(*(void *)(a1 + 32) + 72LL);
  }

  [v2 addObject:*(void *)(a1 + 40)];
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  id v6 = *(id *)(*(void *)(a1 + 32) + 88LL);
  id v7 = [v6 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v12;
    do
    {
      uint64_t v10 = 0LL;
      do
      {
        if (*(void *)v12 != v9) {
          objc_enumerationMutation(v6);
        }
        objc_msgSend( *(id *)(*((void *)&v11 + 1) + 8 * (void)v10),  "manager:cbuuidDidConnect:isAlwaysConnected:",  *(void *)(a1 + 32),  *(void *)(a1 + 40),  1,  (void)v11);
        uint64_t v10 = (char *)v10 + 1;
      }

      while (v8 != v10);
      id v8 = [v6 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }

    while (v8);
  }
}

LABEL_51:
}

LABEL_52:
  __int128 v40 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController"));
  if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    id v57 = v49;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "newParticipantsReadyForKeys: %@", buf, 0xCu);
  }

  __int128 v41 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController"));
  if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
  {
    __int128 v42 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( self->_participantsWaitingForStableKeyMaterials,  "objectForKeyedSubscript:",  v12));
    *(_DWORD *)buf = 138412290;
    id v57 = v42;
    _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEFAULT,  "_participantsWaitingForStableKeyMaterials: %@",  buf,  0xCu);
  }

  __int128 v43 = -[NSMutableArray copy](v49, "copy");
  return v43;
}

            sub_10041D3BC(a1);
            id v82 = (unint64_t *)&v88[OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_participantsById];
            swift_beginAccess( &v88[OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_participantsById],  &v96,  1LL,  0LL);
            id v83 = *v82;
            *id v82 = v89;
            swift_bridgeObjectRelease(v83);
            os_unfair_lock_unlock(lock);
            return swift_release(v87);
          }
        }
      }
    }

LABEL_52:
        goto LABEL_53;
      }

      v166 = v257;
      sub_1003F600C(v124, v257, type metadata accessor for IDSGroupEncryptionPublicIdentity);
      v167 = v262;
      sub_1003F5FC8(v166, v262, type metadata accessor for IDSGroupEncryptionPublicIdentity);
      v168 = *(void *)((char *)v145 + v151);
      v169 = v277;
      v170 = swift_bridgeObjectRetain(v277);
      v171 = v153(v170);
      v172 = v264;
      sub_1004D2068(0LL, v169, v167, v168, v171, v264);
      v173 = v265;
      swift_storeEnumTagMultiPayload(v172, v265, 0LL);
      v174 = v263;
      sub_10041AC80(v263, v172);
      sub_1003F6050(v174, type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
      v175 = (uint64_t)v281;
      sub_1003F5FC8(v166, v167, type metadata accessor for IDSGroupEncryptionPublicIdentity);
      id v59 = *(void *)((char *)v145 + v151);
      v176 = swift_bridgeObjectRetain(v175);
      v177 = v153(v176);
      v178 = v167;
      v99 = v255;
      sub_1004D2068(1LL, v175, v178, v59, v177, v172);
      swift_storeEnumTagMultiPayload(v172, v173, 0LL);
      sub_10041AC80(v174, v172);

      v179 = v174;
      __int16 v124 = (uint64_t)v258;
      sub_1003F6050(v179, type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
      v180 = v166;
      v125 = v275;
      v123 = (void *)sub_1003F6050(v180, type metadata accessor for IDSGroupEncryptionPublicIdentity);
LABEL_53:
      uint64_t v131 = v274;
      __int16 v132 = v273;
    }

    if (v132)
    {
      __int16 v138 = (v132 - 1) & v132;
      v139 = __clz(__rbit64(v132)) | (v131 << 6);
      __int16 v140 = v131;
      goto LABEL_74;
    }

    v148 = v131 + 1;
    if (__OFADD__(v131, 1LL))
    {
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      v94 = _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage);
      if (v94)
      {
        sub_10041C0F0((uint64_t)_swiftEmptyArrayStorage);
        v99 = v94;
        continue;
      }

      goto LABEL_33;
    }

    break;
  }

  if (v148 >= v270) {
    goto LABEL_83;
  }
  v149 = *(void *)(v271 + 8 * v148);
  __int16 v140 = v131 + 1;
  if (v149) {
    goto LABEL_73;
  }
  __int16 v140 = v131 + 2;
  if (v131 + 2 >= v270) {
    goto LABEL_83;
  }
  v149 = *(void *)(v271 + 8 * v140);
  if (v149) {
    goto LABEL_73;
  }
  __int16 v140 = v131 + 3;
  if (v131 + 3 >= v270) {
    goto LABEL_83;
  }
  v149 = *(void *)(v271 + 8 * v140);
  if (v149) {
    goto LABEL_73;
  }
  __int16 v140 = v131 + 4;
  if (v131 + 4 >= v270) {
    goto LABEL_83;
  }
  v149 = *(void *)(v271 + 8 * v140);
  if (v149)
  {
LABEL_73:
    __int16 v138 = (v149 - 1) & v149;
    v139 = __clz(__rbit64(v149)) + (v140 << 6);
LABEL_74:
    v147 = *(id *)(*(void *)(v99 + 48) + 8 * v139);
    v145 = v147;
    if (!v147) {
      goto LABEL_83;
    }
    goto LABEL_75;
  }

  v150 = v131 + 5;
  while (v270 != v150)
  {
    v149 = *(void *)(v271 + 8 * v150++);
    if (v149)
    {
      __int16 v140 = v150 - 1;
      goto LABEL_73;
    }
  }

  __break(1u);
  return result;
}

id sub_100159EE8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) connectOnMainQueueToPeer:*(void *)(a1 + 40)];
}

id sub_10015A3BC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) disconnectOnMainQueueFromPeer:*(void *)(a1 + 40)];
}

id sub_10015A480(void *a1)
{
  uint64_t v2 = OSLogHandleForTransportCategory("WPLinkManager");
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = a1[4];
    uint64_t v5 = a1[5];
    *(_DWORD *)buf = 138412546;
    uint64_t v9 = v4;
    __int16 v10 = 2112;
    uint64_t v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "removing a link %@ with linkID %@", buf, 0x16u);
  }

  id result = (id)os_log_shim_legacy_logging_enabled(v6);
  if ((_DWORD)result)
  {
    id result = (id)_IDSShouldLogTransport(result);
    if ((_DWORD)result)
    {
      _IDSLogTransport(@"WPLinkManager", @"IDS", @"removing a link %@ with linkID %@");
      id result = (id)_IDSShouldLog(0LL, @"WPLinkManager");
      if ((_DWORD)result) {
        id result = (id)_IDSLogV( 0LL,  @"IDSFoundation",  @"WPLinkManager",  @"removing a link %@ with linkID %@");
      }
    }
  }

  if (a1[5]) {
    return objc_msgSend(*(id *)(a1[6] + 48), "removeObjectForKey:");
  }
  return result;
}

void sub_10015A8A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  id v4 = *(id *)(*(void *)(a1 + 32) + 88LL);
  id v5 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v10;
    do
    {
      id v8 = 0LL;
      do
      {
        if (*(void *)v10 != v7) {
          objc_enumerationMutation(v4);
        }
        objc_msgSend( *(id *)(*((void *)&v9 + 1) + 8 * (void)v8),  "manager:cbuuidDidDisconnect:",  *(void *)(a1 + 32),  v3,  (void)v9);
        id v8 = (char *)v8 + 1;
      }

      while (v6 != v8);
      id v6 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }

    while (v6);
  }
}

void sub_10015AAD0(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 broadcasterForEntitlement:kIDSContinuityEntitlement messageContext:0]);

  uint64_t v4 = OSLogHandleForTransportCategory("WPLinkManager");
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v6 = *(void *)(a1 + 32);
    if (v6 > 3) {
      uint64_t v7 = "UnexpectedState";
    }
    else {
      uint64_t v7 = (&off_1008FBAF0)[v6];
    }
    *(_DWORD *)buf = 136315138;
    id v16 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "calling continuityDidUpdateStateToState:%s",  buf,  0xCu);
  }

  uint64_t v9 = os_log_shim_legacy_logging_enabled(v8);
  if ((_DWORD)v9 && _IDSShouldLogTransport(v9))
  {
    unint64_t v10 = *(void *)(a1 + 32);
    __int128 v11 = v10 > 3 ? "UnexpectedState" : (&off_1008FBAF0)[v10];
    __int128 v14 = v11;
    _IDSLogTransport(@"WPLinkManager", @"IDS", @"calling continuityDidUpdateStateToState:%s");
    if (_IDSShouldLog(0LL, @"WPLinkManager"))
    {
      unint64_t v12 = *(void *)(a1 + 32);
      if (v12 > 3) {
        __int128 v13 = "UnexpectedState";
      }
      else {
        __int128 v13 = (&off_1008FBAF0)[v12];
      }
      __int128 v14 = (void *)v13;
      _IDSLogV(0LL, @"IDSFoundation", @"WPLinkManager", @"calling continuityDidUpdateStateToState:%s");
    }
  }

  objc_msgSend(v3, "continuityDidUpdateStateToState:", *(void *)(a1 + 32), v14);
}

LABEL_77:
}

          uint64_t v70 = -[IDSDAccount _rebuildRegistrationInfo:](self, "_rebuildRegistrationInfo:", 0LL);
          v71 = self->_registrationInfo;
          if (!v70)
          {
            if (!v71) {
              goto LABEL_165;
            }
            id v72 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
            if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
            {
              id v73 = self->_registrationInfo;
              *(_DWORD *)buf = 138412290;
              *(void *)v239 = v73;
              _os_log_impl( (void *)&_mh_execute_header,  v72,  OS_LOG_TYPE_DEFAULT,  "Using cached registration info: %@",  buf,  0xCu);
            }

id sub_10015D8C8(id a1, id a2)
{
  id v2 = a2;
  id v3 = -[NSUUID initWithUUIDString:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDString:", v2);

  return v3;
}

void sub_10015EA20(void *a1)
{
  id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = a1[5];
    uint64_t v5 = a1[6];
    uint64_t v6 = a1[7];
    int v7 = 138413058;
    uint64_t v8 = v3;
    __int16 v9 = 2112;
    uint64_t v10 = v4;
    __int16 v11 = 2112;
    uint64_t v12 = v5;
    __int16 v13 = 2112;
    uint64_t v14 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Finished capturing AutoBugCapture diagnostics for encryption failure { context: %@, ECError: %@, legacyError: %@, secondaryError: %@ }",  (uint8_t *)&v7,  0x2Au);
  }
}

void sub_10015EAEC(void *a1)
{
  id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = a1[5];
    uint64_t v5 = a1[6];
    uint64_t v6 = a1[7];
    int v7 = 138413058;
    uint64_t v8 = v3;
    __int16 v9 = 2112;
    uint64_t v10 = v4;
    __int16 v11 = 2112;
    uint64_t v12 = v5;
    __int16 v13 = 2112;
    uint64_t v14 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Finished capturing AutoBugCapture diagnostics for encryption failure { context: %@, ECError: %@, legacyError: %@, secondaryError: %@ }",  (uint8_t *)&v7,  0x2Au);
  }
}

void sub_10015EBB8(uint64_t a1)
{
  id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog delivery_oversized](&OBJC_CLASS___IDSFoundationLog, "delivery_oversized"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    int v5 = 138412546;
    uint64_t v6 = v3;
    __int16 v7 = 2112;
    uint64_t v8 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "GUID %@ Encryption information:\n%@",  (uint8_t *)&v5,  0x16u);
  }
}

id sub_10015F3E0()
{
  if (qword_1009BEBD0 != -1) {
    dispatch_once(&qword_1009BEBD0, &stru_1008FBC10);
  }
  return (id)qword_1009BEBC8;
}

void sub_10015F420(uint64_t a1, void *a2)
{
  id v10 = a2;
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) localObject]);
  int v5 = (void *)objc_claimAutoreleasedReturnValue([v3 broadcasterForLocalObject:v4 messageContext:*(void *)(a1 + 40)]);

  if (v5)
  {
    id v6 = [v10 state];
    if (v6 == (id)1)
    {
      uint64_t v9 = *(void *)(a1 + 48);
      __int16 v7 = (void *)objc_claimAutoreleasedReturnValue([v10 error]);
      [v5 didAuthenticatePhoneWithAuthenticationCertificateData:0 requestUUID:v9 error:v7];
      goto LABEL_6;
    }

    if (!v6)
    {
      __int16 v7 = (void *)objc_claimAutoreleasedReturnValue([v10 value]);
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 dataRepresentation]);
      [v5 didAuthenticatePhoneWithAuthenticationCertificateData:v8 requestUUID:*(void *)(a1 + 48) error:0];

LABEL_6:
    }
  }
}

void sub_10015F7E4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  int v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) localObject]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 broadcasterForLocalObject:v5 messageContext:*(void *)(a1 + 40)]);

  if (v6)
  {
    id v7 = [v3 state];
    if (v7 == (id)1)
    {
      uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
      uint64_t v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog sms](&OBJC_CLASS___IMRGLog, "sms"));
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        __int128 v52 = v34;
        _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEFAULT,  "Failed to generate phone authentication signature {error: %@}",  buf,  0xCu);
      }

      [v6 didGeneratePhoneAuthenticationSignature:0 nonce:0 certificates:0 labelIDs:0 inputData:0 requestUUID:*(void *)(a1 + 56) error:v34];
      goto LABEL_31;
    }

    if (!v7)
    {
      id v8 = sub_10015F3E0();
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
      id v10 = [v9 phoneAuthenticationCertificatePublicKey];

      id v11 = sub_10015F3E0();
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
      id v13 = [v12 phoneAuthenticationCertificatePrivateKey];

      id v14 = 0LL;
      __int128 v43 = v6;
      id v15 = 0LL;
      if (v10 && v13)
      {
        uint64_t v16 = *(void *)(a1 + 48);
        id v49 = 0LL;
        id v50 = 0LL;
        _FTGenerateNonceAndSignatureFromPayload(v10, v13, v16, 0LL, &v50, &v49);
        id v14 = v50;
        id v15 = v49;
      }

      id v39 = v10;
      __int128 v40 = v15;
      id v41 = v14;
      uint64_t v42 = a1;
      id v17 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      id v18 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      id v44 = v3;
      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v3 value]);
      __int128 v45 = 0u;
      __int128 v46 = 0u;
      __int128 v47 = 0u;
      __int128 v48 = 0u;
      id v20 = [v19 countByEnumeratingWithState:&v45 objects:v59 count:16];
      if (v20)
      {
        id v21 = v20;
        uint64_t v22 = *(void *)v46;
        do
        {
          for (i = 0LL; i != v21; i = (char *)i + 1)
          {
            if (*(void *)v46 != v22) {
              objc_enumerationMutation(v19);
            }
            id v24 = *(void **)(*((void *)&v45 + 1) + 8LL * (void)i);
            uint64_t v25 = objc_claimAutoreleasedReturnValue([v24 authenticationCertificate]);
            if (v25)
            {
              id v26 = (void *)v25;
              __int16 v27 = (void *)objc_claimAutoreleasedReturnValue([v24 phoneUser]);
              id v28 = (void *)objc_claimAutoreleasedReturnValue([v27 uniqueIdentifier]);

              if (v28)
              {
                id v29 = (void *)objc_claimAutoreleasedReturnValue([v24 authenticationCertificate]);
                id v30 = (void *)objc_claimAutoreleasedReturnValue([v29 dataRepresentation]);
                -[NSMutableArray addObject:](v17, "addObject:", v30);

                id v31 = (void *)objc_claimAutoreleasedReturnValue([v24 phoneUser]);
                uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([v31 uniqueIdentifier]);
                -[NSMutableArray addObject:](v18, "addObject:", v32);
              }
            }
          }

          id v21 = [v19 countByEnumeratingWithState:&v45 objects:v59 count:16];
        }

        while (v21);
      }

      __int16 v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog sms](&OBJC_CLASS___IMRGLog, "sms"));
      uint64_t v34 = v41;
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v35 = @"NO";
        if (v39) {
          uint64_t v36 = @"YES";
        }
        else {
          uint64_t v36 = @"NO";
        }
        *(_DWORD *)buf = 138413058;
        __int128 v52 = v19;
        if (v41) {
          __int16 v37 = @"YES";
        }
        else {
          __int16 v37 = @"NO";
        }
        __int128 v54 = v36;
        __int16 v53 = 2112;
        __int16 v55 = 2112;
        if (v40) {
          __int16 v35 = @"YES";
        }
        CFErrorRef v56 = v37;
        __int16 v57 = 2112;
        id v58 = v35;
        _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "Generated phone authentication signature {phoneUserAuthCerts: %@, publicKey: %@, nonce: %@, signature: %@}",  buf,  0x2Au);
      }

      id v6 = v43;
      [v43 didGeneratePhoneAuthenticationSignature:v40 nonce:v41 certificates:v17 labelIDs:v18 inputData:*(void *)(v42 + 48) requestUUID:*(void *)(v42 + 56) error:0];

      id v3 = v44;
LABEL_31:
    }
  }
}

BOOL sub_1001607B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) integerValue];
  if (v4 == (id)1)
  {
    uint64_t v5 = 0LL;
  }

  else
  {
    if (v4 != (id)2)
    {
      BOOL v6 = 0LL;
      goto LABEL_7;
    }

    uint64_t v5 = 1LL;
  }

  BOOL v6 = [v3 slot] == (id)v5;
LABEL_7:

  return v6;
}

void sub_100160820(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v6 = a2;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 responseStatus]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 responseCarrierToken]);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v6 responseMessage]);

  id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog sms](&OBJC_CLASS___IMRGLog, "sms"));
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    id v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a4));
    uint64_t v12 = @"YES";
    *(_DWORD *)buf = 138413058;
    id v24 = v11;
    if (!v8) {
      uint64_t v12 = @"NO";
    }
    __int16 v25 = 2112;
    id v26 = v7;
    __int16 v27 = 2112;
    id v28 = v9;
    __int16 v29 = 2112;
    id v30 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Carrier token response received {resultCode: %@, serverStatus: %@, serverErrorDetail: %@, carrierToken: %@}",  buf,  0x2Au);
  }

  if (v8)
  {
    id v13 = 0LL;
  }

  else
  {
    id v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a4));
    id v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Failed to request carrier token from IDS server {resultCode: %@, serverStatus: %@, serverErrorDetail: %@}",  v14,  v7,  v9));

    uint64_t v16 = IDSRegistrationControlErrorDomain;
    NSErrorUserInfoKey v21 = NSDebugDescriptionErrorKey;
    uint64_t v22 = v15;
    id v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v22,  &v21,  1LL));
    id v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v16,  1LL,  v17));
  }

  id v18 = *(void **)(a1 + 32);
  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) localObject]);
  id v20 = (void *)objc_claimAutoreleasedReturnValue([v18 broadcasterForLocalObject:v19 messageContext:*(void *)(a1 + 40)]);

  [v20 didRequestCarrierTokenString:v8 requestUUID:*(void *)(a1 + 48) error:v13];
}

void sub_100161104(id a1)
{
  double v1 = objc_alloc(&OBJC_CLASS___IDSPhoneUserRegistry);
  uint64_t v2 = im_primary_base_queue(v1);
  id v8 = (id)objc_claimAutoreleasedReturnValue(v2);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 registrationConductor]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 userStore]);
  id v6 = -[IDSPhoneUserRegistry initWithQueue:userStore:](v1, "initWithQueue:userStore:", v8, v5);
  id v7 = (void *)qword_1009BEBC8;
  qword_1009BEBC8 = (uint64_t)v6;
}

void sub_1001611A4(id a1)
{
  id v1 = objc_alloc_init((Class)+[FTMessageDelivery HTTPMessageDeliveryClass]( &OBJC_CLASS___FTMessageDelivery,  "HTTPMessageDeliveryClass"));
  uint64_t v2 = (void *)qword_1009BEBD8;
  qword_1009BEBD8 = (uint64_t)v1;

  [(id)qword_1009BEBD8 setLogToRegistration:1];
  id v3 = (void *)qword_1009BEBD8;
  id v4 = (id)objc_claimAutoreleasedReturnValue( +[IDSRegistrationRequestTracker sharedInstance]( &OBJC_CLASS___IDSRegistrationRequestTracker,  "sharedInstance"));
  [v3 addRequestObserver:v4];
}

void sub_100161C74( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
}

id sub_100161D30(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(_BYTE *)(a1 + 48) && [*(id *)(a1 + 32) containsObject:v3])
  {
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog accountCleanup](&OBJC_CLASS___IMRGLog, "accountCleanup"));
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      int v8 = 138412546;
      id v9 = v3;
      __int16 v10 = 2112;
      uint64_t v11 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "  Found bad vetted alias, it was my phone number: %@ => %@",  (uint8_t *)&v8,  0x16u);
    }

    id v6 = 0LL;
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
  }

  else
  {
    id v6 = v3;
  }

  return v6;
}

id sub_100161E38(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKey:kIDSServiceDefaultsAliasKey]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKey:kIDSServiceDefaultsAliasStatusKey]);
  int v6 = [v5 intValue];

  unsigned int v7 = [v4 isEqualToIgnoringCase:kIDSServiceDefaultsSentinelAlias];
  unsigned int v8 = v7;
  uint64_t v9 = *(void *)(*(void *)(a1 + 64) + 8LL);
  if (*(_BYTE *)(v9 + 24)) {
    BOOL v10 = 1;
  }
  else {
    BOOL v10 = v7 == 0;
  }
  if (v10)
  {
    if (*(_BYTE *)(v9 + 24) && ((v7 ^ 1) & 1) == 0)
    {
LABEL_16:
      *(_BYTE *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL) = 1;
      [*(id *)(a1 + 32) addObject:v4];
      id v15 = 0LL;
      goto LABEL_29;
    }
  }

  else
  {
    *(_BYTE *)(v9 + 24) = 1;
  }

  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) service]);
  else {
    unsigned int v12 = 0;
  }

  int v13 = v8 | v12;
  if (v6 >= 2)
  {
  }

  else if ((v13 & 1) == 0)
  {
LABEL_13:
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog accountCleanup](&OBJC_CLASS___IMRGLog, "accountCleanup"));
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      int v22 = 138412290;
      id v23 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "  Found unvalidated/failed alias: %@",  (uint8_t *)&v22,  0xCu);
    }

    goto LABEL_16;
  }

  uint64_t v16 = IMStripFormattingFromAddress(v4);
  id v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
  if ([v17 isEqualToIgnoringCase:v4])
  {
    if (*(_BYTE *)(a1 + 80) && [*(id *)(a1 + 56) containsObject:v17])
    {
      id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog accountCleanup](&OBJC_CLASS___IMRGLog, "accountCleanup"));
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v19 = *(void **)(a1 + 56);
        int v22 = 138412546;
        id v23 = v17;
        __int16 v24 = 2112;
        __int16 v25 = v19;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "  Found bad alias, it was my phone number: %@ => %@",  (uint8_t *)&v22,  0x16u);
      }

      *(_BYTE *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL) = 1;
      [*(id *)(a1 + 32) addObject:v4];
      id v15 = 0LL;
    }

    else
    {
      id v15 = v3;
    }
  }

  else
  {
    id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog accountCleanup](&OBJC_CLASS___IMRGLog, "accountCleanup"));
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      int v22 = 138412546;
      id v23 = v4;
      __int16 v24 = 2112;
      __int16 v25 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "  Found bad alias: %@ => %@",  (uint8_t *)&v22,  0x16u);
    }

    id v15 = 0LL;
    *(_BYTE *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL) = 1;
  }

LABEL_29:
  return v15;
}

id sub_100162154(id a1, id a2)
{
  id v2 = a2;
  else {
    id v3 = v2;
  }

  return v3;
}

id sub_1001621A0(id a1, id a2)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([a2 objectForKey:kIDSServiceDefaultsAliasKey]);
  if ([v2 length]
    && ([v2 isEqualToIgnoringCase:kIDSServiceDefaultsSentinelAlias] & 1) == 0)
  {
    if ((IMStringIsPhoneNumber(v2) & 1) != 0)
    {
      uint64_t v4 = IMCanonicalizeFormattedString(v2, 3LL);
      id v5 = (id)objc_claimAutoreleasedReturnValue(v4);
    }

    else
    {
      id v5 = v2;
    }

    id v3 = v5;
  }

  else
  {
    id v3 = 0LL;
  }

  return v3;
}

BOOL sub_10016222C(id a1, IDSPseudonym *a2)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(-[IDSPseudonym properties](a2, "properties"));
  unsigned __int8 v3 = [v2 hasBeenExpiredForAtLeast:IDSPseudonymMaxExpiredAgeInSeconds];

  return v3;
}

void sub_1001625C4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_100162614(id a1, IDSDAccount *a2)
{
}

void sub_10016261C(uint64_t a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, void *a7)
{
  id v12 = a2;
  id v37 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a7;
  uint64_t v16 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained(v16);

  if (WeakRetained)
  {
    id v18 = objc_loadWeakRetained(v16);
    uint64_t v19 = v18;
    if (!v12 || !v14) {
      goto LABEL_22;
    }
    id v20 = (void *)objc_claimAutoreleasedReturnValue([v18 service]);
    NSErrorUserInfoKey v21 = (void *)objc_claimAutoreleasedReturnValue([v20 queryService]);
    if ([v14 isEqualToString:v21])
    {
      int v22 = (void *)objc_claimAutoreleasedReturnValue([v19 aliases]);
      id v23 = (void *)objc_claimAutoreleasedReturnValue([v12 unprefixedURI]);
      unsigned int v24 = [v22 containsObject:v23];

      if (v24)
      {
        uint64_t v25 = OSLogHandleForIDSCategory("MessageService");
        id v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138413058;
          *(void *)&uint8_t buf[4] = v14;
          *(_WORD *)&buf[12] = 2112;
          *(void *)&buf[14] = v12;
          *(_WORD *)&buf[22] = 2112;
          id v44 = @"YES";
          __int16 v45 = 2112;
          id v46 = v15;
          _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "Received IDQueryCompletedWithFromURI for service %@ fromURI %@ isRelevant? %@  errors %@",  buf,  0x2Au);
        }

        if (os_log_shim_legacy_logging_enabled(v27)
          && _IDSShouldLog(0LL, @"MessageService"))
        {
          __int16 v35 = @"YES";
          id v36 = v15;
          id v33 = v14;
          id v34 = v12;
          _IDSLogV( 0LL,  @"IDSFoundation",  @"MessageService",  @"Received IDQueryCompletedWithFromURI for service %@ fromURI %@ isRelevant? %@  errors %@");
        }

        *(void *)buf = 0LL;
        *(void *)&uint8_t buf[8] = buf;
        *(void *)&uint8_t buf[16] = 0x2020000000LL;
        LOBYTE(v44) = 0;
        uint64_t v39 = 0LL;
        __int128 v40 = &v39;
        uint64_t v41 = 0x2020000000LL;
        char v42 = 0;
        v38[0] = _NSConcreteStackBlock;
        v38[1] = 3221225472LL;
        v38[2] = sub_1001629CC;
        v38[3] = &unk_1008FBDA8;
        v38[4] = v19;
        v38[5] = &v39;
        v38[6] = buf;
        objc_msgSend(v15, "enumerateKeysAndObjectsUsingBlock:", v38, v33, v34, v35, v36, v37);
        if (*(_BYTE *)(*(void *)&buf[8] + 24LL))
        {
          id v28 = (void *)objc_claimAutoreleasedReturnValue( +[IDSRegistrationReasonTracker sharedInstance]( &OBJC_CLASS___IDSRegistrationReasonTracker,  "sharedInstance"));
          __int16 v29 = (void *)objc_claimAutoreleasedReturnValue([v19 userUniqueIdentifier]);
          [v28 setPNRReason:11 forUserUniqueIdentifier:v29];

          id v30 = (void *)objc_claimAutoreleasedReturnValue([v19 primaryAccount]);
          id v31 = v30;
          if (v30) {
            [v30 reIdentify];
          }
          else {
            [v19 reIdentify];
          }
        }

        else
        {
          if (!*((_BYTE *)v40 + 24))
          {
LABEL_21:
            _Block_object_dispose(&v39, 8);
            _Block_object_dispose(buf, 8);
            goto LABEL_22;
          }

          uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([v19 primaryAccount]);
          id v31 = v32;
          if (v32) {
            [v32 reregister];
          }
          else {
            [v19 reregister];
          }
        }

        goto LABEL_21;
      }
    }

    else
    {
    }

void sub_10016297C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1001629CC(uint64_t a1, uint64_t a2, void *a3, BOOL *a4)
{
  id v6 = a3;
  unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue([v6 domain]);
  unsigned int v8 = [v7 isEqualToString:FTErrorDomain];

  if (!v8) {
    goto LABEL_25;
  }
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v6 userInfo]);
  BOOL v10 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKey:off_1009B6A70]);

  id v11 = [v6 code];
  if (v11 == (id)6003)
  {
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      unsigned int v37 = [v6 code];
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Query failed with %d  -  Warning", buf, 8u);
    }

    id v15 = (void *)objc_claimAutoreleasedReturnValue(+[IMLockdownManager sharedInstance](&OBJC_CLASS___IMLockdownManager, "sharedInstance"));
    if ([v15 isInternalInstall])
    {
      char v16 = IMGetCachedDomainBoolForKey(@"com.apple.conference", @"suppressServerAlerts");

      uint64_t v17 = (void *)qword_1009BEBE8;
      if (!qword_1009BEBE8)
      {
LABEL_22:
        if ((v16 & 1) != 0) {
          goto LABEL_24;
        }
LABEL_23:
        id v20 = objc_alloc_init(&OBJC_CLASS___NSDate);
        NSErrorUserInfoKey v21 = (void *)qword_1009BEBE8;
        qword_1009BEBE8 = (uint64_t)v20;

        id v23 = +[NSBundle bundleForClass:]( &OBJC_CLASS___NSBundle,  "bundleForClass:",  objc_opt_class(*(void *)(a1 + 32), v22));
        unsigned int v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
        uint64_t v25 = IMLocalizedStringFromTableInBundle( @"iMessage Failed",  @"IdentityServicesLocalizable",  v24,  @"Error title for date and time misconfiguration");
        __int16 v35 = (void *)objc_claimAutoreleasedReturnValue(v25);
        uint64_t v26 = IMLocalizedStringFromTableInBundle( @"Your Date & Time settings need to be updated.",  @"IdentityServicesLocalizable",  v24,  @"Error message body for date and time configuration");
        uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
        uint64_t v28 = IMLocalizedStringFromTableInBundle( @"Settings",  @"IdentityServicesLocalizable",  v24,  @"Settings Button Title");
        __int16 v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
        uint64_t v30 = IMLocalizedStringFromTableInBundle( @"OK",  @"IdentityServicesLocalizable",  v24,  @"OK Button Title");
        id v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
        uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue( +[IMUserNotification userNotificationWithIdentifier:title:message:defaultButton:alternateButton:otherButton:]( &OBJC_CLASS___IMUserNotification,  "userNotificationWithIdentifier:title:message:defaultButton:alternateButton:otherButton:",  @"ServerAlerts",  v35,  v27,  v31,  v29,  0LL));
        [v32 setShowInLockScreen:1];
        id v33 = (void *)objc_claimAutoreleasedReturnValue( +[IMUserNotificationCenter sharedInstance]( &OBJC_CLASS___IMUserNotificationCenter,  "sharedInstance"));
        [v33 addUserNotification:v32 listener:0 completionHandler:&stru_1008FBD80];

        goto LABEL_24;
      }
    }

    else
    {

      uint64_t v17 = (void *)qword_1009BEBE8;
      if (!qword_1009BEBE8) {
        goto LABEL_23;
      }
      char v16 = 0;
    }

    [v17 timeIntervalSinceNow];
    if (fabs(v19) <= 3600.0) {
      goto LABEL_24;
    }
    goto LABEL_22;
  }

  if (v11 == (id)6005)
  {
    uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      unsigned int v37 = [v6 code];
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Query failed; refreshing credentials {error code: %d}",
        buf,
        8u);
    }

    uint64_t v13 = *(void *)(a1 + 48);
    goto LABEL_18;
  }

  if (v11 == (id)6006)
  {
    id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      unsigned int v37 = [v6 code];
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Query failed; re-registering {error code: %d}",
        buf,
        8u);
    }

    uint64_t v13 = *(void *)(a1 + 40);
LABEL_18:
    *(_BYTE *)(*(void *)(v13 + 8) + 24LL) = 1;
  }

void sub_100162E14(id a1, IMUserNotification *a2)
{
  if (-[IMUserNotification response](a2, "response") == (id)1)
  {
    uint64_t v4 = -[NSURL initWithString:]( objc_alloc(&OBJC_CLASS___NSURL),  "initWithString:",  @"prefs:root=General&path=DATE_AND_TIME");
    if (v4)
    {
      id v2 = objc_msgSend( (id)IMWeakLinkClass(@"LSApplicationWorkspace", @"MobileCoreServices"),  "defaultWorkspace");
      unsigned __int8 v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
      [v3 openSensitiveURL:v4 withOptions:0];
    }
  }

id sub_100163210(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKey:kIDSServiceDefaultsAliasKey]);
  if (([*(id *)(a1 + 32) shouldRegisterUsingDSHandle] & 1) != 0
    || ([v4 _appearsToBeDSID] & 1) == 0)
  {
    id v6 = [v3 mutableCopy];
    if ([v4 isEqualToIgnoringCase:kIDSServiceDefaultsSentinelAlias])
    {
      [v6 setObject:&__kCFBooleanFalse forKey:kIDSServiceDefaultsAliasIsUserVisibleKey];
    }

    else
    {
      unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKey:kIDSServiceDefaultsInvisibleAliasesKey]);
      if ([v7 count]) {
        uint64_t v8 = [v7 containsObject:v4] ^ 1;
      }
      else {
        uint64_t v8 = 1LL;
      }
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v8));
      [v6 setObject:v9 forKey:kIDSServiceDefaultsAliasIsUserVisibleKey];
    }

    else {
      id v10 = [v6 copy];
    }
    id v5 = v10;
  }

  else
  {
    id v5 = 0LL;
  }

  return v5;
}

id sub_100164EA4(id a1, id a2)
{
  return [a2 objectForKey:kIDSServiceDefaultsAliasKey];
}

id sub_100164F74(id a1, NSString *a2)
{
  return -[NSString _stripFZIDPrefix](a2, "_stripFZIDPrefix");
}

LABEL_76:
  }

  else
  {
    id v10 = 0LL;
  }

  return v10;
}

                if (v20 == 13 || !v20)
                {
                  __int16 v57 = vdupq_n_s64(1uLL);
                  v57.i64[0] = var2;
                  *(int64x2_t *)&self->_totalBytesSent = vaddq_s64(*(int64x2_t *)&self->_totalBytesSent, v57);
                  goto LABEL_128;
                }

                goto LABEL_39;
              }
            }
          }
        }
      }

      _IDSLinkPacketBufferRelease( "/Library/Caches/com.apple.xbs/Sources/IdentityServices_Swift/IDSAgent/IDSLinkManager.m",  2077LL,  a3);
      id v20 = 6LL;
LABEL_39:
      ++self->_totalPacketsDropped;
      goto LABEL_128;
    }
  }

  if (!a3->var10) {
    goto LABEL_101;
  }
  currentDefaultDeviceLinkType = self->_currentDefaultDeviceLinkType;
  if (currentDefaultDeviceLinkType - 3 > 1)
  {
    if (currentDefaultDeviceLinkType == 1)
    {
      if (!a3->var11) {
        goto LABEL_101;
      }
      __int128 v48 = 0LL;
      if (v10)
      {
        cbuuidToLinks = self->_cbuuidToLinks;
        __int128 v40 = 0LL;
        id v50 = 0LL;
        if (cbuuidToLinks)
        {
          __int128 v51 = (id)CFDictionaryGetValue((CFDictionaryRef)cbuuidToLinks, v10);
          __int128 v48 = v51;
          if (v51)
          {
            __int128 v52 = (id)CFDictionaryGetValue( (CFDictionaryRef)v51,  @"IDSLinkBTDatagramKey");
            id v50 = v52;
            if (v52 && [v52 state] == (id)4)
            {
              __int128 v40 = v50;
              id v50 = v40;
            }

            else
            {
              __int128 v40 = 0LL;
            }
          }

          else
          {
            __int128 v40 = 0LL;
            id v50 = 0LL;
          }
        }
      }

      else
      {
        __int128 v40 = 0LL;
        id v50 = 0LL;
      }

      if (!v40) {
        goto LABEL_101;
      }
    }

    else
    {
      if (currentDefaultDeviceLinkType != 2 || !a3->var7) {
        goto LABEL_101;
      }
      uint64_t v38 = 0LL;
      if (v10)
      {
        uint64_t v39 = self->_cbuuidToLinks;
        __int128 v40 = 0LL;
        uint64_t v41 = 0LL;
        if (v39)
        {
          char v42 = (id)CFDictionaryGetValue((CFDictionaryRef)v39, v10);
          uint64_t v38 = v42;
          if (v42)
          {
            __int128 v43 = (id)CFDictionaryGetValue( (CFDictionaryRef)v42,  @"IDSLinkGlobalKey");
            uint64_t v41 = v43;
            if (v43 && [v43 state] == (id)4)
            {
              __int128 v40 = v41;
              id v44 = OSLogHandleForTransportCategory("LinkManager");
              __int16 v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v44);
              if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138412290;
                v85 = (int64_t)v40;
                _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEFAULT,  "use %@ for cloud enabled packet.",  buf,  0xCu);
              }

              __int128 v47 = os_log_shim_legacy_logging_enabled(v46);
              if ((_DWORD)v47)
              {
                if (_IDSShouldLogTransport(v47))
                {
                  __int128 v81 = v40;
                  _IDSLogTransport(@"LinkManager", @"IDS", @"use %@ for cloud enabled packet.");
                  if (_IDSShouldLog(0LL, @"LinkManager"))
                  {
                    __int128 v81 = v40;
                    _IDSLogV( 0LL,  @"IDSFoundation",  @"LinkManager",  @"use %@ for cloud enabled packet.");
                  }
                }
              }

              uint64_t v41 = v40;
            }

            else
            {
              __int128 v40 = 0LL;
            }
          }

          else
          {
            __int128 v40 = 0LL;
            uint64_t v41 = 0LL;
          }
        }
      }

      else
      {
        __int128 v40 = 0LL;
        uint64_t v41 = 0LL;
      }

      if (!v40) {
        goto LABEL_101;
      }
    }

    if (!a3->var8) {
      goto LABEL_94;
    }
    id v58 = 0LL;
    if (v10 && self->_deviceIDToCurrentLink) {
      id v58 = (id)CFDictionaryGetValue((CFDictionaryRef)self->_deviceIDToCurrentLink, v10);
    }
    if (v40 == v58)
    {
LABEL_94:
      uint64_t v60 = 0LL;
    }

    else
    {
      id v59 = 0LL;
      if (v10 && self->_deviceIDToCurrentLink) {
        id v59 = (void *)CFDictionaryGetValue((CFDictionaryRef)self->_deviceIDToCurrentLink, v10);
      }
      uint64_t v60 = v59;
    }

    if (objc_msgSend(v40, "state", v81) == (id)4)
    {
      if (v60)
      {
        unsigned int v61 = _IDSLinkPacketBufferClone( "/Library/Caches/com.apple.xbs/Sources/IdentityServices_Swift/IDSAgent/IDSLinkManager.m",  2142LL,  a3);
        uint64_t v62 = 0;
      }

      else
      {
        unsigned int v61 = 0LL;
        uint64_t v62 = 1;
      }

      goto LABEL_106;
    }

    goto LABEL_129;
  }

  if (a3->var7)
  {
LABEL_101:
    if (!v10
      || (v63 = self->_deviceIDToCurrentLink) == 0LL
      || (id v64 = (id)CFDictionaryGetValue((CFDictionaryRef)v63, v10)) == 0LL)
    {
      ++self->_totalPacketsDropped;
      id v65 = OSLogHandleForIDSCategory("LinkManager");
      uint64_t v66 = (os_log_s *)objc_claimAutoreleasedReturnValue(v65);
      if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v85 = (int64_t)v10;
        _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEFAULT, "no current link for %@", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled(v67)
        && _IDSShouldLog(0LL, @"LinkManager"))
      {
        __int128 v81 = v10;
        _IDSLogV(0LL, @"IDSFoundation", @"LinkManager", @"no current link for %@");
      }

      if ((objc_msgSend(v10, "isEqualToString:", kIDSDefaultPairedDeviceID, v81) & 1) == 0 && !a3->var7)
      {
        id v68 = OSLogHandleForTransportCategory("LinkManager");
        v69 = (os_log_s *)objc_claimAutoreleasedReturnValue(v68);
        if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          v85 = (int64_t)v10;
          _os_log_impl( (void *)&_mh_execute_header,  v69,  OS_LOG_TYPE_DEFAULT,  "No current link for %@ -- asking WiProx to connect.",  buf,  0xCu);
        }

        v71 = os_log_shim_legacy_logging_enabled(v70);
        if ((_DWORD)v71)
        {
          if (_IDSShouldLogTransport(v71))
          {
            id v83 = v10;
            _IDSLogTransport( @"LinkManager",  @"IDS",  @"No current link for %@ -- asking WiProx to connect.");
            if (_IDSShouldLog(0LL, @"LinkManager"))
            {
              id v83 = v10;
              _IDSLogV( 0LL,  @"IDSFoundation",  @"LinkManager",  @"No current link for %@ -- asking WiProx to connect.");
            }
          }
        }

        id v72 = (void *)objc_claimAutoreleasedReturnValue(+[IDSWPLinkManager sharedInstance](&OBJC_CLASS___IDSWPLinkManager, "sharedInstance", v83));
        [v72 connectToPeer:v10];
      }

      uint64_t v60 = 0LL;
      __int128 v40 = 0LL;
      goto LABEL_126;
    }

    __int128 v40 = v64;
    uint64_t v60 = 0LL;
    if ([v64 state] == (id)4)
    {
      uint64_t v62 = 1;
      unsigned int v61 = 0LL;
LABEL_106:
      if (v11) {
        kdebug_trace(722010172LL, 0LL, 0LL, 0LL, 0LL);
      }
      id v20 = -[IDSLinkManager _sendPacketBuffer:toDeviceUniqueID:cbuuid:link:]( self,  "_sendPacketBuffer:toDeviceUniqueID:cbuuid:link:",  a3,  v8,  v10,  v40,  v81);
      if ((v62 & 1) != 0)
      {
        if (v61) {
          _IDSLinkPacketBufferRelease( "/Library/Caches/com.apple.xbs/Sources/IdentityServices_Swift/IDSAgent/IDSLinkManager.m",  2158LL,  v61);
        }
      }

      else
      {
        __int128 v77 = OSLogHandleForTransportCategory("LinkManager");
        __int128 v78 = (os_log_s *)objc_claimAutoreleasedReturnValue(v77);
        if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          v85 = (int64_t)v60;
          _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEFAULT, "use %@ for control message", buf, 0xCu);
        }

        __int128 v80 = os_log_shim_legacy_logging_enabled(v79);
        if ((_DWORD)v80)
        {
          if (_IDSShouldLogTransport(v80))
          {
            id v82 = v60;
            _IDSLogTransport(@"LinkManager", @"IDS", @"use %@ for control message");
            if (_IDSShouldLog(0LL, @"LinkManager"))
            {
              id v82 = v60;
              _IDSLogV(0LL, @"IDSFoundation", @"LinkManager", @"use %@ for control message");
            }
          }
        }

        if (!-[IDSLinkManager _sendPacketBuffer:toDeviceUniqueID:cbuuid:link:]( self,  "_sendPacketBuffer:toDeviceUniqueID:cbuuid:link:",  v61,  v8,  v10,  v60,  v82)) {
          id v20 = 0LL;
        }
      }

      goto LABEL_127;
    }

id sub_100167098(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 userUniqueIdentifier]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userUniqueIdentifier]);
  id v5 = [v3 isEqualToString:v4];

  return v5;
}

LABEL_68:
      id v20 = (char *)v20 + 1;
    }

    while (v18 != v20);
    uint64_t v18 = [obj countByEnumeratingWithState:&v170 objects:v180 count:16];
    if (v18) {
      continue;
    }
    break;
  }

void sub_100168AAC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 service]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 pushTopic]);
  unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue([v4 broadcasterForTopic:v6 messageContext:*(void *)(a1 + 32)]);

  if (IMShouldLog(@"Registration", 0LL) && v7)
  {
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v11 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Broadcasting registration status info changes",  v11,  2u);
    }
  }

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueID]);
  else {
    uint64_t v10 = *(void *)(a1 + 40);
  }
  [v7 account:v9 registrationStatusInfoChanged:v10];
}

void sub_100168BE0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 service]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 pushTopic]);
  unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue([v4 broadcasterForTopic:v6 messageContext:*(void *)(a1 + 32)]);

  if (IMShouldLog(@"Registration", 0LL) && v7)
  {
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Broadcasting aliases changes", v11, 2u);
    }
  }

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueID]);
  else {
    uint64_t v10 = *(void *)(a1 + 40);
  }
  [v7 account:v9 aliasesChanged:v10];
}

void sub_100168D14(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 service]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 pushTopic]);
  unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue([v4 registrationBroadcasterForTopic:v6 messageContext:*(void *)(a1 + 32)]);

  if (IMShouldLog(@"Registration", 0LL) && v7)
  {
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Broadcasting vetted aliases changes", v11, 2u);
    }
  }

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueID]);
  else {
    uint64_t v10 = *(void *)(a1 + 40);
  }
  [v7 account:v9 vettedAliasesChanged:v10];
}

void sub_100168E48(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 service]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 pushTopic]);
  unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue([v4 registrationBroadcasterForTopic:v6 messageContext:*(void *)(a1 + 32)]);

  if (IMShouldLog(@"Registration", 0LL) && v7)
  {
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Broadcasting profile changes", v11, 2u);
    }
  }

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueID]);
  else {
    uint64_t v10 = *(void *)(a1 + 40);
  }
  [v7 account:v9 profileChanged:v10];
}

void sub_100168F7C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 service]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 pushTopic]);
  unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue([v4 registrationBroadcasterForTopic:v6 messageContext:*(void *)(a1 + 32)]);

  if (IMShouldLog(@"Registration", 0LL) && v7)
  {
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Broadcasting loginAs changes", v11, 2u);
    }
  }

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueID]);
  else {
    uint64_t v10 = *(void *)(a1 + 40);
  }
  [v7 account:v9 loginChanged:v10];
}

void sub_1001690B0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 service]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 pushTopic]);
  unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue([v4 registrationBroadcasterForTopic:v6 messageContext:*(void *)(a1 + 32)]);

  if (IMShouldLog(@"Registration", 0LL) && v7)
  {
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Broadcasting displayName changes", v11, 2u);
    }
  }

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueID]);
  else {
    uint64_t v10 = *(void *)(a1 + 40);
  }
  [v7 account:v9 displayNameChanged:v10];
}

void sub_1001691E4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 service]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 pushTopic]);
  unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue([v4 broadcasterForTopic:v6 messageContext:*(void *)(a1 + 32)]);

  if (IMShouldLog(@"Registration", 0LL) && v7)
  {
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Broadcasting pseudonym changes", v11, 2u);
    }
  }

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueID]);
  else {
    uint64_t v10 = *(void *)(a1 + 40);
  }
  [v7 account:v9 pseudonymsChanged:v10];
}

void sub_100169B04(uint64_t a1, void *a2)
{
  id v8 = a2;
  id v3 = objc_autoreleasePoolPush();
  uint64_t v4 = *(void **)(a1 + 32);
  if (!v4
    || (id v5 = (void *)objc_claimAutoreleasedReturnValue([v8 service]),
        id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 identifier]),
        unsigned int v7 = [v4 containsObject:v6],
        v6,
        v5,
        v7))
  {
    [v8 _writeAccountDefaults:*(void *)(a1 + 40) force:*(unsigned __int8 *)(a1 + 48)];
  }

  objc_autoreleasePoolPop(v3);
}

void sub_10016A044(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueID]);
    int v10 = 138412290;
    id v11 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Calling out to linked account: %@",  (uint8_t *)&v10,  0xCu);
  }

  id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 service]);
  unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue([v6 identifier]);

  id v8 = (void *)objc_claimAutoreleasedReturnValue([v3 service]);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 pushTopic]);

  if (v7) {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), kIDSServiceDefaultsServiceNameKey, v7);
  }
  if (v9) {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), kIDSServiceDefaultsPushTopicKey, v9);
  }
  [v3 _updateAccountWithAccountInfo:*(void *)(a1 + 32)];
}

id sub_10016A808(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) addObject:a2];
}

void sub_10016B374(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = -[NSMutableDictionary initWithDictionary:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithDictionary:",  *(void *)(a1 + 32));
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) service]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 identifier]);

    if (v6) {
      CFDictionarySetValue((CFMutableDictionaryRef)v4, IDSDevicePropertyService, v6);
    }

    unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) uniqueID]);
    [v3 account:v7 localDeviceAdded:v4];

    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) service]);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 identifier]);
    if (([v9 isEqualToIgnoringCase:@"com.apple.private.alloy.health.sync.classc"] & 1) == 0)
    {
      int v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) service]);
      id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 identifier]);
      if (([v11 isEqualToIgnoringCase:@"com.apple.private.alloy.fitnessfriends.icloud"] & 1) == 0)
      {
        uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) service]);
        id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 identifier]);
        unsigned __int8 v16 = [v15 isEqualToIgnoringCase:@"com.apple.private.alloy.fitnessfriends.imessage"];

        if ((v16 & 1) == 0)
        {
LABEL_11:

          goto LABEL_12;
        }

void sub_10016B6B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!v3) {
    goto LABEL_9;
  }
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uniqueID]);
  [v3 account:v4 localDeviceRemoved:*(void *)(a1 + 40)];

  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) service]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 identifier]);
  if (([v6 isEqualToIgnoringCase:@"com.apple.private.alloy.health.sync.classc"] & 1) == 0)
  {
    unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) service]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 identifier]);
    if (([v8 isEqualToIgnoringCase:@"com.apple.private.alloy.fitnessfriends.icloud"] & 1) == 0)
    {
      id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) service]);
      id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 identifier]);
      unsigned __int8 v13 = [v12 isEqualToIgnoringCase:@"com.apple.private.alloy.fitnessfriends.imessage"];

      if ((v13 & 1) == 0) {
        goto LABEL_9;
      }
      goto LABEL_6;
    }
  }

LABEL_6:
  uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog healthDebugging](&OBJC_CLASS___IMRGLog, "healthDebugging"));
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) smallDescription]);
    int v14 = 138412546;
    id v15 = v3;
    __int16 v16 = 2112;
    int v17 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Broadcaster for localDeviceRemoved %@ on account %@",  (uint8_t *)&v14,  0x16u);
  }

LABEL_9:
}

void sub_10016B920(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uniqueID]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dependentRegistrations]);
  [v3 account:v4 dependentDevicesUpdated:v5];

  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) service]);
  unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue([v6 identifier]);
  if (([v7 isEqualToIgnoringCase:@"com.apple.private.alloy.health.sync.classc"] & 1) == 0)
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) service]);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 identifier]);
    if (([v9 isEqualToIgnoringCase:@"com.apple.private.alloy.fitnessfriends.icloud"] & 1) == 0)
    {
      id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) service]);
      unsigned __int8 v13 = (void *)objc_claimAutoreleasedReturnValue([v12 identifier]);
      unsigned __int8 v14 = [v13 isEqualToIgnoringCase:@"com.apple.private.alloy.fitnessfriends.imessage"];

      if ((v14 & 1) == 0) {
        goto LABEL_8;
      }
      goto LABEL_5;
    }
  }

LABEL_5:
  int v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog healthDebugging](&OBJC_CLASS___IMRGLog, "healthDebugging"));
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) smallDescription]);
    int v15 = 138412546;
    id v16 = v3;
    __int16 v17 = 2112;
    id v18 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Broadcaster for didUpdatePairedDevice %@ on account %@",  (uint8_t *)&v15,  0x16u);
  }

LABEL_8:
}

void sub_10016BC18(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) service]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 pushTopic]);
    int v9 = 138412290;
    int v10 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Notifying %@ delegate of protocol changes to device",  (uint8_t *)&v9,  0xCu);
  }

  unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uniqueID]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dependentRegistrations]);
  [v3 account:v7 dependentDevicesUpdated:v8];
}

void sub_10016C400( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_10016C420(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10016C430(uint64_t a1)
{
}

void sub_10016C438(uint64_t a1)
{
  if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL))
  {
    id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) daemonClients]);
    [v2 removeObject:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)];
  }

void sub_10016CDC4(id a1, NSArray *a2, NSError *a3)
{
  id v3 = a2;
  id v65 = objc_alloc_init(&OBJC_CLASS___IDSQualifiedContactsMetric);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPublicIdentityCache sharedInstance](&OBJC_CLASS___IDSPublicIdentityCache, "sharedInstance"));
  id v64 = (void *)objc_claimAutoreleasedReturnValue( [v4 recentURIsWithinTimeInterval:IDSServiceNameiMessage forService:0 error:2592000.0]);

  id v5 = (void *)objc_claimAutoreleasedReturnValue(-[NSArray __imArrayByFilteringWithBlock:](v3, "__imArrayByFilteringWithBlock:", &stru_1008FBEE8));
  uint64_t v66 = v3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue(-[NSArray __imArrayByFilteringWithBlock:](v3, "__imArrayByFilteringWithBlock:", &stru_1008FBF08));
  __int128 v87 = 0u;
  __int128 v88 = 0u;
  __int128 v89 = 0u;
  __int128 v90 = 0u;
  id v7 = v5;
  id v8 = [v7 countByEnumeratingWithState:&v87 objects:v99 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = 0LL;
    uint64_t v11 = *(void *)v88;
    do
    {
      for (i = 0LL; i != v9; i = (char *)i + 1)
      {
        if (*(void *)v88 != v11) {
          objc_enumerationMutation(v7);
        }
        unsigned __int8 v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((void *)&v87 + 1) + 8 * (void)i), "uri", v64));
        unsigned __int8 v14 = (void *)objc_claimAutoreleasedReturnValue([v13 tokenFreeURI]);
        id v15 = [v14 IDSIDType];

        if (!v15) {
          ++v10;
        }
      }

      id v9 = [v7 countByEnumeratingWithState:&v87 objects:v99 count:16];
    }

    while (v9);
  }

  else
  {
    uint64_t v10 = 0LL;
  }

  __int128 v85 = 0u;
  __int128 v86 = 0u;
  __int128 v83 = 0u;
  __int128 v84 = 0u;
  id v16 = v6;
  id v17 = [v16 countByEnumeratingWithState:&v83 objects:v98 count:16];
  if (v17)
  {
    id v18 = v17;
    uint64_t v19 = 0LL;
    uint64_t v20 = *(void *)v84;
    do
    {
      for (j = 0LL; j != v18; j = (char *)j + 1)
      {
        if (*(void *)v84 != v20) {
          objc_enumerationMutation(v16);
        }
        uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((void *)&v83 + 1) + 8 * (void)j), "uri", v64));
        id v23 = (void *)objc_claimAutoreleasedReturnValue([v22 tokenFreeURI]);
        id v24 = [v23 IDSIDType];

        if (!v24) {
          ++v19;
        }
      }

      id v18 = [v16 countByEnumeratingWithState:&v83 objects:v98 count:16];
    }

    while (v18);
  }

  else
  {
    uint64_t v19 = 0LL;
  }

  id v67 = v16;

  uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
  uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v25 persistenceManager]);

  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
  uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v27 registeredLocalURIsOnService:IDSServiceNameiMessageLite]);

  __int128 v81 = 0u;
  __int128 v82 = 0u;
  __int128 v79 = 0u;
  __int128 v80 = 0u;
  id obj = v7;
  id v29 = [obj countByEnumeratingWithState:&v79 objects:v97 count:16];
  if (v29)
  {
    id v30 = v29;
    uint64_t v31 = 0LL;
    uint64_t v32 = *(void *)v80;
    do
    {
      for (k = 0LL; k != v30; k = (char *)k + 1)
      {
        if (*(void *)v80 != v32) {
          objc_enumerationMutation(obj);
        }
        BOOL v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((void *)&v79 + 1) + 8 * (void)k), "uri", v64));
        unsigned int v35 = [v26 hasUsableSenderKeyFor:v34 fromAny:v28];

        v31 += v35;
      }

      id v30 = [obj countByEnumeratingWithState:&v79 objects:v97 count:16];
    }

    while (v30);
  }

  else
  {
    uint64_t v31 = 0LL;
  }

  uint64_t v70 = v26;

  __int128 v77 = 0u;
  __int128 v78 = 0u;
  __int128 v75 = 0u;
  __int128 v76 = 0u;
  id v68 = v67;
  id v36 = [v68 countByEnumeratingWithState:&v75 objects:v96 count:16];
  if (v36)
  {
    id v37 = v36;
    uint64_t v38 = 0LL;
    uint64_t v39 = *(void *)v76;
    do
    {
      for (m = 0LL; m != v37; m = (char *)m + 1)
      {
        if (*(void *)v76 != v39) {
          objc_enumerationMutation(v68);
        }
        uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((void *)&v75 + 1) + 8 * (void)m), "uri", v64));
        unsigned int v42 = [v70 hasUsableSenderKeyFor:v41 fromAny:v28];

        v38 += v42;
      }

      id v37 = [v68 countByEnumeratingWithState:&v75 objects:v96 count:16];
    }

    while (v37);
  }

  else
  {
    uint64_t v38 = 0LL;
  }

  __int128 v73 = 0u;
  __int128 v74 = 0u;
  __int128 v71 = 0u;
  __int128 v72 = 0u;
  id v43 = v64;
  id v44 = [v43 countByEnumeratingWithState:&v71 objects:v95 count:16];
  if (v44)
  {
    id v45 = v44;
    uint64_t v46 = 0LL;
    uint64_t v47 = *(void *)v72;
    do
    {
      for (n = 0LL; n != v45; n = (char *)n + 1)
      {
        if (*(void *)v72 != v47) {
          objc_enumerationMutation(v43);
        }
        v46 += objc_msgSend( v70,  "hasUsableSenderKeyFor:fromAny:",  *(void *)(*((void *)&v71 + 1) + 8 * (void)n),  v28,  v64);
      }

      id v45 = [v43 countByEnumeratingWithState:&v71 objects:v95 count:16];
    }

    while (v45);
  }

  else
  {
    uint64_t v46 = 0LL;
  }

  id v49 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v10));
  [v65 setQualifiedEmergencyHandles:v49];

  id v50 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v31));
  [v65 setQualifiedEmergencyHandlesIML:v50];

  __int128 v51 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [obj count]));
  [v65 setEmergencyHandlesCount:v51];

  __int128 v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v19 + v10));
  [v65 setQualifiedPrimaryHandles:v52];

  __int16 v53 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v38 + v31));
  [v65 setQualifiedPrimaryHandlesIML:v53];

  __int128 v54 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  (char *)[obj count] + (void)objc_msgSend(v68, "count")));
  [v65 setPrimaryHandlesCount:v54];

  __int16 v55 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [v68 count]));
  [v65 setFamilyHandlesCount:v55];

  CFErrorRef v56 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [v43 count]));
  [v65 setQualifiedHandlesCount:v56];

  __int16 v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v46));
  [v65 setQualifiedHandlesIML:v57];

  id v58 = objc_alloc_init(&OBJC_CLASS___IDSContactsUtilities);
  id v59 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( &OBJC_CLASS___NSNumber,  "numberWithInteger:",  -[IDSContactsUtilities countOfHandles](v58, "countOfHandles")));
  [v65 setHandlesCount:v59];

  uint64_t v60 = v70;
  unsigned int v61 = (void *)objc_claimAutoreleasedReturnValue([v70 lastQualifiedContactsMetric]);
  if (([v61 isEqual:v65] & 1) == 0)
  {
    uint64_t v62 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog xpc](&OBJC_CLASS___IDSFoundationLog, "xpc"));
    if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      id v92 = v65;
      __int16 v93 = 2112;
      v94 = v61;
      _os_log_impl( (void *)&_mh_execute_header,  v62,  OS_LOG_TYPE_DEFAULT,  "Capturing metric - current IDSQualifiedContactsMetric: %@ differs from last metric: %@",  buf,  0x16u);
    }

    v63 = (void *)objc_claimAutoreleasedReturnValue(+[IDSCoreAnalyticsLogger defaultLogger](&OBJC_CLASS___IDSCoreAnalyticsLogger, "defaultLogger"));
    [v63 logMetric:v65];

    uint64_t v60 = v70;
    [v70 updateQualifiedContactsCountWithMetric:v65];
  }
}

BOOL sub_10016D578(id a1, IDSOffGridContactInfo *a2)
{
  return -[IDSOffGridContactInfo type](a2, "type") == (id)1;
}

BOOL sub_10016D598(id a1, IDSOffGridContactInfo *a2)
{
  return -[IDSOffGridContactInfo type](a2, "type") == (id)2;
}

void sub_10016DE4C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountRepair]);
  [v2 repairAccounts];

  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deviceCertificationRepair]);
  [v3 recertifyDeviceIfNeeded];
}

id sub_10016DEA0(uint64_t a1)
{
  return [*(id *)(a1 + 32) kickMissedTemporaryAlerts];
}

id sub_10016DEA8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) checkRestorationState];
}

void sub_10016E6B0(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deviceCertificationRepair]);
  [v2 recertifyDeviceIfNeeded];

  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountRepair]);
  [v3 repairAccounts];

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountRepair]);
  [v4 setupPhoneNumberRepairTimer];

  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) SIMPhoneUserSynchronizer]);
  [v5 verifyState];
}

void sub_10016E788(uint64_t a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountSync]);
  [v1 noteShouldSynchronizePreferredAccount];
}

void sub_10016E8E0(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) SIMResponder]);
  [v2 handleRegistrationStateChanged:*(unsigned __int8 *)(a1 + 40)];

  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) heartbeatCenter]);
  [v3 noteRegistrationStateChanged];

  if (*(_BYTE *)(a1 + 40))
  {
    id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userAccountSynchronizer]);
    [v4 synchronize];
  }

void sub_10016E9D4(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountRepair]);
  [v2 setupPhoneNumberRepairTimer];

  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userAccountSynchronizer]);
  [v3 synchronize];
}

void sub_10016EAE4(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) registrationController]);
  [v2 SIM:*(void *)(a1 + 40) didDeactivateWithInfo:*(void *)(a1 + 48)];
}

void sub_10016EB38(id a1, id a2)
{
}

void sub_10016EC70(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___IDSSMSRegistrationCenter);
  id v2 = (void *)qword_1009BEBF8;
  qword_1009BEBF8 = (uint64_t)v1;
}

id sub_10016F6F8(id a1, IDSRegistration *a2)
{
  return -[IDSRegistration userUniqueIdentifier](a2, "userUniqueIdentifier");
}

void sub_10016FF48(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog sms](&OBJC_CLASS___IMRGLog, "sms"));
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    int v9 = 138412802;
    uint64_t v10 = v8;
    __int16 v11 = 2112;
    id v12 = v5;
    __int16 v13 = 2112;
    id v14 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Finished capturing AutoBugCapture diagnostics for high registration attempt rate { context: %@, sessionID: %@, error: %@ }",  (uint8_t *)&v9,  0x20u);
  }
}

void sub_100170494()
{
}

void sub_100170AFC()
{
}

void sub_100170C98(_Unwind_Exception *a1)
{
}

void sub_100171204(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog sms](&OBJC_CLASS___IMRGLog, "sms"));
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    int v9 = 138412802;
    uint64_t v10 = v8;
    __int16 v11 = 2112;
    id v12 = v5;
    __int16 v13 = 2112;
    id v14 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Finished capturing AutoBugCapture diagnostics for registration failure { context: %@, sessionID: %@, error: %@ }",  (uint8_t *)&v9,  0x20u);
  }
}

void sub_1001713C0(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[IMLockdownManager sharedInstance](&OBJC_CLASS___IMLockdownManager, "sharedInstance"));
  if ([v2 isInternalInstall])
  {
    int v3 = IMGetCachedDomainBoolForKey(@"com.apple.conference", @"suppressNonZeroRatedSMSNotifications");

    if (v3)
    {
      id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog sms](&OBJC_CLASS___IMRGLog, "sms"));
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Suppressing non-zero-rated SMS notification due to presence of internal deafult -- allowing SMS",  buf,  2u);
      }

      (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
      return;
    }
  }

  else
  {
  }

  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) systemMonitor]);
  unsigned __int8 v6 = [v5 isSetup];

  if ((v6 & 1) != 0)
  {
    __int128 v52 = 0u;
    __int128 v53 = 0u;
    __int128 v50 = 0u;
    __int128 v51 = 0u;
    id v7 = *(id *)(*(void *)(a1 + 32) + 16LL);
    id v8 = [v7 countByEnumeratingWithState:&v50 objects:v54 count:16];
    if (v8)
    {
      id v9 = v8;
      char v10 = 0;
      int v11 = 0;
      uint64_t v12 = *(void *)v51;
      do
      {
        for (i = 0LL; i != v9; i = (char *)i + 1)
        {
          if (*(void *)v51 != v12) {
            objc_enumerationMutation(v7);
          }
          id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v50 + 1) + 8 * (void)i) serviceType]);
          if ((IDSIsFaceTimeRegistrationServiceType(v14) & 1) != 0
            || (IDSIsCallingRegistrationServiceType(v14) & 1) != 0)
          {
            char v10 = 1;
          }

          else
          {
            v11 |= IDSIsiMessageRegistrationServiceType(v14);
          }
        }

        id v9 = [v7 countByEnumeratingWithState:&v50 objects:v54 count:16];
      }

      while (v9);
    }

    else
    {
      char v10 = 0;
      LOBYTE(v11) = 0;
    }

    id v24 = +[NSBundle bundleForClass:]( &OBJC_CLASS___NSBundle,  "bundleForClass:",  objc_opt_class(*(void *)(a1 + 32), v23));
    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(v24);
    if ((v11 & 1) != 0 && (v10 & 1) != 0)
    {
      uint64_t v25 = IMLocalizedStringFromTableInBundle( @"TURN_ON_IMESSAGE_AND_FACETIME",  @"IDSLocalizable",  v22,  @"SMS Registration alert title: FaceTime and iMessage");
      uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
      uint64_t v27 = IMLocalizedStringFromTableInBundle( @"IMESSAGE_FACETIME_SMS_CONSENT",  @"IDSLocalizable",  v22,  @"SMS Registration alert body: Your carrier may charge for SMS messages used to activate FaceTime and iMessage.");
      uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
      uint64_t v29 = IMLocalizedStringFromTableInBundle( @"IMESSAGE_FACETIME_SMS_PRIMARY",  @"IDSLocalizable",  v22,  @"SMS Registration alert primary action button - iMessage and FaceTime");
      id v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
      uint64_t v31 = @"IMESSAGE_FACETIME_SMS_DESTRUCTIVE";
      uint64_t v32 = @"SMS Registration alert destructive action button - iMessage and FaceTime";
    }

    else if ((v11 & 1) != 0)
    {
      uint64_t v33 = IMLocalizedStringFromTableInBundle( @"TURN_ON_IMESSAGE",  @"IDSLocalizable",  v22,  @"SMS Registration alert title: iMessage");
      uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(v33);
      uint64_t v34 = IMLocalizedStringFromTableInBundle( @"IMESSAGE_SMS_CONSENT",  @"IDSLocalizable",  v22,  @"SMS Registration alert body: Your carrier may charge for SMS messages used to activate iMessage.");
      uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(v34);
      uint64_t v35 = IMLocalizedStringFromTableInBundle( @"IMESSAGE_SMS_PRIMARY",  @"IDSLocalizable",  v22,  @"SMS Registration alert primary action button - iMessage Only");
      id v30 = (void *)objc_claimAutoreleasedReturnValue(v35);
      uint64_t v31 = @"IMESSAGE_SMS_DESTRUCTIVE";
      uint64_t v32 = @"SMS Registration alert destructive action button - iMessage Only";
    }

    else if ((v10 & 1) != 0)
    {
      uint64_t v36 = IMLocalizedStringFromTableInBundle( @"TURN_ON_FACETIME",  @"IDSLocalizable",  v22,  @"SMS Registration alert title: FaceTime");
      uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(v36);
      uint64_t v37 = IMLocalizedStringFromTableInBundle( @"FACETIME_SMS_CONSENT",  @"IDSLocalizable",  v22,  @"SMS Registration alert body: Your carrier may charge for SMS messages used to activate FaceTime.");
      uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(v37);
      uint64_t v38 = IMLocalizedStringFromTableInBundle( @"FACETIME_SMS_PRIMARY",  @"IDSLocalizable",  v22,  @"SMS Registration alert primary action button - FaceTime Only");
      id v30 = (void *)objc_claimAutoreleasedReturnValue(v38);
      uint64_t v31 = @"FACETIME_SMS_DESTRUCTIVE";
      uint64_t v32 = @"SMS Registration alert destructive action button - FaceTime Only";
    }

    else
    {
      uint64_t v39 = IMLocalizedStringFromTableInBundle( @"TURN_ON_ICLOUD",  @"IDSLocalizable",  v22,  @"SMS Registration alert title: iCloud");
      uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(v39);
      uint64_t v40 = IMLocalizedStringFromTableInBundle( @"ICLOUD_SMS_CONSENT",  @"IDSLocalizable",  v22,  @"SMS Registration alert body: Your carrier may charge for SMS messages used to activate iCloud.");
      uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(v40);
      uint64_t v41 = IMLocalizedStringFromTableInBundle( @"ICLOUD_SMS_PRIMARY",  @"IDSLocalizable",  v22,  @"SMS Registration alert primary action button - iCloud Only");
      id v30 = (void *)objc_claimAutoreleasedReturnValue(v41);
      uint64_t v31 = @"ICLOUD_SMS_DESTRUCTIVE";
      uint64_t v32 = @"SMS Registration alert destructive action button - iCloud Only";
    }

    uint64_t v42 = IMLocalizedStringFromTableInBundle(v31, @"IDSLocalizable", v22, v32);
    id v43 = (void *)objc_claimAutoreleasedReturnValue(v42);
    id v44 = (void *)objc_claimAutoreleasedReturnValue( +[IMUserNotification userNotificationWithIdentifier:title:message:defaultButton:defaultButtonStyle:alternateButton:alternateButtonStyle:otherButton:otherButtonStyle:]( &OBJC_CLASS___IMUserNotification,  "userNotificationWithIdentifier:title:message:defaultButton:defaultButtonStyle:alternateButton:alte rnateButtonStyle:otherButton:otherButtonStyle:",  @"Registration",  v26,  v28,  v30,  0LL,  v43,  0LL,  0LL,  0LL));
    [v44 setRequireUserInteraction:1];
    id v45 = (void *)objc_claimAutoreleasedReturnValue(+[IMUserNotificationCenter sharedInstance](&OBJC_CLASS___IMUserNotificationCenter, "sharedInstance"));
    v47[0] = _NSConcreteStackBlock;
    v47[1] = 3221225472LL;
    v47[2] = sub_100171AAC;
    v47[3] = &unk_1008FBFD0;
    uint64_t v46 = *(void **)(a1 + 40);
    v47[4] = *(void *)(a1 + 32);
    id v48 = v46;
    id v49 = *(id *)(a1 + 48);
    [v45 addUserNotification:v44 listener:0 completionHandler:v47];

    goto LABEL_36;
  }

  id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog sms](&OBJC_CLASS___IMRGLog, "sms"));
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v16 = *(void *)(a1 + 40);
    *(_DWORD *)buf = 138412290;
    uint64_t v56 = v16;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Unable to post SMS alert during buddy, deferring until device is setup {CTPNR: %@}",  buf,  0xCu);
  }

  id v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) CTPNRByConsentCompletion]);
  if (!v17)
  {
    id v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSMapTable strongToStrongObjectsMapTable]( &OBJC_CLASS___NSMapTable,  "strongToStrongObjectsMapTable"));
    [*(id *)(a1 + 32) setCTPNRByConsentCompletion:v18];
  }

  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) CTPNRByConsentCompletion]);
  id v20 = objc_retainBlock(*(id *)(a1 + 48));
  [v19 setObject:v20 forKey:*(void *)(a1 + 40)];

  NSErrorUserInfoKey v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) restoreMonitor]);
  LOBYTE(v20) = [v21 hasActionForTarget:*(void *)(a1 + 32)];

  if ((v20 & 1) == 0)
  {
    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) restoreMonitor]);
    [v22 addTarget:*(void *)(a1 + 32) actionBlock:&stru_1008FBFA8];
LABEL_36:
  }

void sub_100171A1C(id a1, id a2)
{
  id v2 = a2;
  uint64_t v4 = im_primary_queue(v2, v3);
  id v5 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v4);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100171AA4;
  block[3] = &unk_1008F6010;
  id v8 = v2;
  id v6 = v2;
  dispatch_async(v5, block);
}

id sub_100171AA4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _postPendingConsentAlerts];
}

uint64_t sub_100171AAC(uint64_t a1, void *a2)
{
  id v3 = [a2 response];
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog sms](&OBJC_CLASS___IMRGLog, "sms"));
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v5)
    {
      *(_WORD *)id v8 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "User notification denied Phone Number Validation delivery, not sending",  v8,  2u);
    }

    id v6 = *(void **)(*(void *)(a1 + 32) + 48LL);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) uniqueIdentifier]);
    [v6 addObject:v4];
  }

  else if (v5)
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "User notification allowed Phone Number Validation delivery, sending",  buf,  2u);
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_100172C4C(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___IDSRestrictions);
  id v2 = (void *)qword_1009BEC18;
  qword_1009BEC18 = (uint64_t)v1;
}

void sub_100172C74(id a1)
{
}

void sub_10017357C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    *(_DWORD *)buf = 134218242;
    uint64_t v14 = v5;
    __int16 v15 = 2112;
    uint64_t v16 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Broadcasting restriction change for service {restrictionReason: %lu, service: %@",  buf,  0x16u);
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_1001736EC;
  v12[3] = &unk_1008FC060;
  uint64_t v8 = *(void *)(a1 + 40);
  void v12[4] = *(void *)(a1 + 32);
  void v12[5] = v8;
  uint64_t v9 = kIDSRegistrationEntitlement;
  uint64_t v10 = kIDSListenerCapConsumesLaunchOnDemandRestrictionUpdates;
  int v11 = objc_alloc_init(&OBJC_CLASS___IMMessageContext);
  [v7 enqueueBroadcast:v12 forTopic:v3 entitlement:v9 command:0 capabilities:v10 messageContext:v11];
}

id sub_1001736EC(uint64_t a1, void *a2)
{
  return _[a2 service:*(void *)(a1 + 32) restrictionReasonChanged:*(void *)(a1 + 40)];
}

void sub_100173DD0(uint64_t a1)
{
  double v3 = v2;
  [*(id *)(a1 + 40) doubleValue];
  unint64_t v5 = llround((v3 - v4) * 1000.0);
  uint64_t v6 = OSLogHandleForTransportCategory("IDSAWDLogging");
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 72);
    uint64_t v9 = *(void *)(a1 + 48);
    uint64_t v10 = *(void *)(a1 + 56);
    *(_DWORD *)buf = 134218754;
    uint64_t v20 = v8;
    __int16 v21 = 2048;
    unint64_t v22 = v5;
    __int16 v23 = 2112;
    uint64_t v24 = v9;
    __int16 v25 = 2112;
    uint64_t v26 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "AWDIDSGenericConnectionSetupDurationEvent linkType:%lu, setupDuration:%llums connectionType:%@ errorCode:%@",  buf,  0x2Au);
  }

  uint64_t v12 = os_log_shim_legacy_logging_enabled(v11);
  if ((_DWORD)v12)
  {
    if (_IDSShouldLogTransport(v12))
    {
      uint64_t v17 = *(void *)(a1 + 48);
      uint64_t v18 = *(void *)(a1 + 56);
      uint64_t v15 = *(void *)(a1 + 72);
      unint64_t v16 = v5;
      _IDSLogTransport( @"IDSAWDLogging",  @"IDS",  @"AWDIDSGenericConnectionSetupDurationEvent linkType:%lu, setupDuration:%llums connectionType:%@ errorCode:%@");
      if (_IDSShouldLog(0LL, @"IDSAWDLogging"))
      {
        uint64_t v17 = *(void *)(a1 + 48);
        uint64_t v18 = *(void *)(a1 + 56);
        uint64_t v15 = *(void *)(a1 + 72);
        unint64_t v16 = v5;
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSAWDLogging",  @"AWDIDSGenericConnectionSetupDurationEvent linkType:%lu, setupDuration:%llums connectionType:%@ errorCode:%@");
      }
    }
  }

  __int16 v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "_metricContainerForMetricType:", 2555934, v15, v16, v17, v18));
  if (v13)
  {
    id v14 = objc_alloc_init((Class)IMWeakLinkClass( @"AWDIDSGenericConnectionSetupDurationEvent",  @"WirelessDiagnostics"));
    [v14 setLinkType:*(unsigned int *)(a1 + 72)];
    [v14 setConnectionSetupDuration:v5];
    objc_msgSend(v14, "setConnectionType:", objc_msgSend(*(id *)(a1 + 48), "integerValue"));
    [v14 setSuccess:*(unsigned __int8 *)(a1 + 80)];
    objc_msgSend(v14, "setErrorCode:", objc_msgSend(*(id *)(a1 + 56), "integerValue"));
    [*(id *)(a1 + 64) _submitAWDMetric:v14 withContainer:v13];
  }
}

void sub_100174048(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___IDSPairingManager);
  double v2 = (void *)qword_1009BEC28;
  qword_1009BEC28 = (uint64_t)v1;
}

void sub_10017434C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "didAddPairedDevice:") & 1) != 0) {
    [v3 didAddPairedDevice:*(void *)(a1 + 32)];
  }
}

void sub_10017450C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "didRemovePairedDevice:") & 1) != 0) {
    [v3 didRemovePairedDevice:*(void *)(a1 + 32)];
  }
}

id sub_1001745A8(uint64_t a1)
{
  double v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) pairedDeviceRepository]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 activePairedDevice]);

  unsigned int v4 = [*(id *)(a1 + 32) isPaired];
  id result = [*(id *)(a1 + 32) _hasAllEncryptionKeys];
  if (v3)
  {
    if ((v4 & result & 1) == 0)
    {
      [*(id *)(a1 + 32) _requestPairedDeviceInfo];
      return [*(id *)(a1 + 32) _requestPairedDeviceInfoAfterDelay:15.5];
    }
  }

  return result;
}

void sub_1001748EC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_10017490C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10017491C(uint64_t a1)
{
}

void sub_100174924(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8LL);
  double v2 = *(void **)(v1 + 40);
  *(void *)(v1 + 40) = 0LL;
}

void sub_100174DC4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "didUpdatePairedDevice:") & 1) != 0) {
    [v3 didUpdatePairedDevice:*(void *)(a1 + 32)];
  }
}

void sub_10017747C(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[IDSDevicePropertiesStateNotifier sharedInstance]( &OBJC_CLASS___IDSDevicePropertiesStateNotifier,  "sharedInstance"));
  [v2 updateStateForDeviceWithUniqueID:*(void *)(a1 + 32)];
}

void sub_100179998(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "didUpdatePairedDevice:") & 1) != 0) {
    [v3 didUpdatePairedDevice:*(void *)(a1 + 32)];
  }
}

void sub_10017A1B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog NRPairing](&OBJC_CLASS___IMRGLog, "NRPairing"));
  unint64_t v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_10069E7B4((uint64_t)v3, a1, v5);
    }
  }

  else
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      uint64_t v6 = *(void *)(a1 + 40);
      int v15 = 138478083;
      uint64_t v16 = v6;
      __int16 v17 = 2113;
      uint64_t v18 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Did register device with NRDeviceManager {nrDeviceIdentifier: %{private}@, cbuuid: %{private}@}",  (uint8_t *)&v15,  0x16u);
    }

    if (*(_BYTE *)(a1 + 56))
    {
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog NRPairing](&OBJC_CLASS___IMRGLog, "NRPairing"));
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = *(void *)(a1 + 32);
        int v15 = 138477827;
        uint64_t v16 = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Starting UTunPeer and NRDevice bridge for device with cbuuid: %{private}@}",  (uint8_t *)&v15,  0xCu);
      }

      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[IDSUTunDeliveryController sharedInstance]( &OBJC_CLASS___IDSUTunDeliveryController,  "sharedInstance"));
      [v10 addConnectivityDelegate:*(void *)(a1 + 48)];

      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[IDSUTunDeliveryController sharedInstance]( &OBJC_CLASS___IDSUTunDeliveryController,  "sharedInstance"));
      uint64_t v12 = IDSDeviceDefaultPairedDeviceUniqueID;
      __int16 v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) UUIDString]);
      [v11 addUTunPeerWithDeviceUniqueID:v12 btuuid:v13];

      id v14 = (void *)objc_claimAutoreleasedReturnValue( +[IDSUTunDeliveryController sharedInstance]( &OBJC_CLASS___IDSUTunDeliveryController,  "sharedInstance"));
      [v14 startIdsNRDeviceBridgeAndPreferenceHandlerWithIdentifier:*(void *)(a1 + 32)];

      [*(id *)(a1 + 48) _requestPairedDeviceInfoAfterDelay:10.0];
    }
  }
}

LABEL_81:
        id v68 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog watchPairing](&OBJC_CLASS___IMRGLog, "watchPairing"));
        if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          *(void *)id v92 = v56;
          _os_log_impl( (void *)&_mh_execute_header,  v68,  OS_LOG_TYPE_DEFAULT,  "Notifying all IDS accounts paired device updated: %@",  buf,  0xCu);
        }

        v90[0] = _NSConcreteStackBlock;
        v90[1] = 3221225472LL;
        v90[2] = sub_10017B008;
        v90[3] = &unk_1008FC0F8;
        uint64_t v56 = v56;
        v90[4] = v56;
        id v67 = v90;
        goto LABEL_84;
      }
    }

    else
    {
      uint64_t v56 = (os_log_s *)objc_claimAutoreleasedReturnValue(-[IDSPairingManager pairedDevice](self, "pairedDevice"));
    }

    __int16 v55 = (void *)v78;
    goto LABEL_81;
  }

  __int16 v55 = (void *)objc_claimAutoreleasedReturnValue(+[IMRGLog watchPairing](&OBJC_CLASS___IMRGLog, "watchPairing"));
  uint64_t v37 = v87;
  if (os_log_type_enabled((os_log_t)v55, OS_LOG_TYPE_FAULT)) {
    sub_10069E828();
  }
  LOBYTE(v41) = 0;
LABEL_93:

  return v41;
}
}

void sub_10017B008(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "didUpdatePairedDevice:") & 1) != 0) {
    [v3 didUpdatePairedDevice:*(void *)(a1 + 32)];
  }
}

void sub_10017B054(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "didUpdateProtocolForPairedDevice:") & 1) != 0) {
    [v3 didUpdateProtocolForPairedDevice:*(void *)(a1 + 32)];
  }
}

void sub_10017B27C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "didUpdatePairedDevice:") & 1) != 0) {
    [v3 didUpdatePairedDevice:*(void *)(a1 + 32)];
  }
}

id sub_10017B90C(uint64_t a1)
{
  id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog NRPairing](&OBJC_CLASS___IMRGLog, "NRPairing"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 138477827;
    uint64_t v6 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Finished resetting communication -- Done {uniqueID: %{private}@}",  (uint8_t *)&v5,  0xCu);
  }

  return [*(id *)(a1 + 40) _callPairedDeviceDidConnectBlocksForUniqueID:*(void *)(a1 + 48) withError:0];
}

void sub_10017BB08(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
}

void sub_10017BB1C(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

uint64_t sub_10017BB30(uint64_t a1, uint64_t a2)
{
  return a2;
}

  ;
}

  ;
}

void sub_10017BB64(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

  ;
}

void sub_10017BBC4(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___IDSGroupEncryptionController1);
  id v2 = (void *)qword_1009BEC40;
  qword_1009BEC40 = (uint64_t)v1;
}

double sub_10017C5A4(void *a1, double a2)
{
  id v3 = a1;
  if (v3)
  {
    unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue(+[IDSServerBag sharedInstance](&OBJC_CLASS___IDSServerBag, "sharedInstance"));
    int v5 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v3]);

    if (v5)
    {
      uint64_t v7 = objc_opt_class(&OBJC_CLASS___NSNumber, v6);
      if ((objc_opt_isKindOfClass(v5, v7) & 1) != 0)
      {
        [v5 doubleValue];
        a2 = v8;
      }
    }
  }

  else
  {
    int v5 = 0LL;
  }

  return a2;
}

void sub_10017C9F0(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 360LL);
  id v3 = objc_retainBlock(*(id *)(a1 + 40));
  [v2 removeObject:v3];

  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 28LL));
}

void sub_10017CCB8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

id sub_10017CCD0(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id result = [a2 isEqualToString:*(void *)(a1 + 32)];
  if ((_DWORD)result)
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
    *a4 = 1;
  }

  return result;
}

void sub_10017CE48(uint64_t a1, void *a2)
{
  id v3 = (os_unfair_lock_s *)(*(void *)(a1 + 32) + 28LL);
  id v4 = a2;
  os_unfair_lock_lock(v3);
  [v4 resetRemoteMasterKeyMaterialCacheAndCancelResetInterval];

  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 28LL));
}

void sub_10017D0A0(uint64_t a1)
{
  id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    uint64_t v22 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "setAccount: Add the registraion listener for account: %@",  buf,  0xCu);
  }

  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
  int v5 = (void *)objc_claimAutoreleasedReturnValue([v4 accountWithUniqueID:*(void *)(a1 + 32)]);

  uint64_t v6 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  id obj = (id)objc_claimAutoreleasedReturnValue([v5 registeredDevices]);
  id v7 = [obj countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v17;
    do
    {
      for (i = 0LL; i != v8; i = (char *)i + 1)
      {
        if (*(void *)v17 != v9) {
          objc_enumerationMutation(obj);
        }
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v16 + 1) + 8 * (void)i) pushToken]);
        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v5 service]);
        __int16 v13 = (void *)objc_claimAutoreleasedReturnValue([v12 identifier]);
        id v14 = (void *)objc_claimAutoreleasedReturnValue( +[IDSPushToken pushTokenWithData:withServiceLoggingHint:]( &OBJC_CLASS___IDSPushToken,  "pushTokenWithData:withServiceLoggingHint:",  v11,  v13));
        -[NSMutableSet addObject:](v6, "addObject:", v14);
      }

      id v8 = [obj countByEnumeratingWithState:&v16 objects:v20 count:16];
    }

    while (v8);
  }

  [*(id *)(*(void *)(a1 + 40) + 240) setObject:v6 forKeyedSubscript:*(void *)(a1 + 32)];
  [v5 addRegistrationListener:*(void *)(a1 + 40)];
}

id sub_10017D444(uint64_t a1)
{
  id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v7 = 138412290;
    uint64_t v8 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "setAccount: Remove the registraion listener for account: %@",  (uint8_t *)&v7,  0xCu);
  }

  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
  int v5 = (void *)objc_claimAutoreleasedReturnValue([v4 accountWithUniqueID:*(void *)(a1 + 32)]);
  [v5 removeRegistrationListener:*(void *)(a1 + 40)];

  return [*(id *)(*(void *)(a1 + 40) + 240) setObject:0 forKeyedSubscript:*(void *)(a1 + 32)];
}

void sub_10017E724(uint64_t a1)
{
  id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController_oversize]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController_oversize"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = 136315651;
    int v5 = "IDSGroupEncryptionController1.m";
    __int16 v6 = 1024;
    int v7 = 398;
    __int16 v8 = 2113;
    uint64_t v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s:%d %{private}@", (uint8_t *)&v4, 0x1Cu);
  }
}

void sub_10017E7F4(uint64_t a1)
{
  id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController_oversize]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController_oversize"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = 136315651;
    int v5 = "IDSGroupEncryptionController1.m";
    __int16 v6 = 1024;
    int v7 = 573;
    __int16 v8 = 2113;
    uint64_t v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s:%d %{private}@", (uint8_t *)&v4, 0x1Cu);
  }
}

void sub_10017EC34(id *a1, void *a2)
{
  id v15 = a2;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v15 participantPushToken]);
  int v4 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPushToken pushTokenWithData:](&OBJC_CLASS___IDSPushToken, "pushTokenWithData:", v3));
  int v5 = v4;
  if (v4) {
    id v6 = v4;
  }
  else {
    id v6 = (id)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  }
  int v7 = v6;

  if ([a1[4] containsObject:v7])
  {
    id v8 = a1[5];
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v15 participantURI]);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:v9]);

    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v7 rawToken]);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v15 participantURI]);
    __int16 v13 = (void *)_IDSCopyIDForTokenWithURI(v11, v12);

    id v14 = (void *)objc_claimAutoreleasedReturnValue([a1[5] objectForKeyedSubscript:v13]);
    if (v10 && ![v10 BOOLValue]
      || v14 && ([v14 BOOLValue] & 1) == 0)
    {
      [a1[6] addObject:v7];
    }
  }
}

void sub_10017F204( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
}

void sub_10017F228(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sessionController]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 sessionWithGroupID:*(void *)(a1 + 40)]);

  id WeakRetained = (os_unfair_lock_s *)objc_loadWeakRetained((id *)(a1 + 48));
  int v5 = WeakRetained;
  if (WeakRetained)
  {
    os_unfair_lock_lock(WeakRetained + 7);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController"));
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = *(void *)(a1 + 40);
      id v8 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueID]);
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)&v5[54]._os_unfair_lock_opaque objectForKeyedSubscript:*(void *)(a1 + 40)]);
      int v10 = 138412802;
      uint64_t v11 = v7;
      __int16 v12 = 2112;
      __int16 v13 = v8;
      __int16 v14 = 2112;
      id v15 = v9;
      _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "Failed to distribute initial key material distribution to some participants -- ending session { groupID: %@, ses sionID: %@, remainingDestinations: %@ }",  (uint8_t *)&v10,  0x20u);
    }

    [*(id *)&v5[86]._os_unfair_lock_opaque setObject:0 forKeyedSubscript:*(void *)(a1 + 40)];
    [*(id *)&v5[54]._os_unfair_lock_opaque setObject:0 forKeyedSubscript:*(void *)(a1 + 40)];
    os_unfair_lock_unlock(v5 + 7);
  }

  [v3 endSessionWithReason:39];
}

void sub_10017FB78(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(v2 + 104);
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 28));
  if (v3)
  {
    int v4 = *(id **)(a1 + 32);
    int v5 = (void *)objc_claimAutoreleasedReturnValue([v4[13] pushToken]);
    id v6 = [v4 createRealTimeEncryptionFullIdentityForDevice:v5 completionBlock:0];

    _[*(id *)(a1 + 32) _sendRenewedPrekeysToGroups];
  }

  else
  {
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController"));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_10069EBE4();
    }
  }

id sub_1001801FC(uint64_t a1)
{
  LOBYTE(v2) = *(_BYTE *)(a1 + 81);
  return [*(id *)(a1 + 32) sendKeyMaterialsRecoveryRequestToDevice:*(void *)(a1 + 40) fromURI:*(void *)(a1 + 48) participantID:*(void *)(a1 + 56) groupID:*(void *)(a1 + 64) sessionID:*(void *)(a1 + 72) requireMKM:*(unsigned __int8 *)(a1 + 80) requireSKM:v2];
}

id sub_100180234(uint64_t a1)
{
  LOBYTE(v2) = *(_BYTE *)(a1 + 81);
  return [*(id *)(a1 + 32) sendKeyMaterialsRecoveryRequestToDevice:*(void *)(a1 + 40) fromURI:*(void *)(a1 + 48) participantID:*(void *)(a1 + 56) groupID:*(void *)(a1 + 64) sessionID:*(void *)(a1 + 72) requireMKM:*(unsigned __int8 *)(a1 + 80) requireSKM:v2];
}

LABEL_59:
        goto LABEL_60;
      }

      uint64_t v29 = v58 + 1;
      id v30 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  (v58 + 1)));
      -[NSMutableDictionary setObject:forKeyedSubscript:]( self->_groupIDToSKMRecoveryRetryCount,  "setObject:forKeyedSubscript:",  v30,  v11);

      -[IDSGroupEncryptionController1 _sendKeyRecoveryRequestForPendingKeys:requireMKM:requireSKM:forDevice:]( self,  "_sendKeyRecoveryRequestForPendingKeys:requireMKM:requireSKM:forDevice:",  v14,  0LL,  1LL,  v10);
      uint64_t v27 = v59;
    }

    id v45 = v29;
    uint64_t v46 = v45 + 1;
    if (v46 == 3)
    {
      -[NSMutableDictionary setObject:forKeyedSubscript:]( self->_groupIDToMKMRecoveryRetryCount,  "setObject:forKeyedSubscript:",  &off_1009473B0,  v11);
      -[NSMutableDictionary setObject:forKeyedSubscript:]( self->_groupIDToIsKeyMaterialRecoveryRunning,  "setObject:forKeyedSubscript:",  &__kCFBooleanFalse,  v11);
      -[NSMutableDictionary setObject:forKeyedSubscript:]( self->_groupIDToSKMRecoveryRetryCount,  "setObject:forKeyedSubscript:",  &off_1009473B0,  v11);
      uint64_t v47 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController"));
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        LODWORD(v72) = 3;
        id v48 = "_doCheckPendingKeyMaterialsAndSendKeyRecoveryRequestForMKM - tried %d. Reset the retryCount";
        id v49 = v47;
        __int128 v50 = 8;
LABEL_58:
        _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, v48, buf, v50);
        goto LABEL_59;
      }

      goto LABEL_59;
    }

    __int128 v51 = dispatch_walltime(0LL, 3000000000LL * v46 + 3000000000LL);
    realtimeEncryptionQueue = (dispatch_queue_s *)self->_realtimeEncryptionQueue;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100180A7C;
    block[3] = &unk_1008FC280;
    void block[4] = self;
    id v64 = (char)v8;
    id v65 = v7;
    uint64_t v62 = v10;
    v63 = v11;
    dispatch_after(v51, realtimeEncryptionQueue, block);
  }

  else
  {
    -[NSMutableDictionary setObject:forKeyedSubscript:]( self->_groupIDToIsKeyMaterialRecoveryRunning,  "setObject:forKeyedSubscript:",  &__kCFBooleanFalse,  v11);
  }

  sub_10041D3BC(v83);
  v142 = swift_bridgeObjectRetain_n(a3, 2LL);
  v143 = (os_log_s *)Logger.logObject.getter(v142);
  v144 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v143, v144))
  {
    v145 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    v146 = swift_slowAlloc(32LL, -1LL);
    v347 = (void *)v146;
    *(_DWORD *)v145 = 136315138;
    swift_bridgeObjectRetain(a3);
    v344 = sub_1003FFBB0(a2, a3, (uint64_t *)&v347);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v344, &v345, v145 + 4, v145 + 12);
    swift_bridgeObjectRelease_n(a3, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v143, v144, "%s    ", v145, 0xCu);
    swift_arrayDestroy(v146, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v146, -1LL, -1LL);
    swift_slowDealloc(v145, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(a3, 2LL);
  }

  v147 = swift_bridgeObjectRetain_n(a3, 2LL);
  v148 = (os_log_s *)Logger.logObject.getter(v147);
  v149 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v148, v149))
  {
    v150 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    v151 = swift_slowAlloc(32LL, -1LL);
    v347 = (void *)v151;
    *(_DWORD *)v150 = 136315138;
    swift_bridgeObjectRetain(a3);
    v344 = sub_1003FFBB0(a2, a3, (uint64_t *)&v347);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v344, &v345, v150 + 4, v150 + 12);
    swift_bridgeObjectRelease_n(a3, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v148, v149, "%s    Participants:", v150, 0xCu);
    swift_arrayDestroy(v151, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v151, -1LL, -1LL);
    swift_slowDealloc(v150, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(a3, 2LL);
  }

  v152 = v320.n128_u64[0] + OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_participantsById;
  swift_beginAccess( v320.n128_u64[0] + OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_participantsById,  &v347,  0LL,  0LL);
  v153 = *(void *)v152;
  v154 = *(void *)(*(void *)v152 + 64LL);
  v327 = *(void *)v152 + 64LL;
  v155 = 1LL << *(_BYTE *)(v153 + 32);
  v156 = -1LL;
  if (v155 < 64) {
    v156 = ~(-1LL << v155);
  }
  v157 = v156 & v154;
  v328 = (unint64_t)(v155 + 63) >> 6;
  v337 = (uint64_t *)&v347;
  v331 = (char *)&v346 + 4;
  v343 = (char *)&v345;
  v332 = v153;
  v158 = swift_bridgeObjectRetain(v153);
  v159 = 0LL;
  v158.n128_u64[0] = 136315650LL;
  v320 = v158;
  v319 = (char *)&type metadata for Any + 8;
  v158.n128_u64[0] = 136315138LL;
  v330 = v158;
  v158.n128_u64[0] = 136315394LL;
  v341 = v158;
  while (1)
  {
    if (v157)
    {
      v335 = (v157 - 1) & v157;
      v336 = v159;
      v160 = __clz(__rbit64(v157)) | ((void)v159 << 6);
      goto LABEL_86;
    }

    v161 = (int64_t)v159 + 1;
    if (__OFADD__(v159, 1LL))
    {
      __break(1u);
      goto LABEL_138;
    }

    if (v161 >= v328) {
      goto LABEL_136;
    }
    v162 = *(void *)(v327 + 8 * v161);
    v163 = (os_log_s *)((char *)v159 + 1);
    if (!v162)
    {
      v163 = (os_log_s *)((char *)v159 + 2);
      v162 = *(void *)(v327 + 8LL * (void)v163);
      if (!v162)
      {
        v163 = (os_log_s *)((char *)v159 + 3);
        v162 = *(void *)(v327 + 8LL * (void)v163);
        if (!v162) {
          break;
        }
      }
    }

id sub_100180A7C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _doCheckPendingKeyMaterialsAndSendKeyRecoveryRequestForMKM:*(unsigned __int8 *)(a1 + 56) forSKM:*(unsigned __int8 *)(a1 + 57) forDevice:*(void *)(a1 + 40) forGroupID:*(void *)(a1 + 48)];
}

id sub_100180BB4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _doCheckPendingKeyMaterialsAndSendKeyRecoveryRequestForMKM:*(unsigned __int8 *)(a1 + 56) forSKM:*(unsigned __int8 *)(a1 + 57) forDevice:*(void *)(a1 + 40) forGroupID:*(void *)(a1 + 48)];
}

uint64_t sub_1001813FC(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "createRealTimeEncryptionFullIdentity - found the existed one %@",  (uint8_t *)&v5,  0xCu);
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1001814B4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(v1 + 112);
  *(void *)(v1 + 112) = 0LL;

  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController"));
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v4 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "createRealTimeEncryptionFullIdentity - previous pre-key is now expired.",  v4,  2u);
  }
}

uint64_t sub_100181530(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10018153C(id a1)
{
  off_1009BEC50 = (_UNKNOWN *)IMWeakLinkSymbol("SecMWCreateEphemeralDeviceIdentity", @"MessageProtection");
}

void sub_100181568(id a1)
{
  off_1009BEC60 = (_UNKNOWN *)IMWeakLinkSymbol("SecKeyCopyPublicKey", @"MessageProtection");
}

uint64_t sub_100181594(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100181984(id a1)
{
  off_1009BEC70 = (_UNKNOWN *)IMWeakLinkSymbol("SecKeyCopyPublicKey", @"MessageProtection");
}

id sub_100181FA4(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v5 = 136315394;
    uint64_t v6 = "-[IDSGroupEncryptionController1 resetMKMCacheAfterTimeoutForGroup:interval:]_block_invoke";
    __int16 v7 = 2112;
    uint64_t v8 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%s %@, keyMaterial reset timer fired. Resetting stored encryption sequence number during cleanup to 0",  (uint8_t *)&v5,  0x16u);
  }

  return [*(id *)(a1 + 40) _resetKeyCacheForGroup:*(void *)(a1 + 32)];
}

void sub_100182F40(id a1)
{
  off_1009BEC80 = (_UNKNOWN *)IMWeakLinkSymbol("SecKeyCreateWithData", @"MessageProtection");
}

id sub_100182F6C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) sendPendingKeyMaterialsToGroup:*(void *)(a1 + 40) sessionID:*(void *)(a1 + 48) forDevice:*(void *)(a1 + 56) fromURI:*(void *)(a1 + 64)];
}

id sub_100182F80(uint64_t a1)
{
  return _[*(id *)(a1 + 32) sendKeyMaterialsToWaitingParticipantsForGroup:*(void *)(a1 + 40) sessionID:*(void *)(a1 + 48)];
}

id sub_100183A34(void *a1)
{
  uint64_t v1 = (void *)a1[4];
  uint64_t v2 = a1[5];
  uint64_t v3 = a1[6];
  uint64_t v4 = a1[7];
  uint64_t v5 = a1[8];
  [v1 _multiwayFTMessageSendTimeout];
  LOBYTE(v7) = 0;
  return objc_msgSend( v1,  "_sendMessage:toDestination:forGroup:sessionID:command:timeout:shouldExpire:useQR:completion:completionBlock:",  v2,  v3,  v4,  v5,  210,  1,  v7,  0,  0);
}

void sub_100184494( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, char a35)
{
}

uint64_t sub_1001844E0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1001844F0(uint64_t a1)
{
}

BOOL sub_1001844F8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 createdAt]);
  LODWORD(v5) = *(_DWORD *)(*(void *)(a1 + 32) + 64LL);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 dateByAddingTimeInterval:(double)v5]);

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  id v8 = [v7 compare:v6];

  if (v8 == (id)1)
  {
    uint64_t v9 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
    int v10 = (void *)objc_claimAutoreleasedReturnValue([v3 groupID]);
    id v11 = v9;
    __int16 v12 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKeyedSubscript:v10]);
    if (!v12)
    {
      __int16 v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
      [v11 setObject:v12 forKeyedSubscript:v10];
    }

    __int16 v13 = (void *)objc_claimAutoreleasedReturnValue([v3 keyIndex]);
    id v14 = [v13 copy];
    [v12 addObject:v14];

    id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController"));
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      int v17 = 138412546;
      __int128 v18 = v6;
      __int16 v19 = 2112;
      id v20 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Found expired MkM { expirationDate: %@, MkM: %@ }",  (uint8_t *)&v17,  0x16u);
    }
  }

  return v8 != (id)1;
}

void sub_1001846C8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if ([v6 count])
  {
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController"));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 138412546;
      id v12 = v5;
      __int16 v13 = 2112;
      id v14 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "expired MKIs for group %@: %@",  (uint8_t *)&v11,  0x16u);
    }

    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sessionController]);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 sessionWithGroupID:v5]);

    if (v9)
    {
      [v9 invalidateKeyMaterialByKeyIndexes:v6];
    }

    else
    {
      int v10 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController"));
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        int v11 = 138412290;
        id v12 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "cleanUpExpiredMasterKeyMaterial: couldn't invalidate MKIs - cannot find session with groupID %@",  (uint8_t *)&v11,  0xCu);
      }
    }
  }
}

id sub_100184C08(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _handleMkmRollTimerForGroup:*(void *)(a1 + 40)];
}

id sub_100185114(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _handleMkmExpirationTimerForGroup:*(void *)(a1 + 40)];
}

id sub_100185EA4(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 40);
    int v4 = *(_DWORD *)(*(void *)(a1 + 32) + 68LL);
    v6[0] = 67109378;
    v6[1] = v4;
    __int16 v7 = 2112;
    uint64_t v8 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "MKMRoll timer fired: duration: %u, groupID: %@",  (uint8_t *)v6,  0x12u);
  }

  return [*(id *)(a1 + 32) _mkmRollTimerFiredForGroup:*(void *)(a1 + 40) sessionID:*(void *)(a1 + 48)];
}

void sub_100185F6C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 136) objectForKeyedSubscript:*(void *)(a1 + 40)]);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController"));
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = @"YES";
    if (!*(_BYTE *)(a1 + 56)) {
      int v4 = @"NO";
    }
    int v16 = 138412546;
    int v17 = v4;
    __int16 v18 = 2112;
    __int16 v19 = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "MKMExpiration timer fired: isFirstLocalGeneratedMKM: %@, innerKeyMaterialCache: %@",  (uint8_t *)&v16,  0x16u);
  }

  if (v2 && (uint64_t v5 = objc_claimAutoreleasedReturnValue([v2 currentLocalMasterKeyMaterial])) != 0)
  {
    id v6 = (void *)v5;
    __int16 v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sessionController]);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 sessionWithUniqueID:*(void *)(a1 + 48)]);

    if (v8
      && [v8 groupSessionState] == 1
      && (v9 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 168) objectForKeyedSubscript:*(void *)(a1 + 40)]),  id v10 = objc_msgSend(v9, "count"),  v9,  (unint64_t)v10 > 1))
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 28LL));
      [*(id *)(a1 + 32) requestKeyMaterialForGroup:*(void *)(a1 + 40) sessionID:*(void *)(a1 + 48) shouldGenerateMKM:1];
    }

    else
    {
      os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 28LL));
      int v11 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController"));
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        id v12 = (__CFString *)objc_claimAutoreleasedReturnValue([v6 keyIndex]);
        __int16 v13 = *(void **)(a1 + 40);
        unsigned int v14 = [v8 groupSessionState];
        id v15 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 168) objectForKeyedSubscript:*(void *)(a1 + 40)]);
        int v16 = 138413058;
        int v17 = v12;
        __int16 v18 = 2112;
        __int16 v19 = v13;
        __int16 v20 = 1024;
        unsigned int v21 = v14;
        __int16 v22 = 2112;
        __int16 v23 = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "The MKI (%@) has been expired for group: %@, but no need to create new MKMs: group session state %d, active participant: %@",  (uint8_t *)&v16,  0x26u);
      }

      [*(id *)(a1 + 32) _stopMkmExpirationTimerForGroup:*(void *)(a1 + 40)];
      [v2 setCurrentLocalMasterKeyMaterial:0];
      [v2 setNextLocalMasterKeyMaterial:0];
    }
  }

  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 28LL));
  }
}

id sub_100187564(uint64_t a1)
{
  return _[*(id *)(a1 + 32) sendKeyMaterialsRecoveryRequestToGroup:*(void *)(a1 + 40) requireMKM:0 requireSKM:1];
}

void sub_100187578(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v9 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) participantPushToken]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPushToken pushTokenWithData:](&OBJC_CLASS___IDSPushToken, "pushTokenWithData:"));
  int v4 = v3;
  if (!v3) {
    int v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  }
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) participantURI]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[IDSURI URIWithPrefixedURI:](&OBJC_CLASS___IDSURI, "URIWithPrefixedURI:", v5));
  __int16 v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [*(id *)(a1 + 40) participantIdentifier]));
  LOBYTE(v_Block_object_dispose(va, 8) = *(_BYTE *)(a1 + 65);
  [v2 sendKeyMaterialsRecoveryRequestToDevice:v4 fromURI:v6 participantID:v7 groupID:*(void *)(a1 + 48) sessionID:*(void *)(a1 + 56) requireMKM:*(unsigned __int8 *)(a1 + 64) requireSKM:v8];

  if (!v3) {
}
  }

id sub_100189B7C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _startKeyRecoveryForMKM:1 forSKM:0 forDevice:*(void *)(a1 + 40) forGroupID:*(void *)(a1 + 48)];
}

LABEL_104:
          uint64_t v28 = (char *)v28 + 1;
        }

        while (v28 != v201);
        __int16 v134 = [obj countByEnumeratingWithState:&v220 objects:v249 count:16];
        v201 = v134;
      }

      while (v134);
    }

    id v135 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v202->_groupIDToStableKeyMaterialCache,  "objectForKeyedSubscript:",  v198));
    [v135 setSentToRemotes:1];
  }

  else
  {
    if (v21)
    {
      __int16 v136 = @"NO";
      if (v189) {
        v137 = @"YES";
      }
      else {
        v137 = @"NO";
      }
      if (v178) {
        __int16 v136 = @"YES";
      }
      *(_DWORD *)buf = 138412546;
      *(void *)&uint8_t buf[4] = v137;
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v136;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "sendKeyMaterialsToGroup: requireMKM: %@, requireSKM: %@ no destination specified, return",  buf,  0x16u);
    }

    -[IDSGroupEncryptionController1 sendKeyMaterialsToLocal:sessionID:]( self,  "sendKeyMaterialsToLocal:sessionID:",  v198,  v180);
  }

  os_unfair_lock_unlock(lock);
LABEL_148:
  __int16 v138 = v141;

LABEL_149:
}

      __break(1u);
      goto LABEL_105;
    }

    __int128 v79 = v85;
    goto LABEL_39;
  }

id sub_10018D114(id a1, IDSURI *a2)
{
  return -[IDSURI prefixedURI](a2, "prefixedURI");
}

void sub_10018D11C(uint64_t a1)
{
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472LL;
  v18[2] = sub_10018D26C;
  void v18[3] = &unk_1008FC3E8;
  uint64_t v2 = *(void **)(a1 + 40);
  v18[4] = *(void *)(a1 + 32);
  id v19 = v2;
  id v20 = *(id *)(a1 + 48);
  uint64_t v3 = objc_retainBlock(v18);
  int v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 72);
  uint64_t v8 = *(void *)(a1 + 80);
  [v4 _multiwayFTMessageSendTimeout];
  double v10 = v9;
  uint64_t v11 = *(void *)(a1 + 32);
  char v12 = *(_BYTE *)(v11 + 33);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  void v15[2] = sub_10018D37C;
  v15[3] = &unk_1008FC410;
  uint64_t v13 = *(void *)(a1 + 88);
  void v15[4] = v11;
  v15[5] = v13;
  id v16 = *(id *)(a1 + 72);
  id v17 = *(id *)(a1 + 64);
  LOBYTE(v14) = v12;
  [v4 _sendMessage:v5 toDestination:v6 forGroup:v7 sessionID:v8 command:211 timeout:1 shouldExpire:v10 useQR:v14 completion:v15 completionBlock:v3];
}

void sub_10018D26C(id *a1, void *a2, void *a3)
{
  id v13 = a2;
  id v5 = a3;
  if (([a1[4] isTestRunning] & 1) == 0)
  {
    os_unfair_lock_lock((os_unfair_lock_t)a1[4] + 7);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*((id *)a1[4] + 17) objectForKeyedSubscript:v13]);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 currentLocalMasterKeyMaterial]);
    unsigned int v8 = [v7 isEqual:a1[5]];

    if (v8)
    {
      double v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      double v10 = (void *)objc_claimAutoreleasedReturnValue([a1[5] createdAt]);
      [v9 timeIntervalSinceDate:v10];
      double v12 = v11;

      [a1[6] didSendKeyMaterial:a1[5] duration:v12];
      [a1[4] sendKeyMaterialsToLocal:v13 sessionID:v5];
    }

    os_unfair_lock_unlock((os_unfair_lock_t)a1[4] + 7);
  }
}

id sub_10018D37C(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return [*(id *)(a1 + 32) _noteKeyMaterialDidSendToDestination:*(void *)(a1 + 40) groupID:*(void *)(a1 + 48) withSuccess:1];
  }
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController"));
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
    sub_10069F4EC(a1);
  }

  return [*(id *)(a1 + 32) _noteKeyMaterialDidSendToDestination:*(void *)(a1 + 40) groupID:*(void *)(a1 + 48) withSuccess:0];
}

void sub_10018D40C(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController_oversize]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController_oversize"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = 136315651;
    id v5 = "IDSGroupEncryptionController1.m";
    __int16 v6 = 1024;
    int v7 = 2780;
    __int16 v8 = 2113;
    uint64_t v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s:%d %{private}@", (uint8_t *)&v4, 0x1Cu);
  }
}

void sub_10018E1EC(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([a3 objectForKeyedSubscript:IDSGroupSessionMessagesGroupIDKey]);
  unsigned int v6 = [v5 isEqualToString:*(void *)(a1 + 32)];

  if (v6) {
    [*(id *)(a1 + 40) addObject:v7];
  }
}

void sub_10018FA74(_Unwind_Exception *a1)
{
}

void sub_10018FAD8(void *a1, int a2)
{
  int v4 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(*(void *)(a1[8] + 8LL) + 24LL)) {
      id v5 = @"YES";
    }
    else {
      id v5 = @"NO";
    }
    if (*(_BYTE *)(*(void *)(a1[9] + 8LL) + 24LL)) {
      unsigned int v6 = @"YES";
    }
    else {
      unsigned int v6 = @"NO";
    }
    uint64_t v7 = a1[4];
    uint64_t v8 = a1[5];
    v11[0] = 67110146;
    v11[1] = a2;
    __int16 v12 = 2112;
    id v13 = v5;
    __int16 v14 = 2112;
    id v15 = v6;
    __int16 v16 = 2112;
    uint64_t v17 = v7;
    __int16 v18 = 2112;
    uint64_t v19 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "sendMessage: sendKeyMaterialMessageDataOverQR completed with %d. completionBlocks called %@ %@, groupID %@, sessionID %@",  (uint8_t *)v11,  0x30u);
  }

  if (a1[6])
  {
    uint64_t v9 = *(void *)(a1[8] + 8LL);
    if (!*(_BYTE *)(v9 + 24))
    {
      *(_BYTE *)(v9 + 24) = 1;
      (*(void (**)(void))(a1[6] + 16LL))();
    }
  }

  if (a1[7])
  {
    uint64_t v10 = *(void *)(a1[9] + 8LL);
    if (!*(_BYTE *)(v10 + 24))
    {
      *(_BYTE *)(v10 + 24) = 1;
      (*(void (**)(void))(a1[7] + 16LL))();
    }
  }

void sub_10018FC48(void *a1, void *a2)
{
  id v3 = a2;
  int v4 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = a1[11];
    id v7 = [v3 idsResponseCode];
    else {
      uint64_t v8 = @"NO";
    }
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v3 responseError]);
    int v18 = 138413314;
    *(void *)uint64_t v19 = v5;
    *(_WORD *)&v19[8] = 2048;
    *(void *)&v19[10] = v6;
    *(_WORD *)&v19[18] = 2048;
    *(void *)&v19[20] = v7;
    *(_WORD *)&v19[28] = 2112;
    *(void *)&v19[30] = v8;
    *(_WORD *)&v19[38] = 2112;
    *(void *)&v19[40] = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Group session encryption message completion block fired { GUID: %@, command: %ld, responseCode: %lu, lastCall: %@, error: %@ }",  (uint8_t *)&v18,  0x34u);
  }

  if ([v3 lastCall])
  {
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController"));
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v11 = [v3 responseCode];
      if (*(_BYTE *)(*(void *)(a1[9] + 8LL) + 24LL)) {
        __int16 v12 = @"YES";
      }
      else {
        __int16 v12 = @"NO";
      }
      if (*(_BYTE *)(*(void *)(a1[10] + 8LL) + 24LL)) {
        id v13 = @"YES";
      }
      else {
        id v13 = @"NO";
      }
      uint64_t v14 = a1[5];
      uint64_t v15 = a1[6];
      int v18 = 67110146;
      *(_DWORD *)uint64_t v19 = v11;
      *(_WORD *)&v19[4] = 2112;
      *(void *)&v19[6] = v12;
      *(_WORD *)&v19[14] = 2112;
      *(void *)&v19[16] = v13;
      *(_WORD *)&v19[24] = 2112;
      *(void *)&v19[26] = v14;
      *(_WORD *)&v19[34] = 2112;
      *(void *)&v19[36] = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "sendMessage: sendMessageWithSendParameters completed with %d. completionBlocks called %@ %@, groupID %@, sessionID %@",  (uint8_t *)&v18,  0x30u);
    }

    if (a1[7])
    {
      uint64_t v16 = *(void *)(a1[9] + 8LL);
      if (!*(_BYTE *)(v16 + 24))
      {
        *(_BYTE *)(v16 + 24) = 1;
        (*(void (**)(void, id))(a1[7] + 16))(a1[7], [v3 responseCode]);
      }
    }

    if (a1[8])
    {
      uint64_t v17 = *(void *)(a1[10] + 8LL);
      if (!*(_BYTE *)(v17 + 24))
      {
        *(_BYTE *)(v17 + 24) = 1;
        (*(void (**)(void))(a1[8] + 16LL))();
      }
    }
  }
}

void sub_10018FEBC(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController_oversize]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController_oversize"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = 136315651;
    uint64_t v5 = "IDSGroupEncryptionController1.m";
    __int16 v6 = 1024;
    int v7 = 3200;
    __int16 v8 = 2113;
    uint64_t v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s:%d %{private}@", (uint8_t *)&v4, 0x1Cu);
  }
}

id sub_1001903B8(void *a1)
{
  uint64_t v1 = (void *)a1[4];
  uint64_t v2 = a1[5];
  uint64_t v3 = a1[6];
  uint64_t v4 = a1[7];
  uint64_t v5 = a1[8];
  [v1 _multiwayFTMessageSendTimeout];
  LOBYTE(v7) = 0;
  return objc_msgSend( v1,  "_sendMessage:toDestination:forGroup:sessionID:command:timeout:shouldExpire:useQR:completion:completionBlock:",  v2,  v3,  v4,  v5,  210,  0,  v7,  0,  0);
}

void sub_1001904D4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
}

void sub_100190718(_Unwind_Exception *a1)
{
}

void sub_10019072C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 128LL);
  id v6 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:v6]);

  uint64_t v5 = 48LL;
  if (!v4) {
    uint64_t v5 = 40LL;
  }
  [*(id *)(a1 + v5) addObject:v6];
}

void sub_100190798(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 128LL);
  id v6 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:v6]);

  uint64_t v5 = 48LL;
  if (!v4) {
    uint64_t v5 = 40LL;
  }
  [*(id *)(a1 + v5) addObject:v6];
}

void sub_100190804(id *a1)
{
}

void sub_100190CE8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
}

id sub_100190D24(uint64_t a1)
{
  return [*(id *)(a1 + 32) requestKeyMaterialForGroup:*(void *)(a1 + 40) sessionID:*(void *)(a1 + 48) toSpecificMembers:*(void *)(a1 + 56) requireMKM:1 requireSKM:1];
}

id sub_100190D3C(uint64_t a1)
{
  return [*(id *)(a1 + 32) requestKeyMaterialForGroup:*(void *)(a1 + 40) sessionID:*(void *)(a1 + 48) toSpecificMembers:*(void *)(a1 + 56) requireMKM:0 requireSKM:1];
}

uint64_t sub_100191330(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 pushToken]);
  if (v7)
  {
    __int16 v8 = (void *)objc_claimAutoreleasedReturnValue([v5 pushToken]);
    if ([v8 isNull])
    {
      unsigned int v9 = 0;
    }

    else
    {
      uint64_t v10 = *(void **)(a1 + 32);
      unsigned int v11 = (void *)objc_claimAutoreleasedReturnValue([v5 pushToken]);
      __int16 v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "__imHexString"));
      unsigned int v9 = [v10 containsObject:v12];
    }
  }

  else
  {
    unsigned int v9 = 0;
  }

  id v13 = (void *)objc_claimAutoreleasedReturnValue([v6 pushToken]);
  if (v13)
  {
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v6 pushToken]);
    if ([v14 isNull])
    {
      unsigned int v15 = 0;
    }

    else
    {
      uint64_t v16 = *(void **)(a1 + 32);
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v6 pushToken]);
      int v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "__imHexString"));
      unsigned int v15 = [v16 containsObject:v18];
    }
  }

  else
  {
    unsigned int v15 = 0;
  }

  if (v9 ^ 1 | v15) {
    uint64_t v19 = (v9 ^ 1) & v15;
  }
  else {
    uint64_t v19 = -1LL;
  }

  return v19;
}

id sub_100192C30(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[IDSEncryptionController sharedInstance](&OBJC_CLASS___IDSEncryptionController, "sharedInstance"));
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) service]);
  __int16 v8 = (void *)objc_claimAutoreleasedReturnValue([v7 identifier]);
  unsigned int v9 = (void *)objc_claimAutoreleasedReturnValue([v6 publicKeySignData:v5 withSignatureType:0 service:v8 priority:300 error:a3]);

  return v9;
}

void sub_100192ED0(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sessionController]);
  uint64_t v3 = (uint64_t *)(a1 + 40);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 sessionWithGroupID:*(void *)(a1 + 40)]);

  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController"));
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *v3;
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v4 uniqueID]);
    *(_DWORD *)buf = 138412802;
    uint64_t v25 = v6;
    __int16 v26 = 2112;
    uint64_t v27 = v7;
    __int16 v28 = 2112;
    uint64_t v29 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "rollNewKeysAfterResettingPrekeysForGroups: %@ session %@: %@",  buf,  0x20u);
  }

  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472LL;
  v20[2] = sub_1001930DC;
  v20[3] = &unk_1008F60E8;
  __int128 v21 = *(_OWORD *)(a1 + 32);
  id v22 = *(id *)(a1 + 48);
  id v8 = v4;
  id v23 = v8;
  unsigned int v9 = objc_retainBlock(v20);
  uint64_t v10 = (void (**)(void))v9;
  if (v8)
  {
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472LL;
    v18[2] = sub_100193298;
    void v18[3] = &unk_1008F6330;
    uint64_t v19 = v9;
    [v8 recvMembershipChangeEventWithReason:3 completionHandler:v18];
  }

  else
  {
    unsigned int v11 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController"));
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      sub_10069F8CC((uint64_t)v3, v11, v12, v13, v14, v15, v16, v17);
    }

    v10[2](v10);
  }
}

void sub_1001930DC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) resetKeysForGroup:*(void *)(a1 + 40) shouldRemoveCurrentParticipants:1];
  uint64_t v4 = im_primary_queue(v2, v3);
  id v5 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v4);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_10019318C;
  v8[3] = &unk_1008F60E8;
  v8[4] = *(void *)(a1 + 32);
  id v6 = *(id *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 40);
  id v9 = v6;
  uint64_t v10 = v7;
  id v11 = *(id *)(a1 + 56);
  dispatch_async(v5, v8);
}

void sub_10019318C(uint64_t a1)
{
  id v2 =  [*(id *)(a1 + 32) createRealTimeEncryptionFullIdentityForDevice:*(void *)(a1 + 40) completionBlock:0];
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 48);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) uniqueID]);
  [v3 sendPublicKeyToGroup:v4 sessionID:v5];

  id v6 = *(void **)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 48);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) uniqueID]);
  [v6 requestKeyMaterialForGroup:v7 sessionID:v8];

  id v9 = *(void **)(a1 + 32);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) uniqueID]);
  [v9 _updateRelevantEncryptedDataBlobForSession:v10];

  id v11 = (id)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjectsAndKeys:",  &off_100947398,  IDSGlobalLinkOptionSessionInfoRequestTypeKey,  &off_1009473C8,  IDSGlobalLinkOptionSessionInfoCommandFlagKey,  0LL));
  [*(id *)(a1 + 56) requestSessionInfoWithOptions:v11];
}

uint64_t sub_100193298(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100193680(uint64_t a1)
{
  id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController_oversize]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController_oversize"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = 136315651;
    id v5 = "IDSGroupEncryptionController1.m";
    __int16 v6 = 1024;
    int v7 = 3749;
    __int16 v8 = 2113;
    uint64_t v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s:%d %{private}@", (uint8_t *)&v4, 0x1Cu);
  }
}

void sub_100193750(void *a1)
{
  id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = a1[5];
    uint64_t v5 = a1[6];
    int v10 = 138412802;
    uint64_t v11 = v3;
    __int16 v12 = 2112;
    uint64_t v13 = v4;
    __int16 v14 = 2112;
    uint64_t v15 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "didReceiveEndpointsUpdate: %@ forGroup: %@ - roll new keys for the group (previous %@)",  (uint8_t *)&v10,  0x20u);
  }

  __int16 v6 = (void *)a1[7];
  int v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObject:](&OBJC_CLASS___NSArray, "arrayWithObject:", a1[5]));
  [v6 rollNewKeysAfterResettingPrekeysForGroups:v7 withReason:2];

  [*(id *)(a1[7] + 368) invalidate];
  uint64_t v8 = a1[7];
  uint64_t v9 = *(void **)(v8 + 368);
  *(void *)(v8 + 36_Block_object_dispose((const void *)(v1 - 160), 8) = 0LL;
}

void sub_1001941E0(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_1001942DC;
  v10[3] = &unk_1008FC5A0;
  id v11 = v2;
  id v3 = *(id *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  id v12 = v3;
  uint64_t v13 = v4;
  [v11 initializeWithCompletion:v10];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_100194584;
  v7[3] = &unk_1008FC5C8;
  int8x16_t v6 = *(int8x16_t *)(a1 + 40);
  id v5 = (id)v6.i64[0];
  int8x16_t v8 = vextq_s8(v6, v6, 8uLL);
  id v9 = *(id *)(a1 + 56);
  [*(id *)(a1 + 32) setResolvedEndpointsDidUpdateHandler:v7];
}

void sub_1001942DC(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  int v7 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  id v8 = v5;
  id v9 = [v8 countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v19;
    do
    {
      id v12 = 0LL;
      do
      {
        if (*(void *)v19 != v11) {
          objc_enumerationMutation(v8);
        }
        uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v18 + 1) + 8 * (void)v12) pushTokenObject]);
        -[NSMutableSet addObject:](v7, "addObject:", v13);

        id v12 = (char *)v12 + 1;
      }

      while (v10 != v12);
      id v10 = [v8 countByEnumeratingWithState:&v18 objects:v22 count:16];
    }

    while (v10);
  }

  __int16 v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"setMembers: endpointSubscription: %p groupID %@ error: %@ newPushTokensForGroup: %@",  a1[4],  a1[5],  v6,  v7));
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  void v16[2] = sub_1001944B4;
  void v16[3] = &unk_1008F6010;
  id v17 = v14;
  id v15 = v14;
  cut_dispatch_log_queue(v16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1[6] + 28LL));
  [*(id *)(a1[6] + 232) setObject:v7 forKeyedSubscript:a1[5]];
  os_unfair_lock_unlock((os_unfair_lock_t)(a1[6] + 28LL));
}

void sub_1001944B4(uint64_t a1)
{
  id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController_oversize]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController_oversize"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = 136315651;
    id v5 = "IDSGroupEncryptionController1.m";
    __int16 v6 = 1024;
    int v7 = 3876;
    __int16 v8 = 2113;
    uint64_t v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s:%d %{private}@", (uint8_t *)&v4, 0x1Cu);
  }
}

id sub_100194584(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) didReceiveEndpointsUpdate:a2 forGroup:*(void *)(a1 + 40) sessionID:*(void *)(a1 + 48)];
}

void sub_100194B94(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 48) count];
  if (v2)
  {
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController"));
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 72);
      uint64_t v5 = *(void *)(a1 + 48);
      *(_DWORD *)buf = 134218242;
      uint64_t v14 = v4;
      __int16 v15 = 2112;
      uint64_t v16 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "_dispatchDeferredPrekeyRequestForGroupID - after %f sec, now sending prekey request to group because we still ha ve not delivered key material to participants %@",  buf,  0x16u);
    }
  }

  __int16 v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_100194D44;
  v10[3] = &unk_1008FC208;
  void v10[4] = *(void *)(a1 + 32);
  int v7 = *(void **)(a1 + 56);
  id v11 = *(id *)(a1 + 48);
  id v8 = v6;
  id v12 = v8;
  [v7 enumerateObjectsUsingBlock:v10];
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDestination destinationWithDestinations:]( &OBJC_CLASS___IDSDestination,  "destinationWithDestinations:",  v8));
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 28LL));
  if (v2) {
    [*(id *)(a1 + 32) sendPrekeyRequestToDestination:v9 group:*(void *)(a1 + 40) sessionID:*(void *)(a1 + 64)];
  }
}

void sub_100194D44(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 participantPushTokenObject]);
  if (([v4 _isValidPushToken:v5] & 1) == 0)
  {
LABEL_6:

    goto LABEL_7;
  }

  __int16 v6 = *(void **)(a1 + 40);
  int v7 = (void *)objc_claimAutoreleasedReturnValue([v3 participantPushTokenObject]);
  LODWORD(v6) = [v6 containsObject:v7];

  if ((_DWORD)v6)
  {
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController"));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 138412290;
      id v12 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "_dispatchDeferredPrekeyRequestForGroupID - adding participant to destinations for prekey request %@",  (uint8_t *)&v11,  0xCu);
    }

    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v3 participantURI]);
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v3 participantPushToken]);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDestination destinationWithAlias:pushToken:]( &OBJC_CLASS___IDSDestination,  "destinationWithAlias:pushToken:",  v9,  v10));

    [*(id *)(a1 + 48) addObject:v5];
    goto LABEL_6;
  }

void sub_100196394(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 participantPushTokenObject]);
  if ([v3 isKnown]
    && [*(id *)(a1 + 32) _isValidPushToken:v4])
  {
    if (([*(id *)(a1 + 40) containsObject:v4] & 1) == 0)
    {
      [*(id *)(a1 + 40) addObject:v4];
      if (v3)
      {
        uint64_t v5 = *(__CFArray **)(a1 + 48);
        if (v5) {
          CFArrayAppendValue(v5, v3);
        }
      }
    }

    if ([*(id *)(a1 + 56) containsObject:v4])
    {
      __int16 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController"));
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        int v7 = 138412290;
        id v8 = v3;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "_updateLightweightParticipants: remove standard participant: %@ due to downgrade",  (uint8_t *)&v7,  0xCu);
      }

      [*(id *)(a1 + 56) removeObject:v4];
    }
  }
}

void sub_1001964C8(uint64_t a1)
{
  id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController_oversize]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController_oversize"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = 136315651;
    uint64_t v5 = "IDSGroupEncryptionController1.m";
    __int16 v6 = 1024;
    int v7 = 4143;
    __int16 v8 = 2113;
    uint64_t v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s:%d %{private}@", (uint8_t *)&v4, 0x1Cu);
  }
}

void sub_100196598(uint64_t a1)
{
  id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController_oversize]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController_oversize"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = 136315651;
    uint64_t v5 = "IDSGroupEncryptionController1.m";
    __int16 v6 = 1024;
    int v7 = 4146;
    __int16 v8 = 2113;
    uint64_t v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s:%d %{private}@", (uint8_t *)&v4, 0x1Cu);
  }
}

void sub_100196668(uint64_t a1)
{
  id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController_oversize]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController_oversize"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = 136315651;
    uint64_t v5 = "IDSGroupEncryptionController1.m";
    __int16 v6 = 1024;
    int v7 = 4162;
    __int16 v8 = 2113;
    uint64_t v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s:%d %{private}@", (uint8_t *)&v4, 0x1Cu);
  }
}

id sub_100196738(uint64_t a1)
{
  LOBYTE(v2) = 1;
  return [*(id *)(a1 + 32) _requestKeyMaterialForGroup:*(void *)(a1 + 40) sessionID:*(void *)(a1 + 48) toSpecificMembers:*(void *)(a1 + 56) shouldTrackDistribution:0 shouldIncludeCachedPeerKeyMat erial:0 requireMKM:0 requireSKM:v2];
}

void sub_100196EEC(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = (void *)objc_claimAutoreleasedReturnValue([v3 participantPushTokenObject]);
  if ([v3 isKnown]
    && [*(id *)(a1 + 32) _isValidPushToken:v4])
  {
    if (([*(id *)(a1 + 40) containsObject:v4] & 1) == 0)
    {
      [*(id *)(a1 + 40) addObject:v4];
      if (v3)
      {
        uint64_t v5 = *(__CFArray **)(a1 + 48);
        if (v5) {
          CFArrayAppendValue(v5, v3);
        }
      }
    }

    if ([*(id *)(a1 + 56) containsObject:v4])
    {
      __int16 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController"));
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        int v7 = 138412290;
        id v8 = v3;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "_updateStandardParticipants: remove lightweight participant: %@ due to upgrade",  (uint8_t *)&v7,  0xCu);
      }

      [*(id *)(a1 + 56) removeObject:v4];
    }
  }
}

void sub_100197020(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController_oversize]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController_oversize"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = 136315651;
    uint64_t v5 = "IDSGroupEncryptionController1.m";
    __int16 v6 = 1024;
    int v7 = 4231;
    __int16 v8 = 2113;
    uint64_t v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s:%d %{private}@", (uint8_t *)&v4, 0x1Cu);
  }
}

void sub_1001970F0(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController_oversize]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController_oversize"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = 136315651;
    uint64_t v5 = "IDSGroupEncryptionController1.m";
    __int16 v6 = 1024;
    int v7 = 4234;
    __int16 v8 = 2113;
    uint64_t v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s:%d %{private}@", (uint8_t *)&v4, 0x1Cu);
  }
}

void sub_1001971C0(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController_oversize]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController_oversize"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = 136315651;
    uint64_t v5 = "IDSGroupEncryptionController1.m";
    __int16 v6 = 1024;
    int v7 = 4253;
    __int16 v8 = 2113;
    uint64_t v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s:%d %{private}@", (uint8_t *)&v4, 0x1Cu);
  }
}

id sub_100197290(uint64_t a1)
{
  LOBYTE(v2) = 1;
  return [*(id *)(a1 + 32) _requestKeyMaterialForGroup:*(void *)(a1 + 40) sessionID:*(void *)(a1 + 48) toSpecificMembers:*(void *)(a1 + 56) shouldTrackDistribution:0 shouldIncludeCachedPeerKeyMat erial:*(unsigned __int8 *)(a1 + 64) requireMKM:1 requireSKM:v2];
}

void sub_100197770(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sessionController]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 sessionWithGroupID:*(void *)(a1 + 40)]);

  int v4 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 40);
    int v6 = 138412290;
    uint64_t v7 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Account is no longer registered, ending group: %@",  (uint8_t *)&v6,  0xCu);
  }

  [v3 endSessionWithReason:47];
}

void sub_100197CCC(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
}

id sub_100197CE0(uint64_t a1, void *a2)
{
  return [a2 wrapMode];
}

  ;
}

  ;
}

  ;
}

void sub_100197D5C(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___IDSUserNotificationsCenter);
  uint64_t v2 = (void *)qword_1009BEC98;
  qword_1009BEC98 = (uint64_t)v1;
}

void sub_1001981DC(id a1)
{
  qword_1009BECA0 = IMWeakLinkClass(@"UNNotificationRequest", @"UserNotifications");
  qword_1009BECA8 = IMWeakLinkClass(@"UNMutableNotificationContent", @"UserNotifications");
  qword_1009BECB0 = IMWeakLinkClass(@"UNNotificationIcon", @"UserNotifications");
}

void sub_100198244(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog delivery](&OBJC_CLASS___IDSFoundationLog, "delivery"));
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 138412290;
    uint64_t v5 = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Added ids notification request {error: %@}",  (uint8_t *)&v4,  0xCu);
  }
}

id sub_1001987CC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  int v6 = (void *)objc_claimAutoreleasedReturnValue([a2 objectForKey:v5]);
  if ((objc_opt_isKindOfClass(v6, a1) & 1) != 0)
  {
    id v7 = v6;
  }

  else
  {
    if (v6)
    {
      __int16 v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT)) {
        sub_10069FBAC((uint64_t)v5, a1, v8);
      }
    }

    id v7 = 0LL;
  }

  return v7;
}

NSString *__cdecl sub_100198874(id a1, NSDictionary *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = objc_opt_class(&OBJC_CLASS___NSString, v3);
  id v5 = sub_1001987CC(v4, v2, @"uri");
  int v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

  return (NSString *)v6;
}

id sub_1001995BC(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _timerFired:a2];
}

void sub_10019ABF4(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v8 = a2;
  id v9 = a3;
  id v10 = a5;
  id v15 = v8;
  int v11 = (void *)objc_claimAutoreleasedReturnValue([v15 responseEntries]);
  if (v11)
  {
    id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) arrayByAddingObjectsFromArray:v11]);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v11 lastObject]);
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v13 objectForKeyedSubscript:@"next-key"]);
    if (v14) {
      [*(id *)(a1 + 40) _queryGroupServerENID:v14 withPreviousEntries:v12 completion:*(void *)(a1 + 48)];
    }
    else {
      (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
    }
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
}

void sub_10019ADA0(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v8 = a2;
  id v9 = a3;
  id v10 = a5;
  id v11 = v8;
  id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 responseEntries]);
  if (v12)
  {
    uint64_t v13 = *(void **)(a1 + 32);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    void v15[2] = sub_10019AEB4;
    v15[3] = &unk_1008FC750;
    id v16 = v11;
    id v17 = *(id *)(a1 + 40);
    id v14 = [v13 _getMessageCompletionCurrentEntries:v12 withCompletion:v15];
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
}

void sub_10019AEB4(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5, void *a6)
{
  id v10 = a6;
  id v11 = a5;
  id v13 = a3;
  id v12 = (void *)objc_claimAutoreleasedReturnValue([a2 responseEntries]);
  [*(id *)(a1 + 32) setResponseEntries:v12];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

NSData *sub_10019C754(int a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!v6)
  {
    uint64_t v7 = OSLogHandleForIDSCategory("AOVERCEncryption");
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      id v9 = @"decrypt";
      if (a1) {
        id v9 = @"encrypt";
      }
      *(_DWORD *)buf = 138412290;
      *(void *)&uint8_t buf[4] = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "asked to %@, but key is NULL!", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v10)
      && _IDSShouldLog(0LL, @"AOVERCEncryption"))
    {
      id v11 = @"decrypt";
      if (a1) {
        id v11 = @"encrypt";
      }
      __int128 v20 = v11;
      _IDSLogV(0LL, @"IDSFoundation", @"AOVERCEncryption", @"asked to %@, but key is NULL!");
    }
  }

  if (!v5)
  {
    id v14 = 0LL;
    goto LABEL_23;
  }

  *(void *)buf = 0LL;
  id v12 = v6;
  if (CCCryptorCreate( a1 ^ 1,  0,  1u,  [v12 bytes],  (size_t)objc_msgSend(v12, "length"),  0,  (CCCryptorRef *)buf))
  {
    id v13 = 0LL;
  }

  else
  {
    id v15 = [v5 length];
    size_t OutputLength = CCCryptorGetOutputLength(*(CCCryptorRef *)buf, (size_t)v15, 1);
    size_t v21 = 0LL;
    size_t dataOutMoved = 0LL;
    id v13 = (char *)malloc(OutputLength);
    if (!CCCryptorUpdate( *(CCCryptorRef *)buf, [v5 bytes], (size_t)v15, v13, OutputLength, &dataOutMoved)
      && !CCCryptorFinal(*(CCCryptorRef *)buf, &v13[dataOutMoved], OutputLength - dataOutMoved, &v21))
    {
      __int128 v18 = objc_alloc(&OBJC_CLASS___NSData);
      if (a1) {
        size_t v19 = OutputLength;
      }
      else {
        size_t v19 = v21 + dataOutMoved;
      }
      id v14 = -[NSData initWithBytesNoCopy:length:freeWhenDone:]( v18,  "initWithBytesNoCopy:length:freeWhenDone:",  v13,  v19,  1LL,  v20);
      goto LABEL_18;
    }
  }

  id v14 = 0LL;
LABEL_18:
  if (*(void *)buf) {
    CCCryptorRelease(*(CCCryptorRef *)buf);
  }
  if (v13 && !v14) {
    free(v13);
  }
LABEL_23:

  return v14;
}

void sub_10019D6BC(id a1)
{
  off_1009BECC0 = (_UNKNOWN *)IMWeakLinkSymbol("SecMPSignAndProtectMessage", @"MessageProtection");
}

void sub_10019D6E8(id a1)
{
  off_1009BECD0 = (_UNKNOWN *)IMWeakLinkSymbol("SecMPPublicIdentityCreateFromData", @"MessageProtection");
}

void sub_10019D714(uint64_t a1)
{
}

void sub_10019E3F8(id a1)
{
  off_1009BECE0 = (_UNKNOWN *)IMWeakLinkSymbol("SecMPPublicIdentityCreateFromData", @"MessageProtection");
}

void sub_10019E424(id a1)
{
  off_1009BECF0 = (_UNKNOWN *)IMWeakLinkSymbol("SecMPVerifyAndExposeMessage", @"MessageProtection");
}

void sub_10019E50C(id a1)
{
  off_1009BED00 = (_UNKNOWN *)IMWeakLinkSymbol("SecMPPublicIdentityCreateFromData", @"MessageProtection");
}

void sub_10019E538(id a1)
{
  off_1009BED10 = (_UNKNOWN *)IMWeakLinkSymbol("SecMPCopyProtectedMsgHash", @"MessageProtection");
}

id sub_10019E564()
{
  if (qword_1009BED28 != -1) {
    dispatch_once(&qword_1009BED28, &stru_1008FC878);
  }
  return (id)qword_1009BED20;
}

void sub_10019E5A4(id a1)
{
  id v1 = objc_alloc_init((Class)+[FTMessageDelivery APNSMessageDeliveryClass]( &OBJC_CLASS___FTMessageDelivery,  "APNSMessageDeliveryClass"));
  uint64_t v2 = (void *)qword_1009BED20;
  qword_1009BED20 = (uint64_t)v1;

  uint64_t v3 = (void *)qword_1009BED20;
  uint64_t v4 = IMGetDomainIntForKey(@"com.apple.ids", @"numberOfSimultaneousOutgoingMessages");
  if (v4 <= 0) {
    uint64_t v5 = 8LL;
  }
  else {
    uint64_t v5 = v4;
  }
  _[v3 setMaxConcurrentMessages:v5];
}

uint64_t sub_10019E604(void *a1, _BYTE *a2)
{
  id v3 = a1;
  if (!qword_1009BED30)
  {
    uint64_t v4 = (void **)IMWeakLinkSymbol("APSErrorDomain", @"ApplePushService");
    if (v4) {
      uint64_t v5 = *v4;
    }
    else {
      uint64_t v5 = 0LL;
    }
    objc_storeStrong((id *)&qword_1009BED30, v5);
  }

  id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 domain]);
  unsigned int v7 = [v6 isEqualToString:IMRemoteURLConnectionErrorDomain];

  if (v7) {
    int v8 = [v3 code] == (id)-1;
  }
  else {
    int v8 = 0;
  }
  if ([v3 code] == (id)-1009)
  {
    BOOL v9 = 1;
    if (!a2) {
      goto LABEL_18;
    }
  }

  else
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v3 domain]);
    else {
      BOOL v9 = 0;
    }

    if (!a2) {
      goto LABEL_18;
    }
  }

  if (v9) {
    *a2 = 1;
  }
LABEL_18:
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v3 domain]);
  if ([v11 isEqualToString:NSURLErrorDomain])
  {

LABEL_21:
    uint64_t v14 = (uint64_t)[v3 code];
    if (v14 <= -2)
    {
      switch(v14)
      {
        case -1019LL:
        case -1011LL:
        case -1009LL:
        case -1008LL:
        case -1006LL:
        case -1005LL:
        case -1004LL:
        case -1003LL:
        case -1002LL:
        case -1001LL:
        case -999LL:
        case -998LL:
          goto LABEL_23;
        case -1018LL:
        case -1017LL:
        case -1016LL:
        case -1015LL:
        case -1014LL:
        case -1013LL:
        case -1012LL:
        case -1010LL:
        case -1007LL:
        case -1000LL:
          goto LABEL_24;
        default:
          if (v14 == -2000 || v14 == -1200) {
            goto LABEL_23;
          }
          break;
      }

      goto LABEL_24;
    }

    if (v14 > 1)
    {
      if (v14 != 311 && v14 != 310 && v14 != 2) {
        goto LABEL_24;
      }
LABEL_23:
      LOBYTE(v_Block_object_dispose((const void *)(v1 - 160), 8) = 1;
      goto LABEL_24;
    }

    if (v14 == -1) {
      goto LABEL_23;
    }
LABEL_41:
    if (v14 != 1) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }

  id v12 = (void *)objc_claimAutoreleasedReturnValue([v3 domain]);
  unsigned int v13 = [v12 isEqualToString:kCFErrorDomainCFNetwork];

  if (v13) {
    goto LABEL_21;
  }
  if (qword_1009BED30
    && (id v16 = (void *)objc_claimAutoreleasedReturnValue([v3 domain]),
        unsigned int v17 = [v16 isEqualToString:qword_1009BED30],
        v16,
        v17))
  {
  }

  else
  {
    __int128 v18 = (void *)objc_claimAutoreleasedReturnValue([v3 domain]);
    unsigned int v19 = [v18 isEqualToString:IDSRemoteURLConnectionErrorDomain];

    if (v19)
    {
      uint64_t v14 = (uint64_t)[v3 code];
      if (v14 == 2) {
        goto LABEL_23;
      }
      goto LABEL_41;
    }

    __int128 v20 = (void *)objc_claimAutoreleasedReturnValue([v3 domain]);
    unsigned int v21 = [v20 isEqualToString:NSPOSIXErrorDomain];

    if (v21)
    {
      id v22 = (char *)[v3 code];
    }
  }

uint64_t sub_10019E8E0(void *a1)
{
  id v1 = a1;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 domain]);
  if ([v2 isEqualToString:NSURLErrorDomain])
  {
  }

  else
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([v1 domain]);
    unsigned int v4 = [v3 isEqualToString:kCFErrorDomainCFNetwork];

    if (!v4)
    {
      int v8 = (void *)objc_claimAutoreleasedReturnValue([v1 domain]);
      unsigned int v9 = [v8 isEqualToString:NSPOSIXErrorDomain];

      if (v9)
      {
        uint64_t v10 = (char *)[v1 code];
        else {
          uint64_t v6 = 0LL;
        }
      }

      else
      {
        uint64_t v6 = 0LL;
      }

      goto LABEL_7;
    }
  }

  uint64_t v5 = (uint64_t)[v1 code];
  uint64_t v6 = 0LL;
  if (v5 > -2)
  {
    if (v5 > 309)
    {
      if (v5 != 310 && v5 != 311) {
        goto LABEL_7;
      }
    }

    else if (v5 != -1 && v5 != 2)
    {
      goto LABEL_7;
    }

uint64_t sub_10019EA40(uint64_t result)
{
  if (result > 5199)
  {
    if (result <= 6999)
    {
      switch(result)
      {
        case 6000LL:
          id result = 71LL;
          break;
        case 6001LL:
          id result = 94LL;
          break;
        case 6002LL:
          id result = 95LL;
          break;
        case 6003LL:
          id result = 96LL;
          break;
        case 6004LL:
          id result = 97LL;
          break;
        case 6005LL:
          id result = 98LL;
          break;
        case 6006LL:
          id result = 101LL;
          break;
        case 6007LL:
          return result;
        case 6008LL:
          id result = 99LL;
          break;
        case 6009LL:
          id result = 100LL;
          break;
        case 6010LL:
          id result = 102LL;
          break;
        case 6011LL:
          id result = 103LL;
          break;
        case 6012LL:
          id result = 104LL;
          break;
        case 6013LL:
          id result = 105LL;
          break;
        default:
          switch(result)
          {
            case 5200LL:
              id result = 86LL;
              break;
            case 5201LL:
              id result = 87LL;
              break;
            case 5202LL:
              id result = 88LL;
              break;
            case 5203LL:
              id result = 89LL;
              break;
            case 5204LL:
              id result = 91LL;
              break;
            case 5205LL:
              id result = 90LL;
              break;
            case 5206LL:
              id result = 92LL;
              break;
            case 5207LL:
              id result = 93LL;
              break;
            default:
              return result;
          }

          break;
      }
    }

    else
    {
      if (result == 20001) {
        int v1 = 74;
      }
      else {
        int v1 = result;
      }
      if (result == 20000) {
        int v2 = 74;
      }
      else {
        int v2 = v1;
      }
      if (result == 10000) {
        unsigned int v3 = 73;
      }
      else {
        unsigned int v3 = v2;
      }
      if (result == 8001) {
        int v4 = 72;
      }
      else {
        int v4 = result;
      }
      if (result == 8000) {
        int v5 = 72;
      }
      else {
        int v5 = v4;
      }
      if (result == 7000) {
        unsigned int v6 = 77;
      }
      else {
        unsigned int v6 = v5;
      }
      if (result <= 9999) {
        return v6;
      }
      else {
        return v3;
      }
    }
  }

  else if (result <= 4999)
  {
    if (result > 999)
    {
      switch(result)
      {
        case 1000LL:
          id result = 70LL;
          break;
        case 1001LL:
          id result = 78LL;
          break;
        case 1002LL:
          id result = 79LL;
          break;
        case 1003LL:
          id result = 80LL;
          break;
        case 1004LL:
          id result = 81LL;
          break;
        case 1005LL:
          id result = 82LL;
          break;
        case 1006LL:
          id result = 83LL;
          break;
        default:
          return result;
      }
    }

    else if (result <= 439)
    {
      if (result == 200) {
        unsigned int v7 = 2;
      }
      else {
        unsigned int v7 = result;
      }
      if (result == 1) {
        unsigned int v7 = 0;
      }
      if (result) {
        return v7;
      }
      else {
        return 1LL;
      }
    }

    else
    {
      switch(result)
      {
        case 440LL:
          id result = 108LL;
          break;
        case 441LL:
          id result = 106LL;
          break;
        case 442LL:
          id result = 107LL;
          break;
        case 443LL:
          id result = 109LL;
          break;
        default:
          return result;
      }
    }
  }

  else
  {
    switch(result)
    {
      case 5000LL:
        id result = 3LL;
        break;
      case 5001LL:
        id result = 4LL;
        break;
      case 5002LL:
        id result = 5LL;
        break;
      case 5003LL:
        id result = 6LL;
        break;
      case 5004LL:
        id result = 7LL;
        break;
      case 5005LL:
        id result = 8LL;
        break;
      case 5006LL:
        id result = 9LL;
        break;
      case 5007LL:
        id result = 10LL;
        break;
      case 5008LL:
        id result = 11LL;
        break;
      case 5009LL:
        id result = 12LL;
        break;
      case 5010LL:
        id result = 13LL;
        break;
      case 5011LL:
        id result = 14LL;
        break;
      case 5012LL:
        id result = 15LL;
        break;
      case 5013LL:
        id result = 16LL;
        break;
      case 5014LL:
        id result = 17LL;
        break;
      case 5015LL:
        id result = 18LL;
        break;
      case 5016LL:
        id result = 19LL;
        break;
      case 5017LL:
        id result = 20LL;
        break;
      case 5018LL:
        id result = 21LL;
        break;
      case 5019LL:
        id result = 22LL;
        break;
      case 5020LL:
        id result = 23LL;
        break;
      case 5021LL:
        id result = 24LL;
        break;
      case 5022LL:
        id result = 25LL;
        break;
      case 5023LL:
        id result = 26LL;
        break;
      case 5024LL:
        id result = 27LL;
        break;
      case 5025LL:
        id result = 28LL;
        break;
      case 5026LL:
        id result = 29LL;
        break;
      case 5027LL:
        id result = 30LL;
        break;
      case 5028LL:
        id result = 31LL;
        break;
      case 5029LL:
        id result = 32LL;
        break;
      case 5030LL:
        id result = 33LL;
        break;
      case 5031LL:
        id result = 34LL;
        break;
      case 5032LL:
        id result = 35LL;
        break;
      case 5033LL:
        id result = 36LL;
        break;
      case 5034LL:
        id result = 37LL;
        break;
      case 5035LL:
        id result = 41LL;
        break;
      case 5036LL:
        id result = 42LL;
        break;
      case 5037LL:
        id result = 43LL;
        break;
      case 5038LL:
        id result = 44LL;
        break;
      case 5039LL:
        id result = 38LL;
        break;
      case 5040LL:
        id result = 39LL;
        break;
      case 5041LL:
        id result = 40LL;
        break;
      case 5046LL:
        id result = 45LL;
        break;
      case 5047LL:
        id result = 46LL;
        break;
      case 5048LL:
        id result = 47LL;
        break;
      case 5051LL:
        id result = 48LL;
        break;
      case 5052LL:
        id result = 49LL;
        break;
      case 5055LL:
        id result = 76LL;
        break;
      case 5057LL:
        id result = 50LL;
        break;
      case 5058LL:
        id result = 51LL;
        break;
      case 5059LL:
        id result = 52LL;
        break;
      case 5060LL:
        id result = 53LL;
        break;
      case 5061LL:
        id result = 54LL;
        break;
      case 5062LL:
        id result = 55LL;
        break;
      case 5063LL:
        id result = 56LL;
        break;
      case 5064LL:
        id result = 57LL;
        break;
      case 5068LL:
        id result = 58LL;
        break;
      case 5076LL:
        id result = 64LL;
        break;
      case 5078LL:
        id result = 59LL;
        break;
      case 5079LL:
        id result = 60LL;
        break;
      case 5080LL:
        id result = 61LL;
        break;
      case 5085LL:
        id result = 65LL;
        break;
      case 5086LL:
        id result = 66LL;
        break;
      case 5087LL:
        id result = 67LL;
        break;
      case 5088LL:
        id result = 68LL;
        break;
      case 5089LL:
        id result = 62LL;
        break;
      case 5090LL:
        id result = 63LL;
        break;
      case 5092LL:
        id result = 69LL;
        break;
      case 5099LL:
        id result = 75LL;
        break;
      case 5100LL:
        id result = 84LL;
        break;
      case 5103LL:
        id result = 85LL;
        break;
      default:
        return result;
    }
  }

  return result;
}

uint64_t sub_10019EF00(uint64_t result)
{
  return result;
}

void sub_10019EF5C(id a1)
{
  qword_1009BED38 = IMWeakLinkClass(@"IMTransferServicesController", @"IMTransferServices");
}

void sub_10019F584(id a1)
{
  int v1 = objc_alloc_init(&OBJC_CLASS___IDSAppleIDNotificationCenter);
  int v2 = (void *)qword_1009BED50;
  qword_1009BED50 = (uint64_t)v1;
}

void sub_10019F770(id a1, IDSAppleIDNotificationCenter *a2)
{
}

void sub_10019F778(id a1, IDSAppleIDNotificationCenter *a2)
{
}

id sub_10019FEBC(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v3;
  if (IDSIsiMessageRegistrationServiceType())
  {
    unsigned int v6 = @"iMessage";
    unsigned int v7 = @"SMS Registration alert title: iMessage";
LABEL_5:
    uint64_t v9 = IMLocalizedStringFromTableInBundle(v6, @"IDSLocalizable", v4, v7);
    int v8 = (void *)objc_claimAutoreleasedReturnValue(v9);

    goto LABEL_6;
  }

  int v8 = v5;
  if (IDSIsFaceTimeRegistrationServiceType(v5))
  {
    unsigned int v6 = @"FaceTime";
    unsigned int v7 = @"SMS Registration alert title: FaceTime";
    goto LABEL_5;
  }

void sub_10019FF64(id *a1, void *a2)
{
  id v3 = [a2 response];
  BOOL v24 = v3 == 0LL;
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v5)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, " => User hit no, ignoring", buf, 2u);
    }

    unsigned int v6 = a1 + 4;
    if ([a1[4] length])
    {
      unsigned int v7 = 0LL;
LABEL_10:
      __int128 v32 = 0u;
      __int128 v33 = 0u;
      __int128 v30 = 0u;
      __int128 v31 = 0u;
      id v12 = a1[5];
      id v13 = [v12 countByEnumeratingWithState:&v30 objects:v35 count:16];
      if (v13)
      {
        id v14 = v13;
        uint64_t v15 = *(void *)v31;
        do
        {
          for (i = 0LL; i != v14; i = (char *)i + 1)
          {
            if (*(void *)v31 != v15) {
              objc_enumerationMutation(v12);
            }
            uint64_t v17 = objc_claimAutoreleasedReturnValue([a1[6] objectForKey:*(void *)(*((void *)&v30 + 1) + 8 * (void)i)]);
            unsigned int v19 = (void *)v17;
            if (v17)
            {
              uint64_t v20 = im_primary_queue(v17, v18);
              unsigned int v21 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v20);
              block[0] = _NSConcreteStackBlock;
              block[1] = 3221225472LL;
              block[2] = sub_1001A01C4;
              block[3] = &unk_1008F8558;
              id v28 = v19;
              BOOL v29 = v24;
              id v22 = v7;
              uint64_t v23 = *v6;
              id v26 = v22;
              uint64_t v27 = v23;
              dispatch_async(v21, block);
            }
          }

          id v14 = [v12 countByEnumeratingWithState:&v30 objects:v35 count:16];
        }

        while (v14);
      }
    }
  }

  else
  {
    if (v5)
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  " => User hit yes, adding and validating",  buf,  2u);
    }

    unsigned int v6 = a1 + 4;
    if ([a1[4] length])
    {
      uint64_t v11 = IMSingleObjectArray(*v6, v8, v9, v10);
      unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue(v11);
      goto LABEL_10;
    }
  }

uint64_t sub_1001A01C4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void))(*(void *)(a1 + 48) + 16LL))( *(void *)(a1 + 48),  *(unsigned __int8 *)(a1 + 56),  *(void *)(a1 + 32),  *(void *)(a1 + 40));
}

void sub_1001A0A08(id a1, NSError *a2)
{
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (a2)
  {
    if (v4)
    {
      __int16 v8 = 0;
      BOOL v5 = "Error posting new device notification.";
      unsigned int v6 = (uint8_t *)&v8;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, v5, v6, 2u);
    }
  }

  else if (v4)
  {
    __int16 v7 = 0;
    BOOL v5 = "Posted new device notification.";
    unsigned int v6 = (uint8_t *)&v7;
    goto LABEL_6;
  }
}

NSMutableSet *sub_1001A1ADC(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_1001A1BA4;
  v10[3] = &unk_1008FC988;
  id v11 = v3;
  BOOL v5 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  id v12 = v5;
  id v6 = v3;
  [v4 enumerateObjectsUsingBlock:v10];

  __int16 v7 = v12;
  __int16 v8 = v5;

  return v8;
}

void sub_1001A1BA4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  id v8 = v3;
  BOOL v5 = (void *)objc_claimAutoreleasedReturnValue([v3 prefixedURI]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:v5]);
  unsigned __int8 v7 = [v6 BOOLValue];

  if ((v7 & 1) == 0) {
    [*(id *)(a1 + 40) addObject:v8];
  }
}

uint64_t sub_1001A1C20(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a4;
  id v8 = a3;
  uint64_t v9 = sub_1001A1ADC(a1, a2);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  id v11 = sub_1001A1ADC(v8, v7);
  id v12 = (void *)objc_claimAutoreleasedReturnValue(v11);

  uint64_t v13 = [v10 isEqualToSet:v12] ^ 1;
  return v13;
}

id sub_1001A338C()
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001A3408;
  block[3] = &unk_1008F6558;
  void block[4] = @"IDSFirewallStore";
  if (qword_1009BED60 != -1) {
    dispatch_once(&qword_1009BED60, block);
  }
  return (id)qword_1009BED58;
}

void sub_1001A3408(uint64_t a1)
{
  uint64_t v1 = CSDBCreateThreadedRecordStoreWithQOSClassAndLookAsideBufferConfig( *(void *)(a1 + 32),  0LL,  0x1F400000080LL,  1LL);
  int v2 = (void *)qword_1009BED58;
  qword_1009BED58 = v1;
}

void sub_1001A343C(void *a1)
{
  id v1 = a1;
  os_unfair_lock_assert_owner((os_unfair_lock_t)&unk_1009BED68);
  id v2 = sub_1001A338C();
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);

  if (v3)
  {
    id v4 = v1;
    BOOL v5 = objc_autoreleasePoolPush();
    id v6 = sub_1001A338C();
    id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_1001A3A38;
    v9[3] = &unk_1008FCA10;
    id v8 = v4;
    id v10 = v8;
    CSDBThreadedRecordStoreEnsureDatabaseSetupWithProtection( v7,  1LL,  v9,  sub_1001A3C08,  sub_1001A3CFC,  sub_1001A3F28,  sub_1001A3F80,  16000LL,  0,  &stru_1008FCA50);

    objc_autoreleasePoolPop(v5);
  }
}

void sub_1001A3540()
{
}

void sub_1001A354C(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1009BED68);
  sub_1001A343C(v3);

  id v5 = sub_1001A338C();
  id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  CSDBPerformLocked(v6, v4);

  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1009BED68);
}

void sub_1001A35BC(uint64_t a1, void *a2)
{
  id v3 = a2;
  os_unfair_lock_assert_owner((os_unfair_lock_t)&unk_1009BED68);
  id v4 = sub_1001A338C();
  id v5 = (id)objc_claimAutoreleasedReturnValue(v4);
  CSDBPerformUnlockedSectionForQueryForWriting(v5, a1, v3);
}

void sub_1001A3614(uint64_t a1, void *a2)
{
  id v3 = a2;
  os_unfair_lock_assert_owner((os_unfair_lock_t)&unk_1009BED68);
  id v4 = sub_1001A338C();
  id v5 = (id)objc_claimAutoreleasedReturnValue(v4);
  CSDBPerformUnlockedSectionForQueryForReading(v5, a1, v3);
}

double sub_1001A366C()
{
  uint64_t v0 = OSLogHandleForIDSCategory("IDSDFirewallMessageStore");
  id v1 = (os_log_s *)objc_claimAutoreleasedReturnValue(v0);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Saving database.", buf, 2u);
  }

  if (os_log_shim_legacy_logging_enabled(v2)
    && _IDSShouldLog(0LL, @"IDSDFirewallMessageStore"))
  {
    _IDSLogV(0LL, @"IDSFoundation", @"IDSDFirewallMessageStore", @"Saving database.");
  }

  id v3 = sub_1001A338C();
  id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  CSDBPerformLockedSectionForRecordStore(v4, &stru_1008FC9C8);

  id v5 = sub_1001A338C();
  id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

  if (v6)
  {
    uint64_t v8 = OSLogHandleForIDSCategory("IDSDFirewallMessageStore");
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Destroying database.", v17, 2u);
    }

    if (os_log_shim_legacy_logging_enabled(v10)
      && _IDSShouldLog(0LL, @"IDSDFirewallMessageStore"))
    {
      _IDSLogV(0LL, @"IDSFoundation", @"IDSDFirewallMessageStore", @"Destroying database.");
    }

    id v11 = sub_1001A338C();
    id v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    CSDBThreadedRecordStoreTeardownDatabase();

    uint64_t v13 = OSLogHandleForIDSCategory("IDSDFirewallMessageStore");
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Closed database.", v16, 2u);
    }

    if (os_log_shim_legacy_logging_enabled(v15))
    {
      if (_IDSShouldLog(0LL, @"IDSDFirewallMessageStore")) {
        *(void *)&double result = _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDFirewallMessageStore",  @"Closed database.").n128_u64[0];
      }
    }
  }

  return result;
}

void sub_1001A38B4(id a1, CSDBRecordStore *a2)
{
}

void sub_1001A38DC()
{
  id v0 = sub_1001A338C();
  id v1 = (id)objc_claimAutoreleasedReturnValue(v0);
  CSDBPerformLockedSectionForRecordStoreWithoutInitialize(v1, &stru_1008FC9E8);
}

void sub_1001A391C(id a1, CSDBRecordStore *a2)
{
}

uint64_t sub_1001A3924(uint64_t a1)
{
  return CSDBSqliteSetDefaultPageCacheSize(a1);
}

id sub_1001A3A38(uint64_t a1)
{
  id v1 = *(id *)(a1 + 32);
  uint64_t v2 = objc_autoreleasePoolPush();
  uint64_t v4 = CSDBGetMobileUserDirectory(v2, v3);
  if (v4)
  {
    uint64_t v5 = v4;
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSProcessInfo processInfo](&OBJC_CLASS___NSProcessInfo, "processInfo"));
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 processName]);

    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"ids-firewall-%@.db",  v7));
    if ([v1 length])
    {
      v18[0] = v1;
      v18[1] = v8;
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v18, 2LL));
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString pathWithComponents:](&OBJC_CLASS___NSString, "pathWithComponents:", v9));
    }

    else
    {
      id v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v5));
      id v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:",  v11,  @"/Library/IdentityServices/",  v8,  0LL));
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString pathWithComponents:](&OBJC_CLASS___NSString, "pathWithComponents:", v12));
    }

    id v13 = v10;
    id v14 = [v13 fileSystemRepresentation];
    uint64_t v15 = CSDBGetMobileUserUID();
    uint64_t v16 = CSDBGetMobileUserGID();
    CSDBCreateDirectoriesToPath(v14, v15, v16);
    id v1 = (id)objc_claimAutoreleasedReturnValue([v13 stringByResolvingAndStandardizingPath]);
  }

  objc_autoreleasePoolPop(v2);
  return v1;
}

uint64_t sub_1001A3C08(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = OSLogHandleForIDSCategory("IDSFirewallStore");
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)id v7 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "Creating indexes as needed for faster lookup",  v7,  2u);
  }

  if (os_log_shim_legacy_logging_enabled(v5)
    && _IDSShouldLog(1LL, @"IDSFirewallStore"))
  {
    _IDSLogV( 1LL,  @"IDSFoundation",  @"IDSFirewallStore",  @"Creating indexes as needed for faster lookup");
  }

  CSDBSqliteConnectionPerformSQL(a2, @"CREATE INDEX idx_firewall_handle ON firewall_record (handle); ");
  return CSDBSqliteConnectionPerformSQL(a2, @"CREATE INDEX idx_firewall_category ON firewall_record (category); ");
}

uint64_t sub_1001A3CFC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = OSLogHandleForIDSCategory("IDSFirewallStore");
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Enabling auto vacuum.", buf, 2u);
  }

  if (os_log_shim_legacy_logging_enabled(v5)
    && _IDSShouldLog(1LL, @"IDSFirewallStore"))
  {
    _IDSLogV(1LL, @"IDSFoundation", @"IDSFirewallStore", @"Enabling auto vacuum.");
  }

  CSDBSqliteConnectionPerformSQL(a2, @"PRAGMA auto_vacuum = 2;");
  uint64_t v6 = OSLogHandleForIDSCategory("IDSFirewallStore");
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)id v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Enabling WAL journal mode.", v14, 2u);
  }

  if (os_log_shim_legacy_logging_enabled(v8)
    && _IDSShouldLog(1LL, @"IDSFirewallStore"))
  {
    _IDSLogV(1LL, @"IDSFoundation", @"IDSFirewallStore", @"Enabling WAL journal mode.");
  }

  CSDBSqliteConnectionPerformSQL(a2, @"PRAGMA journal_mode = wal;");
  uint64_t v9 = OSLogHandleForIDSCategory("IDSFirewallStore");
  uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)id v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Enabling Foreign Key support.", v13, 2u);
  }

  if (os_log_shim_legacy_logging_enabled(v11)
    && _IDSShouldLog(1LL, @"IDSFirewallStore"))
  {
    _IDSLogV(1LL, @"IDSFoundation", @"IDSFirewallStore", @"Enabling Foreign Key support.");
  }

  return CSDBSqliteConnectionPerformSQL(a2, @"PRAGMA foreign_keys = ON;");
}

BOOL sub_1001A3F28(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v4 = a3 >> 7;
  if (v4 <= 0x7C) {
    _IMWarn(@"This DB can be migrated.");
  }
  return v4 < 0x7D;
}

uint64_t sub_1001A3F80()
{
  return 0LL;
}

void sub_1001A3F88(id a1, CSDBThreadedRecordStore *a2)
{
}

void sub_1001A3F98(void *a1, void *a2, void *a3, void *a4)
{
  id v12 = a1;
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if ([v7 length])
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[FTPasswordManager sharedInstance](&OBJC_CLASS___FTPasswordManager, "sharedInstance"));
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v7 lowercaseString]);
    [v10 setPasswordForProfileID:v8 username:v11 service:v9 password:v12 outRequestID:0 completionBlock:&stru_1008FCC48];
  }
}

void sub_1001A4060(id a1, NSString *a2, NSString *a3, NSString *a4, BOOL a5)
{
  BOOL v5 = a5;
  id v7 = a3;
  id v8 = a4;
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = @"NO";
    int v11 = 138412802;
    id v12 = v7;
    __int16 v13 = 2112;
    if (v5) {
      uint64_t v10 = @"YES";
    }
    id v14 = v8;
    __int16 v15 = 2112;
    uint64_t v16 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Successfully updated password for account (%@:%@): %@",  (uint8_t *)&v11,  0x20u);
  }
}

void sub_1001A4158(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v15 = a1;
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  if ([v9 length])
  {
    __int16 v13 = (void *)objc_claimAutoreleasedReturnValue(+[FTPasswordManager sharedInstance](&OBJC_CLASS___FTPasswordManager, "sharedInstance"));
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v9 lowercaseString]);
    [v13 setAuthTokenForProfileID:v10 username:v14 service:v12 authToken:v15 selfHandle:v11 accountStatus:&off_100947410 outRequestID:0 completionBlock:&stru_1008FCC68];
  }
}

void sub_1001A423C(id a1, NSString *a2, NSString *a3, NSString *a4, BOOL a5)
{
  BOOL v5 = a5;
  id v7 = a3;
  id v8 = a4;
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    id v10 = @"NO";
    int v11 = 138412802;
    id v12 = v7;
    __int16 v13 = 2112;
    if (v5) {
      id v10 = @"YES";
    }
    id v14 = v8;
    __int16 v15 = 2112;
    uint64_t v16 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Successfully updated auth token for account (%@:%@): %@",  (uint8_t *)&v11,  0x20u);
  }
}

void sub_1001A50A0(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void **)(a1 + 40);
    *(_DWORD *)buf = 138412546;
    uint64_t v34 = v5;
    __int16 v35 = 2112;
    id v36 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Transaction ID %@  messageContext %@",  buf,  0x16u);
  }

  if ([*(id *)(a1 + 32) length])
  {
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 48);
      *(_DWORD *)buf = 138412546;
      uint64_t v34 = v8;
      __int16 v35 = 2112;
      id v36 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Notifying listener %@ that account %@  is setup",  buf,  0x16u);
    }

    id v9 = (NSError *)*(id *)(a1 + 56);
    if (!v9)
    {
      id v10 = (void *)objc_claimAutoreleasedReturnValue([v3 accountInfo]);
      int v11 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKey:kIDSServiceDefaultsRegistrationInfoKey]);
      uint64_t v12 = kIDSServiceDefaultsRegistrationInfoErrorCodeKey;
      __int16 v13 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKey:kIDSServiceDefaultsRegistrationInfoErrorCodeKey]);
      unsigned int v14 = [v13 intValue];

      if (v14 == -1)
      {
        id v9 = 0LL;
      }

      else
      {
        __int16 v15 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKey:kIDSServiceDefaultsRegistrationInfoAlertInfoKey]);
        uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKey:v12]);
        id v17 = [v16 integerValue];

        uint64_t v18 = objc_alloc(&OBJC_CLASS___NSError);
        id v9 = -[NSError initWithDomain:code:userInfo:]( v18,  "initWithDomain:code:userInfo:",  IDSAccountRegistrationErrorDomain,  v17,  v15);
        unsigned int v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
        if (os_log_type_enabled(v19, OS_LOG_TYPE_FAULT)) {
          sub_10069FEBC();
        }
      }
    }

    __int128 v30 = 0u;
    __int128 v31 = 0u;
    __int128 v28 = 0u;
    __int128 v29 = 0u;
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "accountAndAdHocAccounts", 0));
    id v21 = [v20 countByEnumeratingWithState:&v28 objects:v32 count:16];
    if (v21)
    {
      id v22 = v21;
      uint64_t v23 = *(void *)v29;
      do
      {
        BOOL v24 = 0LL;
        do
        {
          if (*(void *)v29 != v23) {
            objc_enumerationMutation(v20);
          }
          uint64_t v25 = *(void **)(*((void *)&v28 + 1) + 8LL * (void)v24);
          id v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) listenerRemoteObjectForLocalObject:*(void *)(a1 + 48)]);
          uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v25 uniqueID]);
          [v26 setupCompleteForAccount:v27 transactionID:*(void *)(a1 + 32) setupError:v9];

          BOOL v24 = (char *)v24 + 1;
        }

        while (v22 != v24);
        id v22 = [v20 countByEnumeratingWithState:&v28 objects:v32 count:16];
      }

      while (v22);
    }

    if (*(NSError **)(a1 + 56) != v9)
    {

      id v9 = 0LL;
    }
  }
}

void sub_1001A53EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueID]);
    *(_DWORD *)buf = 138412290;
    __int16 v15 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Calling out to linked account: %@", buf, 0xCu);
  }

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_1001A5548;
  v8[3] = &unk_1008FCC90;
  id v9 = *(id *)(a1 + 32);
  id v10 = *(id *)(a1 + 40);
  id v11 = *(id *)(a1 + 48);
  id v6 = *(id *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  id v12 = v6;
  uint64_t v13 = v7;
  [v3 setupAccountWithCompletionBlock:v8];
}

void sub_1001A5548(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    id v6 = *(void **)(a1 + 40);
    *(_DWORD *)buf = 138412546;
    uint64_t v34 = v5;
    __int16 v35 = 2112;
    id v36 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Linked account Transaction ID %@  messageContext %@",  buf,  0x16u);
  }

  if ([*(id *)(a1 + 32) length])
  {
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 48);
      *(_DWORD *)buf = 138412546;
      uint64_t v34 = v8;
      __int16 v35 = 2112;
      id v36 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Notifying listener %@ that linked account %@  is setup",  buf,  0x16u);
    }

    id v9 = (NSError *)*(id *)(a1 + 56);
    if (!v9)
    {
      id v10 = (void *)objc_claimAutoreleasedReturnValue([v3 accountInfo]);
      id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKey:kIDSServiceDefaultsRegistrationInfoKey]);
      uint64_t v12 = kIDSServiceDefaultsRegistrationInfoErrorCodeKey;
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKey:kIDSServiceDefaultsRegistrationInfoErrorCodeKey]);
      unsigned int v14 = [v13 intValue];

      if (v14 == -1)
      {
        id v9 = 0LL;
      }

      else
      {
        __int16 v15 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKey:kIDSServiceDefaultsRegistrationInfoAlertInfoKey]);
        uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKey:v12]);
        id v17 = [v16 integerValue];

        uint64_t v18 = objc_alloc(&OBJC_CLASS___NSError);
        id v9 = -[NSError initWithDomain:code:userInfo:]( v18,  "initWithDomain:code:userInfo:",  IDSAccountRegistrationErrorDomain,  v17,  v15);
        unsigned int v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
        if (os_log_type_enabled(v19, OS_LOG_TYPE_FAULT)) {
          sub_10069FF1C();
        }
      }
    }

    __int128 v30 = 0u;
    __int128 v31 = 0u;
    __int128 v28 = 0u;
    __int128 v29 = 0u;
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "accountAndAdHocAccounts", 0));
    id v21 = [v20 countByEnumeratingWithState:&v28 objects:v32 count:16];
    if (v21)
    {
      id v22 = v21;
      uint64_t v23 = *(void *)v29;
      do
      {
        BOOL v24 = 0LL;
        do
        {
          if (*(void *)v29 != v23) {
            objc_enumerationMutation(v20);
          }
          uint64_t v25 = *(void **)(*((void *)&v28 + 1) + 8LL * (void)v24);
          id v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) listenerRemoteObjectForLocalObject:*(void *)(a1 + 48)]);
          uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v25 uniqueID]);
          [v26 setupCompleteForAccount:v27 transactionID:0 setupError:v9];

          BOOL v24 = (char *)v24 + 1;
        }

        while (v22 != v24);
        id v22 = [v20 countByEnumeratingWithState:&v28 objects:v32 count:16];
      }

      while (v22);
    }

    if (*(NSError **)(a1 + 56) != v9)
    {

      id v9 = 0LL;
    }
  }
}

void sub_1001A6148(id a1, id a2)
{
  id v2 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 uniqueID]);
  unsigned int v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 138412290;
    uint64_t v7 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Removing linked account: %@",  (uint8_t *)&v6,  0xCu);
  }

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
  [v5 removeAccount:v2];
}

void sub_1001A63E0(id a1, id a2)
{
  id v2 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 uniqueID]);
  unsigned int v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 138412290;
    uint64_t v8 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Disabling and removing linked account: %@",  (uint8_t *)&v7,  0xCu);
  }

  [v2 unregisterAccount];
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
  [v5 disableAccountWithUniqueID:v3];

  int v6 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
  [v6 removeAccount:v2];
}

void sub_1001A6998(id a1, id a2)
{
  id v2 = a2;
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue([v2 uniqueID]);
    int v7 = 138412290;
    uint64_t v8 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Enabling linked account: %@",  (uint8_t *)&v7,  0xCu);
  }

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
  int v6 = (void *)objc_claimAutoreleasedReturnValue([v2 uniqueID]);
  [v5 enableAccountWithUniqueID:v6];

  [v2 registerAccount];
}

void sub_1001A6C00(id a1, id a2)
{
  id v2 = a2;
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue([v2 uniqueID]);
    int v7 = 138412290;
    uint64_t v8 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Disabling linked account: %@",  (uint8_t *)&v7,  0xCu);
  }

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
  int v6 = (void *)objc_claimAutoreleasedReturnValue([v2 uniqueID]);
  [v5 disableAccountWithUniqueID:v6];
}

void sub_1001A6E60(id a1, id a2)
{
  id v2 = a2;
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue([v2 uniqueID]);
    int v7 = 138412290;
    uint64_t v8 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Disabling linked account: %@",  (uint8_t *)&v7,  0xCu);
  }

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
  int v6 = (void *)objc_claimAutoreleasedReturnValue([v2 uniqueID]);
  [v5 disableAccountWithUniqueID:v6];
}

void sub_1001A7168(id a1, id a2)
{
  id v2 = a2;
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue([v2 uniqueID]);
    int v5 = 138412290;
    int v6 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Calling out to linked account: %@",  (uint8_t *)&v5,  0xCu);
  }

  [v2 authenticationChanged];
}

void sub_1001A7458(id a1, id a2)
{
  id v2 = a2;
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue([v2 uniqueID]);
    int v5 = 138412290;
    int v6 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Calling out to linked account: %@",  (uint8_t *)&v5,  0xCu);
  }

  [v2 authenticationChanged];
}

void sub_1001A7660(id a1, id a2)
{
  id v2 = a2;
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue([v2 uniqueID]);
    int v5 = 138412290;
    int v6 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Calling out to linked account: %@",  (uint8_t *)&v5,  0xCu);
  }

  [v2 authenticateAccount];
}

void sub_1001A7868(id a1, id a2)
{
  id v2 = a2;
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue([v2 uniqueID]);
    int v5 = 138412290;
    int v6 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Calling out to linked account: %@",  (uint8_t *)&v5,  0xCu);
  }

  [v2 passwordUpdated];
}

void sub_1001A7AFC(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueID]);
    int v6 = 138412290;
    int v7 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Calling out to linked account: %@",  (uint8_t *)&v6,  0xCu);
  }

  [v3 updateAuthorizationCredentials:*(void *)(a1 + 32) token:*(void *)(a1 + 40)];
}

void sub_1001A7D0C(id a1, id a2)
{
  id v2 = a2;
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue([v2 uniqueID]);
    int v5 = 138412290;
    int v6 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Calling out to linked account: %@",  (uint8_t *)&v5,  0xCu);
  }

  [v2 validateProfile];
}

void sub_1001A7F74(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueID]);
    int v6 = 138412290;
    int v7 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Calling out to linked account: %@",  (uint8_t *)&v6,  0xCu);
  }

  [v3 addAliases:*(void *)(a1 + 32)];
}

void sub_1001A81E4(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueID]);
    int v6 = 138412290;
    int v7 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Calling out to linked account: %@",  (uint8_t *)&v6,  0xCu);
  }

  [v3 removeAliases:*(void *)(a1 + 32)];
}

void sub_1001A8454(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueID]);
    int v6 = 138412290;
    int v7 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Calling out to linked account: %@",  (uint8_t *)&v6,  0xCu);
  }

  [v3 validateAliases:*(void *)(a1 + 32)];
}

void sub_1001A86C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueID]);
    int v6 = 138412290;
    int v7 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Calling out to linked account: %@",  (uint8_t *)&v6,  0xCu);
  }

  [v3 unvalidateAliases:*(void *)(a1 + 32)];
}

void sub_1001A88B4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1001A88CC(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v20 objects:v27 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v21;
    uint64_t v19 = kIDSStatusKitPublishingForStatusTypeEntitlement;
    uint64_t v18 = kIDSStatusKitPublishingForAllStatusTypeEntitlement;
    uint64_t v17 = kIDSStatusKitSubscriptionForStatusTypeEntitlement;
    uint64_t v16 = kIDSStatusKitSubscriptionForAllStatusTypeEntitlement;
    while (2)
    {
      for (i = 0LL; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v21 != v7) {
          objc_enumerationMutation(v4);
        }
        id v9 = *(void **)(*((void *)&v20 + 1) + 8LL * (void)i);
        unsigned __int8 v10 = objc_msgSend( v9,  "isEqualToIgnoringCase:",  @"com.apple.private.alloy.status.keysharing",  v16,  v17,  v18,  v19,  (void)v20);
        uint64_t v11 = *(void *)(*(void *)(a1 + 56) + 8LL);
        if ((v10 & 1) != 0)
        {
          if (*(_BYTE *)(v11 + 24))
          {
            uint64_t v12 = *(void **)(a1 + 40);
            v26[0] = v19;
            v26[1] = v18;
            v26[2] = v17;
            v26[3] = v16;
            uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  v26,  4LL));
            *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = [v12 client:v3 isEntitledToAccessSer vice:0 forAnyOfEntitlements:v13 shouldWarn:1];
          }

          else
          {
            *(_BYTE *)(v11 + 24) = 0;
          }
        }

        else
        {
          if (*(_BYTE *)(v11 + 24))
          {
            unsigned __int8 v14 = [*(id *)(a1 + 40) client:v3 isEntitledToAccessService:v9 forEntitlement:*(void *)(a1 + 48) shouldWarn:1];
            uint64_t v11 = *(void *)(*(void *)(a1 + 56) + 8LL);
          }

          else
          {
            unsigned __int8 v14 = 0;
          }

          *(_BYTE *)(v11 + 24) = v14;
        }

        if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL))
        {
          __int16 v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            uint64_t v25 = v9;
            _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Pseudonym request failed entitlement check for service %@",  buf,  0xCu);
          }

          goto LABEL_21;
        }
      }

      id v6 = [v4 countByEnumeratingWithState:&v20 objects:v27 count:16];
      if (v6) {
        continue;
      }
      break;
    }
  }

void sub_1001A8CF0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1001A8D14(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v19 objects:v24 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v20;
    uint64_t v17 = kIDSStatusKitPublishingForAllStatusTypeEntitlement;
    uint64_t v18 = kIDSStatusKitPublishingForStatusTypeEntitlement;
    uint64_t v16 = kIDSStatusKitSubscriptionForStatusTypeEntitlement;
    uint64_t v8 = kIDSStatusKitSubscriptionForAllStatusTypeEntitlement;
LABEL_3:
    uint64_t v9 = 0LL;
    while (1)
    {
      if (*(void *)v20 != v7) {
        objc_enumerationMutation(v4);
      }
      unsigned __int8 v10 = *(void **)(*((void *)&v19 + 1) + 8 * v9);
      unsigned __int8 v11 = [v10 isEqualToIgnoringCase:@"com.apple.private.alloy.status.keysharing"];
      uint64_t v12 = *(void *)(*(void *)(a1 + 56) + 8LL);
      if ((v11 & 1) != 0)
      {
        if (*(_BYTE *)(v12 + 24))
        {
          *(_BYTE *)(v12 + 24) = 1;
        }

        else
        {
          unsigned __int8 v14 = *(void **)(a1 + 40);
          v23[0] = v18;
          v23[1] = v17;
          v23[2] = v16;
          v23[3] = v8;
          __int16 v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v23, 4LL));
          *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = [v14 client:v3 isEntitledToAccessServi ce:0 forAnyOfEntitlements:v15 shouldWarn:1];
        }
      }

      else
      {
        if (*(_BYTE *)(v12 + 24))
        {
          unsigned __int8 v13 = 1;
        }

        else
        {
          unsigned __int8 v13 = [*(id *)(a1 + 40) client:v3 isEntitledToAccessService:v10 forEntitlement:*(void *)(a1 + 48) shouldWarn:1];
          uint64_t v12 = *(void *)(*(void *)(a1 + 56) + 8LL);
        }

        *(_BYTE *)(v12 + 24) = v13;
      }

      if (*(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL)) {
        break;
      }
      if (v6 == (id)++v9)
      {
        id v6 = [v4 countByEnumeratingWithState:&v19 objects:v24 count:16];
        if (v6) {
          goto LABEL_3;
        }
        break;
      }
    }
  }
}

uint64_t sub_1001A9380()
{
  id v0 = (void *)objc_claimAutoreleasedReturnValue(+[IDSServerBag sharedInstanceForBagType:](&OBJC_CLASS___IDSServerBag, "sharedInstanceForBagType:", 0LL));
  id v2 = (void *)objc_claimAutoreleasedReturnValue([v0 objectForKey:@"enable-pseudonym-aliases"]);
  if (v2 && (uint64_t v3 = objc_opt_class(&OBJC_CLASS___NSNumber, v1), (objc_opt_isKindOfClass(v2, v3) & 1) != 0)) {
    uint64_t v4 = (uint64_t)[v2 BOOLValue];
  }
  else {
    uint64_t v4 = 1LL;
  }

  return v4;
}

void sub_1001A940C(void *a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v7 = (void *)a1[4];
  uint64_t v8 = a1[5];
  id v9 = a4;
  id v10 = a2;
  id v11 = (id)objc_claimAutoreleasedReturnValue([v7 listenerRemoteObjectForLocalObject:v8]);
  [v11 finishedProvisioningPseudonym:v10 success:a3 error:v9 forRequestUUID:a1[6]];
}

void sub_1001A9918(void *a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v7 = (void *)a1[4];
  uint64_t v8 = a1[5];
  id v9 = a4;
  id v10 = a2;
  id v11 = (id)objc_claimAutoreleasedReturnValue([v7 listenerRemoteObjectForLocalObject:v8]);
  [v11 finishedRenewingPseudonym:v10 success:a3 error:v9 requestUUID:a1[6]];
}

void sub_1001A9E00(void *a1, uint64_t a2, void *a3)
{
  id v5 = (void *)a1[4];
  uint64_t v6 = a1[5];
  id v7 = a3;
  id v8 = (id)objc_claimAutoreleasedReturnValue([v5 listenerRemoteObjectForLocalObject:v6]);
  [v8 finishedRevokingPseudonymWithSuccess:a2 error:v7 requestUUID:a1[6]];
}

void sub_1001AA1C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = IDSServiceReportingErrorDomain;
    NSErrorUserInfoKey v9 = NSUnderlyingErrorKey;
    id v10 = v3;
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v10,  &v9,  1LL));
    id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v5,  200LL,  v6));
  }

  else
  {
    id v7 = 0LL;
  }

  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) listenerRemoteObjectForLocalObject:*(void *)(a1 + 40)]);
  [v8 finishedReportingRequestUUID:*(void *)(a1 + 48) withError:v7];
}

void sub_1001AA3F8(id a1, id a2)
{
  id v2 = a2;
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 uniqueID]);
    int v5 = 138412290;
    uint64_t v6 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Calling out to linked account: %@",  (uint8_t *)&v5,  0xCu);
  }

  [v2 registerAccount];
}

void sub_1001AA600(id a1, id a2)
{
  id v2 = a2;
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 uniqueID]);
    int v5 = 138412290;
    uint64_t v6 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Calling out to linked account: %@",  (uint8_t *)&v5,  0xCu);
  }

  [v2 unregisterAccount];
}

void sub_1001AAA98(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueID]);
    int v6 = 138412290;
    id v7 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Calling out to linked account: %@",  (uint8_t *)&v6,  0xCu);
  }

  objc_msgSend(v3, "_reregisterAndReidentify:", objc_msgSend(*(id *)(a1 + 32), "BOOLValue"));
}

void sub_1001AACB0(id a1, id a2)
{
  id v2 = a2;
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 uniqueID]);
    int v5 = 138412290;
    int v6 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Calling out to linked account: %@",  (uint8_t *)&v5,  0xCu);
  }

  [v2 deactivateAndPurgeIdentify];
}

void sub_1001AB438(_Unwind_Exception *a1)
{
}

void sub_1001AB470(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  xpc_activity_state_t state = xpc_activity_get_state(v3);
  if (state == 2)
  {
    uint64_t v13 = OSLogHandleForIDSCategory("IDSDaemon");
    unsigned __int8 v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v15 = @"YES";
      if (!v3) {
        __int16 v15 = @"NO";
      }
      *(_DWORD *)buf = 138412290;
      __int128 v20 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Got called to checkpoint Registration Account Status Metric run state with non null activity %@",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v16) && _IDSShouldLog(0LL, @"IDSDaemon"))
    {
      uint64_t v17 = @"YES";
      if (!v3) {
        uint64_t v17 = @"NO";
      }
      uint64_t v18 = v17;
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Got called to checkpoint Registration Account Status Metric run state with non null activity %@");
    }

    objc_msgSend(WeakRetained, "_submitRegistrationAccountStatusMetric", v18);
  }

  else if (!state)
  {
    uint64_t v6 = OSLogHandleForIDSCategory("IDSDaemon");
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      id v8 = @"YES";
      if (!v3) {
        id v8 = @"NO";
      }
      *(_DWORD *)buf = 138412290;
      __int128 v20 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Told to Check In for Registration Account Status Metric with activity %@ ",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v9) && _IDSShouldLog(0LL, @"IDSDaemon")) {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Told to Check In for Registration Account Status Metric with activity %@ ");
    }
    xpc_object_t v10 = xpc_dictionary_create(0LL, 0LL, 0LL);
    xpc_dictionary_set_string(v10, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_MAINTENANCE);
    xpc_dictionary_set_int64(v10, XPC_ACTIVITY_INTERVAL, 43200LL);
    xpc_object_t v11 = xpc_activity_copy_criteria(v3);
    uint64_t v12 = v11;
    if (!v11 || !xpc_equal(v11, v10)) {
      xpc_activity_set_criteria(v3, v10);
    }
  }
}

void sub_1001AB86C(_Unwind_Exception *a1)
{
}

void sub_1001AB8A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  xpc_activity_state_t state = xpc_activity_get_state(v3);
  if (state == 2)
  {
    uint64_t v13 = OSLogHandleForIDSCategory("IDSDaemon");
    unsigned __int8 v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v15 = @"YES";
      if (!v3) {
        __int16 v15 = @"NO";
      }
      *(_DWORD *)buf = 138412290;
      __int128 v20 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Got called to checkpoint Registration Event Tracker Cleanup run state with non null activity %@",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v16) && _IDSShouldLog(0LL, @"IDSDaemon"))
    {
      uint64_t v17 = @"YES";
      if (!v3) {
        uint64_t v17 = @"NO";
      }
      uint64_t v18 = v17;
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Got called to checkpoint Registration Event Tracker Cleanup run state with non null activity %@");
    }

    xpc_object_t v10 = (xpc_object_t)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "persistenceManager", v18));
    [v10 cleanupOldRegistrationEvents];
    goto LABEL_24;
  }

  if (!state)
  {
    uint64_t v6 = OSLogHandleForIDSCategory("IDSDaemon");
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      id v8 = @"YES";
      if (!v3) {
        id v8 = @"NO";
      }
      *(_DWORD *)buf = 138412290;
      __int128 v20 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Told to Check In for Registration Event Tracker Cleanup with activity %@ ",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v9) && _IDSShouldLog(0LL, @"IDSDaemon")) {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Told to Check In for Registration Event Tracker Cleanup with activity %@ ");
    }
    xpc_object_t v10 = xpc_dictionary_create(0LL, 0LL, 0LL);
    xpc_dictionary_set_string(v10, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_MAINTENANCE);
    xpc_dictionary_set_int64(v10, XPC_ACTIVITY_INTERVAL, XPC_ACTIVITY_INTERVAL_1_DAY);
    xpc_dictionary_set_BOOL(v10, XPC_ACTIVITY_REQUIRES_CLASS_C, 1);
    xpc_object_t v11 = xpc_activity_copy_criteria(v3);
    uint64_t v12 = v11;
    if (!v11 || !xpc_equal(v11, v10)) {
      xpc_activity_set_criteria(v3, v10);
    }

LABEL_24:
  }
}

void sub_1001ABCCC(_Unwind_Exception *a1)
{
}

void sub_1001ABD04(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  xpc_activity_state_t state = xpc_activity_get_state(v3);
  if (state == 2)
  {
    uint64_t v14 = OSLogHandleForIDSCategory("IDSDaemon");
    __int16 v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = @"YES";
      if (!v3) {
        uint64_t v16 = @"NO";
      }
      *(_DWORD *)buf = 138412290;
      __int128 v21 = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Got called to checkpoint Sender Key Cleanup run state with non null activity %@",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v17) && _IDSShouldLog(0LL, @"IDSDaemon"))
    {
      uint64_t v18 = @"YES";
      if (!v3) {
        uint64_t v18 = @"NO";
      }
      __int128 v19 = v18;
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Got called to checkpoint Sender Key Cleanup run state with non null activity %@");
    }

    xpc_object_t v10 = (xpc_object_t)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "persistenceManager", v19));
    [v10 cleanupInvalidSenderKeyEntriesWithCompletion:&stru_1008FCEC8];
    goto LABEL_24;
  }

  if (!state)
  {
    uint64_t v6 = OSLogHandleForIDSCategory("IDSDaemon");
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      id v8 = @"YES";
      if (!v3) {
        id v8 = @"NO";
      }
      *(_DWORD *)buf = 138412290;
      __int128 v21 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Told to Check In for Sender Key Cleanup with activity %@ ",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v9) && _IDSShouldLog(0LL, @"IDSDaemon")) {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Told to Check In for Sender Key Cleanup with activity %@ ");
    }
    xpc_object_t v10 = xpc_dictionary_create(0LL, 0LL, 0LL);
    xpc_dictionary_set_string(v10, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_MAINTENANCE);
    +[IDSSenderKeyDistributionManager cleanupKeysTimeInterval]( &OBJC_CLASS___IDSSenderKeyDistributionManager,  "cleanupKeysTimeInterval");
    xpc_dictionary_set_int64(v10, XPC_ACTIVITY_INTERVAL, (uint64_t)v11);
    xpc_object_t v12 = xpc_activity_copy_criteria(v3);
    uint64_t v13 = v12;
    if (!v12 || !xpc_equal(v12, v10)) {
      xpc_activity_set_criteria(v3, v10);
    }

LABEL_24:
  }
}

void sub_1001AC0D4(id a1, OS_xpc_object *a2)
{
  uint64_t v2 = a2;
  xpc_activity_state_t state = xpc_activity_get_state(v2);
  if (state == 2)
  {
    uint64_t v12 = OSLogHandleForIDSCategory("IDSDaemon");
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = @"YES";
      if (!v2) {
        uint64_t v14 = @"NO";
      }
      *(_DWORD *)buf = 138412290;
      __int128 v19 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Got called to checkpoint Query DB cleanup run state with non null activity %@",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v15) && _IDSShouldLog(0LL, @"IDSDaemon"))
    {
      uint64_t v16 = @"YES";
      if (!v2) {
        uint64_t v16 = @"NO";
      }
      uint64_t v17 = v16;
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Got called to checkpoint Query DB cleanup run state with non null activity %@");
    }

    xpc_object_t v8 = (xpc_object_t)objc_claimAutoreleasedReturnValue(+[IDSPeerIDManager sharedInstance](&OBJC_CLASS___IDSPeerIDManager, "sharedInstance", v17));
    [v8 performCleanupTasks];
    goto LABEL_24;
  }

  if (!state)
  {
    uint64_t v4 = OSLogHandleForIDSCategory("IDSDaemon");
    int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = @"YES";
      if (!v2) {
        uint64_t v6 = @"NO";
      }
      *(_DWORD *)buf = 138412290;
      __int128 v19 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Told to Check In for Query DB cleanup with activity %@ ",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v7) && _IDSShouldLog(0LL, @"IDSDaemon")) {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Told to Check In for Query DB cleanup with activity %@ ");
    }
    xpc_object_t v8 = xpc_dictionary_create(0LL, 0LL, 0LL);
    xpc_dictionary_set_string(v8, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_MAINTENANCE);
    +[IDSQuerySDPersistenceManager dbCleanupTimeInterval]( &OBJC_CLASS___IDSQuerySDPersistenceManager,  "dbCleanupTimeInterval");
    xpc_dictionary_set_int64(v8, XPC_ACTIVITY_INTERVAL, (uint64_t)v9);
    xpc_object_t v10 = xpc_activity_copy_criteria(v2);
    double v11 = v10;
    if (!v10 || !xpc_equal(v10, v8)) {
      xpc_activity_set_criteria(v2, v8);
    }

LABEL_24:
  }
}

void sub_1001AC9E4( _Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1001AC930LL);
  }

  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(exc_buf);
}

id sub_1001ACA44(uint64_t a1, uint64_t a2)
{
  id result = [*(id *)(a1 + 32) client:a2 isEntitledToAccessService:0 forEntitlement:kIDSStateResetEntitlement shouldWarn:1];
  if ((_DWORD)result) {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
  }
  return result;
}

void sub_1001ACE2C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_msgSend(*(id *)(a1 + 32), "client:isEntitledToAccessService:forEntitlement:shouldWarn:")
    && (![*(id *)(a1 + 40) count]
     || [*(id *)(a1 + 32) client:v3 isEntitledToAccessService:0 forEntitlement:kIDSPreferInfraWiFiEntitlement shouldWarn:1]))
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 1;
  }
}

void sub_1001AD168(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_msgSend(*(id *)(a1 + 32), "client:isEntitledToAccessService:forEntitlement:shouldWarn:")
    && (![*(id *)(a1 + 40) count]
     || [*(id *)(a1 + 32) client:v3 isEntitledToAccessService:0 forEntitlement:kIDSPreferInfraWiFiEntitlement shouldWarn:1]))
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 1;
  }
}

void sub_1001AE310(id a1, NSString *a2, NSString *a3, NSString *a4, BOOL a5)
{
  BOOL v5 = a5;
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration", a3, a4));
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = @"NO";
    if (v5) {
      uint64_t v7 = @"YES";
    }
    int v8 = 138412290;
    double v9 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Finished setting password {success: %@}",  (uint8_t *)&v8,  0xCu);
  }
}

id sub_1001AECA0(uint64_t a1, uint64_t a2)
{
  id result = [*(id *)(a1 + 32) client:a2 isEntitledToAccessService:*(void *)(a1 + 40) forEntitlement:kIDSDeviceUUIDEntitlement shouldWarn:1];
  *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 1;
  return result;
}

void sub_1001AECEC(id a1)
{
  uint64_t v1 = OSLogHandleForTransportCategory("CloudPairing");
  uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Sending continuity reset to IDS clients",  v6,  2u);
  }

  uint64_t v4 = os_log_shim_legacy_logging_enabled(v3);
  if ((_DWORD)v4)
  {
    if (_IDSShouldLogTransport(v4))
    {
      _IDSLogTransport(@"CloudPairing", @"IDS", @"Sending continuity reset to IDS clients");
    }
  }

  BOOL v5 = (void *)objc_claimAutoreleasedReturnValue(+[IDSWPLinkManager sharedInstance](&OBJC_CLASS___IDSWPLinkManager, "sharedInstance"));
  [v5 sendReset];
}

void sub_1001AF18C(id a1)
{
  uint64_t v1 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "   => posting deferred device update", buf, 2u);
  }

  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 enabledAccounts]);

  id v4 = [v3 countByEnumeratingWithState:&v13 objects:v18 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v14;
    do
    {
      uint64_t v7 = 0LL;
      do
      {
        if (*(void *)v14 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void *)(*((void *)&v13 + 1) + 8LL * (void)v7);
        double v9 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
        xpc_object_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 accountWithUniqueID:v8]);

        if (v10)
        {
          v11[0] = _NSConcreteStackBlock;
          v11[1] = 3221225472LL;
          _DWORD v11[2] = sub_1001AF360;
          v11[3] = &unk_1008FA0C8;
          id v12 = v10;
          [v12 _broadcastAccountMessageBlock:v11];
        }

        uint64_t v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v13 objects:v18 count:16];
    }

    while (v5);
  }
}

void sub_1001AF360(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 service]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 pushTopic]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v4 broadcasterForTopic:v6 ignoreServiceListener:1 messageContext:0]);

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v3 dependentRegistrations]);
  if (![v8 count])
  {
    double v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dependentRegistrations]);
    id v10 = [v9 count];

    if (v10)
    {
      double v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
        sub_1006A00C8();
      }
    }
  }

  id v12 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueID]);
  [v7 account:v12 dependentDevicesUpdated:v8];
}

uint64_t sub_1001B0010(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (*(_BYTE *)(v1 + 403) == 2) {
    *(_BYTE *)(v1 + 403) = 3;
  }
  return result;
}

uint64_t sub_1001B0038(void *a1)
{
  else {
    return 0LL;
  }
}

void sub_1001B0140(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _metricContainerForMetricType:2555915]);
  if (v3)
  {
    id v2 = objc_alloc_init((Class)IMWeakLinkClass(@"AWDIDSSessionStarted", @"WirelessDiagnostics"));
    [v2 setGuid:*(void *)(a1 + 40)];
    objc_msgSend(v2, "setSessionProtocolVersionNumber:", objc_msgSend(*(id *)(a1 + 48), "unsignedIntValue"));
    [v2 setServiceName:*(void *)(a1 + 56)];
    [v2 setClientType:*(unsigned int *)(a1 + 64)];
    [*(id *)(a1 + 32) _submitIDSSessionAWDMetric:v2 withContainer:v3];
  }
}

void sub_1001B029C(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _metricContainerForMetricType:2555916]);
  if (v3)
  {
    id v2 = objc_alloc_init((Class)IMWeakLinkClass(@"AWDIDSSessionInvitationSent", @"WirelessDiagnostics"));
    [v2 setGuid:*(void *)(a1 + 40)];
    objc_msgSend(v2, "setNumberOfRecipients:", objc_msgSend(*(id *)(a1 + 48), "intValue"));
    [*(id *)(a1 + 32) _submitIDSSessionAWDMetric:v2 withContainer:v3];
  }
}

void sub_1001B03B4(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _metricContainerForMetricType:2555917]);
  if (v3)
  {
    id v2 = objc_alloc_init((Class)IMWeakLinkClass(@"AWDIDSSessionInvitationReceived", @"WirelessDiagnostics"));
    [v2 setGuid:*(void *)(a1 + 40)];
    [*(id *)(a1 + 32) _submitIDSSessionAWDMetric:v2 withContainer:v3];
  }
}

void sub_1001B04EC(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _metricContainerForMetricType:2555918]);
  if (v3)
  {
    id v2 = objc_alloc_init((Class)IMWeakLinkClass(@"AWDIDSSessionCancelSent", @"WirelessDiagnostics"));
    [v2 setGuid:*(void *)(a1 + 40)];
    objc_msgSend(v2, "setNumberOfRecipients:", objc_msgSend(*(id *)(a1 + 48), "intValue"));
    [v2 setRemoteSessionEndReason:*(unsigned int *)(a1 + 56)];
    [*(id *)(a1 + 32) _submitIDSSessionAWDMetric:v2 withContainer:v3];
  }
}

void sub_1001B0610(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _metricContainerForMetricType:2555919]);
  if (v3)
  {
    id v2 = objc_alloc_init((Class)IMWeakLinkClass(@"AWDIDSSessionCancelReceived", @"WirelessDiagnostics"));
    [v2 setGuid:*(void *)(a1 + 40)];
    [*(id *)(a1 + 32) _submitIDSSessionAWDMetric:v2 withContainer:v3];
  }
}

void sub_1001B0714(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _metricContainerForMetricType:2555927]);
  if (v3)
  {
    id v2 = objc_alloc_init((Class)IMWeakLinkClass(@"AWDIDSSessionDeclineSent", @"WirelessDiagnostics"));
    [v2 setGuid:*(void *)(a1 + 40)];
    [*(id *)(a1 + 32) _submitIDSSessionAWDMetric:v2 withContainer:v3];
  }
}

void sub_1001B0818(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _metricContainerForMetricType:2555928]);
  if (v3)
  {
    id v2 = objc_alloc_init((Class)IMWeakLinkClass(@"AWDIDSSessionDeclineReceived", @"WirelessDiagnostics"));
    [v2 setGuid:*(void *)(a1 + 40)];
    [*(id *)(a1 + 32) _submitIDSSessionAWDMetric:v2 withContainer:v3];
  }
}

void sub_1001B091C(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _metricContainerForMetricType:2555920]);
  if (v3)
  {
    id v2 = objc_alloc_init((Class)IMWeakLinkClass(@"AWDIDSSessionAcceptSent", @"WirelessDiagnostics"));
    [v2 setGuid:*(void *)(a1 + 40)];
    [*(id *)(a1 + 32) _submitIDSSessionAWDMetric:v2 withContainer:v3];
  }
}

void sub_1001B0A20(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _metricContainerForMetricType:2555921]);
  if (v3)
  {
    id v2 = objc_alloc_init((Class)IMWeakLinkClass(@"AWDIDSSessionAcceptReceived", @"WirelessDiagnostics"));
    [v2 setGuid:*(void *)(a1 + 40)];
    [*(id *)(a1 + 32) _submitIDSSessionAWDMetric:v2 withContainer:v3];
  }
}

void sub_1001B0B24(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _metricContainerForMetricType:2555922]);
  if (v3)
  {
    id v2 = objc_alloc_init((Class)IMWeakLinkClass(@"AWDIDSSessionConnected", @"WirelessDiagnostics"));
    [v2 setGuid:*(void *)(a1 + 40)];
    [*(id *)(a1 + 32) _submitIDSSessionAWDMetric:v2 withContainer:v3];
  }
}

void sub_1001B0C28(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _metricContainerForMetricType:2555923]);
  if (v3)
  {
    id v2 = objc_alloc_init((Class)IMWeakLinkClass(@"AWDIDSSessionReinitiateRequested", @"WirelessDiagnostics"));
    [v2 setGuid:*(void *)(a1 + 40)];
    [*(id *)(a1 + 32) _submitIDSSessionAWDMetric:v2 withContainer:v3];
  }
}

void sub_1001B0D2C(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _metricContainerForMetricType:2555924]);
  if (v3)
  {
    id v2 = objc_alloc_init((Class)IMWeakLinkClass(@"AWDIDSSessionReinitiateStarted", @"WirelessDiagnostics"));
    [v2 setGuid:*(void *)(a1 + 40)];
    [*(id *)(a1 + 32) _submitIDSSessionAWDMetric:v2 withContainer:v3];
  }
}

void sub_1001B0E30(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _metricContainerForMetricType:2555925]);
  if (v3)
  {
    id v2 = objc_alloc_init((Class)IMWeakLinkClass(@"AWDIDSSessionReinitiateConnected", @"WirelessDiagnostics"));
    [v2 setGuid:*(void *)(a1 + 40)];
    [*(id *)(a1 + 32) _submitIDSSessionAWDMetric:v2 withContainer:v3];
  }
}

void sub_1001B10AC(uint64_t a1)
{
  id v7 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _metricContainerForMetricType:2555926]);
  if (v7)
  {
    id v4 = objc_alloc_init((Class)IMWeakLinkClass(@"AWDIDSSessionCompleted", @"WirelessDiagnostics"));
    [*(id *)(a1 + 40) floatValue];
    LODWORD(v1) = vcvtas_u32_f32(v5 * 1000.0);
    [*(id *)(a1 + 48) floatValue];
    LODWORD(v2) = vcvtas_u32_f32(v6 * 1000.0);
    [v4 setGuid:*(void *)(a1 + 56)];
    objc_msgSend(v4, "setSessionProtocolVersionNumber:", objc_msgSend(*(id *)(a1 + 64), "unsignedIntValue"));
    [v4 setServiceName:*(void *)(a1 + 72)];
    [v4 setClientType:*(unsigned int *)(a1 + 80)];
    [v4 setIsQREnabled:*(unsigned __int8 *)(a1 + 120)];
    [v4 setIsUsingQRDirectly:*(unsigned __int8 *)(a1 + 121)];
    [v4 setIsInitiator:*(unsigned __int8 *)(a1 + 122)];
    [v4 setIsLegacySessionType:*(unsigned __int8 *)(a1 + 123)];
    [v4 setIsWithDefaultPairedDevice:*(unsigned __int8 *)(a1 + 124)];
    [v4 setTransportType:*(unsigned int *)(a1 + 88)];
    [v4 setLinkType:*(unsigned int *)(a1 + 96)];
    [v4 setLinkProtocol:*(unsigned int *)(a1 + 104)];
    [v4 setEndedReason:*(unsigned int *)(a1 + 112)];
    [v4 setDurationOfSession:v1];
    [v4 setDurationToConnect:v2];
    [v4 setIsNetworkEnabled:*(unsigned __int8 *)(a1 + 125)];
    [v4 setIsNetworkActive:*(unsigned __int8 *)(a1 + 126)];
    [v4 setIsNetworkReachable:*(unsigned __int8 *)(a1 + 127)];
    [v4 setIsWifiInterfaceDisallowed:*(unsigned __int8 *)(a1 + 128)];
    [v4 setIsCellularInterfaceDisallowed:*(unsigned __int8 *)(a1 + 129)];
    [v4 setDestinationType:*(unsigned int *)(a1 + 116)];
    [*(id *)(a1 + 32) _submitIDSSessionAWDMetric:v4 withContainer:v7];
  }
}

void sub_1001B14E0(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _metricContainerForMetricType:2588679]);
  if (v3)
  {
    id v2 = objc_alloc_init((Class)IMWeakLinkClass(@"AWDIDSSessionEnded", @"WirelessDiagnostics"));
    [v2 setGuid:*(void *)(a1 + 40)];
    [v2 setEndedReason:*(unsigned int *)(a1 + 120)];
    [v2 setGenericError:*(unsigned int *)(a1 + 124)];
    [v2 setGameKitError:*(unsigned int *)(a1 + 128)];
    [v2 setConferenceMiscError:*(unsigned int *)(a1 + 132)];
    objc_msgSend( v2,  "setCallDuration:",  IDSAWDLogFuzzTimeTo10sSecondsForHotShip(objc_msgSend(*(id *)(a1 + 48), "doubleValue")));
    [v2 setIsNetworkEnabled:*(unsigned __int8 *)(a1 + 152)];
    [v2 setIsNetworkActive:*(unsigned __int8 *)(a1 + 153)];
    [v2 setIsNetworkReachable:*(unsigned __int8 *)(a1 + 154)];
    [v2 setNetworkCheckResult:*(unsigned int *)(a1 + 136)];
    objc_msgSend( v2,  "setDataRate:",  IDSAWDLogGenerateDataRate(objc_msgSend(*(id *)(a1 + 56), "unsignedIntValue")));
    objc_msgSend(v2, "setGksError:", objc_msgSend(*(id *)(a1 + 64), "unsignedIntValue"));
    objc_msgSend(v2, "setConnectDuration:", objc_msgSend(*(id *)(a1 + 72), "unsignedIntValue"));
    [v2 setRemoteNetworkConnection:*(unsigned int *)(a1 + 140)];
    [v2 setLocalNetworkConnection:*(unsigned int *)(a1 + 144)];
    [v2 setConnectionType:*(unsigned int *)(a1 + 148)];
    [v2 setUsesRelay:*(unsigned __int8 *)(a1 + 155)];
    objc_msgSend(v2, "setCurrentNatType:", objc_msgSend(*(id *)(a1 + 80), "unsignedIntValue"));
    objc_msgSend(v2, "setRemoteNatType:", objc_msgSend(*(id *)(a1 + 88), "unsignedIntValue"));
    objc_msgSend(v2, "setRemoteNetworkConnection:", objc_msgSend(*(id *)(a1 + 88), "unsignedIntValue"));
    objc_msgSend(v2, "setRelayConnectDuration:", objc_msgSend(*(id *)(a1 + 96), "unsignedIntValue"));
    [v2 setIsInitiator:*(unsigned __int8 *)(a1 + 156)];
    objc_msgSend(v2, "setLinkQuality:", objc_msgSend(*(id *)(a1 + 104), "intValue"));
    objc_msgSend(v2, "setGksReturnCode:", objc_msgSend(*(id *)(a1 + 112), "intValue"));
    [*(id *)(a1 + 32) _submitIDSSessionAWDMetric:v2 withContainer:v3];
  }
}

void sub_1001B1708(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___IDSDeliveryController);
  id v2 = (void *)qword_1009BED78;
  qword_1009BED78 = (uint64_t)v1;
}

void sub_1001B1B84(_Unwind_Exception *a1)
{
}

void sub_1001B1BA8(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v7 = (id *)(a1 + 32);
  id v8 = a5;
  id v9 = a3;
  id v10 = a2;
  __int128 v15 = (id *)objc_loadWeakRetained(v7);
  double v11 = (void *)objc_claimAutoreleasedReturnValue([v8 pushToken]);

  id v12 = (void *)objc_claimAutoreleasedReturnValue([v9 prefixedURI]);
  __int128 v13 = (void *)objc_claimAutoreleasedReturnValue([v15 _tokenURIForToken:v11 uri:v12]);

  __int128 v14 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDeliveryController tokenURINegativeCacheItemForTokenURI:service:]( &OBJC_CLASS___IDSDeliveryController,  "tokenURINegativeCacheItemForTokenURI:service:",  v13,  v10));
  if (v14) {
    [v15[4] clearItem:v14];
  }
}

uint64_t sub_1001B1EDC(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[IDSPushHandler sharedInstanceWithPortName:]( &OBJC_CLASS___IDSPushHandler,  "sharedInstanceWithPortName:",  @"com.apple.identityservicesd.aps"));
  unsigned int v3 = [v2 isConnected];

  if (v3)
  {
    uint64_t v4 = OSLogHandleForIDSCategory("IDSDelivery");
    float v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      id v6 = [*(id *)(a1 + 32) count];
      *(_DWORD *)buf = 134217984;
      id v37 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Push is still connected - replaying %lu offline message sends.",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v7) && _IDSShouldLog(0LL, @"IDSDelivery"))
    {
      id v30 = [*(id *)(a1 + 32) count];
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDelivery",  @"Push is still connected - replaying %lu offline message sends.");
    }

    __int128 v33 = 0u;
    __int128 v34 = 0u;
    __int128 v31 = 0u;
    __int128 v32 = 0u;
    id v9 = *(void **)(a1 + 32);
    id v8 = (id *)(a1 + 32);
    id v10 = v9;
    id v11 = [v10 countByEnumeratingWithState:&v31 objects:v35 count:16];
    if (v11)
    {
      uint64_t v12 = *(void *)v32;
      do
      {
        __int128 v13 = 0LL;
        do
        {
          if (*(void *)v32 != v12) {
            objc_enumerationMutation(v10);
          }
          uint64_t v14 = *(void *)(*((void *)&v31 + 1) + 8LL * (void)v13);
          __int128 v15 = objc_autoreleasePoolPush();
          (*(void (**)(uint64_t))(v14 + 16))(v14);
          objc_autoreleasePoolPop(v15);
          __int128 v13 = (char *)v13 + 1;
        }

        while (v11 != v13);
        id v11 = [v10 countByEnumeratingWithState:&v31 objects:v35 count:16];
      }

      while (v11);
    }

    uint64_t v16 = OSLogHandleForIDSCategory("IDSDelivery");
    uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      id v18 = [*v8 count];
      *(_DWORD *)buf = 134217984;
      id v37 = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Done replaying %lu offline message sends.",  buf,  0xCu);
    }

    uint64_t result = os_log_shim_legacy_logging_enabled(v19);
    if ((_DWORD)result)
    {
      uint64_t result = _IDSShouldLog(0LL, @"IDSDelivery");
      if ((result & 1) != 0)
      {
        __int128 v21 = @"Done replaying %lu offline message sends.";
LABEL_31:
        objc_msgSend(*v8, "count", v30);
        return _IDSLogV(0LL, @"IDSFoundation", @"IDSDelivery", v21);
      }
    }
  }

  else
  {
    uint64_t v22 = OSLogHandleForIDSCategory("IDSDelivery");
    __int128 v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      id v24 = [*(id *)(a1 + 32) count];
      *(_DWORD *)buf = 134217984;
      id v37 = v24;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "Push is NOT still connected - readding %lu offline message sends.",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v25) && _IDSShouldLog(0LL, @"IDSDelivery"))
    {
      id v30 = [*(id *)(a1 + 32) count];
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDelivery",  @"Push is NOT still connected - readding %lu offline message sends.");
    }

    if (objc_msgSend(*(id *)(*(void *)(a1 + 40) + 24), "count", v30)) {
      [*(id *)(a1 + 32) addObjectsFromArray:*(void *)(*(void *)(a1 + 40) + 24)];
    }
    objc_storeStrong((id *)(*(void *)(a1 + 40) + 24LL), *(id *)(a1 + 32));
    uint64_t v26 = OSLogHandleForIDSCategory("IDSDelivery");
    uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      id v28 = [*(id *)(*(void *)(a1 + 40) + 24) count];
      *(_DWORD *)buf = 134217984;
      id v37 = v28;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "Total offline message sends enqueued: %lu.",  buf,  0xCu);
    }

    uint64_t result = os_log_shim_legacy_logging_enabled(v29);
    if ((_DWORD)result)
    {
      uint64_t result = _IDSShouldLog(0LL, @"IDSDelivery");
      if ((_DWORD)result)
      {
        id v8 = (id *)(*(void *)(a1 + 40) + 24LL);
        __int128 v21 = @"Total offline message sends enqueued: %lu.";
        goto LABEL_31;
      }
    }
  }

  return result;
}

void sub_1001B22D8(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1001B2248LL);
  }

  _Unwind_Resume(a1);
}

void sub_1001B2CF8(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1001B28C8LL);
  }

  _Unwind_Resume(a1);
}

void sub_1001B31BC(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = OSLogHandleForIDSCategory("IDSDelivery");
  float v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = a1[4];
    uint64_t v7 = a1[5];
    *(_DWORD *)buf = 138412546;
    uint64_t v18 = v6;
    __int16 v19 = 2112;
    uint64_t v20 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "  Finished sending message: %@  to accessory: %@",  buf,  0x16u);
  }

  if (os_log_shim_legacy_logging_enabled(v8) && _IDSShouldLog(0LL, @"IDSDelivery"))
  {
    uint64_t v15 = a1[4];
    uint64_t v16 = a1[5];
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDelivery",  @"  Finished sending message: %@  to accessory: %@");
  }

  id v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "deliveryError", v15, v16));

  if (v9)
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v3 deliveryError]);
    id v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjectsAndKeys:",  v10,  NSUnderlyingErrorKey,  0LL));

    uint64_t v12 = objc_alloc(&OBJC_CLASS___NSError);
    __int128 v13 = -[NSError initWithDomain:code:userInfo:](v12, "initWithDomain:code:userInfo:", IDSSendErrorDomain, 21LL, v11);
    [v3 setIdsResponseCode:21];
    [v3 setResponseError:v13];
    uint64_t v14 = a1[6];
    if (v14) {
      (*(void (**)(uint64_t, id))(v14 + 16))(v14, v3);
    }
  }

  else if (a1[6])
  {
    [v3 setIdsResponseCode:0];
    (*(void (**)(void))(a1[6] + 16LL))();
  }
}

void sub_1001B521C(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1001B4ED0LL);
  }

  _Unwind_Resume(a1);
}

void sub_1001B5240(uint64_t a1, void *a2, void *a3, __CFString *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a5;
  uint64_t v12 = (__CFString *)v9;
  uint64_t v14 = objc_opt_class(&OBJC_CLASS___IDSPeerMessage, v13);
  if ((objc_opt_isKindOfClass(v12, v14) & 1) != 0)
  {
    uint64_t v15 = OSLogHandleForIDSCategory("IDSDelivery");
    uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      id v17 = (id)objc_claimAutoreleasedReturnValue(-[__CFString targetToken](v12, "targetToken"));
      *(_DWORD *)buf = 138412546;
      __int128 v85 = v12;
      __int16 v86 = 2112;
      id v87 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "    Delivered FTMessage: %@ to token: %@",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v18) && _IDSShouldLog(0LL, @"IDSDelivery"))
    {
      __int128 v82 = v12;
      __int128 v83 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString targetToken](v12, "targetToken"));
      _IDSLogV(0LL, @"IDSFoundation", @"IDSDelivery", @"    Delivered FTMessage: %@ to token: %@");
    }
  }

  else
  {
    uint64_t v19 = OSLogHandleForIDSCategory("IDSDelivery");
    uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      __int128 v85 = v12;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "    Delivered FTMessage: %@", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v21) && _IDSShouldLog(0LL, @"IDSDelivery"))
    {
      __int128 v82 = v12;
      _IDSLogV(0LL, @"IDSFoundation", @"IDSDelivery", @"    Delivered FTMessage: %@");
    }
  }

  uint64_t v22 = OSLogHandleForIDSCategory("IDSDelivery");
  __int128 v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    __int128 v85 = a4;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "                  Result code: %ld", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v24) && _IDSShouldLog(0LL, @"IDSDelivery"))
  {
    __int128 v82 = a4;
    _IDSLogV(0LL, @"IDSFoundation", @"IDSDelivery", @"                  Result code: %ld");
  }

  uint64_t v25 = OSLogHandleForIDSCategory("IDSDelivery");
  uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v27 = *(const __CFString **)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    __int128 v85 = v27;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "                        To ID: %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v28) && _IDSShouldLog(0LL, @"IDSDelivery"))
  {
    __int128 v82 = *(__CFString **)(a1 + 32);
    _IDSLogV(0LL, @"IDSFoundation", @"IDSDelivery", @"                        To ID: %@");
  }

  uint64_t v29 = OSLogHandleForIDSCategory("IDSDelivery");
  id v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
  {
    __int128 v31 = *(const __CFString **)(a1 + 40);
    *(_DWORD *)buf = 138412290;
    __int128 v85 = v31;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "                      From ID: %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v32) && _IDSShouldLog(0LL, @"IDSDelivery"))
  {
    __int128 v82 = *(__CFString **)(a1 + 40);
    _IDSLogV(0LL, @"IDSFoundation", @"IDSDelivery", @"                      From ID: %@");
  }

  uint64_t v33 = OSLogHandleForIDSCategory("IDSDelivery");
  __int128 v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    __int128 v85 = v11;
    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "            Result dictionary: %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v35) && _IDSShouldLog(0LL, @"IDSDelivery"))
  {
    __int128 v82 = v11;
    _IDSLogV(0LL, @"IDSFoundation", @"IDSDelivery", @"            Result dictionary: %@");
  }

  uint64_t v36 = OSLogHandleForIDSCategory("IDSDelivery");
  id v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    __int128 v85 = v10;
    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "                        Error: %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v38) && _IDSShouldLog(0LL, @"IDSDelivery"))
  {
    __int128 v82 = v10;
    _IDSLogV(0LL, @"IDSFoundation", @"IDSDelivery", @"                        Error: %@");
  }

  uint64_t v39 = OSLogHandleForIDSCategory("IDSDelivery");
  uint64_t v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
  if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString wantsDeliveryStatus](v12, "wantsDeliveryStatus"));
    unsigned int v42 = [v41 intValue];
    id v43 = @"YES";
    if (!v42) {
      id v43 = @"NO";
    }
    *(_DWORD *)buf = 138412290;
    __int128 v85 = v43;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "    Requested Delivery Status: %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v44) && _IDSShouldLog(0LL, @"IDSDelivery"))
  {
    id v45 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString wantsDeliveryStatus](v12, "wantsDeliveryStatus"));
    unsigned int v46 = [v45 intValue];
    uint64_t v47 = @"YES";
    if (!v46) {
      uint64_t v47 = @"NO";
    }
    __int128 v82 = (__CFString *)v47;
    _IDSLogV(0LL, @"IDSFoundation", @"IDSDelivery", @"    Requested Delivery Status: %@");
  }

  uint64_t v48 = OSLogHandleForIDSCategory("IDSDelivery");
  id v49 = (os_log_s *)objc_claimAutoreleasedReturnValue(v48);
  if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v50 = -[__CFString wantsCertifiedDelivery](v12, "wantsCertifiedDelivery");
    __int128 v51 = @"NO";
    if (v50) {
      __int128 v51 = @"YES";
    }
    *(_DWORD *)buf = 138412290;
    __int128 v85 = v51;
    _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, " Requested Certified Delivery: %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v52) && _IDSShouldLog(0LL, @"IDSDelivery"))
  {
    unsigned int v53 = -[__CFString wantsCertifiedDelivery](v12, "wantsCertifiedDelivery");
    __int128 v54 = @"NO";
    if (v53) {
      __int128 v54 = @"YES";
    }
    __int128 v82 = (__CFString *)v54;
    _IDSLogV(0LL, @"IDSFoundation", @"IDSDelivery", @" Requested Certified Delivery: %@");
  }

  uint64_t v55 = OSLogHandleForIDSCategory("IDSDelivery");
  uint64_t v56 = (os_log_s *)objc_claimAutoreleasedReturnValue(v55);
  if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v57 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString messageBodyUsingCache](v12, "messageBodyUsingCache"));
    id v58 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString service](v12, "service"));
    uint64_t v59 = IDSLoggableDescriptionForObjectOnService(v57, v58);
    uint64_t v60 = (__CFString *)(id)objc_claimAutoreleasedReturnValue(v59);
    *(_DWORD *)buf = 138412290;
    __int128 v85 = v60;
    _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "                 Message Body: %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v61) && _IDSShouldLog(0LL, @"IDSDelivery"))
  {
    uint64_t v62 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString messageBodyUsingCache](v12, "messageBodyUsingCache"));
    v63 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString service](v12, "service"));
    uint64_t v64 = IDSLoggableDescriptionForObjectOnService(v62, v63);
    __int128 v82 = (__CFString *)objc_claimAutoreleasedReturnValue(v64);
    _IDSLogV(0LL, @"IDSFoundation", @"IDSDelivery", @"                 Message Body: %@");
  }

  uint64_t v65 = OSLogHandleForIDSCategory("IDSDelivery");
  uint64_t v66 = (os_log_s *)objc_claimAutoreleasedReturnValue(v65);
  if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEFAULT, "Sending callback for FTMessage send", buf, 2u);
  }

  uint64_t v68 = *(void *)(a1 + 32);
  if (v68) {
    [*(id *)(a1 + 48) _processMessageResponse:v12 error:v10 resultCode:a4 toURI:v68 fromURI:*(void *)(a1 + 40) service:*(void *)(a1 + 56) fromIdentity:*(void *)(a1 + 64)];
  }
  uint64_t v69 = 0LL;
  if (*(void *)(a1 + 80))
  {
    uint64_t v70 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString objectForKey:](v11, "objectForKey:", @"D"));

    if (v70)
    {
      __int128 v71 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString objectForKey:](v11, "objectForKey:", @"D"));
      unsigned int v72 = [v71 BOOLValue];

      uint64_t v73 = OSLogHandleForIDSCategory("IDSDelivery");
      __int128 v74 = (os_log_s *)objc_claimAutoreleasedReturnValue(v73);
      if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
      {
        __int128 v75 = @"NO";
        if (v72) {
          __int128 v75 = @"YES";
        }
        *(_DWORD *)buf = 138412290;
        __int128 v85 = v75;
        _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEFAULT, "Was accessory online?: %@", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled(v76)
        && _IDSShouldLog(0LL, @"IDSDelivery"))
      {
        __int128 v77 = @"NO";
        if (v72) {
          __int128 v77 = @"YES";
        }
        __int128 v82 = (__CFString *)v77;
        _IDSLogV(0LL, @"IDSFoundation", @"IDSDelivery", @"Was accessory online?: %@");
      }

      if ((v72 & 1) != 0)
      {
        uint64_t v70 = 0LL;
      }

      else
      {
        __int128 v78 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjectsAndKeys:",  v10,  NSUnderlyingErrorKey,  0LL));
        uint64_t v70 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSSendErrorDomain,  21LL,  v78));
      }
    }

    if (v10)
    {
      __int128 v79 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjectsAndKeys:",  v10,  NSUnderlyingErrorKey,  0LL));
      uint64_t v80 = objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSSendErrorDomain,  v69,  v79));

      uint64_t v70 = (void *)v80;
    }

    __int128 v81 = -[IDSDeliveryContext initWithResponseCode:error:lastCall:]( objc_alloc(&OBJC_CLASS___IDSDeliveryContext),  "initWithResponseCode:error:lastCall:",  v69,  v70,  1LL);
    -[IDSDeliveryContext setDisplayURIs:](v81, "setDisplayURIs:", *(void *)(a1 + 72));
    (*(void (**)(void, IDSDeliveryContext *))(*(void *)(a1 + 80) + 16LL))(*(void *)(a1 + 80), v81);
  }

  objc_msgSend(*(id *)(a1 + 48), "_checkFastDormancy", v82, v83);
}

void sub_1001B6578(uint64_t a1, void *a2, void *a3, __CFString *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a5;
  uint64_t v12 = (__CFString *)v9;
  uint64_t v14 = objc_opt_class(&OBJC_CLASS___IDSPeerMessage, v13);
  if ((objc_opt_isKindOfClass(v12, v14) & 1) != 0)
  {
    uint64_t v15 = OSLogHandleForIDSCategory("IDSDelivery");
    uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      id v17 = (id)objc_claimAutoreleasedReturnValue(-[__CFString targetToken](v12, "targetToken"));
      *(_DWORD *)buf = 138412546;
      __int128 v77 = v12;
      __int16 v78 = 2112;
      id v79 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "    Delivered FTMessage: %@ to token: %@",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v18) && _IDSShouldLog(0LL, @"IDSDelivery"))
    {
      __int128 v74 = v12;
      __int128 v75 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString targetToken](v12, "targetToken"));
      _IDSLogV(0LL, @"IDSFoundation", @"IDSDelivery", @"    Delivered FTMessage: %@ to token: %@");
    }
  }

  else
  {
    uint64_t v19 = OSLogHandleForIDSCategory("IDSDelivery");
    uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      __int128 v77 = v12;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "    Delivered FTMessage: %@", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v21) && _IDSShouldLog(0LL, @"IDSDelivery"))
    {
      __int128 v74 = v12;
      _IDSLogV(0LL, @"IDSFoundation", @"IDSDelivery", @"    Delivered FTMessage: %@");
    }
  }

  uint64_t v22 = OSLogHandleForIDSCategory("IDSDelivery");
  __int128 v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    __int128 v77 = a4;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "                  Result code: %ld", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v24) && _IDSShouldLog(0LL, @"IDSDelivery"))
  {
    __int128 v74 = a4;
    _IDSLogV(0LL, @"IDSFoundation", @"IDSDelivery", @"                  Result code: %ld");
  }

  uint64_t v25 = OSLogHandleForIDSCategory("IDSDelivery");
  uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v27 = *(const __CFString **)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    __int128 v77 = v27;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "              To Destinations: %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v28) && _IDSShouldLog(0LL, @"IDSDelivery"))
  {
    __int128 v74 = *(__CFString **)(a1 + 32);
    _IDSLogV(0LL, @"IDSFoundation", @"IDSDelivery", @"              To Destinations: %@");
  }

  uint64_t v29 = OSLogHandleForIDSCategory("IDSDelivery");
  id v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
  {
    __int128 v31 = *(const __CFString **)(a1 + 40);
    *(_DWORD *)buf = 138412290;
    __int128 v77 = v31;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "                      From ID: %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v32) && _IDSShouldLog(0LL, @"IDSDelivery"))
  {
    __int128 v74 = *(__CFString **)(a1 + 40);
    _IDSLogV(0LL, @"IDSFoundation", @"IDSDelivery", @"                      From ID: %@");
  }

  uint64_t v33 = OSLogHandleForIDSCategory("IDSDelivery");
  __int128 v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    __int128 v77 = v11;
    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "            Result dictionary: %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v35) && _IDSShouldLog(0LL, @"IDSDelivery"))
  {
    __int128 v74 = v11;
    _IDSLogV(0LL, @"IDSFoundation", @"IDSDelivery", @"            Result dictionary: %@");
  }

  uint64_t v36 = OSLogHandleForIDSCategory("IDSDelivery");
  id v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    __int128 v77 = v10;
    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "                        Error: %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v38) && _IDSShouldLog(0LL, @"IDSDelivery"))
  {
    __int128 v74 = v10;
    _IDSLogV(0LL, @"IDSFoundation", @"IDSDelivery", @"                        Error: %@");
  }

  uint64_t v39 = OSLogHandleForIDSCategory("IDSDelivery");
  uint64_t v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
  if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString wantsDeliveryStatus](v12, "wantsDeliveryStatus"));
    unsigned int v42 = [v41 intValue];
    id v43 = @"YES";
    if (!v42) {
      id v43 = @"NO";
    }
    *(_DWORD *)buf = 138412290;
    __int128 v77 = v43;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "    Requested Delivery Status: %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v44) && _IDSShouldLog(0LL, @"IDSDelivery"))
  {
    id v45 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString wantsDeliveryStatus](v12, "wantsDeliveryStatus"));
    unsigned int v46 = [v45 intValue];
    uint64_t v47 = @"YES";
    if (!v46) {
      uint64_t v47 = @"NO";
    }
    __int128 v74 = (__CFString *)v47;
    _IDSLogV(0LL, @"IDSFoundation", @"IDSDelivery", @"    Requested Delivery Status: %@");
  }

  uint64_t v48 = OSLogHandleForIDSCategory("IDSDelivery");
  id v49 = (os_log_s *)objc_claimAutoreleasedReturnValue(v48);
  if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v50 = -[__CFString wantsCertifiedDelivery](v12, "wantsCertifiedDelivery");
    __int128 v51 = @"NO";
    if (v50) {
      __int128 v51 = @"YES";
    }
    *(_DWORD *)buf = 138412290;
    __int128 v77 = v51;
    _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, " Requested Certified Delivery: %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v52) && _IDSShouldLog(0LL, @"IDSDelivery"))
  {
    unsigned int v53 = -[__CFString wantsCertifiedDelivery](v12, "wantsCertifiedDelivery");
    __int128 v54 = @"NO";
    if (v53) {
      __int128 v54 = @"YES";
    }
    __int128 v74 = (__CFString *)v54;
    _IDSLogV(0LL, @"IDSFoundation", @"IDSDelivery", @" Requested Certified Delivery: %@");
  }

  uint64_t v55 = OSLogHandleForIDSCategory("IDSDelivery");
  uint64_t v56 = (os_log_s *)objc_claimAutoreleasedReturnValue(v55);
  if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v57 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString messageBodyUsingCache](v12, "messageBodyUsingCache"));
    id v58 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString service](v12, "service"));
    uint64_t v59 = IDSLoggableDescriptionForObjectOnService(v57, v58);
    uint64_t v60 = (__CFString *)(id)objc_claimAutoreleasedReturnValue(v59);
    *(_DWORD *)buf = 138412290;
    __int128 v77 = v60;
    _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "                 Message Body: %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v61) && _IDSShouldLog(0LL, @"IDSDelivery"))
  {
    uint64_t v62 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString messageBodyUsingCache](v12, "messageBodyUsingCache"));
    v63 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString service](v12, "service"));
    uint64_t v64 = IDSLoggableDescriptionForObjectOnService(v62, v63);
    __int128 v74 = (__CFString *)objc_claimAutoreleasedReturnValue(v64);
    _IDSLogV(0LL, @"IDSFoundation", @"IDSDelivery", @"                 Message Body: %@");
  }

  uint64_t v65 = OSLogHandleForIDSCategory("IDSDelivery");
  uint64_t v66 = (os_log_s *)objc_claimAutoreleasedReturnValue(v65);
  if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEFAULT, "Sending callback for FTMessage send", buf, 2u);
  }

  uint64_t v68 = 0LL;
  if (*(void *)(a1 + 64))
  {
    if (v10)
    {
      uint64_t v69 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjectsAndKeys:",  v10,  NSUnderlyingErrorKey,  0LL));
      uint64_t v70 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSSendErrorDomain,  v68,  v69));
    }

    else
    {
      uint64_t v70 = 0LL;
    }

    __int128 v71 = -[IDSDeliveryContext initWithResponseCode:error:lastCall:]( objc_alloc(&OBJC_CLASS___IDSDeliveryContext),  "initWithResponseCode:error:lastCall:",  v68,  v70,  1LL);
    -[IDSDeliveryContext setDisplayURIs:](v71, "setDisplayURIs:", *(void *)(a1 + 48));
    unsigned int v72 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString _numberForKey:](v11, "_numberForKey:", @"e"));

    if (v72)
    {
      uint64_t v73 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString _numberForKey:](v11, "_numberForKey:", @"e"));
      -[IDSDeliveryContext setResponseTimeStamp:](v71, "setResponseTimeStamp:", v73);
    }

    if (!*(_BYTE *)(a1 + 72)) {
      -[IDSDeliveryContext setEndpointState:](v71, "setEndpointState:", &off_100947428);
    }
    (*(void (**)(void, IDSDeliveryContext *))(*(void *)(a1 + 64) + 16LL))(*(void *)(a1 + 64), v71);
  }

  objc_msgSend(*(id *)(a1 + 56), "_checkFastDormancy", v74, v75);
}

void sub_1001B6F5C(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {

    objc_end_catch();
    JUMPOUT(0x1001B6674LL);
  }

  _Unwind_Resume(a1);
}

void sub_1001B76E8(id a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v7 = OSLogHandleForIDSCategory("Attachments");
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218496;
    unint64_t v11 = a2;
    __int16 v12 = 2048;
    unint64_t v13 = a3;
    __int16 v14 = 2048;
    unint64_t v15 = a4;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Send attachment message progress updated to %lld of %lld (%lld bps)",  buf,  0x20u);
  }

  if (os_log_shim_legacy_logging_enabled(v9))
  {
    if (_IDSShouldLog(0LL, @"Attachments")) {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Attachments",  @"Send attachment message progress updated to %lld of %lld (%lld bps)");
    }
  }

void sub_1001B7810( uint64_t a1, void *a2, int a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, uint64_t a10)
{
  id v70 = a2;
  id v73 = a4;
  id v68 = a5;
  id value = a6;
  id v71 = a7;
  id v74 = a8;
  id v69 = a9;
  if (a3)
  {
    uint64_t v17 = OSLogHandleForIDSCategory("Attachments");
    uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v87 = v70;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Succeeded uploading file transfer: %@",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v19) && _IDSShouldLog(0LL, @"Attachments"))
    {
      id v58 = v70;
      _IDSLogV(0LL, @"IDSFoundation", @"Attachments", @"Succeeded uploading file transfer: %@");
    }

    theDict = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    if (value) {
      CFDictionarySetValue((CFMutableDictionaryRef)theDict, @"mmcs-owner", value);
    }
    if (v74) {
      CFDictionarySetValue((CFMutableDictionaryRef)theDict, @"mmcs-url", v74);
    }
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v71, "__imHexString", v58));
    if (v20) {
      CFDictionarySetValue((CFMutableDictionaryRef)theDict, @"mmcs-signature-hex", v20);
    }

    uint64_t v21 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    uint64_t v22 = *(void **)(a1 + 32);
    v84[0] = _NSConcreteStackBlock;
    v84[1] = 3221225472LL;
    v84[2] = sub_1001B7FE4;
    v84[3] = &unk_1008F8418;
    __int128 v75 = v21;
    __int128 v85 = v75;
    [v22 enumerateKeysAndObjectsUsingBlock:v84];
    __int128 v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 104LL));
    if (v23)
    {
      CFDictionarySetValue(v75, IDSCommandKey, v23);
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1006A0134();
    }

    id v43 = *(const void **)(a1 + 40);
    if (v43) {
      CFDictionarySetValue(v75, IDSOriginalCommandKey, v43);
    }
    uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", a10));
    if (v44) {
      CFDictionarySetValue(v75, IDSDataLengthKey, v44);
    }

    v80[0] = _NSConcreteStackBlock;
    v80[1] = 3221225472LL;
    v80[2] = sub_1001B7FF0;
    v80[3] = &unk_1008FD138;
    id v81 = *(id *)(a1 + 48);
    id v83 = *(id *)(a1 + 136);
    id v82 = *(id *)(a1 + 56);
    uint64_t v67 = objc_retainBlock(v80);
    uint64_t v66 = *(void **)(a1 + 64);
    uint64_t v45 = JWEncodeDictionary(theDict);
    unsigned int v46 = (void *)objc_claimAutoreleasedReturnValue(v45);
    BOOL v65 = *(_BYTE *)(a1 + 152) != 0;
    uint64_t v47 = *(void *)(a1 + 80);
    uint64_t v64 = *(void *)(a1 + 72);
    uint64_t v48 = *(void *)(a1 + 48);
    uint64_t v49 = *(void *)(a1 + 88);
    uint64_t v50 = *(void *)(a1 + 96);
    uint64_t v51 = *(void *)(a1 + 104);
    uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) _tokenURIForToken:*(void *)(a1 + 112) uri:v51]);
    uint64_t v56 = IMSingleObjectArray(v52, v53, v54, v55);
    __int16 v57 = (void *)objc_claimAutoreleasedReturnValue(v56);
    LOBYTE(v63) = 0;
    LOWORD(v62) = 0;
    BYTE2(v61) = 0;
    LOWORD(v61) = 0;
    LOBYTE(v60) = v47 != 0;
    LODWORD(v59) = 0x10000;
    objc_msgSend( v66,  "_sendMessageDictionary:lastRetryInterval:dataToEncrypt:withEncryptedAttributes:onService:wantsResponse:canUseLarge Payload:sendOnePerToken:allowPartialSendsToSucceed:highPriority:fireAndForget:expirationDate:enforceRemoteTimeouts :messageID:fromID:fromShortHandle:fromIdentity:toID:toURIs:accessToken:topic:registrationProperties:fakeMessage:al waysSkipSelf:alwaysIncludeSelf:forceQuery:pushPriority:ignoreMaxRetryCount:disallowRefresh:originalTimestamp:prior itizedTokenList:wantsFirewallDonation:destinationObject:deliveryMinimumTimeDelay:deliveryMinimumTime:sendMode:KTUR IVerificationMap:ackBlock:willSendBlock:sendCompletionBlock:",  v75,  v46,  0,  v64,  0,  v65,  0.0,  v59,  v47,  v60,  v48,  v49,  0,  v50,  v51,  v57,  0,  *(void *)(a1 + 120),  0,  v61,  0,  0,  v62,  0,  0,  v63,  *(void *)(a1 + 128),  0,  0,  0,  0,  *(void *)(a1 + 144),  0,  v67);

    unsigned int v42 = (id *)&v85;
    id v40 = v81;
  }

  else
  {
    uint64_t v24 = OSLogHandleForIDSCategory("Attachments");
    uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v26 = *(void **)(a1 + 56);
      *(_DWORD *)buf = 138412290;
      id v87 = v26;
      _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "Failed uploading attachment file transfer: %@",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v27) && _IDSShouldLog(0LL, @"Attachments"))
    {
      id v58 = *(id *)(a1 + 56);
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Attachments",  @"Failed uploading attachment file transfer: %@");
    }

    theDict = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    if (v74) {
      CFDictionarySetValue((CFMutableDictionaryRef)theDict, @"url", v74);
    }
    uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v73, "domain", v58));
    if (v28) {
      CFDictionarySetValue((CFMutableDictionaryRef)theDict, @"eD", v28);
    }

    uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [v73 code]));
    if (v29) {
      CFDictionarySetValue((CFMutableDictionaryRef)theDict, @"eC", v29);
    }

    id v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a10));
    if (v30) {
      CFDictionarySetValue((CFMutableDictionaryRef)theDict, @"fS", v30);
    }

    __int128 v75 = -[IDSServerMessage initWithPayload:command:]( objc_alloc(&OBJC_CLASS___IDSServerMessage),  "initWithPayload:command:",  theDict,  &off_100947440);
    __int128 v31 = *(void **)(a1 + 64);
    uint64_t v32 = *(void **)(a1 + 120);
    v78[0] = _NSConcreteStackBlock;
    v78[1] = 3221225472LL;
    v78[2] = sub_1001B8248;
    v78[3] = &unk_1008F8A50;
    id v79 = v32;
    [v31 sendIDSMessage:v75 service:0 topic:v79 completionBlock:v78];
    if (*(void *)(a1 + 136))
    {
      uint64_t v33 = -[NSDictionary initWithObjectsAndKeys:]( objc_alloc(&OBJC_CLASS___NSDictionary),  "initWithObjectsAndKeys:",  @"Failed uploading attachment file transfer",  NSLocalizedDescriptionKey,  0LL);
      __int128 v34 = objc_alloc(&OBJC_CLASS___NSError);
      uint64_t v35 = -[NSError initWithDomain:code:userInfo:](v34, "initWithDomain:code:userInfo:", IDSSendErrorDomain, 4LL, v33);
      uint64_t v36 = -[IDSDeliveryContext initWithResponseCode:error:lastCall:]( objc_alloc(&OBJC_CLASS___IDSDeliveryContext),  "initWithResponseCode:error:lastCall:",  -[NSError code](v35, "code"),  v35,  1LL);
      (*(void (**)(void))(*(void *)(a1 + 136) + 16LL))();
    }

    id v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
    uint64_t v38 = *(void *)(a1 + 56);
    id v77 = 0LL;
    unsigned __int8 v39 = [v37 removeItemAtPath:v38 error:&v77];
    id v40 = v77;

    unsigned int v42 = &v79;
  }
}

id sub_1001B7FE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) setObject:a3 forKey:a2];
}

void sub_1001B7FF0(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = OSLogHandleForIDSCategory("IDSDelivery");
  float v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = a1[4];
    id v7 = [v3 idsResponseCode];
    id v8 = (id)objc_claimAutoreleasedReturnValue([v3 responseError]);
    unsigned int v9 = [v3 lastCall];
    id v10 = @"NO";
    *(_DWORD *)buf = 138413058;
    uint64_t v29 = v6;
    __int16 v30 = 2048;
    if (v9) {
      id v10 = @"YES";
    }
    id v31 = v7;
    __int16 v32 = 2112;
    id v33 = v8;
    __int16 v34 = 2112;
    uint64_t v35 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Finished sending attachment message %@. Result code: %ld. Error: %@   lastCall: %@",  buf,  0x2Au);
  }

  if (os_log_shim_legacy_logging_enabled(v11) && _IDSShouldLog(0LL, @"IDSDelivery"))
  {
    uint64_t v12 = a1[4];
    id v13 = [v3 idsResponseCode];
    __int16 v14 = (void *)objc_claimAutoreleasedReturnValue([v3 responseError]);
    unsigned int v15 = [v3 lastCall];
    uint64_t v16 = @"NO";
    if (v15) {
      uint64_t v16 = @"YES";
    }
    uint64_t v25 = v14;
    uint64_t v26 = v16;
    uint64_t v23 = v12;
    id v24 = v13;
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDelivery",  @"Finished sending attachment message %@. Result code: %ld. Error: %@   lastCall: %@");
  }

  uint64_t v17 = a1[6];
  if (v17) {
    (*(void (**)(uint64_t, id))(v17 + 16))(v17, v3);
  }
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager", v23, v24, v25, v26));
  uint64_t v19 = a1[5];
  id v27 = 0LL;
  unsigned __int8 v20 = [v18 removeItemAtPath:v19 error:&v27];
  id v21 = v27;
}

void sub_1001B8248(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = OSLogHandleForIDSCategory("IDSDelivery");
  float v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    id v7 = [v3 idsResponseCode];
    id v8 = [v3 responseCode];
    unsigned int v9 = [v3 lastCall];
    id v10 = @"NO";
    *(_DWORD *)buf = 138413058;
    uint64_t v13 = v6;
    __int16 v14 = 2048;
    if (v9) {
      id v10 = @"YES";
    }
    id v15 = v7;
    __int16 v16 = 2048;
    id v17 = v8;
    __int16 v18 = 2112;
    uint64_t v19 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Update for uploadFailure message: topic %@  response %ld  error %ld lastCall %@",  buf,  0x2Au);
  }

  if (os_log_shim_legacy_logging_enabled(v11) && _IDSShouldLog(0LL, @"IDSDelivery"))
  {
    [v3 idsResponseCode];
    [v3 responseCode];
    [v3 lastCall];
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDelivery",  @"Update for uploadFailure message: topic %@  response %ld  error %ld lastCall %@");
  }
}

LABEL_90:
        -[NSMutableSet addObject:](v86, "addObject:", v79);
      }

      unsigned int v72 = v172;
    }

    uint64_t v76 = [obja countByEnumeratingWithState:&v207 objects:v217 count:16];
  }

  while (v76);
LABEL_93:

  __int128 v90 = (unint64_t)-[NSMutableSet count](v170, "count");
  __int16 v91 = (unint64_t)-[NSMutableSet count](v165, "count");
  id v92 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog delivery](&OBJC_CLASS___IDSFoundationLog, "delivery"));
  if (os_log_type_enabled(v92, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v93 = [obja count];
    *(_DWORD *)buf = 138412546;
    v214 = v157;
    v215 = 2048;
    v216 = v93;
    _os_log_impl( (void *)&_mh_execute_header,  v92,  OS_LOG_TYPE_DEFAULT,  "Preparing to send message: %@ looking up %lu people",  buf,  0x16u);
  }

  v94 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableSet description](v157, "description"));
  v95 = (void *)objc_claimAutoreleasedReturnValue([obja description]);
  v96 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableSet description](v170, "description"));
  v202[0] = _NSConcreteStackBlock;
  v202[1] = 3221225472LL;
  v202[2] = sub_1001B999C;
  v202[3] = &unk_1008F8F20;
  v97 = v94;
  v203 = v97;
  __int16 v140 = v95;
  v204 = v140;
  v206 = v90 == 0;
  v98 = v96;
  v205 = v98;
  cut_dispatch_log_queue(v202);
  if (v90 | v91)
  {
    if (v91) {
      v99 = v90 != 0;
    }
    else {
      v99 = 1;
    }
    if (v99 || !a14)
    {
      if (v91) {
        __int128 v107 = a14;
      }
      else {
        __int128 v107 = 1;
      }
      if (v90 != 0 && v107)
      {
        v173[0] = _NSConcreteStackBlock;
        v173[1] = 3221225472LL;
        v173[2] = sub_1001B9A84;
        v173[3] = &unk_1008FD1F0;
        v174 = (NSMutableSet *)obja;
        v193 = a14;
        v175 = v157;
        v189 = v160;
        v176 = self;
        __int128 v108 = v172;
        v177 = v108;
        v190 = v159;
        v178 = v152;
        v179 = v150;
        v180 = v149;
        __int128 v109 = v164;
        v181 = v109;
        v182 = v148;
        objb = v147;
        v183 = objb;
        v184 = v146;
        v194 = a12;
        v195 = a13;
        v196 = a16;
        v197 = a17;
        v198 = a18;
        v185 = v145;
        v192 = a19;
        v199 = a20;
        v186 = v144;
        v200 = BYTE4(v139);
        v187 = v142;
        v191 = v158;
        v188 = v151;
        v201 = a28;
        __int128 v110 = objc_retainBlock(v173);
        __int128 v111 = OSLogHandleForIDSCategory("IDSDelivery");
        __int128 v112 = (os_log_s *)objc_claimAutoreleasedReturnValue(v111);
        if (os_log_type_enabled(v112, OS_LOG_TYPE_DEFAULT))
        {
          __int128 v113 = (NSMutableSet *)(id)objc_claimAutoreleasedReturnValue(-[NSMutableSet allObjects](v170, "allObjects"));
          *(_DWORD *)buf = 138412546;
          v214 = v113;
          v215 = 2112;
          v216 = v109;
          _os_log_impl( (void *)&_mh_execute_header,  v112,  OS_LOG_TYPE_DEFAULT,  "Issuing query for: %@   from: %@",  buf,  0x16u);
        }

        if (os_log_shim_legacy_logging_enabled(v114)
          && _IDSShouldLog(0LL, @"IDSDelivery"))
        {
          __int16 v128 = (NSMutableSet *)objc_claimAutoreleasedReturnValue(-[NSMutableSet allObjects](v170, "allObjects"));
          v129 = v109;
          _IDSLogV(0LL, @"IDSFoundation", @"IDSDelivery", @"Issuing query for: %@   from: %@");
        }

        __int128 v115 = -[IDSPeerIDQueryContext initWithSending:refresh:messaging:resultExpected:preventNewQuery:]( objc_alloc(&OBJC_CLASS___IDSPeerIDQueryContext),  "initWithSending:refresh:messaging:resultExpected:preventNewQuery:",  1LL,  a19 == 1,  1LL,  1LL,  0LL,  v128,  v129);
        __int128 v116 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDeliveryController peerIDManager](self, "peerIDManager"));
        v117 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableSet allObjects](v170, "allObjects"));
        v118 = (void *)objc_claimAutoreleasedReturnValue( +[IDSURI URIWithPrefixedURI:withServiceLoggingHint:]( &OBJC_CLASS___IDSURI,  "URIWithPrefixedURI:withServiceLoggingHint:",  v109,  v108));
        [v116 startQueryForURIs:v117 fromIdentity:objb fromURI:v118 fromService:v108 context:v115 reason:@"MessageSend" completionBlock:v110];

        v100 = v174;
      }

      else
      {
        v119 = OSLogHandleForIDSCategory("IDSDelivery");
        v120 = (os_log_s *)objc_claimAutoreleasedReturnValue(v119);
        if (os_log_type_enabled(v120, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          v214 = v157;
          _os_log_impl( (void *)&_mh_execute_header,  v120,  OS_LOG_TYPE_DEFAULT,  "Tokens are being ignored, failing message {msg: %@}",  buf,  0xCu);
        }

        if (os_log_shim_legacy_logging_enabled(v121)
          && _IDSShouldLog(0LL, @"IDSDelivery"))
        {
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDelivery",  @"Tokens are being ignored, failing message {msg: %@}");
        }

        v122 = objc_alloc(&OBJC_CLASS___NSError);
        v100 = -[NSError initWithDomain:code:userInfo:]( v122,  "initWithDomain:code:userInfo:",  IDSSendErrorDomain,  1LL,  0LL);
        if (v160) {
          v160[2](v160, &__NSArray0__struct);
        }
        if (v159)
        {
          v123 = -[IDSDeliveryContext initWithResponseCode:error:lastCall:]( objc_alloc(&OBJC_CLASS___IDSDeliveryContext),  "initWithResponseCode:error:lastCall:",  1LL,  v100,  1LL);
          -[IDSDeliveryContext setDisplayURIs:](v123, "setDisplayURIs:", obja);
          (*((void (**)(id, IDSDeliveryContext *))v159 + 2))(v159, v123);
        }
      }
    }

    else
    {
      v100 = -[NSMutableSet initWithArray:](objc_alloc(&OBJC_CLASS___NSMutableSet), "initWithArray:", obja);
      -[NSMutableSet minusSet:](v100, "minusSet:", v165);
      v101 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableSet allObjects](v100, "allObjects"));
      v102 = OSLogHandleForIDSCategory("IDSDelivery");
      v103 = (os_log_s *)objc_claimAutoreleasedReturnValue(v102);
      if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v214 = v100;
        _os_log_impl((void *)&_mh_execute_header, v103, OS_LOG_TYPE_DEFAULT, "Found messagable people: %@", buf, 0xCu);
      }

      __int128 v105 = v157;
      __int128 v106 = v172;
      if (os_log_shim_legacy_logging_enabled(v104)
        && _IDSShouldLog(0LL, @"IDSDelivery"))
      {
        __int16 v128 = v100;
        _IDSLogV(0LL, @"IDSFoundation", @"IDSDelivery", @"Found messagable people: %@");
      }

      if ((unint64_t)-[NSMutableSet count](v100, "count", v128) > 1
        || -[NSMutableSet count](v100, "count") == (id)1
        && (__int16 v124 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableSet anyObject](v100, "anyObject")),
            v125 = (void *)objc_claimAutoreleasedReturnValue([v124 prefixedURI]),
            __int16 v126 = [v125 isEqualToString:v164],
            v125,
            v124,
            __int128 v105 = v157,
            __int128 v106 = v172,
            (v126 & 1) == 0))
      {
        -[IDSDeliveryController _emptyMessagesForURIs:service:](self, "_emptyMessagesForURIs:service:", obja, v106);
        LOBYTE(v139) = a28;
        LOBYTE(v137) = BYTE4(v139);
        LOBYTE(v135) = a20;
        BYTE2(v133) = a18;
        BYTE1(v133) = a17;
        LOBYTE(v133) = a16;
        BYTE1(v131) = a13;
        LOBYTE(v131) = a12;
        -[IDSDeliveryController _queueMessage:service:dataToEncrypt:withEncryptedAttributes:fromID:fromShortHandle:fromIdentity:toID:toURIs:originallyToURIs:ktURIVerificationMap:canUseLargePayload:sendOnePerToken:registrationProperties:fakeMessage:alwaysSkipSelf:alwaysIncludeSelf:forceQuery:disallowRefresh:prioritizedTokenList:wantsFirewallDonation:destinationObject:willSendBlock:completionBlock:fromCoalesceQueue:]( self,  "_queueMessage:service:dataToEncrypt:withEncryptedAttributes:fromID:fromShortHandle:fromIdentity:toID:toURIs:or iginallyToURIs:ktURIVerificationMap:canUseLargePayload:sendOnePerToken:registrationProperties:fakeMessage:alwa ysSkipSelf:alwaysIncludeSelf:forceQuery:disallowRefresh:prioritizedTokenList:wantsFirewallDonation:destination Object:willSendBlock:completionBlock:fromCoalesceQueue:",  v105,  v106,  v150,  v149,  v164,  v148,  v147,  v146,  v101,  obja,  v151,  v131,  v145,  v133,  a19,  v135,  v144,  v137,  v142,  v158,  v159,  v139,  v140);
      }

      -[IDSDeliveryController _handleMessagesForURIs:originalURIs:service:fromID:fromCoalesceQueue:withQueryCompletion:]( self,  "_handleMessagesForURIs:originalURIs:service:fromID:fromCoalesceQueue:withQueryCompletion:",  v101,  obja,  v106,  v164,  a28,  v160);
    }
  }

  else
  {
    -[IDSDeliveryController _handleMessagesForURIs:originalURIs:service:fromID:fromCoalesceQueue:withQueryCompletion:]( self,  "_handleMessagesForURIs:originalURIs:service:fromID:fromCoalesceQueue:withQueryCompletion:",  obja,  obja,  v172,  v164,  a28,  v160);
  }

LABEL_133:
  os_activity_scope_leave(&state);
  cut_arc_os_release(&v212);
}

          id v3 = -1LL;
          goto LABEL_91;
        }
      }

      uint64_t v4 = -[NSArray countByEnumeratingWithState:objects:count:]( v2,  "countByEnumeratingWithState:objects:count:",  &v63,  v71,  16LL);
      if (v4) {
        continue;
      }
      break;
    }
  }

        (*((void (**)(id, void, void, BOOL))v20 + 2))(v20, 0LL, 0LL, v39);
        goto LABEL_92;
    }

    goto LABEL_91;
  }

  if (v25 <= 200LL)
  {
    switch(v25)
    {
      case 0:
        goto LABEL_90;
      case 120:
        if (_IMWillLog(@"MessageService", v38))
        {
          uint64_t v51 = v56;
          _IMAlwaysLog(0LL, @"MessageService", @" => OTR un-supported error for messageID: %@");
        }

        if (!v24 || v52)
        {
          uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue( +[IDSEncryptionController sharedInstance]( &OBJC_CLASS___IDSEncryptionController,  "sharedInstance",  v51));
          [v48 logRemoteDecryptionErrorForToken:v59 deviceID:0 forURI:v18 fromURI:v19 forService:v58 messageData:0 type:0];
        }

        goto LABEL_90;
      case 200:
        if (_IMWillLog(@"MessageService", v38))
        {
          uint64_t v51 = v56;
          _IMAlwaysLog(0LL, @"MessageService", @" => Pair decryption failure for messageID: %@");
        }

        if (!v24 || v52)
        {
          unsigned int v42 = (void *)objc_claimAutoreleasedReturnValue( +[IDSEncryptionController sharedInstance]( &OBJC_CLASS___IDSEncryptionController,  "sharedInstance",  v51));
          [v42 logRemoteDecryptionErrorForToken:v59 deviceID:0 forURI:v18 fromURI:v19 forService:v58 messageData:0 type:1];
        }

        goto LABEL_90;
    }

    goto LABEL_91;
  }

  if (v25 > 249LL)
  {
    if (v25 == 250LL)
    {
      if (_IMWillLog(@"MessageService", v38))
      {
        uint64_t v51 = v56;
        _IMAlwaysLog( 0LL,  @"MessageService",  @" => Remote encryption credentials are invalid failure for messageID: %@");
      }

      if (!v24 || v52)
      {
        uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue( +[IDSEncryptionController sharedInstance]( &OBJC_CLASS___IDSEncryptionController,  "sharedInstance",  v51));
        [v49 logRemoteDecryptionErrorForToken:v59 deviceID:0 forURI:v18 fromURI:v19 forService:v58 messageData:0 type:1];
      }

      goto LABEL_90;
    }

    if (v25 == 400LL)
    {
      goto LABEL_90;
    }

    goto LABEL_91;
  }

  if (v25 == 201LL)
  {
    if (_IMWillLog(@"MessageService", v38))
    {
      uint64_t v51 = v56;
      _IMAlwaysLog(0LL, @"MessageService", @" => Pair encryption failure for messageID: %@");
    }

    if (!v24 || v52)
    {
      uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue( +[IDSEncryptionController sharedInstance]( &OBJC_CLASS___IDSEncryptionController,  "sharedInstance",  v51));
      [v47 logRemoteDecryptionErrorForToken:v59 deviceID:0 forURI:v18 fromURI:v19 forService:v58 messageData:0 type:1];
    }

    goto LABEL_90;
  }

  if (v25 != 202LL)
  {
LABEL_91:
    _IMWarn(@"Received unknown/unhandled error type: %d");
    (*((void (**)(id, void, void, BOOL))v20 + 2))(v20, 0LL, 0LL, v39);
    goto LABEL_92;
  }

  if (_IMWillLog(@"MessageService", v38))
  {
    uint64_t v51 = v56;
    _IMAlwaysLog(0LL, @"MessageService", @" => Silient Pair decryption failure for messageID: %@");
  }

  +[IDSDMessageStore deleteIncomingMessageWithGUID:]( &OBJC_CLASS___IDSDMessageStore,  "deleteIncomingMessageWithGUID:",  v56,  v51);
  (*((void (**)(id, void, void, BOOL))v20 + 2))(v20, 0LL, 0LL, v39);
LABEL_92:
}

void sub_1001B9818(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {

    objc_end_catch();
    JUMPOUT(0x1001B93B4LL);
  }

  os_activity_scope_leave((os_activity_scope_state_t)&STACK[0x2C8]);
  cut_arc_os_release(&STACK[0x2D8]);
  _Unwind_Resume(a1);
}

void sub_1001B999C(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog delivery_oversized](&OBJC_CLASS___IDSFoundationLog, "delivery_oversized"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    if (*(_BYTE *)(a1 + 56)) {
      float v5 = @"YES";
    }
    else {
      float v5 = @"NO";
    }
    uint64_t v6 = *(void *)(a1 + 48);
    int v7 = 138413058;
    uint64_t v8 = v3;
    __int16 v9 = 2112;
    uint64_t v10 = v4;
    __int16 v11 = 2112;
    uint64_t v12 = v5;
    __int16 v13 = 2112;
    uint64_t v14 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Message: %@ to be sent to people: %@   (have tokens: %@). People to query %@",  (uint8_t *)&v7,  0x2Au);
  }
}

void sub_1001B9A84(uint64_t a1, void *a2, void *a3, void *a4, void *a5, int a6, void *a7, int a8, void *a9)
{
  id v104 = a2;
  id v105 = a3;
  id v106 = a4;
  id v107 = a5;
  __int128 v109 = a7;
  id v108 = a9;
  __int128 v110 = (NSMutableSet *)*(id *)(a1 + 32);
  uint64_t v16 = OSLogHandleForIDSCategory("IDSDelivery");
  id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v18 = @"NO";
    if (a6) {
      uint64_t v19 = @"YES";
    }
    else {
      uint64_t v19 = @"NO";
    }
    int v20 = *(unsigned __int8 *)(a1 + 184);
    if (a8) {
      id v21 = @"YES";
    }
    else {
      id v21 = @"NO";
    }
    *(_DWORD *)buf = 138412802;
    id v139 = (id)v19;
    __int16 v140 = 2112;
    v141 = v21;
    if (v20) {
      __int16 v18 = @"YES";
    }
    __int16 v142 = 2112;
    v143 = v18;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Query completed: success %@  offline %@  allowPartialSendsToSucceed %@",  buf,  0x20u);
  }

  if (os_log_shim_legacy_logging_enabled(v22) && _IDSShouldLog(0LL, @"IDSDelivery"))
  {
    uint64_t v23 = @"NO";
    if (a6) {
      id v24 = @"YES";
    }
    else {
      id v24 = @"NO";
    }
    if (a8) {
      uint64_t v25 = @"YES";
    }
    else {
      uint64_t v25 = @"NO";
    }
    if (*(_BYTE *)(a1 + 184)) {
      uint64_t v23 = @"YES";
    }
    v95 = v25;
    v97 = v23;
    __int16 v93 = v24;
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDelivery",  @"Query completed: success %@  offline %@  allowPartialSendsToSucceed %@");
  }

  uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "expirationDate", v93, v95, v97));
  if (v26)
  {
    id v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) expirationDate]);
    [v27 timeIntervalSinceNow];
    BOOL v29 = v28 < -5.0;

    if (v29)
    {
      uint64_t v30 = *(void *)(a1 + 152);
      if (v30) {
        (*(void (**)(uint64_t, void *))(v30 + 16))(v30, &__NSArray0__struct);
      }
      [*(id *)(a1 + 48) _discardMessage:*(void *)(a1 + 40) forURIs:*(void *)(a1 + 32) service:*(void *)(a1 + 56)];
      uint64_t v31 = OSLogHandleForIDSCategory("IDSDelivery");
      __int16 v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
      {
        id v33 = *(void **)(a1 + 32);
        *(_DWORD *)buf = 138412290;
        id v139 = v33;
        _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "Query completed but message for IDs %@ has already expired. Failing.",  buf,  0xCu);
      }

      if (os_log_shim_legacy_logging_enabled(v34)
        && _IDSShouldLog(0LL, @"IDSDelivery"))
      {
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDelivery",  @"Query completed but message for IDs %@ has already expired. Failing.");
      }

      uint64_t v35 = objc_alloc(&OBJC_CLASS___NSError);
      uint64_t v36 = -[NSError initWithDomain:code:userInfo:](v35, "initWithDomain:code:userInfo:", IDSSendErrorDomain, 2LL, 0LL);
      if (*(void *)(a1 + 160))
      {
        id v37 = -[IDSDeliveryContext initWithResponseCode:error:lastCall:]( objc_alloc(&OBJC_CLASS___IDSDeliveryContext),  "initWithResponseCode:error:lastCall:",  2LL,  v36,  1LL);
        -[IDSDeliveryContext setDisplayURIs:](v37, "setDisplayURIs:", v110);
        (*(void (**)(void))(*(void *)(a1 + 160) + 16LL))(*(void *)(a1 + 160));
      }

LABEL_91:
      uint64_t v62 = v110;
      goto LABEL_92;
    }
  }

  [*(id *)(a1 + 40) timeout];
  BOOL v39 = v38 <= 300.0;
  [*(id *)(a1 + 64) timeIntervalSinceNow];
  double v41 = v40;
  [*(id *)(a1 + 40) timeout];
  if (((a8 ^ 1 | a6 | v39) & 1) == 0 && fabs(v41) <= v42)
  {
    uint64_t v43 = OSLogHandleForIDSCategory("IDSDelivery");
    uint64_t v44 = (os_log_s *)objc_claimAutoreleasedReturnValue(v43);
    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
    {
      id v45 = [*(id *)(*(void *)(a1 + 48) + 24) count];
      *(_DWORD *)buf = 134217984;
      id v139 = v45;
      _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEFAULT,  "Query failed because the device is offline. Enqueuing for the return of networking since we have timeout time le ft. Number of offline sends enqueued ahead of us: %lu.",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v46) && _IDSShouldLog(0LL, @"IDSDelivery"))
    {
      [*(id *)(*(void *)(a1 + 48) + 24) count];
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDelivery",  @"Query failed because the device is offline. Enqueuing for the return of networking since we have timeout time left. Number of offline sends enqueued ahead of us: %lu.");
    }

    uint64_t v47 = *(void *)(a1 + 48);
    if (!*(void *)(v47 + 24))
    {
      uint64_t v48 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      uint64_t v49 = *(void *)(a1 + 48);
      uint64_t v50 = *(void **)(v49 + 24);
      *(void *)(v49 + 24) = v48;

      uint64_t v47 = *(void *)(a1 + 48);
    }

    v118[0] = _NSConcreteStackBlock;
    v118[1] = 3221225472LL;
    v118[2] = sub_1001BA7A0;
    v118[3] = &unk_1008FD1C8;
    v118[4] = v47;
    id v119 = *(id *)(a1 + 40);
    id v120 = *(id *)(a1 + 72);
    id v121 = *(id *)(a1 + 80);
    id v122 = *(id *)(a1 + 56);
    id v123 = *(id *)(a1 + 88);
    id v124 = *(id *)(a1 + 96);
    id v125 = *(id *)(a1 + 104);
    id v126 = *(id *)(a1 + 112);
    id v127 = *(id *)(a1 + 32);
    BYTE4(v51) = *(_BYTE *)(a1 + 185);
    char v103 = *(_BYTE *)(a1 + 184);
    LODWORD(v51) = HIDWORD(v51);
    BYTE1(v51) = *(_BYTE *)(a1 + 186);
    uint64_t v111 = v51;
    id v52 = *(id *)(a1 + 120);
    char v53 = *(_BYTE *)(a1 + 188);
    char v54 = *(_BYTE *)(a1 + 189);
    uint64_t v55 = *(void *)(a1 + 176);
    id v128 = v52;
    uint64_t v135 = v55;
    uint64_t v56 = v111;
    BYTE2(v56) = v103;
    BYTE3(v56) = *(_BYTE *)(a1 + 187);
    BYTE4(v56) = v53;
    BYTE5(v56) = v54;
    BYTE6(v56) = *(_BYTE *)(a1 + 190);
    uint64_t v112 = v56;
    id v129 = *(id *)(a1 + 128);
    uint64_t v57 = v112;
    HIBYTE(v57) = *(_BYTE *)(a1 + 191);
    uint64_t v136 = v57;
    id v130 = *(id *)(a1 + 136);
    id v133 = *(id *)(a1 + 168);
    id v134 = *(id *)(a1 + 160);
    id v131 = *(id *)(a1 + 64);
    id v132 = *(id *)(a1 + 144);
    id v58 = objc_retainBlock(v118);
    id v59 = [v58 copy];

    uint64_t v60 = *(void **)(*(void *)(a1 + 48) + 24LL);
    id v61 = objc_retainBlock(v59);
    [v60 addObject:v61];

    goto LABEL_91;
  }

  if ((a6 & 1) == 0)
  {
    if (*(_BYTE *)(a1 + 184))
    {
      __int128 v113 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
      __int128 v116 = 0u;
      __int128 v117 = 0u;
      __int128 v114 = 0u;
      __int128 v115 = 0u;
      id v63 = *(id *)(a1 + 32);
      id v64 = [v63 countByEnumeratingWithState:&v114 objects:v137 count:16];
      if (v64)
      {
        uint64_t v65 = *(void *)v115;
        do
        {
          uint64_t v66 = 0LL;
          do
          {
            if (*(void *)v115 != v65) {
              objc_enumerationMutation(v63);
            }
            uint64_t v67 = *(void *)(*((void *)&v114 + 1) + 8LL * (void)v66);
            id v68 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) peerIDManager]);
            id v69 = (void *)objc_claimAutoreleasedReturnValue( +[IDSURI URIWithPrefixedURI:withServiceLoggingHint:]( &OBJC_CLASS___IDSURI,  "URIWithPrefixedURI:withServiceLoggingHint:",  *(void *)(a1 + 88),  *(void *)(a1 + 56)));
            unsigned int v70 = [v68 hasPeerTokensForURI:v67 fromURI:v69 service:*(void *)(a1 + 56)];

            if (v70) {
              -[NSMutableSet addObject:](v113, "addObject:", v67);
            }
            uint64_t v66 = (char *)v66 + 1;
          }

          while (v64 != v66);
          id v64 = [v63 countByEnumeratingWithState:&v114 objects:v137 count:16];
        }

        while (v64);
      }

      uint64_t v71 = OSLogHandleForIDSCategory("IDSDelivery");
      unsigned int v72 = (os_log_s *)objc_claimAutoreleasedReturnValue(v71);
      if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        id v139 = v113;
        _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEFAULT, "Found messagable people: %@", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled(v73)
        && _IDSShouldLog(0LL, @"IDSDelivery"))
      {
        v94 = v113;
        _IDSLogV(0LL, @"IDSFoundation", @"IDSDelivery", @"Found messagable people: %@");
      }

      if ((unint64_t)-[NSMutableSet count](v113, "count", v94) > 1
        || -[NSMutableSet count](v113, "count") == (id)1
        && (id v79 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableSet anyObject](v113, "anyObject")),
            uint64_t v80 = (void *)objc_claimAutoreleasedReturnValue([v79 prefixedURI]),
            unsigned __int8 v81 = [v80 isEqualToString:*(void *)(a1 + 88)],
            v80,
            v79,
            (v81 & 1) == 0))
      {
        [*(id *)(a1 + 48) _emptyMessagesForURIs:*(void *)(a1 + 32) service:*(void *)(a1 + 56)];
        uint64_t v62 = (NSMutableSet *)objc_claimAutoreleasedReturnValue(-[NSMutableSet allObjects](v113, "allObjects"));

        LOBYTE(v102) = *(_BYTE *)(a1 + 192);
        LOBYTE(v101) = *(_BYTE *)(a1 + 191);
        LOBYTE(v100) = *(_BYTE *)(a1 + 190);
        *(_WORD *)((char *)&v99 + 1) = *(_WORD *)(a1 + 188);
        LOBYTE(v99) = *(_BYTE *)(a1 + 187);
        LOWORD(v9_Block_object_dispose(va, 8) = *(_WORD *)(a1 + 185);
        objc_msgSend( *(id *)(a1 + 48),  "_queueMessage:service:dataToEncrypt:withEncryptedAttributes:fromID:fromShortHandle:fromIdentity:toID:toURIs:or iginallyToURIs:ktURIVerificationMap:canUseLargePayload:sendOnePerToken:registrationProperties:fakeMessage:alwa ysSkipSelf:alwaysIncludeSelf:forceQuery:disallowRefresh:prioritizedTokenList:wantsFirewallDonation:destination Object:willSendBlock:completionBlock:fromCoalesceQueue:",  *(void *)(a1 + 40),  *(void *)(a1 + 56),  *(void *)(a1 + 72),  *(void *)(a1 + 80),  *(void *)(a1 + 88),  *(void *)(a1 + 96),  *(void *)(a1 + 104),  *(void *)(a1 + 112),  v62,  *(void *)(a1 + 32),  *(void *)(a1 + 144),  v98,  *(void *)(a1 + 120),  v99,  *(void *)(a1 + 176),  v100,  *(void *)(a1 + 128),  v101,  *(void *)(a1 + 136),  *(void *)(a1 + 168),  *(void *)(a1 + 160),  v102);

        goto LABEL_63;
      }
    }

    uint64_t v82 = OSLogHandleForIDSCategory("IDSDelivery");
    id v83 = (os_log_s *)objc_claimAutoreleasedReturnValue(v82);
    if (os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
    {
      __int128 v84 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 138412546;
      id v139 = v84;
      __int16 v140 = 2112;
      v141 = v109;
      _os_log_impl( (void *)&_mh_execute_header,  v83,  OS_LOG_TYPE_DEFAULT,  "Peer ID manager failed lookup for IDs: %@   (Errors: %@)",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v85) && _IDSShouldLog(0LL, @"IDSDelivery"))
    {
      v94 = *(NSMutableSet **)(a1 + 32);
      v96 = v109;
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDelivery",  @"Peer ID manager failed lookup for IDs: %@   (Errors: %@)");
    }

    uint64_t v86 = *(void *)(a1 + 152);
    if (v86) {
      (*(void (**)(uint64_t, void *))(v86 + 16))(v86, &__NSArray0__struct);
    }
    objc_msgSend( *(id *)(a1 + 48),  "_emptyMessagesForURIs:service:",  *(void *)(a1 + 32),  *(void *)(a1 + 56),  v94,  v96);
    if ([*(id *)(a1 + 32) count])
    {
      id v87 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) lastObject]);
      __int128 v88 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString objectForKey:](v109, "objectForKey:", v87));

      if (v88) {
        __int128 v89 = -[NSDictionary initWithObjectsAndKeys:]( objc_alloc(&OBJC_CLASS___NSDictionary),  "initWithObjectsAndKeys:",  v88,  NSUnderlyingErrorKey,  0LL);
      }
      else {
        __int128 v89 = 0LL;
      }
    }

    else
    {
      __int128 v89 = 0LL;
      __int128 v88 = 0LL;
    }

    __int128 v90 = objc_alloc(&OBJC_CLASS___NSError);
    __int16 v91 = -[NSError initWithDomain:code:userInfo:](v90, "initWithDomain:code:userInfo:", IDSSendErrorDomain, 1LL, v89);
    if (*(void *)(a1 + 160))
    {
      id v92 = -[IDSDeliveryContext initWithResponseCode:error:lastCall:]( objc_alloc(&OBJC_CLASS___IDSDeliveryContext),  "initWithResponseCode:error:lastCall:",  1LL,  v91,  1LL);
      -[IDSDeliveryContext setDisplayURIs:](v92, "setDisplayURIs:", v110);
      (*(void (**)(void))(*(void *)(a1 + 160) + 16LL))();
    }

    goto LABEL_91;
  }

  uint64_t v62 = v110;
LABEL_63:
  uint64_t v74 = OSLogHandleForIDSCategory("IDSDelivery");
  __int128 v75 = (os_log_s *)objc_claimAutoreleasedReturnValue(v74);
  if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v76 = v62;
    if (!v62) {
      uint64_t v76 = *(NSMutableSet **)(a1 + 32);
    }
    *(_DWORD *)buf = 138412290;
    id v139 = v76;
    _os_log_impl( (void *)&_mh_execute_header,  v75,  OS_LOG_TYPE_DEFAULT,  "Peer ID manager succeeded lookup for IDs: %@",  buf,  0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v77) && _IDSShouldLog(0LL, @"IDSDelivery"))
  {
    __int16 v78 = v62;
    if (!v62) {
      __int16 v78 = *(NSMutableSet **)(a1 + 32);
    }
    v94 = v78;
    _IDSLogV(0LL, @"IDSFoundation", @"IDSDelivery", @"Peer ID manager succeeded lookup for IDs: %@");
  }

  objc_msgSend( *(id *)(a1 + 48),  "_handleMessagesForURIs:originalURIs:service:fromID:fromCoalesceQueue:withQueryCompletion:",  v62,  *(void *)(a1 + 32),  *(void *)(a1 + 56),  *(void *)(a1 + 88),  *(unsigned __int8 *)(a1 + 192),  *(void *)(a1 + 152),  v94);
LABEL_92:
}

id sub_1001BA7A0(uint64_t a1)
{
  LOBYTE(v6) = 0;
  LOBYTE(v5) = *(_BYTE *)(a1 + 183);
  LOBYTE(v4) = *(_BYTE *)(a1 + 182);
  *(_WORD *)((char *)&v3 + 1) = *(_WORD *)(a1 + 180);
  LOBYTE(v3) = *(_BYTE *)(a1 + 179);
  *(_WORD *)((char *)&v2 + 1) = *(_WORD *)(a1 + 177);
  LOBYTE(v2) = *(_BYTE *)(a1 + 176);
  return objc_msgSend( *(id *)(a1 + 32),  "_sendMessage:dataToEncrypt:withEncryptedAttributes:onService:fromID:fromShortHandle:fromIdentity:toID:toURIs: canUseLargePayload:sendOnePerToken:allowPartialSendsToSucceed:registrationProperties:fakeMessage:alwaysSkipSe lf:alwaysIncludeSelf:forceQuery:disallowRefresh:prioritizedTokenList:wantsFirewallDonation:destinationObject: willSendBlock:completionBlock:firstAttemptDate:ktURIVerificationMap:fromCoalesceQueue:withQueryCompletion:",  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void *)(a1 + 64),  *(void *)(a1 + 72),  *(void *)(a1 + 80),  *(void *)(a1 + 88),  *(void *)(a1 + 96),  *(void *)(a1 + 104),  v2,  *(void *)(a1 + 112),  v3,  *(void *)(a1 + 168),  v4,  *(void *)(a1 + 120),  v5,  *(void *)(a1 + 128),  *(void *)(a1 + 152),  *(void *)(a1 + 160),  *(void *)(a1 + 136),  *(void *)(a1 + 144),  v6,  &stru_1008FD1A0);
}

void sub_1001BB44C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (id)objc_claimAutoreleasedReturnValue([a2 pushAckTimestamp]);
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

uint64_t sub_1001BBAF8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001BBF04(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  id v7 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v13;
    do
    {
      for (i = 0LL; i != v8; i = (char *)i + 1)
      {
        if (*(void *)v13 != v9) {
          objc_enumerationMutation(v5);
        }
        [*(id *)(a1 + 32) setObject:v6 forKey:*(void *)(*((void *)&v12 + 1) + 8 * (void)i)];
      }

      id v8 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }

    while (v8);
  }

  if (v5) {
    __int16 v11 = v5;
  }
  else {
    __int16 v11 = &__NSArray0__struct;
  }
  [*(id *)(a1 + 40) fulfillWithValue:v11];
}

void sub_1001BC028(void *a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 value]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringGUID](&OBJC_CLASS___NSString, "stringGUID"));
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog delivery](&OBJC_CLASS___IDSFoundationLog, "delivery"));
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 138412802;
    id v8 = v3;
    __int16 v9 = 2048;
    id v10 = [v3 count];
    __int16 v11 = 2112;
    __int128 v12 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Pipelines done processing all fanouts %@ count %ld for mmlGUID %@",  (uint8_t *)&v7,  0x20u);
  }

  id v6 = -[IDSFanoutSender initWithGUID:service:messageDelivery:completionActivity:coalesceQueueManager:]( objc_alloc(&OBJC_CLASS___IDSFanoutSender),  "initWithGUID:service:messageDelivery:completionActivity:coalesceQueueManager:",  v4,  a1[4],  *(void *)(a1[5] + 8LL),  a1[6],  *(void *)(a1[5] + 40LL));
  -[IDSFanoutSender sendMMLs:guidToDeliveryAcknowledgementBlock:guidToSendCompletionBlock:forService:sendMode:messageQueue:]( v6,  "sendMMLs:guidToDeliveryAcknowledgementBlock:guidToSendCompletionBlock:forService:sendMode:messageQueue:",  a1[7],  a1[8],  a1[9],  a1[4],  a1[10],  *(void *)(a1[5] + 16LL));
}

void sub_1001BC218(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v33 = a2;
  os_activity_t v6 = _os_activity_create( (void *)&_mh_execute_header,  "All sends complete",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
  uint64_t v7 = IDSDeliveryMessageKey;
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:IDSDeliveryMessageKey]);
  uint64_t v9 = objc_claimAutoreleasedReturnValue([v8 messageID]);

  id v10 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  __int16 v11 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  __int128 v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:v7]);
  __int128 v13 = (void *)objc_claimAutoreleasedReturnValue([v12 deliveryAcknowledgementBlock]);

  __int128 v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:IDSDeliveryCompletionBlockKey]);
  id v15 = objc_retainBlock(v13);
  -[NSMutableDictionary setObject:forKey:](v10, "setObject:forKey:", v15, v9);

  id v16 = objc_retainBlock(v14);
  -[NSMutableDictionary setObject:forKey:](v11, "setObject:forKey:", v16, v9);

  uint64_t v34 = (void *)v9;
  os_activity_t v35 = v6;
  id v17 = -[IDSFanoutSender initWithGUID:service:messageDelivery:completionActivity:coalesceQueueManager:]( objc_alloc(&OBJC_CLASS___IDSFanoutSender),  "initWithGUID:service:messageDelivery:completionActivity:coalesceQueueManager:",  v9,  *(void *)(a1 + 40),  *(void *)(*(void *)(a1 + 48) + 8LL),  v6,  *(void *)(*(void *)(a1 + 48) + 40LL));
  -[IDSFanoutSender sendFanouts:guidToDeliveryAcknowledgementBlock:guidToSendCompletionBlock:forURIs:messageQueue:]( v17,  "sendFanouts:guidToDeliveryAcknowledgementBlock:guidToSendCompletionBlock:forURIs:messageQueue:",  v33,  v10,  v11,  v5,  *(void *)(*(void *)(a1 + 48) + 16LL));

  if (_os_feature_enabled_impl("IDS", "CarrierPigeon"))
  {
    uint64_t v19 = v13;
    uint64_t v20 = objc_opt_class(&OBJC_CLASS___NSNumber, v18);
    id v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:v7]);
    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v21 messageBody]);
    id v23 = sub_1001BC53C(v20, v22, IDSCommandKey);
    id v24 = (void *)objc_claimAutoreleasedReturnValue(v23);

    if ([*(id *)(a1 + 40) isEqualToString:IDSServiceNameiMessage]
      && [v24 unsignedIntegerValue] == (id)100)
    {
      uint64_t v25 = objc_alloc(&OBJC_CLASS___IDSURI);
      uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:IDSDeliveryFromIDKey]);
      id v27 = -[IDSURI initWithPrefixedURI:](v25, "initWithPrefixedURI:", v26);

      uint64_t v30 = im_primary_queue(v28, v29);
      uint64_t v31 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v30);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_1001BC5E4;
      block[3] = &unk_1008F5F58;
      void block[4] = *(void *)(a1 + 48);
      id v37 = v5;
      double v38 = v27;
      __int16 v32 = v27;
      dispatch_async(v31, block);
    }

    __int128 v13 = v19;
  }
}

id sub_1001BC53C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  os_activity_t v6 = (void *)objc_claimAutoreleasedReturnValue([a2 objectForKey:v5]);
  if ((objc_opt_isKindOfClass(v6, a1) & 1) != 0)
  {
    id v7 = v6;
  }

  else
  {
    if (v6)
    {
      id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT)) {
        sub_1006A01D0((uint64_t)v5, a1, v8);
      }
    }

    id v7 = 0LL;
  }

  return v7;
}

void sub_1001BC5E4(void *a1)
{
  uint64_t v2 = a1[5];
  id v3 = *(void **)(a1[4] + 48LL);
  uint64_t v4 = a1[6];
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[IDSSenderKeySendContext iMessageSend]( &OBJC_CLASS____TtC17identityservicesd23IDSSenderKeySendContext,  "iMessageSend"));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _DWORD v6[2] = sub_1001BC6A8;
  v6[3] = &unk_1008F8800;
  id v7 = (id)a1[5];
  id v8 = (id)a1[6];
  [v3 generateAndSendKeyIfNeededToURIs:v2 fromURI:v4 context:v5 completion:v6];
}

uint64_t sub_1001BC6A8(uint64_t a1, int a2)
{
  uint64_t v4 = OSLogHandleForIDSCategory("IDSDaemon_SenderKey");
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    os_activity_t v6 = @"NO";
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = *(void *)(a1 + 40);
    if (a2) {
      os_activity_t v6 = @"YES";
    }
    *(_DWORD *)buf = 138412802;
    __int128 v12 = v6;
    __int16 v13 = 2112;
    uint64_t v14 = v7;
    __int16 v15 = 2112;
    uint64_t v16 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Did trigger generateAndSendKeyIfNeededToURIs: %@ { toURIs: %@ fromURI: %@ }",  buf,  0x20u);
  }

  uint64_t result = os_log_shim_legacy_logging_enabled(v9);
  if ((_DWORD)result)
  {
    uint64_t result = _IDSShouldLog(0LL, @"IDSDaemon_SenderKey");
    if ((_DWORD)result) {
      return _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon_SenderKey",  @"Did trigger generateAndSendKeyIfNeededToURIs: %@ { toURIs: %@ fromURI: %@ }");
    }
  }

  return result;
}

void sub_1001BCC84(_Unwind_Exception *a1)
{
}

void sub_1001BCCA4(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog delivery_oversized](&OBJC_CLASS___IDSFoundationLog, "delivery_oversized"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    int v5 = 138412546;
    uint64_t v6 = v3;
    __int16 v7 = 2112;
    uint64_t v8 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Guid %@ full pipeline input: %@",  (uint8_t *)&v5,  0x16u);
  }
}

uint64_t sub_1001BCD5C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1001BCD6C(uint64_t a1)
{
}

void sub_1001BCD74(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (_os_feature_enabled_impl("IDS", "GFTPerfSignpostCollection")
    && IDSCommandIsGroupSessionCommand(*(void *)(a1 + 32)))
  {
    kdebug_trace(722010436, [*(id *)(a1 + 32) integerValue], 0, 0, 0);
  }

  uint64_t v4 = &IMInsertBoolsToXPCDictionary_ptr;
  if ([v3 state] == (id)1)
  {
    int v5 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 userInfo]);
    id v7 = [v6 mutableCopy];

    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKey:@"IDSPipelineParameter"]);
    [v7 removeObjectForKey:@"IDSPipelineParameter"];
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 guid]);
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v8 endpoints]);
    unsigned int v31 = [v8 usedMMCS];
    id v30 = [v5 code];
    __int16 v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog delivery](&OBJC_CLASS___IDSFoundationLog, "delivery"));
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      os_activity_t v35 = v9;
      __int16 v36 = 2112;
      id v37 = v5;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "GUID %@ Failed with error: %@", buf, 0x16u);
    }

    if ([v5 code] == (id)4)
    {
      __int128 v12 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKey:@"MMCSUploadErrorKey"]);
      if (v12)
      {
        [v7 removeObjectForKey:@"MMCSUploadErrorKey"];
        __int16 v13 = -[IDSServerMessage initWithPayload:command:]( objc_alloc(&OBJC_CLASS___IDSServerMessage),  "initWithPayload:command:",  v12,  &off_100947440);
        uint64_t v14 = *(void *)(a1 + 48);
        uint64_t v29 = *(void **)(a1 + 40);
        v32[0] = _NSConcreteStackBlock;
        v32[1] = 3221225472LL;
        v32[2] = sub_1001BD204;
        v32[3] = &unk_1008F8A50;
        id v33 = v9;
        [v29 sendIDSMessage:v13 service:0 topic:v14 completionBlock:v32];
      }
    }

    __int16 v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "domain", v29));
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( NSError,  "errorWithDomain:code:userInfo:",  v15,  [v5 code],  v7));

    id v17 = -[IDSDeliveryContext initWithResponseCode:error:lastCall:]( [IDSDeliveryContext alloc],  "initWithResponseCode:error:lastCall:",  [v16 code],  v16,  1);
    -[IDSDeliveryContext setDisplayURIs:](v17, "setDisplayURIs:", *(void *)(a1 + 56));
    uint64_t v18 = *(void *)(a1 + 72);
    if (v18) {
      (*(void (**)(uint64_t, IDSDeliveryContext *))(v18 + 16))(v18, v17);
    }

    uint64_t v4 = &IMInsertBoolsToXPCDictionary_ptr;
    id v19 = (id)v31;
    id v20 = v30;
  }

  else
  {
    uint64_t v21 = objc_claimAutoreleasedReturnValue([v3 value]);
    uint64_t v22 = *(void *)(*(void *)(a1 + 88) + 8LL);
    id v23 = *(void **)(v22 + 40);
    *(void *)(v22 + 40) = v21;

    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40) guid]);
    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40) endpoints]);
    id v19 = [*(id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40) usedMMCS];
    id v20 = 0LL;
  }

  id v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  objc_msgSend( *(id *)(a1 + 40),  "sendRTCMetricWithStartDate:endDate:endpointCount:usedPipeline:usedMMCS:responseCode:",  *(void *)(a1 + 64),  v24,  objc_msgSend(v10, "count"),  1,  v19,  v20);
  uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue([v4[219] delivery]);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    os_activity_t v35 = v9;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Pipeline done with all fanouts %@", buf, 0xCu);
  }

  uint64_t v26 = *(void *)(a1 + 80);
  id v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40) aggregateMessages]);
  uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40) uris]);
  (*(void (**)(uint64_t, void *, void *))(v26 + 16))(v26, v27, v28);
}

void sub_1001BD204(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog delivery](&OBJC_CLASS___IDSFoundationLog, "delivery"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    id v6 = [v3 idsResponseCode];
    id v7 = [v3 responseCode];
    unsigned int v8 = [v3 lastCall];
    uint64_t v9 = @"NO";
    int v10 = 138413058;
    uint64_t v11 = v5;
    __int16 v12 = 2048;
    if (v8) {
      uint64_t v9 = @"YES";
    }
    id v13 = v6;
    __int16 v14 = 2048;
    id v15 = v7;
    __int16 v16 = 2112;
    id v17 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "GUID %@ Upload failure metric sent with response: %ld error: %ld lastCall: %@",  (uint8_t *)&v10,  0x2Au);
  }
}

id sub_1001BE008(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) fulfillWithValue:a2];
}

void sub_1001BE014(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 value]);
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  id v5 = v3;
  id v6 = [v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v12;
    do
    {
      for (i = 0LL; i != v7; i = (char *)i + 1)
      {
        if (*(void *)v12 != v8) {
          objc_enumerationMutation(v5);
        }
        int v10 = *(void **)(*((void *)&v11 + 1) + 8LL * (void)i);
        if (objc_msgSend(v10, "count", (void)v11)) {
          -[NSMutableArray addObjectsFromArray:](v4, "addObjectsFromArray:", v10);
        }
      }

      id v7 = [v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }

    while (v7);
  }

  [*(id *)(a1 + 32) _pipelinesHandleMessagesToCoalesce:v4 forService:*(void *)(a1 + 40) sendMode:*(void *)(a1 + 48)];
}

void sub_1001BEBE0(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___IDSDRegistrationListener);
  uint64_t v2 = (void *)qword_1009BED88;
  qword_1009BED88 = (uint64_t)v1;
}

void sub_1001BF094( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1001BF0AC(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 40) + 8LL);
  if (!*(_BYTE *)(v1 + 24))
  {
    *(_BYTE *)(v1 + 24) = 1;
    return (*(uint64_t (**)(void))(*(void *)(result + 32) + 16LL))();
  }

  return result;
}

uint64_t sub_1001BFCFC()
{
  uint64_t result = _os_feature_enabled_impl("IDS", "NewIDSBAAProtocol");
  if ((_DWORD)result) {
    return IDSIsVirtualMachine();
  }
  return result;
}

uint64_t sub_1001BFD2C(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(a2 + 4LL * (result >> 5)) |= 1 << result;
  return result;
}

uint64_t sub_1001BFD48(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(a2 + 4LL * (result >> 5)) &= ~(1 << result);
  return result;
}

uint64_t sub_1001BFD64(unsigned int a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 4LL * (a1 >> 5)) & (1 << a1);
}

void sub_1001BFD7C(void *a1)
{
}

void sub_1001C01E8(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___IDSUTunDeliveryController);
  uint64_t v2 = (void *)qword_1009BED98;
  qword_1009BED98 = (uint64_t)v1;
}

uint64_t sub_1001C0A34(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _copyPairedDevice];
  uint64_t v3 = OSLogHandleForTransportCategory("Sysdiagnose");
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v2 identifier]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v2 btUUID]);
    else {
      id v7 = @"NO";
    }
    else {
      uint64_t v8 = @"NO";
    }
    unsigned int v9 = [*(id *)(a1 + 32) isTerminusNearby];
    unsigned int v10 = [*(id *)(a1 + 32) isTerminusConnected];
    if (v9) {
      __int128 v11 = @"YES";
    }
    else {
      __int128 v11 = @"NO";
    }
    *(_DWORD *)buf = 138413570;
    if (v10) {
      __int128 v12 = @"YES";
    }
    else {
      __int128 v12 = @"NO";
    }
    uint64_t v29 = v5;
    __int16 v30 = 2112;
    unsigned int v31 = v6;
    __int16 v32 = 2112;
    id v33 = v7;
    __int16 v34 = 2112;
    os_activity_t v35 = v8;
    __int16 v36 = 2112;
    id v37 = v11;
    __int16 v38 = 2112;
    BOOL v39 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Device %@ cbuuid %@.  Is IDS nearby? %@ Connected? %@. Is terminus nearby? %@ Connected? %@ ",  buf,  0x3Eu);
  }

  uint64_t v14 = os_log_shim_legacy_logging_enabled(v13);
  if ((_DWORD)v14 && _IDSShouldLogTransport(v14))
  {
    id v15 = (void *)objc_claimAutoreleasedReturnValue([v2 identifier]);
    __int16 v16 = (void *)objc_claimAutoreleasedReturnValue([v2 btUUID]);
    id v17 = (id *)(a1 + 32);
    else {
      uint64_t v18 = @"NO";
    }
    else {
      id v19 = @"NO";
    }
    else {
      id v20 = @"NO";
    }
    else {
      uint64_t v21 = @"NO";
    }
    id v27 = v21;
    _IDSLogTransport( @"Sysdiagnose",  @"IDS",  @"Device %@ cbuuid %@.  Is IDS nearby? %@ Connected? %@. Is terminus nearby? %@ Connected? %@ ");

    if (_IDSShouldLog(0LL, @"Sysdiagnose"))
    {
      uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "identifier", v15, v16, v18, v19, v20, v27));
      id v23 = (void *)objc_claimAutoreleasedReturnValue([v2 btUUID]);
      uint64_t v25 = *(void **)(a1 + 32);
      id v24 = (id *)(a1 + 32);
      [v25 defaultPeerIsNearby];
      [*v24 defaultPeerIsConnected];
      [*v24 isTerminusNearby];
      [*v24 isTerminusConnected];
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Sysdiagnose",  @"Device %@ cbuuid %@.  Is IDS nearby? %@ Connected? %@. Is terminus nearby? %@ Connected? %@ ");
    }
  }

  return 0LL;
}

void sub_1001C0E58(id a1, id a2, IDSUTunPeer *a3, BOOL *a4)
{
}

id sub_1001C1644(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) deviceWithUniqueID:a2 updatedUUID:a3];
}

void sub_1001C2B44(uint64_t a1)
{
  id v59 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) hashForString:*(void *)(a1 + 40)]);
  state.opaque[1] = 0xAAAAAAAAAAAAAAAALL;
  __int128 v89 = _os_activity_create( (void *)&_mh_execute_header,  "UTUN sendData",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[0] = 0xAAAAAAAAAAAAAAAALL;
  os_activity_scope_enter(v89, &state);
  uint64_t v2 = OSLogHandleForIDSCategory("GUIDTRACE");
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 40);
    uint64_t v4 = *(const __CFString **)(a1 + 48);
    *(_DWORD *)buf = 138412546;
    __int16 v91 = v4;
    __int16 v92 = 2112;
    *(void *)__int16 v93 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "OUTGOING-UTUN_DELIVERY:%@ SERVICE:%@",  buf,  0x16u);
  }

  if (os_log_shim_legacy_logging_enabled(v6) && _IDSShouldLog(0LL, @"GUIDTRACE"))
  {
    uint64_t v50 = *(void *)(a1 + 48);
    uint64_t v51 = *(void *)(a1 + 40);
    _IDSLogV(0LL, @"IDSFoundation", @"GUIDTRACE", @"OUTGOING-UTUN_DELIVERY:%@ SERVICE:%@");
  }

  uint64_t v7 = OSLogHandleForTransportCategory("Delivery");
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1 + 192);
    unsigned int v10 = @"Sync";
    if (v9 == 200) {
      unsigned int v10 = @"Default";
    }
    if (v9 == 300) {
      __int128 v11 = @"URGENT";
    }
    else {
      __int128 v11 = v10;
    }
    uint64_t v56 = v11;
    unsigned int v55 = objc_msgSend(*(id *)(a1 + 56), "length", v50, v51);
    __int128 v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) data]);
    unsigned int v13 = [v12 length];
    if (*(_BYTE *)(a1 + 212)) {
      uint64_t v14 = @"YES";
    }
    else {
      uint64_t v14 = @"NO";
    }
    uint64_t v16 = *(void *)(a1 + 40);
    uint64_t v15 = *(void *)(a1 + 48);
    uint64_t v17 = *(void *)(a1 + 72);
    uint64_t v18 = *(void *)(a1 + 80);
    id v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [*(id *)(a1 + 88) count]));
    *(_DWORD *)buf = 138545410;
    __int16 v91 = v56;
    __int16 v92 = 1024;
    *(_DWORD *)__int16 v93 = v13 + v55;
    *(_WORD *)&v93[4] = 2114;
    *(void *)&v93[6] = v15;
    __int16 v94 = 2112;
    uint64_t v95 = v17;
    __int16 v96 = 2112;
    v97 = v14;
    __int16 v98 = 2114;
    uint64_t v99 = v16;
    __int16 v100 = 2114;
    uint64_t v101 = v59;
    __int16 v102 = 2112;
    uint64_t v103 = v18;
    __int16 v104 = 2114;
    id v105 = v19;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "UTUN request to send %{public}@ priority local message payload of data size: %d  guid: %{public}@  expirationDate %@ enforceRemoteTimeout %@ for topic: %{public}@:%{public}@ and command %@ to deviceIDs (count: %{public}@)",  buf,  0x58u);
  }

  uint64_t v21 = os_log_shim_legacy_logging_enabled(v20);
  if ((_DWORD)v21 && _IDSShouldLogTransport(v21))
  {
    uint64_t v22 = *(void *)(a1 + 192);
    id v23 = @"Sync";
    if (v22 == 200) {
      id v23 = @"Default";
    }
    if (v22 == 300) {
      id v24 = @"URGENT";
    }
    else {
      id v24 = v23;
    }
    uint64_t v57 = v24;
    unsigned int v25 = objc_msgSend(*(id *)(a1 + 56), "length", v50, v51);
    uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) data]);
    unsigned int v27 = [v26 length];
    if (*(_BYTE *)(a1 + 212)) {
      uint64_t v28 = @"YES";
    }
    else {
      uint64_t v28 = @"NO";
    }
    uint64_t v30 = *(void *)(a1 + 40);
    uint64_t v29 = *(void *)(a1 + 48);
    uint64_t v31 = *(void *)(a1 + 72);
    uint64_t v52 = *(void *)(a1 + 80);
    char v53 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [*(id *)(a1 + 88) count]));
    _IDSLogTransport( @"Delivery",  @"IDS",  @"UTUN request to send %{public}@ priority local message payload of data size: %d  guid: %{public}@  expirationDate %@ enforceRemoteTimeout %@ for topic: %{public}@:%{public}@ and command %@ to deviceIDs (count: %{public}@)");

    if (_IDSShouldLog(0LL, @"Delivery"))
    {
      objc_msgSend(*(id *)(a1 + 56), "length", v57, v27 + v25, v29, v31, v28, v30, v59, v52, v53);
      __int16 v32 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) data]);
      [v32 length];
      char v54 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [*(id *)(a1 + 88) count]));
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Delivery",  @"UTUN request to send %{public}@ priority local message payload of data size: %d  guid: %{public}@  expirationDate %@ enforceRemoteTimeout %@ for topic: %{public}@:%{public}@ and command %@ to deviceIDs (count: %{public}@)");
    }
  }

  id v33 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  v62[0] = _NSConcreteStackBlock;
  v62[1] = 3221225472LL;
  v62[2] = sub_1001C3420;
  v62[3] = &unk_1008FD420;
  v62[4] = *(void *)(a1 + 32);
  __int16 v34 = *(void **)(a1 + 88);
  id v63 = *(id *)(a1 + 96);
  id v80 = *(id *)(a1 + 168);
  os_activity_t v35 = v33;
  id v64 = v35;
  id v65 = *(id *)(a1 + 56);
  id v66 = *(id *)(a1 + 64);
  id v67 = *(id *)(a1 + 104);
  id v68 = *(id *)(a1 + 112);
  id v69 = *(id *)(a1 + 48);
  id v36 = *(id *)(a1 + 72);
  uint64_t v37 = *(void *)(a1 + 192);
  id v70 = v36;
  uint64_t v83 = v37;
  int v85 = *(_DWORD *)(a1 + 208);
  LODWORD(v3_Block_object_dispose(va, 8) = *(_DWORD *)(a1 + 212);
  WORD2(v3_Block_object_dispose(va, 8) = *(_WORD *)(a1 + 216);
  BYTE6(v3_Block_object_dispose(va, 8) = *(_BYTE *)(a1 + 218);
  uint64_t v58 = v38;
  id v71 = *(id *)(a1 + 120);
  id v39 = v59;
  id v72 = v39;
  id v73 = *(id *)(a1 + 80);
  id v74 = *(id *)(a1 + 40);
  id v75 = *(id *)(a1 + 128);
  id v76 = *(id *)(a1 + 136);
  id v81 = *(id *)(a1 + 176);
  id v82 = *(id *)(a1 + 184);
  id v77 = *(id *)(a1 + 144);
  uint64_t v40 = v58;
  HIBYTE(v40) = *(_BYTE *)(a1 + 219);
  uint64_t v86 = v40;
  __int16 v87 = *(_WORD *)(a1 + 220);
  id v78 = *(id *)(a1 + 152);
  id v41 = *(id *)(a1 + 160);
  uint64_t v42 = *(void *)(a1 + 200);
  id v79 = v41;
  uint64_t v84 = v42;
  [v34 enumerateKeysAndObjectsUsingBlock:v62];
  if (!-[NSMutableSet count](v35, "count"))
  {
    uint64_t v43 = OSLogHandleForTransportCategory("Delivery");
    uint64_t v44 = (os_log_s *)objc_claimAutoreleasedReturnValue(v43);
    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
    {
      id v45 = *(const __CFString **)(a1 + 88);
      uint64_t v46 = *(void *)(*(void *)(a1 + 32) + 72LL);
      *(_DWORD *)buf = 138412546;
      __int16 v91 = v45;
      __int16 v92 = 2112;
      *(void *)__int16 v93 = v46;
      _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEFAULT,  "Unable to find peer for deviceIDs %@ failing the message.  (Peers: %@)",  buf,  0x16u);
    }

    uint64_t v48 = os_log_shim_legacy_logging_enabled(v47);
    if ((_DWORD)v48)
    {
      if (_IDSShouldLogTransport(v48))
      {
        _IDSLogTransport( @"Delivery",  @"IDS",  @"Unable to find peer for deviceIDs %@ failing the message.  (Peers: %@)");
        if (_IDSShouldLog(0LL, @"Delivery")) {
          _IDSLogV( 0LL,  @"IDSFoundation",  @"Delivery",  @"Unable to find peer for deviceIDs %@ failing the message.  (Peers: %@)");
        }
      }
    }

    uint64_t v49 = *(void **)(a1 + 88);
    v60[0] = _NSConcreteStackBlock;
    v60[1] = 3221225472LL;
    v60[2] = sub_1001C3AAC;
    v60[3] = &unk_1008FD448;
    id v61 = *(id *)(a1 + 168);
    [v49 enumerateKeysAndObjectsUsingBlock:v60];
  }

  os_activity_scope_leave(&state);
  cut_arc_os_release(&v89);
}

void sub_1001C3420(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKey:IDSDevicePairedDeviceID]);
  if (![v7 isEqualToString:IDSDeviceDefaultPairedDeviceUniqueID]
    || (id v8 = [*(id *)(a1 + 32) _copyPairedDevice], v8, v8))
  {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _createPeerFromDeviceInfo:v6]);
    if (v9)
    {
      if ([*(id *)(a1 + 48) containsObject:v7])
      {
        uint64_t v10 = OSLogHandleForIDSCategory("Delivery");
        __int128 v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          id v36 = v7;
          _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Skipping device %@ which we already sent to.",  buf,  0xCu);
        }

        if (os_log_shim_legacy_logging_enabled(v12)
          && _IDSShouldLog(0LL, @"Delivery"))
        {
          _IDSLogV( 0LL,  @"IDSFoundation",  @"Delivery",  @"Skipping device %@ which we already sent to.");
        }
      }

      else
      {
        id v17 = [*(id *)(a1 + 32) _nextMessageID];
        uint64_t v18 = objc_alloc_init(&OBJC_CLASS___IDSLocalDeliveryMessage);
        -[IDSLocalDeliveryMessage setPayload:](v18, "setPayload:", *(void *)(a1 + 56));
        -[IDSLocalDeliveryMessage setProtobuf:](v18, "setProtobuf:", *(void *)(a1 + 64));
        -[IDSLocalDeliveryMessage setResourcePath:](v18, "setResourcePath:", *(void *)(a1 + 72));
        -[IDSLocalDeliveryMessage setResourceMetadata:](v18, "setResourceMetadata:", *(void *)(a1 + 80));
        -[IDSLocalDeliveryMessage setMessageUUID:](v18, "setMessageUUID:", *(void *)(a1 + 88));
        -[IDSLocalDeliveryMessage setMessageID:](v18, "setMessageID:", v17);
        -[IDSLocalDeliveryMessage setExpirationDate:](v18, "setExpirationDate:", *(void *)(a1 + 96));
        -[IDSLocalDeliveryMessage setShouldEnforceRemoteTimeout:]( v18,  "setShouldEnforceRemoteTimeout:",  *(unsigned __int8 *)(a1 + 220));
        -[IDSLocalDeliveryMessage setPriority:](v18, "setPriority:", *(void *)(a1 + 200));
        -[IDSLocalDeliveryMessage setDataProtectionClass:](v18, "setDataProtectionClass:", *(unsigned int *)(a1 + 216));
        -[IDSLocalDeliveryMessage setNonWaking:](v18, "setNonWaking:", *(unsigned __int8 *)(a1 + 221));
        -[IDSLocalDeliveryMessage setNonCloudWaking:](v18, "setNonCloudWaking:", *(unsigned __int8 *)(a1 + 222));
        -[IDSLocalDeliveryMessage setExpectsPeerResponse:]( v18,  "setExpectsPeerResponse:",  *(unsigned __int8 *)(a1 + 223));
        -[IDSLocalDeliveryMessage setWantsAppAck:](v18, "setWantsAppAck:", *(unsigned __int8 *)(a1 + 224));
        -[IDSLocalDeliveryMessage setCompressPayload:](v18, "setCompressPayload:", *(unsigned __int8 *)(a1 + 225));
        -[IDSLocalDeliveryMessage setCompressed:](v18, "setCompressed:", *(unsigned __int8 *)(a1 + 226));
        -[IDSLocalDeliveryMessage setPeerResponseIdentifier:](v18, "setPeerResponseIdentifier:", *(void *)(a1 + 104));
        -[IDSLocalDeliveryMessage setDomainHash:](v18, "setDomainHash:", *(void *)(a1 + 112));
        -[IDSLocalDeliveryMessage setCommand:](v18, "setCommand:", *(void *)(a1 + 120));
        -[IDSLocalDeliveryMessage setTopic:](v18, "setTopic:", *(void *)(a1 + 128));
        -[IDSLocalDeliveryMessage setAwdTopic:](v18, "setAwdTopic:", *(void *)(a1 + 136));
        -[IDSLocalDeliveryMessage setFromID:](v18, "setFromID:", *(void *)(a1 + 144));
        -[IDSLocalDeliveryMessage setToDeviceID:](v18, "setToDeviceID:", v7);
        -[IDSLocalDeliveryMessage setToURI:](v18, "setToURI:", v5);
        -[IDSLocalDeliveryMessage setCompletionBlock:](v18, "setCompletionBlock:", *(void *)(a1 + 176));
        -[IDSLocalDeliveryMessage setFallbackBlock:](v18, "setFallbackBlock:", *(void *)(a1 + 184));
        -[IDSLocalDeliveryMessage setProgressBlock:](v18, "setProgressBlock:", *(void *)(a1 + 192));
        -[IDSLocalDeliveryMessage setQueueOneIdentifier:](v18, "setQueueOneIdentifier:", *(void *)(a1 + 152));
        -[IDSLocalDeliveryMessage setRequireBluetooth:](v18, "setRequireBluetooth:", *(unsigned __int8 *)(a1 + 227));
        -[IDSLocalDeliveryMessage setRequireLocalWiFi:](v18, "setRequireLocalWiFi:", *(unsigned __int8 *)(a1 + 228));
        -[IDSLocalDeliveryMessage setBypassDuet:](v18, "setBypassDuet:", *(unsigned __int8 *)(a1 + 229));
        -[IDSLocalDeliveryMessage setDuetIdentifiersOverride:]( v18,  "setDuetIdentifiersOverride:",  *(void *)(a1 + 160));
        -[IDSLocalDeliveryMessage setMinCompatibilityVersion:]( v18,  "setMinCompatibilityVersion:",  [*(id *)(a1 + 168) minCompatibilityVersion]);
        -[IDSLocalDeliveryMessage setMessageType:](v18, "setMessageType:", *(void *)(a1 + 208));
        [v9 sendMessage:v18 priority:*(void *)(a1 + 200) messageType:*(void *)(a1 + 208)];
        if (v7) {
          [*(id *)(a1 + 48) addObject:v7];
        }
      }
    }

    else
    {
      uint64_t v13 = OSLogHandleForTransportCategory("Devlivery");
      uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        id v36 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "WARNING: Unable to create the peer for the device %@",  buf,  0xCu);
      }

      uint64_t v16 = os_log_shim_legacy_logging_enabled(v15);
      if ((_DWORD)v16)
      {
        if (_IDSShouldLogTransport(v16))
        {
          _IDSLogTransport( @"Devlivery",  @"IDS",  @"WARNING: Unable to create the peer for the device %@");
          if (_IDSShouldLog(0LL, @"Devlivery")) {
            _IDSLogV( 0LL,  @"IDSFoundation",  @"Devlivery",  @"WARNING: Unable to create the peer for the device %@");
          }
        }
      }
    }

    goto LABEL_27;
  }

  uint64_t v19 = OSLogHandleForTransportCategory("Devlivery");
  uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v21 = *(void **)(a1 + 40);
    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) pairingManager]);
    id v23 = (void *)objc_claimAutoreleasedReturnValue([v22 pairedDeviceUniqueID]);
    *(_DWORD *)buf = 138412546;
    id v36 = v21;
    __int16 v37 = 2112;
    uint64_t v38 = v23;
    _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "WARNING: A message for the local default paired device has reached the delivery controller but we do not have a pe er already for it, It was likley sent before QWS was completed. Purging message. Destination Device: %@, Current Device:%@ ",  buf,  0x16u);
  }

  uint64_t v25 = os_log_shim_legacy_logging_enabled(v24);
  if ((_DWORD)v25)
  {
    if (_IDSShouldLogTransport(v25))
    {
      uint64_t v26 = *(void *)(a1 + 40);
      unsigned int v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) pairingManager]);
      uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([v27 pairedDeviceUniqueID]);
      _IDSLogTransport( @"Devlivery",  @"IDS",  @"WARNING: A message for the local default paired device has reached the delivery controller but we do not have a peer already for it, It was likley sent before QWS was completed. Purging message. Destination Device: %@, Current Device:%@ ");

      if (_IDSShouldLog(0LL, @"Devlivery"))
      {
        uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "pairingManager", v26, v30));
        uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v28 pairedDeviceUniqueID]);
        _IDSLogV( 0LL,  @"IDSFoundation",  @"Devlivery",  @"WARNING: A message for the local default paired device has reached the delivery controller but we do not have a peer already for it, It was likley sent before QWS was completed. Purging message. Destination Device: %@, Current Device:%@ ");
      }
    }
  }

  if (*(void *)(a1 + 176))
  {
    uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDaemonPriorityQueueController sharedInstance]( &OBJC_CLASS___IDSDaemonPriorityQueueController,  "sharedInstance"));
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472LL;
    v32[2] = sub_1001C3A58;
    v32[3] = &unk_1008F8F70;
    id v33 = v7;
    id v34 = *(id *)(a1 + 176);
    [v29 performBlockMainQueue:v32];

    uint64_t v9 = v33;
LABEL_27:
  }
}

void sub_1001C3A58(uint64_t a1)
{
  uint64_t v2 = -[IDSDeliveryContext initWithResponseCode:deviceID:]( objc_alloc(&OBJC_CLASS___IDSDeliveryContext),  "initWithResponseCode:deviceID:",  24LL,  *(void *)(a1 + 32));
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1001C3AAC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([a3 objectForKey:IDSDevicePairedDeviceID]);
  if (*(void *)(a1 + 32))
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDaemonPriorityQueueController sharedInstance]( &OBJC_CLASS___IDSDaemonPriorityQueueController,  "sharedInstance"));
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    _DWORD v6[2] = sub_1001C3B78;
    v6[3] = &unk_1008F8F70;
    id v7 = v4;
    id v8 = *(id *)(a1 + 32);
    [v5 performBlockMainQueue:v6];
  }
}

void sub_1001C3B78(uint64_t a1)
{
  uint64_t v2 = -[IDSDeliveryContext initWithResponseCode:deviceID:]( objc_alloc(&OBJC_CLASS___IDSDeliveryContext),  "initWithResponseCode:deviceID:",  2LL,  *(void *)(a1 + 32));
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1001C49C8(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = (void *)v2[19];
  id v4 = a2;
  id v5 = (id)objc_claimAutoreleasedReturnValue([v2 hashForString:v4]);
  [v3 setObject:v4 forKey:v5];
}

void sub_1001C4E7C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  if (([a2 isEqualToString:IDSDeviceDefaultPairedDeviceUniqueID] & 1) == 0
    && [v5 isNearby])
  {
    [v5 setIsNearby:0];
    [*(id *)(a1 + 32) peerNearbyStateChanged:v5 forceNotify:1];
  }
}

void sub_1001C5644( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1001C565C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1001C566C(uint64_t a1)
{
}

void sub_1001C5674(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v8 = a2;
  if (*(void *)(a1 + 32) == a3)
  {
    id v9 = v8;
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a2);
    id v8 = v9;
    *a4 = 1;
  }
}

void sub_1001C600C(uint64_t a1)
{
  uint64_t v2 = objc_autoreleasePoolPush();
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 200) allObjects]);
  id v4 = [v3 copy];

  objc_autoreleasePoolPop(v2);
  uint64_t v5 = OSLogHandleForTransportCategory("UTunDelivery");
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v7 = [*(id *)(a1 + 40) isNearby];
    id v8 = @"NO";
    uint64_t v9 = *(void *)(a1 + 48);
    if (v7) {
      id v8 = @"YES";
    }
    *(_DWORD *)buf = 138412546;
    uint64_t v26 = v8;
    __int16 v27 = 2112;
    uint64_t v28 = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Broadcasting isNearby %@ for %@", buf, 0x16u);
  }

  uint64_t v11 = os_log_shim_legacy_logging_enabled(v10);
  if ((_DWORD)v11 && _IDSShouldLogTransport(v11))
  {
    uint64_t v12 = [*(id *)(a1 + 40) isNearby] ? @"YES" : @"NO";
    uint64_t v18 = v12;
    uint64_t v19 = *(void *)(a1 + 48);
    _IDSLogTransport(@"UTunDelivery", @"IDS", @"Broadcasting isNearby %@ for %@");
    if (_IDSShouldLog(0LL, @"UTunDelivery"))
    {
      objc_msgSend(*(id *)(a1 + 40), "isNearby", v18, v19);
      _IDSLogV(0LL, @"IDSFoundation", @"UTunDelivery", @"Broadcasting isNearby %@ for %@");
    }
  }

  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  id v13 = v4;
  id v14 = [v13 countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (v14)
  {
    uint64_t v15 = *(void *)v21;
    do
    {
      for (i = 0LL; i != v14; i = (char *)i + 1)
      {
        if (*(void *)v21 != v15) {
          objc_enumerationMutation(v13);
        }
        id v17 = *(void **)(*((void *)&v20 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector(v17, "deliveryController:uniqueID:isNearby:") & 1) != 0) {
          objc_msgSend( v17,  "deliveryController:uniqueID:isNearby:",  *(void *)(a1 + 32),  *(void *)(a1 + 48),  objc_msgSend(*(id *)(a1 + 40), "isNearby"));
        }
      }

      id v14 = [v13 countByEnumeratingWithState:&v20 objects:v24 count:16];
    }

    while (v14);
  }
}

void sub_1001C6730(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 200) allObjects]);
  id v3 = [v2 copy];

  uint64_t v4 = OSLogHandleForTransportCategory("UTunDelivery");
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v6 = [*(id *)(a1 + 32) isConnected];
    unsigned int v7 = @"NO";
    uint64_t v8 = *(void *)(a1 + 40);
    if (v6) {
      unsigned int v7 = @"YES";
    }
    *(_DWORD *)buf = 138412546;
    uint64_t v25 = v7;
    __int16 v26 = 2112;
    uint64_t v27 = v8;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Broadcasting isConnected %@ for %@", buf, 0x16u);
  }

  uint64_t v10 = os_log_shim_legacy_logging_enabled(v9);
  if ((_DWORD)v10 && _IDSShouldLogTransport(v10))
  {
    uint64_t v11 = [*(id *)(a1 + 32) isConnected] ? @"YES" : @"NO";
    id v17 = v11;
    uint64_t v18 = *(void *)(a1 + 40);
    _IDSLogTransport(@"UTunDelivery", @"IDS", @"Broadcasting isConnected %@ for %@");
    if (_IDSShouldLog(0LL, @"UTunDelivery"))
    {
      objc_msgSend(*(id *)(a1 + 32), "isConnected", v17, v18);
      _IDSLogV(0LL, @"IDSFoundation", @"UTunDelivery", @"Broadcasting isConnected %@ for %@");
    }
  }

  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  id v12 = v3;
  id v13 = [v12 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v13)
  {
    uint64_t v14 = *(void *)v20;
    do
    {
      for (i = 0LL; i != v13; i = (char *)i + 1)
      {
        if (*(void *)v20 != v14) {
          objc_enumerationMutation(v12);
        }
        uint64_t v16 = *(void **)(*((void *)&v19 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector(v16, "deliveryController:uniqueID:isConnected:") & 1) != 0) {
          objc_msgSend( v16,  "deliveryController:uniqueID:isConnected:",  *(void *)(a1 + 32),  *(void *)(a1 + 40),  objc_msgSend(*(id *)(a1 + 32), "isConnected"));
        }
      }

      id v13 = [v12 countByEnumeratingWithState:&v19 objects:v23 count:16];
    }

    while (v13);
  }
}

id sub_1001C9AF0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _enableOTRForDefaultPairedDevice];
}

id sub_1001CA328(uint64_t a1, uint64_t a2, void *a3)
{
  return [a3 admissionPolicyChangedForTopic:*(void *)(a1 + 32) allowed:*(unsigned __int8 *)(a1 + 40)];
}

void sub_1001CC358(_Unwind_Exception *a1)
{
}

void sub_1001CC4AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

id sub_1001CC4C4()
{
  uint64_t v4 = 0LL;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000LL;
  id v0 = (void *)qword_1009BEDB0;
  uint64_t v7 = qword_1009BEDB0;
  if (!qword_1009BEDB0)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    v3[2] = sub_1001CD2BC;
    v3[3] = &unk_1008F6878;
    v3[4] = &v4;
    sub_1001CD2BC((uint64_t)v3);
    id v0 = (void *)v5[3];
  }

  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1001CC568( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1001CCA54( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

uint64_t sub_1001CCA9C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1001CCAAC(uint64_t a1)
{
}

id sub_1001CCAB4()
{
  uint64_t v4 = 0LL;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000LL;
  id v0 = (void *)qword_1009BEDC0;
  uint64_t v7 = qword_1009BEDC0;
  if (!qword_1009BEDC0)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    v3[2] = sub_1001CD364;
    v3[3] = &unk_1008F6878;
    v3[4] = &v4;
    sub_1001CD364((uint64_t)v3);
    id v0 = (void *)v5[3];
  }

  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1001CCB58( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

id sub_1001CCB70()
{
  uint64_t v3 = 0LL;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000LL;
  id v0 = (id *)qword_1009BEDC8;
  uint64_t v6 = qword_1009BEDC8;
  if (!qword_1009BEDC8)
  {
    id v1 = (void *)sub_1001CD214();
    id v0 = (id *)dlsym(v1, "CNContactEmailAddressesKey");
    v4[3] = (uint64_t)v0;
    qword_1009BEDC8 = (uint64_t)v0;
  }

  _Block_object_dispose(&v3, 8);
  if (!v0) {
    sub_1006A0254();
  }
  return *v0;
}

void sub_1001CCBF4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

id sub_1001CCC0C()
{
  uint64_t v3 = 0LL;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000LL;
  id v0 = (id *)qword_1009BEDD0;
  uint64_t v6 = qword_1009BEDD0;
  if (!qword_1009BEDD0)
  {
    id v1 = (void *)sub_1001CD214();
    id v0 = (id *)dlsym(v1, "CNContactPhoneNumbersKey");
    v4[3] = (uint64_t)v0;
    qword_1009BEDD0 = (uint64_t)v0;
  }

  _Block_object_dispose(&v3, 8);
  if (!v0) {
    sub_1006A02C4();
  }
  return *v0;
}

void sub_1001CCC90( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

id sub_1001CCCA8()
{
  uint64_t v3 = 0LL;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2020000000LL;
  id v0 = (id *)qword_1009BEDE8;
  uint64_t v6 = qword_1009BEDE8;
  if (!qword_1009BEDE8)
  {
    id v1 = (void *)sub_1001CD214();
    id v0 = (id *)dlsym(v1, "CNContactTypeKey");
    v4[3] = (uint64_t)v0;
    qword_1009BEDE8 = (uint64_t)v0;
  }

  _Block_object_dispose(&v3, 8);
  if (!v0) {
    sub_1006A0334();
  }
  return *v0;
}

void sub_1001CCD2C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

id sub_1001CCD44()
{
  uint64_t v4 = 0LL;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000LL;
  id v0 = (void *)qword_1009BEDF0;
  uint64_t v7 = qword_1009BEDF0;
  if (!qword_1009BEDF0)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    v3[2] = sub_1001CD3B8;
    v3[3] = &unk_1008F6878;
    v3[4] = &v4;
    sub_1001CD3B8((uint64_t)v3);
    id v0 = (void *)v5[3];
  }

  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1001CCDE8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1001CCE00(uint64_t a1, void *a2, _BYTE *a3)
{
  id v16 = a2;
  id v7 = [v16 contactType];
  uint64_t v8 = v16;
  if (!v7)
  {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v16 givenName]);
    id v10 = [v9 length];
    uint64_t v11 = v16;
    id v12 = v10;
    if (!v10)
    {
      uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v16 familyName]);
      if (![v3 length])
      {

        uint64_t v8 = v16;
        goto LABEL_13;
      }

      uint64_t v11 = v16;
    }

    id v13 = (void *)objc_claimAutoreleasedReturnValue([v11 emailAddresses]);
    if ([v13 count])
    {

      if (!v12) {
LABEL_12:
      }
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL), a2);
      uint64_t v8 = v16;
      *a3 = 1;
      goto LABEL_13;
    }

    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v16 phoneNumbers]);
    id v15 = [v14 count];

    if (!v12) {
    uint64_t v8 = v16;
    }
    if (v15) {
      goto LABEL_12;
    }
  }

void sub_1001CD0E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1001CD110(uint64_t a1, void *a2)
{
  id v5 = a2;
  if (![v5 contactType])
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v5 emailAddresses]);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += [v3 count];

    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v5 phoneNumbers]);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += [v4 count];
  }
}

Class sub_1001CD1C0(uint64_t a1)
{
  Class result = objc_getClass("CNContactStore");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL)) {
    sub_1006A03A4();
  }
  qword_1009BEDA0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  return result;
}

uint64_t sub_1001CD214()
{
  uint64_t v2 = 0LL;
  if (!qword_1009BEDA8)
  {
    __int128 v3 = off_1008FD558;
    uint64_t v4 = 0LL;
    qword_1009BEDA8 = _sl_dlopen(&v3, &v2);
  }

  uint64_t v0 = qword_1009BEDA8;
  if (!qword_1009BEDA8) {
    sub_1006A041C(&v2);
  }
  if (v2) {
    free(v2);
  }
  return v0;
}

Class sub_1001CD2BC(uint64_t a1)
{
  Class result = objc_getClass("CNContact");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL)) {
    sub_1006A0498();
  }
  qword_1009BEDB0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  return result;
}

Class sub_1001CD310(uint64_t a1)
{
  Class result = objc_getClass("CNPhoneNumber");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL)) {
    sub_1006A0510();
  }
  qword_1009BEDB8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  return result;
}

Class sub_1001CD364(uint64_t a1)
{
  Class result = objc_getClass("CNContactFormatter");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL)) {
    sub_1006A0588();
  }
  qword_1009BEDC0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  return result;
}

Class sub_1001CD3B8(uint64_t a1)
{
  Class result = objc_getClass("CNContactFetchRequest");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL)) {
    sub_1006A0600();
  }
  qword_1009BEDF0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  return result;
}

char *sub_1001CD40C()
{
  return dlerror();
}

void sub_1001CD82C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1001CD844(uint64_t a1, void *a2, _BYTE *a3)
{
  id v5 = *(void **)(a1 + 32);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([a2 keyIndex]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 UUIDString]);
  LODWORD(v5) = [v5 isEqualToString:v7];

  if ((_DWORD)v5)
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
    *a3 = 1;
  }

uint64_t sub_1001CE80C(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:kIDSRegistrationEntitlement])
  {
    char v2 = 1;
  }

  else if ([v1 isEqualToString:kIDSMessagingEntitlement])
  {
    char v2 = 2;
  }

  else if ([v1 isEqualToString:kIDSSessionEntitlement])
  {
    char v2 = 3;
  }

  else if ([v1 isEqualToString:kIDSRegistrationResetEntitlement])
  {
    char v2 = 4;
  }

  else if ([v1 isEqualToString:kIDSiCloudSignInHackEntitlement])
  {
    char v2 = 5;
  }

  else if ([v1 isEqualToString:kIDSEncryptionKeysEntitlement])
  {
    char v2 = 6;
  }

  else if ([v1 isEqualToString:kIDSHighPriorityMessagingEntitlement])
  {
    char v2 = 7;
  }

  else if ([v1 isEqualToString:kIDSUrgentPriorityMessagingEntitlement])
  {
    char v2 = 8;
  }

  else if ([v1 isEqualToString:kIDSContinuityEntitlement])
  {
    char v2 = 9;
  }

  else if ([v1 isEqualToString:kIDSSelfSessionEntitlement])
  {
    char v2 = 10;
  }

  else if ([v1 isEqualToString:kIDSDeviceUUIDEntitlement])
  {
    char v2 = 11;
  }

  else if ([v1 isEqualToString:kIDSSessionPrivateEntitlement])
  {
    char v2 = 12;
  }

  else if ([v1 isEqualToString:kIDSBypassSizeCheckEntitlement])
  {
    char v2 = 13;
  }

  else if ([v1 isEqualToString:kIDSPreferInfraWiFiEntitlement])
  {
    char v2 = 14;
  }

  else if ([v1 isEqualToString:kIDSLinkPreferencesEntitlement])
  {
    char v2 = 15;
  }

  else if ([v1 isEqualToString:kIDSLocalPairingEntitlement])
  {
    char v2 = 16;
  }

  else if ([v1 isEqualToString:kIDSLocalPairingAPIEntitlement])
  {
    char v2 = 17;
  }

  else if ([v1 isEqualToString:kIDSAccountSyncEntitlement])
  {
    char v2 = 18;
  }

  else if ([v1 isEqualToString:kIDSAllowedTrafficClasses])
  {
    char v2 = 19;
  }

  else if ([v1 isEqualToString:kIDSKeyRollingEntitlement])
  {
    char v2 = 20;
  }

  else if ([v1 isEqualToString:kIDSReportiMessageSpamEntitlement])
  {
    char v2 = 21;
  }

  else if ([v1 isEqualToString:kIDSForceEncryptionOffEntitlement])
  {
    char v2 = 22;
  }

  else if ([v1 isEqualToString:kIDSSubServicesEntitlement])
  {
    char v2 = 23;
  }

  else if ([v1 isEqualToString:kIDSAppleCareServicesEntitlement])
  {
    char v2 = 24;
  }

  else if ([v1 isEqualToString:kIDSRegistrationControlEntitlement])
  {
    char v2 = 25;
  }

  else if ([v1 isEqualToString:kIDSPhoneNumberAuthenticationEntitlement])
  {
    char v2 = 26;
  }

  else if ([v1 isEqualToString:kIDSPhoneNumberAuthenticationPrivateEntitlement])
  {
    char v2 = 27;
  }

  else if ([v1 isEqualToString:kIDSTestToolEntitlement])
  {
    char v2 = 28;
  }

  else if ([v1 isEqualToString:kIDSStateResetEntitlement])
  {
    char v2 = 29;
  }

  else if ([v1 isEqualToString:kIDSReportSpamEntitlement])
  {
    char v2 = 30;
  }

  else if ([v1 isEqualToString:kIDSStatusKitPublishingForStatusTypeEntitlement])
  {
    char v2 = 31;
  }

  else if ([v1 isEqualToString:kIDSStatusKitSubscriptionForStatusTypeEntitlement])
  {
    char v2 = 32;
  }

  else if ([v1 isEqualToString:kIDSStatusKitPublishingForAllStatusTypeEntitlement])
  {
    char v2 = 33;
  }

  else if ([v1 isEqualToString:kIDSStatusKitSubscriptionForAllStatusTypeEntitlement])
  {
    char v2 = 34;
  }

  else if ([v1 isEqualToString:kIDSForceQuerySendParameterEntitlement])
  {
    char v2 = 35;
  }

  else
  {
    char v2 = -1;
  }

  return v2;
}

id sub_1001CEC90(void *a1)
{
  id v1 = a1;
  if (![v1 rangeOfString:@"&."])
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v1 substringFromIndex:v2]);
    uint64_t v8 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"+.%@", v7);
LABEL_10:
    id v6 = (id)objc_claimAutoreleasedReturnValue(v8);

    goto LABEL_11;
  }

  if (![v1 rangeOfString:@"^."])
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v1 substringFromIndex:v3]);
    uint64_t v8 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"-.%@", v7);
    goto LABEL_10;
  }

  if (![v1 rangeOfString:@"com.apple.private.alloy."])
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v1 substringFromIndex:v4]);
    uint64_t v8 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"&.%@", v7);
    goto LABEL_10;
  }

  if (![v1 rangeOfString:@"com.apple."])
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v1 substringFromIndex:v5]);
    uint64_t v8 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"^.%@", v7);
    goto LABEL_10;
  }

  id v6 = v1;
LABEL_11:

  return v6;
}

id sub_1001CF438(void *a1)
{
  id v1 = a1;
  if (![v1 rangeOfString:@"+."])
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v1 substringFromIndex:v2]);
    uint64_t v8 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"&.%@", v7);
LABEL_10:
    id v6 = (id)objc_claimAutoreleasedReturnValue(v8);

    goto LABEL_11;
  }

  if (![v1 rangeOfString:@"-."])
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v1 substringFromIndex:v3]);
    uint64_t v8 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"^.%@", v7);
    goto LABEL_10;
  }

  if (![v1 rangeOfString:@"&."])
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v1 substringFromIndex:v4]);
    uint64_t v8 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"com.apple.private.alloy.%@",  v7);
    goto LABEL_10;
  }

  if (![v1 rangeOfString:@"^."])
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v1 substringFromIndex:v5]);
    uint64_t v8 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"com.apple.%@", v7);
    goto LABEL_10;
  }

  id v6 = v1;
LABEL_11:

  return v6;
}

void sub_1001CF588(id a1)
{
  byte_1009BEDF8 = sub_1001CE80C(kIDSRegistrationEntitlement);
  byte_1009BEDF9 = sub_1001CE80C(kIDSSessionEntitlement);
  byte_1009BEDFA = sub_1001CE80C(kIDSMessagingEntitlement);
}

void sub_1001CF620(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___IDSDaemonXPCInterface);
  uint64_t v2 = (void *)qword_1009BEE10;
  qword_1009BEE10 = (uint64_t)v1;
}

void sub_1001CF800(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = (id)objc_claimAutoreleasedReturnValue([v2 observer]);
  [v3 appendMiddleware:v4];
}

uint64_t sub_1001CFC1C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) object]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 observerProxies]);
  [v3 removeObject:*(void *)(a1 + 40)];

  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) object]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 observerProxies]);
  id v6 = [v5 count];

  if (!v6)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) object]);
    [v7 setObserverProxies:0];
  }

  uint64_t v8 = OSLogHandleForIDSCategory("DaemonProxy");
  uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Daemon Invalidation Handled", v12, 2u);
  }

  uint64_t result = os_log_shim_legacy_logging_enabled(v10);
  if ((_DWORD)result)
  {
    uint64_t result = _IDSShouldLog(0LL, @"DaemonProxy");
    if ((_DWORD)result) {
      return _IDSLogV(0LL, @"IDSFoundation", @"DaemonProxy", @"Daemon Invalidation Handled");
    }
  }

  return result;
}

uint64_t sub_1001CFD60(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) object]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 observerProxies]);
  [v3 removeObject:*(void *)(a1 + 40)];

  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) object]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 observerProxies]);
  id v6 = [v5 count];

  if (!v6)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) object]);
    [v7 setObserverProxies:0];
  }

  uint64_t v8 = OSLogHandleForIDSCategory("DaemonProxy");
  uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Daemon Interruption Handled", v12, 2u);
  }

  uint64_t result = os_log_shim_legacy_logging_enabled(v10);
  if ((_DWORD)result)
  {
    uint64_t result = _IDSShouldLog(0LL, @"DaemonProxy");
    if ((_DWORD)result) {
      return _IDSLogV(0LL, @"IDSFoundation", @"DaemonProxy", @"Daemon Interruption Handled");
    }
  }

  return result;
}

void sub_1001CFFFC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = OSLogHandleForIDSCategory("DaemonProxy");
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v7 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138478339;
      uint64_t v10 = v6;
      __int16 v11 = 2114;
      uint64_t v12 = v7;
      __int16 v13 = 2114;
      id v14 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Daemon failed to broadcast didCreateGroup {group: %{private}@, observerProxy: %{public}@, error: %{public}@",  buf,  0x20u);
    }

    if (os_log_shim_legacy_logging_enabled(v8) && _IDSShouldLog(0LL, @"DaemonProxy")) {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"DaemonProxy",  @"Daemon failed to broadcast didCreateGroup {group: %{private}@, observerProxy: %{public}@, error: %{public}@");
    }
  }
}

void sub_1001D028C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = OSLogHandleForIDSCategory("DaemonProxy");
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v7 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138478339;
      uint64_t v10 = v6;
      __int16 v11 = 2114;
      uint64_t v12 = v7;
      __int16 v13 = 2114;
      id v14 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Daemon failed to broadcast didCacheGroup {group: %{private}@, observerProxy: %{public}@, error: %{public}@",  buf,  0x20u);
    }

    if (os_log_shim_legacy_logging_enabled(v8) && _IDSShouldLog(0LL, @"DaemonProxy")) {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"DaemonProxy",  @"Daemon failed to broadcast didCacheGroup {group: %{private}@, observerProxy: %{public}@, error: %{public}@");
    }
  }
}

void sub_1001D0548(void *a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = OSLogHandleForIDSCategory("DaemonProxy");
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = a1[4];
      uint64_t v7 = a1[5];
      uint64_t v8 = a1[6];
      *(_DWORD *)buf = 138478595;
      uint64_t v11 = v6;
      __int16 v12 = 2113;
      uint64_t v13 = v7;
      __int16 v14 = 2114;
      uint64_t v15 = v8;
      __int16 v16 = 2114;
      id v17 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Daemon failed to broadcast didUpdateGroup {previousGroup: %{private}@, updatedGroup: %{private}@, observerProxy: %{public}@, error:%{public}@}",  buf,  0x2Au);
    }

    if (os_log_shim_legacy_logging_enabled(v9) && _IDSShouldLog(0LL, @"DaemonProxy")) {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"DaemonProxy",  @"Daemon failed to broadcast didUpdateGroup {previousGroup: %{private}@, updatedGroup: %{private}@, observerProxy: %{public}@, error:%{public}@}");
    }
  }
}

void sub_1001D07EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = OSLogHandleForIDSCategory("DaemonProxy");
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v7 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138478339;
      uint64_t v10 = v6;
      __int16 v11 = 2114;
      uint64_t v12 = v7;
      __int16 v13 = 2114;
      id v14 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Daemon failed to broadcast didReceiveDecryptionFailureForGroup {group: %{private}@, observerProxy: %{public}@, e rror:%{public}@}",  buf,  0x20u);
    }

    if (os_log_shim_legacy_logging_enabled(v8) && _IDSShouldLog(0LL, @"DaemonProxy")) {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"DaemonProxy",  @"Daemon failed to broadcast didReceiveDecryptionFailureForGroup {group: %{private}@, observerProxy: %{public}@, error:%{public}@}");
    }
  }
}

void sub_1001D0A50(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = OSLogHandleForIDSCategory("DaemonProxy");
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138543618;
      uint64_t v9 = v6;
      __int16 v10 = 2114;
      id v11 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Daemon failed to broadcast didReceiveRegistrationIdentityUpdate {observerProxy: %{public}@, error:%{public}@}",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v7) && _IDSShouldLog(0LL, @"DaemonProxy")) {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"DaemonProxy",  @"Daemon failed to broadcast didReceiveRegistrationIdentityUpdate {observerProxy: %{public}@, error:%{public}@}");
    }
  }
}

void sub_1001D11B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog delivery](&OBJC_CLASS___IDSFoundationLog, "delivery"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v3 chunkNumber]);
    *(_DWORD *)buf = 138412546;
    uint64_t v20 = v5;
    __int16 v21 = 2112;
    __int128 v22 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "GUID %@ Received APNS ack for MML %@",  buf,  0x16u);
  }

  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "aggregateMessages", 0));
  id v8 = [v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v15;
    do
    {
      for (i = 0LL; i != v9; i = (char *)i + 1)
      {
        if (*(void *)v15 != v10) {
          objc_enumerationMutation(v7);
        }
        uint64_t v12 = *(void **)(*((void *)&v14 + 1) + 8LL * (void)i);
        __int16 v13 = (void (**)(void, void))objc_claimAutoreleasedReturnValue([v12 deliveryAcknowledgementBlock]);
        ((void (**)(void, void *))v13)[2](v13, v12);
      }

      id v9 = [v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }

    while (v9);
  }
}

void sub_1001D13F0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog delivery](&OBJC_CLASS___IDSFoundationLog, "delivery"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v3 chunkNumber]);
    int v7 = 138412546;
    uint64_t v8 = v5;
    __int16 v9 = 2112;
    uint64_t v10 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "GUID %@ Received APNS ack for Fanout %@",  (uint8_t *)&v7,  0x16u);
  }

  [v3 callAllAckBlocks];
}

void sub_1001D1664(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog delivery](&OBJC_CLASS___IDSFoundationLog, "delivery"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 40);
    int v9 = 138412546;
    uint64_t v10 = v5;
    __int16 v11 = 2112;
    uint64_t v12 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "GUID %@ APNS ack received for destination %@",  (uint8_t *)&v9,  0x16u);
  }

  int v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) delegate]);
  [v7 receivedAPNSAckForMessage:v3 guid:*(void *)(a1 + 32)];

  [*(id *)(a1 + 56) removeObject:*(void *)(a1 + 64)];
  if (![*(id *)(a1 + 56) count])
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) delegate]);
    [v8 finishedTrackingAPNSAcksWithURIs:*(void *)(a1 + 72) guid:*(void *)(a1 + 32)];
  }

void sub_1001D1D18(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___IDSDSessionController);
  uint64_t v2 = (void *)qword_1009BEE20;
  qword_1009BEE20 = (uint64_t)v1;
}

id sub_1001D2600(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 identifier]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[IDSURI URIWithPrefixedURI:withServiceLoggingHint:]( &OBJC_CLASS___IDSURI,  "URIWithPrefixedURI:withServiceLoggingHint:",  v3,  v4));

  return v5;
}

id sub_1001D39BC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([a2 objectForKey:v5]);
  if ((objc_opt_isKindOfClass(v6, a1) & 1) != 0)
  {
    id v7 = v6;
  }

  else
  {
    if (v6)
    {
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT)) {
        sub_1006A0B90((uint64_t)v5, a1, v8);
      }
    }

    id v7 = 0LL;
  }

  return v7;
}

void sub_1001D3A64(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 96));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained setupNewIncomingSessionWithOptions:*(void *)(a1 + 32)]);
  if (v6)
  {
    uint64_t v7 = objc_opt_class(&OBJC_CLASS___NSNumber, v5);
    id v8 = sub_1001D39BC(v7, *(void **)(a1 + 48), IDSDSessionMessageTransportType);
    int v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    uint64_t v10 = IDSDSessionMessageQuickRelaySessionToken;
    __int16 v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectForKey:IDSDSessionMessageQuickRelaySessionToken]);
    uint64_t v13 = objc_opt_class(&OBJC_CLASS___NSString, v12);
    if ((objc_opt_isKindOfClass(v11, v13) & 1) != 0)
    {
      __int128 v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectForKey:v10]);
      uint64_t v15 = objc_claimAutoreleasedReturnValue(+[NSData _IDSDataFromBase64String:](&OBJC_CLASS___NSData, "_IDSDataFromBase64String:", v14));
    }

    else
    {
      __int128 v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectForKey:v10]);
      uint64_t v19 = objc_opt_class(&OBJC_CLASS___NSData, v18);
      if ((objc_opt_isKindOfClass(v14, v19) & 1) == 0)
      {
        [v6 setQuickRelaySessionToken:0];
        goto LABEL_11;
      }

      uint64_t v15 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectForKey:v10]);
    }

    uint64_t v20 = (void *)v15;
    [v6 setQuickRelaySessionToken:v15];

LABEL_11:
    uint64_t v22 = objc_opt_class(&OBJC_CLASS___NSNumber, v21);
    id v23 = sub_1001D39BC(v22, *(void **)(a1 + 48), IDSDSessionMessageUseCloudPairedControlChannel);
    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
    [v6 setRemoteUseCloudPairedControlChannel:v24];
    uint64_t v26 = objc_opt_class(&OBJC_CLASS___NSNumber, v25);
    id v27 = sub_1001D39BC(v26, *(void **)(a1 + 48), IDSDSessionMessageUsePhoneContinuityLocalMessage);
    uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
    [v6 setRemoteUsePhoneContinuityLocalMessage:v28];
    [v6 submitAWDMetricsForIDSSessionInvitationReceived];
    uint64_t v30 = objc_opt_class(&OBJC_CLASS___NSNumber, v29);
    uint64_t v31 = (void *)IDSDSessionMessageDeclineOnNetworkError;
    id v32 = sub_1001D39BC(v30, *(void **)(a1 + 48), IDSDSessionMessageDeclineOnNetworkError);
    id v34 = (void *)objc_claimAutoreleasedReturnValue(v32);
    os_activity_t v35 = &OBJC_CLASS___NSString_ptr;
    if (v34) {
      os_activity_t v35 = &OBJC_CLASS___NSNumber_ptr;
    }
    uint64_t v36 = objc_opt_class(*v35, v33);
    id v37 = sub_1001D39BC(v36, *(void **)(a1 + 48), v31);
    uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue(v37);
    unsigned __int8 v39 = [v38 BOOLValue];

    v41[0] = _NSConcreteStackBlock;
    v41[1] = 3221225472LL;
    v41[2] = sub_1001D3E48;
    v41[3] = &unk_1008FD7B8;
    id v42 = v6;
    id v43 = *(id *)(a1 + 48);
    id v44 = *(id *)(a1 + 40);
    id v45 = WeakRetained;
    uint64_t v52 = v3;
    unsigned __int8 v53 = v39;
    id v46 = *(id *)(a1 + 56);
    id v47 = *(id *)(a1 + 64);
    id v48 = *(id *)(a1 + 72);
    id v49 = *(id *)(a1 + 80);
    id v50 = v9;
    id v51 = *(id *)(a1 + 88);
    id v40 = v9;
    [v42 networkingIsAvailable:v41];

    goto LABEL_14;
  }

  uint64_t v16 = OSLogHandleForIDSCategory("Warning");
  __int128 v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "Couldn't create session for invite, bailing...",  buf,  2u);
  }

  DLCWarn( *(void *)(a1 + 40),  @"SessionController",  0LL,  @"Couldn't create session for invite, bailing...");
  v3[2](v3);
LABEL_14:
}

void sub_1001D3E48(uint64_t a1, int a2)
{
  uint64_t v4 = OSLogHandleForIDSCategory("SessionController");
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = @"NO";
    if (a2) {
      uint64_t v6 = @"YES";
    }
    *(_DWORD *)buf = 138412290;
    id v64 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Done with incoming network availability check; networkOkForSession: %@",
      buf,
      0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v7)
    && _IDSShouldLog(0LL, @"SessionController"))
  {
    _IDSLogV( 0LL,  @"IDSFoundation",  @"SessionController",  @"Done with incoming network availability check; networkOkForSession: %@");
  }

  if (!a2)
  {
    uint64_t v14 = OSLogHandleForIDSCategory("SessionController");
    uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Network availability check indicated that we should not continue to process this session invitation",  buf,  2u);
    }

    if (os_log_shim_legacy_logging_enabled(v16)
      && _IDSShouldLog(0LL, @"SessionController"))
    {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"SessionController",  @"Network availability check indicated that we should not continue to process this session invitation");
    }

    if (*(_BYTE *)(a1 + 120))
    {
      __int128 v17 = objc_alloc(&OBJC_CLASS___NSDictionary);
      uint64_t v18 = -[NSDictionary initWithObjectsAndKeys:]( v17,  "initWithObjectsAndKeys:",  &off_1009474B8,  IDSDSessionMessageDeclineReason,  0LL);
      uint64_t v19 = *(void **)(a1 + 32);
      uint64_t v20 = JWEncodeDictionary(v18);
      uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
      [v19 declineInvitationWithData:v21];
    }

    uint64_t v22 = (os_unfair_lock_s *)(*(void *)(a1 + 56) + 8LL);
    os_unfair_lock_lock(v22);
    id v23 = *(void **)(*(void *)(a1 + 56) + 16LL);
    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uniqueID]);
    [v23 removeObjectForKey:v24];

    (*(void (**)(void))(*(void *)(a1 + 112) + 16LL))(*(void *)(a1 + 112));
    os_unfair_lock_unlock(v22);
    return;
  }

  if (![*(id *)(a1 + 32) isScreenSharingSession])
  {
LABEL_28:
    id v43 = *(void **)(a1 + 32);
    v51[0] = _NSConcreteStackBlock;
    v51[1] = 3221225472LL;
    v51[2] = sub_1001D44B8;
    v51[3] = &unk_1008FD790;
    char v62 = *(_BYTE *)(a1 + 120);
    id v44 = v43;
    uint64_t v45 = *(void *)(a1 + 56);
    id v52 = v44;
    uint64_t v53 = v45;
    id v61 = *(id *)(a1 + 112);
    id v54 = *(id *)(a1 + 64);
    id v55 = *(id *)(a1 + 40);
    id v56 = *(id *)(a1 + 72);
    id v57 = *(id *)(a1 + 80);
    id v58 = *(id *)(a1 + 88);
    id v59 = *(id *)(a1 + 96);
    id v60 = *(id *)(a1 + 104);
    [v44 runConnectivityCheckWithCompletionBlock:v51];

    return;
  }

  uint64_t v8 = IDSDSessionMessageKeyMaterial;
  int v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKey:IDSDSessionMessageKeyMaterial]);
  uint64_t v11 = objc_opt_class(&OBJC_CLASS___NSString, v10);
  if ((objc_opt_isKindOfClass(v9, v11) & 1) != 0)
  {
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKey:v8]);
    uint64_t v13 = objc_claimAutoreleasedReturnValue(+[NSData _IDSDataFromBase64String:](&OBJC_CLASS___NSData, "_IDSDataFromBase64String:", v12));
LABEL_22:
    id v27 = (void *)v13;
    goto LABEL_24;
  }

  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKey:v8]);
  uint64_t v26 = objc_opt_class(&OBJC_CLASS___NSData, v25);
  if ((objc_opt_isKindOfClass(v12, v26) & 1) != 0)
  {
    uint64_t v13 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKey:v8]);
    goto LABEL_22;
  }

  id v27 = 0LL;
LABEL_24:

  uint64_t v29 = objc_opt_class(&OBJC_CLASS___NSNumber, v28);
  id v30 = sub_1001D39BC(v29, *(void **)(a1 + 40), IDSDSessionMessageSelfSSRC);
  uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
  uint64_t v33 = objc_opt_class(&OBJC_CLASS___NSNumber, v32);
  id v34 = sub_1001D39BC(v33, *(void **)(a1 + 40), IDSDSessionMessageSelfSeqStart);
  uint64_t v35 = objc_claimAutoreleasedReturnValue(v34);
  uint64_t v36 = (void *)v35;
  if (v27 && v31 && v35)
  {
    id v37 = [*(id *)(a1 + 32) keyMaterial];
    id v38 = v27;
    unsigned __int8 v39 = (__int128 *)[v38 bytes];
    __int128 v40 = *v39;
    __int128 v41 = v39[1];
    __int128 v42 = v39[2];
    *(_OWORD *)((char *)v37 + 44) = *(__int128 *)((char *)v39 + 44);
    v37[1] = v41;
    v37[2] = v42;
    *id v37 = v40;
    objc_msgSend(*(id *)(a1 + 32), "setSSRCRecv:", objc_msgSend(v31, "unsignedIntValue"));
    objc_msgSend(*(id *)(a1 + 32), "setSeqRecvStart:", objc_msgSend(v36, "unsignedShortValue"));

    goto LABEL_28;
  }

  uint64_t v46 = OSLogHandleForIDSCategory("Warning");
  id v47 = (os_log_s *)objc_claimAutoreleasedReturnValue(v46);
  if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_ERROR,  "Missing encryption setup info, bailing...",  buf,  2u);
  }

  DLCWarn(*(void *)(a1 + 48), @"SessionController", 0LL, @"Missing encryption setup info, bailing...");
  [*(id *)(a1 + 32) endSessionWithReason:17];
  id v48 = (os_unfair_lock_s *)(*(void *)(a1 + 56) + 8LL);
  os_unfair_lock_lock(v48);
  id v49 = *(void **)(*(void *)(a1 + 56) + 16LL);
  id v50 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uniqueID]);
  [v49 removeObjectForKey:v50];

  (*(void (**)(void))(*(void *)(a1 + 112) + 16LL))(*(void *)(a1 + 112));
  os_unfair_lock_unlock(v48);
}

void sub_1001D44B8(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    v17[2] = sub_1001D4760;
    void v17[3] = &unk_1008FD768;
    id v18 = *(id *)(a1 + 48);
    int8x16_t v16 = *(int8x16_t *)(a1 + 32);
    id v4 = (id)v16.i64[0];
    int8x16_t v19 = vextq_s8(v16, v16, 8uLL);
    id v20 = *(id *)(a1 + 56);
    id v21 = *(id *)(a1 + 64);
    id v22 = *(id *)(a1 + 72);
    id v23 = *(id *)(a1 + 80);
    id v24 = *(id *)(a1 + 88);
    [v3 enqueueBroadcast:v17 forTopic:*(void *)(a1 + 48) entitlement:kIDSSessionEntitlement command:0 capabilities:kIDSListenerCapConsumesLaunchOnDemandSessionMessages messageContext:*(void *)(a1 + 96)];

    (*(void (**)(void))(*(void *)(a1 + 104) + 16LL))();
  }

  else
  {
    uint64_t v5 = OSLogHandleForIDSCategory("SessionController");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Wifi connectivity check failed, declining invitation!",  buf,  2u);
    }

    if (os_log_shim_legacy_logging_enabled(v7)
      && _IDSShouldLog(0LL, @"SessionController"))
    {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"SessionController",  @"Wifi connectivity check failed, declining invitation!");
    }

    if (*(_BYTE *)(a1 + 112))
    {
      uint64_t v8 = objc_alloc(&OBJC_CLASS___NSDictionary);
      int v9 = -[NSDictionary initWithObjectsAndKeys:]( v8,  "initWithObjectsAndKeys:",  &off_1009474B8,  IDSDSessionMessageDeclineReason,  0LL);
      uint64_t v10 = *(void **)(a1 + 32);
      uint64_t v11 = JWEncodeDictionary(v9);
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
      [v10 declineInvitationWithData:v12];
    }

    uint64_t v13 = (os_unfair_lock_s *)(*(void *)(a1 + 40) + 8LL);
    os_unfair_lock_lock(v13);
    uint64_t v14 = *(void **)(*(void *)(a1 + 40) + 16LL);
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uniqueID]);
    [v14 removeObjectForKey:v15];

    (*(void (**)(void))(*(void *)(a1 + 104) + 16LL))();
    os_unfair_lock_unlock(v13);
  }

void sub_1001D4760(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 56);
    uint64_t v5 = *(void *)(a1 + 64);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 72) prefixedURI]);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 80) prefixedURI]);
    [v3 sessionInvitationReceivedWithPayload:v6 forTopic:v4 sessionID:v5 toIdentifier:v7 fromID:v8 transportType:*(void *)(a1 + 88)];
  }

  else
  {
    uint64_t v9 = OSLogHandleForIDSCategory("SessionController");
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      uint64_t v17 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Did not find a client that could handle the invitation for service %@, ignoring invitation...",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v12)
      && _IDSShouldLog(0LL, @"SessionController"))
    {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"SessionController",  @"Did not find a client that could handle the invitation for service %@, ignoring invitation...");
    }

    uint64_t v13 = (os_unfair_lock_s *)(*(void *)(a1 + 40) + 8LL);
    os_unfair_lock_lock(v13);
    uint64_t v14 = *(void **)(*(void *)(a1 + 40) + 16LL);
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) uniqueID]);
    [v14 removeObjectForKey:v15];

    os_unfair_lock_unlock(v13);
  }
}

void sub_1001D4BC4(void *a1, void *a2)
{
  uint64_t v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = a1[6];
  uint64_t v5 = a2;
  [v2 receivedAcceptMessage:v3 fromURI:v4];
  v5[2]();
}

void sub_1001D4EA0(void *a1, void *a2)
{
  uint64_t v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = a1[6];
  uint64_t v5 = a2;
  [v2 receivedDeclineMessage:v3 fromURI:v4];
  v5[2]();
}

void sub_1001D517C(void *a1, void *a2)
{
  uint64_t v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = a1[6];
  uint64_t v5 = a2;
  [v2 receivedCancelMessage:v3 fromURI:v4];
  v5[2]();
}

void sub_1001D5458(void *a1, void *a2)
{
  uint64_t v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = a1[6];
  uint64_t v5 = a2;
  [v2 receivedSessionMessage:v3 fromURI:v4];
  v5[2]();
}

void sub_1001D5734(void *a1, void *a2)
{
  uint64_t v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = a1[6];
  uint64_t v5 = a2;
  [v2 receivedEndMessage:v3 fromURI:v4];
  v5[2]();
}

void sub_1001D5A10(void *a1, void *a2)
{
  uint64_t v2 = (void *)a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = a1[6];
  uint64_t v5 = a2;
  [v2 receivedReinitiateMessage:v3 fromURI:v4];
  v5[2]();
}

void sub_1001D5F10(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(exception_object);
    objc_end_catch();
    JUMPOUT(0x1001D5C94LL);
  }

  _Unwind_Resume(exception_object);
}

void sub_1001D5F54(uint64_t a1, void *a2)
{
  v179 = a2;
  uint64_t v3 = IDSDSessionMessageJoinNotificationKey;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:IDSDSessionMessageJoinNotificationKey]);

  if (v4)
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:v3]);
    uint64_t v6 = (char *)[v5 unsignedIntegerValue];

    if ((unint64_t)(v6 - 1) >= 3)
    {
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDGroupStatusNotificationController sharedInstance]( &OBJC_CLASS___IDSDGroupStatusNotificationController,  "sharedInstance"));
      [v7 processIncomingParticipantDataUpdateMessage:*(void *)(a1 + 32) fromToken:*(void *)(a1 + 40) fromURI:*(void *)(a1 + 48) toURI:*(void *)(a1 + 56) topic:*(void *)(a1 + 64) idsMessageContext:*(void *)(a1 + 72)];
    }

    else
    {
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDGroupStatusNotificationController sharedInstance]( &OBJC_CLASS___IDSDGroupStatusNotificationController,  "sharedInstance"));
      [v7 processIncomingParticipantUpdateMessage:*(void *)(a1 + 32) fromToken:*(void *)(a1 + 40) fromURI:*(void *)(a1 + 48) toURI:*(void *)(a1 + 56) topic:*(void *)(a1 + 64) idsMessageContext:*(void *)(a1 + 72)];
    }

    goto LABEL_8;
  }

  if (!*(_BYTE *)(a1 + 136))
  {
    uint64_t v29 = (void *)IDSDSessionMessageRealTimeEncryptionKeyMaterialKey;
    id v30 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:IDSDSessionMessageRealTimeEncryptionKeyMaterialKey]);
    if (v30)
    {

      uint64_t v32 = (void *)IDSDSessionMessageRealTimeEncryptionStableKeyMaterialKey;
    }

    else
    {
      uint64_t v32 = (void *)IDSDSessionMessageRealTimeEncryptionStableKeyMaterialKey;
      id v44 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) objectForKey:IDSDSessionMessageRealTimeEncryptionStableKeyMaterialKey]);

      if (!v44)
      {
        uint64_t v95 = IDSDSessionMessageRealTimeEncryptionPreKeyRecoveryRequestKey;
        __int16 v96 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) objectForKey:IDSDSessionMessageRealTimeEncryptionPreKeyRecoveryRequestKey]);

        v97 = *(void **)(a1 + 32);
        if (v96)
        {
          __int16 v98 = (void *)objc_claimAutoreleasedReturnValue([v97 objectForKey:v95]);
          unsigned int v99 = [v98 BOOLValue];

          if (v99)
          {
            __int16 v100 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) prefixedURI]);
            uint64_t v101 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) rawToken]);
            double v102 = COERCE_DOUBLE( objc_claimAutoreleasedReturnValue( +[IDSDestination destinationWithAlias:pushToken:]( &OBJC_CLASS___IDSDestination,  "destinationWithAlias:pushToken:",  v100,  v101)));

            uint64_t v103 = OSLogHandleForIDSCategory("SessionController");
            __int16 v104 = (os_log_s *)objc_claimAutoreleasedReturnValue(v103);
            if (os_log_type_enabled(v104, OS_LOG_TYPE_DEFAULT))
            {
              id v105 = *(void **)(a1 + 104);
              *(_DWORD *)buf = 138412546;
              id v190 = v105;
              __int16 v191 = 2112;
              double v192 = v102;
              _os_log_impl( (void *)&_mh_execute_header,  v104,  OS_LOG_TYPE_DEFAULT,  "Received the prekey recovery request for group %@ destination %@",  buf,  0x16u);
            }

            if (os_log_shim_legacy_logging_enabled(v106)
              && _IDSShouldLog(0LL, @"SessionController"))
            {
              v166 = *(void **)(a1 + 104);
              double v170 = v102;
              _IDSLogV( 0LL,  @"IDSFoundation",  @"SessionController",  @"Received the prekey recovery request for group %@ destination %@");
            }

            id v107 = (void *)objc_claimAutoreleasedReturnValue( +[IDSGroupEncryptionController sharedInstance]( &OBJC_CLASS___IDSGroupEncryptionController,  "sharedInstance",  v166,  *(void *)&v170));
            [v107 sendPublicKeyToDestination:*(void *)&v102 group:*(void *)(a1 + 104) sessionID:*(void *)(a1 + 112)];
          }

          goto LABEL_9;
        }

        uint64_t v148 = IDSDSessionMessageRealTimeEncryptionMKMRecoveryRequestKey;
        v149 = (void *)objc_claimAutoreleasedReturnValue([v97 objectForKey:IDSDSessionMessageRealTimeEncryptionMKMRecoveryRequestKey]);
        if (v149)
        {

          uint64_t v150 = IDSDSessionMessageRealTimeEncryptionSKMRecoveryRequestKey;
        }

        else
        {
          uint64_t v150 = IDSDSessionMessageRealTimeEncryptionSKMRecoveryRequestKey;
          v151 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) objectForKey:IDSDSessionMessageRealTimeEncryptionSKMRecoveryRequestKey]);

          if (!v151)
          {
            v165 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) objectForKey:IDSDSessionMessageRealTimeEncryptionPublicKeyAck]);

            if (v165)
            {
              uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[IDSGroupEncryptionController sharedInstance]( &OBJC_CLASS___IDSGroupEncryptionController,  "sharedInstance"));
              [v7 processIncomingPrekeyAckForGroup:*(void *)(a1 + 104)];
LABEL_8:
            }

id sub_1001D7350(id a1, id a2)
{
  id v2 = a2;
  uint64_t v4 = objc_opt_class(&OBJC_CLASS___NSString, v3);
  if ((objc_opt_isKindOfClass(v2, v4) & 1) != 0) {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[IDSURI URIWithPrefixedURI:](&OBJC_CLASS___IDSURI, "URIWithPrefixedURI:", v2));
  }
  else {
    uint64_t v5 = 0LL;
  }

  return v5;
}

void sub_1001D785C(_Unwind_Exception *a1)
{
}

void sub_1001D7DC8(id a1, IDSDSession *a2, unint64_t a3, BOOL *a4)
{
  uint64_t v4 = a2;
  -[IDSDSession endSession](v4, "endSession");
  -[IDSDSession cleanupSessionWithCleanStatus:](v4, "cleanupSessionWithCleanStatus:", 1LL);
}

void sub_1001D8200(uint64_t a1, void *a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 32);
  id v3 = a2;
  [v3 endSessionWithReason:v2];
  [v3 cleanupSessionWithCleanStatus:1];
}

void sub_1001D8538(id a1, IDSDSession *a2, unint64_t a3, BOOL *a4)
{
}

uint64_t sub_1001D93F4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1001D9404(uint64_t a1)
{
}

void sub_1001D940C(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v9 = a2;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v9 groupID]);
  unsigned int v8 = [v7 isEqualToString:*(void *)(a1 + 32)];

  if (v8)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a2);
    *a4 = 1;
  }
}

void sub_1001D96F8(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v10 = a2;
  uint64_t v7 = objc_alloc(&OBJC_CLASS___NSUUID);
  unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue([v10 groupID]);
  id v9 = -[NSUUID initWithUUIDString:](v7, "initWithUUIDString:", v8);

  if (-[NSUUID isEqual:](v9, "isEqual:", *(void *)(a1 + 32)))
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a2);
    *a4 = 1;
  }
}

void sub_1001D9914(_Unwind_Exception *a1)
{
}

void sub_1001D9A9C(_Unwind_Exception *a1)
{
}

id sub_1001DA248(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _retryTimeForAttempt:a2];
}

void sub_1001DA254(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _publishRequestForStatusPayload:*(void *)(a1 + 40)]);
  uint64_t v7 = *(void *)(a1 + 32);
  unsigned int v8 = *(void **)(v7 + 16);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_1001DA31C;
  v10[3] = &unk_1008FD920;
  uint64_t v13 = a3;
  void v10[4] = v7;
  id v11 = *(id *)(a1 + 48);
  id v12 = v5;
  id v9 = v5;
  [v8 publishStatusRequest:v6 completion:v10];
}

void sub_1001DA31C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSSKStatusClient](&OBJC_CLASS___IDSFoundationLog, "IDSSKStatusClient"));
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 56);
    int v12 = 138412802;
    id v13 = v5;
    __int16 v14 = 2048;
    uint64_t v15 = v8;
    __int16 v16 = 2112;
    id v17 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Requested publish with identifier %@ attempts (%ld) for error %@",  (uint8_t *)&v12,  0x20u);
  }

  if ([*(id *)(a1 + 32) _shouldRetryForError:v6]
    && (unint64_t v9 = *(void *)(a1 + 56), v9 <= (unint64_t)[*(id *)(a1 + 32) _retryMaximumAttempts]))
  {
    id v11 = *(void (**)(void))(*(void *)(a1 + 48) + 16LL);
  }

  else
  {
    uint64_t v10 = *(void *)(a1 + 40);
    if (v10) {
      (*(void (**)(uint64_t, id))(v10 + 16))(v10, v6);
    }
    id v11 = *(void (**)(void))(*(void *)(a1 + 48) + 16LL);
  }

  v11();
}

id sub_1001DA684(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _retryTimeForAttempt:a2];
}

void sub_1001DA690(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v8 = *(void **)(v6 + 16);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_1001DA744;
  v10[3] = &unk_1008FD970;
  uint64_t v13 = a3;
  void v10[4] = v6;
  id v11 = *(id *)(a1 + 48);
  id v12 = v5;
  id v9 = v5;
  [v8 provisionPayloads:v7 completion:v10];
}

void sub_1001DA744(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSSKStatusClient](&OBJC_CLASS___IDSFoundationLog, "IDSSKStatusClient"));
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 56);
    int v12 = 134218242;
    uint64_t v13 = v8;
    __int16 v14 = 2112;
    id v15 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Requested provision attempts (%ld) for error %@",  (uint8_t *)&v12,  0x16u);
  }

  if ([*(id *)(a1 + 32) _shouldRetryForError:v6]
    && (unint64_t v9 = *(void *)(a1 + 56), v9 <= (unint64_t)[*(id *)(a1 + 32) _retryMaximumAttempts]))
  {
    id v11 = *(void (**)(void))(*(void *)(a1 + 48) + 16LL);
  }

  else
  {
    uint64_t v10 = *(void *)(a1 + 40);
    if (v10) {
      (*(void (**)(uint64_t, id, id))(v10 + 16))(v10, v5, v6);
    }
    id v11 = *(void (**)(void))(*(void *)(a1 + 48) + 16LL);
  }

  v11();
}

void sub_1001DA90C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  uint64_t v4 = objc_alloc(&OBJC_CLASS___IDSURI);
  id v6 = (id)objc_claimAutoreleasedReturnValue([v3 handleString]);

  id v5 = -[IDSURI initWithPrefixedURI:](v4, "initWithPrefixedURI:", v6);
  [v2 addObject:v5];
}

void sub_1001DAAE0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(a1 + 40);
  uint64_t v4 = (void *)v2[2];
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) allObjects]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v2 _skHandlesForURIs:v5]);
  uint64_t v7 = *(void **)(a1 + 40);
  if (v3)
  {
    uint64_t v22 = *(void *)(a1 + 32);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v22, 1LL));
    unint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v7 _skHandlesForURIs:v8]);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 firstObject]);
    id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _skInvitationPayloadForDictionary:*(void *)(a1 + 56)]);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472LL;
    void v18[2] = sub_1001DAD04;
    void v18[3] = &unk_1008F9638;
    int v12 = &v19;
    id v19 = *(id *)(a1 + 48);
    uint64_t v13 = &v20;
    id v20 = *(id *)(a1 + 32);
    id v21 = *(id *)(a1 + 64);
    [v4 inviteHandles:v6 fromSenderHandle:v10 withInvitationPayload:v11 completion:v18];

    id v5 = v21;
  }

  else
  {
    __int16 v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _skInvitationPayloadForDictionary:*(void *)(a1 + 56)]);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    void v15[2] = sub_1001DADEC;
    v15[3] = &unk_1008F9660;
    int v12 = &v16;
    id v16 = *(id *)(a1 + 48);
    uint64_t v13 = &v17;
    id v17 = *(id *)(a1 + 64);
    [v4 inviteHandlesFromPrimaryAccountHandle:v6 withInvitationPayload:v14 completion:v15];
  }
}

void sub_1001DAD04(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSSKStatusClient](&OBJC_CLASS___IDSFoundationLog, "IDSSKStatusClient"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = a1[5];
    int v8 = 138412802;
    uint64_t v9 = v5;
    __int16 v10 = 2112;
    uint64_t v11 = v6;
    __int16 v12 = 2112;
    id v13 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Completed request - inviteHandles  %@ from sender %@ with error %@",  (uint8_t *)&v8,  0x20u);
  }

  uint64_t v7 = a1[6];
  if (v7) {
    (*(void (**)(uint64_t, id))(v7 + 16))(v7, v3);
  }
}

void sub_1001DADEC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSSKStatusClient](&OBJC_CLASS___IDSFoundationLog, "IDSSKStatusClient"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v7 = 138412546;
    uint64_t v8 = v5;
    __int16 v9 = 2112;
    id v10 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Completed request - inviteHandles %@ from primary sender account handle with error %@",  (uint8_t *)&v7,  0x16u);
  }

  uint64_t v6 = *(void *)(a1 + 40);
  if (v6) {
    (*(void (**)(uint64_t, id))(v6 + 16))(v6, v3);
  }
}

void sub_1001DAFD4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = (void *)v2[2];
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) allObjects]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v2 _skHandlesForURIs:v4]);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _DWORD v6[2] = sub_1001DB094;
  v6[3] = &unk_1008F9660;
  id v7 = *(id *)(a1 + 40);
  id v8 = *(id *)(a1 + 48);
  [v3 removeInvitedHandles:v5 completion:v6];
}

void sub_1001DB094(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSSKStatusClient](&OBJC_CLASS___IDSFoundationLog, "IDSSKStatusClient"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v7 = 138412546;
    uint64_t v8 = v5;
    __int16 v9 = 2112;
    id v10 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Completed request - removeHandles %@ with error %@",  (uint8_t *)&v7,  0x16u);
  }

  uint64_t v6 = *(void *)(a1 + 40);
  if (v6) {
    (*(void (**)(uint64_t, id))(v6 + 16))(v6, v3);
  }
}

void sub_1001DB1F0(uint64_t a1)
{
  id v1 = *(void **)(a1 + 40);
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 16LL);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_1001DB260;
  v3[3] = &unk_1008F98D0;
  id v4 = v1;
  [v2 removeAllInvitedHandlesWithCompletion:v3];
}

void sub_1001DB260(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSSKStatusClient](&OBJC_CLASS___IDSFoundationLog, "IDSSKStatusClient"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 138412290;
    id v7 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Completed request - removeAllHandles with error %@",  (uint8_t *)&v6,  0xCu);
  }

  uint64_t v5 = *(void *)(a1 + 32);
  if (v5) {
    (*(void (**)(uint64_t, id))(v5 + 16))(v5, v3);
  }
}

void sub_1001DB3E0(uint64_t a1, void *a2)
{
  id v3 = *(objc_class **)(a1 + 40);
  id v4 = a2;
  id v5 = objc_alloc(v3);
  int v6 = (void *)objc_claimAutoreleasedReturnValue([v4 prefixedURI]);

  id v7 = [v5 initWithString:v6];
  [*(id *)(a1 + 32) addObject:v7];
}

void sub_1001DBB88(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  uint64_t v2 = (void *)qword_1009BEE28;
  qword_1009BEE28 = (uint64_t)v1;
}

void sub_1001DBD8C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1001DBDA4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1001DBDB4(uint64_t a1)
{
}

void sub_1001DBDBC(uint64_t a1)
{
  if (([*(id *)(a1 + 32) hasPerformedMigration] & 1) == 0)
  {
    if (qword_1009BEE40 != -1) {
      dispatch_once(&qword_1009BEE40, &stru_1008FD9B8);
    }
    if (off_1009BEE38) {
      off_1009BEE38();
    }
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 12LL));
    *(_BYTE *)(*(void *)(a1 + 32) + 8LL) = 1;
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 12LL));
  }

  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 12LL));
  uint64_t v2 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  [v2 fulfillWithValue:v3];

  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(v4 + 16);
  *(void *)(v4 + 16) = 0LL;

  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 12LL));
}

void sub_1001DBE9C(id a1)
{
  off_1009BEE38 = (_UNKNOWN *)IMWeakLinkSymbol("DMPerformMigrationIfNeeded", @"DataMigration");
}

LABEL_162:
            v175 = self->_registrationInfo;
            if (v175)
            {
              v176 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistration userUniqueIdentifier](v175, "userUniqueIdentifier"));

              double v177 = self->_registrationInfo;
              if (!v176)
              {
                v178 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDAccount userUniqueIdentifier](self, "userUniqueIdentifier"));
                -[IDSRegistration setUserUniqueIdentifier:](v177, "setUserUniqueIdentifier:", v178);

                double v177 = self->_registrationInfo;
              }

                  CSDBSqliteDatabaseSetVersion(a1, 8007LL);
                  uint64_t v93 = OSLogHandleForIDSCategory("IDSDMessageStore");
                  char v94 = (os_log_s *)objc_claimAutoreleasedReturnValue(v93);
                  if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl( (void *)&_mh_execute_header,  v94,  OS_LOG_TYPE_DEFAULT,  "AlternateGUID support",  buf,  2u);
                  }

                  if (os_log_shim_legacy_logging_enabled(v95)
                    && _IDSShouldLog(0LL, @"IDSDMessageStore"))
                  {
                    _IDSLogV(0LL, @"IDSFoundation", @"IDSDMessageStore", @"AlternateGUID support");
                  }

                  __int16 v96 = sub_1003B3B08( a2,  @"Unable to drop legacy table",  @"Successfully dropped legacy table",  @"DROP TABLE outgoing_message");
                  CSDBRecordStoreCreateTablesForClass(&off_1009030C8, a2, 0LL);
                  if (!v96) {
                    goto LABEL_425;
                  }
                  CSDBSqliteDatabaseSetVersion(a1, 8008LL);
                  goto LABEL_169;
                }

LABEL_166:
              v179 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistration uris](v177, "uris"));
              if ([v179 count]
                || -[IDSRegistration shouldRegisterUsingDSHandle]( self->_registrationInfo,  "shouldRegisterUsingDSHandle"))
              {
              }

              else
              {
                v213 = -[IDSRegistration registrationStatus](self->_registrationInfo, "registrationStatus");

                if (v213 == 8)
                {
                  v214 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                  if (os_log_type_enabled(v214, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl( (void *)&_mh_execute_header,  v214,  OS_LOG_TYPE_DEFAULT,  "  We have no URIs registered, and we're not DS based, forcing unregistered",  buf,  2u);
                  }

                  -[IDSRegistration setRegistrationStatus:](self->_registrationInfo, "setRegistrationStatus:", 0LL);
                }
              }

              v180 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistration registrationCert](self->_registrationInfo, "registrationCert"));
              if (v180)
              {
              }

              else if ((id)-[IDSRegistration registrationStatus](self->_registrationInfo, "registrationStatus") == (id)8)
              {
                v181 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                if (os_log_type_enabled(v181, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl( (void *)&_mh_execute_header,  v181,  OS_LOG_TYPE_DEFAULT,  "  We have no registration cert, forcing unregistered",  buf,  2u);
                }

                -[IDSRegistration setRegistrationStatus:](self->_registrationInfo, "setRegistrationStatus:", 0LL);
              }

              id v182 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDAccount accountInfo](self, "accountInfo"));
              __int128 v183 = (const void *)kIDSServiceDefaultsAuthorizationIDKey;
              __int128 v184 = (void *)objc_claimAutoreleasedReturnValue([v182 objectForKey:kIDSServiceDefaultsAuthorizationIDKey]);

              __int128 v185 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistration profileID](self->_registrationInfo, "profileID"));
              if (![v184 length] && objc_msgSend(v185, "length"))
              {
                __int128 v186 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                if (os_log_type_enabled(v186, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 138412290;
                  *(void *)v239 = v185;
                  _os_log_impl( (void *)&_mh_execute_header,  v186,  OS_LOG_TYPE_DEFAULT,  "Setting profileID %@ onto account",  buf,  0xCu);
                }

                id v187 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
                v188 = v185;
                if (v188) {
                  CFDictionarySetValue((CFMutableDictionaryRef)v187, v183, v188);
                }

                -[IDSDAccount writeAccountDefaults:](self, "writeAccountDefaults:", v187);
              }

              v219 = v185;
              v189 = -[IDSDAccount registrationError](self, "registrationError");
              if (-[IDSDAccount shouldRegisterUsingDSHandle](self, "shouldRegisterUsingDSHandle"))
              {
                id v190 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistration dsHandle](self->_registrationInfo, "dsHandle"));
                __int16 v191 = [v190 length] == 0;
              }

              else
              {
                __int16 v191 = 0;
              }

              if (-[IDSRegistration registrationType](self->_registrationInfo, "registrationType") == 1)
              {
                double v192 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistration profileID](self->_registrationInfo, "profileID"));
                if (![v192 length]) {
                  __int16 v191 = 1;
                }
              }

              v221 = v184;
              if ((unint64_t)(v189 - 33) > 1)
              {
                if (!v191)
                {
LABEL_197:
                  -[IDSDAccount refreshAdHocServiceNames](self, "refreshAdHocServiceNames");
                  v200 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                  if (os_log_type_enabled(v200, OS_LOG_TYPE_DEFAULT))
                  {
                    v201 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDAccount _unprefixedURIStringsFromAccountInfo]( self,  "_unprefixedURIStringsFromAccountInfo"));
                    v202 = IMLoggingStringForArray(v201);
                    v203 = (id)objc_claimAutoreleasedReturnValue(v202);
                    v204 = (__CFString *)(id)objc_claimAutoreleasedReturnValue(-[IDSDAccount uniqueID](self, "uniqueID"));
                    *(_DWORD *)buf = 138412546;
                    *(void *)v239 = v203;
                    *(_WORD *)&v239[8] = 2112;
                    v240 = v204;
                    _os_log_impl( (void *)&_mh_execute_header,  v200,  OS_LOG_TYPE_DEFAULT,  "Current aliases: %@   for: %@",  buf,  0x16u);
                  }

                  v225 = 0u;
                  v226 = 0u;
                  v223 = 0u;
                  v224 = 0u;
                  v205 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDAccount _unprefixedURIStringsFromAccountInfo]( self,  "_unprefixedURIStringsFromAccountInfo"));
                  v206 = [v205 countByEnumeratingWithState:&v223 objects:v237 count:16];
                  if (v206)
                  {
                    v207 = v206;
                    v208 = *(void *)v224;
                    do
                    {
                      for (i = 0LL; i != v207; i = (char *)i + 1)
                      {
                        if (*(void *)v224 != v208) {
                          objc_enumerationMutation(v205);
                        }
                        v210 = *(void *)(*((void *)&v223 + 1) + 8LL * (void)i);
                        if (-[IDSDAccount _validationStatusForAlias:](self, "_validationStatusForAlias:", v210) != -1)
                        {
                          v211 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                          if (os_log_type_enabled(v211, OS_LOG_TYPE_DEFAULT))
                          {
                            *(_DWORD *)buf = 138412290;
                            *(void *)v239 = v210;
                            _os_log_impl( (void *)&_mh_execute_header,  v211,  OS_LOG_TYPE_DEFAULT,  " => adding candidate email: %@",  buf,  0xCu);
                          }

                          -[IDSRegistration addCandidateEmail:](self->_registrationInfo, "addCandidateEmail:", v210);
                        }
                      }

                      v207 = [v205 countByEnumeratingWithState:&v223 objects:v237 count:16];
                    }

                    while (v207);
                  }

                  v212 = (void *)objc_claimAutoreleasedReturnValue( +[IDSRegistrationController sharedInstance]( &OBJC_CLASS___IDSRegistrationController,  "sharedInstance"));
                  [v212 startTrackingActiveRegistration:self->_registrationInfo];

                  int v6 = 1;
                  id v5 = v222;
                  goto LABEL_8;
                }

                v194 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                if (os_log_type_enabled(v194, OS_LOG_TYPE_DEFAULT))
                {
                  __int16 v195 = self->_registrationInfo;
                  *(_DWORD *)buf = 138412290;
                  *(void *)v239 = v195;
                  _os_log_impl( (void *)&_mh_execute_header,  v194,  OS_LOG_TYPE_DEFAULT,  "*** Account needs repair, let's try to pull what we can from accounts (%@)",  buf,  0xCu);
                }

                __int16 v193 = (void *)objc_claimAutoreleasedReturnValue(+[FTPasswordManager sharedInstance](&OBJC_CLASS___FTPasswordManager, "sharedInstance"));
                uint64_t v196 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistration profileID](self->_registrationInfo, "profileID"));
                v197 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistration email](self->_registrationInfo, "email"));
                v198 = (void *)objc_claimAutoreleasedReturnValue([v197 lowercaseString]);
                v199 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistration serviceType](self->_registrationInfo, "serviceType"));
                v227[0] = _NSConcreteStackBlock;
                v227[1] = 3221225472LL;
                v227[2] = sub_1001DE980;
                v227[3] = &unk_1008FD9E0;
                v227[4] = self;
                [v193 fetchAuthTokenForProfileID:v196 username:v198 service:v199 outRequestID:0 completionBlock:v227];
              }

              else
              {
                __int16 v193 = (void *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                if (os_log_type_enabled((os_log_t)v193, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v193,  OS_LOG_TYPE_DEFAULT,  "Not Attempting Account Repair, This is a managed AppleID",  buf,  2u);
                }
              }

              goto LABEL_197;
            }

LABEL_165:
            double v177 = 0LL;
            goto LABEL_166;
          }

              uint64_t v123 = byte_1009C0A50;
LABEL_166:
              if (v123)
              {
                uint64_t v128 = OSLogHandleForIDSCategory("IDSDAccount");
                uint64_t v129 = (os_log_s *)objc_claimAutoreleasedReturnValue(v128);
                if (os_log_type_enabled(v129, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl( (void *)&_mh_execute_header,  v129,  OS_LOG_TYPE_DEFAULT,  "  Local IDS is disabled... not sending locally",  buf,  2u);
                }

                if (os_log_shim_legacy_logging_enabled(v130)
                  && _IDSShouldLog(0LL, @"IDSDAccount"))
                {
                  _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDAccount",  @"  Local IDS is disabled... not sending locally");
                }
              }

LABEL_173:
              id v131 = OSLogHandleForIDSCategory("IDSDAccount");
              id v132 = (os_log_s *)objc_claimAutoreleasedReturnValue(v131);
              if (os_log_type_enabled(v132, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 138412290;
                v199 = (uint64_t)v27;
                _os_log_impl( (void *)&_mh_execute_header,  v132,  OS_LOG_TYPE_DEBUG,  "Splitting out local destinations - no local device for URI %@, adding to remote",  buf,  0xCu);
              }

              if (os_log_shim_legacy_logging_enabled(v133)
                && _IDSShouldLog(1LL, @"IDSDAccount"))
              {
                v146 = v27;
                _IDSLogV( 1LL,  @"IDSFoundation",  @"IDSDAccount",  @"Splitting out local destinations - no local device for URI %@, adding to remote");
              }

              if (v27) {
                uint64_t v134 = (char)v18;
              }
              else {
                uint64_t v134 = 1;
              }
              if ((v134 & 1) != 0)
              {
                uint64_t v135 = OSLogHandleForIDSCategory("Warning");
                uint64_t v136 = (os_log_s *)objc_claimAutoreleasedReturnValue(v135);
                if (os_log_type_enabled(v136, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl( (void *)&_mh_execute_header,  v136,  OS_LOG_TYPE_ERROR,  "(Class) Dest became nil while trying to split destinations.",  buf,  2u);
                }

                if (os_log_shim_legacy_logging_enabled(v137))
                {
                  _IDSWarnV( @"IDSFoundation",  @"(Class) Dest became nil while trying to split destinations.");
                  _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"(Class) Dest became nil while trying to split destinations.");
                  _IDSLogTransport( @"Warning",  @"IDS",  @"(Class) Dest became nil while trying to split destinations.");
                }
              }

              else
              {
                -[NSMutableArray addObject:](v166, "addObject:", v27);
              }

              goto LABEL_187;
            }
          }

          else
          {
LABEL_154:
            if (!v160) {
              goto LABEL_165;
            }
            uint64_t v123 = byte_1009C0A50;
            if (byte_1009C0A50 || !v75 || !v97) {
              goto LABEL_166;
            }
            if ((([v75 isEqualToString:v167] | v157) & 1) == 0)
            {
              id v125 = OSLogHandleForIDSCategory("IDSDAccount");
              id v126 = (os_log_s *)objc_claimAutoreleasedReturnValue(v125);
              if (os_log_type_enabled(v126, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138413058;
                v199 = (uint64_t)v27;
                v200 = 2112;
                v201 = v75;
                v202 = 2112;
                v203 = v97;
                v204 = 2112;
                v205 = @"NO";
                _os_log_impl( (void *)&_mh_execute_header,  v126,  OS_LOG_TYPE_DEFAULT,  "Not considering %@ for local. DeviceID is %@  (btID: %@)  and we're not already scanning/advertising. Service allows wiprox? %@",  buf,  0x2Au);
              }

              if (os_log_shim_legacy_logging_enabled(v127)
                && _IDSShouldLog(0LL, @"IDSDAccount"))
              {
                unsigned int v153 = v97;
                v154 = @"NO";
                v146 = v27;
                v151 = v75;
                _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDAccount",  @"Not considering %@ for local. DeviceID is %@  (btID: %@)  and we're not already scanning/advertising. Service allows wiprox? %@");
              }

              goto LABEL_165;
            }
          }

          id v124 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjectsAndKeys:",  v97,  @"bt-id",  v75,  v164,  0LL));
          -[NSMutableDictionary setObject:forKey:](v165, "setObject:forKey:", v124, v27);

LABEL_187:
          __int16 v14 = v27;
LABEL_188:

          v178 = (char *)v178 + 1;
        }

        while (v178 != v175);
        v175 = [obj countByEnumeratingWithState:&v194 objects:v207 count:16];
      }

      while (v175);
    }

    uint64_t v138 = OSLogHandleForIDSCategory("IDSDAccount");
    id v139 = (os_log_s *)objc_claimAutoreleasedReturnValue(v138);
    if (os_log_type_enabled(v139, OS_LOG_TYPE_DEBUG))
    {
      BOOL v140 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  -[NSMutableDictionary count](v165, "count")));
      id v141 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  -[NSMutableArray count](v166, "count")));
      *(_DWORD *)buf = 138412546;
      v199 = (uint64_t)v140;
      v200 = 2112;
      v201 = v141;
      _os_log_impl( (void *)&_mh_execute_header,  v139,  OS_LOG_TYPE_DEBUG,  "(Class) Split out local destinations (%@) remote destinations (%@)",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v142)
      && _IDSShouldLog(2LL, @"IDSDAccount"))
    {
      uint64_t v150 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  -[NSMutableDictionary count](v165, "count")));
      v152 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  -[NSMutableArray count](v166, "count")));
      _IDSLogV( 2LL,  @"IDSFoundation",  @"IDSDAccount",  @"(Class) Split out local destinations (%@) remote destinations (%@)");
    }

    if (*((void *)&v155 + 1)) {
      **((void **)&v155 + 1) = v165;
    }
    if ((void)v155) {
      *(void *)unsigned int v155 = v166;
    }
  }
}

LABEL_82:
          if ((id)-[IDSRegistration registrationStatus](v71, "registrationStatus") == (id)8)
          {
            uint64_t v74 = (void *)objc_claimAutoreleasedReturnValue( +[IDSRegistrationController sharedInstance]( &OBJC_CLASS___IDSRegistrationController,  "sharedInstance"));
            [v74 unregisterInfo:self->_registrationInfo];
          }

          id v75 = (void *)objc_claimAutoreleasedReturnValue( +[IDSRegistrationController sharedInstance]( &OBJC_CLASS___IDSRegistrationController,  "sharedInstance"));
          [v75 cancelActionsForRegistrationInfo:self->_registrationInfo];

          uint64_t v76 = (void *)objc_claimAutoreleasedReturnValue( +[IDSRegistrationController sharedInstance]( &OBJC_CLASS___IDSRegistrationController,  "sharedInstance"));
          [v76 stopTrackingRegistration:self->_registrationInfo];

          uint64_t v77 = (void *)objc_claimAutoreleasedReturnValue([p_vtable + 152 sharedInstance]);
          [v77 removeRegistrationInfo:self->_registrationInfo];

          uint64_t v78 = objc_alloc_init(&OBJC_CLASS___IDSRegistration);
          uint64_t v79 = self->_registrationInfo;
          self->_registrationInfo = v78;

          id v80 = objc_claimAutoreleasedReturnValue(-[IDSDAccount serviceType](self, "serviceType"));
          -[IDSRegistration setServiceType:](self->_registrationInfo, "setServiceType:", v80);
          id v81 = self->_registrationInfo;
          v220 = (os_log_s *)v80;
          id v82 = _IDSRegistrationServiceIdentifierFromServiceType(v80);
          id v83 = (void *)objc_claimAutoreleasedReturnValue(v82);
          -[IDSRegistration setServiceIdentifier:](v81, "setServiceIdentifier:", v83);

          -[IDSRegistration setRegistrationStatus:](self->_registrationInfo, "setRegistrationStatus:", 0LL);
          -[IDSRegistration setRegistrationType:](self->_registrationInfo, "setRegistrationType:", v35);
          uint64_t v84 = self->_registrationInfo;
          uint64_t v85 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistrationPushHandler pushToken](self->_pushHandler, "pushToken"));
          -[IDSRegistration setPushToken:](v84, "setPushToken:", v85);

          -[IDSRegistration setShouldAutoRegisterAllHandles:]( self->_registrationInfo,  "setShouldAutoRegisterAllHandles:",  -[IDSDAccount shouldAutoRegisterAllHandles](self, "shouldAutoRegisterAllHandles"));
          -[IDSRegistration setShouldRegisterUsingDSHandle:]( self->_registrationInfo,  "setShouldRegisterUsingDSHandle:",  -[IDSDAccount shouldRegisterUsingDSHandle](self, "shouldRegisterUsingDSHandle"));
          uint64_t v86 = self->_registrationInfo;
          __int16 v87 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDAccount userUniqueIdentifier](self, "userUniqueIdentifier"));
          -[IDSRegistration setUserUniqueIdentifier:](v86, "setUserUniqueIdentifier:", v87);

          if ((_DWORD)v35 == 1)
          {
            __int128 v88 = self->_registrationInfo;
            double v89 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDAccount loginID](self, "loginID"));
            -[IDSRegistration setEmail:](v88, "setEmail:", v89);
          }

          uint64_t v90 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDAccount accountInfo](self, "accountInfo"));
          uint64_t v91 = (void *)objc_claimAutoreleasedReturnValue([v90 objectForKey:kIDSServiceDefaultsAuthorizationIDKey]);

          if ([v91 length])
          {
            __int16 v92 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistration profileID](self->_registrationInfo, "profileID"));
            if ([v92 length])
            {
              uint64_t v93 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistration profileID](self->_registrationInfo, "profileID"));
              char v94 = [v91 isEqualToString:v93];

              if (!v94) {
                goto LABEL_94;
              }
            }

            else
            {
            }

            uint64_t v95 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
            if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              *(void *)v239 = v91;
              _os_log_impl( (void *)&_mh_execute_header,  v95,  OS_LOG_TYPE_DEFAULT,  "Setting profileID %@ onto registration",  buf,  0xCu);
            }

            -[IDSRegistration setProfileID:](self->_registrationInfo, "setProfileID:", v91);
          }

        if ((v81 & 1) != 0) {
          goto LABEL_122;
        }
        double v89 = &v57[16 * v58];
        uint64_t v91 = *(void *)v89;
        uint64_t v90 = *((void *)v89 + 1);
        id v69 = __OFSUB__(v90, v91);
        __int16 v92 = v90 - v91;
        if (v69) {
          goto LABEL_125;
        }
        if (v92 < v80) {
          goto LABEL_14;
        }
LABEL_90:
        v97 = v58 - 1;
        if (v58 - 1 >= v20)
        {
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
          goto LABEL_138;
        }

        if (!v18) {
          goto LABEL_140;
        }
        __int16 v98 = v16;
        unsigned int v99 = &v57[16 * v97];
        __int16 v100 = *(void *)v99;
        uint64_t v101 = &v57[16 * v58];
        double v102 = *((void *)v101 + 1);
        uint64_t v103 = v127;
        sub_100508844( (char *)(v18 + 8LL * *(void *)v99),  (char *)(v18 + 8LL * *(void *)v101),  (char *)(v18 + 8 * v102),  v126);
        uint64_t v127 = v103;
        if (v103)
        {
LABEL_98:
          uint64_t v106 = v98;
          goto LABEL_112;
        }

        if (v102 < v100) {
          goto LABEL_115;
        }
        if (v58 > *((void *)v98 + 2)) {
          goto LABEL_116;
        }
        *(void *)unsigned int v99 = v100;
        *(void *)&v57[16 * v97 + 8] = v102;
        __int16 v104 = *((void *)v98 + 2);
        if (v58 >= v104) {
          goto LABEL_117;
        }
        id v16 = v98;
        id v20 = v104 - 1;
        memmove(&v57[16 * v58], v101 + 16, 16 * (v104 - 1 - v58));
        *((void *)v98 + 2) = v104 - 1;
        id v18 = v131;
        if (v104 <= 2) {
          goto LABEL_14;
        }
      }
    }

    id v20 = 1LL;
LABEL_14:
    id v10 = v124;
    id v17 = (Swift::Int)v125;
  }

  if (__OFADD__(v21, v121)) {
    goto LABEL_137;
  }
  if (v21 + v121 >= v10) {
    __int128 v42 = v10;
  }
  else {
    __int128 v42 = v21 + v121;
  }
  if (v42 >= v21)
  {
    if (v22 != v42)
    {
      id v122 = v42;
      uint64_t v123 = v21;
      __int128 v117 = v16;
      id v43 = (void *)(v119 + 8 * v22);
      do
      {
        id v44 = v22;
        uint64_t v45 = *(void *)(v18 + 8 * v22);
        id v46 = v123;
        id v125 = v43;
        while (1)
        {
          uint64_t v47 = *v43;
          swift_retain(v45);
          swift_retain(v47);
          sub_100447148(v9);
          uint64_t v48 = v129;
          sub_100447148(v129);
          id v49 = static Date.> infix(_:_:)(v9, v48);
          uint64_t v50 = *(void (**)(void *, uint64_t))(v128 + 8);
          uint64_t v51 = v48;
          id v52 = v130;
          v50(v51, v130);
          v50(v9, v52);
          swift_release(v45);
          swift_release(v47);
          if ((v49 & 1) == 0) {
            break;
          }
          id v18 = v131;
          if (!v131) {
            goto LABEL_139;
          }
          BOOL v53 = *v43;
          uint64_t v45 = v43[1];
          *id v43 = v45;
          v43[1] = v53;
          --v43;
          if (v44 == ++v46) {
            goto LABEL_43;
          }
        }

        id v18 = v131;
LABEL_43:
        uint64_t v22 = v44 + 1;
        id v43 = v125 + 1;
      }

      while (v44 + 1 != v122);
      uint64_t v22 = v122;
      id v16 = v117;
      id v21 = v123;
    }

    goto LABEL_50;
  }

LABEL_116:
            LODWORD(v35) = 1;
          }

          if ((_DWORD)v35 != 1)
          {
            if ((_DWORD)v35 != 3)
            {
              if ((_DWORD)v35 != 2)
              {
                id v72 = v220;
                if ((_DWORD)v35)
                {
LABEL_159:
                  uint64_t v173 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                  if (os_log_type_enabled(v173, OS_LOG_TYPE_DEFAULT))
                  {
                    uint64_t v174 = self->_registrationInfo;
                    *(_DWORD *)buf = 138412290;
                    *(void *)v239 = v174;
                    _os_log_impl( (void *)&_mh_execute_header,  v173,  OS_LOG_TYPE_DEFAULT,  "Created new registration info: %@",  buf,  0xCu);
                  }

                  goto LABEL_162;
                }

                uint64_t v135 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistration mainID](self->_registrationInfo, "mainID"));
                if (v135)
                {
                  uint64_t v142 = (void *)objc_claimAutoreleasedReturnValue( +[IDSRegistrationKeychainManager sharedInstance]( &OBJC_CLASS___IDSRegistrationKeychainManager,  "sharedInstance"));
                  v143 = (void *)objc_claimAutoreleasedReturnValue([v142 smsSignatureForID:v135]);

                  v144 = (void *)objc_claimAutoreleasedReturnValue(+[FTDeviceSupport sharedInstance](&OBJC_CLASS___FTDeviceSupport, "sharedInstance"));
                  uint64_t v145 = [v144 isC2KEquipment];

                  v146 = (void *)objc_claimAutoreleasedReturnValue( +[IDSRegistrationKeyManager sharedInstance]( &OBJC_CLASS___IDSRegistrationKeyManager,  "sharedInstance"));
                  v147 = (void *)objc_claimAutoreleasedReturnValue([v146 keyPairSignature]);

                  uint64_t v148 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                  if (os_log_type_enabled(v148, OS_LOG_TYPE_DEFAULT))
                  {
                    v149 = @"NO";
                    *(_DWORD *)buf = 138412802;
                    *(void *)v239 = v135;
                    *(_WORD *)&v239[8] = 2112;
                    if ((_DWORD)v145) {
                      v149 = @"YES";
                    }
                    v240 = v149;
                    v241 = 2112;
                    v242 = v147;
                    _os_log_impl( (void *)&_mh_execute_header,  v148,  OS_LOG_TYPE_DEFAULT,  "Setting idsUserID (for auth cert), mainID, isCDMA, and keyPairSignature on phone number registrati on {mainID: %@, isC2K: %@, keyPairSignature: %@}",  buf,  0x20u);
                  }

                  uint64_t v150 = self->_registrationInfo;
                  v151 = (void *)objc_claimAutoreleasedReturnValue([v135 _IDFromFZIDType:0]);
                  -[IDSRegistration setIdsUserID:](v150, "setIdsUserID:", v151);

                  v152 = self->_registrationInfo;
                  unsigned int v153 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v145));
                  -[IDSRegistration setIsCDMA:](v152, "setIsCDMA:", v153);

                  -[IDSRegistration setKeyPairSignature:](self->_registrationInfo, "setKeyPairSignature:", v147);
                  id v72 = v220;
                }

                else
                {
                  v143 = 0LL;
                }

                if ([v143 length]) {
                  -[IDSRegistration setAuthenticationToken:](self->_registrationInfo, "setAuthenticationToken:", v143);
                }

LABEL_158:
                goto LABEL_159;
              }

              v158 = self->_registrationInfo;
              v159 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDAccount loginID](self, "loginID"));
              -[IDSRegistration setMainID:](v158, "setMainID:", v159);

              v160 = self->_registrationInfo;
              uint64_t v161 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDAccount loginID](self, "loginID"));
              v162 = (void *)objc_claimAutoreleasedReturnValue([v161 _IDFromFZIDType:0]);
              -[IDSRegistration setIdsUserID:](v160, "setIdsUserID:", v162);

              v163 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDAccount accountController](self, "accountController"));
              v164 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDAccount serviceController](self, "serviceController"));
              v165 = (void *)objc_claimAutoreleasedReturnValue([v164 iCloudService]);
              v166 = (void *)objc_claimAutoreleasedReturnValue([v163 appleIDAccountOnService:v165]);
              uint64_t v135 = (void *)objc_claimAutoreleasedReturnValue([v166 loginID]);

              -[IDSRegistration setEmail:](self->_registrationInfo, "setEmail:", v135);
              -[IDSRegistration setNeedsRenewal:](self->_registrationInfo, "setNeedsRenewal:", 1LL);
LABEL_157:
              id v72 = v220;
              goto LABEL_158;
            }

            v154 = self->_registrationInfo;
            unsigned int v155 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDAccount loginID](self, "loginID"));
            -[IDSRegistration setMainID:](v154, "setMainID:", v155);

            uint64_t v156 = self->_registrationInfo;
            uint64_t v135 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDAccount loginID](self, "loginID"));
            v157 = (void *)objc_claimAutoreleasedReturnValue([v135 _IDFromFZIDType:0]);
            -[IDSRegistration setIdsUserID:](v156, "setIdsUserID:", v157);
LABEL_156:

            goto LABEL_157;
          }

  v261 = kIDSQRAllocateKey_ReportingDataBlob;
  v262 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", kIDSQRAllocateKey_ReportingDataBlob, v950, v993, v1036));
  v263 = (void *)objc_claimAutoreleasedReturnValue([v262 base64EncodedStringWithOptions:0]);
  v265 = objc_opt_class(&OBJC_CLASS___NSString, v264);
  v266 = objc_opt_isKindOfClass(v263, v265);

  v267 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v261]);
  v268 = (NSString *)objc_claimAutoreleasedReturnValue([v267 base64EncodedStringWithOptions:0]);
  v269 = v268;
  if ((v266 & 1) != 0)
  {
    reportingDataBlob = self->_reportingDataBlob;
    self->_reportingDataBlob = v268;
LABEL_118:

    goto LABEL_125;
  }

  if (v269)
  {
    v271 = OSLogHandleForIDSCategory("QRAllocator");
    v272 = (os_log_s *)objc_claimAutoreleasedReturnValue(v271);
    if (os_log_type_enabled(v272, OS_LOG_TYPE_DEBUG))
    {
      v273 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v261]);
      v274 = (id)objc_claimAutoreleasedReturnValue([v273 base64EncodedStringWithOptions:0]);
      v276 = (id)objc_opt_class(&OBJC_CLASS___NSString, v275);
      v277 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v261]);
      v278 = (void *)objc_claimAutoreleasedReturnValue([v277 base64EncodedStringWithOptions:0]);
      v280 = (id)objc_opt_class(v278, v279);
      *(_DWORD *)buf = 138412802;
      v1070 = v274;
      v1071 = 2112;
      v1072 = v276;
      v1073 = 2112;
      v1074 = v280;
      _os_log_impl( (void *)&_mh_execute_header,  v272,  OS_LOG_TYPE_DEBUG,  "Unexpected datatype. %@ should be of type %@, not %@",  buf,  0x20u);

      uint64_t v31 = &IMInsertBoolsToXPCDictionary_ptr;
    }

    if (os_log_shim_legacy_logging_enabled(v281))
    {
      if (_IDSShouldLog(1LL, @"QRAllocator"))
      {
        v267 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v261]);
        reportingDataBlob = (NSString *)objc_claimAutoreleasedReturnValue([v267 base64EncodedStringWithOptions:0]);
        v283 = objc_opt_class(&OBJC_CLASS___NSString, v282);
        v284 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v261]);
        v285 = (void *)objc_claimAutoreleasedReturnValue([v284 base64EncodedStringWithOptions:0]);
        v994 = v283;
        v1037 = objc_opt_class(v285, v286);
        v951 = reportingDataBlob;
        _IDSLogV( 1LL,  @"IDSFoundation",  @"QRAllocator",  @"Unexpected datatype. %@ should be of type %@, not %@");

        goto LABEL_118;
      }
    }
  }

      swift_bridgeObjectRelease(v110);
      id v124 = v126;
      v126[2] = 0LL;
      return swift_bridgeObjectRelease(v124);
    }
  }

  else
  {
    id v18 = v17 >> 1;
    id v19 = static Array._allocateBufferUninitialized(minimumCapacity:)(v17 >> 1, v139);
    *(void *)(v19 + 16) = v18;
    id v20 = *(unsigned __int8 *)(v132 + 80);
    id v126 = (void *)v19;
    id v131 = v19 + ((v20 + 32) & ~v20);
  }

  uint64_t v22 = 0LL;
  id v21 = (char *)&_swiftEmptyArrayStorage;
  while (1)
  {
    id v24 = v22;
    uint64_t v25 = v22 + 1;
    if (v22 + 1 >= v15)
    {
      ++v22;
      goto LABEL_24;
    }

    uint64_t v26 = *v138;
    uint64_t v27 = *(void *)(v132 + 72);
    id v28 = v136;
    sub_100410FD0(*v138 + v27 * v25, v136, &qword_1009BCAD8);
    uint64_t v29 = v26 + v27 * v22;
    id v30 = v137;
    sub_100410FD0(v29, v137, &qword_1009BCAD8);
    LODWORD(v135) = static Date.> infix(_:_:)(v28 + *(int *)(v139 + 48), v30 + *(int *)(v139 + 48));
    sub_10040A274(v30, &qword_1009BCAD8);
    sub_10040A274(v28, &qword_1009BCAD8);
    uint64_t v22 = v24 + 2;
    uint64_t v134 = v26;
    id v141 = v27;
    if (v24 + 2 >= v15) {
      goto LABEL_21;
    }
    uint64_t v130 = v24;
    uint64_t v31 = v21;
    uint64_t v32 = v27 * v25;
    uint64_t v33 = v26;
    uint64_t v34 = v24 + 2;
    id v35 = v27 * v34;
    do
    {
      uint64_t v36 = v15;
      uint64_t v37 = v136;
      sub_100410FD0(v33 + v35, v136, &qword_1009BCAD8);
      id v38 = v137;
      sub_100410FD0(v33 + v32, v137, &qword_1009BCAD8);
      double v39 = static Date.> infix(_:_:)(v37 + *(int *)(v139 + 48), v38 + *(int *)(v139 + 48));
      sub_10040A274(v38, &qword_1009BCAD8);
      sub_10040A274(v37, &qword_1009BCAD8);
      if (((v135 ^ v39) & 1) != 0)
      {
        id v21 = v31;
        uint64_t v22 = v34;
        id v24 = v130;
        id v15 = v36;
        if ((v135 & 1) != 0) {
          goto LABEL_42;
        }
        goto LABEL_24;
      }

      v33 += v141;
      ++v34;
      id v15 = v36;
    }

    while (v36 != v34);
    id v21 = v31;
    uint64_t v22 = v36;
    id v24 = v130;
LABEL_21:
    if ((v135 & 1) == 0) {
      goto LABEL_24;
    }
LABEL_42:
    uint64_t v56 = v141;
    if (v22 < v24) {
      goto LABEL_140;
    }
    if (v24 < v22) {
      break;
    }
LABEL_24:
    __int128 v40 = v138;
    if (v22 < v15) {
      goto LABEL_25;
    }
LABEL_57:
    if (v22 < v24) {
      goto LABEL_133;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v21) & 1) == 0) {
      id v21 = sub_1004C4884(0LL, *((void *)v21 + 2) + 1LL, 1, v21);
    }
    id v66 = *((void *)v21 + 2);
    uint64_t v65 = *((void *)v21 + 3);
    uint64_t v23 = v66 + 1;
    if (v66 >= v65 >> 1) {
      id v21 = sub_1004C4884((char *)(v65 > 1), v66 + 1, 1, v21);
    }
    *((void *)v21 + 2) = v23;
    BOOL v67 = v21 + 32;
    id v68 = &v21[16 * v66 + 32];
    *(void *)id v68 = v24;
    *((void *)v68 + 1) = v22;
    if (v66)
    {
      while (1)
      {
        id v69 = v23 - 1;
        if (v23 >= 4)
        {
          uint64_t v74 = &v67[16 * v23];
          id v75 = *((void *)v74 - 8);
          uint64_t v76 = *((void *)v74 - 7);
          id v80 = __OFSUB__(v76, v75);
          uint64_t v77 = v76 - v75;
          if (v80) {
            goto LABEL_122;
          }
          uint64_t v79 = *((void *)v74 - 6);
          uint64_t v78 = *((void *)v74 - 5);
          id v80 = __OFSUB__(v78, v79);
          id v72 = v78 - v79;
          uint64_t v73 = v80;
          if (v80) {
            goto LABEL_123;
          }
          id v81 = v23 - 2;
          id v82 = &v67[16 * v23 - 32];
          uint64_t v84 = *(void *)v82;
          id v83 = *((void *)v82 + 1);
          id v80 = __OFSUB__(v83, v84);
          uint64_t v85 = v83 - v84;
          if (v80) {
            goto LABEL_125;
          }
          id v80 = __OFADD__(v72, v85);
          uint64_t v86 = v72 + v85;
          if (v80) {
            goto LABEL_128;
          }
          if (v86 >= v77)
          {
            __int16 v104 = &v67[16 * v69];
            uint64_t v106 = *(void *)v104;
            id v105 = *((void *)v104 + 1);
            id v80 = __OFSUB__(v105, v106);
            id v107 = v105 - v106;
            if (v80) {
              goto LABEL_132;
            }
            v97 = v72 < v107;
            goto LABEL_94;
          }
        }

        else
        {
          if (v23 != 3)
          {
            __int16 v98 = *((void *)v21 + 4);
            unsigned int v99 = *((void *)v21 + 5);
            id v80 = __OFSUB__(v99, v98);
            uint64_t v91 = v99 - v98;
            __int16 v92 = v80;
            goto LABEL_88;
          }

          id v71 = *((void *)v21 + 4);
          uint64_t v70 = *((void *)v21 + 5);
          id v80 = __OFSUB__(v70, v71);
          id v72 = v70 - v71;
          uint64_t v73 = v80;
        }

        if ((v73 & 1) != 0) {
          goto LABEL_124;
        }
        id v81 = v23 - 2;
        __int16 v87 = &v67[16 * v23 - 32];
        double v89 = *(void *)v87;
        __int128 v88 = *((void *)v87 + 1);
        uint64_t v90 = __OFSUB__(v88, v89);
        uint64_t v91 = v88 - v89;
        __int16 v92 = v90;
        if (v90) {
          goto LABEL_127;
        }
        uint64_t v93 = &v67[16 * v69];
        uint64_t v95 = *(void *)v93;
        char v94 = *((void *)v93 + 1);
        id v80 = __OFSUB__(v94, v95);
        __int16 v96 = v94 - v95;
        if (v80) {
          goto LABEL_130;
        }
        if (__OFADD__(v91, v96)) {
          goto LABEL_131;
        }
        if (v91 + v96 >= v72)
        {
          v97 = v72 < v96;
LABEL_94:
          if (v97) {
            id v69 = v81;
          }
          goto LABEL_96;
        }

LABEL_118:
          uint64_t v123 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
          if (os_log_type_enabled(v123, OS_LOG_TYPE_DEFAULT))
          {
            id v124 = self->_registrationInfo;
            *(_DWORD *)buf = 138412290;
            *(void *)v239 = v124;
            _os_log_impl( (void *)&_mh_execute_header,  v123,  OS_LOG_TYPE_DEFAULT,  "Rebuilding aliases for: %@",  buf,  0xCu);
          }

          v230 = 0u;
          v231 = 0u;
          v228 = 0u;
          v229 = 0u;
          id v125 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDAccount _unprefixedURIStringsFromAccountInfo]( self,  "_unprefixedURIStringsFromAccountInfo"));
          id v126 = [v125 countByEnumeratingWithState:&v228 objects:v243 count:16];
          if (v126)
          {
            uint64_t v127 = v126;
            uint64_t v128 = *(void *)v229;
            do
            {
              for (k = 0LL; k != v127; k = (char *)k + 1)
              {
                if (*(void *)v229 != v128) {
                  objc_enumerationMutation(v125);
                }
                uint64_t v130 = *(void *)(*((void *)&v228 + 1) + 8LL * (void)k);
                id v131 = -[IDSDAccount _validationStatusForAlias:](self, "_validationStatusForAlias:", v130);
                id v132 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                id v133 = os_log_type_enabled(v132, OS_LOG_TYPE_DEFAULT);
                if (v131 == -1)
                {
                  if (v133)
                  {
                    *(_DWORD *)buf = 138412290;
                    *(void *)v239 = v130;
                    _os_log_impl( (void *)&_mh_execute_header,  v132,  OS_LOG_TYPE_DEFAULT,  " => ignoring failed validation email: %@",  buf,  0xCu);
                  }
                }

                else
                {
                  if (v133)
                  {
                    *(_DWORD *)buf = 138412290;
                    *(void *)v239 = v130;
                    _os_log_impl( (void *)&_mh_execute_header,  v132,  OS_LOG_TYPE_DEFAULT,  " => adding candidate email: %@",  buf,  0xCu);
                  }

                  -[IDSRegistration addCandidateEmail:](self->_registrationInfo, "addCandidateEmail:", v130);
                }
              }

              uint64_t v127 = [v125 countByEnumeratingWithState:&v228 objects:v243 count:16];
            }

            while (v127);
          }

          uint64_t v134 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDAccount accountInfo](self, "accountInfo"));
          uint64_t v135 = (void *)objc_claimAutoreleasedReturnValue([v134 objectForKey:kIDSServiceDefaultsProfileKey]);

          uint64_t v136 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
          if (os_log_type_enabled(v136, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            *(void *)v239 = v135;
            _os_log_impl( (void *)&_mh_execute_header,  v136,  OS_LOG_TYPE_DEFAULT,  "Existing region profile: %@",  buf,  0xCu);
          }

          if (![v135 count]) {
            goto LABEL_157;
          }
          double v137 = (void *)objc_claimAutoreleasedReturnValue([v135 objectForKey:kIDSServiceDefaultsProfileValdationStatusKey]);
          uint64_t v138 = [v137 intValue];

          if (v138 != 3) {
            goto LABEL_157;
          }
          id v139 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
          if (os_log_type_enabled(v139, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v139,  OS_LOG_TYPE_DEFAULT,  "We have a profile, and it's validated!",  buf,  2u);
          }

          BOOL v140 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistration regionID](self->_registrationInfo, "regionID"));
          id v141 = [v140 length];

          if (v141) {
            goto LABEL_157;
          }
          id v167 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
          if (os_log_type_enabled(v167, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v167,  OS_LOG_TYPE_DEFAULT,  "No region ID, we'll use our profile's",  buf,  2u);
          }

          uint64_t v168 = self->_registrationInfo;
          uint64_t v169 = (void *)objc_claimAutoreleasedReturnValue([v135 objectForKey:kIDSServiceDefaultsProfileRegionIDKey]);
          -[IDSRegistration setRegionID:](v168, "setRegionID:", v169);

          double v170 = self->_registrationInfo;
          uint64_t v171 = (void *)objc_claimAutoreleasedReturnValue([v135 objectForKey:kIDSServiceDefaultsProfileBaseNumberKey]);
          -[IDSRegistration setRegionBasePhoneNumber:](v170, "setRegionBasePhoneNumber:", v171);

          v172 = self->_registrationInfo;
          v157 = (void *)objc_claimAutoreleasedReturnValue([v135 objectForKey:kIDSServiceDefaultsProfileServerContextKey]);
          -[IDSRegistration setRegionServerContext:](v172, "setRegionServerContext:", v157);
          goto LABEL_156;
        }

        return 0;
      }

      id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_34;
      }
      uint64_t v26 = -[IDSRegistration registrationType](self->_registrationInfo, "registrationType");
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)v239 = v26;
      uint64_t v23 = "Registration type is not supported: %d";
      id v24 = v20;
      uint64_t v25 = 8;
    }

    else
    {
      id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_34;
      }
      id v21 = -[IDSDAccount _neededRegistrationType](self, "_neededRegistrationType");
      uint64_t v22 = -[IDSRegistration registrationType](self->_registrationInfo, "registrationType");
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)v239 = v21;
      *(_WORD *)&v239[4] = 1024;
      *(_DWORD *)&v239[6] = v22;
      uint64_t v23 = "Our registration types don't match, needs rebuild  (%d vs %d)";
      id v24 = v20;
      uint64_t v25 = 14;
    }

    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, v23, buf, v25);
    goto LABEL_34;
  }

  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
    sub_1006A0E60(self);
  }
LABEL_7:
  int v6 = 0;
LABEL_8:

  return v6;
}
}

  state.opaque[1] = 0xAAAAAAAAAAAAAAAALL;
  id v111 = _os_activity_create( (void *)&_mh_execute_header,  "Not broadcasting",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[0] = 0xAAAAAAAAAAAAAAAALL;
  os_activity_scope_enter(v111, &state);
  if ([*(id *)(*(void *)(*(void *)(a1 + 152) + 8) + 40) integerValue] != (id)245)
  {
    uint64_t v93 = OSLogHandleForIDSCategory("Warning");
    char v94 = (os_log_s *)objc_claimAutoreleasedReturnValue(v93);
    if (os_log_type_enabled(v94, OS_LOG_TYPE_ERROR))
    {
      uint64_t v95 = *(void **)(*(void *)(*(void *)(a1 + 152) + 8LL) + 40LL);
      __int16 v96 = *(void **)(a1 + 88);
      v97 = *(void **)(a1 + 104);
      *(_DWORD *)buf = 138412802;
      v163 = v95;
      v164 = 2112;
      v165 = v96;
      v166 = 2112;
      id v167 = v97;
      _os_log_impl( (void *)&_mh_execute_header,  v94,  OS_LOG_TYPE_ERROR,  "No broadcast desired for command %@ topic %@ -- deleting message with guid %@",  buf,  0x20u);
    }

    if (os_log_shim_legacy_logging_enabled(v98))
    {
      _IDSWarnV( @"IDSFoundation",  @"No broadcast desired for command %@ topic %@ -- deleting message with guid %@");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"No broadcast desired for command %@ topic %@ -- deleting message with guid %@");
      id v105 = *(void *)(a1 + 88);
      id v107 = *(void *)(a1 + 104);
      double v102 = *(void *)(*(void *)(*(void *)(a1 + 152) + 8LL) + 40LL);
      *(void *)&unsigned int v99 = _IDSLogTransport( @"Warning",  @"IDS",  @"No broadcast desired for command %@ topic %@ -- deleting message with guid %@").n128_u64[0];
    }

    +[IDSDMessageStore deleteIncomingMessageWithGUID:]( &OBJC_CLASS___IDSDMessageStore,  "deleteIncomingMessageWithGUID:",  *(void *)(a1 + 104),  v99,  v102,  v105,  v107);
  }

  os_activity_scope_leave(&state);
  cut_arc_os_release(&v111);

LABEL_125:
}

id sub_1001DE92C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (([*(id *)(a1 + 32) shouldRegisterUsingDSHandle] & 1) != 0
    || ([v3 _appearsToBeDSID] & 1) == 0)
  {
    id v4 = v3;
  }

  else
  {
    id v4 = 0LL;
  }

  return v4;
}

void sub_1001DE980(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6)
{
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  id v13 = a6;
  __int16 v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    int v20 = 138413058;
    id v21 = v10;
    __int16 v22 = 2112;
    id v23 = v11;
    __int16 v24 = 2112;
    id v25 = v12;
    __int16 v26 = 2112;
    id v27 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "*** Accounts response:   username: %@   serviceUserName: %@   profileID: %@   selfHandle: %@",  (uint8_t *)&v20,  0x2Au);
  }

  if ([v13 length])
  {
    id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      int v20 = 138412290;
      id v21 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "   Setting self ID: %@",  (uint8_t *)&v20,  0xCu);
    }

    [*(id *)(*(void *)(a1 + 32) + 16) setDSHandle:v13];
    if (![v12 length]) {
      goto LABEL_12;
    }
  }

  else if (![v12 length])
  {
    goto LABEL_15;
  }

  id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    int v20 = 138412290;
    id v21 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "   Setting profile ID: %@",  (uint8_t *)&v20,  0xCu);
  }

  [*(id *)(*(void *)(a1 + 32) + 16) setProfileID:v12];
  id v17 = *(void **)(a1 + 32);
  id v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObject:forKey:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObject:forKey:",  v12,  kIDSServiceDefaultsAuthorizationIDKey));
  [v17 _writeAccountDefaults:v18 force:1];

LABEL_12:
  id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v20) = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "   Saving fixed account", (uint8_t *)&v20, 2u);
  }

  [*(id *)(*(void *)(a1 + 32) + 16) saveToKeychain];
LABEL_15:
}

id sub_1001E039C(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 objectForKey:kIDSServiceDefaultsAliasKey]);
  if ([*(id *)(a1 + 32) shouldRegisterUsingDSHandle]
    && [v3 _FZIDType] == (id)2
    || ([v3 isEqualToIgnoringCase:kIDSServiceDefaultsSentinelAlias] & 1) != 0
    || ([*(id *)(a1 + 40) containsObject:v3] & 1) != 0)
  {
    id v4 = 0LL;
  }

  else
  {
    id v4 = v3;
  }

  return v4;
}

id sub_1001E1BF0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _reregister];
}

void sub_1001E2590( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
}

void sub_1001E3178( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, os_activity_scope_state_s state, char a17)
{
}

void sub_1001E374C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
}

void sub_1001E4B1C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, os_activity_scope_state_s state, char a21)
{
}

void sub_1001E4B90(id a1, id a2)
{
}

void sub_1001E4FBC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
}

LABEL_78:
  -[IDSDAccount _updateVettedAliases:emailInfo:addToCurrentHandlesIfNeeded:]( self,  "_updateVettedAliases:emailInfo:addToCurrentHandlesIfNeeded:",  v81,  v80,  0LL);
  if (-[IDSDAccount shouldAutoRegisterAllHandles](self, "shouldAutoRegisterAllHandles"))
  {
    BOOL v53 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v106 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_DEFAULT,  " => We should auto configure all handles",  v106,  2u);
    }

    id v54 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v55 = (NSMutableArray *)objc_claimAutoreleasedReturnValue(-[IDSDAccount vettedAliases](self, "vettedAliases"));
      *(_DWORD *)uint64_t v106 = 138412290;
      id v107 = v55;
      _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, "    Vetted: %@", v106, 0xCu);
    }

    uint64_t v56 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
    {
      id v57 = (NSMutableArray *)objc_claimAutoreleasedReturnValue( -[IDSDAccount _unprefixedURIStringsFromAccountInfo]( self,  "_unprefixedURIStringsFromAccountInfo"));
      *(_DWORD *)uint64_t v106 = 138412290;
      id v107 = v57;
      _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "   Current: %@", v106, 0xCu);
    }

    uint64_t v90 = 0u;
    uint64_t v91 = 0u;
    __int128 v88 = 0u;
    double v89 = 0u;
    char v58 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDAccount vettedAliases](self, "vettedAliases"));
    uint64_t v59 = [v58 countByEnumeratingWithState:&v88 objects:v105 count:16];
    if (v59)
    {
      id v60 = *(void *)v89;
      do
      {
        for (j = 0LL; j != v59; j = (char *)j + 1)
        {
          if (*(void *)v89 != v60) {
            objc_enumerationMutation(v58);
          }
          char v62 = *(NSMutableArray **)(*((void *)&v88 + 1) + 8LL * (void)j);
          double v63 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
          if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)uint64_t v106 = 138412290;
            id v107 = v62;
            _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "      Checking: %@", v106, 0xCu);
          }

          uint64_t v64 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDAccount _unprefixedURIStringsFromAccountInfo]( self,  "_unprefixedURIStringsFromAccountInfo"));
          uint64_t v65 = [v64 containsObject:v62];

          if ((v65 & 1) != 0)
          {
            id v66 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
            if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)uint64_t v106 = 0;
              BOOL v67 = v66;
              id v68 = "      => Already in alias set";
              goto LABEL_100;
            }

            goto LABEL_101;
          }

          id v69 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
          if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)uint64_t v106 = 138412290;
            id v107 = v62;
            _os_log_impl( (void *)&_mh_execute_header,  v69,  OS_LOG_TYPE_DEFAULT,  "         => Not in alias strings: %@",  v106,  0xCu);
          }

          if ([*(id *)(*(void *)&buf[8] + 40) containsObject:v62])
          {
            id v66 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
            if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)uint64_t v106 = 0;
              BOOL v67 = v66;
              id v68 = "         => Already in auto register set";
LABEL_100:
              _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEFAULT, v68, v106, 2u);
            }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
  __break(1u);
  return result;
}

LABEL_101:
            continue;
          }

          uint64_t v70 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
          if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)uint64_t v106 = 138412290;
            id v107 = v62;
            _os_log_impl( (void *)&_mh_execute_header,  v70,  OS_LOG_TYPE_DEFAULT,  "         => Not in auto register: %@",  v106,  0xCu);
          }

          [*(id *)(*(void *)&buf[8] + 40) addObject:v62];
        }

        uint64_t v59 = [v58 countByEnumeratingWithState:&v88 objects:v105 count:16];
      }

      while (v59);
    }
  }

  if ([*(id *)(*(void *)&buf[8] + 40) count])
  {
    id v71 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
    {
      id v72 = *(NSMutableArray **)(*(void *)&buf[8] + 40LL);
      *(_DWORD *)uint64_t v106 = 138412290;
      id v107 = v72;
      _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEFAULT, "** Auto registering handles: %@", v106, 0xCu);
    }

    -[IDSDAccount _addAliases:](self, "_addAliases:", *(void *)(*(void *)&buf[8] + 40LL));
    -[IDSDAccount _validateAliases:validateAlreadyValid:]( self,  "_validateAliases:validateAlreadyValid:",  *(void *)(*(void *)&buf[8] + 40LL),  1LL);
  }

  else
  {
    uint64_t v73 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v106 = 0;
      _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEFAULT, "No handles to auto register", v106, 2u);
    }
  }

  _Block_object_dispose(buf, 8);
}

                -[NSMutableSet addObject:](v117, "addObject:", v114);
              }

              if (!v110)
              {
                else {
                  uint64_t v110 = 0LL;
                }
              }
            }
          }

          __int128 v109 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v107,  "countByEnumeratingWithState:objects:count:",  &v294,  v322,  16LL);
        }

        while (v109);
LABEL_110:

        v118 = v104;
        if (v118)
        {
          uint64_t v119 = (__CFDictionary *)theDict;
          CFDictionarySetValue((CFMutableDictionaryRef)theDict, @"user-id", v118);
          id v120 = v260;
          a1 = v261;
          uint64_t v41 = v229;
          double v121 = v249;
        }

        else
        {
          id v122 = &_os_log_default;
          id v120 = v260;
          a1 = v261;
          uint64_t v41 = v229;
          uint64_t v119 = (__CFDictionary *)theDict;
          double v121 = v249;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412546;
            v317 = @"user-id";
            v318 = 2080;
            v319 = "userDictionary";
            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s",  buf,  0x16u);
          }
        }

        uint64_t v123 = v247;
        if (v123)
        {
          CFDictionarySetValue(v119, @"uris", v123);
        }

        else
        {
          id v124 = &_os_log_default;
          if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412546;
            v317 = @"uris";
            v318 = 2080;
            v319 = "userDictionary";
            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s",  buf,  0x16u);
          }
        }

        v248 = v123;

        id v125 = value;
        if (v125) {
          CFDictionarySetValue(v119, @"client-data", v125);
        }

        id v126 = v121;
        if (v126) {
          CFDictionarySetValue(v119, @"kt-loggable-data", v126);
        }
        v231 = v126;

        uint64_t v127 = v255;
        valuea = v127;
        if (v255)
        {
          CFDictionarySetValue(v119, @"kt-account-key", v127);
          uint64_t v127 = valuea;
        }

        uint64_t v128 = v253;
        v256 = v128;
        if (v253)
        {
          CFDictionarySetValue(v119, @"kt-account-key-ts", v128);
          uint64_t v128 = v256;
        }

        uint64_t v129 = v235;
        v254 = v129;
        if (v235)
        {
          CFDictionarySetValue(v119, @"kt-opt-ts", v129);
          uint64_t v129 = v254;
        }

        uint64_t v130 = v233;
        if (v237 == (id)1) {
          CFDictionarySetValue(v119, @"kt-opt-in", @"true");
        }

        id v131 = v251;
        v252 = v131;
        if (v131)
        {
          CFDictionarySetValue(v119, @"kt-opt-absent", v131);
          id v131 = v252;
        }

        id v132 = v232;
        v250 = v132;
        if (v132)
        {
          CFDictionarySetValue(v119, @"kt-account-key-absent", v132);
          id v132 = v250;
        }

        v238 = v130;
        if (v110)
        {
          id v133 = 0;
          __int128 v42 = v243;
          goto LABEL_176;
        }

        uint64_t v134 = -[__CFString registrationType](v120, "registrationType");
        uint64_t v135 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
        if (os_log_type_enabled(v135, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v136 = @"YES";
          if (!*(_BYTE *)(a1 + 80)) {
            uint64_t v136 = @"NO";
          }
          *(_DWORD *)buf = 138412802;
          v317 = (const __CFString *)v262;
          v318 = 2112;
          v319 = (const char *)v267;
          v320 = 2112;
          v321 = v136;
          _os_log_impl( (void *)&_mh_execute_header,  v135,  OS_LOG_TYPE_DEFAULT,  "     already existing phone: %@         already existing appleID: %@   isInDualSIMMode: %@",  buf,  0x20u);
        }

        id v120 = v260;
        switch(v134)
        {
          case 0u:
            double v137 = *(unsigned __int8 *)(a1 + 80);
            if ((unint64_t)-[NSMutableSet count](v262, "count") <= v137)
            {
              uint64_t v138 = (os_log_s *)objc_claimAutoreleasedReturnValue(-[__CFString userUniqueIdentifier](v260, "userUniqueIdentifier"));
              v144 = (void *)objc_claimAutoreleasedReturnValue(+[IDSCTAdapter sharedInstance](&OBJC_CLASS___IDSCTAdapter, "sharedInstance"));
              uint64_t v145 = (void *)objc_claimAutoreleasedReturnValue([v144 SIMForIdentifier:v138]);

              v146 = [v145 slot];
              if (v146)
              {
                id v120 = v260;
                if (v146 == (id)2)
                {
                  v151 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
                  if (os_log_type_enabled(v151, OS_LOG_TYPE_FAULT))
                  {
                    *(_DWORD *)buf = 138412290;
                    v317 = (const __CFString *)v138;
                    _os_log_fault_impl( (void *)&_mh_execute_header,  v151,  OS_LOG_TYPE_FAULT,  "Trying to register account without corresponding SIM -- failing {userUniqueIdentifier: %@}",  buf,  0xCu);
                  }

                  id v133 = 1;
                  id v120 = v260;
                }

                else
                {
                  if (v146 == (id)1)
                  {
                    v147 = @"SIM2";
                    goto LABEL_166;
                  }

                  id v133 = 0;
                }

                v152 = &_os_log_default;
                if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 138412546;
                  v317 = @"tag";
                  v318 = 2080;
                  v319 = "userDictionary";
                  _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s",  buf,  0x16u);
                }
              }

              else
              {
                v147 = @"SIM";
                id v120 = v260;
LABEL_166:
                CFDictionarySetValue(v119, @"tag", v147);
                id v133 = 0;
              }

              __int128 v42 = v243;

              goto LABEL_175;
            }

            uint64_t v138 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
            if (os_log_type_enabled(v138, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)buf = 138412546;
              v317 = (const __CFString *)v119;
              v318 = 2112;
              v319 = (const char *)v262;
              _os_log_fault_impl( (void *)&_mh_execute_header,  v138,  OS_LOG_TYPE_FAULT,  "********* Not adding user dictionary, we already had another phone based registration: %@  (registrations: %@)",  buf,  0x16u);
            }

            id v133 = 1;
LABEL_155:
            __int128 v42 = v243;
LABEL_175:

            a1 = v261;
LABEL_176:
            if ([v248 count]
              || (-[__CFString hasSentinel](v120, "hasSentinel") & 1) != 0
              || (-[__CFString shouldRegisterUsingDSHandle](v120, "shouldRegisterUsingDSHandle") & 1) != 0)
            {
              if ((v133 & 1) != 0) {
                goto LABEL_180;
              }
LABEL_189:
              v163 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
              v164 = v163;
              if (v110)
              {
                if (os_log_type_enabled(v163, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 138412546;
                  v317 = v110;
                  v318 = 2112;
                  v319 = (const char *)theDict;
                  _os_log_debug_impl( (void *)&_mh_execute_header,  v164,  OS_LOG_TYPE_DEBUG,  "   ** Not adding user dictionary, already had one: %@  (%@)",  buf,  0x16u);
                }
              }

              else
              {
                if (os_log_type_enabled(v163, OS_LOG_TYPE_DEFAULT))
                {
                  v165 = (char *)(id)objc_claimAutoreleasedReturnValue(-[__CFString serviceType](v120, "serviceType"));
                  *(_DWORD *)buf = 138412546;
                  v317 = (const __CFString *)theDict;
                  v318 = 2112;
                  v319 = v165;
                  _os_log_impl( (void *)&_mh_execute_header,  v164,  OS_LOG_TYPE_DEFAULT,  "   Adding user dictionary: %@  for service: %@",  buf,  0x16u);

                  id v120 = v260;
                }

                -[NSMutableArray addObject:](v107, "addObject:", theDict);
              }

              v234 = v125;
              v236 = v118;
              v166 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
              if (os_log_type_enabled(v166, OS_LOG_TYPE_DEFAULT))
              {
                id v167 = (__CFString *)(id)objc_claimAutoreleasedReturnValue(-[__CFString idsUserID](v120, "idsUserID"));
                uint64_t v168 = (char *)(id)objc_claimAutoreleasedReturnValue(-[__CFString authenticationCert](v260, "authenticationCert"));
                *(_DWORD *)buf = 138412546;
                v317 = v167;
                v318 = 2112;
                v319 = v168;
                _os_log_impl( (void *)&_mh_execute_header,  v166,  OS_LOG_TYPE_DEFAULT,  "   => Adding auth user ID: %@    cert: %@",  buf,  0x16u);

                id v120 = v260;
              }

              uint64_t v169 = *(void **)(a1 + 48);
              double v170 = v120;
              uint64_t v171 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString idsUserID](v120, "idsUserID"));
              v172 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString authenticationCert](v170, "authenticationCert"));
              uint64_t v173 = (void *)objc_claimAutoreleasedReturnValue( +[IDSRegistrationKeyManager sharedInstance]( &OBJC_CLASS___IDSRegistrationKeyManager,  "sharedInstance"));
              uint64_t v174 = [v173 identityPrivateKey];
              v175 = (void *)objc_claimAutoreleasedReturnValue( +[IDSRegistrationKeyManager sharedInstance]( &OBJC_CLASS___IDSRegistrationKeyManager,  "sharedInstance"));
              objc_msgSend( v169,  "addAuthUserID:certificate:privateKey:publicKey:",  v171,  v172,  v174,  objc_msgSend(v175, "identityPublicKey"));

              a1 = v261;
              -[NSMutableArray addObject:](v224, "addObject:", v170);
              v159 = v242;
              __int128 v42 = v243;
              v160 = v246;
              v154 = theDict;
              uint64_t v41 = v229;
              id v125 = v234;
              v118 = v236;
            }

            else
            {
              if (v133)
              {
LABEL_180:
                unsigned int v153 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                v154 = theDict;
                if (os_log_type_enabled(v153, OS_LOG_TYPE_DEFAULT))
                {
                  unsigned int v155 = (char *)(id)objc_claimAutoreleasedReturnValue(-[__CFString serviceType](v120, "serviceType"));
                  *(_DWORD *)buf = 138412546;
                  v317 = (const __CFString *)theDict;
                  v318 = 2112;
                  v319 = v155;
                  _os_log_impl( (void *)&_mh_execute_header,  v153,  OS_LOG_TYPE_DEFAULT,  "   Failing registration for user dictionary: %@,  service: %@",  buf,  0x16u);

                  id v120 = v260;
                }

                [*(id *)(*(void *)(a1 + 32) + 8) removeObject:v120];
                [*(id *)(*(void *)(a1 + 32) + 32) removeObject:v120];
                uint64_t v156 = *(void **)(a1 + 32);
                v157 = v120;
                v158 = 0LL;
              }

              else
              {
                uint64_t v161 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                v154 = theDict;
                if (os_log_type_enabled(v161, OS_LOG_TYPE_DEFAULT))
                {
                  v162 = (char *)(id)objc_claimAutoreleasedReturnValue(-[__CFString serviceType](v120, "serviceType"));
                  *(_DWORD *)buf = 138412546;
                  v317 = (const __CFString *)theDict;
                  v318 = 2112;
                  v319 = v162;
                  _os_log_impl( (void *)&_mh_execute_header,  v161,  OS_LOG_TYPE_DEFAULT,  "   Skipping user dictionary: %@, no URIs   for service: %@",  buf,  0x16u);

                  id v120 = v260;
                }

                [*(id *)(*(void *)(a1 + 32) + 8) removeObject:v120];
                [*(id *)(*(void *)(a1 + 32) + 32) removeObject:v120];
                uint64_t v156 = *(void **)(a1 + 32);
                v157 = v120;
                v158 = 43LL;
              }

              [v156 _notifyRegistrationFailure:v157 responseCode:1 registrationError:v158 error:0 info:0];
              v159 = v242;
              v160 = v246;
            }

            __int128 v40 = 1;
LABEL_200:
            double v39 = v227;
LABEL_201:
            if ((id)++v42 != v39) {
              continue;
            }
            v176 = [obj countByEnumeratingWithState:&v302 objects:v324 count:16];
            double v39 = v176;
            if (!v176)
            {
LABEL_218:

              IDSAssignPushIdentityToMessage(*(void *)(a1 + 48));
              __int128 v183 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
              if (os_log_type_enabled(v183, OS_LOG_TYPE_DEFAULT))
              {
                __int128 v184 = *(const char **)(a1 + 56);
                *(_DWORD *)buf = 138412546;
                v317 = (const __CFString *)v228;
                v318 = 2112;
                v319 = v184;
                _os_log_impl( (void *)&_mh_execute_header,  v183,  OS_LOG_TYPE_DEFAULT,  "   Services: %@ for register: %@",  buf,  0x16u);
              }

              v266 = v40;

              __int128 v185 = *(void **)(a1 + 48);
              __int128 v186 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary allValues](v228, "allValues"));
              [v185 setServices:v186];

              [*(id *)(a1 + 48) setDeviceName:v226];
              id v187 = *(void **)(a1 + 48);
              v188 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 120) pushToken]);
              [v187 setPushToken:v188];

              v189 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
              if (os_log_type_enabled(v189, OS_LOG_TYPE_DEFAULT))
              {
                id v190 = (__CFString *)(id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 120) pushToken]);
                *(_DWORD *)buf = 138412290;
                v317 = v190;
                _os_log_impl( (void *)&_mh_execute_header,  v189,  OS_LOG_TYPE_DEFAULT,  "Push handler returned push token: %@",  buf,  0xCu);
              }

              [*(id *)(a1 + 48) setHardwareVersion:v222];
              [*(id *)(a1 + 48) setOsVersion:v221];
              [*(id *)(a1 + 48) setSoftwareVersion:v220];
              [*(id *)(a1 + 48) setPrivateDeviceData:v219];
              __int16 v191 = *(void **)(a1 + 48);
              double v192 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) registrationReasonTracker]);
              __int16 v193 = (void *)objc_claimAutoreleasedReturnValue([v192 registrationRequestReasonString]);
              [v191 setRequestReasonString:v193];

              v194 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) registrationReasonTracker]);
              [v194 clearRegistrationRequestReason];

              v286[0] = _NSConcreteStackBlock;
              v286[1] = 3221225472LL;
              v286[2] = sub_100218114;
              v286[3] = &unk_1008FE240;
              __int16 v195 = *(void **)(a1 + 48);
              uint64_t v196 = *(id *)(a1 + 40);
              v197 = *(void *)(a1 + 32);
              v287 = v196;
              v288 = v197;
              v264 = v224;
              v289 = v264;
              v290 = *(id *)(a1 + 64);
              v291 = *(id *)(a1 + 56);
              v292 = *(id *)(a1 + 72);
              v293 = *(_BYTE *)(a1 + 81);
              [v195 setCompletionBlock:v286];
              [*(id *)(a1 + 48) setTimeout:36000.0];
              sub_1001BFCFC();
              v284 = 0u;
              v285 = 0u;
              v282 = 0u;
              v283 = 0u;
              v198 = v228;
              v199 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:]( v198,  "countByEnumeratingWithState:objects:count:",  &v282,  v315,  16LL);
              if (v199)
              {
                v200 = v199;
                v201 = *(void *)v283;
                do
                {
                  for (ii = 0LL; ii != v200; ii = (char *)ii + 1)
                  {
                    if (*(void *)v283 != v201) {
                      objc_enumerationMutation(v198);
                    }
                    v203 = *(const __CFString **)(*((void *)&v282 + 1) + 8LL * (void)ii);
                    v204 = (char *)objc_claimAutoreleasedReturnValue(+[NSString stringGUID](&OBJC_CLASS___NSString, "stringGUID"));
                    v205 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v198, "objectForKey:", v203));
                    v206 = (void *)objc_claimAutoreleasedReturnValue( +[IDSLogFormatter descriptionForObject:options:]( &OBJC_CLASS___IDSLogFormatter,  "descriptionForObject:options:",  v205,  2LL));

                    v207 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                    if (os_log_type_enabled(v207, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)buf = 138412546;
                      v317 = v203;
                      v318 = 2112;
                      v319 = v204;
                      _os_log_impl( (void *)&_mh_execute_header,  v207,  OS_LOG_TYPE_DEFAULT,  "Registering service %@ timestampGUID: %@",  buf,  0x16u);
                    }

                    v279[0] = _NSConcreteStackBlock;
                    v279[1] = 3221225472LL;
                    v279[2] = sub_1002182D4;
                    v279[3] = &unk_1008F5F58;
                    v279[4] = v203;
                    v208 = v204;
                    v280 = v208;
                    v209 = v206;
                    v281 = v209;
                    cut_dispatch_log_queue(v279);
                  }

                  v200 = -[NSMutableDictionary countByEnumeratingWithState:objects:count:]( v198,  "countByEnumeratingWithState:objects:count:",  &v282,  v315,  16LL);
                }

                while (v200);
              }

              if ((v266 & 1) != 0 || *(_BYTE *)(v261 + 81))
              {
                v210 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v261 + 32) validationQueue]);
                v211 = *(void *)(v261 + 48);
                v273[0] = _NSConcreteStackBlock;
                v273[1] = 3221225472LL;
                v273[2] = sub_100218398;
                v273[3] = &unk_1008FE288;
                v274 = *(id *)(v261 + 64);
                v212 = *(id *)(v261 + 56);
                v213 = *(void *)(v261 + 32);
                v275 = v212;
                v276 = v213;
                v277 = *(id *)(v261 + 48);
                v278 = *(id *)(v261 + 72);
                v272[0] = _NSConcreteStackBlock;
                v272[1] = 3221225472LL;
                v272[2] = sub_100218580;
                v272[3] = &unk_1008FD6F8;
                v272[4] = *(void *)(v261 + 32);
                [v210 queueBuildingValidationDataIfNecessaryForMessage:v211 subsystem:1 withQueueCompletion:v273 sendBlock:v272];

                v214 = v217;
              }

              else
              {
                v215 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                v214 = v217;
                if (os_log_type_enabled(v215, OS_LOG_TYPE_DEFAULT))
                {
                  v216 = *(const __CFString **)(v261 + 64);
                  *(_DWORD *)buf = 138412290;
                  v317 = v216;
                  _os_log_impl( (void *)&_mh_execute_header,  v215,  OS_LOG_TYPE_DEFAULT,  "Not sending %@ we didn't have any authenticated registrations",  buf,  0xCu);
                }

                objc_msgSend(*(id *)(v261 + 32), "__dumpState");
              }

              id v3 = v218;
              goto LABEL_235;
            }

            break;
          case 1u:
            __int128 v42 = v243;
            if (!-[NSMutableSet count](v267, "count")) {
              goto LABEL_160;
            }
            uint64_t v138 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
            if (!os_log_type_enabled(v138, OS_LOG_TYPE_FAULT)) {
              goto LABEL_158;
            }
            *(_DWORD *)buf = 138412546;
            v317 = (const __CFString *)v119;
            v318 = 2112;
            v319 = (const char *)v267;
            uint64_t v142 = v138;
            v143 = "********* Not adding user dictionary, we already had another apple ID based registration: %@  (registrations: %@)";
            goto LABEL_204;
          case 2u:
            uint64_t v138 = v265;
            CFDictionarySetValue(v119, @"tag", v138);
            id v133 = 0;
            goto LABEL_155;
          case 3u:
            __int128 v42 = v243;
            if (!-[NSMutableSet count](v263, "count"))
            {
LABEL_160:
              id v133 = 0;
              goto LABEL_176;
            }

            uint64_t v138 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
            if (os_log_type_enabled(v138, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)buf = 138412546;
              v317 = (const __CFString *)v119;
              v318 = 2112;
              v319 = (const char *)v263;
              uint64_t v142 = v138;
              v143 = "********* Not adding user dictionary, we already had another device ID based registration: %@  (registrations: %@)";
LABEL_204:
              _os_log_fault_impl((void *)&_mh_execute_header, v142, OS_LOG_TYPE_FAULT, v143, buf, 0x16u);
            }

void sub_1001E6EA8(_Unwind_Exception *a1)
{
}

uint64_t sub_1001E6F64(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1001E6F74(uint64_t a1)
{
}

id sub_1001E6F7C(id a1, id a2)
{
  id v2 = a2;
  else {
    id v3 = 0LL;
  }

  return v3;
}

id sub_1001E6FBC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([*(id *)(a1 + 32) _validationStatusForAlias:v3] == (id)2)
  {
LABEL_4:
    [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) addObject:v3];
    goto LABEL_5;
  }

  if (([*(id *)(a1 + 40) containsObject:v3] & 1) == 0)
  {
    if (![*(id *)(a1 + 48) containsObject:v3])
    {
      id v4 = v3;
      goto LABEL_6;
    }

    goto LABEL_4;
  }

void sub_1001E7040(uint64_t a1, int a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  uint64_t v8 = *(void **)(a1 + 32);
  id v9 = v7;
  if (a2)
  {
    [v8 addAliases:v7];
    [*(id *)(a1 + 32) validateAliases:v9];
  }

  else
  {
    [v8 markAsUnselectedAlias:a4 withReason:3];
  }
}

void sub_1001E7524(uint64_t a1, uint64_t a2, uint64_t a3, int a4, void *a5)
{
  id v7 = a5;
  *(_BYTE *)(*(void *)(a1 + 32) + 80LL) &= ~0x10u;
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKey:@"handles"]);
  id v9 = v8;
  if (!a4) {
    goto LABEL_8;
  }
  if ([v8 count])
  {
    id v10 = objc_alloc_init(&OBJC_CLASS___NSDate);
    uint64_t v11 = *(void *)(a1 + 32);
    id v12 = *(void **)(v11 + 64);
    *(void *)(v11 + 64) = v10;

    id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uniqueID]);
      int v25 = 138412546;
      id v26 = v7;
      __int16 v27 = 2112;
      id v28 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Handles query completed with result: %@   account: %@",  (uint8_t *)&v25,  0x16u);
    }

    if ([*(id *)(a1 + 32) accountType] == 1) {
      [*(id *)(a1 + 32) _parseHandlesInfo:v9 currentAliases:*(void *)(a1 + 40) currentVettedAliases:*(void *)(a1 + 48)];
    }
    goto LABEL_11;
  }

  if (![v9 count])
  {
    __int16 v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v25) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  " *** This was successful, but handles were empty? Ignoring...",  (uint8_t *)&v25,  2u);
    }
  }

  else
  {
LABEL_8:
    id v15 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKey:@"status"]);
    id v16 = [v15 intValue];

    id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
    if (os_log_type_enabled(v17, OS_LOG_TYPE_FAULT)) {
      sub_1006A1D0C((uint64_t)v16, v17, v18, v19, v20, v21, v22, v23);
    }
  }

void sub_1001E8C8C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 service]);
  int v6 = (void *)objc_claimAutoreleasedReturnValue([v5 pushTopic]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue( [v4 broadcasterForTopic:v6 ignoreServiceListener:1 messageContext:*(void *)(a1 + 32)]);

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v3 dependentRegistrations]);
  if (![v8 count])
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) dependentRegistrations]);
    id v10 = [v9 count];

    if (v10)
    {
      uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
        sub_1006A1F80();
      }
    }
  }

  id v12 = (void *)objc_claimAutoreleasedReturnValue([v3 service]);
  id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 identifier]);
  unsigned int v14 = [v13 isEqualToIgnoringCase:@"com.apple.private.alloy.icloudpairing"];

  if (v14)
  {
    if ([v3 isRegistered]
      && (uint64_t v15 = objc_claimAutoreleasedReturnValue([v3 primaryRegistration])) != 0
      && (id v16 = (void *)v15, v17 = [v3 isEnabled], v16, v17))
    {
      uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog GDR](&OBJC_CLASS___IMRGLog, "GDR"));
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int v25 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "iCloud pairing account is usable, updating device properties",  v25,  2u);
      }

      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) accountController]);
      [v19 updateDevicePropertiesWithDevices:v8];
    }

    else
    {
      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(+[IMRGLog GDR](&OBJC_CLASS___IMRGLog, "GDR"));
      if (os_log_type_enabled((os_log_t)v19, OS_LOG_TYPE_DEFAULT))
      {
        else {
          uint64_t v20 = @"NO";
        }
        uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v3 primaryRegistration]);
        if (v21) {
          uint64_t v22 = @"YES";
        }
        else {
          uint64_t v22 = @"NO";
        }
        *(_DWORD *)int v25 = 138412802;
        else {
          uint64_t v23 = @"NO";
        }
        *(void *)&v25[4] = v20;
        __int16 v26 = 2112;
        __int16 v27 = v22;
        __int16 v28 = 2112;
        uint64_t v29 = v23;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v19,  OS_LOG_TYPE_DEFAULT,  "iCloud pairing account is not usable, not updating device properties (registered: %@, primaryRegistration: %@, isEnabled: %@)",  v25,  0x20u);
      }
    }
  }

  __int16 v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "uniqueID", *(void *)v25));
  [v7 account:v24 dependentDevicesUpdated:v8];
}

void sub_1001E9370(uint64_t a1, void *a2, uint64_t a3, int a4, void *a5)
{
  id v9 = a2;
  id v10 = a5;
  *(_BYTE *)(*(void *)(a1 + 32) + 80LL) &= ~8u;
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a3));
  [v9 setDependentRegistrationResponseCode:v11];

  if (a4)
  {
    context = objc_autoreleasePoolPush();
    id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog GDR](&OBJC_CLASS___IMRGLog, "GDR"));
    uint64_t v57 = a1;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uniqueID]);
      unsigned int v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) service]);
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 queryService]);
      *(_DWORD *)buf = 138412546;
      uint64_t v70 = v13;
      __int16 v71 = 2112;
      id v72 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Device query completed with   Account ID: %@   service: %@",  buf,  0x16u);

      a1 = v57;
    }

    id v16 = (void *)objc_claimAutoreleasedReturnValue([v10 _numberForKey:@"expiry-epoch-milli-sec"]);
    [v16 doubleValue];
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v17 / 1000.0));

    uint64_t v19 = objc_alloc(&OBJC_CLASS___NSDate);
    uint64_t v55 = v18;
    [v18 doubleValue];
    id v52 = -[NSDate initWithTimeIntervalSince1970:](v19, "initWithTimeIntervalSince1970:");
    objc_msgSend(v9, "setDependentRegistrationsTTL:");
    [v9 setDependentRegistrationAuthRetries:&off_1009474D0];
    uint64_t v20 = *(void **)(a1 + 32);
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObject:forKey:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObject:forKey:",  v21,  kIDSServiceDefaultsLastGDRDateKey));
    [v20 writeAccountDefaults:v22];

    uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog deviceHeartbeat](&OBJC_CLASS___IMRGLog, "deviceHeartbeat"));
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      [v18 doubleValue];
      *(_DWORD *)buf = 134217984;
      uint64_t v70 = v24;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "  => seconds: %f", buf, 0xCu);
    }

    id v54 = v10;
    int v25 = (void *)objc_claimAutoreleasedReturnValue([v10 _arrayForKey:@"registrations"]);
    __int16 v26 = v9;
    uint64_t v27 = objc_claimAutoreleasedReturnValue([v9 dependentRegistrations]);
    __int16 v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v57 + 32) service]);
    unsigned __int8 v29 = [v28 tunnelService];

    uint64_t v56 = (void *)v27;
    if ((v29 & 1) != 0)
    {
      __int128 v65 = 0u;
      __int128 v66 = 0u;
      __int128 v63 = 0u;
      __int128 v64 = 0u;
      id v30 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v57 + 32) adHocAccounts]);
      id v31 = [v30 countByEnumeratingWithState:&v63 objects:v68 count:16];
      if (v31)
      {
        id v32 = v31;
        uint64_t v33 = *(void *)v64;
        do
        {
          for (i = 0LL; i != v32; i = (char *)i + 1)
          {
            if (*(void *)v64 != v33) {
              objc_enumerationMutation(v30);
            }
            id v35 = *(void **)(*((void *)&v63 + 1) + 8LL * (void)i);
            uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v57 + 32) primaryRegistration]);
            uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([v36 uris]);

            [v35 _updateSessionsWithRegisteredURIs:v37];
            [*(id *)(v57 + 32) _flushTokensForRegisteredURIs:v37];
          }

          id v32 = [v30 countByEnumeratingWithState:&v63 objects:v68 count:16];
        }

        while (v32);
      }
    }

    else
    {
      __int128 v40 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v57 + 32) primaryRegistration]);
      id v30 = (void *)objc_claimAutoreleasedReturnValue([v40 uris]);

      [*(id *)(v57 + 32) _updateSessionsWithRegisteredURIs:v30];
      [*(id *)(v57 + 32) _flushTokensForRegisteredURIs:v30];
    }

    __int128 v61 = 0u;
    __int128 v62 = 0u;
    __int128 v59 = 0u;
    __int128 v60 = 0u;
    id v41 = v25;
    id v42 = [v41 countByEnumeratingWithState:&v59 objects:v67 count:16];
    if (v42)
    {
      id v43 = v42;
      uint64_t v44 = *(void *)v60;
      uint64_t v45 = IDSDevicePropertyService;
      do
      {
        for (j = 0LL; j != v43; j = (char *)j + 1)
        {
          if (*(void *)v60 != v44) {
            objc_enumerationMutation(v41);
          }
          uint64_t v47 = *(void **)(*((void *)&v59 + 1) + 8LL * (void)j);
          uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue([v47 objectForKey:v45]);
          id v49 = (void *)objc_claimAutoreleasedReturnValue([v26 serviceIdentifier]);
          unsigned int v50 = [v48 isEqualToString:v49];

          if (v50) {
            [*(id *)(v57 + 32) _processReceivedDependentRegistration:v47 oldDependentRegistrations:v56];
          }
        }

        id v43 = [v41 countByEnumeratingWithState:&v59 objects:v67 count:16];
      }

      while (v43);
    }

    id v9 = v26;
    id v10 = v54;
    if (!v56)
    {
      uint64_t v51 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog GDR](&OBJC_CLASS___IMRGLog, "GDR"));
      if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_DEFAULT,  " *** This is our first dependent handles check, we're just storing them",  buf,  2u);
      }
    }

    [*(id *)(v57 + 32) _notifyListenersAndSetDependentRegistrations:v41 onRegistrationInfo:v9];
    [*(id *)(v57 + 32) _saveAndNotifyGDRUpdate];

    objc_autoreleasePoolPop(context);
  }

  else
  {
    id v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
    if (os_log_type_enabled(v38, OS_LOG_TYPE_FAULT)) {
      sub_1006A1FE4(v38);
    }

    [v9 setDependentRegistrationsTTL:0];
    [*(id *)(a1 + 32) _notifyListenersAndSetDependentRegistrations:0 onRegistrationInfo:v9];
    [*(id *)(a1 + 32) _saveAndNotifyGDRUpdate];
    double v39 = sub_100263878();
    v58[0] = _NSConcreteStackBlock;
    v58[1] = 3221225472LL;
    v58[2] = sub_1001E9998;
    v58[3] = &unk_1008F6010;
    v58[4] = *(void *)(a1 + 32);
    im_dispatch_after_primary_queue(v58, v39);
  }
}

id sub_1001E9998(uint64_t a1)
{
  return [*(id *)(a1 + 32) gdrReAuthenticateIfNecessary];
}

id sub_1001E99A0(void *a1)
{
  id v1 = a1;
  if ((IDSIsMultiwayRegistrationServiceType(v1) & 1) != 0)
  {
    id v2 = (id *)&IDSRegistrationServiceTypeFaceTime;
  }

  else
  {
    if (!IDSIsFaceTimeRegistrationServiceType(v1))
    {
      id v3 = 0LL;
      goto LABEL_7;
    }

    id v2 = (id *)&IDSRegistrationServiceTypeCalling;
  }

  id v3 = *v2;
LABEL_7:

  return v3;
}

id sub_1001EA844(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 service]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 identifier]);
  int v6 = (void *)objc_claimAutoreleasedReturnValue( +[IDSURI URIWithPrefixedURI:withServiceLoggingHint:]( &OBJC_CLASS___IDSURI,  "URIWithPrefixedURI:withServiceLoggingHint:",  v3,  v5));

  return v6;
}

void sub_1001EAE94(_Unwind_Exception *a1)
{
}

void sub_1001EAEB0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _updateSessionsWithRegisteredURIs:*(void *)(a1 + 32) retryIfNotRegistered:0];
}

id sub_1001EAEF0(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 service]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 identifier]);
  int v6 = (void *)objc_claimAutoreleasedReturnValue( +[IDSURI URIWithPrefixedURI:withServiceLoggingHint:]( &OBJC_CLASS___IDSURI,  "URIWithPrefixedURI:withServiceLoggingHint:",  v3,  v5));

  return v6;
}

LABEL_109:
}

  v152 = swift_release(v14);
  unsigned int v153 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v149) + 0x128LL))(v152);
  if (v153)
  {
    unsigned int v155 = v153;
    uint64_t v156 = v154;
    ObjectType = swift_getObjectType(v153);
    (*(void (**)(void *, uint64_t, uint64_t))(v156 + 16))(v149, ObjectType, v156);
    unsigned int v153 = swift_unknownObjectRelease(v155, v158);
  }

  v159 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v149) + 0x348LL))(v153);
  (*(void (**)(uint64_t))((swift_isaMask & *v149) + 0x390LL))(v159);
  return (*(uint64_t (**)(unint64_t, unint64_t))((swift_isaMask & *v149) + 0x408LL))( 0xD000000000000026LL,  0x8000000100842700LL);
}

void sub_1001ECD28(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 service]);
  int v6 = (void *)objc_claimAutoreleasedReturnValue([v5 pushTopic]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v4 registrationBroadcasterForTopic:v6 messageContext:*(void *)(a1 + 32)]);

  if (IMShouldLog(@"Registration", 0LL) && v7)
  {
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) smallDescription]);
      int v12 = 138412290;
      id v13 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Broadcasting registration failed for account %@",  (uint8_t *)&v12,  0xCu);
    }
  }

  id v10 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueID]);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 48)));
  [v7 registrationFailedForAccount:v10 needsDeletion:v11];
}

id sub_1001EDC44(id a1, id a2)
{
  return [a2 objectForKey:@"uri"];
}

id sub_1001EE508(id a1, id a2)
{
  id v2 = a2;
  id v3 = (id)objc_claimAutoreleasedReturnValue([v2 objectForKey:kIDSServiceDefaultsAliasKey]);

  if (v3) {
    id v3 = v2;
  }

  return v3;
}

id sub_1001EF094(id a1, id a2)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([a2 trimmedString]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "_im_normalizedURIString"));

  if (IMStringIsPhoneNumber(v3))
  {
    uint64_t v4 = IMCanonicalizeFormattedString(v3, 3LL);
    uint64_t v5 = objc_claimAutoreleasedReturnValue(v4);

    id v3 = (void *)v5;
  }

  return v3;
}

id sub_1001EF6D0(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 trimmedString]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "_im_normalizedURIString"));

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[FTDeviceSupport sharedInstance](&OBJC_CLASS___FTDeviceSupport, "sharedInstance"));
  if ([v5 supportsSMS])
  {
  }

  else
  {
    unsigned __int8 v6 = [v4 isEqualToIgnoringCase:kIDSServiceDefaultsSentinelAlias];

    if ((v6 & 1) != 0)
    {
LABEL_6:
      id v7 = 0LL;
      goto LABEL_7;
    }
  }

  if (([*(id *)(a1 + 32) containsObject:v4] & 1) != 0
    || ([*(id *)(a1 + 40) containsObject:v4] & 1) != 0)
  {
    goto LABEL_6;
  }

  if (IMStringIsPhoneNumber(v4))
  {
    uint64_t v9 = IMCanonicalizeFormattedString(v4, 3LL);
    uint64_t v10 = objc_claimAutoreleasedReturnValue(v9);

    uint64_t v4 = (void *)v10;
  }

  id v7 = v4;
  uint64_t v4 = v7;
LABEL_7:

  return v7;
}

id sub_1001EFF14(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 trimmedString]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "_im_normalizedURIString"));

  if (IMStringIsPhoneNumber(v4))
  {
    uint64_t v5 = IMCanonicalizeFormattedString(v4, 3LL);
    uint64_t v6 = objc_claimAutoreleasedReturnValue(v5);

    uint64_t v4 = (void *)v6;
  }

  else {
    id v7 = 0LL;
  }

  return v7;
}

BOOL sub_1001EFFA8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) _validationStatusForAlias:v3];
  if (v4 != (id)3)
  {
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 138412290;
      id v8 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%@ needs to be validated",  (uint8_t *)&v7,  0xCu);
    }
  }

  return v4 != (id)3;
}

uint64_t sub_1001F0088(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([*(id *)(a1 + 32) _validationStatusForAlias:v3] == (id)3
    && ([*(id *)(a1 + 40) containsObject:v3] & 1) == 0)
  {
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 138412290;
      id v8 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%@ should be registered",  (uint8_t *)&v7,  0xCu);
    }

    uint64_t v4 = 1LL;
  }

  else
  {
    uint64_t v4 = 0LL;
  }

  return v4;
}

id sub_1001F08D0(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 trimmedString]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "_im_normalizedURIString"));

  if (IMStringIsEmail(v4)
    && (uint64_t v5 = *(void *)(a1 + 32)) != 0
    && (IMAreEmailsLogicallyTheSame(v5, v4) & 1) != 0)
  {
    id v6 = 0LL;
  }

  else
  {
    id v6 = v4;
  }

  return v6;
}

void sub_1001F0FEC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, void *a5)
{
  if (a4)
  {
    id v12 = (id)objc_claimAutoreleasedReturnValue([a5 objectForKeyedSubscript:@"user-flag-status"]);
    if ([v12 isEqualToString:@"enabled"])
    {
      uint64_t v6 = 1LL;
    }

    else if ([v12 isEqualToString:@"disabled"])
    {
      uint64_t v6 = 2LL;
    }

    else if ([v12 isEqualToString:@"not-applicable"])
    {
      uint64_t v6 = 4LL;
    }

    else
    {
      if (([v12 isEqualToString:@"mismatch"] & 1) == 0)
      {
        uint64_t v9 = *(void *)(a1 + 40);
        uint64_t v10 = objc_claimAutoreleasedReturnValue( +[IDSFeatureToggleRetrievalResult resultWithError:]( &OBJC_CLASS___IDSFeatureToggleRetrievalResult,  "resultWithError:",  7LL));
        goto LABEL_12;
      }

      uint64_t v6 = 3LL;
    }

    uint64_t v9 = *(void *)(a1 + 40);
    uint64_t v10 = objc_claimAutoreleasedReturnValue( +[IDSFeatureToggleRetrievalResult resultWithState:]( &OBJC_CLASS___IDSFeatureToggleRetrievalResult,  "resultWithState:",  v6));
LABEL_12:
    uint64_t v11 = (void *)v10;
    (*(void (**)(uint64_t, uint64_t))(v9 + 16))(v9, v10);

    goto LABEL_13;
  }

  id v7 = objc_msgSend(*(id *)(a1 + 32), "_handleAndConvertFeatureToggleError:");
  uint64_t v8 = *(void *)(a1 + 40);
  id v12 = (id)objc_claimAutoreleasedReturnValue( +[IDSFeatureToggleRetrievalResult resultWithError:]( &OBJC_CLASS___IDSFeatureToggleRetrievalResult,  "resultWithError:",  v7));
  (*(void (**)(uint64_t, id))(v8 + 16))(v8, v12);
LABEL_13:
}

void sub_1001F1208(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4)
  {
    uint64_t v5 = *(void *)(a1 + 40);
    uint64_t v6 = objc_claimAutoreleasedReturnValue( +[IDSFeatureToggleUpdateResult successfulResult]( &OBJC_CLASS___IDSFeatureToggleUpdateResult,  "successfulResult"));
  }

  else
  {
    id v7 = objc_msgSend(*(id *)(a1 + 32), "_handleAndConvertFeatureToggleError:");
    uint64_t v5 = *(void *)(a1 + 40);
    uint64_t v6 = objc_claimAutoreleasedReturnValue( +[IDSFeatureToggleUpdateResult resultWithError:]( &OBJC_CLASS___IDSFeatureToggleUpdateResult,  "resultWithError:",  v7));
  }

  id v8 = (id)v6;
  (*(void (**)(uint64_t))(v5 + 16))(v5);
}

void sub_1001F156C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5, void *a6)
{
  id v24 = a5;
  id v10 = a6;
  [*(id *)(a1 + 32) _handlePseudonymProvisionError:a3];
  if ((a4 & 1) != 0)
  {
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v24 objectForKey:@"alias"]);
    uint64_t v12 = objc_claimAutoreleasedReturnValue([v24 objectForKey:@"expiry-epoch-seconds"]);
    id v13 = (void *)v12;
    if (v11 && v12)
    {
      unsigned int v14 = objc_alloc(&OBJC_CLASS___IDSPseudonym);
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[IDSURI URIWithPrefixedURI:](&OBJC_CLASS___IDSURI, "URIWithPrefixedURI:", v11));
      uint64_t v16 = *(void *)(a1 + 40);
      double v17 = *(void **)(a1 + 48);
      [v13 doubleValue];
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "withUpdatedExpiryEpoch:"));
      uint64_t v19 = -[IDSPseudonym initWithURI:maskedURI:properties:](v14, "initWithURI:maskedURI:properties:", v15, v16, v18);

      [*(id *)(a1 + 32) _addPseudonym:v19];
      (*(void (**)(void, IDSPseudonym *, uint64_t, void))(*(void *)(a1 + 56) + 16LL))( *(void *)(a1 + 56),  v19,  1LL,  0LL);
    }

    else
    {
      uint64_t v21 = *(void *)(a1 + 56);
      uint64_t v19 = (IDSPseudonym *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSPseudonymErrorDomain,  300LL,  0LL));
      (*(void (**)(uint64_t, void, void, IDSPseudonym *))(v21 + 16))(v21, 0LL, 0LL, v19);
    }
  }

  else
  {
    if (v10)
    {
      id v20 = v10;
    }

    else
    {
      uint64_t v22 = 200LL;
      if (a3 == 6011) {
        uint64_t v22 = 700LL;
      }
      if (a3 == 20000) {
        uint64_t v23 = 800LL;
      }
      else {
        uint64_t v23 = v22;
      }
      id v20 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSPseudonymErrorDomain,  v23,  0LL));
    }

    uint64_t v11 = v20;
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }
}

void sub_1001F18A4(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5, void *a6)
{
  id v20 = a5;
  id v10 = a6;
  [*(id *)(a1 + 32) _handlePseudonymProvisionError:a3];
  if ((a4 & 1) != 0)
  {
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v20 objectForKey:@"expiry-epoch-seconds"]);
    if (v11)
    {
      uint64_t v12 = *(void **)(a1 + 40);
      id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 properties]);
      [v11 doubleValue];
      unsigned int v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "withUpdatedExpiryEpoch:"));
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v12 withUpdatedProperties:v14]);

      [*(id *)(a1 + 32) _addPseudonym:v15];
      (*(void (**)(void, void *, uint64_t, void))(*(void *)(a1 + 48) + 16LL))( *(void *)(a1 + 48),  v15,  1LL,  0LL);
    }

    else
    {
      uint64_t v17 = *(void *)(a1 + 48);
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSPseudonymErrorDomain,  300LL,  0LL));
      (*(void (**)(uint64_t, void, void, void *))(v17 + 16))(v17, 0LL, 0LL, v15);
    }
  }

  else
  {
    if (v10)
    {
      id v16 = v10;
    }

    else
    {
      uint64_t v18 = 200LL;
      if (a3 == 6011) {
        uint64_t v18 = 700LL;
      }
      if (a3 == 20000) {
        uint64_t v19 = 800LL;
      }
      else {
        uint64_t v19 = v18;
      }
      id v16 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSPseudonymErrorDomain,  v19,  0LL));
    }

    uint64_t v11 = v16;
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
}

void sub_1001F1B84(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5, void *a6)
{
  id v10 = a5;
  id v11 = a6;
  [*(id *)(a1 + 32) _handlePseudonymProvisionError:a3];
  if ((a4 & 1) != 0)
  {
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v10 _numberForKey:@"deleted"]);
    id v13 = v12;
    if (v12 && ([v12 BOOLValue] & 1) == 0)
    {
      unsigned int v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v15 = *(void *)(a1 + 40);
        id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uniqueID]);
        int v21 = 138412546;
        uint64_t v22 = v15;
        __int16 v23 = 2112;
        id v24 = v16;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Server indicated we are out of sync with pseudonyms, kicking deletion {pseudonym: %@, uniqueID: %@}",  (uint8_t *)&v21,  0x16u);
      }

      [*(id *)(a1 + 32) _updateHandles:1];
    }

    [*(id *)(a1 + 32) _removePseudonym:*(void *)(a1 + 40)];
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  else
  {
    if (v11)
    {
      id v17 = v11;
    }

    else
    {
      uint64_t v18 = 200LL;
      if (a3 == 6011) {
        uint64_t v18 = 700LL;
      }
      if (a3 == 20000) {
        uint64_t v19 = 800LL;
      }
      else {
        uint64_t v19 = v18;
      }
      id v17 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSPseudonymErrorDomain,  v19,  0LL));
    }

    id v20 = v17;
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
    if (a3 == 6005 || a3 == 1) {
      [*(id *)(a1 + 32) _removePseudonym:*(void *)(a1 + 40)];
    }
  }
}

uint64_t sub_1001F219C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = kIDSServiceDefaultsURIKey;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKey:kIDSServiceDefaultsURIKey]);
  if (v5)
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKey:v4]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) URI]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 prefixedURI]);
    uint64_t v9 = [v6 isEqualToString:v8] ^ 1;
  }

  else
  {
    uint64_t v9 = 0LL;
  }

  return v9;
}

uint64_t sub_1001F25E0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = kIDSServiceDefaultsURIKey;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKey:kIDSServiceDefaultsURIKey]);
  if (v5)
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKey:v4]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) URI]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 prefixedURI]);
    uint64_t v9 = [v6 isEqualToString:v8] ^ 1;
  }

  else
  {
    uint64_t v9 = 0LL;
  }

  return v9;
}

void sub_1001F31F0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5, void *a6)
{
  id v10 = a5;
  id v11 = a6;
  [*(id *)(a1 + 32) _handleKTOptInStatusUpdateError:a3];
  uint64_t v12 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  id v13 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  if (+[IMUserDefaults keyTransparencyDropOptInMessageAfterSending]( &OBJC_CLASS___IMUserDefaults,  "keyTransparencyDropOptInMessageAfterSending")
    && CUTIsInternalInstall())
  {
    unsigned int v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Dropping Opt In/Out server response because user default is set.",  buf,  2u);
    }

    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 24) identifier]);
    unsigned int v16 = [v15 isEqualToString:@"com.apple.madrid"];

    if (v16)
    {
      __int128 v72 = 0u;
      __int128 v73 = 0u;
      __int128 v70 = 0u;
      __int128 v71 = 0u;
      uint64_t v56 = a1;
      id v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) vettedAliases]);
      id v18 = [v17 countByEnumeratingWithState:&v70 objects:v84 count:16];
      if (v18)
      {
        id v19 = v18;
        uint64_t v20 = *(void *)v71;
        do
        {
          for (i = 0LL; i != v19; i = (char *)i + 1)
          {
            if (*(void *)v71 != v20) {
              objc_enumerationMutation(v17);
            }
            uint64_t v22 = -[IDSURI initWithPrefixedURI:]( objc_alloc(&OBJC_CLASS___IDSURI),  "initWithPrefixedURI:",  *(void *)(*((void *)&v70 + 1) + 8LL * (void)i));
            -[NSMutableArray addObject:](v12, "addObject:", v22);
          }

          id v19 = [v17 countByEnumeratingWithState:&v70 objects:v84 count:16];
        }

        while (v19);
      }

      a1 = v56;
    }

    uint64_t v23 = -8005LL;
    goto LABEL_44;
  }

  if ((a4 & 1) == 0)
  {
    id v43 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 24) identifier]);
    unsigned int v44 = [v43 isEqualToString:@"com.apple.madrid"];

    if (v44)
    {
      CFMutableDictionaryRef theDicta = (CFMutableDictionaryRef)v13;
      __int128 v68 = 0u;
      __int128 v69 = 0u;
      __int128 v66 = 0u;
      __int128 v67 = 0u;
      uint64_t v58 = a1;
      uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) vettedAliases]);
      id v46 = [v45 countByEnumeratingWithState:&v66 objects:v83 count:16];
      if (v46)
      {
        id v47 = v46;
        uint64_t v48 = *(void *)v67;
        do
        {
          for (j = 0LL; j != v47; j = (char *)j + 1)
          {
            if (*(void *)v67 != v48) {
              objc_enumerationMutation(v45);
            }
            unsigned int v50 = -[IDSURI initWithUnprefixedURI:]( objc_alloc(&OBJC_CLASS___IDSURI),  "initWithUnprefixedURI:",  *(void *)(*((void *)&v66 + 1) + 8LL * (void)j));
            -[NSMutableArray addObject:](v12, "addObject:", v50);
          }

          id v47 = [v45 countByEnumeratingWithState:&v66 objects:v83 count:16];
        }

        while (v47);
      }

      id v13 = (NSMutableDictionary *)theDicta;
      a1 = v58;
    }

    if (a3 == 6013)
    {
      uint64_t v23 = -8101LL;
    }

    else
    {
      if (v11)
      {
        id v51 = v11;
LABEL_45:
        int v25 = v51;
        uint64_t v37 = *(void *)(a1 + 40);
        id v38 = objc_alloc(&OBJC_CLASS___IDSKTOptInResult);
        uint64_t v39 = 0LL;
        __int128 v40 = v12;
        id v41 = v13;
        id v42 = v25;
        goto LABEL_46;
      }

      uint64_t v23 = -8100LL;
    }

void sub_1001F3AE8(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5, void *a6)
{
  id v10 = a5;
  id v11 = a6;
  [*(id *)(a1 + 32) _handleKTOptInStatusUpdateError:a3];
  uint64_t v12 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  id v13 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  if (!+[IMUserDefaults keyTransparencyDropOptInMessageAfterSending]( &OBJC_CLASS___IMUserDefaults,  "keyTransparencyDropOptInMessageAfterSending")
    || !CUTIsInternalInstall())
  {
    if ((a4 & 1) != 0)
    {
      id v30 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKeyedSubscript:@"kt-opt-in-results"]);
      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v30 firstObject]);

      if (v23)
      {
        id v60 = v10;
        uint64_t v62 = a1;
        theDict = (__CFDictionary *)v13;
        uint64_t v58 = v23;
        id v59 = v11;
        __int128 v69 = 0u;
        __int128 v70 = 0u;
        __int128 v67 = 0u;
        __int128 v68 = 0u;
        id obj = (id)objc_claimAutoreleasedReturnValue([v23 objectForKeyedSubscript:@"uris"]);
        id v31 = [obj countByEnumeratingWithState:&v67 objects:v87 count:16];
        if (v31)
        {
          id v32 = v31;
          uint64_t v33 = *(void *)v68;
          do
          {
            for (i = 0LL; i != v32; i = (char *)i + 1)
            {
              if (*(void *)v68 != v33) {
                objc_enumerationMutation(obj);
              }
              id v35 = *(void **)(*((void *)&v67 + 1) + 8LL * (void)i);
              uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([v35 objectForKey:@"uri"]);
              uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([v35 objectForKey:@"kt-blob"]);
              id v38 = (void *)objc_claimAutoreleasedReturnValue([v35 objectForKey:@"status"]);
              uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue([v35 objectForKey:@"kt-status"]);
              __int128 v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
              if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138413058;
                __int16 v80 = v36;
                __int16 v81 = 2112;
                id v82 = v37;
                __int16 v83 = 2112;
                uint64_t v84 = v38;
                __int16 v85 = 2112;
                uint64_t v86 = v39;
                _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEFAULT,  "KT Opt In/Out Result Response. {URI: %@, SMT: %@, IDS Server Status: %@, KT Server Status: %@}",  buf,  0x2Au);
              }

              id v41 = -[IDSURI initWithPrefixedURI:](objc_alloc(&OBJC_CLASS___IDSURI), "initWithPrefixedURI:", v36);
              -[NSMutableArray addObject:](v12, "addObject:", v41);
              if (v37) {
                CFDictionarySetValue(theDict, v41, v37);
              }
            }

            id v32 = [obj countByEnumeratingWithState:&v67 objects:v87 count:16];
          }

          while (v32);
        }

        id v11 = v59;
        id v10 = v60;
        id v13 = (NSMutableDictionary *)theDict;
        a1 = v62;
        uint64_t v23 = v58;
      }

      uint64_t v24 = *(void *)(a1 + 40);
      id v25 = objc_alloc(&OBJC_CLASS___IDSKTOptInResult);
      uint64_t v26 = 1LL;
      id v27 = v12;
      uint64_t v28 = v13;
      unsigned __int8 v29 = 0LL;
      goto LABEL_30;
    }

    id v43 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 24) identifier]);
    unsigned int v44 = [v43 isEqualToString:@"com.apple.madrid"];

    if (v44)
    {
      CFMutableDictionaryRef theDicta = (CFMutableDictionaryRef)v13;
      __int128 v73 = 0u;
      __int128 v74 = 0u;
      __int128 v71 = 0u;
      __int128 v72 = 0u;
      uint64_t v63 = a1;
      uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) vettedAliases]);
      id v46 = [v45 countByEnumeratingWithState:&v71 objects:v90 count:16];
      if (v46)
      {
        id v47 = v46;
        uint64_t v48 = *(void *)v72;
        do
        {
          for (j = 0LL; j != v47; j = (char *)j + 1)
          {
            if (*(void *)v72 != v48) {
              objc_enumerationMutation(v45);
            }
            unsigned int v50 = -[IDSURI initWithUnprefixedURI:]( objc_alloc(&OBJC_CLASS___IDSURI),  "initWithUnprefixedURI:",  *(void *)(*((void *)&v71 + 1) + 8LL * (void)j));
            -[NSMutableArray addObject:](v12, "addObject:", v50);
          }

          id v47 = [v45 countByEnumeratingWithState:&v71 objects:v90 count:16];
        }

        while (v47);
      }

      id v13 = (NSMutableDictionary *)theDicta;
      a1 = v63;
    }

    uint64_t v51 = objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  FTErrorDomain,  a3,  0LL));
    id v42 = (id)v51;
    if (v51)
    {
      NSErrorUserInfoKey v88 = NSUnderlyingErrorKey;
      uint64_t v89 = v51;
      id v52 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v89,  &v88,  1LL));
    }

    else
    {
      id v52 = 0LL;
    }

    if (a3 == 6013)
    {
      uint64_t v53 = -8101LL;
      id v54 = 0LL;
    }

    else
    {
      if (v11)
      {
        id v55 = v11;
LABEL_49:
        uint64_t v23 = v55;
        uint64_t v56 = *(void *)(a1 + 40);
        id v57 = [[IDSKTOptInResult alloc] initWithSuccess:0 optedInOutURIs:v12 serverSMTByURI:v13 error:v55];
        (*(void (**)(uint64_t, id))(v56 + 16))(v56, v57);

        goto LABEL_50;
      }

      uint64_t v53 = -8100LL;
      id v54 = v52;
    }

    id v55 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"IDSKeyTransparencyVerifierErrorDomain",  v53,  v54));
    goto LABEL_49;
  }

  unsigned int v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Dropping Opt In/Out server response because user default is set.",  buf,  2u);
  }

  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 24) identifier]);
  unsigned int v16 = [v15 isEqualToString:@"com.apple.madrid"];

  if (v16)
  {
    __int128 v77 = 0u;
    __int128 v78 = 0u;
    __int128 v75 = 0u;
    __int128 v76 = 0u;
    uint64_t v61 = a1;
    id v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) vettedAliases]);
    id v18 = [v17 countByEnumeratingWithState:&v75 objects:v91 count:16];
    if (v18)
    {
      id v19 = v18;
      uint64_t v20 = *(void *)v76;
      do
      {
        for (k = 0LL; k != v19; k = (char *)k + 1)
        {
          if (*(void *)v76 != v20) {
            objc_enumerationMutation(v17);
          }
          uint64_t v22 = -[IDSURI initWithPrefixedURI:]( objc_alloc(&OBJC_CLASS___IDSURI),  "initWithPrefixedURI:",  *(void *)(*((void *)&v75 + 1) + 8LL * (void)k));
          -[NSMutableArray addObject:](v12, "addObject:", v22);
        }

        id v19 = [v17 countByEnumeratingWithState:&v75 objects:v91 count:16];
      }

      while (v19);
    }

    a1 = v61;
  }

  uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"IDSKeyTransparencyVerifierErrorDomain",  -8005LL,  0LL));
  uint64_t v24 = *(void *)(a1 + 40);
  id v25 = objc_alloc(&OBJC_CLASS___IDSKTOptInResult);
  uint64_t v26 = 0LL;
  id v27 = v12;
  uint64_t v28 = v13;
  unsigned __int8 v29 = v23;
LABEL_30:
  id v42 = [v25 initWithSuccess:v26 optedInOutURIs:v27 serverSMTByURI:v28 error:v29];
  (*(void (**)(uint64_t, id))(v24 + 16))(v24, v42);
LABEL_50:
}

void sub_1001F4430(id a1, IDSDeliveryContext *a2)
{
  id v2 = a2;
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = -[IDSDeliveryContext idsResponseCode](v2, "idsResponseCode");
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDeliveryContext responseError](v2, "responseError"));
    int v6 = 134218242;
    id v7 = v4;
    __int16 v8 = 2112;
    uint64_t v9 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Finished sending 132 to peers with response { code: %ld error: %@ }",  (uint8_t *)&v6,  0x16u);
  }
}

void sub_1001F48FC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 service]);
  int v6 = (void *)objc_claimAutoreleasedReturnValue([v5 pushTopic]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v4 registrationBroadcasterForTopic:v6 messageContext:*(void *)(a1 + 32)]);

  if (IMShouldLog(@"Registration", 0LL) && v7)
  {
    __int16 v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) smallDescription]);
      int v11 = 138412290;
      uint64_t v12 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Broadcasting refresh registration for account %@",  (uint8_t *)&v11,  0xCu);
    }
  }

  id v10 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueID]);
  [v7 refreshRegistrationForAccount:v10];
}

void sub_1001F6308(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 lastCall])
  {
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog delivery](&OBJC_CLASS___IDSFoundationLog, "delivery"));
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      id v6 = [v3 idsResponseCode];
      id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 responseError]);
      int v11 = 138412802;
      uint64_t v12 = v5;
      __int16 v13 = 2048;
      id v14 = v6;
      __int16 v15 = 2112;
      unsigned int v16 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Finished sending 133 with GUID: %@ and response { code: %ld error: %@ }",  (uint8_t *)&v11,  0x20u);
    }

    id v8 = [v3 idsResponseCode];
    uint64_t v9 = *(void *)(a1 + 40);
    if (v8)
    {
      id v10 = (void *)objc_claimAutoreleasedReturnValue([v3 responseError]);
      (*(void (**)(uint64_t, void, void *))(v9 + 16))(v9, 0LL, v10);
    }

    else
    {
      (*(void (**)(uint64_t, uint64_t, void))(v9 + 16))(v9, 1LL, 0LL);
    }
  }
}

id sub_1001F6460(id a1, id a2)
{
  return [a2 objectForKey:@"uri"];
}

  ;
}

uint64_t sub_1001F6484(uint64_t result, uint64_t a2, float a3)
{
  *(float *)a2 = a3;
  *(void *)(a2 + 4) = result;
  *(_WORD *)(a2 + 12) = 2080;
  return result;
}

  ;
}

void sub_1001F64B0(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

LABEL_2:
  id v7 = 0;
LABEL_10:

  return v7;
}

  id v7 = 0;
LABEL_10:

  return v7;
}

  LOWORD(v42) = __PAIR16__(a10, a9);
  -[IDSIDStatusQueryController _lookupIDStatusForURIs:fromIdentity:fromURI:fromService:lightQuery:allowQuery:forceQuery:bypassLimit:reason:completionBlock:]( self,  "_lookupIDStatusForURIs:fromIdentity:fromURI:fromService:lightQuery:allowQuery:forceQuery:bypassLimit:reason:completionBlock:",  v16,  v17,  v18,  v19,  v43,  v44,  v42,  v20,  v21);
LABEL_3:
}

void sub_1001F7988(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v5 = (id)objc_claimAutoreleasedReturnValue([v2 accountController]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueID]);

  [v5 enableAccountWithUniqueID:v4];
}

void sub_1001F79EC(uint64_t a1, void *a2)
{
  id v5 = a2;
  unsigned int v3 = [*(id *)(a1 + 32) registrationStatus];
  if (v3 != -1 && v3 != 5) {
    [v5 registerAccount];
  }
}

void sub_1001F7E90(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = (id)objc_claimAutoreleasedReturnValue([v2 accountController]);
  [v4 removeAccount:v3];
}

LABEL_54:
}

  [*(id *)(a1 + 32) setLocalSKEData:v24];
  [*(id *)(a1 + 32) setLocalICEData:v16];
  [*(id *)(a1 + 32) setLocalCallInfoData:v31];
  if (v6)
  {
    [*(id *)(a1 + 32) setState:4];
    objc_msgSend( *(id *)(*(void *)(a1 + 40) + 8),  "stopCallID:",  objc_msgSend(*(id *)(a1 + 32), "callID"));
  }

  id v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "localCN", v49));
  uint64_t v39 = v16;
  __int128 v40 = v24;
  id v41 = v31;
  id v42 = v38;
  if (v39 | v40)
  {
    id v43 = -[NSKeyedArchiver initRequiringSecureCoding:]( objc_alloc(&OBJC_CLASS___NSKeyedArchiver),  "initRequiringSecureCoding:",  0LL);
    -[NSKeyedArchiver encodeObject:forKey:](v43, "encodeObject:forKey:", v39, @"connectionData");
    -[NSKeyedArchiver encodeObject:forKey:](v43, "encodeObject:forKey:", v40, @"skeData");
    -[NSKeyedArchiver encodeObject:forKey:](v43, "encodeObject:forKey:", v41, @"callInfoData");
    -[NSKeyedArchiver encodeObject:forKey:](v43, "encodeObject:forKey:", v42, @"cn");
    unsigned int v44 = (void *)objc_claimAutoreleasedReturnValue(-[NSKeyedArchiver encodedData](v43, "encodedData"));
  }

  else
  {
    unsigned int v44 = 0LL;
  }

  if (*(void *)(a1 + 48))
  {
    id v47 = im_primary_queue(v45, v46);
    uint64_t v48 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v47);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1002B707C;
    block[3] = &unk_1008F92D8;
    id v54 = *(id *)(a1 + 48);
    id v52 = v44;
    uint64_t v53 = v6;
    dispatch_async(v48, block);
  }
}

        v291 = __clz(__rbit64(v287));
        v292 = v291 + (v290 << 6);
        if (v292 != v289)
        {
          if (v292 < 0 || v292 >= v289)
          {
LABEL_178:
            __break(1u);
LABEL_179:
            __break(1u);
            goto LABEL_180;
          }

          v293 = v285[6] + *(void *)(v550 + 72) * v292;
          v294 = (uint64_t)v537;
          sub_1003F5FC8(v293, (uint64_t)v537, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
          sub_1003F600C(v294, v167, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
          v295 = (uint64_t)v545;
          sub_1003F5FC8(v167, (uint64_t)v545, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
          v296 = swift_retain_n(v132, 2LL);
          v297 = (os_log_s *)Logger.logObject.getter(v296);
          v298 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v297, v298))
          {
            v299 = swift_slowAlloc(32LL, -1LL);
            v300 = swift_slowAlloc(96LL, -1LL);
            v558[0] = v300;
            *(_DWORD *)v299 = v532;
            v564 = sub_1003FFBB0(0xD00000000000002ELL, v525, v558);
            v301 = (uint64_t)v533;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v564, v533, v299 + 4, v299 + 12);
            *(_WORD *)(v299 + 12) = 2080;
            v302 = *(uint64_t (**)(uint64_t))(*v132 + 176LL);
            v303 = swift_retain(v132);
            v304 = v302(v303);
            v306 = v305;
            swift_release(v132);
            v564 = sub_1003FFBB0(v304, v306, v558);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v564, v301, v299 + 14, v299 + 22);
            swift_release_n(v132, 2LL);
            swift_bridgeObjectRelease(v306);
            *(_WORD *)(v299 + 22) = 2080;
            v308 = type metadata accessor for UUID(0LL, v307);
            v309 = sub_10040A2B0( &qword_1009B95C0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
            v310 = dispatch thunk of CustomStringConvertible.description.getter(v308, v309);
            v312 = v311;
            v564 = sub_1003FFBB0(v310, v311, v558);
            id v167 = (uint64_t)v544;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v564, v301, v299 + 24, v299 + 32);
            swift_bridgeObjectRelease(v312);
            sub_1003F6050((uint64_t)v545, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
            _os_log_impl( (void *)&_mh_execute_header,  v297,  v298,  "%s: participant: %s should include local additional MKI %s",  (uint8_t *)v299,  0x20u);
            swift_arrayDestroy(v300, 3LL, v524);
            v313 = v300;
            id v133 = (uint64_t)v541;
            swift_slowDealloc(v313, -1LL, -1LL);
            swift_slowDealloc(v299, -1LL, -1LL);
          }

          else
          {
            swift_release_n(v132, 2LL);

            sub_1003F6050(v295, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
          }

          uint64_t v156 = v548;
          v315 = v538;
          sub_10043592C(v167, v538);
          sub_10040A274(v315, &qword_1009B8E08);
          uint64_t v130 = v549;
          v164 = (uint64_t)v552;
          v316 = sub_10042F48C(v167, (uint64_t)&v552[*(int *)(v549 + 24)]);
          if (v316)
          {
            v317 = v316;
            if ((swift_isUniquelyReferenced_nonNull_native(v542) & 1) != 0) {
              v318 = v542;
            }
            else {
              v318 = sub_100432F18(0LL, v542[2] + 1LL, 1, v542);
            }
            v320 = v318[2];
            v319 = v318[3];
            if (v320 >= v319 >> 1) {
              v318 = sub_100432F18((void *)(v319 > 1), v320 + 1, 1, v318);
            }
            v318[2] = v320 + 1;
            v542 = v318;
            v318[v320 + 4] = v317;
            id v167 = (uint64_t)v544;
            v164 = (uint64_t)v552;
          }

          sub_1003F6050(v167, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        }
      }
    }

id sub_1001F85EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = kIDSServiceDefaultsInvisibleAliasesKey;
  uint64_t v5 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:kIDSServiceDefaultsInvisibleAliasesKey]);
  if (v5)
  {
    id v6 = (void *)v5;
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 invisibleAliases]);
    id v8 = [v7 count];

    if (v8)
    {
      uint64_t v9 = objc_alloc(&OBJC_CLASS___NSSet);
      id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:v4]);
      int v11 = -[NSSet initWithArray:](v9, "initWithArray:", v10);

      uint64_t v12 = objc_alloc(&OBJC_CLASS___NSMutableSet);
      __int16 v13 = (void *)objc_claimAutoreleasedReturnValue([v3 invisibleAliases]);
      id v14 = -[NSMutableSet initWithArray:](v12, "initWithArray:", v13);

      -[NSMutableSet unionSet:](v14, "unionSet:", v11);
      if (!-[NSMutableSet isEqualToSet:](v14, "isEqualToSet:", v11))
      {
        id v15 = [*(id *)(a1 + 32) mutableCopy];
        unsigned int v16 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableSet allObjects](v14, "allObjects"));
        [v15 setObject:v16 forKey:v4];

        goto LABEL_7;
      }
    }
  }

  id v15 = *(id *)(a1 + 32);
LABEL_7:

  return v15;
}

id sub_1001F8748(uint64_t a1, void *a2)
{
  return [a2 _updateAccountWithAccountInfo:*(void *)(a1 + 32)];
}

void sub_1001F8E00(id a1)
{
  uint64_t v1 = *(const void **)IMWeakLinkSymbol("ACAccountTypeIdentifierAppleAccount", @"Accounts");
  qword_1009BEE50 = (uint64_t)v1;
  if (v1) {
    CFRetain(v1);
  }
}

void sub_1001F8E3C(id a1)
{
  uint64_t v1 = *(const void **)IMWeakLinkSymbol("ACAccountTypeIdentifierIdentityServices", @"Accounts");
  qword_1009BEE60 = (uint64_t)v1;
  if (v1) {
    CFRetain(v1);
  }
}

void sub_1001F8EB8(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___IDSServerStorageStateMachine);
  id v2 = (void *)qword_1009BEE70;
  qword_1009BEE70 = (uint64_t)v1;
}

id sub_1001F9900(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _stateMachineTimedOut:a2];
}

id sub_1001F9A68(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _stateMachineTimedOut:a2];
}

void sub_1001FA3A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 idsResponseCode])
  {
    [*(id *)(a1 + 40) terminateStateMachineForTopic:*(void *)(a1 + 32)];
    uint64_t v4 = OSLogHandleForIDSCategory("ServerStorage");
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      id v7 = [v3 idsResponseCode];
      id v8 = (void *)objc_claimAutoreleasedReturnValue([v3 responseError]);
      *(_DWORD *)buf = 138412802;
      uint64_t v19 = v6;
      __int16 v20 = 2048;
      id v21 = v7;
      __int16 v22 = 2112;
      uint64_t v23 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Failed sending pending message request response for topic %@. Result code %ld. Error %@.",  buf,  0x20u);
    }

    if (os_log_shim_legacy_logging_enabled(v9)
      && _IDSShouldLog(0LL, @"ServerStorage"))
    {
      [v3 idsResponseCode];
      id v17 = (void *)objc_claimAutoreleasedReturnValue([v3 responseError]);
      _IDSLogV( 0LL,  @"IDSFoundation",  @"ServerStorage",  @"Failed sending pending message request response for topic %@. Result code %ld. Error %@.");
    }
  }

  else
  {
    uint64_t v10 = OSLogHandleForIDSCategory("ServerStorage");
    int v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(void *)(a1 + 32);
      __int16 v13 = (void *)objc_claimAutoreleasedReturnValue([v3 responseError]);
      *(_DWORD *)buf = 138412546;
      uint64_t v19 = v12;
      __int16 v20 = 2112;
      id v21 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Finished sending pending message request response for topic %@  [%@]",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v14)
      && _IDSShouldLog(0LL, @"ServerStorage"))
    {
      uint64_t v15 = *(void *)(a1 + 32);
      unsigned int v16 = (void *)objc_claimAutoreleasedReturnValue([v3 responseError]);
      _IDSLogV( 0LL,  @"IDSFoundation",  @"ServerStorage",  @"Finished sending pending message request response for topic %@  [%@]");
    }

    objc_msgSend(*(id *)(a1 + 40), "_startTimeoutTimerForTopic:", *(void *)(a1 + 32), v15, v16);
  }
}

CFStringRef sub_1001FB014(int a1)
{
  else {
    return *(&off_1008FDD88 + a1 - 1);
  }
}

id sub_1001FB288(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  if (!v2[3])
  {
    [v2 initSKPresenceObject];
    id v2 = *(void **)(a1 + 32);
  }

  id result = [v2 isMonitoring];
  if ((result & 1) == 0)
  {
    [*(id *)(a1 + 32) _subscribe];
    return [*(id *)(a1 + 32) setIsMonitoring:1];
  }

  return result;
}

void *sub_1001FB348(uint64_t a1)
{
  id result = *(void **)(a1 + 32);
  if (result[3])
  {
    id result = [result isMonitoring];
    if ((_DWORD)result)
    {
      [*(id *)(a1 + 32) _unsubscribe];
      [*(id *)(a1 + 32) setIsMonitoring:0];
      return _[*(id *)(a1 + 32) releaseSKPresenceObjectIfPossible];
    }
  }

  return result;
}

id sub_1001FB408(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  if (!v2[3])
  {
    [v2 initSKPresenceObject];
    id v2 = *(void **)(a1 + 32);
  }

  id result = [v2 isAssertingPresence];
  if ((result & 1) == 0)
  {
    [*(id *)(a1 + 32) _assertPresence];
    return [*(id *)(a1 + 32) setIsAssertingPresence:1];
  }

  return result;
}

void *sub_1001FB4C8(uint64_t a1)
{
  id result = *(void **)(a1 + 32);
  if (result[3])
  {
    id result = [result isAssertingPresence];
    if ((_DWORD)result)
    {
      [*(id *)(a1 + 32) _releasePresence];
      [*(id *)(a1 + 32) setIsAssertingPresence:0];
      return _[*(id *)(a1 + 32) releaseSKPresenceObjectIfPossible];
    }
  }

  return result;
}

void sub_1001FB788(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queue]);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_1001FB824;
  v7[3] = &unk_1008F5F80;
  uint64_t v5 = *(void *)(a1 + 32);
  id v8 = v3;
  uint64_t v9 = v5;
  id v6 = v3;
  dispatch_async(v4, v7);
}

void sub_1001FB824(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IPsecLink](&OBJC_CLASS___IDSFoundationLog, "IPsecLink"));
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      uint64_t v5 = *(void **)(a1 + 32);
      int v7 = 138412290;
      id v8 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "presence: could not assert due to error %@",  (uint8_t *)&v7,  0xCu);
    }

    *(_DWORD *)(*(void *)(a1 + 40) + 12LL) = 1;
    *(_BYTE *)(*(void *)(a1 + 40) + 9LL) = 0;
  }

  else
  {
    if (v4)
    {
      id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 24) presenceIdentifier]);
      int v7 = 138412290;
      id v8 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "presence: succesfully asserted for %@",  (uint8_t *)&v7,  0xCu);
    }
  }

void sub_1001FB9D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IPsecLink](&OBJC_CLASS___IDSFoundationLog, "IPsecLink"));
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v5)
    {
      int v8 = 138412290;
      id v9 = v3;
      id v6 = "presence: could not release assertion due to error %@";
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)&v8, 0xCu);
    }
  }

  else if (v5)
  {
    int v7 = *(void **)(a1 + 32);
    int v8 = 138412290;
    id v9 = v7;
    id v6 = "presence: succesfully released for %@";
    goto LABEL_6;
  }
}

void sub_1001FBB1C(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queue]);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_1001FBBB8;
  v7[3] = &unk_1008F5F80;
  uint64_t v5 = *(void *)(a1 + 32);
  id v8 = v3;
  uint64_t v9 = v5;
  id v6 = v3;
  dispatch_async(v4, v7);
}

void sub_1001FBBB8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IPsecLink](&OBJC_CLASS___IDSFoundationLog, "IPsecLink"));
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      uint64_t v5 = *(void **)(a1 + 32);
      int v9 = 138412290;
      uint64_t v10 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "presence: could not subscribe due to error %@",  (uint8_t *)&v9,  0xCu);
    }

    *(_DWORD *)(*(void *)(a1 + 40) + 12LL) = 1;
    *(_BYTE *)(*(void *)(a1 + 40) + 8LL) = 0;
  }

  else
  {
    if (v4)
    {
      id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 24) presenceIdentifier]);
      int v9 = 138412290;
      uint64_t v10 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "presence: succesfully subscribed for %@",  (uint8_t *)&v9,  0xCu);
    }

    int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IPsecLink](&OBJC_CLASS___IDSFoundationLog, "IPsecLink"));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 24) presentDevices]);
      int v9 = 138412290;
      uint64_t v10 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "presence: current devices: %@",  (uint8_t *)&v9,  0xCu);
    }
  }

void sub_1001FBDD4(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IPsecLink](&OBJC_CLASS___IDSFoundationLog, "IPsecLink"));
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v5)
    {
      int v8 = 138412290;
      id v9 = v3;
      id v6 = "presence: could not release subscription due to error %@";
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)&v8, 0xCu);
    }
  }

  else if (v5)
  {
    int v7 = *(void **)(a1 + 32);
    int v8 = 138412290;
    id v9 = v7;
    id v6 = "presence: succesfully released subscription for %@";
    goto LABEL_6;
  }
}

uint64_t sub_1001FC2D8(uint64_t result, unsigned __int8 *a2, int a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = a3;
    BOOL v4 = (_BYTE *)(result + 1);
    do
    {
      unsigned int v6 = *a2++;
      char v5 = v6;
      unsigned int v7 = v6 & 0xF;
      int v8 = (v6 >> 4) + 55;
      int v9 = (v6 >> 4) | 0x30;
      if (v6 >= 0xA0) {
        LOBYTE(v9) = v8;
      }
      *(v4 - 1) = v9;
      if (v7 >= 0xA) {
        char v10 = v7 + 55;
      }
      else {
        char v10 = v5 & 0xF | 0x30;
      }
      _BYTE *v4 = v10;
      v4 += 2;
      --v3;
    }

    while (v3);
  }

  *(_BYTE *)(result + 2LL * a3) = 0;
  return result;
}

uint64_t sub_1001FC334(uint64_t a1)
{
  if (!*(_DWORD *)a1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v2 = *(_CCCryptor **)(a1 + 264);
  if (v2)
  {
    CCCryptorRelease(v2);
    *(void *)(a1 + 264) = 0LL;
    *(_OWORD *)(a1 + 272) = 0u;
    *(_OWORD *)(a1 + 28_Block_object_dispose(&STACK[0x2F0], 8) = 0u;
    *(_OWORD *)(a1 + 304) = 0u;
    *(_OWORD *)(a1 + 320) = 0u;
    *(_OWORD *)(a1 + 336) = 0u;
    *(_OWORD *)(a1 + 352) = 0u;
    *(_OWORD *)(a1 + 36_Block_object_dispose(&STACK[0x2F0], 8) = 0u;
    *(_OWORD *)(a1 + 384) = 0u;
    *(_OWORD *)(a1 + 400) = 0u;
    *(_OWORD *)(a1 + 416) = 0u;
    *(_OWORD *)(a1 + 432) = 0u;
    *(_OWORD *)(a1 + 44_Block_object_dispose(&STACK[0x2F0], 8) = 0u;
    *(_OWORD *)(a1 + 464) = 0u;
    *(_OWORD *)(a1 + 480) = 0u;
    *(_OWORD *)(a1 + 496) = 0u;
    *(_OWORD *)(a1 + 512) = 0u;
    *(_OWORD *)(a1 + 52_Block_object_dispose(&STACK[0x2F0], 8) = 0u;
    *(_OWORD *)(a1 + 544) = 0u;
    *(_OWORD *)(a1 + 560) = 0u;
    *(_OWORD *)(a1 + 576) = 0u;
    *(_OWORD *)(a1 + 592) = 0u;
    *(_OWORD *)(a1 + 60_Block_object_dispose(&STACK[0x2F0], 8) = 0u;
    *(_OWORD *)(a1 + 624) = 0u;
    *(_OWORD *)(a1 + 640) = 0u;
    *(_OWORD *)(a1 + 656) = 0u;
    *(_DWORD *)(a1 + 672) = 0;
  }

  uint64_t v3 = *(void **)(a1 + 256);
  if (v3) {
    free(v3);
  }
  *(void *)(a1 + 24_Block_object_dispose(&STACK[0x2F0], 8) = 0LL;
  *(void *)(a1 + 256) = 0LL;
  sub_1001FC3CC((void ***)(a1 + 2288));
  return 0LL;
}

void sub_1001FC3CC(void ***a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    if (*v2)
    {
      free(*v2);
      uint64_t v2 = *a1;
    }

    free(v2);
  }

uint64_t sub_1001FC410(void *key, uint64_t a2, _OWORD *a3, void *a4)
{
  char v8 = 0;
  *(void *)&__int128 v9 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  dataIn[0] = v9;
  dataIn[1] = v9;
  __int128 dataOut = v9;
  __int128 v28 = v9;
  char v10 = *(_BYTE *)(a2 + 7);
  char v11 = 1;
  uint64_t v12 = dataIn;
  do
  {
    char v13 = v11;
    *(void *)uint64_t v12 = *(void *)a2;
    *(void *)((char *)v12 + 6) = *(void *)(a2 + 6);
    *((_BYTE *)v12 + 14) = 0;
    *((_BYTE *)v12 + 15) = v8;
    *((_BYTE *)v12++ + 7) = v10;
    char v8 = 1;
    char v11 = 0;
  }

  while ((v13 & 1) != 0);
  size_t dataOutMoved = 0xAAAAAAAAAAAAAAAALL;
  CCCryptorStatus v14 = CCCrypt(0, 0, 0, key, 0x10uLL, 0LL, dataIn, 0x20uLL, &dataOut, 0x20uLL, &dataOutMoved);
  if (v14)
  {
    uint64_t v15 = OSLogHandleForIDSCategory("Warning");
    unsigned int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      CCCryptorStatus v26 = v14;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "CCCrypt failed with status: %d", buf, 8u);
    }

    if (os_log_shim_legacy_logging_enabled(v17))
    {
      _IDSWarnV(@"IDSFoundation", @"CCCrypt failed with status: %d");
      _IDSLogV(0LL, @"IDSFoundation", @"Warning", @"CCCrypt failed with status: %d");
      _IDSLogTransport(@"Warning", @"IDS", @"CCCrypt failed with status: %d");
    }
  }

  __int128 v18 = v28;
  *a3 = dataOut;
  a3[1] = v18;
  *(void *)&dataIn[0] = *(void *)a2;
  *(void *)((char *)dataIn + 6) = *(void *)(a2 + 6);
  HIWORD(dataIn[0]) = 0;
  BYTE7(dataIn[0]) = *(_BYTE *)(a2 + 7) ^ 2;
  uint64_t result = CCCrypt(0, 0, 0, key, 0x10uLL, 0LL, dataIn, 0x10uLL, &dataOut, 0x10uLL, &dataOutMoved);
  CCCryptorStatus v20 = result;
  if ((_DWORD)result)
  {
    uint64_t v21 = OSLogHandleForIDSCategory("Warning");
    __int16 v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      CCCryptorStatus v26 = v20;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "CCCrypt failed with status: %d", buf, 8u);
    }

    uint64_t result = os_log_shim_legacy_logging_enabled(v23);
    if ((_DWORD)result)
    {
      _IDSWarnV(@"IDSFoundation", @"CCCrypt failed with status: %d");
      _IDSLogV(0LL, @"IDSFoundation", @"Warning", @"CCCrypt failed with status: %d");
      uint64_t result = _IDSLogTransport(@"Warning", @"IDS", @"CCCrypt failed with status: %d");
    }
  }

  *a4 = dataOut;
  *(void *)((char *)a4 + 6) = *(void *)((char *)&dataOut + 6);
  return result;
}

uint64_t sub_1001FC730(uint64_t a1, _OWORD *a2)
{
  BOOL v4 = malloc(0x20uLL);
  *(void *)(a1 + 24_Block_object_dispose(&STACK[0x2F0], 8) = 32LL;
  *(void *)(a1 + 256) = v4;
  __int128 v5 = a2[1];
  _OWORD *v4 = *a2;
  v4[1] = v5;
  size_t v7 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t result = CCCryptorCreateFromData( 0,  0,  2u,  v4,  0x20uLL,  0LL,  (const void *)(a1 + 272),  0x194uLL,  (CCCryptorRef *)(a1 + 264),  &v7);
  if ((_DWORD)result == -4301) {
    return CCCryptorCreate(0, 0, 2u, *(const void **)(a1 + 256), 0x20uLL, 0LL, (CCCryptorRef *)(a1 + 264));
  }
  return result;
}

uint64_t sub_1001FC7DC(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (a3 > 0x640) {
    return 4294967291LL;
  }
  unsigned int v5 = *(unsigned __int16 *)(a1 + 138);
  BOOL v6 = a2 >= v5;
  __int16 v8 = a2 - v5;
  BOOL v7 = a2 > v5;
  unsigned int v9 = *(_DWORD *)(a1 + 132);
  if (v8 < 0)
  {
    int v10 = v7;
    v9 -= v10;
  }

  else
  {
    if (!v6)
    {
      BOOL v6 = __CFADD__(v9++, 1);
      *(_DWORD *)(a1 + 132) = v9;
      if (v6)
      {
        *(_DWORD *)(a1 + 4) = 1;
        return 0xFFFFFFFFLL;
      }
    }

    *(_WORD *)(a1 + 13_Block_object_dispose(&STACK[0x2F0], 8) = a2;
  }

  size_t dataOutAvailable = (a3 + 15) & 0xFFFFFFF0;
  uint64_t v12 = (_OWORD *)(a1 + 682);
  unsigned int v13 = *(_DWORD *)(a1 + 128);
  *(void *)((char *)&v20 + 6) = *(void *)(a1 + 216);
  *(void *)&__int128 v20 = *(void *)(a1 + 210);
  *(uint32x2_t *)v14.i8 = vshl_u32((uint32x2_t)vdup_n_s32(v13), (uint32x2_t)0xFFFFFFF0FFFFFFE8LL);
  *(uint32x2_t *)v15.i8 = vshl_u32((uint32x2_t)vdup_n_s32(v9), (uint32x2_t)0xFFFFFFF0FFFFFFE8LL);
  v14.i32[2] = v13 >> 8;
  v14.i32[3] = v13;
  v15.i32[2] = v9 >> 8;
  v15.i32[3] = v9;
  *(int8x8_t *)((char *)&v20 + 4) = veor_s8(*(int8x8_t *)((char *)&v20 + 4), vmovn_s16(vuzp1q_s16(v14, v15)));
  char v16 = 8;
  if (!*(_DWORD *)(a1 + 2284)) {
    char v16 = 1;
  }
  BYTE12(v20) ^= a2 >> v16;
  BYTE13(v20) ^= a2;
  HIWORD(v20) = 0;
  if (dword_1009C751C)
  {
    memset(__b, 170, sizeof(__b));
    --dword_1009C751C;
    sub_1001FC2D8((uint64_t)__b, (unsigned __int8 *)&v20, 16);
    fprintf(__stderrp, "  counters: [%s]\n", (const char *)__b);
  }

  _OWORD *v12 = v20;
  if (dataOutAvailable >= 0x11)
  {
    unint64_t v17 = a1 + 698;
    do
    {
      *(_OWORD *)unint64_t v17 = *(_OWORD *)(v17 - 16);
      __int16 v18 = (*(_BYTE *)(v17 + 15))++ + 1;
      if ((v18 & 0x100) != 0) {
        ++*(_BYTE *)(v17 + 14);
      }
      v17 += 16LL;
    }

    while (v17 < (unint64_t)v12 + dataOutAvailable);
  }

  __b[0] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v19 = *(_CCCryptor **)(a1 + 264);
  if (v19 && !CCCryptorReset(v19, 0LL)) {
    CCCryptorUpdate( *(CCCryptorRef *)(a1 + 264),  (const void *)(a1 + 682),  dataOutAvailable,  (void *)(a1 + 682),  dataOutAvailable,  __b);
  }
  else {
    CCCrypt( 0,  0,  2u,  *(const void **)(a1 + 256),  0x20uLL,  0LL,  (const void *)(a1 + 682),  dataOutAvailable,  (void *)(a1 + 682),  dataOutAvailable,  __b);
  }
  return 0LL;
}

uint64_t sub_1001FCA34(uint64_t a1, unsigned int a2, unsigned __int8 *a3, signed int a4)
{
  if (a4)
  {
    uint64_t result = sub_1001FC7DC(a1, a2, a4);
    if ((_DWORD)result) {
      return result;
    }
    if (dword_1009C751C >= 1)
    {
      int v20 = -1431655766;
      *(void *)&__int128 v8 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
      __int128 v18 = v8;
      __int128 v19 = v8;
      __int128 v16 = v8;
      __int128 v17 = v8;
      __int128 v14 = v8;
      __int128 v15 = v8;
      sub_1001FC2D8((uint64_t)&v14, (unsigned __int8 *)(a1 + 682), 8);
      fprintf(__stderrp, "  iLen=%d KS=[%s]", a4, (const char *)&v14);
      sub_1001FC2D8((uint64_t)&v14, a3, 8);
      fprintf(__stderrp, " In=[%s]", (const char *)&v14);
    }

    if (a4 >= 1)
    {
      unsigned int v9 = (char *)(a1 + 682);
      unsigned int v10 = a4 + 1;
      char v11 = a3;
      do
      {
        char v12 = *v9++;
        *v11++ ^= v12;
        --v10;
      }

      while (v10 > 1);
    }

    if (dword_1009C751C >= 1)
    {
      int v20 = -1431655766;
      *(void *)&__int128 v13 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
      __int128 v18 = v13;
      __int128 v19 = v13;
      __int128 v16 = v13;
      __int128 v17 = v13;
      __int128 v14 = v13;
      __int128 v15 = v13;
      sub_1001FC2D8((uint64_t)&v14, a3, 8);
      fprintf(__stderrp, " Out=[%s]\n", (const char *)&v14);
    }
  }

  return 0LL;
}

uint64_t sub_1001FCBA8( _DWORD *a1, uint64_t a2, int a3, int a4, int a5, __int16 a6, int a7, __int16 a8, int a9)
{
  if (a3 > 59)
  {
    bzero(a1, 0x11F0uLL);
    __int16 v22 = (uint64_t *)(a2 + 16);
    uint64_t v23 = (_OWORD *)(a2 + 30);
    if (a4)
    {
      *(_OWORD *)(a1 + 37) = *(_OWORD *)a2;
      uint64_t v24 = *v22;
      *(void *)((char *)a1 + 170) = *(void *)(a2 + 22);
      *(void *)(a1 + 41) = v24;
      *(_OWORD *)(a1 + 611) = *v23;
      id v25 = a1 + 615;
    }

    else
    {
      *(_OWORD *)(a1 + 611) = *(_OWORD *)a2;
      uint64_t v26 = *v22;
      *(void *)((char *)a1 + 2466) = *(void *)(a2 + 22);
      *(void *)(a1 + 615) = v26;
      *(_OWORD *)(a1 + 37) = *v23;
      id v25 = a1 + 41;
    }

    uint64_t v27 = *(void *)(a2 + 46);
    *(void *)((char *)v25 + 6) = *(void *)(a2 + 52);
    *id v25 = v27;
    a1[32] = a5;
    *((_WORD *)a1 + 6_Block_object_dispose(&STACK[0x2F0], 8) = a6;
    a1[606] = a7;
    *((_WORD *)a1 + 1216) = a8;
    a1[1145] = a9;
    a1[571] = a9;
    uint64_t v28 = OSLogHandleForTransportCategory("SRTP");
    unsigned __int8 v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      int v30 = a1[32];
      int v31 = *((unsigned __int16 *)a1 + 68);
      int v32 = a1[606];
      int v33 = *((unsigned __int16 *)a1 + 1216);
      *(_DWORD *)buf = 67110144;
      int v38 = a9;
      __int16 v39 = 1024;
      int v40 = v30;
      __int16 v41 = 1024;
      int v42 = v31;
      __int16 v43 = 1024;
      int v44 = v32;
      __int16 v45 = 1024;
      int v46 = v33;
      _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "encryption setup (v%d):\n\tsend ssrc:%08x start-seq:%04x\n\trecv ssrc:%08x start-seq:%04x",  buf,  0x20u);
    }

    uint64_t v35 = os_log_shim_legacy_logging_enabled(v34);
    if ((_DWORD)v35)
    {
      if (_IDSShouldLogTransport(v35))
      {
        _IDSLogTransport( @"SRTP",  @"IDS",  @"encryption setup (v%d):\n\tsend ssrc:%08x start-seq:%04x\n\trecv ssrc:%08x start-seq:%04x");
        if (_IDSShouldLog(0LL, @"SRTP")) {
          _IDSLogV( 0LL,  @"IDSFoundation",  @"SRTP",  @"encryption setup (v%d):\n\tsend ssrc:%08x start-seq:%04x\n\trecv ssrc:%08x start-seq:%04x");
        }
      }
    }

    sub_1001FC410(a1 + 37, (uint64_t)(a1 + 41), (_DWORD *)((char *)a1 + 178), (_DWORD *)((char *)a1 + 210));
    sub_1001FC730((uint64_t)a1, (_DWORD *)((char *)a1 + 178));
    sub_1001FC410(a1 + 611, (uint64_t)(a1 + 615), (_DWORD *)((char *)a1 + 2474), (_DWORD *)((char *)a1 + 2506));
    sub_1001FC730((uint64_t)(a1 + 574), (_DWORD *)((char *)a1 + 2474));
    *a1 |= 2u;
    a1[574] |= 4u;
    uint64_t v36 = sub_1001FCF74();
    uint64_t result = 0LL;
    *((void *)a1 + 573) = v36;
  }

  else
  {
    uint64_t v10 = OSLogHandleForTransportCategory("SRTP");
    char v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109376;
      int v38 = a3;
      __int16 v39 = 1024;
      int v40 = 60;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "IDSStreamEncryption_Init not enough key material bytes: have %d but need %d",  buf,  0xEu);
    }

    uint64_t v13 = os_log_shim_legacy_logging_enabled(v12);
    if ((_DWORD)v13 && _IDSShouldLogTransport(v13))
    {
      _IDSLogTransport( @"SRTP",  @"IDS",  @"IDSStreamEncryption_Init not enough key material bytes: have %d but need %d");
      if (_IDSShouldLog(0LL, @"SRTP")) {
        _IDSLogV( 0LL,  @"IDSFoundation",  @"SRTP",  @"IDSStreamEncryption_Init not enough key material bytes: have %d but need %d");
      }
    }

    return 1LL;
  }

  return result;
}

_WORD *sub_1001FCF74()
{
  uint64_t v0 = malloc(0x10uLL);
  if (!v0)
  {
    uint64_t v3 = OSLogHandleForIDSCategory("SRTP");
    BOOL v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "Malloc Failed to allocate replayWindow!",  buf,  2u);
    }

    BOOL v6 = @"Malloc Failed to allocate replayWindow!";
    goto LABEL_14;
  }

  uint64_t v1 = v0;
  v0[4] = 8;
  uint64_t v2 = malloc(0x40uLL);
  *(void *)uint64_t v1 = v2;
  if (!v2)
  {
    uint64_t v7 = OSLogHandleForIDSCategory("SRTP");
    __int128 v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      v11[0] = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "Malloc Failed to allocate replayWindow->list!",  (uint8_t *)v11,  2u);
    }

    BOOL v6 = @"Malloc Failed to allocate replayWindow->list!";
LABEL_14:
    _IDSLogV(2LL, @"IDSFoundation", @"SRTP", v6);
    return 0LL;
  }

  v1[5] = 0;
  *((_BYTE *)v1 + 12) = 0;
  *uint64_t v2 = 0u;
  v2[1] = 0u;
  v2[2] = 0u;
  v2[3] = 0u;
  return v1;
}

uint64_t sub_1001FD114(uint64_t a1)
{
  return 0LL;
}

uint64_t sub_1001FD140(uint64_t a1, unsigned int a2, unsigned __int8 *a3, signed int a4, int a5)
{
  uint64_t v8 = a1;
  if (a5)
  {
    if (a5 != 1) {
      return 0xFFFFFFFFLL;
    }
  }

  else
  {
    uint64_t v8 = a1 + 2296;
  }

  if (*(_DWORD *)v8)
  {
    if (*(_DWORD *)(v8 + 4))
    {
      uint64_t v10 = OSLogHandleForIDSCategory("SRTP");
      char v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "srtp rollover counter reached end - hard stop before reusing key",  buf,  2u);
      }

      if (os_log_shim_legacy_logging_enabled(v12))
      {
        if (_IDSShouldLog(0LL, @"SRTP")) {
          _IDSLogV( 0LL,  @"IDSFoundation",  @"SRTP",  @"srtp rollover counter reached end - hard stop before reusing key");
        }
      }

      return 2LL;
    }

    else
    {
      if (a5) {
        return sub_1001FCA34(v8, a2, a3, a4);
      }
      uint64_t v16 = *(void *)(v8 + 2288);
      if (!v16) {
        return 3LL;
      }
      if ((sub_1001FD444(v16, a2) & 1) != 0) {
        return sub_1001FCA34(v8, a2, a3, a4);
      }
      uint64_t v17 = OSLogHandleForIDSCategory("SRTP");
      __int128 v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        int v19 = *(unsigned __int16 *)(*(void *)(v8 + 2288) + 10LL);
        *(_DWORD *)buf = 67109376;
        int v22 = v19;
        __int16 v23 = 1024;
        unsigned int v24 = a2;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "packet with sequence number: %u->%u dropped by replay protection",  buf,  0xEu);
      }

      if (os_log_shim_legacy_logging_enabled(v20) && _IDSShouldLog(0LL, @"SRTP")) {
        _IDSLogV( 0LL,  @"IDSFoundation",  @"SRTP",  @"packet with sequence number: %u->%u dropped by replay protection");
      }
      return 4LL;
    }
  }

  else
  {
    uint64_t v13 = OSLogHandleForIDSCategory("SRTP");
    __int128 v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "srtp not initialized for transform", buf, 2u);
    }

    return 1LL;
  }

uint64_t sub_1001FD444(uint64_t a1, int a2)
{
  if (*(_BYTE *)(a1 + 12))
  {
    __int16 v4 = *(_WORD *)(a1 + 10);
  }

  else
  {
    __int16 v4 = a2 - 1;
    *(_WORD *)(a1 + 10) = a2 - 1;
    *(_BYTE *)(a1 + 12) = 1;
  }

  int v5 = (__int16)(a2 - v4);
  if (v5 >= 1)
  {
    if (v5 > 0x1FF)
    {
      bzero(*(void **)a1, 8LL * *(unsigned __int16 *)(a1 + 8));
      if (!*(_WORD *)(a1 + 8))
      {
        uint64_t v27 = OSLogHandleForIDSCategory("SRTP");
        uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        {
          int v29 = *(unsigned __int16 *)(a1 + 10);
          *(_DWORD *)buf = 67109632;
          int v32 = v29;
          __int16 v33 = 1024;
          int v34 = a2;
          __int16 v35 = 1024;
          int v36 = v5;
          _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "IDSStreamEncryption_SetbitReplayList after clear returned NO. seq(%u->%u) = %u",  buf,  0x14u);
        }

        uint64_t result = os_log_shim_legacy_logging_enabled(v30);
        if ((_DWORD)result)
        {
          uint64_t result = _IDSShouldLog(0LL, @"SRTP");
          if ((_DWORD)result)
          {
            _IDSLogV( 0LL,  @"IDSFoundation",  @"SRTP",  @"IDSStreamEncryption_SetbitReplayList after clear returned NO. seq(%u->%u) = %u");
            return 0LL;
          }
        }

        return result;
      }
    }

    else
    {
      if ((sub_1001FD984(a1, (unsigned __int16)(a2 - v4)) & 1) == 0)
      {
        uint64_t v23 = OSLogHandleForIDSCategory("SRTP");
        unsigned int v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
          int v25 = *(unsigned __int16 *)(a1 + 10);
          *(_DWORD *)buf = 67109632;
          int v32 = v25;
          __int16 v33 = 1024;
          int v34 = a2;
          __int16 v35 = 1024;
          int v36 = v5;
          _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "IDSStreamEncryption_LeftShiftReplayList returned NO. seq(%u->%u) = %u",  buf,  0x14u);
        }

        uint64_t result = os_log_shim_legacy_logging_enabled(v26);
        if ((_DWORD)result)
        {
          uint64_t result = _IDSShouldLog(0LL, @"SRTP");
          if ((_DWORD)result)
          {
            _IDSLogV( 0LL,  @"IDSFoundation",  @"SRTP",  @"IDSStreamEncryption_LeftShiftReplayList returned NO. seq(%u->%u) = %u");
            return 0LL;
          }
        }

        return result;
      }

      if (!*(_WORD *)(a1 + 8))
      {
        uint64_t v6 = OSLogHandleForIDSCategory("SRTP");
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          int v8 = *(unsigned __int16 *)(a1 + 10);
          *(_DWORD *)buf = 67109632;
          int v32 = v8;
          __int16 v33 = 1024;
          int v34 = a2;
          __int16 v35 = 1024;
          int v36 = v5;
          _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "IDSStreamEncryption_SetbitReplayList returned NO. seq(%u->%u) = %u",  buf,  0x14u);
        }

        uint64_t result = os_log_shim_legacy_logging_enabled(v9);
        if ((_DWORD)result)
        {
          uint64_t result = _IDSShouldLog(0LL, @"SRTP");
          if ((_DWORD)result)
          {
            _IDSLogV( 0LL,  @"IDSFoundation",  @"SRTP",  @"IDSStreamEncryption_SetbitReplayList returned NO. seq(%u->%u) = %u");
            return 0LL;
          }
        }

        return result;
      }
    }

    **(void **)a1 |= 1uLL;
    *(_WORD *)(a1 + 10) = a2;
    return 1LL;
  }

  if (v5 == -32768) {
    LOWORD(v11) = 0x7FFF;
  }
  else {
    int v11 = -v5;
  }
  int v12 = (unsigned __int16)v11;
  if ((unsigned __int16)v11 < 0x200u)
  {
    uint64_t v17 = (unsigned __int16)v11 >> 6;
    if (v17 >= *(unsigned __int16 *)(a1 + 8)
      || (uint64_t v18 = *(void *)(*(void *)a1 + 8LL * v17), (v18 & (1LL << v12)) != 0))
    {
      uint64_t v19 = OSLogHandleForIDSCategory("SRTP");
      uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        int v21 = *(unsigned __int16 *)(a1 + 10);
        *(_DWORD *)buf = 67109632;
        int v32 = v21;
        __int16 v33 = 1024;
        int v34 = a2;
        __int16 v35 = 1024;
        int v36 = v12;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "IDSStreamEncryption_GetbitReplayList returned YES. seq(%u->%u) = -%u",  buf,  0x14u);
      }

      uint64_t result = os_log_shim_legacy_logging_enabled(v22);
      if ((_DWORD)result)
      {
        uint64_t result = _IDSShouldLog(0LL, @"SRTP");
        if ((_DWORD)result)
        {
          _IDSLogV( 0LL,  @"IDSFoundation",  @"SRTP",  @"IDSStreamEncryption_GetbitReplayList returned YES. seq(%u->%u) = -%u");
          return 0LL;
        }
      }

      return result;
    }

    *(void *)(*(void *)a1 + 8 * v17) = v18 | (1LL << v12);
    return 1LL;
  }

  uint64_t v13 = OSLogHandleForIDSCategory("SRTP");
  __int128 v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    int v15 = *(unsigned __int16 *)(a1 + 10);
    *(_DWORD *)buf = 67109632;
    int v32 = v15;
    __int16 v33 = 1024;
    int v34 = a2;
    __int16 v35 = 1024;
    int v36 = v12;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "packet too old. seq(%u->%u) = -%u", buf, 0x14u);
  }

  uint64_t result = os_log_shim_legacy_logging_enabled(v16);
  if ((_DWORD)result)
  {
    uint64_t result = _IDSShouldLog(0LL, @"SRTP");
    if ((_DWORD)result)
    {
      _IDSLogV(0LL, @"IDSFoundation", @"SRTP", @"packet too old. seq(%u->%u) = -%u");
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1001FD984(uint64_t a1, unsigned int a2)
{
  char v2 = a2;
  if (a2 <= 0x3F)
  {
    LODWORD(v4) = *(unsigned __int16 *)(a1 + 8);
    if (!*(_WORD *)(a1 + 8)) {
      return 1LL;
    }
LABEL_11:
    unint64_t v10 = 0LL;
    int v11 = *(unint64_t **)a1;
    uint64_t v12 = v4;
    do
    {
      unint64_t v13 = (*v11 << (v2 & 0x3F)) | (v10 >> (64 - (v2 & 0x3Fu)));
      unint64_t v10 = *v11 & (-1LL << -(v2 & 0x3F));
      *v11++ = v13;
      --v12;
    }

    while (v12);
    return 1LL;
  }

  unint64_t v5 = a2 >> 6;
  uint64_t v4 = *(unsigned __int16 *)(a1 + 8);
  if (v5 < v4)
  {
    uint64_t v6 = *(unint64_t **)a1;
    uint64_t v7 = v4 - 1;
    uint64_t v8 = *(void *)a1 - 8LL * v5;
    do
      v6[v7] = *(void *)(v8 + 8 * v7);
    while (v7-- > (uint64_t)v5);
    if (v5 <= 1) {
      unint64_t v5 = 1LL;
    }
    bzero(v6, 8 * v5);
    if (!(_DWORD)v4) {
      return 1LL;
    }
    goto LABEL_11;
  }

  return 0LL;
}

id sub_1001FDF40(id a1, IDSCTSIM *a2)
{
  return -[IDSCTSIM SIMIdentifier](a2, "SIMIdentifier");
}

id sub_1001FEB88(id a1, IDSTemporaryPhoneUser *a2)
{
  return -[IDSTemporaryPhoneUser labelID](a2, "labelID");
}

NSString *__cdecl sub_1001FEB90(id a1, IDSCTSIM *a2)
{
  return (NSString *)-[IDSCTSIM SIMIdentifier](a2, "SIMIdentifier");
}

id sub_1001FEB98(id a1, id a2)
{
  return [a2 uniqueIdentifier];
}

id sub_1001FEBF4(uint64_t a1)
{
  char v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Received selectedSubscriptionLabelDidChange",  v4,  2u);
  }

  return [*(id *)(a1 + 32) _setupForCurrentSubscriptionState];
}

id sub_1001FED24(uint64_t a1)
{
  char v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Received SIMInformationDidChange", v4, 2u);
  }

  return [*(id *)(a1 + 32) _setupForCurrentSubscriptionState];
}

char *sub_1001FF4E0(uint64_t a1, uint64_t a2)
{
  uint64_t result = byte_1009BEE78;
  if (a2 >= 1)
  {
    uint64_t v4 = 0LL;
    int v5 = 0;
    uint64_t v6 = 2000LL;
    if (a2 < 2000) {
      uint64_t v6 = a2;
    }
    while (1)
    {
      unsigned int v7 = *(unsigned __int8 *)(a1 + v4);
      int v8 = (v7 >> 4) + 87;
      if (v7 < 0xA0) {
        LOBYTE(v_Block_object_dispose(&STACK[0x2F0], 8) = (*(_BYTE *)(a1 + v4) >> 4) | 0x30;
      }
      unsigned int v9 = v7 & 0xF;
      char v10 = v7 & 0xF | 0x30;
      char v11 = (v7 & 0xF) + 87;
      char v12 = v9 >= 0xA ? v11 : v10;
      unint64_t v13 = &byte_1009BEE78[v5];
      char *v13 = v8;
      uint64_t v14 = v5 + 2LL;
      v13[1] = v12;
      if ((~(_DWORD)v4 & 0xF) == 0) {
        break;
      }
      if ((v4 & 1) != 0)
      {
        char v15 = 32;
        goto LABEL_13;
      }

void sub_1001FF594(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v47 = a4;
  int v6 = os_channel_available_slot_count(a2);
  unsigned int v7 = (void **)&IMInsertBoolsToXPCDictionary_ptr;
  if (v6)
  {
    uint64_t v44 = a1;
    uint64_t next_slot = 0LL;
    int v43 = v6;
    int v9 = v6;
    uint64_t v45 = a2;
    while (1)
    {
      *(void *)&__int128 v10 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
      __int128 v62 = v10;
      __int128 v63 = v10;
      *(_OWORD *)id v60 = v10;
      __int128 v61 = v10;
      uint64_t next_slot = os_channel_get_next_slot(a2, next_slot, v60);
      uint64_t packet = os_channel_slot_get_packet(a2, next_slot);
      if (!packet)
      {
        int v34 = (os_log_s *)objc_claimAutoreleasedReturnValue([v7[219] Multiplexer]);
        if (!os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_75;
        }
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)id v49 = v43;
        __int16 v35 = "readOSChannel - have slots %u no packet to read!";
        int v36 = v34;
        uint32_t v37 = 8;
LABEL_74:
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, v35, buf, v37);
LABEL_75:

LABEL_76:
        int v38 = os_channel_advance_slot(a2, next_slot);
        if (v38)
        {
          int v39 = v38;
          int v40 = (os_log_s *)objc_claimAutoreleasedReturnValue([v7[219] Multiplexer]);
          if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)id v60 = 67109120;
            *(_DWORD *)&void v60[4] = v39;
            _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEFAULT,  "os_channel_advance_slot failed for read %d",  v60,  8u);
          }
        }

        int v41 = os_channel_sync(v44, 1LL);
        if (v41)
        {
          int v42 = v41;
          uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue([v7[219] Multiplexer]);
          if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)id v60 = 67109120;
            *(_DWORD *)&void v60[4] = v42;
            int v31 = "os_channel_sync for RX failed %d";
            int v32 = v30;
            uint32_t v33 = 8;
LABEL_83:
            _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, v31, v60, v33);
          }

          goto LABEL_84;
        }

        goto LABEL_85;
      }

      uint64_t v12 = packet;
      uint64_t next_buflet = os_packet_get_next_buflet(packet, 0LL);
      if (!next_buflet)
      {
        int v34 = (os_log_s *)objc_claimAutoreleasedReturnValue([v7[219] Multiplexer]);
        if (!os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_75;
        }
        *(_WORD *)buf = 0;
        __int16 v35 = "readOSChannel - have packet but no buflet!";
LABEL_73:
        int v36 = v34;
        uint32_t v37 = 2;
        goto LABEL_74;
      }

      uint64_t v14 = next_buflet;
      unsigned int data_length = os_packet_get_data_length(v12);
      if (!data_length)
      {
        int v34 = (os_log_s *)objc_claimAutoreleasedReturnValue([v7[219] Multiplexer]);
        if (!os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_75;
        }
        *(_WORD *)buf = 0;
        __int16 v35 = "readOSChannel - have packet and buflet but 0 length!";
        goto LABEL_73;
      }

      unsigned int v16 = data_length;
      kdebug_trace(722010316LL, 0LL, 0LL, 0LL, 0LL);
      uint64_t object_address = os_buflet_get_object_address(v14);
      unsigned int data_offset = os_buflet_get_data_offset(v14);
      uint64_t v19 = _IDSLinkPacketBufferCreate( "/Library/Caches/com.apple.xbs/Sources/IdentityServices_Swift/IDSAgent/IDSMultiplexerUtils.m",  153LL);
      uint64_t v20 = v19;
      if (*(void *)(v19 + 8) < (unint64_t)v16)
      {
        int v21 = (os_log_s *)objc_claimAutoreleasedReturnValue([v7[219] Multiplexer]);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v22 = *(void *)(v20 + 8);
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)id v49 = v16;
          *(_WORD *)&v49[4] = 1024;
          *(_DWORD *)&v49[6] = v22;
          _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "readOSChannel - outgoing packet larger than IDSLinkPacketBuffer max length! (%u > %u)",  buf,  0xEu);
        }

        _IDSLinkPacketBufferRelease( "/Library/Caches/com.apple.xbs/Sources/IdentityServices_Swift/IDSAgent/IDSMultiplexerUtils.m",  156LL,  v20);
        goto LABEL_63;
      }

      uint64_t v23 = v7;
      memcpy(*(void **)v19, (const void *)(object_address + data_offset), v16);
      *(void *)(v20 + 16) = v16;
      int service_class = os_packet_get_service_class(v12);
      int v25 = service_class;
      if (service_class <= 2621727)
      {
        if (service_class <= 1048703)
        {
          if (service_class != 524432)
          {
LABEL_28:
            int v46 = 0;
            goto LABEL_35;
          }

          int v26 = 100;
        }

        else
        {
          switch(service_class)
          {
            case 1048704:
              int v26 = 200;
              break;
            case 1572880:
              int v26 = 300;
              break;
            case 2097184:
              int v26 = 400;
              break;
            default:
              goto LABEL_28;
          }
        }
      }

      else
      {
        if (service_class <= 3670319)
        {
          if (service_class == 2621728)
          {
            int v26 = 500;
            goto LABEL_34;
          }

          if (service_class == 3146000)
          {
            int v26 = 600;
            goto LABEL_34;
          }

          if (service_class != 3670272) {
            goto LABEL_28;
          }
LABEL_27:
          int v26 = 700;
          goto LABEL_34;
        }

        switch(service_class)
        {
          case 3670320:
            goto LABEL_27;
          case 4194688:
            int v26 = 800;
            break;
          case 4718992:
            int v26 = 900;
            break;
          default:
            goto LABEL_28;
        }
      }

LABEL_84:
LABEL_85:
}

  __break(1u);
LABEL_85:
  __break(1u);
LABEL_86:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v126);
  __break(1u);
  return result;
}

      uint64_t v171 = v29[4];
      v172 = *(void *)(v8 - 544);
      v171(v172, v20, v28);
      uint64_t v173 = *(void *)(v8 - 568);
      ((void (*)(uint64_t))P256.KeyAgreement.PrivateKey.sharedSecretFromKeyAgreement(with:))(v172);
      if (v18)
      {
        swift_errorRelease(v18);
        (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(v8 - 560) + 56LL))( v173,  1LL,  1LL,  *(void *)(v8 - 552));
      }

      else
      {
        v175 = *(void *)(v8 - 560);
        v176 = *(void *)(v8 - 552);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v175 + 56))(v173, 0LL, 1LL, v176);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v175 + 48))(v173, 1LL, v176) != 1)
        {
          *(void *)(v8 - 264) = v5;
          *(void *)(v8 - 224) = v4;
          *(void *)(v8 - 20_Block_object_dispose(&STACK[0x2F0], 8) = v7;
          *(void *)(v8 - 28_Block_object_dispose(&STACK[0x2F0], 8) = v6;
          *(void *)(v8 - 304) = v3;
          __int128 v183 = (*(uint64_t (**)(void, uint64_t, uint64_t))(v175 + 32))(*(void *)(v8 - 576), v173, v176);
          __int128 v184 = *(void *)(v8 - 368);
          __int128 v185 = *(void *)(v184 + OBJC_IVAR____TtC17identityservicesd30IDSGlobalLinkP2PKeyNegotiation_sessionID);
          __int128 v186 = *(void *)(v184 + OBJC_IVAR____TtC17identityservicesd30IDSGlobalLinkP2PKeyNegotiation_sessionID + 8);
          id v187 = *(void *)(v8 - 600);
          static String.Encoding.utf8.getter(v183);
          *(void *)(v8 - 272) = String.data(using:allowLossyConversion:)(v187, 0LL, v185, v186);
          v189 = v188;
          id v190 = (*(uint64_t (**)(uint64_t, void))(*(void *)(v8 - 592) + 8LL))(v187, *(void *)(v8 - 584));
          *(void *)(v8 - 280) = v189;
          if (v189 >> 60 != 15)
          {
            sub_1004CE238(*(void *)(v8 - 256), *(void *)(v8 - 248), *(void *)(v8 - 232), *(void *)(v8 - 240));
            v199 = v198;
            *(_OWORD *)(v8 - 160) = xmmword_1007184D0;
            v200 = sub_1003F5CB4((uint64_t *)&unk_1009BBE70);
            v201 = swift_allocObject(v200, 40LL, 7LL);
            v202 = v201;
            *(_OWORD *)(v201 + 16) = xmmword_100718C80;
            if ((v199 & 1) != 0)
            {
              *(_DWORD *)(v201 + 32) = *(_DWORD *)(*(void *)(v8 - 368)
                                                 + OBJC_IVAR____TtC17identityservicesd30IDSGlobalLinkP2PKeyNegotiation_localCounter);
              *(_DWORD *)(v201 + 36) = v26;
            }

            else
            {
              v203 = *(_DWORD *)(*(void *)(v8 - 368)
                               + OBJC_IVAR____TtC17identityservicesd30IDSGlobalLinkP2PKeyNegotiation_localCounter);
              *(_DWORD *)(v201 + 32) = v26;
              *(_DWORD *)(v201 + 36) = v203;
            }

            swift_bridgeObjectRetain(v201);
            Data.append(_:)(bswap32(*(_DWORD *)(v202 + 32)), 0x4000000000000LL);
            Data.append(_:)(bswap32(*(_DWORD *)(v202 + 36)), 0x4000000000000LL);
            swift_bridgeObjectRelease(v202);
            Data.append(_:)(*(void *)(v8 - 272), *(void *)(v8 - 280));
            v204 = *(void *)(v8 - 160);
            v205 = *(void *)(v8 - 152);
            sub_1004028CC(v204, v205);
            v206 = *(void *)(v8 - 576);
            v207 = sub_1004CFDA4(v206, 6518369LL, 0xE300000000000000LL, v204, v205, v202);
            sub_100402A84(v204, v205);
            sub_1004028CC(v204, v205);
            v208 = sub_1004CFDA4(v206, 7562345LL, 0xE300000000000000LL, v204, v205, v202);
            swift_bridgeObjectRelease(v202);
            sub_100402A84(v204, v205);
            type metadata accessor for IDSGlobalLinkP2PNegotiatedKeys();
            v209 = v207;
            v210 = v208;
            *(void *)(v8 - 352) = v209;
            *(void *)(v8 - 32_Block_object_dispose(&STACK[0x2F0], 8) = v210;
            v154 = sub_1004118A4(v199 & 1, (uint64_t)v209, (uint64_t)v210);
            v211 = (os_log_s *)Logger.logObject.getter(v154);
            v212 = static os_log_type_t.default.getter(v211);
            v213 = v211;
            if (os_log_type_enabled(v211, v212))
            {
              v214 = swift_slowAlloc(22LL, -1LL);
              v215 = (void *)swift_slowAlloc(8LL, -1LL);
              v216 = swift_slowAlloc(32LL, -1LL);
              *(void *)(v8 - 136) = v216;
              *(_DWORD *)v214 = *(_OWORD *)(v8 - 320);
              *(void *)(v8 - 184) = sub_1003FFBB0(0x2865766965636572LL, 0xEE00293A626F6C62LL, (uint64_t *)(v8 - 136));
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v8 - 184, v8 - 176, v214 + 4, v214 + 12);
              *(_WORD *)(v214 + 12) = 2112;
              *(void *)(v8 - 184) = v154;
              v217 = v154;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v8 - 184, v8 - 176, v214 + 14, v214 + 22);
              *v215 = v154;

              _os_log_impl((void *)&_mh_execute_header, v211, v212, "%s: keys: %@", (uint8_t *)v214, 0x16u);
              v218 = sub_1003F5CB4(&qword_1009B92C8);
              swift_arrayDestroy(v215, 1LL, v218);
              swift_slowDealloc(v215, -1LL, -1LL);
              swift_arrayDestroy(v216, 1LL, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v216, -1LL, -1LL);
              swift_slowDealloc(v214, -1LL, -1LL);
              sub_10040AD00(*(void *)(v8 - 272), *(void *)(v8 - 280));
              sub_10040AD00(*(void *)(v8 - 232), *(void *)(v8 - 240));
            }

            else
            {
              sub_10040AD00(*(void *)(v8 - 272), *(void *)(v8 - 280));
              sub_10040AD00(*(void *)(v8 - 232), *(void *)(v8 - 240));
            }

            v219 = *(void **)(v8 - 208);

            v220 = *(void **)(v8 - 288);
            v221 = *(void **)(v8 - 304);

            sub_10040AD00(*(void *)(v8 - 256), *(void *)(v8 - 248));
            sub_10040AD00(*(void *)(v8 - 264), *(void *)(v8 - 224));

            sub_100402A84(*(void *)(v8 - 160), *(void *)(v8 - 152));
            (*(void (**)(void, void))(*(void *)(v8 - 560) + 8LL))( *(void *)(v8 - 576),  *(void *)(v8 - 552));
            (*(void (**)(void, void))(*(void *)(v8 - 520) + 8LL))( *(void *)(v8 - 544),  *(void *)(v8 - 512));
            (*(void (**)(void, void))(*(void *)(v8 - 488) + 8LL))( *(void *)(v8 - 504),  *(void *)(v8 - 480));
            return v154;
          }

          __int16 v191 = (os_log_s *)Logger.logObject.getter(v190);
          double v192 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v191, v192))
          {
            __int16 v193 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
            v194 = swift_slowAlloc(32LL, -1LL);
            *(void *)(v8 - 160) = v194;
            *(_DWORD *)__int16 v193 = 136315138;
            *(void *)(v8 - 136) = sub_1003FFBB0(0x2865766965636572LL, 0xEE00293A626F6C62LL, (uint64_t *)(v8 - 160));
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v8 - 136, v8 - 128, v193 + 4, v193 + 12);
            _os_log_impl((void *)&_mh_execute_header, v191, v192, "%s: failed to convert sessionID to data", v193, 0xCu);
            swift_arrayDestroy(v194, 1LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v194, -1LL, -1LL);
            swift_slowDealloc(v193, -1LL, -1LL);
          }

          sub_10040AD00(*(void *)(v8 - 232), *(void *)(v8 - 240));
          __int16 v195 = *(void **)(v8 - 208);

          uint64_t v196 = *(void **)(v8 - 288);
          v197 = *(void **)(v8 - 304);

          sub_10040AD00(*(void *)(v8 - 256), *(void *)(v8 - 248));
          sub_10040AD00(*(void *)(v8 - 264), *(void *)(v8 - 224));

          (*(void (**)(void, void))(*(void *)(v8 - 560) + 8LL))( *(void *)(v8 - 576),  *(void *)(v8 - 552));
          goto LABEL_97;
        }
      }

      double v177 = sub_10040A274(v173, &qword_1009BBE50);
      v178 = (os_log_s *)Logger.logObject.getter(v177);
      v179 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v178, v179))
      {
        *(void *)(v8 - 264) = v5;
        v180 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        v181 = swift_slowAlloc(32LL, -1LL);
        *(void *)(v8 - 160) = v181;
        *(_DWORD *)v180 = 136315138;
        *(void *)(v8 - 136) = sub_1003FFBB0(0x2865766965636572LL, 0xEE00293A626F6C62LL, (uint64_t *)(v8 - 160));
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v8 - 136, v8 - 128, v180 + 4, v180 + 12);
        _os_log_impl((void *)&_mh_execute_header, v178, v179, "%s: failed key agreement", v180, 0xCu);
        swift_arrayDestroy(v181, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v181, -1LL, -1LL);
        swift_slowDealloc(v180, -1LL, -1LL);
        sub_10040AD00(*(void *)(v8 - 232), *(void *)(v8 - 240));

        sub_10040AD00(*(void *)(v8 - 256), *(void *)(v8 - 248));
        id v182 = *(void *)(v8 - 264);
      }

      else
      {
        sub_10040AD00(*(void *)(v8 - 232), *(void *)(v8 - 240));

        sub_10040AD00(*(void *)(v8 - 256), *(void *)(v8 - 248));
        id v182 = (uint64_t)v5;
      }

      sub_10040AD00(v182, v4);

LABEL_97:
      (*(void (**)(void, void))(*(void *)(v8 - 520) + 8LL))( *(void *)(v8 - 544),  *(void *)(v8 - 512));
LABEL_98:
      (*(void (**)(void, void))(*(void *)(v8 - 488) + 8LL))( *(void *)(v8 - 504),  *(void *)(v8 - 480));
      return 0LL;
    }
  }

  uint64_t v90 = *(void **)(v8 - 128);
  if (v90)
  {
    uint64_t v91 = (os_log_s *)Logger.logObject.getter(v88);
    __int16 v92 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v91, v92))
    {
      uint64_t v93 = swift_slowAlloc(22LL, -1LL);
      char v94 = swift_slowAlloc(64LL, -1LL);
      *(void *)(v8 - 160) = v94;
      *(_DWORD *)uint64_t v93 = *(_OWORD *)(v8 - 320);
      *(void *)(v8 - 136) = sub_1003FFBB0(0x2865766965636572LL, 0xEE00293A626F6C62LL, (uint64_t *)(v8 - 160));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v8 - 136, v8 - 128, v93 + 4, v93 + 12);
      *(_WORD *)(v93 + 12) = 2080;
      *(void *)(v8 - 216) = v93 + 14;
      uint64_t v95 = v6;
      __int16 v96 = v90;
      *(void *)(v8 - 136) = v96;
      type metadata accessor for CFError(0LL);
      *(void *)(v8 - 20_Block_object_dispose(&STACK[0x2F0], 8) = v7;
      __int16 v98 = v97;
      unsigned int v99 = sub_10040A2B0( (unint64_t *)&qword_1009BB518,  (uint64_t (*)(uint64_t))type metadata accessor for CFError,  (uint64_t)&protocol conformance descriptor for CFErrorRef);
      __int16 v100 = Error.localizedDescription.getter(v98, v99);
      double v102 = v101;

      int v6 = v95;
      *(void *)(v8 - 136) = sub_1003FFBB0(v100, v102, (uint64_t *)(v8 - 160));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v8 - 136, v8 - 128, *(void *)(v8 - 216), v93 + 22);
      uint64_t v103 = v102;
      unsigned int v7 = *(id *)(v8 - 208);
      swift_bridgeObjectRelease(v103);
      _os_log_impl( (void *)&_mh_execute_header,  v91,  v92,  "%s: failed importing local private key: %s",  (uint8_t *)v93,  0x16u);
      swift_arrayDestroy(v94, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v94, -1LL, -1LL);
      swift_slowDealloc(v93, -1LL, -1LL);
    }
  }

LABEL_71:
  return 0LL;
}

uint64_t sub_1001FFCEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = os_channel_available_slot_count(a2);
  if (v8)
  {
LABEL_2:
    *(void *)&__int128 v9 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
    __int128 v49 = v9;
    __int128 v50 = v9;
    *(_OWORD *)buf = v9;
    __int128 v48 = v9;
    uint64_t next_slot = os_channel_get_next_slot(a2, 0LL, buf);
    uint64_t packet = os_channel_slot_get_packet(a2, next_slot);
    if (packet)
    {
      uint64_t v12 = packet;
      uint64_t next_buflet = os_packet_get_next_buflet(packet, 0LL);
      if (next_buflet)
      {
        uint64_t v14 = next_buflet;
        unsigned int data_limit = os_buflet_get_data_limit();
        uint64_t object_address = os_buflet_get_object_address(v14);
        unsigned int data_offset = os_buflet_get_data_offset(v14);
        if (data_limit >= *(_DWORD *)(a3 + 16))
        {
          unsigned int v32 = data_offset;
          kdebug_trace(722010400LL, 0LL, 0LL, 0LL, 0LL);
          memcpy((void *)(object_address + v32), *(const void **)a3, *(void *)(a3 + 16));
          os_buflet_set_data_length(v14, *(unsigned int *)(a3 + 16));
          os_packet_set_flow_uuid(v12, a4);
          uint64_t v18 = -[NSUUID initWithUUIDBytes:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDBytes:", a4);
          uint32_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog Multiplexer](&OBJC_CLASS___IDSFoundationLog, "Multiplexer"));
          if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v34 = *(void *)(a3 + 16);
            int v41 = 138413058;
            *(void *)int v42 = v18;
            *(_WORD *)&v42[8] = 2048;
            *(void *)&v42[10] = v34;
            __int16 v43 = 2048;
            uint64_t v44 = object_address;
            __int16 v45 = 1024;
            unsigned int v46 = v32;
            _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "multiplexer incoming [%@] packetLength %ld bufletAddress %p bufletOffset %u",  (uint8_t *)&v41,  0x26u);
          }

          *(_WORD *)&buf[2] = *(void *)(a3 + 16);
          os_channel_set_slot_properties(a2, next_slot, buf);
          int v35 = os_channel_advance_slot(a2, next_slot);
          if (v35)
          {
            int v36 = v35;
            uint32_t v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog Multiplexer](&OBJC_CLASS___IDSFoundationLog, "Multiplexer"));
            if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
            {
              int v41 = 67109120;
              *(_DWORD *)int v42 = v36;
              _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "os_channel_advance_slot failed for read %d",  (uint8_t *)&v41,  8u);
            }
          }

          int v38 = os_channel_sync(a1, 0LL);
          if (v38)
          {
            int v39 = v38;
            int v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog Multiplexer](&OBJC_CLASS___IDSFoundationLog, "Multiplexer"));
            if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
            {
              int v41 = 67109120;
              *(_DWORD *)int v42 = v39;
              _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEFAULT,  "os_channel_sync for TX failed %d",  (uint8_t *)&v41,  8u);
            }
          }

          uint64_t v30 = 1LL;
          goto LABEL_20;
        }

        uint64_t v18 = (NSUUID *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog Multiplexer](&OBJC_CLASS___IDSFoundationLog, "Multiplexer"));
        if (os_log_type_enabled((os_log_t)v18, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v19 = *(void *)(a3 + 16);
          int v41 = 67109376;
          *(_DWORD *)int v42 = data_limit;
          *(_WORD *)&void v42[4] = 2048;
          *(void *)&v42[6] = v19;
          uint64_t v20 = "writeOSChannel - buflet size %u insufficeint for data length %ld!";
          int v21 = (os_log_s *)v18;
          uint32_t v22 = 18;
LABEL_18:
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, v20, (uint8_t *)&v41, v22);
        }
      }

      else
      {
        uint64_t v18 = (NSUUID *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog Multiplexer](&OBJC_CLASS___IDSFoundationLog, "Multiplexer"));
        if (os_log_type_enabled((os_log_t)v18, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v41) = 0;
          uint64_t v20 = "writeOSChannel - have packet but no buflet!";
          int v21 = (os_log_s *)v18;
          uint32_t v22 = 2;
          goto LABEL_18;
        }
      }
    }

    else
    {
      uint64_t v18 = (NSUUID *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog Multiplexer](&OBJC_CLASS___IDSFoundationLog, "Multiplexer"));
      if (os_log_type_enabled((os_log_t)v18, OS_LOG_TYPE_DEFAULT))
      {
        int v41 = 67109120;
        *(_DWORD *)int v42 = v8;
        uint64_t v20 = "writeOSChannel - have slots %u no packet to read!";
        int v21 = (os_log_s *)v18;
        uint32_t v22 = 8;
        goto LABEL_18;
      }
    }

    uint64_t v30 = 0LL;
LABEL_20:

    return v30;
  }

  uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog Multiplexer](&OBJC_CLASS___IDSFoundationLog, "Multiplexer"));
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "writeOSChannel - no slots for write, try syncing",  buf,  2u);
  }

  int v24 = os_channel_sync(a1, 0LL);
  if (v24)
  {
    int v25 = v24;
    int v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog Multiplexer](&OBJC_CLASS___IDSFoundationLog, "Multiplexer"));
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v25;
      uint64_t v27 = "os_channel_sync for TX failed %d";
      uint64_t v28 = v26;
      uint32_t v29 = 8;
LABEL_12:
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, v27, buf, v29);
    }
  }

  else
  {
    int v8 = os_channel_available_slot_count(a2);
    if (v8) {
      goto LABEL_2;
    }
    int v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog Multiplexer](&OBJC_CLASS___IDSFoundationLog, "Multiplexer"));
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      uint64_t v27 = "writeOSChannel - no slots for write, try syncing";
      uint64_t v28 = v26;
      uint32_t v29 = 2;
      goto LABEL_12;
    }
  }

  return 0LL;
}

void sub_10020065C(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  char v2 = (void *)qword_1009C05F0;
  qword_1009C05F0 = (uint64_t)v1;
}

void sub_100200824( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_100200844(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = (char *)objc_loadWeakRetained((id *)(a1 + 32));
  if ([v3 isEqualToString:@"com.apple.madrid"])
  {
    uint64_t v5 = OSLogHandleForIDSCategory("PublicKeyStore");
    int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Clearing cache", v8, 2u);
    }

    if (os_log_shim_legacy_logging_enabled(v7)
      && _IDSShouldLog(0LL, @"PublicKeyStore"))
    {
      _IDSLogV(0LL, @"IDSFoundation", @"PublicKeyStore", @"Clearing cache");
    }

    pthread_mutex_lock((pthread_mutex_t *)(WeakRetained + 32));
    [*((id *)WeakRetained + 3) clearCache];
    pthread_mutex_unlock((pthread_mutex_t *)(WeakRetained + 32));
  }
}

NSDictionary *__cdecl sub_1002011BC(id a1, NSDictionary *a2, NSDictionary *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = (NSDictionary *)-[NSDictionary mutableCopy](a3, "mutableCopy");
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  int v6 = v4;
  id v7 = -[NSDictionary countByEnumeratingWithState:objects:count:]( v6,  "countByEnumeratingWithState:objects:count:",  &v24,  v28,  16LL);
  if (!v7) {
    goto LABEL_16;
  }
  id v8 = v7;
  uint64_t v23 = *(void *)v25;
  do
  {
    for (i = 0LL; i != v8; i = (char *)i + 1)
    {
      if (*(void *)v25 != v23) {
        objc_enumerationMutation(v6);
      }
      uint64_t v10 = *(void *)(*((void *)&v24 + 1) + 8LL * (void)i);
      char v11 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v5, "objectForKey:", v10));
      if (v11)
      {
        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v6, "objectForKey:", v10));
        unint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v11 user]);
        uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v13 unprefixedIdentifier]);
        if (v14)
        {

          goto LABEL_9;
        }

        uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v12 user]);
        uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v18 unprefixedIdentifier]);

        if (v19)
        {
LABEL_12:
          -[NSDictionary setObject:forKey:](v5, "setObject:forKey:", v12, v10);
        }

        else
        {
LABEL_9:
          char v15 = (void *)objc_claimAutoreleasedReturnValue([v12 user]);
          unsigned int v16 = (void *)objc_claimAutoreleasedReturnValue([v11 user]);
          unsigned int v17 = [v15 shouldReplace:v16];

          if (v17) {
            goto LABEL_12;
          }
        }
      }
    }

    id v8 = -[NSDictionary countByEnumeratingWithState:objects:count:]( v6,  "countByEnumeratingWithState:objects:count:",  &v24,  v28,  16LL);
  }

  while (v8);
LABEL_16:

  if (v5) {
    uint64_t v20 = v5;
  }
  else {
    uint64_t v20 = v6;
  }
  int v21 = v20;

  return v21;
}

NSMutableDictionary *__cdecl sub_1002013BC(id a1, NSDictionary *a2, int64_t a3)
{
  uint64_t v4 = a2;
  if (a3 == 1)
  {
    uint64_t v5 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    int v6 = v4;
    id v7 = -[NSDictionary countByEnumeratingWithState:objects:count:]( v6,  "countByEnumeratingWithState:objects:count:",  &v16,  v24,  16LL);
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v17;
      do
      {
        for (i = 0LL; i != v8; i = (char *)i + 1)
        {
          if (*(void *)v17 != v9) {
            objc_enumerationMutation(v6);
          }
          uint64_t v11 = *(void *)(*((void *)&v16 + 1) + 8LL * (void)i);
          uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](v6, "objectForKeyedSubscript:", v11, (void)v16));
          unint64_t v13 = -[IDSUserDescription initWithUser:properties:]( objc_alloc(&OBJC_CLASS___IDSUserDescription),  "initWithUser:properties:",  v12,  0LL);
          -[NSMutableDictionary setObject:forKeyedSubscript:](v5, "setObject:forKeyedSubscript:", v13, v11);
        }

        id v8 = -[NSDictionary countByEnumeratingWithState:objects:count:]( v6,  "countByEnumeratingWithState:objects:count:",  &v16,  v24,  16LL);
      }

      while (v8);
    }

    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      int v21 = v6;
      __int16 v22 = 2112;
      uint64_t v23 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Migrating user store to new format {oldMap: %@, newMap: %@}",  buf,  0x16u);
    }
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  return v5;
}

id sub_1002017C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 user]);
  if ([v4 realm] == *(id *)(a1 + 32)) {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 user]);
  }
  else {
    uint64_t v5 = 0LL;
  }

  return v5;
}

id sub_1002018D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 user]);
  int v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v5 realm]));
  else {
    id v7 = 0LL;
  }

  return v7;
}

id sub_100201ED0(uint64_t a1, void *a2)
{
  return _[a2 userStore:*(void *)(a1 + 32) didUpdateUser:*(void *)(a1 + 40)];
}

id sub_100202470(uint64_t a1, void *a2)
{
  return _[a2 userStore:*(void *)(a1 + 32) didAddUser:*(void *)(a1 + 40)];
}

id sub_100202638(void *a1, void *a2)
{
  return _[a2 userStore:a1[4] didRemoveUser:a1[5] withAuthenticationCertificate:a1[6]];
}

id sub_100202B3C(uint64_t a1, void *a2)
{
  return _[a2 userStore:*(void *)(a1 + 32) didRemoveAuthenticationCertificateForUser:*(void *)(a1 + 40)];
}

id sub_100202B48(void *a1, void *a2)
{
  return _[a2 userStore:a1[4] didAddAuthenticationCertificate:a1[5] forUser:a1[6]];
}

id sub_100202ED0(uint64_t a1, void *a2)
{
  return _[a2 userStore:*(void *)(a1 + 32) didUpdateUser:*(void *)(a1 + 40)];
}

void sub_1002040A8(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) stateManager]);
  [v2 ackUpdatesForActivity:*(void *)(a1 + 40)];
}

void sub_100207384(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___IDSRegistrationKeychainManager);
  id v2 = (void *)qword_1009C0608;
  qword_1009C0608 = (uint64_t)v1;
}

void sub_100207560(_Unwind_Exception *a1)
{
}

void sub_10020758C(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained[5] invalidate];
  id v1 = WeakRetained[5];
  WeakRetained[5] = 0LL;
}

void sub_1002075CC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v2 = (void *)WeakRetained[5];
  if (v2)
  {
    [v2 setFireTimeInterval:120.0];
  }

  else
  {
    uint64_t v3 = objc_alloc(&OBJC_CLASS___IMTimer);
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v6 = im_primary_queue(v3, v5);
    id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    id v8 = -[IMTimer initWithTimeInterval:name:shouldWake:target:selector:userInfo:queue:]( v3,  "initWithTimeInterval:name:shouldWake:target:selector:userInfo:queue:",  @"com.apple.identityservices.keychain-manager",  0LL,  v4,  "_flush",  0LL,  v7,  120.0);
    uint64_t v9 = (void *)WeakRetained[5];
    WeakRetained[5] = v8;
  }
}

id sub_100207754(uint64_t a1)
{
  return [*(id *)(a1 + 32) _flush];
}

void sub_1002083A4(uint64_t a1)
{
  id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog keychainManager](&OBJC_CLASS___IMRGLog, "keychainManager"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v3 = [*(id *)(a1 + 32) length];
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v5 = *(void *)(a1 + 48);
    uint64_t v6 = *(void *)(a1 + 56);
    int v7 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)buf = 67110146;
    unsigned int v18 = v3;
    __int16 v19 = 2112;
    uint64_t v20 = v4;
    __int16 v21 = 2112;
    uint64_t v22 = v5;
    __int16 v23 = 2112;
    uint64_t v24 = v6;
    __int16 v25 = 1024;
    int v26 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Saving %d bytes under service: %@   account: %@   accessGroup: %@   saveIdentifier: %d",  buf,  0x2Cu);
  }

  if (os_log_shim_legacy_logging_enabled(v8))
  {
    [*(id *)(a1 + 32) length];
    MarcoLogRegistration( @"KeychainManager",  @"FTServices",  @"Saving %d bytes under service: %@   account: %@   accessGroup: %@   saveIdentifier: %d");
  }

  unsigned int v16 = 0;
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDependencyProvider keychainAdapter](&OBJC_CLASS___IDSDependencyProvider, "keychainAdapter"));
  unsigned __int8 v10 = [v9 setKeychainData:*(void *)(a1 + 32) service:*(void *)(a1 + 40) account:*(void *)(a1 + 48) accessGroup:*(void *)(a1 + 56) allowSync:0 error:&v16];

  if ((v10 & 1) == 0)
  {
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog keychainManager](&OBJC_CLASS___IMRGLog, "keychainManager"));
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      unsigned int v18 = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Unable to save registrations to keychain (error: %d)",  buf,  8u);
    }

    if (os_log_shim_legacy_logging_enabled(v12)) {
      MarcoLogRegistration( @"KeychainManager",  @"FTServices",  @"Unable to save registrations to keychain (error: %d)");
    }
  }

  unint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog keychainManager](&OBJC_CLASS___IMRGLog, "keychainManager"));
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "** Saving registration data to keychain: Done **",  buf,  2u);
  }

  if (os_log_shim_legacy_logging_enabled(v14)) {
    MarcoLogRegistration( @"KeychainManager",  @"FTServices",  @"** Saving registration data to keychain: Done **");
  }
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotificationWithOptions( DarwinNotifyCenter,  IDSRegistrationKeychainChangedNotification,  0LL,  0LL,  0LL);
}

id sub_1002086C8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "__saveToKeychain");
}

id sub_1002098C8(void *a1)
{
  id v1 = a1;
  id v2 = v1;
  if (v1 && [v1 count])
  {
    id v3 = v2;
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKey:@"version"]);
    unint64_t v5 = (unint64_t)[v4 unsignedIntegerValue];
    unint64_t v6 = IDSKeychainBlobCurrentVersion;
    int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog keychainManager](&OBJC_CLASS___IMRGLog, "keychainManager"));
    BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    if (v5 > v6)
    {
      if (v8)
      {
        *(_DWORD *)buf = 67109376;
        LODWORD(v27[0]) = v5;
        WORD2(v27[0]) = 1024;
        *(_DWORD *)((char *)v27 + 6) = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Invalid keychain dict version (%d) -- current is %d",  buf,  0xEu);
      }

      if (os_log_shim_legacy_logging_enabled(v9)) {
        MarcoLogRegistration( @"KeychainManager",  @"FTServices",  @"Invalid keychain dict version (%d) -- current is %d");
      }
      id v10 = 0LL;
LABEL_38:

      goto LABEL_39;
    }

    if (v8)
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v27[0]) = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Updating keychain dict to current version (%d)",  buf,  8u);
    }

    if (os_log_shim_legacy_logging_enabled(v11))
    {
      unint64_t v24 = v6;
      MarcoLogRegistration( @"KeychainManager",  @"FTServices",  @"Updating keychain dict to current version (%d)");
    }

    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog keychainManager](&OBJC_CLASS___IMRGLog, "keychainManager", v24));
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v27[0] = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Keychain dictionary before upgrade : %@",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v13))
    {
      id v25 = v3;
      MarcoLogRegistration( @"KeychainManager",  @"FTServices",  @"Keychain dictionary before upgrade : %@");
    }

    if (v5 >= v6)
    {
LABEL_33:
      __int16 v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog keychainManager](&OBJC_CLASS___IMRGLog, "keychainManager", v25));
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v27[0] = v3;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Keychain dictionary after upgrade : %@",  buf,  0xCu);
      }

      if (os_log_shim_legacy_logging_enabled(v22)) {
        MarcoLogRegistration( @"KeychainManager",  @"FTServices",  @"Keychain dictionary after upgrade : %@");
      }
      id v10 = v3;
      id v3 = v10;
      goto LABEL_38;
    }

    while (v5 != 1)
    {
      if (!v5)
      {
        uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog keychainManager](&OBJC_CLASS___IMRGLog, "keychainManager"));
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "  => Updating from V0 to V1", buf, 2u);
        }

        id v16 = sub_10020A428(v3);
        uint64_t v17 = objc_claimAutoreleasedReturnValue(v16);
        unint64_t v5 = 1LL;
LABEL_31:

        id v3 = (id)v17;
      }

      if (v5 >= v6) {
        goto LABEL_33;
      }
    }

    unsigned int v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog keychainManager](&OBJC_CLASS___IMRGLog, "keychainManager"));
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "  => Updating from V1 to V2", buf, 2u);
    }

    id v20 = sub_10020A76C(v3);
    uint64_t v17 = objc_claimAutoreleasedReturnValue(v20);
    unint64_t v5 = 2LL;
    goto LABEL_31;
  }

  id v10 = 0LL;
LABEL_39:

  return v10;
}

id sub_10020A428(void *a1)
{
  id v1 = a1;
  id v2 = v1;
  if (v1 && [v1 count])
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
    uint64_t v4 = (__CFDictionary *)[v2 mutableCopy];
    unint64_t v5 = (__CFDictionary *)[v2 mutableCopy];
    unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKey:@"type"]);
    unsigned int v7 = [v6 intValue];

    if (v7)
    {
      if (v7 != 1)
      {
LABEL_24:
        CFDictionarySetValue(v4, @"migrated-v0-dictionary", v2);
        CFDictionarySetValue(v5, @"migrated-v0-dictionary", v2);
        uint64_t v16 = _StringForIDSRegistrationServiceType(IDSRegistrationServiceTypeFaceTime);
        uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
        -[__CFDictionary setObject:forKey:](v4, "setObject:forKey:", v17, @"service");

        uint64_t v18 = _StringForIDSRegistrationServiceType(IDSRegistrationServiceTypeiMessage);
        uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
        -[__CFDictionary setObject:forKey:](v5, "setObject:forKey:", v19, @"service");

        id v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  1LL));
        [v3 setObject:v20 forKey:@"version"];

        __int16 v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:](&OBJC_CLASS___NSArray, "arrayWithObjects:", v4, v5, 0LL));
        [v3 setObject:v21 forKey:@"data"];

        goto LABEL_25;
      }

      BOOL v8 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKey:@"phone-number"]);
      if (v8) {
        CFDictionarySetValue(v4, @"main-id", v8);
      }

      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKey:@"phone-number"]);
      if (v9) {
        CFDictionarySetValue(v5, @"main-id", v9);
      }

      id v10 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKey:@"user-id"]);
      if (v10) {
        CFDictionarySetValue(v4, @"profile-id", v10);
      }

      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKey:@"user-id"]);
      if (!v11)
      {
LABEL_23:

        goto LABEL_24;
      }

      uint64_t v12 = @"profile-id";
    }

    else
    {
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKey:@"phone-number"]);
      if (v15) {
        CFDictionarySetValue(v4, @"main-id", v15);
      }

      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKey:@"phone-number"]);
      if (!v11) {
        goto LABEL_23;
      }
      uint64_t v12 = @"main-id";
    }

    CFDictionarySetValue(v5, v12, v11);
    goto LABEL_23;
  }

  uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog keychainManager](&OBJC_CLASS___IMRGLog, "keychainManager"));
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Unable to upgrade an empty keychain data from V0 to V1",  buf,  2u);
  }

  if (os_log_shim_legacy_logging_enabled(v14)) {
    MarcoLogRegistration( @"KeychainManager",  @"FTServices",  @"Unable to upgrade an empty keychain data from V0 to V1");
  }
  id v3 = 0LL;
LABEL_25:

  return v3;
}

id sub_10020A76C(void *a1)
{
  id v1 = a1;
  id v2 = v1;
  if (v1 && [v1 count])
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKey:@"sms-signatures"]);
    id v4 = [v3 mutableCopy];

    unint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:@"phone-number-registration-main-id"]);
    unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:@"phone-number-registration"]);
    [v4 removeAllObjects];
    id v7 = [v5 length];
    id v8 = [v6 length];
    if (v7 && v8) {
      [v4 setObject:v6 forKey:v5];
    }
    id v9 = [v2 mutableCopy];
    id v10 = v9;
    if (v4) {
      uint64_t v11 = v4;
    }
    else {
      uint64_t v11 = &__NSDictionary0__struct;
    }
    [v9 setObject:v11 forKey:@"sms-signatures"];
    id v12 = [v10 copy];
  }

  else
  {
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog keychainManager](&OBJC_CLASS___IMRGLog, "keychainManager"));
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Unable to upgrade an empty keychain data from V1 to V2",  v16,  2u);
    }

    if (os_log_shim_legacy_logging_enabled(v14)) {
      MarcoLogRegistration( @"KeychainManager",  @"FTServices",  @"Unable to upgrade an empty keychain data from V1 to V2");
    }
    id v12 = 0LL;
  }

  return v12;
}

void sub_10020B48C(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___IDSDaemonCapabilities);
  id v2 = (void *)qword_1009C0620;
  qword_1009C0620 = (uint64_t)v1;
}

id sub_10020B740(void *a1, id a2)
{
  id v3 = a1;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[IDSCTAdapter sharedInstance](&OBJC_CLASS___IDSCTAdapter, "sharedInstance", 0LL));
  uint64_t v6 = objc_opt_class(&OBJC_CLASS___NSNumber, v5);
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a2));
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v4 carrierBundleValueFromAllSIMsForKey:v3 ofType:v6 withFallback:v7]);

  id v9 = [v8 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v15;
    LOBYTE(a2) = 1;
    do
    {
      id v12 = 0LL;
      do
      {
        if (*(void *)v15 != v11) {
          objc_enumerationMutation(v8);
        }
        else {
          a2 = 0LL;
        }
        id v12 = (char *)v12 + 1;
      }

      while (v10 != v12);
      id v10 = [v8 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }

    while (v10);
  }

  return a2;
}

id sub_10020B970(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 138412546;
    uint64_t v9 = a2;
    __int16 v10 = 2112;
    uint64_t v11 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Daemon MG capabilities changed: %@  (%@)",  (uint8_t *)&v8,  0x16u);
  }

  return [*(id *)(a1 + 32) _deferredUpdateCapabilities];
}

id sub_10020BB74(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateCapabilities];
}

void sub_10020BC10(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  id v2 = (void *)qword_1009C0628;
  qword_1009C0628 = (uint64_t)v1;
}

void sub_10020BD08(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___IDSRegistrationCenter);
  id v2 = (void *)qword_1009C0640;
  qword_1009C0640 = (uint64_t)v1;
}

id sub_10020C0F8(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "__sendMessage:", a2);
}

void sub_10020C104(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setTimeout:36000.0];
  objc_msgSend(*(id *)(a1 + 32), "__sendMessage:", v3);
}

id sub_10020C14C(uint64_t a1)
{
  id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Processed getDependent queue", v4, 2u);
  }

  return [*(id *)(a1 + 32) _dequeuePendingRequestsIfNecessary];
}

void sub_10020C1C4(id a1, IDSRegistrationCenter *a2)
{
}

void sub_10020C1CC(id a1, IDSRegistrationCenter *a2)
{
}

void sub_10020C1D4(id a1, IDSRegistrationCenter *a2)
{
}

void sub_10020C1DC(id a1, IDSRegistrationCenter *a2)
{
  id v2 = a2;
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "  Absinthe cleanup timer hit!", buf, 2u);
  }

  if (-[IDSRegistrationCenter _hasCurrentAuthenticationsOrRegistrations]( v2,  "_hasCurrentAuthenticationsOrRegistrations"))
  {
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "We have current authentications or registrations -- not cleaning up Absinthe validation info yet",  v5,  2u);
    }
  }

  else
  {
    -[IDSValidationQueue cleanupValidationInfoForSubsystemMechanism:]( v2->_validationQueue,  "cleanupValidationInfoForSubsystemMechanism:",  1LL);
    -[IDSRegistrationCenter __dumpState](v2, "__dumpState");
  }
}

void sub_10020C628()
{
}

id sub_10020D10C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _dequeuePendingRequestsIfNecessary];
}

void sub_10020D114(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 48LL) = 0;
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 16) lastObject]);
  if (v2)
  {
    id v3 = [*(id *)(*(void *)(a1 + 32) + 24) count];
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    if (v3)
    {
      if (v5)
      {
        uint64_t v6 = *(void **)(*(void *)(a1 + 32) + 24LL);
        *(_DWORD *)buf = 138412290;
        uint64_t v22 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  " ** Not sending, we have current authentications in flight, %@",  buf,  0xCu);
      }

      objc_msgSend(*(id *)(a1 + 32), "__dumpState");
    }

    else
    {
      if (v5)
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v22 = v2;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  " Sending pending authentication: %@",  buf,  0xCu);
      }

      [*(id *)(a1 + 32) _sendAuthenticateRegistration:v2];
    }
  }

  else
  {
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, " No pending authentication", buf, 2u);
    }
  }

  int v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 8) lastObject]);
  if (v8)
  {
    if ([*(id *)(*(void *)(a1 + 32) + 32) count])
    {
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v10 = *(void **)(*(void *)(a1 + 32) + 32LL);
        *(_DWORD *)buf = 138412290;
        uint64_t v22 = v10;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  " ** Not sending, we have current registrations in flight, %@",  buf,  0xCu);
      }

      objc_msgSend(*(id *)(a1 + 32), "__dumpState");
    }

    else
    {
      unsigned int v12 = [v8 canSendRegistration];
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      BOOL v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
      if (v12)
      {
        if (v14)
        {
          *(_DWORD *)buf = 138412290;
          uint64_t v22 = v8;
          _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  " Sending pending registration: %@",  buf,  0xCu);
        }

        [*(id *)(a1 + 32) sendRegistration:v8];
      }

      else
      {
        if (v14)
        {
          *(_DWORD *)buf = 138412290;
          uint64_t v22 = v8;
          _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  " Removing pending registration, can't register: %@",  buf,  0xCu);
        }

        [*(id *)(*(void *)(a1 + 32) + 8) removeObjectIdenticalTo:v8];
        if ([*(id *)(*(void *)(a1 + 32) + 8) count])
        {
          v20[0] = _NSConcreteStackBlock;
          v20[1] = 3221225472LL;
          v20[2] = sub_10020D5AC;
          v20[3] = &unk_1008F6010;
          void v20[4] = *(void *)(a1 + 32);
          im_dispatch_after_primary_queue(v20, 3.0);
        }
      }
    }
  }

  else
  {
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, " No pending registration", buf, 2u);
    }
  }

  __int128 v15 = *(_BYTE **)(a1 + 32);
  if (v15[49])
  {
    __int128 v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, " Sending pending deregistration...", buf, 2u);
    }

    [*(id *)(a1 + 32) _sendRegistrationAsDeregister:1];
    __int128 v15 = *(_BYTE **)(a1 + 32);
  }

  unsigned int v17 = [v15 _hasCurrentAuthenticationsOrRegistrations];
  uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  BOOL v19 = os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
  if (v17)
  {
    if (v19)
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "We have current authentications or registrations -- canceling pending Absinthe cleanup operations",  buf,  2u);
    }

    [*(id *)(*(void *)(a1 + 32) + 176) cancelPendingExecutions];
  }

  else
  {
    if (v19)
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "We have no current authentications or registrations -- enqueueing Absinthe cleanup operation",  buf,  2u);
    }

    objc_msgSend(*(id *)(*(void *)(a1 + 32) + 176), "enqueueExecutionWithTarget:afterDelay:", 30.0);
  }

  objc_msgSend(*(id *)(a1 + 32), "__dumpState");
}

id sub_10020D5AC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _dequeuePendingRequestsIfNecessary];
}

void sub_10020DD20()
{
}

void sub_10020DD70( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, os_activity_scope_state_s state, char a29)
{
}

void sub_10020DD88(uint64_t a1, int a2)
{
  if (!a2) {
    sub_10020DD8C();
  }
  objc_terminate();
  -[IDSRegistrationCenter _notifyIDSAuthenticationSuccess:](v2, v3, v4);
}

void sub_10020E280()
{
}

void sub_10020E2C8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, os_activity_scope_state_s state, char a25)
{
}

void sub_10020E2E0(uint64_t a1, int a2)
{
  if (!a2) {
    sub_10020E2E4();
  }
  objc_terminate();
  -[IDSRegistrationCenter _notifyRegistrationFailure:responseCode:registrationError:error:info:]( v2,  v3,  v4,  v5,  v6,  v7,  v8);
}

void sub_10020EC00()
{
}

void sub_10020EC60( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, os_activity_scope_state_s state, char a45)
{
}

uint64_t sub_10020EC78(uint64_t a1, int a2)
{
  if (!a2) {
    sub_10020EC7C();
  }
  objc_terminate();
  return sub_10020EC8C();
}

void sub_10020EC8C(void *a1, uint64_t a2)
{
  switch(a2)
  {
    case 4LL:
      id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Need to refresh KT Account key, and CDP is ready.",  buf,  2u);
      }

      int64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[IDSServerBag sharedInstance](&OBJC_CLASS___IDSServerBag, "sharedInstance"));
      int64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKey:@"kt-rereg-after-ak-refresh-with-cdp-ready"]);

      if (v6 && (uint64_t v8 = objc_opt_class(&OBJC_CLASS___NSNumber, v7), (objc_opt_isKindOfClass(v6, v8) & 1) != 0))
      {
        unsigned int v9 = [v6 BOOLValue];

        if (!v9) {
          goto LABEL_21;
        }
      }

      else
      {
      }

      [*(id *)(a1[4] + 136) registrationDataNeedsUpdate];
LABEL_21:
      uint64_t v11 = 49LL;
      goto LABEL_22;
    case 3LL:
      __int16 v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Need to refresh KT Account key, but CDP is syncing.",  buf,  2u);
      }

      goto LABEL_21;
    case 2LL:
      SEL v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Need to refresh KT Account key, but we're waiting for user.",  buf,  2u);
      }

      break;
    default:
      SEL v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Need to refresh KT Account key, but we're confused.",  buf,  2u);
      }

      break;
  }

  uint64_t v11 = 48LL;
LABEL_22:
  id v12 = [*(id *)(a1[4] + 40) _copyForEnumerating];
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  id v13 = v12;
  id v14 = [v13 countByEnumeratingWithState:&v18 objects:v23 count:16];
  if (v14)
  {
    uint64_t v15 = *(void *)v19;
    do
    {
      for (i = 0LL; i != v14; i = (char *)i + 1)
      {
        if (*(void *)v19 != v15) {
          objc_enumerationMutation(v13);
        }
        unsigned int v17 = *(void **)(*((void *)&v18 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector(v17, "center:failedRegistration:error:info:") & 1) != 0) {
          [v17 center:a1[4] failedRegistration:a1[5] error:v11 info:a1[6]];
        }
      }

      id v14 = [v13 countByEnumeratingWithState:&v18 objects:v23 count:16];
    }

    while (v14);
  }
}

void sub_10020EFE4()
{
}

void sub_10020F500()
{
}

void sub_10020F548( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, os_activity_scope_state_s state, char a25)
{
}

void sub_10020F560(uint64_t a1, int a2)
{
  if (!a2) {
    sub_10020F564();
  }
  objc_terminate();
  -[IDSRegistrationCenter _notifyAllSuccessfulRegistrations:](v2, v3, v4);
}

void sub_10020F760()
{
}

void sub_10020FCBC()
{
}

void sub_10020FFB0()
{
}

void sub_100210194(_Unwind_Exception *a1)
{
}

LABEL_379:
                    v308 = v133;
                    goto LABEL_205;
                  }

                  if ([v310 hasPrefix:@"D:"]
                    && IDSDebuggingShouldFakeEmailChallenge())
                  {
                    id v139 = IMGetDomainValueForKey( @"com.apple.registration",  @"emailUserCodeOverrideService");
                    uint64_t v135 = (void *)objc_claimAutoreleasedReturnValue(v139);
                    id v141 = objc_opt_class(&OBJC_CLASS___NSString, v140);
                    if ((objc_opt_isKindOfClass(v135, v141) & 1) != 0
                      && [v135 length]
                      && ![v135 isEqualToString:v352])
                    {
                      goto LABEL_379;
                    }

                    uint64_t v142 = +[NSNumber numberWithInteger:]( &OBJC_CLASS___NSNumber,  "numberWithInteger:",  IMGetDomainIntForKey(@"com.apple.registration", @"emailUserCodeOverride"));
                    v308 = (void *)objc_claimAutoreleasedReturnValue(v142);
LABEL_204:

LABEL_205:
                    goto LABEL_207;
                  }

                  v308 = v133;
LABEL_207:
                  v143 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                  if (os_log_type_enabled(v143, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)buf = 138413058;
                    *(void *)v434 = v310;
                    *(_WORD *)&v434[8] = 2112;
                    *(void *)&v434[10] = v352;
                    *(_WORD *)&v434[18] = 2112;
                    *(void *)&v434[20] = v308;
                    *(_WORD *)&v434[28] = 2114;
                    *(void *)&v434[30] = v292;
                    _os_log_impl( (void *)&_mh_execute_header,  v143,  OS_LOG_TYPE_DEFAULT,  "Processing registration response for user { user: %@, service: %@, status: %@, serverErrorDetail: %{public}@ }",  buf,  0x2Au);
                  }

                  v144 = objc_claimAutoreleasedReturnValue([v295 objectForKey:@"alert"]);
                  uint64_t v145 = v315;
                  v299 = (void *)v144;
                  if (v144) {
                    uint64_t v145 = (void *)v144;
                  }
                  v306 = v145;
                  v304 = (void *)objc_claimAutoreleasedReturnValue([v295 objectForKey:@"cert"]);
                  v298 = (void *)objc_claimAutoreleasedReturnValue([v295 objectForKey:@"uris"]);
                  v146 = v294;
                  if (!v294) {
                    v146 = (void *)objc_claimAutoreleasedReturnValue([v295 objectForKey:@"next-hbi"]);
                  }
                  v294 = v146;
                  [v146 doubleValue];
                  uint64_t v148 = v147;
                  if (v147 < 60.0)
                  {
                    v149 = (void *)objc_claimAutoreleasedReturnValue( +[IDSHeartbeatCenter sharedInstance]( &OBJC_CLASS___IDSHeartbeatCenter,  "sharedInstance"));
                    [v149 registrationHBI];
                    uint64_t v148 = v150;

                    v151 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                    if (os_log_type_enabled(v151, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)buf = 134217984;
                      *(double *)v434 = v148;
                      _os_log_impl( (void *)&_mh_execute_header,  v151,  OS_LOG_TYPE_DEFAULT,  "No value in response, we're using HBI: %f",  buf,  0xCu);
                    }
                  }

                  if (v148 <= 60.0)
                  {
                    v152 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                    if (os_log_type_enabled(v152, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_impl( (void *)&_mh_execute_header,  v152,  OS_LOG_TYPE_DEFAULT,  "Success, Using fallback registration date",  buf,  2u);
                    }

                    v297 = 0LL;
                  }

                  else
                  {
                    v297 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceNow:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceNow:",  v148));
                    v152 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                    if (os_log_type_enabled(v152, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)buf = 138412290;
                      *(void *)v434 = v297;
                      _os_log_impl( (void *)&_mh_execute_header,  v152,  OS_LOG_TYPE_DEFAULT,  "Success, next registration date is: %@",  buf,  0xCu);
                    }
                  }

                  v395 = 0u;
                  v394 = 0u;
                  v393 = 0u;
                  v392 = 0u;
                  v309 = obj;
                  v312 = [v309 countByEnumeratingWithState:&v392 objects:v436 count:16];
                  if (v312)
                  {
                    v311 = *(void *)v393;
                    do
                    {
                      v322 = 0LL;
                      do
                      {
                        if (*(void *)v393 != v311) {
                          objc_enumerationMutation(v309);
                        }
                        v333 = *(void **)(*((void *)&v392 + 1) + 8LL * (void)v322);
                        unsigned int v153 = (void *)objc_claimAutoreleasedReturnValue([v333 serviceType]);
                        v154 = sub_10012EBC4(v153);
                        v344 = (void *)objc_claimAutoreleasedReturnValue(v154);

                        if ([v352 isEqualToIgnoringCase:v344])
                        {
                          unsigned int v155 = (void *)objc_claimAutoreleasedReturnValue([v333 idsUserID]);
                          uint64_t v156 = [v310 isEqualToString:v155];

                          v157 = [v333 registrationType];
                          v158 = v353;
                          if (v157 == 1)
                          {
                            v159 = (void *)objc_claimAutoreleasedReturnValue([v333 profileID]);
                            v160 = [v310 isEqualToString:v159];

                            v158 = v353;
                          }

                          else
                          {
                            v160 = 0;
                          }

                          if ((v156 | v160) == 1)
                          {
                            -[NSMutableArray removeObjectIdenticalTo:]( v158->_currentRegistrations,  "removeObjectIdenticalTo:",  v333);
                            -[NSMutableArray removeObjectIdenticalTo:](v307, "removeObjectIdenticalTo:", v333);
                            uint64_t v161 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                            if (os_log_type_enabled(v161, OS_LOG_TYPE_DEFAULT))
                            {
                              v162 = (id)objc_claimAutoreleasedReturnValue([v333 idsUserID]);
                              *(_DWORD *)buf = 138412546;
                              *(void *)v434 = v162;
                              *(_WORD *)&v434[8] = 2112;
                              *(void *)&v434[10] = v310;
                              _os_log_impl( (void *)&_mh_execute_header,  v161,  OS_LOG_TYPE_DEFAULT,  "*** Matched registration user ID: %@ for user ID: %@",  buf,  0x16u);
                            }

                            v163 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                            if (os_log_type_enabled(v163, OS_LOG_TYPE_DEFAULT))
                            {
                              *(_DWORD *)buf = 138412290;
                              *(void *)v434 = v308;
                              _os_log_impl( (void *)&_mh_execute_header,  v163,  OS_LOG_TYPE_DEFAULT,  " Result status: %@",  buf,  0xCu);
                            }

                            v164 = [v308 intValue];
                            switch(v164)
                            {
                              case 0x1775u:
                              case 0x1778u:
                                v165 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                                if (os_log_type_enabled(v165, OS_LOG_TYPE_DEFAULT))
                                {
                                  *(_DWORD *)buf = 138412290;
                                  *(void *)v434 = v333;
                                  _os_log_impl( (void *)&_mh_execute_header,  v165,  OS_LOG_TYPE_DEFAULT,  " *** Need new credentials { candidateRegistration: %@ }",  buf,  0xCu);
                                }

                                if (![v333 registrationType])
                                {
                                  v166 = (void *)objc_claimAutoreleasedReturnValue( -[IDSRegistrationCenter registrationReasonTracker]( v353,  "registrationReasonTracker"));
                                  id v167 = (void *)objc_claimAutoreleasedReturnValue([v333 userUniqueIdentifier]);
                                  [v166 setPNRReason:14 forUserUniqueIdentifier:v167];

                                  uint64_t v168 = (void *)objc_claimAutoreleasedReturnValue( +[IDSPACStateTracker sharedInstance]( &OBJC_CLASS___IDSPACStateTracker,  "sharedInstance"));
                                  [v168 notePhoneAuthCertLost:1];
                                }

                                [v333 setAuthenticationCert:0];
                                uint64_t v169 = 37LL;
                                goto LABEL_324;
                              case 0x1776u:
                              case 0x1777u:
                              case 0x177Au:
                              case 0x177Bu:
                              case 0x177Cu:
                                goto LABEL_248;
                              case 0x1779u:
                                v178 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                                if (os_log_type_enabled(v178, OS_LOG_TYPE_DEFAULT))
                                {
                                  *(_DWORD *)buf = 138412290;
                                  *(void *)v434 = v333;
                                  _os_log_impl( (void *)&_mh_execute_header,  v178,  OS_LOG_TYPE_DEFAULT,  " *** Server rejected registration permanently { candidateRegistration: %@ }",  buf,  0xCu);
                                }

                                sub_100214748(v299);
                                uint64_t v169 = 38LL;
                                goto LABEL_324;
                              case 0x177Du:
                                v175 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                                if (os_log_type_enabled(v175, OS_LOG_TYPE_DEFAULT))
                                {
                                  *(_DWORD *)buf = 138412290;
                                  *(void *)v434 = v333;
                                  _os_log_impl( (void *)&_mh_execute_header,  v175,  OS_LOG_TYPE_DEFAULT,  " *** Server rejected registration, need new Account Key for KT. { candidateRegistration: %@ }",  buf,  0xCu);
                                }

                                v176 = (os_log_s *)objc_claimAutoreleasedReturnValue([v295 objectForKey:@"kt-account-key"]);
                                double v177 = objc_alloc_init(&OBJC_CLASS___TransparencyDaemon);
                                -[TransparencyDaemon transparencyCheckKTAccountKey:complete:]( v177,  "transparencyCheckKTAccountKey:complete:",  v176,  &stru_1008FE150);

                                uint64_t v169 = 47LL;
                                goto LABEL_323;
                              default:
                                if (!v164)
                                {
                                  v172 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                                  if (os_log_type_enabled(v172, OS_LOG_TYPE_DEFAULT))
                                  {
                                    *(_WORD *)buf = 0;
                                    uint64_t v173 = v172;
                                    uint64_t v174 = " Success!";
LABEL_263:
                                    _os_log_impl((void *)&_mh_execute_header, v173, OS_LOG_TYPE_DEFAULT, v174, buf, 2u);
                                  }

LABEL_264:
                                  v179 = objc_alloc_init(&OBJC_CLASS___NSDate);
                                  dateLastRegistered = v353->_dateLastRegistered;
                                  v353->_dateLastRegistered = v179;

                                  v330 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
                                  v320 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
                                  v181 = v353;
                                  v391 = 0u;
                                  v390 = 0u;
                                  v389 = 0u;
                                  v388 = 0u;
                                  v341 = v298;
                                  id v182 = [v341 countByEnumeratingWithState:&v388 objects:v435 count:16];
                                  if (v182)
                                  {
                                    v347 = *(void *)v389;
                                    do
                                    {
                                      v349 = v182;
                                      for (nn = 0LL; nn != v349; nn = (char *)nn + 1)
                                      {
                                        if (*(void *)v389 != v347) {
                                          objc_enumerationMutation(v341);
                                        }
                                        __int128 v184 = *(void **)(*((void *)&v388 + 1) + 8LL * (void)nn);
                                        __int128 v185 = (void *)objc_claimAutoreleasedReturnValue([v184 objectForKey:@"uri"]);
                                        v358 = (void *)objc_claimAutoreleasedReturnValue([v184 objectForKey:@"status"]);
                                        __int128 v186 = objc_claimAutoreleasedReturnValue([v184 objectForKey:@"kt-status"]);
                                        if (v185)
                                        {
                                          id v187 = (id)objc_claimAutoreleasedReturnValue( +[IDSURI URIWithPrefixedURI:]( &OBJC_CLASS___IDSURI,  "URIWithPrefixedURI:",  v185));

                                          v181 = v353;
                                        }

                                        else
                                        {
                                          id v187 = 0LL;
                                        }

                                        v356 = (void *)objc_claimAutoreleasedReturnValue( -[IDSRegistrationCenter _keyTransparencyAccountKeyFromRegistrationMessage:service:URI:]( v181,  "_keyTransparencyAccountKeyFromRegistrationMessage:service:URI:",  v350,  v352,  v187));
                                        v188 = objc_claimAutoreleasedReturnValue([v184 objectForKey:@"kt-blob"]);
                                        v189 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IMRGLog registration]( &OBJC_CLASS___IMRGLog,  "registration"));
                                        if (os_log_type_enabled(v189, OS_LOG_TYPE_DEBUG))
                                        {
                                          *(_DWORD *)buf = 138412546;
                                          *(void *)v434 = v344;
                                          *(_WORD *)&v434[8] = 2112;
                                          *(void *)&v434[10] = v184;
                                          _os_log_debug_impl( (void *)&_mh_execute_header,  v189,  OS_LOG_TYPE_DEBUG,  "Received per-URI status dictionary in register response { service: %@, binding: %@ }",  buf,  0x16u);
                                        }

                                        if (v185 && ![v358 intValue])
                                        {
                                          -[NSMutableArray addObject:](v330, "addObject:", v185);
                                        }

                                        else
                                        {
                                          id v190 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IMRGLog registration]( &OBJC_CLASS___IMRGLog,  "registration"));
                                          if (os_log_type_enabled(v190, OS_LOG_TYPE_DEFAULT))
                                          {
                                            *(_DWORD *)buf = 138412802;
                                            *(void *)v434 = v344;
                                            *(_WORD *)&v434[8] = 2112;
                                            *(void *)&v434[10] = v185;
                                            *(_WORD *)&v434[18] = 2112;
                                            *(void *)&v434[20] = v358;
                                            _os_log_impl( (void *)&_mh_execute_header,  v190,  OS_LOG_TYPE_DEFAULT,  "Invalid status returned for a URI in register response -- dropping { servi ce: %@, URI: %@, status: %@ }",  buf,  0x20u);
                                          }
                                        }

                                        if (v186 | v188)
                                        {
                                          __int16 v191 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog KeyTransparency]( &OBJC_CLASS___IDSFoundationLog,  "KeyTransparency"));
                                          if (os_log_type_enabled(v191, OS_LOG_TYPE_DEFAULT))
                                          {
                                            *(_DWORD *)buf = 138413314;
                                            *(void *)v434 = v344;
                                            *(_WORD *)&v434[8] = 2112;
                                            *(void *)&v434[10] = v185;
                                            *(_WORD *)&v434[18] = 2112;
                                            *(void *)&v434[20] = v356;
                                            *(_WORD *)&v434[28] = 2112;
                                            *(void *)&v434[30] = v186;
                                            *(_WORD *)&v434[38] = 2112;
                                            *(void *)&v434[40] = v188;
                                            _os_log_impl( (void *)&_mh_execute_header,  v191,  OS_LOG_TYPE_DEFAULT,  "KT data returned in register response { service: %@, URI: %@, KTAccountID: %@, KTStatus: %@, KTBlob: %@ }",  buf,  0x34u);
                                          }
                                        }

                                        if (+[IDSKeyTransparencyVerifier isKeyTransparencyEnabled]( &OBJC_CLASS___IDSKeyTransparencyVerifier,  "isKeyTransparencyEnabled"))
                                        {
                                          double v192 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDServiceController sharedInstance]( &OBJC_CLASS___IDSDServiceController,  "sharedInstance"));
                                          __int16 v193 = (void *)objc_claimAutoreleasedReturnValue([v192 serviceWithIdentifier:v352]);

                                          if ([v193 adHocServiceType])
                                          {
                                            v194 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDServiceController sharedInstance]( &OBJC_CLASS___IDSDServiceController,  "sharedInstance"));
                                            __int16 v195 = objc_claimAutoreleasedReturnValue( objc_msgSend( v194,  "primaryServiceForAdhocServiceType:",  objc_msgSend(v193, "adHocServiceType")));

                                            __int16 v193 = (void *)v195;
                                          }

                                          if ([v193 ktRegistrationDataIndex])
                                          {
                                            uint64_t v196 = [v193 ktRegistrationDataIndex];
                                            v197 = (void *)objc_claimAutoreleasedReturnValue( +[IDSRegistrationKeyManager sharedInstance]( &OBJC_CLASS___IDSRegistrationKeyManager,  "sharedInstance"));
                                            v198 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedShort:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedShort:",  v196));
                                            v199 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v337,  "objectForKeyedSubscript:",  v198));
                                            [v197 noteDidRegisterKTData:v199 forKeyIndex:v196];

                                            v335 = 1;
                                          }

                                          if (v186 && v187 && ![(id)v186 integerValue])
                                          {
                                            if (v356)
                                            {
                                              -[NSMutableArray addObject:](v320, "addObject:", v185);
                                              v200 = objc_alloc(&OBJC_CLASS___IDSKeyTransparencyIndex);
                                              v201 = (void *)objc_claimAutoreleasedReturnValue([v333 serviceIdentifier]);
                                              v328 = -[IDSKeyTransparencyIndex initWithServiceIdentifier:accountKey:URI:]( v200,  "initWithServiceIdentifier:accountKey:URI:",  v201,  v356,  v187);

                                              v324 = -[IDSKeyTransparencyVerificationState initWithTransparencyStatus:transparencyBlob:]( objc_alloc(&OBJC_CLASS___IDSKeyTransparencyVerificationState),  "initWithTransparencyStatus:transparencyBlob:",  v186,  v188);
                                              v326 = (id)objc_claimAutoreleasedReturnValue( -[IDSRegistrationCenter _keyTransparencyLoggableDataFromRegistrationMessage:service:URI:]( v353,  "_keyTransparencyLoggableDataFromRegistrationMessage:service:URI:",  v350,  v352,  v187));
                                              v202 = (void *)objc_claimAutoreleasedReturnValue( -[IDSRegistrationCenter _keyTransparencyDeviceSignatureFromRegistrationMessage:service:URI:]( v353,  "_keyTransparencyDeviceSignatureFromRegistrationMessage:service:URI:",  v350,  v352,  v187));
                                              v203 = (void *)objc_claimAutoreleasedReturnValue([v333 pushToken]);
                                              if (v202 && v326 && v203)
                                              {
                                                v316 = v203;
                                                v204 = objc_alloc(&OBJC_CLASS___IDSKeyTransparencyEntry);
                                                v205 = (void *)objc_claimAutoreleasedReturnValue([v333 pushToken]);
                                                v206 = -[IDSKeyTransparencyEntry initWithPushToken:loggableData:signedData:]( v204,  "initWithPushToken:loggableData:signedData:",  v205,  v326,  v202);

                                                -[IDSKeyTransparencyEntry setKtCapable:](v206, "setKtCapable:", 1LL);
                                                v207 = (void *)objc_claimAutoreleasedReturnValue( -[IDSRegistrationCenter keyTransparencyVerifier]( v353,  "keyTransparencyVerifier"));
                                                v208 =  [v207 transparencyTicketForRegistrationWithIndex:v328 verificationState:v324 entry:v206];

                                                v203 = v316;
                                              }
                                            }

                                            else
                                            {
                                              v209 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog KeyTransparency]( &OBJC_CLASS___IDSFoundationLog,  "KeyTransparency"));
                                              v328 = (IDSKeyTransparencyIndex *)v209;
                                              if (os_log_type_enabled(v209, OS_LOG_TYPE_DEFAULT))
                                              {
                                                *(_WORD *)buf = 0;
                                                _os_log_impl( (void *)&_mh_execute_header,  v209,  OS_LOG_TYPE_DEFAULT,  "Received no KTAccount key.",  buf,  2u);
                                              }
                                            }
                                          }
                                        }

                                        v181 = v353;
                                      }

                                      id v182 = [v341 countByEnumeratingWithState:&v388 objects:v435 count:16];
                                    }

                                    while (v182);
                                  }

                                  v210 = v330;
                                  v211 = (void *)objc_claimAutoreleasedReturnValue([v333 serviceType]);
                                  v212 = IDSIsFaceTimeRegistrationServiceType(v211);

                                  if ((v212 & 1) != 0
                                    || (v213 = (void *)objc_claimAutoreleasedReturnValue([v333 serviceType]),
                                        v214 = IDSIsCallingRegistrationServiceType(v213),
                                        v213,
                                        v214))
                                  {
                                    v215 = _IDSInvitationProtocolVersionNumber();
                                    v216 = objc_claimAutoreleasedReturnValue(v215);
                                  }

                                  else
                                  {
                                    v235 = (void *)objc_claimAutoreleasedReturnValue([v333 serviceType]);
                                    v236 = IDSIsiMessageRegistrationServiceType(v235);

                                    if (v236) {
                                      v237 = _IDSiMessageProtocolVersionNumber();
                                    }
                                    else {
                                      v237 = _IDSAlloyProtocolVersionNumber();
                                    }
                                    v216 = objc_claimAutoreleasedReturnValue(v237);
                                  }

                                  v217 = (void *)v216;
                                  [v333 setRegistrationCert:v304];
                                  v218 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
                                  [v333 setRegistrationDate:v218];

                                  [v333 setNextRegistrationDate:v297];
                                  v219 = (void *)objc_claimAutoreleasedReturnValue( +[IDSServerBag sharedInstance]( &OBJC_CLASS___IDSServerBag,  "sharedInstance"));
                                  v220 = (void *)objc_claimAutoreleasedReturnValue([v219 apsEnvironmentName]);
                                  [v333 setEnvironment:v220];

                                  v221 = (void *)objc_claimAutoreleasedReturnValue([v350 pushToken]);
                                  [v333 setPushToken:v221];

                                  v222 = _IDSIdentityVersionNumber([v333 setApplicationVersion:v217]);
                                  v223 = (void *)objc_claimAutoreleasedReturnValue(v222);
                                  [v333 setIdentityVersion:v223];

                                  v224 = _IDSIDProtocolVersionNumber();
                                  v225 = (void *)objc_claimAutoreleasedReturnValue(v224);
                                  [v333 setIDSVersion:v225];

                                  [v333 setRegistrationStatus:8];
                                  [v333 setDeviceName:v336];
                                  v226 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  v296));
                                  [v333 setIsCDMA:v226];

                                  if ([v333 isDisabled])
                                  {
                                    v227 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                                    if (os_log_type_enabled(v227, OS_LOG_TYPE_DEFAULT))
                                    {
                                      *(_DWORD *)buf = 138412290;
                                      *(void *)v434 = v333;
                                      v228 = v227;
                                      v229 = "Registration disabled, not saving. { candidateRegistration : %@ }";
                                      goto LABEL_312;
                                    }
                                  }

                                  else
                                  {
                                    [v333 saveToKeychain];
                                    v227 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                                    if (os_log_type_enabled(v227, OS_LOG_TYPE_DEFAULT))
                                    {
                                      *(_DWORD *)buf = 138412290;
                                      *(void *)v434 = v333;
                                      v228 = v227;
                                      v229 = "Registration not disabled, saving. { candidateRegistration : %@ }";
LABEL_312:
                                      _os_log_impl( (void *)&_mh_execute_header,  v228,  OS_LOG_TYPE_DEFAULT,  v229,  buf,  0xCu);
                                    }
                                  }

                                  if (![v333 registrationType])
                                  {
                                    v230 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableArray _IDsFromURIs](v210, "_IDsFromURIs"));
                                    v231 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                                    if (os_log_type_enabled(v231, OS_LOG_TYPE_DEFAULT))
                                    {
                                      *(_WORD *)buf = 0;
                                      _os_log_impl( (void *)&_mh_execute_header,  v231,  OS_LOG_TYPE_DEFAULT,  "Extracted IDs from bindings",  buf,  2u);
                                    }

                                    v232 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v230, "__imFirstObject"));
                                    if ([v232 length])
                                    {
                                      v233 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IMRGLog registration]( &OBJC_CLASS___IMRGLog,  "registration"));
                                      if (os_log_type_enabled(v233, OS_LOG_TYPE_DEFAULT))
                                      {
                                        *(_DWORD *)buf = 138412546;
                                        *(void *)v434 = v232;
                                        *(_WORD *)&v434[8] = 2112;
                                        *(void *)&v434[10] = v333;
                                        _os_log_impl( (void *)&_mh_execute_header,  v233,  OS_LOG_TYPE_DEFAULT,  "Setting number: %@  on registration: %@",  buf,  0x16u);
                                      }

                                      [v333 setPhoneNumber:v232];
                                    }

                                    else
                                    {
                                      v238 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IMRGLog registration]( &OBJC_CLASS___IMRGLog,  "registration"));
                                      if (os_log_type_enabled(v238, OS_LOG_TYPE_DEFAULT))
                                      {
                                        *(_WORD *)buf = 0;
                                        _os_log_impl( (void *)&_mh_execute_header,  v238,  OS_LOG_TYPE_DEFAULT,  "Number is empty, not adjusting",  buf,  2u);
                                      }
                                    }
                                  }

                                  v239 = v210;
                                  v239 = v210;
                                  if (-[NSMutableArray count](v210, "count")) {
                                    goto LABEL_355;
                                  }
                                  if ([v333 shouldRegisterUsingDSHandle])
                                  {
                                    v240 = (void *)objc_claimAutoreleasedReturnValue([v333 dsHandle]);

                                    if (v240)
                                    {
                                      v241 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IMRGLog registration]( &OBJC_CLASS___IMRGLog,  "registration"));
                                      if (os_log_type_enabled(v241, OS_LOG_TYPE_DEFAULT))
                                      {
                                        *(_WORD *)buf = 0;
                                        _os_log_impl( (void *)&_mh_execute_header,  v241,  OS_LOG_TYPE_DEFAULT,  " => Adding self handle",  buf,  2u);
                                      }

                                      v242 = (NSMutableArray *)objc_claimAutoreleasedReturnValue([v333 dsHandle]);
                                      v246 = IMSingleObjectArray(v242, v243, v244, v245);
                                      v247 = objc_claimAutoreleasedReturnValue(v246);
LABEL_353:
                                      v239 = (void *)v247;
                                      v249 = v210;
LABEL_354:

LABEL_355:
                                      v254 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IMRGLog registration]( &OBJC_CLASS___IMRGLog,  "registration"));
                                      if (os_log_type_enabled(v254, OS_LOG_TYPE_DEFAULT))
                                      {
                                        *(_DWORD *)buf = 138412290;
                                        *(void *)v434 = v239;
                                        _os_log_impl( (void *)&_mh_execute_header,  v254,  OS_LOG_TYPE_DEFAULT,  "Success, registered URIs are: %@",  buf,  0xCu);
                                      }

                                      v255 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IMRGLog registration]( &OBJC_CLASS___IMRGLog,  "registration"));
                                      if (os_log_type_enabled(v255, OS_LOG_TYPE_DEBUG))
                                      {
                                        *(_DWORD *)buf = 138412290;
                                        *(void *)v434 = v320;
                                        _os_log_debug_impl( (void *)&_mh_execute_header,  v255,  OS_LOG_TYPE_DEBUG,  "KT enrolled URIs are: %@",  buf,  0xCu);
                                      }

                                      [v333 setUris:v239];
                                      [v333 setKeyTransparencyEnrolledURIs:v320];
                                      v256 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IMRGLog registration]( &OBJC_CLASS___IMRGLog,  "registration"));
                                      if (os_log_type_enabled(v256, OS_LOG_TYPE_DEFAULT))
                                      {
                                        *(_DWORD *)buf = 138412290;
                                        *(void *)v434 = v333;
                                        _os_log_impl( (void *)&_mh_execute_header,  v256,  OS_LOG_TYPE_DEFAULT,  " Notifying for success of: %@",  buf,  0xCu);
                                      }

                                      v257 = OSLogHandleForIDSCategory("Registration");
                                      v258 = (os_log_s *)objc_claimAutoreleasedReturnValue(v257);
                                      if (os_log_type_enabled(v258, OS_LOG_TYPE_DEFAULT))
                                      {
                                        v259 = (id)objc_claimAutoreleasedReturnValue([v333 mainID]);
                                        v260 = (id)objc_claimAutoreleasedReturnValue([v333 serviceIdentifier]);
                                        *(_DWORD *)buf = 138412546;
                                        *(void *)v434 = v259;
                                        *(_WORD *)&v434[8] = 2112;
                                        *(void *)&v434[10] = v260;
                                        _os_log_impl( (void *)&_mh_execute_header,  v258,  OS_LOG_TYPE_DEFAULT,  "Registration SUCCESS for %@ on %@",  buf,  0x16u);
                                      }

                                      v262 = v353;
                                      if (os_log_shim_legacy_logging_enabled(v261))
                                      {
                                        v279 = (void *)objc_claimAutoreleasedReturnValue([v333 mainID]);
                                        v280 = (void *)objc_claimAutoreleasedReturnValue([v333 serviceIdentifier]);
                                        _IDSLogEventV( @"IDSFoundation",  @"Registration",  @"Registration SUCCESS for %@ on %@");

                                        v262 = v353;
                                      }

                                      -[IDSRegistrationCenter _notifyRegistrationSuccess:]( v262,  "_notifyRegistrationSuccess:",  v333,  v279,  v280);
                                      successfulRegistrations = v262->_successfulRegistrations;
                                      if (!successfulRegistrations)
                                      {
                                        v264 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
                                        v266 = v262->_successfulRegistrations;
                                        p_successfulRegistrations = &v262->_successfulRegistrations;
                                        *p_successfulRegistrations = v264;

                                        successfulRegistrations = *p_successfulRegistrations;
                                      }

                                      -[NSMutableArray addObject:](successfulRegistrations, "addObject:", v333);
LABEL_368:

                                      break;
                                    }

                                    v248 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                                    if (os_log_type_enabled(v248, OS_LOG_TYPE_DEFAULT))
                                    {
                                      *(_WORD *)buf = 0;
                                      _os_log_impl( (void *)&_mh_execute_header,  v248,  OS_LOG_TYPE_DEFAULT,  " => Adding sentinel, registration doesn't have a self-handle yet",  buf,  2u);
                                    }
                                  }

                                  else
                                  {
                                    if (!+[IDSRegistrationController systemSupportsPhoneNumberRegistration]( &OBJC_CLASS___IDSRegistrationController,  "systemSupportsPhoneNumberRegistration"))
                                    {
                                      if (sub_100214A3C())
                                      {
                                        v249 = (NSMutableArray *)objc_claimAutoreleasedReturnValue( +[IMRGLog registration]( &OBJC_CLASS___IMRGLog,  "registration"));
                                        if (os_log_type_enabled((os_log_t)v249, OS_LOG_TYPE_DEFAULT))
                                        {
                                          *(_WORD *)buf = 0;
                                          _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v249,  OS_LOG_TYPE_DEFAULT,  " => Registration is allowed to continue with empty identities",  buf,  2u);
                                        }

                                        v242 = v210;
                                        v239 = &__NSArray0__struct;
                                        goto LABEL_354;
                                      }

                                      v267 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IMRGLog registration]( &OBJC_CLASS___IMRGLog,  "registration"));
                                      if (os_log_type_enabled(v267, OS_LOG_TYPE_DEFAULT))
                                      {
                                        *(_DWORD *)buf = 138412290;
                                        *(void *)v434 = v333;
                                        _os_log_impl( (void *)&_mh_execute_header,  v267,  OS_LOG_TYPE_DEFAULT,  " => ***** No registered identities, failing registration: %@ ******",  buf,  0xCu);
                                      }

                                      v268 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IMRGLog registration]( &OBJC_CLASS___IMRGLog,  "registration"));
                                      if (os_log_type_enabled(v268, OS_LOG_TYPE_DEFAULT))
                                      {
                                        *(_DWORD *)buf = 138412290;
                                        *(void *)v434 = v333;
                                        _os_log_impl( (void *)&_mh_execute_header,  v268,  OS_LOG_TYPE_DEFAULT,  "***** Notifying, empty URI response: %@ *****",  buf,  0xCu);
                                      }

                                      -[IDSRegistrationCenter _notifyRegistrationFailure:responseCode:registrationError:error:info:]( v353,  "_notifyRegistrationFailure:responseCode:registrationError:error:info:",  v333,  0LL,  42LL,  v342,  v306);
                                      v239 = v210;
                                      goto LABEL_368;
                                    }

                                    v248 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                                    if (os_log_type_enabled(v248, OS_LOG_TYPE_DEFAULT))
                                    {
                                      *(_WORD *)buf = 0;
                                      _os_log_impl( (void *)&_mh_execute_header,  v248,  OS_LOG_TYPE_DEFAULT,  " => Adding sentinel binding",  buf,  2u);
                                    }
                                  }

                                  v242 = (NSMutableArray *)objc_claimAutoreleasedReturnValue([v291 lowercaseString]);
                                  v253 = IMSingleObjectArray(v242, v250, v251, v252);
                                  v247 = objc_claimAutoreleasedReturnValue(v253);
                                  goto LABEL_353;
                                }

                                if (v164 == 6001)
                                {
                                  double v170 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                                  if (os_log_type_enabled(v170, OS_LOG_TYPE_DEFAULT))
                                  {
                                    *(_DWORD *)buf = 138412290;
                                    *(void *)v434 = v333;
                                    _os_log_impl( (void *)&_mh_execute_header,  v170,  OS_LOG_TYPE_DEFAULT,  " *** Server rejected registration { candidateRegistration: %@ }",  buf,  0xCu);
                                  }

                                  sub_100214748(v299);
LABEL_257:
                                  uint64_t v169 = 31LL;
                                }

                                else
                                {
LABEL_248:
                                  uint64_t v171 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                                  if (os_log_type_enabled(v171, OS_LOG_TYPE_DEFAULT))
                                  {
                                    *(_DWORD *)buf = 138412290;
                                    *(void *)v434 = v308;
                                    _os_log_impl( (void *)&_mh_execute_header,  v171,  OS_LOG_TYPE_DEFAULT,  " *** Unhandled status code: %@",  buf,  0xCu);
                                  }

                                  if ([v304 length])
                                  {
                                    v172 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                                    if (os_log_type_enabled(v172, OS_LOG_TYPE_DEFAULT))
                                    {
                                      *(_WORD *)buf = 0;
                                      uint64_t v173 = v172;
                                      uint64_t v174 = " => We have a cert, treating as success";
                                      goto LABEL_263;
                                    }

                                    goto LABEL_264;
                                  }

                                  v176 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                                  if (os_log_type_enabled(v176, OS_LOG_TYPE_DEFAULT))
                                  {
                                    *(_WORD *)buf = 0;
                                    _os_log_impl( (void *)&_mh_execute_header,  v176,  OS_LOG_TYPE_DEFAULT,  " => We have no cert, treating as failure",  buf,  2u);
                                  }

                                  uint64_t v169 = 9LL;
LABEL_323:
                                }

LABEL_324:
                                v234 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                                if (os_log_type_enabled(v234, OS_LOG_TYPE_DEFAULT))
                                {
                                  *(_DWORD *)buf = 138412802;
                                  *(void *)v434 = v308;
                                  *(_WORD *)&v434[8] = 1024;
                                  *(_DWORD *)&v434[10] = v169;
                                  *(_WORD *)&v434[14] = 2112;
                                  *(void *)&v434[16] = v333;
                                  _os_log_impl( (void *)&_mh_execute_header,  v234,  OS_LOG_TYPE_DEFAULT,  " ***** Notifying for failure (code: %@:%d) of: %@",  buf,  0x1Cu);
                                }

                                -[IDSRegistrationCenter _notifyRegistrationFailure:responseCode:registrationError:error:info:]( v353,  "_notifyRegistrationFailure:responseCode:registrationError:error:info:",  v333,  0LL,  v169,  v342,  v306);
                                break;
                            }
                          }
                        }

                        v322 = (char *)v322 + 1;
                      }

                      while (v322 != v312);
                      v269 = [v309 countByEnumeratingWithState:&v392 objects:v436 count:16];
                      v312 = v269;
                    }

                    while (v269);
                  }

                  v293 = (char *)v293 + 1;
                }

                while (v293 != v286);
                id v131 = [v289 countByEnumeratingWithState:&v396 objects:v437 count:16];
              }

              while (v131);
            }

            id v125 = v283 + 1;
            id v124 = v281;
          }

          while ((id)(v283 + 1) != v282);
          uint64_t v123 = [v287 countByEnumeratingWithState:&v400 objects:v438 count:16];
          if (!v123)
          {

            if ((v335 & 1) != 0)
            {
              v270 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog KeyTransparency]( &OBJC_CLASS___IDSFoundationLog,  "KeyTransparency"));
              if (os_log_type_enabled(v270, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v270,  OS_LOG_TYPE_DEFAULT,  "Serializing and persisting updates to KT registration data.",  buf,  2u);
              }

              v271 = (void *)objc_claimAutoreleasedReturnValue( +[IDSRegistrationKeyManager sharedInstance]( &OBJC_CLASS___IDSRegistrationKeyManager,  "sharedInstance"));
              [v271 _serializeAndPersistKTRegistrationDataDeleteIfNull:1];
LABEL_388:
            }

            -[IDSRegistrationCenter _notifyAllSuccessfulRegistrations:]( v353,  "_notifyAllSuccessfulRegistrations:",  v353->_successfulRegistrations);
            v272 = v353->_successfulRegistrations;
            v353->_successfulRegistrations = 0LL;

            if (-[NSMutableArray count](v307, "count"))
            {
              v273 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
              if (os_log_type_enabled(v273, OS_LOG_TYPE_DEFAULT))
              {
                v274 = -[NSMutableArray count](v307, "count");
                *(_DWORD *)buf = 67109378;
                *(_DWORD *)v434 = v274;
                *(_WORD *)&v434[4] = 2112;
                *(void *)&v434[6] = v307;
                v275 = " *** We have %d unhandled registrations leftover from this: %@";
                v276 = v273;
                v277 = 18;
                goto LABEL_394;
              }
            }

            else
            {
              v273 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
              if (os_log_type_enabled(v273, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                v275 = " All registrations were handled, we're good to go";
                v276 = v273;
                v277 = 2;
LABEL_394:
                _os_log_impl((void *)&_mh_execute_header, v276, OS_LOG_TYPE_DEFAULT, v275, buf, v277);
              }
            }

            v278 = (void *)objc_claimAutoreleasedReturnValue(+[IDSHeartbeatCenter sharedInstance](&OBJC_CLASS___IDSHeartbeatCenter, "sharedInstance"));
            [v278 updateHeartbeat];

            goto LABEL_396;
          }
        }
      }

LABEL_100:
      if (v20 >> 1 == 4000)
      {
        __int16 v85 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
        if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v85,  OS_LOG_TYPE_DEFAULT,  "Failed constructing validation data",  buf,  2u);
        }

        v370 = 0u;
        v371 = 0u;
        if (v20 == 8001) {
          uint64_t v86 = 45LL;
        }
        else {
          uint64_t v86 = 44LL;
        }
        v368 = 0uLL;
        v369 = 0uLL;
        v336 = obj;
        __int16 v87 = [v336 countByEnumeratingWithState:&v368 objects:v428 count:16];
        if (v87)
        {
          NSErrorUserInfoKey v88 = *(void *)v369;
          do
          {
            for (i1 = 0LL; i1 != v87; i1 = (char *)i1 + 1)
            {
              if (*(void *)v369 != v88) {
                objc_enumerationMutation(v336);
              }
              -[IDSRegistrationCenter _notifyRegistrationFailure:responseCode:registrationError:error:info:]( v353,  "_notifyRegistrationFailure:responseCode:registrationError:error:info:",  *(void *)(*((void *)&v368 + 1) + 8LL * (void)i1),  v20,  v86,  v342,  v315);
            }

            __int16 v87 = [v336 countByEnumeratingWithState:&v368 objects:v428 count:16];
          }

          while (v87);
        }
      }

      else if (v342 || v20 != 1)
      {
        id v114 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
        if (os_log_type_enabled(v114, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109634;
          *(_DWORD *)v434 = v20;
          *(_WORD *)&v434[4] = 2112;
          *(void *)&v434[6] = v342;
          *(_WORD *)&v434[14] = 2112;
          *(void *)&v434[16] = v303;
          _os_log_impl( (void *)&_mh_execute_header,  v114,  OS_LOG_TYPE_DEFAULT,  "Registration attempt failed with status code: %d   error: %@   result: %@",  buf,  0x1Cu);
        }

        uint64_t v115 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
        if (os_log_type_enabled(v115, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v115,  OS_LOG_TYPE_DEFAULT,  "Communicating with registration server failed",  buf,  2u);
        }

        v362 = 0u;
        v363 = 0u;
        v360 = 0u;
        v361 = 0u;
        v336 = obj;
        uint64_t v116 = [v336 countByEnumeratingWithState:&v360 objects:v426 count:16];
        if (v116)
        {
          __int128 v117 = *(void *)v361;
          do
          {
            for (i2 = 0LL; i2 != v116; i2 = (char *)i2 + 1)
            {
              if (*(void *)v361 != v117) {
                objc_enumerationMutation(v336);
              }
              -[IDSRegistrationCenter _notifyRegistrationFailure:responseCode:registrationError:error:info:]( v353,  "_notifyRegistrationFailure:responseCode:registrationError:error:info:",  *(void *)(*((void *)&v360 + 1) + 8LL * (void)i2),  v20,  46LL,  v342,  v315);
            }

            uint64_t v116 = [v336 countByEnumeratingWithState:&v360 objects:v426 count:16];
          }

          while (v116);
        }
      }

      else
      {
        uint64_t v110 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
        if (os_log_type_enabled(v110, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v110,  OS_LOG_TYPE_DEFAULT,  "Registration attempt failed with no status code",  buf,  2u);
        }

        v366 = 0u;
        v367 = 0u;
        v364 = 0u;
        v365 = 0u;
        v336 = obj;
        id v111 = [v336 countByEnumeratingWithState:&v364 objects:v427 count:16];
        if (v111)
        {
          uint64_t v112 = *(void *)v365;
          do
          {
            for (i3 = 0LL; i3 != v111; i3 = (char *)i3 + 1)
            {
              if (*(void *)v365 != v112) {
                objc_enumerationMutation(v336);
              }
              -[IDSRegistrationCenter _notifyRegistrationFailure:responseCode:registrationError:error:info:]( v353,  "_notifyRegistrationFailure:responseCode:registrationError:error:info:",  *(void *)(*((void *)&v364 + 1) + 8LL * (void)i3),  1LL,  15LL,  0LL,  v315);
            }

            id v111 = [v336 countByEnumeratingWithState:&v364 objects:v427 count:16];
          }

          while (v111);
        }
      }

LABEL_396:
      p_isa = (id *)&v353->super.isa;
LABEL_397:
      sub_100214748(v315);
      [p_isa[18] removeFromQueue:v350 subsystem:1];
      [p_isa _dequeuePendingRequestsIfNecessary];

      os_activity_scope_leave(&state);
      cut_arc_os_release(&v425);

      return;
  }

void sub_1002143A4()
{
}

void sub_100214678(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x10021467CLL);
  }
  objc_terminate();
  JUMPOUT(0x10021468CLL);
}

void sub_1002146D4(id a1)
{
  id v1 = (void *)objc_claimAutoreleasedReturnValue(+[IMLockdownManager sharedInstance](&OBJC_CLASS___IMLockdownManager, "sharedInstance"));
  unsigned int v2 = [v1 isInternalInstall];

  if (v2)
  {
    byte_1009C0648 = IMGetDomainBoolForKey(@"com.apple.registration", @"overrideRegistrationResponseCode");
    byte_1009C0649 = IMGetDomainBoolForKey(@"com.apple.registration", @"overrideRegistrationResponseAlert");
  }

void sub_100214748(void *a1)
{
  id v1 = a1;
  unsigned int v2 = (void *)objc_claimAutoreleasedReturnValue(+[IMLockdownManager sharedInstance](&OBJC_CLASS___IMLockdownManager, "sharedInstance"));
  if ([v2 isInternalInstall])
  {
    int v3 = IMGetCachedDomainBoolForKey(@"com.apple.conference", @"suppressServerAlerts");

    if (v3)
    {
      id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog sms](&OBJC_CLASS___IMRGLog, "sms"));
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Suppressing registration server alert due to presence of internal default",  buf,  2u);
      }

      goto LABEL_17;
    }
  }

  else
  {
  }

  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue([v1 objectForKey:kIDSRegistrationFailedAlertTitleKey]);
  int64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKey:kIDSRegistrationFailedAlertButtonKey]);
  int64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKey:kIDSRegistrationFailedAlertMessageKey]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKey:kIDSRegistrationFailedActionInfoKey]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKey:kIDSRegistrationFailedActionButtonKey]);
  unsigned int v9 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKey:kIDSRegistrationFailedActionURLKey]);
  if (v4) {
    BOOL v10 = 0;
  }
  else {
    BOOL v10 = v6 == 0LL;
  }
  if (!v10 || v5 != 0LL)
  {
    id v12 = (void *)objc_claimAutoreleasedReturnValue( +[IMUserNotification userNotificationWithIdentifier:title:message:defaultButton:alternateButton:otherButton:]( &OBJC_CLASS___IMUserNotification,  "userNotificationWithIdentifier:title:message:defaultButton:alternateButton:otherButton:",  @"ServerAlerts",  v4,  v6,  v8,  0LL,  v5));
    if (v12)
    {
      id v13 = (void *)objc_claimAutoreleasedReturnValue( +[IMUserNotificationCenter sharedInstance]( &OBJC_CLASS___IMUserNotificationCenter,  "sharedInstance"));
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472LL;
      void v14[2] = sub_1002233F0;
      v14[3] = &unk_1008FE630;
      id v15 = v9;
      [v13 addUserNotification:v12 listener:0 completionHandler:v14];
    }
  }

LABEL_17:
}

void sub_10021498C(id a1, NSError *a2)
{
  unsigned int v2 = a2;
  int v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 138412290;
    int64_t v5 = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Reported to transparency of bad account key. { error: %@ }",  (uint8_t *)&v4,  0xCu);
  }
}

uint64_t sub_100214A3C()
{
  uint64_t v0 = (void *)objc_claimAutoreleasedReturnValue(+[IDSServerBag sharedInstance](&OBJC_CLASS___IDSServerBag, "sharedInstance"));
  id v1 = (void *)objc_claimAutoreleasedReturnValue([v0 objectForKey:@"ids-allow-empty-uri-registration"]);

  if (v1 && (uint64_t v3 = objc_opt_class(&OBJC_CLASS___NSNumber, v2), (objc_opt_isKindOfClass(v1, v3) & 1) != 0)) {
    uint64_t v4 = (uint64_t)[v1 BOOLValue];
  }
  else {
    uint64_t v4 = 1LL;
  }

  return v4;
}

id sub_100214C20(id a1, id a2)
{
  id v2 = a2;
  uint64_t v3 = -[IDSURI initWithPrefixedURI:](objc_alloc(&OBJC_CLASS___IDSURI), "initWithPrefixedURI:", v2);

  return v3;
}

id sub_100214C64(id a1, id a2)
{
  id v2 = a2;
  else {
    uint64_t v3 = -[IDSURI initWithPrefixedURI:](objc_alloc(&OBJC_CLASS___IDSURI), "initWithPrefixedURI:", v2);
  }

  return v3;
}

id sub_100214CC0(id a1, id a2)
{
  id v2 = a2;
  uint64_t v3 = -[IDSURI initWithPrefixedURI:](objc_alloc(&OBJC_CLASS___IDSURI), "initWithPrefixedURI:", v2);

  return v3;
}

id sub_100215094(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a2 serviceType]);
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

id sub_1002150D4(id a1, IDSURI *a2)
{
  return -[IDSURI prefixedURI](a2, "prefixedURI");
}

void sub_100215DB4(_Unwind_Exception *a1)
{
}

id sub_100215E20(uint64_t a1)
{
  return [*(id *)(a1 + 32) _dequeuePendingRequestsIfNecessary];
}

id sub_100215E28(uint64_t a1)
{
  return [*(id *)(a1 + 32) _dequeuePendingRequestsIfNecessary];
}

id sub_100215E30(uint64_t a1)
{
  return [*(id *)(a1 + 32) _dequeuePendingRequestsIfNecessary];
}

void sub_100215E38(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 state];
  uint64_t v261 = a1;
  if (v4 == (id)1)
  {
    v223 = (__CFString *)objc_claimAutoreleasedReturnValue([v3 error]);
    -[__CFString code](v223, "code");
    __int128 v268 = 0u;
    __int128 v269 = 0u;
    __int128 v270 = 0u;
    __int128 v271 = 0u;
    id v244 = *(id *)(a1 + 40);
    id v177 = [v244 countByEnumeratingWithState:&v268 objects:v314 count:16];
    if (v177)
    {
      id v178 = v177;
      uint64_t v179 = *(void *)v269;
      do
      {
        for (i = 0LL; i != v178; i = (char *)i + 1)
        {
          if (*(void *)v269 != v179) {
            objc_enumerationMutation(v244);
          }
          v181 = *(const char **)(*((void *)&v268 + 1) + 8LL * (void)i);
          id v182 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
          if (os_log_type_enabled(v182, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = 138412546;
            v317 = v223;
            __int16 v318 = 2112;
            v319 = v181;
            _os_log_fault_impl( (void *)&_mh_execute_header,  v182,  OS_LOG_TYPE_FAULT,  "Registration failed getting client data -- error %@ registration %@",  buf,  0x16u);
          }

          [*(id *)(*(void *)(v261 + 32) + 8) removeObject:v181];
          [*(id *)(*(void *)(v261 + 32) + 32) removeObject:v181];
          [*(id *)(v261 + 32) _notifyRegistrationFailure:v181 responseCode:1 registrationError:40 error:0 info:0];
        }

        id v178 = [v244 countByEnumeratingWithState:&v268 objects:v314 count:16];
      }

      while (v178);
    }

LABEL_235:
  }

  else if (!v4)
  {
    id v218 = v3;
    int64_t v5 = (__CFString *)objc_claimAutoreleasedReturnValue([v3 value]);
    id v244 = (id)objc_claimAutoreleasedReturnValue(-[__CFString clientDatasByServiceType](v5, "clientDatasByServiceType"));
    v223 = v5;
    v225 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString ktRegDataByServiceType](v5, "ktRegDataByServiceType"));
    int64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = (__CFString *)objc_claimAutoreleasedReturnValue([v244 allKeys]);
      *(_DWORD *)buf = 138412290;
      v317 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Done constructing client data objects {serviceTypes: %@}",  buf,  0xCu);
    }

    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[IDSKeyTransparencyVerifier sharedInstance]( &OBJC_CLASS___IDSKeyTransparencyVerifier,  "sharedInstance"));
    unsigned int v9 = (void *)objc_claimAutoreleasedReturnValue([v8 fetchKTEligibleServices]);
    id v10 = [v9 containsObject:@"com.apple.madrid"];

    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[IDSRegistrationKeyManager sharedInstance]( &OBJC_CLASS___IDSRegistrationKeyManager,  "sharedInstance"));
    [v11 updateKVSForKTRegistrationData];

    id v12 = (void *)objc_claimAutoreleasedReturnValue(+[FTDeviceSupport sharedInstance](&OBJC_CLASS___FTDeviceSupport, "sharedInstance"));
    v222 = (void *)objc_claimAutoreleasedReturnValue([v12 model]);

    id v13 = (void *)objc_claimAutoreleasedReturnValue(+[FTDeviceSupport sharedInstance](&OBJC_CLASS___FTDeviceSupport, "sharedInstance"));
    v221 = (void *)objc_claimAutoreleasedReturnValue([v13 productOSVersion]);

    id v14 = (void *)objc_claimAutoreleasedReturnValue(+[FTDeviceSupport sharedInstance](&OBJC_CLASS___FTDeviceSupport, "sharedInstance"));
    v220 = (void *)objc_claimAutoreleasedReturnValue([v14 productBuildVersion]);

    id v15 = (void *)objc_claimAutoreleasedReturnValue(+[FTDeviceSupport sharedInstance](&OBJC_CLASS___FTDeviceSupport, "sharedInstance"));
    __int128 v16 = (void *)objc_claimAutoreleasedReturnValue([v15 deviceName]);

    v226 = v16;
    unsigned int v17 = (void *)objc_claimAutoreleasedReturnValue( [v16 stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;amp;"]);
    __int128 v18 = (void *)objc_claimAutoreleasedReturnValue( [v17 stringByReplacingOccurrencesOfString:@"" withString:@"&amp;quot;"]);
    __int128 v19 = (void *)objc_claimAutoreleasedReturnValue( [v18 stringByReplacingOccurrencesOfString:@"'" withString:@"&amp;#39;"]);
    __int128 v20 = (void *)objc_claimAutoreleasedReturnValue([v19 stringByReplacingOccurrencesOfString:@">" withString:@"&amp;gt;"]);
    id v21 = [v20 stringByReplacingOccurrencesOfString:@"<" withString:@"&amp;lt;"];

    v219 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) privateDeviceDataForKVSSuccess:v10]);
    v228 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    *(_BYTE *)(*(void *)(a1 + 32) + 49LL) = 0;
    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue( +[IDSRegistrationController sharedInstance]( &OBJC_CLASS___IDSRegistrationController,  "sharedInstance"));
    __int16 v23 = (void *)objc_claimAutoreleasedReturnValue([v22 activeRegistrations]);

    __int128 v313 = 0u;
    __int128 v312 = 0u;
    __int128 v311 = 0u;
    __int128 v310 = 0u;
    id v24 = v23;
    id v25 = [v24 countByEnumeratingWithState:&v310 objects:v326 count:16];
    if (v25)
    {
      id v26 = v25;
      uint64_t v27 = *(void *)v311;
      do
      {
        for (j = 0LL; j != v26; j = (char *)j + 1)
        {
          if (*(void *)v311 != v27) {
            objc_enumerationMutation(v24);
          }
          uint32_t v29 = *(__CFString **)(*((void *)&v310 + 1) + 8LL * (void)j);
          if ((-[__CFString canSendRegistration](v29, "canSendRegistration") & 1) == 0)
          {
            uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
            if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 138412290;
              v317 = v29;
              _os_log_debug_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEBUG,  "   *** Removing registration (from active) from queued/current, it is not possible to register: %@",  buf,  0xCu);
            }

            [*(id *)(*(void *)(a1 + 32) + 32) removeObject:v29];
            [*(id *)(*(void *)(a1 + 32) + 8) removeObject:v29];
          }
        }

        id v26 = [v24 countByEnumeratingWithState:&v310 objects:v326 count:16];
      }

      while (v26);
    }

    id v217 = v24;

    __int128 v308 = 0u;
    __int128 v309 = 0u;
    __int128 v306 = 0u;
    __int128 v307 = 0u;
    id v31 = [*(id *)(*(void *)(a1 + 32) + 8) _copyForEnumerating];
    id v32 = [v31 countByEnumeratingWithState:&v306 objects:v325 count:16];
    if (v32)
    {
      id v33 = v32;
      uint64_t v34 = *(void *)v307;
      do
      {
        for (k = 0LL; k != v33; k = (char *)k + 1)
        {
          if (*(void *)v307 != v34) {
            objc_enumerationMutation(v31);
          }
          int v36 = *(__CFString **)(*((void *)&v306 + 1) + 8LL * (void)k);
          if ((-[__CFString canSendRegistration](v36, "canSendRegistration") & 1) == 0)
          {
            uint32_t v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
            if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 138412290;
              v317 = v36;
              _os_log_debug_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEBUG,  "   *** Removing registration (from queued) from queued/current, it is not possible to register: %@",  buf,  0xCu);
            }

            [*(id *)(*(void *)(a1 + 32) + 32) removeObject:v36];
            [*(id *)(*(void *)(a1 + 32) + 8) removeObject:v36];
          }
        }

        id v33 = [v31 countByEnumeratingWithState:&v306 objects:v325 count:16];
      }

      while (v33);
    }

    v224 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    __int128 v302 = 0u;
    __int128 v303 = 0u;
    __int128 v304 = 0u;
    __int128 v305 = 0u;
    id obj = *(id *)(a1 + 40);
    id v38 = [obj countByEnumeratingWithState:&v302 objects:v324 count:16];
    if (!v38)
    {
      char v40 = 0;
      goto LABEL_218;
    }

    id v39 = v38;
    char v40 = 0;
    uint64_t v41 = *(void *)v303;
    uint64_t v229 = *(void *)v303;
    while (1)
    {
      uint64_t v42 = 0LL;
      id v227 = v39;
      while (2)
      {
        if (*(void *)v303 != v41) {
          objc_enumerationMutation(obj);
        }
        __int16 v43 = *(__CFString **)(*((void *)&v302 + 1) + 8 * v42);
        uint64_t v44 = objc_claimAutoreleasedReturnValue(-[__CFString authenticationCert](v43, "authenticationCert"));
        if (!v44
          || (__int16 v45 = (void *)v44,
              unsigned int v46 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString idsUserID](v43, "idsUserID")),
              v46,
              v45,
              !v46))
        {
          __int128 v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
          if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            v317 = v43;
            _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_DEFAULT,  "   => Skipping, we have no auth user ID or cert: %@",  buf,  0xCu);
          }

          [*(id *)(*(void *)(a1 + 32) + 32) removeObject:v43];
          [*(id *)(*(void *)(a1 + 32) + 8) removeObject:v43];
          goto LABEL_201;
        }

        if (!-[__CFString registrationType](v43, "registrationType"))
        {
          id v47 = (void *)objc_claimAutoreleasedReturnValue(+[IDSCTAdapter sharedInstance](&OBJC_CLASS___IDSCTAdapter, "sharedInstance"));
          if ([v47 isAnySIMInserted])
          {
          }

          else
          {
            __int128 v49 = (void *)objc_claimAutoreleasedReturnValue( +[IMMobileNetworkManager sharedInstance]( &OBJC_CLASS___IMMobileNetworkManager,  "sharedInstance"));
            unsigned int v50 = [v49 requiresSIMInserted];

            if (v50)
            {
              __int16 v51 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
              if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138412290;
                v317 = v43;
                _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_DEFAULT,  "   => Skipping, we have no sim present, and we require it: %@",  buf,  0xCu);
              }

              [*(id *)(*(void *)(a1 + 32) + 32) removeObject:v43];
              [*(id *)(*(void *)(a1 + 32) + 8) removeObject:v43];
              goto LABEL_200;
            }
          }
        }

        uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString serviceType](v43, "serviceType"));
        __int16 v53 = sub_10012EBC4(v52);
        uint64_t v54 = objc_claimAutoreleasedReturnValue(v53);

        __int16 v55 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v228, "objectForKey:", v54));
        uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString serviceType](v43, "serviceType"));
        id value = (void *)objc_claimAutoreleasedReturnValue([v244 objectForKeyedSubscript:v56]);

        __int16 v57 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString serviceType](v43, "serviceType"));
        int v58 = (void *)objc_claimAutoreleasedReturnValue([v225 objectForKeyedSubscript:v57]);

        id v249 = (id)objc_claimAutoreleasedReturnValue([v58 ktDataForRegistration]);
        uint64_t v59 = objc_claimAutoreleasedReturnValue([v58 ktPublicAccountKey]);
        id v60 = (void *)objc_claimAutoreleasedReturnValue([v58 ktAccountKeyTimestamp]);
        v240 = v60;
        if (v60)
        {
          [v60 timeIntervalSince1970];
          unint64_t v62 = (unint64_t)(id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%llu",  (unint64_t)v61));
        }

        else
        {
          unint64_t v62 = 0LL;
        }

        __int128 v63 = (void *)objc_claimAutoreleasedReturnValue([v58 ktOptInTimestamp]);
        v239 = v63;
        if (v63)
        {
          [v63 timeIntervalSince1970];
          id v65 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%llu",  (unint64_t)v64));
        }

        else
        {
          id v65 = 0LL;
        }

        id v66 = [v58 ktOptInStatus];
        __int128 v67 = @"true";
        if (v66 != (id)1) {
          __int128 v67 = 0LL;
        }
        v233 = v67;
        id v251 = 0LL;
        v242 = (void *)v54;
        id v237 = v66;
        if (!v65 && v66 != (id)1)
        {
          id v251 = (id)objc_claimAutoreleasedReturnValue([v58 ktOptInErrorCode]);
        }

        -[__CFString setDidRegisterWithKTAccountKey:](v43, "setDidRegisterWithKTAccountKey:", (v62 | v59) != 0);
        __int128 v68 = (void *)objc_claimAutoreleasedReturnValue([v58 ktDataSignature]);

        -[__CFString setDidRegisterWithDeviceSignature:](v43, "setDidRegisterWithDeviceSignature:", v68 != 0LL);
        if (v62 | v59)
        {
          id v232 = 0LL;
        }

        else
        {
          id v232 = (id)objc_claimAutoreleasedReturnValue([v58 ktAccountKeyErrorCode]);
        }

        __int128 v69 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString serviceType](v43, "serviceType"));
        int v70 = IDSIsFaceTimeRegistrationServiceType(v69);

        v241 = v58;
        if (v70
          || (__int128 v71 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString serviceType](v43, "serviceType")),
              int v72 = IDSIsCallingRegistrationServiceType(v71),
              v71,
              v72))
        {
          uint64_t v73 = _IDSInvitationProtocolVersionNumber();
          __int128 v74 = (void *)objc_claimAutoreleasedReturnValue(v73);
        }

        else
        {
          id v139 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString serviceType](v43, "serviceType"));
          int v140 = IDSIsiMessageRegistrationServiceType(v139);

          if (v140) {
            uint64_t v141 = _IDSiMessageProtocolVersionNumber();
          }
          else {
            uint64_t v141 = _IDSAlloyProtocolVersionNumber();
          }
          __int128 v74 = (void *)objc_claimAutoreleasedReturnValue(v141);
        }

        __int128 v75 = v74;
        id v76 = [v74 integerValue];

        uint64_t v243 = v42;
        v260 = v43;
        id v253 = (id)v62;
        id v255 = (id)v59;
        v235 = v65;
        if (!v55)
        {
          __int128 v77 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
          -[NSMutableDictionary setObject:forKey:](v228, "setObject:forKey:", v77, v242);
          __int128 v78 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
          uint64_t v79 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
          BOOL v80 = os_log_type_enabled(v79, OS_LOG_TYPE_DEBUG);
          if (v80)
          {
            uint64_t v148 = IMGetEnvironmentName(v80, v81);
            v149 = (__CFString *)(id)objc_claimAutoreleasedReturnValue(v148);
            *(_DWORD *)buf = 138412546;
            v317 = v149;
            __int16 v318 = 2112;
            v319 = v150;
            _os_log_debug_impl( (void *)&_mh_execute_header,  v79,  OS_LOG_TYPE_DEBUG,  "environment: %@    token: %@",  buf,  0x16u);
          }

          uint64_t v82 = _FTIDSFlagsNumber();
          __int16 v83 = (void *)objc_claimAutoreleasedReturnValue(v82);
          id v84 = [v83 unsignedIntegerValue];

          __int16 v85 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString serviceType](v260, "serviceType"));
          uint64_t v86 = sub_10012EB38(v85);
          __int16 v87 = (void *)objc_claimAutoreleasedReturnValue(v86);

          uint64_t v88 = _DeviceCapabilitiesFromParameters(v87, v76, v84);
          uint64_t v89 = (void *)objc_claimAutoreleasedReturnValue(v88);
          -[NSMutableArray addObject:](v78, "addObject:", v89);

          -[NSMutableDictionary setObject:forKey:](v77, "setObject:forKey:", v78, @"capabilities");
          v245 = v77;
          -[NSMutableDictionary setObject:forKey:](v77, "setObject:forKey:", v242, @"service");
          uint64_t v90 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
          __int128 v298 = 0u;
          __int128 v299 = 0u;
          __int128 v300 = 0u;
          __int128 v301 = 0u;
          uint64_t v91 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString adHocServiceNames](v260, "adHocServiceNames"));
          id v92 = [v91 countByEnumeratingWithState:&v298 objects:v323 count:16];
          if (v92)
          {
            id v93 = v92;
            uint64_t v94 = *(void *)v299;
            do
            {
              for (m = 0LL; m != v93; m = (char *)m + 1)
              {
                if (*(void *)v299 != v94) {
                  objc_enumerationMutation(v91);
                }
                __int16 v96 = *(void **)(*((void *)&v298 + 1) + 8LL * (void)m);
                if (([v96 isEqualToIgnoringCase:@"com.apple.private.alloy.telephonyutilitiestemporary"] & 1) == 0 && (objc_msgSend( v96,  "isEqualToIgnoringCase:",  @"com.apple.private.alloy.mediaidstest") & 1) == 0 && (objc_msgSend( v96,  "isEqualToIgnoringCase:",  @"com.apple.private.alloy.callhistorysynctemporary") & 1) == 0 && (objc_msgSend( v96,  "isEqualToIgnoringCase:",  @"com.apple.private.alloy.musictemporary") & 1) == 0)
                {
                  -[NSMutableArray addObject:](v90, "addObject:", v96);
                }
              }

              id v93 = [v91 countByEnumeratingWithState:&v298 objects:v323 count:16];
            }

            while (v93);
          }

          __int16 v55 = v245;
          -[NSMutableDictionary setObject:forKey:](v245, "setObject:forKey:", v90, @"sub-services");

          __int16 v43 = v260;
        }

        v97 = (void *)objc_claimAutoreleasedReturnValue( +[IDSRegistrationKeyManager sharedInstance]( &OBJC_CLASS___IDSRegistrationKeyManager,  "sharedInstance"));
        __int16 v98 = (void *)objc_claimAutoreleasedReturnValue([v97 keyPairSignature]);
        -[__CFString setKeyPairSignature:](v43, "setKeyPairSignature:", v98);

        -[__CFString setDeviceName:](v43, "setDeviceName:", v226);
        unsigned int v99 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString serviceIdentifier](v43, "serviceIdentifier"));
        LODWORD(v9_Block_object_dispose(&STACK[0x2F0], 8) = IDSIsGameCenterRegistrationServiceType(v99);

        if ((_DWORD)v98) {
          -[__CFString setContextInfo:](v43, "setContextInfo:", value);
        }
        __int16 v100 = (NSMutableArray *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v55, "objectForKey:", @"users"));
        if (!v100)
        {
          __int16 v100 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
          -[NSMutableDictionary setObject:forKey:](v55, "setObject:forKey:", v100, @"users");
        }

        theDict = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
        uint64_t v101 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _URIsToRegisterForRegistration:v43]);
        double v102 = (void *)objc_claimAutoreleasedReturnValue([v101 allObjects]);
        uint64_t v103 = objc_claimAutoreleasedReturnValue(objc_msgSend(v102, "__imArrayByApplyingBlock:", &stru_1008FE218));

        if (!v103) {
          uint64_t v103 = objc_claimAutoreleasedReturnValue(+[NSArray array](&OBJC_CLASS___NSArray, "array"));
        }
        v246 = v55;
        v247 = (void *)v103;
        __int16 v104 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString idsUserID](v43, "idsUserID"));
        int v105 = _os_feature_enabled_impl("IDS", "HomeNumberBypassServer");
        uint64_t v106 = @"Home";
        if (v105) {
          uint64_t v106 = @"Personal";
        }
        v265 = v106;
        __int128 v294 = 0u;
        __int128 v295 = 0u;
        __int128 v296 = 0u;
        __int128 v297 = 0u;
        id v107 = v100;
        id v108 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v107,  "countByEnumeratingWithState:objects:count:",  &v294,  v322,  16LL);
        if (!v108)
        {
          v262 = 0LL;
          v263 = 0LL;
          v267 = 0LL;
          uint64_t v110 = 0LL;
          goto LABEL_110;
        }

        id v109 = v108;
        v262 = 0LL;
        v263 = 0LL;
        v267 = 0LL;
        uint64_t v110 = 0LL;
        uint64_t v111 = *(void *)v295;
        do
        {
          for (n = 0LL; n != v109; n = (char *)n + 1)
          {
            if (*(void *)v295 != v111) {
              objc_enumerationMutation(v107);
            }
            char v113 = *(void **)(*((void *)&v294 + 1) + 8LL * (void)n);
            id v114 = (void *)objc_claimAutoreleasedReturnValue([v113 objectForKey:@"user-id"]);
            uint64_t v115 = (void *)objc_claimAutoreleasedReturnValue([v113 objectForKey:@"tag"]);
            if ([v114 length])
            {
              id v116 = [v114 _FZIDType];
              if ([v114 _FZIDType]
                || ([v115 isEqualToString:v265] & 1) != 0)
              {
                if ([v114 _FZIDType] == (id)1)
                {
                  __int128 v117 = v267;
                  if (!v267)
                  {
                    __int128 v117 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
                    v267 = v117;
                  }

                  goto LABEL_101;
                }

                if (v116 == (id)6)
                {
                  __int128 v117 = v263;
                  if (!v263)
                  {
                    __int128 v117 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
                    v263 = v117;
                  }

                  goto LABEL_101;
                }
              }

              else
              {
                __int128 v117 = v262;
                if (!v262)
                {
                  __int128 v117 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
                  v262 = v117;
                }

LABEL_158:
            int v133 = 1;
            goto LABEL_175;
          default:
            int v133 = 0;
            uint64_t v42 = v243;
            id v120 = v260;
            goto LABEL_176;
        }

        break;
      }
    }
  }
}

id sub_1002180C0(id a1, IDSURI *a2)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(-[IDSURI prefixedURI](a2, "prefixedURI"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObject:forKey:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObject:forKey:",  v2,  @"uri"));

  return v3;
}

void sub_100218114(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a5;
  id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    id v25 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "****** Received registration response: %@",  buf,  0xCu);
  }

  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  id v13 = *(id *)(a1 + 32);
  id v14 = [v13 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v14)
  {
    id v15 = v14;
    uint64_t v16 = *(void *)v20;
    do
    {
      for (i = 0LL; i != v15; i = (char *)i + 1)
      {
        if (*(void *)v20 != v16) {
          objc_enumerationMutation(v13);
        }
        uint64_t v18 = *(void *)(*((void *)&v19 + 1) + 8LL * (void)i);
        [*(id *)(*(void *)(a1 + 40) + 32) removeObjectIdenticalTo:v18];
        [*(id *)(*(void *)(a1 + 40) + 8) removeObjectIdenticalTo:v18];
      }

      id v15 = [v13 countByEnumeratingWithState:&v19 objects:v23 count:16];
    }

    while (v15);
  }

  [*(id *)(a1 + 40) _processRegistrationMessage:v9 sentRegistrations:*(void *)(a1 + 48) descriptionString:*(void *)(a1 + 56) actionID:*(void *)(a1 + 64) actionString:*(void *)(a1 + 72) isDeregister:*(unsigned __int8 *)(a1 + 80) deliveredWithErro r:v10 resultCode:a4 resultDictionary:v11];
}

void sub_1002182D4(void *a1)
{
  id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog FTMessageDelivery_oversized](&OBJC_CLASS___IMRGLog, "FTMessageDelivery_oversized"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = a1[5];
    uint64_t v5 = a1[6];
    int v6 = 138412802;
    uint64_t v7 = v3;
    __int16 v8 = 2112;
    uint64_t v9 = v4;
    __int16 v10 = 2112;
    uint64_t v11 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%@ Service hash info for register with timestampGUID: %@ info: %@",  (uint8_t *)&v6,  0x20u);
  }
}

void sub_100218398(uint64_t a1, int a2)
{
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (a2)
  {
    if (v5)
    {
      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v7 = *(void *)(a1 + 40);
      int v12 = 138412546;
      uint64_t v13 = v6;
      __int16 v14 = 2112;
      uint64_t v15 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Queued %@ for validation (%@)",  (uint8_t *)&v12,  0x16u);
    }
  }

  else
  {
    if (v5)
    {
      uint64_t v8 = *(void *)(a1 + 32);
      uint64_t v9 = *(void *)(a1 + 40);
      __int16 v10 = (void *)objc_claimAutoreleasedReturnValue(+[FTDeviceSupport sharedInstance](&OBJC_CLASS___FTDeviceSupport, "sharedInstance"));
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 deviceInformationString]);
      int v12 = 138412802;
      uint64_t v13 = v8;
      __int16 v14 = 2112;
      uint64_t v15 = v9;
      __int16 v16 = 2112;
      unsigned int v17 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Sending %@   (ID: %@ Environment: %@)",  (uint8_t *)&v12,  0x20u);
    }

    objc_msgSend(*(id *)(a1 + 48), "__sendMessage:", *(void *)(a1 + 56));
  }

  if (qword_1009C0660 != -1) {
    dispatch_once(&qword_1009C0660, &stru_1008FE260);
  }
  if (off_1009C0658) {
    ((void (*)(uint64_t, const __CFString *, NSDictionary *, void))off_1009C0658)( 13LL,  @"IdentityServicesRegistration",  +[NSDictionary dictionaryWithObject:forKey:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObject:forKey:",  *(void *)(a1 + 64),  @"action"),  0LL);
  }
}

void sub_100218554(id a1)
{
  off_1009C0658 = (_UNKNOWN *)IMWeakLinkSymbol("PLLogRegisteredEvent", @"PowerLog");
}

id sub_100218580(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "__sendMessage:", a2);
}

void sub_100218C94(_Unwind_Exception *a1)
{
}

uint64_t sub_100218D04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = *(void *)(a1 + 64);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100218D6C(uint64_t a1, int a2)
{
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (a2)
  {
    if (v5)
    {
      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v7 = *(void *)(a1 + 40);
      int v12 = 138412546;
      uint64_t v13 = v6;
      __int16 v14 = 2112;
      uint64_t v15 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Queued %@ for validation (%@)",  (uint8_t *)&v12,  0x16u);
    }
  }

  else
  {
    if (v5)
    {
      uint64_t v8 = *(void *)(a1 + 32);
      uint64_t v9 = *(void *)(a1 + 40);
      __int16 v10 = (void *)objc_claimAutoreleasedReturnValue(+[FTDeviceSupport sharedInstance](&OBJC_CLASS___FTDeviceSupport, "sharedInstance"));
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 deviceInformationString]);
      int v12 = 138412802;
      uint64_t v13 = v8;
      __int16 v14 = 2112;
      uint64_t v15 = v9;
      __int16 v16 = 2112;
      unsigned int v17 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Sending %@   (ID: %@ Environment: %@)",  (uint8_t *)&v12,  0x20u);
    }

    objc_msgSend(*(id *)(a1 + 48), "__sendMessage:", *(void *)(a1 + 56));
  }

  if (qword_1009C0670 != -1) {
    dispatch_once(&qword_1009C0670, &stru_1008FE2F8);
  }
  if (off_1009C0668) {
    ((void (*)(uint64_t, const __CFString *, NSDictionary *, void))off_1009C0668)( 13LL,  @"IdentityServicesRegistration",  +[NSDictionary dictionaryWithObject:forKey:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObject:forKey:",  *(void *)(a1 + 64),  @"action"),  0LL);
  }
}

void sub_100218F28(id a1)
{
  off_1009C0668 = (_UNKNOWN *)IMWeakLinkSymbol("PLLogRegisteredEvent", @"PowerLog");
}

void sub_100218F54(uint64_t a1, void *a2)
{
  id v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  objc_msgSend(WeakRetained, "__sendMessage:", v3);
}

void sub_100219078(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a5;
  [*(id *)(*(void *)(a1 + 32) + 24) removeObjectIdenticalTo:*(void *)(a1 + 40)];
  [*(id *)(*(void *)(a1 + 32) + 16) removeObjectIdenticalTo:*(void *)(a1 + 40)];
  int v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v14 = (objc_class *)objc_opt_class(v9, v13);
    uint64_t v15 = NSStringFromClass(v14);
    __int16 v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
    *(_DWORD *)buf = 138413058;
    id v33 = v16;
    __int16 v34 = 2112;
    id v35 = v10;
    __int16 v36 = 1024;
    int v37 = a4;
    __int16 v38 = 2112;
    id v39 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Message class: %@  delivered with error: %@  code: %d result: %@",  buf,  0x26u);
  }

  int v17 = [*(id *)(a1 + 40) absintheRetries];
  [*(id *)(a1 + 40) setAbsintheRetries:0];
  if (qword_1009C0680 != -1) {
    dispatch_once(&qword_1009C0680, &stru_1008FE340);
  }
  if (byte_1009C0678)
  {
    a4 = IMGetDomainIntForKey(@"com.apple.registration", @"provisionCodeOverride");
    __int128 v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
    if (os_log_type_enabled(v19, OS_LOG_TYPE_FAULT)) {
      sub_1006A42B0(a4, v19);
    }
  }

  if (a4 == 6008 || a4 == 6005)
  {
    uint64_t v22 = objc_opt_class(&OBJC_CLASS___IDSAuthenticateMessage, v18);
    if ((objc_opt_isKindOfClass(v9, v22) & 1) != 0)
    {
      id v23 = v9;
      id v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        id v25 = (void *)objc_claimAutoreleasedReturnValue([v23 authenticationInfo]);
        *(_DWORD *)buf = 138412290;
        id v33 = v25;
        _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  " *** Unauthenticated, need new auth token { auth info: %@ } ***",  buf,  0xCu);
      }
    }

    else
    {
      id v23 = (id)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled((os_log_t)v23, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        id v33 = v9;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v23,  OS_LOG_TYPE_DEFAULT,  " *** Unauthenticated, need new auth token { message: %@ }",  buf,  0xCu);
      }
    }

    if ([*(id *)(a1 + 40) registrationType] == 3)
    {
      objc_msgSend( *(id *)(*(void *)(a1 + 32) + 144),  "purgeCachedCertsForSubsystemMechanism:",  objc_msgSend(*(id *)(a1 + 32), "_authSubsystemForInfo:", *(void *)(a1 + 40)));
      objc_msgSend( *(id *)(*(void *)(a1 + 32) + 144),  "cleanupValidationInfoForSubsystemMechanism:",  objc_msgSend(*(id *)(a1 + 32), "_authSubsystemForInfo:", *(void *)(a1 + 40)));
    }

    goto LABEL_28;
  }

  if (a4 != 6004)
  {
    if ((a4 & 0xFFFFFFFFFFFFFFF7LL) == 0x1771)
    {
      id v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
      if (os_log_type_enabled(v26, OS_LOG_TYPE_FAULT)) {
        sub_1006A4284();
      }

      if ([*(id *)(a1 + 40) registrationType] == 3
        && +[IDSAutoBugCapture isSupported](&OBJC_CLASS___IDSAutoBugCapture, "isSupported"))
      {
        uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a4));
        uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"(%@)", v27));

        v30[0] = _NSConcreteStackBlock;
        v30[1] = 3221225472LL;
        v30[2] = sub_10021960C;
        v30[3] = &unk_1008F8320;
        id v31 = v28;
        id v29 = v28;
        +[IDSAutoBugCapture triggerCaptureWithEvent:context:completion:]( &OBJC_CLASS___IDSAutoBugCapture,  "triggerCaptureWithEvent:context:completion:",  208LL,  v29,  v30);
      }
    }

    else if (!a4)
    {
      (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
      goto LABEL_29;
    }

    goto LABEL_28;
  }

  __int128 v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
  if (os_log_type_enabled(v20, OS_LOG_TYPE_FAULT)) {
    sub_1006A4258();
  }

  objc_msgSend( *(id *)(*(void *)(a1 + 32) + 144),  "cleanupValidationInfoForSubsystemMechanism:",  objc_msgSend(*(id *)(a1 + 32), "_authSubsystemForInfo:", *(void *)(a1 + 40)));
  if (v17 > 2)
  {
LABEL_28:
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
    goto LABEL_29;
  }

  __int128 v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    LODWORD(v33) = v17;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, " Retries so far: %d  trying again", buf, 8u);
  }

  [*(id *)(a1 + 40) setAbsintheRetries:(v17 + 1)];
  objc_msgSend( *(id *)(*(void *)(a1 + 32) + 144),  "removeFromQueue:subsystem:",  v9,  objc_msgSend(*(id *)(a1 + 32), "_authSubsystemForInfo:", *(void *)(a1 + 40)));
  [*(id *)(a1 + 32) _sendAuthenticateRegistration:*(void *)(a1 + 40)];
LABEL_29:
  [*(id *)(*(void *)(a1 + 32) + 144) removeFromQueue:v9 subsystem:1];
  [*(id *)(a1 + 32) _dequeuePendingRequestsIfNecessary];
}

void sub_1002195E0(id a1)
{
  byte_1009C0678 = IMGetDomainBoolForKey(@"com.apple.registration", @"overrideProvisionResponseCode");
}

void sub_10021960C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    int v9 = 138412802;
    uint64_t v10 = v8;
    __int16 v11 = 2112;
    id v12 = v5;
    __int16 v13 = 2112;
    id v14 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Finished capturing AutoBugCapture diagnostics for do not retry failure { context: %@, sessionID: %@, error: %@ }",  (uint8_t *)&v9,  0x20u);
  }
}

void sub_100219A3C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 userInfo]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:@"info"]);

  uint64_t v6 = objc_claimAutoreleasedReturnValue([v3 responseCertificate]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v3 responseUserID]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[FTDeviceSupport sharedInstance](&OBJC_CLASS___FTDeviceSupport, "sharedInstance"));
  unsigned int v32 = [v8 isC2KEquipment];

  int v9 = (void *)objc_claimAutoreleasedReturnValue(+[IDSRegistrationController sharedInstance](&OBJC_CLASS___IDSRegistrationController, "sharedInstance"));
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) mainID]);
  __int16 v11 = (void *)objc_claimAutoreleasedReturnValue([v9 activeRegistrationsMatchingUserID:v10]);

  id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    id v39 = v7;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Setting auth cert for user ID: %@", buf, 0xCu);
  }

  __int16 v13 = (void *)objc_claimAutoreleasedReturnValue( +[IDSRegistrationKeychainManager sharedInstance]( &OBJC_CLASS___IDSRegistrationKeychainManager,  "sharedInstance"));
  [v13 setAuthenticationCert:v6 forID:v7];

  id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    id v39 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Found existing registrations to authenticate: %@",  buf,  0xCu);
  }

  if (([v11 containsObjectIdenticalTo:*(void *)(a1 + 32)] & 1) == 0)
  {
    uint64_t v15 = objc_claimAutoreleasedReturnValue([v11 arrayByAddingObject:*(void *)(a1 + 32)]);

    __int16 v11 = (void *)v15;
  }

  uint64_t v30 = (void *)v6;
  if (![v11 count])
  {
    uint64_t v19 = IMSingleObjectArray(v5, v16, v17, v18);
    uint64_t v20 = objc_claimAutoreleasedReturnValue(v19);

    __int16 v11 = (void *)v20;
  }

  __int128 v35 = 0u;
  __int128 v36 = 0u;
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  id obj = v11;
  id v21 = [obj countByEnumeratingWithState:&v33 objects:v37 count:16];
  if (v21)
  {
    id v22 = v21;
    uint64_t v23 = *(void *)v34;
    do
    {
      for (i = 0LL; i != v22; i = (char *)i + 1)
      {
        if (*(void *)v34 != v23) {
          objc_enumerationMutation(obj);
        }
        id v25 = *(void **)(*((void *)&v33 + 1) + 8LL * (void)i);
        id v26 = v7;
        [v25 setIdsUserID:v7];
        uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v32));
        [v25 setIsCDMA:v27];

        uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue( +[IDSRegistrationKeyManager sharedInstance]( &OBJC_CLASS___IDSRegistrationKeyManager,  "sharedInstance"));
        id v29 = (void *)objc_claimAutoreleasedReturnValue([v28 keyPairSignature]);
        [v25 setKeyPairSignature:v29];

        [v25 saveToKeychain];
        if (v25 == *(void **)(a1 + 32)
          || ([*(id *)(*(void *)(a1 + 40) + 24) containsObjectIdenticalTo:v25] & 1) != 0
          || [*(id *)(*(void *)(a1 + 40) + 16) containsObjectIdenticalTo:v25])
        {
          [*(id *)(a1 + 40) _notifyIDSAuthenticationSuccess:v25];
        }

        uint64_t v7 = v26;
      }

      id v22 = [obj countByEnumeratingWithState:&v33 objects:v37 count:16];
    }

    while (v22);
  }
}

void sub_100219DE4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v11 = a4;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"IDS Authentication failed: %d",  a2));
  sub_10012E874(0, @"Registration", v7, 1073LL);

  [*(id *)(a1 + 32) saveToKeychain];
  if (![*(id *)(a1 + 32) registrationType])
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) registrationReasonTracker]);
    int v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userUniqueIdentifier]);
    [v8 setPNRReason:15 forUserUniqueIdentifier:v9];
  }

  [*(id *)(a1 + 32) setAuthenticationToken:0];
  if (a3 == 6008) {
    uint64_t v10 = 18LL;
  }
  else {
    uint64_t v10 = a2;
  }
  [*(id *)(a1 + 40) _notifyProvisionFailure:*(void *)(a1 + 32) responseCode:a3 registrationError:v10 error:v11 fatal:a3 != 6008 info:0];
}

void sub_10021A46C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[FTDeviceSupport sharedInstance](&OBJC_CLASS___FTDeviceSupport, "sharedInstance"));
  unsigned int v46 = [v4 isC2KEquipment];

  uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) usersWithRealm:0]);
  __int16 v38 = v3;
  __int128 v55 = 0u;
  __int128 v56 = 0u;
  __int128 v57 = 0u;
  __int128 v58 = 0u;
  id obj = (id)objc_claimAutoreleasedReturnValue([v3 authenticationResponses]);
  id v42 = [obj countByEnumeratingWithState:&v55 objects:v66 count:16];
  if (v42)
  {
    uint64_t v40 = *(void *)v56;
    id v5 = &IMInsertBoolsToXPCDictionary_ptr;
    do
    {
      uint64_t v6 = 0LL;
      do
      {
        if (*(void *)v56 != v40) {
          objc_enumerationMutation(obj);
        }
        uint64_t v44 = v6;
        uint64_t v7 = *(void **)(*((void *)&v55 + 1) + 8 * v6);
        id v47 = (void *)objc_claimAutoreleasedReturnValue([v7 userID]);
        __int16 v45 = (void *)objc_claimAutoreleasedReturnValue([v7 cert]);
        unint64_t v8 = (unint64_t)[v7 responseCode];
        v54[0] = _NSConcreteStackBlock;
        v54[1] = 3221225472LL;
        v54[2] = sub_10021AA94;
        v54[3] = &unk_1008FE3E0;
        __int16 v43 = v7;
        v54[4] = v7;
        int v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v41, "__imArrayByFilteringWithBlock:", v54));
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 firstObject]);

        id v11 = (void *)objc_claimAutoreleasedReturnValue( +[IDSRegistrationController sharedInstance]( &OBJC_CLASS___IDSRegistrationController,  "sharedInstance"));
        id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 activeRegistrations]);
        v52[0] = _NSConcreteStackBlock;
        v52[1] = 3221225472LL;
        v52[2] = sub_10021AAF4;
        v52[3] = &unk_1008FE1D8;
        id v13 = v10;
        id v53 = v13;
        id v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "__imArrayByFilteringWithBlock:", v52));

        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPACStateTracker sharedInstance](&OBJC_CLASS___IDSPACStateTracker, "sharedInstance"));
        [v15 noteAuthenticationFinished];

        uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue([v5[440] registration]);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412802;
          double v61 = v47;
          __int16 v62 = 2048;
          unint64_t v63 = v8;
          __int16 v64 = 2112;
          id v65 = v13;
          _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Setting auth certs {userID: %@, responseCode: %lld, matchingUser: %@}",  buf,  0x20u);
        }

        if (v13)
        {
          if (v8)
          {
            [*(id *)(a1 + 32) setCredential:0 forUser:v13];
          }

          else
          {
            uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPACStateTracker sharedInstance](&OBJC_CLASS___IDSPACStateTracker, "sharedInstance"));
            [v17 notePhoneAuthCertGained];

            uint64_t v18 = -[IDSAuthenticationCertificate initWithDataRepresentation:]( objc_alloc(&OBJC_CLASS___IDSAuthenticationCertificate),  "initWithDataRepresentation:",  v45);
            [*(id *)(a1 + 32) setAuthenticationCertificate:v18 forUser:v13];
          }
        }

        if (![v14 count] && objc_msgSend(obj, "count") == (id)1)
        {
          uint64_t v22 = IMSingleObjectArray(*(void *)(a1 + 40), v19, v20, v21);
          uint64_t v23 = objc_claimAutoreleasedReturnValue(v22);

          id v14 = (void *)v23;
        }

        id v24 = (os_log_s *)objc_claimAutoreleasedReturnValue([v5[440] registration]);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          double v61 = v14;
          _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "Found existing registrations to authenticate: %@",  buf,  0xCu);
        }

        __int128 v50 = 0u;
        __int128 v51 = 0u;
        __int128 v48 = 0u;
        __int128 v49 = 0u;
        id v25 = v14;
        id v26 = [v25 countByEnumeratingWithState:&v48 objects:v59 count:16];
        if (!v26) {
          goto LABEL_38;
        }
        id v27 = v26;
        uint64_t v28 = *(void *)v49;
        while (2)
        {
          for (i = 0LL; i != v27; i = (char *)i + 1)
          {
            if (*(void *)v49 != v28) {
              objc_enumerationMutation(v25);
            }
            uint64_t v30 = *(void **)(*((void *)&v48 + 1) + 8LL * (void)i);
            if (v8)
            {
              __int128 v36 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"IDS Authentication failed: %d",  v8));
              sub_10012E874(0, @"Registration", v36, 1073LL);

              [v30 saveToKeychain];
              if ((v8 & 0xFFFFFFFFFFFFFFF7LL) == 0x1771) {
                uint64_t v37 = 36LL;
              }
              else {
                uint64_t v37 = 10LL;
              }
              objc_msgSend( *(id *)(a1 + 48),  "_notifyProvisionFailure:responseCode:registrationError:error:fatal:info:",  v30,  objc_msgSend(v43, "responseCode"),  v37,  0,  v8 != 6008,  0);
              goto LABEL_38;
            }

            [*(id *)(*((void *)&v48 + 1) + 8 * (void)i) setIdsUserID:v47];
            id v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v46));
            [v30 setIsCDMA:v31];

            unsigned int v32 = (void *)objc_claimAutoreleasedReturnValue( +[IDSRegistrationKeyManager sharedInstance]( &OBJC_CLASS___IDSRegistrationKeyManager,  "sharedInstance"));
            __int128 v33 = (void *)objc_claimAutoreleasedReturnValue([v32 keyPairSignature]);
            [v30 setKeyPairSignature:v33];

            [v30 saveToKeychain];
            __int128 v34 = (void *)objc_claimAutoreleasedReturnValue([v30 phoneNumber]);
            if (v34) {
              goto LABEL_26;
            }
            __int128 v35 = (void *)objc_claimAutoreleasedReturnValue([v13 phoneNumber]);

            if (v35)
            {
              __int128 v34 = (void *)objc_claimAutoreleasedReturnValue([v13 phoneNumber]);
              [v30 setPhoneNumber:v34];
LABEL_26:
            }

            if (v30 == *(void **)(a1 + 40)
              || ([*(id *)(*(void *)(a1 + 48) + 24) containsObjectIdenticalTo:v30] & 1) != 0
              || [*(id *)(*(void *)(a1 + 48) + 16) containsObjectIdenticalTo:v30])
            {
              [*(id *)(a1 + 48) _notifyIDSAuthenticationSuccess:v30];
            }
          }

          id v27 = [v25 countByEnumeratingWithState:&v48 objects:v59 count:16];
          if (v27) {
            continue;
          }
          break;
        }

id sub_10021AA94(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 realmPrefixedIdentifier]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userID]);
  id v5 = [v3 isEqualToString:v4];

  return v5;
}

id sub_10021AAF4(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 userUniqueIdentifier]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uniqueIdentifier]);
  id v5 = [v3 isEqualToString:v4];

  return v5;
}

void sub_10021AB54(id *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  unint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"IDS Authentication failed: %d",  a3));
  sub_10012E874(0, @"Registration", v8, 1073LL);

  [a1[4] saveToKeychain];
  int v9 = (void *)objc_claimAutoreleasedReturnValue([a1[5] usersWithRealm:0]);
  uint64_t v10 = v9;
  if (a3 == 6008)
  {
    a2 = 18LL;
  }

  else
  {
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    __int128 v15 = 0u;
    __int128 v16 = 0u;
    id v11 = [v9 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (v11)
    {
      id v12 = v11;
      uint64_t v13 = *(void *)v16;
      do
      {
        for (i = 0LL; i != v12; i = (char *)i + 1)
        {
          if (*(void *)v16 != v13) {
            objc_enumerationMutation(v10);
          }
          [a1[5] setCredential:0 forUser:*(void *)(*((void *)&v15 + 1) + 8 * (void)i)];
        }

        id v12 = [v10 countByEnumeratingWithState:&v15 objects:v19 count:16];
      }

      while (v12);
    }
  }

  [a1[6] _notifyProvisionFailure:a1[4] responseCode:a3 registrationError:a2 error:v7 fatal:a3 != 6008 info:0];
}

void sub_10021AE64(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 responseCert]);
  if (v4)
  {
    id v5 = objc_alloc(&OBJC_CLASS___IDSAuthenticationCertificate);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v3 responseCert]);
    id v7 = -[IDSAuthenticationCertificate initWithDataRepresentation:](v5, "initWithDataRepresentation:", v6);
  }

  else
  {
    id v7 = 0LL;
  }

  id v42 = (void *)objc_claimAutoreleasedReturnValue([v3 responseUserID]);
  unint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v3 responseHandles]);
  int v9 = v8;
  if (v7 && v42 && [v8 count])
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[FTDeviceSupport sharedInstance](&OBJC_CLASS___FTDeviceSupport, "sharedInstance"));
    unsigned int v41 = [v10 isC2KEquipment];

    id v11 = (void *)objc_claimAutoreleasedReturnValue( +[IDSRegistrationController sharedInstance]( &OBJC_CLASS___IDSRegistrationController,  "sharedInstance"));
    id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) mainID]);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v11 activeRegistrationsMatchingUserID:v12]);

    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      __int128 v48 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Found existing registrations to authenticate: %@",  buf,  0xCu);
    }

    if (([v13 containsObjectIdenticalTo:*(void *)(a1 + 40)] & 1) == 0)
    {
      uint64_t v15 = objc_claimAutoreleasedReturnValue([v13 arrayByAddingObject:*(void *)(a1 + 40)]);

      uint64_t v13 = (void *)v15;
    }

    if (![v13 count])
    {
      uint64_t v19 = IMSingleObjectArray(*(void *)(a1 + 40), v16, v17, v18);
      uint64_t v20 = objc_claimAutoreleasedReturnValue(v19);

      uint64_t v13 = (void *)v20;
    }

    uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      __int128 v48 = v42;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Setting auth cert for user ID: %@",  buf,  0xCu);
    }

    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v22 registrationConductor]);
    id v24 = (void *)objc_claimAutoreleasedReturnValue([v23 userStore]);

    id v25 = (void *)objc_claimAutoreleasedReturnValue([v24 usersWithRealm:3]);
    id v26 = (void *)objc_claimAutoreleasedReturnValue([v25 firstObject]);

    uint64_t v40 = v7;
    [v24 setAuthenticationCertificate:v7 forUser:v26];
    uint64_t v27 = objc_claimAutoreleasedReturnValue([v26 deviceUserWithUpdatedServerUserID:v42]);

    __int16 v38 = (void *)v27;
    id v39 = v24;
    [v24 updateUser:v27];
    __int128 v45 = 0u;
    __int128 v46 = 0u;
    __int128 v43 = 0u;
    __int128 v44 = 0u;
    id v28 = v13;
    id v29 = [v28 countByEnumeratingWithState:&v43 objects:v51 count:16];
    if (v29)
    {
      id v30 = v29;
      uint64_t v31 = *(void *)v44;
      do
      {
        for (i = 0LL; i != v30; i = (char *)i + 1)
        {
          if (*(void *)v44 != v31) {
            objc_enumerationMutation(v28);
          }
          __int128 v33 = *(void **)(*((void *)&v43 + 1) + 8LL * (void)i);
          [v33 setIdsUserID:v42];
          __int128 v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v41));
          [v33 setIsCDMA:v34];

          __int128 v35 = (void *)objc_claimAutoreleasedReturnValue( +[IDSRegistrationKeyManager sharedInstance]( &OBJC_CLASS___IDSRegistrationKeyManager,  "sharedInstance"));
          __int128 v36 = (void *)objc_claimAutoreleasedReturnValue([v35 keyPairSignature]);
          [v33 setKeyPairSignature:v36];

          uint64_t v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
          if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412546;
            __int128 v48 = v9;
            __int16 v49 = 2112;
            __int128 v50 = v33;
            _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "Setting response handles for registration: %@ %@",  buf,  0x16u);
          }

          [v33 setUris:v9];
          [v33 saveToKeychain];
          if (v33 == *(void **)(a1 + 40)
            || ([*(id *)(*(void *)(a1 + 32) + 24) containsObjectIdenticalTo:v33] & 1) != 0
            || [*(id *)(*(void *)(a1 + 32) + 16) containsObjectIdenticalTo:v33])
          {
            [*(id *)(a1 + 32) _notifyIDSAuthenticationSuccess:v33];
          }
        }

        id v30 = [v28 countByEnumeratingWithState:&v43 objects:v51 count:16];
      }

      while (v30);
    }

    id v7 = v40;
  }

  else
  {
    [*(id *)(a1 + 32) _notifyProvisionFailure:*(void *)(a1 + 40) responseCode:0 registrationError:18 error:0 fatal:0 info:0];
  }
}

void sub_10021B358(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = *(void **)(a1 + 32);
  id v12 = a4;
  [v7 saveToKeychain];
  uint64_t v8 = 18LL;
  if (a3 == 6008)
  {
    unsigned int v9 = 0;
  }

  else
  {
    uint64_t v8 = a2;
    unsigned int v9 = 1;
  }

  if (a3 == 6005) {
    uint64_t v10 = a2;
  }
  else {
    uint64_t v10 = v8;
  }
  if (a3 == 6005) {
    uint64_t v11 = 0LL;
  }
  else {
    uint64_t v11 = v9;
  }
  [*(id *)(a1 + 40) _notifyProvisionFailure:*(void *)(a1 + 32) responseCode:a3 registrationError:v10 error:v12 fatal:v11 info:0];
}

void sub_10021B704(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 responseStatus]);
  if (v4)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 responseStatus]);
    BOOL v6 = [v5 integerValue] == 0;
  }

  else
  {
    BOOL v6 = 0;
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 responseCertificate]);
  if (v7)
  {
    uint64_t v8 = objc_alloc(&OBJC_CLASS___IDSAuthenticationCertificate);
    unsigned int v9 = (void *)objc_claimAutoreleasedReturnValue([v3 responseCertificate]);
    uint64_t v10 = -[IDSAuthenticationCertificate initWithDataRepresentation:](v8, "initWithDataRepresentation:", v9);
  }

  else
  {
    uint64_t v10 = 0LL;
  }

  uint64_t v47 = objc_claimAutoreleasedReturnValue([v3 responseCertificateExpiration]);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) usersWithRealm:2]);
  v55[0] = _NSConcreteStackBlock;
  v55[1] = 3221225472LL;
  v55[2] = sub_10021BCB0;
  v55[3] = &unk_1008FE3E0;
  id v56 = *(id *)(a1 + 40);
  __int128 v45 = v11;
  id v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "__imArrayByFilteringWithBlock:", v55));
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 firstObject]);

  id v14 = (void *)objc_claimAutoreleasedReturnValue(+[IDSRegistrationController sharedInstance](&OBJC_CLASS___IDSRegistrationController, "sharedInstance"));
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 activeRegistrations]);
  v53[0] = _NSConcreteStackBlock;
  v53[1] = 3221225472LL;
  v53[2] = sub_10021BCF0;
  v53[3] = &unk_1008FE1D8;
  id v16 = v13;
  id v54 = v16;
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "__imArrayByFilteringWithBlock:", v53));

  if (([v17 containsObjectIdenticalTo:*(void *)(a1 + 48)] & 1) == 0)
  {
    uint64_t v18 = objc_claimAutoreleasedReturnValue([v17 arrayByAddingObject:*(void *)(a1 + 48)]);

    uint64_t v17 = (void *)v18;
  }

  uint64_t v22 = (void *)v47;
  if ([v17 count])
  {
    __int128 v46 = v17;
  }

  else
  {
    uint64_t v23 = IMSingleObjectArray(*(void *)(a1 + 48), v19, v20, v21);
    uint64_t v24 = objc_claimAutoreleasedReturnValue(v23);

    __int128 v46 = (void *)v24;
  }

  id v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218498;
    BOOL v59 = v6;
    __int16 v60 = 2112;
    double v61 = v10;
    __int16 v62 = 2112;
    uint64_t v63 = v47;
    _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "Home Number response parsed { success: %lu, cert %@, expiration %@ }",  buf,  0x20u);
  }

  if (v10) {
    BOOL v26 = v6;
  }
  else {
    BOOL v26 = 0;
  }
  if (v26 && v47)
  {
    uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v28 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138412290;
      BOOL v59 = v28;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "Setting auth cert for user ID: %@",  buf,  0xCu);
    }

    uint64_t v29 = objc_claimAutoreleasedReturnValue([v16 temporaryPhoneUserWithUpdatedExpirationDate:v47]);
    id v30 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPACStateTracker sharedInstance](&OBJC_CLASS___IDSPACStateTracker, "sharedInstance"));
    [v30 notePhoneAuthCertGained];

    __int128 v44 = v10;
    [*(id *)(a1 + 32) setAuthenticationCertificate:v10 forUser:v16];
    [*(id *)(a1 + 32) setCredential:0 forUser:v16];
    __int128 v43 = (void *)v29;
    [*(id *)(a1 + 32) updateUser:v29];
    __int128 v51 = 0u;
    __int128 v52 = 0u;
    __int128 v49 = 0u;
    __int128 v50 = 0u;
    id obj = v46;
    id v31 = [obj countByEnumeratingWithState:&v49 objects:v57 count:16];
    if (v31)
    {
      id v32 = v31;
      uint64_t v33 = *(void *)v50;
      do
      {
        for (i = 0LL; i != v32; i = (char *)i + 1)
        {
          if (*(void *)v50 != v33) {
            objc_enumerationMutation(obj);
          }
          __int128 v35 = *(void **)(*((void *)&v49 + 1) + 8LL * (void)i);
          [v35 setIdsUserID:*(void *)(a1 + 40)];
          __int128 v36 = (void *)objc_claimAutoreleasedReturnValue(+[FTDeviceSupport sharedInstance](&OBJC_CLASS___FTDeviceSupport, "sharedInstance"));
          uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v36 isC2KEquipment]));
          [v35 setIsCDMA:v37];

          __int16 v38 = (void *)objc_claimAutoreleasedReturnValue( +[IDSRegistrationKeyManager sharedInstance]( &OBJC_CLASS___IDSRegistrationKeyManager,  "sharedInstance"));
          id v39 = (void *)objc_claimAutoreleasedReturnValue([v38 keyPairSignature]);
          [v35 setKeyPairSignature:v39];

          [v35 saveToKeychain];
          if (v35 == *(void **)(a1 + 48)
            || ([*(id *)(*(void *)(a1 + 56) + 24) containsObjectIdenticalTo:v35] & 1) != 0
            || [*(id *)(*(void *)(a1 + 56) + 16) containsObjectIdenticalTo:v35])
          {
            [*(id *)(a1 + 56) _notifyIDSAuthenticationSuccess:v35];
          }
        }

        id v32 = [obj countByEnumeratingWithState:&v49 objects:v57 count:16];
      }

      while (v32);
    }

    uint64_t v10 = v44;
    uint64_t v22 = (void *)v47;
  }

  else
  {
    uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
    unsigned int v41 = (void *)objc_claimAutoreleasedReturnValue([v40 registrationConductor]);
    id v42 = (void *)objc_claimAutoreleasedReturnValue([v41 userStore]);
    [v42 forceRemoveUser:v16 silently:1];

    [*(id *)(a1 + 56) _notifyProvisionFailure:*(void *)(a1 + 48) responseCode:0 registrationError:-1 error:0 fatal:1 info:0];
  }
}

id sub_10021BCB0(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 realmPrefixedIdentifier]);
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

id sub_10021BCF0(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 userUniqueIdentifier]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uniqueIdentifier]);
  id v5 = [v3 isEqualToString:v4];

  return v5;
}

void sub_10021BD50(id *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6 = a4;
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"IDS Temporary Phone Provisioning failed: %d",  a3));
  sub_10012E874(0, @"Registration", v7, 1073LL);

  [a1[4] saveToKeychain];
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([a1[5] usersWithRealm:2]);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  void v15[2] = sub_10021BED8;
  v15[3] = &unk_1008FE3E0;
  id v16 = a1[6];
  unsigned int v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "__imArrayByFilteringWithBlock:", v15));
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 firstObject]);

  if (a3 == 6010)
  {
    uint64_t v11 = 37LL;
  }

  else
  {
    id v12 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 registrationConductor]);
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 userStore]);
    [v14 forceRemoveUser:v10 silently:1];

    uint64_t v11 = 36LL;
  }

  [a1[7] _notifyProvisionFailure:a1[4] responseCode:a3 registrationError:v11 error:v6 fatal:1 info:0];
}

id sub_10021BED8(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 realmPrefixedIdentifier]);
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

void sub_10021C674( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, os_activity_scope_state_s state, char a23, id location)
{
}

void sub_10021C6E8(uint64_t a1, int a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v5 = WeakRetained;
  if (a2)
  {
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      int v8 = 138412290;
      uint64_t v9 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Queued %@ for validation",  (uint8_t *)&v8,  0xCu);
    }
  }

  else
  {
    [WeakRetained _sendIDSAuthRequest:*(void *)(a1 + 32) forInfo:*(void *)(a1 + 40)];
  }
}

void sub_10021C7C4(uint64_t a1, void *a2)
{
  id v3 = (id *)(a1 + 40);
  id v4 = a2;
  id WeakRetained = objc_loadWeakRetained(v3);
  [WeakRetained _sendIDSAuthRequest:v4 forInfo:*(void *)(a1 + 32)];
}

void sub_10021CACC(id a1, IDSBaseMessage *a2, NSError *a3, int64_t a4, NSDictionary *a5)
{
  int v6 = a4;
  int v8 = a2;
  uint64_t v9 = a3;
  uint64_t v10 = a5;
  uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog spamReporting](&OBJC_CLASS___IMRGLog, "spamReporting"));
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = 138413058;
    uint64_t v13 = v8;
    __int16 v14 = 2112;
    uint64_t v15 = v9;
    __int16 v16 = 1024;
    int v17 = v6;
    __int16 v18 = 2112;
    uint64_t v19 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Sent report spam message (responseMessage: %@) (error: %@) (resultCode: %d) (resultDictionary: %@)",  (uint8_t *)&v12,  0x26u);
  }
}

void sub_10021CDDC(id a1, IDSBaseMessage *a2, NSError *a3, int64_t a4, NSDictionary *a5)
{
  int v6 = a4;
  int v8 = a2;
  uint64_t v9 = a3;
  uint64_t v10 = a5;
  uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog spamReporting](&OBJC_CLASS___IMRGLog, "spamReporting"));
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = 138413058;
    uint64_t v13 = v8;
    __int16 v14 = 2112;
    uint64_t v15 = v9;
    __int16 v16 = 1024;
    int v17 = v6;
    __int16 v18 = 2112;
    uint64_t v19 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Sent report unknown sender message (responseMessage: %@) (error: %@) (resultCode: %d) (resultDictionary: %@)",  (uint8_t *)&v12,  0x26u);
  }
}

void sub_10021D040(id a1, IDSBaseMessage *a2, NSError *a3, int64_t a4, NSDictionary *a5)
{
  int v6 = a4;
  int v8 = a2;
  uint64_t v9 = a3;
  uint64_t v10 = a5;
  uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog iMessageSpam](&OBJC_CLASS___IMRGLog, "iMessageSpam"));
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = 138413058;
    uint64_t v13 = v8;
    __int16 v14 = 2112;
    uint64_t v15 = v9;
    __int16 v16 = 1024;
    int v17 = v6;
    __int16 v18 = 2112;
    uint64_t v19 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Sent report spam message (responseMessage: %@) (error: %@) (resultCode: %d) (resultDictionary: %@)",  (uint8_t *)&v12,  0x26u);
  }
}

void sub_10021D3B4(uint64_t a1, void *a2, void *a3, int a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a5;
  int v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v9 splunkHint]);
    *(_DWORD *)buf = 138413058;
    uint64_t v21 = v13;
    __int16 v22 = 2112;
    id v23 = v10;
    __int16 v24 = 1024;
    int v25 = a4;
    __int16 v26 = 2112;
    id v27 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Sent report client event message (responseMessage: %@) (error: %@) (resultCode: %d) (resultDictionary: %@)",  buf,  0x26u);
  }

  if (v10)
  {
    NSErrorDomain v14 = (NSErrorDomain)objc_claimAutoreleasedReturnValue([v10 domain]);
    if (v14 != NSURLErrorDomain)
    {
LABEL_7:

      goto LABEL_8;
    }

    id v15 = [v10 code];

    if (v15 == (id)-1001LL)
    {
      uint64_t v16 = IDSEventReportingManagerErrorDomain;
      NSErrorUserInfoKey v18 = NSDebugDescriptionErrorKey;
      uint64_t v19 = @"Timed out while reporting event.";
      NSErrorDomain v14 = (NSErrorDomain)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v19,  &v18,  1LL));
      uint64_t v17 = objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v16,  300LL,  v14));

      id v10 = (id)v17;
      goto LABEL_7;
    }
  }

void sub_10021D778(id a1, IDSBaseMessage *a2, NSError *a3, int64_t a4, NSDictionary *a5)
{
  int v6 = a4;
  int v8 = a2;
  id v9 = a3;
  id v10 = a5;
  id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog iMessageSpam](&OBJC_CLASS___IMRGLog, "iMessageSpam"));
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = 138413058;
    uint64_t v13 = v8;
    __int16 v14 = 2112;
    id v15 = v9;
    __int16 v16 = 1024;
    int v17 = v6;
    __int16 v18 = 2112;
    uint64_t v19 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Sent report iMessage unknown sender message (responseMessage: %@) (error: %@) (resultCode: %d) (resultDictionary: %@)",  (uint8_t *)&v12,  0x26u);
  }
}

void sub_10021DA78(uint64_t a1, void *a2, void *a3, int a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a5;
  int v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = 138413058;
    id v15 = v9;
    __int16 v16 = 2112;
    id v17 = v10;
    __int16 v18 = 1024;
    int v19 = a4;
    __int16 v20 = 2112;
    id v21 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Sent report approved temp handle message (responseMessage: %@) (error: %@) (resultCode: %d) (resultDictionary: %@)",  (uint8_t *)&v14,  0x26u);
  }

  uint64_t v13 = *(void *)(a1 + 32);
  if (v13) {
    (*(void (**)(uint64_t, id))(v13 + 16))(v13, v10);
  }
}

void sub_10021DD58(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5)
  {
    id v6 = a3;
    id v7 = [v9 status];
    id v8 = [v9 abusive];
    [v9 delay];
    (*(void (**)(uint64_t, id, id, id))(v5 + 16))(v5, v7, v8, v6);
  }
}

void sub_10021E6B4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, os_activity_scope_state_s state, char a41)
{
}

void sub_10021ECA0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, os_activity_scope_state_s state, char a21)
{
}

void sub_10021ECF0(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a5;
  int v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 64) objectForKey:*(void *)(a1 + 40)]);
  id v13 = [v12 copy];

  [*(id *)(*(void *)(a1 + 32) + 64) removeObjectForKey:*(void *)(a1 + 40)];
  id v31 = -[NSDictionary initWithDictionary:copyItems:]( objc_alloc(&OBJC_CLASS___NSDictionary),  "initWithDictionary:copyItems:",  *(void *)(*(void *)(a1 + 32) + 56LL),  1LL);
  uint64_t v28 = v9;
  [*(id *)(a1 + 32) _processGetHandlesMessage:v9 registrations:v13 deliveredWithError:v10 resultCode:a4 resultDictionary:v11 allowPasswordPrompt:*(unsigned __int8 *)(a1 + 48)];
  __int128 v41 = 0u;
  __int128 v42 = 0u;
  __int128 v39 = 0u;
  __int128 v40 = 0u;
  id obj = v13;
  id v33 = [obj countByEnumeratingWithState:&v39 objects:v44 count:16];
  if (v33)
  {
    uint64_t v32 = *(void *)v40;
    uint64_t v30 = a1;
    do
    {
      for (i = 0LL; i != v33; i = (char *)i + 1)
      {
        if (*(void *)v40 != v32) {
          objc_enumerationMutation(obj);
        }
        id v15 = *(void **)(*((void *)&v39 + 1) + 8LL * (void)i);
        __int16 v16 = (void *)objc_claimAutoreleasedReturnValue([v15 guid]);
        if (v16)
        {
          [*(id *)(*(void *)(a1 + 32) + 56) removeObjectForKey:v16];
          id v17 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v31, "objectForKey:", v16));
          __int128 v35 = 0u;
          __int128 v36 = 0u;
          __int128 v37 = 0u;
          __int128 v38 = 0u;
          id v18 = [v17 countByEnumeratingWithState:&v35 objects:v43 count:16];
          if (v18)
          {
            id v19 = v18;
            uint64_t v20 = *(void *)v36;
            do
            {
              for (j = 0LL; j != v19; j = (char *)j + 1)
              {
                if (*(void *)v36 != v20) {
                  objc_enumerationMutation(v17);
                }
                uint64_t v22 = *(void *)(*((void *)&v35 + 1) + 8LL * (void)j);
                if (v22) {
                  (*(void (**)(uint64_t, void *, uint64_t, BOOL, id))(v22 + 16))(v22, v15, a4, v10 == 0LL, v11);
                }
              }

              id v19 = [v17 countByEnumeratingWithState:&v35 objects:v43 count:16];
            }

            while (v19);
          }

          a1 = v30;
        }
      }

      id v33 = [obj countByEnumeratingWithState:&v39 objects:v44 count:16];
    }

    while (v33);
  }

  if (![*(id *)(*(void *)(a1 + 32) + 64) count])
  {
    uint64_t v23 = *(void *)(a1 + 32);
    __int16 v24 = *(void **)(v23 + 64);
    *(void *)(v23 + 64) = 0LL;
  }

  if (![*(id *)(*(void *)(a1 + 32) + 56) count])
  {
    uint64_t v25 = *(void *)(a1 + 32);
    __int16 v26 = *(void **)(v25 + 56);
    *(void *)(v25 + 56) = 0LL;
  }

  id v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Processed getHandles queue", buf, 2u);
  }
}

void sub_10021F200(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a5;
  if (a4 == 6006) {
    [*(id *)(a1 + 32) sendRegistration:*(void *)(a1 + 40)];
  }
  int v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    v13[0] = 67109634;
    v13[1] = a4;
    __int16 v14 = 2112;
    id v15 = v11;
    __int16 v16 = 2112;
    id v17 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Processed retrieve feature toggle state message {resultCode: %d, resultDictionary: %@, error: %@}",  (uint8_t *)v13,  0x1Cu);
  }

  (*(void (**)(void, void, uint64_t, BOOL, id))(*(void *)(a1 + 48) + 16LL))( *(void *)(a1 + 48),  *(void *)(a1 + 40),  a4,  v10 == 0LL,  v11);
}

void sub_10021F538(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a5;
  if (a4 == 6006) {
    [*(id *)(a1 + 32) sendRegistration:*(void *)(a1 + 40)];
  }
  int v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    v13[0] = 67109634;
    v13[1] = a4;
    __int16 v14 = 2112;
    id v15 = v11;
    __int16 v16 = 2112;
    id v17 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Processed feature toggle state message {resultCode: %d, resultDictionary: %@, error: %@}",  (uint8_t *)v13,  0x1Cu);
  }

  (*(void (**)(void, void, uint64_t, BOOL, id))(*(void *)(a1 + 48) + 16LL))( *(void *)(a1 + 48),  *(void *)(a1 + 40),  a4,  v10 == 0LL,  v11);
}

id sub_10021F8FC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 operation])
  {
    id v4 = 0LL;
  }

  else
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 featureID]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) featureID]);
    id v4 = [v5 isEqualToString:v6];
  }

  return v4;
}

void sub_1002204B8(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a5;
  if (a4 == 6006) {
    [*(id *)(a1 + 32) sendRegistration:*(void *)(a1 + 40)];
  }
  int v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    v13[0] = 67109634;
    v13[1] = a4;
    __int16 v14 = 2112;
    id v15 = v11;
    __int16 v16 = 2112;
    id v17 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Processed pseudonym message {resultCode: %d, resultDictionary: %@, error: %@}",  (uint8_t *)v13,  0x1Cu);
  }

  (*(void (**)(void, void, uint64_t, BOOL, id, void))(*(void *)(a1 + 48) + 16LL))( *(void *)(a1 + 48),  *(void *)(a1 + 40),  a4,  v10 == 0LL,  v11,  0LL);
}

void sub_100220D90(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a5;
  switch(a4)
  {
    case 6001LL:
      int v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
      if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_19;
      }
      LOWORD(v16) = 0;
      id v13 = "KT opt in status update failed -- Server says not to retry.";
      goto LABEL_18;
    case 6002LL:
      int v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
      if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_19;
      }
      LOWORD(v16) = 0;
      id v13 = "Server cannot process KT opt in status update at this time.";
      goto LABEL_18;
    case 6003LL:
      int v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
      if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_19;
      }
      LOWORD(v16) = 0;
      id v13 = "Server says to retry, client clock is too far off from the server clock.";
      goto LABEL_18;
    case 6004LL:
    case 6007LL:
    case 6008LL:
    case 6009LL:
    case 6010LL:
    case 6011LL:
    case 6012LL:
      goto LABEL_20;
    case 6005LL:
      int v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
      if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_19;
      }
      LOWORD(v16) = 0;
      id v13 = "Server says to refresh credentials.";
      goto LABEL_18;
    case 6006LL:
      __int16 v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v16) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Server asks for refresh of registration.",  (uint8_t *)&v16,  2u);
      }

      [*(id *)(a1 + 32) sendRegistration:*(void *)(a1 + 40)];
      goto LABEL_20;
    case 6013LL:
      int v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
      if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_19;
      }
      LOWORD(v16) = 0;
      id v13 = "Server says account key is out of date.";
      goto LABEL_18;
    default:
      if (a4) {
        goto LABEL_20;
      }
      int v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
      if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_19;
      }
      LOWORD(v16) = 0;
      id v13 = "KT opt in status update succeeded.";
LABEL_18:
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, v13, (uint8_t *)&v16, 2u);
LABEL_19:

LABEL_20:
      id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency", v16));
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(v16) = 67109634;
        HIDWORD(v16) = a4;
        __int16 v17 = 2112;
        id v18 = v11;
        __int16 v19 = 2112;
        id v20 = v10;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Processed KT opt-in status update message {resultCode: %d, resultDictionary: %@, error: %@}",  (uint8_t *)&v16,  0x1Cu);
      }

      (*(void (**)(void, void, uint64_t, BOOL, id, void))(*(void *)(a1 + 48) + 16LL))( *(void *)(a1 + 48),  *(void *)(a1 + 40),  a4,  v10 == 0LL,  v11,  0LL);
      return;
  }

void sub_10022145C(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a5;
  if (a4 == 6006) {
    [*(id *)(a1 + 32) sendRegistration:*(void *)(a1 + 40)];
  }
  int v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    v13[0] = 67109634;
    v13[1] = a4;
    __int16 v14 = 2112;
    id v15 = v11;
    __int16 v16 = 2112;
    id v17 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Processed KT opt-in status update message {resultCode: %d, resultDictionary: %@, error: %@}",  (uint8_t *)v13,  0x1Cu);
  }

  (*(void (**)(void, void, uint64_t, BOOL, id, void))(*(void *)(a1 + 48) + 16LL))( *(void *)(a1 + 48),  *(void *)(a1 + 40),  a4,  v10 == 0LL,  v11,  0LL);
}

void sub_100221C74( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
}

void sub_100222060( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
}

void sub_10022220C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
}

void sub_100223074(id a1, IDSBaseMessage *a2, NSError *a3, int64_t a4, NSDictionary *a5)
{
  id v6 = a2;
  uint64_t v8 = objc_opt_class(&OBJC_CLASS___IDSSIMDeactivationInfoMessage, v7);
  if ((objc_opt_isKindOfClass(v6, v8) & 1) == 0)
  {
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v10, OS_LOG_TYPE_FAULT)) {
      sub_1006A4540((uint64_t)v6, v10);
    }
    goto LABEL_10;
  }

  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  id v10 = v9;
  if (!a4)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v11[0] = 67109120;
      v11[1] = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "SIM deactivation request succeeded with code: %d",  (uint8_t *)v11,  8u);
    }

void sub_1002233F0(uint64_t a1, void *a2)
{
  id v3 = [a2 response];
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v5)
    {
      LOWORD(v9) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "User hit no to IDS regitration alert -- ignoring",  (uint8_t *)&v9,  2u);
    }

void sub_100223558( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

__CFDictionary *sub_100223CC0(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v20 = v3;
  BOOL v5 = (void *)objc_claimAutoreleasedReturnValue([v3 componentsSeparatedByString:@"/"]);
  theDict = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  id v6 = v5;
  id v7 = [v6 countByEnumeratingWithState:&v22 objects:v30 count:16];
  if (v7)
  {
    uint64_t v8 = *(void *)v23;
    do
    {
      for (i = 0LL; i != v7; i = (char *)i + 1)
      {
        if (*(void *)v23 != v8) {
          objc_enumerationMutation(v6);
        }
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(*((void *)&v22 + 1) + 8 * (void)i),  "componentsSeparatedByString:",  @"=",  v18,  v19));
        if ([v10 count] == (id)2)
        {
          id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 objectAtIndex:0]);
          int v12 = (void *)objc_claimAutoreleasedReturnValue([v10 objectAtIndex:1]);
          id v13 = (void *)objc_claimAutoreleasedReturnValue( +[IDSSockAddrWrapper wrapperWithAddressString:withPortHostOrder:withInterfaceName:]( &OBJC_CLASS___IDSSockAddrWrapper,  "wrapperWithAddressString:withPortHostOrder:withInterfaceName:",  v12,  49888LL,  v4));

          uint64_t v14 = OSLogHandleForIDSCategory("LinkManager");
          id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412546;
            id v27 = v11;
            __int16 v28 = 2112;
            uint64_t v29 = v13;
            _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "added mapping device ID [%@] to destination [%@]",  buf,  0x16u);
          }

          if (os_log_shim_legacy_logging_enabled(v16)
            && _IDSShouldLog(0LL, @"LinkManager"))
          {
            id v18 = v11;
            __int16 v19 = v13;
            _IDSLogV( 0LL,  @"IDSFoundation",  @"LinkManager",  @"added mapping device ID [%@] to destination [%@]");
          }

          if (v13) {
            CFDictionarySetValue(theDict, v11, v13);
          }
        }
      }

      id v7 = [v6 countByEnumeratingWithState:&v22 objects:v30 count:16];
    }

    while (v7);
  }

  return theDict;
}

NSMutableString *sub_100223F70(void *a1, double a2)
{
  id v3 = a1;
  id v4 = objc_alloc_init(&OBJC_CLASS___NSMutableString);
  __int128 v42 = v3;
  __int128 v51 = 0u;
  __int128 v52 = 0u;
  __int128 v53 = 0u;
  __int128 v54 = 0u;
  id obj = (id)objc_claimAutoreleasedReturnValue([v3 allKeys]);
  id v43 = [obj countByEnumeratingWithState:&v51 objects:v55 count:16];
  if (v43)
  {
    BOOL v5 = 0LL;
    id v6 = 0LL;
    id v7 = 0LL;
    uint64_t v50 = 0LL;
    uint64_t v41 = *(void *)v52;
    do
    {
      for (i = 0LL; i != v43; i = (char *)i + 1)
      {
        __int128 v44 = v6;
        __int128 v48 = v7;
        __int128 v49 = v5;
        if (*(void *)v52 != v41) {
          objc_enumerationMutation(obj);
        }
        int v9 = *(void **)(*((void *)&v51 + 1) + 8LL * (void)i);
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v42 objectForKey:v9]);
        id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKey:@"localDeliveryQueueStatMessageCount"]);
        uint64_t v47 = (char *)[v11 unsignedLongLongValue];

        int v12 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKey:@"localDeliveryQueueStatBytes"]);
        id v46 = [v12 unsignedLongLongValue];

        id v13 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKey:@"localDeliveryQueueStatDeliveredMessageCount"]);
        __int128 v45 = (char *)[v13 unsignedLongLongValue];

        uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKey:@"localDeliveryQueueStatDeliveredBytes"]);
        id v15 = [v14 unsignedLongLongValue];

        uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKey:@"localDeliveryQueueStatsLastDeliveredTime"]);
        [v16 doubleValue];
        double v18 = v17;

        __int16 v19 = (const char *)[v9 UTF8String];
        int v20 = strlen(v19);
        int v21 = 55 - v20;
        if (55 - v20 >= 0) {
          int v22 = 55 - v20;
        }
        else {
          int v22 = 62 - v20;
        }
        if (a2 == 0.0 || v18 == 0.0) {
          -[NSMutableString appendFormat:](v4, "appendFormat:", @"        %s\t", v19, v39);
        }
        else {
          -[NSMutableString appendFormat:]( v4,  "appendFormat:",  @"%7d %s\t",  (int)(a2 - v18 + 0.5),  v19);
        }
        if (v21 >= 8)
        {
          int v24 = (v22 >> 3) + 1;
          do
          {
            -[NSMutableString appendString:](v4, "appendString:", @"\t");
            --v24;
          }

          while (v24 > 1);
        }

        uint64_t v25 = formattedBytes(v46, v23);
        id v26 = objc_claimAutoreleasedReturnValue(v25);
        id v27 = [v26 UTF8String];
        uint64_t v29 = formattedBytes(v15, v28);
        id v30 = objc_claimAutoreleasedReturnValue(v29);
        -[NSMutableString appendFormat:]( v4,  "appendFormat:",  @"%3llu msgs %sB pending, %5llu msgs %sB processed\n",  v47,  v27,  v45,  [v30 UTF8String]);

        id v7 = &v48[(void)v45];
        v50 += (uint64_t)v15;
        BOOL v5 = &v49[(void)v47];
        id v6 = &v44[(void)v46];
      }

      id v43 = [obj countByEnumeratingWithState:&v51 objects:v55 count:16];
    }

    while (v43);
    uint64_t v32 = formattedBytes(v6, v31);
    id v33 = objc_claimAutoreleasedReturnValue(v32);
    id v34 = [v33 UTF8String];
    uint64_t v36 = formattedBytes(v50, v35);
    id v37 = objc_claimAutoreleasedReturnValue(v36);
    -[NSMutableString appendFormat:]( v4,  "appendFormat:",  @"\n\tTotal\t\t\t\t\t\t\t%3llu msgs %sB pending, %5llu msgs %sB processed\n",  v5,  v34,  v7,  [v37 UTF8String]);
  }

  else
  {
    -[NSMutableString appendString:](v4, "appendString:", @"\tNone\n");
  }

  return v4;
}

NSMutableString *sub_100224320(void *a1)
{
  id v1 = a1;
  id v2 = objc_alloc_init(&OBJC_CLASS___NSMutableString);
  id v3 = objc_alloc(&OBJC_CLASS___NSMutableSet);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v1 allKeys]);
  BOOL v5 = -[NSMutableSet initWithArray:](v3, "initWithArray:", v4);

  id v6 = (void *)objc_claimAutoreleasedReturnValue([(id)qword_1009C0688 allKeys]);
  -[NSMutableSet addObjectsFromArray:](v5, "addObjectsFromArray:", v6);

  __int128 v35 = 0u;
  __int128 v36 = 0u;
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  id obj = v5;
  id v27 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v33,  v37,  16LL);
  if (v27)
  {
    uint64_t v25 = *(void *)v34;
    id v26 = v1;
    do
    {
      for (i = 0LL; i != v27; i = (char *)i + 1)
      {
        if (*(void *)v34 != v25) {
          objc_enumerationMutation(obj);
        }
        uint64_t v8 = *(void **)(*((void *)&v33 + 1) + 8LL * (void)i);
        int v9 = (void *)objc_claimAutoreleasedReturnValue([(id)qword_1009C0688 objectForKey:v8]);
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKey:v8]);
        id v11 = v10;
        if (v10)
        {
          uint64_t v31 = [v10 packetsSent];
          uint64_t v32 = [v11 packetsReceived];
          unint64_t v29 = (unint64_t)[v11 bytesSent];
          int v12 = v11;
        }

        else
        {
          uint64_t v31 = [v9 packetsSent];
          uint64_t v32 = [v9 packetsReceived];
          unint64_t v29 = (unint64_t)[v9 bytesSent];
          int v12 = v9;
        }

        unint64_t v30 = (unint64_t)[v12 bytesReceived];
        uint64_t v28 = [v9 packetsSent];
        id v13 = [v9 packetsReceived];
        uint64_t v14 = [v9 bytesSent];
        id v15 = [v9 bytesReceived];
        uint64_t v16 = (const char *)[v8 UTF8String];
        int v17 = 55 - strlen(v16);
        -[NSMutableString appendFormat:](v2, "appendFormat:", @"\t%s\t", v16);
        if (v17 >= 8)
        {
          unsigned int v18 = (v17 >> 3) + 1;
          do
          {
            -[NSMutableString appendString:](v2, "appendString:", @"\t");
            --v18;
          }

          while (v18 > 1);
        }

        int64_t v19 = v32 - v13;
        -[NSMutableString appendFormat:]( v2,  "appendFormat:",  @"\tTx\t%5lld pkts %5lld KB  %5llu pkts %5llu KB\n",  v31 - v28,  (uint64_t)(v29 - (void)v14) >> 10,  v31,  v29 >> 10);
        int v20 = 8;
        do
        {
          -[NSMutableString appendString:](v2, "appendString:", @"\t");
          --v20;
        }

        while (v20);
        -[NSMutableString appendFormat:]( v2,  "appendFormat:",  @"\tRx\t%5lld pkts %5lld KB  %5llu pkts %5llu KB\n",  v19,  (uint64_t)(v30 - (void)v15) >> 10,  v32,  v30 >> 10);

        id v1 = v26;
      }

      id v27 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v33,  v37,  16LL);
    }

    while (v27);
  }

  if (qword_1009C0688)
  {
    [(id)qword_1009C0688 addEntriesFromDictionary:v1];
  }

  else
  {
    id v21 = [v1 mutableCopy];
    int v22 = (void *)qword_1009C0688;
    qword_1009C0688 = (uint64_t)v21;
  }

  return v2;
}

void sub_100224DB4(id a1)
{
  off_1009C0690 = (_UNKNOWN *)IMWeakLinkSymbol( "WiFiDeviceClientRegisterAutoJoinNotificationCallback",  @"MobileWiFi");
}

void sub_100224DE0(id a1)
{
  off_1009C06A0 = (_UNKNOWN *)IMWeakLinkSymbol("WiFiManagerClientUnscheduleFromRunLoop", @"MobileWiFi");
}

void sub_100224FC4(uint64_t a1, void *value, void *key)
{
  if (value) {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), key, value);
  }
}

void sub_1002250B8(uint64_t a1)
{
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v10;
    do
    {
      id v6 = 0LL;
      do
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void *)(*((void *)&v9 + 1) + 8LL * (void)v6);
        id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 1376LL));
        objc_msgSend( WeakRetained,  "link:didConnectForDeviceUniqueID:cbuuid:",  *(void *)(a1 + 48),  0,  v7,  (void)v9);

        id v6 = (char *)v6 + 1;
      }

      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }

    while (v4);
  }
}

uint64_t sub_100225D1C(uint64_t a1, uint64_t a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_100225D70;
  v3[3] = &unk_1008F7948;
  void v3[4] = *(void *)(a1 + 32);
  return IDSTransportThreadAddBlock(v3, a2);
}

id sub_100225D70(uint64_t a1)
{
  return [*(id *)(a1 + 32) generateLinkReport:1 forceReport:ids_monotonic_time(a1)];
}

void sub_100225DA4(uint64_t a1)
{
  v120.tv_sec = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&v120.uint64_t tv_usec = 0xAAAAAAAAAAAAAAAALL;
  v119.tm_zone = (char *)0xAAAAAAAAAAAAAAAALL;
  *(void *)&__int128 v1 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v1 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v119.int tm_mon = v1;
  *(_OWORD *)&v119.tm_isdst = v1;
  *(_OWORD *)&v119.uint64_t tm_sec = v1;
  gettimeofday(&v120, 0LL);
  localtime_r(&v120.tv_sec, &v119);
  id v2 = objc_alloc(&OBJC_CLASS___NSMutableString);
  int tm_mon = v119.tm_mon;
  int tm_year = v119.tm_year;
  uint64_t tm_hour = v119.tm_hour;
  uint64_t tm_mday = v119.tm_mday;
  uint64_t tm_sec = v119.tm_sec;
  uint64_t tm_min = v119.tm_min;
  uint64_t tv_usec = v120.tv_usec;
  tm_zone = v119.tm_zone;
  __int128 v11 = (void *)objc_claimAutoreleasedReturnValue(+[IDSUTunDeliveryController sharedInstance](&OBJC_CLASS___IDSUTunDeliveryController, "sharedInstance"));
  unsigned int v12 = [v11 isPresent];
  id v13 = "Disconnected";
  if (v12) {
    id v13 = "Connected";
  }
  uint64_t v14 = -[NSMutableString initWithFormat:]( v2,  "initWithFormat:",  @"%d-%02d-%02d %02d:%02d:%02d.%06d %s  LocalDelivery %s\n",  (tm_year + 1900),  (tm_mon + 1),  tm_mday,  tm_hour,  tm_min,  tm_sec,  tv_usec,  tm_zone,  v13);

  uint64_t v15 = OSLogHandleForIDSCategory("LinkReport");
  uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    int v18 = v119.tm_mon;
    int v17 = v119.tm_year;
    int v19 = v119.tm_hour;
    int v20 = v119.tm_mday;
    int v21 = v119.tm_sec;
    int v22 = v119.tm_min;
    __darwin_suseconds_t v23 = v120.tv_usec;
    id obj = v119.tm_zone;
    int v24 = (void *)objc_claimAutoreleasedReturnValue( +[IDSUTunDeliveryController sharedInstance]( &OBJC_CLASS___IDSUTunDeliveryController,  "sharedInstance"));
    unsigned int v25 = [v24 isPresent];
    *(_DWORD *)buf = 67111170;
    id v26 = "Disconnected";
    if (v25) {
      id v26 = "Connected";
    }
    *(_DWORD *)id v123 = v17 + 1900;
    *(_WORD *)&v123[4] = 1024;
    *(_DWORD *)&v123[6] = v18 + 1;
    LOWORD(v124) = 1024;
    *(_DWORD *)((char *)&v124 + 2) = v20;
    HIWORD(v124) = 1024;
    int v125 = v19;
    __int16 v126 = 1024;
    int v127 = v22;
    __int16 v128 = 1024;
    int v129 = v21;
    __int16 v130 = 1024;
    __darwin_suseconds_t v131 = v23;
    __int16 v132 = 2080;
    int v133 = obj;
    __int16 v134 = 2080;
    uint64_t v135 = v26;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "%d-%02d-%02d %02d:%02d:%02d.%06d %s  LocalDelivery %s\n",  buf,  0x40u);
  }

  if (os_log_shim_legacy_logging_enabled(v27) && _IDSShouldLog(0LL, @"LinkReport"))
  {
    int v29 = v119.tm_mon;
    int v28 = v119.tm_year;
    uint64_t v31 = v119.tm_hour;
    uint64_t v30 = v119.tm_mday;
    uint64_t v32 = v119.tm_sec;
    uint64_t v33 = v119.tm_min;
    uint64_t v34 = v120.tv_usec;
    __int128 v35 = v119.tm_zone;
    __int128 v36 = (void *)objc_claimAutoreleasedReturnValue( +[IDSUTunDeliveryController sharedInstance]( &OBJC_CLASS___IDSUTunDeliveryController,  "sharedInstance"));
    unsigned int v37 = [v36 isPresent];
    __int128 v38 = "Disconnected";
    if (v37) {
      __int128 v38 = "Connected";
    }
    id v108 = v35;
    id v109 = v38;
    uint64_t v106 = v32;
    uint64_t v107 = v34;
    uint64_t v104 = v31;
    uint64_t v105 = v33;
    uint64_t v101 = (v29 + 1);
    uint64_t v103 = v30;
    uint64_t v94 = (v28 + 1900);
    _IDSLogV( 0LL,  @"IDSFoundation",  @"LinkReport",  @"%d-%02d-%02d %02d:%02d:%02d.%06d %s  LocalDelivery %s\n");
  }

  uint64_t v112 = (void *)objc_claimAutoreleasedReturnValue( +[IDSUTunDeliveryController sharedInstance]( &OBJC_CLASS___IDSUTunDeliveryController,  "sharedInstance",  v94,  v101,  v103,  v104,  v105,  v106,  v107,  v108,  v109));
  double v39 = ids_monotonic_time(v112);
  __int128 v40 = (void *)objc_claimAutoreleasedReturnValue([v112 syncPriorityMessageStatistics]);
  uint64_t v41 = sub_100223F70(v40, v39);
  __int128 v42 = (void *)objc_claimAutoreleasedReturnValue(v41);

  -[NSMutableString appendString:](v14, "appendString:", @"Sync priority messages queued:\n");
  -[NSMutableString appendString:](v14, "appendString:", v42);
  uint64_t v43 = OSLogHandleForIDSCategory("LinkReport");
  __int128 v44 = (os_log_s *)objc_claimAutoreleasedReturnValue(v43);
  if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    *(void *)id v123 = v42;
    _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "Sync priority messages queued: %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v45) && _IDSShouldLog(0LL, @"LinkReport"))
  {
    uint64_t v95 = v42;
    _IDSLogV(0LL, @"IDSFoundation", @"LinkReport", @"Sync priority messages queued: %@");
  }

  id v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v112, "defaultPriorityMessageStatistics", v95));
  uint64_t v47 = sub_100223F70(v46, v39);
  __int128 v48 = (void *)objc_claimAutoreleasedReturnValue(v47);

  -[NSMutableString appendString:](v14, "appendString:", @"\nDefault priority messages queued:\n");
  -[NSMutableString appendString:](v14, "appendString:", v48);
  uint64_t v49 = OSLogHandleForIDSCategory("LinkReport");
  uint64_t v50 = (os_log_s *)objc_claimAutoreleasedReturnValue(v49);
  if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    *(void *)id v123 = v48;
    _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_DEFAULT,  "Default priority messages queued: %@",  buf,  0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v51) && _IDSShouldLog(0LL, @"LinkReport"))
  {
    __int16 v96 = v48;
    _IDSLogV(0LL, @"IDSFoundation", @"LinkReport", @"Default priority messages queued: %@");
  }

  __int128 v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v112, "urgentPriorityMessageStatistics", v96));
  __int128 v53 = sub_100223F70(v52, v39);
  __int128 v54 = (void *)objc_claimAutoreleasedReturnValue(v53);

  -[NSMutableString appendString:](v14, "appendString:", @"\nUrgent priority messages queued:\n");
  -[NSMutableString appendString:](v14, "appendString:", v54);
  uint64_t v55 = OSLogHandleForIDSCategory("LinkReport");
  id v56 = (os_log_s *)objc_claimAutoreleasedReturnValue(v55);
  if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    *(void *)id v123 = v54;
    _os_log_impl( (void *)&_mh_execute_header,  v56,  OS_LOG_TYPE_DEFAULT,  "Urgent priority messages queued: %@",  buf,  0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v57) && _IDSShouldLog(0LL, @"LinkReport"))
  {
    v97 = v54;
    _IDSLogV(0LL, @"IDSFoundation", @"LinkReport", @"Urgent priority messages queued: %@");
  }

  __int128 v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v112, "urgentCloudPriorityMessageStatistics", v97));
  BOOL v59 = sub_100223F70(v58, v39);
  __int16 v60 = (void *)objc_claimAutoreleasedReturnValue(v59);

  -[NSMutableString appendString:](v14, "appendString:", @"\nUrgent Cloud priority messages queued:\n");
  -[NSMutableString appendString:](v14, "appendString:", v60);
  uint64_t v61 = OSLogHandleForIDSCategory("LinkReport");
  __int16 v62 = (os_log_s *)objc_claimAutoreleasedReturnValue(v61);
  if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    *(void *)id v123 = v60;
    _os_log_impl( (void *)&_mh_execute_header,  v62,  OS_LOG_TYPE_DEFAULT,  "Urgent Cloud priority messages queued: %@",  buf,  0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v63) && _IDSShouldLog(0LL, @"LinkReport"))
  {
    __int16 v98 = v60;
    _IDSLogV(0LL, @"IDSFoundation", @"LinkReport", @"Urgent Cloud priority messages queued: %@");
  }

  __int16 v64 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v112, "sendingMessageStatistics", v98));
  id v65 = sub_100223F70(v64, 0.0);
  uint64_t v111 = (void *)objc_claimAutoreleasedReturnValue(v65);

  -[NSMutableString appendString:](v14, "appendString:", @"\nMessages being sent:\n");
  -[NSMutableString appendString:](v14, "appendString:", v111);
  uint64_t v66 = OSLogHandleForIDSCategory("LinkReport");
  __int128 v67 = (os_log_s *)objc_claimAutoreleasedReturnValue(v66);
  if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    *(void *)id v123 = v111;
    _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEFAULT, "Messages being sent: %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v68) && _IDSShouldLog(0LL, @"LinkReport"))
  {
    unsigned int v99 = v111;
    _IDSLogV(0LL, @"IDSFoundation", @"LinkReport", @"Messages being sent: %@");
  }

  -[NSMutableString appendString:](v14, "appendString:", @"\nIncoming messages not claimed yet:\n", v99);
  uint64_t v69 = OSLogHandleForIDSCategory("LinkReport");
  int v70 = (os_log_s *)objc_claimAutoreleasedReturnValue(v69);
  if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEFAULT, "Incoming messages not claimed yet:", buf, 2u);
  }

  int v72 = (void *)objc_claimAutoreleasedReturnValue([v112 queuedIncomingMessageDictionary]);
  __int128 v117 = 0u;
  __int128 v118 = 0u;
  __int128 v115 = 0u;
  __int128 v116 = 0u;
  id obja = (id)objc_claimAutoreleasedReturnValue([v72 allKeys]);
  id v73 = [obja countByEnumeratingWithState:&v115 objects:v121 count:16];
  if (v73)
  {
    uint64_t v74 = 0LL;
    uint64_t v75 = *(void *)v116;
    do
    {
      for (i = 0LL; i != v73; i = (char *)i + 1)
      {
        if (*(void *)v116 != v75) {
          objc_enumerationMutation(obja);
        }
        id v77 = *(id *)(*((void *)&v115 + 1) + 8LL * (void)i);
        __int128 v78 = (const char *)[v77 UTF8String];
        int v79 = strlen(v78);
        -[NSMutableString appendFormat:](v14, "appendFormat:", @"\t%s\t", v78);
        if (55 - v79 >= 8)
        {
          unsigned int v80 = ((55 - v79) >> 3) + 1;
          do
          {
            -[NSMutableString appendString:](v14, "appendString:", @"\t");
            --v80;
          }

          while (v80 > 1);
        }

        Value = 0LL;
        if (v72 && v77) {
          Value = (void *)CFDictionaryGetValue((CFDictionaryRef)v72, v77);
        }
        id v82 = [Value unsignedLongLongValue];
        -[NSMutableString appendFormat:](v14, "appendFormat:", @"%3llu msgs\n", v82);
        uint64_t v83 = OSLogHandleForIDSCategory("LinkReport");
        id v84 = (os_log_s *)objc_claimAutoreleasedReturnValue(v83);
        if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315394;
          *(void *)id v123 = v78;
          *(_WORD *)&v123[8] = 2048;
          id v124 = v82;
          _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEFAULT, "\t%s\t%3llu msgs", buf, 0x16u);
        }

        if (os_log_shim_legacy_logging_enabled(v85)
          && _IDSShouldLog(0LL, @"LinkReport"))
        {
          id v102 = v82;
          _IDSLogV(0LL, @"IDSFoundation", @"LinkReport", @"\t%s\t%3llu msgs");
        }

        v74 += (uint64_t)v82;
      }

      id v73 = [obja countByEnumeratingWithState:&v115 objects:v121 count:16];
    }

    while (v73);

    -[NSMutableString appendFormat:](v14, "appendFormat:", @"\n\tTotal\t\t\t\t\t\t\t%3llu msgs\n", v74);
    uint64_t v86 = OSLogHandleForIDSCategory("LinkReport");
    __int16 v87 = (os_log_s *)objc_claimAutoreleasedReturnValue(v86);
    if (os_log_type_enabled(v87, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(void *)id v123 = v74;
      _os_log_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_DEFAULT, "\tTotal\t\t\t\t\t\t\t%3llu msgs", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v88) && _IDSShouldLog(0LL, @"LinkReport"))
    {
      uint64_t v100 = v74;
      _IDSLogV(0LL, @"IDSFoundation", @"LinkReport", @"\tTotal\t\t\t\t\t\t\t%3llu msgs");
    }
  }

  else
  {

    -[NSMutableString appendString:](v14, "appendString:", @"\tNone\n");
    uint64_t v89 = OSLogHandleForIDSCategory("LinkReport");
    uint64_t v90 = (os_log_s *)objc_claimAutoreleasedReturnValue(v89);
    if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v90, OS_LOG_TYPE_DEFAULT, "\tNone", buf, 2u);
    }
  }

  -[NSMutableString appendString:](v14, "appendString:", *(void *)(a1 + 32), v100, v102);
  int v92 = *(_DWORD *)(*(void *)(a1 + 40) + 1316LL);
  if (v92 != -1)
  {
    id v93 = v14;
    write(v92, -[NSMutableString UTF8String](v93, "UTF8String"), (size_t)-[NSMutableString length](v93, "length"));
    write(*(_DWORD *)(*(void *)(a1 + 40) + 1316LL), "\n", 1uLL);
  }
}

void sub_100227450(id a1)
{
  off_1009C06B0 = (_UNKNOWN *)IMWeakLinkSymbol("WiFiManagerClientCreate", @"MobileWiFi");
}

void sub_10022747C(id a1)
{
  off_1009C06C0 = (_UNKNOWN *)IMWeakLinkSymbol("WiFiManagerClientCopyDevices", @"MobileWiFi");
}

void sub_1002274A8(id a1)
{
  off_1009C06D0 = (_UNKNOWN *)IMWeakLinkSymbol( "WiFiDeviceClientRegisterAutoJoinNotificationCallback",  @"MobileWiFi");
}

void sub_1002274D4(uint64_t a1, void *a2, uint64_t a3)
{
  id v4 = a2;
  if (qword_1009C0750 != -1) {
    dispatch_once(&qword_1009C0750, &stru_1008FE910);
  }
  id v5 = [v4 objectForKey:qword_1009C06F0];
  if (qword_1009C0760 != -1) {
    dispatch_once(&qword_1009C0760, &stru_1008FE930);
  }
  if (off_1009C0758) {
    id v6 = [(id)off_1009C0758(v5) copy];
  }
  else {
    id v6 = 0LL;
  }
  id v7 = [v4 objectForKey:qword_1009C06F8];
  if (CFEqual(v7, (CFTypeRef)qword_1009C0700))
  {
    uint64_t v8 = 1LL;
  }

  else if (CFEqual(v7, (CFTypeRef)qword_1009C0708))
  {
    uint64_t v8 = 2LL;
  }

  else if (CFEqual(v7, (CFTypeRef)qword_1009C0710))
  {
    uint64_t v8 = 3LL;
  }

  else if (CFEqual(v7, (CFTypeRef)qword_1009C0718))
  {
    uint64_t v8 = 4LL;
  }

  else if (CFEqual(v7, (CFTypeRef)qword_1009C0720))
  {
    uint64_t v8 = 5LL;
  }

  else if (CFEqual(v7, (CFTypeRef)qword_1009C0728))
  {
    uint64_t v8 = 6LL;
  }

  else if (CFEqual(v7, (CFTypeRef)qword_1009C0730))
  {
    uint64_t v8 = 7LL;
  }

  else if (CFEqual(v7, (CFTypeRef)qword_1009C0738))
  {
    uint64_t v8 = 8LL;
  }

  else if (CFEqual(v7, (CFTypeRef)qword_1009C0740))
  {
    uint64_t v8 = 9LL;
  }

  else if (CFEqual(v7, (CFTypeRef)qword_1009C0748))
  {
    uint64_t v8 = 10LL;
  }

  else
  {
    uint64_t v8 = 0LL;
  }

  uint64_t v9 = OSLogHandleForTransportCategory("AutoJoin");
  __int128 v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    __int128 v11 = (&off_1009B76D8)[v8];
    *(_DWORD *)buf = 136315394;
    int v21 = v11;
    __int16 v22 = 2112;
    id v23 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "_WiFiDeviceAutoJoinCallback: status = %s, SSID = [%@]",  buf,  0x16u);
  }

  uint64_t v13 = os_log_shim_legacy_logging_enabled(v12);
  if ((_DWORD)v13)
  {
    if (_IDSShouldLogTransport(v13))
    {
      _IDSLogTransport(@"AutoJoin", @"IDS", @"_WiFiDeviceAutoJoinCallback: status = %s, SSID = [%@]");
      if (_IDSShouldLog(0LL, @"AutoJoin")) {
        _IDSLogV( 0LL,  @"IDSFoundation",  @"AutoJoin",  @"_WiFiDeviceAutoJoinCallback: status = %s, SSID = [%@]");
      }
    }
  }

  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  void v16[2] = sub_1002408A8;
  void v16[3] = &unk_1008FE958;
  uint64_t v18 = a3;
  uint64_t v19 = v8;
  id v17 = v6;
  id v14 = v6;
  IDSTransportThreadAddBlock(v16, v15);
}

void sub_100227848(id a1)
{
  off_1009C06E0 = (_UNKNOWN *)IMWeakLinkSymbol("WiFiManagerClientScheduleWithRunLoop", @"MobileWiFi");
}

void sub_1002282EC(uint64_t a1)
{
  uint64_t v2 = OSLogHandleForTransportCategory("LinkManager");
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(a1 + 32)) {
      id v4 = @"YES";
    }
    else {
      id v4 = @"NO";
    }
    *(_DWORD *)buf = 138412290;
    uint64_t v12 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "_connectivityChangedForDefaultDevice sending legacyUTunBTLinkManagerDefaultPeerConnectivityChanged: %@",  buf,  0xCu);
  }

  uint64_t v6 = os_log_shim_legacy_logging_enabled(v5);
  if ((_DWORD)v6 && _IDSShouldLogTransport(v6))
  {
    id v7 = *(_BYTE *)(a1 + 32) ? @"YES" : @"NO";
    __int128 v10 = v7;
    _IDSLogTransport( @"LinkManager",  @"IDS",  @"_connectivityChangedForDefaultDevice sending legacyUTunBTLinkManagerDefaultPeerConnectivityChanged: %@");
    if (_IDSShouldLog(0LL, @"LinkManager"))
    {
      if (*(_BYTE *)(a1 + 32)) {
        uint64_t v8 = @"YES";
      }
      else {
        uint64_t v8 = @"NO";
      }
      __int128 v10 = (__CFString *)v8;
      _IDSLogV( 0LL,  @"IDSFoundation",  @"LinkManager",  @"_connectivityChangedForDefaultDevice sending legacyUTunBTLinkManagerDefaultPeerConnectivityChanged: %@");
    }
  }

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[IDSUTunDeliveryController sharedInstance]( &OBJC_CLASS___IDSUTunDeliveryController,  "sharedInstance",  v10));
  [v9 legacyUTunBTLinkManagerDefaultPeerConnectivityChanged:*(unsigned __int8 *)(a1 + 32)];
}

void sub_100228480(uint64_t a1)
{
  uint64_t v2 = OSLogHandleForTransportCategory("LinkManager");
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(a1 + 32)) {
      id v4 = @"YES";
    }
    else {
      id v4 = @"NO";
    }
    *(_DWORD *)buf = 138412290;
    uint64_t v12 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "_connectivityChangedForDefaultDevice sending legacyUTunBTLinkManagerDefaultPeerCloudConnectivityChanged: %@",  buf,  0xCu);
  }

  uint64_t v6 = os_log_shim_legacy_logging_enabled(v5);
  if ((_DWORD)v6 && _IDSShouldLogTransport(v6))
  {
    id v7 = *(_BYTE *)(a1 + 32) ? @"YES" : @"NO";
    __int128 v10 = v7;
    _IDSLogTransport( @"LinkManager",  @"IDS",  @"_connectivityChangedForDefaultDevice sending legacyUTunBTLinkManagerDefaultPeerCloudConnectivityChanged: %@");
    if (_IDSShouldLog(0LL, @"LinkManager"))
    {
      if (*(_BYTE *)(a1 + 32)) {
        uint64_t v8 = @"YES";
      }
      else {
        uint64_t v8 = @"NO";
      }
      __int128 v10 = (__CFString *)v8;
      _IDSLogV( 0LL,  @"IDSFoundation",  @"LinkManager",  @"_connectivityChangedForDefaultDevice sending legacyUTunBTLinkManagerDefaultPeerCloudConnectivityChanged: %@");
    }
  }

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[IDSUTunDeliveryController sharedInstance]( &OBJC_CLASS___IDSUTunDeliveryController,  "sharedInstance",  v10));
  [v9 legacyUTunBTLinkManagerDefaultPeerCloudConnectivityChanged:*(unsigned __int8 *)(a1 + 32)];
}

void sub_1002287D0(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[IDSUTunDeliveryController sharedInstance](&OBJC_CLASS___IDSUTunDeliveryController, "sharedInstance"));
  [v2 legacyUTunBTLinkManagerDefaultPeerNearbyChanged:*(unsigned __int8 *)(*(void *)(a1 + 32) + 1395)];
}

LABEL_136:
      self->_mayBringUpWiFi = v54;
LABEL_137:

      goto LABEL_138;
    case 'D':
      __int16 v60 = OSLogHandleForTransportCategory("LinkManager");
      uint64_t v61 = (os_log_s *)objc_claimAutoreleasedReturnValue(v60);
      if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v61,  OS_LOG_TYPE_DEFAULT,  "Remote device reported data corruption",  buf,  2u);
      }

      uint64_t v63 = os_log_shim_legacy_logging_enabled(v62);
      if ((_DWORD)v63)
      {
        if (_IDSShouldLogTransport(v63))
        {
          _IDSLogTransport(@"LinkManager", @"IDS", @"Remote device reported data corruption");
        }
      }

      if ((objc_opt_respondsToSelector(v10, "remoteDetectedCorruption") & 1) != 0) {
        -[__CFString remoteDetectedCorruption](v10, "remoteDetectedCorruption");
      }
      goto LABEL_138;
    case 'E':
    case 'F':
LABEL_6:
      context = objc_autoreleasePoolPush();
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[IDSInterfaceAddress interfaceAddressWithTransmittedBytes:length:withLocalInterfaceName:]( &OBJC_CLASS___IDSInterfaceAddress,  "interfaceAddressWithTransmittedBytes:length:withLocalInterfaceName:",  a3->var0 + 1,  a3->var2 - 1,  self->_fixedInterface));
      id v17 = v16;
      if (v16)
      {
        uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v16 address]);

        if (v18)
        {
          id v93 = LODWORD(v12) & 0xFFFFFFFB;
          uint64_t v19 = LODWORD(v12) - 69;
          int v20 = OSLogHandleForTransportCategory("LinkManager");
          int v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
            __int16 v22 = &stru_100912B50;
            *(double *)&id v23 = COERCE_DOUBLE(@"(prefer) ");
            if (v19 >= 2) {
              *(double *)&id v23 = COERCE_DOUBLE(&stru_100912B50);
            }
            *(_DWORD *)buf = 138413058;
            v97 = *(double *)&v23;
            __int16 v98 = 2112;
            if (v93 == 66) {
              __int16 v22 = @"(reply) ";
            }
            unsigned int v99 = v22;
            uint64_t v100 = 2112;
            uint64_t v101 = v17;
            id v102 = 2112;
            uint64_t v103 = v10;
            _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "received remote UDPLink %@interface address %@%@ through %@",  buf,  0x2Au);
          }

          unsigned int v25 = os_log_shim_legacy_logging_enabled(v24);
          if ((_DWORD)v25)
          {
            unsigned int v25 = _IDSShouldLogTransport(v25);
            if ((_DWORD)v25)
            {
              *(double *)&uint64_t v27 = v19 >= 2 ? COERCE_DOUBLE(&stru_100912B50) : COERCE_DOUBLE(@"(prefer) ");
              int v28 = v93 == 66 ? @"(reply) " : &stru_100912B50;
              uint64_t v91 = v17;
              int v92 = v10;
              __int16 v87 = *(double *)&v27;
              uint64_t v89 = v28;
              _IDSLogTransport( @"LinkManager",  @"IDS",  @"received remote UDPLink %@interface address %@%@ through %@");
              unsigned int v25 = _IDSShouldLog(0LL, @"LinkManager");
              if ((_DWORD)v25)
              {
                uint64_t v91 = v17;
                int v92 = v10;
                __int16 v87 = *(double *)&v27;
                uint64_t v89 = v28;
                unsigned int v25 = _IDSLogV( 0LL,  @"IDSFoundation",  @"LinkManager",  @"received remote UDPLink %@interface address %@%@ through %@");
              }
            }
          }

          if (v19 <= 1)
          {
            if (!self->_isCentral || (int v29 = ids_monotonic_time(v25) - self->_rejectedPreferInfraWiFi, v29 >= 8.0))
            {
              uint64_t v34 = 1LL;
LABEL_89:
              uint64_t v68 = objc_opt_class(&OBJC_CLASS___IDSUDPLink, v26);
              isKindOfClass = objc_opt_isKindOfClass(v10, v68);
              int v70 = -[IDSLinkManager _newUDPLinkForDeviceUniqueID:cbuuid:IPVersion:port:]( self,  "_newUDPLinkForDeviceUniqueID:cbuuid:IPVersion:port:",  0,  v11,  [v17 IPVersion],  0);
              uint64_t v71 = v34 ^ 1;
              if (!self->_isCentral) {
                uint64_t v71 = 1;
              }
              if ((v71 & 1) != 0 || !self->_doesDefaultDevicePreferInfraWiFi | isKindOfClass & 1)
              {
                if ((isKindOfClass & 1) != 0 && a3->var19.ss_family) {
                  uint64_t v41 = -[IDSSockAddrWrapper initWithSockAddr:]( objc_alloc(&OBJC_CLASS___IDSSockAddrWrapper),  "initWithSockAddr:",  &a3->var19);
                }
                else {
                  uint64_t v41 = 0LL;
                }
                int v72 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "address", *(void *)&v87, v89, v91, v92));
                id v73 = [v70 setDestinationAddress:v72 isFixedDestination:self->_hasFixedDestination fromAddress:v41];

                if ((v73 & 1) == 0)
                {
                  uint64_t v74 = OSLogHandleForTransportCategory("LinkManager");
                  uint64_t v75 = (os_log_s *)objc_claimAutoreleasedReturnValue(v74);
                  if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl( (void *)&_mh_execute_header,  v75,  OS_LOG_TYPE_DEFAULT,  "received remote UDPLink interface address doesn't match to the source of the packet - ignoring",  buf,  2u);
                  }

                  id v77 = os_log_shim_legacy_logging_enabled(v76);
                  if ((_DWORD)v77)
                  {
                    if (_IDSShouldLogTransport(v77))
                    {
                      _IDSLogTransport( @"LinkManager",  @"IDS",  @"received remote UDPLink interface address doesn't match to the source of the packet - ignoring");
                      if (_IDSShouldLog(0LL, @"LinkManager")) {
                        _IDSLogV( 0LL,  @"IDSFoundation",  @"LinkManager",  @"received remote UDPLink interface address doesn't match to the source of the packet - ignoring");
                      }
                    }
                  }

                  goto LABEL_125;
                }
              }

              else
              {
                uint64_t v41 = 0LL;
              }

              if ((_DWORD)v34)
              {
                doesDefaultDevicePreferInfraWiFi = self->_doesDefaultDevicePreferInfraWiFi;
                if (self->_isCentral)
                {
                  if (self->_doesDefaultDevicePreferInfraWiFi) {
                    goto LABEL_112;
                  }
LABEL_111:
                  -[IDSLinkManager _suspendBTLink:cbuuid:](self, "_suspendBTLink:cbuuid:", v34, v11, *(void *)&v87);
LABEL_112:
                  if ((isKindOfClass & 1) != 0)
                  {
                    if (!self->_isWiFiBroughtUp)
                    {
LABEL_125:

                      goto LABEL_126;
                    }

                    self->_shouldKeepWiFiUp = 1;
                    -[IDSLinkManager _connectivityChangedForDefaultDevice:isCloudConnected:]( self,  "_connectivityChangedForDefaultDevice:isCloudConnected:",  1LL,  self->_lastSentDefaultDeviceCloudConnectivity);
                  }

                  else if (!self->_mayBringUpWiFi)
                  {
                    int v79 = OSLogHandleForTransportCategory("LinkManager");
                    unsigned int v80 = (os_log_s *)objc_claimAutoreleasedReturnValue(v79);
                    if (os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_impl( (void *)&_mh_execute_header,  v80,  OS_LOG_TYPE_DEFAULT,  "will bring up WiFi when losing BTLink",  buf,  2u);
                    }

                    id v82 = os_log_shim_legacy_logging_enabled(v81);
                    if ((_DWORD)v82)
                    {
                      if (_IDSShouldLogTransport(v82))
                      {
                        _IDSLogTransport( @"LinkManager",  @"IDS",  @"will bring up WiFi when losing BTLink");
                        if (_IDSShouldLog(0LL, @"LinkManager")) {
                          _IDSLogV( 0LL,  @"IDSFoundation",  @"LinkManager",  @"will bring up WiFi when losing BTLink");
                        }
                      }
                    }

                    self->_mayBringUpWiFi = 1;
                  }

                  if (v93 != 66) {
                    -[IDSLinkManager _sendUDPLinkInterfaceAddresses:toDeviceID:isRetransmission:isReply:]( self,  "_sendUDPLinkInterfaceAddresses:toDeviceID:isRetransmission:isReply:",  v70,  v11,  0LL,  1LL);
                  }
                  goto LABEL_125;
                }
              }

              else
              {
                doesDefaultDevicePreferInfraWiFi = self->_doesDefaultDevicePreferInfraWiFi;
              }

              if (!doesDefaultDevicePreferInfraWiFi) {
                goto LABEL_112;
              }
              goto LABEL_111;
            }

            uint64_t v30 = OSLogHandleForTransportCategory("LinkManager");
            uint64_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
            if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 134217984;
              v97 = v29;
              _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "Rejected last preferInfraWiFi request %.1f seconds ago - ignoring this preferInfraWiFi request",  buf,  0xCu);
            }

            uint64_t v33 = os_log_shim_legacy_logging_enabled(v32);
            if ((_DWORD)v33)
            {
              if (_IDSShouldLogTransport(v33))
              {
                __int16 v87 = v29;
                _IDSLogTransport( @"LinkManager",  @"IDS",  @"Rejected last preferInfraWiFi request %.1f seconds ago - ignoring this preferInfraWiFi request");
                if (_IDSShouldLog(0LL, @"LinkManager"))
                {
                  __int16 v87 = v29;
                  _IDSLogV( 0LL,  @"IDSFoundation",  @"LinkManager",  @"Rejected last preferInfraWiFi request %.1f seconds ago - ignoring this preferInfraWiFi request");
                }
              }
            }
          }

          uint64_t v34 = 0LL;
          goto LABEL_89;
        }
      }

      __int128 v35 = OSLogHandleForTransportCategory("LinkManager");
      __int128 v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v37 = a3->var2 - 1;
        __int128 v38 = (__CFString *)objc_claimAutoreleasedReturnValue( +[NSData dataWithBytes:length:]( &OBJC_CLASS___NSData,  "dataWithBytes:length:",  a3->var0 + 1,  v37));
        *(_DWORD *)buf = 134218242;
        v97 = *(double *)&v37;
        __int16 v98 = 2112;
        unsigned int v99 = v38;
        _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "received invalid interface address bytes(%ld) = %@",  buf,  0x16u);
      }

      __int128 v40 = os_log_shim_legacy_logging_enabled(v39);
      if ((_DWORD)v40)
      {
        if (_IDSShouldLogTransport(v40))
        {
          uint64_t v88 = a3->var2 - 1;
          uint64_t v90 = (void *)objc_claimAutoreleasedReturnValue( +[NSData dataWithBytes:length:]( &OBJC_CLASS___NSData,  "dataWithBytes:length:",  a3->var0 + 1,  v88));
          _IDSLogTransport( @"LinkManager",  @"IDS",  @"received invalid interface address bytes(%ld) = %@");

          if (_IDSShouldLog(0LL, @"LinkManager"))
          {
            uint64_t v41 = (IDSSockAddrWrapper *)objc_claimAutoreleasedReturnValue( +[NSData dataWithBytes:length:]( &OBJC_CLASS___NSData,  "dataWithBytes:length:",  a3->var0 + 1,  a3->var2 - 1,  v88,  v90));
            _IDSLogV( 0LL,  @"IDSFoundation",  @"LinkManager",  @"received invalid interface address bytes(%ld) = %@");
LABEL_126:
          }
        }
      }

      objc_autoreleasePoolPop(context);
LABEL_138:

      return;
    default:
      id v56 = OSLogHandleForTransportCategory("LinkManager");
      uint64_t v57 = (os_log_s *)objc_claimAutoreleasedReturnValue(v56);
      if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        v97 = v12;
        _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "unknown LMCommand %lu received", buf, 0xCu);
      }

      BOOL v59 = os_log_shim_legacy_logging_enabled(v58);
      if ((_DWORD)v59)
      {
        if (_IDSShouldLogTransport(v59))
        {
          _IDSLogTransport(@"LinkManager", @"IDS", @"unknown LMCommand %lu received");
        }
      }

      goto LABEL_138;
  }

LABEL_108:
    self->_addressRetransmissionInterval = 0.0;
    goto LABEL_109;
  }

  if (v6) {
    goto LABEL_46;
  }
  uint64_t v19 = ids_monotonic_time(v14);
  int v20 = v19;
  if (v7)
  {
    [v10 lastDestinationSent];
    __int16 v22 = v21;
    [v10 lastDestinationReceived];
    if (v22 <= v23)
    {
      int v72 = OSLogHandleForTransportCategory("LinkManager");
      id v73 = (os_log_s *)objc_claimAutoreleasedReturnValue(v72);
      if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v73,  OS_LOG_TYPE_DEFAULT,  "already received remote interface address - stop retransmitting local interface address",  buf,  2u);
      }

      uint64_t v75 = os_log_shim_legacy_logging_enabled(v74);
      if ((_DWORD)v75)
      {
        if (_IDSShouldLogTransport(v75))
        {
          _IDSLogTransport( @"LinkManager",  @"IDS",  @"already received remote interface address - stop retransmitting local interface address");
          if (_IDSShouldLog(0LL, @"LinkManager")) {
            _IDSLogV( 0LL,  @"IDSFoundation",  @"LinkManager",  @"already received remote interface address - stop retransmitting local interface address");
          }
        }
      }

      goto LABEL_108;
    }

    if (self->_isDefaultDeviceUsingBTLink) {
      int v24 = 30.0;
    }
    else {
      int v24 = 60.0;
    }
    [v10 lastDestinationSent];
    if (v20 - v25 > v24)
    {
      id v26 = OSLogHandleForTransportCategory("LinkManager");
      uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        __int16 v87 = v24;
        _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "didn't receive remote interface address for last %.0fs - giving up!",  buf,  0xCu);
      }

      int v29 = os_log_shim_legacy_logging_enabled(v28);
      if ((_DWORD)v29)
      {
        if (_IDSShouldLogTransport(v29))
        {
          unsigned int v80 = v24;
          _IDSLogTransport( @"LinkManager",  @"IDS",  @"didn't receive remote interface address for last %.0fs - giving up!");
          if (_IDSShouldLog(0LL, @"LinkManager"))
          {
            unsigned int v80 = v24;
            _IDSLogV( 0LL,  @"IDSFoundation",  @"LinkManager",  @"didn't receive remote interface address for last %.0fs - giving up!");
          }
        }
      }

      if (self->_isCentral)
      {
        Value = 0LL;
        if (v13 && self->_deviceIDToCurrentLink) {
          Value = (void *)CFDictionaryGetValue((CFDictionaryRef)self->_deviceIDToCurrentLink, v13);
        }
        uint64_t v31 = Value;
        uint64_t v33 = objc_opt_class(&OBJC_CLASS___IDSUDPLink, v32);
        if ((objc_opt_isKindOfClass(v31, v33) & 1) != 0)
        {
          uint64_t v34 = OSLogHandleForTransportCategory("LinkManager");
          __int128 v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
          if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            __int16 v87 = *(double *)&v31;
            _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEFAULT,  "setDestinationAddress nil for %@.",  buf,  0xCu);
          }

          unsigned int v37 = os_log_shim_legacy_logging_enabled(v36);
          if ((_DWORD)v37)
          {
            if (_IDSShouldLogTransport(v37))
            {
              unsigned int v80 = *(double *)&v31;
              _IDSLogTransport(@"LinkManager", @"IDS", @"setDestinationAddress nil for %@.");
              if (_IDSShouldLog(0LL, @"LinkManager"))
              {
                unsigned int v80 = *(double *)&v31;
                _IDSLogV(0LL, @"IDSFoundation", @"LinkManager", @"setDestinationAddress nil for %@.");
              }
            }
          }

          objc_msgSend( v31,  "setDestinationAddress:isFixedDestination:fromAddress:",  0,  self->_hasFixedDestination,  0,  *(void *)&v80);
        }

        -[IDSLinkManager _setBestLinkToCurrent:](self, "_setBestLinkToCurrent:", v13, *(void *)&v80);
      }

      -[IDSLinkManager _bringUpWiFi:](self, "_bringUpWiFi:", 0LL, *(void *)&v80);
      self->_addressRetransmissionInterval = 0.0;
      if (self->_doesDefaultDevicePreferInfraWiFi) {
        -[IDSLinkManager _suspendBTLink:cbuuid:](self, "_suspendBTLink:cbuuid:", 0LL, v12);
      }
      goto LABEL_109;
    }

  __break(1u);
LABEL_109:
  __break(1u);
LABEL_110:
  __break(1u);
}

    v143 = (v150 - 1) & v150;
    uint64_t v145 = __clz(__rbit64(v150)) + (v140 << 6);
    goto LABEL_93;
  }

id sub_10022A07C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _sendUDPLinkInterfaceAddresses:*(void *)(a1 + 40) toDeviceID:*(void *)(a1 + 48) isRetransmission:1 isReply:0];
}

void sub_10022AED4(uint64_t a1)
{
  uint64_t v2 = kIDSDefaultPairedDeviceID;
  id v3 = [*(id *)(a1 + 32) _suspendBTLink:0 cbuuid:kIDSDefaultPairedDeviceID];
  if (*(_BYTE *)(*(void *)(a1 + 32) + 48LL))
  {
    *(double *)(*(void *)(a1 + 32) + 128LL) = ids_monotonic_time(v3);
    id v4 = [*(id *)(a1 + 32) _newUDPLinkForDeviceUniqueID:0 cbuuid:v2 IPVersion:0 port:0];
    if (v4)
    {
      id v5 = v4;
      [*(id *)(a1 + 32) _sendUDPLinkInterfaceAddresses:v4 toDeviceID:v2 isRetransmission:0 isReply:0];
      id v4 = v5;
    }
  }

void sub_10022AF7C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_DWORD *)(v2 + 56) <= *(_DWORD *)(a1 + 40))
  {
    if (*(_BYTE *)(a1 + 44))
    {
      char v10 = *(_BYTE *)(v2 + 48);
      if (v10) {
        char v10 = *(void *)(v2 + 1408) != 0LL;
      }
      *(_BYTE *)(v2 + 52) = v10;
      ++*(_DWORD *)(*(void *)(a1 + 32) + 60LL);
      uint64_t v11 = *(void *)(a1 + 32);
      int v12 = *(_DWORD *)(v11 + 60);
      v44[0] = _NSConcreteStackBlock;
      v44[1] = 3221225472LL;
      v44[2] = sub_10022B604;
      v44[3] = &unk_1008F78D8;
      void v44[4] = v11;
      int v45 = v12;
      uint64_t v13 = objc_retainBlock(v44);
      uint64_t v14 = *(void *)(a1 + 32);
      if (*(_BYTE *)(v14 + 48))
      {
        if (*(_BYTE *)(v14 + 1392))
        {
          uint64_t v15 = OSLogHandleForTransportCategory("AutoJoin");
          uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
            id v17 = (&off_1009B76D8)[*(void *)(*(void *)(a1 + 32) + 144LL)];
            *(_DWORD *)buf = 136315138;
            uint64_t v47 = v17;
            _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Trying to bring up WiFi per preferInfraWiFi request: currentWiFiAutoJoinStatus = %s",  buf,  0xCu);
          }

          uint64_t v19 = os_log_shim_legacy_logging_enabled(v18);
          if ((_DWORD)v19)
          {
            if (_IDSShouldLogTransport(v19))
            {
              __int128 v36 = (&off_1009B76D8)[*(void *)(*(void *)(a1 + 32) + 144LL)];
              _IDSLogTransport( @"AutoJoin",  @"IDS",  @"Trying to bring up WiFi per preferInfraWiFi request: currentWiFiAutoJoinStatus = %s");
              if (_IDSShouldLog(0LL, @"AutoJoin"))
              {
                __int128 v36 = (&off_1009B76D8)[*(void *)(*(void *)(a1 + 32) + 144LL)];
                _IDSLogV( 0LL,  @"IDSFoundation",  @"AutoJoin",  @"Trying to bring up WiFi per preferInfraWiFi request: currentWiFiAutoJoinStatus = %s");
              }
            }
          }
        }

        uint64_t v14 = *(void *)(a1 + 32);
        if (!*(_BYTE *)(v14 + 120))
        {
          [*(id *)(a1 + 32) _createWiFiAssociationPowerAssertion:60.0];
          uint64_t v14 = *(void *)(a1 + 32);
        }
      }

      if (*(_BYTE *)(v14 + 48) && *(_BYTE *)(v14 + 1392) && !*(_BYTE *)(v14 + 120) && *(void *)(v14 + 112))
      {
        id location = (id)0xAAAAAAAAAAAAAAAALL;
        objc_initWeak(&location, (id)v14);
        v41[0] = _NSConcreteStackBlock;
        v41[1] = 3221225472LL;
        v41[2] = sub_10022B8A8;
        v41[3] = &unk_1008F8A78;
        objc_copyWeak(&v42, &location);
        id v26 = [v41 copy];
        uint64_t v27 = *(void *)(a1 + 32);
        int v28 = *(void **)(v27 + 136);
        *(void *)(v27 + cut_arc_os_release(v1 - 136) = v26;

        uint64_t v29 = OSLogHandleForTransportCategory("AutoJoin");
        uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v31 = *(void **)(*(void *)(a1 + 32) + 176LL);
          *(_DWORD *)buf = 134217984;
          uint64_t v47 = v31;
          _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "Setting AutoJoin tracking timer for %.1fs",  buf,  0xCu);
        }

        uint64_t v33 = os_log_shim_legacy_logging_enabled(v32);
        if ((_DWORD)v33)
        {
          if (_IDSShouldLogTransport(v33))
          {
            __int128 v36 = *(char **)(*(void *)(a1 + 32) + 176LL);
            _IDSLogTransport(@"AutoJoin", @"IDS", @"Setting AutoJoin tracking timer for %.1fs");
            if (_IDSShouldLog(0LL, @"AutoJoin"))
            {
              __int128 v36 = *(char **)(*(void *)(a1 + 32) + 176LL);
              _IDSLogV( 0LL,  @"IDSFoundation",  @"AutoJoin",  @"Setting AutoJoin tracking timer for %.1fs");
            }
          }
        }

        ++*(_DWORD *)(*(void *)(a1 + 32) + 124LL);
        uint64_t v34 = *(void *)(a1 + 32);
        int v35 = *(_DWORD *)(v34 + 124);
        v39[0] = _NSConcreteStackBlock;
        v39[1] = 3221225472LL;
        v39[2] = sub_10022BA04;
        v39[3] = &unk_1008FE738;
        v39[4] = v34;
        int v40 = v35;
        IDSTransportThreadAddBlockAfter(v39, *(double *)(v34 + 176));
        objc_destroyWeak(&v42);
        objc_destroyWeak(&location);
      }

      else
      {
        dispatch_time_t v20 = dispatch_time(0LL, 60000000000LL);
        uint64_t v22 = im_primary_queue(v20, v21);
        id v23 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v22);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472LL;
        block[2] = sub_10022BD54;
        block[3] = &unk_1008F6330;
        __int128 v38 = v13;
        dispatch_after(v20, v23, block);
      }

      objc_msgSend(*(id *)(a1 + 32), "_bringUpWiFi:", 1, v36);
    }

    else
    {
      [(id)v2 _bringUpWiFi:0];
    }

    if (*(_BYTE *)(a1 + 45))
    {
      uint64_t v24 = kIDSDefaultPairedDeviceID;
      id v25 = [*(id *)(a1 + 32) _newUDPLinkForDeviceUniqueID:0 cbuuid:kIDSDefaultPairedDeviceID IPVersion:0 port:0];
      if (v25) {
        [*(id *)(a1 + 32) _sendUDPLinkInterfaceAddresses:v25 toDeviceID:v24 isRetransmission:0 isReply:0];
      }
    }
  }

  else
  {
    uint64_t v3 = OSLogHandleForTransportCategory("LinkManager");
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = @"YES";
      int v6 = *(unsigned __int8 *)(a1 + 45);
      if (*(_BYTE *)(a1 + 44)) {
        id v7 = @"YES";
      }
      else {
        id v7 = @"NO";
      }
      *(_DWORD *)buf = 138412802;
      if (!v6) {
        id v5 = @"NO";
      }
      uint64_t v47 = (void *)v7;
      __int16 v48 = 2112;
      uint64_t v49 = v5;
      __int16 v50 = 2048;
      uint64_t v51 = 0x4024000000000000LL;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "_startUDPLinkHandshakeForDefaultDevice ignoring stale scheduled handshake %@ %@ %.1f seconds ago",  buf,  0x20u);
    }

    uint64_t v9 = os_log_shim_legacy_logging_enabled(v8);
    if ((_DWORD)v9 && _IDSShouldLogTransport(v9))
    {
      _IDSLogTransport( @"LinkManager",  @"IDS",  @"_startUDPLinkHandshakeForDefaultDevice ignoring stale scheduled handshake %@ %@ %.1f seconds ago");
      if (_IDSShouldLog(0LL, @"LinkManager")) {
        _IDSLogV( 0LL,  @"IDSFoundation",  @"LinkManager",  @"_startUDPLinkHandshakeForDefaultDevice ignoring stale scheduled handshake %@ %@ %.1f seconds ago");
      }
    }
  }

void sub_10022B584( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, id location)
{
}

uint64_t sub_10022B604(uint64_t a1, uint64_t a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_10022B660;
  v3[3] = &unk_1008FE738;
  void v3[4] = *(void *)(a1 + 32);
  int v4 = *(_DWORD *)(a1 + 40);
  return IDSTransportThreadAddBlock(v3, a2);
}

id sub_10022B660(uint64_t a1)
{
  uint64_t v2 = *(_DWORD **)(a1 + 32);
  if (v2[15] <= *(_DWORD *)(a1 + 40))
  {
    id result = [v2 _clearWiFiAssociationPowerAssertion];
    if (!*(_BYTE *)(*(void *)(a1 + 32) + 52LL))
    {
      uint64_t v7 = OSLogHandleForTransportCategory("LinkManager");
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        uint64_t v13 = 0x404E000000000000LL;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "WiFi was brought up %.1f seconds ago but still didn't get an IP - Bring it back down",  buf,  0xCu);
      }

      uint64_t v10 = os_log_shim_legacy_logging_enabled(v9);
      if ((_DWORD)v10)
      {
        if (_IDSShouldLogTransport(v10))
        {
          uint64_t v11 = 0x404E000000000000LL;
          _IDSLogTransport( @"LinkManager",  @"IDS",  @"WiFi was brought up %.1f seconds ago but still didn't get an IP - Bring it back down");
          if (_IDSShouldLog(0LL, @"LinkManager"))
          {
            uint64_t v11 = 0x404E000000000000LL;
            _IDSLogV( 0LL,  @"IDSFoundation",  @"LinkManager",  @"WiFi was brought up %.1f seconds ago but still didn't get an IP - Bring it back down");
          }
        }
      }

      return objc_msgSend(*(id *)(a1 + 32), "_bringUpWiFi:", 0, v11);
    }
  }

  else
  {
    uint64_t v3 = OSLogHandleForTransportCategory("LinkManager");
    int v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      uint64_t v13 = 0x404E000000000000LL;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "WiFi was brought up %.1f seconds ago but it was brought up again later - ignoring this one",  buf,  0xCu);
    }

    id result = (id)os_log_shim_legacy_logging_enabled(v5);
    if ((_DWORD)result)
    {
      id result = (id)_IDSShouldLogTransport(result);
      if ((_DWORD)result)
      {
        _IDSLogTransport( @"LinkManager",  @"IDS",  @"WiFi was brought up %.1f seconds ago but it was brought up again later - ignoring this one");
        id result = (id)_IDSShouldLog(0LL, @"LinkManager");
        if ((_DWORD)result) {
          return (id)_IDSLogV( 0LL,  @"IDSFoundation",  @"LinkManager",  @"WiFi was brought up %.1f seconds ago but it was brought up again later - ignoring this one");
        }
      }
    }
  }

  return result;
}

void sub_10022B8A8(uint64_t a1)
{
  id WeakRetained = (double *)objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = OSLogHandleForTransportCategory("AutoJoin");
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "WiFi failed to associate and connect - reject preferInfraWiFi request",  v8,  2u);
  }

  uint64_t v5 = os_log_shim_legacy_logging_enabled(v4);
  if ((_DWORD)v5)
  {
    if (_IDSShouldLogTransport(v5))
    {
      _IDSLogTransport( @"AutoJoin",  @"IDS",  @"WiFi failed to associate and connect - reject preferInfraWiFi request");
      if (_IDSShouldLog(0LL, @"AutoJoin")) {
        _IDSLogV( 0LL,  @"IDSFoundation",  @"AutoJoin",  @"WiFi failed to associate and connect - reject preferInfraWiFi request");
      }
    }
  }

  uint64_t v6 = kIDSDefaultPairedDeviceID;
  WeakRetained[16] = ids_monotonic_time([WeakRetained _suspendBTLink:0 cbuuid:kIDSDefaultPairedDeviceID]);
  id v7 = [WeakRetained _newUDPLinkForDeviceUniqueID:0 cbuuid:v6 IPVersion:0 port:0];
  if (v7) {
    [WeakRetained _sendUDPLinkInterfaceAddresses:v7 toDeviceID:v6 isRetransmission:0 isReply:0];
  }
}

void sub_10022BA04(uint64_t a1)
{
  if (*(_DWORD *)(*(void *)(a1 + 32) + 124LL) <= *(_DWORD *)(a1 + 40))
  {
    uint64_t v7 = OSLogHandleForTransportCategory("AutoJoin");
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 176LL);
      *(_DWORD *)buf = 134217984;
      uint64_t v20 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "WiFi started associating %.1f seconds ago",  buf,  0xCu);
    }

    uint64_t v11 = os_log_shim_legacy_logging_enabled(v10);
    if ((_DWORD)v11)
    {
      if (_IDSShouldLogTransport(v11))
      {
        _IDSLogTransport(@"AutoJoin", @"IDS", @"WiFi started associating %.1f seconds ago");
      }
    }

    uint64_t v12 = *(void *)(a1 + 32);
    if (*(_BYTE *)(v12 + 120) && *(_BYTE *)(v12 + 1396))
    {
      uint64_t v13 = OSLogHandleForTransportCategory("AutoJoin");
      uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "WiFi associated already and has connected",  buf,  2u);
      }

      uint64_t v16 = os_log_shim_legacy_logging_enabled(v15);
      if ((_DWORD)v16)
      {
        if (_IDSShouldLogTransport(v16))
        {
          _IDSLogTransport(@"AutoJoin", @"IDS", @"WiFi associated already and has connected");
        }
      }
    }

    else if (*(_BYTE *)(v12 + 1392) && *(void *)(v12 + 136))
    {
      [(id)v12 _clearWiFiAssociationPowerAssertion];
      (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 136LL) + 16LL))(*(void *)(*(void *)(a1 + 32) + 136LL));
    }

    uint64_t v17 = *(void *)(a1 + 32);
    uint64_t v18 = *(void **)(v17 + 136);
    *(void *)(v17 + cut_arc_os_release(v1 - 136) = 0LL;
  }

  else
  {
    uint64_t v2 = OSLogHandleForTransportCategory("AutoJoin");
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 176LL);
      *(_DWORD *)buf = 134217984;
      uint64_t v20 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "WiFI association started %.1f seconds ago but it was canceled already - ignoring this one",  buf,  0xCu);
    }

    uint64_t v6 = os_log_shim_legacy_logging_enabled(v5);
    if ((_DWORD)v6 && _IDSShouldLogTransport(v6))
    {
      _IDSLogTransport( @"AutoJoin",  @"IDS",  @"WiFI association started %.1f seconds ago but it was canceled already - ignoring this one");
      if (_IDSShouldLog(0LL, @"AutoJoin")) {
        _IDSLogV( 0LL,  @"IDSFoundation",  @"AutoJoin",  @"WiFI association started %.1f seconds ago but it was canceled already - ignoring this one");
      }
    }
  }

uint64_t sub_10022BD54(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_10022BD60(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

LABEL_52:
}

    -[IDSPhoneNumberValidationStateMachine _cancelScheduledHeartbeat](self, "_cancelScheduledHeartbeat");
    return;
  }

  if (+[IDSRegistrationController isBuddyBlockingRegistration]( &OBJC_CLASS___IDSRegistrationController,  "isBuddyBlockingRegistration"))
  {
    id v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog sms](&OBJC_CLASS___IMRGLog, "sms"));
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "Need to request user permission for SMS, but system setup is in progress -- deferring SMS identification",  buf,  2u);
    }

    uint64_t v9 = 60.0;
    goto LABEL_18;
  }

  if (self->_isSMSWarningUp)
  {
    id v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog sms](&OBJC_CLASS___IMRGLog, "sms"));
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "Phone Number Validation Request Notification request is up",  buf,  2u);
    }
  }

  else
  {
    self->_isSMSWarningUp = 1;
    int v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog sms](&OBJC_CLASS___IMRGLog, "sms"));
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEFAULT,  "Should notify about Phone Number Validation requests for this carrier",  buf,  2u);
    }

    v41[0] = _NSConcreteStackBlock;
    v41[1] = 3221225472LL;
    v41[2] = sub_100261608;
    v41[3] = &unk_1008F7948;
    void v41[4] = self;
    -[IDSPhoneNumberValidationStateMachine _requestUserConsentForPhoneNumberValidationWithCompletion:]( self,  "_requestUserConsentForPhoneNumberValidationWithCompletion:",  v41);
  }

  __break(1u);
  return result;
}

    swift_release(v73);
    return;
  }

NSString *__cdecl sub_10022D5E8( id a1, NSString *a2, unsigned int a3, NSString *a4, int64_t a5, unsigned __int16 a6, unint64_t a7, unsigned __int16 a8, unsigned int a9, NSData *a10, BOOL a11, BOOL a12, int a13, int a14)
{
  unsigned int v28 = a6;
  uint64_t v15 = *(void *)&a3;
  uint64_t v17 = a10;
  uint64_t v18 = a4;
  uint64_t v19 = a2;
  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(+[IDSQuickRelayAllocator sharedInstance](&OBJC_CLASS___IDSQuickRelayAllocator, "sharedInstance"));
  HIDWORD(v24) = a13;
  LODWORD(v25) = a14;
  LOWORD(v24) = __PAIR16__(a12, a11);
  HIDWORD(v23) = a9;
  LOWORD(v23) = a8;
  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( v20,  "getAdditionalAllocationForAddress:selfAddress:relaySessionID:allocateType:qrReason:previousTime:prev iousError:previousRelayIP:previousAccessToken:requestSelfAllocation:isSessionIDRemoteDeviceID:withPr eferredRemoteInterface:withPreferredLocalInterface:",  v19,  v15,  v18,  a5,  v28,  a7,  v23,  v17,  v24,  v25));

  return (NSString *)v21;
}

void sub_10022D6DC( id a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, unint64_t a6, NSString *a7, NSString *a8, BOOL a9)
{
  uint64_t v11 = *(void *)&a5;
  uint64_t v14 = *(void *)&a2;
  uint64_t v15 = a8;
  uint64_t v16 = a7;
  id v18 = (id)objc_claimAutoreleasedReturnValue(+[IDSQuickRelayAllocator sharedInstance](&OBJC_CLASS___IDSQuickRelayAllocator, "sharedInstance"));
  LOBYTE(v17) = a9;
  [v18 reportAWDAllocatorEvent:v14 relayProviderType:a3 transport:a4 localRAT:v11 duration:a6 idsSessionID:v16 reportingDataBlob:v15 isInitiator:v17];
}

void sub_10022D790(id a1, NSString *a2, NSString *a3)
{
  uint64_t v4 = a3;
  uint64_t v5 = a2;
  id v6 = (id)objc_claimAutoreleasedReturnValue(+[IDSQuickRelayAllocator sharedInstance](&OBJC_CLASS___IDSQuickRelayAllocator, "sharedInstance"));
  [v6 startKeepAliveTimer:v5 relaySessionID:v4];
}

void sub_10022D7FC(id a1, NSString *a2, NSString *a3)
{
  uint64_t v4 = a3;
  uint64_t v5 = a2;
  id v6 = (id)objc_claimAutoreleasedReturnValue(+[IDSQuickRelayAllocator sharedInstance](&OBJC_CLASS___IDSQuickRelayAllocator, "sharedInstance"));
  [v6 stopKeepAliveTimer:v5 relaySessionID:v4];
}

void sub_10022DF34(uint64_t a1)
{
  uint64_t v2 = (void *)IMWeakLinkClass(@"CUTWiFiManager", @"CommonUtilities");
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 sharedInstance]);
  [v3 addWoWClient:*(void *)(a1 + 32)];

  id v4 = (id)objc_claimAutoreleasedReturnValue([v2 sharedInstance]);
  [v4 addWiFiAutoAssociationClientToken:@"IDSLinkManager_WiFi"];
}

void sub_10022DFB0(uint64_t a1)
{
  uint64_t v2 = (void *)IMWeakLinkClass(@"CUTWiFiManager", @"CommonUtilities");
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 sharedInstance]);
  [v3 removeWoWClient:*(void *)(a1 + 32)];

  id v4 = (id)objc_claimAutoreleasedReturnValue([v2 sharedInstance]);
  [v4 removeWiFiAutoAssociationClientToken:@"IDSLinkManager_WiFi"];
}

void sub_10022E30C(id a1, id a2, id a3, BOOL *a4)
{
  id v4 = a3;
  if ((objc_opt_respondsToSelector(v4, "invalidate") & 1) != 0) {
    [v4 invalidate];
  }
}

void sub_10022E8B8(uint64_t a1, void *a2, void *a3)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_1002408B8;
  v7[3] = &unk_1008F8800;
  id v8 = a3;
  id v9 = a2;
  id v4 = v9;
  id v5 = v8;
  IDSTransportThreadAddBlock(v7, v6);
}

LABEL_129:
    ++self->_totalPacketsDropped;
    uint64_t v74 = OSLogHandleForIDSCategory("LinkManager");
    uint64_t v75 = (os_log_s *)objc_claimAutoreleasedReturnValue(v74);
    if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v85 = (int64_t)v10;
      _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEFAULT, "dropped data for device %@", buf, 0xCu);
    }

    if (!a3->var7) {
      -[IDSLinkManager startLinkForDeviceUniqueID:cbuuid:](self, "startLinkForDeviceUniqueID:cbuuid:", v8, v10);
    }
LABEL_126:
    _IDSLinkPacketBufferRelease( "/Library/Caches/com.apple.xbs/Sources/IdentityServices_Swift/IDSAgent/IDSLinkManager.m",  2183LL,  a3);
    uint64_t v20 = 6LL;
LABEL_127:

    goto LABEL_128;
  }

  ++self->_totalPacketsDropped;
  uint64_t v25 = OSLogHandleForTransportCategory("LinkManager");
  id v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v27 = a3->var2;
    unsigned int v28 = self->_currentDefaultDeviceLinkType;
    totalPacketsDropped = self->_totalPacketsDropped;
    *(_DWORD *)buf = 134218496;
    uint64_t v85 = v27;
    uint64_t v86 = 1024;
    *(_DWORD *)__int16 v87 = v28;
    *(_WORD *)&v87[4] = 2048;
    *(void *)&v87[6] = totalPacketsDropped;
    _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "dropping a packet (%zdB) over link type (%d), #dropped: %llu.",  buf,  0x1Cu);
  }

  uint64_t v31 = os_log_shim_legacy_logging_enabled(v30);
  if ((_DWORD)v31)
  {
    if (_IDSShouldLogTransport(v31))
    {
      _IDSLogTransport( @"LinkManager",  @"IDS",  @"dropping a packet (%zdB) over link type (%d), #dropped: %llu.");
      if (_IDSShouldLog(0LL, @"LinkManager")) {
        _IDSLogV( 0LL,  @"IDSFoundation",  @"LinkManager",  @"dropping a packet (%zdB) over link type (%d), #dropped: %llu.");
      }
    }
  }

  _IDSLinkPacketBufferRelease( "/Library/Caches/com.apple.xbs/Sources/IdentityServices_Swift/IDSAgent/IDSLinkManager.m",  2097LL,  a3);
  uint64_t v20 = 6LL;
LABEL_128:

  return v20;
}

void sub_100230574(uint64_t a1)
{
  uint64_t v2 = OSLogHandleForTransportCategory("LinkManager");
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    uint64_t v10 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "enableConnectionForDefaultPairedDevice YES for cbuuid %@.",  buf,  0xCu);
  }

  uint64_t v6 = os_log_shim_legacy_logging_enabled(v5);
  if ((_DWORD)v6)
  {
    if (_IDSShouldLogTransport(v6))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      _IDSLogTransport( @"LinkManager",  @"IDS",  @"enableConnectionForDefaultPairedDevice YES for cbuuid %@.");
      if (_IDSShouldLog(0LL, @"LinkManager"))
      {
        uint64_t v8 = *(void *)(a1 + 32);
        _IDSLogV( 0LL,  @"IDSFoundation",  @"LinkManager",  @"enableConnectionForDefaultPairedDevice YES for cbuuid %@.");
      }
    }
  }

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[IDSUTunDeliveryController sharedInstance]( &OBJC_CLASS___IDSUTunDeliveryController,  "sharedInstance",  v8));
  [v7 enableConnectionForDefaultPairedDevice:1];
}

void sub_100230B5C(uint64_t a1)
{
  uint64_t v2 = OSLogHandleForTransportCategory("LinkManager");
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    uint64_t v10 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "enableConnectionForDefaultPairedDevice NO for cbuuid %@.",  buf,  0xCu);
  }

  uint64_t v6 = os_log_shim_legacy_logging_enabled(v5);
  if ((_DWORD)v6)
  {
    if (_IDSShouldLogTransport(v6))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      _IDSLogTransport( @"LinkManager",  @"IDS",  @"enableConnectionForDefaultPairedDevice NO for cbuuid %@.");
      if (_IDSShouldLog(0LL, @"LinkManager"))
      {
        uint64_t v8 = *(void *)(a1 + 32);
        _IDSLogV( 0LL,  @"IDSFoundation",  @"LinkManager",  @"enableConnectionForDefaultPairedDevice NO for cbuuid %@.");
      }
    }
  }

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[IDSUTunDeliveryController sharedInstance]( &OBJC_CLASS___IDSUTunDeliveryController,  "sharedInstance",  v8));
  [v7 enableConnectionForDefaultPairedDevice:0];
}

uint64_t sub_10023209C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  0LL,  *(void *)(a1 + 32));
}

uint64_t sub_100232424(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_100232E8C(int8x16_t *a1)
{
  uint64_t v2 = OSLogHandleForTransportCategory("LinkManager");
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = a1[2].i64[0];
    *(_DWORD *)buf = 138412290;
    uint64_t v23 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "start allocate request for %@.", buf, 0xCu);
  }

  uint64_t v6 = os_log_shim_legacy_logging_enabled(v5);
  if ((_DWORD)v6)
  {
    if (_IDSShouldLogTransport(v6))
    {
      uint64_t v14 = a1[2].i64[0];
      _IDSLogTransport(@"LinkManager", @"IDS", @"start allocate request for %@.");
      if (_IDSShouldLog(0LL, @"LinkManager"))
      {
        uint64_t v14 = a1[2].i64[0];
        _IDSLogV(0LL, @"IDSFoundation", @"LinkManager", @"start allocate request for %@.");
      }
    }
  }

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[IDSQuickRelayAllocator sharedInstance](&OBJC_CLASS___IDSQuickRelayAllocator, "sharedInstance", v14));
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 setupNewAllocationToDevice:a1[2].i64[0] options:0 connectReadyHandler:0]);

  if (v8)
  {
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    v17[2] = sub_100233234;
    void v17[3] = &unk_1008F7900;
    id v9 = v17;
    int8x16_t v15 = a1[2];
    id v10 = (id)v15.i64[0];
    int8x16_t v18 = vextq_s8(v15, v15, 8uLL);
    id v19 = v8;
    IDSTransportThreadAddBlock(v17, v11);
  }

  else
  {
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472LL;
    v20[2] = sub_1002330C4;
    v20[3] = &unk_1008F8800;
    id v9 = v20;
    int8x16_t v16 = a1[2];
    id v12 = (id)v16.i64[0];
    int8x16_t v21 = vextq_s8(v16, v16, 8uLL);
    IDSTransportThreadAddBlock(v20, v13);
  }
}

uint64_t sub_1002330C4(uint64_t a1)
{
  Value = *(const __CFDictionary **)(*(void *)(a1 + 32) + 88LL);
  if (Value)
  {
    uint64_t v3 = *(const void **)(a1 + 40);
    if (v3) {
      Value = (const __CFDictionary *)CFDictionaryGetValue(Value, v3);
    }
    else {
      Value = 0LL;
    }
  }

  if (-[__CFDictionary BOOLValue](Value, "BOOLValue")) {
    CFDictionarySetValue( *(CFMutableDictionaryRef *)(*(void *)(a1 + 32) + 88LL),  *(const void **)(a1 + 40),  &__kCFBooleanFalse);
  }
  uint64_t v4 = OSLogHandleForTransportCategory("LinkManager");
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 40);
    *(_DWORD *)buf = 138412290;
    uint64_t v10 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "allocate request failed for %@.", buf, 0xCu);
  }

  uint64_t result = os_log_shim_legacy_logging_enabled(v7);
  if ((_DWORD)result)
  {
    uint64_t result = _IDSShouldLogTransport(result);
    if ((_DWORD)result)
    {
      _IDSLogTransport(@"LinkManager", @"IDS", @"allocate request failed for %@.");
      uint64_t result = _IDSShouldLog(0LL, @"LinkManager");
      if ((_DWORD)result) {
        return _IDSLogV(0LL, @"IDSFoundation", @"LinkManager", @"allocate request failed for %@.");
      }
    }
  }

  return result;
}

id sub_100233234(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _addAllocateRequestForDevice:*(void *)(a1 + 40) requestID:*(void *)(a1 + 48)];
}

uint64_t sub_1002343AC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

uint64_t sub_100234624(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10023B0C0(uint64_t a1)
{
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v10;
    do
    {
      uint64_t v6 = 0LL;
      do
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void *)(*((void *)&v9 + 1) + 8LL * (void)v6);
        id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 1376LL));
        objc_msgSend( WeakRetained,  "link:didConnectForDeviceUniqueID:cbuuid:",  *(void *)(a1 + 48),  0,  v7,  (void)v9);

        uint64_t v6 = (char *)v6 + 1;
      }

      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }

    while (v4);
  }
}

void sub_10023B570(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[IDSUTunDeliveryController sharedInstance](&OBJC_CLASS___IDSUTunDeliveryController, "sharedInstance"));
  [v2 defaultPeerMagnetIndicationOfAwakeStateChanged:*(unsigned __int8 *)(a1 + 32)];
}

void sub_10023BF30(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[IDSUTunDeliveryController sharedInstance](&OBJC_CLASS___IDSUTunDeliveryController, "sharedInstance"));
  [v2 peerCloudConnectivityChanged:*(void *)(a1 + 32) isCloudConnected:1];
}

void sub_10023C188(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[IDSUTunDeliveryController sharedInstance](&OBJC_CLASS___IDSUTunDeliveryController, "sharedInstance"));
  [v2 peerCloudConnectivityChanged:*(void *)(a1 + 32) isCloudConnected:0];
}

void sub_10023C4CC(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[IDSUTunDeliveryController sharedInstance](&OBJC_CLASS___IDSUTunDeliveryController, "sharedInstance"));
  [v2 peerCloudConnectivityChanged:*(void *)(a1 + 32) isCloudConnected:0];
}

void sub_10023E404(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = objc_opt_class(&OBJC_CLASS___IDSWPLinkManager, a2);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) != 0)
  {
    uint64_t v6 = @"IDSLinkBTLEKey";
  }

  else
  {
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = objc_opt_class(&OBJC_CLASS___IDSBTLinkManager, v5);
    if ((objc_opt_isKindOfClass(v7, v8) & 1) == 0) {
      return;
    }
    *(_BYTE *)(*(void *)(a1 + 40) + 1394LL) = 0;
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472LL;
    void v18[2] = sub_10023E5A8;
    void v18[3] = &unk_1008F7948;
    void v18[4] = *(void *)(a1 + 40);
    IDSTransportThreadAddBlockAfter(v18, 10.0);
    uint64_t v6 = @"IDSLinkBTKey";
  }

  __int128 v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 8) allKeys]);
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  id v10 = [v9 countByEnumeratingWithState:&v14 objects:v19 count:16];
  if (v10)
  {
    id v11 = v10;
    uint64_t v12 = *(void *)v15;
    do
    {
      uint64_t v13 = 0LL;
      do
      {
        if (*(void *)v15 != v12) {
          objc_enumerationMutation(v9);
        }
        [*(id *)(a1 + 40) _removeLinkForDeviceID:*(void *)(*((void *)&v14 + 1) + 8 * (void)v13) linkKey:v6 verifyWithLink:0];
        uint64_t v13 = (char *)v13 + 1;
      }

      while (v11 != v13);
      id v11 = [v9 countByEnumeratingWithState:&v14 objects:v19 count:16];
    }

    while (v11);
  }
}

id sub_10023E5A8(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _nearbyChangedForDefaultDevice];
  uint64_t v3 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v3 + 1400))
  {
    *(_BYTE *)(v3 + 1400) = 0;
    return [*(id *)(a1 + 32) _connectivityChangedForDefaultDevice:0 isCloudConnected:*(unsigned __int8 *)(*(void *)(a1 + 32) + 1397)];
  }

  return result;
}

void sub_10023E668(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cbuuid]);
  uint64_t v3 = *(const __CFDictionary **)(*(void *)(a1 + 40) + 8LL);
  if (v3) {
    BOOL v4 = v2 == 0LL;
  }
  else {
    BOOL v4 = 1;
  }
  key = v2;
  if (v4) {
    Value = 0LL;
  }
  else {
    Value = (void *)CFDictionaryGetValue(v3, v2);
  }
  uint64_t v6 = Value;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _linkKeyForLink:*(void *)(a1 + 32)]);
  uint64_t v8 = v7;
  if (v6)
  {
    if (v7) {
      __int128 v9 = (void *)CFDictionaryGetValue(v6, v7);
    }
    else {
      __int128 v9 = 0LL;
    }
    id v10 = v9;
    if ((objc_opt_respondsToSelector(v10, "invalidate") & 1) != 0) {
      [v10 invalidate];
    }
    if (v8) {
      CFDictionaryRemoveValue(v6, v8);
    }
  }

  else
  {
    uint64_t v6 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    if (v6) {
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(*(void *)(a1 + 40) + 8LL), key, v6);
    }
  }

  id v11 = *(const void **)(a1 + 32);
  if (v11) {
    CFDictionarySetValue(v6, v8, v11);
  }
  [*(id *)(a1 + 32) setDelegate:*(void *)(a1 + 40)];
  if ([v8 isEqualToString:@"IDSLinkBTKey"])
  {
    if ([key isEqualToString:kIDSDefaultPairedDeviceID])
    {
      *(_BYTE *)(*(void *)(a1 + 40) + 1394LL) = 1;
      [*(id *)(a1 + 40) _nearbyChangedForDefaultDevice];
      uint64_t v12 = *(_BYTE **)(a1 + 40);
      if (v12[1392]) {
        [v12 _suspendBTLink:1 cbuuid:key];
      }
    }
  }

  if ((objc_opt_respondsToSelector(*(void *)(a1 + 32), "start") & 1) != 0) {
    [*(id *)(a1 + 32) start];
  }
}

void sub_10023E86C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cbuuid]);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v5 = objc_opt_class(&OBJC_CLASS___IDSBTLELink, v4);
  char isKindOfClass = objc_opt_isKindOfClass(v3, v5);
  uint64_t v7 = *(void **)(a1 + 40);
  if ((isKindOfClass & 1) != 0)
  {
    [v7 stopLinkForDeviceUniqueID:0 cbuuid:v2 disconnectWP:0];
  }

  else
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 _linkKeyForLink:*(void *)(a1 + 32)]);
    if ([v8 isEqualToString:@"IDSLinkBTKey"]
      && [v2 isEqualToString:kIDSDefaultPairedDeviceID])
    {
      *(_BYTE *)(*(void *)(a1 + 40) + 1394LL) = 0;
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3221225472LL;
      v9[2] = sub_10023E97C;
      v9[3] = &unk_1008F7948;
      void v9[4] = *(void *)(a1 + 40);
      IDSTransportThreadAddBlockAfter(v9, 10.0);
    }

    [*(id *)(a1 + 40) _removeLinkForDeviceID:v2 linkKey:v8 verifyWithLink:*(void *)(a1 + 32)];
  }
}

id sub_10023E97C(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _nearbyChangedForDefaultDevice];
  uint64_t v3 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v3 + 1400))
  {
    *(_BYTE *)(v3 + 1400) = 0;
    return [*(id *)(a1 + 32) _connectivityChangedForDefaultDevice:0 isCloudConnected:*(unsigned __int8 *)(*(void *)(a1 + 32) + 1397)];
  }

  return result;
}

void sub_10023EB60(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = objc_opt_class(&OBJC_CLASS___IDSBTLinkManager, a2);
  if ((objc_opt_isKindOfClass(v3, v4) & 1) != 0)
  {
    *(_BYTE *)(*(void *)(a1 + 40) + 1394LL) = 0;
    [*(id *)(a1 + 40) _nearbyChangedForDefaultDevice];
    *(_BYTE *)(*(void *)(a1 + 40) + 140[(id)qword_1009BEC18 setShouldPostNotifications:0] = 0;
    [*(id *)(a1 + 40) _connectivityChangedForDefaultDevice:0 isCloudConnected:*(unsigned __int8 *)(*(void *)(a1 + 40) + 1397)];
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 8) allKeys]);
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    __int128 v16 = 0u;
    id v6 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v6)
    {
      id v8 = v6;
      uint64_t v9 = *(void *)v14;
      do
      {
        id v10 = 0LL;
        do
        {
          if (*(void *)v14 != v9) {
            objc_enumerationMutation(v5);
          }
          [*(id *)(a1 + 40) _removeLinkForDeviceID:*(void *)(*((void *)&v13 + 1) + 8 * (void)v10) linkKey:@"IDSLinkBTKey" verifyWithLink:0];
          id v10 = (char *)v10 + 1;
        }

        while (v8 != v10);
        id v6 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
        id v8 = v6;
      }

      while (v6);
    }

    uint64_t v11 = im_primary_queue(v6, v7);
    uint64_t v12 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v11);
    dispatch_async(v12, &stru_1008FE8C8);

    *(_BYTE *)(*(void *)(a1 + 40) + 1392LL) = 0;
    [*(id *)(a1 + 40) _bringUpWiFi:0];
  }

void sub_10023ECE8(id a1)
{
  uint64_t v1 = OSLogHandleForTransportCategory("LinkManager");
  id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v6 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "enableConnectionForDefaultPairedDevice NO for currently paired device.",  v6,  2u);
  }

  uint64_t v4 = os_log_shim_legacy_logging_enabled(v3);
  if ((_DWORD)v4)
  {
    if (_IDSShouldLogTransport(v4))
    {
      _IDSLogTransport( @"LinkManager",  @"IDS",  @"enableConnectionForDefaultPairedDevice NO for currently paired device.");
      if (_IDSShouldLog(0LL, @"LinkManager")) {
        _IDSLogV( 0LL,  @"IDSFoundation",  @"LinkManager",  @"enableConnectionForDefaultPairedDevice NO for currently paired device.");
      }
    }
  }

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[IDSUTunDeliveryController sharedInstance](&OBJC_CLASS___IDSUTunDeliveryController, "sharedInstance"));
  [v5 enableConnectionForDefaultPairedDevice:0];
}

uint64_t sub_10023FE54(uint64_t a1, uint64_t a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_10023FEA8;
  v3[3] = &unk_1008F8BA8;
  void v3[4] = *(void *)(a1 + 32);
  void v3[5] = a2;
  return IDSTransportThreadAddBlock(v3, a2);
}

id sub_10023FEA8(uint64_t a1)
{
  return _objc_msgSend( *(id *)(a1 + 32),  "_handleWRMLinkRecommendation:",  objc_msgSend(*(id *)(a1 + 32), "_getIDSLinkTypeFromWRMLinkType:", *(void *)(a1 + 40)));
}

void sub_100240438(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 8) allKeys]);
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  id v3 = [v2 countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = 0LL;
    uint64_t v6 = *(void *)v19;
    do
    {
      for (i = 0LL; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v19 != v6) {
          objc_enumerationMutation(v2);
        }
        id v8 = *(const void **)(*((void *)&v18 + 1) + 8LL * (void)i);
        uint64_t v9 = *(const __CFDictionary **)(*(void *)(a1 + 32) + 8LL);
        if (v9) {
          BOOL v10 = v8 == 0LL;
        }
        else {
          BOOL v10 = 1;
        }
        if (v10)
        {
          uint64_t v11 = 0LL;
        }

        else
        {
          uint64_t v12 = (id)CFDictionaryGetValue(v9, v8);
          uint64_t v11 = v12;
          if (v12)
          {
            __int128 v13 = (id)CFDictionaryGetValue( (CFDictionaryRef)v12,  @"IDSLinkGlobalKey");

            if (v13)
            {
              uint64_t v15 = objc_opt_class(&OBJC_CLASS___IDSGlobalLink, v14);
              if ((objc_opt_isKindOfClass(v13, v15) & 1) != 0)
              {
                __int128 v16 = (void *)objc_claimAutoreleasedReturnValue([v13 alternateDelegate]);
                __int128 v17 = v16;
                if (v16) {
                  [v16 link:*(void *)(a1 + 32) didSoMaskChange:*(unsigned int *)(a1 + 40)];
                }
              }

              uint64_t v5 = v13;
            }

            else
            {
              uint64_t v5 = 0LL;
            }
          }
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v18 objects:v22 count:16];
    }

    while (v4);
  }

  else
  {
    uint64_t v5 = 0LL;
  }
}

void sub_10024070C(id a1)
{
  qword_1009C06F0 = *(void *)IMWeakLinkSymbol("kWiFiAutoJoinNetworkKey", @"MobileWiFi");
  qword_1009C06F8 = *(void *)IMWeakLinkSymbol("kWiFiAutoJoinStatusKey", @"MobileWiFi");
  qword_1009C0700 = *(void *)IMWeakLinkSymbol("kWiFiAutoJoinStatusAssociating", @"MobileWiFi");
  qword_1009C0708 = *(void *)IMWeakLinkSymbol("kWiFiAutoJoinStatusBegan", @"MobileWiFi");
  qword_1009C0710 = *(void *)IMWeakLinkSymbol("kWiFiAutoJoinStatusSuccess", @"MobileWiFi");
  qword_1009C0718 = *(void *)IMWeakLinkSymbol("kWiFiAutoJoinStatusAlreadyAssociated", @"MobileWiFi");
  qword_1009C0720 = *(void *)IMWeakLinkSymbol("kWiFiAutoJoinStatusNotEnabled", @"MobileWiFi");
  qword_1009C0728 = *(void *)IMWeakLinkSymbol("kWiFiAutoJoinStatusNotPermitted", @"MobileWiFi");
  qword_1009C0730 = *(void *)IMWeakLinkSymbol("kWiFiAutoJoinStatusNetworkNotFound", @"MobileWiFi");
  qword_1009C0738 = *(void *)IMWeakLinkSymbol("kWiFiAutoJoinStatusAssociationFailure", @"MobileWiFi");
  qword_1009C0740 = *(void *)IMWeakLinkSymbol("kWiFiAutoJoinStatusAborted", @"MobileWiFi");
  qword_1009C0748 = *(void *)IMWeakLinkSymbol("kWiFiAutoJoinStatusWaitingForUser", @"MobileWiFi");
}

void sub_10024087C(id a1)
{
  off_1009C0758 = (_UNKNOWN *)IMWeakLinkSymbol("WiFiNetworkGetSSID", @"MobileWiFi");
}

id sub_1002408A8(uint64_t a1)
{
  return _[*(id *)(a1 + 40) _handleWiFiAutoJoinStatusChange:*(void *)(a1 + 48) WiFiSSID:*(void *)(a1 + 32)];
}

id sub_1002408B8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _handleNetworkChanges:*(void *)(a1 + 40)];
}

id sub_1002408C4(void *a1)
{
  id v1 = a1;
  id v2 = sub_10012F01C();
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  if ([v3 length])
  {
    id v4 = v3;
  }

  else
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v1 pushToken]);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 SHA1HexString]);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 uppercaseString]);
    id v4 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"t:%@", v7));
  }

  return v4;
}

void sub_1002409C0(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___IDSRapportClient);
  id v2 = (void *)qword_1009C0770;
  qword_1009C0770 = (uint64_t)v1;
}

void sub_100240E94(_Unwind_Exception *a1)
{
}

void sub_100240F30(uint64_t a1, void *a2)
{
  id v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained _handleDiscoveredDevice:v3];
}

void sub_100240F78(uint64_t a1, void *a2)
{
  id v2 = (id *)(a1 + 32);
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained(v2);
  [WeakRetained _handleLostDevice:v3];
}

id sub_100240FC0()
{
  uint64_t v0 = (void *)qword_1009C0778;
  if (!qword_1009C0778)
  {
    id v1 = (void **)IMWeakLinkSymbol("RPOptionAllowUnauthenticated", @"Rapport");
    if (v1) {
      id v2 = *v1;
    }
    else {
      id v2 = 0LL;
    }
    objc_storeStrong((id *)&qword_1009C0778, v2);
    uint64_t v0 = (void *)qword_1009C0778;
  }

  return v0;
}

void sub_10024101C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog delivery](&OBJC_CLASS___IDSFoundationLog, "delivery"));
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Incoming Rapport message", v9, 2u);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _handleIncomingIDSMessageEvent:v6 options:v5];
}

void sub_1002410D0(id a1)
{
  id v1 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog delivery](&OBJC_CLASS___IDSFoundationLog, "delivery"));
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR)) {
    sub_1006A4A0C(v1, v2, v3, v4, v5, v6, v7, v8);
  }
}

void sub_100241118(id a1)
{
  id v1 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog delivery](&OBJC_CLASS___IDSFoundationLog, "delivery"));
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR)) {
    sub_1006A4A40(v1, v2, v3, v4, v5, v6, v7, v8);
  }
}

void sub_100241160(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog delivery](&OBJC_CLASS___IDSFoundationLog, "delivery"));
  uint64_t v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1006A4A74((uint64_t)v3, v5);
    }
  }

  else if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    int v7 = 138412290;
    id v8 = WeakRetained;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Activated companionLinkClient {self: %@}",  (uint8_t *)&v7,  0xCu);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_100241254(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog delivery](&OBJC_CLASS___IDSFoundationLog, "delivery"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 publicIdentifier]);
    int v7 = 138412546;
    id v8 = v3;
    __int16 v9 = 2112;
    BOOL v10 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Updated local device {device: %@, publicIdentifier: %@}",  (uint8_t *)&v7,  0x16u);
  }

  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8LL);
  if (!*(_BYTE *)(v6 + 24))
  {
    *(_BYTE *)(v6 + 24) = 1;
    dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  }
}

void sub_100241350(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog delivery](&OBJC_CLASS___IDSFoundationLog, "delivery"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Start companionLinkClient setup", buf, 2u);
  }

  uint64_t v5 = *(dispatch_group_s **)(a1 + 32);
  uint64_t v8 = im_primary_queue(v6, v7);
  __int16 v9 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100241438;
  block[3] = &unk_1008F6330;
  id v12 = v3;
  id v10 = v3;
  dispatch_group_notify(v5, v9, block);
}

uint64_t sub_100241438(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100241778(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog delivery](&OBJC_CLASS___IDSFoundationLog, "delivery"));
  uint64_t v11 = v10;
  if (v9)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_1006A4AE4((uint64_t)v9, a1, v11);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  else
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      uint64_t v12 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138478083;
      uint64_t v23 = v12;
      __int16 v24 = 2113;
      id v25 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "Found companionLinkClient {deviceIdentifier: %{private}@, client: %{private}@}",  buf,  0x16u);
    }

    uint64_t v13 = *(void *)(a1 + 40);
    id v14 = sub_100240FC0();
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    __int128 v20 = v15;
    __int128 v21 = &__kCFBooleanTrue;
    __int128 v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v21,  &v20,  1LL));
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    v17[2] = sub_10024196C;
    void v17[3] = &unk_1008F9660;
    id v18 = *(id *)(a1 + 32);
    id v19 = *(id *)(a1 + 48);
    [v7 sendEventID:@"ids-message" event:v13 destinationID:v8 options:v16 completion:v17];
  }
}

void sub_10024196C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog delivery](&OBJC_CLASS___IDSFoundationLog, "delivery"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = 138412546;
    uint64_t v7 = v5;
    __int16 v8 = 2112;
    id v9 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Finished sending message {deviceIdentifier: %@, error: %@}",  (uint8_t *)&v6,  0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100241B9C(uint64_t a1, void *a2)
{
  id v6 = a2;
  id v3 = objc_alloc(&OBJC_CLASS___CUTResult);
  if (v6) {
    id v4 = [v3 initWithError:v6];
  }
  else {
    id v4 = [v3 initWithSuccess:*(void *)(a1 + 32)];
  }
  uint64_t v5 = v4;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100241EB0(uint64_t a1, void *a2)
{
  id v5 = a2;
  if ((objc_opt_respondsToSelector(v5, "rapportClient:didDiscoverDevice:") & 1) != 0)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) idsDeviceIdentifier]);
    [v5 rapportClient:v3 didDiscoverDevice:v4];
  }
}

void sub_10024207C(uint64_t a1, void *a2)
{
  id v5 = a2;
  if ((objc_opt_respondsToSelector(v5, "rapportClient:didLoseDevice:") & 1) != 0)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) idsDeviceIdentifier]);
    [v5 rapportClient:v3 didLoseDevice:v4];
  }
}

void sub_100242324(void *a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "rapportClient:didReceiveMessage:fromID:") & 1) != 0) {
    [v3 rapportClient:a1[4] didReceiveMessage:a1[5] fromID:a1[6]];
  }
}

void sub_100242434(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) companionLinkClient]);
  (*(void (**)(uint64_t, id, void, void))(v2 + 16))(v2, v3, *(void *)(a1 + 40), 0LL);
}

BOOL sub_10024396C(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 context]);
  BOOL v4 = [v3 dataProtectionClass] == *(_DWORD *)(a1 + 32);

  return v4;
}

BOOL sub_100243A24(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 context]);
  BOOL v4 = [v3 messageType] == *(id *)(a1 + 32);

  return v4;
}

void sub_1002457FC( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void *a9)
{
  id v15 = a2;
  id v16 = a8;
  id v17 = a9;
  id v18 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDaemonPriorityQueueController sharedInstance]( &OBJC_CLASS___IDSDaemonPriorityQueueController,  "sharedInstance"));
  [v18 assertRunningWithPriority:*(void *)(*(void *)(a1 + 32) + 192)];

  uint64_t v19 = OSLogHandleForTransportCategory("UTunConnection");
  __int128 v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v21 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412802;
    uint64_t v67 = v21;
    __int16 v68 = 1024;
    *(_DWORD *)uint64_t v69 = a6;
    *(_WORD *)&v69[4] = 2112;
    *(void *)&v69[6] = v17;
    _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "%@ IDS internal openSocketWithOptions call returned socket %d, error %@",  buf,  0x1Cu);
  }

  uint64_t v23 = os_log_shim_legacy_logging_enabled(v22);
  if ((_DWORD)v23)
  {
    if (_IDSShouldLogTransport(v23))
    {
      uint64_t v59 = a6;
      id v61 = v17;
      uint64_t v57 = *(void *)(a1 + 32);
      _IDSLogTransport( @"UTunConnection",  @"IDS",  @"%@ IDS internal openSocketWithOptions call returned socket %d, error %@");
      if (_IDSShouldLog(0LL, @"UTunConnection"))
      {
        uint64_t v59 = a6;
        id v61 = v17;
        uint64_t v57 = *(void *)(a1 + 32);
        _IDSLogV( 0LL,  @"IDSFoundation",  @"UTunConnection",  @"%@ IDS internal openSocketWithOptions call returned socket %d, error %@");
      }
    }
  }

  if ((_DWORD)a6 == -1)
  {
    uint64_t v43 = OSLogHandleForIDSCategory("UTunConnection");
    __int128 v44 = (os_log_s *)objc_claimAutoreleasedReturnValue(v43);
    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v45 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      uint64_t v67 = v45;
      _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEFAULT,  "%@ Failed to open UTun socket, waiting...",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v46)
      && _IDSShouldLog(0LL, @"UTunConnection"))
    {
      uint64_t v57 = *(void *)(a1 + 32);
      _IDSLogV(0LL, @"IDSFoundation", @"UTunConnection", @"%@ Failed to open UTun socket, waiting...");
    }

    __int16 v48 = *(void **)(a1 + 32);
    uint64_t v47 = a1 + 32;
    objc_msgSend(v48, "_nonThreadSafeStopConnection", v57, v59, v61);
    dispatch_time_t v49 = dispatch_time(0LL, 500000000LL);
    __int16 v50 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDaemonPriorityQueueController sharedInstance]( &OBJC_CLASS___IDSDaemonPriorityQueueController,  "sharedInstance"));
    uint64_t v51 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v50 queueForPriority:*(void *)(*(void *)v47 + 192)]);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100245F04;
    block[3] = &unk_1008F6010;
    void block[4] = *(void *)v47;
    dispatch_after(v49, v51, block);
  }

  else
  {
    __int16 v24 = *(id **)(a1 + 32);
    if (v24[10])
    {
      [v24[10] endSession];
      uint64_t v25 = *(void *)(a1 + 32);
      id v26 = *(void **)(v25 + 80);
      *(void *)(v25 + 80) = 0LL;

      __int16 v24 = *(id **)(a1 + 32);
    }

    objc_msgSend(v24, "_clearLastFallbackWithReason:", @"new local link established", v57, v59, v61);
    uint64_t v27 = *(_BYTE **)(a1 + 32);
    if (v27[329] && v27[330]) {
      [v27 _startNWConnectinForIPsecCase:a6 controlChannelVersion:v15 capabilityFlags:a3 instanceID:a4 serviceMinCompatibilityVersion:a5];
    }
    else {
      [v27 _startAndSetupSocketPairConnection:v15 capabilityFlags:a3 instanceID:a4 serviceMinCompatibilityVersion:a5 socketDescriptor:a6];
    }
    *(_BYTE *)(*(void *)(a1 + 32) + 226LL) = 1;
    id v28 = [[IDSSocketPairHandshake alloc] initWithVersionNumber:4];
    uint64_t v29 = OSLogHandleForTransportCategory("UTunConnection");
    uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v31 = *(void *)(a1 + 32);
      uint64_t v32 = *(void *)(v31 + 80);
      *(_DWORD *)buf = 138413058;
      uint64_t v67 = v31;
      __int16 v68 = 2112;
      *(void *)uint64_t v69 = v32;
      *(_WORD *)&v69[8] = 1024;
      *(_DWORD *)&v69[10] = a6;
      __int16 v70 = 1024;
      int v71 = 4;
      _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "%@ created %@ for socket %d - sending handshake with version %u",  buf,  0x22u);
    }

    uint64_t v34 = os_log_shim_legacy_logging_enabled(v33);
    if ((_DWORD)v34)
    {
      if (_IDSShouldLogTransport(v34))
      {
        uint64_t v62 = a6;
        uint64_t v63 = 4LL;
        uint64_t v58 = *(void *)(a1 + 32);
        uint64_t v60 = *(void *)(v58 + 80);
        _IDSLogTransport( @"UTunConnection",  @"IDS",  @"%@ created %@ for socket %d - sending handshake with version %u");
        if (_IDSShouldLog(0LL, @"UTunConnection"))
        {
          uint64_t v62 = a6;
          uint64_t v63 = 4LL;
          uint64_t v58 = *(void *)(a1 + 32);
          uint64_t v60 = *(void *)(v58 + 80);
          _IDSLogV( 0LL,  @"IDSFoundation",  @"UTunConnection",  @"%@ created %@ for socket %d - sending handshake with version %u");
        }
      }
    }

    objc_msgSend(*(id *)(a1 + 32), "_sendSocketMessage:", v28, v58, v60, v62, v63);
    uint64_t v35 = OSLogHandleForIDSCategory("UTunConnection");
    __int128 v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v37 = *(void *)(a1 + 32);
      id v38 = [*(id *)(v37 + 16) count];
      *(_DWORD *)buf = 138412546;
      uint64_t v67 = v37;
      __int16 v68 = 2048;
      *(void *)uint64_t v69 = v38;
      _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "%@ resending %lu pending socketpair messages",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v39)
      && _IDSShouldLog(0LL, @"UTunConnection"))
    {
      [*(id *)(*(void *)(a1 + 32) + 16) count];
      _IDSLogV( 0LL,  @"IDSFoundation",  @"UTunConnection",  @"%@ resending %lu pending socketpair messages");
    }

    uint64_t v40 = *(void *)(a1 + 32);
    if (*(_BYTE *)(v40 + 256))
    {
      uint64_t v41 = *(void **)(v40 + 248);
      *(void *)(v40 + 24_Block_object_dispose(&STACK[0x2F0], 8) = 0LL;

      id v42 = (void **)(*(void *)(a1 + 32) + 240LL);
    }

    else
    {
      id v42 = (void **)(v40 + 232);
    }

    __int128 v52 = *v42;
    *id v42 = 0LL;

    uint64_t v54 = *(void *)(a1 + 32);
    __int128 v53 = (id *)(a1 + 32);
    uint64_t v55 = *(void **)(v54 + 16);
    v65[0] = _NSConcreteStackBlock;
    v65[1] = 3221225472LL;
    v65[2] = sub_100245E64;
    v65[3] = &unk_1008FEB98;
    v65[4] = v54;
    [v55 enumerateObjectsWithOptions:2 usingBlock:v65];
    id v56 = (void *)*((void *)*v53 + 2);
    *((void *)*v53 + 2) = 0LL;

    [*v53 _dequeueMessages];
    [*v53 _connectivityChanged];
  }
}

void sub_100245E64(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v7 = v3;
  if (!*(_BYTE *)(*(void *)(a1 + 32) + 256LL))
  {
    uint64_t v4 = objc_opt_class(&OBJC_CLASS___IDSSocketPairResourceTransferSender, v3);
    char isKindOfClass = objc_opt_isKindOfClass(v7, v4);
    id v3 = v7;
    if ((isKindOfClass & 1) != 0)
    {
      [v7 reset];
      id v3 = v7;
    }
  }

  id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 context]);
  if (v6)
  {
    [*(id *)(*(void *)(a1 + 32) + 136) pushMessage:v6];
    [*(id *)(a1 + 32) _removeMessageFromStatistics:v6];
  }
}

id sub_100245F04(uint64_t a1)
{
  return [*(id *)(a1 + 32) _checkAndStartConnection];
}

id sub_10024644C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) _encryptDataWithOTR:a2 token:a3];
}

id sub_10024645C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _decryptOTREncrtypedMessage:a2];
}

id sub_100246B94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) _encryptDataWithOTR:a2 token:a3];
}

id sub_100246BA4(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _decryptOTREncrtypedMessage:a2];
}

void sub_1002475B4( _Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, os_activity_scope_state_s state, char a35)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x10024728CLL);
  }

  os_activity_scope_leave(&state);
  cut_arc_os_release(&a35);
  _Unwind_Resume(exc_buf);
}

void sub_100247CCC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 8LL));
  [WeakRetained connectionHasSpaceForMessages:*(void *)(a1 + 32) dataProtectionClass:*(unsigned int *)(a1 + 40)];
}

void sub_100247DB8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 8LL));
  [WeakRetained connectionIsEmpty:*(void *)(a1 + 32)];
}

void sub_100247E6C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 8LL));
  [WeakRetained connectionIsEmptyOfCloudMessages:*(void *)(a1 + 32)];
}

uint64_t sub_100248A28(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16LL))(a1[6], a1[4], a1[5]);
}

id sub_100248CA4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _fallbackTimerFired];
}

void sub_100248D28(uint64_t a1)
{
  uint64_t v1 = OSLogHandleForIDSCategory("UTunConnection");
  uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = [*(id *)(v3 + 24) count];
    *(_DWORD *)buf = 138412546;
    uint64_t v42 = v3;
    __int16 v43 = 2048;
    id v44 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%@ fallback timer fired, fallback queue: %lu",  buf,  0x16u);
  }

  if (os_log_shim_legacy_logging_enabled(v5) && _IDSShouldLog(0LL, @"UTunConnection"))
  {
    uint64_t v27 = *(void *)(a1 + 32);
    id v28 = [*(id *)(v27 + 24) count];
    _IDSLogV( 0LL,  @"IDSFoundation",  @"UTunConnection",  @"%@ fallback timer fired, fallback queue: %lu");
  }

  context = objc_autoreleasePoolPush();
  id v6 = [*(id *)(*(void *)(a1 + 32) + 24) _copyForEnumerating];
  __int128 v38 = 0u;
  __int128 v39 = 0u;
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  id obj = v6;
  id v7 = [obj countByEnumeratingWithState:&v36 objects:v40 count:16];
  if (!v7)
  {

    CFMutableDictionaryRef Mutable = 0LL;
    id v9 = 0LL;
    uint64_t v32 = 0LL;
    uint64_t v30 = 0LL;
    char v33 = 0;
    double v25 = 0.0;
    goto LABEL_38;
  }

  CFMutableDictionaryRef Mutable = 0LL;
  uint64_t v31 = 0LL;
  uint64_t v32 = 0LL;
  id v9 = 0LL;
  uint64_t v30 = 0LL;
  char v33 = 0;
  uint64_t v10 = *(void *)v37;
  do
  {
    uint64_t v11 = 0LL;
    do
    {
      if (*(void *)v37 != v10) {
        objc_enumerationMutation(obj);
      }
      uint64_t v12 = *(void **)(*((void *)&v36 + 1) + 8LL * (void)v11);
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "topic", v27, v28));
      id v14 = (void *)objc_claimAutoreleasedReturnValue(-[__CFDictionary objectForKey:](Mutable, "objectForKey:", v13));
      id v15 = v14;
      if (v14)
      {
        goto LABEL_13;
      }

      if ([v12 deniedToSend])
      {
        id v16 = 0LL;
        if (Mutable) {
          goto LABEL_23;
        }
      }

      else
      {
        id v16 = [*(id *)(a1 + 32) _messageIsAllowedToSendMessageOnTopic:v13];
        if (Mutable) {
          goto LABEL_23;
        }
      }

      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
LABEL_23:
      id v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v16));
      -[__CFDictionary setObject:forKey:](Mutable, "setObject:forKey:", v18, v13);

      if ((v16 & 1) == 0)
      {
LABEL_24:
        char v33 = 1;
        goto LABEL_25;
      }

void sub_100249190( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, int a17)
{
  if (a2 == 1)
  {
    objc_begin_catch(exception_object);
    objc_end_catch();
    JUMPOUT(0x100248DD8LL);
  }

  _Unwind_Resume(exception_object);
}

id sub_1002497CC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _timeoutTimerFired];
}

void sub_100249850(uint64_t a1)
{
  uint64_t v2 = OSLogHandleForIDSCategory("UTunConnection");
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    id v5 = [*(id *)(v4 + 16) count];
    id v6 = [*(id *)(*(void *)(a1 + 32) + 136) count];
    *(_DWORD *)buf = 138412802;
    uint64_t v45 = v4;
    __int16 v46 = 2048;
    id v47 = v5;
    __int16 v48 = 2048;
    id v49 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%@ timeout timer fired, sending queue: %lu %lu",  buf,  0x20u);
  }

  if (os_log_shim_legacy_logging_enabled(v7) && _IDSShouldLog(0LL, @"UTunConnection"))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    id v32 = [*(id *)(v8 + 16) count];
    id v33 = [*(id *)(*(void *)(a1 + 32) + 136) count];
    uint64_t v31 = v8;
    _IDSLogV( 0LL,  @"IDSFoundation",  @"UTunConnection",  @"%@ timeout timer fired, sending queue: %lu %lu");
  }

  id v9 = objc_autoreleasePoolPush();
  id v10 = [*(id *)(*(void *)(a1 + 32) + 16) _copyForEnumerating];
  __int128 v40 = 0u;
  __int128 v41 = 0u;
  __int128 v38 = 0u;
  __int128 v39 = 0u;
  id v11 = v10;
  id v12 = [v11 countByEnumeratingWithState:&v38 objects:v43 count:16];
  if (v12)
  {
    uint64_t v13 = *(void *)v39;
    do
    {
      for (i = 0LL; i != v12; i = (char *)i + 1)
      {
        if (*(void *)v39 != v13) {
          objc_enumerationMutation(v11);
        }
        id v15 = *(void **)(*((void *)&v38 + 1) + 8LL * (void)i);
        id v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "context", v31, v32, v33));
        id v17 = (void *)objc_claimAutoreleasedReturnValue([v16 expirationDate]);
        [v17 timeIntervalSinceNow];
        BOOL v19 = v18 < 0.0;

        if (v19)
        {
          uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v15 context]);
          [*(id *)(a1 + 32) _messageTimedOut:v15 localMessage:v20];
        }
      }

      id v12 = [v11 countByEnumeratingWithState:&v38 objects:v43 count:16];
    }

    while (v12);
  }

  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 136) messages]);
  id v22 = [v21 _copyForEnumerating];

  __int128 v36 = 0u;
  __int128 v37 = 0u;
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  id v23 = v22;
  id v24 = [v23 countByEnumeratingWithState:&v34 objects:v42 count:16];
  if (v24)
  {
    uint64_t v25 = *(void *)v35;
    do
    {
      for (j = 0LL; j != v24; j = (char *)j + 1)
      {
        if (*(void *)v35 != v25) {
          objc_enumerationMutation(v23);
        }
        uint64_t v27 = *(void **)(*((void *)&v34 + 1) + 8LL * (void)j);
        id v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "expirationDate", v31, v32, v33));
        [v28 timeIntervalSinceNow];
        BOOL v30 = v29 < 0.0;

        if (v30) {
          [*(id *)(a1 + 32) _messageTimedOut:0 localMessage:v27];
        }
      }

      id v24 = [v23 countByEnumeratingWithState:&v34 objects:v42 count:16];
    }

    while (v24);
  }

  [*(id *)(a1 + 32) _resetTimeout:0];
  objc_autoreleasePoolPop(v9);
}

void sub_100249B94( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a2 == 1)
  {
    id v10 = objc_begin_catch(exception_object);
    uint64_t v11 = OSLogHandleForIDSCategory("Warning");
    id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)(v9 - 144) = 138412290;
      *(void *)(v9 - 140) = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "Exception caught handling timeout timer: %@",  (uint8_t *)(v9 - 144),  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v13))
    {
      _IDSWarnV(@"IDSFoundation", @"Exception caught handling timeout timer: %@");
      _IDSLogV(0LL, @"IDSFoundation", @"Warning", @"Exception caught handling timeout timer: %@");
      _IDSLogTransport(@"Warning", @"IDS", @"Exception caught handling timeout timer: %@");
    }

    objc_end_catch();
    JUMPOUT(0x100249B44LL);
  }

  _Unwind_Resume(exception_object);
}

void sub_10024A650(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDevicePolicyController sharedInstance](&OBJC_CLASS___IDSDevicePolicyController, "sharedInstance"));
  id v3 = [v2 shouldBlackOutDeviceWithCbuuid:*(void *)(a1 + 32)];

  uint64_t v4 = objc_alloc(&OBJC_CLASS___IDSDeliveryContext);
  uint64_t v5 = *(void *)(a1 + 72);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 80)));
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v3));
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [*(id *)(a1 + 48) messageState]));
  id v14 = -[IDSDeliveryContext initWithResponseCode:deviceID:currentAverageRTT:isDeviceBlackedOut:localMessageState:]( v4,  "initWithResponseCode:deviceID:currentAverageRTT:isDeviceBlackedOut:localMessageState:",  v5,  v6,  v7,  v8,  v9);

  id v10 = *(void **)(a1 + 56);
  if (v10)
  {
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 domain]);
    -[IDSDeliveryContext setWpConnectionErrorDomain:](v14, "setWpConnectionErrorDomain:", v11);

    id v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [*(id *)(a1 + 56) code]));
    -[IDSDeliveryContext setWpConnectionErrorCode:](v14, "setWpConnectionErrorCode:", v12);

    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) userInfo]);
    -[IDSDeliveryContext setWpConnectionErrorUserInfo:](v14, "setWpConnectionErrorUserInfo:", v13);
  }

  (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
}

void sub_10024AC84( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

id sub_10024AC9C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _dequeueMessages];
}

id sub_10024ACA4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _dequeueMessages];
}

void sub_10024ACAC(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v9 = a2;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v9 topic]);
  unsigned int v7 = [v6 isEqualToString:*(void *)(a1 + 32)];

  if (v7)
  {
    *a4 = 1;
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v9 resourcePath]);

    if (v8) {
      *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
    }
  }
}

void sub_10024B5A4(uint64_t a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _UTunDeliveryController]);
  [v1 defaultPeerSetWantsQuickRelayRequest:1];
}

void sub_10024D370(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 topic]);
  if (v3)
  {
    uint64_t v4 = v3;
    [*(id *)(a1 + 32) addObject:v3];
    id v3 = v4;
  }
}

void sub_10024D3BC(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 firstObject]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 context]);
  id v6 = (id)objc_claimAutoreleasedReturnValue([v4 topic]);

  uint64_t v5 = v6;
  if (v6)
  {
    [*(id *)(a1 + 32) addObject:v6];
    uint64_t v5 = v6;
  }
}

void sub_10024D430(id a1)
{
  byte_1009C0788 = IMGetDomainBoolForKey(@"com.apple.ids", @"DisableLocalDelivery");
}

id sub_10024D45C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) admissionPolicyChangedForTopic:*(void *)(a1 + 40) allowed:a2];
}

id sub_10024E960(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _dequeueMessagesTimerDidFire:*(void *)(a1 + 40)];
}

id sub_10024EA44(uint64_t a1)
{
  uint64_t v2 = OSLogHandleForTransportCategory("UTunConnection");
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unsigned int v7 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Dequeue Message Timer did Fire -- Dequeueing messages",  v7,  2u);
  }

  uint64_t v5 = os_log_shim_legacy_logging_enabled(v4);
  if ((_DWORD)v5)
  {
    if (_IDSShouldLogTransport(v5))
    {
      _IDSLogTransport( @"UTunConnection",  @"IDS",  @"Dequeue Message Timer did Fire -- Dequeueing messages");
      if (_IDSShouldLog(0LL, @"UTunConnection")) {
        _IDSLogV( 0LL,  @"IDSFoundation",  @"UTunConnection",  @"Dequeue Message Timer did Fire -- Dequeueing messages");
      }
    }
  }

  [*(id *)(a1 + 32) _dequeueMessages];
  return [*(id *)(a1 + 32) _invalidateMessagesDequeueTimer];
}

void sub_10024EFDC(uint64_t a1, void *a2, uint64_t a3)
{
  id v10 = a2;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v10 context]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 topic]);
  unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDServiceController sharedInstance](&OBJC_CLASS___IDSDServiceController, "sharedInstance"));
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 serviceWithPushTopic:v6]);
  unsigned int v9 = [v8 dataProtectionClass];

  if (v9 == *(_DWORD *)(a1 + 48))
  {
    [*(id *)(a1 + 32) _requeueSendingMessage:v10];
    [*(id *)(a1 + 40) addIndex:a3];
  }
}

void sub_10024F0A0(uint64_t a1, void *a2, uint64_t a3)
{
  id v10 = a2;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v10 context]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 topic]);
  uint64_t v8 = objc_opt_class(&OBJC_CLASS___IDSSocketPairResourceTransferSender, v7);
  char isKindOfClass = objc_opt_isKindOfClass(v10, v8);
  if ([v6 isEqualToString:*(void *)(a1 + 32)]
    && *(_BYTE *)(a1 + 56) == (isKindOfClass & 1))
  {
    [*(id *)(a1 + 40) _requeueSendingMessage:v10];
    [*(id *)(a1 + 48) addIndex:a3];
  }
}

id sub_10024F990(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) handleOTRNegotiationComplete:a2];
}

id sub_10024F99C(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) handleOTRNegotiationTimeout:a2];
}

id sub_10024F9A8(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) handleOTRNegotiationComplete:a2];
}

id sub_10024F9B4(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) handleOTRNegotiationTimeout:a2];
}

void sub_10024FA70(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[IDSOTRKeyStorage sharedInstance](&OBJC_CLASS___IDSOTRKeyStorage, "sharedInstance"));
  [v2 lock];

  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userInfo]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKey:@"__kIDSOTRKeyStorageClassKey"]);

  if ([v4 length])
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 72) objectForKey:v4]);
    id v6 = [v5 _copyForEnumerating];

    [*(id *)(*(void *)(a1 + 40) + 72) removeObjectForKey:v4];
    if ([v6 count])
    {
      uint64_t v7 = OSLogHandleForTransportCategory("UTunConnection");
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412546;
        __int128 v35 = v4;
        __int16 v36 = 2048;
        id v37 = [v6 count];
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Class %@ storage keys are available, processing %lu pending messages",  buf,  0x16u);
      }

      uint64_t v10 = os_log_shim_legacy_logging_enabled(v9);
      if ((_DWORD)v10)
      {
        if (_IDSShouldLogTransport(v10))
        {
          uint64_t v25 = v4;
          id v28 = [v6 count];
          _IDSLogTransport( @"UTunConnection",  @"IDS",  @"Class %@ storage keys are available, processing %lu pending messages");
          if (_IDSShouldLog(0LL, @"UTunConnection"))
          {
            id v11 = objc_msgSend(v6, "count", v4, v28);
            uint64_t v25 = v4;
            id v28 = v11;
            _IDSLogV( 0LL,  @"IDSFoundation",  @"UTunConnection",  @"Class %@ storage keys are available, processing %lu pending messages");
          }
        }
      }
    }

    id v12 = (void *)objc_claimAutoreleasedReturnValue(+[IDSOTRKeyStorage sharedInstance](&OBJC_CLASS___IDSOTRKeyStorage, "sharedInstance", v25, v28));
    [v12 unlock];

    __int128 v31 = 0u;
    __int128 v32 = 0u;
    __int128 v29 = 0u;
    __int128 v30 = 0u;
    id v13 = v6;
    id v14 = [v13 countByEnumeratingWithState:&v29 objects:v33 count:16];
    if (v14)
    {
      uint64_t v15 = *(void *)v30;
      do
      {
        for (i = 0LL; i != v14; i = (char *)i + 1)
        {
          if (*(void *)v30 != v15) {
            objc_enumerationMutation(v13);
          }
          id v17 = *(void **)(*((void *)&v29 + 1) + 8LL * (void)i);
          unsigned int v18 = [v17 command];
          if (v18 == 24)
          {
            [*(id *)(*(void *)(a1 + 40) + 80) processStoredIncomingMessage:v17];
          }

          else if (v18 == 23)
          {
            [*(id *)(a1 + 40) _processIncomingDataMessage:v17];
          }
        }

        id v14 = [v13 countByEnumeratingWithState:&v29 objects:v33 count:16];
      }

      while (v14);
    }
  }

  else
  {
    uint64_t v19 = OSLogHandleForIDSCategory("Warning");
    uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userInfo]);
      *(_DWORD *)buf = 138412290;
      __int128 v35 = v21;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "UTunConnection - No class storage key specified in notification %@",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v22))
    {
      id v24 = *(void **)(a1 + 32);
      id v23 = (id *)(a1 + 32);
      id v26 = (void *)objc_claimAutoreleasedReturnValue([v24 userInfo]);
      _IDSWarnV(@"IDSFoundation", @"UTunConnection - No class storage key specified in notification %@");

      uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v23, "userInfo", v26));
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"UTunConnection - No class storage key specified in notification %@");

      uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*v23, "userInfo", v27));
      _IDSLogTransport( @"Warning",  @"IDS",  @"UTunConnection - No class storage key specified in notification %@");
    }

    id v13 = (id)objc_claimAutoreleasedReturnValue(+[IDSOTRKeyStorage sharedInstance](&OBJC_CLASS___IDSOTRKeyStorage, "sharedInstance", v25));
    [v13 unlock];
  }
}

void sub_10024FE5C(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x10024FD68LL);
  }

  _Unwind_Resume(a1);
}

void sub_100250868(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  id v7 = a4;
  id v8 = a5;
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDaemonPriorityQueueController sharedInstance]( &OBJC_CLASS___IDSDaemonPriorityQueueController,  "sharedInstance"));
  uint64_t v10 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v9 queueForPriority:*(void *)(*(void *)(a1 + 32) + 192)]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10025096C;
  block[3] = &unk_1008F8D18;
  uint64_t v11 = *(void *)(a1 + 32);
  id v12 = *(void **)(a1 + 40);
  id v16 = v8;
  uint64_t v17 = v11;
  id v18 = v12;
  id v19 = v7;
  id v20 = *(id *)(a1 + 48);
  id v13 = v7;
  id v14 = v8;
  dispatch_async(v10, block);
}

uint64_t sub_10025096C(void **a1)
{
  uint64_t v2 = sub_1002B1D88(a1[4]);
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = OSLogHandleForIDSCategory("Warning");
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      uint64_t v25 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "Failed to encrypt UTunConnection message! Error %ld",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v6))
    {
      _IDSWarnV(@"IDSFoundation", @"Failed to encrypt UTunConnection message! Error %ld");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"Failed to encrypt UTunConnection message! Error %ld");
      _IDSLogTransport(@"Warning", @"IDS", @"Failed to encrypt UTunConnection message! Error %ld");
    }
  }

  else
  {
    uint64_t v7 = OSLogHandleForTransportCategory("UTunConnection");
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *((void *)a1[5] + 26);
      id v10 = [a1[6] length];
      id v11 = [a1[7] length];
      *(_DWORD *)buf = 138412802;
      uint64_t v25 = v9;
      __int16 v26 = 2048;
      id v27 = v10;
      __int16 v28 = 2048;
      id v29 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Encrypted message for device unique ID %@  original size: %lu  encrypted size: %lu",  buf,  0x20u);
    }

    uint64_t v13 = os_log_shim_legacy_logging_enabled(v12);
    if ((_DWORD)v13)
    {
      if (_IDSShouldLogTransport(v13))
      {
        uint64_t v14 = *((void *)a1[5] + 26);
        id v22 = [a1[6] length];
        id v23 = [a1[7] length];
        _IDSLogTransport( @"UTunConnection",  @"IDS",  @"Encrypted message for device unique ID %@  original size: %lu  encrypted size: %lu");
        if (_IDSShouldLog(0LL, @"UTunConnection"))
        {
          objc_msgSend(a1[6], "length", v14, v22, v23);
          [a1[7] length];
          _IDSLogV( 0LL,  @"IDSFoundation",  @"UTunConnection",  @"Encrypted message for device unique ID %@  original size: %lu  encrypted size: %lu");
        }
      }
    }

    if (a1[7])
    {
      id v15 = [[IDSSocketPairEncryptedMessage alloc] initWithData:a1[7]];
      id v16 = (void *)objc_claimAutoreleasedReturnValue([a1[8] topic]);
      [v15 setTopic:v16];

      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([a1[8] context]);
      [v15 setContext:v17];

      objc_msgSend(*((id *)a1[5] + 10), "sendDataMessage:canFragment:", v15, objc_msgSend(a1[5], "_isMagnetConnection"));
    }
  }

  uint64_t v18 = OSLogHandleForIDSCategory("UTunConnection");
  id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Send public key encrypted message.", buf, 2u);
  }

  uint64_t result = os_log_shim_legacy_logging_enabled(v20);
  if ((_DWORD)result)
  {
    uint64_t result = _IDSShouldLog(0LL, @"UTunConnection");
    if ((_DWORD)result) {
      return _IDSLogV(0LL, @"IDSFoundation", @"UTunConnection", @"Send public key encrypted message.");
    }
  }

  return result;
}

void sub_1002512C0(uint64_t a1, int a2)
{
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDaemonPriorityQueueController sharedInstance]( &OBJC_CLASS___IDSDaemonPriorityQueueController,  "sharedInstance"));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _DWORD v6[2] = sub_100251364;
  v6[3] = &unk_1008F88C0;
  int v8 = a2;
  uint64_t v5 = *(void **)(a1 + 40);
  void v6[4] = *(void *)(a1 + 32);
  id v7 = v5;
  [v4 performBlockWithPriority:v6 priority:*(void *)(*(void *)(a1 + 32) + 192)];
}

void sub_100251364(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 48) == 1)
  {
    id v1 = *(void **)(a1 + 32);
    uint64_t v2 = *(void **)(a1 + 40);
    id v3 = (id)objc_claimAutoreleasedReturnValue([v2 context]);
    [v1 _removeSocketPairMessage:v2 localMessage:v3 reason:@"Data protection class unavailable" responseCode:18];
  }

id sub_100252EDC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _handleOTRDecryptionSuccess:*(void *)(a1 + 40)];
}

id sub_100252EE8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _handleOTRDecryptionError:*(void *)(a1 + 40)];
}

void sub_100252FD4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, void *a6)
{
  id v8 = a4;
  id v9 = a6;
  id v10 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDaemonPriorityQueueController sharedInstance]( &OBJC_CLASS___IDSDaemonPriorityQueueController,  "sharedInstance"));
  id v11 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v10 queueForPriority:*(void *)(*(void *)(a1 + 32) + 192)]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1002530D8;
  block[3] = &unk_1008F9578;
  uint64_t v12 = *(void *)(a1 + 32);
  uint64_t v13 = *(void **)(a1 + 40);
  id v17 = v9;
  uint64_t v18 = v12;
  id v19 = v13;
  id v20 = v8;
  id v21 = *(id *)(a1 + 48);
  id v14 = v8;
  id v15 = v9;
  dispatch_async(v11, block);
}

void sub_1002530D8(uint64_t a1)
{
  uint64_t v2 = sub_1002B1E4C(*(void **)(a1 + 32));
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = OSLogHandleForIDSCategory("Warning");
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134217984;
      uint64_t v30 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "Failed to decrypt UTunConnection message! Error %ld",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v6))
    {
      _IDSWarnV(@"IDSFoundation", @"Failed to decrypt UTunConnection message! Error %ld");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"Failed to decrypt UTunConnection message! Error %ld");
      __n128 v7 = _IDSLogTransport( @"Warning",  @"IDS",  @"Failed to decrypt UTunConnection message! Error %ld");
    }

    (*(void (**)(__n128))(*(void *)(a1 + 64) + 16LL))(v7);
  }

  else
  {
    uint64_t v8 = OSLogHandleForIDSCategory("UTunConnection");
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 208LL);
      id v11 = [*(id *)(a1 + 48) length];
      id v12 = [*(id *)(a1 + 56) length];
      *(_DWORD *)buf = 138412802;
      uint64_t v30 = v10;
      __int16 v31 = 2048;
      id v32 = v11;
      __int16 v33 = 2048;
      id v34 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Decrypted message for device unique ID %@  original size: %lu  unencrypted size: %lu",  buf,  0x20u);
    }

    if (os_log_shim_legacy_logging_enabled(v13)
      && _IDSShouldLog(0LL, @"UTunConnection"))
    {
      uint64_t v14 = *(void *)(*(void *)(a1 + 40) + 208LL);
      id v26 = [*(id *)(a1 + 48) length];
      id v28 = [*(id *)(a1 + 56) length];
      uint64_t v24 = v14;
      _IDSLogV( 0LL,  @"IDSFoundation",  @"UTunConnection",  @"Decrypted message for device unique ID %@  original size: %lu  unencrypted size: %lu");
    }

    id v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_UTunDeliveryController", v24, v26, v28));
    id v16 = (void *)objc_claimAutoreleasedReturnValue([v15 lockedContinuityPeerID:*(void *)(*(void *)(a1 + 40) + 200)]);

    if (!v16)
    {
      uint64_t v17 = *(void *)(a1 + 40);
      if (*(void *)(v17 + 208))
      {
        if (*(void *)(v17 + 200))
        {
          uint64_t v18 = OSLogHandleForIDSCategory("UTunConnection");
          id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
          {
            id v20 = *(void **)(*(void *)(a1 + 40) + 200LL);
            uint64_t v21 = *(void *)(*(void *)(a1 + 40) + 208LL);
            *(_DWORD *)buf = 138412546;
            uint64_t v30 = v21;
            __int16 v31 = 2112;
            id v32 = v20;
            _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Decrypted continuity message, lock peer %@ for btUUID %@.",  buf,  0x16u);
          }

          if (os_log_shim_legacy_logging_enabled(v22)
            && _IDSShouldLog(0LL, @"UTunConnection"))
          {
            uint64_t v25 = *(void *)(*(void *)(a1 + 40) + 208LL);
            uint64_t v27 = *(void *)(*(void *)(a1 + 40) + 200LL);
            _IDSLogV( 0LL,  @"IDSFoundation",  @"UTunConnection",  @"Decrypted continuity message, lock peer %@ for btUUID %@.");
          }

          id v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_UTunDeliveryController", v25, v27));
          [v23 lockContinuityPeer:*(void *)(*(void *)(a1 + 40) + 208) btUUID:*(void *)(*(void *)(a1 + 40) + 200)];
        }
      }
    }

    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
  }

void sub_100253D5C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDevicePolicyController sharedInstance](&OBJC_CLASS___IDSDevicePolicyController, "sharedInstance"));
  id v3 = [v2 shouldBlackOutDeviceWithCbuuid:*(void *)(a1 + 32)];

  uint64_t v4 = objc_alloc(&OBJC_CLASS___IDSDeliveryContext);
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v6 = *(void *)(a1 + 40);
  __n128 v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 72)));
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v3));
  id v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [*(id *)(a1 + 48) messageState]));
  uint64_t v10 = -[IDSDeliveryContext initWithResponseCode:deviceID:currentAverageRTT:isDeviceBlackedOut:localMessageState:]( v4,  "initWithResponseCode:deviceID:currentAverageRTT:isDeviceBlackedOut:localMessageState:",  v5,  v6,  v7,  v8,  v9);

  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_100253E60(uint64_t a1)
{
  uint64_t v2 = objc_alloc(&OBJC_CLASS___IDSDeliveryContext);
  uint64_t v3 = *(void *)(a1 + 64);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 72)));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDevicePolicyController sharedInstance](&OBJC_CLASS___IDSDevicePolicyController, "sharedInstance"));
  __n128 v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v6 shouldBlackOutDeviceWithCbuuid:*(void *)(a1 + 40)]));
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [*(id *)(a1 + 48) messageState]));
  id v9 = -[IDSDeliveryContext initWithResponseCode:deviceID:currentAverageRTT:isDeviceBlackedOut:localMessageState:]( v2,  "initWithResponseCode:deviceID:currentAverageRTT:isDeviceBlackedOut:localMessageState:",  v3,  v4,  v5,  v7,  v8);

  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

id sub_100254164(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) sendAckForMessageWithSequenceNumber:a2];
}

void sub_10025420C(uint64_t a1, uint64_t a2)
{
  id v4 = [[IDSSocketPairExpiredAckMessage alloc] initWithSequenceNumber:a2];
  [*(id *)(a1 + 32) setEnabled:1];
  uint64_t v5 = OSLogHandleForTransportCategory("UTunConnection");
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    id v12 = v4;
    __int16 v13 = 1024;
    int v14 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Sending Expired ack %@ for received sequence number %d",  buf,  0x12u);
  }

  uint64_t v8 = os_log_shim_legacy_logging_enabled(v7);
  if ((_DWORD)v8)
  {
    if (_IDSShouldLogTransport(v8))
    {
      id v9 = v4;
      uint64_t v10 = a2;
      _IDSLogTransport( @"UTunConnection",  @"IDS",  @"Sending Expired ack %@ for received sequence number %d");
      if (_IDSShouldLog(0LL, @"UTunConnection"))
      {
        id v9 = v4;
        uint64_t v10 = a2;
        _IDSLogV( 0LL,  @"IDSFoundation",  @"UTunConnection",  @"Sending Expired ack %@ for received sequence number %d");
      }
    }
  }

  objc_msgSend(*(id *)(a1 + 32), "_sendSocketMessage:ignoreSequenceNumber:", v4, 1, v9, v10);
}

LABEL_167:
              uint64_t v105 = 0;
              goto LABEL_168;
            }

            LOBYTE(v220) = 0;
            if (IMGetDomainBoolForKey(@"com.apple.ids", @"ResourceTransferReceiverError"))
            {
              LOBYTE(v220) = IMGetCachedDomainIntForKeyWithDefaultValue( @"com.apple.ids",  @"ResourceTransferErrorOverride",  4LL);
LABEL_107:
              uint64_t v106 = OSLogHandleForTransportCategory("UTunConnection");
              uint64_t v107 = (os_log_s *)objc_claimAutoreleasedReturnValue(v106);
              if (os_log_type_enabled(v107, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138412546;
                *(void *)&uint8_t buf[4] = v18;
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v220;
                _os_log_impl( (void *)&_mh_execute_header,  v107,  OS_LOG_TYPE_DEFAULT,  "IDSSocketPairCommandResourceTransferMessage could not create receiver from message %@ (reason %d)",  buf,  0x12u);
              }

              id v109 = os_log_shim_legacy_logging_enabled(v108);
              if ((_DWORD)v109)
              {
                if (_IDSShouldLogTransport(v109))
                {
                  uint64_t v169 = v18;
                  double v170 = v220;
                  _IDSLogTransport( @"UTunConnection",  @"IDS",  @"IDSSocketPairCommandResourceTransferMessage could not create receiver from message %@ (reason %d)");
                  if (_IDSShouldLog(0LL, @"UTunConnection"))
                  {
                    uint64_t v169 = v18;
                    double v170 = v220;
                    _IDSLogV( 0LL,  @"IDSFoundation",  @"UTunConnection",  @"IDSSocketPairCommandResourceTransferMessage could not create receiver from message %@ (reason %d)");
                  }
                }
              }

              if ((_BYTE)v220)
              {
                uint64_t v110 = (void *)objc_claimAutoreleasedReturnValue( +[IDSSocketPairResourceTransferMessage cancelMessageWithSequenceNumber:streamID:messageUUID:cancelReason:]( &OBJC_CLASS___IDSSocketPairResourceTransferMessage,  "cancelMessageWithSequenceNumber:streamID:messageUUID:cancelReason:",  0LL,  v14,  v18));
                uint64_t v111 = v110;
                if (self->_supportDynamicServices)
                {
                  if (self->_supportDynamicServicesOptimization) {
                    [v110 setStreamID:1];
                  }
                  else {
                    [v110 setTopic:v184];
                  }
                }

                uint64_t v142 = self->_resettingIncomingResourceTransfers;
                if (!v142)
                {
                  v143 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
                  v144 = self->_resettingIncomingResourceTransfers;
                  self->_resettingIncomingResourceTransfers = v143;

                  uint64_t v142 = self->_resettingIncomingResourceTransfers;
                }

                -[NSMutableSet addObject:](v142, "addObject:", v18, v169, v170);
                -[IDSUTunConnection _sendSocketMessage:ignoreSequenceNumber:]( self,  "_sendSocketMessage:ignoreSequenceNumber:",  v111,  1LL);
              }

              uint64_t v24 = 0LL;
              goto LABEL_167;
            }

            uint64_t v24 = [[IDSSocketPairResourceTransferReceiver alloc] initWithMessage:v181 resumeResourceTransfers:1 receiverError:&v220];
            __int16 v96 = (void *)objc_claimAutoreleasedReturnValue([v24 expiryDate]);
            [v96 timeIntervalSinceNow];
            __int16 v98 = v97;

            unsigned int v99 = dispatch_time(0LL, (uint64_t)(v98 * 1000000000.0));
            uint64_t v100 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDaemonPriorityQueueController sharedInstance]( &OBJC_CLASS___IDSDaemonPriorityQueueController,  "sharedInstance"));
            uint64_t v101 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v100 queueForPriority:self->_priority]);
            block[0] = _NSConcreteStackBlock;
            block[1] = 3221225472LL;
            block[2] = sub_1002563DC;
            block[3] = &unk_1008FEDE8;
            void block[4] = self;
            key = v18;
            v225 = key;
            v226 = v98;
            dispatch_after(v99, v101, block);

            if (!v24) {
              goto LABEL_107;
            }
            -[NSMutableSet removeObject:](self->_resumingIncomingResourceTransfers, "removeObject:", key);
            if (!-[NSMutableSet count](self->_resumingIncomingResourceTransfers, "count"))
            {
              id v102 = self->_resumingIncomingResourceTransfers;
              self->_resumingIncomingResourceTransfers = 0LL;
            }

            if (!self->_incomingResourceTransfers)
            {
              CFMutableDictionaryRef Mutable = (NSMutableDictionary *)CFDictionaryCreateMutable( 0LL,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
              incomingResourceTransfers = self->_incomingResourceTransfers;
              self->_incomingResourceTransfers = Mutable;
            }

            CFDictionarySetValue((CFMutableDictionaryRef)self->_incomingResourceTransfers, key, v24);
            uint64_t v105 = 1;
LABEL_168:
            if (-[NSMutableSet count](self->_resettingIncomingResourceTransfers, "count", v169, v170))
            {
              if (v105) {
                goto LABEL_172;
              }
              goto LABEL_185;
            }

            uint64_t v145 = self->_resettingIncomingResourceTransfers;
            self->_resettingIncomingResourceTransfers = 0LL;

            if (!v105) {
              goto LABEL_185;
            }
            break;
          case 2u:
            *(void *)buf = 0LL;
            *(void *)&uint8_t buf[8] = buf;
            *(void *)&uint8_t buf[16] = 0x2020000000LL;
            LOBYTE(v22_Block_object_dispose(va, 8) = 0;
            v220 = 0LL;
            v221 = &v220;
            v222 = 0x2020000000LL;
            v223 = 0x7FFFFFFFFFFFFFFFLL;
            sendingMessages = self->_sendingMessages;
            v214[0] = _NSConcreteStackBlock;
            v214[1] = 3221225472LL;
            v214[2] = sub_100256564;
            v214[3] = &unk_1008FEE10;
            __int16 v46 = v18;
            v215 = v46;
            v180 = v22;
            v216 = v180;
            id v217 = self;
            id v218 = &v220;
            v219 = buf;
            -[NSMutableArray enumerateObjectsUsingBlock:](sendingMessages, "enumerateObjectsUsingBlock:", v214);
            if (v221[3] != 0x7FFFFFFFFFFFFFFFLL) {
              -[NSMutableArray removeObjectAtIndex:](self->_sendingMessages, "removeObjectAtIndex:");
            }
            if (*(_BYTE *)(*(void *)&buf[8] + 24LL)) {
              goto LABEL_153;
            }
            id v212 = 0u;
            uint64_t v213 = 0u;
            v210 = 0u;
            uint64_t v211 = 0u;
            id v47 = (void *)objc_claimAutoreleasedReturnValue(-[IDSLocalDeliveryQueue messages](self->_deliveryQueue, "messages"));
            __int16 v48 = [v47 countByEnumeratingWithState:&v210 objects:v237 count:16];
            if (!v48) {
              goto LABEL_152;
            }
            id v49 = *(void *)v211;
            while (2)
            {
              for (i = 0LL; i != v48; i = (char *)i + 1)
              {
                if (*(void *)v211 != v49) {
                  objc_enumerationMutation(v47);
                }
                uint64_t v51 = *(void **)(*((void *)&v210 + 1) + 8LL * (void)i);
                __int128 v52 = (void *)objc_claimAutoreleasedReturnValue([v51 messageUUID]);
                if (v52)
                {
                  __int128 v53 = (void *)objc_claimAutoreleasedReturnValue([v51 messageUUID]);
                  uint64_t v54 = [v53 isEqualToString:v46];

                  if (v54)
                  {
                    *(_BYTE *)(*(void *)&buf[8] + 24LL) = 1;
                    unsigned int v80 = (void *)objc_claimAutoreleasedReturnValue([v51 socketPairMessage]);
                    id v82 = objc_opt_class(&OBJC_CLASS___IDSSocketPairResourceTransferSender, v81);
                    if ((objc_opt_isKindOfClass(v80, v82) & 1) != 0)
                    {
                      uint64_t v83 = v80;
                      id v84 = [v180 byteOffset];
                      uint64_t v85 = OSLogHandleForTransportCategory("UTunConnection");
                      uint64_t v86 = (os_log_s *)objc_claimAutoreleasedReturnValue(v85);
                      if (os_log_type_enabled(v86, OS_LOG_TYPE_DEFAULT))
                      {
                        __int16 v87 = [v180 byteOffset];
                        uint64_t v88 = [v83 nextByte];
                        *(_DWORD *)v231 = 138412802;
                        id v232 = v46;
                        v233 = 2048;
                        id v234 = v87;
                        v235 = 2048;
                        id v236 = v88;
                        _os_log_impl( (void *)&_mh_execute_header,  v86,  OS_LOG_TYPE_DEFAULT,  "IDSSocketPairCommandResourceTransferMessage got resume message for %@ @ %llu (was sending %llu)",  v231,  0x20u);
                      }

                      uint64_t v90 = os_log_shim_legacy_logging_enabled(v89);
                      if ((_DWORD)v90)
                      {
                        if (_IDSShouldLogTransport(v90))
                        {
                          uint64_t v171 = [v180 byteOffset];
                          v175 = [v83 nextByte];
                          _IDSLogTransport( @"UTunConnection",  @"IDS",  @"IDSSocketPairCommandResourceTransferMessage got resume message for %@ @ %llu (was sending %llu)");
                          if (_IDSShouldLog(0LL, @"UTunConnection"))
                          {
                            objc_msgSend(v180, "byteOffset", v46, v171, v175);
                            [v83 nextByte];
                            _IDSLogV( 0LL,  @"IDSFoundation",  @"UTunConnection",  @"IDSSocketPairCommandResourceTransferMessage got resume message for %@ @ %llu (was sending %llu)");
                          }
                        }
                      }

                      if (v84) {
                        [v83 setNextByte:v84];
                      }
                      else {
                        [v83 reset];
                      }
                    }

                    else
                    {
                      uint64_t v112 = OSLogHandleForTransportCategory("UTunConnection");
                      char v113 = (os_log_s *)objc_claimAutoreleasedReturnValue(v112);
                      if (os_log_type_enabled(v113, OS_LOG_TYPE_DEFAULT))
                      {
                        id v114 = [v180 byteOffset];
                        *(_DWORD *)v231 = 138412802;
                        id v232 = v46;
                        v233 = 2048;
                        id v234 = v114;
                        v235 = 2112;
                        id v236 = v80;
                        _os_log_impl( (void *)&_mh_execute_header,  v113,  OS_LOG_TYPE_DEFAULT,  "IDSSocketPairCommandResourceTransferMessage got resume message for %@ @ %llu (ignoring nonmatc hing message %@)",  v231,  0x20u);
                      }

                      __int128 v116 = os_log_shim_legacy_logging_enabled(v115);
                      if ((_DWORD)v116)
                      {
                        if (_IDSShouldLogTransport(v116))
                        {
                          v172 = [v180 byteOffset];
                          _IDSLogTransport( @"UTunConnection",  @"IDS",  @"IDSSocketPairCommandResourceTransferMessage got resume message for %@ @ %llu (ignoring nonmatching message %@)");
                          if (_IDSShouldLog(0LL, @"UTunConnection"))
                          {
                            objc_msgSend(v180, "byteOffset", v46, v172, v80);
                            _IDSLogV( 0LL,  @"IDSFoundation",  @"UTunConnection",  @"IDSSocketPairCommandResourceTransferMessage got resume message for %@ @ %llu (ignoring nonmatching message %@)");
                          }
                        }
                      }
                    }

                    goto LABEL_152;
                  }
                }
              }

              __int16 v48 = [v47 countByEnumeratingWithState:&v210 objects:v237 count:16];
              if (v48) {
                continue;
              }
              break;
            }

LABEL_152:
LABEL_153:
            if (!*(_BYTE *)(*(void *)&buf[8] + 24LL))
            {
              unint64_t v137 = OSLogHandleForTransportCategory("UTunConnection");
              uint64_t v138 = (os_log_s *)objc_claimAutoreleasedReturnValue(v137);
              if (os_log_type_enabled(v138, OS_LOG_TYPE_DEFAULT))
              {
                id v139 = [v180 byteOffset];
                *(_DWORD *)v231 = 138412546;
                id v232 = v46;
                v233 = 2048;
                id v234 = v139;
                _os_log_impl( (void *)&_mh_execute_header,  v138,  OS_LOG_TYPE_DEFAULT,  "IDSSocketPairCommandResourceTransferMessage got resume message for %@ @ %llu (sender not found)",  v231,  0x16u);
              }

              uint64_t v141 = os_log_shim_legacy_logging_enabled(v140);
              if ((_DWORD)v141)
              {
                if (_IDSShouldLogTransport(v141))
                {
                  uint64_t v173 = [v180 byteOffset];
                  _IDSLogTransport( @"UTunConnection",  @"IDS",  @"IDSSocketPairCommandResourceTransferMessage got resume message for %@ @ %llu (sender not found)");
                  if (_IDSShouldLog(0LL, @"UTunConnection"))
                  {
                    objc_msgSend(v180, "byteOffset", v46, v173);
                    _IDSLogV( 0LL,  @"IDSFoundation",  @"UTunConnection",  @"IDSSocketPairCommandResourceTransferMessage got resume message for %@ @ %llu (sender not found)");
                  }
                }
              }
            }

            _Block_object_dispose(&v220, 8);
            _Block_object_dispose(buf, 8);
            goto LABEL_161;
          case 3u:
            uint64_t v55 = [v22 cancelReason];
            uint64_t v24 = (id)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](self->_incomingResourceTransfers, "objectForKey:", v18));
            if (v24)
            {
              id v56 = OSLogHandleForTransportCategory("UTunConnection");
              uint64_t v57 = (os_log_s *)objc_claimAutoreleasedReturnValue(v56);
              if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138412546;
                *(void *)&uint8_t buf[4] = v18;
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = (_DWORD)v55;
                _os_log_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_DEFAULT,  "Got cancel message for incoming file %@ cancelReason %u",  buf,  0x12u);
              }

              uint64_t v59 = os_log_shim_legacy_logging_enabled(v58);
              if ((_DWORD)v59)
              {
                if (_IDSShouldLogTransport(v59))
                {
                  uint64_t v169 = v18;
                  double v170 = v55;
                  _IDSLogTransport( @"UTunConnection",  @"IDS",  @"Got cancel message for incoming file %@ cancelReason %u");
                  if (_IDSShouldLog(0LL, @"UTunConnection"))
                  {
                    uint64_t v169 = v18;
                    double v170 = (unint64_t)v55;
                    _IDSLogV( 0LL,  @"IDSFoundation",  @"UTunConnection",  @"Got cancel message for incoming file %@ cancelReason %u");
                  }
                }
              }

              objc_msgSend(v24, "abortTransfer", v169, v170);
              -[NSMutableDictionary removeObjectForKey:](self->_incomingResourceTransfers, "removeObjectForKey:", v18);
              goto LABEL_185;
            }

            *(void *)buf = 0LL;
            *(void *)&uint8_t buf[8] = buf;
            *(void *)&uint8_t buf[16] = 0x3032000000LL;
            v228 = sub_1002567E0;
            uint64_t v229 = sub_1002567F0;
            v230 = 0LL;
            v220 = 0LL;
            v221 = &v220;
            v222 = 0x2020000000LL;
            v223 = 0x7FFFFFFFFFFFFFFFLL;
            uint64_t v62 = self->_sendingMessages;
            v204[0] = _NSConcreteStackBlock;
            v204[1] = 3221225472LL;
            v204[2] = sub_1002567F8;
            v204[3] = &unk_1008FEE38;
            v207 = buf;
            uint64_t v63 = v18;
            id v209 = (char)v55;
            v205 = v63;
            v206 = self;
            v208 = &v220;
            -[NSMutableArray enumerateObjectsUsingBlock:](v62, "enumerateObjectsUsingBlock:", v204);
            if (v221[3] != 0x7FFFFFFFFFFFFFFFLL) {
              -[NSMutableArray removeObjectAtIndex:](self->_sendingMessages, "removeObjectAtIndex:");
            }
            if (*(void *)(*(void *)&buf[8] + 40LL)) {
              goto LABEL_69;
            }
            __int16 v64 = (void *)objc_claimAutoreleasedReturnValue(-[IDSLocalDeliveryQueue messages](self->_deliveryQueue, "messages"));
            v200[0] = _NSConcreteStackBlock;
            v200[1] = 3221225472LL;
            v200[2] = sub_100256A20;
            v200[3] = &unk_1008FEE60;
            id v65 = v63;
            uint64_t v201 = v65;
            v202 = &v220;
            v203 = buf;
            [v64 enumerateObjectsUsingBlock:v200];

            if (*(void *)(*(void *)&buf[8] + 40LL))
            {
LABEL_69:
              uint64_t v66 = OSLogHandleForTransportCategory("UTunConnection");
              uint64_t v67 = (os_log_s *)objc_claimAutoreleasedReturnValue(v66);
              if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)v231 = 138412546;
                id v232 = v63;
                v233 = 1024;
                LODWORD(v234) = (_DWORD)v55;
                _os_log_impl( (void *)&_mh_execute_header,  v67,  OS_LOG_TYPE_DEFAULT,  "Got cancel message for outgoing file %@ cancelReason %u",  v231,  0x12u);
              }

              uint64_t v69 = os_log_shim_legacy_logging_enabled(v68);
              if ((_DWORD)v69)
              {
                if (_IDSShouldLogTransport(v69))
                {
                  uint64_t v169 = v63;
                  double v170 = v55;
                  _IDSLogTransport( @"UTunConnection",  @"IDS",  @"Got cancel message for outgoing file %@ cancelReason %u");
                  if (_IDSShouldLog(0LL, @"UTunConnection"))
                  {
                    uint64_t v169 = v63;
                    double v170 = (unint64_t)v55;
                    _IDSLogV( 0LL,  @"IDSFoundation",  @"UTunConnection",  @"Got cancel message for outgoing file %@ cancelReason %u");
                  }
                }
              }

              __int16 v70 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)&buf[8] + 40), "context", v169, v170));
              int v71 = (void *)objc_claimAutoreleasedReturnValue([v70 completionBlock]);
              int v72 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDevicePolicyController sharedInstance]( &OBJC_CLASS___IDSDevicePolicyController,  "sharedInstance"));
              id v73 = [v72 shouldBlackOutDeviceWithCbuuid:self->_cbuuid];

              rtt = self->_rtt;
              uint64_t v75 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDaemonPriorityQueueController sharedInstance]( &OBJC_CLASS___IDSDaemonPriorityQueueController,  "sharedInstance"));
              v194[0] = _NSConcreteStackBlock;
              v194[1] = 3221225472LL;
              v194[2] = sub_100256AF8;
              v194[3] = &unk_1008FEE88;
              v198 = (char)v55;
              id v76 = v70;
              __int16 v195 = v76;
              uint64_t v197 = rtt;
              id v199 = v73;
              id v77 = v71;
              id v196 = v77;
              [v75 performBlockMainQueue:v194];
            }

            else
            {
              __int16 v126 = OSLogHandleForTransportCategory("UTunConnection");
              int v127 = (os_log_s *)objc_claimAutoreleasedReturnValue(v126);
              if (os_log_type_enabled(v127, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)v231 = 138412546;
                id v232 = v65;
                v233 = 1024;
                LODWORD(v234) = (_DWORD)v55;
                _os_log_impl( (void *)&_mh_execute_header,  v127,  OS_LOG_TYPE_DEFAULT,  "IDSSocketPairCommandResourceTransferMessage got cancel message for %@ cancelReason %u, but no sender o r receiver found",  v231,  0x12u);
              }

              int v129 = os_log_shim_legacy_logging_enabled(v128);
              if ((_DWORD)v129)
              {
                if (_IDSShouldLogTransport(v129))
                {
                  _IDSLogTransport( @"UTunConnection",  @"IDS",  @"IDSSocketPairCommandResourceTransferMessage got cancel message for %@ cancelReason %u, but no sender or receiver found");
                  if (_IDSShouldLog(0LL, @"UTunConnection")) {
                    _IDSLogV( 0LL,  @"IDSFoundation",  @"UTunConnection",  @"IDSSocketPairCommandResourceTransferMessage got cancel message for %@ cancelReason %u, but no sender or receiver found");
                  }
                }
              }
            }

            _Block_object_dispose(&v220, 8);
            _Block_object_dispose(buf, 8);

            goto LABEL_161;
          default:
            goto LABEL_161;
        }

        goto LABEL_172;
      }

      id v178 = a8;
      id v34 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](self->_incomingResourceTransfers, "objectForKey:", v18));
      uint64_t v24 = v34;
      if (v34)
      {
        [v24 abortTransfer];
        __int128 v35 = [[IDSSocketPairResourceTransferReceiver alloc] initWithMessage:v181 resumeResourceTransfers:0 receiverError:0];

        uint64_t v24 = v35;
        if (!v35)
        {
LABEL_27:
          if (!v24)
          {
            __int128 v38 = OSLogHandleForTransportCategory("UTunConnection");
            __int128 v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);
            if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              *(void *)&uint8_t buf[4] = v181;
              _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "IDSSocketPairCommandResourceTransferMessage could not create receiver from message %@",  buf,  0xCu);
            }

            __int128 v41 = os_log_shim_legacy_logging_enabled(v40);
            if ((_DWORD)v41)
            {
              if (_IDSShouldLogTransport(v41))
              {
                _IDSLogTransport( @"UTunConnection",  @"IDS",  @"IDSSocketPairCommandResourceTransferMessage could not create receiver from message %@");
                if (_IDSShouldLog(0LL, @"UTunConnection")) {
                  _IDSLogV( 0LL,  @"IDSFoundation",  @"UTunConnection",  @"IDSSocketPairCommandResourceTransferMessage could not create receiver from message %@");
                }
              }
            }

  v350 = kIDSQRAllocateKey_RelaySessionToken;
  v351 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", kIDSQRAllocateKey_RelaySessionToken, v954, v997, v1040));
  v353 = objc_opt_class(&OBJC_CLASS___NSData, v352);
  v354 = objc_opt_isKindOfClass(v351, v353);

  v355 = (NSData *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v350]);
  v356 = v355;
  if ((v354 & 1) != 0)
  {
    relaySessionToken = self->_relaySessionToken;
    self->_relaySessionToken = v355;
LABEL_154:

    goto LABEL_161;
  }

  if (v356)
  {
    v358 = OSLogHandleForIDSCategory("QRAllocator");
    v359 = (os_log_s *)objc_claimAutoreleasedReturnValue(v358);
    if (os_log_type_enabled(v359, OS_LOG_TYPE_DEBUG))
    {
      v360 = (id)objc_claimAutoreleasedReturnValue([v4 objectForKey:v350]);
      v362 = (id)objc_opt_class(&OBJC_CLASS___NSData, v361);
      v363 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v350]);
      v365 = (id)objc_opt_class(v363, v364);
      *(_DWORD *)buf = 138412802;
      v1070 = v360;
      v1071 = 2112;
      v1072 = v362;
      v1073 = 2112;
      v1074 = v365;
      _os_log_impl( (void *)&_mh_execute_header,  v359,  OS_LOG_TYPE_DEBUG,  "Unexpected datatype. %@ should be of type %@, not %@",  buf,  0x20u);
    }

    if (os_log_shim_legacy_logging_enabled(v366))
    {
      if (_IDSShouldLog(1LL, @"QRAllocator"))
      {
        relaySessionToken = (NSData *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v350]);
        v368 = objc_opt_class(&OBJC_CLASS___NSData, v367);
        v369 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v350]);
        v998 = v368;
        v1041 = objc_opt_class(v369, v370);
        v955 = relaySessionToken;
        _IDSLogV( 1LL,  @"IDSFoundation",  @"QRAllocator",  @"Unexpected datatype. %@ should be of type %@, not %@");

        goto LABEL_154;
      }
    }
  }

LABEL_161:
            uint64_t v24 = 0LL;
            goto LABEL_185;
          }

  v371 = kIDSQRAllocateKey_RelaySessionKey;
  v372 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", kIDSQRAllocateKey_RelaySessionKey, v955, v998, v1041));
  v374 = objc_opt_class(&OBJC_CLASS___NSData, v373);
  v375 = objc_opt_isKindOfClass(v372, v374);

  v376 = (NSData *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v371]);
  v377 = v376;
  if ((v375 & 1) != 0)
  {
    relaySessionKey = self->_relaySessionKey;
    self->_relaySessionKey = v376;
LABEL_163:

    goto LABEL_170;
  }

  if (v377)
  {
    v379 = OSLogHandleForIDSCategory("QRAllocator");
    v380 = (os_log_s *)objc_claimAutoreleasedReturnValue(v379);
    if (os_log_type_enabled(v380, OS_LOG_TYPE_DEBUG))
    {
      v381 = (id)objc_claimAutoreleasedReturnValue([v4 objectForKey:v371]);
      v383 = (id)objc_opt_class(&OBJC_CLASS___NSData, v382);
      v384 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v371]);
      v386 = (id)objc_opt_class(v384, v385);
      *(_DWORD *)buf = 138412802;
      v1070 = v381;
      v1071 = 2112;
      v1072 = v383;
      v1073 = 2112;
      v1074 = v386;
      _os_log_impl( (void *)&_mh_execute_header,  v380,  OS_LOG_TYPE_DEBUG,  "Unexpected datatype. %@ should be of type %@, not %@",  buf,  0x20u);
    }

    if (os_log_shim_legacy_logging_enabled(v387))
    {
      if (_IDSShouldLog(1LL, @"QRAllocator"))
      {
        relaySessionKey = (NSData *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v371]);
        v389 = objc_opt_class(&OBJC_CLASS___NSData, v388);
        v390 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v371]);
        v999 = v389;
        v1042 = objc_opt_class(v390, v391);
        v956 = relaySessionKey;
        _IDSLogV( 1LL,  @"IDSFoundation",  @"QRAllocator",  @"Unexpected datatype. %@ should be of type %@, not %@");

        goto LABEL_163;
      }
    }
  }

  __break(1u);
LABEL_162:
  __break(1u);
LABEL_163:
  __break(1u);
LABEL_164:
  __break(1u);
LABEL_165:
  __break(1u);
LABEL_166:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Can't construct Array with count < 0",  36LL,  2LL,  "Swift/Array.swift",  17LL,  2,  936LL,  0);
  __break(1u);
  return result;
}

LABEL_172:
          id v146 = (void *)objc_claimAutoreleasedReturnValue([v24 finalizedMessageDictionaryIfDone]);
          if (v146)
          {
            v147 = OSLogHandleForIDSCategory("UTunConnection");
            uint64_t v148 = (os_log_s *)objc_claimAutoreleasedReturnValue(v147);
            if (os_log_type_enabled(v148, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v148,  OS_LOG_TYPE_DEFAULT,  "IDSSocketPairCommandResourceTransferMessage received and completed",  buf,  2u);
            }

            if (os_log_shim_legacy_logging_enabled(v149)
              && _IDSShouldLog(0LL, @"UTunConnection"))
            {
              _IDSLogV( 0LL,  @"IDSFoundation",  @"UTunConnection",  @"IDSSocketPairCommandResourceTransferMessage received and completed");
            }

            -[IDSUTunConnection _addIncomingMessageSize:forTopic:]( self,  "_addIncomingMessageSize:forTopic:",  [v24 totalBytesReceived],  v184);
            uint64_t v150 = objc_alloc(&OBJC_CLASS___IDSLocalDeliveryMessageReceivedMetric);
            v151 = (void *)objc_claimAutoreleasedReturnValue([v181 data]);
            id v152 = objc_msgSend( v150,  "initWithService:isFromDefaultPairedDevice:messageSize:linkType:priority:",  v184,  a10,  objc_msgSend(v151, "length"),  -[IDSUTunConnection _currentLink](self, "_currentLink"),  self->_priority);

            unsigned int v153 = (void *)objc_claimAutoreleasedReturnValue( +[IDSCoreAnalyticsLogger defaultLogger]( &OBJC_CLASS___IDSCoreAnalyticsLogger,  "defaultLogger"));
            [v153 logMetric:v152];

            v154 = (void *)objc_claimAutoreleasedReturnValue(+[IDSAWDLogging sharedInstance](&OBJC_CLASS___IDSAWDLogging, "sharedInstance"));
            unsigned int v155 = (void *)objc_claimAutoreleasedReturnValue([v181 data]);
            objc_msgSend( v154,  "messageReceivedForService:isFromDefaultPairedDevice:messageSize:linkType:priority:",  v184,  a10,  objc_msgSend(v155, "length"),  -[IDSUTunConnection _currentLink](self, "_currentLink"),  self->_priority);

            uint64_t v156 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  -[IDSUTunConnection _socketToNiceCommand:]( self,  "_socketToNiceCommand:",  [v181 command])));
            v185[0] = _NSConcreteStackBlock;
            v185[1] = 3221225472LL;
            v185[2] = sub_100256CE0;
            v185[3] = &unk_1008FEEB0;
            v185[4] = self;
            __int128 v186 = v146;
            id v187 = v184;
            v188 = v156;
            __int16 v191 = v179;
            double v192 = v178;
            v189 = v183;
            v157 = v18;
            id v190 = v157;
            __int16 v193 = a11;
            uint64_t v158 = v156;
            -[IDSUTunConnection _processMessage:withSequenceNumberBlock:]( self,  "_processMessage:withSequenceNumberBlock:",  v181,  v185);
            -[NSMutableDictionary removeObjectForKey:](self->_incomingResourceTransfers, "removeObjectForKey:", v157);
          }

          else
          {
            v159 = OSLogHandleForIDSCategory("UTunConnection");
            v160 = (os_log_s *)objc_claimAutoreleasedReturnValue(v159);
            if (os_log_type_enabled(v160, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v160,  OS_LOG_TYPE_DEFAULT,  "IDSSocketPairCommandResourceTransferMessage received - waiting for more",  buf,  2u);
            }

            if (os_log_shim_legacy_logging_enabled(v161)
              && _IDSShouldLog(0LL, @"UTunConnection"))
            {
              _IDSLogV( 0LL,  @"IDSFoundation",  @"UTunConnection",  @"IDSSocketPairCommandResourceTransferMessage received - waiting for more");
            }
          }

LABEL_185:
          goto LABEL_186;
        }
      }

      else
      {
        uint64_t v24 = [[IDSSocketPairResourceTransferReceiver alloc] initWithMessage:v181 resumeResourceTransfers:0 receiverError:0];
        if (!self->_incomingResourceTransfers)
        {
          __int16 v36 = (NSMutableDictionary *)CFDictionaryCreateMutable( 0LL,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
          id v37 = self->_incomingResourceTransfers;
          self->_incomingResourceTransfers = v36;
        }

        if (!v24) {
          goto LABEL_27;
        }
      }

      CFDictionarySetValue((CFMutableDictionaryRef)self->_incomingResourceTransfers, v18, v24);
      goto LABEL_27;
    }

    __int16 v31 = OSLogHandleForIDSCategory("UTunConnection");
    id v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "IDSSocketPairCommandResourceTransferMessage should be IDSSocketPairResourceTransferMessage",  buf,  2u);
    }

    if (os_log_shim_legacy_logging_enabled(v33)
      && _IDSShouldLog(0LL, @"UTunConnection"))
    {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"UTunConnection",  @"IDSSocketPairCommandResourceTransferMessage should be IDSSocketPairResourceTransferMessage");
    }
  }

  else
  {
    id v28 = OSLogHandleForIDSCategory("UTunConnection");
    id v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "IDSSocketPairCommandResourceTransferMessage requires a messageUUID",  buf,  2u);
    }

    if (os_log_shim_legacy_logging_enabled(v30)
      && _IDSShouldLog(0LL, @"UTunConnection"))
    {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"UTunConnection",  @"IDSSocketPairCommandResourceTransferMessage requires a messageUUID");
    }
  }

LABEL_186:
}

void sub_1002563DC(void *a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 232) objectForKey:a1[5]]);
  if (v2)
  {
    uint64_t v3 = OSLogHandleForTransportCategory("UTunConnection");
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = a1[5];
      uint64_t v6 = a1[6];
      *(_DWORD *)buf = 138412546;
      uint64_t v12 = v5;
      __int16 v13 = 2048;
      uint64_t v14 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Aborting resource transfer receiver for %@ after %lf seconds",  buf,  0x16u);
    }

    uint64_t v8 = os_log_shim_legacy_logging_enabled(v7);
    if ((_DWORD)v8)
    {
      if (_IDSShouldLogTransport(v8))
      {
        uint64_t v10 = a1[6];
        uint64_t v9 = a1[5];
        _IDSLogTransport( @"UTunConnection",  @"IDS",  @"Aborting resource transfer receiver for %@ after %lf seconds");
        if (_IDSShouldLog(0LL, @"UTunConnection"))
        {
          uint64_t v10 = a1[6];
          uint64_t v9 = a1[5];
          _IDSLogV( 0LL,  @"IDSFoundation",  @"UTunConnection",  @"Aborting resource transfer receiver for %@ after %lf seconds");
        }
      }
    }

    objc_msgSend(v2, "abortTransfer", v9, v10);
    [*(id *)(a1[4] + 232) removeObjectForKey:a1[5]];
  }
}

void sub_100256564(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v7 = a2;
  uint64_t v9 = objc_opt_class(&OBJC_CLASS___IDSSocketPairResourceTransferSender, v8);
  if ((objc_opt_isKindOfClass(v7, v9) & 1) != 0)
  {
    id v10 = v7;
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 context]);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 messageUUID]);
    if (v12)
    {
      __int16 v13 = (void *)objc_claimAutoreleasedReturnValue([v11 messageUUID]);
      unsigned int v14 = [v13 isEqualToString:*(void *)(a1 + 32)];

      if (v14)
      {
        uint64_t v15 = OSLogHandleForTransportCategory("UTunConnection");
        id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v17 = *(void *)(a1 + 32);
          id v18 = [*(id *)(a1 + 40) byteOffset];
          *(_DWORD *)buf = 138412802;
          uint64_t v28 = v17;
          __int16 v29 = 2048;
          id v30 = v18;
          __int16 v31 = 2048;
          id v32 = [v10 nextByte];
          _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "IDSSocketPairCommandResourceTransferMessage got resume message for %@ @ %llu (was sending %llu)",  buf,  0x20u);
        }

        uint64_t v20 = os_log_shim_legacy_logging_enabled(v19);
        if ((_DWORD)v20)
        {
          if (_IDSShouldLogTransport(v20))
          {
            uint64_t v21 = *(void *)(a1 + 32);
            id v25 = [*(id *)(a1 + 40) byteOffset];
            id v26 = [v10 nextByte];
            uint64_t v24 = v21;
            _IDSLogTransport( @"UTunConnection",  @"IDS",  @"IDSSocketPairCommandResourceTransferMessage got resume message for %@ @ %llu (was sending %llu)");
            if (_IDSShouldLog(0LL, @"UTunConnection"))
            {
              uint64_t v22 = *(void *)(a1 + 32);
              id v25 = objc_msgSend(*(id *)(a1 + 40), "byteOffset", v24, v25, v26);
              id v26 = [v10 nextByte];
              uint64_t v24 = v22;
              _IDSLogV( 0LL,  @"IDSFoundation",  @"UTunConnection",  @"IDSSocketPairCommandResourceTransferMessage got resume message for %@ @ %llu (was sending %llu)");
            }
          }
        }

        id v23 = objc_msgSend(*(id *)(a1 + 40), "byteOffset", v24, v25, v26);
        if (v23)
        {
          [v10 setNextByte:v23];
        }

        else
        {
          [*(id *)(*(void *)(a1 + 48) + 136) pushMessage:v11];
          [v10 reset];
          *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = a3;
        }

        *a4 = 1;
        *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) = 1;
      }
    }
  }
}

uint64_t sub_1002567E0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1002567F0(uint64_t a1)
{
}

void sub_1002567F8(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v8 = a2;
  uint64_t v10 = objc_opt_class(&OBJC_CLASS___IDSSocketPairResourceTransferSender, v9);
  if ((objc_opt_isKindOfClass(v8, v10) & 1) != 0)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL), a2);
    id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) context]);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 messageUUID]);
    if (v12)
    {
      __int16 v13 = (void *)objc_claimAutoreleasedReturnValue([v11 messageUUID]);
      unsigned int v14 = [v13 isEqualToString:*(void *)(a1 + 32)];

      if (v14)
      {
        uint64_t v15 = OSLogHandleForTransportCategory("UTunConnection");
        id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v17 = *(void *)(a1 + 32);
          int v18 = *(unsigned __int8 *)(a1 + 64);
          *(_DWORD *)buf = 138412546;
          uint64_t v24 = v17;
          __int16 v25 = 1024;
          int v26 = v18;
          _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Got cancel message for %@ cancelReason %u",  buf,  0x12u);
        }

        uint64_t v20 = os_log_shim_legacy_logging_enabled(v19);
        if ((_DWORD)v20)
        {
          if (_IDSShouldLogTransport(v20))
          {
            uint64_t v21 = *(void *)(a1 + 32);
            uint64_t v22 = *(unsigned __int8 *)(a1 + 64);
            _IDSLogTransport(@"UTunConnection", @"IDS", @"Got cancel message for %@ cancelReason %u");
            if (_IDSShouldLog(0LL, @"UTunConnection"))
            {
              uint64_t v21 = *(void *)(a1 + 32);
              uint64_t v22 = *(unsigned __int8 *)(a1 + 64);
              _IDSLogV( 0LL,  @"IDSFoundation",  @"UTunConnection",  @"Got cancel message for %@ cancelReason %u");
            }
          }
        }

        objc_msgSend(*(id *)(*(void *)(a1 + 40) + 136), "dequeueMessage:", v11, v21, v22);
        *a4 = 1;
        *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = a3;
      }
    }
  }
}

void sub_100256A20(void *a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v16 = a2;
  uint64_t v7 = objc_claimAutoreleasedReturnValue([v16 messageUUID]);
  if (v7)
  {
    id v8 = (void *)v7;
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v16 messageUUID]);
    unsigned int v10 = [v9 isEqualToString:a1[4]];

    if (v10)
    {
      *a4 = 1;
      *(void *)(*(void *)(a1[5] + 8LL) + 24LL) = a3;
      id v11 = (void *)objc_claimAutoreleasedReturnValue([v16 command]);
      id v12 = [v11 integerValue];

      if (v12 == (id)22)
      {
        uint64_t v13 = objc_claimAutoreleasedReturnValue([v16 socketPairMessage]);
        uint64_t v14 = *(void *)(a1[6] + 8LL);
        uint64_t v15 = *(void **)(v14 + 40);
        *(void *)(v14 + 40) = v13;
      }
    }
  }
}

void sub_100256AF8(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 56);
  if (v2 == 6)
  {
    unsigned int v10 = objc_alloc(&OBJC_CLASS___IDSDeliveryContext);
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) toDeviceID]);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 48)));
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 57)));
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [*(id *)(a1 + 32) messageState]));
    id v8 = v10;
    uint64_t v9 = 0LL;
  }

  else if (v2 == 4)
  {
    uint64_t v3 = objc_alloc(&OBJC_CLASS___IDSDeliveryContext);
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) toDeviceID]);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 48)));
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 57)));
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [*(id *)(a1 + 32) messageState]));
    id v8 = v3;
    uint64_t v9 = 16LL;
  }

  else
  {
    id v11 = objc_alloc(&OBJC_CLASS___IDSDeliveryContext);
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) toDeviceID]);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 48)));
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 57)));
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [*(id *)(a1 + 32) messageState]));
    id v8 = v11;
    uint64_t v9 = 2LL;
  }

  id v12 = -[IDSDeliveryContext initWithResponseCode:deviceID:currentAverageRTT:isDeviceBlackedOut:localMessageState:]( v8,  "initWithResponseCode:deviceID:currentAverageRTT:isDeviceBlackedOut:localMessageState:",  v9,  v4,  v5,  v6,  v7);

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100256CE0(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 8LL));
  char v5 = objc_opt_respondsToSelector( WeakRetained,  "connection:messageReceived:topic:command:fromID:messageID:wantsAppAck:expectsPeerResponse:peerResponseIdentifie r:messageUUID:isCompressed:didWakeHint:");

  if ((v5 & 1) != 0)
  {
    id v15 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 8LL));
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = JWEncodeDictionary(*(void *)(a1 + 40));
    id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    uint64_t v9 = *(void *)(a1 + 48);
    uint64_t v10 = *(void *)(a1 + 56);
    uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 200LL);
    id v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a2));
    BYTE1(v14) = *(_BYTE *)(a1 + 82);
    LOBYTE(v14) = 0;
    LOWORD(v13) = *(_WORD *)(a1 + 80);
    objc_msgSend( v15,  "connection:messageReceived:topic:command:fromID:messageID:wantsAppAck:expectsPeerResponse:peerResponseIdentifier:m essageUUID:isCompressed:didWakeHint:",  v6,  v8,  v9,  v10,  v11,  v12,  v13,  *(void *)(a1 + 64),  *(void *)(a1 + 72),  v14);
  }

void sub_100256FC8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(id *)(a1 + 32);
  if (v3)
  {
    uint64_t v5 = objc_claimAutoreleasedReturnValue(+[IDSSocketPairMessage messageWithData:](&OBJC_CLASS___IDSSocketPairMessage, "messageWithData:", v3));

    id v4 = (id)v5;
  }

  uint64_t v6 = OSLogHandleForIDSCategory("UTunConnection");
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    unsigned int v9 = [v4 command];
    uint64_t v10 = *(void *)(a1 + 40);
    if (v4 == *(id *)(a1 + 32)) {
      uint64_t v11 = @"NO";
    }
    else {
      uint64_t v11 = @"YES";
    }
    *(_DWORD *)buf = 138413314;
    id v22 = v4;
    __int16 v23 = 2112;
    uint64_t v24 = v8;
    __int16 v25 = 1024;
    unsigned int v26 = v9;
    __int16 v27 = 2112;
    uint64_t v28 = v10;
    __int16 v29 = 2112;
    id v30 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "Got incoming data message {dataMessage: %@, rawMessage: %@, command %d, self: %@, didDecrypt: %@}",  buf,  0x30u);
  }

  if (os_log_shim_legacy_logging_enabled(v12)
    && _IDSShouldLog(1LL, @"UTunConnection"))
  {
    uint64_t v13 = *(void *)(a1 + 32);
    unsigned int v14 = [v4 command];
    if (v4 == *(id *)(a1 + 32)) {
      id v15 = @"NO";
    }
    else {
      id v15 = @"YES";
    }
    uint64_t v19 = *(void *)(a1 + 40);
    uint64_t v20 = v15;
    uint64_t v17 = v13;
    uint64_t v18 = v14;
    id v16 = v4;
    _IDSLogV( 1LL,  @"IDSFoundation",  @"UTunConnection",  @"Got incoming data message {dataMessage: %@, rawMessage: %@, command %d, self: %@, didDecrypt: %@}");
  }

  objc_msgSend(*(id *)(a1 + 40), "_processDecryptedMessage:", v4, v16, v17, v18, v19, v20);
}

LABEL_123:
      if (v326)
      {
LABEL_124:
        __int16 v70 = OSLogHandleForTransportCategory("UTunConnection");
        int v71 = (os_log_s *)objc_claimAutoreleasedReturnValue(v70);
        if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412546;
          *(void *)v328 = v233;
          *(_WORD *)&v328[8] = 2112;
          *(double *)&v328[10] = key;
          _os_log_impl( (void *)&_mh_execute_header,  v71,  OS_LOG_TYPE_DEFAULT,  "Remote instance changed while receiving message %@ with topic %@ - continue and dispatch reconnect",  buf,  0x16u);
        }

        id v73 = os_log_shim_legacy_logging_enabled(v72);
        if ((_DWORD)v73)
        {
          if (_IDSShouldLogTransport(v73))
          {
            v215 = v233;
            v219 = key;
            _IDSLogTransport( @"UTunConnection",  @"IDS",  @"Remote instance changed while receiving message %@ with topic %@ - continue and dispatch reconnect");
            if (_IDSShouldLog(0LL, @"UTunConnection"))
            {
              v215 = v233;
              v219 = key;
              _IDSLogV( 0LL,  @"IDSFoundation",  @"UTunConnection",  @"Remote instance changed while receiving message %@ with topic %@ - continue and dispatch reconnect");
            }
          }
        }

        -[IDSUTunConnection _nonThreadSafeStopConnection]( self,  "_nonThreadSafeStopConnection",  v215,  *(void *)&v219,  *(void *)&v220,  v221,  v222);
        uint64_t v74 = dispatch_time(0LL, 0LL);
        uint64_t v75 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDaemonPriorityQueueController sharedInstance]( &OBJC_CLASS___IDSDaemonPriorityQueueController,  "sharedInstance"));
        id v76 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v75 queueForPriority:self->_priority]);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472LL;
        block[2] = sub_10025A020;
        block[3] = &unk_1008F6010;
        void block[4] = self;
        dispatch_after(v74, v76, block);
      }

LABEL_176:
      goto LABEL_177;
    }

    if (!self->_supportDynamicServicesOptimization)
    {
      uint64_t v57 = (void *)objc_claimAutoreleasedReturnValue(-[IDSUTunConnection _UTunDeliveryController](self, "_UTunDeliveryController"));
      key = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue([v57 topicForStreamID:v224]));

      uint64_t v58 = OSLogHandleForIDSCategory("Warning");
      uint64_t v59 = (os_log_s *)objc_claimAutoreleasedReturnValue(v58);
      if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)v328 = (_DWORD)v224;
        *(_WORD *)&v328[4] = 2112;
        *(double *)&v328[6] = key;
        _os_log_impl( (void *)&_mh_execute_header,  v59,  OS_LOG_TYPE_ERROR,  "UTunConnection Error: missing expected message topic!! (no optimization) streamID %u  (topicForStreamID %@)",  buf,  0x12u);
      }

      id v61 = (int)v224;
      if (os_log_shim_legacy_logging_enabled(v60))
      {
        _IDSWarnV( @"IDSFoundation",  @"UTunConnection Error: missing expected message topic!! (no optimization) streamID %u  (topicForStreamID %@)");
        _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"UTunConnection Error: missing expected message topic!! (no optimization) streamID %u  (topicForStreamID %@)");
        v215 = v224;
        v219 = key;
        _IDSLogTransport( @"Warning",  @"IDS",  @"UTunConnection Error: missing expected message topic!! (no optimization) streamID %u  (topicForStreamID %@)");
        id v61 = (int)v224;
      }

      uint64_t v62 = OSLogHandleForIDSCategory("Warning");
      uint64_t v63 = (os_log_s *)objc_claimAutoreleasedReturnValue(v62);
      if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)v328 = v61;
        _os_log_impl( (void *)&_mh_execute_header,  v63,  OS_LOG_TYPE_ERROR,  "*************** SERVICEMAP ERROR: FAILED TO GET TOPIC FOR streamID %u ****************",  buf,  8u);
      }

      if (os_log_shim_legacy_logging_enabled(v64))
      {
        _IDSWarnV( @"IDSFoundation",  @"*************** SERVICEMAP ERROR: FAILED TO GET TOPIC FOR streamID %u ****************");
        _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"*************** SERVICEMAP ERROR: FAILED TO GET TOPIC FOR streamID %u ****************");
        v215 = v224;
        *(void *)&id v65 = _IDSLogTransport( @"Warning",  @"IDS",  @"*************** SERVICEMAP ERROR: FAILED TO GET TOPIC FOR streamID %u ****************").n128_u64[0];
      }

      -[IDSUTunPeerServiceMap dumpServiceMap]( self->_incomingServiceMap,  "dumpServiceMap",  v65,  v215,  *(void *)&v219,  *(void *)&v220,  v221,  v222);
      -[IDSUTunPeerServiceMap dumpServiceMap](self->_outgoingServiceMap, "dumpServiceMap");
      if (self->_shouldAbortOnMissingTopic)
      {
        uint64_t v66 = sleep(1u);
        throwsIDSAbortException();
      }

      goto LABEL_176;
    }

    if (!(_DWORD)v224)
    {
      key = 0.0;
      goto LABEL_123;
    }

    incomingServiceMap = self->_incomingServiceMap;
    void block[5] = 0LL;
    __int128 v52 = -[IDSUTunPeerServiceMap translateStreamID:toServiceName:remoteInstanceID:remoteInstanceIDChanged:]( incomingServiceMap,  "translateStreamID:toServiceName:remoteInstanceID:remoteInstanceIDChanged:");
    key = COERCE_DOUBLE(0LL);
    if ((v52 & 1) != 0)
    {
      if ((objc_opt_respondsToSelector(v4, "sequenceNumber") & 1) != 0)
      {
        __int128 v53 = OSLogHandleForIDSCategory("UTunConnection");
        uint64_t v54 = (os_log_s *)objc_claimAutoreleasedReturnValue(v53);
        if (os_log_type_enabled(v54, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v55 = [v4 sequenceNumber];
          *(_DWORD *)buf = 138413058;
          *(void *)v328 = v233;
          *(_WORD *)&v328[8] = 2112;
          *(double *)&v328[10] = key;
          *(_WORD *)&v328[18] = 1024;
          *(_DWORD *)&v328[20] = (_DWORD)v224;
          *(_WORD *)&v328[24] = 1024;
          *(_DWORD *)&v328[26] = v55;
          _os_log_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_DEBUG,  "Incoming message %@ servicename-found %@ streamID %u sequenceNumber %u",  buf,  0x22u);
        }

        if (os_log_shim_legacy_logging_enabled(v56)
          && _IDSShouldLog(1LL, @"UTunConnection"))
        {
          v220 = *(double *)&v224;
          v221 = (__CFString *)[v4 sequenceNumber];
          v215 = v233;
          v219 = key;
          _IDSLogV( 1LL,  @"IDSFoundation",  @"UTunConnection",  @"Incoming message %@ servicename-found %@ streamID %u sequenceNumber %u");
        }

        kdebug_trace( 722010252,  objc_msgSend(v4, "sequenceNumber", v215, *(void *)&v219, *(void *)&v220, v221, v222),  0,  0,  0);
      }

      else
      {
        id v177 = OSLogHandleForIDSCategory("UTunConnection");
        id v178 = (os_log_s *)objc_claimAutoreleasedReturnValue(v177);
        if (os_log_type_enabled(v178, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138412802;
          *(void *)v328 = v233;
          *(_WORD *)&v328[8] = 2112;
          *(double *)&v328[10] = key;
          *(_WORD *)&v328[18] = 1024;
          *(_DWORD *)&v328[20] = (_DWORD)v224;
          _os_log_impl( (void *)&_mh_execute_header,  v178,  OS_LOG_TYPE_DEBUG,  "Incoming message %@ servicename-found %@ streamID %u",  buf,  0x1Cu);
        }

        if (os_log_shim_legacy_logging_enabled(v179)
          && _IDSShouldLog(1LL, @"UTunConnection"))
        {
          v220 = *(double *)&v224;
          v215 = v233;
          v219 = key;
          _IDSLogV( 1LL,  @"IDSFoundation",  @"UTunConnection",  @"Incoming message %@ servicename-found %@ streamID %u");
        }
      }

      goto LABEL_123;
    }

    __int16 v191 = (void *)objc_claimAutoreleasedReturnValue(-[IDSUTunConnection _UTunDeliveryController](self, "_UTunDeliveryController"));
    double v192 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue([v191 topicForStreamID:v224]));

    __int16 v193 = OSLogHandleForIDSCategory("Warning");
    v194 = (os_log_s *)objc_claimAutoreleasedReturnValue(v193);
    if (os_log_type_enabled(v194, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)v328 = (_DWORD)v224;
      *(_WORD *)&v328[4] = 2112;
      *(double *)&v328[6] = v192;
      _os_log_impl( (void *)&_mh_execute_header,  v194,  OS_LOG_TYPE_ERROR,  "UTunConnection Error: missing expected message topic!! (supports optimization) streamID %u  (topicForStreamID %@)",  buf,  0x12u);
    }

    id v196 = (int)v224;
    if (os_log_shim_legacy_logging_enabled(v195))
    {
      _IDSWarnV( @"IDSFoundation",  @"UTunConnection Error: missing expected message topic!! (supports optimization) streamID %u  (topicForStreamID %@)");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"UTunConnection Error: missing expected message topic!! (supports optimization) streamID %u  (topicForStreamID %@)");
      v215 = v224;
      v219 = v192;
      _IDSLogTransport( @"Warning",  @"IDS",  @"UTunConnection Error: missing expected message topic!! (supports optimization) streamID %u  (topicForStreamID %@)");
      id v196 = (int)v224;
    }

    uint64_t v197 = OSLogHandleForIDSCategory("Warning");
    v198 = (os_log_s *)objc_claimAutoreleasedReturnValue(v197);
    if (os_log_type_enabled(v198, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)v328 = v196;
      _os_log_impl( (void *)&_mh_execute_header,  v198,  OS_LOG_TYPE_ERROR,  "*************** SERVICEMAP ERROR: FAILED TO GET TOPIC FOR streamID %u ****************",  buf,  8u);
    }

    if (os_log_shim_legacy_logging_enabled(v199))
    {
      _IDSWarnV( @"IDSFoundation",  @"*************** SERVICEMAP ERROR: FAILED TO GET TOPIC FOR streamID %u ****************");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"*************** SERVICEMAP ERROR: FAILED TO GET TOPIC FOR streamID %u ****************");
      v215 = v224;
      *(void *)&id v200 = _IDSLogTransport( @"Warning",  @"IDS",  @"*************** SERVICEMAP ERROR: FAILED TO GET TOPIC FOR streamID %u ****************").n128_u64[0];
    }

    -[IDSUTunPeerServiceMap dumpServiceMap]( self->_incomingServiceMap,  "dumpServiceMap",  v200,  v215,  *(void *)&v219,  *(void *)&v220,  v221,  v222);
    -[IDSUTunPeerServiceMap dumpServiceMap](self->_outgoingServiceMap, "dumpServiceMap");
    if (self->_shouldAbortOnMissingTopic)
    {
      uint64_t v201 = sleep(1u);
      throwsIDSAbortException();
    }

    -[IDSUTunConnection _nonThreadSafeStopConnection](self, "_nonThreadSafeStopConnection", v218);
    -[IDSUTunConnection _checkAndStartConnection](self, "_checkAndStartConnection");
  }

                      CSDBSqliteDatabaseSetVersion(a1, 8009LL);
                      uint64_t v101 = OSLogHandleForIDSCategory("IDSDMessageStore");
                      id v102 = (os_log_s *)objc_claimAutoreleasedReturnValue(v101);
                      if (os_log_type_enabled(v102, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_WORD *)buf = 0;
                        _os_log_impl( (void *)&_mh_execute_header,  v102,  OS_LOG_TYPE_DEFAULT,  "Duet columns, payload size added to outgoing message record",  buf,  2u);
                      }

                      if (os_log_shim_legacy_logging_enabled(v103)
                        && _IDSShouldLog(0LL, @"IDSDMessageStore"))
                      {
                        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDMessageStore",  @"Duet columns, payload size added to outgoing message record");
                      }

                      uint64_t v104 = sub_1003B3B08( a2,  @"Unable to drop legacy table",  @"Successfully dropped legacy table",  @"DROP TABLE outgoing_message");
                      CSDBRecordStoreCreateTablesForClass(&off_1009030C8, a2, 0LL);
                      if (!v104) {
                        goto LABEL_425;
                      }
                      CSDBSqliteDatabaseSetVersion(a1, 8010LL);
                      goto LABEL_183;
                    }

LABEL_177:
}

void sub_100259D00(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {

    objc_end_catch();
    JUMPOUT(0x1002591A8LL);
  }

  _Block_object_dispose(&STACK[0x280], 8);
  _Unwind_Resume(a1);
}

id sub_10025A020(uint64_t a1)
{
  return [*(id *)(a1 + 32) _checkAndStartConnection];
}

void sub_10025A028(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = OSLogHandleForTransportCategory("IDSUTunConnection");
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    unsigned int v38 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "Broadcast: incoming message sequence number %u \n",  buf,  8u);
  }

  uint64_t v7 = os_log_shim_legacy_logging_enabled(v6);
  if ((_DWORD)v7 && _IDSShouldLogTransport(v7))
  {
    uint64_t v29 = a2;
    _IDSLogTransport( @"IDSUTunConnection",  @"IDS",  @"Broadcast: incoming message sequence number %u \n");
  }

  if ((objc_opt_respondsToSelector(*(void *)(a1 + 32), "compressed") & 1) != 0
    && ([*(id *)(a1 + 32) compressed] & 1) == 0)
  {
    id v8 = *(id *)(a1 + 40);
    int v36 = 0;
  }

  else
  {
    id v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_FTOptionallyDecompressData", v29));
    int v36 = 1;
  }

  objc_msgSend( *(id *)(a1 + 48),  "_addIncomingMessageSize:forTopic:",  objc_msgSend(v8, "length", v29),  *(void *)(a1 + 56));
  id v9 = objc_msgSend( [IDSLocalDeliveryMessageReceivedMetric alloc],  "initWithService:isFromDefaultPairedDevice:messageSize:linkType:priority:",  *(void *)(a1 + 56),  *(_BYTE *)(a1 + 90) != 0,  objc_msgSend(v8, "length"),  objc_msgSend(*(id *)(a1 + 48), "_currentLink"),  *(void *)(*(void *)(a1 + 48) + 192));
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[IDSCoreAnalyticsLogger defaultLogger](&OBJC_CLASS___IDSCoreAnalyticsLogger, "defaultLogger"));
  [v10 logMetric:v9];

  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[IDSAWDLogging sharedInstance](&OBJC_CLASS___IDSAWDLogging, "sharedInstance"));
  objc_msgSend( v11,  "messageReceivedForService:isFromDefaultPairedDevice:messageSize:linkType:priority:",  *(void *)(a1 + 56),  *(_BYTE *)(a1 + 90) != 0,  objc_msgSend(v8, "length"),  objc_msgSend(*(id *)(a1 + 48), "_currentLink"),  *(void *)(*(void *)(a1 + 48) + 192));

  uint64_t v12 = OSLogHandleForIDSCategory("UTunConnection");
  uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v14 = [*(id *)(a1 + 40) length];
    int v15 = *(unsigned __int16 *)(a1 + 88);
    id v16 = @"NO";
    *(_DWORD *)buf = 67109890;
    if (v36) {
      id v16 = @"YES";
    }
    unsigned int v38 = v14;
    __int16 v39 = 1024;
    int v40 = v15;
    __int16 v41 = 1024;
    int v42 = a2;
    __int16 v43 = 2112;
    id v44 = v16;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "* Receiving local message payload of size: %d for streamID: %d  messageSequenceNumber %d  compressed %@",  buf,  0x1Eu);
  }

  if (os_log_shim_legacy_logging_enabled(v17)
    && _IDSShouldLog(1LL, @"UTunConnection"))
  {
    id v18 = [*(id *)(a1 + 40) length];
    uint64_t v19 = @"NO";
    if (v36) {
      uint64_t v19 = @"YES";
    }
    uint64_t v33 = a2;
    id v34 = v19;
    id v30 = v18;
    uint64_t v32 = *(unsigned __int16 *)(a1 + 88);
    _IDSLogV( 1LL,  @"IDSFoundation",  @"UTunConnection",  @"* Receiving local message payload of size: %d for streamID: %d  messageSequenceNumber %d  compressed %@");
  }

  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 48) + 8LL));
  char v21 = objc_opt_respondsToSelector( WeakRetained,  "connection:messageReceived:topic:command:fromID:messageID:wantsAppAck:expectsPeerResponse:peerResponseIdentifi er:messageUUID:isCompressed:didWakeHint:");

  if ((v21 & 1) != 0)
  {
    id v22 = objc_loadWeakRetained((id *)(*(void *)(a1 + 48) + 8LL));
    uint64_t v23 = *(void *)(a1 + 48);
    uint64_t v24 = *(void *)(a1 + 56);
    uint64_t v25 = *(void *)(a1 + 64);
    if (*(_BYTE *)(a1 + 90)) {
      unsigned int v26 = (uint64_t *)&kIDSDefaultPairedDeviceID;
    }
    else {
      unsigned int v26 = (uint64_t *)(*(void *)(a1 + 48) + 200LL);
    }
    uint64_t v27 = *v26;
    uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  a2,  v30,  v32,  v33,  v34));
    BYTE1(v35) = *(_BYTE *)(a1 + 93);
    LOBYTE(v35) = v36;
    LOWORD(v31) = *(_WORD *)(a1 + 91);
    objc_msgSend( v22,  "connection:messageReceived:topic:command:fromID:messageID:wantsAppAck:expectsPeerResponse:peerResponseIdentifier:m essageUUID:isCompressed:didWakeHint:",  v23,  v8,  v24,  v25,  v27,  v28,  v31,  *(void *)(a1 + 72),  *(void *)(a1 + 80),  v35);
  }
}

void sub_10025A474(uint64_t a1, void *a2)
{
  int v2 = (int)a2;
  uint64_t v3 = OSLogHandleForTransportCategory("IDSUTunConnection");
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    LODWORD(v53) = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Broadcast: incoming protobuf sequence number %u \n",  buf,  8u);
  }

  uint64_t v6 = os_log_shim_legacy_logging_enabled(v5);
  if ((_DWORD)v6 && _IDSShouldLogTransport(v6))
  {
    id v45 = a2;
    _IDSLogTransport( @"IDSUTunConnection",  @"IDS",  @"Broadcast: incoming protobuf sequence number %u \n");
  }

  if ((objc_opt_respondsToSelector(*(void *)(a1 + 32), "compressed") & 1) != 0) {
    unsigned int v7 = [*(id *)(a1 + 32) compressed];
  }
  else {
    unsigned int v7 = 1;
  }
  uint64_t v8 = OSLogHandleForIDSCategory("UTunConnection");
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v10 = *(void **)(a1 + 40);
    int v11 = *(unsigned __int16 *)(a1 + 88);
    uint64_t v12 = @"NO";
    if (v7) {
      uint64_t v12 = @"YES";
    }
    *(_DWORD *)buf = 138412802;
    id v53 = v10;
    __int16 v54 = 1024;
    LODWORD(v55[0]) = v11;
    WORD2(v55[0]) = 2112;
    *(void *)((char *)v55 + 6) = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "* Receiving local protobuf %@ for streamID %d  compressed %@",  buf,  0x1Cu);
  }

  if (os_log_shim_legacy_logging_enabled(v13)
    && _IDSShouldLog(1LL, @"UTunConnection"))
  {
    unsigned int v14 = @"NO";
    if (v7) {
      unsigned int v14 = @"YES";
    }
    id v47 = (id)*(unsigned __int16 *)(a1 + 88);
    __int16 v48 = v14;
    id v45 = *(id *)(a1 + 40);
    _IDSLogV( 1LL,  @"IDSFoundation",  @"UTunConnection",  @"* Receiving local protobuf %@ for streamID %d  compressed %@");
  }

  if (v7)
  {
    int v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) data]);
    id v16 = (void *)objc_claimAutoreleasedReturnValue([v15 _FTOptionallyDecompressData]);

    uint64_t v17 = OSLogHandleForIDSCategory("UTunConnection");
    id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) data]);
      id v20 = [v19 length];
      id v21 = [v16 length];
      *(_DWORD *)buf = 134218240;
      id v53 = v20;
      __int16 v54 = 2048;
      v55[0] = v21;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Decompressed local protobuf message data from: %lu  to: %lu",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v22)
      && _IDSShouldLog(0LL, @"UTunConnection"))
    {
      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) data]);
      id v45 = [v23 length];
      id v47 = [v16 length];
      _IDSLogV( 0LL,  @"IDSFoundation",  @"UTunConnection",  @"Decompressed local protobuf message data from: %lu  to: %lu");
    }

    objc_msgSend(*(id *)(a1 + 40), "setData:", v16, v45, v47, v48);
  }

  uint64_t v24 = *(void **)(a1 + 48);
  uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "data", v45));
  objc_msgSend(v24, "_addIncomingMessageSize:forTopic:", objc_msgSend(v25, "length"), *(void *)(a1 + 56));

  id v26 = objc_alloc(&OBJC_CLASS___IDSLocalDeliveryMessageReceivedMetric);
  uint64_t v27 = *(void *)(a1 + 56);
  BOOL v28 = *(_BYTE *)(a1 + 90) != 0;
  uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) data]);
  id v30 = objc_msgSend( v26,  "initWithService:isFromDefaultPairedDevice:messageSize:linkType:priority:",  v27,  v28,  objc_msgSend(v29, "length"),  objc_msgSend(*(id *)(a1 + 48), "_currentLink"),  *(void *)(*(void *)(a1 + 48) + 192));

  uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(+[IDSCoreAnalyticsLogger defaultLogger](&OBJC_CLASS___IDSCoreAnalyticsLogger, "defaultLogger"));
  [v31 logMetric:v30];

  uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue(+[IDSAWDLogging sharedInstance](&OBJC_CLASS___IDSAWDLogging, "sharedInstance"));
  uint64_t v33 = *(void *)(a1 + 56);
  BOOL v34 = *(_BYTE *)(a1 + 90) != 0;
  uint64_t v35 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) data]);
  objc_msgSend( v32,  "messageReceivedForService:isFromDefaultPairedDevice:messageSize:linkType:priority:",  v33,  v34,  objc_msgSend((id)v35, "length"),  objc_msgSend(*(id *)(a1 + 48), "_currentLink"),  *(void *)(*(void *)(a1 + 48) + 192));

  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 48) + 8LL));
  LOBYTE(v35) = objc_opt_respondsToSelector( WeakRetained,  "connection:protobufReceived:topic:command:fromID:messageID:wantsAppAck:expectsPeerResponse:peerRespons eIdentifier:messageUUID:isCompressed:didWakeHint:");

  if ((v35 & 1) != 0)
  {
    id v37 = objc_loadWeakRetained((id *)(*(void *)(a1 + 48) + 8LL));
    uint64_t v38 = *(void *)(a1 + 48);
    uint64_t v39 = *(void *)(a1 + 40);
    uint64_t v40 = *(void *)(a1 + 56);
    uint64_t v41 = *(void *)(a1 + 64);
    if (*(_BYTE *)(a1 + 90)) {
      int v42 = (uint64_t *)&kIDSDefaultPairedDeviceID;
    }
    else {
      int v42 = (uint64_t *)(*(void *)(a1 + 48) + 200LL);
    }
    uint64_t v43 = *v42;
    id v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a2));
    BYTE1(v49) = *(_BYTE *)(a1 + 93);
    LOBYTE(v49) = v7;
    LOWORD(v46) = *(_WORD *)(a1 + 91);
    objc_msgSend( v37,  "connection:protobufReceived:topic:command:fromID:messageID:wantsAppAck:expectsPeerResponse:peerResponseIdentifier: messageUUID:isCompressed:didWakeHint:",  v38,  v39,  v40,  v41,  v43,  v44,  v46,  *(void *)(a1 + 72),  *(void *)(a1 + 80),  v49);
  }
}

void sub_10025AA10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = OSLogHandleForIDSCategory("UTunConnection");
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    unsigned int v6 = [*(id *)(a1 + 32) length];
    int v7 = *(unsigned __int16 *)(a1 + 80);
    if (*(_BYTE *)(a1 + 82)) {
      uint64_t v8 = @"YES";
    }
    else {
      uint64_t v8 = @"NO";
    }
    *(_DWORD *)buf = 67109890;
    unsigned int v32 = v6;
    __int16 v33 = 1024;
    int v34 = v7;
    __int16 v35 = 1024;
    int v36 = a2;
    __int16 v37 = 2112;
    uint64_t v38 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "* Receiving local data payload of size: %d   for streamID: %d  messageSequenceNumber %d  compressed %@",  buf,  0x1Eu);
  }

  if (os_log_shim_legacy_logging_enabled(v9) && _IDSShouldLog(1LL, @"UTunConnection"))
  {
    id v10 = [*(id *)(a1 + 32) length];
    if (*(_BYTE *)(a1 + 82)) {
      int v11 = @"YES";
    }
    else {
      int v11 = @"NO";
    }
    uint64_t v28 = a2;
    uint64_t v29 = v11;
    id v25 = v10;
    uint64_t v27 = *(unsigned __int16 *)(a1 + 80);
    _IDSLogV( 1LL,  @"IDSFoundation",  @"UTunConnection",  @"* Receiving local data payload of size: %d   for streamID: %d  messageSequenceNumber %d  compressed %@");
  }

  objc_msgSend( *(id *)(a1 + 40),  "_addIncomingMessageSize:forTopic:",  objc_msgSend(*(id *)(a1 + 32), "length", v25, v27, v28, v29),  *(void *)(a1 + 48));
  id v12 = objc_msgSend( [IDSLocalDeliveryMessageReceivedMetric alloc],  "initWithService:isFromDefaultPairedDevice:messageSize:linkType:priority:",  *(void *)(a1 + 48),  *(_BYTE *)(a1 + 83) != 0,  objc_msgSend(*(id *)(a1 + 32), "length"),  objc_msgSend(*(id *)(a1 + 40), "_currentLink"),  *(void *)(*(void *)(a1 + 40) + 192));
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[IDSCoreAnalyticsLogger defaultLogger](&OBJC_CLASS___IDSCoreAnalyticsLogger, "defaultLogger"));
  [v13 logMetric:v12];

  unsigned int v14 = (void *)objc_claimAutoreleasedReturnValue(+[IDSAWDLogging sharedInstance](&OBJC_CLASS___IDSAWDLogging, "sharedInstance"));
  objc_msgSend( v14,  "messageReceivedForService:isFromDefaultPairedDevice:messageSize:linkType:priority:",  *(void *)(a1 + 48),  *(_BYTE *)(a1 + 83) != 0,  objc_msgSend(*(id *)(a1 + 32), "length"),  objc_msgSend(*(id *)(a1 + 40), "_currentLink"),  *(void *)(*(void *)(a1 + 40) + 192));

  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 8LL));
  char v16 = objc_opt_respondsToSelector( WeakRetained,  "connection:dataReceived:topic:command:fromID:messageID:wantsAppAck:expectsPeerResponse:peerResponseIdentifier: messageUUID:isCompressed:didWakeHint:");

  if ((v16 & 1) != 0)
  {
    id v17 = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 8LL));
    uint64_t v18 = *(void *)(a1 + 40);
    uint64_t v19 = *(void *)(a1 + 32);
    uint64_t v20 = *(void *)(a1 + 48);
    uint64_t v21 = *(void *)(a1 + 56);
    if (*(_BYTE *)(a1 + 83)) {
      uint64_t v22 = (uint64_t *)&kIDSDefaultPairedDeviceID;
    }
    else {
      uint64_t v22 = (uint64_t *)(v18 + 200);
    }
    uint64_t v23 = *v22;
    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a2));
    BYTE1(v30) = *(_BYTE *)(a1 + 86);
    LOBYTE(v30) = *(_BYTE *)(a1 + 82);
    LOWORD(v26) = *(_WORD *)(a1 + 84);
    objc_msgSend( v17,  "connection:dataReceived:topic:command:fromID:messageID:wantsAppAck:expectsPeerResponse:peerResponseIdentifier:mess ageUUID:isCompressed:didWakeHint:",  v18,  v19,  v20,  v21,  v23,  v24,  v26,  *(void *)(a1 + 64),  *(void *)(a1 + 72),  v30);
  }
}

void sub_10025AD74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  _DWORD v11[2] = sub_10025AE0C;
  v11[3] = &unk_1008FEF50;
  uint64_t v8 = *(void **)(a1 + 32);
  id v9 = *(id *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  id v12 = v9;
  uint64_t v13 = v10;
  uint64_t v14 = a4;
  uint64_t v15 = a3;
  [v8 _processMessage:a2 withSequenceNumberBlock:v11];
}

id sub_10025AE0C(uint64_t a1, int a2)
{
  id result = [*(id *)(a1 + 32) sequenceNumber];
  if ((_DWORD)result == a2)
  {
    uint64_t v5 = *(void *)(a1 + 56);
    **(_BYTE **)(a1 + 4_Block_object_dispose(va, 8) = 1;
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = v5;
  }

  return result;
}

void sub_10025AE54(uint64_t a1)
{
  int v2 = objc_alloc(&OBJC_CLASS___IDSDeliveryContext);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) toDeviceID]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 48)));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 56)));
  unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [*(id *)(a1 + 32) messageState]));
  int v7 = -[IDSDeliveryContext initWithResponseCode:deviceID:currentAverageRTT:isDeviceBlackedOut:localMessageState:]( v2,  "initWithResponseCode:deviceID:currentAverageRTT:isDeviceBlackedOut:localMessageState:",  12LL,  v3,  v4,  v5,  v6);

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10025AF38(uint64_t a1)
{
  int v2 = objc_alloc(&OBJC_CLASS___IDSDeliveryContext);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) toDeviceID]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 48)));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 56)));
  unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [*(id *)(a1 + 32) messageState]));
  int v7 = -[IDSDeliveryContext initWithResponseCode:deviceID:currentAverageRTT:isDeviceBlackedOut:localMessageState:]( v2,  "initWithResponseCode:deviceID:currentAverageRTT:isDeviceBlackedOut:localMessageState:",  0LL,  v3,  v4,  v5,  v6);

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10025B01C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = OSLogHandleForTransportCategory("IDSUTunConnection");
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109120;
    int v18 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "Broadcast: incoming app ack sequence number %u \n",  buf,  8u);
  }

  uint64_t v7 = os_log_shim_legacy_logging_enabled(v6);
  if ((_DWORD)v7 && _IDSShouldLogTransport(v7))
  {
    uint64_t v16 = a2;
    _IDSLogTransport( @"IDSUTunConnection",  @"IDS",  @"Broadcast: incoming app ack sequence number %u \n");
  }

  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 8LL));
  char v9 = objc_opt_respondsToSelector( WeakRetained,  "connection:receivedAppLevelAckWithTopic:fromID:messageID:peerResponseIdentifier:");

  if ((v9 & 1) != 0)
  {
    id v10 = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 8LL));
    uint64_t v11 = *(void *)(a1 + 32);
    uint64_t v12 = *(void *)(a1 + 40);
    if (*(_BYTE *)(a1 + 56)) {
      uint64_t v13 = (uint64_t *)&kIDSDefaultPairedDeviceID;
    }
    else {
      uint64_t v13 = (uint64_t *)(v11 + 200);
    }
    uint64_t v14 = *v13;
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a2, v16));
    [v10 connection:v11 receivedAppLevelAckWithTopic:v12 fromID:v14 messageID:v15 peerResponseIdentifier:*(void *)(a1 + 48)];
  }

void sub_10025B1BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = OSLogHandleForTransportCategory("UTunConnection");
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v6 = [*(id *)(a1 + 32) length];
    int v7 = *(unsigned __int16 *)(a1 + 80);
    if (*(_BYTE *)(a1 + 82)) {
      uint64_t v8 = @"YES";
    }
    else {
      uint64_t v8 = @"NO";
    }
    *(_DWORD *)buf = 67109890;
    unsigned int v28 = v6;
    __int16 v29 = 1024;
    int v30 = v7;
    __int16 v31 = 1024;
    int v32 = a2;
    __int16 v33 = 2112;
    int v34 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "* GOT SOCKET PAIR COMMAND MESSAGE OUTGOING NICE PROXY Receiving local data payload of size: %d   for streamID: %d messageSequenceNumber %d  compressed %@",  buf,  0x1Eu);
  }

  uint64_t v10 = os_log_shim_legacy_logging_enabled(v9);
  if ((_DWORD)v10 && _IDSShouldLogTransport(v10))
  {
    id v11 = [*(id *)(a1 + 32) length];
    uint64_t v12 = *(_BYTE *)(a1 + 82) ? @"YES" : @"NO";
    uint64_t v26 = v12;
    id v24 = v11;
    uint64_t v25 = *(unsigned __int16 *)(a1 + 80);
    _IDSLogTransport( @"UTunConnection",  @"IDS",  @"* GOT SOCKET PAIR COMMAND MESSAGE OUTGOING NICE PROXY Receiving local data payload of size: %d   for streamID: %d  messageSequenceNumber %d  compressed %@");
    if (_IDSShouldLog(0LL, @"UTunConnection"))
    {
      id v13 = objc_msgSend(*(id *)(a1 + 32), "length", v24, v25, a2, v26);
      if (*(_BYTE *)(a1 + 82)) {
        uint64_t v14 = @"YES";
      }
      else {
        uint64_t v14 = @"NO";
      }
      uint64_t v26 = (__CFString *)v14;
      id v24 = v13;
      _IDSLogV( 0LL,  @"IDSFoundation",  @"UTunConnection",  @"* GOT SOCKET PAIR COMMAND MESSAGE OUTGOING NICE PROXY Receiving local data payload of size: %d   for streamID: %d  messageSequenceNumber %d  compressed %@");
    }
  }

  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 8LL));
  char v16 = objc_opt_respondsToSelector( WeakRetained,  "connection:dataReceived:topic:command:fromID:messageID:wantsAppAck:expectsPeerResponse:peerResponseIdentifier: messageUUID:isCompressed:didWakeHint:");

  if ((v16 & 1) != 0)
  {
    id v17 = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 8LL));
    uint64_t v18 = *(void *)(a1 + 40);
    uint64_t v19 = *(void *)(a1 + 32);
    uint64_t v20 = *(void *)(a1 + 48);
    uint64_t v21 = *(void *)(a1 + 56);
    uint64_t v22 = *(void *)(v18 + 200);
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a2));
    BYTE1(v26) = *(_BYTE *)(a1 + 85);
    LOBYTE(v26) = *(_BYTE *)(a1 + 82);
    LOWORD(v24) = *(_WORD *)(a1 + 83);
    objc_msgSend( v17,  "connection:dataReceived:topic:command:fromID:messageID:wantsAppAck:expectsPeerResponse:peerResponseIdentifier:mess ageUUID:isCompressed:didWakeHint:",  v18,  v19,  v20,  v21,  v22,  v23,  v24,  *(void *)(a1 + 64),  *(void *)(a1 + 72),  v26);
  }

void sub_10025B448(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = OSLogHandleForTransportCategory("UTunConnection");
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v6 = [*(id *)(a1 + 32) length];
    int v7 = *(unsigned __int16 *)(a1 + 80);
    if (*(_BYTE *)(a1 + 82)) {
      uint64_t v8 = @"YES";
    }
    else {
      uint64_t v8 = @"NO";
    }
    *(_DWORD *)buf = 67109890;
    unsigned int v31 = v6;
    __int16 v32 = 1024;
    int v33 = v7;
    __int16 v34 = 1024;
    int v35 = a2;
    __int16 v36 = 2112;
    __int16 v37 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "* (PROCESSED) GOT SOCKET PAIR COMMAND MESSAGE INCOMMING NICE PROXY Receiving local data payload of size: %d   for streamID: %d  messageSequenceNumber %d  compressed %@",  buf,  0x1Eu);
  }

  uint64_t v10 = os_log_shim_legacy_logging_enabled(v9);
  if ((_DWORD)v10 && _IDSShouldLogTransport(v10))
  {
    id v11 = [*(id *)(a1 + 32) length];
    uint64_t v12 = *(_BYTE *)(a1 + 82) ? @"YES" : @"NO";
    uint64_t v27 = a2;
    unsigned int v28 = v12;
    id v24 = v11;
    uint64_t v26 = *(unsigned __int16 *)(a1 + 80);
    _IDSLogTransport( @"UTunConnection",  @"IDS",  @"* (PROCESSED) GOT SOCKET PAIR COMMAND MESSAGE INCOMMING NICE PROXY Receiving local data payload of size: %d   for streamID: %d  messageSequenceNumber %d  compressed %@");
    if (_IDSShouldLog(0LL, @"UTunConnection"))
    {
      id v13 = objc_msgSend(*(id *)(a1 + 32), "length", v24, v26, a2, v28);
      if (*(_BYTE *)(a1 + 82)) {
        uint64_t v14 = @"YES";
      }
      else {
        uint64_t v14 = @"NO";
      }
      uint64_t v27 = a2;
      unsigned int v28 = (__CFString *)v14;
      id v24 = v13;
      uint64_t v26 = *(unsigned __int16 *)(a1 + 80);
      _IDSLogV( 0LL,  @"IDSFoundation",  @"UTunConnection",  @"* (PROCESSED) GOT SOCKET PAIR COMMAND MESSAGE INCOMMING NICE PROXY Receiving local data payload of size: %d   for streamID: %d  messageSequenceNumber %d  compressed %@");
    }
  }

  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_FTOptionallyDecompressData", v24, v26, v27, v28));
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 8LL));
  char v17 = objc_opt_respondsToSelector( WeakRetained,  "connection:messageReceived:topic:command:fromID:messageID:wantsAppAck:expectsPeerResponse:peerResponseIdentifi er:messageUUID:isCompressed:didWakeHint:");

  if ((v17 & 1) != 0)
  {
    id v18 = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 8LL));
    uint64_t v19 = *(void *)(a1 + 40);
    uint64_t v20 = *(void *)(a1 + 48);
    uint64_t v21 = *(void *)(a1 + 56);
    uint64_t v22 = *(void *)(v19 + 200);
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a2));
    BYTE1(v29) = *(_BYTE *)(a1 + 85);
    LOBYTE(v29) = *(_BYTE *)(a1 + 82);
    LOWORD(v25) = *(_WORD *)(a1 + 83);
    objc_msgSend( v18,  "connection:messageReceived:topic:command:fromID:messageID:wantsAppAck:expectsPeerResponse:peerResponseIdentifier:m essageUUID:isCompressed:didWakeHint:",  v19,  v15,  v20,  v21,  v22,  v23,  v25,  *(void *)(a1 + 64),  *(void *)(a1 + 72),  v29);
  }
}

void sub_10025B6E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = OSLogHandleForTransportCategory("UTunConnection");
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v6 = [*(id *)(a1 + 32) length];
    int v7 = *(unsigned __int16 *)(a1 + 80);
    if (*(_BYTE *)(a1 + 82)) {
      uint64_t v8 = @"YES";
    }
    else {
      uint64_t v8 = @"NO";
    }
    *(_DWORD *)buf = 67109890;
    *(_DWORD *)int v42 = v6;
    *(_WORD *)&void v42[4] = 1024;
    *(_DWORD *)&v42[6] = v7;
    __int16 v43 = 1024;
    int v44 = a2;
    __int16 v45 = 2112;
    uint64_t v46 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "* (PROCESSED) GOT SOCKET PAIR COMMAND MESSAGE iMessage Command Receiving local data payload of size: %d   for stre amID: %d  messageSequenceNumber %d  compressed %@",  buf,  0x1Eu);
  }

  uint64_t v10 = os_log_shim_legacy_logging_enabled(v9);
  if ((_DWORD)v10 && _IDSShouldLogTransport(v10))
  {
    id v11 = [*(id *)(a1 + 32) length];
    uint64_t v12 = *(_BYTE *)(a1 + 82) ? @"YES" : @"NO";
    uint64_t v38 = a2;
    uint64_t v39 = v12;
    id v35 = v11;
    uint64_t v37 = *(unsigned __int16 *)(a1 + 80);
    _IDSLogTransport( @"UTunConnection",  @"IDS",  @"* (PROCESSED) GOT SOCKET PAIR COMMAND MESSAGE iMessage Command Receiving local data payload of size: %d   for streamID: %d  messageSequenceNumber %d  compressed %@");
    if (_IDSShouldLog(0LL, @"UTunConnection"))
    {
      id v13 = objc_msgSend(*(id *)(a1 + 32), "length", v35, v37, a2, v39);
      if (*(_BYTE *)(a1 + 82)) {
        uint64_t v14 = @"YES";
      }
      else {
        uint64_t v14 = @"NO";
      }
      uint64_t v38 = a2;
      uint64_t v39 = (__CFString *)v14;
      id v35 = v13;
      uint64_t v37 = *(unsigned __int16 *)(a1 + 80);
      _IDSLogV( 0LL,  @"IDSFoundation",  @"UTunConnection",  @"* (PROCESSED) GOT SOCKET PAIR COMMAND MESSAGE iMessage Command Receiving local data payload of size: %d   for streamID: %d  messageSequenceNumber %d  compressed %@");
    }
  }

  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_FTOptionallyDecompressData", v35, v37, v38, v39));
  uint64_t v16 = OSLogHandleForIDSCategory("UTunConnection");
  char v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    id v18 = @"YES";
    if (!v15) {
      id v18 = @"NO";
    }
    *(_DWORD *)buf = 138412290;
    *(void *)int v42 = v18;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "DECOMPRESSED IMESSAGE DECRYPTED DATA NOT NIL: %@",  buf,  0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v19)
    && _IDSShouldLog(0LL, @"UTunConnection"))
  {
    _IDSLogV( 0LL,  @"IDSFoundation",  @"UTunConnection",  @"DECOMPRESSED IMESSAGE DECRYPTED DATA NOT NIL: %@");
  }

  uint64_t v20 = -[NSDictionary initWithObjectsAndKeys:]( objc_alloc(&OBJC_CLASS___NSDictionary),  "initWithObjectsAndKeys:",  v15,  @"dd",  *(void *)(a1 + 40),  @"U",  0LL);
  uint64_t v21 = OSLogHandleForIDSCategory("UTunConnection");
  uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v23 = *(void *)(a1 + 40);
    *(_DWORD *)buf = 138412290;
    *(void *)int v42 = v23;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Passing %@ Down to UTUN", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v24)
    && _IDSShouldLog(0LL, @"UTunConnection"))
  {
    uint64_t v36 = *(void *)(a1 + 40);
    _IDSLogV(0LL, @"IDSFoundation", @"UTunConnection", @"Passing %@ Down to UTUN");
  }

  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 48) + 8LL));
  char v26 = objc_opt_respondsToSelector( WeakRetained,  "connection:messageReceived:topic:command:fromID:messageID:wantsAppAck:expectsPeerResponse:peerResponseIdentifi er:messageUUID:isCompressed:didWakeHint:");

  if ((v26 & 1) != 0)
  {
    id v27 = objc_loadWeakRetained((id *)(*(void *)(a1 + 48) + 8LL));
    uint64_t v28 = *(void *)(a1 + 48);
    uint64_t v29 = JWEncodeDictionary(v20);
    int v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
    uint64_t v31 = *(void *)(a1 + 56);
    uint64_t v32 = *(void *)(a1 + 64);
    uint64_t v33 = *(void *)(*(void *)(a1 + 48) + 200LL);
    __int16 v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", a2));
    BYTE1(v40) = *(_BYTE *)(a1 + 85);
    LOBYTE(v40) = *(_BYTE *)(a1 + 82);
    LOWORD(v36) = *(_WORD *)(a1 + 83);
    objc_msgSend( v27,  "connection:messageReceived:topic:command:fromID:messageID:wantsAppAck:expectsPeerResponse:peerResponseIdentifier:m essageUUID:isCompressed:didWakeHint:",  v28,  v30,  v31,  v32,  v33,  v34,  v36,  *(void *)(a1 + 72),  *(void *)(a1 + 40),  v40);
  }
}

void sub_10025BB94(id a1)
{
  uint64_t v1 = OSLogHandleForIDSCategory("UTunConnection");
  int v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Popping dialog to alert the user of the IDS version mismatch",  v4,  2u);
  }

  if (os_log_shim_legacy_logging_enabled(v3) && _IDSShouldLog(0LL, @"UTunConnection")) {
    _IDSLogV( 0LL,  @"IDSFoundation",  @"UTunConnection",  @"Popping dialog to alert the user of the IDS version mismatch");
  }
  if (qword_1009C07A8 != -1) {
    dispatch_once(&qword_1009C07A8, &stru_1008FF030);
  }
  if (off_1009C07A0) {
    off_1009C07A0(@"IDS", @"IDS version mismatch", 3LL, 152LL);
  }
}

void sub_10025BCA4(id a1)
{
  off_1009C07A0 = (uint64_t (*)(void, void, void, void))CUTWeakLinkSymbol( "DLCCollectLogs",  @"DiagnosticLogCollection");
}

id sub_10025CCE0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) heartbeat];
}

void sub_10025CE40( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_10025CE5C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained timedOutWaitingForSMS];
}

void sub_10025D314(uint64_t a1, void *a2)
{
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog sms](&OBJC_CLASS___IMRGLog, "sms"));
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 138412290;
    uint64_t v5 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Received notification that SIM setup did complete { observer: %@ }",  (uint8_t *)&v4,  0xCu);
  }

  if (a2) {
    [a2 _SIMSetupDidComplete];
  }
}

void sub_10025E1DC()
{
}

void sub_10025E220( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, os_activity_scope_state_s state, char a35)
{
}

void sub_10025E238(uint64_t a1, int a2)
{
  if (!a2) {
    sub_10025E23C();
  }
  objc_terminate();
  -[IDSPhoneNumberValidationStateMachine _notifySuccess:](v2, v3, v4);
}

void sub_10025E74C()
{
}

void sub_10025E794( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, os_activity_scope_state_s state, char a35)
{
}

void sub_10025E7AC(uint64_t a1, int a2)
{
  if (!a2) {
    sub_10025E7B0();
  }
  objc_terminate();
  -[IDSPhoneNumberValidationStateMachine _fulfillPromisesWithPhoneNumber:token:](v2, v3, v4, v5);
}

id sub_10025EF94(uint64_t a1)
{
  int v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog sms](&OBJC_CLASS___IMRGLog, "sms"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(a1 + 40)) {
      SEL v3 = @"YES";
    }
    else {
      SEL v3 = @"NO";
    }
    int v5 = 138412290;
    unsigned int v6 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Received PNRReadyStateNotification { state: %@",  (uint8_t *)&v5,  0xCu);
  }

  return [*(id *)(a1 + 32) _scheduleHeartbeat:5.0];
}

void sub_10025F228( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
}

void sub_10025F244(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    int v3 = *(unsigned __int8 *)(a1 + 48);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog sms](&OBJC_CLASS___IMRGLog, "sms"));
    BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    if (v3)
    {
      if (v5)
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Successfully sent registration request",  buf,  2u);
      }

      [WeakRetained handleRegistrationSMSSuccessfullyDeliveredWithTelephonyTimeout:*(void *)(a1 + 32)];
    }

    else
    {
      if (v5)
      {
        *(_WORD *)unsigned int v6 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Failed to send registration request",  v6,  2u);
      }

      [WeakRetained handleRegistrationSMSDeliveryFailed];
    }
  }
}

void sub_10025F474( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_10025F490(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    unsigned int v3 = [*(id *)(a1 + 32) success];
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog sms](&OBJC_CLASS___IMRGLog, "sms"));
    BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    if (v3)
    {
      if (v5)
      {
        unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) phoneNumber]);
        int v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) signature]);
        *(_DWORD *)buf = 138412546;
        id v11 = v6;
        __int16 v12 = 2112;
        id v13 = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Handling incoming phone number registration response { phoneNumber: %@, signature: %@ }",  buf,  0x16u);
      }

      [WeakRetained handleIncomingSMSForResponse:*(void *)(a1 + 32)];
    }

    else
    {
      if (v5)
      {
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) status]);
        *(_DWORD *)buf = 138412290;
        id v11 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Received failed status in phone number registration response { status: %@ }",  buf,  0xCu);
      }

      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3221225472LL;
      v9[2] = sub_10025F63C;
      v9[3] = &unk_1008F6010;
      void v9[4] = WeakRetained;
      im_dispatch_after_primary_queue(v9, 2.0);
    }
  }
}

id sub_10025F63C(uint64_t a1)
{
  return [*(id *)(a1 + 32) handleRegistrationSMSDeliveryFailed];
}

void sub_10025FCC0(id a1)
{
  byte_1009C07B8 = IMGetDomainBoolForKey(@"com.apple.registration", @"overrideSMSTimeout");
}

id sub_10025FD58(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _smsDeliveryClear];
}

void sub_100260138(uint64_t a1, char a2, char a3, void *a4)
{
  id v7 = a4;
  uint64_t v9 = im_primary_queue(v7, v8);
  uint64_t v10 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v9);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1002601E8;
  block[3] = &unk_1008F8040;
  char v16 = a2;
  char v17 = a3;
  uint64_t v11 = *(void *)(a1 + 32);
  id v14 = v7;
  uint64_t v15 = v11;
  id v12 = v7;
  dispatch_async(v10, block);
}

void sub_1002601E8(uint64_t a1)
{
  int v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog sms](&OBJC_CLASS___IMRGLog, "sms"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v3 = @"YES";
    if (*(_BYTE *)(a1 + 48)) {
      id v4 = @"YES";
    }
    else {
      id v4 = @"NO";
    }
    uint64_t v5 = *(void *)(a1 + 32);
    if (!*(_BYTE *)(a1 + 49)) {
      unsigned int v3 = @"NO";
    }
    int v17 = 138412802;
    id v18 = v4;
    __int16 v19 = 2112;
    uint64_t v20 = v3;
    __int16 v21 = 2112;
    uint64_t v22 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Phone number registration request issued { sendSuccess: %@, shouldContinue: %@, error: %@ }",  (uint8_t *)&v17,  0x20u);
  }

  if (*(_BYTE *)(a1 + 48))
  {
    unsigned int v6 = objc_alloc_init(&OBJC_CLASS___NSDate);
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = *(void **)(v7 + 72);
    *(void *)(v7 + 72) = v6;

    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog sms](&OBJC_CLASS___IMRGLog, "sms"));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v17) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Setting watch for phone number validation request timeout",  (uint8_t *)&v17,  2u);
    }

    [*(id *)(a1 + 40) _scheduleSMSTimeout:1800.0];
    [*(id *)(a1 + 40) _clearSMSDeliveryTimeout];
    uint64_t v10 = *(void **)(a1 + 40);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 arbiter]);
    [v11 minimumIntervalBetweenValidationAttempts];
    objc_msgSend(v10, "_setSMSDeliveryTimeout:");
  }

  else
  {
    int v12 = *(unsigned __int8 *)(a1 + 49);
    id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog sms](&OBJC_CLASS___IMRGLog, "sms"));
    BOOL v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
    if (v12)
    {
      if (v14)
      {
        uint64_t v15 = *(const __CFString **)(a1 + 32);
        int v17 = 138412290;
        id v18 = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Error sending phone number validation request -- current mechanism failed { error: %@ }",  (uint8_t *)&v17,  0xCu);
      }

      [*(id *)(a1 + 40) handleRegistrationSMSDeliveryFailedWithShouldBypassRetry:1];
    }

    else
    {
      if (v14)
      {
        int v16 = *(_DWORD *)(*(void *)(a1 + 40) + 48LL);
        int v17 = 67109120;
        LODWORD(v1_Block_object_dispose(va, 8) = v16;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Error sending phone number validation request -- CT instructed us to stop { attemptCount: %d }",  (uint8_t *)&v17,  8u);
      }

      [*(id *)(a1 + 40) _notifyFailureWithError:3];
      [*(id *)(a1 + 40) resetSMSCounter];
    }
  }

void sub_100260BEC(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a5;
  int v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog sms](&OBJC_CLASS___IMRGLog, "sms"));
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    int v21 = 138412802;
    id v22 = v10;
    __int16 v23 = 2048;
    uint64_t v24 = a4;
    __int16 v25 = 2112;
    id v26 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Received preflight response { error: %@, resultCode: %ld, resultDictionary: %@ }",  (uint8_t *)&v21,  0x20u);
  }

  id v13 = v9;
  BOOL v14 = v13;
  if (a4)
  {
    unint64_t v15 = a4 & 0xFFFFFFFFFFFFFFF7LL;
    int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog sms](&OBJC_CLASS___IMRGLog, "sms"));
    BOOL v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    if (v15 == 6001)
    {
      if (v17)
      {
        LOWORD(v21) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Failed preflight -- failing phone number validation",  (uint8_t *)&v21,  2u);
      }

      [*(id *)(a1 + 32) setCurrentPreflightStack:0];
      [*(id *)(a1 + 32) _notifyFailureWithError:36];
    }

    else
    {
      if (v17)
      {
        LOWORD(v21) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Preflight unsuccessful -- cancelling scheduled heartbeat",  (uint8_t *)&v21,  2u);
      }

      [*(id *)(a1 + 32) setCurrentPreflightStack:0];
      *(void *)(*(void *)(a1 + 32) + 16LL) = 1LL;
      [*(id *)(a1 + 32) _cancelScheduledHeartbeat];
    }
  }

  else
  {
    id v18 = (void *)objc_claimAutoreleasedReturnValue([v13 responseMechanisms]);
    __int16 v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog sms](&OBJC_CLASS___IMRGLog, "sms"));
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      int v21 = 138412290;
      id v22 = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Sending phone number verification { mechanisms: %@ }",  (uint8_t *)&v21,  0xCu);
    }

    uint64_t v20 = -[IDSPreflightStack initWithIMSI:PLMN:validationMechanisms:]( objc_alloc(&OBJC_CLASS___IDSPreflightStack),  "initWithIMSI:PLMN:validationMechanisms:",  *(void *)(a1 + 40),  *(void *)(a1 + 48),  v18);
    [*(id *)(a1 + 32) setCurrentPreflightStack:v20];

    [*(id *)(a1 + 32) _performHighestPriorityPreflightVerification];
  }
}

id sub_100261608(uint64_t a1, int a2)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 6[(id)qword_1009BEC18 setShouldPostNotifications:0] = 0;
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog sms](&OBJC_CLASS___IMRGLog, "sms"));
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (a2)
  {
    if (v5)
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Obtained permission to send SMS from requestor -- kicking identification",  buf,  2u);
    }

    *(_BYTE *)(*(void *)(a1 + 32) + 6[(id)qword_1009BEC18 setShouldPostNotifications:1] = 1;
    return [*(id *)(a1 + 32) _tryToSendSMSIdentification];
  }

  else
  {
    if (v5)
    {
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Did not obtain permission to send SMS from requestor -- failing registration",  v7,  2u);
    }

    *(_BYTE *)(*(void *)(a1 + 32) + 6[(id)qword_1009BEC18 setShouldPostNotifications:1] = 0;
    return [*(id *)(a1 + 32) _notifyFailureWithError:2];
  }

void sub_100261C44( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
}

void sub_100261FE4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
}

void sub_100262500( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, os_activity_scope_state_s state)
{
}

id sub_100262550(uint64_t a1)
{
  int v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog sms](&OBJC_CLASS___IMRGLog, "sms"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    BOOL v5 = (objc_class *)objc_opt_class(v4, v3);
    unsigned int v6 = NSStringFromClass(v5);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    int v9 = 138412546;
    uint64_t v10 = v4;
    __int16 v11 = 2112;
    int v12 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Invalid number provided: %@   Class: %@",  (uint8_t *)&v9,  0x16u);
  }

  return [*(id *)(a1 + 40) _notifyFailureWithError:6];
}

id sub_100262634(uint64_t a1)
{
  int v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog sms](&OBJC_CLASS___IMRGLog, "sms"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    BOOL v5 = (objc_class *)objc_opt_class(v4, v3);
    unsigned int v6 = NSStringFromClass(v5);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    int v9 = 138412546;
    uint64_t v10 = v4;
    __int16 v11 = 2112;
    int v12 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Invalid signature provided: %@   Class: %@",  (uint8_t *)&v9,  0x16u);
  }

  return [*(id *)(a1 + 40) _notifyFailureWithError:5];
}

id sub_100262718(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _notifySuccess:*(void *)(a1 + 40)];
}

void sub_100262B40()
{
}

void sub_100262B68( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, os_activity_scope_state_s state, char a25)
{
}

void sub_100262B80(uint64_t a1, int a2)
{
  if (!a2) {
    sub_100262B84();
  }
  objc_terminate();
  -[IDSPhoneNumberValidationStateMachine addListener:](v2, v3, v4);
}

uint64_t sub_100263810()
{
  uint64_t v0 = (void *)objc_claimAutoreleasedReturnValue(+[IDSServerBag sharedInstanceForBagType:](&OBJC_CLASS___IDSServerBag, "sharedInstanceForBagType:", 0LL));
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([v0 objectForKey:@"gdr-max-auth-retries"]);

  if (v1) {
    uint64_t v2 = (uint64_t)[v1 unsignedIntValue];
  }
  else {
    uint64_t v2 = 10LL;
  }

  return v2;
}

double sub_100263878()
{
  uint64_t v0 = (void *)objc_claimAutoreleasedReturnValue(+[IDSServerBag sharedInstanceForBagType:](&OBJC_CLASS___IDSServerBag, "sharedInstanceForBagType:", 0LL));
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([v0 objectForKey:@"gdr-auth-retry-interval-seconds"]);

  if (v1)
  {
    [v1 doubleValue];
    double v3 = v2;
  }

  else
  {
    double v3 = 15.0;
  }

  return v3;
}

void sub_100264120(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a5;
  if (IDSDebuggingShouldOverrideGDRResponseCode())
  {
    a4 = IDSDebuggingGDRReponseCodeOverride();

    id v11 = 0LL;
  }

  id v12 = v9;
  id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)uint64_t v145 = a4;
    *(_WORD *)&v145[4] = 2112;
    *(void *)&v145[6] = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "  Received get dependent registration response with result: %d  error: %@",  buf,  0x12u);
  }

  BOOL v14 = (void *)objc_claimAutoreleasedReturnValue([v12 userIDArray]);
  unint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    *(void *)uint64_t v145 = v12;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, " response for message: %@", buf, 0xCu);
  }

  int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    *(void *)uint64_t v145 = v14;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "   response idsUserID: %@", buf, 0xCu);
  }

  uint64_t v106 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  uint64_t v105 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  unsigned int v80 = v10;
  [*(id *)(a1 + 32) _submitGDRReponseToAWDWithResultCode:a4 error:v10];
  uint64_t v108 = a1;
  int v79 = v12;
  if (!a4)
  {
    BOOL v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog GDR_oversized](&OBJC_CLASS___IMRGLog, "GDR_oversized"));
    BOOL v18 = os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);

    if (v18)
    {
      id v77 = v11;
      __int128 v78 = v14;
      __int128 v137 = 0u;
      __int128 v138 = 0u;
      __int128 v135 = 0u;
      __int128 v136 = 0u;
      id obj = (id)objc_claimAutoreleasedReturnValue([v11 _arrayForKey:@"registrations"]);
      id v92 = [obj countByEnumeratingWithState:&v135 objects:v143 count:16];
      if (v92)
      {
        uint64_t v91 = *(void *)v136;
        uint64_t v90 = IDSDevicePropertyService;
        uint64_t v89 = IDSDevicePropertyPushToken;
        uint64_t v88 = IDSDevicePropertyName;
        uint64_t v87 = IDSDevicePropertyHardwareVersion;
        uint64_t v86 = IDSDevicePropertyPrivateDeviceData;
        uint64_t v85 = IDSDevicePropertySubServices;
        uint64_t v84 = IDSDevicePropertyIdentities;
        uint64_t v83 = IDSDevicePropertyLinkedUserURIs;
        uint64_t v82 = IDSDevicePropertyIsHSATrustedDevice;
        do
        {
          uint64_t v19 = 0LL;
          do
          {
            if (*(void *)v136 != v91) {
              objc_enumerationMutation(obj);
            }
            uint64_t v104 = v19;
            uint64_t v20 = *(void **)(*((void *)&v135 + 1) + 8 * v19);
            int v21 = (void *)objc_claimAutoreleasedReturnValue([v20 objectForKey:v90]);
            id v102 = [v21 copy];

            id v22 = (void *)objc_claimAutoreleasedReturnValue([v20 objectForKey:v89]);
            uint64_t v100 = (void *)objc_claimAutoreleasedReturnValue([v22 debugDescription]);

            __int16 v23 = (void *)objc_claimAutoreleasedReturnValue([v20 objectForKey:v88]);
            id v24 = [v23 copy];

            __int16 v25 = (void *)objc_claimAutoreleasedReturnValue([v20 objectForKey:v87]);
            id v26 = [v25 copy];

            id v27 = (void *)objc_claimAutoreleasedReturnValue([v20 objectForKey:v86]);
            v97 = (void *)objc_claimAutoreleasedReturnValue( +[IDSLogFormatter descriptionForDictionary:options:]( &OBJC_CLASS___IDSLogFormatter,  "descriptionForDictionary:options:",  v27,  1LL));

            uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v20 objectForKey:v85]);
            uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "__imArrayByApplyingBlock:", &stru_1008FF0B8));
            int v30 = (void *)objc_claimAutoreleasedReturnValue( +[IDSLogFormatter descriptionForArray:options:]( &OBJC_CLASS___IDSLogFormatter,  "descriptionForArray:options:",  v29,  0LL));

            uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v20 objectForKey:v84]);
            uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue( +[IDSLogFormatter descriptionForArray:options:]( &OBJC_CLASS___IDSLogFormatter,  "descriptionForArray:options:",  v31,  0LL));

            uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([v20 objectForKey:v83]);
            __int16 v34 = (void *)objc_claimAutoreleasedReturnValue( +[IDSLogFormatter descriptionForArray:options:]( &OBJC_CLASS___IDSLogFormatter,  "descriptionForArray:options:",  v33,  0LL));

            id v35 = (void *)objc_claimAutoreleasedReturnValue([v20 objectForKey:v82]);
            id v36 = [v35 copy];

            v125[0] = _NSConcreteStackBlock;
            v125[1] = 3221225472LL;
            v125[2] = sub_100264C04;
            v125[3] = &unk_1008FF0E0;
            id v126 = v24;
            id v127 = v102;
            id v128 = v26;
            id v129 = v100;
            id v130 = v34;
            id v131 = v32;
            id v132 = v97;
            id v133 = v30;
            id v134 = v36;
            id v95 = v36;
            id v94 = v30;
            id v98 = v97;
            id v93 = v32;
            id v37 = v34;
            id v38 = v100;
            id v39 = v26;
            id v40 = v102;
            id v41 = v24;
            cut_dispatch_log_queue(v125);

            uint64_t v19 = v104 + 1;
          }

          while (v92 != (id)(v104 + 1));
          id v92 = [obj countByEnumeratingWithState:&v135 objects:v143 count:16];
        }

        while (v92);
      }

      a1 = v108;
      id v11 = v77;
      BOOL v14 = v78;
    }
  }

  int v42 = v11;
  __int128 v123 = 0u;
  __int128 v124 = 0u;
  __int128 v121 = 0u;
  __int128 v122 = 0u;
  id v96 = v14;
  id v101 = [v96 countByEnumeratingWithState:&v121 objects:v142 count:16];
  if (v101)
  {
    uint64_t v99 = *(void *)v122;
    do
    {
      uint64_t v43 = 0LL;
      do
      {
        if (*(void *)v122 != v99) {
          objc_enumerationMutation(v96);
        }
        uint64_t v103 = v43;
        uint64_t v44 = *(void *)(*((void *)&v121 + 1) + 8 * v43);
        __int128 v119 = 0u;
        __int128 v120 = 0u;
        __int128 v117 = 0u;
        __int128 v118 = 0u;
        id v45 = *(id *)(*(void *)(a1 + 32) + 16LL);
        id v46 = [v45 countByEnumeratingWithState:&v117 objects:v141 count:16];
        if (v46)
        {
          id v47 = v46;
          uint64_t v48 = *(void *)v118;
          do
          {
            for (i = 0LL; i != v47; i = (char *)i + 1)
            {
              if (*(void *)v118 != v48) {
                objc_enumerationMutation(v45);
              }
              __int16 v50 = *(void **)(*((void *)&v117 + 1) + 8LL * (void)i);
              uint64_t v51 = (void *)objc_claimAutoreleasedReturnValue([v50 idsUserID]);
              unsigned int v52 = [v51 isEqualToIgnoringCase:v44];

              if (v52)
              {
                id v53 = (void *)objc_claimAutoreleasedReturnValue([v50 guid]);
                if ([v53 length])
                {
                  -[NSMutableSet addObject:](v106, "addObject:", v50);
                  uint64_t v54 = v108;
                  uint64_t v55 = (os_log_s *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(v108 + 32) + 8) objectForKey:v53]);
                  if (v55)
                  {
                    id v56 = -[NSArray initWithArray:copyItems:]( objc_alloc(&OBJC_CLASS___NSArray),  "initWithArray:copyItems:",  v55,  1LL);
                    -[NSMutableDictionary setObject:forKey:](v105, "setObject:forKey:", v56, v53);

                    uint64_t v54 = v108;
                  }

                  [*(id *)(*(void *)(v54 + 32) + 8) removeObjectForKey:v53];
                }

                else
                {
                  uint64_t v55 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
                  if (os_log_type_enabled(v55, OS_LOG_TYPE_FAULT))
                  {
                    *(_DWORD *)buf = 138412290;
                    *(void *)uint64_t v145 = v50;
                    _os_log_fault_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_FAULT,  "No GUID for registration %@, when processing getDependentRegistration response",  buf,  0xCu);
                  }
                }
              }
            }

            id v47 = [v45 countByEnumeratingWithState:&v117 objects:v141 count:16];
          }

          while (v47);
        }

        uint64_t v43 = v103 + 1;
        a1 = v108;
      }

      while ((id)(v103 + 1) != v101);
      id v101 = [v96 countByEnumeratingWithState:&v121 objects:v142 count:16];
    }

    while (v101);
  }

  [*(id *)(*(void *)(a1 + 32) + 16) minusSet:v106];
  if (![*(id *)(*(void *)(a1 + 32) + 16) count])
  {
    uint64_t v57 = *(void *)(a1 + 32);
    uint64_t v58 = *(void **)(v57 + 16);
    *(void *)(v57 + 16) = 0LL;
  }

  if (![*(id *)(*(void *)(a1 + 32) + 8) count])
  {
    uint64_t v59 = *(void *)(a1 + 32);
    uint64_t v60 = *(void **)(v59 + 8);
    *(void *)(v59 + _Block_object_dispose(va, 8) = 0LL;
  }

  __int128 v115 = 0u;
  __int128 v116 = 0u;
  __int128 v113 = 0u;
  __int128 v114 = 0u;
  uint64_t v107 = v106;
  id v61 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v107,  "countByEnumeratingWithState:objects:count:",  &v113,  v140,  16LL);
  if (v61)
  {
    id v62 = v61;
    uint64_t v63 = *(void *)v114;
    do
    {
      for (j = 0LL; j != v62; j = (char *)j + 1)
      {
        if (*(void *)v114 != v63) {
          objc_enumerationMutation(v107);
        }
        id v65 = *(void **)(*((void *)&v113 + 1) + 8LL * (void)j);
        uint64_t v66 = (void *)objc_claimAutoreleasedReturnValue([v65 guid]);
        uint64_t v67 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v105, "objectForKey:", v66));

        __int128 v111 = 0u;
        __int128 v112 = 0u;
        __int128 v109 = 0u;
        __int128 v110 = 0u;
        id v68 = v67;
        id v69 = [v68 countByEnumeratingWithState:&v109 objects:v139 count:16];
        if (v69)
        {
          id v70 = v69;
          uint64_t v71 = *(void *)v110;
          do
          {
            for (k = 0LL; k != v70; k = (char *)k + 1)
            {
              if (*(void *)v110 != v71) {
                objc_enumerationMutation(v68);
              }
              uint64_t v73 = *(void *)(*((void *)&v109 + 1) + 8LL * (void)k);
              if (v73) {
                (*(void (**)(uint64_t, void *, uint64_t, BOOL, void *))(v73 + 16))(v73, v65, a4, a4 == 0, v42);
              }
            }

            id v70 = [v68 countByEnumeratingWithState:&v109 objects:v139 count:16];
          }

          while (v70);
        }
      }

      id v62 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v107,  "countByEnumeratingWithState:objects:count:",  &v113,  v140,  16LL);
    }

    while (v62);
  }

  uint64_t v74 = *(void *)(v108 + 32);
  if (!*(void *)(v74 + 8))
  {
    uint64_t v75 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
    [v75 _processStoredIncomingMessages];

    uint64_t v74 = *(void *)(v108 + 32);
  }

  [*(id *)(v74 + 40) accountsChanged];
  uint64_t v76 = *(void *)(*(void *)(v108 + 32) + 64LL);
  if (v76) {
    (*(void (**)(void))(v76 + 16))();
  }
}

id sub_100264BEC(id a1, id a2)
{
  return [a2 stringByReplacingOccurrencesOfString:@"com.apple.private.alloy." withString:&stru_100912B50];
}

void sub_100264C04(void *a1)
{
  double v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog GDR_oversized](&OBJC_CLASS___IMRGLog, "GDR_oversized"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = a1[5];
    uint64_t v5 = a1[6];
    uint64_t v6 = a1[7];
    uint64_t v7 = a1[8];
    uint64_t v8 = a1[9];
    uint64_t v9 = a1[10];
    uint64_t v10 = a1[11];
    uint64_t v11 = a1[12];
    int v12 = 138414338;
    uint64_t v13 = v3;
    __int16 v14 = 2112;
    uint64_t v15 = v4;
    __int16 v16 = 2112;
    uint64_t v17 = v5;
    __int16 v18 = 2112;
    uint64_t v19 = v6;
    __int16 v20 = 2112;
    uint64_t v21 = v7;
    __int16 v22 = 2112;
    uint64_t v23 = v8;
    __int16 v24 = 2112;
    uint64_t v25 = v9;
    __int16 v26 = 2112;
    uint64_t v27 = v10;
    __int16 v28 = 2112;
    uint64_t v29 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "  * Device Name: %@   Service: %@   Hardware: %@   Token: %@   Linked URIs: %@   Identities: %@   Device Data: %@ Sub-services: %@   HSA trusted: %@",  (uint8_t *)&v12,  0x5Cu);
  }
}

void sub_100265258(_Unwind_Exception *a1)
{
}

void sub_100265290(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  xpc_activity_state_t state = xpc_activity_get_state(v3);
  if (state == 2)
  {
    uint64_t v13 = OSLogHandleForIDSCategory("IDSDaemon");
    __int16 v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Got called to report daily metrics.",  buf,  2u);
    }

    [WeakRetained reportDailyMetrics];
  }

  else if (!state)
  {
    uint64_t v6 = OSLogHandleForIDSCategory("IDSDaemon");
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = @"YES";
      if (!v3) {
        uint64_t v8 = @"NO";
      }
      *(_DWORD *)buf = 138412290;
      uint64_t v17 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Told to check in for daily metric with activity %@ ",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v9) && _IDSShouldLog(0LL, @"IDSDaemon")) {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Told to check in for daily metric with activity %@ ");
    }
    xpc_object_t v10 = xpc_dictionary_create(0LL, 0LL, 0LL);
    xpc_dictionary_set_string(v10, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_MAINTENANCE);
    xpc_dictionary_set_int64(v10, XPC_ACTIVITY_INTERVAL, XPC_ACTIVITY_INTERVAL_1_DAY);
    xpc_object_t v11 = xpc_activity_copy_criteria(v3);
    int v12 = v11;
    if (!v11 || !xpc_equal(v11, v10)) {
      xpc_activity_set_criteria(v3, v10);
    }
  }
}

NSString *sub_100265648(uint64_t a1, uint64_t a2)
{
  return +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%u-%1u",  @"idsotr",  a1,  a2);
}

NSString *sub_100265688(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%u-%1u-%@",  @"idsotr",  a1,  a2,  a3);
}

id sub_100265B38(void *a1)
{
  id v1 = a1;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 componentsSeparatedByString:@"-"]);
  if ((unint64_t)[v2 count] > 2)
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v2 objectAtIndex:0]);
  }

  else
  {
    uint64_t v3 = OSLogHandleForIDSCategory("Warning");
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v9 = v1;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "_topicFromToken: invalid OTR token %@",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v5))
    {
      _IDSWarnV(@"IDSFoundation", @"_topicFromToken: invalid OTR token %@");
      _IDSLogV(0LL, @"IDSFoundation", @"Warning", @"_topicFromToken: invalid OTR token %@");
      _IDSLogTransport(@"Warning", @"IDS", @"_topicFromToken: invalid OTR token %@");
    }

    uint64_t v6 = 0LL;
  }

  return v6;
}

uint64_t sub_100265CB0(void *a1)
{
  id v1 = a1;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 componentsSeparatedByString:@"-"]);
  if ((unint64_t)[v2 count] > 2)
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v2 objectAtIndex:1]);
    uint64_t v6 = (int)[v7 intValue];
  }

  else
  {
    uint64_t v3 = OSLogHandleForIDSCategory("Warning");
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v10 = v1;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "_priorityFromToken: invalid OTR token %@",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v5))
    {
      _IDSWarnV(@"IDSFoundation", @"_priorityFromToken: invalid OTR token %@");
      _IDSLogV(0LL, @"IDSFoundation", @"Warning", @"_priorityFromToken: invalid OTR token %@");
      _IDSLogTransport(@"Warning", @"IDS", @"_priorityFromToken: invalid OTR token %@");
    }

    uint64_t v6 = 200LL;
  }

  return v6;
}

id sub_100266074(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _handleNegotiationTimeout];
}

void sub_100266160(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___IDSOTRController);
  uint64_t v2 = (void *)qword_1009C07D0;
  qword_1009C07D0 = (uint64_t)v1;
}

uint64_t sub_1002671E8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

uint64_t sub_1002671F8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

uint64_t sub_100267208(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_100268028(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (([v3 isNegotiating] & 1) == 0
    && ([v3 isReady] & 1) == 0
    && [v3 isSuspended])
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 token]);
    uint64_t v5 = OSLogHandleForTransportCategory("OTRController");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      xpc_object_t v11 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Resume suspended OTR session negotiation for %@.",  buf,  0xCu);
    }

    uint64_t v8 = os_log_shim_legacy_logging_enabled(v7);
    if ((_DWORD)v8)
    {
      if (_IDSShouldLogTransport(v8))
      {
        id v9 = v4;
        _IDSLogTransport( @"OTRController",  @"IDS",  @"Resume suspended OTR session negotiation for %@.");
        if (_IDSShouldLog(0LL, @"OTRController"))
        {
          id v9 = v4;
          _IDSLogV( 0LL,  @"IDSFoundation",  @"OTRController",  @"Resume suspended OTR session negotiation for %@.");
        }
      }
    }

    objc_msgSend( *(id *)(a1 + 32),  "startOTRNegotiationWithDeviceIfNeeded:token:reset:errorHandler:",  IDSDeviceDefaultPairedDeviceUniqueID,  v4,  1,  0,  v9);
  }
}

void sub_100269054(void *a1)
{
  uint64_t v2 = *(void **)(a1[4] + 88LL);
  if (!v2)
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    uint64_t v4 = a1[4];
    uint64_t v5 = *(void **)(v4 + 88);
    *(void *)(v4 + 8_Block_object_dispose(va, 8) = Mutable;

    uint64_t v2 = *(void **)(a1[4] + 88LL);
  }

  uint64_t v6 = (IDSOTRSessionInfo *)objc_claimAutoreleasedReturnValue([v2 objectForKey:a1[5]]);
  if (v6)
  {
    uint64_t v7 = v6;
    -[IDSOTRSessionInfo setOtrTestBlock:](v6, "setOtrTestBlock:", a1[6]);
  }

  else
  {
    uint64_t v7 = -[IDSOTRSessionInfo initWithToken:](objc_alloc(&OBJC_CLASS___IDSOTRSessionInfo), "initWithToken:", a1[5]);
    -[IDSOTRSessionInfo setOtrTestBlock:](v7, "setOtrTestBlock:", a1[6]);
    [*(id *)(a1[4] + 88) setObject:v7 forKey:a1[5]];
  }

  pthread_mutex_unlock((pthread_mutex_t *)(a1[4] + 24LL));
}

void sub_1002693D4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) sessionNegotiationCount:*(void *)(a1 + 40)];
  id v3 = v2;
  unsigned int v4 = *(_DWORD *)(a1 + 64);
  if ((v4 & 0x80000000) == 0 && v4 < v2)
  {
    uint64_t v5 = OSLogHandleForTransportCategory("OTRController");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      id v7 = [*(id *)(a1 + 48) length];
      uint64_t v8 = *(void *)(a1 + 40);
      int v9 = *(_DWORD *)(a1 + 64);
      *(_DWORD *)buf = 134218754;
      *(void *)v162 = v7;
      *(_WORD *)&v162[8] = 2112;
      *(void *)&v162[10] = v8;
      __int16 v163 = 1024;
      *(_DWORD *)v164 = v9;
      *(_WORD *)&v164[4] = 1024;
      *(_DWORD *)&v164[6] = (_DWORD)v3;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Receive stale OTR negotiation data %luB for %@, count:(%08x < %08x), ignore.",  buf,  0x22u);
    }

    uint64_t v11 = os_log_shim_legacy_logging_enabled(v10);
    if ((_DWORD)v11 && _IDSShouldLogTransport(v11))
    {
      id v12 = [*(id *)(a1 + 48) length];
      uint64_t v156 = *(unsigned int *)(a1 + 64);
      id v148 = v12;
      uint64_t v152 = *(void *)(a1 + 40);
      _IDSLogTransport( @"OTRController",  @"IDS",  @"Receive stale OTR negotiation data %luB for %@, count:(%08x < %08x), ignore.");
      if (_IDSShouldLog(0LL, @"OTRController"))
      {
        objc_msgSend(*(id *)(a1 + 48), "length", v148, v152, v156, v3);
        _IDSLogV( 0LL,  @"IDSFoundation",  @"OTRController",  @"Receive stale OTR negotiation data %luB for %@, count:(%08x < %08x), ignore.");
      }
    }

    return;
  }

  uint64_t v13 = OSLogHandleForTransportCategory("OTRController");
  __int16 v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    id v15 = [*(id *)(a1 + 48) length];
    uint64_t v16 = *(void *)(a1 + 40);
    int v17 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)buf = 134218498;
    *(void *)v162 = v15;
    *(_WORD *)&v162[8] = 2112;
    *(void *)&v162[10] = v16;
    __int16 v163 = 1024;
    *(_DWORD *)v164 = v17;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Processing OTR negotiation data %luB for %@, count:%08x.",  buf,  0x1Cu);
  }

  uint64_t v19 = os_log_shim_legacy_logging_enabled(v18);
  if ((_DWORD)v19)
  {
    if (_IDSShouldLogTransport(v19))
    {
      id v20 = [*(id *)(a1 + 48) length];
      uint64_t v151 = *(void *)(a1 + 40);
      uint64_t v155 = *(unsigned int *)(a1 + 64);
      id v147 = v20;
      _IDSLogTransport( @"OTRController",  @"IDS",  @"Processing OTR negotiation data %luB for %@, count:%08x.");
      if (_IDSShouldLog(0LL, @"OTRController"))
      {
        id v21 = objc_msgSend(*(id *)(a1 + 48), "length", v147, v151, v155);
        uint64_t v151 = *(void *)(a1 + 40);
        uint64_t v155 = *(unsigned int *)(a1 + 64);
        id v147 = v21;
        _IDSLogV( 0LL,  @"IDSFoundation",  @"OTRController",  @"Processing OTR negotiation data %luB for %@, count:%08x.");
      }
    }
  }

  if (objc_msgSend(*(id *)(a1 + 48), "length", v147, v151, v155))
  {
    id v22 = sub_100265B38(*(void **)(a1 + 40));
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
    if ([v23 isEqualToString:@"idsotr"])
    {
      id v24 = (id)sub_10026AB54(*(void **)(a1 + 40));
      if (v24 >= 3)
      {
        uint64_t v25 = OSLogHandleForTransportCategory("OTRController");
        __int16 v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v27 = *(void *)(a1 + 40);
          *(_DWORD *)buf = 138412290;
          *(void *)v162 = v27;
          _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "Invalid data protection class for token %@",  buf,  0xCu);
        }

        uint64_t v29 = os_log_shim_legacy_logging_enabled(v28);
        if ((_DWORD)v29)
        {
          if (_IDSShouldLogTransport(v29))
          {
            _IDSLogTransport(@"OTRController", @"IDS", @"Invalid data protection class for token %@");
            if (_IDSShouldLog(0LL, @"OTRController")) {
              _IDSLogV( 0LL,  @"IDSFoundation",  @"OTRController",  @"Invalid data protection class for token %@");
            }
          }
        }

LABEL_151:
        return;
      }
    }

    else
    {
      id v47 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDServiceController sharedInstance](&OBJC_CLASS___IDSDServiceController, "sharedInstance"));
      uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue([v47 serviceWithPushTopic:v23]);

      if (!v48)
      {
        uint64_t v85 = OSLogHandleForTransportCategory("OTRController");
        uint64_t v86 = (os_log_s *)objc_claimAutoreleasedReturnValue(v85);
        if (os_log_type_enabled(v86, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v87 = *(void *)(a1 + 40);
          *(_DWORD *)buf = 138412290;
          *(void *)v162 = v87;
          _os_log_impl( (void *)&_mh_execute_header,  v86,  OS_LOG_TYPE_DEFAULT,  "Failed to find service for token %@",  buf,  0xCu);
        }

        uint64_t v89 = os_log_shim_legacy_logging_enabled(v88);
        if ((_DWORD)v89)
        {
          if (_IDSShouldLogTransport(v89))
          {
            _IDSLogTransport(@"OTRController", @"IDS", @"Failed to find service for token %@");
            if (_IDSShouldLog(0LL, @"OTRController")) {
              _IDSLogV( 0LL,  @"IDSFoundation",  @"OTRController",  @"Failed to find service for token %@");
            }
          }
        }

        goto LABEL_151;
      }

      id v24 = [v48 dataProtectionClass];
    }

    uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue( +[IDSRegistrationKeyManager sharedInstance]( &OBJC_CLASS___IDSRegistrationKeyManager,  "sharedInstance"));
    id v50 = [v49 latestCopyMessageProtectionIdentityForDataProtectionClass:v24];

    if (!v50)
    {
      uint64_t v71 = OSLogHandleForTransportCategory("OTRController");
      int v72 = (os_log_s *)objc_claimAutoreleasedReturnValue(v71);
      if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v73 = IDSDataProtectionClassStringFromDataProtectionClass(v24);
        uint64_t v74 = (void *)objc_claimAutoreleasedReturnValue(v73);
        *(_DWORD *)buf = 138412290;
        *(void *)v162 = v74;
        _os_log_impl( (void *)&_mh_execute_header,  v72,  OS_LOG_TYPE_DEFAULT,  "Failed to get MP Identity for data protection class %@",  buf,  0xCu);
      }

      uint64_t v76 = os_log_shim_legacy_logging_enabled(v75);
      if ((_DWORD)v76)
      {
        if (_IDSShouldLogTransport(v76))
        {
          uint64_t v77 = IDSDataProtectionClassStringFromDataProtectionClass(v24);
          uint64_t v149 = objc_claimAutoreleasedReturnValue(v77);
          _IDSLogTransport( @"OTRController",  @"IDS",  @"Failed to get MP Identity for data protection class %@");

          if (_IDSShouldLog(0LL, @"OTRController"))
          {
            uint64_t v78 = IDSDataProtectionClassStringFromDataProtectionClass(v24);
            uint64_t v149 = objc_claimAutoreleasedReturnValue(v78);
            _IDSLogV( 0LL,  @"IDSFoundation",  @"OTRController",  @"Failed to get MP Identity for data protection class %@");
          }
        }
      }

      unsigned int v80 = *(void **)(a1 + 32);
      uint64_t v79 = a1 + 32;
      objc_msgSend(v80, "setupNewSessionInfoWithToken:", *(void *)(v79 + 8), v149);
      [*(id *)v79 suspendSessionNegotiation:*(void *)(v79 + 8) askedByPairedDevice:0];
      goto LABEL_151;
    }

    id v51 = [*(id *)(a1 + 32) copyPairedDevicePublicIdentityWithDataProtectionClass:v24];
    if (!v51)
    {
      uint64_t v90 = OSLogHandleForTransportCategory("OTRController");
      uint64_t v91 = (os_log_s *)objc_claimAutoreleasedReturnValue(v90);
      if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v92 = *(void *)(a1 + 56);
        *(_DWORD *)buf = 138412290;
        *(void *)v162 = v92;
        _os_log_impl( (void *)&_mh_execute_header,  v91,  OS_LOG_TYPE_DEFAULT,  "No public key found for remote device: %@    ** Cannot complete OTR exchange",  buf,  0xCu);
      }

      uint64_t v94 = os_log_shim_legacy_logging_enabled(v93);
      if ((_DWORD)v94)
      {
        if (_IDSShouldLogTransport(v94))
        {
          uint64_t v149 = *(void *)(a1 + 56);
          _IDSLogTransport( @"OTRController",  @"IDS",  @"No public key found for remote device: %@    ** Cannot complete OTR exchange");
          if (_IDSShouldLog(0LL, @"OTRController"))
          {
            uint64_t v149 = *(void *)(a1 + 56);
            _IDSLogV( 0LL,  @"IDSFoundation",  @"OTRController",  @"No public key found for remote device: %@    ** Cannot complete OTR exchange");
          }
        }
      }

      id v96 = *(void **)(a1 + 32);
      uint64_t v95 = a1 + 32;
      objc_msgSend(v96, "setupNewSessionInfoWithToken:", *(void *)(v95 + 8), v149);
      [*(id *)v95 suspendSessionNegotiation:*(void *)(v95 + 8) askedByPairedDevice:0];
      [*(id *)v95 _reportOTRTestResult:*(void *)(v95 + 8) setupTime:3 result:0.0];
      CFRelease(v50);
      goto LABEL_151;
    }

    CFTypeRef cf = 0LL;
    id v52 = [*(id *)(a1 + 32) copySessionForToken:*(void *)(a1 + 40)];
    if (!v52)
    {
      id v52 = (id)SecMPFullIdentityCreateOTRSessionWithFlags(v50, v51, 2LL, &cf);
      if (!v52)
      {
        uint64_t v109 = OSLogHandleForIDSCategory("Warning");
        __int128 v110 = (os_log_s *)objc_claimAutoreleasedReturnValue(v109);
        if (os_log_type_enabled(v110, OS_LOG_TYPE_ERROR))
        {
          uint64_t v111 = *(void *)(a1 + 40);
          *(_DWORD *)buf = 138412546;
          *(void *)v162 = v111;
          *(_WORD *)&v162[8] = 2112;
          *(void *)&v162[10] = cf;
          _os_log_impl( (void *)&_mh_execute_header,  v110,  OS_LOG_TYPE_ERROR,  "SecMPFullIdentityCreateOTRSessionWithFlags failed for %@ with error %@. Kick off re-negotiation.",  buf,  0x16u);
        }

        if (os_log_shim_legacy_logging_enabled(v112))
        {
          _IDSWarnV( @"IDSFoundation",  @"SecMPFullIdentityCreateOTRSessionWithFlags failed for %@ with error %@. Kick off re-negotiation.");
          _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"SecMPFullIdentityCreateOTRSessionWithFlags failed for %@ with error %@. Kick off re-negotiation.");
          uint64_t v149 = *(void *)(a1 + 40);
          CFTypeRef v153 = cf;
          _IDSLogTransport( @"Warning",  @"IDS",  @"SecMPFullIdentityCreateOTRSessionWithFlags failed for %@ with error %@. Kick off re-negotiation.");
        }

        if (!cf)
        {
          int v58 = 1;
          goto LABEL_142;
        }

        if (CFErrorGetCode((CFErrorRef)cf) == -25308)
        {
          uint64_t v113 = OSLogHandleForTransportCategory("OTRController");
          __int128 v114 = (os_log_s *)objc_claimAutoreleasedReturnValue(v113);
          if (os_log_type_enabled(v114, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v115 = *(void *)(a1 + 40);
            *(_DWORD *)buf = 138412290;
            *(void *)v162 = v115;
            _os_log_impl( (void *)&_mh_execute_header,  v114,  OS_LOG_TYPE_DEFAULT,  "Data protection class is unavailable, Suspending OTR for %@ untill it is",  buf,  0xCu);
          }

          uint64_t v117 = os_log_shim_legacy_logging_enabled(v116);
          if ((_DWORD)v117)
          {
            if (_IDSShouldLogTransport(v117))
            {
              uint64_t v149 = *(void *)(a1 + 40);
              _IDSLogTransport( @"OTRController",  @"IDS",  @"Data protection class is unavailable, Suspending OTR for %@ untill it is");
              if (_IDSShouldLog(0LL, @"OTRController"))
              {
                uint64_t v149 = *(void *)(a1 + 40);
                _IDSLogV( 0LL,  @"IDSFoundation",  @"OTRController",  @"Data protection class is unavailable, Suspending OTR for %@ untill it is");
              }
            }
          }

          objc_msgSend( *(id *)(a1 + 32),  "suspendSessionNegotiation:askedByPairedDevice:",  *(void *)(a1 + 40),  0,  v149,  v153);
          if (cf)
          {
            CFRelease(cf);
            CFTypeRef cf = 0LL;
          }

          CFRelease(v50);
          CFRelease(v51);
          goto LABEL_151;
        }

        id v52 = 0LL;
        int v58 = 1;
LABEL_48:
        if (cf)
        {
          CFRelease(cf);
          CFTypeRef cf = 0LL;
        }

        if (v52)
        {
          [*(id *)(a1 + 32) setSessionNegotiationStart:*(void *)(a1 + 40)];
          uint64_t v59 = objc_alloc_init(&OBJC_CLASS___NSMutableData);
          uint64_t v60 = SecOTRSProcessPacket(v52, *(void *)(a1 + 48), v59);
          if ((_DWORD)v60)
          {
            uint64_t v61 = OSLogHandleForTransportCategory("OTRController");
            id v62 = (os_log_s *)objc_claimAutoreleasedReturnValue(v61);
            if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 67109120;
              *(_DWORD *)v162 = v60;
              _os_log_impl( (void *)&_mh_execute_header,  v62,  OS_LOG_TYPE_DEFAULT,  "SecOTRSProcessPacket failed with result: %d, removing session key. Kick off re-negotiation.",  buf,  8u);
            }

            uint64_t v64 = os_log_shim_legacy_logging_enabled(v63);
            if ((_DWORD)v64)
            {
              if (_IDSShouldLogTransport(v64))
              {
                uint64_t v149 = v60;
                _IDSLogTransport( @"OTRController",  @"IDS",  @"SecOTRSProcessPacket failed with result: %d, removing session key. Kick off re-negotiation.");
                if (_IDSShouldLog(0LL, @"OTRController"))
                {
                  uint64_t v149 = v60;
                  _IDSLogV( 0LL,  @"IDSFoundation",  @"OTRController",  @"SecOTRSProcessPacket failed with result: %d, removing session key. Kick off re-negotiation.");
                }
              }
            }

            objc_msgSend(*(id *)(a1 + 32), "_cacheSession:token:", 0, *(void *)(a1 + 40), v149, v153);
            id v65 = (void *)objc_claimAutoreleasedReturnValue(+[IDSOTRKeyStorage sharedInstance](&OBJC_CLASS___IDSOTRKeyStorage, "sharedInstance"));
            [v65 removeSessionKeyForToken:*(void *)(a1 + 40)];

            if ((_DWORD)v60 != -25293)
            {
              int v58 = 1;
              goto LABEL_140;
            }

            uint64_t v66 = OSLogHandleForTransportCategory("OTRController");
            uint64_t v67 = (os_log_s *)objc_claimAutoreleasedReturnValue(v66);
            if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v67,  OS_LOG_TYPE_DEFAULT,  "Failed due to incorrect credentials. Refreshing Paired Device Encryption Keys",  buf,  2u);
            }

            uint64_t v69 = os_log_shim_legacy_logging_enabled(v68);
            if ((_DWORD)v69)
            {
              if (_IDSShouldLogTransport(v69))
              {
                _IDSLogTransport( @"OTRController",  @"IDS",  @"Failed due to incorrect credentials. Refreshing Paired Device Encryption Keys");
                if (_IDSShouldLog(0LL, @"OTRController")) {
                  _IDSLogV( 0LL,  @"IDSFoundation",  @"OTRController",  @"Failed due to incorrect credentials. Refreshing Paired Device Encryption Keys");
                }
              }
            }

            id v70 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPairingManager sharedInstance](&OBJC_CLASS___IDSPairingManager, "sharedInstance"));
            [v70 refreshPairedDeviceEncryptionKeys];
            int v58 = 1;
          }

          else
          {
            uint64_t v102 = OSLogHandleForTransportCategory("OTRController");
            uint64_t v103 = (os_log_s *)objc_claimAutoreleasedReturnValue(v102);
            if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
            {
              NSUInteger v104 = -[NSMutableData length](v59, "length");
              *(_DWORD *)buf = 67109376;
              *(_DWORD *)v162 = 0;
              *(_WORD *)&v162[4] = 2048;
              *(void *)&v162[6] = v104;
              _os_log_impl( (void *)&_mh_execute_header,  v103,  OS_LOG_TYPE_DEFAULT,  "SecOTRSProcessPacket  result: %d   data: %luB",  buf,  0x12u);
            }

            uint64_t v106 = os_log_shim_legacy_logging_enabled(v105);
            if ((_DWORD)v106)
            {
              if (_IDSShouldLogTransport(v106))
              {
                uint64_t v149 = 0LL;
                CFTypeRef v153 = -[NSMutableData length](v59, "length");
                _IDSLogTransport( @"OTRController",  @"IDS",  @"SecOTRSProcessPacket  result: %d   data: %luB");
                if (_IDSShouldLog(0LL, @"OTRController"))
                {
                  id v107 = -[NSMutableData length](v59, "length", 0LL, v153);
                  uint64_t v149 = 0LL;
                  CFTypeRef v153 = v107;
                  _IDSLogV( 0LL,  @"IDSFoundation",  @"OTRController",  @"SecOTRSProcessPacket  result: %d   data: %luB");
                }
              }
            }

            if ((v4 & 0x80000000) != 0) {
              uint64_t v108 = (const void *)(*(_DWORD *)(a1 + 64) & 0x7FFFFFFF);
            }
            else {
              uint64_t v108 = (const void *)(v3 | 0x80000000);
            }
            uint64_t v118 = OSLogHandleForTransportCategory("OTRController");
            __int128 v119 = (os_log_s *)objc_claimAutoreleasedReturnValue(v118);
            if (os_log_type_enabled(v119, OS_LOG_TYPE_DEFAULT))
            {
              NSUInteger v120 = -[NSMutableData length](v59, "length");
              uint64_t v121 = *(void *)(a1 + 40);
              *(_DWORD *)buf = 134218498;
              *(void *)v162 = v120;
              *(_WORD *)&v162[8] = 2112;
              *(void *)&v162[10] = v121;
              __int16 v163 = 1024;
              *(_DWORD *)v164 = (_DWORD)v108;
              _os_log_impl( (void *)&_mh_execute_header,  v119,  OS_LOG_TYPE_DEFAULT,  "  => will, send out OTR negotiation response data %luB for %@, count:%08x.",  buf,  0x1Cu);
            }

            uint64_t v123 = os_log_shim_legacy_logging_enabled(v122);
            if ((_DWORD)v123)
            {
              if (_IDSShouldLogTransport(v123))
              {
                NSUInteger v124 = -[NSMutableData length](v59, "length");
                CFTypeRef v153 = *(CFTypeRef *)(a1 + 40);
                CFTypeRef v157 = v108;
                uint64_t v149 = v124;
                _IDSLogTransport( @"OTRController",  @"IDS",  @"  => will, send out OTR negotiation response data %luB for %@, count:%08x.");
                if (_IDSShouldLog(0LL, @"OTRController"))
                {
                  NSUInteger v125 = -[NSMutableData length](v59, "length", v149, v153, v108);
                  CFTypeRef v153 = *(CFTypeRef *)(a1 + 40);
                  CFTypeRef v157 = v108;
                  uint64_t v149 = v125;
                  _IDSLogV( 0LL,  @"IDSFoundation",  @"OTRController",  @"  => will, send out OTR negotiation response data %luB for %@, count:%08x.");
                }
              }
            }

            id v126 = (void *)objc_claimAutoreleasedReturnValue( +[IDSUTunController sharedInstance]( &OBJC_CLASS___IDSUTunController,  "sharedInstance",  v149,  v153,  v157));
            [v126 sendOTRNegotiationMessage:*(void *)(a1 + 40) negotiationCount:v108 negotiationData:v59];

            [*(id *)(a1 + 32) serializeSession:v52 token:*(void *)(a1 + 40)];
            int IsReadyForMessages = SecOTRSGetIsReadyForMessages(v52);
            uint64_t v128 = OSLogHandleForIDSCategory("OTRController");
            id v129 = (os_log_s *)objc_claimAutoreleasedReturnValue(v128);
            if (os_log_type_enabled(v129, OS_LOG_TYPE_DEFAULT))
            {
              id v130 = @"NO";
              if (IsReadyForMessages) {
                id v130 = @"YES";
              }
              *(_DWORD *)buf = 138412290;
              *(void *)v162 = v130;
              _os_log_impl( (void *)&_mh_execute_header,  v129,  OS_LOG_TYPE_DEFAULT,  "Are we setup with with OTR now?: %@",  buf,  0xCu);
            }

            if (os_log_shim_legacy_logging_enabled(v131)
              && _IDSShouldLog(0LL, @"OTRController"))
            {
              id v132 = @"NO";
              if (IsReadyForMessages) {
                id v132 = @"YES";
              }
              double v150 = *(double *)&v132;
              _IDSLogV( 0LL,  @"IDSFoundation",  @"OTRController",  @"Are we setup with with OTR now?: %@");
            }

            if (!IsReadyForMessages || -[NSMutableData length](v59, "length")) {
              goto LABEL_140;
            }
            double v137 = ids_monotonic_time(0LL);
            [*(id *)(a1 + 32) sessionStartTimeWithToken:*(void *)(a1 + 40)];
            double v139 = v137 - v138;
            uint64_t v140 = OSLogHandleForTransportCategory("OTRController");
            uint64_t v141 = (os_log_s *)objc_claimAutoreleasedReturnValue(v140);
            if (os_log_type_enabled(v141, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v142 = *(void *)(a1 + 40);
              *(_DWORD *)buf = 134218754;
              *(double *)v162 = v139;
              *(_WORD *)&v162[8] = 2114;
              *(void *)&v162[10] = v142;
              __int16 v163 = 2048;
              *(void *)v164 = v52;
              *(_WORD *)&v164[8] = 2112;
              id v165 = v52;
              _os_log_impl( (void *)&_mh_execute_header,  v141,  OS_LOG_TYPE_DEFAULT,  "OTR session ready (took %.6f) for %{public}@ <%p %@>.",  buf,  0x2Au);
            }

            uint64_t v144 = os_log_shim_legacy_logging_enabled(v143);
            if ((_DWORD)v144)
            {
              if (_IDSShouldLogTransport(v144))
              {
                id v158 = v52;
                id v159 = v52;
                uint64_t v154 = *(void *)(a1 + 40);
                double v150 = v139;
                _IDSLogTransport( @"OTRController",  @"IDS",  @"OTR session ready (took %.6f) for %{public}@ <%p %@>.");
                if (_IDSShouldLog(0LL, @"OTRController"))
                {
                  id v158 = v52;
                  id v159 = v52;
                  uint64_t v154 = *(void *)(a1 + 40);
                  double v150 = v139;
                  _IDSLogV( 0LL,  @"IDSFoundation",  @"OTRController",  @"OTR session ready (took %.6f) for %{public}@ <%p %@>.");
                }
              }
            }

            objc_msgSend( *(id *)(a1 + 32),  "setSessionNegotiationComplete:",  *(void *)(a1 + 40),  *(void *)&v150,  v154,  v158,  v159);
            [*(id *)(a1 + 32) _reportOTRTestResult:*(void *)(a1 + 40) setupTime:1 result:v139];
            id v70 = (void *)objc_claimAutoreleasedReturnValue(+[IDSAWDLogging sharedInstance](&OBJC_CLASS___IDSAWDLogging, "sharedInstance"));
            id v145 = sub_100265B38(*(void **)(a1 + 40));
            id v146 = (void *)objc_claimAutoreleasedReturnValue(v145);
            [v70 OTRSessionNegotiation:v146 priority:sub_100265CB0(*(void **)(a1 + 40)) duration:(unint64_t)(v139 * 1000.0) result:0];
          }

LABEL_140:
          CFRelease(v52);

LABEL_149:
          CFRelease(v50);
          CFRelease(v51);
          if (v58) {
            [*(id *)(a1 + 32) startOTRNegotiationWithDeviceIfNeeded:*(void *)(a1 + 56) token:*(void *)(a1 + 40) reset:1 errorHandler:0];
          }
          goto LABEL_151;
        }

  __break(1u);
}

LABEL_142:
        uint64_t v133 = OSLogHandleForTransportCategory("OTRController");
        id v134 = (os_log_s *)objc_claimAutoreleasedReturnValue(v133);
        if (os_log_type_enabled(v134, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v134,  OS_LOG_TYPE_DEFAULT,  "Unable to create session from session data",  buf,  2u);
        }

        uint64_t v136 = os_log_shim_legacy_logging_enabled(v135);
        if ((_DWORD)v136)
        {
          if (_IDSShouldLogTransport(v136))
          {
            _IDSLogTransport(@"OTRController", @"IDS", @"Unable to create session from session data");
            if (_IDSShouldLog(0LL, @"OTRController")) {
              _IDSLogV( 0LL,  @"IDSFoundation",  @"OTRController",  @"Unable to create session from session data");
            }
          }
        }

        objc_msgSend( *(id *)(a1 + 32),  "_reportOTRTestResult:setupTime:result:",  *(void *)(a1 + 40),  2,  0.0,  v149,  v153);
        goto LABEL_149;
      }

      uint64_t v53 = OSLogHandleForTransportCategory("OTRController");
      uint64_t v54 = (os_log_s *)objc_claimAutoreleasedReturnValue(v53);
      if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v55 = *(void *)(a1 + 40);
        *(_DWORD *)buf = 134218498;
        *(void *)v162 = v52;
        *(_WORD *)&v162[8] = 2112;
        *(void *)&v162[10] = v55;
        __int16 v163 = 2112;
        *(void *)v164 = cf;
        _os_log_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_DEFAULT,  "Created new OTR session %p for token %@ error %@",  buf,  0x20u);
      }

      uint64_t v57 = os_log_shim_legacy_logging_enabled(v56);
      if ((_DWORD)v57)
      {
        if (_IDSShouldLogTransport(v57))
        {
          CFTypeRef v153 = *(CFTypeRef *)(a1 + 40);
          CFTypeRef v157 = cf;
          uint64_t v149 = (uint64_t)v52;
          _IDSLogTransport( @"OTRController",  @"IDS",  @"Created new OTR session %p for token %@ error %@");
          if (_IDSShouldLog(0LL, @"OTRController"))
          {
            CFTypeRef v153 = *(CFTypeRef *)(a1 + 40);
            CFTypeRef v157 = cf;
            uint64_t v149 = (uint64_t)v52;
            _IDSLogV( 0LL,  @"IDSFoundation",  @"OTRController",  @"Created new OTR session %p for token %@ error %@");
          }
        }
      }

      objc_msgSend(*(id *)(a1 + 32), "setupNewSessionInfoWithToken:", *(void *)(a1 + 40), v149, v153, v157);
    }

    int v58 = 0;
    goto LABEL_48;
  }

  id v30 = [*(id *)(a1 + 32) copySessionForToken:*(void *)(a1 + 40)];
  uint64_t v31 = v30;
  if (v30)
  {
    if (SecOTRSGetIsReadyForMessages(v30))
    {
      id v32 = [*(id *)(a1 + 32) isSessionNegotiating:*(void *)(a1 + 40)];
      if ((_DWORD)v32)
      {
        double v33 = ids_monotonic_time(v32);
        [*(id *)(a1 + 32) sessionStartTimeWithToken:*(void *)(a1 + 40)];
        double v35 = v33 - v34;
        uint64_t v36 = OSLogHandleForTransportCategory("OTRController");
        id v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
        if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v38 = *(void *)(a1 + 40);
          *(_DWORD *)buf = 134218754;
          *(double *)v162 = v35;
          *(_WORD *)&v162[8] = 2112;
          *(void *)&v162[10] = v38;
          __int16 v163 = 2048;
          *(void *)v164 = v31;
          *(_WORD *)&v164[8] = 2112;
          id v165 = v31;
          _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "OTR session ready (took %.6f) for %@ <%p %@>.",  buf,  0x2Au);
        }

        uint64_t v40 = os_log_shim_legacy_logging_enabled(v39);
        if ((_DWORD)v40)
        {
          if (_IDSShouldLogTransport(v40))
          {
            CFTypeRef v157 = v31;
            id v159 = v31;
            CFTypeRef v153 = *(CFTypeRef *)(a1 + 40);
            uint64_t v149 = *(void *)&v35;
            _IDSLogTransport( @"OTRController",  @"IDS",  @"OTR session ready (took %.6f) for %@ <%p %@>.");
            if (_IDSShouldLog(0LL, @"OTRController"))
            {
              CFTypeRef v157 = v31;
              id v159 = v31;
              CFTypeRef v153 = *(CFTypeRef *)(a1 + 40);
              uint64_t v149 = *(void *)&v35;
              _IDSLogV( 0LL,  @"IDSFoundation",  @"OTRController",  @"OTR session ready (took %.6f) for %@ <%p %@>.");
            }
          }
        }

        int v42 = *(void **)(a1 + 32);
        id v41 = (id *)(a1 + 32);
        uint64_t v43 = v41 + 1;
        objc_msgSend(v42, "setSessionNegotiationComplete:", v41[1], v149, v153, v157, v159);
        [*v41 _reportOTRTestResult:v41[1] setupTime:1 result:v35];
        uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue(+[IDSAWDLogging sharedInstance](&OBJC_CLASS___IDSAWDLogging, "sharedInstance"));
        id v45 = sub_100265B38(*v43);
        id v46 = (void *)objc_claimAutoreleasedReturnValue(v45);
        [v44 OTRSessionNegotiation:v46 priority:sub_100265CB0(*v43) duration:(unint64_t)(v35 * 1000.0) result:0];
      }

      else
      {
        uint64_t v97 = OSLogHandleForTransportCategory("OTRController");
        id v98 = (os_log_s *)objc_claimAutoreleasedReturnValue(v97);
        if (os_log_type_enabled(v98, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v99 = *(void *)(a1 + 40);
          *(_DWORD *)buf = 138412802;
          *(void *)v162 = v99;
          *(_WORD *)&v162[8] = 2048;
          *(void *)&v162[10] = v31;
          __int16 v163 = 2112;
          *(void *)v164 = v31;
          _os_log_impl( (void *)&_mh_execute_header,  v98,  OS_LOG_TYPE_DEFAULT,  "OTR session setup is done, but the session is NOT negotiating - token:%@ session:<%p %@>.",  buf,  0x20u);
        }

        uint64_t v101 = os_log_shim_legacy_logging_enabled(v100);
        if ((_DWORD)v101)
        {
          if (_IDSShouldLogTransport(v101))
          {
            _IDSLogTransport( @"OTRController",  @"IDS",  @"OTR session setup is done, but the session is NOT negotiating - token:%@ session:<%p %@>.");
            if (_IDSShouldLog(0LL, @"OTRController")) {
              _IDSLogV( 0LL,  @"IDSFoundation",  @"OTRController",  @"OTR session setup is done, but the session is NOT negotiating - token:%@ session:<%p %@>.");
            }
          }
        }
      }
    }

    else
    {
      uint64_t v81 = OSLogHandleForIDSCategory("Warning");
      uint64_t v82 = (os_log_s *)objc_claimAutoreleasedReturnValue(v81);
      if (os_log_type_enabled(v82, OS_LOG_TYPE_ERROR))
      {
        uint64_t v83 = *(void *)(a1 + 40);
        *(_DWORD *)buf = 138412290;
        *(void *)v162 = v83;
        _os_log_impl( (void *)&_mh_execute_header,  v82,  OS_LOG_TYPE_ERROR,  "Empty data response for %@ but session is not ready.",  buf,  0xCu);
      }

      if (os_log_shim_legacy_logging_enabled(v84))
      {
        _IDSWarnV(@"IDSFoundation", @"Empty data response for %@ but session is not ready.");
        _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"Empty data response for %@ but session is not ready.");
        _IDSLogTransport(@"Warning", @"IDS", @"Empty data response for %@ but session is not ready.");
      }
    }

    CFRelease(v31);
  }

  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  id result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Can't construct Array with count < 0",  36LL,  2LL,  "Swift/Array.swift",  17LL,  2,  936LL,  0);
  __break(1u);
  return result;
}

uint64_t sub_10026AB54(void *a1)
{
  id v1 = a1;
  id v2 = (void *)objc_claimAutoreleasedReturnValue([v1 componentsSeparatedByString:@"-"]);
  if ((unint64_t)[v2 count] > 2)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v2 objectAtIndex:2]);
    uint64_t v6 = (uint64_t)[v7 intValue];
  }

  else
  {
    uint64_t v3 = OSLogHandleForIDSCategory("Warning");
    unsigned int v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v10 = v1;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "_dataProtectionClassFromToken: invalid OTR token %@",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v5))
    {
      _IDSWarnV(@"IDSFoundation", @"_dataProtectionClassFromToken: invalid OTR token %@");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"_dataProtectionClassFromToken: invalid OTR token %@");
      _IDSLogTransport(@"Warning", @"IDS", @"_dataProtectionClassFromToken: invalid OTR token %@");
    }

    uint64_t v6 = 3LL;
  }

  return v6;
}

void sub_10026ADB0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10026ADC8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) copySessionForToken:*(void *)(a1 + 40)];
  uint64_t v3 = OSLogHandleForIDSCategory("OTRController");
  unsigned int v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void **)(a1 + 40);
    *(_DWORD *)buf = 138412290;
    id v15 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "hasMessagableOTRSessionForService for %@",  buf,  0xCu);
  }

  if (v2)
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = SecOTRSGetIsReadyForMessages(v2);
    uint64_t v7 = OSLogHandleForIDSCategory("OTRController");
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      if (*(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL)) {
        int v9 = @"YES";
      }
      else {
        int v9 = @"NO";
      }
      *(_DWORD *)buf = 134218242;
      id v15 = v2;
      __int16 v16 = 2112;
      int v17 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "   => found session %p, is ready: %@",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v10))
    {
    }

    CFRelease(v2);
  }

  else
  {
    uint64_t v11 = OSLogHandleForIDSCategory("OTRController");
    id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "   ** Could not find session", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled(v13)
      && _IDSShouldLog(0LL, @"OTRController"))
    {
      _IDSLogV(0LL, @"IDSFoundation", @"OTRController", @"   ** Could not find session");
    }
  }

void sub_10026B404(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x10026B200LL);
  }

  _Unwind_Resume(a1);
}

void sub_10026B438(id a1)
{
  off_1009C07D8 = (_UNKNOWN *)IMWeakLinkSymbol("SecMPPublicIdentityCreateFromData", @"MessageProtection");
}

id sub_10026B748(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _onQueueStartOTRNegotiationWithDeviceIfNeeded:*(void *)(a1 + 40) token:*(void *)(a1 + 48) reset:*(unsigned __int8 *)(a1 + 64) errorHandler:*(void *)(a1 + 56)];
}

LABEL_126:
        -[IDSOTRController startOTRNegotiationWithDeviceIfNeeded:token:reset:errorHandler:]( self,  "startOTRNegotiationWithDeviceIfNeeded:token:reset:errorHandler:",  v10,  v11,  1LL,  0LL,  v114,  v115);
        goto LABEL_127;
      }

      uint64_t v60 = OSLogHandleForIDSCategory("Warning");
      uint64_t v61 = (os_log_s *)objc_claimAutoreleasedReturnValue(v60);
      if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412546;
        NSUInteger v124 = v11;
        NSUInteger v125 = 1024;
        LODWORD(v126) = started;
        _os_log_impl( (void *)&_mh_execute_header,  v61,  OS_LOG_TYPE_ERROR,  "SecOTRSAppendStartPacket failed for %@ with error %d. Kick off re-negotiation.",  buf,  0x12u);
      }

      if (os_log_shim_legacy_logging_enabled(v62))
      {
        _IDSWarnV( @"IDSFoundation",  @"SecOTRSAppendStartPacket failed for %@ with error %d. Kick off re-negotiation.");
        _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"SecOTRSAppendStartPacket failed for %@ with error %d. Kick off re-negotiation.");
        __int128 v114 = v11;
        uint64_t v115 = (CFErrorRef)started;
        _IDSLogTransport( @"Warning",  @"IDS",  @"SecOTRSAppendStartPacket failed for %@ with error %d. Kick off re-negotiation.");
      }
    }

    else
    {
      uint64_t v67 = OSLogHandleForIDSCategory("Warning");
      uint64_t v68 = (os_log_s *)objc_claimAutoreleasedReturnValue(v67);
      if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412546;
        NSUInteger v124 = v11;
        NSUInteger v125 = 2112;
        id v126 = err;
        _os_log_impl( (void *)&_mh_execute_header,  v68,  OS_LOG_TYPE_ERROR,  "SecMPFullIdentityCreateOTRSessionWithFlags failed for %@ with error %@. Kick off re-negotiation.",  buf,  0x16u);
      }

      if (os_log_shim_legacy_logging_enabled(v69))
      {
        _IDSWarnV( @"IDSFoundation",  @"SecMPFullIdentityCreateOTRSessionWithFlags failed for %@ with error %@. Kick off re-negotiation.");
        _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"SecMPFullIdentityCreateOTRSessionWithFlags failed for %@ with error %@. Kick off re-negotiation.");
        __int128 v114 = v11;
        uint64_t v115 = err;
        _IDSLogTransport( @"Warning",  @"IDS",  @"SecMPFullIdentityCreateOTRSessionWithFlags failed for %@ with error %@. Kick off re-negotiation.");
      }

      if (!err)
      {

        goto LABEL_126;
      }

      if (CFErrorGetCode(err) == -25308)
      {
        id v70 = OSLogHandleForTransportCategory("OTRController");
        uint64_t v71 = (os_log_s *)objc_claimAutoreleasedReturnValue(v70);
        if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          NSUInteger v124 = v11;
          _os_log_impl( (void *)&_mh_execute_header,  v71,  OS_LOG_TYPE_DEFAULT,  "Data protection class is unavailable, Suspending OTR for %@ untill it is",  buf,  0xCu);
        }

        uint64_t v73 = os_log_shim_legacy_logging_enabled(v72);
        if ((_DWORD)v73)
        {
          if (_IDSShouldLogTransport(v73))
          {
            __int128 v114 = v11;
            _IDSLogTransport( @"OTRController",  @"IDS",  @"Data protection class is unavailable, Suspending OTR for %@ untill it is");
            if (_IDSShouldLog(0LL, @"OTRController"))
            {
              __int128 v114 = v11;
              _IDSLogV( 0LL,  @"IDSFoundation",  @"OTRController",  @"Data protection class is unavailable, Suspending OTR for %@ untill it is");
            }
          }
        }

        -[IDSOTRController suspendSessionNegotiation:askedByPairedDevice:]( self,  "suspendSessionNegotiation:askedByPairedDevice:",  v11,  0LL,  v114,  v115,  v116,  v117);
        if (err)
        {
          CFRelease(err);
          err = 0LL;
        }

        CFRelease(cf);
        CFRelease(v119);

        goto LABEL_129;
      }
    }

    uint64_t v74 = 1;
    goto LABEL_118;
  }

  if (!-[IDSOTRController isSessionNegotiating:](self, "isSessionNegotiating:", v11))
  {
    if (!a5 && ((IsReadyForMessages ^ 1) & 1) == 0)
    {
      uint64_t v63 = OSLogHandleForTransportCategory("OTRController");
      uint64_t v64 = (os_log_s *)objc_claimAutoreleasedReturnValue(v63);
      if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        NSUInteger v124 = v11;
        _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEFAULT, "OTR session for %@ is ready.", buf, 0xCu);
      }

      uint64_t v66 = os_log_shim_legacy_logging_enabled(v65);
      if ((_DWORD)v66)
      {
        if (_IDSShouldLogTransport(v66))
        {
          __int128 v114 = v11;
          _IDSLogTransport(@"OTRController", @"IDS", @"OTR session for %@ is ready.");
          if (_IDSShouldLog(0LL, @"OTRController"))
          {
            __int128 v114 = v11;
            _IDSLogV(0LL, @"IDSFoundation", @"OTRController", @"OTR session for %@ is ready.");
          }
        }
      }

      -[IDSOTRController performOTRSessionBlock:token:]( self,  "performOTRSessionBlock:token:",  1LL,  v11,  v114,  v115,  v116,  v117);
      CFRelease(cf);
      CFRelease(v119);
      if (v118) {
        goto LABEL_65;
      }
      goto LABEL_129;
    }

    uint64_t v75 = OSLogHandleForTransportCategory("OTRController");
    uint64_t v76 = (os_log_s *)objc_claimAutoreleasedReturnValue(v75);
    if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      NSUInteger v124 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v76,  OS_LOG_TYPE_DEFAULT,  "Kick off OTR session re-negotiation for %@.",  buf,  0xCu);
    }

    uint64_t v78 = os_log_shim_legacy_logging_enabled(v77);
    if ((_DWORD)v78)
    {
      if (_IDSShouldLogTransport(v78))
      {
        __int128 v114 = v11;
        _IDSLogTransport(@"OTRController", @"IDS", @"Kick off OTR session re-negotiation for %@.");
        if (_IDSShouldLog(0LL, @"OTRController"))
        {
          __int128 v114 = v11;
          _IDSLogV( 0LL,  @"IDSFoundation",  @"OTRController",  @"Kick off OTR session re-negotiation for %@.");
        }
      }
    }

    if (!v118)
    {
      if ((_DWORD)v14 == 1)
      {
        uint64_t v90 = (void *)objc_claimAutoreleasedReturnValue(+[IDSOTRKeyStorage sharedInstance](&OBJC_CLASS___IDSOTRKeyStorage, "sharedInstance"));
        [v90 lock];

        uint64_t v91 = (void *)objc_claimAutoreleasedReturnValue(+[IDSOTRKeyStorage sharedInstance](&OBJC_CLASS___IDSOTRKeyStorage, "sharedInstance"));
        uint64_t v92 = [v91 isUnderLock];

        uint64_t v93 = (void *)objc_claimAutoreleasedReturnValue(+[IDSOTRKeyStorage sharedInstance](&OBJC_CLASS___IDSOTRKeyStorage, "sharedInstance"));
        uint64_t v94 = (void *)objc_claimAutoreleasedReturnValue([v93 sessionKeyForToken:v11]);

        uint64_t v95 = (void *)objc_claimAutoreleasedReturnValue(+[IDSOTRKeyStorage sharedInstance](&OBJC_CLASS___IDSOTRKeyStorage, "sharedInstance"));
        [v95 unlock];

        if ((v92 & (v94 == 0LL)) == 1)
        {
          id v96 = OSLogHandleForTransportCategory("OTRController");
          uint64_t v97 = (os_log_s *)objc_claimAutoreleasedReturnValue(v96);
          if (os_log_type_enabled(v97, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            NSUInteger v124 = v11;
            _os_log_impl( (void *)&_mh_execute_header,  v97,  OS_LOG_TYPE_DEFAULT,  "Failed to find OTR session for token %@, we're under first lock.",  buf,  0xCu);
          }

          uint64_t v99 = os_log_shim_legacy_logging_enabled(v98);
          if ((_DWORD)v99)
          {
            if (_IDSShouldLogTransport(v99))
            {
              _IDSLogTransport( @"OTRController",  @"IDS",  @"Failed to find OTR session for token %@, we're under first lock.");
              if (_IDSShouldLog(0LL, @"OTRController")) {
                _IDSLogV( 0LL,  @"IDSFoundation",  @"OTRController",  @"Failed to find OTR session for token %@, we're under first lock.");
              }
            }
          }

          v121[2](v121, 1LL);
        }

        else
        {
          uint64_t v108 = OSLogHandleForTransportCategory("OTRController");
          uint64_t v109 = (os_log_s *)objc_claimAutoreleasedReturnValue(v108);
          if (os_log_type_enabled(v109, OS_LOG_TYPE_DEFAULT))
          {
            __int128 v110 = @"NO";
            if (v92) {
              uint64_t v111 = @"YES";
            }
            else {
              uint64_t v111 = @"NO";
            }
            *(_DWORD *)buf = 138412802;
            NSUInteger v124 = v11;
            id v126 = (CFErrorRef)v111;
            NSUInteger v125 = 2112;
            if (v94) {
              __int128 v110 = @"YES";
            }
            id v127 = 2112;
            uint64_t v128 = v110;
            _os_log_impl( (void *)&_mh_execute_header,  v109,  OS_LOG_TYPE_DEFAULT,  "Failed to find OTR session for token %@, this should never happen (underLock %@) (hasSessionKey %@)",  buf,  0x20u);
          }

          uint64_t v113 = os_log_shim_legacy_logging_enabled(v112);
          if ((_DWORD)v113)
          {
            if (_IDSShouldLogTransport(v113))
            {
              _IDSLogTransport( @"OTRController",  @"IDS",  @"Failed to find OTR session for token %@, this should never happen (underLock %@) (hasSessionKey %@)");
              if (_IDSShouldLog(0LL, @"OTRController")) {
                _IDSLogV( 0LL,  @"IDSFoundation",  @"OTRController",  @"Failed to find OTR session for token %@, this should never happen (underLock %@) (hasSessionKey %@)");
              }
            }
          }
        }
      }

      else
      {
        NSUInteger v104 = OSLogHandleForTransportCategory("OTRController");
        uint64_t v105 = (os_log_s *)objc_claimAutoreleasedReturnValue(v104);
        if (os_log_type_enabled(v105, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          NSUInteger v124 = v11;
          _os_log_impl( (void *)&_mh_execute_header,  v105,  OS_LOG_TYPE_DEFAULT,  "Failed to find OTR session for token %@, this should never happen.",  buf,  0xCu);
        }

        id v107 = os_log_shim_legacy_logging_enabled(v106);
        if ((_DWORD)v107)
        {
          if (_IDSShouldLogTransport(v107))
          {
            _IDSLogTransport( @"OTRController",  @"IDS",  @"Failed to find OTR session for token %@, this should never happen.");
            if (_IDSShouldLog(0LL, @"OTRController")) {
              _IDSLogV( 0LL,  @"IDSFoundation",  @"OTRController",  @"Failed to find OTR session for token %@, this should never happen.");
            }
          }
        }
      }

      goto LABEL_127;
    }

    uint64_t v79 = objc_alloc_init(&OBJC_CLASS___NSMutableData);
    restarted = SecOTRSAppendRestartPacket(v118, v79);
    if (!(_DWORD)restarted)
    {
      uint64_t v100 = OSLogHandleForTransportCategory("OTRController");
      uint64_t v101 = (os_log_s *)objc_claimAutoreleasedReturnValue(v100);
      if (os_log_type_enabled(v101, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134218242;
        NSUInteger v124 = v118;
        NSUInteger v125 = 2112;
        id v126 = (CFErrorRef)v11;
        _os_log_impl( (void *)&_mh_execute_header,  v101,  OS_LOG_TYPE_DEFAULT,  "Restarted OTR session %p for %@.",  buf,  0x16u);
      }

      uint64_t v103 = os_log_shim_legacy_logging_enabled(v102);
      if ((_DWORD)v103)
      {
        if (_IDSShouldLogTransport(v103))
        {
          __int128 v114 = v118;
          uint64_t v115 = (CFErrorRef)v11;
          _IDSLogTransport(@"OTRController", @"IDS", @"Restarted OTR session %p for %@.");
          if (_IDSShouldLog(0LL, @"OTRController"))
          {
            __int128 v114 = v118;
            uint64_t v115 = (CFErrorRef)v11;
            _IDSLogV(0LL, @"IDSFoundation", @"OTRController", @"Restarted OTR session %p for %@.");
          }
        }
      }

      -[IDSOTRController serializeSession:token:](self, "serializeSession:token:", v118, v11, v114, v115, v116, v117);
      -[IDSOTRController _kickoffOTRNegotiationWithDevice:token:negotiationData:]( self,  "_kickoffOTRNegotiationWithDevice:token:negotiationData:",  v10,  v11,  v79);

      goto LABEL_127;
    }

    uint64_t v81 = OSLogHandleForIDSCategory("Warning");
    uint64_t v82 = (os_log_s *)objc_claimAutoreleasedReturnValue(v81);
    if (os_log_type_enabled(v82, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412546;
      NSUInteger v124 = v11;
      NSUInteger v125 = 1024;
      LODWORD(v126) = restarted;
      _os_log_impl( (void *)&_mh_execute_header,  v82,  OS_LOG_TYPE_ERROR,  "SecOTRSAppendRestartPacket failed for %@, with result %d, removing session key. Kick off re-negotiation.",  buf,  0x12u);
    }

    if (os_log_shim_legacy_logging_enabled(v83))
    {
      _IDSWarnV( @"IDSFoundation",  @"SecOTRSAppendRestartPacket failed for %@, with result %d, removing session key. Kick off re-negotiation.");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"SecOTRSAppendRestartPacket failed for %@, with result %d, removing session key. Kick off re-negotiation.");
      __int128 v114 = v11;
      uint64_t v115 = (CFErrorRef)restarted;
      *(void *)&uint64_t v84 = _IDSLogTransport( @"Warning",  @"IDS",  @"SecOTRSAppendRestartPacket failed for %@, with result %d, removing session key. Kick off re-negotiation.").n128_u64[0];
    }

    -[IDSOTRController _cacheSession:token:](self, "_cacheSession:token:", 0LL, v11, v84, v114, v115, v116, v117);
    uint64_t v85 = (void *)objc_claimAutoreleasedReturnValue(+[IDSOTRKeyStorage sharedInstance](&OBJC_CLASS___IDSOTRKeyStorage, "sharedInstance"));
    [v85 removeSessionKeyForToken:v11];

    goto LABEL_126;
  }

  id v52 = OSLogHandleForTransportCategory("OTRController");
  uint64_t v53 = (os_log_s *)objc_claimAutoreleasedReturnValue(v52);
  if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    NSUInteger v124 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_DEFAULT,  "OTR negotiation for %@ in progress.",  buf,  0xCu);
  }

  uint64_t v55 = os_log_shim_legacy_logging_enabled(v54);
  if ((_DWORD)v55)
  {
    if (_IDSShouldLogTransport(v55))
    {
      _IDSLogTransport(@"OTRController", @"IDS", @"OTR negotiation for %@ in progress.");
    }
  }

  CFRelease(cf);
  CFRelease(v119);
  if (v118) {
LABEL_65:
  }
    CFRelease(v118);
LABEL_129:
}

      -[IDSIDQueryMessage setImportanceLevel:](v87, "setImportanceLevel:", 1LL);
    }

    uint64_t v109 = OSLogHandleForIDSCategory("PeerLookup");
    __int128 v110 = (os_log_s *)objc_claimAutoreleasedReturnValue(v109);
    if (os_log_type_enabled(v110, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v111 = (id)objc_claimAutoreleasedReturnValue(-[IDSIDQueryMessage service](v87, "service"));
      *(_DWORD *)v240 = 138412290;
      *(void *)&v240[4] = v111;
      _os_log_impl((void *)&_mh_execute_header, v110, OS_LOG_TYPE_DEFAULT, "The Query Service Is %@", v240, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v112) && _IDSShouldLog(0LL, @"PeerLookup"))
    {
      uint64_t v151 = (void *)objc_claimAutoreleasedReturnValue(-[IDSIDQueryMessage service](v87, "service"));
      _IDSLogV(0LL, @"IDSFoundation", @"PeerLookup", @"The Query Service Is %@");
    }

    if (!v221[5])
    {
      uint64_t v113 = -[IMPowerAssertion initWithIdentifier:timeout:]( objc_alloc(&OBJC_CLASS___IMPowerAssertion),  "initWithIdentifier:timeout:",  @"IDSPeerIDLookup",  60.0);
      __int128 v114 = (void *)v221[5];
      v221[5] = (uint64_t)v113;
    }

    uint64_t v115 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringGUID](&OBJC_CLASS___NSString, "stringGUID", v151));
    uint64_t v116 = (void *)objc_claimAutoreleasedReturnValue(+[IMMobileNetworkManager sharedInstance](&OBJC_CLASS___IMMobileNetworkManager, "sharedInstance"));
    [v116 addFastDormancyDisableToken:v115];

    uint64_t v117 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableArray componentsJoinedByString:](v177, "componentsJoinedByString:", @", "));
    *(void *)v240 = 0LL;
    *(void *)&v240[8] = v240;
    *(void *)&v240[16] = 0x2020000000LL;
    LODWORD(v241) = 0;
    v206[0] = 0LL;
    v206[1] = v206;
    v206[2] = 0x2020000000LL;
    v207 = 0;
    v185[0] = _NSConcreteStackBlock;
    v185[1] = 3221225472LL;
    v185[2] = sub_100348598;
    v185[3] = &unk_100901BC8;
    v185[4] = self;
    id v196 = v228;
    uint64_t v197 = v226;
    v198 = v230;
    uint64_t v118 = v86;
    __int128 v186 = v118;
    id v187 = v168;
    __int128 v119 = v117;
    v188 = v119;
    NSUInteger v120 = v183;
    v189 = v120;
    uint64_t v121 = v12;
    id v190 = v121;
    id v199 = buf;
    id v200 = v240;
    v204 = v162;
    v203 = v171;
    __int16 v191 = v167;
    double v192 = v177;
    uint64_t v201 = v206;
    __int16 v193 = v169;
    uint64_t v122 = v115;
    v194 = v122;
    v205 = v182;
    __int16 v195 = obj;
    v202 = &v220;
    -[IDSIDQueryMessage setCompletionBlock:](v87, "setCompletionBlock:", v185);
    uint64_t v123 = OSLogHandleForIDSCategory("PeerLookup");
    NSUInteger v124 = (os_log_s *)objc_claimAutoreleasedReturnValue(v123);
    if (os_log_type_enabled(v124, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id v232 = 138412802;
      v233 = v119;
      id v234 = 2112;
      v235 = v121;
      id v236 = 2112;
      id v237 = v120;
      _os_log_impl( (void *)&_mh_execute_header,  v124,  OS_LOG_TYPE_DEFAULT,  "  Sending off query for URIs: %@  from URI: %@   service: %@",  v232,  0x20u);
    }

    if (os_log_shim_legacy_logging_enabled(v125) && _IDSShouldLog(0LL, @"PeerLookup"))
    {
      uint64_t v155 = v121;
      id v158 = v120;
      uint64_t v152 = v119;
      _IDSLogV( 0LL,  @"IDSFoundation",  @"PeerLookup",  @"  Sending off query for URIs: %@  from URI: %@   service: %@");
    }

    id v126 = (void *)objc_claimAutoreleasedReturnValue( +[NetworkChangeNotifier sharedInstance]( &OBJC_CLASS___NetworkChangeNotifier,  "sharedInstance",  v152,  v155,  v158));
    id v127 = [v126 linkQualityForInterfaceType:2];

    if (v127 != (id)2)
    {
      uint64_t v128 = OSLogHandleForIDSCategory("PeerLookup");
      id v129 = (os_log_s *)objc_claimAutoreleasedReturnValue(v128);
      if (os_log_type_enabled(v129, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)id v232 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v129,  OS_LOG_TYPE_DEFAULT,  " ** WiFi link quality is not good, requesting cellular preferred",  v232,  2u);
      }

      if (os_log_shim_legacy_logging_enabled(v130)
        && _IDSShouldLog(0LL, @"PeerLookup"))
      {
        _IDSLogV( 0LL,  @"IDSFoundation",  @"PeerLookup",  @" ** WiFi link quality is not good, requesting cellular preferred");
      }

      -[IDSIDQueryMessage setForceCellular:](v87, "setForceCellular:", 1LL);
    }

    uint64_t v131 = OSLogHandleForIDSCategory("PeerLookup");
    id v132 = (os_log_s *)objc_claimAutoreleasedReturnValue(v131);
    if (os_log_type_enabled(v132, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id v232 = 138412802;
      v233 = v119;
      id v234 = 2112;
      v235 = v121;
      id v236 = 2112;
      id v237 = v120;
      _os_log_impl( (void *)&_mh_execute_header,  v132,  OS_LOG_TYPE_DEFAULT,  " => Sending query for URIs: %@  from URI: %@   service: %@",  v232,  0x20u);
    }

    if (os_log_shim_legacy_logging_enabled(v133) && _IDSShouldLog(0LL, @"PeerLookup"))
    {
      uint64_t v156 = v121;
      id v159 = v120;
      CFTypeRef v153 = v119;
      _IDSLogV( 0LL,  @"IDSFoundation",  @"PeerLookup",  @" => Sending query for URIs: %@  from URI: %@   service: %@");
    }

    -[FTMessageDelivery_DualMode sendMessage:]( self->_dualInterfaceidQueryMessageDelivery,  "sendMessage:",  v87,  v153,  v156,  v159);
    id v134 = (void *)objc_claimAutoreleasedReturnValue( +[IDSServerBag sharedInstanceForBagType:]( &OBJC_CLASS___IDSServerBag,  "sharedInstanceForBagType:",  1LL));
    uint64_t v135 = [v134 isServerAvailable];
    if ((_DWORD)v135) {
      uint64_t v135 = [v134 startBagLoad];
    }
    double v137 = im_primary_queue(v135, v136);
    double v138 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v137);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10034B470;
    block[3] = &unk_1008F6010;
    void block[4] = self;
    dispatch_async(v138, block);

    _Block_object_dispose(v206, 8);
    _Block_object_dispose(v240, 8);
  }

  else
  {
    v214 = 0u;
    v215 = 0u;
    id v212 = 0u;
    uint64_t v213 = 0u;
    uint64_t v92 = obj;
    uint64_t v93 = [v92 countByEnumeratingWithState:&v212 objects:v239 count:16];
    if (v93)
    {
      uint64_t v94 = *(void *)v213;
      uint64_t v95 = 1;
      do
      {
        for (i = 0LL; i != v93; i = (char *)i + 1)
        {
          if (*(void *)v213 != v94) {
            objc_enumerationMutation(v92);
          }
          uint64_t v97 = *(void **)(*((void *)&v212 + 1) + 8LL * (void)i);
          id v98 = objc_autoreleasePoolPush();
          uint64_t v99 = (void *)objc_claimAutoreleasedReturnValue([v97 tokenFreeURI]);
          uint64_t v100 = (void *)objc_claimAutoreleasedReturnValue(-[IDSPeerIDQueryHandler dataSource](self, "dataSource"));
          uint64_t v101 = [v100 hasPeerTokensForURI:v99 fromURI:v12 service:v183];

          objc_autoreleasePoolPop(v98);
          v95 &= v101;
        }

        uint64_t v93 = [v92 countByEnumeratingWithState:&v212 objects:v239 count:16];
      }

      while (v93);
    }

    else
    {
      uint64_t v95 = 1;
    }

    double v139 = OSLogHandleForIDSCategory("PeerLookup");
    uint64_t v140 = (os_log_s *)objc_claimAutoreleasedReturnValue(v139);
    if (os_log_type_enabled(v140, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v141 = @"NO";
      *(_DWORD *)v240 = 138412802;
      if (v95) {
        uint64_t v141 = @"YES";
      }
      *(void *)&v240[4] = v141;
      *(_WORD *)&v240[12] = 2112;
      *(void *)&v240[14] = v175;
      *(_WORD *)&v240[22] = 2112;
      v241 = v92;
      _os_log_impl( (void *)&_mh_execute_header,  v140,  OS_LOG_TYPE_DEFAULT,  "The requestedURIsToQuery have already been covered by previous queries! -- Returning {success: %@, checked: %@, requested: %@}",  v240,  0x20u);
    }

    if (os_log_shim_legacy_logging_enabled(v142) && _IDSShouldLog(0LL, @"PeerLookup"))
    {
      uint64_t v143 = @"NO";
      if (v95) {
        uint64_t v143 = @"YES";
      }
      uint64_t v155 = v175;
      id v158 = v92;
      double v150 = v143;
      _IDSLogV( 0LL,  @"IDSFoundation",  @"PeerLookup",  @"The requestedURIsToQuery have already been covered by previous queries! -- Returning {success: %@, checked: %@, requested: %@}");
    }

    uint64_t v144 = (void *)objc_claimAutoreleasedReturnValue( -[IDSPeerIDQueryHandler _completionBlocksForURIs:fromURI:fromService:forRefresh:]( self,  "_completionBlocksForURIs:fromURI:fromService:forRefresh:",  v92,  v12,  v183,  v182,  v150,  v155,  v158));
    id v145 = [v144 copy];

    v210 = 0u;
    uint64_t v211 = 0u;
    v208 = 0u;
    id v209 = 0u;
    uint64_t v118 = v145;
    id v146 = [v118 countByEnumeratingWithState:&v208 objects:v238 count:16];
    if (v146)
    {
      id v147 = *(void *)v209;
      do
      {
        for (j = 0LL; j != v146; j = (char *)j + 1)
        {
          if (*(void *)v209 != v147) {
            objc_enumerationMutation(v118);
          }
          (*(void (**)(void, NSMutableArray *))(*(void *)(*((void *)&v208 + 1) + 8LL * (void)j) + 16LL))( *(void *)(*((void *)&v208 + 1) + 8LL * (void)j),  v12);
        }

        id v146 = [v118 countByEnumeratingWithState:&v208 objects:v238 count:16];
      }

      while (v146);
    }

    -[IDSPeerIDQueryHandler _removeCompletionBlocksForURIs:fromURI:fromService:forRefresh:]( self,  "_removeCompletionBlocksForURIs:fromURI:fromService:forRefresh:",  v92,  v12,  v183,  v182);
    -[IDSPeerIDQueryHandler _dequeuePendingQueryIfPossible](self, "_dequeuePendingQueryIfPossible");
  }

  _Block_object_dispose(&v220, 8);
  _Block_object_dispose(buf, 8);

  _Block_object_dispose(v226, 8);
  _Block_object_dispose(v228, 8);
  _Block_object_dispose(v230, 8);
}

  sub_10041D3BC(v182);
  id v234 = swift_bridgeObjectRelease(v281);
  id v277 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v125) + 0x120LL))(v234);
  v235 = *(void *)(v277 + 16);
  id v236 = v252;
  id v237 = v251;
  v238 = v250;
  if (v235)
  {
    v239 = (uint64_t *)(v277 + 40);
    do
    {
      v240 = *(v239 - 1);
      v241 = *v239;
      v242 = swift_getObjectType(v240);
      id v278 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v241 + 8);
      swift_unknownObjectRetain(v240, v243);
      id v244 = v278(v238, v237, v236, v195, v242, v241);
      sub_100490064(v244);
      swift_unknownObjectRelease(v240, v245);
      v239 += 2;
      --v235;
    }

    while (v235);
  }

  swift_bridgeObjectRelease(v277);
  return v282;
}

        double v139 = (v148 - 1) & v148;
        uint64_t v142 = __clz(__rbit64(v148)) + (v135 << 6);
      }

      uint64_t v143 = *(void **)(*(void *)(v134 + 56) + 8 * v142);
      id v158 = (void *)v155;
      id v159 = a3;
      swift_bridgeObjectRetain(a3);
      uint64_t v144 = v143;
      v145._countAndFlagsBits = 538976288LL;
      v145._object = (void *)0xE400000000000000LL;
      String.append(_:)(v145);
      id v146 = v159;
      (*(void (**)(uint64_t, void *, unint64_t))((swift_isaMask & *v144) + 0x270LL))( v156,  v158,  v159);

      swift_bridgeObjectRelease(v146);
    }
  }

  id v130 = *(void *)(v117 + 8 * v131);
  if (v130)
  {
    uint64_t v122 = v131;
    goto LABEL_106;
  }

  while (1)
  {
    uint64_t v122 = v131 + 1;
    if (__OFADD__(v131, 1LL)) {
      break;
    }
    if (v122 >= v121) {
      goto LABEL_107;
    }
    id v130 = *(void *)(v117 + 8 * v122);
    ++v131;
    if (v130) {
      goto LABEL_106;
    }
  }

void sub_10026D3FC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDServiceController sharedInstance](&OBJC_CLASS___IDSDServiceController, "sharedInstance"));
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) topic]);
  int v9 = (void *)objc_claimAutoreleasedReturnValue([v7 serviceWithPushTopic:v8]);

  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 accountsOnService:v9]);

  id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 firstObject]);
  if (v12)
  {
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringGUID](&OBJC_CLASS___NSString, "stringGUID"));
    uint64_t v14 = OSLogHandleForIDSCategory("IDSGroupSendAheadObserver");
    id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v16 = *(__CFString **)(a1 + 40);
      int v17 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString destinations](v16, "destinations"));
      *(_DWORD *)buf = 138412802;
      id v32 = v16;
      __int16 v33 = 2112;
      double v34 = v12;
      __int16 v35 = 2112;
      uint64_t v36 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "sendAheadGroup { group %@, account %@, destination: %@ }",  buf,  0x20u);
    }

    if (os_log_shim_legacy_logging_enabled(v18)
      && _IDSShouldLog(0LL, @"IDSGroupSendAheadObserver"))
    {
      uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) destinations]);
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSGroupSendAheadObserver",  @"sendAheadGroup { group %@, account %@, destination: %@ }");
    }

    id v19 = objc_alloc_init(&OBJC_CLASS___IDSSendParameters);
    [v19 setPriority:300];
    id v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) destinations]);
    id v21 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDestination destinationWithStrings:]( &OBJC_CLASS___IDSDestination,  "destinationWithStrings:",  v20));
    [v19 setDestinations:v21];

    [v19 setCommand:&off_100947638];
    [v19 setEncryptPayload:1];
    [v19 setUseDictAsTopLevel:1];
    [v19 setIdentifier:v13];
    uint64_t v22 = IDSGetUUIDData(v13);
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
    [v19 setMessageUUID:v23];

    [v19 setDataToEncrypt:v5];
    [v19 setFireAndForget:1];
    [v19 setAlwaysSkipSelf:1];
    v29[0] = _NSConcreteStackBlock;
    v29[1] = 3221225472LL;
    v29[2] = sub_10026D844;
    v29[3] = &unk_1008F8A50;
    id v30 = v13;
    id v24 = v13;
    [v12 sendMessageWithSendParameters:v19 willSendBlock:0 completionBlock:v29];
  }

  else
  {
    uint64_t v25 = OSLogHandleForIDSCategory("Warning");
    __int16 v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412546;
      id v32 = @"IDSGroupSendAheadObserver";
      __int16 v33 = 2112;
      double v34 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_ERROR,  "%@ - No account for service name %@ found to send a message, bailing...",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v27))
    {
      _IDSWarnV( @"IDSFoundation",  @"%@ - No account for service name %@ found to send a message, bailing...");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"%@ - No account for service name %@ found to send a message, bailing...");
      _IDSLogTransport( @"Warning",  @"IDS",  @"%@ - No account for service name %@ found to send a message, bailing...");
    }
  }
}

void sub_10026D844(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = OSLogHandleForIDSCategory("IDSGroupSendAheadObserver");
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    id v7 = [v3 idsResponseCode];
    id v8 = (id)objc_claimAutoreleasedReturnValue([v3 responseError]);
    unsigned int v9 = [v3 lastCall];
    uint64_t v10 = @"NO";
    *(_DWORD *)buf = 138413058;
    uint64_t v14 = v6;
    __int16 v15 = 2048;
    if (v9) {
      uint64_t v10 = @"YES";
    }
    id v16 = v7;
    __int16 v17 = 2112;
    id v18 = v8;
    __int16 v19 = 2112;
    id v20 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Send ahead message %@ got response code %lu error %@ lastCall %@",  buf,  0x2Au);
  }

  if (os_log_shim_legacy_logging_enabled(v11)
    && _IDSShouldLog(0LL, @"IDSGroupSendAheadObserver"))
  {
    [v3 idsResponseCode];
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v3 responseError]);
    [v3 lastCall];
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSGroupSendAheadObserver",  @"Send ahead message %@ got response code %lu error %@ lastCall %@");
  }
}

uint64_t IDSProtoKeyTransparencyTrustedServiceSignaturesReadFrom(void *a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      if (v5++ >= 9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 1)
    {
      id v12 = objc_alloc_init(&OBJC_CLASS___IDSProtoKeyTransparencyTrustedServiceSignature);
      [a1 addServiceSignatures:v12];
      v14[0] = 0xAAAAAAAAAAAAAAAALL;
      v14[1] = 0xAAAAAAAAAAAAAAAALL;
      if (!PBReaderPlaceMark(a2, v14)
        || !IDSProtoKeyTransparencyTrustedServiceSignatureReadFrom((uint64_t)v12, a2))
      {

        return 0LL;
      }

      PBReaderRecallMark(a2, v14);
    }

    else
    {
      uint64_t result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result) {
        return result;
      }
    }
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_10026FABC(uint64_t a1, void *a2, void *a3, int a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a5;
  uint64_t v13 = objc_opt_class(&OBJC_CLASS___IDSServerMessagingMessage, v12);
  char isKindOfClass = objc_opt_isKindOfClass(v9, v13);
  __int16 v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSServerMessaging](&OBJC_CLASS___IDSFoundationLog, "IDSServerMessaging"));
  id v16 = v15;
  if ((isKindOfClass & 1) != 0)
  {
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138413058;
      id v35 = v9;
      __int16 v36 = 2112;
      id v37 = v10;
      __int16 v38 = 1024;
      int v39 = a4;
      __int16 v40 = 2112;
      id v41 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Sent server message with { responseMessage: %@, messageError: %@, resultCode: %d, resultDictionary: %@ }",  buf,  0x26u);
    }

    __int16 v17 = (void *)objc_claimAutoreleasedReturnValue([v10 domain]);
    else {
      BOOL v18 = 0;
    }

    __int16 v19 = (void *)objc_claimAutoreleasedReturnValue([v10 domain]);
    if ([v19 isEqualToString:APSErrorDomain])
    {
      if ([v10 code] == (id)4)
      {

        goto LABEL_15;
      }

      BOOL v20 = [v10 code] == (id)5;
    }

    else
    {
      BOOL v20 = 0;
    }

    if (!v18 && !v20)
    {
      if (!v10)
      {
        id v16 = 0LL;
LABEL_19:
        (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
        __int16 v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cancelOnClientCrash]);
        unsigned int v27 = [v26 BOOLValue];

        if (v27)
        {
          uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) messagesToCancelOnDeallocByTopic]);
          uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v28 objectForKeyedSubscript:*(void *)(a1 + 48)]);
          [v29 removeObject:*(void *)(a1 + 56)];
        }

        goto LABEL_21;
      }

      uint64_t v25 = IDSServerMessagingErrorDomain;
      NSErrorUserInfoKey v30 = NSUnderlyingErrorKey;
      id v31 = v10;
      uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v31,  &v30,  1LL));
      uint64_t v23 = v25;
      uint64_t v24 = 4LL;
LABEL_18:
      id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v23,  v24,  v22));

      goto LABEL_19;
    }

uint64_t sub_1002706B0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_100271078(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([a2 objectForKey:v5]);
  if ((objc_opt_isKindOfClass(v6, a1) & 1) != 0)
  {
    id v7 = v6;
  }

  else
  {
    if (v6)
    {
      char v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT)) {
        sub_1006A5200();
      }
    }

    id v7 = 0LL;
  }

  return v7;
}

id sub_100271778(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) setObject:a3 forKey:a2];
}

id sub_100272CB0(uint64_t a1, void *a2)
{
  return [a2 sendXPCObject:*(void *)(a1 + 32)];
}

id sub_100272CBC(uint64_t a1)
{
  return [*(id *)(a1 + 32) enqueueIncomingMessageBroadcast:*(void *)(a1 + 64) broadcastData:*(void *)(a1 + 40) forTopic:*(void *)(a1 + 48) entitlement:kIDSMessagingEntitlement command:0 capabilities:*(unsigned int *)(a1 + 72) messageContext:*(void *)(a1 + 56)];
}

void sub_100272D40(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___IDSOTRKeyStorage);
  id v2 = (void *)qword_1009C07F8;
  qword_1009C07F8 = (uint64_t)v1;
}

void sub_1002734F4(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a3, "__imHexString"));
  if (v6 && v5) {
    [*(id *)(a1 + 32) setObject:v5 forKey:v6];
  }
}

void sub_100273DDC(uint64_t a1, void *a2, uint64_t a3)
{
  id v6 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSData __imDataWithHexString:](&OBJC_CLASS___NSData, "__imDataWithHexString:", a3));
  if (v6 && v5) {
    [*(id *)(a1 + 32) setObject:v5 forKey:v6];
  }
}

id sub_100274120(void *a1)
{
  id v1 = a1;
  id v2 = (void *)objc_claimAutoreleasedReturnValue([v1 componentsSeparatedByString:@"-"]);
  if ((unint64_t)[v2 count] > 2)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v2 objectAtIndex:0]);
  }

  else
  {
    uint64_t v3 = OSLogHandleForIDSCategory("Warning");
    char v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v9 = v1;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "OTRStore: invalid OTR token %@", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v5))
    {
      _IDSWarnV(@"IDSFoundation", @"OTRStore: invalid OTR token %@");
      _IDSLogV(0LL, @"IDSFoundation", @"Warning", @"OTRStore: invalid OTR token %@");
      _IDSLogTransport(@"Warning", @"IDS", @"OTRStore: invalid OTR token %@");
    }

    id v6 = 0LL;
  }

  return v6;
}

void sub_100274A00(_Unwind_Exception *a1)
{
}

void sub_100274A4C(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained[4] invalidate];
  id v1 = WeakRetained[4];
  WeakRetained[4] = 0LL;
}

void sub_100274A8C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v2 = (void *)WeakRetained[4];
  if (v2)
  {
    [v2 setFireTimeInterval:3.0];
  }

  else
  {
    uint64_t v3 = objc_alloc(&OBJC_CLASS___IMTimer);
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v6 = im_primary_queue(v3, v5);
    id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    char v8 = -[IMTimer initWithTimeInterval:name:shouldWake:target:selector:userInfo:queue:]( v3,  "initWithTimeInterval:name:shouldWake:target:selector:userInfo:queue:",  @"com.apple.identityservices.otr-save-store",  0LL,  v4,  "_saveNow",  0LL,  v7,  3.0);
    id v9 = (void *)WeakRetained[4];
    WeakRetained[4] = v8;
  }
}

void sub_100274B40(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained[3] invalidate];
  id v1 = WeakRetained[3];
  WeakRetained[3] = 0LL;
}

void sub_100274B80(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v2 = (void *)WeakRetained[3];
  if (v2)
  {
    [v2 setFireTimeInterval:300.0];
  }

  else
  {
    uint64_t v3 = objc_alloc(&OBJC_CLASS___IMTimer);
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v6 = im_primary_queue(v3, v5);
    id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    char v8 = -[IMTimer initWithTimeInterval:name:shouldWake:target:selector:userInfo:queue:]( v3,  "initWithTimeInterval:name:shouldWake:target:selector:userInfo:queue:",  @"com.apple.identityservices.otr-purge-cache",  0LL,  v4,  "_purgeMap",  0LL,  v7,  300.0);
    id v9 = (void *)WeakRetained[3];
    WeakRetained[3] = v8;
  }
}

id sub_100274CA8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _saveNow];
}

id sub_100274D1C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _purgeMap];
}

void sub_100276024(id a1)
{
  qword_1009C0808 = IMWeakLinkClass(@"APSConnection", @"ApplePushService");
}

void sub_100276050(id a1)
{
  off_1009C0810 = (_UNKNOWN *)IMWeakLinkSymbol("SecIdentityCopyCertificate", @"Security");
}

void sub_10027607C(id a1)
{
  off_1009C0820 = (_UNKNOWN *)IMWeakLinkSymbol("SecCertificateCopyCommonNames", @"Security");
}

void sub_100276114(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___IDSIDStatusQueryController);
  id v2 = (void *)qword_1009C0838;
  qword_1009C0838 = (uint64_t)v1;
}

void sub_10027634C(_Unwind_Exception *a1)
{
}

void sub_10027638C(uint64_t a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, void *a7, char a8)
{
  id v14 = a2;
  id v15 = a3;
  id v16 = a4;
  id v17 = a5;
  id v18 = a7;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  BOOL v20 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  uint64_t v34 = 0LL;
  id v35 = &v34;
  uint64_t v36 = 0x3032000000LL;
  id v37 = sub_1002765CC;
  __int16 v38 = sub_1002765DC;
  id v39 = 0LL;
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3221225472LL;
  v28[2] = sub_1002765E4;
  v28[3] = &unk_1008FF330;
  id v21 = v18;
  id v29 = v21;
  NSErrorUserInfoKey v32 = &v34;
  uint64_t v22 = v16;
  uint64_t v23 = a6;
  id v24 = v14;
  id v30 = v24;
  char v33 = a8;
  uint64_t v25 = v20;
  id v31 = v25;
  [v15 enumerateKeysAndObjectsUsingBlock:v28];
  objc_msgSend( WeakRetained,  "_updateCacheWithStatusUpdates:fromURI:fromService:success:hadError:negativeCacheHints:",  v25,  v24,  v17,  v23,  objc_msgSend(v21, "count") != 0,  v22);
  if ([v15 count] || !v35[5])
  {
    __int16 v26 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    -[NSMutableDictionary setObject:forKey:](v26, "setObject:forKey:", v25, v17);
    [WeakRetained _sendIDStatusChanges:v26 forService:v17 URI:v24 success:v23 error:v35[5]];
  }

  else
  {
    objc_msgSend(WeakRetained, "_sendIDStatusChanges:forService:URI:success:error:", 0, v17, v24, v23);
  }

  _Block_object_dispose(&v34, 8);
}

void sub_1002765B0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_1002765CC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1002765DC(uint64_t a1)
{
}

void sub_1002765E4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:v5]);
  uint64_t v8 = *(void *)(*(void *)(a1 + 56) + 8LL);
  uint64_t v10 = *(void *)(v8 + 40);
  id v9 = (id *)(v8 + 40);
  if (!v10) {
    objc_storeStrong(v9, v7);
  }
  uint64_t v11 = OSLogHandleForIDSCategory("IDQuery");
  uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v13 = *(void *)(a1 + 40);
    *(_DWORD *)buf = 138412802;
    id v32 = v5;
    __int16 v33 = 2112;
    uint64_t v34 = v13;
    __int16 v35 = 2112;
    uint64_t v36 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Completed ID query {uri: %@, fromURI: %@, error: %@}",  buf,  0x20u);
  }

  if (os_log_shim_legacy_logging_enabled(v14))
  {
    MarcoLogMadridLevel( @"IDSDaemonQueries",  0LL,  @"IDQuery",  @"Completed ID query {uri: %@, fromURI: %@, error: %@}");
    uint64_t v27 = *(void *)(a1 + 40);
    uint64_t v28 = v7;
    id v26 = v5;
    IMLogString( 0LL,  @"IDSIDQuery",  @"IDS",  @"IDQuery",  @"Completed ID query {uri: %@, fromURI: %@, error: %@}");
    if ((_IMWillLog(@"IDQuery", v15) & 1) != 0)
    {
      uint64_t v27 = *(void *)(a1 + 40);
      uint64_t v28 = v7;
      id v26 = v5;
      _IMAlwaysLog(0LL, @"IDQuery", @"Completed ID query {uri: %@, fromURI: %@, error: %@}");
    }
  }

  else {
    uint64_t v16 = 2LL;
  }
  id v17 = (void *)objc_claimAutoreleasedReturnValue([v7 domain]);
  uint64_t v18 = IDSPeerIDManagerErrorDomain;
  if ([v17 isEqualToIgnoringCase:IDSPeerIDManagerErrorDomain])
  {
    BOOL v19 = [v7 code] == (id)3;

    if (v19)
    {
      uint64_t v16 = 2LL;
      goto LABEL_19;
    }
  }

  else
  {
  }

  if (v7)
  {
    if (*(_BYTE *)(a1 + 64))
    {
      NSErrorUserInfoKey v29 = NSLocalizedDescriptionKey;
      id v30 = @"Network unavailable.";
      BOOL v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v30,  &v29,  1LL));
      uint64_t v21 = objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v18,  6LL,  v20));
      uint64_t v22 = *(void *)(*(void *)(a1 + 56) + 8LL);
      uint64_t v23 = *(void **)(v22 + 40);
      *(void *)(v22 + 40) = v21;
    }

    uint64_t v16 = 0LL;
  }

void sub_1002768D0(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained[1] invalidate];
  id v1 = WeakRetained[1];
  WeakRetained[1] = 0LL;
}

void sub_100276910(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v2 = (void *)WeakRetained[1];
  if (v2)
  {
    [v2 setFireTimeInterval:120.0];
  }

  else
  {
    uint64_t v3 = objc_alloc(&OBJC_CLASS___IMTimer);
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v6 = im_primary_queue(v3, v5);
    id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    uint64_t v8 = -[IMTimer initWithTimeInterval:name:shouldWake:target:selector:userInfo:queue:]( v3,  "initWithTimeInterval:name:shouldWake:target:selector:userInfo:queue:",  @"com.apple.identityservices.id-status-cache",  0LL,  v4,  "_flush",  0LL,  v7,  120.0);
    id v9 = (void *)WeakRetained[1];
    WeakRetained[1] = v8;
  }
}

id sub_100276A38(uint64_t a1)
{
  return [*(id *)(a1 + 32) _flush];
}

id sub_100277840(id a1, IDSEndpoint *a2)
{
  return -[IDSEndpoint refreshDate](a2, "refreshDate");
}

int64_t sub_100277848(id a1, NSDate *a2, NSDate *a3)
{
  return -[NSDate compare:](a2, "compare:", a3);
}

uint64_t sub_100277954(unint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 prefixedURI]);
  if (![v4 length])
  {

LABEL_9:
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v3 prefixedURI]);
    id v12 = [v11 length];

    if (!v12)
    {
      uint64_t v19 = OSLogHandleForIDSCategory("IDQuery");
      BOOL v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v37[0] = v3;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "  => Invalid URI, empty: %@", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled(v21))
      {
        MarcoLogMadridLevel(@"IDSDaemonQueries", 0LL, @"IDQuery", @"  => Invalid URI, empty: %@");
        IMLogString(0LL, @"IDSIDQuery", @"IDS", @"IDQuery", @"  => Invalid URI, empty: %@");
        if ((_IMWillLog(@"IDQuery", v22) & 1) != 0) {
          _IMAlwaysLog(0LL, @"IDQuery", @"  => Invalid URI, empty: %@");
        }
      }

      goto LABEL_37;
    }

    if (a1 != 1)
    {
      if (a1)
      {
        if (a1 >= 7)
        {
          uint64_t v24 = OSLogHandleForIDSCategory("IDQuery");
          uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109378;
            LODWORD(v37[0]) = a1;
            WORD2(v37[0]) = 2112;
            *(void *)((char *)v37 + 6) = v3;
            _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "  => Invalid URI type: %d  URI: %@",  buf,  0x12u);
          }

          if (os_log_shim_legacy_logging_enabled(v26))
          {
            MarcoLogMadridLevel( @"IDSDaemonQueries",  0LL,  @"IDQuery",  @"  => Invalid URI type: %d  URI: %@");
            IMLogString( 0LL,  @"IDSIDQuery",  @"IDS",  @"IDQuery",  @"  => Invalid URI type: %d  URI: %@");
            if ((_IMWillLog(@"IDQuery", v27) & 1) != 0) {
              _IMAlwaysLog(0LL, @"IDQuery", @"  => Invalid URI type: %d  URI: %@");
            }
          }

          goto LABEL_37;
        }
      }

      else
      {
        uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v3 prefixedURI]);
        id v14 = [v13 rangeOfString:@"+"];

        if (v14 != (id)4)
        {
          uint64_t v15 = OSLogHandleForIDSCategory("IDQuery");
          uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            v37[0] = v3;
            _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "  => Invalid URI, phone number, with no '+' character: %@",  buf,  0xCu);
          }

          if (os_log_shim_legacy_logging_enabled(v17))
          {
            MarcoLogMadridLevel( @"IDSDaemonQueries",  0LL,  @"IDQuery",  @"  => Invalid URI, phone number, with no '+' character: %@");
            IMLogString( 0LL,  @"IDSIDQuery",  @"IDS",  @"IDQuery",  @"  => Invalid URI, phone number, with no '+' character: %@");
            if ((_IMWillLog(@"IDQuery", v18) & 1) != 0) {
              _IMAlwaysLog(0LL, @"IDQuery", @"  => Invalid URI, phone number, with no '+' character: %@");
            }
          }

          goto LABEL_37;
        }
      }

LABEL_206:
  uint64_t v16 = v196;
LABEL_207:
}

  v476 = kIDSQRAllocateKey_GroupID;
  v477 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", kIDSQRAllocateKey_GroupID, v960, v1003, v1046));
  v479 = objc_opt_class(&OBJC_CLASS___NSString, v478);
  v480 = objc_opt_isKindOfClass(v477, v479);

  v481 = (NSString *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v476]);
  v482 = v481;
  if ((v480 & 1) != 0)
  {
    groupID = self->_groupID;
    self->_groupID = v481;
LABEL_208:

    goto LABEL_215;
  }

  if (v482)
  {
    v484 = OSLogHandleForIDSCategory("QRAllocator");
    v485 = (os_log_s *)objc_claimAutoreleasedReturnValue(v484);
    if (os_log_type_enabled(v485, OS_LOG_TYPE_DEBUG))
    {
      v486 = (id)objc_claimAutoreleasedReturnValue([v4 objectForKey:v476]);
      v488 = (id)objc_opt_class(&OBJC_CLASS___NSString, v487);
      v489 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v476]);
      v491 = (id)objc_opt_class(v489, v490);
      *(_DWORD *)buf = 138412802;
      v1070 = v486;
      v1071 = 2112;
      v1072 = v488;
      v1073 = 2112;
      v1074 = v491;
      _os_log_impl( (void *)&_mh_execute_header,  v485,  OS_LOG_TYPE_DEBUG,  "Unexpected datatype. %@ should be of type %@, not %@",  buf,  0x20u);
    }

    if (os_log_shim_legacy_logging_enabled(v492))
    {
      if (_IDSShouldLog(1LL, @"QRAllocator"))
      {
        groupID = (NSString *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v476]);
        v494 = objc_opt_class(&OBJC_CLASS___NSString, v493);
        v495 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v476]);
        v1004 = v494;
        v1047 = objc_opt_class(v495, v496);
        v961 = groupID;
        _IDSLogV( 1LL,  @"IDSFoundation",  @"QRAllocator",  @"Unexpected datatype. %@ should be of type %@, not %@");

        goto LABEL_208;
      }
    }
  }

uint64_t sub_10027B358()
{
  uint64_t v0 = (void *)objc_claimAutoreleasedReturnValue(+[IDSServerBag sharedInstanceForBagType:](&OBJC_CLASS___IDSServerBag, "sharedInstanceForBagType:", 0LL));
  id v1 = (void *)objc_claimAutoreleasedReturnValue([v0 objectForKey:@"client-query-allow-forced"]);

  if (v1) {
    uint64_t v2 = (uint64_t)[v1 BOOLValue];
  }
  else {
    uint64_t v2 = 1LL;
  }

  return v2;
}

uint64_t sub_10027B3C0()
{
  uint64_t v0 = (void *)objc_claimAutoreleasedReturnValue(+[IDSServerBag sharedInstanceForBagType:](&OBJC_CLASS___IDSServerBag, "sharedInstanceForBagType:", 0LL));
  id v1 = (void *)objc_claimAutoreleasedReturnValue([v0 objectForKey:@"client-query-respect-soft-expiry"]);

  if (v1) {
    uint64_t v2 = (uint64_t)[v1 BOOLValue];
  }
  else {
    uint64_t v2 = 1LL;
  }

  return v2;
}

void sub_10027B428( uint64_t a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, void *a7, char a8, void *a9)
{
  id v27 = a2;
  id v16 = a3;
  id v17 = a4;
  id v26 = a5;
  id v18 = a7;
  id v19 = a9;
  BOOL v20 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  uint64_t v34 = 0LL;
  __int16 v35 = &v34;
  uint64_t v36 = 0x3032000000LL;
  id v37 = sub_1002765CC;
  __int16 v38 = sub_1002765DC;
  id v39 = 0LL;
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3221225472LL;
  v28[2] = sub_10027B6AC;
  v28[3] = &unk_1008FF330;
  id v21 = v18;
  id v29 = v21;
  uint64_t v32 = &v34;
  id v30 = *(id *)(a1 + 32);
  char v33 = a8;
  uint64_t v22 = v20;
  id v31 = v22;
  [v16 enumerateKeysAndObjectsUsingBlock:v28];
  objc_msgSend( *(id *)(a1 + 40),  "_updateCacheWithStatusUpdates:fromURI:fromService:success:hadError:negativeCacheHints:",  v22,  *(void *)(a1 + 32),  *(void *)(a1 + 48),  a6,  objc_msgSend(v21, "count") != 0,  v17);

  if ([v16 count] || !v35[5])
  {
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 40) _cachedResultsForURIs:*(void *)(a1 + 56) fromURI:*(void *)(a1 + 32) fromService:*(void *)(a1 + 48)]);
    [*(id *)(a1 + 40) _sendIDStatusChanges:v23 forService:*(void *)(a1 + 48) URI:*(void *)(a1 + 32) success:a6 error:v35[5]];
    uint64_t v24 = *(void *)(a1 + 64);
    if (v24) {
      (*(void (**)(uint64_t, void *, void, void, uint64_t, uint64_t))(v24 + 16))( v24,  v23,  *(void *)(a1 + 32),  *(void *)(a1 + 48),  a6,  v35[5]);
    }
  }

  else
  {
    objc_msgSend( *(id *)(a1 + 40),  "_sendIDStatusChanges:forService:URI:success:error:",  0,  *(void *)(a1 + 48),  *(void *)(a1 + 32),  a6);
    uint64_t v25 = *(void *)(a1 + 64);
    if (v25) {
      (*(void (**)(uint64_t, void, void, void, uint64_t, uint64_t))(v25 + 16))( v25,  0LL,  *(void *)(a1 + 32),  *(void *)(a1 + 48),  a6,  v35[5]);
    }
  }

  _Block_object_dispose(&v34, 8);
}

void sub_10027B690( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void sub_10027B6AC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:v5]);
  uint64_t v8 = *(void *)(*(void *)(a1 + 56) + 8LL);
  uint64_t v10 = *(void *)(v8 + 40);
  uint64_t v9 = (id *)(v8 + 40);
  if (!v10) {
    objc_storeStrong(v9, v7);
  }
  uint64_t v11 = OSLogHandleForIDSCategory("IDQuery");
  id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v13 = *(void *)(a1 + 40);
    *(_DWORD *)buf = 138412802;
    id v32 = v5;
    __int16 v33 = 2112;
    uint64_t v34 = v13;
    __int16 v35 = 2112;
    uint64_t v36 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Completed ID query for URI %@ fromURI %@ (Error: %@)",  buf,  0x20u);
  }

  if (os_log_shim_legacy_logging_enabled(v14))
  {
    MarcoLogMadridLevel( @"IDSDaemonQueries",  0LL,  @"IDQuery",  @"Completed ID query for URI %@ fromURI %@ (Error: %@)");
    uint64_t v27 = *(void *)(a1 + 40);
    uint64_t v28 = v7;
    id v26 = v5;
    IMLogString( 0LL,  @"IDSIDQuery",  @"IDS",  @"IDQuery",  @"Completed ID query for URI %@ fromURI %@ (Error: %@)");
    if ((_IMWillLog(@"IDQuery", v15) & 1) != 0)
    {
      uint64_t v27 = *(void *)(a1 + 40);
      uint64_t v28 = v7;
      id v26 = v5;
      _IMAlwaysLog(0LL, @"IDQuery", @"Completed ID query for URI %@ fromURI %@ (Error: %@)");
    }
  }

  else {
    uint64_t v16 = 2LL;
  }
  id v17 = (void *)objc_claimAutoreleasedReturnValue([v7 domain]);
  uint64_t v18 = IDSPeerIDManagerErrorDomain;
  if ([v17 isEqualToIgnoringCase:IDSPeerIDManagerErrorDomain])
  {
    BOOL v19 = [v7 code] == (id)3;

    if (v19)
    {
      uint64_t v16 = 2LL;
      goto LABEL_19;
    }
  }

  else
  {
  }

  if (v7)
  {
    if (*(_BYTE *)(a1 + 64))
    {
      NSErrorUserInfoKey v29 = NSLocalizedDescriptionKey;
      id v30 = @"Network unavailable.";
      BOOL v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v30,  &v29,  1LL));
      uint64_t v21 = objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v18,  6LL,  v20));
      uint64_t v22 = *(void *)(*(void *)(a1 + 56) + 8LL);
      uint64_t v23 = *(void **)(v22 + 40);
      *(void *)(v22 + 40) = v21;
    }

    uint64_t v16 = 0LL;
  }

uint64_t sub_10027B998(void *a1)
{
  id v1 = a1;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[IDSServerBag sharedInstanceForBagType:](&OBJC_CLASS___IDSServerBag, "sharedInstanceForBagType:", 1LL));
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"device-query-reset-interval-hours-%@",  v1));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKey:v3]);

  if (v4)
  {
    uint64_t v5 = (uint64_t)[v4 intValue];
  }

  else if ([v1 isEqualToString:@"com.apple.private.alloy.arcade"])
  {
    uint64_t v5 = 5LL;
  }

  else
  {
    uint64_t v5 = 1LL;
  }

  return v5;
}

void sub_10027BA58(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, void *a6)
{
  id v11 = a2;
  id v12 = a3;
  id v13 = a4;
  id v14 = a6;
  uint64_t v15 = OSLogHandleForIDSCategory("IDQuery");
  uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    id v17 = @"YES";
    *(_DWORD *)buf = 138413314;
    id v36 = v11;
    if (!v13) {
      id v17 = @"NO";
    }
    __int16 v37 = 2112;
    id v38 = v12;
    __int16 v39 = 2112;
    id v40 = v13;
    __int16 v41 = 2112;
    int v42 = v17;
    __int16 v43 = 2112;
    id v44 = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Remote ID IDs Query V2 has completed with the following: %@  FromURI: %@ ReturnedService: %@ ReturnedSucesss: %@ R eturnedError: %@ ",  buf,  0x34u);
  }

  if (os_log_shim_legacy_logging_enabled(v18))
  {
    BOOL v19 = v13 ? @"YES" : @"NO";
    MarcoLogMadridLevel( @"IDSDaemonQueries",  0LL,  @"IDQuery",  @"Remote ID IDs Query V2 has completed with the following: %@  FromURI: %@ ReturnedService: %@ ReturnedSucesss: %@ ReturnedError: %@ ");
    __int16 v33 = v19;
    id v34 = v14;
    id v31 = v12;
    id v32 = v13;
    id v30 = v11;
    IMLogString( 0LL,  @"IDSIDQuery",  @"IDS",  @"IDQuery",  @"Remote ID IDs Query V2 has completed with the following: %@  FromURI: %@ ReturnedService: %@ ReturnedSucesss: %@ ReturnedError: %@ ");
    if ((_IMWillLog(@"IDQuery", v20) & 1) != 0)
    {
      __int16 v33 = v19;
      id v34 = v14;
      id v31 = v12;
      id v32 = v13;
      id v30 = v11;
      _IMAlwaysLog( 0LL,  @"IDQuery",  @"Remote ID IDs Query V2 has completed with the following: %@  FromURI: %@ ReturnedService: %@ ReturnedSucesss: %@ ReturnedError: %@ ");
    }
  }

  uint64_t v21 = OSLogHandleForIDSCategory("IDQuery");
  uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    id v36 = v11;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Updating Cache  %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v23))
  {
    MarcoLogMadridLevel(@"IDSDaemonQueries", 0LL, @"IDQuery", @"Updating Cache  %@");
    id v30 = v11;
    IMLogString(0LL, @"IDSIDQuery", @"IDS", @"IDQuery", @"Updating Cache  %@");
    if ((_IMWillLog(@"IDQuery", v24) & 1) != 0)
    {
      id v30 = v11;
      _IMAlwaysLog(0LL, @"IDQuery", @"Updating Cache  %@");
    }
  }

  objc_msgSend( *(id *)(a1 + 32),  "_updateCacheWithStatusUpdates:fromURI:fromService:success:hadError:negativeCacheHints:",  v11,  *(void *)(a1 + 40),  *(void *)(a1 + 48),  a5,  0,  0,  v30,  v31,  v32,  v33,  v34);
  uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjectsAndKeys:",  v11,  *(void *)(a1 + 48),  0LL));
  uint64_t v26 = OSLogHandleForIDSCategory("IDQuery");
  uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    id v36 = v25;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Calling Completion Block  %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v28))
  {
    MarcoLogMadridLevel(@"IDSDaemonQueries", 0LL, @"IDQuery", @"Calling Completion Block  %@");
    IMLogString(0LL, @"IDSIDQuery", @"IDS", @"IDQuery", @"Calling Completion Block  %@");
    if ((_IMWillLog(@"IDQuery", v29) & 1) != 0) {
      _IMAlwaysLog(0LL, @"IDQuery", @"Calling Completion Block  %@");
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))(*(void *)(a1 + 56));
}

void sub_10027BEA0(id a1, NSString *a2, NSError *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = a3;
  uint64_t v6 = OSLogHandleForIDSCategory("IDSDelivery");
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    uint64_t v10 = v4;
    __int16 v11 = 2112;
    id v12 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Triggered auto bug capture for query rate limiting {session : %@, error: %@}",  buf,  0x16u);
  }

  if (os_log_shim_legacy_logging_enabled(v8) && _IDSShouldLog(0LL, @"IDSDelivery")) {
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDelivery",  @"Triggered auto bug capture for query rate limiting {session : %@, error: %@}");
  }
}

void sub_10027DCC8(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, void *a6)
{
  id v17 = a2;
  id v11 = a3;
  id v12 = a4;
  id v13 = a6;
  if (v17)
  {
    id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerIDManager]);
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( [v14 endpointsForURIs:*(void *)(a1 + 40) service:*(void *)(a1 + 48) fromURI:*(void *)(a1 + 56) ignoringTTL:1]);
  }

  else
  {
    uint64_t v15 = 0LL;
  }

  uint64_t v16 = *(void *)(a1 + 64);
  if (v16) {
    (*(void (**)(uint64_t, void *, void, void, uint64_t, id))(v16 + 16))( v16,  v15,  *(void *)(a1 + 56),  *(void *)(a1 + 48),  a5,  v13);
  }
}

void sub_10027E404(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, void *a6)
{
  id v17 = a2;
  id v11 = a3;
  id v12 = a4;
  id v13 = a6;
  if (v17)
  {
    id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerIDManager]);
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( [v14 idInfoResultForURIs:*(void *)(a1 + 40) service:*(void *)(a1 + 48) fromURI:*(void *)(a1 + 56) infoType:*(void *)(a1 + 80) infoOptions:*(void *)(a1 + 64) idStatusUpdates:v17]);
  }

  else
  {
    uint64_t v15 = 0LL;
  }

  uint64_t v16 = *(void *)(a1 + 72);
  if (v16) {
    (*(void (**)(uint64_t, void *, void, void, uint64_t, id))(v16 + 16))( v16,  v15,  *(void *)(a1 + 56),  *(void *)(a1 + 48),  a5,  v13);
  }
}

void sub_1002802E0(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x100280200LL);
  }

  _Unwind_Resume(a1);
}

void sub_100280BB8(id a1)
{
  byte_1009C0840 = IDSShouldUseRestrictedLoggingForService(0LL);
}

void sub_100281E48(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___IDSDMessageStoreMigrator);
  uint64_t v2 = (void *)qword_1009C0868;
  qword_1009C0868 = (uint64_t)v1;
}

void sub_1002829C8(id a1)
{
  context = objc_autoreleasePoolPush();
  id v1 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  if (CUTIsInternalInstall())
  {
    id v2 = [&stru_1008FF4F0 copy];
    id v3 = objc_retainBlock(v2);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 91LL));
    -[NSMutableDictionary setObject:forKey:](v1, "setObject:forKey:", v3, v4);
  }

  id v5 = [&stru_1008FF510 copy];
  id v6 = objc_retainBlock(v5);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 92LL));
  -[NSMutableDictionary setObject:forKey:](v1, "setObject:forKey:", v6, v7);

  id v8 = [&stru_1008FF530 copy];
  id v9 = objc_retainBlock(v8);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 32LL));
  -[NSMutableDictionary setObject:forKey:](v1, "setObject:forKey:", v9, v10);

  id v11 = [&stru_1008FF550 copy];
  id v12 = objc_retainBlock(v11);
  id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 90LL));
  -[NSMutableDictionary setObject:forKey:](v1, "setObject:forKey:", v12, v13);

  id v14 = [&stru_1008FF570 copy];
  id v15 = objc_retainBlock(v14);
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 66LL));
  -[NSMutableDictionary setObject:forKey:](v1, "setObject:forKey:", v15, v16);

  id v17 = [&stru_1008FF590 copy];
  id v18 = objc_retainBlock(v17);
  BOOL v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 34LL));
  -[NSMutableDictionary setObject:forKey:](v1, "setObject:forKey:", v18, v19);

  id v20 = [&stru_1008FF5B0 copy];
  id v21 = objc_retainBlock(v20);
  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 129LL));
  -[NSMutableDictionary setObject:forKey:](v1, "setObject:forKey:", v21, v22);

  id v23 = [&stru_1008FF5D0 copy];
  id v24 = objc_retainBlock(v23);
  uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 93LL));
  -[NSMutableDictionary setObject:forKey:](v1, "setObject:forKey:", v24, v25);

  uint64_t v26 = (void *)qword_1009C0870;
  qword_1009C0870 = (uint64_t)v1;

  objc_autoreleasePoolPop(context);
}

void sub_100282C80(id a1, IDSRegistrationPushHandler *a2, NSDictionary *a3)
{
  uint64_t v4 = a2;
  id v5 = a3;
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    id v18 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Handling request sysdiagnose push {userInfo: %@}",  buf,  0xCu);
  }

  uint64_t v7 = -[IDSTapToRadarPushPayload initWithPushPayload:]( objc_alloc(&OBJC_CLASS___IDSTapToRadarPushPayload),  "initWithPushPayload:",  v5);
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  id v8 = -[IDSRegistrationPushHandler copyHandlersForEnumerating](v4, "copyHandlersForEnumerating");
  id v9 = [v8 countByEnumeratingWithState:&v13 objects:v19 count:16];
  if (v9)
  {
    uint64_t v10 = *(void *)v14;
    do
    {
      for (i = 0LL; i != v9; i = (char *)i + 1)
      {
        if (*(void *)v14 != v10) {
          objc_enumerationMutation(v8);
        }
        id v12 = *(void **)(*((void *)&v13 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector(v12, "handler:requestedSysdiagnoseWithTapToRadarPushPayload:") & 1) != 0) {
          [v12 handler:v4 requestedSysdiagnoseWithTapToRadarPushPayload:v7];
        }
      }

      id v9 = [v8 countByEnumeratingWithState:&v13 objects:v19 count:16];
    }

    while (v9);
  }
}

void sub_100282EEC(_Unwind_Exception *a1, int a2)
{
}

void sub_100282F18(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    id v2 = objc_begin_catch(exception_object);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
    if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT)) {
      sub_1006A52D0();
    }

    objc_end_catch();
    JUMPOUT(0x100282EA8LL);
  }

  _Unwind_Resume(exception_object);
}

void sub_100282F68()
{
}

void sub_100282F80(id a1, IDSRegistrationPushHandler *a2, NSDictionary *a3)
{
  __int16 v33 = a2;
  uint64_t v4 = a3;
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    __int16 v41 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Handling request sysdiagnose push {userInfo: %@}",  buf,  0xCu);
  }

  __int128 v38 = 0u;
  __int128 v39 = 0u;
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  id obj = -[IDSRegistrationPushHandler copyHandlersForEnumerating](v33, "copyHandlersForEnumerating");
  id v6 = [obj countByEnumeratingWithState:&v36 objects:v42 count:16];
  if (v6)
  {
    uint64_t v35 = *(void *)v37;
    do
    {
      for (i = 0LL; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v37 != v35) {
          objc_enumerationMutation(obj);
        }
        id v8 = *(void **)(*((void *)&v36 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector( v8,  "handler:requestedPromptThroughPushWithTitle:message:defaultButton:defaultUrl:alternateButton:alternateUrl:") & 1) != 0)
        {
          uint64_t v10 = objc_opt_class(&OBJC_CLASS___NSString, v9);
          id v11 = sub_100283384(v10, v4, @"t");
          id v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
          uint64_t v14 = objc_opt_class(&OBJC_CLASS___NSString, v13);
          id v15 = sub_100283384(v14, v4, @"m");
          __int128 v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
          uint64_t v18 = objc_opt_class(&OBJC_CLASS___NSString, v17);
          id v19 = sub_100283384(v18, v4, @"bd");
          id v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
          uint64_t v22 = objc_opt_class(&OBJC_CLASS___NSString, v21);
          id v23 = sub_100283384(v22, v4, @"bdurl");
          id v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
          uint64_t v26 = objc_opt_class(&OBJC_CLASS___NSString, v25);
          id v27 = sub_100283384(v26, v4, @"ba");
          uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
          uint64_t v30 = objc_opt_class(&OBJC_CLASS___NSString, v29);
          id v31 = sub_100283384(v30, v4, @"baurl");
          id v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
          [v8 handler:v33 requestedPromptThroughPushWithTitle:v12 message:v16 defaultButton:v20 defaultUrl:v24 alternateButton:v28 alternateUrl:v32];
        }
      }

      id v6 = [obj countByEnumeratingWithState:&v36 objects:v42 count:16];
    }

    while (v6);
  }
}

void sub_1002832F0(void *a1, int a2)
{
  if (a2 == 1)
  {
    id v4 = objc_begin_catch(a1);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT)) {
      sub_1006A5330(v4, v5);
    }

    objc_end_catch();
    JUMPOUT(0x1002832A8LL);
  }

  JUMPOUT(0x10028337CLL);
}

void sub_100283304()
{
}

void sub_10028336C(_Unwind_Exception *a1)
{
}

id sub_100283384(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([a2 objectForKey:v5]);
  if ((objc_opt_isKindOfClass(v6, a1) & 1) != 0)
  {
    id v7 = v6;
  }

  else
  {
    if (v6)
    {
      id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT)) {
        sub_1006A5390();
      }
    }

    id v7 = 0LL;
  }

  return v7;
}

void sub_10028342C(id a1, IDSRegistrationPushHandler *a2, NSDictionary *a3)
{
  id v24 = a2;
  id v4 = a3;
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    id v31 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Handling register push {userInfo: %@}",  buf,  0xCu);
  }

  __int128 v28 = 0u;
  __int128 v29 = 0u;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  id obj = -[IDSRegistrationPushHandler copyHandlersForEnumerating](v24, "copyHandlersForEnumerating");
  id v6 = [obj countByEnumeratingWithState:&v26 objects:v32 count:16];
  if (v6)
  {
    uint64_t v8 = *(void *)v27;
    *(void *)&__int128 v7 = 138412802LL;
    __int128 v23 = v7;
    do
    {
      for (i = 0LL; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v27 != v8) {
          objc_enumerationMutation(obj);
        }
        uint64_t v10 = *(void **)(*((void *)&v26 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector(v10, "handler:reregisterUserID:style:service:") & 1) != 0)
        {
          uint64_t v12 = objc_opt_class(&OBJC_CLASS___NSString, v11);
          id v13 = sub_100283384(v12, v4, @"i");
          uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
          uint64_t v16 = objc_opt_class(&OBJC_CLASS___NSNumber, v15);
          id v17 = sub_100283384(v16, v4, @"o");
          uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
          uint64_t v20 = objc_opt_class(&OBJC_CLASS___NSString, v19);
          id v21 = sub_100283384(v20, v4, @"e");
          uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
          objc_msgSend(v10, "handler:reregisterUserID:style:service:", v24, v14, v18, v22, v23);
        }
      }

      id v6 = [obj countByEnumeratingWithState:&v26 objects:v32 count:16];
    }

    while (v6);
  }
}

void sub_100283708(void *a1, int a2)
{
  if (a2 == 1)
  {
    id v4 = objc_begin_catch(a1);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT)) {
      sub_1006A540C(v4, v5);
    }

    objc_end_catch();
    JUMPOUT(0x1002836C0LL);
  }

  JUMPOUT(0x100283794LL);
}

void sub_10028371C()
{
}

void sub_100283784(_Unwind_Exception *a1)
{
}

void sub_10028379C(id a1, IDSRegistrationPushHandler *a2, NSDictionary *a3)
{
  uint64_t v15 = a2;
  id v4 = a3;
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    id v21 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Handling reload bag push {userInfo: %@}",  buf,  0xCu);
  }

  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  id v6 = -[IDSRegistrationPushHandler copyHandlersForEnumerating](v15, "copyHandlersForEnumerating");
  id v7 = [v6 countByEnumeratingWithState:&v16 objects:v22 count:16];
  if (v7)
  {
    uint64_t v8 = *(void *)v17;
    do
    {
      for (i = 0LL; i != v7; i = (char *)i + 1)
      {
        if (*(void *)v17 != v8) {
          objc_enumerationMutation(v6);
        }
        uint64_t v10 = *(void **)(*((void *)&v16 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector(v10, "handler:reloadBag:") & 1) != 0)
        {
          uint64_t v12 = objc_opt_class(&OBJC_CLASS___NSString, v11);
          id v13 = sub_100283384(v12, v4, @"s");
          uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
          [v10 handler:v15 reloadBag:v14];
        }
      }

      id v7 = [v6 countByEnumeratingWithState:&v16 objects:v22 count:16];
    }

    while (v7);
  }
}

void sub_100283A1C(_Unwind_Exception *a1, int a2)
{
}

void sub_100283A44(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    id v2 = objc_begin_catch(exception_object);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
    if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT)) {
      sub_1006A546C();
    }

    objc_end_catch();
    JUMPOUT(0x1002839D4LL);
  }

  _Unwind_Resume(exception_object);
}

void sub_100283A9C()
{
}

void sub_100283AB0(id a1, IDSRegistrationPushHandler *a2, NSDictionary *a3)
{
  id v24 = a2;
  id v4 = a3;
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    id v31 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Handling handles updated push {userInfo: %@}",  buf,  0xCu);
  }

  __int128 v28 = 0u;
  __int128 v29 = 0u;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  id obj = -[IDSRegistrationPushHandler copyHandlersForEnumerating](v24, "copyHandlersForEnumerating");
  id v6 = [obj countByEnumeratingWithState:&v26 objects:v32 count:16];
  if (v6)
  {
    uint64_t v8 = *(void *)v27;
    *(void *)&__int128 v7 = 138412802LL;
    __int128 v23 = v7;
    do
    {
      for (i = 0LL; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v27 != v8) {
          objc_enumerationMutation(obj);
        }
        uint64_t v10 = *(void **)(*((void *)&v26 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector(v10, "handler:profileHandlesUpdated:status:allowGDR:") & 1) != 0)
        {
          uint64_t v12 = objc_opt_class(&OBJC_CLASS___NSString, v11);
          id v13 = sub_100283384(v12, v4, @"i");
          uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
          uint64_t v16 = objc_opt_class(&OBJC_CLASS___NSNumber, v15);
          id v17 = sub_100283384(v16, v4, @"s");
          __int128 v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
          uint64_t v20 = objc_opt_class(&OBJC_CLASS___NSNumber, v19);
          id v21 = sub_100283384(v20, v4, @"gdr");
          uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
          objc_msgSend(v10, "handler:profileHandlesUpdated:status:allowGDR:", v24, v14, v18, v22, v23);
        }
      }

      id v6 = [obj countByEnumeratingWithState:&v26 objects:v32 count:16];
    }

    while (v6);
  }
}

void sub_100283D8C(void *a1, int a2)
{
  if (a2 == 1)
  {
    id v4 = objc_begin_catch(a1);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT)) {
      sub_1006A54CC(v4, v5);
    }

    objc_end_catch();
    JUMPOUT(0x100283D44LL);
  }

  JUMPOUT(0x100283E18LL);
}

void sub_100283DA0()
{
}

void sub_100283E08(_Unwind_Exception *a1)
{
}

void sub_100283E20(id a1, IDSRegistrationPushHandler *a2, NSDictionary *a3)
{
  __int16 v33 = a2;
  id v5 = a3;
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    __int16 v43 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Handling devices updated push {userInfo: %@}",  buf,  0xCu);
  }

  __int128 v40 = 0u;
  __int128 v41 = 0u;
  __int128 v38 = 0u;
  __int128 v39 = 0u;
  id obj = -[IDSRegistrationPushHandler copyHandlersForEnumerating](v33, "copyHandlersForEnumerating");
  id v7 = [obj countByEnumeratingWithState:&v38 objects:v44 count:16];
  if (v7)
  {
    uint64_t v36 = *(void *)v39;
    *(void *)&__int128 v8 = 138412802LL;
    __int128 v30 = v8;
    do
    {
      uint64_t v9 = 0LL;
      id v37 = v7;
      do
      {
        if (*(void *)v39 != v36) {
          objc_enumerationMutation(obj);
        }
        uint64_t v10 = *(void **)(*((void *)&v38 + 1) + 8LL * (void)v9);
        if ((objc_opt_respondsToSelector(v10, "handler:profile:deviceUpdated:service:") & 1) != 0)
        {
          uint64_t v12 = objc_opt_class(&OBJC_CLASS___NSString, v11);
          id v13 = sub_100283384(v12, v5, @"i");
          uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
          uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v5, "objectForKey:", @"p", v30));
          uint64_t v17 = objc_opt_class(&OBJC_CLASS___NSString, v16);
          char isKindOfClass = objc_opt_isKindOfClass(v15, v17);
          if ((isKindOfClass & 1) != 0)
          {
            uint64_t v19 = objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v5, "objectForKey:", @"p"));
            uint64_t v21 = objc_claimAutoreleasedReturnValue(+[NSData _IDSDataFromBase64String:](&OBJC_CLASS___NSData, "_IDSDataFromBase64String:", v19));
            id v32 = (void *)v21;
            uint64_t v35 = (void *)v19;
            goto LABEL_13;
          }

          uint64_t v22 = objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v5, "objectForKey:", @"p"));
          uint64_t v24 = objc_opt_class(&OBJC_CLASS___NSData, v23);
          if ((objc_opt_isKindOfClass(v22, v24) & 1) != 0)
          {
            uint64_t v21 = objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKey:](v5, "objectForKey:", @"p"));
            id v3 = (void *)v22;
            id v31 = (void *)v21;
LABEL_13:
            char v25 = isKindOfClass ^ 1;
          }

          else
          {
            char v25 = 0;
            uint64_t v21 = 0LL;
            id v3 = (void *)v22;
          }

          uint64_t v26 = objc_opt_class(&OBJC_CLASS___NSString, v20);
          id v27 = sub_100283384(v26, v5, @"s");
          __int128 v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
          [v10 handler:v33 profile:v14 deviceUpdated:v21 service:v28];

          if ((v25 & 1) != 0) {
          __int128 v29 = v3;
          }
          if ((isKindOfClass & 1) != 0)
          {

            __int128 v29 = v35;
          }
        }

        uint64_t v9 = (char *)v9 + 1;
      }

      while (v37 != v9);
      id v7 = [obj countByEnumeratingWithState:&v38 objects:v44 count:16];
    }

    while (v7);
  }
}

void sub_1002841F8(void *a1, int a2)
{
  if (a2 == 1)
  {
    id v4 = objc_begin_catch(a1);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT)) {
      sub_1006A552C(v4, v5);
    }

    objc_end_catch();
    JUMPOUT(0x1002841B0LL);
  }

  JUMPOUT(0x100284284LL);
}

void sub_10028420C()
{
}

void sub_100284274(_Unwind_Exception *a1)
{
}

void sub_10028428C(id a1, IDSRegistrationPushHandler *a2, NSDictionary *a3)
{
  uint64_t v23 = a2;
  id v4 = a3;
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    __int128 v29 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Handling flush cache push {userInfo: %@}",  buf,  0xCu);
  }

  uint64_t v7 = objc_opt_class(&OBJC_CLASS___NSNumber, v6);
  id v8 = sub_100283384(v7, v4, @"A");
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  unsigned int v10 = [v9 BOOLValue];

  if (v10)
  {
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Told by server to flush entire query cache",  buf,  2u);
    }

    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPeerIDManager sharedInstance](&OBJC_CLASS___IDSPeerIDManager, "sharedInstance"));
    [v12 clearCacheAndPersistImmediately:0];

    id v13 = (void *)objc_claimAutoreleasedReturnValue( +[IDSIDStatusQueryController sharedInstance]( &OBJC_CLASS___IDSIDStatusQueryController,  "sharedInstance"));
    [v13 clearCache];
  }

  else
  {
    __int128 v26 = 0u;
    __int128 v27 = 0u;
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    id v14 = -[IDSRegistrationPushHandler copyHandlersForEnumerating](v23, "copyHandlersForEnumerating");
    id v15 = [v14 countByEnumeratingWithState:&v24 objects:v30 count:16];
    if (v15)
    {
      uint64_t v16 = *(void *)v25;
      do
      {
        for (i = 0LL; i != v15; i = (char *)i + 1)
        {
          if (*(void *)v25 != v16) {
            objc_enumerationMutation(v14);
          }
          __int128 v18 = *(void **)(*((void *)&v24 + 1) + 8LL * (void)i);
          if ((objc_opt_respondsToSelector(v18, "handler:flushCacheForURIs:") & 1) != 0)
          {
            uint64_t v20 = objc_opt_class(&OBJC_CLASS___NSArray, v19);
            id v21 = sub_100283384(v20, v4, @"r");
            uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
            [v18 handler:v23 flushCacheForURIs:v22];
          }
        }

        id v15 = [v14 countByEnumeratingWithState:&v24 objects:v30 count:16];
      }

      while (v15);
    }
  }
}

void sub_1002845CC(_Unwind_Exception *a1, int a2)
{
}

void sub_1002845F4(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    id v2 = objc_begin_catch(exception_object);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
    if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT)) {
      sub_1006A558C();
    }

    objc_end_catch();
    JUMPOUT(0x100284584LL);
  }

  _Unwind_Resume(exception_object);
}

void sub_10028464C()
{
}

void sub_100284660(id a1, IDSRegistrationPushHandler *a2, NSDictionary *a3)
{
  id v15 = a2;
  id v4 = a3;
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    id v21 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Handling cohort selected push {userInfo: %@}",  buf,  0xCu);
  }

  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  id v6 = -[IDSRegistrationPushHandler copyHandlersForEnumerating](v15, "copyHandlersForEnumerating");
  id v7 = [v6 countByEnumeratingWithState:&v16 objects:v22 count:16];
  if (v7)
  {
    uint64_t v8 = *(void *)v17;
    do
    {
      for (i = 0LL; i != v7; i = (char *)i + 1)
      {
        if (*(void *)v17 != v8) {
          objc_enumerationMutation(v6);
        }
        unsigned int v10 = *(void **)(*((void *)&v16 + 1) + 8LL * (void)i);
        if ((objc_opt_respondsToSelector(v10, "handler:cohortSelected:") & 1) != 0)
        {
          uint64_t v12 = objc_opt_class(&OBJC_CLASS___NSNumber, v11);
          id v13 = sub_100283384(v12, v4, @"co");
          id v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
          [v10 handler:v15 cohortSelected:v14];
        }
      }

      id v7 = [v6 countByEnumeratingWithState:&v16 objects:v22 count:16];
    }

    while (v7);
  }
}

void sub_1002848E0(_Unwind_Exception *a1, int a2)
{
}

void sub_100284908(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    id v2 = objc_begin_catch(exception_object);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
    if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT)) {
      sub_1006A55EC();
    }

    objc_end_catch();
    JUMPOUT(0x100284898LL);
  }

  _Unwind_Resume(exception_object);
}

void sub_100284960()
{
}

void sub_100285068()
{
}

uint64_t sub_1002855A4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_100286CA0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _allocationTimeout];
}

id sub_1002872C0(void *a1)
{
  id v1 = a1;
  if ([v1 length] == (id)16)
  {
    id v2 = -[NSUUID initWithUUIDBytes:]( [NSUUID alloc], "initWithUUIDBytes:", [v1 bytes]);
    id v3 = (void *)objc_claimAutoreleasedReturnValue(-[NSUUID UUIDString](v2, "UUIDString"));
  }

  else
  {
    uint64_t v4 = OSLogHandleForTransportCategory("QRAllocator");
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218240;
      id v11 = [v1 length];
      __int16 v12 = 2048;
      uint64_t v13 = 16LL;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Error: data length: %lu != sizeof(uuid_t): %lu",  buf,  0x16u);
    }

    uint64_t v7 = os_log_shim_legacy_logging_enabled(v6);
    if ((_DWORD)v7)
    {
      if (_IDSShouldLogTransport(v7))
      {
        id v9 = [v1 length];
        _IDSLogTransport(@"QRAllocator", @"IDS", @"Error: data length: %lu != sizeof(uuid_t): %lu");
        if (_IDSShouldLog(0LL, @"QRAllocator"))
        {
          objc_msgSend(v1, "length", v9, 16);
          _IDSLogV( 0LL,  @"IDSFoundation",  @"QRAllocator",  @"Error: data length: %lu != sizeof(uuid_t): %lu");
        }
      }
    }

    id v3 = 0LL;
  }

  return v3;
}

void sub_100287584( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_100287598(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _purgeAllocation];
}

void sub_100288064(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDeliveryController sharedInstance](&OBJC_CLASS___IDSDeliveryController, "sharedInstance"));
  uint64_t v3 = kIDSQuickRelayPushTopic;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  timeval v5[2] = sub_10028810C;
  v5[3] = &unk_1008F8A50;
  uint64_t v4 = *(void *)(a1 + 32);
  id v6 = *(id *)(a1 + 40);
  [v2 sendIDSMessage:v4 service:0 topic:v3 completionBlock:v5];
}

void sub_10028810C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 idsResponseCode])
  {
    uint64_t v4 = OSLogHandleForTransportCategory("QRAllocator");
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      id v6 = (id)objc_claimAutoreleasedReturnValue([v3 responseError]);
      *(_DWORD *)buf = 138412546;
      id v21 = v6;
      __int16 v22 = 2048;
      id v23 = [v3 idsResponseCode];
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "failed to send server message allocation timeout QR metrics report: error: %@  code: %ld",  buf,  0x16u);
    }

    uint64_t v8 = os_log_shim_legacy_logging_enabled(v7);
    if ((_DWORD)v8)
    {
      if (_IDSShouldLogTransport(v8))
      {
        __int128 v16 = (void *)objc_claimAutoreleasedReturnValue([v3 responseError]);
        id v18 = [v3 idsResponseCode];
        _IDSLogTransport( @"QRAllocator",  @"IDS",  @"failed to send server message allocation timeout QR metrics report: error: %@  code: %ld");

        if (_IDSShouldLog(0LL, @"QRAllocator"))
        {
          id v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "responseError", v16, v18));
          [v3 idsResponseCode];
          _IDSLogV( 0LL,  @"IDSFoundation",  @"QRAllocator",  @"failed to send server message allocation timeout QR metrics report: error: %@  code: %ld");
LABEL_14:
        }
      }
    }
  }

  else
  {
    uint64_t v10 = OSLogHandleForTransportCategory("QRAllocator");
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v12 = *(void **)(a1 + 32);
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v3 deliveryError]);
      *(_DWORD *)buf = 138412546;
      id v21 = v12;
      __int16 v22 = 2112;
      id v23 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Finished sending server message allocation timeout QR metrics report for session %@ delivery error %@",  buf,  0x16u);
    }

    uint64_t v15 = os_log_shim_legacy_logging_enabled(v14);
    if ((_DWORD)v15)
    {
      if (_IDSShouldLogTransport(v15))
      {
        uint64_t v17 = *(void *)(a1 + 32);
        __int128 v19 = (void *)objc_claimAutoreleasedReturnValue([v3 deliveryError]);
        _IDSLogTransport( @"QRAllocator",  @"IDS",  @"Finished sending server message allocation timeout QR metrics report for session %@ delivery error %@");

        if (_IDSShouldLog(0LL, @"QRAllocator"))
        {
          id v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "deliveryError", v17, v19));
          _IDSLogV( 0LL,  @"IDSFoundation",  @"QRAllocator",  @"Finished sending server message allocation timeout QR metrics report for session %@ delivery error %@");
          goto LABEL_14;
        }
      }
    }
  }
}

void sub_10028869C(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___IDSQuickRelayAllocator);
  id v2 = (void *)qword_1009C0888;
  qword_1009C0888 = (uint64_t)v1;
}

void sub_1002890A0(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[IDSDeliveryController sharedInstance](&OBJC_CLASS___IDSDeliveryController, "sharedInstance"));
  [v2 sendIDSMessage:*(void *)(a1 + 32) service:kIDSQuickRelayPushTopic topic:kIDSQuickRelayPushTopic completionBlock:&stru_1008FF610];
}

void sub_1002890FC(id a1, IDSDeliveryContext *a2)
{
  id v2 = a2;
  if (-[IDSDeliveryContext idsResponseCode](v2, "idsResponseCode"))
  {
    uint64_t v3 = OSLogHandleForTransportCategory("QRAllocator");
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = (id)objc_claimAutoreleasedReturnValue(-[IDSDeliveryContext responseError](v2, "responseError"));
      *(_DWORD *)buf = 138412546;
      id v12 = v5;
      __int16 v13 = 2048;
      id v14 = -[IDSDeliveryContext idsResponseCode](v2, "idsResponseCode");
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "failed to send keepalive request: error: %@  code: %ld",  buf,  0x16u);
    }

    uint64_t v7 = os_log_shim_legacy_logging_enabled(v6);
    if ((_DWORD)v7)
    {
      if (_IDSShouldLogTransport(v7))
      {
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDeliveryContext responseError](v2, "responseError"));
        id v10 = -[IDSDeliveryContext idsResponseCode](v2, "idsResponseCode");
        _IDSLogTransport( @"QRAllocator",  @"IDS",  @"failed to send keepalive request: error: %@  code: %ld");

        if (_IDSShouldLog(0LL, @"QRAllocator"))
        {
          id v9 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDeliveryContext responseError](v2, "responseError", v8, v10));
          -[IDSDeliveryContext idsResponseCode](v2, "idsResponseCode");
          _IDSLogV( 0LL,  @"IDSFoundation",  @"QRAllocator",  @"failed to send keepalive request: error: %@  code: %ld");
        }
      }
    }
  }
}

void sub_100289374(_Unwind_Exception *a1)
{
}

void sub_100289388(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDeliveryController sharedInstance](&OBJC_CLASS___IDSDeliveryController, "sharedInstance"));
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = kIDSQuickRelayPushTopic;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  timeval v5[2] = sub_100289458;
  v5[3] = &unk_1008FF638;
  objc_copyWeak(&v6, (id *)(a1 + 40));
  [v2 sendIDSMessage:v3 service:v4 topic:v4 completionBlock:v5];

  objc_destroyWeak(&v6);
}

void sub_100289444(_Unwind_Exception *a1)
{
}

void sub_100289458(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 idsResponseCode])
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    uint64_t v5 = OSLogHandleForTransportCategory("QRAllocator");
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      id v7 = (id)objc_claimAutoreleasedReturnValue([WeakRetained requestIDStr]);
      id v8 = (id)objc_claimAutoreleasedReturnValue([v3 responseError]);
      *(_DWORD *)buf = 138412802;
      id v17 = v7;
      __int16 v18 = 2112;
      id v19 = v8;
      __int16 v20 = 2048;
      id v21 = [v3 idsResponseCode];
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "failed sending allocate request: %@ error: %@  code: %ld",  buf,  0x20u);
    }

    uint64_t v10 = os_log_shim_legacy_logging_enabled(v9);
    if ((_DWORD)v10)
    {
      if (_IDSShouldLogTransport(v10))
      {
        id v11 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained requestIDStr]);
        __int16 v13 = (void *)objc_claimAutoreleasedReturnValue([v3 responseError]);
        id v15 = [v3 idsResponseCode];
        _IDSLogTransport( @"QRAllocator",  @"IDS",  @"failed sending allocate request: %@ error: %@  code: %ld");

        if (_IDSShouldLog(0LL, @"QRAllocator"))
        {
          id v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "requestIDStr", v11, v13, v15));
          id v14 = (void *)objc_claimAutoreleasedReturnValue([v3 responseError]);
          [v3 idsResponseCode];
          _IDSLogV( 0LL,  @"IDSFoundation",  @"QRAllocator",  @"failed sending allocate request: %@ error: %@  code: %ld");
        }
      }
    }
  }
}

void sub_10028B400(void **a1)
{
  if (a1)
  {
    free(a1[3]);
    free(a1);
  }

void sub_10028B430(uint64_t a1)
{
  id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog QRAllocator_oversized](&OBJC_CLASS___IDSFoundationLog, "QRAllocator_oversized"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(a1 + 48);
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    v6[0] = 67109634;
    v6[1] = v3;
    __int16 v7 = 2112;
    uint64_t v8 = v4;
    __int16 v9 = 2048;
    uint64_t v10 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Full request info for send allocate request, recipient count: %u, request: %@, time: %.6f.",  (uint8_t *)v6,  0x1Cu);
  }
}

id sub_10028BCD4(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 service]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 identifier]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[IDSURI URIWithPrefixedURI:withServiceLoggingHint:]( &OBJC_CLASS___IDSURI,  "URIWithPrefixedURI:withServiceLoggingHint:",  v3,  v5));

  return v6;
}

id sub_10028D3BC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([a2 objectForKey:v5]);
  if ((objc_opt_isKindOfClass(v6, a1) & 1) != 0)
  {
    id v7 = v6;
  }

  else
  {
    if (v6)
    {
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT)) {
        sub_1006A5C0C((uint64_t)v5, a1, v8);
      }
    }

    id v7 = 0LL;
  }

  return v7;
}

id sub_10028F830(uint64_t a1)
{
  uint64_t v2 = OSLogHandleForTransportCategory("QRAllocator");
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Purging duplicate response!", v7, 2u);
  }

  uint64_t v5 = os_log_shim_legacy_logging_enabled(v4);
  if ((_DWORD)v5)
  {
    if (_IDSShouldLogTransport(v5))
    {
      _IDSLogTransport(@"QRAllocator", @"IDS", @"Purging duplicate response!");
    }
  }

  return [*(id *)(*(void *)(a1 + 32) + 96) removeObjectForKey:*(void *)(a1 + 40)];
}

void *sub_100290030(uint64_t a1, __int16 a2, __int16 a3, int a4, void *a5)
{
  id v9 = a5;
  uint64_t v10 = malloc(0x20uLL);
  v10[1] = a1;
  *(_WORD *)uint64_t v10 = a2;
  *((_WORD *)v10 + 1) = a3;
  *((_DWORD *)v10 + 1) = a4;
  unsigned int v11 = [v9 length];
  *((_DWORD *)v10 + 4) = v11;
  size_t v12 = v11;
  __int16 v13 = malloc(v11);
  v10[3] = v13;
  id v14 = v9;
  id v15 = [v14 bytes];

  memcpy(v13, v15, v12);
  return v10;
}

NSData *sub_1002900D8(uint64_t a1)
{
  size_t v2 = *(unsigned int *)(a1 + 16);
  id v3 = malloc(v2 + 32);
  __int128 v4 = *(_OWORD *)(a1 + 16);
  *id v3 = *(_OWORD *)a1;
  v3[1] = v4;
  memcpy(v3 + 2, *(const void **)(a1 + 24), v2);
  uint64_t v5 = -[NSData initWithBytes:length:](objc_alloc(&OBJC_CLASS___NSData), "initWithBytes:length:", v3, v2 + 32);
  free(v3);
  return v5;
}

id sub_100290548(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _handleIncomingAllocateResponse:*(void *)(a1 + 40) isFromCache:*(unsigned __int8 *)(a1 + 64) requestOptions:*(void *)(a1 + 48)];
  if (*(void *)(a1 + 56))
  {
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog QRAllocator](&OBJC_CLASS___IDSFoundationLog, "QRAllocator"));
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 v4 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "_dispatchIncomingAllocateResponse: calling connectReadyHandler",  v4,  2u);
    }

    return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  return result;
}

void sub_100291E04( uint64_t a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, void *a7, uint64_t a8, void *a9)
{
  id v102 = a2;
  id v99 = a3;
  id v100 = a4;
  id v103 = a5;
  id v101 = a7;
  id v14 = a9;
  uint64_t v116 = a1;
  id v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _queryPolicy]);
  unsigned int v16 = [v15 shouldPreventDuplicateTokensInAllocationForServiceIdentifier:v103];

  uint64_t v112 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  id v17 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  __int128 v121 = 0u;
  __int128 v122 = 0u;
  if (v16) {
    __int16 v18 = 0LL;
  }
  else {
    __int16 v18 = v17;
  }
  if (v16) {
    id v19 = v17;
  }
  else {
    id v19 = 0LL;
  }
  __int128 v114 = v18;
  uint64_t v115 = v19;
  __int128 v123 = 0uLL;
  __int128 v124 = 0uLL;
  id obj = v14;
  id v106 = [obj countByEnumeratingWithState:&v121 objects:v133 count:16];
  if (v106)
  {
    __int16 v20 = @"NO";
    if (v16) {
      __int16 v20 = @"YES";
    }
    NSUInteger v104 = v20;
    uint64_t v105 = *(void *)v122;
    uint64_t v111 = kIDSQRAllocateKey_RecipientPushToken;
    uint64_t v110 = kIDSQRAllocateKey_RecipientSessionToken;
    uint64_t v109 = kIDSQRAllocateKey_RecipientURI;
    do
    {
      uint64_t v21 = 0LL;
      do
      {
        if (*(void *)v122 != v105)
        {
          uint64_t v22 = v21;
          objc_enumerationMutation(obj);
          uint64_t v21 = v22;
        }

        uint64_t v108 = v21;
        id v23 = *(void **)(*((void *)&v121 + 1) + 8 * v21);
        __int128 v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(obj, "objectForKeyedSubscript:", v23, v94, v96, v97, v98));
        uint64_t v25 = OSLogHandleForTransportCategory("QRAllocator");
        __int128 v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v27 = [v24 count];
          __int128 v28 = (void *)objc_claimAutoreleasedReturnValue([v24 valueForKey:@"pushToken"]);
          *(_DWORD *)buf = 138413058;
          *(void *)id v129 = v23;
          *(_WORD *)&v129[8] = 1024;
          *(_DWORD *)id v130 = v27;
          *(_WORD *)&v130[4] = 2112;
          *(void *)&v130[6] = v104;
          __int16 v131 = 2112;
          id v132 = v28;
          _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "look up peer with URI: %@, push token count: %u, prevent duplicates: %@,  tokens: %@",  buf,  0x26u);
        }

        uint64_t v30 = os_log_shim_legacy_logging_enabled(v29);
        if ((_DWORD)v30)
        {
          if (_IDSShouldLogTransport(v30))
          {
            id v31 = [v24 count];
            uint64_t v97 = v104;
            id v98 = (void *)objc_claimAutoreleasedReturnValue([v24 valueForKey:@"pushToken"]);
            uint64_t v94 = v23;
            id v96 = v31;
            _IDSLogTransport( @"QRAllocator",  @"IDS",  @"look up peer with URI: %@, push token count: %u, prevent duplicates: %@,  tokens: %@");

            if (_IDSShouldLog(0LL, @"QRAllocator"))
            {
              id v32 = objc_msgSend(v24, "count", v23, v31, v104, v98);
              uint64_t v97 = v104;
              id v98 = (void *)objc_claimAutoreleasedReturnValue([v24 valueForKey:@"pushToken"]);
              uint64_t v94 = v23;
              id v96 = v32;
              _IDSLogV( 0LL,  @"IDSFoundation",  @"QRAllocator",  @"look up peer with URI: %@, push token count: %u, prevent duplicates: %@,  tokens: %@");
            }
          }
        }

        __int128 v119 = 0u;
        __int128 v120 = 0u;
        __int128 v117 = 0u;
        __int128 v118 = 0u;
        id v113 = v24;
        id v33 = [v113 countByEnumeratingWithState:&v117 objects:v127 count:16];
        if (v33)
        {
          uint64_t v34 = *(void *)v118;
          do
          {
            for (i = 0LL; i != v33; i = (char *)i + 1)
            {
              if (*(void *)v118 != v34) {
                objc_enumerationMutation(v113);
              }
              uint64_t v36 = *(void **)(*((void *)&v117 + 1) + 8LL * (void)i);
              id v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "pushToken", v94));
              __int128 v38 = *(void **)(v116 + 32);
              __int128 v39 = (void *)objc_claimAutoreleasedReturnValue([v23 prefixedURI]);
              __int128 v40 = (void *)objc_claimAutoreleasedReturnValue([v38 _tokenURIForToken:v37 uri:v39]);

              if (v16)
              {
                uint64_t v41 = OSLogHandleForTransportCategory("QRAllocator");
                int v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
                if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v43 = IDSLoggableDescriptionForTokenOnService(v37, *(void *)(v116 + 40));
                  id v44 = (void *)objc_claimAutoreleasedReturnValue(v43);
                  *(_DWORD *)buf = 138412290;
                  *(void *)id v129 = v44;
                  _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEFAULT,  "Skipping duplicate token %@",  buf,  0xCu);
                }

                uint64_t v46 = os_log_shim_legacy_logging_enabled(v45);
                if ((_DWORD)v46)
                {
                  if (_IDSShouldLogTransport(v46))
                  {
                    uint64_t v47 = IDSLoggableDescriptionForTokenOnService(v37, *(void *)(v116 + 40));
                    uint64_t v94 = (void *)objc_claimAutoreleasedReturnValue(v47);
                    _IDSLogTransport(@"QRAllocator", @"IDS", @"Skipping duplicate token %@");

                    if (_IDSShouldLog(0LL, @"QRAllocator"))
                    {
                      uint64_t v48 = IDSLoggableDescriptionForTokenOnService(v37, *(void *)(v116 + 40));
                      uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue(v48);
                      uint64_t v94 = v49;
                      _IDSLogV(0LL, @"IDSFoundation", @"QRAllocator", @"Skipping duplicate token %@");
LABEL_46:
                    }
                  }
                }
              }

              else
              {
                if (!-[NSMutableSet containsObject:](v114, "containsObject:", v40))
                {
LABEL_40:
                  if (!*(void *)(v116 + 48) || objc_msgSend(v37, "isEqualToData:"))
                  {
                    if (v16) {
                      -[NSMutableSet addObject:](v115, "addObject:", v37);
                    }
                    else {
                      -[NSMutableSet addObject:](v114, "addObject:", v40);
                    }
                    v126[0] = v37;
                    v125[0] = v111;
                    v125[1] = v110;
                    int v58 = (void *)objc_claimAutoreleasedReturnValue([v36 sessionToken]);
                    v126[1] = v58;
                    v125[2] = v109;
                    uint64_t v59 = (void *)objc_claimAutoreleasedReturnValue([v23 prefixedURI]);
                    v126[2] = v59;
                    uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v126,  v125,  3LL));

                    -[NSMutableArray addObject:](v112, "addObject:", v49);
                    goto LABEL_46;
                  }

                  goto LABEL_47;
                }

                uint64_t v50 = OSLogHandleForTransportCategory("QRAllocator");
                id v51 = (os_log_s *)objc_claimAutoreleasedReturnValue(v50);
                if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v52 = IDSLoggableDescriptionForHandleOnService(v40, *(void *)(v116 + 40));
                  uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue(v52);
                  *(_DWORD *)buf = 138412290;
                  *(void *)id v129 = v53;
                  _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_DEFAULT,  "Skipping duplicate %@",  buf,  0xCu);
                }

                uint64_t v55 = os_log_shim_legacy_logging_enabled(v54);
                if ((_DWORD)v55)
                {
                  if (_IDSShouldLogTransport(v55))
                  {
                    uint64_t v56 = IDSLoggableDescriptionForHandleOnService(v40, *(void *)(v116 + 40));
                    uint64_t v94 = (void *)objc_claimAutoreleasedReturnValue(v56);
                    _IDSLogTransport(@"QRAllocator", @"IDS", @"Skipping duplicate %@");

                    if (_IDSShouldLog(0LL, @"QRAllocator"))
                    {
                      uint64_t v57 = IDSLoggableDescriptionForHandleOnService(v40, *(void *)(v116 + 40));
                      uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue(v57);
                      uint64_t v94 = v49;
                      _IDSLogV(0LL, @"IDSFoundation", @"QRAllocator", @"Skipping duplicate %@");
                      goto LABEL_46;
                    }
                  }
                }
              }

void sub_100293B30(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x100293A60LL);
  }

  _Unwind_Resume(a1);
}

LABEL_106:
      uint64_t v89 = v110;
    }

    else
    {
      uint64_t v89 = v112;
    }

    uint64_t v94 = v89;
    if (-[NSMutableArray count](v89, "count"))
    {
      LODWORD(v106) = a15;
      id v44 = (void *)objc_claimAutoreleasedReturnValue( -[IDSQuickRelayAllocator _setupAllocation:fromURI:sessionID:isSessionIDRemoteDeviceID:options:prevConnectStatus:requestUUID:connectReadyHandler:withPreferredLocalInterface:]( self,  "_setupAllocation:fromURI:sessionID:isSessionIDRemoteDeviceID:options:prevConnectStatus:requestUU ID:connectReadyHandler:withPreferredLocalInterface:",  v94,  v114,  v120,  a13,  theDict,  0LL,  0LL,  0LL,  v106));

LABEL_117:
      goto LABEL_118;
    }

    id v95 = OSLogHandleForTransportCategory("QRAllocator");
    id v96 = (os_log_s *)objc_claimAutoreleasedReturnValue(v95);
    if (os_log_type_enabled(v96, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v96,  OS_LOG_TYPE_DEFAULT,  "could not find existing recipient to clone",  buf,  2u);
    }

    id v98 = os_log_shim_legacy_logging_enabled(v97);
    if ((_DWORD)v98)
    {
      if (_IDSShouldLogTransport(v98))
      {
        _IDSLogTransport(@"QRAllocator", @"IDS", @"could not find existing recipient to clone");
        if (_IDSShouldLog(0LL, @"QRAllocator")) {
          _IDSLogV( 0LL,  @"IDSFoundation",  @"QRAllocator",  @"could not find existing recipient to clone");
        }
      }
    }

    [v39 setHasPendingAllocation:0 forIDSSession:v120];

LABEL_116:
    id v44 = 0LL;
    goto LABEL_117;
  }

  __int128 v40 = OSLogHandleForTransportCategory("QRAllocator");
  uint64_t v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
  if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    *(void *)id v127 = v120;
    _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "Session not found for %@", buf, 0xCu);
  }

  uint64_t v43 = os_log_shim_legacy_logging_enabled(v42);
  if ((_DWORD)v43)
  {
    if (_IDSShouldLogTransport(v43))
    {
      _IDSLogTransport(@"QRAllocator", @"IDS", @"Session not found for %@");
    }
  }

  id v44 = 0LL;
LABEL_118:

  return v44;
}

  swift_release(v117);
LABEL_107:
  if ((v180 & 0xC000000000000001LL) != 0)
  {
    if (v180 < 0) {
      uint64_t v154 = v180;
    }
    else {
      uint64_t v154 = v180 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v155 = __CocoaSet.count.getter(v154);
    uint64_t v156 = v180;
  }

  else
  {
    uint64_t v156 = v180;
    uint64_t v155 = *(void *)(v180 + 16);
  }

  swift_bridgeObjectRelease(v156);
  if (v155 < 1)
  {
    if (v178)
    {
      if (v179 < 0) {
        id v158 = v179;
      }
      else {
        id v158 = v179 & 0xFFFFFFFFFFFFFF8LL;
      }
      id v159 = __CocoaSet.count.getter(v158);
      v160 = v179;
    }

    else
    {
      v160 = v179;
      id v159 = *(void *)(v179 + 16);
    }

    CFTypeRef v157 = swift_bridgeObjectRelease(v160);
    if (v159 < 1)
    {
LABEL_145:
      (*(void (**)(unint64_t, unint64_t))((swift_isaMask & *v5) + 0x408LL))( 0xD000000000000032LL,  0x8000000100842690LL);
      return;
    }
  }

  else
  {
    CFTypeRef v157 = swift_bridgeObjectRelease(v179);
  }

  uint64_t v161 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v5) + 0x250LL))(v157);
  v162 = (*(uint64_t (**)(void))((swift_isaMask & *v5) + 0x140LL))();
  __int16 v163 = v162;
  v164 = 0LL;
  id v165 = v162 + 64;
  v166 = 1LL << *(_BYTE *)(v162 + 32);
  id v167 = -1LL;
  if (v166 < 64) {
    id v167 = ~(-1LL << v166);
  }
  uint64_t v168 = v167 & *(void *)(v162 + 64);
  uint64_t v169 = (unint64_t)(v166 + 63) >> 6;
  while (2)
  {
    if (v168)
    {
      double v170 = __clz(__rbit64(v168));
      v168 &= v168 - 1;
      uint64_t v171 = v170 | (v164 << 6);
LABEL_126:
      v172 = *(void **)(*(void *)(v163 + 56) + 8 * v171);
      uint64_t v173 = *(void (**)(uint64_t))((swift_isaMask & *v172) + 0x238LL);
      id v174 = v172;
      v173(v161);

      continue;
    }

    break;
  }

  v175 = v164 + 1;
  if (__OFADD__(v164, 1LL))
  {
    __break(1u);
    goto LABEL_147;
  }

  if (v175 >= v169) {
    goto LABEL_144;
  }
  id v176 = *(void *)(v165 + 8 * v175);
  ++v164;
  if (v176) {
    goto LABEL_143;
  }
  v164 = v175 + 1;
  if (v175 + 1 >= v169) {
    goto LABEL_144;
  }
  id v176 = *(void *)(v165 + 8 * v164);
  if (v176) {
    goto LABEL_143;
  }
  v164 = v175 + 2;
  if (v175 + 2 >= v169) {
    goto LABEL_144;
  }
  id v176 = *(void *)(v165 + 8 * v164);
  if (v176) {
    goto LABEL_143;
  }
  v164 = v175 + 3;
  if (v175 + 3 >= v169) {
    goto LABEL_144;
  }
  id v176 = *(void *)(v165 + 8 * v164);
  if (v176)
  {
LABEL_143:
    uint64_t v168 = (v176 - 1) & v176;
    uint64_t v171 = __clz(__rbit64(v176)) + (v164 << 6);
    goto LABEL_126;
  }

  id v177 = v175 + 4;
  if (v177 >= v169)
  {
LABEL_144:
    swift_release(v163);
    swift_bridgeObjectRelease(v161);
    goto LABEL_145;
  }

  id v176 = *(void *)(v165 + 8 * v177);
  if (v176)
  {
    v164 = v177;
    goto LABEL_143;
  }

  while (1)
  {
    v164 = v177 + 1;
    if (__OFADD__(v177, 1LL)) {
      break;
    }
    if (v164 >= v169) {
      goto LABEL_144;
    }
    id v176 = *(void *)(v165 + 8 * v164);
    ++v177;
    if (v176) {
      goto LABEL_143;
    }
  }

LABEL_250:
            keya = v208 & 1;
            id v176 = 1;
LABEL_251:
            v248 = objc_msgSend(v386, "sharedSessionHasJoined", v371);
            id v249 = v248;
            if (v397)
            {
              id v250 = v393;
              if (v392 == (id)3) {
                id v251 = v249;
              }
              else {
                id v251 = 0;
              }
              id v252 = v399;
              if (v251 == 1)
              {
                id v253 = OSLogHandleForTransportCategory("QRAllocator");
                id v254 = (os_log_s *)objc_claimAutoreleasedReturnValue(v253);
                if (os_log_type_enabled(v254, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl( (void *)&_mh_execute_header,  v254,  OS_LOG_TYPE_DEFAULT,  "participant has joined with cached response",  buf,  2u);
                }

                id v256 = os_log_shim_legacy_logging_enabled(v255);
                if ((_DWORD)v256)
                {
                  if (_IDSShouldLogTransport(v256))
                  {
                    _IDSLogTransport( @"QRAllocator",  @"IDS",  @"participant has joined with cached response");
                    if (_IDSShouldLog(0LL, @"QRAllocator")) {
                      _IDSLogV( 0LL,  @"IDSFoundation",  @"QRAllocator",  @"participant has joined with cached response");
                    }
                  }
                }

                id v250 = v393;
                goto LABEL_301;
              }
            }

            else
            {
              v257 = v382 ^ 1;
              if (v392 != (id)3) {
                v257 = 1;
              }
              if ((v257 & 1) != 0)
              {
                if (v392 == (id)3)
                {
                  v262 = OSLogHandleForTransportCategory("QRAllocator");
                  v263 = (os_log_s *)objc_claimAutoreleasedReturnValue(v262);
                  if (os_log_type_enabled(v263, OS_LOG_TYPE_DEFAULT))
                  {
                    v264 = @"NO";
                    if (v382) {
                      v265 = @"YES";
                    }
                    else {
                      v265 = @"NO";
                    }
                    if (v249) {
                      v264 = @"YES";
                    }
                    *(_DWORD *)buf = 138412546;
                    v420 = (NSMutableDictionary *)v265;
                    v421 = 2112;
                    v422 = v264;
                    _os_log_impl( (void *)&_mh_execute_header,  v263,  OS_LOG_TYPE_DEFAULT,  "useCurrentResponse=%@, sharedSessionHasJoined=%@",  buf,  0x16u);
                  }

                  v267 = os_log_shim_legacy_logging_enabled(v266);
                  if ((_DWORD)v267 && _IDSShouldLogTransport(v267))
                  {
                    __int128 v268 = v382 ? @"YES" : @"NO";
                    __int128 v269 = v249 ? @"YES" : @"NO";
                    v372 = (NSMutableDictionary *)v268;
                    v373 = v269;
                    _IDSLogTransport( @"QRAllocator",  @"IDS",  @"useCurrentResponse=%@, sharedSessionHasJoined=%@");
                    if (_IDSShouldLog(0LL, @"QRAllocator"))
                    {
                      v372 = (NSMutableDictionary *)v268;
                      v373 = v269;
                      _IDSLogV( 0LL,  @"IDSFoundation",  @"QRAllocator",  @"useCurrentResponse=%@, sharedSessionHasJoined=%@");
                    }
                  }
                }
              }

              else if (v248)
              {
                v258 = OSLogHandleForTransportCategory("QRAllocator");
                v259 = (os_log_s *)objc_claimAutoreleasedReturnValue(v258);
                if (os_log_type_enabled(v259, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl( (void *)&_mh_execute_header,  v259,  OS_LOG_TYPE_DEFAULT,  "join request in process",  buf,  2u);
                }

                uint64_t v261 = os_log_shim_legacy_logging_enabled(v260);
                if ((_DWORD)v261)
                {
                  if (_IDSShouldLogTransport(v261))
                  {
                    _IDSLogTransport(@"QRAllocator", @"IDS", @"join request in process");
                  }
                }

                v382 = 1;
              }

              else
              {
                __int128 v270 = OSLogHandleForTransportCategory("QRAllocator");
                __int128 v271 = (os_log_s *)objc_claimAutoreleasedReturnValue(v270);
                if (os_log_type_enabled(v271, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 138412290;
                  v420 = v399;
                  _os_log_impl( (void *)&_mh_execute_header,  v271,  OS_LOG_TYPE_DEFAULT,  "participant has not joined, ids: %@",  buf,  0xCu);
                }

                v273 = os_log_shim_legacy_logging_enabled(v272);
                if ((_DWORD)v273)
                {
                  if (_IDSShouldLogTransport(v273))
                  {
                    v372 = v399;
                    _IDSLogTransport(@"QRAllocator", @"IDS", @"participant has not joined, ids: %@");
                    if (_IDSShouldLog(0LL, @"QRAllocator"))
                    {
                      v372 = v399;
                      _IDSLogV( 0LL,  @"IDSFoundation",  @"QRAllocator",  @"participant has not joined, ids: %@");
                    }
                  }
                }

                v382 = 0;
              }

              -[IDSQuickRelayAllocator _processSelfAllocations:allocation:]( self,  "_processSelfAllocations:allocation:",  v6,  v398,  v372,  v373);
              id v250 = v393;
              id v252 = v399;
            }

            if (v392 != (id)3)
            {
LABEL_390:
              if ((v176 & 1) != 0
                || (v360 = -[NSMutableSet containsObject:]( self->_pendingRecipientsAcceptedSessions,  "containsObject:",  v252),  id v252 = v399,  ((v382 | v360 | v383) & 1) != 0)
                || v397)
              {
                v339 = OSLogHandleForTransportCategory("QRAllocator");
                v340 = (os_log_s *)objc_claimAutoreleasedReturnValue(v339);
                if (os_log_type_enabled(v340, OS_LOG_TYPE_DEFAULT))
                {
                  v341 = @"NO";
                  if (v176) {
                    v342 = @"YES";
                  }
                  else {
                    v342 = @"NO";
                  }
                  v343 = -[NSMutableSet containsObject:]( self->_pendingRecipientsAcceptedSessions,  "containsObject:",  v252);
                  v344 = 0LL;
                  if (v343) {
                    v345 = @"YES";
                  }
                  else {
                    v345 = @"NO";
                  }
                  if (v383) {
                    v346 = @"YES";
                  }
                  else {
                    v346 = @"NO";
                  }
                  if (v382) {
                    v347 = @"YES";
                  }
                  else {
                    v347 = @"NO";
                  }
                  if (v397) {
                    v341 = @"YES";
                  }
                  if (theDict && kIDSQRAllocateKey_StreamInfoSubscribedStreams) {
                    v344 = (const __CFString *)CFDictionaryGetValue( theDict,  kIDSQRAllocateKey_StreamInfoSubscribedStreams);
                  }
                  *(_DWORD *)buf = 138413570;
                  v420 = (NSMutableDictionary *)v342;
                  v421 = 2112;
                  v422 = v345;
                  v423 = 2112;
                  *(void *)v424 = v346;
                  *(_WORD *)&v424[8] = 2112;
                  v425 = v347;
                  v426 = 2112;
                  v427 = v341;
                  v428 = 2112;
                  v429 = v344;
                  _os_log_impl( (void *)&_mh_execute_header,  v340,  OS_LOG_TYPE_DEFAULT,  "isInitiator: %@, pendingRecipientsAcceptedSessions= %@, isCloudAllocation= %@,  useCurrentResponse= %@, isFromCache= %@, subscribedStreams = %@",  buf,  0x3Eu);
                }

                v349 = os_log_shim_legacy_logging_enabled(v348);
                if ((_DWORD)v349 && _IDSShouldLogTransport(v349))
                {
                  v350 = @"NO";
                  v351 = v176 ? @"YES" : @"NO";
                  v352 = -[NSMutableSet containsObject:]( self->_pendingRecipientsAcceptedSessions,  "containsObject:",  v399)
                       ? @"YES"
                       : @"NO";
                  v353 = v383 ? @"YES" : @"NO";
                  v354 = v382 ? @"YES" : @"NO";
                  v355 = v397 ? @"YES" : @"NO";
                  v356 = (const void *)kIDSQRAllocateKey_StreamInfoSubscribedStreams;
                  v357 = !theDict || kIDSQRAllocateKey_StreamInfoSubscribedStreams == 0LL;
                  v358 = !v357;
                  v359 = v357
                       ? 0LL
                       : (__CFString *)CFDictionaryGetValue(theDict, kIDSQRAllocateKey_StreamInfoSubscribedStreams);
                  v376 = v355;
                  v377 = v359;
                  v374 = v353;
                  v375 = v354;
                  v372 = (NSMutableDictionary *)v351;
                  v373 = v352;
                  _IDSLogTransport( @"QRAllocator",  @"IDS",  @"isInitiator: %@, pendingRecipientsAcceptedSessions= %@, isCloudAllocation= %@,  useCurrentResponse= %@, isFromCache= %@, subscribedStreams = %@");
                  if (_IDSShouldLog(0LL, @"QRAllocator"))
                  {
                    if (-[NSMutableSet containsObject:]( self->_pendingRecipientsAcceptedSessions,  "containsObject:",  v399,  v351,  v352,  v353,  v354,  v355,  v377)) {
                      v350 = @"YES";
                    }
                    if (v358) {
                      v365 = (__CFString *)CFDictionaryGetValue(theDict, v356);
                    }
                    else {
                      v365 = 0LL;
                    }
                    v376 = v355;
                    v377 = v365;
                    v374 = v353;
                    v375 = v354;
                    v372 = (NSMutableDictionary *)v351;
                    v373 = (__CFString *)v350;
                    _IDSLogV( 0LL,  @"IDSFoundation",  @"QRAllocator",  @"isInitiator: %@, pendingRecipientsAcceptedSessions= %@, isCloudAllocation= %@,  useCurrentResponse= %@, isFromCache= %@, subscribedStreams = %@");
                  }
                }

                v366 = OSLogHandleForTransportCategory("QRAllocator");
                v367 = (os_log_s *)objc_claimAutoreleasedReturnValue(v366);
                if (os_log_type_enabled(v367, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 138412290;
                  v420 = (NSMutableDictionary *)theDict;
                  _os_log_impl( (void *)&_mh_execute_header,  v367,  OS_LOG_TYPE_DEFAULT,  "connecting with sessionInfo %@",  buf,  0xCu);
                }

                v369 = os_log_shim_legacy_logging_enabled(v368);
                if ((_DWORD)v369)
                {
                  if (_IDSShouldLogTransport(v369))
                  {
                    v372 = (NSMutableDictionary *)theDict;
                    _IDSLogTransport(@"QRAllocator", @"IDS", @"connecting with sessionInfo %@");
                    if (_IDSShouldLog(0LL, @"QRAllocator"))
                    {
                      v372 = (NSMutableDictionary *)theDict;
                      _IDSLogV( 0LL,  @"IDSFoundation",  @"QRAllocator",  @"connecting with sessionInfo %@");
                    }
                  }
                }

                -[IDSQuickRelayAllocator _startQRConnectionForSession:isInitiatorsAcceptedSession:withLocalInterfacePreference:]( self,  "_startQRConnectionForSession:isInitiatorsAcceptedSession:withLocalInterfacePreference:",  theDict,  keya,  v384,  v372,  v373,  v374,  v375,  v376,  v377);
              }

              else
              {
                if (v392 == (id)3) {
                  -[IDSQuickRelayAllocator _startCleanupTimer](self, "_startCleanupTimer");
                }
                v361 = OSLogHandleForTransportCategory("QRAllocator");
                v362 = (os_log_s *)objc_claimAutoreleasedReturnValue(v361);
                if (os_log_type_enabled(v362, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl( (void *)&_mh_execute_header,  v362,  OS_LOG_TYPE_DEFAULT,  "recipient waits for session acceptance",  buf,  2u);
                }

                v364 = os_log_shim_legacy_logging_enabled(v363);
                if ((_DWORD)v364)
                {
                  if (_IDSShouldLogTransport(v364))
                  {
                    _IDSLogTransport( @"QRAllocator",  @"IDS",  @"recipient waits for session acceptance");
                    if (_IDSShouldLog(0LL, @"QRAllocator")) {
                      _IDSLogV( 0LL,  @"IDSFoundation",  @"QRAllocator",  @"recipient waits for session acceptance");
                    }
                  }
                }
              }

              [v386 qrAllocatorDidReceiveAllocateResponse:v6];
              goto LABEL_461;
            }

LABEL_301:
            if (v250)
            {
              id v274 = (__CFString *)objc_claimAutoreleasedReturnValue([v250 objectForKey:kIDSQRAllocateKey_StreamInfoPublishedStreams]);
              id v275 = (__CFString *)objc_claimAutoreleasedReturnValue([v393 objectForKey:kIDSQRAllocateKey_StreamInfoSubscribedStreams]);
              uint64_t v276 = (__CFString *)objc_claimAutoreleasedReturnValue([v393 objectForKey:kIDSQRAllocateKey_StreamInfoGenerationCounter]);
              id v277 = (__CFString *)objc_claimAutoreleasedReturnValue( [v393 objectForKey:kIDSQRAllocateKey_StreamInfoMaxConcurrentStreams]);
              id v278 = OSLogHandleForTransportCategory("QRAllocator");
              v279 = (os_log_s *)objc_claimAutoreleasedReturnValue(v278);
              if (os_log_type_enabled(v279, OS_LOG_TYPE_DEFAULT))
              {
                v280 = (void *)objc_claimAutoreleasedReturnValue([v393 objectForKey:kIDSQRAllocateKey_IsJoinAllocation]);
                id v281 = [v280 BOOLValue];
                __int128 v282 = @"NO";
                *(_DWORD *)buf = 138413570;
                v420 = v399;
                v421 = 2112;
                if (v281) {
                  __int128 v282 = @"YES";
                }
                v422 = v274;
                v423 = 2112;
                *(void *)v424 = v275;
                *(_WORD *)&v424[8] = 2112;
                v425 = v276;
                v426 = 2112;
                v427 = v277;
                v428 = 2112;
                v429 = v282;
                _os_log_impl( (void *)&_mh_execute_header,  v279,  OS_LOG_TYPE_DEFAULT,  "joinWithOptions information: idsSessionID=%@, publishedStreams=%@, subscribedStreams=%@, generationCou nter=%@, maxConcurrentStreams=%@, isJoinAlid location = %@",  buf,  0x3Eu);
              }

              __int128 v284 = os_log_shim_legacy_logging_enabled(v283);
              __int128 v285 = kIDSQRAllocateKey_IsJoinAllocation;
              v286 = (void *)objc_claimAutoreleasedReturnValue([v393 objectForKey:kIDSQRAllocateKey_IsJoinAllocation]);
              id v287 = [v286 BOOLValue] ? @"YES" : @"NO";
              v376 = v277;
              v377 = v287;
              v374 = v275;
              v375 = v276;
              v372 = v399;
              v373 = v274;
              _IDSLogTransport( @"QRAllocator",  @"IDS",  @"joinWithOptions information: idsSessionID=%@, publishedStreams=%@, subscribedStreams=%@, generationCounter=%@, maxConcurrentStreams=%@, isJoinAlid location = %@");

              uint64_t v288 = (id *)objc_claimAutoreleasedReturnValue(objc_msgSend(v393, "objectForKey:", v285, v399, v274, v275, v276, v277, v377));
              else {
                v289 = @"NO";
              }
              v376 = v277;
              v377 = (__CFString *)v289;
              v374 = v275;
              v375 = v276;
              v372 = v399;
              v373 = v274;
              _IDSLogV( 0LL,  @"IDSFoundation",  @"QRAllocator",  @"joinWithOptions information: idsSessionID=%@, publishedStreams=%@, subscribedStreams=%@, generationCounter=%@, maxConcurrentStreams=%@, isJoinAlid location = %@");
            }

            else
            {
              if (!v398)
              {
                __int128 v302 = 0LL;
                __int128 v303 = 0LL;
                __int128 v304 = 0LL;
                __int128 v305 = 0LL;
LABEL_382:
                v334 = (void *)objc_claimAutoreleasedReturnValue( +[IDSServerBag sharedInstance]( &OBJC_CLASS___IDSServerBag,  "sharedInstance",  v372,  v373,  v374,  v375,  v376,  v377));
                v335 = (void *)objc_claimAutoreleasedReturnValue( [v334 objectForKey:@"qr-session-particiapntID-URI-mapping-included"]);

                v336 = _os_feature_enabled_impl("TelephonyUtilities", "participantIDToURIRemovedEnabled");
                if (v335) {
                  v337 = 0;
                }
                else {
                  v337 = v336;
                }
                if ((v337 & 1) == 0)
                {
                  v338 = (id)objc_claimAutoreleasedReturnValue( -[IDSQuickRelayAllocator _uriToParticipantID:]( self,  "_uriToParticipantID:",  theDict));
                  if (v338) {
                    CFDictionarySetValue(theDict, kIDSQRAllocateKey_URIToParticipantID, v338);
                  }
                }

                id v252 = v399;
                goto LABEL_390;
              }

              id obja = (id *)objc_claimAutoreleasedReturnValue(-[QRAllocation streamInfo](v398, "streamInfo"));
              id v290 = OSLogHandleForTransportCategory("QRAllocator");
              id v291 = (os_log_s *)objc_claimAutoreleasedReturnValue(v290);
              if (os_log_type_enabled(v291, OS_LOG_TYPE_DEFAULT))
              {
                id v292 = -[QRAllocation isJoinAllocation](v398, "isJoinAllocation");
                char v293 = @"NO";
                if (v292) {
                  char v293 = @"YES";
                }
                *(_DWORD *)buf = 138412290;
                v420 = (NSMutableDictionary *)v293;
                _os_log_impl( (void *)&_mh_execute_header,  v291,  OS_LOG_TYPE_DEFAULT,  "should connect to qr server: %@",  buf,  0xCu);
              }

              __int128 v295 = os_log_shim_legacy_logging_enabled(v294);
              if ((_DWORD)v295 && _IDSShouldLogTransport(v295))
              {
                __int128 v296 = -[QRAllocation isJoinAllocation](v398, "isJoinAllocation") ? @"YES" : @"NO";
                v372 = (NSMutableDictionary *)v296;
                _IDSLogTransport(@"QRAllocator", @"IDS", @"should connect to qr server: %@");
                if (_IDSShouldLog(0LL, @"QRAllocator"))
                {
                  if (-[QRAllocation isJoinAllocation](v398, "isJoinAllocation", v372)) {
                    __int128 v297 = @"YES";
                  }
                  else {
                    __int128 v297 = @"NO";
                  }
                  v372 = (NSMutableDictionary *)v297;
                  _IDSLogV(0LL, @"IDSFoundation", @"QRAllocator", @"should connect to qr server: %@");
                }
              }

              if (obja)
              {
                id v274 = (__CFString *)obja[1];
                id v275 = (__CFString *)obja[2];
                uint64_t v276 = (__CFString *)obja[3];
                id v277 = (__CFString *)obja[4];
                __int128 v298 = OSLogHandleForTransportCategory("QRAllocator");
                __int128 v299 = (os_log_s *)objc_claimAutoreleasedReturnValue(v298);
                if (os_log_type_enabled(v299, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 138413314;
                  v420 = v399;
                  v421 = 2112;
                  v422 = v274;
                  v423 = 2112;
                  *(void *)v424 = v275;
                  *(_WORD *)&v424[8] = 2112;
                  v425 = v276;
                  v426 = 2112;
                  v427 = v277;
                  _os_log_impl( (void *)&_mh_execute_header,  v299,  OS_LOG_TYPE_DEFAULT,  "Cached stream infomation:  idsSessionID=%@, publishedStreams=%@, subscribedStreams=%@, generationCou nter=%@, maxConcurrentStreams=%@",  buf,  0x34u);
                }

                __int128 v301 = os_log_shim_legacy_logging_enabled(v300);
                if ((_DWORD)v301)
                {
                  if (_IDSShouldLogTransport(v301))
                  {
                    v375 = v276;
                    v376 = v277;
                    v373 = v274;
                    v374 = v275;
                    v372 = v399;
                    _IDSLogTransport( @"QRAllocator",  @"IDS",  @"Cached stream infomation:  idsSessionID=%@, publishedStreams=%@, subscribedStreams=%@, generationCounter=%@, maxConcurrentStreams=%@");
                    if (_IDSShouldLog(0LL, @"QRAllocator"))
                    {
                      v375 = v276;
                      v376 = v277;
                      v373 = v274;
                      v374 = v275;
                      v372 = v399;
                      _IDSLogV( 0LL,  @"IDSFoundation",  @"QRAllocator",  @"Cached stream infomation:  idsSessionID=%@, publishedStreams=%@, subscribedStreams=%@, generationCounter=%@, maxConcurrentStreams=%@");
                    }
                  }
                }
              }

              else
              {
                os_unfair_lock_lock(&self->_lock);
                v379 = (void *)objc_claimAutoreleasedReturnValue( -[IDSQuickRelayAllocator _findAllocationListForSessionID:]( self,  "_findAllocationListForSessionID:",  v399));
                if ([v379 count])
                {
                  v404 = 0u;
                  v405 = 0u;
                  v402 = 0u;
                  v403 = 0u;
                  __int128 v306 = v379;
                  id v274 = (__CFString *)[v306 countByEnumeratingWithState:&v402 objects:v418 count:16];
                  if (v274)
                  {
                    __int128 v307 = *(void *)v403;
                    while (2)
                    {
                      for (j = 0LL; j != v274; j = (__CFString *)((char *)j + 1))
                      {
                        if (*(void *)v403 != v307) {
                          objc_enumerationMutation(v306);
                        }
                        __int128 v309 = *(void **)(*((void *)&v402 + 1) + 8LL * (void)j);
                        if (objc_msgSend(v309, "isJoinAllocation", v372))
                        {
                          __int128 v310 = (void *)objc_claimAutoreleasedReturnValue([v309 streamInfo]);
                          __int128 v311 = v310 == 0LL;

                          if (!v311)
                          {
                            v317 = (void *)objc_claimAutoreleasedReturnValue([v309 streamInfo]);
                            -[QRAllocation setStreamInfo:](v398, "setStreamInfo:", v317);

                            __int16 v318 = (id *)objc_claimAutoreleasedReturnValue([v309 streamInfo]);
                            id v274 = (__CFString *)v318[1];

                            v319 = (id *)objc_claimAutoreleasedReturnValue([v309 streamInfo]);
                            id v275 = (__CFString *)v319[2];

                            __int16 v320 = (id *)objc_claimAutoreleasedReturnValue([v309 streamInfo]);
                            uint64_t v276 = (__CFString *)v320[3];

                            v321 = (id *)objc_claimAutoreleasedReturnValue([v309 streamInfo]);
                            id v277 = (__CFString *)v321[4];

                            v322 = OSLogHandleForTransportCategory("QRAllocator");
                            v323 = (os_log_s *)objc_claimAutoreleasedReturnValue(v322);
                            if (os_log_type_enabled(v323, OS_LOG_TYPE_DEFAULT))
                            {
                              v324 = (NSMutableDictionary *)(id)objc_claimAutoreleasedReturnValue([v309 streamInfo]);
                              *(_DWORD *)buf = 138413314;
                              v420 = v324;
                              v421 = 2112;
                              v422 = v275;
                              v423 = 2112;
                              *(void *)v424 = v274;
                              *(_WORD *)&v424[8] = 2112;
                              v425 = v276;
                              v426 = 2112;
                              v427 = v277;
                              _os_log_impl( (void *)&_mh_execute_header,  v323,  OS_LOG_TYPE_DEFAULT,  "set streamInfo from cache: %@, subscribedStreams=%@, publisehdStreams=%@, generationCoun ter = %@, maxConcurrentStreams = %@",  buf,  0x34u);
                            }

                            v326 = os_log_shim_legacy_logging_enabled(v325);
                            if ((_DWORD)v326)
                            {
                              if (_IDSShouldLogTransport(v326))
                              {
                                v375 = v276;
                                v376 = v277;
                                v373 = v275;
                                v374 = v274;
                                v372 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue([v309 streamInfo]);
                                _IDSLogTransport( @"QRAllocator",  @"IDS",  @"set streamInfo from cache: %@, subscribedStreams=%@, publisehdStreams=%@, generationCounter = %@, maxConcurrentStreams = %@");

                                if (_IDSShouldLog(0LL, @"QRAllocator"))
                                {
                                  v327 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue( objc_msgSend( v309,  "streamInfo",  v372,  v275,  v274,  v276,  v277));
                                  v375 = v276;
                                  v376 = v277;
                                  v373 = v275;
                                  v374 = v274;
                                  v372 = v327;
                                  _IDSLogV( 0LL,  @"IDSFoundation",  @"QRAllocator",  @"set streamInfo from cache: %@, subscribedStreams=%@, publisehdStreams=%@, generationCounter = %@, maxConcurrentStreams = %@");
                                }
                              }
                            }

                            goto LABEL_363;
                          }
                        }
                      }

                      id v274 = (__CFString *)[v306 countByEnumeratingWithState:&v402 objects:v418 count:16];
                      if (v274) {
                        continue;
                      }
                      break;
                    }
                  }

                  id v275 = 0LL;
                  uint64_t v276 = 0LL;
                  id v277 = 0LL;
LABEL_363:
                }

                else
                {
                  __int128 v312 = OSLogHandleForTransportCategory("QRAllocator");
                  __int128 v313 = (os_log_s *)objc_claimAutoreleasedReturnValue(v312);
                  if (os_log_type_enabled(v313, OS_LOG_TYPE_DEFAULT))
                  {
                    sessionToAllocations = self->_sessionToAllocations;
                    *(_DWORD *)buf = 138412290;
                    v420 = sessionToAllocations;
                    _os_log_impl( (void *)&_mh_execute_header,  v313,  OS_LOG_TYPE_DEFAULT,  "could not find original allocate request %@",  buf,  0xCu);
                  }

                  v316 = os_log_shim_legacy_logging_enabled(v315);
                  if ((_DWORD)v316)
                  {
                    if (_IDSShouldLogTransport(v316))
                    {
                      v372 = self->_sessionToAllocations;
                      _IDSLogTransport( @"QRAllocator",  @"IDS",  @"could not find original allocate request %@");
                      if (_IDSShouldLog(0LL, @"QRAllocator"))
                      {
                        v372 = self->_sessionToAllocations;
                        _IDSLogV( 0LL,  @"IDSFoundation",  @"QRAllocator",  @"could not find original allocate request %@");
                      }
                    }
                  }

                  id v274 = 0LL;
                  id v275 = 0LL;
                  uint64_t v276 = 0LL;
                  id v277 = 0LL;
                }

                os_unfair_lock_unlock(&self->_lock);
                v328 = (void *)objc_claimAutoreleasedReturnValue(-[QRAllocation streamInfo](v398, "streamInfo"));
                v329 = v328 == 0LL;

                if (v329)
                {
                  v330 = OSLogHandleForTransportCategory("QRAllocator");
                  v331 = (os_log_s *)objc_claimAutoreleasedReturnValue(v330);
                  if (os_log_type_enabled(v331, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)buf = 0;
                    _os_log_impl( (void *)&_mh_execute_header,  v331,  OS_LOG_TYPE_DEFAULT,  "No stream information",  buf,  2u);
                  }

                  v333 = os_log_shim_legacy_logging_enabled(v332);
                  if ((_DWORD)v333)
                  {
                    if (_IDSShouldLogTransport(v333))
                    {
                      _IDSLogTransport(@"QRAllocator", @"IDS", @"No stream information");
                    }
                  }
                }
              }

              uint64_t v288 = obja;
            }

LABEL_374:
            __int128 v302 = v274;
            if (v302) {
              CFDictionarySetValue(theDict, kIDSQRAllocateKey_StreamInfoPublishedStreams, v302);
            }

            __int128 v303 = v275;
            if (v303) {
              CFDictionarySetValue(theDict, kIDSQRAllocateKey_StreamInfoSubscribedStreams, v303);
            }

            __int128 v304 = v276;
            if (v304) {
              CFDictionarySetValue(theDict, kIDSQRAllocateKey_StreamInfoGenerationCounter, v304);
            }

            __int128 v305 = v277;
            if (v305)
            {
              CFDictionarySetValue(theDict, kIDSQRAllocateKey_StreamInfoMaxConcurrentStreams, v305);
            }

            goto LABEL_382;
          }

          uint64_t v173 = (void *)objc_claimAutoreleasedReturnValue(-[QRAllocation responses](v398, "responses"));
          [v173 addObject:theDict];

          id v174 = 0LL;
          if (theDict && kIDSQRAllocateKey_RelayExpiryTimestamp) {
            id v174 = (void *)CFDictionaryGetValue(theDict, kIDSQRAllocateKey_RelayExpiryTimestamp);
          }
          v175 = v174;
          [v175 doubleValue];
          -[QRAllocation setPurgeAtExpiration:](v398, "setPurgeAtExpiration:");
        }

        else
        {
          uint64_t v169 = OSLogHandleForTransportCategory("QRAllocator");
          double v170 = (os_log_s *)objc_claimAutoreleasedReturnValue(v169);
          if (os_log_type_enabled(v170, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            v420 = v391;
            _os_log_impl( (void *)&_mh_execute_header,  v170,  OS_LOG_TYPE_DEFAULT,  "allocate response ID %@ is for recipient.",  buf,  0xCu);
          }

          v172 = os_log_shim_legacy_logging_enabled(v171);
          if ((_DWORD)v172)
          {
            if (_IDSShouldLogTransport(v172))
            {
              v371 = v391;
              _IDSLogTransport(@"QRAllocator", @"IDS", @"allocate response ID %@ is for recipient.");
              if (_IDSShouldLog(0LL, @"QRAllocator"))
              {
                v371 = v391;
                _IDSLogV( 0LL,  @"IDSFoundation",  @"QRAllocator",  @"allocate response ID %@ is for recipient.");
              }
            }
          }

          v398 = -[QRAllocation initWithResponse:](objc_alloc(&OBJC_CLASS___QRAllocation), "initWithResponse:", theDict);
          -[IDSQuickRelayAllocator _addAllocationForSession:allocation:]( self,  "_addAllocationForSession:allocation:",  v399,  v398);
        }

        keya = 0;
        id v176 = 0;
        goto LABEL_251;
      }

      uint64_t v140 = objc_opt_class(&OBJC_CLASS___NSNumber, v134);
      uint64_t v141 = sub_10028D3BC(v140, v6, kIDSQRAllocateKey_RelayExpiryTimestamp);
      uint64_t v143 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue(v141);
      if (!v143)
      {
LABEL_134:
        id v147 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPairingManager sharedInstance](&OBJC_CLASS___IDSPairingManager, "sharedInstance", v371));
        id v148 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue([v147 pairedDeviceUniqueID]);

        uint64_t v149 = OSLogHandleForTransportCategory("QRAllocator");
        double v150 = (os_log_s *)objc_claimAutoreleasedReturnValue(v149);
        if (os_log_type_enabled(v150, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          v420 = v148;
          _os_log_impl( (void *)&_mh_execute_header,  v150,  OS_LOG_TYPE_DEFAULT,  "defaultRemoteDeviceCBUUIDString: %@",  buf,  0xCu);
        }

        uint64_t v152 = os_log_shim_legacy_logging_enabled(v151);
        if ((_DWORD)v152)
        {
          if (_IDSShouldLogTransport(v152))
          {
            v371 = v148;
            _IDSLogTransport(@"QRAllocator", @"IDS", @"defaultRemoteDeviceCBUUIDString: %@");
            if (_IDSShouldLog(0LL, @"QRAllocator"))
            {
              v371 = v148;
              _IDSLogV(0LL, @"IDSFoundation", @"QRAllocator", @"defaultRemoteDeviceCBUUIDString: %@");
            }
          }
        }

        CFTypeRef v153 = v148;
        if (v153) {
          -[__CFDictionary setObject:forKey:]( theDict,  "setObject:forKey:",  v153,  kIDSQRAllocateKey_DefaultRemoteDeviceCBUUID);
        }

        goto LABEL_143;
      }

      uint64_t v144 = objc_opt_class(&OBJC_CLASS___NSNumber, v142);
      if ((objc_opt_isKindOfClass(v143, v144) & 1) != 0)
      {
        id v145 = (const __CFString *)-[NSMutableDictionary unsignedLongLongValue](v143, "unsignedLongLongValue");
        id v146 = 1000 * time(0LL);
        id v236 = OSLogHandleForTransportCategory("QRAllocator");
        id v237 = (os_log_s *)objc_claimAutoreleasedReturnValue(v236);
        if (os_log_type_enabled(v237, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134218498;
          v420 = (NSMutableDictionary *)v146;
          v421 = 2048;
          v422 = v145;
          v423 = 2112;
          *(void *)v424 = v6;
          _os_log_impl( (void *)&_mh_execute_header,  v237,  OS_LOG_TYPE_DEFAULT,  "response expired: %16llx %16llx, %@",  buf,  0x20u);
        }

        v239 = os_log_shim_legacy_logging_enabled(v238);
        if ((_DWORD)v239)
        {
          if (_IDSShouldLogTransport(v239))
          {
            _IDSLogTransport(@"QRAllocator", @"IDS", @"response expired: %16llx %16llx, %@");
          }
        }
      }

      else
      {
        id v177 = OSLogHandleForTransportCategory("QRAllocator");
        id v178 = (os_log_s *)objc_claimAutoreleasedReturnValue(v177);
        if (os_log_type_enabled(v178, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          v420 = v143;
          _os_log_impl( (void *)&_mh_execute_header,  v178,  OS_LOG_TYPE_DEFAULT,  "Relay expiry time-stamp is NaN: %@",  buf,  0xCu);
        }

        v180 = os_log_shim_legacy_logging_enabled(v179);
        if ((_DWORD)v180)
        {
          if (_IDSShouldLogTransport(v180))
          {
            _IDSLogTransport(@"QRAllocator", @"IDS", @"Relay expiry time-stamp is NaN: %@");
          }
        }
      }

LABEL_461:
      goto LABEL_462;
    }

    uint64_t v61 = (CFMutableDictionaryRef)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKey:]( self->_sessionIDToURIToResponsePayload,  "objectForKey:",  v399));
    if (!v61) {
      uint64_t v61 = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    }
    id v62 = (void *)objc_claimAutoreleasedReturnValue( -[IDSQuickRelayAllocator _getURIForRecipientFromResponse:]( self,  "_getURIForRecipientFromResponse:",  v6));
    uint64_t v63 = (void *)objc_claimAutoreleasedReturnValue(-[__CFDictionary objectForKeyedSubscript:](v61, "objectForKeyedSubscript:", v62));
    if (!v63
      || (uint64_t v64 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v6, "objectForKey:", key)),
          id v65 = (void *)objc_claimAutoreleasedReturnValue([v63 objectForKey:key]),
          id v66 = [v64 isEqualToData:v65],
          v65,
          v64,
          (v66 & 1) != 0)
      || -[IDSQuickRelayAllocator _shouldUseCurrentResponse:cachedMessage:]( self,  "_shouldUseCurrentResponse:cachedMessage:",  v6,  v63))
    {
      -[__CFDictionary setObject:forKey:](v61, "setObject:forKey:", v6, v62);
      -[NSMutableDictionary setObject:forKey:](self->_sessionIDToURIToResponsePayload, "setObject:forKey:", v61, v399);
    }

    else
    {
      id v96 = v63;

      uint64_t v97 = objc_claimAutoreleasedReturnValue( -[IDSQuickRelayAllocator _createSessionInfoFromResponsePayload:]( self,  "_createSessionInfoFromResponsePayload:",  v96));
      theDict = (const __CFDictionary *)v97;
      id v6 = v96;
    }

    if (v386)
    {
      uint64_t v67 = (id)objc_claimAutoreleasedReturnValue([v386 fromURI]);
      uint64_t v68 = (void *)objc_claimAutoreleasedReturnValue(-[__CFDictionary objectForKey:](theDict, "objectForKey:", kIDSQRAllocateKey_AppID));
      unsigned int v69 = [v68 isEqualToString:@"com.apple.private.alloy.airdrop.walkaway"];

      if (v67) {
        uint64_t v70 = v69;
      }
      else {
        uint64_t v70 = 1;
      }
      if ((v70 & 1) != 0)
      {
        uint64_t v71 = 0;
        goto LABEL_92;
      }

      uint64_t v79 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue([v67 prefixedURI]);
      uint64_t v83 = (void *)objc_claimAutoreleasedReturnValue(-[__CFDictionary objectForKey:](v61, "objectForKey:", v79));
      if (v83)
      {
        uint64_t v84 = OSLogHandleForTransportCategory("QRAllocator");
        uint64_t v85 = (os_log_s *)objc_claimAutoreleasedReturnValue(v84);
        if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v86 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue([v83 objectForKeyedSubscript:kIDSQRAllocateKey_RecipientID]);
          *(_DWORD *)buf = 138412290;
          v420 = v86;
          _os_log_impl( (void *)&_mh_execute_header,  v85,  OS_LOG_TYPE_DEFAULT,  "Setting allocate response for participantID: %@!",  buf,  0xCu);
        }

        id v88 = os_log_shim_legacy_logging_enabled(v87);
        if ((_DWORD)v88)
        {
          if (_IDSShouldLogTransport(v88))
          {
            uint64_t v89 = kIDSQRAllocateKey_RecipientID;
            v370 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue([v83 objectForKeyedSubscript:kIDSQRAllocateKey_RecipientID]);
            _IDSLogTransport( @"QRAllocator",  @"IDS",  @"Setting allocate response for participantID: %@!");

            if (_IDSShouldLog(0LL, @"QRAllocator"))
            {
              v370 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue(objc_msgSend(v83, "objectForKeyedSubscript:", v89, v370));
              _IDSLogV( 0LL,  @"IDSFoundation",  @"QRAllocator",  @"Setting allocate response for participantID: %@!");
            }
          }
        }

        __int128 v90 = v83;

        size_t v91 = objc_claimAutoreleasedReturnValue( -[IDSQuickRelayAllocator _createSessionInfoFromResponsePayload:]( self,  "_createSessionInfoFromResponsePayload:",  v90));
        -[NSMutableDictionary removeAllObjects](self->_sessionIDToURIToResponsePayload, "removeAllObjects");

        uint64_t v71 = 0;
        theDict = (const __CFDictionary *)v91;
        id v6 = v90;
        goto LABEL_91;
      }

      id v98 = OSLogHandleForTransportCategory("QRAllocator");
      id v99 = (os_log_s *)objc_claimAutoreleasedReturnValue(v98);
      if (os_log_type_enabled(v99, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v420 = v79;
        _os_log_impl( (void *)&_mh_execute_header,  v99,  OS_LOG_TYPE_DEFAULT,  "Have not yet received the allocate response for %@",  buf,  0xCu);
      }

      id v101 = os_log_shim_legacy_logging_enabled(v100);
      if ((_DWORD)v101)
      {
        if (_IDSShouldLogTransport(v101))
        {
          v370 = v79;
          _IDSLogTransport( @"QRAllocator",  @"IDS",  @"Have not yet received the allocate response for %@");
          if (_IDSShouldLog(0LL, @"QRAllocator"))
          {
            v370 = v79;
            _IDSLogV( 0LL,  @"IDSFoundation",  @"QRAllocator",  @"Have not yet received the allocate response for %@");
          }
        }
      }
    }

    else
    {
      int v72 = OSLogHandleForTransportCategory("QRAllocator");
      uint64_t v73 = (os_log_s *)objc_claimAutoreleasedReturnValue(v72);
      if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v73,  OS_LOG_TYPE_DEFAULT,  "Have not yet received the callerID!",  buf,  2u);
      }

      uint64_t v75 = os_log_shim_legacy_logging_enabled(v74);
      if ((_DWORD)v75)
      {
        if (_IDSShouldLogTransport(v75))
        {
          _IDSLogTransport(@"QRAllocator", @"IDS", @"Have not yet received the callerID!");
        }
      }

      uint64_t v76 = 0LL;
      if (v6 && kIDSQRAllocateKey_GroupID) {
        uint64_t v76 = (void *)CFDictionaryGetValue((CFDictionaryRef)v6, kIDSQRAllocateKey_GroupID);
      }
      uint64_t v67 = v76;
      uint64_t v77 = 0LL;
      if (key && v6) {
        uint64_t v77 = (void *)CFDictionaryGetValue((CFDictionaryRef)v6, key);
      }
      uint64_t v78 = sub_1002872C0(v77);
      uint64_t v79 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue(v78);
      v411 = 0;
      if (v79 && v67)
      {
        uint64_t v80 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue( -[IDSQuickRelayAllocator _getResponseFromQRGroupID:]( self,  "_getResponseFromQRGroupID:",  v67));
        uint64_t v81 = v80;
        if (v80)
        {
          uint64_t v82 = key ? (void *)CFDictionaryGetValue(v80, key) : 0LL;
          id v102 = sub_1002872C0(v82);
          id v103 = (void *)objc_claimAutoreleasedReturnValue(v102);
          NSUInteger v104 = -[NSMutableDictionary isEqualToString:](v79, "isEqualToString:", v103);

          if (v104)
          {
            uint64_t v105 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue( -[IDSQuickRelayAllocator _mergeParticipantID2PushTokenMapping:sourceResponse:mappingChange:]( self,  "_mergeParticipantID2PushTokenMapping:sourceResponse:mappingChange:",  v81,  v6,  &v411));
            if (v105 != v81) {
              -[IDSQuickRelayAllocator _setResponseForQRGroupID:groupID:]( self,  "_setResponseForQRGroupID:groupID:",  v105,  v67);
            }
            if (v411)
            {
              -[IDSQuickRelayAllocator _notifyParticipantID2PushTokenMappingChange:]( self,  "_notifyParticipantID2PushTokenMappingChange:",  v105);
              -[IDSQuickRelayAllocator _notifyURIToParticipantIDMappingChange:]( self,  "_notifyURIToParticipantIDMappingChange:",  v105);
            }
          }
        }
      }

      else
      {
        uint64_t v92 = OSLogHandleForTransportCategory("QRAllocator");
        id v93 = (os_log_s *)objc_claimAutoreleasedReturnValue(v92);
        if (os_log_type_enabled(v93, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v93, OS_LOG_TYPE_DEFAULT, "Invalid groupID or sessionID!", buf, 2u);
        }

        id v95 = os_log_shim_legacy_logging_enabled(v94);
        if ((_DWORD)v95)
        {
          if (_IDSShouldLogTransport(v95))
          {
            _IDSLogTransport(@"QRAllocator", @"IDS", @"Invalid groupID or sessionID!");
          }
        }
      }
    }

    uint64_t v71 = 1;
LABEL_91:

LABEL_92:
    if (v71) {
      goto LABEL_461;
    }
    goto LABEL_93;
  }

  uint64_t v49 = OSLogHandleForTransportCategory("QRAllocator");
  uint64_t v50 = (os_log_s *)objc_claimAutoreleasedReturnValue(v49);
  if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_DEFAULT,  "failed to compose a QR sessionInfo dict",  buf,  2u);
  }

  uint64_t v52 = os_log_shim_legacy_logging_enabled(v51);
  if ((_DWORD)v52)
  {
    if (_IDSShouldLogTransport(v52))
    {
      _IDSLogTransport(@"QRAllocator", @"IDS", @"failed to compose a QR sessionInfo dict");
    }
  }

                                                          CSDBSqliteDatabaseSetVersion(a1, 10011LL);
                                                          v166 = OSLogHandleForIDSCategory("IDSDMessageStore");
                                                          id v167 = (os_log_s *)objc_claimAutoreleasedReturnValue(v166);
                                                          if (os_log_type_enabled(v167, OS_LOG_TYPE_DEFAULT))
                                                          {
                                                            *(_WORD *)buf = 0;
                                                            _os_log_impl( (void *)&_mh_execute_header,  v167,  OS_LOG_TYPE_DEFAULT,  "Add push_priority column to outgoing_message",  buf,  2u);
                                                          }

                                                          if (os_log_shim_legacy_logging_enabled(v168)
                                                            && _IDSShouldLog( 0LL,  @"IDSDMessageStore"))
                                                          {
                                                            _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDMessageStore",  @"Add push_priority column to outgoing_message");
                                                          }

                                                          if (!sub_1003B3CB0( a2,  @"push_priority",  @"INTEGER DEFAULT 0",  @"outgoing_message")) {
                                                            goto LABEL_425;
                                                          }
                                                          CSDBSqliteDatabaseSetVersion(a1, 10012LL);
                                                          goto LABEL_308;
                                                        }

LABEL_462:
}

void sub_100298AC0(uint64_t a1)
{
  size_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog QRAllocator_oversized](&OBJC_CLASS___IDSFoundationLog, "QRAllocator_oversized"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v5 = @"YES";
    if (!*(_BYTE *)(a1 + 64)) {
      uint64_t v5 = @"NO";
    }
    uint64_t v6 = *(void *)(a1 + 48);
    uint64_t v7 = *(void *)(a1 + 56);
    int v8 = 138413314;
    uint64_t v9 = v3;
    __int16 v10 = 2112;
    uint64_t v11 = v4;
    __int16 v12 = 2112;
    uint64_t v13 = v6;
    __int16 v14 = 2112;
    id v15 = v5;
    __int16 v16 = 2112;
    uint64_t v17 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Full allocate response payload for RequestID: %@ IDSSessionID: %@ QRSessionID: %@ from cache: %@ with payload %@",  (uint8_t *)&v8,  0x34u);
  }
}

uint64_t sub_10029BB50(uint64_t a1)
{
  if ([*(id *)(a1 + 32) snapshotWithSignature:*(void *)(a1 + 40) delay:0 events:0 payload:*(void *)(a1 + 48) actions:&stru_1008FF6F0 reply:*(double *)(a1 + 56)])
  {
    uint64_t v2 = OSLogHandleForTransportCategory("GL");
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138412290;
      uint64_t v13 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "SymptomReporter: Sent snapshot for signature %@",  buf,  0xCu);
    }

    uint64_t result = os_log_shim_legacy_logging_enabled(v5);
    if ((_DWORD)result)
    {
      uint64_t result = _IDSShouldLogTransport(result);
      if ((_DWORD)result)
      {
        _IDSLogTransport(@"GL", @"IDS", @"SymptomReporter: Sent snapshot for signature %@");
        uint64_t result = _IDSShouldLog(0LL, @"GL");
        if ((result & 1) != 0)
        {
          uint64_t v7 = @"SymptomReporter: Sent snapshot for signature %@";
          return _IDSLogV(0LL, @"IDSFoundation", @"GL", v7);
        }
      }
    }
  }

  else
  {
    uint64_t v8 = OSLogHandleForTransportCategory("GL");
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138412290;
      uint64_t v13 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "SymptomReporter: Failed to send snapshot for signature %@",  buf,  0xCu);
    }

    uint64_t result = os_log_shim_legacy_logging_enabled(v11);
    if ((_DWORD)result)
    {
      uint64_t result = _IDSShouldLogTransport(result);
      if ((_DWORD)result)
      {
        _IDSLogTransport(@"GL", @"IDS", @"SymptomReporter: Failed to send snapshot for signature %@");
        uint64_t result = _IDSShouldLog(0LL, @"GL");
        if ((result & 1) != 0)
        {
          uint64_t v7 = @"SymptomReporter: Failed to send snapshot for signature %@";
          return _IDSLogV(0LL, @"IDSFoundation", @"GL", v7);
        }
      }
    }
  }

  return result;
}

void sub_10029BD6C(id a1, NSDictionary *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = OSLogHandleForTransportCategory("GL");
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    uint64_t v8 = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "SymptomReporter: got response from diagnosticReporter - %@",  buf,  0xCu);
  }

  uint64_t v6 = os_log_shim_legacy_logging_enabled(v5);
  if ((_DWORD)v6)
  {
    if (_IDSShouldLogTransport(v6))
    {
      _IDSLogTransport(@"GL", @"IDS", @"SymptomReporter: got response from diagnosticReporter - %@");
      if (_IDSShouldLog(0LL, @"GL")) {
        _IDSLogV( 0LL,  @"IDSFoundation",  @"GL",  @"SymptomReporter: got response from diagnosticReporter - %@");
      }
    }
  }
}

void sub_10029E034(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = (id)objc_claimAutoreleasedReturnValue([a3 allObjects]);
  [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:v5];
}

id sub_10029FB90(uint64_t a1)
{
  return [*(id *)(a1 + 32) _invalidateSession:*(void *)(a1 + 40) isExpiryPurging:*(unsigned __int8 *)(a1 + 48)];
}

id sub_10029FEC8(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _discardAllocation:*(void *)(a1 + 40)];
}

void sub_1002A1B58(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8LL);
  if (*(_BYTE *)(a1 + 40))
  {
    if (v2) {
      return;
    }
    uint64_t v3 = OSLogHandleForTransportCategory("QRAllocator");
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "enable push handler", buf, 2u);
    }

    uint64_t v6 = os_log_shim_legacy_logging_enabled(v5);
    if ((_DWORD)v6 && _IDSShouldLogTransport(v6))
    {
      _IDSLogTransport(@"QRAllocator", @"IDS", @"enable push handler");
    }

    uint64_t v7 = objc_claimAutoreleasedReturnValue( +[IDSPushHandler sharedInstanceWithPortName:]( &OBJC_CLASS___IDSPushHandler,  "sharedInstanceWithPortName:",  @"com.apple.identityservicesd.aps"));
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void **)(v8 + 8);
    *(void *)(v8 + _Block_object_dispose(va, 8) = v7;

    uint64_t v10 = objc_alloc(&OBJC_CLASS___NSSet);
    uint64_t v11 = -[NSSet initWithObjects:](v10, "initWithObjects:", kIDSQuickRelayPushTopic, 0LL);
    __int16 v12 = objc_alloc(&OBJC_CLASS___NSSet);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 200LL));
    __int16 v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 255LL));
    id v15 = -[NSSet initWithObjects:](v12, "initWithObjects:", v13, v14, 0LL);

    uint64_t v16 = *(void *)(a1 + 32);
    uint64_t v17 = *(void **)(v16 + 8);
    uint64_t v20 = im_primary_queue(v18, v19);
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
    [v17 addListener:v16 topics:v11 commands:v15 queue:v21];
  }

  else
  {
    if (!v2) {
      return;
    }
    uint64_t v22 = OSLogHandleForTransportCategory("QRAllocator");
    id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "disable push handler", v28, 2u);
    }

    uint64_t v25 = os_log_shim_legacy_logging_enabled(v24);
    if ((_DWORD)v25)
    {
      if (_IDSShouldLogTransport(v25))
      {
        _IDSLogTransport(@"QRAllocator", @"IDS", @"disable push handler");
      }
    }

    objc_msgSend(*(id *)(*(void *)(a1 + 32) + 8), "removeListener:");
    uint64_t v26 = *(void *)(a1 + 32);
    uint64_t v11 = *(NSSet **)(v26 + 8);
    *(void *)(v26 + _Block_object_dispose(va, 8) = 0LL;
  }
}

id sub_1002A2BEC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _sendKeepAliveRequest:*(void *)(a1 + 40)];
}

uint64_t sub_1002A33AC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1002A33BC(uint64_t a1)
{
}

void sub_1002A33C4(void *a1, void *a2, void *a3)
{
  id v10 = a2;
  uint64_t v5 = a3;
  if (a1[6] >= v5[2])
  {
    uint64_t v6 = *(void **)(*(void *)(a1[5] + 8LL) + 40LL);
    if (!v6)
    {
      uint64_t v7 = objc_claimAutoreleasedReturnValue( +[NSMutableArray arrayWithCapacity:]( NSMutableArray,  "arrayWithCapacity:",  [*(id *)(a1[4] + 64) count]));
      uint64_t v8 = *(void *)(a1[5] + 8LL);
      uint64_t v9 = *(void **)(v8 + 40);
      *(void *)(v8 + 40) = v7;

      uint64_t v6 = *(void **)(*(void *)(a1[5] + 8LL) + 40LL);
    }

    [v6 addObject:v10];
  }
}

id sub_1002A3620(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _cleanupResponses];
}

void sub_1002A37FC(id a1)
{
}

void sub_1002A3A90(uint64_t a1)
{
  uint64_t v3 = (void (**)(id, void *, id))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) block]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _isFinishedBlock]);
  v3[2](v3, v2, [*(id *)(a1 + 32) attempts]);
}

void sub_1002A3BF8(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    [WeakRetained _run];
  }

void sub_1002A3CC8(uint64_t a1)
{
  *(void *)&__int128 v2 = -1LL;
  *((void *)&v2 + 1) = -1LL;
  *(_OWORD *)(a1 + 96) = v2;
  *(_OWORD *)(a1 + 112) = v2;
  *(_OWORD *)(a1 + 64) = v2;
  *(_OWORD *)(a1 + 80) = v2;
  *(_OWORD *)(a1 + 32) = v2;
  *(_OWORD *)(a1 + 4_Block_object_dispose(va, 8) = v2;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v2;
  bzero((void *)(a1 + 128), 0x1F80uLL);
  *(_WORD *)(a1 + 8200) = 1024;
  *(void *)(a1 + 0x2000) = 0LL;
}

uint64_t sub_1002A3D14(uint64_t a1, _WORD *a2)
{
  uint64_t v4 = (_WORD *)(a1 + 8200);
  unsigned __int16 v5 = *(_WORD *)(a1 + 8200) + 1;
  uint64_t v6 = v5 >> 6;
  unint64_t v7 = *(void *)(a1 + 8 * v6);
  if (~v7 >> (*(_WORD *)(a1 + 8200) + 1))
  {
    unint64_t v8 = v5 & 0x3F;
    unint64_t v9 = v7 >> v5;
    unsigned int v10 = __clz(__rbit64(~(v7 >> v5)));
    if (v9 == -1LL) {
      uint64_t v11 = 0xFFFFFFFFLL;
    }
    else {
      uint64_t v11 = v10;
    }
    __int16 v12 = v11 + v8 + ((*(_WORD *)(a1 + 8200) + 1) & 0xFFC0);
    *a2 = v12;
    *(void *)(a1 + 8 * v6) = (1LL << (v11 + v8)) | v7;
    uint64_t v13 = OSLogHandleForIDSCategory("PortMap");
    __int16 v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      int v15 = (unsigned __int16)*v4;
      *(_DWORD *)buf = 67110400;
      *(_DWORD *)uint64_t v54 = v15;
      *(_WORD *)&v54[4] = 1024;
      *(_DWORD *)&v54[6] = v6;
      __int16 v55 = 1024;
      int v56 = v8;
      __int16 v57 = 1024;
      *(_DWORD *)int v58 = v11 + v8;
      *(_WORD *)&v58[4] = 2048;
      *(void *)&v58[6] = v9;
      __int16 v59 = 1024;
      int v60 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "found in cur (last = %u) - index=%d shift=%d newShift=%d (cur=%llu, ffsll(~cur)=%d)",  buf,  0x2Au);
    }

    if (os_log_shim_legacy_logging_enabled(v16) && _IDSShouldLog(0LL, @"PortMap"))
    {
      unint64_t v49 = v9;
      uint64_t v50 = v11;
      unint64_t v47 = v8;
      uint64_t v48 = (v11 + v8);
      uint64_t v45 = (unsigned __int16)*v4;
      uint64_t v46 = v6;
      _IDSLogV( 0LL,  @"IDSFoundation",  @"PortMap",  @"found in cur (last = %u) - index=%d shift=%d newShift=%d (cur=%llu, ffsll(~cur)=%d)");
    }

    _WORD *v4 = v12;
    unint64_t v17 = *(void *)(a1 + 0x2000) + 1LL;
    *(void *)(a1 + 0x2000) = v17;
LABEL_25:
    if (v17 >= 0xB5)
    {
      uint32_t v26 = arc4random_uniform(0x64u);
      unsigned int v27 = +[IDSAutoBugCapture isSupported](&OBJC_CLASS___IDSAutoBugCapture, "isSupported");
      unsigned int v28 = v26 < 5 ? v27 : 0;
      if (v28 == 1)
      {
        if (qword_1009C08B0 != -1) {
          dispatch_once(&qword_1009C08B0, &stru_1008FF7D0);
        }
        os_unfair_lock_lock((os_unfair_lock_t)&dword_1009C08A8);
        uint64_t v29 = (void *)qword_1009C08A0;
        if (!qword_1009C08A0
          || (uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date")),
              BOOL v31 = [v29 compare:v30] == (id)1,
              v30,
              !v31))
        {
          uint64_t v32 = objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceNow:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceNow:",  259200.0,  v45,  v46,  v47,  v48,  v49,  v50));
          id v33 = (void *)qword_1009C08A0;
          qword_1009C08A0 = v32;

          v51[0] = _NSConcreteStackBlock;
          v51[1] = 3221225472LL;
          v51[2] = sub_1002A42DC;
          v51[3] = &unk_1008F8320;
          id v34 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Number of allocated ports passed high watermark!"));
          id v52 = v34;
          +[IDSAutoBugCapture triggerCaptureWithEvent:context:completion:]( &OBJC_CLASS___IDSAutoBugCapture,  "triggerCaptureWithEvent:context:completion:",  209LL,  v34,  v51);
        }

        os_unfair_lock_unlock((os_unfair_lock_t)&dword_1009C08A8);
      }
    }

    return 0LL;
  }

  else
  {
    int v18 = 0;
    char v19 = 0;
LABEL_12:
    ++v18;
    do
    {
      uint64_t v6 = ((_DWORD)v6 + 1) & 0x3FF;
      uint64_t v20 = *(void *)(a1 + 8LL * v6);
      if (v20 != -1)
      {
        unint64_t v21 = __clz(__rbit64(~v20));
        *a2 = v21 | ((_WORD)v6 << 6);
        *(void *)(a1 + 8 * v6) = (1LL << v21) | v20;
        uint64_t v22 = OSLogHandleForIDSCategory("PortMap");
        id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          int v24 = (unsigned __int16)*v4;
          *(_DWORD *)buf = 67110144;
          *(_DWORD *)uint64_t v54 = v24;
          *(_WORD *)&v54[4] = 1024;
          *(_DWORD *)&v54[6] = v6;
          __int16 v55 = 1024;
          int v56 = v21;
          __int16 v57 = 2048;
          *(void *)int v58 = v20;
          *(_WORD *)&v58[8] = 1024;
          *(_DWORD *)&v58[10] = v21;
          _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "found (last = %u) - at index=%d newShift=%d (cur=%llu, ffsll(~cur)=%d)",  buf,  0x24u);
        }

        if (os_log_shim_legacy_logging_enabled(v25) && _IDSShouldLog(0LL, @"PortMap"))
        {
          uint64_t v48 = v20;
          unint64_t v49 = v21;
          uint64_t v46 = v6;
          unint64_t v47 = v21;
          uint64_t v45 = (unsigned __int16)*v4;
          _IDSLogV( 0LL,  @"IDSFoundation",  @"PortMap",  @"found (last = %u) - at index=%d newShift=%d (cur=%llu, ffsll(~cur)=%d)");
        }

        _WORD *v4 = v21 | ((_WORD)v6 << 6);
        ++*(void *)(a1 + 0x2000);
        char v19 = 1;
        if (v18 == 1023) {
          goto LABEL_24;
        }
        goto LABEL_12;
      }

      ++v18;
    }

    while (v18 != 1024);
    if ((v19 & 1) != 0)
    {
LABEL_24:
      unint64_t v17 = *(void *)(a1 + 0x2000);
      goto LABEL_25;
    }

    uint64_t v36 = OSLogHandleForIDSCategory("Warning");
    id v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      *(void *)uint64_t v54 = "int IDSPortMap_GetNextAvailablePort(struct IDSPortMap *, uint16_t *)";
      _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_ERROR,  "[Fatal error encountered] %s: ran out of ports to allocate, aborting!!!",  buf,  0xCu);
    }

    uint64_t v39 = os_log_shim_legacy_logging_enabled(v38);
    if ((_DWORD)v39)
    {
      _IDSWarnV( @"IDSFoundation",  @"[Fatal error encountered] %s: ran out of ports to allocate, aborting!!!");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"[Fatal error encountered] %s: ran out of ports to allocate, aborting!!!");
      _IDSLogTransport( @"Warning",  @"IDS",  @"[Fatal error encountered] %s: ran out of ports to allocate, aborting!!!");
    }

    uint64_t v40 = isRunningTests(v39);
    if (!(_DWORD)v40) {
      abort();
    }
    throwsIDSAbortException(v40, v41, v42, v43, v44);
    return 1LL;
  }

void sub_1002A42D0(id a1)
{
  dword_1009C08A8 = 0;
}

void sub_1002A42DC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = OSLogHandleForIDSCategory("PortMap");
  unint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    uint64_t v12 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Finished capturing AutoBugCapture diagnostics for %@",  buf,  0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v10) && _IDSShouldLog(0LL, @"PortMap")) {
    _IDSLogV( 0LL,  @"IDSFoundation",  @"PortMap",  @"Finished capturing AutoBugCapture diagnostics for %@");
  }
}

uint64_t sub_1002A4408(uint64_t result, unsigned int a2)
{
  uint64_t v2 = a2 >> 6;
  uint64_t v3 = *(void *)(result + 8LL * v2);
  if ((v3 & (1LL << a2)) != 0)
  {
    uint64_t v4 = OSLogHandleForIDSCategory("PortMap");
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "can't allocated used port", v7, 2u);
    }

    uint64_t result = os_log_shim_legacy_logging_enabled(v6);
    if ((_DWORD)result)
    {
      uint64_t result = _IDSShouldLog(0LL, @"PortMap");
      if ((_DWORD)result) {
        return _IDSLogV(0LL, @"IDSFoundation", @"PortMap", @"can't allocated used port");
      }
    }
  }

  else
  {
    *(void *)(result + 8 * v2) = v3 | (1LL << a2);
    ++*(void *)(result + 0x2000);
  }

  return result;
}

uint64_t sub_1002A44F8(uint64_t result, unsigned int a2)
{
  uint64_t v2 = a2 >> 6;
  uint64_t v3 = *(void *)(result + 8LL * v2);
  if ((v3 & (1LL << a2)) != 0)
  {
    *(void *)(result + 8 * v2) = v3 & ~(1LL << a2);
    --*(void *)(result + 0x2000);
  }

  else
  {
    uint64_t v4 = OSLogHandleForIDSCategory("PortMap");
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "can't release unallocated port", v7, 2u);
    }

    uint64_t result = os_log_shim_legacy_logging_enabled(v6);
    if ((_DWORD)result)
    {
      uint64_t result = _IDSShouldLog(0LL, @"PortMap");
      if ((_DWORD)result) {
        return _IDSLogV(0LL, @"IDSFoundation", @"PortMap", @"can't release unallocated port");
      }
    }
  }

  return result;
}

void sub_1002A50AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  uint64_t v27 = a1;
  id obj = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) endpoints]);
  id v5 = [obj countByEnumeratingWithState:&v29 objects:v41 count:16];
  uint32_t v26 = v4;
  if (!v5) {
    goto LABEL_19;
  }
  id v6 = v5;
  uint64_t v7 = *(void *)v30;
  do
  {
    for (i = 0LL; i != v6; i = (char *)i + 1)
    {
      if (*(void *)v30 != v7) {
        objc_enumerationMutation(obj);
      }
      uint64_t v9 = *(void **)(*((void *)&v29 + 1) + 8LL * (void)i);
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 URI]);
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 prefixedURI]);

      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v9 pushToken]);
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKey:v11]);
      __int16 v14 = v13;
      if (v13 && ([v13 optedIn] & 1) != 0)
      {
        int v15 = (void *)objc_claimAutoreleasedReturnValue([v14 verifiedPushTokens]);
        unsigned int v16 = [v15 containsObject:v12];

        if (v16)
        {
          uint64_t v4 = v26;
          -[NSMutableArray addObject:](v26, "addObject:", v9);
          unint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog delivery_keyTransparency]( &OBJC_CLASS___IDSFoundationLog,  "delivery_keyTransparency"));
          if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_17;
          }
          int v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v27 + 32) service]);
          *(_DWORD *)buf = 138412802;
          uint64_t v36 = v18;
          __int16 v37 = 2112;
          uint64_t v38 = v11;
          __int16 v39 = 2112;
          uint64_t v40 = v12;
          char v19 = v17;
          uint64_t v20 = "Recipient endpoint is opted into KT and this endpoint is verified. Will send to this endpoint. { service"
                ": %@, uri: %@, token: %@ }";
LABEL_15:
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, v20, buf, 0x20u);
        }

        else
        {
          unint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog delivery_keyTransparency]( &OBJC_CLASS___IDSFoundationLog,  "delivery_keyTransparency"));
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
          {
            int v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v27 + 32) service]);
            *(_DWORD *)buf = 138412802;
            uint64_t v36 = v18;
            __int16 v37 = 2112;
            uint64_t v38 = v11;
            __int16 v39 = 2112;
            uint64_t v40 = v12;
            char v19 = v17;
            uint64_t v20 = "Recipient endpoint is opted into KT and is not verified, will not send to this endpoint. { service: %@"
                  ", uri: %@, token: %@ }";
            goto LABEL_15;
          }
        }

        uint64_t v4 = v26;
        goto LABEL_17;
      }

      -[NSMutableArray addObject:](v4, "addObject:", v9);
      unint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog delivery_keyTransparency]( &OBJC_CLASS___IDSFoundationLog,  "delivery_keyTransparency"));
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v27 + 32) service]);
        *(_DWORD *)buf = 138412802;
        uint64_t v36 = v21;
        __int16 v37 = 2112;
        uint64_t v38 = v11;
        __int16 v39 = 2112;
        uint64_t v40 = v12;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Recipient endpoint is not opted into KT. Will send to this endpoint. { service: %@, uri: %@, token: %@ }",  buf,  0x20u);
      }

dispatch_queue_t sub_1002A5550()
{
  dispatch_queue_attr_t v0 = dispatch_queue_attr_make_with_autorelease_frequency( &_dispatch_queue_attr_concurrent,  DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  uint64_t v1 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v0);
  dispatch_queue_t v2 = dispatch_queue_create("IDSAsyncMapperQueue", v1);

  return v2;
}

uint64_t sub_1002A5794(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1002A57A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  id v4 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v13;
    do
    {
      for (i = 0LL; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v13 != v6) {
          objc_enumerationMutation(v3);
        }
        unint64_t v8 = *(void **)(*((void *)&v12 + 1) + 8LL * (void)i);
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:v8]);
        objc_msgSend(*(id *)(a1 + 32), "replaceObjectAtIndex:withObject:", objc_msgSend(v8, "unsignedIntegerValue"), v9);
      }

      id v5 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }

    while (v5);
  }

  uint64_t v10 = *(void *)(a1 + 40);
  id v11 = [*(id *)(a1 + 32) copy];
  (*(void (**)(uint64_t, id))(v10 + 16))(v10, v11);
}

void sub_1002A5C20(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_1002A5CEC;
  v7[3] = &unk_1008FF848;
  id v8 = *(id *)(a1 + 56);
  id v9 = *(id *)(a1 + 64);
  int8x16_t v6 = *(int8x16_t *)(a1 + 32);
  id v5 = (id)v6.i64[0];
  int8x16_t v10 = vextq_s8(v6, v6, 8uLL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(v2 + 16))(v2, v3, v4, v7);
}

void sub_1002A5CEC(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_1002A5D98;
  v7[3] = &unk_1008F60E8;
  uint64_t v4 = *(dispatch_queue_s **)(a1 + 32);
  id v8 = *(id *)(a1 + 40);
  id v9 = v3;
  id v5 = *(void **)(a1 + 56);
  uint64_t v10 = *(void *)(a1 + 48);
  id v11 = v5;
  id v6 = v3;
  dispatch_barrier_async(v4, v7);
}

void sub_1002A5D98(uint64_t a1)
{
  id v3 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2)
  {
    [*(id *)(a1 + 32) setObject:v2 forKey:*(void *)(a1 + 48)];
  }

  else
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
    [v3 setObject:v4 forKey:*(void *)(a1 + 48)];
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

void sub_1002A5E00(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = [*(id *)(a1 + 32) copy];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_1002A718C(void *a1, char a2)
{
  if ((a2 & 1) != 0)
  {
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSOffGridMessenger](&OBJC_CLASS___IDSFoundationLog, "IDSOffGridMessenger"));
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = a1[4];
      uint64_t v5 = a1[5];
      uint64_t v6 = a1[6];
      int v14 = 138412802;
      uint64_t v15 = v4;
      __int16 v16 = 2112;
      uint64_t v17 = v5;
      __int16 v18 = 2112;
      uint64_t v19 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Successfully saved client donated handles {destinationURIs: %@, fromURI: %@, options: %@}",  (uint8_t *)&v14,  0x20u);
    }

    (*(void (**)(void))(a1[7] + 16LL))();
  }

  else
  {
    uint64_t v7 = IDSOffGridDeliveryErrorDomain;
    NSErrorUserInfoKey v20 = NSLocalizedDescriptionKey;
    unint64_t v21 = @"Failed to save donated handles";
    id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v21,  &v20,  1LL));
    id v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v7,  2LL,  v8));

    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSOffGridMessenger](&OBJC_CLASS___IDSFoundationLog, "IDSOffGridMessenger"));
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = a1[4];
      uint64_t v12 = a1[5];
      uint64_t v13 = a1[6];
      int v14 = 138412802;
      uint64_t v15 = v11;
      __int16 v16 = 2112;
      uint64_t v17 = v12;
      __int16 v18 = 2112;
      uint64_t v19 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Failed to save client donated handles {destinationURIs: %@, fromURI: %@, options: %@}",  (uint8_t *)&v14,  0x20u);
    }

    (*(void (**)(void))(a1[7] + 16LL))();
  }

id sub_1002A7C44(id a1, IDSURI *a2)
{
  return -[IDSURI tokenFreeURI](a2, "tokenFreeURI");
}

void sub_1002A7C4C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, void *a9)
{
  id v11 = a9;
  uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSOffGridMessenger](&OBJC_CLASS___IDSFoundationLog, "IDSOffGridMessenger"));
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v13 = @"NO";
    if (a6) {
      uint64_t v13 = @"YES";
    }
    *(_DWORD *)buf = 138412546;
    uint64_t v41 = v13;
    __int16 v42 = 2112;
    id v43 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Received query result with success {%@} and result {%@}",  buf,  0x16u);
  }

  if ((a6 & 1) != 0)
  {
    __int128 v35 = 0u;
    __int128 v36 = 0u;
    __int128 v33 = 0u;
    __int128 v34 = 0u;
    id obj = *(id *)(a1 + 40);
    id v14 = [obj countByEnumeratingWithState:&v33 objects:v37 count:16];
    if (v14)
    {
      id v16 = v14;
      uint64_t v17 = *(void *)v34;
      *(void *)&__int128 v15 = 138412290LL;
      __int128 v31 = v15;
      do
      {
        for (i = 0LL; i != v16; i = (char *)i + 1)
        {
          if (*(void *)v34 != v17) {
            objc_enumerationMutation(obj);
          }
          uint64_t v19 = *(void **)(*((void *)&v33 + 1) + 8LL * (void)i);
          NSErrorUserInfoKey v20 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "tokenFreeURI", v31));
          unint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKeyedSubscript:v20]);
          uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v21 firstObject]);
          uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v22 shortHandle]);

          int v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:v19]);
          uint64_t v25 = v24;
          if (v24)
          {
            if (v23)
            {
              [v24 setShortHandle:v23];
              uint64_t v26 = 1LL;
            }

            else
            {
              uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog IDSOffGridMessenger]( &OBJC_CLASS___IDSFoundationLog,  "IDSOffGridMessenger"));
              if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = v31;
                uint64_t v41 = v20;
                _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "Missing short handle for %@ - returning status invalid",  buf,  0xCu);
              }

              uint64_t v26 = 2LL;
            }

            [v25 setStatus:v26];
            [*(id *)(a1 + 32) setObject:v25 forKey:v19];
          }
        }

        id v16 = [obj countByEnumeratingWithState:&v33 objects:v37 count:16];
      }

      while (v16);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  else
  {
    uint64_t v28 = IDSOffGridDeliveryErrorDomain;
    NSErrorUserInfoKey v38 = NSLocalizedDescriptionKey;
    __int16 v39 = @"Failed to query due to unsuccessful request";
    __int128 v29 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v39,  &v38,  1LL));
    __int128 v30 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v28,  6LL,  v29));

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
}

void sub_1002A9D0C(uint64_t a1)
{
  if (*(_BYTE *)(*(void *)(a1 + 32) + 57LL))
  {
    id v2 = -[CBPeripheralManager initWithDelegate:queue:]( objc_alloc(&OBJC_CLASS___CBPeripheralManager),  "initWithDelegate:queue:",  *(void *)(a1 + 32),  *(void *)(*(void *)(a1 + 32) + 88LL));
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void **)(v3 + 16);
    *(void *)(v3 + 16) = v2;
  }

  else
  {
    uint64_t v5 = -[CBCentralManager initWithDelegate:queue:]( objc_alloc(&OBJC_CLASS___CBCentralManager),  "initWithDelegate:queue:",  *(void *)(a1 + 32),  *(void *)(*(void *)(a1 + 32) + 88LL));
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v4 = *(void **)(v6 + 8);
    *(void *)(v6 + _Block_object_dispose(va, 8) = v5;
  }

  uint64_t v7 = -[CBScalablePipeManager initWithDelegate:queue:]( objc_alloc(&OBJC_CLASS___CBScalablePipeManager),  "initWithDelegate:queue:",  *(void *)(a1 + 32),  *(void *)(*(void *)(a1 + 32) + 88LL));
  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = *(void **)(v8 + 24);
  *(void *)(v8 + 24) = v7;
}

id sub_1002A9E00(uint64_t a1)
{
  uint64_t v2 = OSLogHandleForTransportCategory("BTLinkManager");
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    NSErrorUserInfoKey v20 = @"com.apple.ids";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Unregister endpoint identifier: %@", buf, 0xCu);
  }

  uint64_t v5 = os_log_shim_legacy_logging_enabled(v4);
  if ((_DWORD)v5)
  {
    if (_IDSShouldLogTransport(v5))
    {
      __int16 v18 = @"com.apple.ids";
      _IDSLogTransport(@"BTLinkManager", @"IDS", @"Unregister endpoint identifier: %@");
      if (_IDSShouldLog(0LL, @"BTLinkManager"))
      {
        __int16 v18 = @"com.apple.ids";
        _IDSLogV(0LL, @"IDSFoundation", @"BTLinkManager", @"Unregister endpoint identifier: %@");
      }
    }
  }

  uint64_t v6 = a1 + 32;
  objc_msgSend(*(id *)(*(void *)(a1 + 32) + 24), "unregisterEndpoint:", @"com.apple.ids", v18);
  uint64_t v7 = *(void **)(*(void *)(a1 + 32) + 24LL);
  *(void *)(*(void *)v6 + 24LL) = 0LL;

  uint64_t v8 = *(void **)(*(void *)(a1 + 32) + 32LL);
  *(void *)(*(void *)v6 + 32LL) = 0LL;

  id v9 = *(id **)(a1 + 32);
  if (*((_BYTE *)v9 + 57))
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 nanoRegistryPluginManager]);
    [v10 notifyWatchDidStopAdvertisingWithPeripheralManager:*(void *)(*(void *)(a1 + 32) + 16)];

    id v11 = (id *)(*(void *)(a1 + 32) + 16LL);
    uint64_t v12 = 16LL;
  }

  else
  {
    id v11 = v9 + 1;
    uint64_t v12 = 8LL;
  }

  [*v11 setDelegate:0];
  uint64_t v13 = *(void *)(a1 + 32);
  id v14 = *(void **)(v13 + v12);
  *(void *)(v13 + v12) = 0LL;

  [*(id *)(*(void *)(a1 + 32) + 40) removeAllObjects];
  if (![*(id *)(*(void *)(a1 + 32) + 40) count])
  {
    uint64_t v15 = *(void *)(a1 + 32);
    id v16 = *(void **)(v15 + 40);
    *(void *)(v15 + 40) = 0LL;
  }

  [*(id *)(*(void *)(a1 + 32) + 64) removeAllObjects];
  return [*(id *)(*(void *)(a1 + 32) + 112) removeAllObjects];
}

id sub_1002AA078(uint64_t a1)
{
  return [*(id *)(a1 + 32) _connectNow];
}

id sub_1002AA128(void *a1)
{
  uint64_t v2 = OSLogHandleForTransportCategory("BTLinkManager");
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = a1[4];
    uint64_t v5 = a1[5];
    *(_DWORD *)buf = 138412546;
    uint64_t v9 = v4;
    __int16 v10 = 2112;
    uint64_t v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "removing a link %@ with linkID %@", buf, 0x16u);
  }

  id result = (id)os_log_shim_legacy_logging_enabled(v6);
  if ((_DWORD)result)
  {
    id result = (id)_IDSShouldLogTransport(result);
    if ((_DWORD)result)
    {
      _IDSLogTransport(@"BTLinkManager", @"IDS", @"removing a link %@ with linkID %@");
      id result = (id)_IDSShouldLog(0LL, @"BTLinkManager");
      if ((_DWORD)result) {
        id result = (id)_IDSLogV( 0LL,  @"IDSFoundation",  @"BTLinkManager",  @"removing a link %@ with linkID %@");
      }
    }
  }

  if (a1[5]) {
    return objc_msgSend(*(id *)(a1[6] + 64), "removeObjectForKey:");
  }
  return result;
}

void sub_1002AA2F8(uint64_t a1)
{
  uint64_t v1 = OSLogHandleForTransportCategory("BTLinkManager");
  uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(IDSBTLink **)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    int v72 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "update paired device UUID to %@", buf, 0xCu);
  }

  uint64_t v5 = os_log_shim_legacy_logging_enabled(v4);
  if ((_DWORD)v5)
  {
    if (_IDSShouldLogTransport(v5))
    {
      uint64_t v60 = *(void *)(a1 + 32);
      _IDSLogTransport(@"BTLinkManager", @"IDS", @"update paired device UUID to %@");
      if (_IDSShouldLog(0LL, @"BTLinkManager"))
      {
        uint64_t v60 = *(void *)(a1 + 32);
        _IDSLogV(0LL, @"IDSFoundation", @"BTLinkManager", @"update paired device UUID to %@");
      }
    }
  }

  uint64_t v6 = *(void *)(a1 + 40);
  if (!*(_BYTE *)(v6 + 57))
  {
    if (*(_BYTE *)(v6 + 80))
    {
      [*(id *)(v6 + 8) cancelPeripheralConnection:*(void *)(v6 + 32)];
      *(_BYTE *)(*(void *)(a1 + 40) + 8[(id)qword_1009BEC18 setShouldPostNotifications:0] = 0;
      uint64_t v6 = *(void *)(a1 + 40);
    }

    uint64_t v7 = *(void **)(v6 + 32);
    *(void *)(v6 + 32) = 0LL;

    uint64_t v6 = *(void *)(a1 + 40);
  }

  objc_msgSend(*(id *)(v6 + 64), "removeAllObjects", v60);
  [*(id *)(*(void *)(a1 + 40) + 112) removeAllObjects];
  uint64_t v64 = (IDSBTLink *)[*(id *)(*(void *)(a1 + 40) + 48) copy];
  id v8 = [*(id *)(a1 + 32) copy];
  uint64_t v9 = *(void **)(*(void *)(a1 + 40) + 48LL);
  *(void *)(*(void *)(a1 + 40) + 48LL) = v8;

  IMSetDomainValueForKey(@"com.apple.ids", @"PipePeripheralUUID", *(void *)(a1 + 32));
  __int16 v10 = *(void **)(a1 + 32);
  if (v10 && ([v10 isEqualToString:@"LOCAL-SETUP-STARTED"] & 1) == 0)
  {
    __int128 v69 = 0u;
    __int128 v70 = 0u;
    __int128 v67 = 0u;
    __int128 v68 = 0u;
    id obj = *(id *)(*(void *)(a1 + 40) + 40LL);
    id v11 = [obj countByEnumeratingWithState:&v67 objects:v75 count:16];
    if (v11)
    {
      uint64_t v12 = *(void *)v68;
      while (2)
      {
        for (i = 0LL; i != v11; i = (char *)i + 1)
        {
          if (*(void *)v68 != v12) {
            objc_enumerationMutation(obj);
          }
          id v14 = *(void **)(*((void *)&v67 + 1) + 8LL * (void)i);
          uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "peer", v61));
          id v16 = (void *)objc_claimAutoreleasedReturnValue([v15 identifier]);
          uint64_t v17 = (IDSBTLink *)objc_claimAutoreleasedReturnValue([v16 UUIDString]);

          uint64_t v18 = OSLogHandleForTransportCategory("BTLinkManager");
          uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            int v72 = v17;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "processing pending pipe %@", buf, 0xCu);
          }

          uint64_t v21 = os_log_shim_legacy_logging_enabled(v20);
          if ((_DWORD)v21)
          {
            if (_IDSShouldLogTransport(v21))
            {
              id v62 = v17;
              _IDSLogTransport(@"BTLinkManager", @"IDS", @"processing pending pipe %@");
              if (_IDSShouldLog(0LL, @"BTLinkManager"))
              {
                id v62 = v17;
                _IDSLogV(0LL, @"IDSFoundation", @"BTLinkManager", @"processing pending pipe %@");
              }
            }
          }

          if (objc_msgSend(*(id *)(a1 + 32), "isEqualToString:", v17, v62))
          {
            uint64_t v27 = OSLogHandleForTransportCategory("BTLinkManager");
            uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
            if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              int v72 = v17;
              _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "pending pipe %@ matches to paired device",  buf,  0xCu);
            }

            uint64_t v30 = os_log_shim_legacy_logging_enabled(v29);
            if ((_DWORD)v30)
            {
              if (_IDSShouldLogTransport(v30))
              {
                uint64_t v61 = v17;
                _IDSLogTransport( @"BTLinkManager",  @"IDS",  @"pending pipe %@ matches to paired device");
                if (_IDSShouldLog(0LL, @"BTLinkManager"))
                {
                  uint64_t v61 = v17;
                  _IDSLogV( 0LL,  @"IDSFoundation",  @"BTLinkManager",  @"pending pipe %@ matches to paired device");
                }
              }
            }

            __int128 v31 = -[IDSBTLink initWithPipe:useSkywalkChannel:withDeviceUniqueID:cbuuid:]( objc_alloc(&OBJC_CLASS___IDSBTLink),  "initWithPipe:useSkywalkChannel:withDeviceUniqueID:cbuuid:",  v14,  *(unsigned __int8 *)(*(void *)(a1 + 40) + 58LL),  0LL,  v17);
            uint64_t v32 = OSLogHandleForIDSCategory("BTLinkManager");
            __int128 v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
            if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              int v72 = v31;
              _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "BTLink %@ created", buf, 0xCu);
            }

            if (os_log_shim_legacy_logging_enabled(v34)
              && _IDSShouldLog(0LL, @"BTLinkManager"))
            {
              uint64_t v61 = v31;
              _IDSLogV(0LL, @"IDSFoundation", @"BTLinkManager", @"BTLink %@ created");
            }

            if (v31)
            {
              [*(id *)(*(void *)(a1 + 40) + 64) setObject:v31 forKey:v17];
              uint64_t v35 = OSLogHandleForTransportCategory("BTLinkManager");
              __int128 v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
              if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138412290;
                int v72 = v31;
                _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "linkDidConnect:%@", buf, 0xCu);
              }

              uint64_t v38 = os_log_shim_legacy_logging_enabled(v37);
              if ((_DWORD)v38)
              {
                if (_IDSShouldLogTransport(v38))
                {
                  uint64_t v61 = v31;
                  _IDSLogTransport(@"BTLinkManager", @"IDS", @"linkDidConnect:%@");
                  if (_IDSShouldLog(0LL, @"BTLinkManager"))
                  {
                    uint64_t v61 = v31;
                    _IDSLogV(0LL, @"IDSFoundation", @"BTLinkManager", @"linkDidConnect:%@");
                  }
                }
              }

              id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 96LL));
              [WeakRetained manager:*(void *)(a1 + 40) linkDidConnect:v31];
            }

            else
            {
              uint64_t v40 = OSLogHandleForTransportCategory("BTLinkManager");
              uint64_t v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
              if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138412290;
                int v72 = v17;
                _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEFAULT,  "could not create a BTLink for %@",  buf,  0xCu);
              }

              uint64_t v43 = os_log_shim_legacy_logging_enabled(v42);
              if ((_DWORD)v43)
              {
                if (_IDSShouldLogTransport(v43))
                {
                  uint64_t v61 = v17;
                  _IDSLogTransport(@"BTLinkManager", @"IDS", @"could not create a BTLink for %@");
                  if (_IDSShouldLog(0LL, @"BTLinkManager"))
                  {
                    uint64_t v61 = v17;
                    _IDSLogV( 0LL,  @"IDSFoundation",  @"BTLinkManager",  @"could not create a BTLink for %@");
                  }
                }
              }
            }

            int v26 = 0;
            goto LABEL_60;
          }

          uint64_t v22 = OSLogHandleForTransportCategory("BTLinkManager");
          uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            int v72 = v17;
            _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "pending pipe %@ doesn't match to paired device - releasing it",  buf,  0xCu);
          }

          uint64_t v25 = os_log_shim_legacy_logging_enabled(v24);
          if ((_DWORD)v25)
          {
            if (_IDSShouldLogTransport(v25))
            {
              uint64_t v61 = v17;
              _IDSLogTransport( @"BTLinkManager",  @"IDS",  @"pending pipe %@ doesn't match to paired device - releasing it");
              if (_IDSShouldLog(0LL, @"BTLinkManager"))
              {
                uint64_t v61 = v17;
                _IDSLogV( 0LL,  @"IDSFoundation",  @"BTLinkManager",  @"pending pipe %@ doesn't match to paired device - releasing it");
              }
            }
          }
        }

        id v11 = [obj countByEnumeratingWithState:&v67 objects:v75 count:16];
        if (v11) {
          continue;
        }
        break;
      }
    }

    int v26 = 1;
LABEL_60:

    unsigned int v44 = -[IDSBTLink isEqualToString:](v64, "isEqualToString:", @"LOCAL-SETUP-STARTED");
    [*(id *)(*(void *)(a1 + 40) + 40) removeAllObjects];
    if (![*(id *)(*(void *)(a1 + 40) + 40) count])
    {
      uint64_t v45 = *(void *)(a1 + 40);
      uint64_t v46 = *(void **)(v45 + 40);
      *(void *)(v45 + 40) = 0LL;
    }

    unint64_t v47 = *(_BYTE **)(a1 + 40);
    if ((v26 & (v44 ^ 1)) != 0 && !v47[57])
    {
      uint64_t v48 = OSLogHandleForTransportCategory("BTLinkManager");
      unint64_t v49 = (os_log_s *)objc_claimAutoreleasedReturnValue(v48);
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v50 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 138412546;
        int v72 = v64;
        __int16 v73 = 2112;
        uint64_t v74 = v50;
        _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_DEFAULT,  "Change paired device from %@ to %@.",  buf,  0x16u);
      }

      uint64_t v52 = os_log_shim_legacy_logging_enabled(v51);
      if ((_DWORD)v52)
      {
        if (_IDSShouldLogTransport(v52))
        {
          uint64_t v61 = v64;
          uint64_t v63 = *(void *)(a1 + 32);
          _IDSLogTransport(@"BTLinkManager", @"IDS", @"Change paired device from %@ to %@.");
          if (_IDSShouldLog(0LL, @"BTLinkManager"))
          {
            uint64_t v61 = v64;
            uint64_t v63 = *(void *)(a1 + 32);
            _IDSLogV(0LL, @"IDSFoundation", @"BTLinkManager", @"Change paired device from %@ to %@.");
          }
        }
      }

      *(_BYTE *)(*(void *)(a1 + 40) + 56LL) = 0;
      *(_BYTE *)(*(void *)(a1 + 40) + 8[(id)qword_1009BEC18 setShouldPostNotifications:1] = 0;
      id v53 = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 96LL));
      char v54 = objc_opt_respondsToSelector(v53, "manager:didPairedDeviceChange:");

      if ((v54 & 1) != 0)
      {
        id v55 = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 96LL));
        [v55 manager:*(void *)(a1 + 40) didPairedDeviceChange:1];
      }

      objc_msgSend(*(id *)(a1 + 40), "obliterateConnectionInfo", v61, v63);
      [*(id *)(a1 + 40) stop];
      [*(id *)(a1 + 40) start];
      unint64_t v47 = *(_BYTE **)(a1 + 40);
    }

    if (!v47[57] && !v47[80] && v47[56])
    {
      uint64_t v56 = OSLogHandleForTransportCategory("BTLinkManager");
      __int16 v57 = (os_log_s *)objc_claimAutoreleasedReturnValue(v56);
      if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_DEFAULT,  "Pipe is registered but not connecting, connect now.",  buf,  2u);
      }

      uint64_t v59 = os_log_shim_legacy_logging_enabled(v58);
      if ((_DWORD)v59)
      {
        if (_IDSShouldLogTransport(v59))
        {
          _IDSLogTransport( @"BTLinkManager",  @"IDS",  @"Pipe is registered but not connecting, connect now.");
          if (_IDSShouldLog(0LL, @"BTLinkManager")) {
            _IDSLogV( 0LL,  @"IDSFoundation",  @"BTLinkManager",  @"Pipe is registered but not connecting, connect now.");
          }
        }
      }

      objc_msgSend(*(id *)(a1 + 40), "_connectNow", v61);
    }
  }
}

void sub_1002AAE58(uint64_t a1)
{
  uint64_t v2 = OSLogHandleForTransportCategory("BTLinkManager");
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int16 v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "obliterateConnectionInfo called", v10, 2u);
  }

  uint64_t v5 = os_log_shim_legacy_logging_enabled(v4);
  if ((_DWORD)v5)
  {
    if (_IDSShouldLogTransport(v5))
    {
      _IDSLogTransport(@"BTLinkManager", @"IDS", @"obliterateConnectionInfo called");
    }
  }

  uint64_t v6 = *(void *)(a1 + 32);
  if (!*(_BYTE *)(v6 + 57))
  {
    if (*(_BYTE *)(v6 + 80))
    {
      [*(id *)(v6 + 8) cancelPeripheralConnection:*(void *)(v6 + 32)];
      *(_BYTE *)(*(void *)(a1 + 32) + 8[(id)qword_1009BEC18 setShouldPostNotifications:0] = 0;
      uint64_t v6 = *(void *)(a1 + 32);
    }

    uint64_t v7 = *(void **)(v6 + 32);
    *(void *)(v6 + 32) = 0LL;

    uint64_t v6 = *(void *)(a1 + 32);
  }

  [*(id *)(v6 + 64) removeAllObjects];
  [*(id *)(*(void *)(a1 + 32) + 112) removeAllObjects];
  IMSetDomainValueForKey(@"com.apple.ids", @"PipePeripheralUUID", 0LL);
  [*(id *)(*(void *)(a1 + 32) + 40) removeAllObjects];
  if (![*(id *)(*(void *)(a1 + 32) + 40) count])
  {
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = 0LL;
  }

void sub_1002AB050(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(void *)(v1 + 24))
  {
    uint64_t v3 = *(void **)(v1 + 48);
    if (v3)
    {
      if (([v3 isEqualToString:@"LOCAL-SETUP-STARTED"] & 1) == 0)
      {
        uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[IDSLinkPreferencesManager sharedInstance]( &OBJC_CLASS___IDSLinkPreferencesManager,  "sharedInstance"));
        uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 accumulativePreferencesForAllServices]);

        uint64_t v6 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue([v5 objectForKey:@"PacketsPerSecond"]);
        uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKey:@"InputBytesPerSecond"]);
        uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKey:@"OutputBytesPerSecond"]);
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKey:@"Intent"]);
        if ([v8 isEqualToString:@"forceBTClassic"]
          && [v6 unsignedIntValue] <= 0xC7)
        {

          uint64_t v6 = &off_1009478C0;
        }

        uint64_t v9 = -[NSUUID initWithUUIDString:]( objc_alloc(&OBJC_CLASS___NSUUID),  "initWithUUIDString:",  *(void *)(*(void *)(a1 + 32) + 48LL));
        if (v9)
        {
          uint64_t v10 = OSLogHandleForTransportCategory("BTLinkManager");
          id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v12 = *(void *)(a1 + 40);
            *(_DWORD *)buf = 138544386;
            uint64_t v29 = v12;
            __int16 v30 = 1024;
            unsigned int v31 = [v6 unsignedIntValue];
            __int16 v32 = 1024;
            unsigned int v33 = [v7 unsignedIntValue];
            __int16 v34 = 1024;
            unsigned int v35 = [v27 unsignedIntValue];
            __int16 v36 = 2114;
            uint64_t v37 = v8;
            _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "setLinkRequirementsForPeer: service: %{public}@, pps: %d input bps: %d output bps: %d intent: %{public}@",  buf,  0x28u);
          }

          uint64_t v14 = os_log_shim_legacy_logging_enabled(v13);
          if ((_DWORD)v14)
          {
            if (_IDSShouldLogTransport(v14))
            {
              uint64_t v15 = *(void *)(a1 + 40);
              id v16 = [v6 unsignedIntValue];
              id v17 = [v7 unsignedIntValue];
              id v26 = [v27 unsignedIntValue];
              _IDSLogTransport( @"BTLinkManager",  @"IDS",  @"setLinkRequirementsForPeer: service: %{public}@, pps: %d input bps: %d output bps: %d intent: %{public}@");
              if (_IDSShouldLog(0LL, @"BTLinkManager"))
              {
                objc_msgSend(v6, "unsignedIntValue", v15, v16, v17, v26, v8);
                [v7 unsignedIntValue];
                [v27 unsignedIntValue];
                _IDSLogV( 0LL,  @"IDSFoundation",  @"BTLinkManager",  @"setLinkRequirementsForPeer: service: %{public}@, pps: %d input bps: %d output bps: %d intent: %{public}@");
              }
            }
          }

          uint64_t v18 = &stru_100912B50;
          if (*(void *)(a1 + 40)) {
            uint64_t v18 = *(__CFString **)(a1 + 40);
          }
          uint64_t v19 = *(void **)(*(void *)(a1 + 32) + 24LL);
          uint64_t v20 = v18;
          objc_msgSend( v19,  "setLinkRequirementsForPeer:withClientName:packetsPerSecond:inputBytesPerSecond:outputBytesPerSecond:",  v9,  v20,  objc_msgSend(v6, "unsignedIntValue"),  objc_msgSend(v7, "unsignedIntValue"),  objc_msgSend(v27, "unsignedIntValue"));
        }

        else
        {
          uint64_t v21 = OSLogHandleForTransportCategory("BTLinkManager");
          uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v23 = *(void *)(*(void *)(a1 + 32) + 48LL);
            *(_DWORD *)buf = 138412290;
            uint64_t v29 = v23;
            _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "setLinkRequirementsForPeer failed due to invalid pipe identifier:%@.",  buf,  0xCu);
          }

          uint64_t v25 = os_log_shim_legacy_logging_enabled(v24);
          if ((_DWORD)v25)
          {
            if (_IDSShouldLogTransport(v25))
            {
              _IDSLogTransport( @"BTLinkManager",  @"IDS",  @"setLinkRequirementsForPeer failed due to invalid pipe identifier:%@.");
              if (_IDSShouldLog(0LL, @"BTLinkManager")) {
                _IDSLogV( 0LL,  @"IDSFoundation",  @"BTLinkManager",  @"setLinkRequirementsForPeer failed due to invalid pipe identifier:%@.");
              }
            }
          }
        }
      }
    }
  }

void sub_1002AB508(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue([@"com.apple.ids.datagram" stringByAppendingFormat:@".%@", @"default"]);
  [v1 startDatagramLinkWithEndpointIdentifier:v2];
}

void sub_1002AB5BC(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue([@"com.apple.ids.datagram" stringByAppendingFormat:@".%@", @"default"]);
  [v1 stopDatagramLinkWithEndpointIdentifier:v2];
}

void sub_1002AB694(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue( [@"com.apple.ids.datagram" stringByAppendingFormat:@".%@", *(void *)(a1 + 40)]);
  [v1 startDatagramLinkWithEndpointIdentifier:v2];
}

void sub_1002AB764(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue( [@"com.apple.ids.datagram" stringByAppendingFormat:@".%@", *(void *)(a1 + 40)]);
  [v1 stopDatagramLinkWithEndpointIdentifier:v2];
}

BOOL sub_1002B0090()
{
  dispatch_queue_attr_t v0 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPairingManager sharedInstance](&OBJC_CLASS___IDSPairingManager, "sharedInstance"));
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([v0 pairedDeviceProductVersion]);

  [v1 floatValue];
  BOOL v3 = v2 >= 11.0 && v2 > 0.0;

  return v3;
}

void sub_1002B0CB8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_1002B0CE8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    id v2 = WeakRetained;
    [WeakRetained _annouceAvailabilityForCloudMessaging];
    id WeakRetained = v2;
  }
}

uint64_t sub_1002B1AA4(uint64_t a1)
{
  uint64_t result = 0LL;
  if (a1 <= 500)
  {
    if (a1 <= 200)
    {
      if (a1 > 109)
      {
        switch(a1)
        {
          case 110LL:
            return 3LL;
          case 120LL:
            return 4LL;
          case 200LL:
            return 5LL;
        }
      }

      else
      {
        switch(a1)
        {
          case 0LL:
            return result;
          case 100LL:
            return 1LL;
          case 101LL:
            return 2LL;
        }
      }
    }

    else if (a1 <= 299)
    {
      switch(a1)
      {
        case 201LL:
          return 6LL;
        case 202LL:
          return 14LL;
        case 250LL:
          return 7LL;
      }
    }

    else if (a1 > 399)
    {
      if (a1 == 400) {
        return 10LL;
      }
      if (a1 == 500) {
        return 11LL;
      }
    }

    else
    {
      if (a1 == 300) {
        return 8LL;
      }
      if (a1 == 301) {
        return 9LL;
      }
    }

    goto LABEL_34;
  }

  if (a1 <= 799)
  {
    switch(a1)
    {
      case 501LL:
        return result;
      case 600LL:
        return 12LL;
      case 601LL:
        return 13LL;
    }

uint64_t sub_1002B1D88(void *a1)
{
  id v1 = a1;
  id v2 = v1;
  if (!v1)
  {
LABEL_8:
    uint64_t v6 = 0LL;
    goto LABEL_9;
  }

  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v1 domain]);
  unsigned __int8 v4 = [v3 isEqualToString:IDSEncryptionErrorDomain];

  if ((v4 & 1) == 0)
  {
    int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog encryptionController](&OBJC_CLASS___IDSFoundationLog, "encryptionController"));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT)) {
      sub_1006A6C64((uint64_t)v2, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_8;
  }

  uint64_t v5 = (char *)[v2 code];
  else {
    uint64_t v6 = qword_100717EE8[(void)(v5 - 2)];
  }
LABEL_9:

  return v6;
}

uint64_t sub_1002B1E4C(void *a1)
{
  id v1 = a1;
  id v2 = v1;
  if (!v1)
  {
LABEL_12:
    uint64_t v6 = 0LL;
    goto LABEL_13;
  }

  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v1 domain]);
  unsigned __int8 v4 = [v3 isEqualToString:IDSDecryptionErrorDomain];

  if ((v4 & 1) == 0)
  {
    int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog encryptionController](&OBJC_CLASS___IDSFoundationLog, "encryptionController"));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT)) {
      sub_1006A6C64((uint64_t)v2, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_12;
  }

  uint64_t v5 = (uint64_t)[v2 code];
  uint64_t v6 = 200LL;
  if (v5 <= 14)
  {
    if (v5 != 2)
    {
      if (v5 != 5) {
        goto LABEL_13;
      }
LABEL_16:
      uint64_t v6 = 202LL;
      goto LABEL_13;
    }

    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v2 userInfo]);
    id v16 = (void *)objc_claimAutoreleasedReturnValue([v19 objectForKeyedSubscript:NSUnderlyingErrorKey]);

    if (v16)
    {
      uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v16 domain]);
      if ([v20 isEqualToString:IDSPeerIDManagerErrorDomain])
      {
        if ([v16 code] == (id)3)
        {

LABEL_30:
          uint64_t v6 = 202LL;
          goto LABEL_32;
        }

        id v21 = [v16 code];

        if (v21 == (id)4) {
          goto LABEL_30;
        }
      }

      else
      {
      }
    }

    uint64_t v6 = 601LL;
    goto LABEL_32;
  }

  switch(v5)
  {
    case 15LL:
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v2 userInfo]);
      id v16 = (void *)objc_claimAutoreleasedReturnValue([v15 objectForKeyedSubscript:NSUnderlyingErrorKey]);

      if (v16)
      {
        id v17 = (void *)objc_claimAutoreleasedReturnValue([v16 domain]);
        if ([v17 isEqualToString:@"com.apple.messageprotection"])
        {
          id v18 = [v16 code];

          if (v18 == (id)5) {
            uint64_t v6 = 202LL;
          }
          else {
            uint64_t v6 = 200LL;
          }
          goto LABEL_32;
        }
      }

      uint64_t v6 = 200LL;
LABEL_32:

      break;
    case 17LL:
      goto LABEL_16;
    case 18LL:
      uint64_t v6 = 901LL;
      break;
  }

uint64_t sub_1002B2050(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:IDSNGMDeviceIdentityIdentifier])
  {
    uint64_t v2 = 4LL;
  }

  else if ([v1 isEqualToString:IDSSecondaryIdentityIdentifier])
  {
    uint64_t v2 = 5LL;
  }

  else
  {
    uint64_t v2 = 1LL;
  }

  return v2;
}

void sub_1002B20F4(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___IDSEncryptionController);
  uint64_t v2 = (void *)qword_1009C08C0;
  qword_1009C08C0 = (uint64_t)v1;
}

id sub_1002B2834(unint64_t a1)
{
  if (a1 > 3) {
    return 0LL;
  }
  else {
    return *(id *)*(&off_1008FFA40 + a1);
  }
}

void sub_1002B2998(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v9 = *(void **)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  id v10 = a5;
  id v11 = a4;
  id v12 = a3;
  id v13 = a2;
  id v14 = (id)objc_claimAutoreleasedReturnValue([v9 pushToken]);
  (*(void (**)(uint64_t, id, BOOL, id, id, id, id))(v8 + 16))(v8, v14, v13 != 0LL, v13, v12, v11, v10);
}

uint64_t sub_1002B2BC4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void, BOOL))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  a2 != 0);
}

uint64_t sub_1002B2D74(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void, BOOL))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  a2 != 0);
}

void sub_1002B2F64(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v9 = *(void **)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  id v10 = a5;
  id v11 = a4;
  id v12 = a3;
  id v13 = a2;
  id v15 = (id)objc_claimAutoreleasedReturnValue([v9 sendingPushToken]);
  id v14 = (void *)objc_claimAutoreleasedReturnValue([v15 rawToken]);
  (*(void (**)(uint64_t, void *, BOOL, id, id, id, id))(v8 + 16))(v8, v14, v13 != 0LL, v13, v12, v11, v10);
}

uint64_t sub_1002B3128(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void, void, BOOL, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  0LL,  a2 != 0,  a2,  a3,  a4);
}

uint64_t sub_1002B3324(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void, void, BOOL, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 32)
                                                                                             + 16LL))( *(void *)(a1 + 32),  0LL,  a2 != 0,  a2,  a3,  a4,  a5);
}

void sub_1002B3C40( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void sub_1002B3C58(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) fullDeviceIdentityContainer]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPeerIDManager sharedInstance](&OBJC_CLASS___IDSPeerIDManager, "sharedInstance"));
  unsigned __int8 v4 = (void *)objc_claimAutoreleasedReturnValue( [v3 endpointForPushToken:*(void *)(a1 + 40) URI:*(void *)(a1 + 48) service:*(void *)(a1 + 56) fromURI:*(void *)(a1 + 64)]);

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 publicDeviceIdentityContainer]);
  if (!v4)
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPublicIdentityCache sharedInstance](&OBJC_CLASS___IDSPublicIdentityCache, "sharedInstance"));
    int v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) rawToken]);
    uint64_t v8 = *(void *)(a1 + 48);
    uint64_t v9 = *(void *)(a1 + 56);
    id v22 = 0LL;
    uint64_t v10 = objc_claimAutoreleasedReturnValue([v6 identityForToken:v7 uri:v8 service:v9 error:&v22]);
    id v11 = v22;

    uint64_t v5 = (void *)v10;
  }

  if (v2) {
    BOOL v12 = v5 == 0LL;
  }
  else {
    BOOL v12 = 1;
  }
  if (!v12)
  {
    id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog encryptionController](&OBJC_CLASS___IDSFoundationLog, "encryptionController"));
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = *(void *)(a1 + 64);
      uint64_t v15 = *(void *)(a1 + 72);
      uint64_t v17 = *(void *)(a1 + 40);
      uint64_t v16 = *(void *)(a1 + 48);
      *(_DWORD *)buf = 138413571;
      uint64_t v24 = v14;
      __int16 v25 = 2112;
      uint64_t v26 = v15;
      __int16 v27 = 2113;
      uint64_t v28 = v2;
      __int16 v29 = 2112;
      uint64_t v30 = v16;
      __int16 v31 = 2112;
      uint64_t v32 = v17;
      __int16 v33 = 2113;
      __int16 v34 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Calling into markForStateReset with ourURI: %@, ourPushToken: %@, ourSigningIdentity: %{private}@, theirURI: %@, theirPushToken: %@, theirPublicDeviceIdentity: %{private}@",  buf,  0x3Eu);
    }

    id v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) prefixedURI]);
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 72) rawToken]);
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) prefixedURI]);
    id v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) rawToken]);
    *(_BYTE *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = [v5 markForStateResetWithOurURI:v18 ourPushT oken:v19 ourSigningIdentity:v2 theirURI:v20 theirPushToken:v21];
  }
}

uint64_t sub_1002B3F98(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1002B40DC(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v9 = *(void *)(a1 + 40);
  id v10 = a5;
  id v11 = a4;
  id v12 = a3;
  id v13 = a2;
  uint64_t v14 = objc_alloc(&OBJC_CLASS___IDSDecryptionMetadata);
  unint64_t v15 = *(void *)(a1 + 48);
  if (v15 > 3) {
    uint64_t v16 = 2LL;
  }
  else {
    uint64_t v16 = qword_100717F90[v15];
  }
  id v17 = [v10 usedLastResortCache];
  id v18 = [v10 usedCachedData];

  uint64_t v19 = -[IDSDecryptionMetadata initWithEncryptionType:usedLastResortCache:usedCachedData:]( v14,  "initWithEncryptionType:usedLastResortCache:usedCachedData:",  v16,  v17,  v18);
  (*(void (**)(uint64_t, id, id, id, IDSDecryptionMetadata *))(v9 + 16))(v9, v13, v12, v11, v19);
}

void sub_1002B4328(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v9 = *(void *)(a1 + 40);
  id v10 = a5;
  id v11 = a4;
  id v12 = a3;
  id v13 = a2;
  uint64_t v14 = objc_alloc(&OBJC_CLASS___IDSDecryptionMetadata);
  unint64_t v15 = *(void *)(a1 + 48);
  if (v15 > 3) {
    uint64_t v16 = 2LL;
  }
  else {
    uint64_t v16 = qword_100717F90[v15];
  }
  id v17 = [v10 usedLastResortCache];
  id v18 = [v10 usedCachedData];
  id v20 = (id)objc_claimAutoreleasedReturnValue([v10 additionalDecryptionResult]);

  uint64_t v19 = -[IDSDecryptionMetadata initWithEncryptionType:usedLastResortCache:usedCachedData:additionalDecryptionResult:]( v14,  "initWithEncryptionType:usedLastResortCache:usedCachedData:additionalDecryptionResult:",  v16,  v17,  v18,  v20);
  (*(void (**)(uint64_t, id, id, id, IDSDecryptionMetadata *))(v9 + 16))(v9, v13, v12, v11, v19);
}

id sub_1002B4690(void *a1)
{
  LOWORD(v2) = 1;
  return +[IDSEncryptionHelpers logEncryptionErrorForToken:deviceID:forURI:fromURI:forService:messageData:type:encrypt:remote:priority:]( &OBJC_CLASS___IDSEncryptionHelpers,  "logEncryptionErrorForToken:deviceID:forURI:fromURI:forService:messageData:type:encrypt:remote:priority:",  a1[4],  a1[5],  a1[6],  a1[7],  a1[8],  a1[9],  a1[10],  v2,  200LL);
}

id sub_1002B4820(void *a1)
{
  LOWORD(v2) = 256;
  return +[IDSEncryptionHelpers logEncryptionErrorForToken:deviceID:forURI:fromURI:forService:messageData:type:encrypt:remote:priority:]( &OBJC_CLASS___IDSEncryptionHelpers,  "logEncryptionErrorForToken:deviceID:forURI:fromURI:forService:messageData:type:encrypt:remote:priority:",  a1[4],  a1[5],  a1[6],  a1[7],  a1[8],  a1[9],  a1[10],  v2,  200LL);
}

void sub_1002B4D1C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1002B4D68(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1002B4D78(uint64_t a1)
{
}

void sub_1002B4D80(uint64_t a1)
{
  uint64_t v2 = (id *)(a1 + 32);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) OTRController]);
  unsigned __int8 v4 = (void *)objc_claimAutoreleasedReturnValue([*v2 OTRToken]);
  id v5 = [v3 copySessionObjectForToken:v4];

  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 40);
    id v23 = 0LL;
    uint64_t v7 = objc_claimAutoreleasedReturnValue([v5 signAndProtectMessage:v6 withError:&v23]);
    id v8 = v23;
    uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8LL);
    id v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v7;

    if (v8)
    {
      uint64_t v11 = OSLogHandleForIDSCategory("Encryption");
      id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        id v25 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "   OTR encryption failed with error: %@",  buf,  0xCu);
      }

      if (os_log_shim_legacy_logging_enabled(v13)
        && _IDSShouldLog(0LL, @"Encryption"))
      {
        _IDSLogV(0LL, @"IDSFoundation", @"Encryption", @"   OTR encryption failed with error: %@");
      }

      uint64_t v14 = *(void *)(*(void *)(a1 + 48) + 8LL);
      unint64_t v15 = *(void **)(v14 + 40);
      *(void *)(v14 + 40) = 0LL;

      *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = 0;
    }
  }

  else
  {
    uint64_t v16 = OSLogHandleForIDSCategory("Warning");
    uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) OTRToken]);
      *(_DWORD *)buf = 138412290;
      id v25 = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "Could not find OTR session for token: %@",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v19))
    {
      id v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) OTRToken]);
      _IDSWarnV(@"IDSFoundation", @"Could not find OTR session for token: %@");

      id v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "OTRToken", v20));
      _IDSLogV(0LL, @"IDSFoundation", @"Warning", @"Could not find OTR session for token: %@");

      id v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "OTRToken", v21));
      _IDSLogTransport(@"Warning", @"IDS", @"Could not find OTR session for token: %@");
    }

    *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = 0;
  }
}

void sub_1002B536C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1002B53B8(uint64_t a1)
{
  uint64_t v2 = (id *)(a1 + 32);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) OTRController]);
  unsigned __int8 v4 = (void *)objc_claimAutoreleasedReturnValue([*v2 OTRToken]);
  id v5 = [v3 copySessionObjectForToken:v4];

  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 40);
    id v23 = 0LL;
    uint64_t v7 = objc_claimAutoreleasedReturnValue([v5 verifyAndExposeMessage:v6 withError:&v23]);
    id v8 = v23;
    uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8LL);
    id v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v7;

    if (v8)
    {
      uint64_t v11 = OSLogHandleForIDSCategory("Encryption");
      id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        id v25 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "   OTR decryption failed with error: %@",  buf,  0xCu);
      }

      if (os_log_shim_legacy_logging_enabled(v13)
        && _IDSShouldLog(0LL, @"Encryption"))
      {
        _IDSLogV(0LL, @"IDSFoundation", @"Encryption", @"   OTR decryption failed with error: %@");
      }

      uint64_t v14 = *(void *)(*(void *)(a1 + 48) + 8LL);
      unint64_t v15 = *(void **)(v14 + 40);
      *(void *)(v14 + 40) = 0LL;

      *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = 0;
    }
  }

  else
  {
    uint64_t v16 = OSLogHandleForIDSCategory("Warning");
    uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) OTRToken]);
      *(_DWORD *)buf = 138412290;
      id v25 = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "Could not find OTR session for token: %@",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v19))
    {
      id v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) OTRToken]);
      _IDSWarnV(@"IDSFoundation", @"Could not find OTR session for token: %@");

      id v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "OTRToken", v20));
      _IDSLogV(0LL, @"IDSFoundation", @"Warning", @"Could not find OTR session for token: %@");

      id v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "OTRToken", v21));
      _IDSLogTransport(@"Warning", @"IDS", @"Could not find OTR session for token: %@");
    }

    *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = 0;
  }
}

void sub_1002B5E48(uint64_t a1)
{
  uint64_t v2 = (_IDSSessionConnectionInfo *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) connectionInfoWithState:1]);
  if (!v2)
  {
    uint64_t v2 = (_IDSSessionConnectionInfo *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) connectionInfoWithState:0]);
    if (!v2)
    {
      uint64_t v2 = objc_alloc_init(&OBJC_CLASS____IDSSessionConnectionInfo);
      uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 16LL);
      if (!v3)
      {
        unsigned __int8 v4 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
        uint64_t v5 = *(void *)(a1 + 32);
        uint64_t v6 = *(void **)(v5 + 16);
        *(void *)(v5 + 16) = v4;

        uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 16LL);
      }

      [v3 addObject:v2];
    }
  }

  uint64_t v7 = -[NSKeyedUnarchiver initForReadingFromData:error:]( objc_alloc(&OBJC_CLASS___NSKeyedUnarchiver),  "initForReadingFromData:error:",  *(void *)(a1 + 40),  0LL);
  -[NSKeyedUnarchiver setDecodingFailurePolicy:](v7, "setDecodingFailurePolicy:", 0LL);
  -[NSKeyedUnarchiver _enableStrictSecureDecodingMode](v7, "_enableStrictSecureDecodingMode");
  uint64_t v9 = objc_opt_class(&OBJC_CLASS___NSData, v8);
  uint64_t v11 = +[NSSet setWithObjects:]( &OBJC_CLASS___NSSet,  "setWithObjects:",  v9,  objc_opt_class(&OBJC_CLASS___NSMutableData, v10),  0LL);
  id v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( -[NSKeyedUnarchiver decodeObjectOfClasses:forKey:]( v7,  "decodeObjectOfClasses:forKey:",  v12,  @"connectionData"));
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( -[NSKeyedUnarchiver decodeObjectOfClasses:forKey:]( v7,  "decodeObjectOfClasses:forKey:",  v12,  @"skeData"));
  unint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( -[NSKeyedUnarchiver decodeObjectOfClasses:forKey:]( v7,  "decodeObjectOfClasses:forKey:",  v12,  @"callInfoData"));
  id v17 = -[NSKeyedUnarchiver decodeObjectOfClass:forKey:]( v7,  "decodeObjectOfClass:forKey:",  objc_opt_class(&OBJC_CLASS___NSString, v16),  @"cn");
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
  -[_IDSSessionConnectionInfo setRemoteSKEData:](v2, "setRemoteSKEData:", v14);
  -[_IDSSessionConnectionInfo setRemoteICEData:](v2, "setRemoteICEData:", v13);
  -[_IDSSessionConnectionInfo setRemoteCallInfoData:](v2, "setRemoteCallInfoData:", v15);
  -[_IDSSessionConnectionInfo setPeerCN:](v2, "setPeerCN:", v18);
  -[NSKeyedUnarchiver finishDecoding](v7, "finishDecoding");
}

void sub_1002B6070( _Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 buf)
{
  if (a2 == 1)
  {
    id v12 = objc_begin_catch(a1);
    uint64_t v13 = OSLogHandleForIDSCategory("Warning");
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = *(void *)(v11 + 40);
      LODWORD(buf) = 138412546;
      *(void *)((char *)&buf + 4) = v15;
      WORD6(buf) = 2112;
      *(void *)((char *)&buf + 14) = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "Exception caught unarchiving DDResult data: %@   Exception: %@",  (uint8_t *)&buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v16))
    {
      _IDSWarnV(@"IDSFoundation", @"Exception caught unarchiving DDResult data: %@   Exception: %@");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"Exception caught unarchiving DDResult data: %@   Exception: %@");
      _IDSLogTransport( @"Warning",  @"IDS",  @"Exception caught unarchiving DDResult data: %@   Exception: %@");
    }

    objc_end_catch();
    JUMPOUT(0x1002B6030LL);
  }

  _Unwind_Resume(a1);
}

void sub_1002B63AC(uint64_t a1)
{
  uint64_t v2 = OSLogHandleForIDSCategory("IDSSessionConnection");
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 56);
    id v5 = objc_retainBlock(*(id *)(a1 + 40));
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8LL);
    *(_DWORD *)buf = 67109634;
    unsigned int v37 = v4;
    __int16 v38 = 2048;
    id v39 = v5;
    __int16 v40 = 2112;
    uint64_t v41 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "_connectionQueue: createConnectionData: requiresWifi = %d, dataReadyHandler = %p, _connection = %@",  buf,  0x1Cu);
  }

  if (os_log_shim_legacy_logging_enabled(v7)
    && _IDSShouldLog(0LL, @"IDSSessionConnection"))
  {
    uint64_t v8 = *(unsigned __int8 *)(a1 + 56);
    id v29 = objc_retainBlock(*(id *)(a1 + 40));
    uint64_t v31 = *(void *)(*(void *)(a1 + 32) + 8LL);
    uint64_t v27 = v8;
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSSessionConnection",  @"_connectionQueue: createConnectionData: requiresWifi = %d, dataReadyHandler = %p, _connection = %@");
  }

  uint64_t v9 = (_IDSSessionConnectionInfo *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "connectionInfoWithState:", 0, v27, v29, v31));
  if (!v9) {
    uint64_t v9 = objc_alloc_init(&OBJC_CLASS____IDSSessionConnectionInfo);
  }
  v32[0] = _NSConcreteStackBlock;
  v32[1] = 3221225472LL;
  v32[2] = sub_1002B6794;
  v32[3] = &unk_1008FFA90;
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)(a1 + 32);
  __int16 v33 = v10;
  uint64_t v34 = v11;
  id v35 = *(id *)(a1 + 48);
  id v12 = objc_retainBlock(v32);
  -[_IDSSessionConnectionInfo setCallID:]( v10,  "setCallID:",  [*(id *)(*(void *)(a1 + 32) + 8) initializeNewCall]);
  -[_IDSSessionConnectionInfo setState:](v10, "setState:", 1LL);
  uint64_t v13 = *(void **)(*(void *)(a1 + 32) + 16LL);
  if (!v13)
  {
    uint64_t v14 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    uint64_t v15 = *(void *)(a1 + 32);
    uint64_t v16 = *(void **)(v15 + 16);
    *(void *)(v15 + 16) = v14;

    uint64_t v13 = *(void **)(*(void *)(a1 + 32) + 16LL);
  }

  [v13 addObject:v10];
  CFMutableDictionaryRef v17 = sub_1002B7090(v10);
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
  uint64_t v19 = OSLogHandleForIDSCategory("IDSSessionConnection");
  id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v21 = -[_IDSSessionConnectionInfo callID](v10, "callID");
    id v22 = (void *)objc_claimAutoreleasedReturnValue(-[_IDSSessionConnectionInfo peerCN](v10, "peerCN"));
    *(_DWORD *)buf = 67109378;
    unsigned int v37 = v21;
    __int16 v38 = 2112;
    id v39 = v22;
    _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "_connectionQueue: calling inviteDictionaryForCallID for callID = %d, [connectionInfo peerCN] = %@ ",  buf,  0x12u);
  }

  if (os_log_shim_legacy_logging_enabled(v23)
    && _IDSShouldLog(0LL, @"IDSSessionConnection"))
  {
    id v28 = (id)-[_IDSSessionConnectionInfo callID](v10, "callID");
    uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(-[_IDSSessionConnectionInfo peerCN](v10, "peerCN"));
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSSessionConnection",  @"_connectionQueue: calling inviteDictionaryForCallID for callID = %d, [connectionInfo peerCN] = %@ ");
  }

  uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(-[_IDSSessionConnectionInfo peerCN](v10, "peerCN", v28, v30));

  if (v24)
  {
    id v25 = *(void **)(*(void *)(a1 + 32) + 8LL);
    uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(-[_IDSSessionConnectionInfo peerCN](v10, "peerCN"));
    objc_msgSend(v25, "setPeerCN:callID:", v26, -[_IDSSessionConnectionInfo callID](v10, "callID"));
  }

  objc_msgSend( *(id *)(*(void *)(a1 + 32) + 8),  "inviteDictionaryForCallID:remoteInviteDictionary:nonCellularCandidateTimeout:block:queue:",  -[_IDSSessionConnectionInfo callID](v10, "callID"),  v18,  v12,  *(void *)(*(void *)(a1 + 32) + 24),  0.0);
}

void sub_1002B6794(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = OSLogHandleForIDSCategory("VC");
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    id v56 = v5;
    __int16 v57 = 2112;
    id v58 = v6;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "   AV Response: %@   Error: %@", buf, 0x16u);
  }

  if (os_log_shim_legacy_logging_enabled(v9) && _IDSShouldLog(0LL, @"VC"))
  {
    id v49 = v5;
    id v50 = v6;
    _IDSLogV(0LL, @"IDSFoundation", @"VC", @"   AV Response: %@   Error: %@");
  }

  if (!qword_1009C0A00)
  {
    uint64_t v10 = (void **)IMWeakLinkSymbol("AVConferenceInviteDataConnectionBlob", @"GameKitServices");
    if (v10) {
      uint64_t v11 = *v10;
    }
    else {
      uint64_t v11 = 0LL;
    }
    objc_storeStrong((id *)&qword_1009C0A00, v11);
  }

  if (!qword_1009C0A08)
  {
    id v12 = (void **)IMWeakLinkSymbol("AVConferenceInviteDataSKEBlob", @"GameKitServices");
    if (v12) {
      uint64_t v13 = *v12;
    }
    else {
      uint64_t v13 = 0LL;
    }
    objc_storeStrong((id *)&qword_1009C0A08, v13);
  }

  if (!qword_1009C0A10)
  {
    uint64_t v14 = (void **)IMWeakLinkSymbol("AVConferenceInviteDataCallInfoBlob", @"GameKitServices");
    if (v14) {
      uint64_t v15 = *v14;
    }
    else {
      uint64_t v15 = 0LL;
    }
    objc_storeStrong((id *)&qword_1009C0A10, v15);
  }

  if (qword_1009C0A08) {
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKey:qword_1009C0A00]);
  }
  else {
    uint64_t v16 = 0LL;
  }
  uint64_t v17 = OSLogHandleForIDSCategory("VC");
  uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    id v56 = v16;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Got connection data: %p", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v19) && _IDSShouldLog(0LL, @"VC"))
  {
    id v49 = v16;
    _IDSLogV(0LL, @"IDSFoundation", @"VC", @"Got connection data: %p");
  }

  if (v6)
  {
    uint64_t v21 = OSLogHandleForIDSCategory("Warning");
    id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      id v56 = v6;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "Connection data error: %@", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v23))
    {
      _IDSWarnV(@"IDSFoundation", @"Connection data error: %@");
      _IDSLogV(0LL, @"IDSFoundation", @"Warning", @"Connection data error: %@");
      id v49 = v6;
      *(void *)&double v20 = _IDSLogTransport(@"Warning", @"IDS", @"Connection data error: %@").n128_u64[0];
    }
  }

  if (!qword_1009C0A08
    || (uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKey:v20])) == 0)
  {
    id v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "remoteSKEData", v20, v49, v50));
    if (v25)
    {
    }

    else
    {
      id v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) remoteICEData]);
      BOOL v30 = v29 == 0LL;

      if (!v30)
      {
LABEL_43:
        uint64_t v24 = 0LL;
        goto LABEL_44;
      }
    }

    uint64_t v26 = OSLogHandleForIDSCategory("Warning");
    uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "skeData was nil", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled(v28))
    {
      _IDSWarnV(@"IDSFoundation", @"skeData was nil");
      _IDSLogV(0LL, @"IDSFoundation", @"Warning", @"skeData was nil");
      _IDSLogTransport(@"Warning", @"IDS", @"skeData was nil");
    }

    goto LABEL_43;
  }

uint64_t sub_1002B707C(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16LL))(a1[6], a1[4], a1[5]);
}

CFMutableDictionaryRef sub_1002B7090(void *a1)
{
  id v1 = a1;
  if (!qword_1009C0A00)
  {
    uint64_t v2 = (void **)IMWeakLinkSymbol("AVConferenceInviteDataConnectionBlob", @"GameKitServices");
    if (v2) {
      uint64_t v3 = *v2;
    }
    else {
      uint64_t v3 = 0LL;
    }
    objc_storeStrong((id *)&qword_1009C0A00, v3);
  }

  if (!qword_1009C0A08)
  {
    unsigned int v4 = (void **)IMWeakLinkSymbol("AVConferenceInviteDataSKEBlob", @"GameKitServices");
    if (v4) {
      id v5 = *v4;
    }
    else {
      id v5 = 0LL;
    }
    objc_storeStrong((id *)&qword_1009C0A08, v5);
  }

  if (!qword_1009C0A10)
  {
    id v6 = (void **)IMWeakLinkSymbol("AVConferenceInviteDataCallInfoBlob", @"GameKitServices");
    if (v6) {
      uint64_t v7 = *v6;
    }
    else {
      uint64_t v7 = 0LL;
    }
    objc_storeStrong((id *)&qword_1009C0A10, v7);
  }

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v1 remoteSKEData]);
  if (v8)
  {
  }

  else
  {
    CFMutableDictionaryRef Mutable = (CFMutableDictionaryRef)objc_claimAutoreleasedReturnValue([v1 remoteICEData]);

    if (!Mutable) {
      goto LABEL_26;
    }
  }

  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v1 remoteSKEData]);
  if (v10) {
    CFDictionarySetValue(Mutable, (const void *)qword_1009C0A08, v10);
  }

  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v1 remoteICEData]);
  if (v11) {
    CFDictionarySetValue(Mutable, (const void *)qword_1009C0A00, v11);
  }

  id v12 = (void *)objc_claimAutoreleasedReturnValue([v1 remoteCallInfoData]);
  if (v12) {
    CFDictionarySetValue(Mutable, (const void *)qword_1009C0A10, v12);
  }

LABEL_26:
  return Mutable;
}

void sub_1002B72DC(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) connectionInfoWithState:1]);
  if (!v2) {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) connectionInfoWithState:0]);
  }
  CFMutableDictionaryRef v3 = sub_1002B7090(v2);
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(a1 + 32) + 73LL);
  id v6 = objc_alloc_init((Class)qword_1009C0A28);
  [v6 setIsKeyExchangeEnabled:1];
  [v6 setIsAudioEnabled:v5];
  [v6 setIsVideoEnabled:0];
  [v6 setIsDTLSEnabled:1];
  [v2 setState:2];
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v2 peerCN]);

  if (v8)
  {
    uint64_t v9 = *(void **)(*(void *)(a1 + 32) + 8LL);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v2 peerCN]);
    objc_msgSend(v9, "setPeerCN:callID:", v10, objc_msgSend(v2, "callID"));
  }

  objc_msgSend( *(id *)(*(void *)(a1 + 32) + 8),  "setPeerProtocolVersion:forCallID:",  *(_DWORD *)(a1 + 48) > 1u,  objc_msgSend(v2, "callID"));
  uint64_t v11 = *(void **)(*(void *)(a1 + 32) + 8LL);
  unsigned int v12 = [v2 callID];
  uint64_t v13 = *(unsigned __int8 *)(a1 + 52);
  id v21 = 0LL;
  [v11 startConnectionWithCallID:v12 usingInviteData:v4 isCaller:v13 relayResponseDict:0 didOriginateRelayRequest:0 capabilities:v6 error:&v21];
  id v14 = v21;
  if (v14) {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
  uint64_t v15 = OSLogHandleForIDSCategory("IMAVInterface");
  uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v17 = *(void *)(a1 + 32);
    uint64_t v19 = *(void *)(v17 + 8);
    uint64_t v18 = *(void *)(v17 + 16);
    *(_DWORD *)buf = 138413570;
    uint64_t v23 = v19;
    __int16 v24 = 2112;
    id v25 = v6;
    __int16 v26 = 2112;
    uint64_t v27 = v2;
    __int16 v28 = 2112;
    id v29 = v14;
    __int16 v30 = 2112;
    uint64_t v31 = v18;
    __int16 v32 = 2112;
    uint64_t v33 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Calling startConnectionWithCallID %@, %@, connectionInfo = %@, startError = %@, connectionInfos = %@, [connectionI nfo remoteInviteData] = %@",  buf,  0x3Eu);
  }

  if (os_log_shim_legacy_logging_enabled(v20) && _IDSShouldLog(0LL, @"IMAVInterface")) {
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IMAVInterface",  @"Calling startConnectionWithCallID %@, %@, connectionInfo = %@, startError = %@, connectionInfos = %@, [connectionInfo remoteInviteData] = %@");
  }
}

void sub_1002B764C(uint64_t a1)
{
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 16LL);
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      for (i = 0LL; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v8 + 1) + 8LL * (void)i);
        objc_msgSend(v7, "setState:", 4, (void)v8);
        objc_msgSend(*(id *)(*(void *)(a1 + 32) + 8), "stopCallID:", objc_msgSend(v7, "callID"));
      }

      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }

    while (v4);
  }
}

id sub_1002B77E4(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 8LL);
  if (v2)
  {
    if (*(void *)(a1 + 40)) {
      return _objc_msgSend(v2, "sendData:forCallID:encrypted:");
    }
    uint64_t v7 = OSLogHandleForIDSCategory("IDSSessionConnection");
    __int128 v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "No data to send, bailing...", v11, 2u);
    }

    id result = (id)os_log_shim_legacy_logging_enabled(v9);
    if ((_DWORD)result)
    {
      id result = (id)_IDSShouldLog(0LL, @"IDSSessionConnection");
      if ((_DWORD)result)
      {
        id v6 = @"No data to send, bailing...";
        return (id)_IDSLogV(0LL, @"IDSFoundation", @"IDSSessionConnection", v6);
      }
    }
  }

  else
  {
    uint64_t v3 = OSLogHandleForIDSCategory("IDSSessionConnection");
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "No connection, bailing...", buf, 2u);
    }

    id result = (id)os_log_shim_legacy_logging_enabled(v5);
    if ((_DWORD)result)
    {
      id result = (id)_IDSShouldLog(0LL, @"IDSSessionConnection");
      if ((_DWORD)result)
      {
        id v6 = @"No connection, bailing...";
        return (id)_IDSLogV(0LL, @"IDSFoundation", @"IDSSessionConnection", v6);
      }
    }
  }

  return result;
}

void sub_1002B7A9C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 32LL));
  char v3 = objc_opt_respondsToSelector(WeakRetained, "connection:receivedData:");

  if ((v3 & 1) != 0)
  {
    uint64_t v6 = im_primary_queue(v4, v5);
    uint64_t v7 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v6);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_1002B7B50;
    v9[3] = &unk_1008F5F80;
    __int128 v8 = *(void **)(a1 + 40);
    void v9[4] = *(void *)(a1 + 32);
    id v10 = v8;
    dispatch_async(v7, v9);
  }

void sub_1002B7B50(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 32LL));
  [WeakRetained connection:*(void *)(a1 + 32) receivedData:*(void *)(a1 + 40)];
}

void sub_1002B7C20(uint64_t a1)
{
  if (qword_1009C08D8) {
    id v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKey:"));
  }
  else {
    id v2 = 0LL;
  }
  if (qword_1009C08C8)
  {
    char v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKey:"));
    uint64_t v4 = (id *)(a1 + 40);
    *(void *)(*(void *)(a1 + 40) + 4[(id)qword_1009BEC18 setShouldPostNotifications:0] = objc_msgSend(v3, "integerValue");
  }

  else
  {
    uint64_t v4 = (id *)(a1 + 40);
    *(void *)(*(void *)(a1 + 40) + 4[(id)qword_1009BEC18 setShouldPostNotifications:0] = 0;
  }

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*v4 connectionInfoForCallID:*((void *)*v4 + 5)]);
  if (qword_1009C08D0)
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKey:"));
    *(void *)(*(void *)(a1 + 40) + 48) = [v6 integerValue];
  }

  else
  {
    *((void *)*v4 + 6) = 0LL;
  }

  if (qword_1009C08E0)
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKey:"));
    *(void *)(*(void *)(a1 + 40) + 56) = [v7 integerValue];
  }

  else
  {
    *((void *)*v4 + 7) = 0LL;
  }

  if (qword_1009C08E8)
  {
    __int128 v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKey:"));
    *(void *)(*(void *)(a1 + 40) + 64) = [v8 integerValue];
  }

  else
  {
    *((void *)*v4 + _Block_object_dispose(va, 8) = 0LL;
  }

  uint64_t v9 = OSLogHandleForIDSCategory("IDSSessionConnection");
  id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = *(unsigned __int8 *)(a1 + 48);
    uint64_t v12 = *(void *)(*(void *)(a1 + 40) + 40LL);
    *(_DWORD *)buf = 67109634;
    int v32 = v11;
    __int16 v33 = 1024;
    *(_DWORD *)uint64_t v34 = v12;
    *(_WORD *)&v34[4] = 2112;
    *(void *)&v34[6] = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "didStartSession %d for callID %d, error = %@",  buf,  0x18u);
  }

  if (os_log_shim_legacy_logging_enabled(v13)
    && _IDSShouldLog(0LL, @"IDSSessionConnection"))
  {
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSSessionConnection",  @"didStartSession %d for callID %d, error = %@");
  }

  if (v5)
  {
    uint64_t v14 = *(void *)(a1 + 40);
    if (*(_BYTE *)(a1 + 48))
    {
      *(_BYTE *)(v14 + 72) = 1;
      id v15 = [v5 setState:3];
      uint64_t v17 = im_primary_queue(v15, v16);
      uint64_t v18 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v17);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_1002B8090;
      block[3] = &unk_1008F6010;
      void block[4] = *v4;
      dispatch_async(v18, block);
    }

    else
    {
      *(_BYTE *)(v14 + 72) = 0;
      id v24 = [v5 setState:4];
      uint64_t v26 = im_primary_queue(v24, v25);
      uint64_t v27 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v26);
      v29[0] = _NSConcreteStackBlock;
      v29[1] = 3221225472LL;
      v29[2] = sub_1002B804C;
      v29[3] = &unk_1008F5F80;
      void v29[4] = *v4;
      id v30 = v2;
      dispatch_async(v27, v29);
    }
  }

  else
  {
    uint64_t v19 = OSLogHandleForIDSCategory("IDSSessionConnection");
    uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v21 = *((void *)*v4 + 5);
      uint64_t v22 = *((void *)*v4 + 2);
      *(_DWORD *)buf = 67109378;
      int v32 = v21;
      __int16 v33 = 2112;
      *(void *)uint64_t v34 = v22;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "didStartSession returned a callID we do not recognize %d, what we have %@",  buf,  0x12u);
    }

    if (os_log_shim_legacy_logging_enabled(v23)
      && _IDSShouldLog(0LL, @"IDSSessionConnection"))
    {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSSessionConnection",  @"didStartSession returned a callID we do not recognize %d, what we have %@");
    }
  }
}

void sub_1002B804C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 32LL));
  [WeakRetained connection:*(void *)(a1 + 32) didStart:0 error:*(void *)(a1 + 40)];
}

void sub_1002B8090(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 32LL));
  [WeakRetained connection:*(void *)(a1 + 32) didStart:1 error:0];
}

void sub_1002B8164(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) connectionInfoForCallID:*(void *)(a1 + 48)]);
  uint64_t v4 = (void *)v2;
  if (v2)
  {
    *(_BYTE *)(*(void *)(a1 + 32) + 72LL) = 0;
    uint64_t v5 = im_primary_queue(v2, v3);
    uint64_t v6 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v5);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1002B8330;
    block[3] = &unk_1008F5F80;
    void block[4] = *(void *)(a1 + 32);
    id v13 = *(id *)(a1 + 40);
    dispatch_async(v6, block);
  }

  else
  {
    uint64_t v7 = OSLogHandleForIDSCategory("IDSSessionConnection");
    __int128 v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 48);
      uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 16LL);
      *(_DWORD *)buf = 67109378;
      int v15 = v9;
      __int16 v16 = 2112;
      uint64_t v17 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "didStopWithCallID returned a callID we do not recognize %d, what we have %@",  buf,  0x12u);
    }

    if (os_log_shim_legacy_logging_enabled(v11)
      && _IDSShouldLog(0LL, @"IDSSessionConnection"))
    {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSSessionConnection",  @"didStopWithCallID returned a callID we do not recognize %d, what we have %@");
    }
  }
}

void sub_1002B8330(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 32LL));
  [WeakRetained connectionDidStop:*(void *)(a1 + 32) error:*(void *)(a1 + 40)];
}

void sub_1002B83A4(id a1)
{
  qword_1009C0A18 = IMWeakLinkClass(@"AVConference", @"GameKitServices");
  qword_1009C0A28 = IMWeakLinkClass(@"VCCapabilities", @"GameKitServices");
  if (!qword_1009C08F0)
  {
    id v1 = (void **)IMWeakLinkSymbol("GKSRelayParameter_ClientData", @"GameKitServices");
    if (v1) {
      uint64_t v2 = *v1;
    }
    else {
      uint64_t v2 = 0LL;
    }
    objc_storeStrong((id *)&qword_1009C08F0, v2);
  }

  if (!qword_1009C08F8)
  {
    uint64_t v3 = (void **)IMWeakLinkSymbol("GKSRelayParameter_SelfNatType", @"GameKitServices");
    if (v3) {
      uint64_t v4 = *v3;
    }
    else {
      uint64_t v4 = 0LL;
    }
    objc_storeStrong((id *)&qword_1009C08F8, v4);
  }

  if (!qword_1009C0900)
  {
    uint64_t v5 = (void **)IMWeakLinkSymbol("GKSRelayParameter_SelfBlob", @"GameKitServices");
    if (v5) {
      uint64_t v6 = *v5;
    }
    else {
      uint64_t v6 = 0LL;
    }
    objc_storeStrong((id *)&qword_1009C0900, v6);
  }

  if (!qword_1009C0908)
  {
    uint64_t v7 = (void **)IMWeakLinkSymbol("GKSRelayParameter_PeerID", @"GameKitServices");
    if (v7) {
      __int128 v8 = *v7;
    }
    else {
      __int128 v8 = 0LL;
    }
    objc_storeStrong((id *)&qword_1009C0908, v8);
  }

  if (!qword_1009C0910)
  {
    uint64_t v9 = (void **)IMWeakLinkSymbol("GKSRelayParameter_PeerNatType", @"GameKitServices");
    if (v9) {
      uint64_t v10 = *v9;
    }
    else {
      uint64_t v10 = 0LL;
    }
    objc_storeStrong((id *)&qword_1009C0910, v10);
  }

  if (!qword_1009C0918)
  {
    uint64_t v11 = (void **)IMWeakLinkSymbol("GKSRelayParameter_PeerBlob", @"GameKitServices");
    if (v11) {
      uint64_t v12 = *v11;
    }
    else {
      uint64_t v12 = 0LL;
    }
    objc_storeStrong((id *)&qword_1009C0918, v12);
  }

  if (!qword_1009C0920)
  {
    id v13 = (void **)IMWeakLinkSymbol("GKSRelayType", @"GameKitServices");
    if (v13) {
      uint64_t v14 = *v13;
    }
    else {
      uint64_t v14 = 0LL;
    }
    objc_storeStrong((id *)&qword_1009C0920, v14);
  }

  if (!qword_1009C0928)
  {
    int v15 = (void **)IMWeakLinkSymbol("GKSRelayParameter_ConnectionID", @"GameKitServices");
    if (v15) {
      __int16 v16 = *v15;
    }
    else {
      __int16 v16 = 0LL;
    }
    objc_storeStrong((id *)&qword_1009C0928, v16);
  }

  if (!qword_1009C0930)
  {
    uint64_t v17 = (void **)IMWeakLinkSymbol("GKSRelayParameter_TransactionID", @"GameKitServices");
    if (v17) {
      uint64_t v18 = *v17;
    }
    else {
      uint64_t v18 = 0LL;
    }
    objc_storeStrong((id *)&qword_1009C0930, v18);
  }

  if (!qword_1009C0938)
  {
    uint64_t v19 = (void **)IMWeakLinkSymbol("GKSRelayParameter_Token", @"GameKitServices");
    if (v19) {
      uint64_t v20 = *v19;
    }
    else {
      uint64_t v20 = 0LL;
    }
    objc_storeStrong((id *)&qword_1009C0938, v20);
  }

  if (!qword_1009C0940)
  {
    uint64_t v21 = (void **)IMWeakLinkSymbol("GKSRelayParameter_PeerRelayIP", @"GameKitServices");
    if (v21) {
      uint64_t v22 = *v21;
    }
    else {
      uint64_t v22 = 0LL;
    }
    objc_storeStrong((id *)&qword_1009C0940, v22);
  }

  if (!qword_1009C0948)
  {
    uint64_t v23 = (void **)IMWeakLinkSymbol("GKSRelayParameter_PeerRelayPort", @"GameKitServices");
    if (v23) {
      id v24 = *v23;
    }
    else {
      id v24 = 0LL;
    }
    objc_storeStrong((id *)&qword_1009C0948, v24);
  }

  if (!qword_1009C0950)
  {
    uint64_t v25 = (void **)IMWeakLinkSymbol("GKSRelayParameter_SelfRelayIP", @"GameKitServices");
    if (v25) {
      uint64_t v26 = *v25;
    }
    else {
      uint64_t v26 = 0LL;
    }
    objc_storeStrong((id *)&qword_1009C0950, v26);
  }

  if (!qword_1009C0958)
  {
    uint64_t v27 = (void **)IMWeakLinkSymbol("GKSRelayParameter_SelfRelayPort", @"GameKitServices");
    if (v27) {
      __int16 v28 = *v27;
    }
    else {
      __int16 v28 = 0LL;
    }
    objc_storeStrong((id *)&qword_1009C0958, v28);
  }

  if (!qword_1009C0960)
  {
    id v29 = (void **)IMWeakLinkSymbol("GKSRelayParameter_SelfRelayNatIP", @"GameKitServices");
    if (v29) {
      id v30 = *v29;
    }
    else {
      id v30 = 0LL;
    }
    objc_storeStrong((id *)&qword_1009C0960, v30);
  }

  if (!qword_1009C0968)
  {
    uint64_t v31 = (void **)IMWeakLinkSymbol("GKSRelayParameter_SelfRelayNatPort", @"GameKitServices");
    if (v31) {
      int v32 = *v31;
    }
    else {
      int v32 = 0LL;
    }
    objc_storeStrong((id *)&qword_1009C0968, v32);
  }

  if (!qword_1009C0970)
  {
    __int16 v33 = (void **)IMWeakLinkSymbol("GKSRelayParameter_PeerRelayNatIP", @"GameKitServices");
    if (v33) {
      uint64_t v34 = *v33;
    }
    else {
      uint64_t v34 = 0LL;
    }
    objc_storeStrong((id *)&qword_1009C0970, v34);
  }

  if (!qword_1009C0978)
  {
    uint64_t v35 = (void **)IMWeakLinkSymbol("GKSRelayParameter_PeerRelayNatPort", @"GameKitServices");
    if (v35) {
      __int16 v36 = *v35;
    }
    else {
      __int16 v36 = 0LL;
    }
    objc_storeStrong((id *)&qword_1009C0978, v36);
  }

  if (!qword_1009C0980)
  {
    BOOL v37 = (void **)IMWeakLinkSymbol("GKSRelayParameter_SelfExternalAddr", @"GameKitServices");
    if (v37) {
      __int16 v38 = *v37;
    }
    else {
      __int16 v38 = 0LL;
    }
    objc_storeStrong((id *)&qword_1009C0980, v38);
  }

  if (!qword_1009C0988)
  {
    unint64_t v39 = (void **)IMWeakLinkSymbol("GKSRelayParameter_PeerExternalAddr", @"GameKitServices");
    if (v39) {
      unint64_t v40 = *v39;
    }
    else {
      unint64_t v40 = 0LL;
    }
    objc_storeStrong((id *)&qword_1009C0988, v40);
  }

  if (!qword_1009C08D0)
  {
    id v41 = (void **)IMWeakLinkSymbol("GKSDidStartParameter_ConnType", @"GameKitServices");
    if (v41) {
      id v42 = *v41;
    }
    else {
      id v42 = 0LL;
    }
    objc_storeStrong((id *)&qword_1009C08D0, v42);
  }

  if (!qword_1009C08D8)
  {
    uint64_t v43 = (void **)IMWeakLinkSymbol("GKSDidStartParameter_Error", @"GameKitServices");
    if (v43) {
      unsigned int v44 = *v43;
    }
    else {
      unsigned int v44 = 0LL;
    }
    objc_storeStrong((id *)&qword_1009C08D8, v44);
  }

  if (!qword_1009C08C8)
  {
    uint64_t v45 = (void **)IMWeakLinkSymbol("GKSDidStartParameter_CallID", @"GameKitServices");
    if (v45) {
      uint64_t v46 = *v45;
    }
    else {
      uint64_t v46 = 0LL;
    }
    objc_storeStrong((id *)&qword_1009C08C8, v46);
  }

  if (!qword_1009C08E0)
  {
    uint64_t v47 = (void **)IMWeakLinkSymbol("GKSDidStartParameter_localUseCell", @"GameKitServices");
    if (v47) {
      uint64_t v48 = *v47;
    }
    else {
      uint64_t v48 = 0LL;
    }
    objc_storeStrong((id *)&qword_1009C08E0, v48);
  }

  if (!qword_1009C08E8)
  {
    id v49 = (void **)IMWeakLinkSymbol("GKSDidStartParameter_remoteUseCell", @"GameKitServices");
    if (v49) {
      id v50 = *v49;
    }
    else {
      id v50 = 0LL;
    }
    objc_storeStrong((id *)&qword_1009C08E8, v50);
  }

  if (!qword_1009C0990)
  {
    uint64_t v51 = (void **)IMWeakLinkSymbol("GKSCDXServerAddress", @"GameKitServices");
    if (v51) {
      id v52 = *v51;
    }
    else {
      id v52 = 0LL;
    }
    objc_storeStrong((id *)&qword_1009C0990, v52);
  }

  if (!qword_1009C09A8)
  {
    id v53 = (void **)IMWeakLinkSymbol("GKSCommNATServerCohortAddress", @"GameKitServices");
    if (v53) {
      id v54 = *v53;
    }
    else {
      id v54 = 0LL;
    }
    objc_storeStrong((id *)&qword_1009C09A8, v54);
  }

  if (!qword_1009C0998)
  {
    id v55 = (void **)IMWeakLinkSymbol("GKSCommNATServerMain0Address", @"GameKitServices");
    if (v55) {
      id v56 = *v55;
    }
    else {
      id v56 = 0LL;
    }
    objc_storeStrong((id *)&qword_1009C0998, v56);
  }

  if (!qword_1009C09A0)
  {
    __int16 v57 = (void **)IMWeakLinkSymbol("GKSCommNATServerMain1Address", @"GameKitServices");
    if (v57) {
      id v58 = *v57;
    }
    else {
      id v58 = 0LL;
    }
    objc_storeStrong((id *)&qword_1009C09A0, v58);
  }

  if (!qword_1009C09C0)
  {
    uint64_t v59 = (void **)IMWeakLinkSymbol("GKSCommNATServerCohortName", @"GameKitServices");
    if (v59) {
      uint64_t v60 = *v59;
    }
    else {
      uint64_t v60 = 0LL;
    }
    objc_storeStrong((id *)&qword_1009C09C0, v60);
  }

  if (!qword_1009C09B0)
  {
    uint64_t v61 = (void **)IMWeakLinkSymbol("GKSCommNATServerMain0Name", @"GameKitServices");
    if (v61) {
      id v62 = *v61;
    }
    else {
      id v62 = 0LL;
    }
    objc_storeStrong((id *)&qword_1009C09B0, v62);
  }

  if (!qword_1009C09B8)
  {
    uint64_t v63 = (void **)IMWeakLinkSymbol("GKSCommNATServerMain1Name", @"GameKitServices");
    if (v63) {
      uint64_t v64 = *v63;
    }
    else {
      uint64_t v64 = 0LL;
    }
    objc_storeStrong((id *)&qword_1009C09B8, v64);
  }

  if (!qword_1009C09C8)
  {
    id v65 = (void **)IMWeakLinkSymbol("GKSPreEmptiveRelayTimeout", @"GameKitServices");
    if (v65) {
      id v66 = *v65;
    }
    else {
      id v66 = 0LL;
    }
    objc_storeStrong((id *)&qword_1009C09C8, v66);
  }

  if (!qword_1009C09D0)
  {
    __int128 v67 = (void **)IMWeakLinkSymbol("GKSMaxRelayBitrate", @"GameKitServices");
    if (v67) {
      __int128 v68 = *v67;
    }
    else {
      __int128 v68 = 0LL;
    }
    objc_storeStrong((id *)&qword_1009C09D0, v68);
  }

  if (!qword_1009C09D8)
  {
    __int128 v69 = (void **)IMWeakLinkSymbol("GKSICETimeout", @"GameKitServices");
    if (v69) {
      __int128 v70 = *v69;
    }
    else {
      __int128 v70 = 0LL;
    }
    objc_storeStrong((id *)&qword_1009C09D8, v70);
  }

  if (!qword_1009C09E0)
  {
    uint64_t v71 = (void **)IMWeakLinkSymbol("GKSNATCheckTimeout", @"GameKitServices");
    if (v71) {
      int v72 = *v71;
    }
    else {
      int v72 = 0LL;
    }
    objc_storeStrong((id *)&qword_1009C09E0, v72);
  }

  if (!qword_1009C09E8)
  {
    __int16 v73 = (void **)IMWeakLinkSymbol("GKSConnectionBlobMaxBytes", @"GameKitServices");
    if (v73) {
      uint64_t v74 = *v73;
    }
    else {
      uint64_t v74 = 0LL;
    }
    objc_storeStrong((id *)&qword_1009C09E8, v74);
  }

  if (!qword_1009C09F0)
  {
    uint64_t v75 = (void **)IMWeakLinkSymbol("GKSNoRemotePacketsTimeout", @"GameKitServices");
    if (v75) {
      uint64_t v76 = *v75;
    }
    else {
      uint64_t v76 = 0LL;
    }
    objc_storeStrong((id *)&qword_1009C09F0, v76);
  }

  if (!qword_1009C09F8)
  {
    uint64_t v77 = (void **)IMWeakLinkSymbol("GKSNetworkConditionsTimeout", @"GameKitServices");
    if (v77) {
      uint64_t v78 = *v77;
    }
    else {
      uint64_t v78 = 0LL;
    }
    objc_storeStrong((id *)&qword_1009C09F8, v78);
  }

void sub_1002B9254(_Unwind_Exception *a1)
{
}

void sub_1002B93F4(_Unwind_Exception *a1)
{
}

void sub_1002B9468(_Unwind_Exception *a1)
{
}

void sub_1002B9C98( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, os_unfair_lock_t lock)
{
}

void sub_1002BA9BC(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _metricContainerForMetricType:2588692]);
  if (v3)
  {
    id v2 = objc_alloc_init((Class)IMWeakLinkClass( @"AWDIDSRealTimeEncryptionMissingPrekeys",  @"WirelessDiagnostics"));
    [v2 setServiceName:*(void *)(a1 + 40)];
    [v2 setActiveParticipants:*(void *)(a1 + 48)];
    [v2 setMissingPrekeys:*(void *)(a1 + 56)];
    [*(id *)(a1 + 32) _submitAWDMetric:v2 withContainer:v3];
  }
}

void sub_1002BAAEC(uint64_t a1)
{
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _metricContainerForMetricType:2588693]);
  if (v5)
  {
    id v2 = objc_alloc_init((Class)IMWeakLinkClass( @"AWDIDSRealTimeEncryptionFirstReceivedPacketMKMTimeDelta",  @"WirelessDiagnostics"));
    [v2 setServiceName:*(void *)(a1 + 40)];
    [v2 setTimeDelta:*(void *)(a1 + 48)];
    uint64_t v3 = *(void *)(a1 + 56);
    if (v3 >= 1) {
      uint64_t v4 = ((int)v3 - 1) / 3u;
    }
    else {
      uint64_t v4 = 0LL;
    }
    [v2 setActiveParticipantBucket:v4];
    [*(id *)(a1 + 32) _submitAWDMetric:v2 withContainer:v5];
  }
}

void sub_1002BAC38(uint64_t a1)
{
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _metricContainerForMetricType:2588695]);
  if (v5)
  {
    id v2 = objc_alloc_init((Class)IMWeakLinkClass( @"AWDIDSRealTimeEncryptionMembershipChangeEventFirstMKMTimeDelta",  @"WirelessDiagnostics"));
    [v2 setServiceName:*(void *)(a1 + 40)];
    [v2 setTimeDelta:*(void *)(a1 + 48)];
    uint64_t v3 = *(void *)(a1 + 56);
    if (v3 >= 1) {
      uint64_t v4 = ((int)v3 - 1) / 3u;
    }
    else {
      uint64_t v4 = 0LL;
    }
    [v2 setActiveParticipantBucket:v4];
    [*(id *)(a1 + 32) _submitAWDMetric:v2 withContainer:v5];
  }
}

void sub_1002BBB24(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___IDSTransportLevelAgent);
  id v2 = (void *)qword_1009C0A38;
  qword_1009C0A38 = (uint64_t)v1;

  dispatch_queue_global_t global_queue = dispatch_get_global_queue(-32768LL, 0LL);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(global_queue);
  objc_msgSend((id)qword_1009C0A38, "setInterface:", NEVirtualInterfaceCreate(kCFAllocatorDefault, 1, v4, 0));

  if ([(id)qword_1009C0A38 interface])
  {
    id v5 = (const void *)NEVirtualInterfaceCopyName([(id)qword_1009C0A38 interface]);
    CFTypeRef v6 = CFAutorelease(v5);
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    NEVirtualInterfaceSetReadAutomatically([(id)qword_1009C0A38 interface], 1);
    int IPPayloadHandler = NEVirtualInterfaceSetReadIPPayloadHandler( [(id)qword_1009C0A38 interface],  &stru_1008FFB40);
    int v9 = NEVirtualInterfaceSetMTU([(id)qword_1009C0A38 interface], 1000);
    int v10 = NEVirtualInterfaceAddAddress( [(id)qword_1009C0A38 interface],  objc_msgSend(@"fe80::ce81:b1c:bd2c:69e%", "stringByAppendingString:", v7),  0);
    int v11 = NEVirtualInterfaceSetRankNever([(id)qword_1009C0A38 interface], 1);
    int updated = NEVirtualInterfaceUpdateAdHocService([(id)qword_1009C0A38 interface]);
    id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog Multiplexer](&OBJC_CLASS___IDSFoundationLog, "Multiplexer"));
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = @"YES";
      if (IPPayloadHandler) {
        int v15 = @"YES";
      }
      else {
        int v15 = @"NO";
      }
      *(_DWORD *)uint64_t v47 = 138413570;
      *(void *)&v47[4] = v7;
      if (v9) {
        __int16 v16 = @"YES";
      }
      else {
        __int16 v16 = @"NO";
      }
      *(void *)&v47[14] = v15;
      *(_WORD *)&v47[12] = 2112;
      if (v10) {
        uint64_t v17 = @"YES";
      }
      else {
        uint64_t v17 = @"NO";
      }
      *(_WORD *)&v47[22] = 2112;
      uint64_t v48 = v16;
      if (v11) {
        uint64_t v18 = @"YES";
      }
      else {
        uint64_t v18 = @"NO";
      }
      *(_WORD *)id v49 = 2112;
      if (!updated) {
        uint64_t v14 = @"NO";
      }
      *(void *)&v49[2] = v17;
      __int16 v50 = 2112;
      uint64_t v51 = v18;
      __int16 v52 = 2112;
      id v53 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Created interface %@ for IDS Nexus %@ %@ %@ %@ %@",  v47,  0x3Eu);
    }

    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
    [(id)qword_1009C0A38 setAgentUUID:v19];

    [(id)qword_1009C0A38 setActive:1];
    dispatch_queue_attr_t v20 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    uint64_t v21 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v20);
    dispatch_queue_attr_t initially_inactive = dispatch_queue_attr_make_initially_inactive(v21);
    uint64_t v23 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(initially_inactive);
    dispatch_queue_t v24 = dispatch_queue_create("IDSTransportLevelAgentQueue", v23);

    uint64_t v30 = IDSRealTimeContext(v25, v26, v27, v28, v29);
    uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
    nw_queue_context_target_dispatch_queue(v31, v24);

    dispatch_activate(v24);
    int v32 = objc_alloc(&OBJC_CLASS___NWNetworkAgentRegistration);
    uint64_t v34 = -[NWNetworkAgentRegistration initWithNetworkAgentClass:queue:]( v32,  "initWithNetworkAgentClass:queue:",  objc_opt_class(&OBJC_CLASS___IDSTransportLevelAgent, v33),  v24);
    [(id)qword_1009C0A38 setRegistration:v34];

    uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([(id)qword_1009C0A38 registration]);
    LOBYTE(v23) = [v35 registerNetworkAgent:qword_1009C0A38];

    __int16 v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog Multiplexer](&OBJC_CLASS___IDSFoundationLog, "Multiplexer"));
    BOOL v37 = os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT);
    if ((v23 & 1) != 0)
    {
      if (v37)
      {
        uint64_t v38 = qword_1009C0A38;
        unint64_t v39 = (void *)objc_claimAutoreleasedReturnValue([(id)qword_1009C0A38 agentUUID]);
        unint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([(id)qword_1009C0A38 registration]);
        else {
          id v41 = @"NO";
        }
        id v42 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( (id)qword_1009C0A38,  "registration",  *(_OWORD *)v47,  *(void *)&v47[16],  v48,  *(void *)v49));
        uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue([v42 registeredUUID]);
        *(_DWORD *)uint64_t v47 = 134218754;
        *(void *)&v47[4] = v38;
        *(_WORD *)&v47[12] = 2112;
        *(void *)&v47[14] = v39;
        *(_WORD *)&v47[22] = 2112;
        uint64_t v48 = v41;
        *(_WORD *)id v49 = 2112;
        *(void *)&v49[2] = v43;
        _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "Registered IDS Nexus Agent (%p) %@ (isRegistered %@ registrationUUID %@)",  v47,  0x2Au);
      }

      unsigned int v44 = (void *)objc_claimAutoreleasedReturnValue([(id)qword_1009C0A38 registration]);
      unsigned __int8 v45 = [v44 addNetworkAgentToInterfaceNamed:v7];

      if ((v45 & 1) == 0)
      {
        uint64_t v46 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog Multiplexer](&OBJC_CLASS___IDSFoundationLog, "Multiplexer"));
        if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t v47 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEFAULT,  "addNetworkAgentToInterfaceNamed failed",  v47,  2u);
        }
      }
    }

    else
    {
      if (v37)
      {
        *(_WORD *)uint64_t v47 = 0;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "registerNetworkAgent failed", v47, 2u);
      }

      IDSNetworkingLogDump("IDSMultiplexer agent registration", 16LL);
    }
  }

  else
  {
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog Multiplexer](&OBJC_CLASS___IDSFoundationLog, "Multiplexer"));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v47 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "NEVirtualInterfaceCreate failed", v47, 2u);
    }
  }
}

void sub_1002BD0FC(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _metricContainerForMetricType:2555935]);
  if (v3)
  {
    id v2 = objc_alloc_init((Class)IMWeakLinkClass( @"AWDIDSSocketPairConnectionTCPInfo",  @"WirelessDiagnostics"));
    [v2 setLinkType:*(unsigned int *)(a1 + 40)];
    [v2 setCurrentRTT:*(void *)(a1 + 48)];
    [v2 setBandwidth:*(void *)(a1 + 56)];
    [*(id *)(a1 + 32) _submitAWDMetric:v2 withContainer:v3];
  }
}

void sub_1002BE490(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    id v10 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Responding to local device info query: %@",  buf,  0xCu);
  }

  uint64_t v5 = OSLogHandleForTransportCategory("IDSDaemon");
  CFTypeRef v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    id v10 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Responding to local device info query: %@",  buf,  0xCu);
  }

  uint64_t v8 = os_log_shim_legacy_logging_enabled(v7);
  if ((_DWORD)v8)
  {
    if (_IDSShouldLogTransport(v8))
    {
      _IDSLogTransport(@"IDSDaemon", @"IDS", @"Responding to local device info query: %@");
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))(*(void *)(a1 + 32));
}

void sub_1002BF1A0(uint64_t a1, int a2)
{
  uint64_t v4 = OSLogHandleForIDSCategory("IDSDSession");
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    CFTypeRef v6 = @"NO";
    if (a2) {
      CFTypeRef v6 = @"YES";
    }
    *(_DWORD *)buf = 138412290;
    uint64_t v82 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Done with outgoing network availability check; networkOkForSession: %@",
      buf,
      0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v7) && _IDSShouldLog(0LL, @"IDSDSession"))
  {
    uint64_t v8 = @"NO";
    if (a2) {
      uint64_t v8 = @"YES";
    }
    __int16 v57 = v8;
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"Done with outgoing network availability check; networkOkForSession: %@");
  }

  int v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "sharedState", v57));
  BOOL v10 = [v9 state] == 8;

  if (v10)
  {
    uint64_t v11 = OSLogHandleForIDSCategory("IDSDSession");
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
      uint64_t v14 = (__CFString *)objc_claimAutoreleasedReturnValue([v13 uniqueID]);
      *(_DWORD *)buf = 138412290;
      uint64_t v82 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Session %@ has ended; NOT sending remote invitations!",
        buf,
        0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v15) && _IDSShouldLog(0LL, @"IDSDSession"))
    {
      __int16 v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
      uint64_t v59 = (void *)objc_claimAutoreleasedReturnValue([v16 uniqueID]);
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"Session %@ has ended; NOT sending remote invitations!");

LABEL_42:
    }
  }

  else
  {
    if (a2)
    {
      uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSDSession](&OBJC_CLASS___IDSFoundationLog, "IDSDSession"));
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
        unsigned int v19 = [v18 isScreenSharingSession];
        dispatch_queue_attr_t v20 = @"NO";
        if (v19) {
          dispatch_queue_attr_t v20 = @"YES";
        }
        *(_DWORD *)buf = 138412290;
        uint64_t v82 = v20;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Creating connection data, isScreenSharingSession: %@",  buf,  0xCu);
      }

      uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
      uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v22 accountID]);
      dispatch_queue_t v24 = (void *)objc_claimAutoreleasedReturnValue([v21 accountWithUniqueID:v23]);
      __int16 v16 = (void *)objc_claimAutoreleasedReturnValue([v24 _registrationCert]);

      uint64_t v25 = objc_opt_self(*(void *)(a1 + 32));
      uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
      uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v26 sharedState]);
      LODWORD(v22) = [v27 isScreenSharingSession];

      uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
      uint64_t v29 = v28;
      if ((_DWORD)v22)
      {
        uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([v28 connection]);
        v76[0] = _NSConcreteStackBlock;
        v76[1] = 3221225472LL;
        v76[2] = sub_1002BFAE0;
        v76[3] = &unk_1008FFBB8;
        uint64_t v31 = *(void **)(a1 + 40);
        void v76[4] = *(void *)(a1 + 32);
        id v77 = v31;
        id v78 = *(id *)(a1 + 48);
        id v79 = *(id *)(a1 + 56);
        char v80 = *(_BYTE *)(a1 + 72);
        [v30 createConnectionData:0 handler:v76];
      }

      else
      {
        unsigned int v42 = [v28 enableQuickRelay];

        if (v42)
        {
          uint64_t v64 = (void *)objc_claimAutoreleasedReturnValue( +[IDSQuickRelayAllocator sharedInstance]( &OBJC_CLASS___IDSQuickRelayAllocator,  "sharedInstance"));
          __int128 v70 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
          __int128 v69 = (void *)objc_claimAutoreleasedReturnValue([v70 destinations]);
          uint64_t v63 = (void *)objc_claimAutoreleasedReturnValue([v69 allObjects]);
          __int128 v68 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
          id v62 = (void *)objc_claimAutoreleasedReturnValue([v68 uniqueID]);
          __int128 v67 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
          id v66 = (void *)objc_claimAutoreleasedReturnValue([v67 fromURI]);
          uint64_t v61 = (void *)objc_claimAutoreleasedReturnValue([v66 prefixedURI]);
          id v65 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
          uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
          unsigned int v44 = (void *)objc_claimAutoreleasedReturnValue([v43 accountID]);
          unsigned __int8 v45 = (void *)objc_claimAutoreleasedReturnValue([v65 accountWithUniqueID:v44]);
          uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue([v45 service]);
          uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue([v46 identifier]);
          uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
          id v49 = (void *)objc_claimAutoreleasedReturnValue([v48 getQuickRelayAllocateOptions:&off_100947908]);
          id v50 =  [v64 setupNewAllocation:v63 sessionID:v62 fromIdentity:v16 fromURI:v61 fromService:v47 options:v49 connectReadyHandler:0];

          [*(id *)(a1 + 32) _sendInvitationMessageToDestinations:*(void *)(a1 + 40) withOptions:*(void *)(a1 + 48) contextData:*(void *)(a1 + 56) declineOnError:*(unsigned __int8 *)(a1 + 72) connectionData:0];
        }

        else
        {
          uint64_t v51 = (void *)objc_claimAutoreleasedReturnValue(+[IDSUTunController sharedInstance](&OBJC_CLASS___IDSUTunController, "sharedInstance"));
          __int16 v52 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
          id v53 = (void *)objc_claimAutoreleasedReturnValue([v52 uniqueID]);
          id v54 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
          id v55 = (void *)objc_claimAutoreleasedReturnValue([v54 participantID]);
          v71[0] = _NSConcreteStackBlock;
          v71[1] = 3221225472LL;
          v71[2] = sub_1002BFCB4;
          v71[3] = &unk_1008FFBB8;
          v71[4] = *(void *)(a1 + 32);
          id v72 = *(id *)(a1 + 40);
          id v73 = *(id *)(a1 + 48);
          id v74 = *(id *)(a1 + 56);
          char v75 = *(_BYTE *)(a1 + 72);
          [v51 createConnectionDataForDevice:v53 localPartyID:v55 dataReadyHandler:v71];
        }
      }

      id v56 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
      [v56 setInvitationTimer];

      goto LABEL_42;
    }

    uint64_t v32 = OSLogHandleForTransportCategory("IDSDSession");
    uint64_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "Network availability check indicated that we should not attempt to send remote invitation(s)",  buf,  2u);
    }

    uint64_t v35 = os_log_shim_legacy_logging_enabled(v34);
    if ((_DWORD)v35)
    {
      if (_IDSShouldLogTransport(v35))
      {
        _IDSLogTransport( @"IDSDSession",  @"IDS",  @"Network availability check indicated that we should not attempt to send remote invitation(s)");
        if (_IDSShouldLog(0LL, @"IDSDSession")) {
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"Network availability check indicated that we should not attempt to send remote invitation(s)");
        }
      }
    }

    if (![*(id *)(a1 + 64) count]
      || (__int16 v36 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]),
          unsigned int v37 = [v36 forceInternetInvitation],
          v36,
          v37))
    {
      uint64_t v38 = OSLogHandleForTransportCategory("IDSDSession");
      unint64_t v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412546;
        uint64_t v82 = @"IDSDSession";
        __int16 v83 = 1024;
        int v84 = 13;
        _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "%@: sendInvitationWithOptions could not find active Wifi connection, ending session with reason %d",  buf,  0x12u);
      }

      uint64_t v41 = os_log_shim_legacy_logging_enabled(v40);
      if ((_DWORD)v41)
      {
        if (_IDSShouldLogTransport(v41))
        {
          id v58 = @"IDSDSession";
          uint64_t v60 = 13LL;
          _IDSLogTransport( @"IDSDSession",  @"IDS",  @"%@: sendInvitationWithOptions could not find active Wifi connection, ending session with reason %d");
          if (_IDSShouldLog(0LL, @"IDSDSession"))
          {
            id v58 = @"IDSDSession";
            uint64_t v60 = 13LL;
            _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDSession",  @"%@: sendInvitationWithOptions could not find active Wifi connection, ending session with reason %d");
          }
        }
      }

      __int16 v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "delegate", v58, v60));
      [v16 endSessionWithReason:13];
      goto LABEL_42;
    }
  }

void sub_1002BFAE0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSDSession](&OBJC_CLASS___IDSFoundationLog, "IDSDSession"));
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (!v5 || v6)
  {
    if (v8)
    {
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
      unsigned int v15 = [v14 isScreenSharingSession];
      __int16 v16 = @"NO";
      if (v15) {
        __int16 v16 = @"YES";
      }
      int v18 = 138412546;
      id v19 = v6;
      __int16 v20 = 2112;
      uint64_t v21 = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Failed to get connection data with error %@, isScreenSharingSession %@",  (uint8_t *)&v18,  0x16u);
    }

    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
    [v17 endSessionWithReason:8];
  }

  else
  {
    if (v8)
    {
      uint64_t v9 = objc_opt_self(*(void *)(a1 + 32));
      BOOL v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 sharedState]);
      unsigned int v12 = [v11 isScreenSharingSession];
      id v13 = @"NO";
      if (v12) {
        id v13 = @"YES";
      }
      int v18 = 138412546;
      id v19 = v5;
      __int16 v20 = 2112;
      uint64_t v21 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Got connection data %@, isScreenSharingSession %@",  (uint8_t *)&v18,  0x16u);
    }

    [*(id *)(a1 + 32) _sendInvitationMessageToDestinations:*(void *)(a1 + 40) withOptions:*(void *)(a1 + 48) contextData:*(void *)(a1 + 56) declineOnError:*(unsigned __int8 *)(a1 + 64) connectionData:v5];
  }
}

void sub_1002BFCB4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSDSession](&OBJC_CLASS___IDSFoundationLog, "IDSDSession"));
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (!v5 || v6)
  {
    if (v8)
    {
      unsigned int v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
      unsigned int v13 = [v12 isScreenSharingSession];
      uint64_t v14 = @"NO";
      if (v13) {
        uint64_t v14 = @"YES";
      }
      int v18 = 138412546;
      id v19 = v6;
      __int16 v20 = 2112;
      uint64_t v21 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Failed to get connection data with error %@, isScreenSharingSession %@",  (uint8_t *)&v18,  0x16u);
    }

    unsigned int v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
    unsigned int v16 = [v15 state];

    if (v16 < 4)
    {
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
      [v17 endSessionWithReason:8];
    }

    else
    {
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSDSession](&OBJC_CLASS___IDSFoundationLog, "IDSDSession"));
      if (os_log_type_enabled((os_log_t)v17, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v1_Block_object_dispose(va, 8) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v17,  OS_LOG_TYPE_DEFAULT,  "Not ending this session as it's still being connected or already connected",  (uint8_t *)&v18,  2u);
      }
    }
  }

  else
  {
    if (v8)
    {
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
      unsigned int v10 = [v9 isScreenSharingSession];
      uint64_t v11 = @"NO";
      if (v10) {
        uint64_t v11 = @"YES";
      }
      int v18 = 138412546;
      id v19 = v5;
      __int16 v20 = 2112;
      uint64_t v21 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Got connection data %@, isScreenSharingSession %@",  (uint8_t *)&v18,  0x16u);
    }

    [*(id *)(a1 + 32) _sendInvitationMessageToDestinations:*(void *)(a1 + 40) withOptions:*(void *)(a1 + 48) contextData:*(void *)(a1 + 56) declineOnError:*(unsigned __int8 *)(a1 + 64) connectionData:v5];
  }
}

void sub_1002C0BFC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v35 = a3;
  id v8 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    unsigned int v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
    unsigned int v11 = [v10 enableQuickRelay];

    unsigned int v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSDSession](&OBJC_CLASS___IDSFoundationLog, "IDSDSession"));
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
      unsigned int v14 = [v13 isScreenSharingSession];
      unsigned int v15 = @"NO";
      if (v14) {
        unsigned int v16 = @"YES";
      }
      else {
        unsigned int v16 = @"NO";
      }
      *(_DWORD *)buf = 138412802;
      unsigned int v37 = v16;
      __int16 v38 = 2112;
      if (v11) {
        unsigned int v15 = @"YES";
      }
      unint64_t v39 = v15;
      __int16 v40 = 2112;
      id v41 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Sent message {isScreenSharingSession: %@, isLegacyOverride: %@, destinations: %@}",  buf,  0x20u);
    }

    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
    unsigned int v18 = [v17 isScreenSharingSession];

    if (v18 | v11)
    {
      id v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "__imSetFromArray"));
      __int16 v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
      [v20 setDestinations:v19];
    }

    if ([v7 count])
    {
      uint64_t v21 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "__imArrayByApplyingBlock:", &stru_1008FFC00));
      uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKey:IDSRegistrationPropertyIsC2KEquipment]);
      BOOL v23 = [v22 count] != 0;

      dispatch_queue_t v24 = *(void **)(a1 + 40);
      uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
      uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v25 uniqueID]);
      uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v21));
      [v24 session:v26 invitationSentToTokens:v27 shouldBreakBeforeMake:v23];

      *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 1;
      uint64_t v28 = OSLogHandleForIDSCategory("IDSDSession");
      uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
        uint64_t v31 = (__CFString *)objc_claimAutoreleasedReturnValue([v30 uniqueID]);
        *(_DWORD *)buf = 138412546;
        unsigned int v37 = v31;
        __int16 v38 = 2112;
        unint64_t v39 = v21;
        _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "session %@ invitation sent to tokens %@",  buf,  0x16u);
      }

      if (os_log_shim_legacy_logging_enabled(v32)
        && _IDSShouldLog(0LL, @"IDSDSession"))
      {
        uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
        uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([v33 uniqueID]);
        _IDSLogV(0LL, @"IDSFoundation", @"IDSDSession", @"session %@ invitation sent to tokens %@");
      }
    }
  }
}

id sub_1002C0F84(id a1, IDSURI *a2)
{
  id v2 = a2;
  id v3 = (IDSURI *)objc_claimAutoreleasedReturnValue(-[IDSURI pushToken](v2, "pushToken"));
  if (v3)
  {
    uint64_t v4 = OSLogHandleForIDSCategory("IDSDSession");
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      unsigned int v14 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "pulled out token %@ from destination",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v6) && _IDSShouldLog(0LL, @"IDSDSession"))
    {
      unsigned int v12 = v3;
      _IDSLogV(0LL, @"IDSFoundation", @"IDSDSession", @"pulled out token %@ from destination");
    }

    id v7 = (void *)objc_claimAutoreleasedReturnValue(-[IDSURI rawToken](v3, "rawToken", v12));
  }

  else
  {
    uint64_t v8 = OSLogHandleForIDSCategory("IDSDSession");
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      unsigned int v14 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "skipping destination %@, can't find token",  buf,  0xCu);
    }

    id v7 = 0LL;
  }

  return v7;
}

void sub_1002C1170(uint64_t a1, void *a2)
{
  if ([a2 lastCall])
  {
    if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL))
    {
      id v3 = *(void **)(a1 + 32);
      id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) sharedState]);
      uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v6 uniqueID]);
      id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet set](&OBJC_CLASS___NSSet, "set"));
      [v3 session:v4 invitationSentToTokens:v5 shouldBreakBeforeMake:0];
    }
  }

void sub_1002C2F48(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (!v5 || v6)
  {
    unsigned int v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSDSession](&OBJC_CLASS___IDSFoundationLog, "IDSDSession"));
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v19 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Failed to get legacy connection data with error %@",  buf,  0xCu);
    }

    unsigned int v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
    unsigned int v14 = [v13 isScreenSharingSession];

    if (v14)
    {
      unsigned int v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
      [v15 handleAVConferenceError:v7];
    }

    unsigned int v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
    [v16 endSessionWithReason:8];
  }

  else
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 connection]);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedState]);
    id v11 = [v10 peerProtocolVersion];
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    v17[2] = sub_1002C3110;
    void v17[3] = &unk_1008F8C80;
    void v17[4] = *(void *)(a1 + 32);
    [v9 startConnectionAsInitiator:0 peerProtocolVersion:v11 errorHandler:v17];

    [*(id *)(a1 + 32) _sendAcceptMessageWithContext:*(void *)(a1 + 40) connectionData:v5];
  }
}

void sub_1002C3110(uint64_t a1, void *a2)
{
  if (a2)
  {
    id v2 = *(void **)(a1 + 32);
    id v3 = a2;
    id v4 = (id)objc_claimAutoreleasedReturnValue([v2 delegate]);
    [v4 handleAVConferenceError:v3];
  }

void sub_1002C39E4(uint64_t a1)
{
  id v1 = *(_OWORD **)(a1 + 32);
  *(_OWORD *)((char *)v1 + 44) = 0u;
  v1[1] = 0u;
  v1[2] = 0u;
  _OWORD *v1 = 0u;
  free(*(void **)(a1 + 32));
}

LABEL_138:
          v202 = IDSDSessionMessageContext;
          v203 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v228, "objectForKey:", IDSDSessionMessageContext, v224));
          v205 = objc_opt_class(&OBJC_CLASS___NSString, v204);
          if ((objc_opt_isKindOfClass(v203, v205) & 1) != 0)
          {
            v206 = (void *)objc_claimAutoreleasedReturnValue([v228 objectForKey:v202]);
            v207 = objc_claimAutoreleasedReturnValue(+[NSData _IDSDataFromBase64String:](&OBJC_CLASS___NSData, "_IDSDataFromBase64String:", v206));
          }

          else
          {
            v206 = (void *)objc_claimAutoreleasedReturnValue([v228 objectForKey:v202]);
            id v209 = objc_opt_class(&OBJC_CLASS___NSData, v208);
            if ((objc_opt_isKindOfClass(v206, v209) & 1) == 0)
            {
              v210 = 0LL;
              goto LABEL_144;
            }

            v207 = objc_claimAutoreleasedReturnValue([v228 objectForKey:v202]);
          }

          v210 = (void *)v207;
LABEL_144:

          uint64_t v211 = objc_alloc_init(&OBJC_CLASS___IMMessageContext);
          -[IMMessageContext setShouldBoost:](v211, "setShouldBoost:", 1LL);
          id v212 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
          uint64_t v213 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSessionInvitationManager sharedState](v232, "sharedState"));
          v214 = (void *)objc_claimAutoreleasedReturnValue([v213 pushTopic]);
          v215 = (void *)objc_claimAutoreleasedReturnValue( [v212 broadcasterForTopic:v214 entitlement:kIDSSessionEntitlement command:0 messageContext:v211]);

          v216 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSessionInvitationManager sharedState](v232, "sharedState"));
          id v217 = (void *)objc_claimAutoreleasedReturnValue([v216 uniqueID]);
          id v218 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableSet prefixedURI](v229, "prefixedURI"));
          [v215 sessionAcceptReceived:v217 fromID:v218 withData:v210];

          v219 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDSessionController sharedInstance]( &OBJC_CLASS___IDSDSessionController,  "sharedInstance"));
          [v219 updateCriticalReliabilityState];

LABEL_145:
          goto LABEL_146;
        }

        uint64_t v161 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDSessionInvitationManager sharedState](v232, "sharedState"));
        [v161 setDisableRemoteDeviceEncryption:1];
        goto LABEL_107;
      }

      __int16 v20 = objc_claimAutoreleasedReturnValue([v228 objectForKey:v15]);
    }

    BOOL v23 = (os_log_s *)v20;
    goto LABEL_14;
  }

  uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSDSession](&OBJC_CLASS___IDSFoundationLog, "IDSDSession"));
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    v241 = v229;
    id v11 = "Ignoring incoming accept from %@, session is not the initiator";
    goto LABEL_9;
  }
}

  __break(1u);
LABEL_139:
  __break(1u);
}

  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  id result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Can't construct Array with count < 0",  36LL,  2LL,  "Swift/Array.swift",  17LL,  2,  936LL,  0);
  __break(1u);
  return result;
}

id sub_1002C5AF0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([a2 objectForKey:v5]);
  if ((objc_opt_isKindOfClass(v6, a1) & 1) != 0)
  {
    id v7 = v6;
  }

  else
  {
    if (v6)
    {
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT)) {
        sub_1006A748C((uint64_t)v5, a1, v8);
      }
    }

    id v7 = 0LL;
  }

  return v7;
}

void sub_1002C5B98(uint64_t a1, void *a2)
{
  if (a2)
  {
    id v2 = *(void **)(a1 + 32);
    id v3 = a2;
    id v4 = (id)objc_claimAutoreleasedReturnValue([v2 delegate]);
    [v4 handleAVConferenceError:v3];
  }

LABEL_29:
          goto LABEL_30;
        }

  objc_autoreleasePoolPop(v5);
}

    swift_bridgeObjectRelease_n(a1, 2LL);
    goto LABEL_30;
  }

  unsigned int v37 = swift_slowAlloc(22LL, -1LL);
  __int16 v38 = swift_slowAlloc(64LL, -1LL);
  *(void *)&uint64_t v116 = v38;
  *(_DWORD *)unsigned int v37 = 136315394;
  id v102 = v32;
  __int128 v114 = sub_1003FFBB0(0xD000000000000051LL, 0x8000000100842780LL, (uint64_t *)&v116);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, &v115, v37 + 4, v37 + 12);
  *(_WORD *)(v37 + 12) = 2080;
  unint64_t v39 = swift_bridgeObjectRetain(a1);
  id v99 = a2;
  __int16 v40 = Dictionary.description.getter(v39);
  unsigned int v42 = v41;
  swift_bridgeObjectRelease(a1);
  __int128 v114 = sub_1003FFBB0(v40, v42, (uint64_t *)&v116);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, &v115, v37 + 14, v37 + 22);
  swift_bridgeObjectRelease_n(a1, 2LL);
  swift_bridgeObjectRelease(v42);
  _os_log_impl((void *)&_mh_execute_header, v34, v35, "%s: dict: %s", (uint8_t *)v37, 0x16u);
  uint64_t v43 = v99;
  swift_arrayDestroy(v38, 2LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v38, -1LL, -1LL);
  swift_slowDealloc(v37, -1LL, -1LL);

  if ((v43 & 1) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  unsigned int v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSRealTimeEncryptionSKM);
  uint64_t v46 = v45;
  if (*(void *)(a1 + 16) && (uint64_t v47 = sub_100417D94(v44, v45), (v48 & 1) != 0))
  {
    sub_10040A668(*(void *)(a1 + 56) + 32 * v47, (uint64_t)&v116);
  }

  else
  {
    uint64_t v116 = 0u;
    __int128 v117 = 0u;
  }

  swift_bridgeObjectRelease(v46);
  if (*((void *)&v117 + 1))
  {
    if ((swift_dynamicCast(&v114, &v116, (char *)&type metadata for Any + 8, &type metadata for Data, 6LL) & 1) != 0)
    {
      id v55 = v114;
      id v54 = v115;
      id v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSRealTimeEncryptionSKS);
      id v58 = v57;
      if (*(void *)(a1 + 16) && (uint64_t v59 = sub_100417D94(v56, v57), (v60 & 1) != 0))
      {
        sub_10040A668(*(void *)(a1 + 56) + 32 * v59, (uint64_t)&v116);
      }

      else
      {
        uint64_t v116 = 0u;
        __int128 v117 = 0u;
      }

      swift_bridgeObjectRelease(v58);
      if (*((void *)&v117 + 1))
      {
        uint64_t v86 = swift_dynamicCast(&v114, &v116, (char *)&type metadata for Any + 8, &type metadata for Data, 6LL);
        if ((v86 & 1) != 0) {
          __asm { BR              X10 }
        }
      }

      else
      {
        uint64_t v86 = sub_10040A274((uint64_t)&v116, &qword_1009B92B8);
      }

      id v88 = (os_log_s *)Logger.logObject.getter(v86);
      uint64_t v89 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v88, v89))
      {
        __int128 v90 = swift_slowAlloc(18LL, -1LL);
        size_t v91 = swift_slowAlloc(32LL, -1LL);
        *(void *)&uint64_t v116 = v91;
        *(_DWORD *)__int128 v90 = 136315394;
        __int128 v114 = sub_1003FFBB0(0xD000000000000051LL, 0x8000000100842780LL, (uint64_t *)&v116);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, &v115, v90 + 4, v90 + 12);
        *(_WORD *)(v90 + 12) = 1024;
        LODWORD(v114) = 16;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, (char *)&v114 + 4, v90 + 14, v90 + 18);
        _os_log_impl((void *)&_mh_execute_header, v88, v89, "%s: sks not %d bytes", (uint8_t *)v90, 0x12u);
        swift_arrayDestroy(v91, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v91, -1LL, -1LL);
        swift_slowDealloc(v90, -1LL, -1LL);
      }

      uint64_t v92 = v55;
      id v93 = v54;
LABEL_47:
      sub_100402A84(v92, v93);

      return 0LL;
    }
  }

  else
  {
    sub_10040A274((uint64_t)&v116, &qword_1009B92B8);
  }

  __int128 v68 = swift_bridgeObjectRetain_n(a1, 2LL);
  __int128 v69 = (os_log_s *)Logger.logObject.getter(v68);
  __int128 v70 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v69, v70)) {
    goto LABEL_29;
  }
  uint64_t v71 = swift_slowAlloc(22LL, -1LL);
  id v72 = swift_slowAlloc(64LL, -1LL);
  *(void *)&uint64_t v116 = v72;
  *(_DWORD *)uint64_t v71 = 136315394;
  __int128 v114 = sub_1003FFBB0(0xD000000000000051LL, 0x8000000100842780LL, (uint64_t *)&v116);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, &v115, v71 + 4, v71 + 12);
  *(_WORD *)(v71 + 12) = 2080;
  id v73 = swift_bridgeObjectRetain(a1);
  id v74 = a1;
  char v75 = (char *)&type metadata for Any + 8;
  uint64_t v76 = Dictionary.description.getter(v73);
  id v78 = v77;
  swift_bridgeObjectRelease(v74);
  __int128 v114 = sub_1003FFBB0(v76, v78, (uint64_t *)&v116);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, &v115, v71 + 14, v71 + 22);
  swift_bridgeObjectRelease_n(v74, 2LL);
  swift_bridgeObjectRelease(v78);
  id v79 = "%s: no skm data in %s";
LABEL_28:
  _os_log_impl((void *)&_mh_execute_header, v69, v70, v79, (uint8_t *)v71, 0x16u);
  swift_arrayDestroy(v72, 2LL, v75);
  swift_slowDealloc(v72, -1LL, -1LL);
  swift_slowDealloc(v71, -1LL, -1LL);
LABEL_30:

  return 0LL;
}

  __break(1u);
LABEL_30:
  __break(1u);
}

    unsigned int v13 = (v23 - 1) & v23;
    unsigned int v14 = __clz(__rbit64(v23)) + (v15 << 6);
LABEL_30:
    __int16 v20 = *(id *)(*(void *)(v1 + 48) + 8 * v14);
    if (!v20) {
      goto LABEL_33;
    }
    while (1)
    {
      unsigned int v42 = v13;
      uint64_t v43 = v15;
      uint64_t v25 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSOffGridDeliveryDonatedHandle(0LL);
      uint64_t v26 = [v20 prefixedURI];
      uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
      uint64_t v29 = v28;

      uint64_t v30 = [v41 prefixedURI];
      uint64_t v31 = v1;
      uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
      uint64_t v34 = v33;

      id v35 = v32;
      id v1 = v31;
      __int16 v36 = sub_10044B238(v27, v29, v35, v34, v40);
      unsigned int v37 = sub_10040A2B0( (unint64_t *)&unk_1009BC920,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSOffGridDeliveryDonatedHandle,  (uint64_t)&unk_10071A6DC);
      dispatch thunk of ModelContext.insert<A>(_:)(v36, v25, v37);
      swift_release(v36);

      uint64_t v9 = v42;
      uint64_t v8 = v43;
      if ((v31 & 0x8000000000000000LL) == 0) {
        break;
      }
LABEL_13:
      unsigned int v16 = __CocoaSet.Iterator.next()(v6);
      if (v16)
      {
        uint64_t v17 = v16;
        unsigned int v44 = v16;
        unsigned int v18 = sub_10041D3C4(0LL, (unint64_t *)&unk_1009BC270, &OBJC_CLASS___IDSURI_ptr);
        swift_unknownObjectRetain(v17, v19);
        swift_dynamicCast(&v46, &v44, (char *)&type metadata for Swift.AnyObject + 8, v18, 7LL);
        __int16 v20 = v46;
        swift_unknownObjectRelease(v17, v21);
        unsigned int v15 = v8;
        unsigned int v13 = v9;
        if (v20) {
          continue;
        }
      }

      goto LABEL_33;
    }
  }

  __break(1u);
}

void sub_1002C67B8(id *a1)
{
  uint64_t v2 = IDSDSessionMessageContext;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a1[4] objectForKey:IDSDSessionMessageContext]);
  uint64_t v5 = objc_opt_class(&OBJC_CLASS___NSString, v4);
  if ((objc_opt_isKindOfClass(v3, v5) & 1) != 0)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([a1[4] objectForKey:v2]);
    uint64_t v7 = objc_claimAutoreleasedReturnValue(+[NSData _IDSDataFromBase64String:](&OBJC_CLASS___NSData, "_IDSDataFromBase64String:", v6));
LABEL_5:
    id v25 = (id)v7;
    goto LABEL_7;
  }

  id v6 = (void *)objc_claimAutoreleasedReturnValue([a1[4] objectForKey:v2]);
  uint64_t v9 = objc_opt_class(&OBJC_CLASS___NSData, v8);
  if ((objc_opt_isKindOfClass(v6, v9) & 1) != 0)
  {
    uint64_t v7 = objc_claimAutoreleasedReturnValue([a1[4] objectForKey:v2]);
    goto LABEL_5;
  }

  id v25 = 0LL;
LABEL_7:

  uint64_t v10 = objc_alloc_init(&OBJC_CLASS___IMMessageContext);
  -[IMMessageContext setShouldBoost:](v10, "setShouldBoost:", 1LL);
  id v11 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
  unsigned int v12 = (void *)objc_claimAutoreleasedReturnValue([a1[5] sharedState]);
  unsigned int v13 = (void *)objc_claimAutoreleasedReturnValue([v12 pushTopic]);
  unsigned int v14 = (void *)objc_claimAutoreleasedReturnValue( [v11 broadcasterForTopic:v13 entitlement:kIDSSessionEntitlement command:0 messageContext:v10]);

  unsigned int v15 = (void *)objc_claimAutoreleasedReturnValue([a1[5] sharedState]);
  unsigned int v16 = (void *)objc_claimAutoreleasedReturnValue([v15 uniqueID]);
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([a1[6] prefixedURI]);
  [v14 sessionCancelReceived:v16 fromID:v17 withData:v25];

  uint64_t v19 = objc_opt_class(&OBJC_CLASS___NSNumber, v18);
  id v20 = sub_1002C5AF0(v19, a1[4], IDSDSessionMessageRemoteEndReason);
  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
  uint64_t v22 = v21;
  if (v21) {
    uint64_t v23 = (uint64_t)[v21 intValue];
  }
  else {
    uint64_t v23 = 5LL;
  }
  dispatch_queue_t v24 = (void *)objc_claimAutoreleasedReturnValue([a1[5] delegate]);
  [v24 endSessionWithReason:v23];
}

void sub_1002C6B64(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___IDSDGroupContextController);
  uint64_t v2 = (void *)qword_1009C0A48;
  qword_1009C0A48 = (uint64_t)v1;
}

void sub_1002C6DBC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 state];
  if (v4 == (id)1)
  {
    uint64_t v10 = OSLogHandleForIDSCategory("DaemonGroupContext");
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unsigned int v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Failed to get Context", v13, 2u);
    }

    if (os_log_shim_legacy_logging_enabled(v12)
      && _IDSShouldLog(0LL, @"DaemonGroupContext"))
    {
      _IDSLogV(0LL, @"IDSFoundation", @"DaemonGroupContext", @"Failed to get Context");
    }

    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
    uint64_t v9 = *(void (**)(void))(*(void *)(a1 + 32) + 16LL);
    goto LABEL_15;
  }

  if (!v4)
  {
    uint64_t v5 = OSLogHandleForIDSCategory("DaemonGroupContext");
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Got Context", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled(v7)
      && _IDSShouldLog(0LL, @"DaemonGroupContext"))
    {
      _IDSLogV(0LL, @"IDSFoundation", @"DaemonGroupContext", @"Got Context");
    }

    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v3 value]);
    uint64_t v9 = *(void (**)(void))(*(void *)(a1 + 32) + 16LL);
LABEL_15:
    v9();
  }
}

void sub_1002C7100(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (!v5 || v6)
  {
    uint64_t v17 = OSLogHandleForIDSCategory("DaemonGroupContext");
    uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543618;
      id v32 = v7;
      __int16 v33 = 2114;
      id v34 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Upsert group -- Failed {error: %{public}@, context: %{public}@}",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v19)
      && _IDSShouldLog(0LL, @"DaemonGroupContext"))
    {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"DaemonGroupContext",  @"Upsert group -- Failed {error: %{public}@, context: %{public}@}");
    }

    (*(void (**)(void, void))(*(void *)(a1 + 48) + 16LL))(*(void *)(a1 + 48), 0LL);
  }

  else
  {
    uint64_t v8 = OSLogHandleForIDSCategory("DaemonGroupContext");
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      id v32 = v5;
      __int16 v33 = 2112;
      id v34 = 0LL;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Got Deaemon Group Context %@, error %@",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v10)
      && _IDSShouldLog(0LL, @"DaemonGroupContext"))
    {
      id v25 = v5;
      uint64_t v26 = 0LL;
      _IDSLogV( 0LL,  @"IDSFoundation",  @"DaemonGroupContext",  @"Got Deaemon Group Context %@, error %@");
    }

    if (*(void *)(a1 + 32))
    {
      uint64_t v11 = OSLogHandleForIDSCategory("DaemonGroupContext");
      uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Updating Group", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled(v13)
        && _IDSShouldLog(0LL, @"DaemonGroupContext"))
      {
        _IDSLogV(0LL, @"IDSFoundation", @"DaemonGroupContext", @"Updating Group");
      }

      uint64_t v14 = *(void *)(a1 + 32);
      unsigned int v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "participants", v25, v26));
      unsigned int v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) sharedApplicationData]);
      v29[0] = _NSConcreteStackBlock;
      v29[1] = 3221225472LL;
      v29[2] = sub_1002C7574;
      v29[3] = &unk_1008FA380;
      id v30 = *(id *)(a1 + 48);
      [v5 updateGroup:v14 withParticipants:v15 sharedApplicationData:v16 completion:v29];
    }

    else
    {
      uint64_t v20 = OSLogHandleForIDSCategory("DaemonGroupContext");
      uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Creating New Group", buf, 2u);
      }

      if (os_log_shim_legacy_logging_enabled(v22)
        && _IDSShouldLog(0LL, @"DaemonGroupContext"))
      {
        _IDSLogV(0LL, @"IDSFoundation", @"DaemonGroupContext", @"Creating New Group");
      }

      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "participants", v25, v26));
      dispatch_queue_t v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) sharedApplicationData]);
      v27[0] = _NSConcreteStackBlock;
      v27[1] = 3221225472LL;
      void v27[2] = sub_1002C7580;
      v27[3] = &unk_1008FA380;
      id v28 = *(id *)(a1 + 48);
      [v5 createGroupWithParticipants:v23 sharedApplicationData:v24 completion:v27];
    }
  }
}

uint64_t sub_1002C7574(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1002C7580(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = OSLogHandleForIDSCategory("DaemonGroupContext");
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    id v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "New Group Created %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v9)
    && _IDSShouldLog(0LL, @"DaemonGroupContext"))
  {
    _IDSLogV(0LL, @"IDSFoundation", @"DaemonGroupContext", @"New Group Created %@");
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))(*(void *)(a1 + 32));
}

void sub_1002C7848(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (!v5 || v6)
  {
    uint64_t v9 = OSLogHandleForIDSCategory("DaemonGroupContext");
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138543618;
      unsigned int v16 = v7;
      __int16 v17 = 2114;
      uint64_t v18 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Failed to fetch group by groupID {error: %{public}@, groupID: %{public}@}",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v12)
      && _IDSShouldLog(0LL, @"DaemonGroupContext"))
    {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"DaemonGroupContext",  @"Failed to fetch group by groupID {error: %{public}@, groupID: %{public}@}");
    }

    (*(void (**)(void, void))(*(void *)(a1 + 40) + 16LL))(*(void *)(a1 + 40), 0LL);
  }

  else
  {
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    _DWORD v13[2] = sub_1002C7A00;
    v13[3] = &unk_1008FA380;
    uint64_t v8 = *(void *)(a1 + 32);
    id v14 = *(id *)(a1 + 40);
    [v5 fetchGroupWithGroupID:v8 completion:v13];
  }
}

uint64_t sub_1002C7A00(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1002C7AB0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (!v5 || v6)
  {
    uint64_t v9 = OSLogHandleForIDSCategory("DaemonGroupContext");
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138543618;
      unsigned int v16 = v7;
      __int16 v17 = 2114;
      uint64_t v18 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Failed to get public data representation {error: %{public}@, group: %{public}@}",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v12)
      && _IDSShouldLog(0LL, @"DaemonGroupContext"))
    {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"DaemonGroupContext",  @"Failed to get public data representation {error: %{public}@, group: %{public}@}");
    }

    (*(void (**)(void, void))(*(void *)(a1 + 40) + 16LL))(*(void *)(a1 + 40), 0LL);
  }

  else
  {
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    _DWORD v13[2] = sub_1002C7C68;
    v13[3] = &unk_1008FFCE8;
    uint64_t v8 = *(void *)(a1 + 32);
    id v14 = *(id *)(a1 + 40);
    [v5 _publicDataRepresentationForGroup:v8 completion:v13];
  }
}

uint64_t sub_1002C7C68(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1002C7D18(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (!v5 || v6)
  {
    uint64_t v9 = OSLogHandleForIDSCategory("DaemonGroupContext");
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543362;
      unsigned int v15 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Failed to get group from public data representation -- missing context {error: %{public}@}",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v11)
      && _IDSShouldLog(0LL, @"DaemonGroupContext"))
    {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"DaemonGroupContext",  @"Failed to get group from public data representation -- missing context {error: %{public}@}");
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))(*(void *)(a1 + 40));
  }

  else
  {
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    v12[2] = sub_1002C7EBC;
    v12[3] = &unk_1008FA380;
    uint64_t v8 = *(void *)(a1 + 32);
    id v13 = *(id *)(a1 + 40);
    [v5 _groupFromPublicDataRepresentation:v8 completion:v12];
  }
}

uint64_t sub_1002C7EBC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1002C7F6C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (!v5 || v6)
  {
    uint64_t v9 = OSLogHandleForIDSCategory("DaemonGroupContext");
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543362;
      unsigned int v15 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Failed to get participnats for cypher -- missing context {error: %{public}@}",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v11)
      && _IDSShouldLog(0LL, @"DaemonGroupContext"))
    {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"DaemonGroupContext",  @"Failed to get participnats for cypher -- missing context {error: %{public}@}");
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))(*(void *)(a1 + 40));
  }

  else
  {
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    v12[2] = sub_1002C8110;
    v12[3] = &unk_1008FFD10;
    uint64_t v8 = *(void *)(a1 + 32);
    id v13 = *(id *)(a1 + 40);
    [v5 _participantsForCypher:v8 completion:v12];
  }
}

uint64_t sub_1002C8110(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1002C81E4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (!v5 || v6)
  {
    uint64_t v10 = OSLogHandleForIDSCategory("DaemonGroupContext");
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543362;
      unsigned int v16 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Failed to validate cached group -- missing context {error: %{public}@}",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v12)
      && _IDSShouldLog(0LL, @"DaemonGroupContext"))
    {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"DaemonGroupContext",  @"Failed to validate cached group -- missing context {error: %{public}@}");
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))(*(void *)(a1 + 48));
  }

  else
  {
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 40);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    _DWORD v13[2] = sub_1002C8390;
    v13[3] = &unk_1008F8148;
    id v14 = *(id *)(a1 + 48);
    [v5 _validateCachedGroup:v8 isParentOfGroup:v9 completion:v13];
  }
}

uint64_t sub_1002C8390(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1002C843C(uint64_t a1, void *a2)
{
  if (a2)
  {
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472LL;
    v4[2] = sub_1002C84CC;
    v4[3] = &unk_1008FA380;
    uint64_t v3 = *(void *)(a1 + 32);
    id v5 = *(id *)(a1 + 40);
    [a2 fetchLatestGroupWithStableID:v3 completion:v4];
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

uint64_t sub_1002C84CC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1002C8550(uint64_t a1, void *a2)
{
  if (a2)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    v3[2] = sub_1002C85DC;
    v3[3] = &unk_1008FFD38;
    id v4 = *(id *)(a1 + 32);
    [a2 _fetchAllLocalKnownGroups:v3];
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

void sub_1002C85DC(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (a2)
  {
    id v3 = (id)objc_claimAutoreleasedReturnValue([a2 allObjects]);
    (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
  }

  else
  {
    (*(void (**)(void, void *))(v2 + 16))(*(void *)(a1 + 32), &__NSArray0__struct);
  }

void sub_1002C86C4(uint64_t a1, void *a2)
{
  if (a2)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    v3[2] = sub_1002C8750;
    v3[3] = &unk_1008F6330;
    id v4 = *(id *)(a1 + 32);
    [a2 _dropLocalCache:v3];
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

uint64_t sub_1002C8750(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1002C8800(uint64_t a1, void *a2)
{
  if (a2)
  {
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472LL;
    v4[2] = sub_1002C8890;
    v4[3] = &unk_1008F6330;
    uint64_t v3 = *(void *)(a1 + 32);
    id v5 = *(id *)(a1 + 40);
    [a2 _dropLocalCacheForGroupID:v3 compeltion:v4];
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

uint64_t sub_1002C8890(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1002C8994(id a1, ENGroupContext *a2, NSError *a3)
{
  id v4 = a2;
  id v5 = a3;
  uint64_t v6 = OSLogHandleForIDSCategory("DaemonGroupContext");
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    uint64_t v12 = v4;
    __int16 v13 = 2112;
    id v14 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Noting registration identity update {context: %@, error: %@}",  buf,  0x16u);
  }

  if (os_log_shim_legacy_logging_enabled(v8)
    && _IDSShouldLog(0LL, @"DaemonGroupContext"))
  {
    uint64_t v9 = v4;
    uint64_t v10 = v5;
    _IDSLogV( 0LL,  @"IDSFoundation",  @"DaemonGroupContext",  @"Noting registration identity update {context: %@, error: %@}");
  }

  -[ENGroupContext _noteRegistrationIdentityUpdate](v4, "_noteRegistrationIdentityUpdate", v9, v10);
}

uint64_t sub_1002C8B44(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1002C8EC0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = OSLogHandleForIDSCategory("DaemonGroupContext");
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Core Data Load Failed", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled(v6)
      && _IDSShouldLog(0LL, @"DaemonGroupContext"))
    {
      _IDSLogV(0LL, @"IDSFoundation", @"DaemonGroupContext", @"Core Data Load Failed");
    }

    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) seal]);
    [v7 failWithError:v3];
  }

  else
  {
    uint64_t v8 = OSLogHandleForIDSCategory("DaemonGroupContext");
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Core Data Load sucdeeded", v11, 2u);
    }

    if (os_log_shim_legacy_logging_enabled(v10)
      && _IDSShouldLog(0LL, @"DaemonGroupContext"))
    {
      _IDSLogV(0LL, @"IDSFoundation", @"DaemonGroupContext", @"Core Data Load sucdeeded");
    }

    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) seal]);
    [v7 fulfillWithValue:*(void *)(a1 + 40)];
  }
}

id sub_1002CB04C(uint64_t a1)
{
  id v1 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"disable-live-delivery-%@",  a1));
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[IDSServerBag sharedInstance](&OBJC_CLASS___IDSServerBag, "sharedInstance"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKey:v1]);

  if (v3 && (uint64_t v5 = objc_opt_class(&OBJC_CLASS___NSNumber, v4), (objc_opt_isKindOfClass(v3, v5) & 1) != 0)) {
    id v6 = [v3 BOOLValue];
  }
  else {
    id v6 = 0LL;
  }

  return v6;
}

id sub_1002CB100()
{
  dispatch_queue_attr_t v0 = (void *)objc_claimAutoreleasedReturnValue(+[IDSServerBag sharedInstance](&OBJC_CLASS___IDSServerBag, "sharedInstance"));
  id v1 = (void *)objc_claimAutoreleasedReturnValue([v0 objectForKey:@"disable-live-delivery-all"]);

  if (v1 && (uint64_t v3 = objc_opt_class(&OBJC_CLASS___NSNumber, v2), (objc_opt_isKindOfClass(v1, v3) & 1) != 0)) {
    id v4 = [v1 BOOLValue];
  }
  else {
    id v4 = 0LL;
  }

  return v4;
}

id sub_1002CB180(id a1, NSDictionary *a2)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary _stringForKey:](a2, "_stringForKey:", IDSDevicePropertyIdentitiesURI));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 _stripFZIDPrefix]);

  return v3;
}

id sub_1002CB1C8(id a1, NSDictionary *a2)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary _stringForKey:](a2, "_stringForKey:", IDSDevicePropertyIdentitiesURI));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 _stripFZIDPrefix]);

  return v3;
}

id sub_1002CB210(uint64_t a1)
{
  return [*(id *)(a1 + 32) enableCloudConnection];
}

void sub_1002CB218(id a1)
{
  int v1 = IMGetDomainBoolForKey(@"com.apple.ids", @"DisableLocalDelivery");
  byte_1009C0A50 = v1;
  if (v1)
  {
    uint64_t v2 = OSLogHandleForIDSCategory("Warning");
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "**** Local IDS connectivity is disabled, only using cloud ****",  v5,  2u);
    }

    if (os_log_shim_legacy_logging_enabled(v4))
    {
      _IDSWarnV(@"IDSFoundation", @"**** Local IDS connectivity is disabled, only using cloud ****");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"**** Local IDS connectivity is disabled, only using cloud ****");
      _IDSLogTransport( @"Warning",  @"IDS",  @"**** Local IDS connectivity is disabled, only using cloud ****");
    }
  }

id sub_1002CC04C(id a1, id a2)
{
  return [a2 objectForKey:IDSDevicePairedDeviceID];
}

uint64_t sub_1002CC060(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1002CC070(uint64_t a1)
{
}

void sub_1002CC078(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  im_assert_primary_base_queue(v6, v7);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountUUID]);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v8 accountWithUniqueID:v9]);

  if (v10)
  {
    uint64_t v11 = *(void *)(*(void *)(*(void *)(a1 + 96) + 8LL) + 40LL);
    unsigned int v12 = [*(id *)(a1 + 40) containsObject:v6];
    unsigned int v13 = [*(id *)(a1 + 48) containsObject:v6];
    unsigned int v14 = v13;
    if (v11 || (v12 & 1) != 0 || !v13)
    {
      uint64_t v28 = OSLogHandleForIDSCategory("IDSDAccount");
      uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        id v30 = @"NO";
        *(_DWORD *)buf = 138413314;
        id v80 = v5;
        if (v11) {
          uint64_t v31 = @"YES";
        }
        else {
          uint64_t v31 = @"NO";
        }
        if (v12) {
          id v32 = @"YES";
        }
        else {
          id v32 = @"NO";
        }
        if (!v14) {
          id v30 = @"YES";
        }
        __int16 v81 = 2112;
        id v82 = v6;
        __int16 v83 = 2112;
        int v84 = v31;
        __int16 v85 = 2112;
        uint64_t v86 = v32;
        __int16 v87 = 2112;
        id v88 = v30;
        _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "Fallback won't sent for %@ %@  alreadyFailed %@ alreadySending %@ alreadyComplete %@",  buf,  0x34u);
      }

      if (os_log_shim_legacy_logging_enabled(v33)
        && _IDSShouldLog(0LL, @"IDSDAccount"))
      {
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDAccount",  @"Fallback won't sent for %@ %@  alreadyFailed %@ alreadySending %@ alreadyComplete %@");
      }
    }

    else
    {
      unsigned __int8 v15 = [*(id *)(a1 + 32) localDelivery];
      if (!v6
        || (v15 & 1) != 0
        || ([v5 isEqualToString:IDSDefaultPairedDevice] & 1) != 0
        || [v5 localizedCaseInsensitiveContainsString:@"__localURI__"])
      {
        uint64_t v16 = OSLogHandleForIDSCategory("IDSDAccount");
        __int16 v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v18 = [*(id *)(a1 + 32) localDelivery];
          uint64_t v19 = @"NO";
          *(_DWORD *)buf = 138412802;
          id v80 = v5;
          __int16 v81 = 2112;
          if (v18) {
            uint64_t v19 = @"YES";
          }
          id v82 = v6;
          __int16 v83 = 2112;
          int v84 = v19;
          _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Ignoring request to fallback for %@ %@ forcedLocal %@",  buf,  0x20u);
        }

        if (os_log_shim_legacy_logging_enabled(v20)
          && _IDSShouldLog(0LL, @"IDSDAccount"))
        {
          [*(id *)(a1 + 32) localDelivery];
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDAccount",  @"Ignoring request to fallback for %@ %@ forcedLocal %@");
        }
      }

      else
      {
        id v34 = (void *)objc_claimAutoreleasedReturnValue(+[IDSTrafficMonitor sharedInstance](&OBJC_CLASS___IDSTrafficMonitor, "sharedInstance"));
        id v35 = (void *)objc_claimAutoreleasedReturnValue([v10 service]);
        __int16 v36 = (void *)objc_claimAutoreleasedReturnValue([v35 identifier]);
        unsigned int v37 = (void *)objc_claimAutoreleasedReturnValue([v10 service]);
        unsigned __int8 v38 = objc_msgSend( v34,  "noteOutgoingFallbackMessageForService:serviceType:requestor:",  v36,  objc_msgSend(v37, "adHocServiceType"),  0);

        if ((v38 & 1) != 0)
        {
          v68[0] = _NSConcreteStackBlock;
          v68[1] = 3221225472LL;
          v68[2] = sub_1002CCA3C;
          v68[3] = &unk_1008FFE48;
          id v69 = *(id *)(a1 + 32);
          id v39 = v5;
          id v70 = v39;
          id v66 = (const __CFString *)v6;
          uint64_t v71 = (__CFString *)v66;
          id v72 = *(id *)(a1 + 48);
          id v73 = *(id *)(a1 + 40);
          __int128 v77 = *(_OWORD *)(a1 + 96);
          id v40 = *(id *)(a1 + 56);
          uint64_t v41 = *(void *)(a1 + 112);
          id v74 = v40;
          uint64_t v78 = v41;
          id v75 = *(id *)(a1 + 64);
          id v76 = *(id *)(a1 + 88);
          __int128 v67 = objc_retainBlock(v68);
          id v42 = [*(id *)(a1 + 32) copy];
          uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue(+[IDSURI URIWithPrefixedURI:](&OBJC_CLASS___IDSURI, "URIWithPrefixedURI:", v39));
          unsigned int v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObject:](&OBJC_CLASS___NSArray, "arrayWithObject:", v43));
          [v42 setFinalDestinationURIs:v44];

          [v42 setWantsResponse:1];
          if ([v42 priority] == (id)200) {
            [v42 setPriority:300];
          }
          uint64_t v45 = OSLogHandleForTransportCategory("IDSDAccount");
          uint64_t v46 = (os_log_s *)objc_claimAutoreleasedReturnValue(v45);
          if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
          {
            id v47 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) messageUUID]);
            uint64_t v48 = (__CFString *)objc_claimAutoreleasedReturnValue([v10 uniqueID]);
            *(_DWORD *)buf = 138413058;
            id v80 = v47;
            __int16 v81 = 2112;
            id v82 = v39;
            __int16 v83 = 2112;
            int v84 = v66;
            __int16 v85 = 2112;
            uint64_t v86 = v48;
            _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEFAULT,  "Initiating fallback send for message %@ to %@ %@ from account %@",  buf,  0x2Au);
          }

          uint64_t v50 = os_log_shim_legacy_logging_enabled(v49);
          if ((_DWORD)v50)
          {
            if (_IDSShouldLogTransport(v50))
            {
              uint64_t v51 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) messageUUID]);
              uint64_t v63 = v66;
              id v65 = (void *)objc_claimAutoreleasedReturnValue([v10 uniqueID]);
              uint64_t v60 = v51;
              id v62 = v39;
              _IDSLogTransport( @"IDSDAccount",  @"IDS",  @"Initiating fallback send for message %@ to %@ %@ from account %@");

              if (_IDSShouldLog(0LL, @"IDSDAccount"))
              {
                __int16 v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "messageUUID", v51, v39, v66, v65));
                uint64_t v63 = v66;
                id v65 = (void *)objc_claimAutoreleasedReturnValue([v10 uniqueID]);
                uint64_t v60 = v52;
                id v62 = v39;
                _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDAccount",  @"Initiating fallback send for message %@ to %@ %@ from account %@");
              }
            }
          }

          objc_msgSend(*(id *)(a1 + 40), "addObject:", v66, v60, v62, v63, v65);
          [v10 _sendRemotelyWithSendParameters:v42 data:*(void *)(a1 + 72) protobuf:*(void *)(a1 + 80) willSendBlock:0 completionBlock:v67];
        }

        else
        {
          uint64_t v53 = OSLogHandleForTransportCategory("IDSDAccount");
          id v54 = (os_log_s *)objc_claimAutoreleasedReturnValue(v53);
          if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
          {
            unsigned int v55 = [*(id *)(a1 + 32) localDelivery];
            id v56 = @"NO";
            *(_DWORD *)buf = 138412802;
            id v80 = v5;
            __int16 v81 = 2112;
            if (v55) {
              id v56 = @"YES";
            }
            id v82 = v6;
            __int16 v83 = 2112;
            int v84 = v56;
            _os_log_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_DEFAULT,  "Ignoring request to fallback for %@ %@ forcedLocal %@ due to budget restrictions.",  buf,  0x20u);
          }

          uint64_t v58 = os_log_shim_legacy_logging_enabled(v57);
          if ((_DWORD)v58 && _IDSShouldLogTransport(v58))
          {
            uint64_t v59 = [*(id *)(a1 + 32) localDelivery] ? @"YES" : @"NO";
            uint64_t v64 = v59;
            _IDSLogTransport( @"IDSDAccount",  @"IDS",  @"Ignoring request to fallback for %@ %@ forcedLocal %@ due to budget restrictions.");
            if (_IDSShouldLog(0LL, @"IDSDAccount"))
            {
              objc_msgSend(*(id *)(a1 + 32), "localDelivery", v5, v6, v64);
              _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDAccount",  @"Ignoring request to fallback for %@ %@ forcedLocal %@ due to budget restrictions.");
            }
          }
        }
      }
    }
  }

  else
  {
    uint64_t v21 = OSLogHandleForIDSCategory("IDSDaemon");
    uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountUUID]);
      *(_DWORD *)buf = 138412290;
      id v80 = v23;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "(Account) No account found for ID: %@",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v24) && _IDSShouldLog(0LL, @"IDSDaemon"))
    {
      uint64_t v61 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountUUID]);
      _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon", @"(Account) No account found for ID: %@");
    }

    IMLogBacktrace(@"IDSDaemon");
    id v25 = objc_alloc(&OBJC_CLASS___NSError);
    uint64_t v26 = -[NSError initWithDomain:code:userInfo:](v25, "initWithDomain:code:userInfo:", IDSSendErrorDomain, 2LL, 0LL);
    if (*(void *)(a1 + 88))
    {
      uint64_t v27 = objc_alloc_init(&OBJC_CLASS___IDSDeliveryContext);
      -[IDSDeliveryContext setResponseError:](v27, "setResponseError:", v26);
      -[IDSDeliveryContext setIdsResponseCode:](v27, "setIdsResponseCode:", 2LL);
      -[IDSDeliveryContext setLastCall:](v27, "setLastCall:", 1LL);
      (*(void (**)(void))(*(void *)(a1 + 88) + 16LL))(*(void *)(a1 + 88));
    }
  }
}

void sub_1002CC9C4(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1002CC91CLL);
  }

  _Unwind_Resume(a1);
}

void sub_1002CCA3C(uint64_t a1, void *a2)
{
  id v3 = a2;
  im_assert_primary_base_queue(v3, v4);
  uint64_t v5 = OSLogHandleForIDSCategory("IDSDAccount");
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    id v7 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) messageUUID]);
    uint64_t v9 = *(void *)(a1 + 40);
    uint64_t v8 = *(void *)(a1 + 48);
    id v10 = [v3 idsResponseCode];
    id v11 = (id)objc_claimAutoreleasedReturnValue([v3 responseError]);
    unsigned int v12 = [v3 lastCall];
    unsigned int v13 = @"NO";
    uint64_t v14 = *(void *)(a1 + 56);
    uint64_t v15 = *(void *)(a1 + 64);
    if (v12) {
      unsigned int v13 = @"YES";
    }
    *(_DWORD *)buf = 138414082;
    id v64 = v7;
    __int16 v65 = 2112;
    uint64_t v66 = v9;
    __int16 v67 = 2112;
    uint64_t v68 = v8;
    __int16 v69 = 2048;
    id v70 = v10;
    __int16 v71 = 2112;
    id v72 = v11;
    __int16 v73 = 2112;
    id v74 = v13;
    __int16 v75 = 2112;
    uint64_t v76 = v14;
    __int16 v77 = 2112;
    uint64_t v78 = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Fallback send of %@ to %@ %@ completed with responseCode %ld error %@ lastCall %@ - current pending sends local %@ fallback %@",  buf,  0x52u);
  }

  if (os_log_shim_legacy_logging_enabled(v16) && _IDSShouldLog(0LL, @"IDSDAccount"))
  {
    __int16 v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) messageUUID]);
    uint64_t v18 = *(void *)(a1 + 40);
    uint64_t v19 = *(void *)(a1 + 48);
    id v20 = [v3 idsResponseCode];
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v3 responseError]);
    unsigned int v22 = [v3 lastCall];
    uint64_t v23 = @"NO";
    if (v22) {
      uint64_t v23 = @"YES";
    }
    uint64_t v61 = *(void *)(a1 + 56);
    uint64_t v62 = *(void *)(a1 + 64);
    uint64_t v59 = v21;
    uint64_t v60 = v23;
    uint64_t v57 = v19;
    id v58 = v20;
    unsigned int v55 = v17;
    uint64_t v56 = v18;
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDAccount",  @"Fallback send of %@ to %@ %@ completed with responseCode %ld error %@ lastCall %@ - current pending sends local %@ fallback %@");
  }

  if (objc_msgSend(v3, "lastCall", v55, v56, v57, v58, v59, v60, v61, v62))
  {
    id v24 = [v3 idsResponseCode];
    if (v24)
    {
      if (*(void *)(*(void *)(*(void *)(a1 + 96) + 8LL) + 40LL))
      {
LABEL_23:
        BOOL v45 = v24 == 0LL;
        id v46 = [*(id *)(a1 + 56) count];
        uint64_t v47 = (uint64_t)[*(id *)(a1 + 64) count];
        [*(id *)(a1 + 64) removeObject:*(void *)(a1 + 48)];
        if (v45) {
          [*(id *)(a1 + 56) removeObject:*(void *)(a1 + 48)];
        }
        BOOL v48 = v46 != (id)-v47;
        id v49 = [*(id *)(a1 + 56) count];
        else {
          BOOL v50 = v48;
        }
        if (v50)
        {
          if (*(void *)(a1 + 88))
          {
            uint64_t v51 = objc_alloc_init(&OBJC_CLASS___IDSDeliveryContext);
            -[IDSDeliveryContext setIdsResponseCode:]( v51,  "setIdsResponseCode:",  *(void *)(*(void *)(*(void *)(a1 + 104) + 8LL) + 24LL));
            -[IDSDeliveryContext setResponseError:]( v51,  "setResponseError:",  *(void *)(*(void *)(*(void *)(a1 + 96) + 8LL) + 40LL));
            -[IDSDeliveryContext setLastCall:](v51, "setLastCall:", 1LL);
            __int16 v52 = (void *)objc_claimAutoreleasedReturnValue([v3 endpointState]);
            -[IDSDeliveryContext setEndpointState:](v51, "setEndpointState:", v52);

            (*(void (**)(void))(*(void *)(a1 + 88) + 16LL))();
          }

          uint64_t v53 = *(void *)(*(void *)(a1 + 96) + 8LL);
          id v54 = *(void **)(v53 + 40);
          *(void *)(v53 + 40) = 0LL;
        }

        goto LABEL_32;
      }

      *(void *)(*(void *)(*(void *)(a1 + 104) + 8) + 24) = [v3 idsResponseCode];
      uint64_t v25 = objc_claimAutoreleasedReturnValue([v3 responseError]);
      uint64_t v26 = *(void *)(*(void *)(a1 + 96) + 8LL);
      id v27 = *(id *)(v26 + 40);
      *(void *)(v26 + 40) = v25;
    }

    else
    {
      uint64_t v28 = OSLogHandleForIDSCategory("IDSDAccount");
      uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "Overwriting previous local failure with remote success",  buf,  2u);
      }

      if (os_log_shim_legacy_logging_enabled(v30)
        && _IDSShouldLog(0LL, @"IDSDAccount"))
      {
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDAccount",  @"Overwriting previous local failure with remote success");
      }

      *(void *)(*(void *)(*(void *)(a1 + 104) + 8LL) + 24LL) = 0LL;
      uint64_t v31 = *(void *)(*(void *)(a1 + 96) + 8LL);
      id v32 = *(void **)(v31 + 40);
      *(void *)(v31 + 40) = 0LL;

      id v27 = objc_msgSend( [IDSLocalDeliveryMessageSentMetric alloc],  "initWithService:isToDefaultPairedDevice:messageSize:linkType:priority:",  *(void *)(a1 + 72),  1,  *(void *)(a1 + 112),  4,  objc_msgSend(*(id *)(a1 + 32), "priority"));
      uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue(+[IDSCoreAnalyticsLogger defaultLogger](&OBJC_CLASS___IDSCoreAnalyticsLogger, "defaultLogger"));
      [v33 logMetric:v27];

      id v34 = (void *)objc_claimAutoreleasedReturnValue(+[IDSAWDLogging sharedInstance](&OBJC_CLASS___IDSAWDLogging, "sharedInstance"));
      objc_msgSend( v34,  "messageSentForService:isToDefaultPairedDevice:messageSize:linkType:priority:",  *(void *)(a1 + 72),  1,  *(void *)(a1 + 112),  4,  objc_msgSend(*(id *)(a1 + 32), "priority"));

      id v35 = (void *)objc_claimAutoreleasedReturnValue( +[IDSUTunDeliveryController sharedInstance]( &OBJC_CLASS___IDSUTunDeliveryController,  "sharedInstance"));
      __int16 v36 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) messageUUID]);
      uint64_t v37 = JWUUIDPushObjectToString(v36);
      unsigned __int8 v38 = (void *)objc_claimAutoreleasedReturnValue(v37);
      [v35 cancelMessageID:v38];

      if ([*(id *)(a1 + 80) adHocServiceType] == 2)
      {
        id v39 = objc_alloc(&OBJC_CLASS___IDSLocalDeliveryMessageDeliveredMetric);
        id v40 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 80) identifier]);
        id v41 = [v39 initWithService:v40 isToDefaultPairedDevice:1 messageSize:0 linkType:4 deliveryError:0 RTT:0 priority:0];

        id v42 = (void *)objc_claimAutoreleasedReturnValue(+[IDSCoreAnalyticsLogger defaultLogger](&OBJC_CLASS___IDSCoreAnalyticsLogger, "defaultLogger"));
        [v42 logMetric:v41];

        uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue(+[IDSAWDLogging sharedInstance](&OBJC_CLASS___IDSAWDLogging, "sharedInstance"));
        unsigned int v44 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 80) identifier]);
        [v43 messageDeliveredForService:v44 isToDefaultPairedDevice:1 messageSize:0 linkType:4 deliveryError:0 RTT:0 priority:0];
      }
    }

    goto LABEL_23;
  }

void sub_1002CD080(uint64_t a1, void *a2)
{
  id v3 = a2;
  im_assert_primary_base_queue(v3, v4);
  id v5 = [v3 idsResponseCode];
  uint64_t v6 = OSLogHandleForIDSCategory("IDSDAccount");
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    id v8 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) messageUUID]);
    id v9 = (id)objc_claimAutoreleasedReturnValue([v3 deviceID]);
    uint64_t v11 = *(void *)(a1 + 48);
    uint64_t v10 = *(void *)(a1 + 56);
    uint64_t v12 = *(void *)(a1 + 40);
    uint64_t v13 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountUUID]);
    uint64_t v14 = (void *)v13;
    uint64_t v15 = @"NO";
    *(_DWORD *)buf = 138414082;
    *(void *)&uint8_t buf[4] = v8;
    if (!v5) {
      uint64_t v15 = @"YES";
    }
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = v9;
    __int16 v48 = 2112;
    id v49 = v15;
    __int16 v50 = 2048;
    id v51 = v5;
    __int16 v52 = 2112;
    uint64_t v53 = v12;
    __int16 v54 = 2112;
    uint64_t v55 = v11;
    __int16 v56 = 2112;
    uint64_t v57 = v10;
    __int16 v58 = 2112;
    uint64_t v59 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "IDSUTunDeliveryController sendMessage %@ deviceID %@ succeeded? %@ response %ld topic: %@ - current pending sends local %@ fallback %@ account %@",  buf,  0x52u);
  }

  if (os_log_shim_legacy_logging_enabled(v16) && _IDSShouldLog(0LL, @"IDSDAccount"))
  {
    __int16 v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) messageUUID]);
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v3 deviceID]);
    if (v5) {
      uint64_t v19 = @"NO";
    }
    else {
      uint64_t v19 = @"YES";
    }
    uint64_t v20 = *(void *)(a1 + 40);
    uint64_t v21 = *(void *)(a1 + 48);
    uint64_t v45 = *(void *)(a1 + 56);
    id v46 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountUUID]);
    uint64_t v43 = v20;
    uint64_t v44 = v21;
    id v41 = v19;
    id v42 = v5;
    id v39 = v17;
    id v40 = v18;
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDAccount",  @"IDSUTunDeliveryController sendMessage %@ deviceID %@ succeeded? %@ response %ld topic: %@ - current pending sends local %@ fallback %@ account %@");
  }

  if (v5)
  {
    if (*(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL)) {
      goto LABEL_16;
    }
    *(void *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL) = v5;
    unsigned int v22 = objc_alloc(&OBJC_CLASS___NSError);
    uint64_t v23 = -[NSError initWithDomain:code:userInfo:](v22, "initWithDomain:code:userInfo:", IDSSendErrorDomain, v5, 0LL);
    uint64_t v24 = *(void *)(*(void *)(a1 + 72) + 8LL);
    uint64_t v25 = *(void **)(v24 + 40);
    *(void *)(v24 + 40) = v23;
  }

  else
  {
    *(void *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL) = 0LL;
    uint64_t v26 = *(void *)(*(void *)(a1 + 72) + 8LL);
    uint64_t v25 = *(void **)(v26 + 40);
    *(void *)(v26 + 40) = 0LL;
  }

LABEL_16:
  BOOL v27 = v5 == 0LL;
  id v28 = objc_msgSend(*(id *)(a1 + 48), "count", v39, v40, v41, v42, v43, v44, v45, v46, *(_OWORD *)buf);
  uint64_t v29 = (uint64_t)[*(id *)(a1 + 56) count];
  uint64_t v30 = *(void **)(a1 + 48);
  uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v3 deviceID]);
  [v30 removeObject:v31];

  if (v27)
  {
    id v32 = *(void **)(a1 + 56);
    uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([v3 deviceID]);
    [v32 removeObject:v33];
  }

  BOOL v34 = v28 != (id)-v29;
  id v35 = [*(id *)(a1 + 48) count];
  else {
    BOOL v36 = v34;
  }
  if (v36)
  {
    if (*(void *)(a1 + 64))
    {
      [v3 setIdsResponseCode:*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 24)];
      [v3 setResponseError:*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40)];
      [v3 setLastCall:1];
      (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
    }

    uint64_t v37 = *(void *)(*(void *)(a1 + 72) + 8LL);
    unsigned __int8 v38 = *(void **)(v37 + 40);
    *(void *)(v37 + 40) = 0LL;
  }
}

LABEL_257:
}

id sub_1002CF844(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 hasPrefix:@"self-token:"])
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 _stripFZIDPrefix]);
    id v5 = (char *)[v4 rangeOfString:@"/"];
    else {
      id v6 = (id)objc_claimAutoreleasedReturnValue([v4 substringToIndex:v5]);
    }
    id v8 = v6;
    id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSData __imDataWithHexString:](&OBJC_CLASS___NSData, "__imDataWithHexString:", v6));
    if ([v4 length] <= v5 + 1)
    {
      id v14 = *(id *)(a1 + 48);
      uint64_t v15 = v14;
      if (v14)
      {
        id v13 = v14;
      }

      else
      {
        id v16 = *(id *)(a1 + 56);
        if ([v16 count]) {
          id v13 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "__imFirstObject"));
        }
        else {
          id v13 = 0LL;
        }
      }
    }

    else
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "substringFromIndex:"));
      if ((objc_msgSend( (id)objc_opt_class(*(void *)(a1 + 64), v11),  "dependentRegistration:hasDependentRegistrationWithURI:token:",  *(void *)(a1 + 32),  v10,  v9) & 1) != 0 || objc_msgSend( (id)objc_opt_class(*(void *)(a1 + 64), v12),  "dependentRegistration:hasDependentRegistrationWithURI:token:",  *(void *)(a1 + 40),  v10,  v9))
      {
        id v13 = v10;
      }

      else
      {
        uint64_t v17 = OSLogHandleForIDSCategory("IDSDAccount");
        uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          id v26 = v3;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Couldn't resolve %@ to a valid dependent registration.",  buf,  0xCu);
        }

        if (os_log_shim_legacy_logging_enabled(v19)
          && _IDSShouldLog(0LL, @"IDSDAccount"))
        {
          id v24 = v3;
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDAccount",  @"Couldn't resolve %@ to a valid dependent registration.");
        }

        id v13 = 0LL;
      }
    }

    if (objc_msgSend(v9, "length", v24) && objc_msgSend(v13, "length"))
    {
      id v7 = (id)_IDSCopyIDForTokenWithURI(v9, v13);
    }

    else
    {
      uint64_t v20 = OSLogHandleForIDSCategory("Warning");
      uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        id v26 = v3;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "Could not construct a destination for %@",  buf,  0xCu);
      }

      if (os_log_shim_legacy_logging_enabled(v22))
      {
        _IDSWarnV(@"IDSFoundation", @"Could not construct a destination for %@");
        _IDSLogV(0LL, @"IDSFoundation", @"Warning", @"Could not construct a destination for %@");
        _IDSLogTransport(@"Warning", @"IDS", @"Could not construct a destination for %@");
      }

      id v7 = 0LL;
    }
  }

  else
  {
    id v7 = v3;
  }

  return v7;
}

id sub_1002CFBBC(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 identifier]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[IDSURI URIWithPrefixedURI:withServiceLoggingHint:]( &OBJC_CLASS___IDSURI,  "URIWithPrefixedURI:withServiceLoggingHint:",  v3,  v4));

  return v5;
}

void sub_1002CFC24(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (!*(_BYTE *)(a1 + 80))
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v3 lastCall];
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 responseError]);
    if (v5)
    {
      uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);

      if (!v6)
      {
        uint64_t v7 = objc_claimAutoreleasedReturnValue([v4 responseError]);
        uint64_t v8 = *(void *)(*(void *)(a1 + 56) + 8LL);
        id v9 = *(void **)(v8 + 40);
        *(void *)(v8 + 40) = v7;

        *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = [v4 idsResponseCode];
      }
    }

    uint64_t v10 = OSLogHandleForIDSCategory("IDSDAccount");
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      id v12 = [v4 idsResponseCode];
      id v13 = (id)objc_claimAutoreleasedReturnValue([v4 responseError]);
      unsigned int v14 = [v4 lastCall];
      uint64_t v15 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL);
      uint64_t v16 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
      uint64_t v17 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountUUID]);
      uint64_t v18 = (void *)v17;
      uint64_t v19 = @"NO";
      *(_DWORD *)buf = 134219266;
      *(void *)&uint8_t buf[4] = v12;
      *(_WORD *)&buf[12] = 2112;
      if (v14) {
        uint64_t v19 = @"YES";
      }
      *(void *)&buf[14] = v13;
      __int16 v35 = 2112;
      BOOL v36 = v19;
      __int16 v37 = 2048;
      uint64_t v38 = v15;
      __int16 v39 = 2112;
      uint64_t v40 = v16;
      __int16 v41 = 2112;
      uint64_t v42 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Local send completion block {responseCode: %ld, error: %@, lastCall: %@, combinedResponseCode: %ld, combinedErro r: %@, account: %@}",  buf,  0x3Eu);
    }

    if (os_log_shim_legacy_logging_enabled(v20) && _IDSShouldLog(0LL, @"IDSDAccount"))
    {
      id v21 = [v4 idsResponseCode];
      uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v4 responseError]);
      else {
        uint64_t v23 = @"NO";
      }
      uint64_t v24 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL);
      uint64_t v32 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
      uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountUUID]);
      uint64_t v30 = v23;
      uint64_t v31 = v24;
      id v28 = v21;
      uint64_t v29 = v22;
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDAccount",  @"Local send completion block {responseCode: %ld, error: %@, lastCall: %@, combinedResponseCode: %ld, combinedError: %@, account: %@}");
    }

    if (*(void *)(a1 + 40))
    {
      if (*(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL)) {
        BOOL v25 = *(_BYTE *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL) != 0;
      }
      else {
        BOOL v25 = 0LL;
      }
      objc_msgSend( v4,  "setIdsResponseCode:",  *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24),  v28,  v29,  v30,  v31,  v32,  v33,  *(_OWORD *)buf);
      [v4 setResponseError:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
      [v4 setLastCall:v25];
      (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
      if (v25)
      {
        uint64_t v26 = *(void *)(*(void *)(a1 + 56) + 8LL);
        BOOL v27 = *(void **)(v26 + 40);
        *(void *)(v26 + 40) = 0LL;
      }
    }
  }
}

void sub_1002CFF70(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v12 = a2;
  id v7 = a3;
  id v8 = a4;
  if ([*(id *)(a1 + 32) count])
  {
    if (v12)
    {
      id v9 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
      -[NSMutableSet addObjectsFromArray:](v9, "addObjectsFromArray:", v12);
      id v10 = *(id *)(a1 + 40);
      if (!v10)
      {
LABEL_10:
        id v11 = (id)objc_claimAutoreleasedReturnValue(-[NSMutableSet allObjects](v9, "allObjects"));

        goto LABEL_11;
      }

      if (v9)
      {
LABEL_9:
        -[NSMutableSet addObjectsFromArray:](v9, "addObjectsFromArray:", v10);
        goto LABEL_10;
      }
    }

    else
    {
      id v10 = *(id *)(a1 + 40);
      if (!v10)
      {
        id v9 = 0LL;
        goto LABEL_10;
      }
    }

    id v9 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
    goto LABEL_9;
  }

  id v11 = v12;
LABEL_11:
  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_1002D0088(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 144) == 2 && *(_BYTE *)(a1 + 148))
  {
    uint64_t v2 = OSLogHandleForIDSCategory("IDSDAccount");
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dictionaryRepresentation]);
      *(_DWORD *)buf = 138412290;
      uint64_t v47 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Attempted to send to remote destiantions on a local account, we are allowed to proxy, beginning proxy transactio n, The params are %@",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v5) && _IDSShouldLog(0LL, @"IDSDAccount"))
    {
      __int16 v35 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dictionaryRepresentation]);
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDAccount",  @"Attempted to send to remote destiantions on a local account, we are allowed to proxy, beginning proxy transaction, The params are %@");
    }

    objc_msgSend(*(id *)(a1 + 32), "setIsProxiedOutgoingMessage:", 1, v35);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) destinations]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  v6,  0LL,  0LL));

    [*(id *)(a1 + 32) setGroupData:v7];
    [*(id *)(a1 + 32) setDestinations:0];
    id v8 = (NSError *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dictionaryRepresentation]);
    id v9 = (IDSDeliveryContext *)objc_alloc_init(&OBJC_CLASS___IDSSendParameters);
    -[IDSDeliveryContext setMessage:](v9, "setMessage:", v8);
    id v10 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDestination defaultPairedDeviceDestination]( &OBJC_CLASS___IDSDestination,  "defaultPairedDeviceDestination"));
    -[IDSDeliveryContext setDestinations:](v9, "setDestinations:", v10);

    -[IDSDeliveryContext setCommand:](v9, "setCommand:", &off_100947938);
    -[IDSDeliveryContext setPriority:](v9, "setPriority:", 300LL);
    uint64_t v11 = OSLogHandleForIDSCategory("IDSDAccount");
    id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      id v13 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDeliveryContext dictionaryRepresentation](v9, "dictionaryRepresentation"));
      *(_DWORD *)buf = 138412290;
      uint64_t v47 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "The new params we will send locally are are %@",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v14) && _IDSShouldLog(0LL, @"IDSDAccount"))
    {
      BOOL v36 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDeliveryContext dictionaryRepresentation](v9, "dictionaryRepresentation"));
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDAccount",  @"The new params we will send locally are are %@");
    }

    uint64_t v15 = *(void **)(a1 + 136);
    uint64_t v16 = *(void *)(a1 + 40);
    uint64_t v17 = *(void *)(a1 + 48);
    v44[0] = _NSConcreteStackBlock;
    v44[1] = 3221225472LL;
    v44[2] = sub_1002D0740;
    v44[3] = &unk_1008FA288;
    uint64_t v18 = *(void *)(a1 + 80);
    id v45 = *(id *)(a1 + 88);
    [v15 sendMessageWithSendParameters:v9 service:v16 threadContext:v17 willSendBlock:&stru_1008FFF50 progressBlock:v18 completionBlock:v44];
  }

  else
  {
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountUUID]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v19 accountWithUniqueID:v20]);

    if (v7)
    {
      id v8 = (NSError *)[*(id *)(a1 + 32) copy];
      id v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "__imArrayByApplyingBlock:", &stru_1008FFF90));
      -[NSError setFinalDestinationURIs:](v8, "setFinalDestinationURIs:", v21);

      uint64_t v22 = *(void *)(a1 + 64);
      uint64_t v23 = *(void *)(a1 + 72);
      v38[0] = _NSConcreteStackBlock;
      v38[1] = 3221225472LL;
      v38[2] = sub_1002D0838;
      v38[3] = &unk_1008FFFB8;
      uint64_t v24 = *(void *)(a1 + 136);
      __int128 v40 = *(_OWORD *)(a1 + 104);
      uint64_t v25 = *(void *)(a1 + 120);
      uint64_t v43 = v24;
      uint64_t v41 = v25;
      uint64_t v26 = *(void *)(a1 + 96);
      BOOL v27 = (IDSDeliveryContext *)*(id *)(a1 + 88);
      uint64_t v28 = *(void *)(a1 + 128);
      __int16 v39 = v27;
      uint64_t v42 = v28;
      [v7 _sendRemotelyWithSendParameters:v8 data:v22 protobuf:v23 willSendBlock:v26 completionBlock:v38];
      id v9 = v39;
    }

    else
    {
      uint64_t v29 = OSLogHandleForIDSCategory("IDSDaemon");
      uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountUUID]);
        *(_DWORD *)buf = 138412290;
        uint64_t v47 = v31;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "No account found for ID: %@", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled(v32) && _IDSShouldLog(0LL, @"IDSDaemon"))
      {
        __int16 v37 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountUUID]);
        _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon", @"No account found for ID: %@");
      }

      IMLogBacktrace(@"IDSDaemon");
      uint64_t v33 = objc_alloc(&OBJC_CLASS___NSError);
      id v8 = -[NSError initWithDomain:code:userInfo:](v33, "initWithDomain:code:userInfo:", IDSSendErrorDomain, 2LL, 0LL);
      id v9 = -[IDSDeliveryContext initWithResponseCode:error:lastCall:]( objc_alloc(&OBJC_CLASS___IDSDeliveryContext),  "initWithResponseCode:error:lastCall:",  2LL,  v8,  1LL);
      uint64_t v34 = *(void *)(a1 + 88);
      if (v34) {
        (*(void (**)(uint64_t, IDSDeliveryContext *))(v34 + 16))(v34, v9);
      }
    }
  }
}

void sub_1002D0600(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1002D04FCLL);
  }

  _Unwind_Resume(a1);
}

void sub_1002D064C(id a1, NSArray *a2, NSArray *a3, NSDictionary *a4)
{
  uint64_t v6 = a2;
  id v7 = a3;
  id v8 = a4;
  uint64_t v9 = OSLogHandleForIDSCategory("IDSDAccount");
  id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Will Send Block", v12, 2u);
  }
}

void sub_1002D0740(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = OSLogHandleForIDSCategory("IDSDAccount");
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v7 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Completiom Send Block of message called, ",  v7,  2u);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

IDSURI *__cdecl sub_1002D0828(id a1, NSString *a2)
{
  return +[IDSURI URIWithPrefixedURI:](&OBJC_CLASS___IDSURI, "URIWithPrefixedURI:", a2);
}

void sub_1002D0838(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = OSLogHandleForIDSCategory("IDSDAccount");
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = a1[9];
    id v7 = [v3 idsResponseCode];
    id v8 = (id)objc_claimAutoreleasedReturnValue([v3 responseError]);
    unsigned int v9 = [v3 lastCall];
    id v10 = @"NO";
    *(_DWORD *)buf = 138413058;
    *(void *)&uint8_t buf[4] = v6;
    *(_WORD *)&buf[12] = 2048;
    if (v9) {
      id v10 = @"YES";
    }
    *(void *)&buf[14] = v7;
    __int16 v42 = 2112;
    id v43 = v8;
    __int16 v44 = 2112;
    id v45 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%@ Remote send completion block with responseCode %ld error %@ lastCall %@",  buf,  0x2Au);
  }

  if (os_log_shim_legacy_logging_enabled(v11) && _IDSShouldLog(0LL, @"IDSDAccount"))
  {
    uint64_t v12 = a1[9];
    id v13 = [v3 idsResponseCode];
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v3 responseError]);
    unsigned int v15 = [v3 lastCall];
    uint64_t v16 = @"NO";
    if (v15) {
      uint64_t v16 = @"YES";
    }
    __int16 v37 = v14;
    __int16 v39 = v16;
    uint64_t v33 = v12;
    id v35 = v13;
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDAccount",  @"%@ Remote send completion block with responseCode %ld error %@ lastCall %@");
  }

  *(_BYTE *)(*(void *)(a1[5] + 8) + 24) = objc_msgSend( v3,  "lastCall",  v33,  v35,  v37,  v39,  *(_OWORD *)buf);
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v3 responseError]);
  if (v17)
  {
    BOOL v18 = *(void *)(*(void *)(a1[6] + 8LL) + 40LL) == 0LL;

    if (v18)
    {
      uint64_t v19 = objc_claimAutoreleasedReturnValue([v3 responseError]);
      uint64_t v20 = *(void *)(a1[6] + 8LL);
      id v21 = *(void **)(v20 + 40);
      *(void *)(v20 + 40) = v19;

      *(void *)(*(void *)(a1[7] + 8) + 24) = [v3 idsResponseCode];
    }
  }

  if (a1[4])
  {
    if (*(_BYTE *)(*(void *)(a1[8] + 8LL) + 24LL)) {
      BOOL v22 = *(_BYTE *)(*(void *)(a1[5] + 8LL) + 24LL) != 0;
    }
    else {
      BOOL v22 = 0LL;
    }
    uint64_t v23 = OSLogHandleForIDSCategory("IDSDAccount");
    uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v25 = a1[9];
      uint64_t v26 = *(void *)(*(void *)(a1[7] + 8LL) + 24LL);
      BOOL v27 = *(void **)(*(void *)(a1[6] + 8LL) + 40LL);
      uint64_t v28 = @"NO";
      if (v22) {
        uint64_t v28 = @"YES";
      }
      *(_DWORD *)buf = 138413058;
      *(void *)&uint8_t buf[4] = v25;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v26;
      __int16 v42 = 2112;
      id v43 = v27;
      __int16 v44 = 2112;
      id v45 = v28;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "%@ calling combined completion block responseCode %ld error %@ lastCall %@",  buf,  0x2Au);
    }

    if (os_log_shim_legacy_logging_enabled(v29) && _IDSShouldLog(0LL, @"IDSDAccount"))
    {
      uint64_t v30 = @"NO";
      if (v22) {
        uint64_t v30 = @"YES";
      }
      uint64_t v38 = *(void *)(*(void *)(a1[6] + 8LL) + 40LL);
      __int128 v40 = v30;
      uint64_t v34 = a1[9];
      uint64_t v36 = *(void *)(*(void *)(a1[7] + 8LL) + 24LL);
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDAccount",  @"%@ calling combined completion block responseCode %ld error %@ lastCall %@");
    }

    objc_msgSend(v3, "setIdsResponseCode:", *(void *)(*(void *)(a1[7] + 8) + 24), v34, v36, v38, v40);
    [v3 setResponseError:*(void *)(*(void *)(a1[6] + 8) + 40)];
    [v3 setLastCall:v22];
    (*(void (**)(void))(a1[4] + 16LL))();
    if (v22)
    {
      uint64_t v31 = *(void *)(a1[6] + 8LL);
      uint64_t v32 = *(void **)(v31 + 40);
      *(void *)(v31 + 40) = 0LL;
    }
  }
}

id sub_1002D1AD4(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 24LL);
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 identifier]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[IDSURI URIWithPrefixedURI:withServiceLoggingHint:]( &OBJC_CLASS___IDSURI,  "URIWithPrefixedURI:withServiceLoggingHint:",  v3,  v4));

  return v5;
}

void sub_1002D1B4C(uint64_t a1, void *a2)
{
  id v3 = a2;
  im_assert_primary_base_queue(v3, v4);
  if (!*(_BYTE *)(a1 + 80) || *(_BYTE *)(a1 + 81))
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v3 lastCall];
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 responseError]);
    if (v5)
    {
      uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);

      if (!v6)
      {
        uint64_t v7 = objc_claimAutoreleasedReturnValue([v3 responseError]);
        uint64_t v8 = *(void *)(*(void *)(a1 + 56) + 8LL);
        unsigned int v9 = *(void **)(v8 + 40);
        *(void *)(v8 + 40) = v7;

        *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = [v3 idsResponseCode];
      }
    }

    uint64_t v10 = OSLogHandleForIDSCategory("IDSDAccount");
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      id v12 = [v3 idsResponseCode];
      id v13 = (id)objc_claimAutoreleasedReturnValue([v3 responseError]);
      unsigned int v14 = [v3 lastCall];
      uint64_t v15 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL);
      uint64_t v16 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
      uint64_t v17 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uniqueID]);
      BOOL v18 = (void *)v17;
      uint64_t v19 = @"NO";
      *(_DWORD *)buf = 134219266;
      *(void *)&uint8_t buf[4] = v12;
      *(_WORD *)&buf[12] = 2112;
      if (v14) {
        uint64_t v19 = @"YES";
      }
      *(void *)&buf[14] = v13;
      __int16 v35 = 2112;
      uint64_t v36 = v19;
      __int16 v37 = 2048;
      uint64_t v38 = v15;
      __int16 v39 = 2112;
      uint64_t v40 = v16;
      __int16 v41 = 2112;
      uint64_t v42 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Local send completion block {responseCode: %ld, error: %@, lastCall: %@, combinedResponseCode: %ld, combinedErro r: %@, account: %@}",  buf,  0x3Eu);
    }

    if (os_log_shim_legacy_logging_enabled(v20) && _IDSShouldLog(0LL, @"IDSDAccount"))
    {
      id v21 = [v3 idsResponseCode];
      BOOL v22 = (void *)objc_claimAutoreleasedReturnValue([v3 responseError]);
      else {
        uint64_t v23 = @"NO";
      }
      uint64_t v24 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL);
      uint64_t v32 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
      uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uniqueID]);
      uint64_t v30 = v23;
      uint64_t v31 = v24;
      id v28 = v21;
      uint64_t v29 = v22;
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDAccount",  @"Local send completion block {responseCode: %ld, error: %@, lastCall: %@, combinedResponseCode: %ld, combinedError: %@, account: %@}");
    }

    if (*(void *)(a1 + 40))
    {
      if (*(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL)) {
        BOOL v25 = *(_BYTE *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL) != 0;
      }
      else {
        BOOL v25 = 0LL;
      }
      objc_msgSend( v3,  "setIdsResponseCode:",  *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24),  v28,  v29,  v30,  v31,  v32,  v33,  *(_OWORD *)buf);
      [v3 setResponseError:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
      [v3 setLastCall:v25];
      (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
      if (v25)
      {
        uint64_t v26 = *(void *)(*(void *)(a1 + 56) + 8LL);
        BOOL v27 = *(void **)(v26 + 40);
        *(void *)(v26 + 40) = 0LL;
      }
    }
  }
}

IDSURI *__cdecl sub_1002D1EA0(id a1, NSString *a2)
{
  return +[IDSURI URIWithPrefixedURI:](&OBJC_CLASS___IDSURI, "URIWithPrefixedURI:", a2);
}

uint64_t sub_1002D1EB0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1002D1EBC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v12 = a2;
  id v7 = a3;
  id v8 = a4;
  if ([*(id *)(a1 + 32) count])
  {
    if (v12)
    {
      unsigned int v9 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
      -[NSMutableSet addObjectsFromArray:](v9, "addObjectsFromArray:", v12);
      id v10 = *(id *)(a1 + 40);
      if (!v10)
      {
LABEL_10:
        id v11 = (id)objc_claimAutoreleasedReturnValue(-[NSMutableSet allObjects](v9, "allObjects"));

        goto LABEL_11;
      }

      if (v9)
      {
LABEL_9:
        -[NSMutableSet addObjectsFromArray:](v9, "addObjectsFromArray:", v10);
        goto LABEL_10;
      }
    }

    else
    {
      id v10 = *(id *)(a1 + 40);
      if (!v10)
      {
        unsigned int v9 = 0LL;
        goto LABEL_10;
      }
    }

    unsigned int v9 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
    goto LABEL_9;
  }

  id v11 = v12;
LABEL_11:
  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

IDSURI *__cdecl sub_1002D1FD4(id a1, NSString *a2)
{
  return +[IDSURI URIWithPrefixedURI:](&OBJC_CLASS___IDSURI, "URIWithPrefixedURI:", a2);
}

void sub_1002D1FE4(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = OSLogHandleForIDSCategory("IDSDAccount");
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = a1[4];
    id v7 = [v3 idsResponseCode];
    id v8 = (id)objc_claimAutoreleasedReturnValue([v3 responseError]);
    unsigned int v9 = [v3 lastCall];
    id v10 = @"NO";
    *(_DWORD *)buf = 138413058;
    *(void *)&uint8_t buf[4] = v6;
    *(_WORD *)&buf[12] = 2048;
    if (v9) {
      id v10 = @"YES";
    }
    *(void *)&buf[14] = v7;
    __int16 v40 = 2112;
    id v41 = v8;
    __int16 v42 = 2112;
    id v43 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%@ Remote send completion block with responseCode %ld error %@ lastCall %@",  buf,  0x2Au);
  }

  if (os_log_shim_legacy_logging_enabled(v11) && _IDSShouldLog(0LL, @"IDSDAccount"))
  {
    uint64_t v12 = a1[4];
    id v13 = [v3 idsResponseCode];
    unsigned int v14 = (void *)objc_claimAutoreleasedReturnValue([v3 responseError]);
    unsigned int v15 = [v3 lastCall];
    uint64_t v16 = @"NO";
    if (v15) {
      uint64_t v16 = @"YES";
    }
    __int16 v37 = v14;
    uint64_t v38 = v16;
    uint64_t v35 = v12;
    id v36 = v13;
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDAccount",  @"%@ Remote send completion block with responseCode %ld error %@ lastCall %@");
  }

  *(_BYTE *)(*(void *)(a1[6] + 8) + 24) = objc_msgSend( v3,  "lastCall",  v35,  v36,  v37,  v38,  *(_OWORD *)buf);
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v3 responseError]);
  if (v17)
  {
    BOOL v18 = *(void *)(*(void *)(a1[7] + 8LL) + 40LL) == 0LL;

    if (v18)
    {
      uint64_t v19 = objc_claimAutoreleasedReturnValue([v3 responseError]);
      uint64_t v20 = *(void *)(a1[7] + 8LL);
      id v21 = *(void **)(v20 + 40);
      *(void *)(v20 + 40) = v19;

      *(void *)(*(void *)(a1[8] + 8) + 24) = [v3 idsResponseCode];
    }
  }

  if (a1[5])
  {
    if (*(_BYTE *)(*(void *)(a1[9] + 8LL) + 24LL)) {
      BOOL v22 = *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) != 0;
    }
    else {
      BOOL v22 = 0LL;
    }
    uint64_t v23 = OSLogHandleForIDSCategory("IDSDAccount");
    uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v25 = a1[4];
      uint64_t v26 = *(void *)(*(void *)(a1[8] + 8LL) + 24LL);
      BOOL v27 = *(void **)(*(void *)(a1[7] + 8LL) + 40LL);
      id v28 = @"NO";
      if (v22) {
        id v28 = @"YES";
      }
      *(_DWORD *)buf = 138413058;
      *(void *)&uint8_t buf[4] = v25;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v26;
      __int16 v40 = 2112;
      id v41 = v27;
      __int16 v42 = 2112;
      id v43 = v28;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "%@ calling combined completion block responseCode %ld error %@ lastCall %@",  buf,  0x2Au);
    }

    if (os_log_shim_legacy_logging_enabled(v29) && _IDSShouldLog(0LL, @"IDSDAccount")) {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDAccount",  @"%@ calling combined completion block responseCode %ld error %@ lastCall %@");
    }
    uint64_t v30 = -[IDSDeliveryContext initWithResponseCode:error:lastCall:]( objc_alloc(&OBJC_CLASS___IDSDeliveryContext),  "initWithResponseCode:error:lastCall:",  *(void *)(*(void *)(a1[8] + 8LL) + 24LL),  *(void *)(*(void *)(a1[7] + 8LL) + 40LL),  v22);
    -[IDSDeliveryContext setLastCourierAck:](v30, "setLastCourierAck:", [v3 lastCourierAck]);
    (*(void (**)(void, IDSDeliveryContext *, uint64_t, uint64_t))(a1[5] + 16LL))(a1[5], v30, v31, v32);
    if (v22)
    {
      uint64_t v33 = *(void *)(a1[7] + 8LL);
      uint64_t v34 = *(void **)(v33 + 40);
      *(void *)(v33 + 40) = 0LL;
    }
  }
}

void sub_1002D2628(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 idsResponseCode])
  {
    uint64_t v4 = OSLogHandleForIDSCategory("IDSDaemon");
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      id v7 = [v3 idsResponseCode];
      id v8 = (void *)objc_claimAutoreleasedReturnValue([v3 responseError]);
      *(_DWORD *)buf = 138412802;
      uint64_t v18 = v6;
      __int16 v19 = 2048;
      id v20 = v7;
      __int16 v21 = 2112;
      BOOL v22 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Failed sending server message request response for topic %@. Result code %ld. Error %@.",  buf,  0x20u);
    }

    if (os_log_shim_legacy_logging_enabled(v9) && _IDSShouldLog(0LL, @"IDSDaemon"))
    {
      [v3 idsResponseCode];
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v3 responseError]);
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Failed sending server message request response for topic %@. Result code %ld. Error %@.");
LABEL_12:
    }
  }

  else
  {
    uint64_t v12 = OSLogHandleForIDSCategory("IDSDaemon");
    id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = *(void *)(a1 + 32);
      unsigned int v15 = (void *)objc_claimAutoreleasedReturnValue([v3 responseError]);
      *(_DWORD *)buf = 138412546;
      uint64_t v18 = v14;
      __int16 v19 = 2112;
      id v20 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Finished sending server message request response for topic %@  [%@]",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v16) && _IDSShouldLog(0LL, @"IDSDaemon"))
    {
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v3 responseError]);
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Finished sending server message request response for topic %@  [%@]");
      goto LABEL_12;
    }
  }

  (*(void (**)(void, id, uint64_t))(*(void *)(a1 + 40) + 16LL))(*(void *)(a1 + 40), v3, v10);
}

id sub_1002D4758(id a1, NSDictionary *a2)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary _stringForKey:](a2, "_stringForKey:", IDSDevicePropertyIdentitiesURI));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 _stripFZIDPrefix]);

  return v3;
}

id sub_1002D47A0(id a1, NSDictionary *a2)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary _stringForKey:](a2, "_stringForKey:", IDSDevicePropertyIdentitiesURI));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 _stripFZIDPrefix]);

  return v3;
}

id sub_1002D47E8(uint64_t a1)
{
  return [*(id *)(a1 + 32) enableCloudConnection];
}

void sub_1002D47F0(id a1)
{
  int v1 = IMGetDomainBoolForKey(@"com.apple.ids", @"DisableLocalDelivery");
  byte_1009C0A60 = v1;
  if (v1)
  {
    uint64_t v2 = OSLogHandleForIDSCategory("Warning");
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "**** Local IDS connectivity is disabled, only using cloud ****",  v5,  2u);
    }

    if (os_log_shim_legacy_logging_enabled(v4))
    {
      _IDSWarnV(@"IDSFoundation", @"**** Local IDS connectivity is disabled, only using cloud ****");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"**** Local IDS connectivity is disabled, only using cloud ****");
      _IDSLogTransport( @"Warning",  @"IDS",  @"**** Local IDS connectivity is disabled, only using cloud ****");
    }
  }

id sub_1002D5478(id a1, id a2)
{
  return [a2 objectForKey:IDSDevicePairedDeviceID];
}

void sub_1002D548C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  im_assert_primary_base_queue(v6, v7);
  uint64_t v8 = *(void *)(*(void *)(*(void *)(a1 + 104) + 8LL) + 40LL);
  unsigned int v9 = [*(id *)(a1 + 32) containsObject:v6];
  unsigned int v10 = [*(id *)(a1 + 40) containsObject:v6];
  unsigned int v11 = v10;
  if (v8 || (v9 & 1) != 0 || !v10)
  {
    uint64_t v18 = OSLogHandleForIDSCategory("IDSDAccount");
    __int16 v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      id v20 = @"NO";
      *(_DWORD *)buf = 138413314;
      id v69 = v5;
      if (v8) {
        __int16 v21 = @"YES";
      }
      else {
        __int16 v21 = @"NO";
      }
      if (v9) {
        BOOL v22 = @"YES";
      }
      else {
        BOOL v22 = @"NO";
      }
      if (!v11) {
        id v20 = @"YES";
      }
      __int16 v70 = 2112;
      id v71 = v6;
      __int16 v72 = 2112;
      __int16 v73 = v21;
      __int16 v74 = 2112;
      __int16 v75 = v22;
      __int16 v76 = 2112;
      __int16 v77 = v20;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Fallback won't sent for %@ %@  alreadyFailed %@ alreadySending %@ alreadyComplete %@",  buf,  0x34u);
    }

    if (os_log_shim_legacy_logging_enabled(v23) && _IDSShouldLog(0LL, @"IDSDAccount")) {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDAccount",  @"Fallback won't sent for %@ %@  alreadyFailed %@ alreadySending %@ alreadyComplete %@");
    }
  }

  else
  {
    unsigned __int8 v12 = [*(id *)(a1 + 48) localDelivery];
    if (!v6
      || (v12 & 1) != 0
      || ([v5 isEqualToString:IDSDefaultPairedDevice] & 1) != 0
      || [v5 localizedCaseInsensitiveContainsString:@"__localURI__"])
    {
      uint64_t v13 = OSLogHandleForIDSCategory("IDSDAccount");
      uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v15 = [*(id *)(a1 + 48) localDelivery];
        uint64_t v16 = @"NO";
        *(_DWORD *)buf = 138412802;
        id v69 = v5;
        __int16 v70 = 2112;
        if (v15) {
          uint64_t v16 = @"YES";
        }
        id v71 = v6;
        __int16 v72 = 2112;
        __int16 v73 = v16;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Ignoring request to fallback for %@ %@ forcedLocal %@",  buf,  0x20u);
      }

      if (os_log_shim_legacy_logging_enabled(v17)
        && _IDSShouldLog(0LL, @"IDSDAccount"))
      {
        [*(id *)(a1 + 48) localDelivery];
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDAccount",  @"Ignoring request to fallback for %@ %@ forcedLocal %@");
      }
    }

    else
    {
      uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(+[IDSTrafficMonitor sharedInstance](&OBJC_CLASS___IDSTrafficMonitor, "sharedInstance"));
      uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) service]);
      uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v25 identifier]);
      BOOL v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) service]);
      unsigned __int8 v28 = objc_msgSend( v24,  "noteOutgoingFallbackMessageForService:serviceType:requestor:",  v26,  objc_msgSend(v27, "adHocServiceType"),  0);

      if ((v28 & 1) != 0)
      {
        v57[0] = _NSConcreteStackBlock;
        v57[1] = 3221225472LL;
        v57[2] = sub_1002D5CA0;
        v57[3] = &unk_1008FFE48;
        id v58 = *(id *)(a1 + 48);
        id v29 = v5;
        id v59 = v29;
        uint64_t v30 = (const __CFString *)v6;
        uint64_t v60 = (__CFString *)v30;
        id v61 = *(id *)(a1 + 40);
        id v62 = *(id *)(a1 + 32);
        __int128 v66 = *(_OWORD *)(a1 + 104);
        id v31 = *(id *)(a1 + 64);
        uint64_t v32 = *(void *)(a1 + 120);
        id v63 = v31;
        uint64_t v67 = v32;
        id v64 = *(id *)(a1 + 72);
        id v65 = *(id *)(a1 + 96);
        __int16 v56 = objc_retainBlock(v57);
        id v33 = [*(id *)(a1 + 48) copy];
        uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue(+[IDSURI URIWithPrefixedURI:](&OBJC_CLASS___IDSURI, "URIWithPrefixedURI:", v29));
        uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObject:](&OBJC_CLASS___NSArray, "arrayWithObject:", v34));
        [v33 setFinalDestinationURIs:v35];

        [v33 setWantsResponse:1];
        if ([v33 priority] == (id)200) {
          [v33 setPriority:300];
        }
        uint64_t v36 = OSLogHandleForTransportCategory("IDSDAccount");
        __int16 v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
        if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
        {
          id v38 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) messageUUID]);
          __int16 v39 = (__CFString *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) uniqueID]);
          *(_DWORD *)buf = 138413058;
          id v69 = v38;
          __int16 v70 = 2112;
          id v71 = v29;
          __int16 v72 = 2112;
          __int16 v73 = v30;
          __int16 v74 = 2112;
          __int16 v75 = v39;
          _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "Initiating fallback send for message %@ to %@ %@ from account %@",  buf,  0x2Au);
        }

        uint64_t v41 = os_log_shim_legacy_logging_enabled(v40);
        if ((_DWORD)v41)
        {
          if (_IDSShouldLogTransport(v41))
          {
            __int16 v42 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) messageUUID]);
            uint64_t v53 = v30;
            uint64_t v55 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) uniqueID]);
            id v51 = v42;
            id v52 = v29;
            _IDSLogTransport( @"IDSDAccount",  @"IDS",  @"Initiating fallback send for message %@ to %@ %@ from account %@");

            if (_IDSShouldLog(0LL, @"IDSDAccount"))
            {
              id v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "messageUUID", v42, v29, v30, v55));
              uint64_t v53 = v30;
              uint64_t v55 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) uniqueID]);
              id v51 = v43;
              id v52 = v29;
              _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDAccount",  @"Initiating fallback send for message %@ to %@ %@ from account %@");
            }
          }
        }

        objc_msgSend(*(id *)(a1 + 32), "addObject:", v30, v51, v52, v53, v55);
        [*(id *)(a1 + 56) _sendRemotelyWithSendParameters:v33 data:*(void *)(a1 + 80) protobuf:*(void *)(a1 + 88) willSendBlock:0 completionBlock:v56];
      }

      else
      {
        uint64_t v44 = OSLogHandleForTransportCategory("IDSDAccount");
        id v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v44);
        if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v46 = [*(id *)(a1 + 48) localDelivery];
          uint64_t v47 = @"NO";
          *(_DWORD *)buf = 138412802;
          id v69 = v5;
          __int16 v70 = 2112;
          if (v46) {
            uint64_t v47 = @"YES";
          }
          id v71 = v6;
          __int16 v72 = 2112;
          __int16 v73 = v47;
          _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEFAULT,  "Ignoring request to fallback for %@ %@ forcedLocal %@ due to budget restrictions.",  buf,  0x20u);
        }

        uint64_t v49 = os_log_shim_legacy_logging_enabled(v48);
        if ((_DWORD)v49 && _IDSShouldLogTransport(v49))
        {
          __int16 v50 = [*(id *)(a1 + 48) localDelivery] ? @"YES" : @"NO";
          __int16 v54 = v50;
          _IDSLogTransport( @"IDSDAccount",  @"IDS",  @"Ignoring request to fallback for %@ %@ forcedLocal %@ due to budget restrictions.");
          if (_IDSShouldLog(0LL, @"IDSDAccount"))
          {
            objc_msgSend(*(id *)(a1 + 48), "localDelivery", v5, v6, v54);
            _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDAccount",  @"Ignoring request to fallback for %@ %@ forcedLocal %@ due to budget restrictions.");
          }
        }
      }
    }
  }
}

void sub_1002D5C40(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1002D5B98LL);
  }

  _Unwind_Resume(a1);
}

void sub_1002D5CA0(uint64_t a1, void *a2)
{
  id v3 = a2;
  im_assert_primary_base_queue(v3, v4);
  uint64_t v5 = OSLogHandleForIDSCategory("IDSDAccount");
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    id v7 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) messageUUID]);
    uint64_t v9 = *(void *)(a1 + 40);
    uint64_t v8 = *(void *)(a1 + 48);
    id v10 = [v3 idsResponseCode];
    id v11 = (id)objc_claimAutoreleasedReturnValue([v3 responseError]);
    unsigned int v12 = [v3 lastCall];
    uint64_t v13 = @"NO";
    uint64_t v14 = *(void *)(a1 + 56);
    uint64_t v15 = *(void *)(a1 + 64);
    if (v12) {
      uint64_t v13 = @"YES";
    }
    *(_DWORD *)buf = 138414082;
    id v64 = v7;
    __int16 v65 = 2112;
    uint64_t v66 = v9;
    __int16 v67 = 2112;
    uint64_t v68 = v8;
    __int16 v69 = 2048;
    id v70 = v10;
    __int16 v71 = 2112;
    id v72 = v11;
    __int16 v73 = 2112;
    __int16 v74 = v13;
    __int16 v75 = 2112;
    uint64_t v76 = v14;
    __int16 v77 = 2112;
    uint64_t v78 = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Fallback send of %@ to %@ %@ completed with responseCode %ld error %@ lastCall %@ - current pending sends local %@ fallback %@",  buf,  0x52u);
  }

  if (os_log_shim_legacy_logging_enabled(v16) && _IDSShouldLog(0LL, @"IDSDAccount"))
  {
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) messageUUID]);
    uint64_t v18 = *(void *)(a1 + 40);
    uint64_t v19 = *(void *)(a1 + 48);
    id v20 = [v3 idsResponseCode];
    __int16 v21 = (void *)objc_claimAutoreleasedReturnValue([v3 responseError]);
    unsigned int v22 = [v3 lastCall];
    uint64_t v23 = @"NO";
    if (v22) {
      uint64_t v23 = @"YES";
    }
    uint64_t v61 = *(void *)(a1 + 56);
    uint64_t v62 = *(void *)(a1 + 64);
    id v59 = v21;
    uint64_t v60 = v23;
    uint64_t v57 = v19;
    id v58 = v20;
    uint64_t v55 = v17;
    uint64_t v56 = v18;
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDAccount",  @"Fallback send of %@ to %@ %@ completed with responseCode %ld error %@ lastCall %@ - current pending sends local %@ fallback %@");
  }

  if (objc_msgSend(v3, "lastCall", v55, v56, v57, v58, v59, v60, v61, v62))
  {
    id v24 = [v3 idsResponseCode];
    if (v24)
    {
      if (*(void *)(*(void *)(*(void *)(a1 + 96) + 8LL) + 40LL))
      {
LABEL_23:
        BOOL v45 = v24 == 0LL;
        id v46 = [*(id *)(a1 + 56) count];
        uint64_t v47 = (uint64_t)[*(id *)(a1 + 64) count];
        [*(id *)(a1 + 64) removeObject:*(void *)(a1 + 48)];
        if (v45) {
          [*(id *)(a1 + 56) removeObject:*(void *)(a1 + 48)];
        }
        BOOL v48 = v46 != (id)-v47;
        id v49 = [*(id *)(a1 + 56) count];
        else {
          BOOL v50 = v48;
        }
        if (v50)
        {
          if (*(void *)(a1 + 88))
          {
            id v51 = -[IDSDeliveryContext initWithResponseCode:error:lastCall:]( objc_alloc(&OBJC_CLASS___IDSDeliveryContext),  "initWithResponseCode:error:lastCall:",  *(void *)(*(void *)(*(void *)(a1 + 104) + 8LL) + 24LL),  *(void *)(*(void *)(*(void *)(a1 + 96) + 8LL) + 40LL),  1LL);
            id v52 = (void *)objc_claimAutoreleasedReturnValue([v3 endpointState]);
            -[IDSDeliveryContext setEndpointState:](v51, "setEndpointState:", v52);

            (*(void (**)(void))(*(void *)(a1 + 88) + 16LL))();
          }

          uint64_t v53 = *(void *)(*(void *)(a1 + 96) + 8LL);
          __int16 v54 = *(void **)(v53 + 40);
          *(void *)(v53 + 40) = 0LL;
        }

        goto LABEL_32;
      }

      *(void *)(*(void *)(*(void *)(a1 + 104) + 8) + 24) = [v3 idsResponseCode];
      uint64_t v25 = objc_claimAutoreleasedReturnValue([v3 responseError]);
      uint64_t v26 = *(void *)(*(void *)(a1 + 96) + 8LL);
      id v27 = *(id *)(v26 + 40);
      *(void *)(v26 + 40) = v25;
    }

    else
    {
      uint64_t v28 = OSLogHandleForIDSCategory("IDSDAccount");
      id v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "Overwriting previous local failure with remote success",  buf,  2u);
      }

      if (os_log_shim_legacy_logging_enabled(v30)
        && _IDSShouldLog(0LL, @"IDSDAccount"))
      {
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDAccount",  @"Overwriting previous local failure with remote success");
      }

      *(void *)(*(void *)(*(void *)(a1 + 104) + 8LL) + 24LL) = 0LL;
      uint64_t v31 = *(void *)(*(void *)(a1 + 96) + 8LL);
      uint64_t v32 = *(void **)(v31 + 40);
      *(void *)(v31 + 40) = 0LL;

      id v27 = objc_msgSend( [IDSLocalDeliveryMessageSentMetric alloc],  "initWithService:isToDefaultPairedDevice:messageSize:linkType:priority:",  *(void *)(a1 + 72),  1,  *(void *)(a1 + 112),  4,  objc_msgSend(*(id *)(a1 + 32), "priority"));
      id v33 = (void *)objc_claimAutoreleasedReturnValue(+[IDSCoreAnalyticsLogger defaultLogger](&OBJC_CLASS___IDSCoreAnalyticsLogger, "defaultLogger"));
      [v33 logMetric:v27];

      uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue(+[IDSAWDLogging sharedInstance](&OBJC_CLASS___IDSAWDLogging, "sharedInstance"));
      objc_msgSend( v34,  "messageSentForService:isToDefaultPairedDevice:messageSize:linkType:priority:",  *(void *)(a1 + 72),  1,  *(void *)(a1 + 112),  4,  objc_msgSend(*(id *)(a1 + 32), "priority"));

      uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue( +[IDSUTunDeliveryController sharedInstance]( &OBJC_CLASS___IDSUTunDeliveryController,  "sharedInstance"));
      uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) messageUUID]);
      uint64_t v37 = JWUUIDPushObjectToString(v36);
      id v38 = (void *)objc_claimAutoreleasedReturnValue(v37);
      [v35 cancelMessageID:v38];

      if ([*(id *)(a1 + 80) adHocServiceType] == 2)
      {
        id v39 = objc_alloc(&OBJC_CLASS___IDSLocalDeliveryMessageDeliveredMetric);
        uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 80) identifier]);
        id v41 = [v39 initWithService:v40 isToDefaultPairedDevice:1 messageSize:0 linkType:4 deliveryError:0 RTT:0 priority:0];

        __int16 v42 = (void *)objc_claimAutoreleasedReturnValue(+[IDSCoreAnalyticsLogger defaultLogger](&OBJC_CLASS___IDSCoreAnalyticsLogger, "defaultLogger"));
        [v42 logMetric:v41];

        id v43 = (void *)objc_claimAutoreleasedReturnValue(+[IDSAWDLogging sharedInstance](&OBJC_CLASS___IDSAWDLogging, "sharedInstance"));
        uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 80) identifier]);
        [v43 messageDeliveredForService:v44 isToDefaultPairedDevice:1 messageSize:0 linkType:4 deliveryError:0 RTT:0 priority:0];
      }
    }

    goto LABEL_23;
  }

void sub_1002D62D0(uint64_t a1, void *a2)
{
  id v3 = a2;
  im_assert_primary_base_queue(v3, v4);
  id v5 = [v3 idsResponseCode];
  uint64_t v6 = OSLogHandleForIDSCategory("IDSDAccount");
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    id v8 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) messageUUID]);
    id v9 = (id)objc_claimAutoreleasedReturnValue([v3 deviceID]);
    uint64_t v11 = *(void *)(a1 + 40);
    uint64_t v10 = *(void *)(a1 + 48);
    uint64_t v12 = *(void *)(a1 + 56);
    uint64_t v13 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) uniqueID]);
    uint64_t v14 = (void *)v13;
    uint64_t v15 = @"NO";
    *(_DWORD *)buf = 138414082;
    *(void *)&uint8_t buf[4] = v8;
    if (!v5) {
      uint64_t v15 = @"YES";
    }
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = v9;
    __int16 v51 = 2112;
    id v52 = v15;
    __int16 v53 = 2048;
    id v54 = v5;
    __int16 v55 = 2112;
    uint64_t v56 = v11;
    __int16 v57 = 2112;
    uint64_t v58 = v10;
    __int16 v59 = 2112;
    uint64_t v60 = v12;
    __int16 v61 = 2112;
    uint64_t v62 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "IDSUTunDeliveryController sendMessage %@ deviceID %@ succeeded? %@ response %ld topic: %@ - current pending sends local %@ fallback %@ account %@",  buf,  0x52u);
  }

  if (os_log_shim_legacy_logging_enabled(v16) && _IDSShouldLog(0LL, @"IDSDAccount"))
  {
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) messageUUID]);
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v3 deviceID]);
    if (v5) {
      uint64_t v19 = @"NO";
    }
    else {
      uint64_t v19 = @"YES";
    }
    uint64_t v20 = *(void *)(a1 + 40);
    uint64_t v21 = *(void *)(a1 + 48);
    uint64_t v48 = *(void *)(a1 + 56);
    id v49 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) uniqueID]);
    uint64_t v46 = v20;
    uint64_t v47 = v21;
    uint64_t v44 = v19;
    id v45 = v5;
    __int16 v42 = v17;
    id v43 = v18;
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDAccount",  @"IDSUTunDeliveryController sendMessage %@ deviceID %@ succeeded? %@ response %ld topic: %@ - current pending sends local %@ fallback %@ account %@");
  }

  if (v5)
  {
    if (*(void *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 40LL)) {
      goto LABEL_21;
    }
    *(void *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 24LL) = v5;
    unsigned int v22 = objc_alloc(&OBJC_CLASS___NSError);
    uint64_t v23 = -[NSError initWithDomain:code:userInfo:](v22, "initWithDomain:code:userInfo:", IDSSendErrorDomain, v5, 0LL);
    uint64_t v24 = *(void *)(*(void *)(a1 + 80) + 8LL);
    uint64_t v25 = *(void **)(v24 + 40);
    *(void *)(v24 + 40) = v23;
  }

  else
  {
    uint64_t v26 = OSLogHandleForIDSCategory("IDSDAccount");
    id v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "Overwriting previous remote failure with local success",  buf,  2u);
    }

    if (os_log_shim_legacy_logging_enabled(v28) && _IDSShouldLog(0LL, @"IDSDAccount")) {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDAccount",  @"Overwriting previous remote failure with local success");
    }
    *(void *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 24LL) = 0LL;
    uint64_t v29 = *(void *)(*(void *)(a1 + 80) + 8LL);
    uint64_t v25 = *(void **)(v29 + 40);
    *(void *)(v29 + 40) = 0LL;
  }

LABEL_21:
  BOOL v30 = v5 == 0LL;
  id v31 = objc_msgSend(*(id *)(a1 + 48), "count", v42, v43, v44, v45, v46, v47, v48, v49, *(_OWORD *)buf);
  uint64_t v32 = (uint64_t)[*(id *)(a1 + 56) count];
  id v33 = *(void **)(a1 + 48);
  uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([v3 deviceID]);
  [v33 removeObject:v34];

  if (v30)
  {
    uint64_t v35 = *(void **)(a1 + 56);
    uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([v3 deviceID]);
    [v35 removeObject:v36];
  }

  BOOL v37 = v31 != (id)-v32;
  id v38 = [*(id *)(a1 + 48) count];
  else {
    BOOL v39 = v37;
  }
  if (v39)
  {
    if (*(void *)(a1 + 72))
    {
      [v3 setIdsResponseCode:*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 24)];
      [v3 setResponseError:*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40)];
      [v3 setLastCall:1];
      (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
    }

    uint64_t v40 = *(void *)(*(void *)(a1 + 80) + 8LL);
    id v41 = *(void **)(v40 + 40);
    *(void *)(v40 + 40) = 0LL;
  }
}

id sub_1002D8F0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) setObject:a3 forKey:a2];
}

uint64_t sub_1002D8F18(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1002D8F24(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = OSLogHandleForIDSCategory("IDSDAccount");
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v8 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "All courier acks have completed, informing the next layer that the message has been sent sucessfully",  v8,  2u);
  }

  if (os_log_shim_legacy_logging_enabled(v6) && _IDSShouldLog(0LL, @"IDSDAccount")) {
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDAccount",  @"All courier acks have completed, informing the next layer that the message has been sent sucessfully");
  }
  id v7 = -[IDSDeliveryContext initWithResponseCode:error:lastCall:]( objc_alloc(&OBJC_CLASS___IDSDeliveryContext),  "initWithResponseCode:error:lastCall:",  0LL,  0LL,  0LL);
  -[IDSDeliveryContext setResponseTimeStamp:](v7, "setResponseTimeStamp:", v3);
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1002D9038( uint64_t a1, void *a2, int a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, uint64_t a10)
{
  id v17 = a2;
  id v95 = a4;
  id v18 = a5;
  id v98 = a6;
  id v19 = a7;
  id v20 = a8;
  uint64_t v21 = v20;
  id v96 = v19;
  id v97 = a9;
  uint64_t v94 = v17;
  if (a3 && [v20 length])
  {
    unsigned int v22 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    uint64_t v23 = (__CFDictionary *)v22;
    if (v98) {
      CFDictionarySetValue((CFMutableDictionaryRef)v22, @"mmcs-owner", v98);
    }
    if (v21) {
      CFDictionarySetValue(v23, @"mmcs-url", v21);
    }
    theDict = v23;
    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "__imHexString"));
    if (v24) {
      CFDictionarySetValue(v23, @"mmcs-signature-hex", v24);
    }

    if (v97) {
      CFDictionarySetValue(v23, @"decryption-key", v97);
    }
    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a10));
    if (v25) {
      CFDictionarySetValue(theDict, @"file-size", v25);
    }

    uint64_t v26 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    id v27 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    uint64_t v28 = (__CFDictionary *)v27;
    if (theDict) {
      CFDictionarySetValue((CFMutableDictionaryRef)v27, @"attach-mmcs-dict", theDict);
    }
    CFMutableDictionaryRef v91 = v28;
    uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) resourceMetadata]);
    if (v29) {
      CFDictionarySetValue(v28, @"attach-meta", v29);
    }

    BOOL v30 = *(void **)(a1 + 40);
    v102[0] = _NSConcreteStackBlock;
    v102[1] = 3221225472LL;
    v102[2] = sub_1002D97E0;
    v102[3] = &unk_1008F8418;
    uint64_t v92 = v26;
    id v103 = v92;
    [v30 enumerateKeysAndObjectsUsingBlock:v102];
    id v31 = *(void **)(a1 + 32);
    uint64_t v32 = JWEncodeDictionary(v28);
    id v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
    [v31 setDataToEncrypt:v33];

    uint64_t v34 = OSLogHandleForIDSCategory("IDSDAccount");
    uint64_t v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v105 = v92;
      _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEFAULT,  "Upload Complete, Here is the information, %@",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v36) && _IDSShouldLog(0LL, @"IDSDAccount"))
    {
      id v49 = v92;
      _IDSLogV(0LL, @"IDSFoundation", @"IDSDAccount", @"Upload Complete, Here is the information, %@");
    }

    uint64_t v86 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDeliveryController sharedInstance](&OBJC_CLASS___IDSDeliveryController, "sharedInstance", v49));
    __int128 v90 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) messageUUID]);
    uint64_t v37 = JWUUIDPushObjectToString(v90);
    __int16 v85 = (void *)objc_claimAutoreleasedReturnValue(v37);
    int v84 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataToEncrypt]);
    __int16 v83 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) encryptionAttributes]);
    uint64_t v75 = *(void *)(a1 + 48);
    unsigned int v74 = [*(id *)(a1 + 32) wantsResponse];
    id v82 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) expirationDate]);
    unsigned __int8 v73 = [*(id *)(a1 + 32) enforceRemoteTimeouts];
    uint64_t v89 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) service]);
    unsigned __int8 v72 = [v89 canUseLargePayload];
    id v88 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) service]);
    unsigned __int8 v71 = [v88 sendOnePerToken];
    __int16 v87 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) service]);
    unsigned __int8 v70 = [v87 allowPartialSendsToSucceed];
    id v69 = [*(id *)(a1 + 32) priority];
    unsigned __int8 v68 = [*(id *)(a1 + 32) fireAndForget];
    uint64_t v67 = *(void *)(a1 + 64);
    __int16 v81 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) fromShortHandle]);
    uint64_t v66 = *(void *)(a1 + 72);
    id v80 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) finalDestinationURIs]);
    id v79 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accessToken]);
    uint64_t v64 = *(void *)(a1 + 88);
    uint64_t v65 = *(void *)(a1 + 80);
    unsigned __int8 v63 = [*(id *)(a1 + 32) fakeMessage];
    unsigned __int8 v62 = [*(id *)(a1 + 32) alwaysSkipSelf];
    unsigned __int8 v61 = [*(id *)(a1 + 32) alwaysIncludeSelf];
    id v60 = [*(id *)(a1 + 32) forceQuery];
    uint64_t v78 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) pushPriority]);
    unsigned __int8 v59 = [*(id *)(a1 + 32) ignoreMaxRetryCount];
    unsigned __int8 v58 = [*(id *)(a1 + 32) disallowRefresh];
    __int16 v77 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) originalTimestamp]);
    uint64_t v76 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) prioritizedTokenList]);
    unsigned __int8 v57 = [*(id *)(a1 + 32) wantsFirewallDonation];
    id v38 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deliveryMinimumTimeDelay]);
    BOOL v39 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) deliveryMinimumTime]);
    uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sendMode]);
    id v41 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) keyTransparencyURIVerificationMap]);
    __int16 v42 = v21;
    id v43 = v18;
    uint64_t v45 = *(void *)(a1 + 96);
    uint64_t v44 = *(void *)(a1 + 104);
    v99[0] = _NSConcreteStackBlock;
    v99[1] = 3221225472LL;
    v99[2] = sub_1002D97EC;
    v99[3] = &unk_1008F7CA0;
    id v100 = *(id *)(a1 + 32);
    id v101 = *(id *)(a1 + 112);
    uint64_t v56 = v44;
    id v18 = v43;
    uint64_t v21 = v42;
    uint64_t v46 = v97;
    LOBYTE(v54) = v57;
    BYTE1(v53) = v58;
    LOBYTE(v53) = v59;
    BYTE2(v52) = v61;
    BYTE1(v52) = v62;
    LOBYTE(v52) = v63;
    LOBYTE(v51) = v68;
    uint64_t v55 = v45;
    uint64_t v47 = v98;
    BYTE3(v50) = v70;
    BYTE2(v50) = v71;
    BYTE1(v50) = v72;
    LOBYTE(v50) = v73;
    objc_msgSend( v86,  "sendMessageDictionary:messageID:dataToEncrypt:withEncryptedAttributes:onService:wantsResponse:expirationDate:enfor ceRemoteTimeouts:canUseLargePayload:sendOnePerToken:allowPartialSendsToSucceed:priority:fireAndForget:fromID:fromS hortHandle:fromIdentity:toURIs:accessToken:topic:registrationProperties:fakeMessage:alwaysSkipSelf:alwaysIncludeSe lf:forceQuery:pushPriority:ignoreMaxRetryCount:disallowRefresh:originalTimestamp:prioritizedTokenList:wantsFirewal lDonation:destinationObject:deliveryMinimumTimeDelay:deliveryMinimumTime:sendMode:KTURIVerificationMap:ackBlock:wi llSendBlock:sendCompletionBlock:",  v92,  v85,  v84,  v83,  v75,  v74,  v82,  v50,  v69,  v51,  v67,  v81,  v66,  v80,  v79,  v65,  v64,  v52,  v60,  v78,  v53,  v77,  v76,  v54,  0,  v38,  v39,  v40,  v41,  v55,  v56,  v99);
  }

  else
  {
    uint64_t v46 = v97;
    uint64_t v47 = v98;
    if (*(void *)(a1 + 112))
    {
      uint64_t v48 = -[IDSDeliveryContext initWithResponseCode:error:lastCall:]( objc_alloc(&OBJC_CLASS___IDSDeliveryContext),  "initWithResponseCode:error:lastCall:",  2LL,  0LL,  1LL);
      (*(void (**)(void))(*(void *)(a1 + 112) + 16LL))();
    }
  }
}

id sub_1002D97E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) setObject:a3 forKey:a2];
}

void sub_1002D97EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = OSLogHandleForIDSCategory("IDSDAccount");
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = [v3 idsResponseCode];
    id v7 = (id)objc_claimAutoreleasedReturnValue([v3 responseError]);
    else {
      id v8 = @"NO";
    }
    id v9 = (id)objc_claimAutoreleasedReturnValue([v3 displayURIs]);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) messageUUID]);
    *(_DWORD *)buf = 134219010;
    id v17 = v6;
    __int16 v18 = 2112;
    id v19 = v7;
    __int16 v20 = 2112;
    uint64_t v21 = v8;
    __int16 v22 = 2112;
    id v23 = v9;
    __int16 v24 = 2112;
    uint64_t v25 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  " => Send completed with resultCode %ld, send error %@, lastCall %@ for displayURIs %@  messageUUID %@",  buf,  0x34u);
  }

  if (os_log_shim_legacy_logging_enabled(v11) && _IDSShouldLog(0LL, @"IDSDAccount"))
  {
    [v3 idsResponseCode];
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v3 responseError]);
    [v3 lastCall];
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v3 displayURIs]);
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) messageUUID]);
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDAccount",  @" => Send completed with resultCode %ld, send error %@, lastCall %@ for displayURIs %@  messageUUID %@");
  }

  uint64_t v13 = *(void *)(a1 + 40);
  if (v13) {
    (*(void (**)(uint64_t, id))(v13 + 16))(v13, v3);
  }
}

void sub_1002D9A34(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = OSLogHandleForIDSCategory("IDSDAccount");
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = [v3 idsResponseCode];
    id v7 = (id)objc_claimAutoreleasedReturnValue([v3 responseError]);
    else {
      id v8 = @"NO";
    }
    id v9 = (id)objc_claimAutoreleasedReturnValue([v3 displayURIs]);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) messageUUID]);
    *(_DWORD *)buf = 134219010;
    *(void *)&uint8_t buf[4] = v6;
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = v7;
    __int16 v19 = 2112;
    __int16 v20 = v8;
    __int16 v21 = 2112;
    id v22 = v9;
    __int16 v23 = 2112;
    __int16 v24 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  " => Send completed with resultCode %ld, send error %@, lastCall %@ for displayURIs %@  messageUUID %@",  buf,  0x34u);
  }

  if (os_log_shim_legacy_logging_enabled(v11) && _IDSShouldLog(0LL, @"IDSDAccount"))
  {
    [v3 idsResponseCode];
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v3 responseError]);
    [v3 lastCall];
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v3 displayURIs]);
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) messageUUID]);
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDAccount",  @" => Send completed with resultCode %ld, send error %@, lastCall %@ for displayURIs %@  messageUUID %@");
  }

  uint64_t v13 = voucher_adopt(*(id *)(a1 + 40));
  if ([v3 lastCall])
  {
    id v17 = _os_activity_create( (void *)&_mh_execute_header,  "Send completed",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
    memset(buf, 170, 16);
    os_activity_scope_enter(v17, (os_activity_scope_state_t)buf);
    os_activity_scope_leave((os_activity_scope_state_t)buf);
    cut_arc_os_release(&v17);
  }

  uint64_t v14 = *(void *)(a1 + 48);
  if (v14) {
    (*(void (**)(uint64_t, id))(v14 + 16))(v14, v3);
  }
}

id sub_1002D9F48(id a1, IDSURI *a2)
{
  return -[IDSURI prefixedURI](a2, "prefixedURI");
}

uint64_t sub_1002D9F50(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

LABEL_215:
}

  v497 = kIDSQRAllocateKey_Reason;
  v498 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", kIDSQRAllocateKey_Reason, v961, v1004, v1047));
  v500 = objc_opt_class(v31[501], v499);
  v501 = objc_opt_isKindOfClass(v498, v500);

  v502 = (NSNumber *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v497]);
  v503 = v502;
  if ((v501 & 1) != 0)
  {
    qrReason = self->_qrReason;
    self->_qrReason = v502;
LABEL_217:

    goto LABEL_224;
  }

  if (v503)
  {
    v505 = OSLogHandleForIDSCategory("QRAllocator");
    v506 = (os_log_s *)objc_claimAutoreleasedReturnValue(v505);
    if (os_log_type_enabled(v506, OS_LOG_TYPE_DEBUG))
    {
      v507 = (id)objc_claimAutoreleasedReturnValue([v4 objectForKey:v497]);
      v509 = (id)objc_opt_class(v31[501], v508);
      v510 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v497]);
      v512 = (id)objc_opt_class(v510, v511);
      *(_DWORD *)buf = 138412802;
      v1070 = v507;
      v1071 = 2112;
      v1072 = v509;
      v1073 = 2112;
      v1074 = v512;
      _os_log_impl( (void *)&_mh_execute_header,  v506,  OS_LOG_TYPE_DEBUG,  "Unexpected datatype. %@ should be of type %@, not %@",  buf,  0x20u);
    }

    if (os_log_shim_legacy_logging_enabled(v513))
    {
      if (_IDSShouldLog(1LL, @"QRAllocator"))
      {
        qrReason = (NSNumber *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v497]);
        v515 = objc_opt_class(v31[501], v514);
        v516 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v497]);
        v1005 = v515;
        v1048 = objc_opt_class(v516, v517);
        v962 = qrReason;
        _IDSLogV( 1LL,  @"IDSFoundation",  @"QRAllocator",  @"Unexpected datatype. %@ should be of type %@, not %@");

        goto LABEL_217;
      }
    }
  }

id sub_1002DC0A0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 hasPrefix:@"self-token:"])
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 _stripFZIDPrefix]);
    id v5 = (char *)[v4 rangeOfString:@"/"];
    else {
      id v6 = (id)objc_claimAutoreleasedReturnValue([v4 substringToIndex:v5]);
    }
    id v8 = v6;
    id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSData __imDataWithHexString:](&OBJC_CLASS___NSData, "__imDataWithHexString:", v6));
    if ([v4 length] <= v5 + 1)
    {
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) primaryRegistration]);
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 dsHandle]);

      if (v13)
      {
        id v11 = v13;
      }

      else
      {
        id v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) primaryRegistration]);
        __int16 v18 = (void *)objc_claimAutoreleasedReturnValue([v17 uris]);

        if ([v18 count]) {
          id v11 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "__imFirstObject"));
        }
        else {
          id v11 = 0LL;
        }
      }
    }

    else
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "substringFromIndex:"));
      if ([*(id *)(a1 + 32) hasDependentRegistrationWithURI:v10 token:v9])
      {
        id v11 = v10;
      }

      else
      {
        uint64_t v14 = OSLogHandleForIDSCategory("IDSDAccount");
        uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          id v25 = v3;
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Couldn't resolve %@ to a valid dependent registration.",  buf,  0xCu);
        }

        if (os_log_shim_legacy_logging_enabled(v16)
          && _IDSShouldLog(0LL, @"IDSDAccount"))
        {
          id v23 = v3;
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDAccount",  @"Couldn't resolve %@ to a valid dependent registration.");
        }

        id v11 = 0LL;
      }
    }

    if (objc_msgSend(v9, "length", v23) && objc_msgSend(v11, "length"))
    {
      id v7 = (id)_IDSCopyIDForTokenWithURI(v9, v11);
    }

    else
    {
      uint64_t v19 = OSLogHandleForIDSCategory("Warning");
      __int16 v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        id v25 = v3;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "Could not construct a destination for %@",  buf,  0xCu);
      }

      if (os_log_shim_legacy_logging_enabled(v21))
      {
        _IDSWarnV(@"IDSFoundation", @"Could not construct a destination for %@");
        _IDSLogV(0LL, @"IDSFoundation", @"Warning", @"Could not construct a destination for %@");
        _IDSLogTransport(@"Warning", @"IDS", @"Could not construct a destination for %@");
      }

      id v7 = 0LL;
    }
  }

  else
  {
    id v7 = v3;
  }

  return v7;
}

id sub_1002DC420(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([a2 objectForKey:v5]);
  if ((objc_opt_isKindOfClass(v6, a1) & 1) != 0)
  {
    id v7 = v6;
  }

  else
  {
    if (v6)
    {
      id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT)) {
        sub_1006A7694((uint64_t)v5, a1, v8);
      }
    }

    id v7 = 0LL;
  }

  return v7;
}

uint64_t IDSProtoKeyTransparencyTrustedServiceReadFrom(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
    return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  }
  while (2)
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    switch((v6 >> 3))
    {
      case 1u:
        uint64_t String = PBReaderReadString(a2);
        uint64_t v13 = objc_claimAutoreleasedReturnValue(String);
        uint64_t v14 = 32LL;
        goto LABEL_28;
      case 2u:
        uint64_t v16 = PBReaderReadString(a2);
        id v17 = (IDSProtoKeyTransparencyLoggableData *)objc_claimAutoreleasedReturnValue(v16);
        if (v17) {
          [(id)a1 addUris:v17];
        }
        goto LABEL_26;
      case 3u:
        id v17 = objc_alloc_init(&OBJC_CLASS___IDSProtoKeyTransparencyLoggableData);
        objc_storeStrong((id *)(a1 + 24), v17);
        v25[0] = 0xAAAAAAAAAAAAAAAALL;
        v25[1] = 0xAAAAAAAAAAAAAAAALL;
        if (PBReaderPlaceMark(a2, v25)
          && (IDSProtoKeyTransparencyLoggableDataReadFrom((uint64_t)v17, a2) & 1) != 0)
        {
          PBReaderRecallMark(a2, v25);
LABEL_26:

LABEL_40:
          if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          }
          continue;
        }

        return 0LL;
      case 4u:
        uint64_t Data = PBReaderReadData(a2);
        uint64_t v13 = objc_claimAutoreleasedReturnValue(Data);
        uint64_t v14 = 8LL;
LABEL_28:
        uint64_t v19 = *(void **)(a1 + v14);
        *(void *)(a1 + v14) = v13;

        goto LABEL_40;
      case 5u:
        char v20 = 0;
        unsigned int v21 = 0;
        uint64_t v22 = 0LL;
        *(_BYTE *)(a1 + 48) |= 1u;
        while (2)
        {
          unint64_t v23 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v23 == -1LL || v23 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v24 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v23);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23 + 1;
            v22 |= (unint64_t)(v24 & 0x7F) << v20;
            if (v24 < 0)
            {
              v20 += 7;
              BOOL v9 = v21++ >= 9;
              if (v9)
              {
                LODWORD(v22) = 0;
                goto LABEL_39;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v22) = 0;
        }
LABEL_39:
        *(_DWORD *)(a1 + 16) = v22;
        goto LABEL_40;
      default:
        uint64_t result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result) {
          return result;
        }
        goto LABEL_40;
    }
  }

void sub_1002DEACC(id a1)
{
  int v1 = objc_alloc_init(&OBJC_CLASS___IDSCurrentDevice);
  uint64_t v2 = (void *)qword_1009C0A78;
  qword_1009C0A78 = (uint64_t)v1;
}

void sub_1002DF360( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, char a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, char a32)
{
}

uint64_t sub_1002DF39C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1002DF3AC(uint64_t a1)
{
}

void sub_1002DF3B4(uint64_t a1)
{
  uint64_t v2 = (char *)[*(id *)(a1 + 32) forceEncryptionType];
  if ((unint64_t)(v2 - 4) < 2 || v2 + 1 == 0LL)
  {
    char v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) fullDeviceIdentityContainerEncrypter]);
    uint64_t v5 = *(void *)(a1 + 40);
    uint64_t v6 = *(void *)(a1 + 48);
    uint64_t v7 = *(unsigned __int8 *)(a1 + 104);
    uint64_t v8 = *(unsigned __int8 *)(a1 + 105);
    uint64_t v9 = *(void *)(a1 + 80);
    uint64_t v10 = *(void *)(*(void *)(a1 + 88) + 8LL);
    id v11 = *(void **)(v10 + 40);
    uint64_t v12 = *(void *)(*(void *)(a1 + 96) + 8LL);
    uint64_t v14 = *(void *)(a1 + 56);
    uint64_t v13 = *(void *)(a1 + 64);
    id v26 = *(id *)(v12 + 40);
    id obj = v11;
    uint64_t v15 = *(void *)(v9 + 8);
    id v25 = *(id *)(v15 + 40);
    uint64_t v16 = objc_claimAutoreleasedReturnValue( [v4 encryptData:v5 encryptionContext:v6 forceSizeOptimizations:v7 resetState:v8 withEncryptedAttributes:v13 withPublicDeviceId entityContainer:v14 usedIdentifier:&obj metadata:&v26 error:&v25]);
    objc_storeStrong((id *)(v10 + 40), obj);
    objc_storeStrong((id *)(v12 + 40), v26);
    objc_storeStrong((id *)(v15 + 40), v25);
    uint64_t v17 = *(void *)(*(void *)(a1 + 72) + 8LL);
    __int16 v18 = *(void **)(v17 + 40);
    *(void *)(v17 + 40) = v16;
  }

  else
  {
    char v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) fullDeviceIdentityContainerEncrypter]);
    uint64_t v19 = *(void *)(a1 + 40);
    uint64_t v20 = *(void *)(a1 + 48);
    uint64_t v21 = *(void *)(a1 + 56);
    uint64_t v22 = *(void *)(*(void *)(a1 + 80) + 8LL);
    id v28 = *(id *)(v22 + 40);
    uint64_t v23 = objc_claimAutoreleasedReturnValue( [v4 offGridKeyDistributionEncryptData:v19 encryptionContext:v20 withPublicDeviceIdentityContainer:v21 error:&v28]);
    objc_storeStrong((id *)(v22 + 40), v28);
    uint64_t v24 = *(void *)(*(void *)(a1 + 72) + 8LL);
    __int16 v18 = *(void **)(v24 + 40);
    *(void *)(v24 + 40) = v23;
  }
}

void sub_1002DF6E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1002DF708(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) fullDeviceIdentityContainerEncrypter]);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(void *)(*(void *)(a1 + 72) + 8LL);
  id obj = *(id *)(v6 + 40);
  uint64_t v7 = objc_claimAutoreleasedReturnValue( [v2 legacyEncryptData:v3 withEncryptedAttributes:v4 withPublicDeviceIdentityContainer:v5 error:&obj]);
  objc_storeStrong((id *)(v6 + 40), obj);
  uint64_t v8 = *(void *)(*(void *)(a1 + 64) + 8LL);
  uint64_t v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;
}

void sub_1002DFAD0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
}

void sub_1002DFAFC(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) fullDeviceIdentityContainerEncrypter]);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(*(void *)(a1 + 72) + 8LL);
  id obj = *(id *)(v5 + 40);
  uint64_t v6 = objc_claimAutoreleasedReturnValue( [v2 decryptData:v3 withPublicDeviceIdentityContainer:v4 error:&obj usingIdentifier:*(void *)(a1 + 56) isRetry:*(unsigned __int8 *)(a1 + 80)]);
  objc_storeStrong((id *)(v5 + 40), obj);
  uint64_t v7 = *(void *)(*(void *)(a1 + 64) + 8LL);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;
}

void sub_1002DFD1C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) replayCommitter]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 decryptedDataForKey:*(void *)(a1 + 40)]);

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 decryptedData]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 encryptedAttributes]);
  if (v4)
  {
    uint64_t v6 = *(void *)(a1 + 72);
    uint64_t v7 = -[IDSDecryptionMetadata initWithUsedLastResortCache:usedCachedData:]( objc_alloc(&OBJC_CLASS___IDSDecryptionMetadata),  "initWithUsedLastResortCache:usedCachedData:",  0LL,  1LL);
    (*(void (**)(uint64_t, void *, void *, void, IDSDecryptionMetadata *))(v6 + 16))(v6, v4, v5, 0LL, v7);
  }

  else
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) fullDeviceIdentityContainerEncrypter]);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( [v8 decryptData:*(void *)(a1 + 48) decryptionContext:0 withPublicDeviceIdentityContainer:*(void *)(a1 + 56) usingIdentifier:*(void *)(a1 + 64) isRetry:*(unsigned __int8 *)(a1 + 80)]);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_1002DFE84;
    v10[3] = &unk_100900290;
    void v10[4] = *(void *)(a1 + 32);
    id v12 = *(id *)(a1 + 72);
    id v11 = *(id *)(a1 + 40);
    [v9 registerResultBlock:v10];
  }
}

void sub_1002DFE84(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 state] == (id)1)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);

    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 domain]);
    if ([v5 isEqualToString:IDSDecryptionErrorDomain]
      && ([v4 code] == (id)12 || objc_msgSend(v4, "code") == (id)9))
    {
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) endpoint]);
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 identityContainerDeserializationError]);

      if (v7)
      {
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v4 domain]);
        id v9 = [v4 code];
        NSErrorUserInfoKey v23 = NSUnderlyingErrorKey;
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) endpoint]);
        id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 identityContainerDeserializationError]);
        uint64_t v24 = v11;
        id v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v24,  &v23,  1LL));
        uint64_t v13 = objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v8,  v9,  v12));

        uint64_t v4 = (void *)v13;
      }
    }

    else
    {
    }

    uint64_t v20 = *(void *)(a1 + 48);
    uint64_t v21 = objc_alloc_init(&OBJC_CLASS___IDSDecryptionMetadata);
    (*(void (**)(uint64_t, void, void, void *, IDSDecryptionMetadata *))(v20 + 16))( v20,  0LL,  0LL,  v4,  v21);
  }

  else
  {
    id v22 = (id)objc_claimAutoreleasedReturnValue([v3 value]);

    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v22 decryptedData]);
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v22 encryptedAttributes]);
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v22 commitBlock]);
    if (!CUTIsInternalInstall()
      || (+[IMUserDefaults isWritePushPayloadsToDiskEnabled]( &OBJC_CLASS___IMUserDefaults,  "isWritePushPayloadsToDiskEnabled") & 1) == 0)
    {
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "replayCommitter", v22));
      [v17 holdCommitBlock:v16 andDecryptedData:v14 withEncryptedAttributes:v15 forKey:*(void *)(a1 + 40)];
    }

    uint64_t v18 = *(void *)(a1 + 48);
    uint64_t v19 = -[IDSDecryptionMetadata initWithUsedLastResortCache:usedCachedData:]( objc_alloc(&OBJC_CLASS___IDSDecryptionMetadata),  "initWithUsedLastResortCache:usedCachedData:",  0LL,  0LL);
    (*(void (**)(uint64_t, void *, void *, void, IDSDecryptionMetadata *))(v18 + 16))( v18,  v14,  v15,  0LL,  v19);
  }

void sub_1002E0268(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) _isNGMKeyType];
  id v3 = *(void **)(a1 + 32);
  if (v2)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 endpoint]);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 publicDeviceIdentityContainer]);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 ngmPublicDeviceIdentity]);

    if (([*(id *)(a1 + 32) _isSecKeyType] & 1) == 0)
    {
      if (!v6) {
        goto LABEL_11;
      }
LABEL_8:
      id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) fullDeviceIdentitySigner]);
      uint64_t v10 = *(void *)(a1 + 40);
      uint64_t v11 = *(void *)(a1 + 48);
      uint64_t v12 = *(void *)(a1 + 64);
      id v22 = 0LL;
      [v9 verifySignedData:v10 matchesData:v11 forType:v12 withPublicDeviceIdentity:v6 error:&v22];
      id v13 = v22;

      (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
      return;
    }
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) endpoint]);
  id v8 = [v7 applicationPublicDeviceIdentity];

  if (v6) {
    goto LABEL_8;
  }
  if (v8)
  {
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) fullDeviceIdentitySigner]);
    uint64_t v16 = *(void *)(a1 + 40);
    uint64_t v15 = *(void *)(a1 + 48);
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) keyDiversifier]);
    id v21 = 0LL;
    [v14 verifySignedData:v16 matchesData:v15 withSecPublicDeviceIdentity:v8 diversifier:v17 error:&v21];
    id v18 = v21;

    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
    return;
  }

void sub_1002E05AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1002E05D0(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) _isNGMKeyType];
  id v3 = *(void **)(a1 + 32);
  if (v2)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 endpoint]);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 publicDeviceIdentityContainer]);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 ngmPublicDeviceIdentity]);

    if (([*(id *)(a1 + 32) _isSecKeyType] & 1) == 0)
    {
      if (!v6) {
        goto LABEL_12;
      }
      goto LABEL_8;
    }
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) endpoint]);
  id v8 = [v7 applicationPublicDeviceIdentity];

  if (v6)
  {
LABEL_8:
    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) fullDeviceIdentitySigner]);
    uint64_t v10 = *(void *)(a1 + 40);
    uint64_t v11 = *(void *)(a1 + 48);
    uint64_t v12 = *(void *)(a1 + 72);
    uint64_t v13 = *(void *)(*(void *)(a1 + 64) + 8LL);
    id obj = *(id *)(v13 + 40);
    unsigned __int8 v14 = [v9 verifySignedData:v10 matchesData:v11 forType:v12 withPublicDeviceIdentity:v6 error:&obj];
    objc_storeStrong((id *)(v13 + 40), obj);
    *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = v14;

LABEL_11:
    return;
  }

  if (v8)
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) fullDeviceIdentitySigner]);
    uint64_t v16 = *(void *)(a1 + 40);
    uint64_t v15 = *(void *)(a1 + 48);
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) keyDiversifier]);
    uint64_t v18 = *(void *)(*(void *)(a1 + 64) + 8LL);
    id v23 = *(id *)(v18 + 40);
    unsigned __int8 v19 = [v6 verifySignedData:v16 matchesData:v15 withSecPublicDeviceIdentity:v8 diversifier:v17 error:&v23];
    objc_storeStrong((id *)(v18 + 40), v23);
    *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = v19;

    goto LABEL_11;
  }

BOOL sub_1002E08A0(int a1)
{
  return a1 == 1;
}

uint64_t sub_1002E08AC(int a1)
{
  else {
    return 0LL;
  }
}

uint64_t sub_1002E08C0()
{
  return 147LL;
}

NSMutableDictionary *__cdecl sub_1002E0B5C(id a1, NSDictionary *a2, int64_t a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = objc_alloc_init(&OBJC_CLASS___IDSKeychainWrapper);
  id v40 = 0LL;
  unsigned __int8 v6 = -[IDSKeychainWrapper removeDataForIdentifier:dataProtectionClass:error:]( v5,  "removeDataForIdentifier:dataProtectionClass:error:",  @"personal-session-token-cache",  2LL,  &v40);
  id v7 = v40;
  if ((v6 & 1) == 0)
  {
    uint64_t v9 = OSLogHandleForIDSCategory("Warning");
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      int64_t v42 = (int64_t)v7;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "Failed to remove peerIDCache v0 {error: %{public}@}",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v11))
    {
      _IDSWarnV(@"IDSFoundation", @"Failed to remove peerIDCache v0 {error: %{public}@}");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"Failed to remove peerIDCache v0 {error: %{public}@}");
      id v34 = v7;
      *(void *)&double v8 = _IDSLogTransport( @"Warning",  @"IDS",  @"Failed to remove peerIDCache v0 {error: %{public}@}").n128_u64[0];
    }
  }

  id v39 = v7;
  unsigned __int8 v12 = -[IDSKeychainWrapper removeDataForIdentifier:dataProtectionClass:error:]( v5,  "removeDataForIdentifier:dataProtectionClass:error:",  @"personal-session-token-cache-v1",  2LL,  &v39,  v8,  v34);
  id v13 = v39;

  if ((v12 & 1) == 0)
  {
    uint64_t v15 = OSLogHandleForIDSCategory("Warning");
    uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      int64_t v42 = (int64_t)v13;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "Failed to remove peerIDCache v1 {error: %{public}@}",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v17))
    {
      _IDSWarnV(@"IDSFoundation", @"Failed to remove peerIDCache v1 {error: %{public}@}");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"Failed to remove peerIDCache v1 {error: %{public}@}");
      id v35 = v13;
      *(void *)&double v14 = _IDSLogTransport( @"Warning",  @"IDS",  @"Failed to remove peerIDCache v1 {error: %{public}@}").n128_u64[0];
    }
  }

  id v38 = v13;
  unsigned __int8 v18 = -[IDSKeychainWrapper removeDataForIdentifier:dataProtectionClass:error:]( v5,  "removeDataForIdentifier:dataProtectionClass:error:",  @"personal-session-token-cache-v2",  2LL,  &v38,  v14,  v35);
  id v19 = v38;

  if ((v18 & 1) == 0)
  {
    uint64_t v21 = OSLogHandleForIDSCategory("Warning");
    id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      int64_t v42 = (int64_t)v19;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_ERROR,  "Failed to remove peerIDCache v2 {error: %{public}@}",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v23))
    {
      _IDSWarnV(@"IDSFoundation", @"Failed to remove peerIDCache v2 {error: %{public}@}");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"Failed to remove peerIDCache v2 {error: %{public}@}");
      id v36 = v19;
      *(void *)&double v20 = _IDSLogTransport( @"Warning",  @"IDS",  @"Failed to remove peerIDCache v2 {error: %{public}@}").n128_u64[0];
    }
  }

  id v37 = v19;
  unsigned __int8 v24 = -[IDSKeychainWrapper removeDataForIdentifier:dataProtectionClass:error:]( v5,  "removeDataForIdentifier:dataProtectionClass:error:",  @"personal-session-token-cache-v3",  2LL,  &v37,  v20,  v36);
  id v25 = v37;

  if ((v24 & 1) == 0)
  {
    uint64_t v26 = OSLogHandleForIDSCategory("Warning");
    id v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      int64_t v42 = (int64_t)v25;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_ERROR,  "Failed to remove peerIDCache v3 {error: %{public}@}",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v28))
    {
      _IDSWarnV(@"IDSFoundation", @"Failed to remove peerIDCache v3 {error: %{public}@}");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"Failed to remove peerIDCache v3 {error: %{public}@}");
      _IDSLogTransport(@"Warning", @"IDS", @"Failed to remove peerIDCache v3 {error: %{public}@}");
    }
  }

  uint64_t v29 = OSLogHandleForIDSCategory("PeerIDManager");
  BOOL v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    int64_t v42 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "Migrated Peer ID persistent map {oldVersionNumber: %ld}",  buf,  0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v31) && _IDSShouldLog(0LL, @"PeerIDManager")) {
    _IDSLogV( 0LL,  @"IDSFoundation",  @"PeerIDManager",  @"Migrated Peer ID persistent map {oldVersionNumber: %ld}");
  }
  uint64_t v32 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);

  return v32;
}

NSMutableDictionary *__cdecl sub_1002E1264(id a1, NSDictionary *a2, int64_t a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = objc_alloc_init(&OBJC_CLASS___IDSKeychainWrapper);
  id v40 = 0LL;
  unsigned __int8 v6 = -[IDSKeychainWrapper removeDataForIdentifier:dataProtectionClass:error:]( v5,  "removeDataForIdentifier:dataProtectionClass:error:",  @"personal-session-token-cache",  2LL,  &v40);
  id v7 = v40;
  if ((v6 & 1) == 0)
  {
    uint64_t v9 = OSLogHandleForIDSCategory("Warning");
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      int64_t v42 = (int64_t)v7;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "Failed to remove peerIDCache v0 {error: %{public}@}",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v11))
    {
      _IDSWarnV(@"IDSFoundation", @"Failed to remove peerIDCache v0 {error: %{public}@}");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"Failed to remove peerIDCache v0 {error: %{public}@}");
      id v34 = v7;
      *(void *)&double v8 = _IDSLogTransport( @"Warning",  @"IDS",  @"Failed to remove peerIDCache v0 {error: %{public}@}").n128_u64[0];
    }
  }

  id v39 = v7;
  unsigned __int8 v12 = -[IDSKeychainWrapper removeDataForIdentifier:dataProtectionClass:error:]( v5,  "removeDataForIdentifier:dataProtectionClass:error:",  @"personal-session-token-cache-v1",  2LL,  &v39,  v8,  v34);
  id v13 = v39;

  if ((v12 & 1) == 0)
  {
    uint64_t v15 = OSLogHandleForIDSCategory("Warning");
    uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      int64_t v42 = (int64_t)v13;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "Failed to remove peerIDCache v1 {error: %{public}@}",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v17))
    {
      _IDSWarnV(@"IDSFoundation", @"Failed to remove peerIDCache v1 {error: %{public}@}");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"Failed to remove peerIDCache v1 {error: %{public}@}");
      id v35 = v13;
      *(void *)&double v14 = _IDSLogTransport( @"Warning",  @"IDS",  @"Failed to remove peerIDCache v1 {error: %{public}@}").n128_u64[0];
    }
  }

  id v38 = v13;
  unsigned __int8 v18 = -[IDSKeychainWrapper removeDataForIdentifier:dataProtectionClass:error:]( v5,  "removeDataForIdentifier:dataProtectionClass:error:",  @"personal-session-token-cache-v2",  2LL,  &v38,  v14,  v35);
  id v19 = v38;

  if ((v18 & 1) == 0)
  {
    uint64_t v21 = OSLogHandleForIDSCategory("Warning");
    id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      int64_t v42 = (int64_t)v19;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_ERROR,  "Failed to remove peerIDCache v2 {error: %{public}@}",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v23))
    {
      _IDSWarnV(@"IDSFoundation", @"Failed to remove peerIDCache v2 {error: %{public}@}");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"Failed to remove peerIDCache v2 {error: %{public}@}");
      id v36 = v19;
      *(void *)&double v20 = _IDSLogTransport( @"Warning",  @"IDS",  @"Failed to remove peerIDCache v2 {error: %{public}@}").n128_u64[0];
    }
  }

  id v37 = v19;
  unsigned __int8 v24 = -[IDSKeychainWrapper removeDataForIdentifier:dataProtectionClass:error:]( v5,  "removeDataForIdentifier:dataProtectionClass:error:",  @"personal-session-token-cache-v3",  2LL,  &v37,  v20,  v36);
  id v25 = v37;

  if ((v24 & 1) == 0)
  {
    uint64_t v26 = OSLogHandleForIDSCategory("Warning");
    id v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      int64_t v42 = (int64_t)v25;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_ERROR,  "Failed to remove peerIDCache v3 {error: %{public}@}",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v28))
    {
      _IDSWarnV(@"IDSFoundation", @"Failed to remove peerIDCache v3 {error: %{public}@}");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"Failed to remove peerIDCache v3 {error: %{public}@}");
      _IDSLogTransport(@"Warning", @"IDS", @"Failed to remove peerIDCache v3 {error: %{public}@}");
    }
  }

  uint64_t v29 = OSLogHandleForIDSCategory("PeerIDManager");
  BOOL v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    int64_t v42 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "Migrated Peer ID persistent map {oldVersionNumber: %ld}",  buf,  0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v31) && _IDSShouldLog(0LL, @"PeerIDManager")) {
    _IDSLogV( 0LL,  @"IDSFoundation",  @"PeerIDManager",  @"Migrated Peer ID persistent map {oldVersionNumber: %ld}");
  }
  uint64_t v32 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);

  return v32;
}

void sub_1002E1984( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
}

uint64_t sub_1002E19A0(uint64_t a1)
{
  __int128 v77 = 0u;
  __int128 v78 = 0u;
  __int128 v79 = 0u;
  __int128 v80 = 0u;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id obj = (id)objc_claimAutoreleasedReturnValue([WeakRetained persistentMaps]);
  id v58 = [obj countByEnumeratingWithState:&v77 objects:v89 count:16];
  if (v58)
  {
    uint64_t v57 = *(void *)v78;
    do
    {
      for (i = 0LL; i != v58; i = (char *)i + 1)
      {
        if (*(void *)v78 != v57) {
          objc_enumerationMutation(obj);
        }
        unsigned __int8 v63 = *(void **)(*((void *)&v77 + 1) + 8LL * (void)i);
        uint64_t v1 = OSLogHandleForIDSCategory("Sysdiagnose-Oversized");
        unsigned int v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
        if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Query cache:", buf, 2u);
        }

        if (os_log_shim_legacy_logging_enabled(v3)
          && _IDSShouldLog(0LL, @"Sysdiagnose-Oversized"))
        {
          _IDSLogV(0LL, @"IDSFoundation", @"Sysdiagnose-Oversized", @"Query cache:");
        }

        __int128 v75 = 0u;
        __int128 v76 = 0u;
        __int128 v73 = 0u;
        __int128 v74 = 0u;
        id v61 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v63, "allKeys", v52));
        id v64 = [v61 countByEnumeratingWithState:&v73 objects:v88 count:16];
        if (v64)
        {
          uint64_t v62 = *(void *)v74;
          do
          {
            for (j = 0LL; j != v64; j = (char *)j + 1)
            {
              if (*(void *)v74 != v62) {
                objc_enumerationMutation(v61);
              }
              uint64_t v4 = *(void **)(*((void *)&v73 + 1) + 8LL * (void)j);
              uint64_t v5 = OSLogHandleForIDSCategory("Sysdiagnose-Oversized");
              unsigned __int8 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
              if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
              {
                id v7 = (__CFString *)objc_claimAutoreleasedReturnValue([v4 service]);
                double v8 = (void *)objc_claimAutoreleasedReturnValue([v4 fromURI]);
                uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v4 toURI]);
                *(_DWORD *)buf = 138543875;
                __int16 v83 = v7;
                __int16 v84 = 2113;
                __int16 v85 = v8;
                __int16 v86 = 2113;
                __int16 v87 = v9;
                _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Key: <%{public}@,from:%{private}@,to:%{private}@>",  buf,  0x20u);
              }

              if (os_log_shim_legacy_logging_enabled(v10)
                && _IDSShouldLog(0LL, @"Sysdiagnose-Oversized"))
              {
                uint64_t v11 = (__CFString *)objc_claimAutoreleasedReturnValue([v4 service]);
                uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue([v4 fromURI]);
                uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue([v4 toURI]);
                uint64_t v52 = v11;
                _IDSLogV( 0LL,  @"IDSFoundation",  @"Sysdiagnose-Oversized",  @"Key: <%{public}@,from:%{private}@,to:%{private}@>");
              }

              __int128 v71 = 0u;
              __int128 v72 = 0u;
              __int128 v69 = 0u;
              __int128 v70 = 0u;
              unsigned __int8 v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v63, "objectForKey:", v4, v52, v53, v54));
              id v66 = (id)objc_claimAutoreleasedReturnValue([v12 endpoints]);

              id v68 = [v66 countByEnumeratingWithState:&v69 objects:v81 count:16];
              if (v68)
              {
                uint64_t v67 = *(void *)v70;
                do
                {
                  for (k = 0LL; k != v68; k = (char *)k + 1)
                  {
                    if (*(void *)v70 != v67) {
                      objc_enumerationMutation(v66);
                    }
                    double v14 = *(void **)(*((void *)&v69 + 1) + 8LL * (void)k);
                    uint64_t v15 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "serializedPublicLegacyIdentity", v52));
                    uint64_t v16 = OSLogHandleForIDSCategory("Sysdiagnose");
                    uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
                    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
                    {
                      unsigned __int8 v18 = (__CFString *)objc_claimAutoreleasedReturnValue([v14 URI]);
                      *(_DWORD *)buf = 138412290;
                      __int16 v83 = v18;
                      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "        URI: %@", buf, 0xCu);
                    }

                    if (os_log_shim_legacy_logging_enabled(v19)
                      && _IDSShouldLog(0LL, @"Sysdiagnose"))
                    {
                      uint64_t v52 = (__CFString *)objc_claimAutoreleasedReturnValue([v14 URI]);
                      _IDSLogV(0LL, @"IDSFoundation", @"Sysdiagnose", @"        URI: %@");
                    }

                    uint64_t v20 = OSLogHandleForIDSCategory("Sysdiagnose");
                    uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
                    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
                    {
                      id v22 = (__CFString *)objc_claimAutoreleasedReturnValue([v14 shortHandle]);
                      *(_DWORD *)buf = 138412290;
                      __int16 v83 = v22;
                      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "        Short Handle: %@",  buf,  0xCu);
                    }

                    if (os_log_shim_legacy_logging_enabled(v23)
                      && _IDSShouldLog(0LL, @"Sysdiagnose"))
                    {
                      uint64_t v52 = (__CFString *)objc_claimAutoreleasedReturnValue([v14 shortHandle]);
                      _IDSLogV(0LL, @"IDSFoundation", @"Sysdiagnose", @"        Short Handle: %@");
                    }

                    uint64_t v24 = OSLogHandleForIDSCategory("Sysdiagnose");
                    id v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
                    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
                    {
                      uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v14 pushToken]);
                      id v27 = (__CFString *)(id)objc_claimAutoreleasedReturnValue([v26 debugDescription]);
                      *(_DWORD *)buf = 138412290;
                      __int16 v83 = v27;
                      _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "        Push token: %@",  buf,  0xCu);
                    }

                    if (os_log_shim_legacy_logging_enabled(v28)
                      && _IDSShouldLog(0LL, @"Sysdiagnose"))
                    {
                      uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v14 pushToken]);
                      uint64_t v52 = (__CFString *)objc_claimAutoreleasedReturnValue([v29 debugDescription]);
                      _IDSLogV(0LL, @"IDSFoundation", @"Sysdiagnose", @"        Push token: %@");
                    }

                    uint64_t v30 = OSLogHandleForIDSCategory("Sysdiagnose");
                    uint64_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
                    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
                    {
                      uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([v14 sessionToken]);
                      id v33 = (__CFString *)(id)objc_claimAutoreleasedReturnValue([v32 debugDescription]);
                      *(_DWORD *)buf = 138412290;
                      __int16 v83 = v33;
                      _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "        Session token: %@",  buf,  0xCu);
                    }

                    if (os_log_shim_legacy_logging_enabled(v34)
                      && _IDSShouldLog(0LL, @"Sysdiagnose"))
                    {
                      id v35 = (void *)objc_claimAutoreleasedReturnValue([v14 sessionToken]);
                      uint64_t v52 = (__CFString *)objc_claimAutoreleasedReturnValue([v35 debugDescription]);
                      _IDSLogV(0LL, @"IDSFoundation", @"Sysdiagnose", @"        Session token: %@");
                    }

                    uint64_t v36 = OSLogHandleForIDSCategory("Sysdiagnose");
                    id v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
                    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
                    {
                      id v38 = (__CFString *)objc_claimAutoreleasedReturnValue([v14 expireDate]);
                      *(_DWORD *)buf = 138412290;
                      __int16 v83 = v38;
                      _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "        Expire: %@",  buf,  0xCu);
                    }

                    if (os_log_shim_legacy_logging_enabled(v39)
                      && _IDSShouldLog(0LL, @"Sysdiagnose"))
                    {
                      uint64_t v52 = (__CFString *)objc_claimAutoreleasedReturnValue([v14 expireDate]);
                      _IDSLogV(0LL, @"IDSFoundation", @"Sysdiagnose", @"        Expire: %@");
                    }

                    uint64_t v40 = OSLogHandleForIDSCategory("Sysdiagnose");
                    id v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
                    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
                    {
                      int64_t v42 = (__CFString *)objc_claimAutoreleasedReturnValue([v14 refreshDate]);
                      *(_DWORD *)buf = 138412290;
                      __int16 v83 = v42;
                      _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEFAULT,  "        Refresh: %@",  buf,  0xCu);
                    }

                    if (os_log_shim_legacy_logging_enabled(v43)
                      && _IDSShouldLog(0LL, @"Sysdiagnose"))
                    {
                      uint64_t v52 = (__CFString *)objc_claimAutoreleasedReturnValue([v14 refreshDate]);
                      _IDSLogV(0LL, @"IDSFoundation", @"Sysdiagnose", @"        Refresh: %@");
                    }

                    uint64_t v44 = OSLogHandleForIDSCategory("Sysdiagnose");
                    uint64_t v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v44);
                    if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)buf = 138412290;
                      __int16 v83 = v15;
                      _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEFAULT,  "        Public Key: %@",  buf,  0xCu);
                    }

                    if (os_log_shim_legacy_logging_enabled(v46)
                      && _IDSShouldLog(0LL, @"Sysdiagnose"))
                    {
                      uint64_t v52 = v15;
                      _IDSLogV(0LL, @"IDSFoundation", @"Sysdiagnose", @"        Public Key: %@");
                    }
                  }

                  id v68 = [v66 countByEnumeratingWithState:&v69 objects:v81 count:16];
                }

                while (v68);
              }
            }

            id v64 = [v61 countByEnumeratingWithState:&v73 objects:v88 count:16];
          }

          while (v64);
        }
      }

      id v58 = [obj countByEnumeratingWithState:&v77 objects:v89 count:16];
    }

    while (v58);
  }

  uint64_t v47 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog sysdiagnose_oversized](&OBJC_CLASS___IMRGLog, "sysdiagnose_oversized"));
  if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) keyTransparencyVerifier]);
    unsigned int v49 = [v48 isOptedInForServiceIdentifier:@"com.apple.madrid"];
    uint64_t v50 = @"NO";
    if (v49) {
      uint64_t v50 = @"YES";
    }
    *(_DWORD *)buf = 138412290;
    __int16 v83 = v50;
    _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "KT Opt In State: %@", buf, 0xCu);
  }

  return 0LL;
}

LABEL_216:
                      }

                      else
                      {
                        uint64_t v142 = 0LL;
                      }

                      objc_autoreleasePoolPop(context);
                      LOBYTE(v196) = v218;
                      LOBYTE(v192) = v249;
                      double v150 = -[IDSEndpoint initWithURI:serviceIdentifier:clientData:KTLoggableData:KTDeviceSignature:mismatchedAccountFlag:ktCapableFlag:pushToken:sessionToken:expireDate:refreshDate:anonymizedSenderID:verifiedBusiness:serializedPublicMessageProtectionIdentity:queryTimeInterval:serializedNGMDeviceIdentity:serializedNGMDevicePrekey:serializedApplicationPublicKey:endpointURIProperties:familyEndpointData:gameCenterData:]( objc_alloc(&OBJC_CLASS___IDSEndpoint),  "initWithURI:serviceIdentifier:clientData:KTLoggableData:KTDeviceSignature:mismatchedAccou ntFlag:ktCapableFlag:pushToken:sessionToken:expireDate:refreshDate:anonymizedSenderID:ver ifiedBusiness:serializedPublicMessageProtectionIdentity:queryTimeInterval:serializedNGMDe viceIdentity:serializedNGMDevicePrekey:serializedApplicationPublicKey:endpointURIProperti es:familyEndpointData:gameCenterData:",  v14,  v11,  v131,  v260,  v255,  v245,  v140,  v192,  v266,  v256,  v241,  v242,  v219,  v196,  v229,  v227,  v228,  v142,  v243,  v252,  v246);
                      -[NSMutableArray addObject:](v231, "addObject:", v150);

                      id v250 = 1;
                    }
                  }

                  else
                  {
                    id v147 = OSLogHandleForIDSCategory("PeerLookup_OLD");
                    id v148 = (os_log_s *)objc_claimAutoreleasedReturnValue(v147);
                    if (os_log_type_enabled(v148, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_impl( (void *)&_mh_execute_header,  v148,  OS_LOG_TYPE_DEFAULT,  "   No known push token found, ignoring",  buf,  2u);
                    }

                    if (os_log_shim_legacy_logging_enabled(v149)
                      && _IDSShouldLog(0LL, @"PeerLookup_OLD"))
                    {
                      _IDSLogV( 0LL,  @"IDSFoundation",  @"PeerLookup_OLD",  @"   No known push token found, ignoring");
                    }
                  }
                }

                else
                {
                  uint64_t v112 = OSLogHandleForIDSCategory("Warning");
                  id v113 = (os_log_s *)objc_claimAutoreleasedReturnValue(v112);
                  if (os_log_type_enabled(v113, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 138412290;
                    v317 = (uint64_t)v266;
                    _os_log_impl( (void *)&_mh_execute_header,  v113,  OS_LOG_TYPE_ERROR,  "   No known iMessage public key found for token, skipping this identity: %@",  buf,  0xCu);
                  }

                  if (os_log_shim_legacy_logging_enabled(v114))
                  {
                    _IDSWarnV( @"IDSFoundation",  @"   No known iMessage public key found for token, skipping this identity: %@");
                    _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"   No known iMessage public key found for token, skipping this identity: %@");
                    id v190 = v266;
                    _IDSLogTransport( @"Warning",  @"IDS",  @"   No known iMessage public key found for token, skipping this identity: %@");
                  }
                }

                uint64_t v30 = v244 + 1;
              }

              while ((id)(v244 + 1) != v238);
              v238 = [v223 countByEnumeratingWithState:&v297 objects:v315 count:16];
            }

            while (v238);
          }

          else
          {
            id v250 = 0;
          }

          uint64_t v151 = objc_alloc(&OBJC_CLASS___KTVerifierResult);
          uint64_t v152 = (void *)objc_claimAutoreleasedReturnValue( +[IDSKeyTransparencyVerifier keyTransparencyURIPrefixForServiceIdentifier:]( &OBJC_CLASS___IDSKeyTransparencyVerifier,  "keyTransparencyURIPrefixForServiceIdentifier:",  v11));
          CFTypeRef v153 = (void *)objc_claimAutoreleasedReturnValue([v14 prefixedURI]);
          uint64_t v154 = (void *)objc_claimAutoreleasedReturnValue([v152 stringByAppendingString:v153]);
          uint64_t v155 = (void *)objc_claimAutoreleasedReturnValue( +[IDSKeyTransparencyVerifier keyTransparencyApplicationForServiceIdentifier:]( &OBJC_CLASS___IDSKeyTransparencyVerifier,  "keyTransparencyApplicationForServiceIdentifier:",  v11));
          v265 = [v151 initPendingForUri:v154 application:v155];

          uint64_t v156 = objc_alloc(&OBJC_CLASS___IDSQueryKeyTransparencyContext);
          CFTypeRef v157 = (void *)objc_claimAutoreleasedReturnValue(-[IDSKeyTransparencyIndex accountKey](v200, "accountKey"));
          v263 = -[IDSQueryKeyTransparencyContext initWithVerifierResult:ticket:accountKey:queryResponseTime:ktOptIn:]( v156,  "initWithVerifierResult:ticket:accountKey:queryResponseTime:ktOptIn:",  v265,  0LL,  v157,  v198,  v197);

          uint64_t v261 = (void *)objc_claimAutoreleasedReturnValue( +[IDSPeerIDValue peerIDValueWithEndpoints:keyTransparencyContext:]( &OBJC_CLASS___IDSPeerIDValue,  "peerIDValueWithEndpoints:keyTransparencyContext:",  v231,  v263));
          [v230 setObject:v261 forKey:v209];
          uint64_t v288 = 0u;
          v286 = 0u;
          id v287 = 0u;
          __int128 v285 = 0u;
          v267 = (id)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary allValues](self->_clientDataUpdateBlocks, "allValues"));
          id v158 = [v267 countByEnumeratingWithState:&v285 objects:v311 count:16];
          if (v158)
          {
            __int128 v269 = *(void *)v286;
            do
            {
              for (m = 0LL; m != v158; m = (char *)m + 1)
              {
                if (*(void *)v286 != v269) {
                  objc_enumerationMutation(v267);
                }
                v160 = *(void *)(*((void *)&v285 + 1) + 8LL * (void)m);
                id v281 = 0u;
                __int128 v282 = 0u;
                __int128 v283 = 0u;
                __int128 v284 = 0u;
                uint64_t v161 = v231;
                v162 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v161,  "countByEnumeratingWithState:objects:count:",  &v281,  v310,  16LL);
                if (v162)
                {
                  __int16 v163 = *(void *)v282;
                  do
                  {
                    for (n = 0LL; n != v162; n = (char *)n + 1)
                    {
                      if (*(void *)v282 != v163) {
                        objc_enumerationMutation(v161);
                      }
                      (*(void (**)(uint64_t, id, void *, id, void))(v160 + 16))( v160,  v11,  v14,  v10,  *(void *)(*((void *)&v281 + 1) + 8LL * (void)n));
                    }

                    v162 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v161,  "countByEnumeratingWithState:objects:count:",  &v281,  v310,  16LL);
                  }

                  while (v162);
                }
              }

              id v158 = [v267 countByEnumeratingWithState:&v285 objects:v311 count:16];
            }

            while (v158);
          }

          if ((v250 & 1) == 0) {
            -[IDSPeerIDManager_OLD forgetPeerTokensForURI:fromURI:service:]( self,  "forgetPeerTokensForURI:fromURI:service:",  v14,  v10,  v11);
          }
          id v165 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v250 & 1, v190));
          -[NSMutableDictionary setObject:forKeyedSubscript:](v206, "setObject:forKeyedSubscript:", v165, v14);

          v166 = -[NSMutableArray copy](v231, "copy");
          -[NSMutableDictionary setObject:forKeyedSubscript:](v214, "setObject:forKeyedSubscript:", v166, v14);
        }

        else
        {
          -[IDSPeerIDManager_OLD forgetPeerTokensForURI:fromURI:service:]( self,  "forgetPeerTokensForURI:fromURI:service:",  v14,  v10,  v11);
          -[NSMutableDictionary setObject:forKeyedSubscript:]( v206,  "setObject:forKeyedSubscript:",  &__kCFBooleanFalse,  v14);
          -[NSMutableDictionary setObject:forKeyedSubscript:]( v214,  "setObject:forKeyedSubscript:",  &__NSArray0__struct,  v14);
        }

        unsigned __int8 v12 = v208 + 1;
      }

      while ((id)(v208 + 1) != v207);
      id v167 = [obj countByEnumeratingWithState:&v305 objects:v327 count:16];
      v207 = v167;
    }

    while (v167);
  }

  __int128 v270 = (void *)objc_claimAutoreleasedReturnValue(-[IDSPeerIDManager_OLD _peerIDKeysForService:](self, "_peerIDKeysForService:", v11));
  uint64_t v168 = [v270 count];
  if (v168 > (id)-[IDSPeerIDManager_OLD excessiveQueryCacheEntriesThreshold]( self,  "excessiveQueryCacheEntriesThreshold"))
  {
    uint64_t v169 = OSLogHandleForIDSCategory("PeerLookup_OLD");
    double v170 = (os_log_s *)objc_claimAutoreleasedReturnValue(v169);
    if (os_log_type_enabled(v170, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v171 = [v270 count];
      *(_DWORD *)buf = 138412546;
      v317 = (uint64_t)v11;
      __int16 v318 = 2048;
      v319 = v171;
      _os_log_impl( (void *)&_mh_execute_header,  v170,  OS_LOG_TYPE_DEFAULT,  "Excessive query cache entries detected for service: %@ {current count: %ld}",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v172)
      && _IDSShouldLog(0LL, @"PeerLookup_OLD"))
    {
      id v190 = v11;
      __int16 v193 = [v270 count];
      _IDSLogV( 0LL,  @"IDSFoundation",  @"PeerLookup_OLD",  @"Excessive query cache entries detected for service: %@ {current count: %ld}");
    }

    reportedExcessiveQueryCacheEntries = self->_reportedExcessiveQueryCacheEntries;
    if (!reportedExcessiveQueryCacheEntries)
    {
      id v174 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
      v175 = self->_reportedExcessiveQueryCacheEntries;
      self->_reportedExcessiveQueryCacheEntries = v174;

      reportedExcessiveQueryCacheEntries = self->_reportedExcessiveQueryCacheEntries;
    }

    if ((-[NSMutableSet containsObject:]( reportedExcessiveQueryCacheEntries,  "containsObject:",  v11,  v190,  v193) & 1) == 0)
    {
      -[NSMutableSet addObject:](self->_reportedExcessiveQueryCacheEntries, "addObject:", v11);
      if (+[IDSAutoBugCapture isSupported](&OBJC_CLASS___IDSAutoBugCapture, "isSupported"))
      {
        id v176 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"(%@)", v11));
        v279[0] = _NSConcreteStackBlock;
        v279[1] = 3221225472LL;
        v279[2] = sub_1002E533C;
        v279[3] = &unk_1008F8320;
        v280 = v11;
        +[IDSAutoBugCapture triggerCaptureWithEvent:context:completion:]( &OBJC_CLASS___IDSAutoBugCapture,  "triggerCaptureWithEvent:context:completion:",  211LL,  v176,  v279);
      }
    }
  }

  id v177 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
  if (os_log_type_enabled(v177, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v177,  OS_LOG_TYPE_DEFAULT,  "Remote query finished - kicking KT peer verification",  buf,  2u);
  }

  id v178 = (void *)objc_claimAutoreleasedReturnValue(-[IDSPeerIDManager_OLD keyTransparencyVerifier](self, "keyTransparencyVerifier"));
  [v178 kickPeerVerificationForURIs:obj service:v11 localURI:v10 fetchNow:0 withCompletion:&stru_100900368];

  id v277 = 0u;
  id v278 = 0u;
  id v275 = 0u;
  uint64_t v276 = 0u;
  uint64_t v179 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary allValues](self->_endpointQueryListeners, "allValues"));
  v180 = [v179 countByEnumeratingWithState:&v275 objects:v309 count:16];
  if (v180)
  {
    v181 = *(void *)v276;
    do
    {
      for (ii = 0LL; ii != v180; ii = (char *)ii + 1)
      {
        if (*(void *)v276 != v181) {
          objc_enumerationMutation(v179);
        }
        __int128 v183 = *(void **)(*((void *)&v275 + 1) + 8LL * (void)ii);
        __int128 v184 = (void *)objc_claimAutoreleasedReturnValue([v183 queryCompletionBlock]);
        if (v184)
        {
          __int128 v185 = (void *)objc_claimAutoreleasedReturnValue([v183 queue]);
          __int128 v186 = v185 == 0LL;

          if (!v186)
          {
            id v187 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v183 queue]);
            block[0] = _NSConcreteStackBlock;
            block[1] = 3221225472LL;
            block[2] = sub_1002E5534;
            block[3] = &unk_1008F60E8;
            void block[4] = v183;
            v272 = v11;
            v273 = v10;
            id v274 = v214;
            dispatch_async(v187, block);
          }
        }
      }

      v180 = [v179 countByEnumeratingWithState:&v275 objects:v309 count:16];
    }

    while (v180);
  }

  -[IDSPeerIDManager_OLD performCleanupTasks](self, "performCleanupTasks");
  v188 = -[NSMutableDictionary copy](v206, "copy");

  return v188;
}

void sub_1002E533C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = OSLogHandleForIDSCategory("PeerLookup_OLD");
  double v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412802;
    uint64_t v12 = v9;
    __int16 v13 = 2112;
    id v14 = v5;
    __int16 v15 = 2112;
    id v16 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Triggered auto bug capture for excessive query cache entries for service: %@ {session : %@, error: %@}",  buf,  0x20u);
  }

  if (os_log_shim_legacy_logging_enabled(v10)
    && _IDSShouldLog(0LL, @"PeerLookup_OLD"))
  {
    _IDSLogV( 0LL,  @"IDSFoundation",  @"PeerLookup_OLD",  @"Triggered auto bug capture for excessive query cache entries for service: %@ {session : %@, error: %@}");
  }
}

void sub_1002E5480(id a1, NSArray *a2, NSError *a3)
{
  uint64_t v3 = a3;
  if (v3)
  {
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 138412290;
      id v6 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Failed kicking KT peer verification for query { error: %@ }",  (uint8_t *)&v5,  0xCu);
    }
  }
}

void sub_1002E5534(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queryCompletionBlock]);
  (*((void (**)(id, void, void, void))v2 + 2))( v2,  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56));
}

uint64_t sub_1002E6138(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a2 pushToken]);
  uint64_t v4 = [v2 isEqualToData:v3] ^ 1;

  return v4;
}

id sub_1002E617C(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 rawToken]);
  int v5 = (void *)objc_claimAutoreleasedReturnValue([v3 pushToken]);

  id v6 = [v4 isEqualToData:v5];
  return v6;
}

id sub_1002E6304(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 pushTokenObject]);
  id v4 = [v3 isEqualToPushToken:*(void *)(a1 + 32)];

  return v4;
}

id sub_1002E66D0(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 pushTokenObject]);
  id v4 = [v3 isEqualToPushToken:*(void *)(a1 + 32)];

  return v4;
}

id sub_1002E743C(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 pushTokenObject]);
  id v4 = [v3 isEqualToPushToken:*(void *)(a1 + 32)];

  return v4;
}

uint64_t sub_1002E77CC(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v17;
    while (2)
    {
      for (i = 0LL; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v17 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void *)(*((void *)&v16 + 1) + 8LL * (void)i);
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKeyedSubscript:", v9, (void)v16));
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v3 capabilities]);
        id v12 = [v11 valueForCapability:v9];
        id v13 = [v10 integerValue];

        if (v12 != v13)
        {
          uint64_t v14 = 0LL;
          goto LABEL_11;
        }
      }

      id v6 = [v4 countByEnumeratingWithState:&v16 objects:v20 count:16];
      if (v6) {
        continue;
      }
      break;
    }
  }

  uint64_t v14 = 1LL;
LABEL_11:

  return v14;
}

id sub_1002E84AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 service]);
  if ([v4 isEqualToString:*(void *)(a1 + 32)])
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 fromURI]);
    id v6 = [v5 isEqual:*(void *)(a1 + 40)];
  }

  else
  {
    id v6 = 0LL;
  }

  return v6;
}

id sub_1002E85DC(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 service]);
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

id sub_1002E899C(id a1, NSString *a2)
{
  id v2 = a2;
  if (-[NSString isEqualToString:](v2, "isEqualToString:", kFZServiceDefaultsSentinelAlias)
    || -[NSString isEqualToString:](v2, "isEqualToString:", kIDSServiceDefaultsSentinelSelfAlias))
  {
    id v3 = 0LL;
  }

  else
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue(+[IDSURI URIWithPrefixedURI:](&OBJC_CLASS___IDSURI, "URIWithPrefixedURI:", v2));
  }

  return v3;
}

id sub_1002E941C(id a1, IDSURI *a2)
{
  id v2 = a2;
  id v3 = objc_autoreleasePoolPush();
  id v4 = (void *)objc_claimAutoreleasedReturnValue(-[IDSURI tokenFreeURI](v2, "tokenFreeURI"));
  objc_autoreleasePoolPop(v3);

  return v4;
}

void sub_1002E946C( uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, unsigned int a8, void *a9, unsigned __int8 a10)
{
  id v48 = a2;
  id v47 = a3;
  id v16 = a4;
  id v46 = a5;
  id v45 = a6;
  id v44 = a7;
  id v43 = a9;
  __int128 v17 = *(void **)(a1 + 32);
  __int128 v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) allObjects]);
  unsigned int v49 = (void *)objc_claimAutoreleasedReturnValue( [v17 endpointsForURIs:v18 service:*(void *)(a1 + 48) fromURI:*(void *)(a1 + 56)]);

  __int128 v19 = -[NSMutableDictionary initWithCapacity:]( [NSMutableDictionary alloc],  "initWithCapacity:",  [*(id *)(a1 + 64) count]);
  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  __int128 v57 = 0u;
  __int128 v58 = 0u;
  __int128 v59 = 0u;
  __int128 v60 = 0u;
  id obj = *(id *)(a1 + 64);
  id v53 = [obj countByEnumeratingWithState:&v57 objects:v61 count:16];
  if (v53)
  {
    uint64_t v52 = *(void *)v58;
    uint64_t v51 = a1;
    do
    {
      for (i = 0LL; i != v53; i = (char *)i + 1)
      {
        if (*(void *)v58 != v52) {
          objc_enumerationMutation(obj);
        }
        id v22 = *(void **)(*((void *)&v57 + 1) + 8LL * (void)i);
        uint64_t v23 = objc_autoreleasePoolPush();
        uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v22 pushToken]);
        id v25 = (void *)objc_claimAutoreleasedReturnValue([v22 tokenFreeURI]);
        uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [*(id *)(a1 + 32) hasPeerTokensForURI:v25 fromURI:*(void *)(a1 + 56) service:*(void *)(a1 + 48)]));
        -[NSMutableDictionary setObject:forKey:](v19, "setObject:forKey:", v26, v25);

        context = v23;
        if (![v16 count])
        {
          if (!v24) {
            goto LABEL_17;
          }
LABEL_11:
          uint64_t v29 = *(void **)(a1 + 72);
          goto LABEL_12;
        }

        unsigned __int8 v27 = [v16 containsObject:v25];
        unsigned __int8 v28 = v27;
        if (!v24)
        {
          if ((v27 & 1) != 0) {
            id v37 = v49;
          }
          else {
LABEL_17:
          }
            id v37 = *(void **)(a1 + 72);
          uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([v37 objectForKeyedSubscript:v25]);
          [v20 setObject:v32 forKeyedSubscript:v25];
          goto LABEL_19;
        }

        uint64_t v29 = v49;
        if ((v28 & 1) == 0) {
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v30 = v19;
        id v31 = v16;
        uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([v29 objectForKeyedSubscript:v25]);
        v55[0] = _NSConcreteStackBlock;
        v55[1] = 3221225472LL;
        v55[2] = sub_1002E988C;
        void v55[3] = &unk_1008F6110;
        id v56 = v24;
        id v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "__imArrayByFilteringWithBlock:", v55));
        uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([v20 objectForKeyedSubscript:v25]);
        id v35 = v34;
        if (v34)
        {
          uint64_t v36 = objc_claimAutoreleasedReturnValue([v34 arrayByAddingObjectsFromArray:v33]);

          id v33 = (void *)v36;
        }

        [v20 setObject:v33 forKeyedSubscript:v25];

        id v16 = v31;
        __int128 v19 = v30;
        a1 = v51;
LABEL_19:

        uint64_t v38 = objc_claimAutoreleasedReturnValue([v20 objectForKeyedSubscript:v25]);
        uint64_t v39 = (void *)v38;
        if (v38) {
          uint64_t v40 = (void *)v38;
        }
        else {
          uint64_t v40 = &__NSArray0__struct;
        }
        [v20 setObject:v40 forKeyedSubscript:v25];

        objc_autoreleasePoolPop(context);
      }

      id v53 = [obj countByEnumeratingWithState:&v57 objects:v61 count:16];
    }

    while (v53);
  }

  uint64_t v41 = *(void *)(a1 + 80);
  if (v41) {
    (*(void (**)(uint64_t, id, NSMutableDictionary *, id, id, void, id, void, void *))(v41 + 16))( v41,  v48,  v19,  v45,  v44,  a8,  v43,  a10,  v20);
  }
}

id sub_1002E988C(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 pushTokenObject]);
  id v4 = [v3 isEqualToPushToken:*(void *)(a1 + 32)];

  return v4;
}

id sub_1002EAD34(id a1, NSString *a2)
{
  id v2 = a2;
  if (-[NSString isEqualToString:](v2, "isEqualToString:", kFZServiceDefaultsSentinelAlias)
    && -[NSString isEqualToString:](v2, "isEqualToString:", kIDSServiceDefaultsSentinelSelfAlias))
  {
    id v3 = 0LL;
  }

  else
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue(+[IDSURI URIWithPrefixedURI:](&OBJC_CLASS___IDSURI, "URIWithPrefixedURI:", v2));
  }

  return v3;
}

id sub_1002EB21C(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 service]);
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

void sub_1002EC058( uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, unsigned int a8, void *a9, unsigned __int8 a10)
{
  id v16 = a2;
  id v17 = a3;
  id v33 = a4;
  id v32 = a5;
  id v31 = a6;
  id v18 = a7;
  id v30 = a9;
  __int128 v19 = -[NSMutableDictionary initWithCapacity:]( [NSMutableDictionary alloc],  "initWithCapacity:",  [v17 count]);
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  __int128 v38 = 0u;
  id obj = v17;
  id v20 = [obj countByEnumeratingWithState:&v35 objects:v39 count:16];
  if (v20)
  {
    id v21 = v20;
    uint64_t v22 = *(void *)v36;
    do
    {
      for (i = 0LL; i != v21; i = (char *)i + 1)
      {
        if (*(void *)v36 != v22) {
          objc_enumerationMutation(obj);
        }
        uint64_t v24 = *(void **)(*((void *)&v35 + 1) + 8LL * (void)i);
        id v25 = objc_autoreleasePoolPush();
        uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v24 tokenFreeURI]);
        unsigned __int8 v27 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [*(id *)(a1 + 32) hasPeerTokensForURI:v26 fromURI:v16 service:v18]));
        -[NSMutableDictionary setObject:forKey:](v19, "setObject:forKey:", v27, v26);

        objc_autoreleasePoolPop(v25);
      }

      id v21 = [obj countByEnumeratingWithState:&v35 objects:v39 count:16];
    }

    while (v21);
  }

  uint64_t v28 = *(void *)(a1 + 40);
  if (v28) {
    (*(void (**)(uint64_t, id, NSMutableDictionary *, id, id, void, id, void))(v28 + 16))( v28,  v16,  v19,  v31,  v18,  a8,  v30,  a10);
  }
}

void sub_1002ECB64(void *a1)
{
  if (!*(void *)(a1[4] + 24LL))
  {
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    uint64_t v3 = a1[4];
    id v4 = *(void **)(v3 + 24);
    *(void *)(v3 + 24) = Mutable;
  }

  id v5 = -[IDSPeerIDManagerEndpointQueryListener initWithQueryCompletionBlock:queue:]( objc_alloc(&OBJC_CLASS___IDSPeerIDManagerEndpointQueryListener),  "initWithQueryCompletionBlock:queue:",  a1[7],  a1[5]);
  [*(id *)(a1[4] + 24) setObject:v5 forKey:a1[6]];
}

void sub_1002ECD74(uint64_t a1)
{
  if (![*(id *)(*(void *)(a1 + 32) + 24) count])
  {
    uint64_t v2 = *(void *)(a1 + 32);
    uint64_t v3 = *(void **)(v2 + 24);
    *(void *)(v2 + 24) = 0LL;
  }

uint64_t sub_1002ED098(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1002ED0A8(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) endpointsForURIs:*(void *)(a1 + 40) service:*(void *)(a1 + 48) fromURI:*(void *)(a1 + 56)]);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _DWORD v6[2] = sub_1002ED14C;
  v6[3] = &unk_1008F6358;
  uint64_t v3 = *(dispatch_queue_s **)(a1 + 64);
  id v4 = *(id *)(a1 + 72);
  id v7 = v2;
  id v8 = v4;
  id v5 = v2;
  dispatch_async(v3, v6);
}

uint64_t sub_1002ED14C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

id sub_1002ED230(uint64_t a1)
{
  return _[*(id *)(a1 + 32) cleanupExpiredEntriesIfNeeded];
}

id sub_1002ED28C(uint64_t a1)
{
  return _[*(id *)(a1 + 32) removeExcessiveQueryEntriesIfNeeded];
}

void sub_1002EDF68(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___IDSGroupEncryptionController);
  uint64_t v2 = (void *)qword_1009C0A88;
  qword_1009C0A88 = (uint64_t)v1;
}

void sub_1002EF224(_Unwind_Exception *a1)
{
}

void sub_1002EF788(_Unwind_Exception *a1)
{
}

void sub_1002EFF2C(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___IDSDMessageStore);
  uint64_t v2 = (void *)qword_1009C0A98;
  qword_1009C0A98 = (uint64_t)v1;
}

void sub_1002F0A60( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, char a37, uint64_t a38, uint64_t a39, uint64_t a40, char a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, char a47)
{
}

uint64_t sub_1002F0AB8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1002F0AC8(uint64_t a1)
{
}

void sub_1002F0AD0(uint64_t a1)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472LL;
  v2[2] = sub_1002F0B34;
  v2[3] = &unk_100900578;
  __int128 v3 = *(_OWORD *)(a1 + 40);
  uint64_t v1 = *(void *)(a1 + 64);
  uint64_t v4 = *(void *)(a1 + 56);
  sub_1003AFDCC(v1, v2, *(void **)(a1 + 32));
}

void sub_1002F0B34(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v6 = (const __CFArray *)CSDBRecordStoreProcessStatement(a2, &off_100900458, a4, 0LL, 0LL);
  *(void *)(*(void *)(a1[4] + 8LL) + 24LL) = CFArrayGetCount(v6);
  if (*(uint64_t *)(*(void *)(a1[4] + 8LL) + 24LL) >= 1)
  {
    CFIndex v7 = 0LL;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v6, v7);
      uint64_t v9 = *(void *)(*(void *)(a1[5] + 8LL) + 24LL);
      uint64_t ID = CSDBRecordGetID();
      RowidForRecorduint64_t ID = CSDBRecordStoreGetRowidForRecordID(a2, ID);
      if (v9 <= RowidForRecordID) {
        uint64_t v12 = RowidForRecordID;
      }
      else {
        uint64_t v12 = v9;
      }
      *(void *)(*(void *)(a1[5] + 8LL) + 24LL) = v12;
      uint64_t v13 = CSDBRecordIndexOfPropertyNamed(&off_1009004F8, 3LL, "data_protection_class");
      uint64_t Property = CSDBRecordGetProperty(ValueAtIndex, v13);
      id v15 = objc_alloc_init(&OBJC_CLASS___IDSMessageToDelete);
      [v15 setDataProtectionClass:Property];
      uint64_t v16 = CSDBRecordIndexOfPropertyNamed(&off_1009004F8, 3LL, "guid");
      id v17 = (const void *)CSDBRecordCopyProperty(ValueAtIndex, v16);
      [v15 setGUID:v17];
      uint64_t v18 = CSDBRecordIndexOfPropertyNamed(&off_1009004F8, 3LL, "alternate_guid");
      __int128 v19 = (const void *)CSDBRecordCopyProperty(ValueAtIndex, v18);
      [v15 setAlternateGUID:v19];
      uint64_t v20 = IDSDataProtectionClassStringFromDataProtectionClass(1LL);
      id v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
      uint64_t v22 = (NSMutableArray *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1[6] + 8) + 40) objectForKey:v21]);
      if (!v22) {
        uint64_t v22 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      }
      -[NSMutableArray addObject:](v22, "addObject:", v15);
      [*(id *)(*(void *)(a1[6] + 8) + 40) setObject:v22 forKey:v21];
      if (v17) {
        CFRelease(v17);
      }
      if (v19) {
        CFRelease(v19);
      }

      ++v7;
    }

    while (v7 < *(void *)(*(void *)(a1[4] + 8LL) + 24LL));
  }

  if (v6) {
    CFRelease(v6);
  }
}

void sub_1002F0D64(uint64_t a1)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472LL;
  v2[2] = sub_1002F0DC0;
  v2[3] = &unk_1009005C8;
  uint64_t v1 = *(void **)(a1 + 32);
  void v2[4] = *(void *)(a1 + 40);
  sub_1003AFE40((uint64_t)@"DELETE FROM outgoing_messages_to_delete WHERE ROWID <= ?;", v2, v1);
}

uint64_t sub_1002F0DC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return CSDBSqliteStatementPerform(a4);
}

void sub_1002F105C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  [v2 ensureDatabaseIsInitialized];

  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  sub_100036BD8(v3);
}

void sub_1002F3114( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

uint64_t sub_1002F3130(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_1002F31C4;
  v3[3] = &unk_1008F8A78;
  objc_copyWeak(&v4, (id *)(a1 + 40));
  [v1 performBlock:v3 waitUntilDone:1];
  objc_destroyWeak(&v4);
  return 0LL;
}

void sub_1002F31B0(_Unwind_Exception *a1)
{
}

void sub_1002F31C4(uint64_t a1)
{
  uint64_t v1 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained database]);
  id v4 = (void *)sub_100033BD4(v3);

  id v5 = objc_loadWeakRetained(v1);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 database]);
  CFIndex v7 = (void *)sub_100317848(v6);

  id v9 = sub_1002F3308(v8, v4);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  id v11 = sub_1002F3308((uint64_t)v10, v7);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
  uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSMessageStore](&OBJC_CLASS___IDSFoundationLog, "IDSMessageStore"));
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    int v14 = 138412546;
    id v15 = v10;
    __int16 v16 = 2112;
    id v17 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "Database state:\n  Outgoing (account_guid, count)\n%@  Incoming (topic, count)\n%@",  (uint8_t *)&v14,  0x16u);
  }
}

id sub_1002F3308(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = [&stru_100912B50 mutableCopy];
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  id v4 = v2;
  id v5 = [v4 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v15;
    do
    {
      for (i = 0LL; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v15 != v7) {
          objc_enumerationMutation(v4);
        }
        id v9 = *(void **)(*((void *)&v14 + 1) + 8LL * (void)i);
        if ((unint64_t)[v9 count] >= 2)
        {
          uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 objectAtIndexedSubscript:0]);
          id v11 = (void *)objc_claimAutoreleasedReturnValue([v9 objectAtIndexedSubscript:1]);
          [v3 appendFormat:@"    %@  %@\n", v10, v11, (void)v14];
        }
      }

      id v6 = [v4 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }

    while (v6);
  }

  id v12 = [v3 copy];
  return v12;
}

void sub_1002F34D0(uint64_t a1)
{
  id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSMessageStore](&OBJC_CLASS___IDSFoundationLog, "IDSMessageStore"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Performing initial database housekeeping", v4, 2u);
  }

  j__CSDBSqliteSetDefaultPageCacheSize(10LL);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  sub_1003B0120(v3);
}

void sub_1002F3630(uint64_t a1)
{
  id v2 = (id *)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  [v3 ensureDatabaseIsInitialized];

  int v4 = *(_DWORD *)(a1 + 64);
  uint64_t v5 = *(void *)(a1 + 48);
  BOOL v6 = *(unsigned __int8 *)(a1 + 68) == 1;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*v2 database]);
  if (v4) {
    uint64_t v8 = sub_100317EA0(v5, v4, v6, v7, *(_BYTE **)(a1 + 56));
  }
  else {
    uint64_t v8 = sub_100317960(v5, v6, v7, *(_BYTE **)(a1 + 56));
  }
  id v9 = (const __CFArray *)v8;

  if (v9)
  {
    int Count = CFArrayGetCount(v9);
    if (Count >= 1)
    {
      CFIndex v11 = 0LL;
      else {
        uint64_t v12 = Count;
      }
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v9, v11);
        CFTypeRef v25 = 0LL;
        CFTypeRef cf = 0LL;
        CFTypeRef v23 = 0LL;
        CFTypeRef v24 = 0LL;
        unsigned __int8 v22 = 0;
        unsigned int v21 = -1431655766;
        uint64_t v20 = 0LL;
        __int128 v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
        sub_100318464( (uint64_t)ValueAtIndex,  0LL,  (uint64_t)&v25,  (uint64_t)&v24,  (uint64_t)&v23,  (uint64_t)&cf,  0LL,  (uint64_t)&v22,  (uint64_t)&v20,  (uint64_t)&v21,  v14);

        uint64_t v15 = JWDecodeDictionary(cf);
        __int128 v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
        if (v16)
        {
          __int128 v17 = objc_alloc(&OBJC_CLASS___IDSDIncomingMessage);
          uint64_t v18 = -[IDSDIncomingMessage initWithMessage:fromID:topic:guid:isLocal:]( v17,  "initWithMessage:fromID:topic:guid:isLocal:",  v16,  v23,  v24,  v25,  v22);
          -[IDSDIncomingMessage setControlCategory:](v18, "setControlCategory:", v21);
          -[IDSDIncomingMessage setExpirationDate:](v18, "setExpirationDate:", v20);
          [*(id *)(a1 + 40) addObject:v18];
          if (cf)
          {
            CFRelease(cf);
            CFTypeRef cf = 0LL;
          }

          if (v25)
          {
            CFRelease(v25);
            CFTypeRef v25 = 0LL;
          }

          if (v24)
          {
            CFRelease(v24);
            CFTypeRef v24 = 0LL;
          }

          if (v23)
          {
            CFRelease(v23);
            CFTypeRef v23 = 0LL;
          }
        }

        else
        {
          __int128 v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSMessageStore](&OBJC_CLASS___IDSFoundationLog, "IDSMessageStore"));
          if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            CFTypeRef v28 = v25;
            _os_log_error_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "Bad messageData for incoming message %@!",  buf,  0xCu);
          }

          [*(id *)(a1 + 32) deleteIncomingMessageWithGUID:v25];
        }

        ++v11;
      }

      while (v12 != v11);
    }

    CFRelease(v9);
  }

void sub_1002F39A8(_Unwind_Exception *a1)
{
  if ((v1 & 1) != 0) {
    objc_end_catch();
  }
  _Unwind_Resume(a1);
}

void sub_1002F39C4(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x1002F39D0LL);
}

void sub_1002F3A9C(uint64_t a1)
{
  id v2 = (id *)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  [v3 ensureDatabaseIsInitialized];

  double v4 = *(double *)(a1 + 48);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*v2 database]);
  BOOL v6 = (const __CFArray *)sub_100317C0C((uint64_t)v4, v5, *(_BYTE **)(a1 + 56));

  if (v6)
  {
    int Count = CFArrayGetCount(v6);
    if (Count >= 1)
    {
      CFIndex v8 = 0LL;
      else {
        uint64_t v9 = Count;
      }
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v6, v8);
        CFTypeRef v22 = 0LL;
        CFTypeRef cf = 0LL;
        CFTypeRef v20 = 0LL;
        CFTypeRef v21 = 0LL;
        unsigned __int8 v19 = 0;
        unsigned int v18 = -1431655766;
        uint64_t v17 = 0LL;
        CFIndex v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
        sub_100318464( (uint64_t)ValueAtIndex,  0LL,  (uint64_t)&v22,  (uint64_t)&v21,  (uint64_t)&v20,  (uint64_t)&cf,  0LL,  (uint64_t)&v19,  (uint64_t)&v17,  (uint64_t)&v18,  v11);

        uint64_t v12 = JWDecodeDictionary(cf);
        uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
        if (v13)
        {
          __int128 v14 = objc_alloc(&OBJC_CLASS___IDSDIncomingMessage);
          uint64_t v15 = -[IDSDIncomingMessage initWithMessage:fromID:topic:guid:isLocal:]( v14,  "initWithMessage:fromID:topic:guid:isLocal:",  v13,  v20,  v21,  v22,  v19);
          -[IDSDIncomingMessage setControlCategory:](v15, "setControlCategory:", v18);
          -[IDSDIncomingMessage setExpirationDate:](v15, "setExpirationDate:", v17);
          [*(id *)(a1 + 40) addObject:v15];
          if (cf)
          {
            CFRelease(cf);
            CFTypeRef cf = 0LL;
          }

          if (v22)
          {
            CFRelease(v22);
            CFTypeRef v22 = 0LL;
          }

          if (v21)
          {
            CFRelease(v21);
            CFTypeRef v21 = 0LL;
          }

          if (v20)
          {
            CFRelease(v20);
            CFTypeRef v20 = 0LL;
          }
        }

        else
        {
          __int128 v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSMessageStore](&OBJC_CLASS___IDSFoundationLog, "IDSMessageStore"));
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            CFTypeRef v25 = v22;
            _os_log_error_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "Bad messageData for incoming message %@!",  buf,  0xCu);
          }

          [*(id *)(a1 + 32) deleteIncomingMessageWithGUID:v22];
        }

        ++v8;
      }

      while (v9 != v8);
    }

    CFRelease(v6);
  }

void sub_1002F3DE4(_Unwind_Exception *a1)
{
  if ((v1 & 1) != 0) {
    objc_end_catch();
  }
  _Unwind_Resume(a1);
}

void sub_1002F3E00(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x1002F3E0CLL);
}

void sub_1002F4178( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, os_activity_scope_state_s state, char a23)
{
}

void sub_1002F41B4(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  [v2 ensureDatabaseIsInitialized];

  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringGUID](&OBJC_CLASS___NSString, "stringGUID"));
  +[NSDate timeIntervalSinceReferenceDate](&OBJC_CLASS___NSDate, "timeIntervalSinceReferenceDate");
  double v5 = v4;
  uint64_t v27 = 0LL;
  state.opaque[1] = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v26 = _os_activity_create( (void *)&_mh_execute_header,  "Finished storing message",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[0] = 0xAAAAAAAAAAAAAAAALL;
  os_activity_scope_enter(v26, &state);
  uint64_t v7 = *(const __CFString **)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  int v8 = *(unsigned __int8 *)(a1 + 84);
  uint64_t v9 = *(const __CFString **)(a1 + 64);
  unsigned int v10 = *(_DWORD *)(a1 + 80);
  int v11 = *(unsigned __int8 *)(a1 + 85);
  uint64_t v12 = *(void *)(a1 + 40);
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  __int128 v14 = v13;
  if (v7) {
    uint64_t v15 = v7;
  }
  else {
    uint64_t v15 = &stru_100912B50;
  }
  __int128 v16 = sub_10031725C(0LL, (uint64_t)v3, v12, (uint64_t)v15, v6, (uint64_t)v5, v8 != 0, v9, v10, v11 == 2, &v27, v13);

  if (v16) {
    CFRelease(v16);
  }
  if (*(void *)(a1 + 72))
  {
    uint64_t v19 = im_primary_queue(v17, v18);
    CFTypeRef v20 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v19);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1002F43AC;
    block[3] = &unk_100900640;
    id v22 = *(id *)(a1 + 72);
    uint64_t v23 = v27;
    BOOL v24 = v16 != 0LL;
    dispatch_async(v20, block);
  }

  os_activity_scope_leave(&state);
  cut_arc_os_release(&v26);
}

void sub_1002F4388( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state, char a20)
{
}

void sub_1002F43AC(uint64_t a1)
{
  id v1 = *(id *)(a1 + 40);
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))(*(void *)(a1 + 32));
}

void sub_1002F5418(_Unwind_Exception *a1)
{
}

void sub_1002F54D4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1002F54EC(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  [v2 ensureDatabaseIsInitialized];

  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = sub_100033AC0(v3);
}

void sub_1002F55FC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1002F5614(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  [v2 ensureDatabaseIsInitialized];

  id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  uint64_t v3 = sub_100033CEC(v6);
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8LL);
  double v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_1002F5758( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1002F5770(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  [v2 ensureDatabaseIsInitialized];

  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  double v5 = (const void *)sub_100034010(v3, v4, 0);

  uint64_t v6 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _createOutgoingMessageRecordsFromSQLRecords:v5 includeMessagePayloads:0]);
  uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8LL);
  int v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  if (v5) {
    CFRelease(v5);
  }
}

void sub_1002F5920( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1002F5938(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  [v2 ensureDatabaseIsInitialized];

  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);
  double v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  uint64_t v6 = (const void *)sub_1000341D0(v4, v3, v5, 0);

  uint64_t v7 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _createOutgoingMessageRecordsFromSQLRecords:v6 includeMessagePayloads:0]);
  uint64_t v8 = *(void *)(*(void *)(a1 + 56) + 8LL);
  uint64_t v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;

  if (v6) {
    CFRelease(v6);
  }
}

void sub_1002F5A98( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1002F5AB0(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  [v2 ensureDatabaseIsInitialized];

  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  double v5 = (const void *)sub_1000343D4(v3, v4, 0);

  uint64_t v6 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _createOutgoingMessageRecordsFromSQLRecords:v5 includeMessagePayloads:0]);
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  if (v5) {
    CFRelease(v5);
  }
}

void sub_1002F5C0C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1002F5C24(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  [v2 ensureDatabaseIsInitialized];

  uint64_t v3 = *(void *)(a1 + 48);
  id v7 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  uint64_t v4 = sub_1000345AC(v3, v7);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;
}

void sub_1002F5DC8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1002F5DE0(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  [v2 ensureDatabaseIsInitialized];

  uint64_t v4 = *(void **)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  id v7 = (const void *)sub_100034764(v4, v3, v5, v6, 0);

  uint64_t v8 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _createOutgoingMessageRecordsFromSQLRecords:v7 includeMessagePayloads:0]);
  uint64_t v9 = *(void *)(*(void *)(a1 + 56) + 8LL);
  unsigned int v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;

  if (v7) {
    CFRelease(v7);
  }
}

void sub_1002F5FC4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1002F5FDC(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  [v2 ensureDatabaseIsInitialized];

  uint64_t v4 = *(void **)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v6 = *(void *)(a1 + 72);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  uint64_t v8 = (const void *)sub_10003499C(v4, v5, v3, v6, v7, 0);

  uint64_t v9 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _createOutgoingMessageRecordsFromSQLRecords:v8 includeMessagePayloads:0]);
  uint64_t v10 = *(void *)(*(void *)(a1 + 56) + 8LL);
  int v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = v9;

  if (v8) {
    CFRelease(v8);
  }
}

void sub_1002F61E0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
}

void sub_1002F61F8(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  [v2 ensureDatabaseIsInitialized];

  uint64_t v4 = *(void **)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v6 = *(void *)(a1 + 72);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  uint64_t v8 = (const void *)sub_100034C54(v4, v5, v3, v6, v7, *(_BYTE *)(a1 + 96), *(void *)(a1 + 80), *(_BYTE **)(a1 + 88));

  uint64_t v9 = objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _createOutgoingMessageRecordsFromSQLRecords:v8 includeMessagePayloads:*(unsigned __int8 *)(a1 + 96)]);
  uint64_t v10 = *(void *)(*(void *)(a1 + 56) + 8LL);
  int v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = v9;

  if (v8) {
    CFRelease(v8);
  }
}

void sub_1002F6378( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1002F6390(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  [v2 ensureDatabaseIsInitialized];

  uint64_t v3 = *(void *)(a1 + 48);
  char v4 = *(_BYTE *)(a1 + 56);
  id v8 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  uint64_t v5 = sub_1000335F0(1000LL, v3, v4, v8, 0LL);
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
}

void sub_1002F6508( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1002F6520(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  [v2 ensureDatabaseIsInitialized];

  uint64_t v3 = *(void *)(a1 + 56);
  char v4 = *(_BYTE *)(a1 + 64);
  id v8 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  uint64_t v5 = sub_1000335F0(1000LL, v3, v4, v8, *(void **)(a1 + 40));
  uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;
}

void sub_1002F6684( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1002F669C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  [v2 ensureDatabaseIsInitialized];

  id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  uint64_t v3 = sub_1000335F0(1000LL, 300LL, 0, v6, *(void **)(a1 + 40));
  uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_1002F68C4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void sub_1002F68DC(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  [v2 ensureDatabaseIsInitialized];

  int v3 = *(unsigned __int8 *)(a1 + 88);
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v4 = *(void *)(a1 + 72);
  uint64_t v6 = *(void *)(a1 + 80);
  int v7 = *(unsigned __int8 *)(a1 + 89);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  if (v5) {
    uint64_t v11 = sub_100034F88(v4, v5, v6, v9, v7 != 0, v8, v10, v3 != 0);
  }
  else {
    uint64_t v11 = sub_100035A30(v4, v6, v9, v7 != 0, v8, v10, v3 != 0);
  }
  uint64_t v12 = (const void *)v11;

  uint64_t v13 = objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _createOutgoingMessageRecordsFromSQLRecords:v12 includeMessagePayloads:v3 != 0]);
  uint64_t v14 = *(void *)(*(void *)(a1 + 56) + 8LL);
  uint64_t v15 = *(void **)(v14 + 40);
  *(void *)(v14 + 40) = v13;

  if (v12) {
    CFRelease(v12);
  }
}

void sub_1002F6B60( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

void sub_1002F6B78(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  [v2 ensureDatabaseIsInitialized];

  uint64_t v4 = *(void *)(a1 + 72);
  uint64_t v3 = *(void *)(a1 + 80);
  uint64_t v5 = *(void *)(a1 + 88);
  int v6 = *(unsigned __int8 *)(a1 + 96);
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  if (v4) {
    uint64_t v10 = sub_100035440(v3, v4, v5, v8, v6 != 0, v7, v9, 1, *(void **)(a1 + 56));
  }
  else {
    uint64_t v10 = sub_100035D7C(v3, v5, v8, v6 != 0, v7, v9, 1, *(void **)(a1 + 56));
  }
  uint64_t v11 = (const void *)v10;

  uint64_t v12 = objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _createOutgoingMessageRecordsFromSQLRecords:v11 includeMessagePayloads:1]);
  uint64_t v13 = *(void *)(*(void *)(a1 + 64) + 8LL);
  uint64_t v14 = *(void **)(v13 + 40);
  *(void *)(v13 + 40) = v12;

  if (v11) {
    CFRelease(v11);
  }
}

void sub_1002F6DDC(uint64_t a1)
{
  id v2 = (id *)(a1 + 32);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  [v3 ensureDatabaseIsInitialized];

  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 56);
  int v6 = (void *)objc_claimAutoreleasedReturnValue([*v2 database]);
  uint64_t v7 = (void *)sub_10003391C(v4, v5, v6);

  if (v7)
  {
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    id v8 = v7;
    id v9 = [v8 countByEnumeratingWithState:&v16 objects:v20 count:16];
    if (v9)
    {
      uint64_t v10 = *(void *)v17;
      do
      {
        for (i = 0LL; i != v9; i = (char *)i + 1)
        {
          if (*(void *)v17 != v10) {
            objc_enumerationMutation(v8);
          }
          uint64_t v12 = *(void *)(*((void *)&v16 + 1) + 8LL * (void)i);
          uint64_t v13 = objc_autoreleasePoolPush();
          uint64_t v14 = JWDecodeArray(v12);
          uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
          if ([v15 count]) {
            [*(id *)(a1 + 48) addObjectsFromArray:v15];
          }

          objc_autoreleasePoolPop(v13);
        }

        id v9 = [v8 countByEnumeratingWithState:&v16 objects:v20 count:16];
      }

      while (v9);
    }
  }
}

void sub_1002F7004(_Unwind_Exception *a1)
{
}

void sub_1002F70C0(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  [v2 ensureDatabaseIsInitialized];

  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSMessageStore](&OBJC_CLASS___IDSFoundationLog, "IDSMessageStore"));
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v5 = *(void *)(a1 + 48);
    int v9 = 138412546;
    uint64_t v10 = v4;
    __int16 v11 = 2112;
    uint64_t v12 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Performing MarkingLocalDestiations with accounts %@ and device %@",  (uint8_t *)&v9,  0x16u);
  }

  uint64_t v7 = *(void **)(a1 + 40);
  int v6 = *(void **)(a1 + 48);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  sub_10003634C(v7, v6, v8);
}

void sub_1002F7264(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  [v2 ensureDatabaseIsInitialized];

  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSMessageStore](&OBJC_CLASS___IDSFoundationLog, "IDSMessageStore"));
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 40);
    int v8 = 138412290;
    uint64_t v9 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Marking all pending delete messages for account %@",  (uint8_t *)&v8,  0xCu);
  }

  int v6 = *(void **)(a1 + 40);
  uint64_t v5 = *(void **)(a1 + 48);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  sub_1000364A0(v6, v5, v7);
}

void sub_1002F740C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1002F7424(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  [v2 ensureDatabaseIsInitialized];

  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  uint64_t v5 = (const void *)sub_1000365F4(v3, v4, 0);

  uint64_t v6 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _createOutgoingMessageRecordsFromSQLRecords:v5 includeMessagePayloads:0]);
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8LL);
  int v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  if (v5) {
    CFRelease(v5);
  }
}

void sub_1002F75B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_1002F75D0(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  [v2 ensureDatabaseIsInitialized];

  uint64_t v3 = *(void *)(a1 + 56);
  uint64_t v4 = *(void *)(a1 + 64);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  uint64_t v7 = (const void *)sub_1000367B4(v3, v5, v4, v6, 0);

  uint64_t v8 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _createOutgoingMessageRecordsFromSQLRecords:v7 includeMessagePayloads:0]);
  uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;

  if (v7) {
    CFRelease(v7);
  }
}

void sub_1002F773C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1002F7754(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  [v2 ensureDatabaseIsInitialized];

  id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  uint64_t v3 = sub_100033E04(v6);
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_1002F7840(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  [v2 ensureDatabaseIsInitialized];

  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  sub_1000372DC(v3, v4);
}

void sub_1002F78F0(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  [v2 ensureDatabaseIsInitialized];

  LODWORD(v2) = *(_DWORD *)(a1 + 40);
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  sub_1000369A0((int)v2, v3);
}

void sub_1002F79E0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1002F79F8(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  [v2 ensureDatabaseIsInitialized];

  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = sub_100036A08(v3);
}

void sub_1002F7AAC(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  [v2 ensureDatabaseIsInitialized];

  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  sub_100036AF4(v3);
}

void sub_1002F8178( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a2 == 1)
  {
    id v9 = objc_begin_catch(exception_object);
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSMessageStore](&OBJC_CLASS___IDSFoundationLog, "IDSMessageStore"));
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_1006A7A3C();
    }

    objc_end_catch();
    JUMPOUT(0x1002F7FB4LL);
  }

  _Unwind_Resume(exception_object);
}

void sub_1002F8230(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  [v2 ensureDatabaseIsInitialized];

  if (*(_BYTE *)(a1 + 128))
  {
    if (*(_BYTE *)(a1 + 129))
    {
      char v3 = 1;
    }

    else
    {
      [*(id *)(a1 + 40) accountUUID];
      [*(id *)(a1 + 40) priority];
      id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
      int v5 = sub_1000335E8();

      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSMessageStore](&OBJC_CLASS___IDSFoundationLog, "IDSMessageStore"));
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = @"NO";
        uint64_t v8 = *(void *)(a1 + 48);
        if (v5) {
          uint64_t v7 = @"YES";
        }
        *(_DWORD *)buf = 138412546;
        uint64_t v98 = v8;
        __int16 v99 = 2112;
        id v100 = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Asked to send Message with guid: %@  database check for similiar messages that should be sent first says %@",  buf,  0x16u);
      }

      char v3 = v5 ^ 1;
    }
  }

  else
  {
    char v3 = 0;
  }

  if ([*(id *)(a1 + 40) daemonDeathResend]
    && (id v9 = *(const __CFString **)(a1 + 48),
        id v10 = [*(id *)(a1 + 40) alternateCallbackID],
        __int16 v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]),
        LODWORD(v9) = sub_100033484(v9, (uint64_t)v10, v11),
        v11,
        (_DWORD)v9))
  {
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSMessageStore](&OBJC_CLASS___IDSFoundationLog, "IDSMessageStore"));
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = *(void *)(a1 + 48);
      uint64_t v14 = (__CFString *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) alternateCallbackID]);
      *(_DWORD *)buf = 138412546;
      uint64_t v98 = v13;
      __int16 v99 = 2112;
      id v100 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "We already have message with guid %@ alternate %@ in the database, dropping this redundant resend without calling completion.",  buf,  0x16u);
    }
  }

  else
  {
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) queueOneIdentifier]);

    if (v15)
    {
      id v16 = [*(id *)(a1 + 40) queueOneIdentifier];
      __int128 v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
      sub_100037198((uint64_t)v16, v17);
    }

    id v18 = *(id *)(a1 + 48);
    unsigned __int8 v91 = v3;
    if ([v18 length])
    {
      uint64_t v89 = (uint64_t)v18;
    }

    else
    {
      uint64_t v19 = objc_claimAutoreleasedReturnValue(+[NSString stringGUID](&OBJC_CLASS___NSString, "stringGUID"));

      uint64_t v89 = v19;
    }

    +[NSDate timeIntervalSinceReferenceDate](&OBJC_CLASS___NSDate, "timeIntervalSinceReferenceDate");
    uint64_t v88 = (uint64_t)v20;
    __int128 v90 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) expirationDate]);
    [v90 timeIntervalSinceReferenceDate];
    uint64_t v87 = (uint64_t)v21;
    +[NSDate timeIntervalSinceReferenceDate](&OBJC_CLASS___NSDate, "timeIntervalSinceReferenceDate");
    uint64_t v78 = (uint64_t)v22;
    uint64_t v23 = (char *)[*(id *)(a1 + 56) length];
    BOOL v24 = &v23[(void)[*(id *)(a1 + 64) length]];
    __int128 v80 = (char *)[*(id *)(a1 + 72) length] + (void)v24;
    unsigned __int8 v73 = [*(id *)(a1 + 40) wantsFirewallDonation];
    id v86 = [*(id *)(a1 + 40) alternateCallbackID];
    id v85 = [*(id *)(a1 + 40) accountUUID];
    id v25 = [*(id *)(a1 + 40) fromID];
    uint64_t v83 = *(void *)(a1 + 56);
    uint64_t v84 = (uint64_t)v25;
    uint64_t v82 = *(void *)(a1 + 64);
    uint64_t v81 = *(void *)(a1 + 72);
    uint64_t v77 = *(void *)(a1 + 80);
    id v76 = [*(id *)(a1 + 40) dataToEncrypt];
    unsigned __int8 v75 = [*(id *)(a1 + 40) encryptPayload];
    unsigned __int8 v74 = [*(id *)(a1 + 40) compressPayload];
    unsigned __int8 v72 = [*(id *)(a1 + 40) useDictAsTopLevel];
    unsigned __int8 v71 = [*(id *)(a1 + 40) wantsResponse];
    __int128 v79 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) command]);
    id v70 = [v79 integerValue];
    unsigned __int8 v69 = [*(id *)(a1 + 40) wantsDeliveryStatus];
    uint64_t v68 = *(void *)(a1 + 88);
    id v67 = [*(id *)(a1 + 40) messageUUID];
    id v66 = [*(id *)(a1 + 40) priority];
    id v65 = [*(id *)(a1 + 40) identifier];
    unsigned __int8 v64 = [*(id *)(a1 + 40) localDelivery];
    id v63 = [*(id *)(a1 + 40) peerResponseIdentifier];
    unsigned __int8 v62 = [*(id *)(a1 + 40) expectsPeerResponse];
    unsigned __int8 v61 = [*(id *)(a1 + 40) wantsAppAck];
    unsigned __int8 v59 = [*(id *)(a1 + 40) nonWaking];
    unsigned __int8 v58 = [*(id *)(a1 + 40) nonCloudWaking];
    unsigned __int8 v57 = [*(id *)(a1 + 40) fireAndForget];
    uint64_t v56 = *(void *)(a1 + 96);
    unsigned __int8 v54 = [*(id *)(a1 + 40) bypassDuet];
    id v53 = [*(id *)(a1 + 40) queueOneIdentifier];
    unsigned __int8 v52 = [*(id *)(a1 + 40) enforceRemoteTimeouts];
    id v51 = [*(id *)(a1 + 40) mainAccountUUID];
    id v50 = [*(id *)(a1 + 40) localDestinationDeviceUUID];
    __int128 v60 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) messageType]);
    id v48 = [v60 integerValue];
    unsigned __int8 v47 = [*(id *)(a1 + 40) alwaysSkipSelf];
    unsigned __int8 v45 = [*(id *)(a1 + 40) alwaysIncludeSelf];
    uint64_t v55 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) pushPriority]);
    id v44 = [v55 longValue];
    unsigned __int8 v43 = [*(id *)(a1 + 40) liveMessageDelivery];
    unsigned __int8 v42 = [*(id *)(a1 + 40) requireBluetooth];
    unsigned __int8 v41 = [*(id *)(a1 + 40) requireLocalWiFi];
    unsigned __int8 v40 = [*(id *)(a1 + 40) wantsProgress];
    unsigned __int8 v39 = [*(id *)(a1 + 40) ignoreMaxRetryCount];
    unsigned __int8 v26 = [*(id *)(a1 + 40) wantsCertifiedDelivery];
    unsigned int v49 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) originalTimestamp]);
    id v27 = [v49 integerValue];
    uint64_t v28 = *(void *)(a1 + 104);
    id v46 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) sendMode]);
    id v29 = [v46 integerValue];
    id v30 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deliveryMinimumTimeDelay]);
    id v31 = [v30 integerValue];
    id v32 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deliveryMinimumTime]);
    id v33 = [v32 integerValue];
    uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
    uint64_t v38 = (uint64_t)v27;
    uint64_t v12 = (os_log_s *)v89;
    __int128 v35 = sub_100032D14( 0LL,  v89,  (uint64_t)v86,  (uint64_t)v85,  v84,  v83,  v82,  v81,  v77,  (uint64_t)v76,  v75,  v74,  v72,  v71,  v87,  (uint64_t)v70,  v69,  v68,  (uint64_t)v67,  (uint64_t)v66,  v88,  v91,  (uint64_t)v65,  v64,  (uint64_t)v63,  v62,  v61,  v59,  v58,  v57,  (uint64_t)v80,  v56,  v54,  (uint64_t)v53,  v52,  (uint64_t)v51,  0,  (uint64_t)v50,  v78,  (uint64_t)v48,  v47,  v45,  (uint64_t)v44,  v43,  v42,  v41,  v40,  v39,  v26,
            v38,
            v28,
            v73,
            (uint64_t)v29,
            (uint64_t)v31,
            (uint64_t)v33,
            v34);

    if (v35) {
      CFRelease(v35);
    }
    __int128 v36 = *(void **)(a1 + 120);
    if (v36)
    {
      __int128 v37 = *(dispatch_queue_s **)(a1 + 112);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_1002F89E0;
      block[3] = &unk_100900820;
      id v94 = v36;
      id v93 = *(id *)(a1 + 48);
      BOOL v95 = v35 != 0LL;
      unsigned __int8 v96 = v91;
      dispatch_async(v37, block);
    }
  }
}

uint64_t sub_1002F89E0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  *(unsigned __int8 *)(a1 + 48),  *(unsigned __int8 *)(a1 + 49));
}

void sub_1002F8A8C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  [v2 ensureDatabaseIsInitialized];

  LOBYTE(v2) = *(_BYTE *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  sub_1000361E8(v3, (char)v2, v4);
}

void sub_1002F8B48(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  [v2 ensureDatabaseIsInitialized];

  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  sub_100036280(v3);
}

void sub_1002F8C14(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  [v2 ensureDatabaseIsInitialized];

  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  sub_1000362A0(v3, *(void **)(a1 + 40));
}

void sub_1002F8D10(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) database]);
  sub_100036BF0(v2, v3, *(void **)(a1 + 48));
}

void sub_1002F8EC0(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  [v2 ensureDatabaseIsInitialized];

  id v4 = *(const __CFString **)(a1 + 40);
  id v3 = *(const void **)(a1 + 48);
  int v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  sub_100036D8C(v4, v3, v5, *(void **)(a1 + 56));

  uint64_t v8 = CSDBGetMobileUserDirectory(v6, v7);
  if (v8) {
    id v9 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v8));
  }
  else {
    id v9 = @"~";
  }
  v13[0] = v9;
  v13[1] = @"/Library/IdentityServices/files/";
  _DWORD v13[2] = *(void *)(a1 + 40);
  id v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v13, 3LL));
  __int16 v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString pathWithComponents:](&OBJC_CLASS___NSString, "pathWithComponents:", v10));

  if (v8) {
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  }
  [v12 removeItemAtPath:v11 error:0];
}

void sub_1002F9094(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  [v2 ensureDatabaseIsInitialized];

  id v3 = *(const __CFString **)(a1 + 40);
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  sub_100318160(v3, v4);
}

void sub_1002F9154(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  [v2 ensureDatabaseIsInitialized];

  uint64_t v3 = (uint64_t)*(double *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  sub_1003182B0(v3, v4, v5);
}

void sub_1002F9288(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  [v2 ensureDatabaseIsInitialized];

  uint64_t v3 = *(void **)(a1 + 40);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) incomingExpiredRestrictedMessages:0 success:*(double *)(a1 + 48)]);
  [v3 addObjectsFromArray:v4];

  uint64_t v5 = (uint64_t)*(double *)(a1 + 48);
  id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  sub_100318398(v5, v6);
}

void sub_1002F93AC(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  [v2 ensureDatabaseIsInitialized];

  uint64_t v4 = *(const __CFString **)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  sub_100317750(v4, v3, v5);
}

void sub_1002F9494(uint64_t a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  sub_1003AFEDC(v1);
}

id sub_1002F95F4(uint64_t a1)
{
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  uint64_t v3 = *(void *)(a1 + 32);
  double v4 = *(double *)(v3 + 24) - Current + 600.0;
  if (v4 <= 0.0) {
    return _objc_msgSend((id)v3, "__closeDatabase");
  }
  [*(id *)(v3 + 8) lock];
  id v5 = *(dispatch_source_s **)(*(void *)(a1 + 32) + 16LL);
  dispatch_time_t v6 = dispatch_time(0LL, (uint64_t)(v4 * 1000000000.0));
  dispatch_source_set_timer(v5, v6, 0x7FFFFFFFFFFFFFFFuLL, (uint64_t)(v4 * 1000000000.0) / 10);
  return [*(id *)(*(void *)(a1 + 32) + 8) unlock];
}

id sub_1002F9718(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "__closeDatabase");
}

id sub_1002F980C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _setDatabaseCloseTimer];
}

id sub_1002F9960(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  sub_1003B0120(v2);

  return [*(id *)(a1 + 32) _setDatabaseCloseTimer];
}

id sub_1002F9AC4(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  sub_1003B0120(v2);

  return [*(id *)(a1 + 32) _setDatabaseCloseTimer];
}

void sub_1002F9BFC(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___IDSDMessageStoreMap);
  id v2 = (void *)qword_1009C0AA0;
  qword_1009C0AA0 = (uint64_t)v1;
}

LABEL_80:
  id v177 = kIDSQRAllocateKey_ExistingRelaySessionToken;
  id v178 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", kIDSQRAllocateKey_ExistingRelaySessionToken, v946, v989, v1032));
  v180 = objc_opt_class(&OBJC_CLASS___NSData, v179);
  v181 = objc_opt_isKindOfClass(v178, v180);

  id v182 = (NSData *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v177]);
  __int128 v183 = v182;
  if ((v181 & 1) != 0)
  {
    existingRelaySessionToken = self->_existingRelaySessionToken;
    self->_existingRelaySessionToken = v182;
LABEL_82:

    goto LABEL_89;
  }

  if (v183)
  {
    __int128 v185 = OSLogHandleForIDSCategory("QRAllocator");
    __int128 v186 = (os_log_s *)objc_claimAutoreleasedReturnValue(v185);
    if (os_log_type_enabled(v186, OS_LOG_TYPE_DEBUG))
    {
      id v187 = (id)objc_claimAutoreleasedReturnValue([v4 objectForKey:v177]);
      v189 = (id)objc_opt_class(&OBJC_CLASS___NSData, v188);
      id v190 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v177]);
      double v192 = (id)objc_opt_class(v190, v191);
      *(_DWORD *)buf = 138412802;
      v1070 = v187;
      v1071 = 2112;
      v1072 = v189;
      v1073 = 2112;
      v1074 = v192;
      _os_log_impl( (void *)&_mh_execute_header,  v186,  OS_LOG_TYPE_DEBUG,  "Unexpected datatype. %@ should be of type %@, not %@",  buf,  0x20u);
    }

    if (os_log_shim_legacy_logging_enabled(v193))
    {
      if (_IDSShouldLog(1LL, @"QRAllocator"))
      {
        existingRelaySessionToken = (NSData *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v177]);
        __int16 v195 = objc_opt_class(&OBJC_CLASS___NSData, v194);
        id v196 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v177]);
        v990 = v195;
        v1033 = objc_opt_class(v196, v197);
        v947 = existingRelaySessionToken;
        _IDSLogV( 1LL,  @"IDSFoundation",  @"QRAllocator",  @"Unexpected datatype. %@ should be of type %@, not %@");

        goto LABEL_82;
      }
    }
  }

  unsigned __int8 v74 = OSLogHandleForIDSCategory("IDSDaemon");
  unsigned __int8 v75 = (os_log_s *)objc_claimAutoreleasedReturnValue(v74);
  if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
  {
    id v76 = @"YES";
    *(_DWORD *)buf = 138412802;
    uint64_t v128 = (const char *)v76;
    id v129 = 2048;
    id v130 = v26;
    __int16 v131 = 2048;
    id v132 = v109;
    _os_log_impl( (void *)&_mh_execute_header,  v75,  OS_LOG_TYPE_DEFAULT,  "Finished processing stored incoming messages {shouldRepeat %@, timeInterval %f, numberFiltered %lld}",  buf,  0x20u);
  }

  if (os_log_shim_legacy_logging_enabled(v77) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    uint64_t v78 = @"YES";
    id v103 = (void *)v109;
    id v101 = v26;
    __int16 v99 = v78;
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Finished processing stored incoming messages {shouldRepeat %@, timeInterval %f, numberFiltered %lld}");
  }

  objc_autoreleasePoolPop(context);
  if ((unint64_t)v106 >= 0x1F4)
  {
    uint64_t v89 = dispatch_time(0LL, (uint64_t)(v26 * 1000000000.0));
    unsigned __int8 v91 = im_primary_queue(v89, v90);
    uint64_t v92 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v91);
    v115[0] = _NSConcreteStackBlock;
    v115[1] = 3221225472LL;
    v115[2] = sub_1003724F0;
    v115[3] = &unk_100901860;
    v115[4] = v108;
    uint64_t v116 = v112;
    __int128 v117 = v111;
    __int128 v119 = a5;
    __int128 v118 = v26;
    dispatch_after(v89, v92, v115);
  }

  else
  {
    v108->_processingStoredIncomingRemoteMessages = 0;
    if (-[NSMutableArray count](v108->_processingStoredIncomingRemoteMessagesControlCategories, "count"))
    {
      __int128 v79 = (char *)objc_claimAutoreleasedReturnValue( -[NSMutableArray firstObject]( v108->_processingStoredIncomingRemoteMessagesControlCategories,  "firstObject"));
      __int128 v80 = OSLogHandleForIDSCategory("IDSDaemon");
      uint64_t v81 = (os_log_s *)objc_claimAutoreleasedReturnValue(v80);
      if (os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v82 = v108->_processingStoredIncomingRemoteMessagesControlCategories;
        *(_DWORD *)buf = 138412546;
        uint64_t v128 = v79;
        id v129 = 2112;
        id v130 = *(double *)&v82;
        _os_log_impl( (void *)&_mh_execute_header,  v81,  OS_LOG_TYPE_DEFAULT,  "Finished processing queued messages, moving onto queued categories {controlCategory %@, queued %@}",  buf,  0x16u);
      }

      if (os_log_shim_legacy_logging_enabled(v83) && _IDSShouldLog(0LL, @"IDSDaemon"))
      {
        __int16 v99 = (const __CFString *)v79;
        id v101 = *(double *)&v108->_processingStoredIncomingRemoteMessagesControlCategories;
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Finished processing queued messages, moving onto queued categories {controlCategory %@, queued %@}");
      }

      uint64_t v84 = -[NSMutableArray removeFirstObject]( v108->_processingStoredIncomingRemoteMessagesControlCategories,  "removeFirstObject",  v99,  *(void *)&v101,  v103);
      id v86 = im_primary_queue(v84, v85);
      uint64_t v87 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v86);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_10037250C;
      block[3] = &unk_1008F5F80;
      void block[4] = v108;
      __int128 v114 = v79;
      uint64_t v88 = v79;
      dispatch_async(v87, block);
    }

    else
    {
      id v93 = OSLogHandleForIDSCategory("IDSDaemon");
      id v94 = (os_log_s *)objc_claimAutoreleasedReturnValue(v93);
      if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v94,  OS_LOG_TYPE_DEFAULT,  "Finished processing all queued messages",  buf,  2u);
      }

      unsigned __int8 v96 = v108->_processingStoredIncomingRemoteMessagesControlCategories;
      v108->_processingStoredIncomingRemoteMessagesControlCategories = 0LL;
    }
  }

LABEL_105:
  os_activity_scope_leave(&state);
  cut_arc_os_release(&v125);
}

    id v32 = 1;
    goto LABEL_81;
  }

  id v32 = 0;
  id v27 = v21;
LABEL_81:

  return v32;
}

LABEL_98:
  v219 = kIDSQRAllocateKey_SenderExternalAddress;
  v220 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", kIDSQRAllocateKey_SenderExternalAddress, v948, v991, v1034));
  v222 = objc_opt_class(&OBJC_CLASS___NSData, v221);
  v223 = objc_opt_isKindOfClass(v220, v222);

  v224 = (NSData *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v219]);
  v225 = v224;
  if ((v223 & 1) != 0)
  {
    senderExternalIP = self->_senderExternalIP;
    self->_senderExternalIP = v224;
LABEL_100:

    goto LABEL_107;
  }

  if (v225)
  {
    id v227 = OSLogHandleForIDSCategory("QRAllocator");
    v228 = (os_log_s *)objc_claimAutoreleasedReturnValue(v227);
    if (os_log_type_enabled(v228, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v229 = (id)objc_claimAutoreleasedReturnValue([v4 objectForKey:v219]);
      v231 = (id)objc_opt_class(&OBJC_CLASS___NSData, v230);
      id v232 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v219]);
      id v234 = (id)objc_opt_class(v232, v233);
      *(_DWORD *)buf = 138412802;
      v1070 = v229;
      v1071 = 2112;
      v1072 = v231;
      v1073 = 2112;
      v1074 = v234;
      _os_log_impl( (void *)&_mh_execute_header,  v228,  OS_LOG_TYPE_DEBUG,  "Unexpected datatype. %@ should be of type %@, not %@",  buf,  0x20u);
    }

    if (os_log_shim_legacy_logging_enabled(v235))
    {
      if (_IDSShouldLog(1LL, @"QRAllocator"))
      {
        senderExternalIP = (NSData *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v219]);
        id v237 = objc_opt_class(&OBJC_CLASS___NSData, v236);
        v238 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v219]);
        v992 = v237;
        v1035 = objc_opt_class(v238, v239);
        v949 = senderExternalIP;
        _IDSLogV( 1LL,  @"IDSFoundation",  @"QRAllocator",  @"Unexpected datatype. %@ should be of type %@, not %@");

        goto LABEL_100;
      }
    }
  }

        id v27 = (_BYTE *)((v140 - 1) & v140);
        double v138 = __clz(__rbit64(v140)) + (v17 << 6);
      }

      double v137 = *(id *)(*(void *)(v120 + 48) + 8 * v138);
      uint64_t v135 = v137;
      if (!v137) {
        goto LABEL_103;
      }
LABEL_100:
      uint64_t v142 = v231;
      Date.init()(v137);
      swift_storeEnumTagMultiPayload(v142, v234, 1LL);
      (*(void (**)(_BYTE *))((swift_isaMask & *v135) + 0xD8LL))(v142);

      id v2 = v17;
    }

    __int16 v131 = (void *)__CocoaSet.Iterator.next()(v126);
    if (v131)
    {
      id v132 = v131;
      v241 = v131;
      uint64_t v133 = type metadata accessor for IDSGroupEncryptionControllerParticipant(0LL);
      swift_unknownObjectRetain(v132, v134);
      swift_dynamicCast(&aBlock, &v241, (char *)&type metadata for Swift.AnyObject + 8, v133, 7LL);
      uint64_t v135 = aBlock;
      double v137 = (void *)swift_unknownObjectRelease(v132, v136);
      __int128 v17 = v2;
      id v27 = (_BYTE *)v1;
      if (v135) {
        goto LABEL_100;
      }
    }

LABEL_125:
  id v287 = kIDSQRAllocateKey_RelayAddress;
  uint64_t v288 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", kIDSQRAllocateKey_RelayAddress, v951, v994, v1037));
  id v290 = objc_opt_class(&OBJC_CLASS___NSData, v289);
  id v291 = objc_opt_isKindOfClass(v288, v290);

  id v292 = (NSData *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v287]);
  char v293 = v292;
  if ((v291 & 1) != 0)
  {
    relayIP = self->_relayIP;
    self->_relayIP = v292;
LABEL_127:

    goto LABEL_134;
  }

  if (v293)
  {
    __int128 v295 = OSLogHandleForIDSCategory("QRAllocator");
    __int128 v296 = (os_log_s *)objc_claimAutoreleasedReturnValue(v295);
    if (os_log_type_enabled(v296, OS_LOG_TYPE_DEBUG))
    {
      __int128 v297 = (id)objc_claimAutoreleasedReturnValue([v4 objectForKey:v287]);
      __int128 v299 = (id)objc_opt_class(&OBJC_CLASS___NSData, v298);
      __int128 v300 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v287]);
      __int128 v302 = (id)objc_opt_class(v300, v301);
      *(_DWORD *)buf = 138412802;
      v1070 = v297;
      v1071 = 2112;
      v1072 = v299;
      v1073 = 2112;
      v1074 = v302;
      _os_log_impl( (void *)&_mh_execute_header,  v296,  OS_LOG_TYPE_DEBUG,  "Unexpected datatype. %@ should be of type %@, not %@",  buf,  0x20u);
    }

    if (os_log_shim_legacy_logging_enabled(v303))
    {
      if (_IDSShouldLog(1LL, @"QRAllocator"))
      {
        relayIP = (NSData *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v287]);
        __int128 v305 = objc_opt_class(&OBJC_CLASS___NSData, v304);
        __int128 v306 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v287]);
        v995 = v305;
        v1038 = objc_opt_class(v306, v307);
        v952 = relayIP;
        _IDSLogV( 1LL,  @"IDSFoundation",  @"QRAllocator",  @"Unexpected datatype. %@ should be of type %@, not %@");

        goto LABEL_127;
      }
    }
  }

        CSDBSqliteDatabaseSetVersion(a1, 8002LL);
        unsigned __int8 v73 = OSLogHandleForIDSCategory("IDSDMessageStore");
        unsigned __int8 v74 = (os_log_s *)objc_claimAutoreleasedReturnValue(v73);
        if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEFAULT, "Adding expiration date support", buf, 2u);
        }

        if (os_log_shim_legacy_logging_enabled(v75)
          && _IDSShouldLog(0LL, @"IDSDMessageStore"))
        {
          _IDSLogV(0LL, @"IDSFoundation", @"IDSDMessageStore", @"Adding expiration date support");
        }

        id v76 = sub_1003B3B08( a2,  @"Unable to drop legacy table",  @"Successfully dropped legacy table",  @"DROP TABLE outgoing_message");
        CSDBRecordStoreCreateTablesForClass(&off_1009030C8, a2, 0LL);
        if (!v76) {
          goto LABEL_425;
        }
        CSDBSqliteDatabaseSetVersion(a1, 8003LL);
        goto LABEL_133;
      }
    }

    else
    {
      CSDBSqliteDatabaseSetVersion(a1, 8000LL);
      id v65 = OSLogHandleForIDSCategory("IDSDMessageStore");
      id v66 = (os_log_s *)objc_claimAutoreleasedReturnValue(v65);
      if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v66,  OS_LOG_TYPE_DEFAULT,  "Flushing stale outgoing_messages.",  buf,  2u);
      }

      if (os_log_shim_legacy_logging_enabled(v67)
        && _IDSShouldLog(0LL, @"IDSDMessageStore"))
      {
        _IDSLogV(0LL, @"IDSFoundation", @"IDSDMessageStore", @"Flushing stale outgoing_messages.");
      }

      uint64_t v68 = sub_1003B3B08( a2,  @"Unable to drop legacy table",  @"Successfully dropped legacy table",  @"DROP TABLE outgoing_message");
      CSDBRecordStoreCreateTablesForClass(&off_1009030C8, a2, 0LL);
      if (!v68) {
        goto LABEL_425;
      }
      CSDBSqliteDatabaseSetVersion(a1, 8001LL);
    }

    CSDBSqliteDatabaseSetVersion(a1, 8001LL);
    unsigned __int8 v69 = OSLogHandleForIDSCategory("IDSDMessageStore");
    id v70 = (os_log_s *)objc_claimAutoreleasedReturnValue(v69);
    if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEFAULT, "Adding indexes on message guid", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled(v71)
      && _IDSShouldLog(0LL, @"IDSDMessageStore"))
    {
      _IDSLogV(0LL, @"IDSFoundation", @"IDSDMessageStore", @"Adding indexes on message guid");
    }

    unsigned __int8 v72 = sub_1003B3B08( a2,  @"Unable to add outgoing_message guid index",  @"Successfully added outgoing_message guid index",  @"CREATE INDEX outgoing_message_guid_idx ON outgoing_message(guid);");
    if ((v72 & sub_1003B3B08( a2,  @"Unable to add incoming_message guid index",  @"Successfully added incoming_message guid index",  @"CREATE INDEX incoming_message_guid_idx ON incoming_message(guid);")) != 1) {
      goto LABEL_425;
    }
    CSDBSqliteDatabaseSetVersion(a1, 8002LL);
    goto LABEL_125;
  }

  _IMWarn(@"Downgrading to a build with a different IDS database version is unsupported :(");
  id v32 = 2LL;
LABEL_51:
  id v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date", v219));
  [v33 timeIntervalSinceDate:v6];
  _IMWarn(@"IDS DB migration took %f seconds.");

LABEL_426:
  return v32;
}

LABEL_134:
  __int128 v308 = kIDSQRAllocateKey_RelayAddressIPv6;
  __int128 v309 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", kIDSQRAllocateKey_RelayAddressIPv6, v952, v995, v1038));
  __int128 v311 = objc_opt_class(&OBJC_CLASS___NSData, v310);
  __int128 v312 = objc_opt_isKindOfClass(v309, v311);

  __int128 v313 = (NSData *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v308]);
  v314 = v313;
  if ((v312 & 1) != 0)
  {
    relayIPdispatch_time_t v6 = self->_relayIPv6;
    self->_relayIPdispatch_time_t v6 = v313;
LABEL_136:

    goto LABEL_143;
  }

  if (v314)
  {
    v316 = OSLogHandleForIDSCategory("QRAllocator");
    v317 = (os_log_s *)objc_claimAutoreleasedReturnValue(v316);
    if (os_log_type_enabled(v317, OS_LOG_TYPE_DEBUG))
    {
      __int16 v318 = (id)objc_claimAutoreleasedReturnValue([v4 objectForKey:v308]);
      __int16 v320 = (id)objc_opt_class(&OBJC_CLASS___NSData, v319);
      v321 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v308]);
      v323 = (id)objc_opt_class(v321, v322);
      *(_DWORD *)buf = 138412802;
      v1070 = v318;
      v1071 = 2112;
      v1072 = v320;
      v1073 = 2112;
      v1074 = v323;
      _os_log_impl( (void *)&_mh_execute_header,  v317,  OS_LOG_TYPE_DEBUG,  "Unexpected datatype. %@ should be of type %@, not %@",  buf,  0x20u);
    }

    if (os_log_shim_legacy_logging_enabled(v324))
    {
      if (_IDSShouldLog(1LL, @"QRAllocator"))
      {
        relayIPdispatch_time_t v6 = (NSData *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v308]);
        v326 = objc_opt_class(&OBJC_CLASS___NSData, v325);
        v327 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v308]);
        v996 = v326;
        v1039 = objc_opt_class(v327, v328);
        v953 = relayIPv6;
        _IDSLogV( 1LL,  @"IDSFoundation",  @"QRAllocator",  @"Unexpected datatype. %@ should be of type %@, not %@");

        goto LABEL_136;
      }
    }
  }

        swift_release(v245);
        v253((char *)v98, v100);
        swift_bridgeObjectRelease(v409);
        return sub_10040A274(v79, &qword_1009BC130);
      }

      if (*(void *)((v122 & 0xFFFFFFFFFFFFF8LL) + 0x10))
      {
        v245 = *(void *)(v122 + 32);
        swift_retain(v245);
        goto LABEL_133;
      }

      __break(1u);
LABEL_168:
      __break(1u);
      goto LABEL_169;
    }

    uint64_t v98 = 0LL;
    v391 = v106 & 0xC000000000000001LL;
    v377 = (char *)(v106 + 32);
    while (v391)
    {
      uint64_t v128 = specialized _ArrayBuffer._getElementSlowPath(_:)(v98, v106);
      id v129 = __OFADD__(v98++, 1LL);
      if (v129) {
        goto LABEL_144;
      }
LABEL_38:
      v400 = v98;
      swift_retain(v106);
      swift_retain(v128);
      __int128 v79 = (uint64_t)sub_10050B234(v106);
      id v113 = v102;
      swift_release(v106);
      swift_release(v128);
      if ((unint64_t)v79 >> 62)
      {
        if (v79 < 0) {
          uint64_t v141 = v79;
        }
        else {
          uint64_t v141 = v79 & 0xFFFFFFFFFFFFFF8LL;
        }
        id v130 = _CocoaArrayWrapper.endIndex.getter(v141);
        v401 = v128;
        v402 = v102;
        if (!v130)
        {
LABEL_53:
          swift_bridgeObjectRelease(v79);
          id v132 = _swiftEmptyArrayStorage;
          goto LABEL_54;
        }
      }

      else
      {
        id v130 = *(void *)((v79 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        v401 = v128;
        v402 = v102;
        if (!v130) {
          goto LABEL_53;
        }
      }

      *(void *)&v407 = _swiftEmptyArrayStorage;
      sub_100504184(0, v130 & ~(v130 >> 63), 0);
      if (v130 < 0) {
        goto LABEL_145;
      }
      __int16 v131 = 0LL;
      id v132 = (void *)v407;
      v406 = v79 & 0xC000000000000001LL;
      uint64_t v133 = v79;
      id v134 = v130;
      do
      {
        if (v406)
        {
          uint64_t v135 = specialized _ArrayBuffer._getElementSlowPath(_:)(v131, v79);
        }

        else
        {
          uint64_t v135 = *(void *)(v79 + 8 * v131 + 32);
          swift_retain(v135);
        }

        uint64_t v136 = sub_100446EB8();
        a5 = v137;
        swift_release(v135);
        *(void *)&v407 = v132;
        double v139 = v132[2];
        double v138 = v132[3];
        if (v139 >= v138 >> 1)
        {
          sub_100504184(v138 > 1, v139 + 1, 1);
          id v132 = (void *)v407;
        }

        ++v131;
        v132[2] = v139 + 1;
        uint64_t v140 = &v132[2 * v139];
        v140[4] = v136;
        v140[5] = a5;
        __int128 v79 = v133;
      }

      while (v134 != v131);
      swift_bridgeObjectRelease(v133);
LABEL_54:
      uint64_t v142 = sub_10047A7B4((uint64_t)v132);
      swift_bridgeObjectRelease(v132);
      uint64_t v143 = v409;
      id v100 = (uint64_t)&unk_1009BAC60;
      if (*(void *)(v409 + 16))
      {
        swift_bridgeObjectRetain(v409);
        uint64_t v144 = sub_100504ACC(v142, v143);
        swift_bridgeObjectRelease(v143);
        if ((v144 & 1) != 0)
        {
          id v145 = v378;
          sub_100410FD0(v395, v378, (uint64_t *)&unk_1009BAC60);
          id v146 = type metadata accessor for SenderKeyAndState(0LL);
          id v147 = *(void *)(v146 - 8);
          id v148 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v147 + 48))(v145, 1LL, v146);
          sub_10040A274(v145, (uint64_t *)&unk_1009BAC60);
          if (v148 == 1)
          {
            v406 = sub_100446720();
            v386 = v149;
            v385 = sub_100446490();
            __int128 v79 = v150;
            uint64_t v151 = v387;
            sub_100447148((char *)v387);
            a5 = sub_1004469B0();
            sub_100446C34();
            id v100 = (uint64_t)&unk_1009BAC60;
            uint64_t v152 = nullsub_36(a5);
            CFTypeRef v153 = v382;
            sub_10046BDE8(v406, v386, v385, v79, (uint64_t)v151, v152, v154, v155, v382, v156);
            CFTypeRef v157 = sub_100447444();
            id v158 = v381;
            sub_100466FC0((uint64_t)v153, v157, v159, v381);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v147 + 56))(v158, 0LL, 1LL, v146);
            sub_100427794(v158, v395, (uint64_t *)&unk_1009BAC60);
          }
        }
      }

      v160 = v392;
      sub_100410FD0(v399, v392, (uint64_t *)&unk_1009BAC60);
      uint64_t v161 = type metadata accessor for SenderKeyAndState(0LL);
      v162 = *(void *)(v161 - 8);
      __int16 v163 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v162 + 48);
      if (v163(v160, 1LL, v161) == 1)
      {
        sub_10040A274(v160, (uint64_t *)&unk_1009BAC60);
        v164 = v409;
        id v165 = swift_bridgeObjectRetain(v409);
        uint64_t v168 = sub_100505604(v166, v142, v165, v167);
        swift_bridgeObjectRelease(v164);
        uint64_t v169 = *(void *)(v168 + 16);
        swift_release(v168);
        if (v169)
        {
          double v170 = v401;
          v406 = sub_100446720();
          v386 = v171;
          v385 = sub_100446490();
          v384 = (char *)v172;
          uint64_t v173 = v387;
          sub_100447148((char *)v387);
          __int128 v79 = sub_1004469B0();
          a5 = v174;
          sub_100446C34();
          v175 = nullsub_36(v79);
          id v176 = v382;
          sub_10046BDE8(v406, v386, v385, (uint64_t)v384, (uint64_t)v173, v175, v177, v178, v382, v179);
          v180 = sub_100447444();
          v181 = v381;
          sub_100466FC0((uint64_t)v176, v180, v182, v381);
          swift_release(v170);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v162 + 56))(v181, 0LL, 1LL, v161);
          id v100 = (uint64_t)&unk_1009BAC60;
          sub_100427794(v181, v399, (uint64_t *)&unk_1009BAC60);
        }

        else
        {
          swift_release(v401);
          id v100 = (uint64_t)&unk_1009BAC60;
        }
      }

      else
      {
        swift_release(v401);
        swift_bridgeObjectRelease(v142);
        sub_10040A274(v160, (uint64_t *)&unk_1009BAC60);
      }

      __int128 v183 = v393;
      sub_100410FD0(v395, v393, (uint64_t *)&unk_1009BAC60);
      __int128 v184 = v163(v183, 1LL, v161);
      sub_10040A274(v183, (uint64_t *)&unk_1009BAC60);
      id v106 = v404;
      uint64_t v98 = v400;
      if (v184 != 1)
      {
        __int128 v79 = (uint64_t)&unk_1009BAC60;
        __int128 v185 = v383;
        sub_100410FD0(v399, v383, (uint64_t *)&unk_1009BAC60);
        __int128 v186 = v163(v185, 1LL, v161);
        sub_10040A274(v185, (uint64_t *)&unk_1009BAC60);
        if (v186 != 1)
        {
          swift_release(v106);
          id v102 = v402;
          id v113 = (unint64_t)v394;
          __int128 v122 = (uint64_t)v396;
          goto LABEL_67;
        }
      }

      __int128 v122 = (uint64_t)v396;
      id v102 = v402;
      id v113 = (unint64_t)v394;
    }

    if (v98 >= *(void *)(v106 + 16)) {
      goto LABEL_146;
    }
    uint64_t v128 = *(void *)&v377[8 * v98];
    swift_retain(v128);
    id v129 = __OFADD__(v98++, 1LL);
    if (!v129) {
      goto LABEL_38;
    }
LABEL_144:
    __break(1u);
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    uint64_t v115 = sub_100503E70(v113);
    swift_release(v113);
LABEL_20:
    *(void *)&v407 = v115;
    uint64_t v116 = v402;
    sub_100504A54((uint64_t *)&v407);
    if (v116) {
      goto LABEL_169;
    }
    id v102 = 0LL;
    swift_release(v113);
    id v106 = v407;
    swift_bridgeObjectRetain(a5);
    __int128 v118 = sub_10047A7B4(v117);
    swift_bridgeObjectRelease(a5);
    v409 = v118;
    __int128 v119 = (void *)objc_opt_self(&OBJC_CLASS___IDSPushHandler);
    __int128 v120 = String._bridgeToObjectiveC()();
    __int128 v121 = [v119 sharedInstanceWithPortName:v120];

    if (!v121) {
      goto LABEL_168;
    }
    __int128 v122 = (uint64_t)[v121 pushToken];

    if (v122)
    {
      __int128 v123 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v122);
      NSUInteger v125 = v124;

      __int128 v122 = (uint64_t)&v409;
      sub_100475CAC(v123, v125, &v407);
      sub_10040AD00(v407, *((unint64_t *)&v407 + 1));
      sub_100402A84(v123, v125);
    }

    id v126 = *(void *)(a5 + 16);
    id v127 = ((unint64_t)v106 >> 62) & 1;
    if (v106 < 0) {
      LODWORD(v127) = 1;
    }
    v404 = v106;
    if (v126)
    {
      if (!(_DWORD)v127)
      {
        __int128 v122 = *(void *)(v106 + 16);
        swift_retain(v106);
        continue;
      }

      goto LABEL_149;
    }

    break;
  }

  v402 = 0LL;
  if ((_DWORD)v127)
  {
    v363 = swift_retain(v106);
    uint64_t v211 = _CocoaArrayWrapper.endIndex.getter(v363);
  }

  else
  {
    uint64_t v211 = *(void *)(v106 + 16);
    swift_retain(v106);
  }

  id v212 = _swiftEmptyArrayStorage;
  if (!v211)
  {
LABEL_104:
    swift_release_n(v404, 2LL);
    *(void *)&v407 = v212;
    swift_bridgeObjectRetain(v212);
    v230 = v402;
    sub_1005049D0(&v407);
    if (!v230)
    {
      id v102 = 0LL;
      swift_bridgeObjectRelease(v212);
      v231 = (os_log_s *)v407;
      id v232 = *(void *)(v407 + 16);
      if (v232)
      {
        v402 = 0LL;
        *(void *)&v407 = _swiftEmptyArrayStorage;
        specialized ContiguousArray.reserveCapacity(_:)(v232);
        v233 = *(unsigned __int8 *)(v403 + 80);
        v404 = (uint64_t)v231;
        id v234 = (uint64_t)v231 + ((v233 + 32) & ~v233);
        v406 = *(void *)(v403 + 72);
        v235 = v397;
        id v236 = v398;
        id v237 = v376;
        v238 = v375;
        do
        {
          sub_100410FD0(v234, (uint64_t)v238, &qword_1009BCAD8);
          v239 = *(int *)(v405 + 48);
          v240 = &v237[v239];
          v241 = *(void *)v238;
          *(void *)id v237 = *(void *)v238;
          (*(void (**)(char *, char *, uint64_t))(v235 + 16))(&v237[v239], &v238[v239], v236);
          swift_retain(v241);
          (*(void (**)(char *, uint64_t))(v235 + 8))(v240, v236);
          v242 = sub_10040A274((uint64_t)v238, &qword_1009BCAD8);
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v242);
          uint64_t v243 = *(void *)(v407 + 16);
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v243);
          id v244 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v243, v241);
          specialized ContiguousArray._endMutation()(v244);
          v234 += v406;
          --v232;
        }

        while (v232);
        __int128 v122 = v407;
        swift_release(v404);
        id v102 = v402;
      }

      else
      {
        swift_release(v407);
        __int128 v122 = (uint64_t)_swiftEmptyArrayStorage;
      }

      id v100 = v398;
      uint64_t v98 = v386;
      __int128 v79 = v385;
      if ((unint64_t)v122 >> 62)
      {
        if (v122 < 0) {
          v364 = v122;
        }
        else {
          v364 = v122 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(v122);
        v365 = _CocoaArrayWrapper.endIndex.getter(v364);
        swift_bridgeObjectRelease(v122);
        if (v365) {
          goto LABEL_114;
        }
      }

      else if (*(void *)((v122 & 0xFFFFFFFFFFFFF8LL) + 0x10))
      {
LABEL_114:
        if ((v122 & 0xC000000000000001LL) != 0) {
          goto LABEL_163;
        }
        if (*(void *)((v122 & 0xFFFFFFFFFFFFF8LL) + 0x10))
        {
          v245 = *(void *)(v122 + 32);
          swift_retain(v245);
          goto LABEL_117;
        }

        __break(1u);
        goto LABEL_165;
      }

LABEL_143:
  v329 = kIDSQRAllocateKey_RelayPort;
  v330 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", kIDSQRAllocateKey_RelayPort, v953, v996, v1039));
  v332 = objc_opt_class(v31[501], v331);
  v333 = objc_opt_isKindOfClass(v330, v332);

  v334 = (NSNumber *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v329]);
  v335 = v334;
  if ((v333 & 1) != 0)
  {
    relayPort = self->_relayPort;
    self->_relayPort = v334;
LABEL_145:

    goto LABEL_152;
  }

  if (v335)
  {
    v337 = OSLogHandleForIDSCategory("QRAllocator");
    v338 = (os_log_s *)objc_claimAutoreleasedReturnValue(v337);
    if (os_log_type_enabled(v338, OS_LOG_TYPE_DEBUG))
    {
      v339 = (id)objc_claimAutoreleasedReturnValue([v4 objectForKey:v329]);
      v341 = (id)objc_opt_class(v31[501], v340);
      v342 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v329]);
      v344 = (id)objc_opt_class(v342, v343);
      *(_DWORD *)buf = 138412802;
      v1070 = v339;
      v1071 = 2112;
      v1072 = v341;
      v1073 = 2112;
      v1074 = v344;
      _os_log_impl( (void *)&_mh_execute_header,  v338,  OS_LOG_TYPE_DEBUG,  "Unexpected datatype. %@ should be of type %@, not %@",  buf,  0x20u);
    }

    if (os_log_shim_legacy_logging_enabled(v345))
    {
      if (_IDSShouldLog(1LL, @"QRAllocator"))
      {
        relayPort = (NSNumber *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v329]);
        v347 = objc_opt_class(v31[501], v346);
        v348 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v329]);
        v997 = v347;
        v1040 = objc_opt_class(v348, v349);
        v954 = relayPort;
        _IDSLogV( 1LL,  @"IDSFoundation",  @"QRAllocator",  @"Unexpected datatype. %@ should be of type %@, not %@");

        goto LABEL_145;
      }
    }
  }

  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Can't construct Array with count < 0",  36LL,  2LL,  "Swift/Array.swift",  17LL,  2,  936LL,  0);
  __break(1u);
  return result;
}

LABEL_170:
  v392 = kIDSQRAllocateKey_RelaySessionID;
  v393 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", kIDSQRAllocateKey_RelaySessionID, v956, v999, v1042));
  v395 = objc_opt_class(&OBJC_CLASS___NSData, v394);
  v396 = objc_opt_isKindOfClass(v393, v395);

  v397 = (NSData *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v392]);
  v398 = v397;
  if ((v396 & 1) != 0)
  {
    relaySessionuint64_t ID = self->_relaySessionID;
    self->_relaySessionuint64_t ID = v397;
LABEL_172:

    goto LABEL_179;
  }

  if (v398)
  {
    v400 = OSLogHandleForIDSCategory("QRAllocator");
    v401 = (os_log_s *)objc_claimAutoreleasedReturnValue(v400);
    if (os_log_type_enabled(v401, OS_LOG_TYPE_DEBUG))
    {
      v402 = (id)objc_claimAutoreleasedReturnValue([v4 objectForKey:v392]);
      v404 = (id)objc_opt_class(&OBJC_CLASS___NSData, v403);
      v405 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v392]);
      v407 = (id)objc_opt_class(v405, v406);
      *(_DWORD *)buf = 138412802;
      v1070 = v402;
      v1071 = 2112;
      v1072 = v404;
      v1073 = 2112;
      v1074 = v407;
      _os_log_impl( (void *)&_mh_execute_header,  v401,  OS_LOG_TYPE_DEBUG,  "Unexpected datatype. %@ should be of type %@, not %@",  buf,  0x20u);
    }

    if (os_log_shim_legacy_logging_enabled(v408))
    {
      if (_IDSShouldLog(1LL, @"QRAllocator"))
      {
        relaySessionuint64_t ID = (NSData *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v392]);
        v410 = objc_opt_class(&OBJC_CLASS___NSData, v409);
        v411 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v392]);
        v1000 = v410;
        v1043 = objc_opt_class(v411, v412);
        v957 = relaySessionID;
        _IDSLogV( 1LL,  @"IDSFoundation",  @"QRAllocator",  @"Unexpected datatype. %@ should be of type %@, not %@");

        goto LABEL_172;
      }
    }
  }

LABEL_179:
  v413 = kIDSQRAllocateKey_RelayExpiryTimestamp;
  v414 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", kIDSQRAllocateKey_RelayExpiryTimestamp, v957, v1000, v1043));
  v416 = objc_opt_class(v31[501], v415);
  v417 = objc_opt_isKindOfClass(v414, v416);

  v418 = (NSNumber *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v413]);
  v419 = v418;
  if ((v417 & 1) != 0)
  {
    relayExpiryTimeStamp = self->_relayExpiryTimeStamp;
    self->_relayExpiryTimeStamp = v418;
LABEL_181:

    goto LABEL_188;
  }

  if (v419)
  {
    v421 = OSLogHandleForIDSCategory("QRAllocator");
    v422 = (os_log_s *)objc_claimAutoreleasedReturnValue(v421);
    if (os_log_type_enabled(v422, OS_LOG_TYPE_DEBUG))
    {
      v423 = (id)objc_claimAutoreleasedReturnValue([v4 objectForKey:v413]);
      v425 = (id)objc_opt_class(v31[501], v424);
      v426 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v413]);
      v428 = (id)objc_opt_class(v426, v427);
      *(_DWORD *)buf = 138412802;
      v1070 = v423;
      v1071 = 2112;
      v1072 = v425;
      v1073 = 2112;
      v1074 = v428;
      _os_log_impl( (void *)&_mh_execute_header,  v422,  OS_LOG_TYPE_DEBUG,  "Unexpected datatype. %@ should be of type %@, not %@",  buf,  0x20u);
    }

    if (os_log_shim_legacy_logging_enabled(v429))
    {
      if (_IDSShouldLog(1LL, @"QRAllocator"))
      {
        relayExpiryTimeStamp = (NSNumber *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v413]);
        v431 = objc_opt_class(v31[501], v430);
        v432 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v413]);
        v1001 = v431;
        v1044 = objc_opt_class(v432, v433);
        v958 = relayExpiryTimeStamp;
        _IDSLogV( 1LL,  @"IDSFoundation",  @"QRAllocator",  @"Unexpected datatype. %@ should be of type %@, not %@");

        goto LABEL_181;
      }
    }
  }

LABEL_188:
  v434 = kIDSQRAllocateKey_InferredExternalAddress;
  v435 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", kIDSQRAllocateKey_InferredExternalAddress, v958, v1001, v1044));
  v437 = objc_opt_class(&OBJC_CLASS___NSData, v436);
  v438 = objc_opt_isKindOfClass(v435, v437);

  v439 = (NSData *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v434]);
  v440 = v439;
  if ((v438 & 1) != 0)
  {
    inferredExternalIP = self->_inferredExternalIP;
    self->_inferredExternalIP = v439;
LABEL_190:

    goto LABEL_197;
  }

  if (v440)
  {
    v442 = OSLogHandleForIDSCategory("QRAllocator");
    v443 = (os_log_s *)objc_claimAutoreleasedReturnValue(v442);
    if (os_log_type_enabled(v443, OS_LOG_TYPE_DEBUG))
    {
      v444 = (id)objc_claimAutoreleasedReturnValue([v4 objectForKey:v434]);
      v446 = (id)objc_opt_class(&OBJC_CLASS___NSData, v445);
      v447 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v434]);
      v449 = (id)objc_opt_class(v447, v448);
      *(_DWORD *)buf = 138412802;
      v1070 = v444;
      v1071 = 2112;
      v1072 = v446;
      v1073 = 2112;
      v1074 = v449;
      _os_log_impl( (void *)&_mh_execute_header,  v443,  OS_LOG_TYPE_DEBUG,  "Unexpected datatype. %@ should be of type %@, not %@",  buf,  0x20u);
    }

    if (os_log_shim_legacy_logging_enabled(v450))
    {
      if (_IDSShouldLog(1LL, @"QRAllocator"))
      {
        inferredExternalIP = (NSData *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v434]);
        v452 = objc_opt_class(&OBJC_CLASS___NSData, v451);
        v453 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v434]);
        v1002 = v452;
        v1045 = objc_opt_class(v453, v454);
        v959 = inferredExternalIP;
        _IDSLogV( 1LL,  @"IDSFoundation",  @"QRAllocator",  @"Unexpected datatype. %@ should be of type %@, not %@");

        goto LABEL_190;
      }
    }
  }

LABEL_197:
  v455 = kIDSQRAllocateKey_Provider;
  v456 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", kIDSQRAllocateKey_Provider, v959, v1002, v1045));
  v458 = objc_opt_class(v31[501], v457);
  v459 = objc_opt_isKindOfClass(v456, v458);

  v460 = (NSNumber *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v455]);
  v461 = v460;
  if ((v459 & 1) != 0)
  {
    provider = self->_provider;
    self->_provider = v460;
LABEL_199:

    goto LABEL_206;
  }

  if (v461)
  {
    v463 = OSLogHandleForIDSCategory("QRAllocator");
    v464 = (os_log_s *)objc_claimAutoreleasedReturnValue(v463);
    if (os_log_type_enabled(v464, OS_LOG_TYPE_DEBUG))
    {
      v465 = (id)objc_claimAutoreleasedReturnValue([v4 objectForKey:v455]);
      v467 = (id)objc_opt_class(v31[501], v466);
      v468 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v455]);
      v470 = (id)objc_opt_class(v468, v469);
      *(_DWORD *)buf = 138412802;
      v1070 = v465;
      v1071 = 2112;
      v1072 = v467;
      v1073 = 2112;
      v1074 = v470;
      _os_log_impl( (void *)&_mh_execute_header,  v464,  OS_LOG_TYPE_DEBUG,  "Unexpected datatype. %@ should be of type %@, not %@",  buf,  0x20u);
    }

    if (os_log_shim_legacy_logging_enabled(v471))
    {
      if (_IDSShouldLog(1LL, @"QRAllocator"))
      {
        provider = (NSNumber *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v455]);
        v473 = objc_opt_class(v31[501], v472);
        v474 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v455]);
        v1003 = v473;
        v1046 = objc_opt_class(v474, v475);
        v960 = provider;
        _IDSLogV( 1LL,  @"IDSFoundation",  @"QRAllocator",  @"Unexpected datatype. %@ should be of type %@, not %@");

        goto LABEL_199;
      }
    }
  }

                objc_msgSend(v192, "setPacketsSent:", (char *)objc_msgSend(v192, "packetsSent") + 1);
                objc_msgSend(v192, "setBytesSent:", (char *)objc_msgSend(v192, "bytesSent") + v77[2]);
                if (v10 == 17) {
                  kdebug_trace(722010168LL, 0LL, 0LL, 0LL, 0LL);
                }
                *((_BYTE *)v77 + 40) = a9;
                uint64_t v143 = -[IDSLinkManager sendPacketBuffer:toDeviceUniqueID:cbuuid:]( v193->_linkManager,  "sendPacketBuffer:toDeviceUniqueID:cbuuid:",  v77,  v14[2],  v14[1]);
                uint64_t v144 = v143;
                if (v193->_isSimulateResetLoopTest && (BYTE4(v187) & 0x12) == 2)
                {
                  id v145 = sub_1003BBA5C((uint64_t)&v193->_deviceConnectionInfoTableByCbuuid, kIDSDefaultPairedDeviceID);
                  id v146 = (void *)objc_claimAutoreleasedReturnValue(v145);
                  id v147 = sub_1003BB3A8((uint64_t)[v14 connectionsTableByLocalRemotePortKey], 67109888);
                  id v148 = (void *)objc_claimAutoreleasedReturnValue(v147);
                  uint64_t v149 = OSLogHandleForTransportCategory("IDSUTunController");
                  double v150 = (os_log_s *)objc_claimAutoreleasedReturnValue(v149);
                  if (os_log_type_enabled(v150, OS_LOG_TYPE_DEFAULT))
                  {
                    LOWORD(buf[0]) = 0;
                    _os_log_impl( (void *)&_mh_execute_header,  v150,  OS_LOG_TYPE_DEFAULT,  "Custom Test 3 - reset one more time",  (uint8_t *)buf,  2u);
                  }

                  uint64_t v152 = os_log_shim_legacy_logging_enabled(v151);
                  if ((_DWORD)v152)
                  {
                    if (_IDSShouldLogTransport(v152))
                    {
                      _IDSLogTransport( @"IDSUTunController",  @"IDS",  @"Custom Test 3 - reset one more time");
                      if (_IDSShouldLog(0LL, @"IDSUTunController")) {
                        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSUTunController",  @"Custom Test 3 - reset one more time");
                      }
                    }
                  }

                  -[IDSUTunController resetTCPConnection:forDeviceConnectionInfo:]( v193,  "resetTCPConnection:forDeviceConnectionInfo:",  v148,  v146);
                  v193->_isSimulateResetLoopTest = 0;

                  goto LABEL_239;
                }

                if (v143 <= 5)
                {
                  if (!v143)
                  {
                    [v192 setLastSuccessfulSentTime:v109];
                    v160 = (void *)objc_claimAutoreleasedReturnValue([v192 outgoingStallDetector]);

                    if (v160)
                    {
                      uint64_t v161 = (void *)objc_claimAutoreleasedReturnValue([v192 outgoingStallDetector]);
                      [v161 consumeBytes:a4];
                    }

                    if (v10 == 17 && v193->_logPackets)
                    {
                      v162 = sub_100321AD8();
                      __int16 v163 = (void *)qword_1009C7520;
                      v164 = a4 - 8;
                      id v165 = (void *)objc_claimAutoreleasedReturnValue( +[IDSUTunTimingLogger outgoingEventWithTimestamp:duration:processTime:compressionTime:sendTime:bytes:]( &OBJC_CLASS___IDSUTunTimingLogger,  "outgoingEventWithTimestamp:duration:processTime:compressionTime:sendTime:bytes:",  a4 - 8,  v162,  v162 - (double)(unint64_t)qword_1009C0BB8 * *(double *)&qword_1009C0B68,  *(double *)&qword_1009C0B68 * (double)(unint64_t)qword_1009C0BC8,  *(double *)&qword_1009C0B68 * (double)(unint64_t)qword_1009C0BD0,  v162 - (double)(unint64_t)qword_1009C0BC0 * *(double *)&qword_1009C0B68));
                      [v163 addEvent:v165];

                      if (sub_100321AD8() - *(double *)&qword_1009C0B88 > 0.5)
                      {
                        memset(&buf[2], 170, 0x558uLL);
                        uuid_generate((unsigned __int8 *)&xmmword_1009C0B90);
                        uuid_generate((unsigned __int8 *)&qword_1009C0BA0);
                        buf[0] = xmmword_1009C0B90;
                        buf[1] = *(_OWORD *)&qword_1009C0BA0;
                        if (v164 < 0x21) {
                          v164 = 32LL;
                        }
                        else {
                          arc4random_buf(&buf[2], v164);
                        }
                        qword_1009C0BB0 = (unint64_t)sub_100321AD8();
                        v181 = send((int)[v192 sdCopy], buf, v164, 0);
                        if (v181 == v164)
                        {
                          byte_1009C0B80 = 1;
                        }

                        else
                        {
                          id v182 = *__error();
                          __int128 v183 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog utunController]( &OBJC_CLASS___IDSFoundationLog,  "utunController"));
                          if (os_log_type_enabled(v183, OS_LOG_TYPE_DEFAULT))
                          {
                            *(_DWORD *)__n_4 = 134218496;
                            *(void *)&__n_4[4] = v181;
                            *(_WORD *)&__n_4[12] = 1024;
                            *(_DWORD *)&__n_4[14] = v164;
                            *(_WORD *)&__n_4[18] = 1024;
                            id v196 = v182;
                            _os_log_impl( (void *)&_mh_execute_header,  v183,  OS_LOG_TYPE_DEFAULT,  "cannot inject timing test packet (%zd != %d) (%d)",  __n_4,  0x18u);
                          }
                        }
                      }
                    }

                    goto LABEL_239;
                  }

                  if (v143 != 1) {
                    goto LABEL_239;
                  }
                }

                else
                {
                  if (v143 == 6)
                  {
LABEL_212:
                    CFTypeRef v153 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog utunController]( &OBJC_CLASS___IDSFoundationLog,  "utunController"));
                    if (os_log_type_enabled(v153, OS_LOG_TYPE_DEFAULT))
                    {
                      uint64_t v154 = [v14 utunSocket];
                      LODWORD(buf[0]) = 67109376;
                      DWORD1(buf[0]) = v144;
                      WORD4(buf[0]) = 1024;
                      *(_DWORD *)((char *)buf + 10) = v154;
                      _os_log_impl( (void *)&_mh_execute_header,  v153,  OS_LOG_TYPE_DEFAULT,  "[throughput] sendPacketBuffer error %u (s: %d)",  (uint8_t *)buf,  0xEu);
                    }

                    goto LABEL_239;
                  }

                  if (v143 != 13)
                  {
                    if (v143 == 10) {
                      goto LABEL_212;
                    }
LABEL_239:

                    goto LABEL_240;
                  }
                }

                uint64_t v155 = v14[2079] == 0LL;
                uint64_t v156 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog utunController]( &OBJC_CLASS___IDSFoundationLog,  "utunController"));
                CFTypeRef v157 = os_log_type_enabled(v156, OS_LOG_TYPE_DEFAULT);
                if (v155)
                {
                  if (v157)
                  {
                    v166 = [v14 utunSocket];
                    LODWORD(buf[0]) = 67109120;
                    DWORD1(buf[0]) = v166;
                    _os_log_impl( (void *)&_mh_execute_header,  v156,  OS_LOG_TYPE_DEFAULT,  "[throughput] link throttling (s: %d)",  (uint8_t *)buf,  8u);
                  }

                  fd = [v14 utunSocket];
                }

                else
                {
                  if (v157)
                  {
                    LOWORD(buf[0]) = 0;
                    _os_log_impl( (void *)&_mh_execute_header,  v156,  OS_LOG_TYPE_DEFAULT,  "[throughput] link throttling",  (uint8_t *)buf,  2u);
                  }

                  fd = (id)os_channel_get_fd(v14[2079], v158);
                }

                IDSTransportThreadSuspendSocket(fd, 1LL);
                if (a10) {
                  *a10 = 1;
                }
                goto LABEL_239;
              }
            }
          }
        }

        if (v10 != 6)
        {
          if (v193->_logPackets)
          {
            __int128 v124 = mach_continuous_time();
            qword_1009C0BC8 = v124 - qword_1009C0BC0;
            qword_1009C0BC0 = v124;
          }

          goto LABEL_197;
        }

        goto LABEL_150;
      }
    }

    unsigned __int8 v59 = 0;
    goto LABEL_105;
  }

  uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    id v16 = (void *)objc_claimAutoreleasedReturnValue([v14 vifName]);
    __int128 v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSData dataWithBytesNoCopy:length:freeWhenDone:]( &OBJC_CLASS___NSData,  "dataWithBytesNoCopy:length:freeWhenDone:",  a3,  a4,  0LL));
    LODWORD(buf[0]) = 138412802;
    *(void *)((char *)buf + 4) = v16;
    WORD6(buf[0]) = 2112;
    *(void *)((char *)buf + 14) = v17;
    WORD3(buf[1]) = 2048;
    *((void *)&buf[1] + 1) = a4;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "%@: dropping packet %@ of length %zu",  (uint8_t *)buf,  0x20u);
  }

  if (a9)
  {
LABEL_64:
    unsigned __int8 v41 = v193->_linkManager;
    unsigned __int8 v42 = (void *)objc_claimAutoreleasedReturnValue([v14 deviceUniqueID]);
    unsigned __int8 v43 = (void *)objc_claimAutoreleasedReturnValue([v14 cbuuid]);
    -[IDSLinkManager flushBuffer:toDeviceUniqueID:cbuuid:](v41, "flushBuffer:toDeviceUniqueID:cbuuid:", 0LL, v42, v43);
  }

    __int128 v123 = v118;

    __int128 v124 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:@"user-unique-identifier"]);
    if (_IDSRunningInDaemon(v124, v125) && v124)
    {
      id v127 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v127, OS_LOG_TYPE_DEBUG)) {
        sub_1006A98A8();
      }
    }

    else if (!v124)
    {
      goto LABEL_205;
    }

    uint64_t v128 = objc_opt_class(&OBJC_CLASS___NSString, v126);
    if ((objc_opt_isKindOfClass(v124, v128) & 1) == 0) {
      goto LABEL_224;
    }
LABEL_205:
    objc_storeStrong((id *)&v5->_userUniqueIdentifier, v124);

    __int128 v124 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:@"context-info"]);
    if (_IDSRunningInDaemon(v124, v129) && v124)
    {
      __int16 v131 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v131, OS_LOG_TYPE_DEBUG)) {
        sub_1006A9818();
      }
    }

    else if (!v124)
    {
LABEL_212:
      objc_storeStrong((id *)&v5->_contextInfo, v124);

      __int128 v124 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:@"type"]);
      if (_IDSRunningInDaemon(v124, v133) && v124)
      {
        uint64_t v135 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
        if (os_log_type_enabled(v135, OS_LOG_TYPE_DEBUG)) {
          sub_1006A9788();
        }
      }

      else if (!v124)
      {
        goto LABEL_224;
      }

      uint64_t v136 = objc_opt_class(&OBJC_CLASS___NSNumber, v134);
      if ((objc_opt_isKindOfClass(v124, v136) & 1) != 0)
      {
        double v137 = v124;

        id v200 = v137;
        -[IDSRegistration setRegistrationType:](v5, "setRegistrationType:", [v137 intValue]);
        double v138 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:@"service"]);
        if (_IDSRunningInDaemon(v138, v139) && v138)
        {
          uint64_t v141 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
          if (os_log_type_enabled(v141, OS_LOG_TYPE_DEBUG)) {
            sub_1006A96F8();
          }
        }

        else if (!v138)
        {
          goto LABEL_234;
        }

        uint64_t v142 = objc_opt_class(&OBJC_CLASS___NSString, v140);
        if ((objc_opt_isKindOfClass(v138, v142) & 1) != 0)
        {
          uint64_t v201 = v138;

          id obj = (id)objc_claimAutoreleasedReturnValue([v4 objectForKey:@"service-identifier"]);
          if (_IDSRunningInDaemon(obj, v143) && obj)
          {
            id v145 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
            if (os_log_type_enabled(v145, OS_LOG_TYPE_DEBUG)) {
              sub_1006A9668();
            }
          }

          else if (!obj)
          {
LABEL_237:
            objc_storeStrong((id *)&v5->_serviceIdentifier, obj);

            id obj = (id)objc_claimAutoreleasedReturnValue([v4 objectForKey:@"did-reg-with-kt-account-key"]);
            if (_IDSRunningInDaemon(obj, v147) && obj)
            {
              uint64_t v149 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
              if (os_log_type_enabled(v149, OS_LOG_TYPE_DEBUG)) {
                sub_1006A95D8();
              }
            }

            else if (!obj)
            {
LABEL_244:
              uint64_t v151 = obj;

              id obj = v151;
              -[IDSRegistration setDidRegisterWithKTAccountKey:]( v5,  "setDidRegisterWithKTAccountKey:",  [v151 BOOLValue]);
              id v199 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:@"did-reg-with-kt-device-signature"]);
              if (_IDSRunningInDaemon(v199, v152) && v199)
              {
                uint64_t v154 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                if (os_log_type_enabled(v154, OS_LOG_TYPE_DEBUG)) {
                  sub_1006A9548();
                }
              }

              else if (!v199)
              {
                goto LABEL_252;
              }

              uint64_t v155 = objc_opt_class(&OBJC_CLASS___NSNumber, v153);
              if ((objc_opt_isKindOfClass(v199, v155) & 1) == 0)
              {
                id v27 = 1;
LABEL_321:

                goto LABEL_322;
              }

                            CSDBSqliteDatabaseSetVersion(a1, 8012LL);
                            uint64_t v112 = OSLogHandleForIDSCategory("IDSDMessageStore");
                            id v113 = (os_log_s *)objc_claimAutoreleasedReturnValue(v112);
                            if (os_log_type_enabled(v113, OS_LOG_TYPE_DEFAULT))
                            {
                              *(_WORD *)buf = 0;
                              _os_log_impl( (void *)&_mh_execute_header,  v113,  OS_LOG_TYPE_DEFAULT,  "Create table outgoing_messages_to_delete",  buf,  2u);
                            }

                            if (os_log_shim_legacy_logging_enabled(v114)
                              && _IDSShouldLog(0LL, @"IDSDMessageStore"))
                            {
                              _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDMessageStore",  @"Create table outgoing_messages_to_delete");
                            }

                            CSDBRecordStoreCreateTablesForClass(&off_100903168, a2, 0LL);
                            CSDBSqliteDatabaseSetVersion(a1, 8013LL);
                            goto LABEL_203;
                          }

LABEL_224:
  v518 = kIDSQRAllocateKey_QRError;
  v519 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", kIDSQRAllocateKey_QRError, v962, v1005, v1048));
  v521 = objc_opt_class(v31[501], v520);
  v522 = objc_opt_isKindOfClass(v519, v521);

  v523 = (NSNumber *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v518]);
  v524 = v523;
  if ((v522 & 1) != 0)
  {
    qrError = self->_qrError;
    self->_qrError = v523;
LABEL_226:

    goto LABEL_233;
  }

  if (v524)
  {
    v526 = OSLogHandleForIDSCategory("QRAllocator");
    v527 = (os_log_s *)objc_claimAutoreleasedReturnValue(v526);
    if (os_log_type_enabled(v527, OS_LOG_TYPE_DEBUG))
    {
      v528 = (id)objc_claimAutoreleasedReturnValue([v4 objectForKey:v518]);
      v530 = (id)objc_opt_class(v31[501], v529);
      v531 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v518]);
      v533 = (id)objc_opt_class(v531, v532);
      *(_DWORD *)buf = 138412802;
      v1070 = v528;
      v1071 = 2112;
      v1072 = v530;
      v1073 = 2112;
      v1074 = v533;
      _os_log_impl( (void *)&_mh_execute_header,  v527,  OS_LOG_TYPE_DEBUG,  "Unexpected datatype. %@ should be of type %@, not %@",  buf,  0x20u);
    }

    if (os_log_shim_legacy_logging_enabled(v534))
    {
      if (_IDSShouldLog(1LL, @"QRAllocator"))
      {
        qrError = (NSNumber *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v518]);
        v536 = objc_opt_class(v31[501], v535);
        v537 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v518]);
        v1006 = v536;
        v1049 = objc_opt_class(v537, v538);
        v963 = qrError;
        _IDSLogV( 1LL,  @"IDSFoundation",  @"QRAllocator",  @"Unexpected datatype. %@ should be of type %@, not %@");

        goto LABEL_226;
      }
    }
  }

      id v27 = 1;
LABEL_225:

      __int128 v118 = v6;
      dispatch_time_t v6 = v117;
      __int128 v117 = v123;
      goto LABEL_226;
    }

    id v132 = objc_opt_class(&OBJC_CLASS___NSDictionary, v130);
    if ((objc_opt_isKindOfClass(v124, v132) & 1) == 0) {
      goto LABEL_224;
    }
    goto LABEL_212;
  }

  uint64_t v116 = objc_opt_class(&OBJC_CLASS___NSData, v114);
  if ((objc_opt_isKindOfClass(v23, v116) & 1) != 0) {
    goto LABEL_188;
  }
LABEL_193:
  id v27 = 1;
LABEL_194:

LABEL_38:
  if (!v27)
  {
LABEL_40:
    uint64_t v28 = v5;
    goto LABEL_41;
  }

                                    CSDBSqliteDatabaseSetVersion(a1, 9002LL);
                                    id v126 = OSLogHandleForIDSCategory("IDSDMessageStore");
                                    id v127 = (os_log_s *)objc_claimAutoreleasedReturnValue(v126);
                                    if (os_log_type_enabled(v127, OS_LOG_TYPE_DEFAULT))
                                    {
                                      *(_WORD *)buf = 0;
                                      _os_log_impl( (void *)&_mh_execute_header,  v127,  OS_LOG_TYPE_DEFAULT,  "Add message_type column to outgoing_message",  buf,  2u);
                                    }

                                    if (os_log_shim_legacy_logging_enabled(v128)
                                      && _IDSShouldLog(0LL, @"IDSDMessageStore"))
                                    {
                                      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDMessageStore",  @"Add message_type column to outgoing_message");
                                    }

                                    if (!sub_1003B3CB0( a2,  @"message_type",  @"INTEGER DEFAULT 0",  @"outgoing_message")) {
                                      goto LABEL_425;
                                    }
                                    CSDBSqliteDatabaseSetVersion(a1, 10001LL);
                                    goto LABEL_231;
                                  }

LABEL_233:
  v539 = kIDSQRAllocateKey_PreviousAccessToken;
  v540 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", kIDSQRAllocateKey_PreviousAccessToken, v963, v1006, v1049));
  v542 = objc_opt_class(&OBJC_CLASS___NSData, v541);
  v543 = objc_opt_isKindOfClass(v540, v542);

  v544 = (NSData *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v539]);
  v545 = v544;
  if ((v543 & 1) != 0)
  {
    previousAccessToken = self->_previousAccessToken;
    self->_previousAccessToken = v544;
LABEL_235:

    goto LABEL_242;
  }

  if (v545)
  {
    v547 = OSLogHandleForIDSCategory("QRAllocator");
    v548 = (os_log_s *)objc_claimAutoreleasedReturnValue(v547);
    if (os_log_type_enabled(v548, OS_LOG_TYPE_DEBUG))
    {
      v549 = (id)objc_claimAutoreleasedReturnValue([v4 objectForKey:v539]);
      v551 = (id)objc_opt_class(&OBJC_CLASS___NSData, v550);
      v552 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v539]);
      v554 = (id)objc_opt_class(v552, v553);
      *(_DWORD *)buf = 138412802;
      v1070 = v549;
      v1071 = 2112;
      v1072 = v551;
      v1073 = 2112;
      v1074 = v554;
      _os_log_impl( (void *)&_mh_execute_header,  v548,  OS_LOG_TYPE_DEBUG,  "Unexpected datatype. %@ should be of type %@, not %@",  buf,  0x20u);
    }

    if (os_log_shim_legacy_logging_enabled(v555))
    {
      if (_IDSShouldLog(1LL, @"QRAllocator"))
      {
        previousAccessToken = (NSData *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v539]);
        v557 = objc_opt_class(&OBJC_CLASS___NSData, v556);
        v558 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v539]);
        v1007 = v557;
        v1050 = objc_opt_class(v558, v559);
        v964 = previousAccessToken;
        _IDSLogV( 1LL,  @"IDSFoundation",  @"QRAllocator",  @"Unexpected datatype. %@ should be of type %@, not %@");

        goto LABEL_235;
      }
    }
  }

LABEL_251:
  v581 = kIDSQRAllocateKey_TestOptions;
  v582 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", kIDSQRAllocateKey_TestOptions, v965, v1008, v1051));
  v584 = objc_opt_class(&OBJC_CLASS___NSString, v583);
  v585 = objc_opt_isKindOfClass(v582, v584);

  v586 = (NSString *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v581]);
  v587 = v586;
  if ((v585 & 1) != 0)
  {
    testOptions = self->_testOptions;
    self->_testOptions = v586;
LABEL_253:

    goto LABEL_260;
  }

  if (v587)
  {
    v589 = OSLogHandleForIDSCategory("QRAllocator");
    v590 = (os_log_s *)objc_claimAutoreleasedReturnValue(v589);
    if (os_log_type_enabled(v590, OS_LOG_TYPE_DEBUG))
    {
      v591 = (id)objc_claimAutoreleasedReturnValue([v4 objectForKey:v581]);
      v593 = (id)objc_opt_class(&OBJC_CLASS___NSString, v592);
      v594 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v581]);
      v596 = (id)objc_opt_class(v594, v595);
      *(_DWORD *)buf = 138412802;
      v1070 = v591;
      v1071 = 2112;
      v1072 = v593;
      v1073 = 2112;
      v1074 = v596;
      _os_log_impl( (void *)&_mh_execute_header,  v590,  OS_LOG_TYPE_DEBUG,  "Unexpected datatype. %@ should be of type %@, not %@",  buf,  0x20u);
    }

    if (os_log_shim_legacy_logging_enabled(v597))
    {
      if (_IDSShouldLog(1LL, @"QRAllocator"))
      {
        testOptions = (NSString *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v581]);
        v599 = objc_opt_class(&OBJC_CLASS___NSString, v598);
        v600 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v581]);
        v1009 = v599;
        v1052 = objc_opt_class(v600, v601);
        v966 = testOptions;
        _IDSLogV( 1LL,  @"IDSFoundation",  @"QRAllocator",  @"Unexpected datatype. %@ should be of type %@, not %@");

        goto LABEL_253;
      }
    }
  }

LABEL_260:
  v602 = kIDSQRAllocateKey_RelaySoftwareVersion;
  v603 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", kIDSQRAllocateKey_RelaySoftwareVersion, v966, v1009, v1052));
  v605 = objc_opt_class(&OBJC_CLASS___NSData, v604);
  v606 = objc_opt_isKindOfClass(v603, v605);

  v607 = (NSData *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v602]);
  v608 = v607;
  if ((v606 & 1) != 0)
  {
    relaySoftwareVersion = self->_relaySoftwareVersion;
    self->_relaySoftwareVersion = v607;
LABEL_262:

    goto LABEL_269;
  }

  if (v608)
  {
    v610 = OSLogHandleForIDSCategory("QRAllocator");
    v611 = (os_log_s *)objc_claimAutoreleasedReturnValue(v610);
    if (os_log_type_enabled(v611, OS_LOG_TYPE_DEBUG))
    {
      v612 = (id)objc_claimAutoreleasedReturnValue([v4 objectForKey:v602]);
      v614 = (id)objc_opt_class(&OBJC_CLASS___NSData, v613);
      v615 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v602]);
      v617 = (id)objc_opt_class(v615, v616);
      *(_DWORD *)buf = 138412802;
      v1070 = v612;
      v1071 = 2112;
      v1072 = v614;
      v1073 = 2112;
      v1074 = v617;
      _os_log_impl( (void *)&_mh_execute_header,  v611,  OS_LOG_TYPE_DEBUG,  "Unexpected datatype. %@ should be of type %@, not %@",  buf,  0x20u);
    }

    if (os_log_shim_legacy_logging_enabled(v618))
    {
      if (_IDSShouldLog(1LL, @"QRAllocator"))
      {
        relaySoftwareVersion = (NSData *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v602]);
        v620 = objc_opt_class(&OBJC_CLASS___NSData, v619);
        v621 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v602]);
        v1010 = v620;
        v1053 = objc_opt_class(v621, v622);
        v967 = relaySoftwareVersion;
        _IDSLogV( 1LL,  @"IDSFoundation",  @"QRAllocator",  @"Unexpected datatype. %@ should be of type %@, not %@");

        goto LABEL_262;
      }
    }
  }

              uint64_t v161 = v198;

              v198 = v161;
              -[IDSRegistration setOptedIntoKT:](v5, "setOptedIntoKT:", (int)[v161 intValue]);
              v162 = _IDSRegistrationServiceTypeForString(v201);
              uint64_t v197 = (void *)objc_claimAutoreleasedReturnValue(v162);
              -[IDSRegistration setServiceType:](v5, "setServiceType:");
              __int16 v163 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistration serviceIdentifier](v5, "serviceIdentifier"));
              if (![v163 length])
              {
                v164 = [v197 length];

                if (!v164) {
                  goto LABEL_264;
                }
                id v165 = _IDSRegistrationServiceIdentifierFromServiceType(v197);
                __int16 v163 = (void *)objc_claimAutoreleasedReturnValue(v165);
                -[IDSRegistration setServiceIdentifier:](v5, "setServiceIdentifier:", v163);
              }

LABEL_264:
              if (!-[NSArray count](v5->_uris, "count"))
              {
                v166 = *p_registrationCert;
                *p_registrationCert = 0LL;
              }

              if (*p_registrationCert)
              {
                id v167 = 0LL;
                uint64_t v168 = 0LL;
                goto LABEL_268;
              }

              id v167 = (id)objc_claimAutoreleasedReturnValue([v4 objectForKey:@"bindings"]);
              if (_IDSRunningInDaemon(v167, v175) && v167)
              {
                id v177 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                if (os_log_type_enabled(v177, OS_LOG_TYPE_DEBUG)) {
                  sub_1006A9408();
                }
              }

              else if (!v167)
              {
                goto LABEL_284;
              }

              id v178 = objc_opt_class(&OBJC_CLASS___NSArray, v176);
              if ((objc_opt_isKindOfClass(v167, v178) & 1) == 0)
              {
                id v27 = 1;
LABEL_319:

                goto LABEL_320;
              }

LABEL_269:
  v623 = kIDSQRAllocateKey_RelayBuildVersion;
  v624 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", kIDSQRAllocateKey_RelayBuildVersion, v967, v1010, v1053));
  v626 = objc_opt_class(&OBJC_CLASS___NSString, v625);
  v627 = objc_opt_isKindOfClass(v624, v626);

  v628 = (NSString *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v623]);
  v629 = v628;
  if ((v627 & 1) != 0)
  {
    relayBuildVersion = self->_relayBuildVersion;
    self->_relayBuildVersion = v628;
LABEL_271:

    goto LABEL_278;
  }

  if (v629)
  {
    v631 = OSLogHandleForIDSCategory("QRAllocator");
    v632 = (os_log_s *)objc_claimAutoreleasedReturnValue(v631);
    if (os_log_type_enabled(v632, OS_LOG_TYPE_DEBUG))
    {
      v633 = (id)objc_claimAutoreleasedReturnValue([v4 objectForKey:v623]);
      v635 = (id)objc_opt_class(&OBJC_CLASS___NSString, v634);
      v636 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v623]);
      v638 = (id)objc_opt_class(v636, v637);
      *(_DWORD *)buf = 138412802;
      v1070 = v633;
      v1071 = 2112;
      v1072 = v635;
      v1073 = 2112;
      v1074 = v638;
      _os_log_impl( (void *)&_mh_execute_header,  v632,  OS_LOG_TYPE_DEBUG,  "Unexpected datatype. %@ should be of type %@, not %@",  buf,  0x20u);
    }

    if (os_log_shim_legacy_logging_enabled(v639))
    {
      if (_IDSShouldLog(1LL, @"QRAllocator"))
      {
        relayBuildVersion = (NSString *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v623]);
        v641 = objc_opt_class(&OBJC_CLASS___NSString, v640);
        v642 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v623]);
        v1011 = v641;
        v1054 = objc_opt_class(v642, v643);
        v968 = relayBuildVersion;
        _IDSLogV( 1LL,  @"IDSFoundation",  @"QRAllocator",  @"Unexpected datatype. %@ should be of type %@, not %@");

        goto LABEL_271;
      }
    }
  }

LABEL_278:
  v644 = kIDSQRAllocateKey_RelayHighPriorityPort;
  v645 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", kIDSQRAllocateKey_RelayHighPriorityPort, v968, v1011, v1054));
  v647 = objc_opt_class(v31[501], v646);
  v648 = objc_opt_isKindOfClass(v645, v647);

  v649 = (NSNumber *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v644]);
  v650 = v649;
  if ((v648 & 1) != 0)
  {
    relayHighPriorityPort = self->_relayHighPriorityPort;
    self->_relayHighPriorityPort = v649;
LABEL_280:

    goto LABEL_287;
  }

  if (v650)
  {
    v652 = OSLogHandleForIDSCategory("QRAllocator");
    v653 = (os_log_s *)objc_claimAutoreleasedReturnValue(v652);
    if (os_log_type_enabled(v653, OS_LOG_TYPE_DEBUG))
    {
      v654 = (id)objc_claimAutoreleasedReturnValue([v4 objectForKey:v644]);
      v656 = (id)objc_opt_class(v31[501], v655);
      v657 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v644]);
      v659 = (id)objc_opt_class(v657, v658);
      *(_DWORD *)buf = 138412802;
      v1070 = v654;
      v1071 = 2112;
      v1072 = v656;
      v1073 = 2112;
      v1074 = v659;
      _os_log_impl( (void *)&_mh_execute_header,  v653,  OS_LOG_TYPE_DEBUG,  "Unexpected datatype. %@ should be of type %@, not %@",  buf,  0x20u);
    }

    if (os_log_shim_legacy_logging_enabled(v660))
    {
      if (_IDSShouldLog(1LL, @"QRAllocator"))
      {
        relayHighPriorityPort = (NSNumber *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v644]);
        v662 = objc_opt_class(v31[501], v661);
        v663 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v644]);
        v1012 = v662;
        v1055 = objc_opt_class(v663, v664);
        v969 = relayHighPriorityPort;
        _IDSLogV( 1LL,  @"IDSFoundation",  @"QRAllocator",  @"Unexpected datatype. %@ should be of type %@, not %@");

        goto LABEL_280;
      }
    }
  }

LABEL_287:
  v665 = kIDSQRAllocateKey_RelayIPPreference;
  v666 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", kIDSQRAllocateKey_RelayIPPreference, v969, v1012, v1055));
  v668 = objc_opt_class(v31[501], v667);
  v669 = objc_opt_isKindOfClass(v666, v668);

  v670 = (NSNumber *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v665]);
  v671 = v670;
  if ((v669 & 1) != 0)
  {
    ipPreference = self->_ipPreference;
    self->_ipPreference = v670;
LABEL_289:

    goto LABEL_296;
  }

  if (v671)
  {
    v673 = OSLogHandleForIDSCategory("QRAllocator");
    v674 = (os_log_s *)objc_claimAutoreleasedReturnValue(v673);
    if (os_log_type_enabled(v674, OS_LOG_TYPE_DEBUG))
    {
      v675 = (id)objc_claimAutoreleasedReturnValue([v4 objectForKey:v665]);
      v677 = (id)objc_opt_class(v31[501], v676);
      v678 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v665]);
      v680 = (id)objc_opt_class(v678, v679);
      *(_DWORD *)buf = 138412802;
      v1070 = v675;
      v1071 = 2112;
      v1072 = v677;
      v1073 = 2112;
      v1074 = v680;
      _os_log_impl( (void *)&_mh_execute_header,  v674,  OS_LOG_TYPE_DEBUG,  "Unexpected datatype. %@ should be of type %@, not %@",  buf,  0x20u);
    }

    if (os_log_shim_legacy_logging_enabled(v681))
    {
      if (_IDSShouldLog(1LL, @"QRAllocator"))
      {
        ipPreference = (NSNumber *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v665]);
        v683 = objc_opt_class(v31[501], v682);
        v684 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v665]);
        v1013 = v683;
        v1056 = objc_opt_class(v684, v685);
        v970 = ipPreference;
        _IDSLogV( 1LL,  @"IDSFoundation",  @"QRAllocator",  @"Unexpected datatype. %@ should be of type %@, not %@");

        goto LABEL_289;
      }
    }
  }

                                                      CSDBSqliteDatabaseSetVersion(a1, 10009LL);
                                                      id v159 = OSLogHandleForIDSCategory("IDSDMessageStore");
                                                      v160 = (os_log_s *)objc_claimAutoreleasedReturnValue(v159);
                                                      if (os_log_type_enabled(v160, OS_LOG_TYPE_DEFAULT))
                                                      {
                                                        *(_WORD *)buf = 0;
                                                        _os_log_impl( (void *)&_mh_execute_header,  v160,  OS_LOG_TYPE_DEFAULT,  "Adding message_identifier column to incoming_message",  buf,  2u);
                                                      }

                                                      if (os_log_shim_legacy_logging_enabled(v161)
                                                        && _IDSShouldLog(0LL, @"IDSDMessageStore"))
                                                      {
                                                        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDMessageStore",  @"Adding message_identifier column to incoming_message");
                                                      }

                                                      v162 = sub_1003B3CB0( a2,  @"message_identifier",  @"TEXT",  @"incoming_message");
                                                      if ((v162 & sub_1003B3B08( a2,  @"Unable to add incoming_message message_identifier index",  @"Successfully added incoming_message message_identifier index",  @"CREATE INDEX incoming_message_message_identifier_idx ON incoming_message(message_identifier);")) != 1) {
                                                        goto LABEL_425;
                                                      }
                                                      CSDBSqliteDatabaseSetVersion(a1, 10010LL);
                                                      goto LABEL_294;
                                                    }

LABEL_296:
  v686 = IDSSessionInvitationRetryCountKey;
  v687 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", IDSSessionInvitationRetryCountKey, v970, v1013, v1056));
  v689 = objc_opt_class(v31[501], v688);
  v690 = objc_opt_isKindOfClass(v687, v689);

  v691 = (NSNumber *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v686]);
  v692 = v691;
  if ((v690 & 1) != 0)
  {
    invitationRetryint Count = self->_invitationRetryCount;
    self->_invitationRetryint Count = v691;
LABEL_298:

    goto LABEL_305;
  }

  if (v692)
  {
    v694 = OSLogHandleForIDSCategory("QRAllocator");
    v695 = (os_log_s *)objc_claimAutoreleasedReturnValue(v694);
    if (os_log_type_enabled(v695, OS_LOG_TYPE_DEBUG))
    {
      v696 = (id)objc_claimAutoreleasedReturnValue([v4 objectForKey:v686]);
      v698 = (id)objc_opt_class(v31[501], v697);
      v699 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v686]);
      v701 = (id)objc_opt_class(v699, v700);
      *(_DWORD *)buf = 138412802;
      v1070 = v696;
      v1071 = 2112;
      v1072 = v698;
      v1073 = 2112;
      v1074 = v701;
      _os_log_impl( (void *)&_mh_execute_header,  v695,  OS_LOG_TYPE_DEBUG,  "Unexpected datatype. %@ should be of type %@, not %@",  buf,  0x20u);
    }

    if (os_log_shim_legacy_logging_enabled(v702))
    {
      if (_IDSShouldLog(1LL, @"QRAllocator"))
      {
        invitationRetryint Count = (NSNumber *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v686]);
        v704 = objc_opt_class(v31[501], v703);
        v705 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v686]);
        v1014 = v704;
        v1057 = objc_opt_class(v705, v706);
        v971 = invitationRetryCount;
        _IDSLogV( 1LL,  @"IDSFoundation",  @"QRAllocator",  @"Unexpected datatype. %@ should be of type %@, not %@");

        goto LABEL_298;
      }
    }
  }

LABEL_305:
  v707 = kIDSQRAllocateKey_GroupMemberCount;
  v708 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", kIDSQRAllocateKey_GroupMemberCount, v971, v1014, v1057));
  v710 = objc_opt_class(v31[501], v709);
  v711 = objc_opt_isKindOfClass(v708, v710);

  v712 = (NSNumber *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v707]);
  v713 = v712;
  if ((v711 & 1) != 0)
  {
    groupMemberint Count = self->_groupMemberCount;
    self->_groupMemberint Count = v712;
LABEL_307:

    goto LABEL_314;
  }

  if (v713)
  {
    v715 = OSLogHandleForIDSCategory("QRAllocator");
    v716 = (os_log_s *)objc_claimAutoreleasedReturnValue(v715);
    if (os_log_type_enabled(v716, OS_LOG_TYPE_DEBUG))
    {
      v717 = (id)objc_claimAutoreleasedReturnValue([v4 objectForKey:v707]);
      v719 = (id)objc_opt_class(v31[501], v718);
      v720 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v707]);
      v722 = (id)objc_opt_class(v720, v721);
      *(_DWORD *)buf = 138412802;
      v1070 = v717;
      v1071 = 2112;
      v1072 = v719;
      v1073 = 2112;
      v1074 = v722;
      _os_log_impl( (void *)&_mh_execute_header,  v716,  OS_LOG_TYPE_DEBUG,  "Unexpected datatype. %@ should be of type %@, not %@",  buf,  0x20u);
    }

    if (os_log_shim_legacy_logging_enabled(v723))
    {
      if (_IDSShouldLog(1LL, @"QRAllocator"))
      {
        groupMemberint Count = (NSNumber *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v707]);
        v725 = objc_opt_class(v31[501], v724);
        v726 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v707]);
        v1015 = v725;
        v1058 = objc_opt_class(v726, v727);
        v972 = groupMemberCount;
        _IDSLogV( 1LL,  @"IDSFoundation",  @"QRAllocator",  @"Unexpected datatype. %@ should be of type %@, not %@");

        goto LABEL_307;
      }
    }
  }

LABEL_314:
  v728 = kIDSQRAllocateKey_SelfAllocationCount;
  v729 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", kIDSQRAllocateKey_SelfAllocationCount, v972, v1015, v1058));
  v731 = objc_opt_class(v31[501], v730);
  v732 = objc_opt_isKindOfClass(v729, v731);

  v733 = (NSNumber *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v728]);
  v734 = v733;
  if ((v732 & 1) != 0)
  {
    selfAllocationint Count = self->_selfAllocationCount;
    self->_selfAllocationint Count = v733;
LABEL_316:

    goto LABEL_323;
  }

  if (v734)
  {
    v736 = OSLogHandleForIDSCategory("QRAllocator");
    v737 = (os_log_s *)objc_claimAutoreleasedReturnValue(v736);
    if (os_log_type_enabled(v737, OS_LOG_TYPE_DEBUG))
    {
      v738 = (id)objc_claimAutoreleasedReturnValue([v4 objectForKey:v728]);
      v740 = (id)objc_opt_class(v31[501], v739);
      v741 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v728]);
      v743 = (id)objc_opt_class(v741, v742);
      *(_DWORD *)buf = 138412802;
      v1070 = v738;
      v1071 = 2112;
      v1072 = v740;
      v1073 = 2112;
      v1074 = v743;
      _os_log_impl( (void *)&_mh_execute_header,  v737,  OS_LOG_TYPE_DEBUG,  "Unexpected datatype. %@ should be of type %@, not %@",  buf,  0x20u);
    }

    if (os_log_shim_legacy_logging_enabled(v744))
    {
      if (_IDSShouldLog(1LL, @"QRAllocator"))
      {
        selfAllocationint Count = (NSNumber *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v728]);
        v746 = objc_opt_class(v31[501], v745);
        v747 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v728]);
        v1016 = v746;
        v1059 = objc_opt_class(v747, v748);
        v973 = selfAllocationCount;
        _IDSLogV( 1LL,  @"IDSFoundation",  @"QRAllocator",  @"Unexpected datatype. %@ should be of type %@, not %@");

        goto LABEL_316;
      }
    }
  }

LABEL_323:
  v749 = kIDSQRAllocateKey_PreferredRemoteInterface;
  v750 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", kIDSQRAllocateKey_PreferredRemoteInterface, v973, v1016, v1059));
  v752 = objc_opt_class(v31[501], v751);
  v753 = objc_opt_isKindOfClass(v750, v752);

  v754 = (NSNumber *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v749]);
  v755 = v754;
  if ((v753 & 1) != 0)
  {
    infoAttribute = self->_infoAttribute;
    self->_infoAttribute = v754;
LABEL_325:

    goto LABEL_332;
  }

  if (v755)
  {
    v757 = OSLogHandleForIDSCategory("QRAllocator");
    v758 = (os_log_s *)objc_claimAutoreleasedReturnValue(v757);
    if (os_log_type_enabled(v758, OS_LOG_TYPE_DEBUG))
    {
      v759 = (id)objc_claimAutoreleasedReturnValue([v4 objectForKey:v749]);
      v761 = (id)objc_opt_class(v31[501], v760);
      v762 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v749]);
      v764 = (id)objc_opt_class(v762, v763);
      *(_DWORD *)buf = 138412802;
      v1070 = v759;
      v1071 = 2112;
      v1072 = v761;
      v1073 = 2112;
      v1074 = v764;
      _os_log_impl( (void *)&_mh_execute_header,  v758,  OS_LOG_TYPE_DEBUG,  "Unexpected datatype. %@ should be of type %@, not %@",  buf,  0x20u);
    }

    if (os_log_shim_legacy_logging_enabled(v765))
    {
      if (_IDSShouldLog(1LL, @"QRAllocator"))
      {
        infoAttribute = (NSNumber *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v749]);
        v767 = objc_opt_class(v31[501], v766);
        v768 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v749]);
        v1017 = v767;
        v1060 = objc_opt_class(v768, v769);
        v974 = infoAttribute;
        _IDSLogV( 1LL,  @"IDSFoundation",  @"QRAllocator",  @"Unexpected datatype. %@ should be of type %@, not %@");

        goto LABEL_325;
      }
    }
  }

LABEL_332:
  v770 = kIDSQRAllocateKey_PSKTransportParameters;
  v771 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", kIDSQRAllocateKey_PSKTransportParameters, v974, v1017, v1060));
  v773 = objc_opt_class(&OBJC_CLASS___NSString, v772);
  v774 = objc_opt_isKindOfClass(v771, v773);

  v775 = (NSString *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v770]);
  v776 = v775;
  if ((v774 & 1) != 0)
  {
    pskTransportParameters = self->_pskTransportParameters;
    self->_pskTransportParameters = v775;
LABEL_334:

    goto LABEL_341;
  }

  if (v776)
  {
    v778 = OSLogHandleForIDSCategory("QRAllocator");
    v779 = (os_log_s *)objc_claimAutoreleasedReturnValue(v778);
    if (os_log_type_enabled(v779, OS_LOG_TYPE_DEBUG))
    {
      v780 = (id)objc_claimAutoreleasedReturnValue([v4 objectForKey:v770]);
      v782 = (id)objc_opt_class(&OBJC_CLASS___NSString, v781);
      v783 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v770]);
      v785 = (id)objc_opt_class(v783, v784);
      *(_DWORD *)buf = 138412802;
      v1070 = v780;
      v1071 = 2112;
      v1072 = v782;
      v1073 = 2112;
      v1074 = v785;
      _os_log_impl( (void *)&_mh_execute_header,  v779,  OS_LOG_TYPE_DEBUG,  "Unexpected datatype. %@ should be of type %@, not %@",  buf,  0x20u);
    }

    if (os_log_shim_legacy_logging_enabled(v786))
    {
      if (_IDSShouldLog(1LL, @"QRAllocator"))
      {
        pskTransportParameters = (NSString *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v770]);
        v788 = objc_opt_class(&OBJC_CLASS___NSString, v787);
        v789 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v770]);
        v1018 = v788;
        v1061 = objc_opt_class(v789, v790);
        v975 = pskTransportParameters;
        _IDSLogV( 1LL,  @"IDSFoundation",  @"QRAllocator",  @"Unexpected datatype. %@ should be of type %@, not %@");

        goto LABEL_334;
      }
    }
  }

LABEL_341:
  v791 = kIDSQRAllocateKey_PSKH3Settings;
  v792 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", kIDSQRAllocateKey_PSKH3Settings, v975, v1018, v1061));
  v794 = objc_opt_class(&OBJC_CLASS___NSString, v793);
  v795 = objc_opt_isKindOfClass(v792, v794);

  v796 = (NSString *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v791]);
  v797 = v796;
  if ((v795 & 1) != 0)
  {
    pskH3Settings = self->_pskH3Settings;
    self->_pskH3Settings = v796;
LABEL_343:

    goto LABEL_350;
  }

  if (v797)
  {
    v799 = OSLogHandleForIDSCategory("QRAllocator");
    v800 = (os_log_s *)objc_claimAutoreleasedReturnValue(v799);
    if (os_log_type_enabled(v800, OS_LOG_TYPE_DEBUG))
    {
      v801 = (id)objc_claimAutoreleasedReturnValue([v4 objectForKey:v791]);
      v803 = (id)objc_opt_class(&OBJC_CLASS___NSString, v802);
      v804 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v791]);
      v806 = (id)objc_opt_class(v804, v805);
      *(_DWORD *)buf = 138412802;
      v1070 = v801;
      v1071 = 2112;
      v1072 = v803;
      v1073 = 2112;
      v1074 = v806;
      _os_log_impl( (void *)&_mh_execute_header,  v800,  OS_LOG_TYPE_DEBUG,  "Unexpected datatype. %@ should be of type %@, not %@",  buf,  0x20u);
    }

    if (os_log_shim_legacy_logging_enabled(v807))
    {
      if (_IDSShouldLog(1LL, @"QRAllocator"))
      {
        pskH3Settings = (NSString *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v791]);
        v809 = objc_opt_class(&OBJC_CLASS___NSString, v808);
        v810 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v791]);
        v1019 = v809;
        v1062 = objc_opt_class(v810, v811);
        v976 = pskH3Settings;
        _IDSLogV( 1LL,  @"IDSFoundation",  @"QRAllocator",  @"Unexpected datatype. %@ should be of type %@, not %@");

        goto LABEL_343;
      }
    }
  }

LABEL_350:
  v812 = kIDSQRAllocateKey_ErrorCode;
  v813 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", kIDSQRAllocateKey_ErrorCode, v976, v1019, v1062));
  v815 = objc_opt_class(v31[501], v814);
  v816 = objc_opt_isKindOfClass(v813, v815);

  v817 = (NSNumber *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v812]);
  v818 = v817;
  if ((v816 & 1) != 0)
  {
    errorCode = self->_errorCode;
    self->_errorCode = v817;
LABEL_352:

    goto LABEL_359;
  }

  if (v818)
  {
    v820 = OSLogHandleForIDSCategory("QRAllocator");
    v821 = (os_log_s *)objc_claimAutoreleasedReturnValue(v820);
    if (os_log_type_enabled(v821, OS_LOG_TYPE_DEBUG))
    {
      v822 = (id)objc_claimAutoreleasedReturnValue([v4 objectForKey:v812]);
      v824 = (id)objc_opt_class(v31[501], v823);
      v825 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v812]);
      v827 = (id)objc_opt_class(v825, v826);
      *(_DWORD *)buf = 138412802;
      v1070 = v822;
      v1071 = 2112;
      v1072 = v824;
      v1073 = 2112;
      v1074 = v827;
      _os_log_impl( (void *)&_mh_execute_header,  v821,  OS_LOG_TYPE_DEBUG,  "Unexpected datatype. %@ should be of type %@, not %@",  buf,  0x20u);
    }

    if (os_log_shim_legacy_logging_enabled(v828))
    {
      if (_IDSShouldLog(1LL, @"QRAllocator"))
      {
        errorCode = (NSNumber *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v812]);
        v830 = objc_opt_class(v31[501], v829);
        v831 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v812]);
        v1020 = v830;
        v1063 = objc_opt_class(v831, v832);
        v977 = errorCode;
        _IDSLogV( 1LL,  @"IDSFoundation",  @"QRAllocator",  @"Unexpected datatype. %@ should be of type %@, not %@");

        goto LABEL_352;
      }
    }
  }

LABEL_359:
  v833 = kIDSQRAllocateKey_ErrorMessage;
  v834 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", kIDSQRAllocateKey_ErrorMessage, v977, v1020, v1063));
  v836 = objc_opt_class(&OBJC_CLASS___NSString, v835);
  v837 = objc_opt_isKindOfClass(v834, v836);

  v838 = (NSString *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v833]);
  v839 = v838;
  if ((v837 & 1) != 0)
  {
    errorMessage = self->_errorMessage;
    self->_errorMessage = v838;
LABEL_361:

    goto LABEL_368;
  }

  if (v839)
  {
    v841 = OSLogHandleForIDSCategory("QRAllocator");
    v842 = (os_log_s *)objc_claimAutoreleasedReturnValue(v841);
    if (os_log_type_enabled(v842, OS_LOG_TYPE_DEBUG))
    {
      v843 = (id)objc_claimAutoreleasedReturnValue([v4 objectForKey:v833]);
      v845 = (id)objc_opt_class(&OBJC_CLASS___NSString, v844);
      v846 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v833]);
      v848 = (id)objc_opt_class(v846, v847);
      *(_DWORD *)buf = 138412802;
      v1070 = v843;
      v1071 = 2112;
      v1072 = v845;
      v1073 = 2112;
      v1074 = v848;
      _os_log_impl( (void *)&_mh_execute_header,  v842,  OS_LOG_TYPE_DEBUG,  "Unexpected datatype. %@ should be of type %@, not %@",  buf,  0x20u);
    }

    if (os_log_shim_legacy_logging_enabled(v849))
    {
      if (_IDSShouldLog(1LL, @"QRAllocator"))
      {
        errorMessage = (NSString *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v833]);
        v851 = objc_opt_class(&OBJC_CLASS___NSString, v850);
        v852 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v833]);
        v1021 = v851;
        v1064 = objc_opt_class(v852, v853);
        v978 = errorMessage;
        _IDSLogV( 1LL,  @"IDSFoundation",  @"QRAllocator",  @"Unexpected datatype. %@ should be of type %@, not %@");

        goto LABEL_361;
      }
    }
  }

LABEL_368:
  v854 = kIDSQRAllocateKey_LinkSuggestion;
  v855 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", kIDSQRAllocateKey_LinkSuggestion, v978, v1021, v1064));
  v857 = objc_opt_class(v31[501], v856);
  v858 = objc_opt_isKindOfClass(v855, v857);

  v859 = (NSNumber *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v854]);
  v860 = v859;
  if ((v858 & 1) != 0)
  {
    linkSuggestion = self->_linkSuggestion;
    self->_linkSuggestion = v859;
LABEL_370:

    goto LABEL_377;
  }

  if (v860)
  {
    v862 = OSLogHandleForIDSCategory("QRAllocator");
    v863 = (os_log_s *)objc_claimAutoreleasedReturnValue(v862);
    if (os_log_type_enabled(v863, OS_LOG_TYPE_DEBUG))
    {
      v864 = (id)objc_claimAutoreleasedReturnValue([v4 objectForKey:v854]);
      v866 = (id)objc_opt_class(v31[501], v865);
      v867 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v854]);
      v869 = (id)objc_opt_class(v867, v868);
      *(_DWORD *)buf = 138412802;
      v1070 = v864;
      v1071 = 2112;
      v1072 = v866;
      v1073 = 2112;
      v1074 = v869;
      _os_log_impl( (void *)&_mh_execute_header,  v863,  OS_LOG_TYPE_DEBUG,  "Unexpected datatype. %@ should be of type %@, not %@",  buf,  0x20u);
    }

    if (os_log_shim_legacy_logging_enabled(v870))
    {
      if (_IDSShouldLog(1LL, @"QRAllocator"))
      {
        linkSuggestion = (NSNumber *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v854]);
        v872 = objc_opt_class(v31[501], v871);
        v873 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v854]);
        v1022 = v872;
        v1065 = objc_opt_class(v873, v874);
        v979 = linkSuggestion;
        _IDSLogV( 1LL,  @"IDSFoundation",  @"QRAllocator",  @"Unexpected datatype. %@ should be of type %@, not %@");

        goto LABEL_370;
      }
    }
  }

                                                                      CSDBSqliteDatabaseSetVersion(a1, 10021LL);
                                                                      v204 = OSLogHandleForIDSCategory("IDSDMessageStore");
                                                                      v205 = (os_log_s *)objc_claimAutoreleasedReturnValue(v204);
                                                                      if (os_log_type_enabled( v205,  OS_LOG_TYPE_DEFAULT))
                                                                      {
                                                                        *(_WORD *)buf = 0;
                                                                        _os_log_impl( (void *)&_mh_execute_header,  v205,  OS_LOG_TYPE_DEFAULT,  "Add kt_uri_verification_map column to outgoing_message",  buf,  2u);
                                                                      }

                                                                      if (os_log_shim_legacy_logging_enabled(v206)
                                                                        && _IDSShouldLog( 0LL,  @"IDSDMessageStore"))
                                                                      {
                                                                        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDMessageStore",  @"Add kt_uri_verification_map column to outgoing_message");
                                                                      }

                                                                      v207 = sub_1003B3CB0( a2,  @"kt_uri_verification_map",  @"BLOB",  @"outgoing_message");
                                                                      v208 = OSLogHandleForIDSCategory("IDSDMessageStore");
                                                                      id v209 = (os_log_s *)objc_claimAutoreleasedReturnValue(v208);
                                                                      if (os_log_type_enabled( v209,  OS_LOG_TYPE_DEFAULT))
                                                                      {
                                                                        *(_WORD *)buf = 0;
                                                                        _os_log_impl( (void *)&_mh_execute_header,  v209,  OS_LOG_TYPE_DEFAULT,  "Add delivery_minimum_time_delay column to outgoing_message",  buf,  2u);
                                                                      }

                                                                      if (os_log_shim_legacy_logging_enabled(v210)
                                                                        && _IDSShouldLog( 0LL,  @"IDSDMessageStore"))
                                                                      {
                                                                        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDMessageStore",  @"Add delivery_minimum_time_delay column to outgoing_message");
                                                                      }

                                                                      uint64_t v211 = sub_1003B3CB0( a2,  @"delivery_minimum_time_delay",  @"INTEGER DEFAULT 0",  @"outgoing_message");
                                                                      id v212 = OSLogHandleForIDSCategory("IDSDMessageStore");
                                                                      uint64_t v213 = (os_log_s *)objc_claimAutoreleasedReturnValue(v212);
                                                                      if (os_log_type_enabled( v213,  OS_LOG_TYPE_DEFAULT))
                                                                      {
                                                                        *(_WORD *)buf = 0;
                                                                        _os_log_impl( (void *)&_mh_execute_header,  v213,  OS_LOG_TYPE_DEFAULT,  "Add include_self column to outgoing_message",  buf,  2u);
                                                                      }

                                                                      if (os_log_shim_legacy_logging_enabled(v214)
                                                                        && _IDSShouldLog( 0LL,  @"IDSDMessageStore"))
                                                                      {
                                                                        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDMessageStore",  @"Add include_self column to outgoing_message");
                                                                      }

                                                                      CSDBSqliteDatabaseSetVersion(a1, 10022LL);
                                                                      goto LABEL_385;
                                                                    }

LABEL_377:
  v875 = kIDSQRAllocateKey_LinkScore;
  v876 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", kIDSQRAllocateKey_LinkScore, v979, v1022, v1065));
  v878 = objc_opt_class(v31[501], v877);
  v879 = objc_opt_isKindOfClass(v876, v878);

  v880 = (NSNumber *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v875]);
  v881 = v880;
  if ((v879 & 1) != 0)
  {
    linkScore = self->_linkScore;
    self->_linkScore = v880;
LABEL_379:

    goto LABEL_386;
  }

  if (v881)
  {
    v883 = OSLogHandleForIDSCategory("QRAllocator");
    v884 = (os_log_s *)objc_claimAutoreleasedReturnValue(v883);
    if (os_log_type_enabled(v884, OS_LOG_TYPE_DEBUG))
    {
      v885 = (id)objc_claimAutoreleasedReturnValue([v4 objectForKey:v875]);
      v887 = (id)objc_opt_class(v31[501], v886);
      v888 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v875]);
      v890 = (id)objc_opt_class(v888, v889);
      *(_DWORD *)buf = 138412802;
      v1070 = v885;
      v1071 = 2112;
      v1072 = v887;
      v1073 = 2112;
      v1074 = v890;
      _os_log_impl( (void *)&_mh_execute_header,  v884,  OS_LOG_TYPE_DEBUG,  "Unexpected datatype. %@ should be of type %@, not %@",  buf,  0x20u);
    }

    if (os_log_shim_legacy_logging_enabled(v891))
    {
      if (_IDSShouldLog(1LL, @"QRAllocator"))
      {
        linkScore = (NSNumber *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v875]);
        v893 = objc_opt_class(v31[501], v892);
        v894 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v875]);
        v1023 = v893;
        v1066 = objc_opt_class(v894, v895);
        v980 = linkScore;
        _IDSLogV( 1LL,  @"IDSFoundation",  @"QRAllocator",  @"Unexpected datatype. %@ should be of type %@, not %@");

        goto LABEL_379;
      }
    }
  }

LABEL_386:
  v896 = kIDSQRAllocateKey_QRExperiments;
  v897 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", kIDSQRAllocateKey_QRExperiments, v980, v1023, v1066));
  v899 = objc_opt_class(&OBJC_CLASS___NSDictionary, v898);
  v900 = objc_opt_isKindOfClass(v897, v899);

  v901 = (NSDictionary *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v896]);
  v902 = v901;
  if ((v900 & 1) != 0)
  {
    qrExperiments = self->_qrExperiments;
    self->_qrExperiments = v901;
  }

  else
  {

    if (!v902) {
      goto LABEL_395;
    }
    v904 = OSLogHandleForIDSCategory("QRAllocator");
    v905 = (os_log_s *)objc_claimAutoreleasedReturnValue(v904);
    if (os_log_type_enabled(v905, OS_LOG_TYPE_DEBUG))
    {
      v906 = (id)objc_claimAutoreleasedReturnValue([v4 objectForKey:v896]);
      v908 = (id)objc_opt_class(&OBJC_CLASS___NSDictionary, v907);
      v909 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v896]);
      v911 = (id)objc_opt_class(v909, v910);
      *(_DWORD *)buf = 138412802;
      v1070 = v906;
      v1071 = 2112;
      v1072 = v908;
      v1073 = 2112;
      v1074 = v911;
      _os_log_impl( (void *)&_mh_execute_header,  v905,  OS_LOG_TYPE_DEBUG,  "Unexpected datatype. %@ should be of type %@, not %@",  buf,  0x20u);
    }

    if (!os_log_shim_legacy_logging_enabled(v912)
      || !_IDSShouldLog(1LL, @"QRAllocator"))
    {
      goto LABEL_395;
    }

    qrExperiments = (NSDictionary *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v896]);
    v914 = objc_opt_class(&OBJC_CLASS___NSDictionary, v913);
    v915 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v896]);
    v1024 = v914;
    v1067 = objc_opt_class(v915, v916);
    v981 = qrExperiments;
    _IDSLogV( 1LL,  @"IDSFoundation",  @"QRAllocator",  @"Unexpected datatype. %@ should be of type %@, not %@");
  }

LABEL_395:
  v917 = kIDSQRAllocateKey_IsInternal;
  v918 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKey:", kIDSQRAllocateKey_IsInternal, v981, v1024, v1067));
  v920 = objc_opt_class(v31[501], v919);
  v921 = objc_opt_isKindOfClass(v918, v920);

  v922 = (NSNumber *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v917]);
  v923 = v922;
  if ((v921 & 1) != 0)
  {
    isInternal = self->_isInternal;
    self->_isInternal = v922;
LABEL_397:

    goto LABEL_404;
  }

  if (v923)
  {
    v925 = OSLogHandleForIDSCategory("QRAllocator");
    v926 = (os_log_s *)objc_claimAutoreleasedReturnValue(v925);
    if (os_log_type_enabled(v926, OS_LOG_TYPE_DEBUG))
    {
      v927 = (id)objc_claimAutoreleasedReturnValue([v4 objectForKey:v917]);
      v929 = (id)objc_opt_class(v31[501], v928);
      v930 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v917]);
      v932 = (id)objc_opt_class(v930, v931);
      *(_DWORD *)buf = 138412802;
      v1070 = v927;
      v1071 = 2112;
      v1072 = v929;
      v1073 = 2112;
      v1074 = v932;
      _os_log_impl( (void *)&_mh_execute_header,  v926,  OS_LOG_TYPE_DEBUG,  "Unexpected datatype. %@ should be of type %@, not %@",  buf,  0x20u);
    }

    if (os_log_shim_legacy_logging_enabled(v933))
    {
      if (_IDSShouldLog(1LL, @"QRAllocator"))
      {
        isInternal = (NSNumber *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v917]);
        objc_opt_class(v31[501], v934);
        v935 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v917]);
        objc_opt_class(v935, v936);
        _IDSLogV( 1LL,  @"IDSFoundation",  @"QRAllocator",  @"Unexpected datatype. %@ should be of type %@, not %@");

        goto LABEL_397;
      }
    }
  }

LABEL_404:
  v937 = self;
  return v937;
}

void sub_1002FF05C(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {

    objc_end_catch();
    JUMPOUT(0x1002FEF88LL);
  }

  _Unwind_Resume(a1);
}

void sub_100300AF4(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1003007C4LL);
  }

  _Unwind_Resume(a1);
}

void sub_100301AD8(void *a1, uint64_t a2, uint64_t a3)
{
  id v5 = a1;
  dispatch_time_t v6 = v5;
  if (v5 && a3)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    void v7[2] = sub_100301B68;
    v7[3] = &unk_1009008B8;
    id v8 = v5;
    IMLogRegisterStateToSysdiagnoseBlock(v7, a2, a3);
  }
}

id sub_100301B68(uint64_t a1)
{
  if (+[IDSUserManagement isThreadDataSeparated](&OBJC_CLASS___IDSUserManagement, "isThreadDataSeparated"))
  {
    id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMIDSLog daemon](&OBJC_CLASS___IMIDSLog, "daemon"));
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v5 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "IMLogRegisterStateToSysdiagnoseBlock invoked in a data separated context -- dropping",  v5,  2u);
    }

    return 0LL;
  }

  else
  {
    uint64_t v4 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
    return (id)objc_claimAutoreleasedReturnValue(v4);
  }

void sub_100301F70(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _metricContainerForMetricType:2555908]);
  if (v3)
  {
    id v2 = objc_alloc_init((Class)IMWeakLinkClass(@"AWDIDSLocalDeliveryMessageSent", @"WirelessDiagnostics"));
    [v2 setService:*(void *)(a1 + 40)];
    [v2 setIsToDefaultPairedDevice:*(unsigned __int8 *)(a1 + 72)];
    [v2 setMessageSize:*(void *)(a1 + 48)];
    [v2 setLinkType:*(void *)(a1 + 56)];
    [v2 setPriority:*(void *)(a1 + 64)];
    [*(id *)(a1 + 32) _submitAWDMetric:v2 withContainer:v3];
  }
}

void sub_1003020C8(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _metricContainerForMetricType:2588673]);
  if (v3)
  {
    id v2 = objc_alloc_init((Class)IMWeakLinkClass( @"AWDIDSClientProcessReceivedMessage",  @"WirelessDiagnostics"));
    [v2 setService:*(void *)(a1 + 40)];
    [v2 setPayloadSize:*(void *)(a1 + 48)];
    [v2 setDeltaTime:*(void *)(a1 + 56)];
    [v2 setPriority:*(void *)(a1 + 64)];
    [*(id *)(a1 + 32) _submitAWDMetric:v2 withContainer:v3];
  }
}

void sub_100302290(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _metricContainerForMetricType:2555909]);
  if (v3)
  {
    id v2 = objc_alloc_init((Class)IMWeakLinkClass( @"AWDIDSLocalDeliveryMessageDelivered",  @"WirelessDiagnostics"));
    [v2 setService:*(void *)(a1 + 40)];
    [v2 setIsToDefaultPairedDevice:*(unsigned __int8 *)(a1 + 88)];
    [v2 setMessageSize:*(void *)(a1 + 48)];
    [v2 setLinkType:*(void *)(a1 + 56)];
    [v2 setDeliveryError:*(void *)(a1 + 64)];
    [v2 setRTT:*(void *)(a1 + 72)];
    [v2 setPriority:*(void *)(a1 + 80)];
    [*(id *)(a1 + 32) _submitAWDMetric:v2 withContainer:v3];
  }
}

void sub_100302450(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _metricContainerForMetricType:2555910]);
  if (v3)
  {
    id v2 = objc_alloc_init((Class)IMWeakLinkClass( @"AWDIDSLocalDeliveryMessageReceived",  @"WirelessDiagnostics"));
    [v2 setService:*(void *)(a1 + 40)];
    [v2 setIsFromDefaultPairedDevice:*(unsigned __int8 *)(a1 + 72)];
    [v2 setMessageSize:*(void *)(a1 + 48)];
    [v2 setLinkType:*(void *)(a1 + 56)];
    [v2 setPriority:*(void *)(a1 + 64)];
    [*(id *)(a1 + 32) _submitAWDMetric:v2 withContainer:v3];
  }
}

void sub_1003025A8(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _metricContainerForMetricType:2555911]);
  if (v3)
  {
    id v2 = objc_alloc_init((Class)IMWeakLinkClass(@"AWDIDSLocalDeliverySocketOpened", @"WirelessDiagnostics"));
    [v2 setService:*(void *)(a1 + 40)];
    [v2 setIsToDefaultPairedDevice:*(unsigned __int8 *)(a1 + 64)];
    [v2 setOpenError:*(void *)(a1 + 48)];
    [v2 setSocketError:*(void *)(a1 + 56)];
    [*(id *)(a1 + 32) _submitAWDMetric:v2 withContainer:v3];
  }
}

void sub_100302788(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _metricContainerForMetricType:2555912]);
  if (v3)
  {
    id v2 = objc_alloc_init((Class)IMWeakLinkClass(@"AWDIDSLocalDeliverySocketClosed", @"WirelessDiagnostics"));
    [v2 setService:*(void *)(a1 + 40)];
    [v2 setIsToDefaultPairedDevice:*(unsigned __int8 *)(a1 + 96)];
    [v2 setCloseError:*(void *)(a1 + 48)];
    [v2 setSocketError:*(void *)(a1 + 56)];
    [v2 setBytesSent:*(void *)(a1 + 64)];
    [v2 setPacketsSent:*(void *)(a1 + 72)];
    [v2 setBytesReceived:*(void *)(a1 + 80)];
    [v2 setPacketsReceived:*(void *)(a1 + 88)];
    [*(id *)(a1 + 32) _submitAWDMetric:v2 withContainer:v3];
  }
}

void sub_100302904(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _metricContainerForMetricType:2588677]);
  if (v2)
  {
    id v4 = v2;
    id v3 = objc_alloc_init((Class)IMWeakLinkClass(@"AWDIDSWiFiSetupAttempt", @"WirelessDiagnostics"));
    [v3 setType:*(void *)(a1 + 48)];
    [v3 setDuration:*(void *)(a1 + 56)];
    [v3 setResult:*(void *)(a1 + 64)];
    if (*(void *)(a1 + 40)) {
      objc_msgSend(v3, "setClient:");
    }
    [*(id *)(a1 + 32) _submitAWDMetric:v3 withContainer:v4];

    id v2 = v4;
  }
}

void sub_100302A54(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _metricContainerForMetricType:2588678]);
  if (v3)
  {
    id v2 = objc_alloc_init((Class)IMWeakLinkClass(@"AWDIDSOTRSessionNegotiation", @"WirelessDiagnostics"));
    [v2 setService:*(void *)(a1 + 40)];
    [v2 setPriority:*(void *)(a1 + 48)];
    [v2 setDuration:*(void *)(a1 + 56)];
    [v2 setResult:*(unsigned int *)(a1 + 64)];
    [*(id *)(a1 + 32) _submitAWDMetric:v2 withContainer:v3];
  }
}

void sub_100302B60(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _metricContainerForMetricType:2588680]);
  if (v3)
  {
    id v2 = objc_alloc_init((Class)IMWeakLinkClass(@"AWDIDSWRMLinkRecommendation", @"WirelessDiagnostics"));
    [v2 setRecommendedLinkType:*(unsigned int *)(a1 + 40)];
    [v2 setPrimaryLinkType:*(unsigned int *)(a1 + 44)];
    [v2 setMagnetState:*(unsigned int *)(a1 + 48)];
    [v2 setInfraWiFiState:*(unsigned int *)(a1 + 52)];
    [*(id *)(a1 + 32) _submitAWDMetric:v2 withContainer:v3];
  }
}

void sub_100302CDC(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _metricContainerForMetricType:2555914]);
  if (v3)
  {
    id v2 = objc_alloc_init((Class)IMWeakLinkClass(@"AWDIDSQRAllocation", @"WirelessDiagnostics"));
    [v2 setDuration:*(void *)(a1 + 56)];
    [v2 setResult:*(unsigned int *)(a1 + 64)];
    [v2 setHasRecipientAccepted:*(unsigned int *)(a1 + 68)];
    [v2 setPayloadSize:*(unsigned int *)(a1 + 72)];
    [v2 setTopic:*(void *)(a1 + 40)];
    [v2 setService:*(void *)(a1 + 48)];
    [*(id *)(a1 + 32) _submitAWDMetric:v2 withContainer:v3];
  }
}

void sub_100302E30(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _metricContainerForMetricType:2588681]);
  if (v3)
  {
    id v2 = objc_alloc_init((Class)IMWeakLinkClass(@"AWDIDSWiProxDidConnectToPeer", @"WirelessDiagnostics"));
    [v2 setDuration:*(void *)(a1 + 40)];
    [v2 setResultCode:*(void *)(a1 + 48)];
    [*(id *)(a1 + 32) _submitAWDMetric:v2 withContainer:v3];
  }
}

void sub_100302F54(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _metricContainerForMetricType:2588682]);
  if (v3)
  {
    id v2 = objc_alloc_init((Class)IMWeakLinkClass( @"AWDIDSWiProxDidDisconnectFromPeer",  @"WirelessDiagnostics"));
    [v2 setDuration:*(void *)(a1 + 40)];
    [v2 setResultCode:*(void *)(a1 + 48)];
    [*(id *)(a1 + 32) _submitAWDMetric:v2 withContainer:v3];
  }
}

void sub_10030305C(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _metricContainerForMetricType:2588685]);
  if (v3)
  {
    id v2 = objc_alloc_init((Class)IMWeakLinkClass(@"AWDIDSWiProxDidSendData", @"WirelessDiagnostics"));
    [v2 setResultCode:*(void *)(a1 + 40)];
    [*(id *)(a1 + 32) _submitAWDMetric:v2 withContainer:v3];
  }
}

void sub_1003031AC(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _metricContainerForMetricType:2555933]);
  if (v2)
  {
    id v5 = v2;
    id v3 = objc_alloc_init((Class)IMWeakLinkClass(@"AWDIDSNoteMessageReceived", @"WirelessDiagnostics"));
    objc_msgSend( v3,  "setTimestamp:",  (unint64_t)(ceil( (double)(unint64_t)objc_msgSend( *(id *)(*(void *)(a1 + 32)
                                                             + OBJC_IVAR___IDSAWDLogging__AWDServerConnection),
                                                       "getAWDTimestamp")
                         / 15.0)
                       * 15.0));
    [v3 setFromStorage:*(unsigned __int8 *)(a1 + 72)];
    [v3 setServertimestamp:(unint64_t)(ceil(*(double *)(a1 + 56) / 15.0) * 15.0)];
    [v3 setLocaltimedelta:(unint64_t)(ceil(*(double *)(a1 + 64) / 15.0) * 15.0)];
    if (*(void *)(a1 + 40)) {
      objc_msgSend(v3, "setServiceIdentifier:");
    }
    id v4 = *(void **)(a1 + 48);
    if (v4) {
      objc_msgSend(v3, "setAccountType:", objc_msgSend(v4, "unsignedIntegerValue"));
    }
    [*(id *)(a1 + 32) _submitAWDMetric:v3 withContainer:v5];

    id v2 = v5;
  }
}

void sub_100303338(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _metricContainerForMetricType:2555930]);
  if (v3)
  {
    id v2 = objc_alloc_init((Class)IMWeakLinkClass(@"AWDIDSMagnetCorruptionDetailed", @"WirelessDiagnostics"));
    [v2 setCorrectFramesSinceLastCorruption:*(void *)(a1 + 40)];
    [v2 setCorrectRawBytesSinceLastCorruption:*(void *)(a1 + 48)];
    [v2 setDiscardedRawBytes:*(void *)(a1 + 56)];
    [v2 setRecoveryTimeInMs:*(void *)(a1 + 64)];
    [v2 setLinkType:*(void *)(a1 + 72)];
    [*(id *)(a1 + 32) _submitAWDMetric:v2 withContainer:v3];
  }
}

void sub_1003034A4(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _metricContainerForMetricType:2588688]);
  if (v3)
  {
    id v2 = objc_alloc_init((Class)IMWeakLinkClass( @"AWDIDSServerStorageStateMachineCompleted",  @"WirelessDiagnostics"));
    [v2 setServiceIdentifier:*(void *)(a1 + 40)];
    [v2 setLinkType:*(void *)(a1 + 48)];
    [v2 setWasPrimary:*(unsigned __int8 *)(a1 + 72)];
    [v2 setTimeTaken:(unint64_t)*(double *)(a1 + 56)];
    [v2 setTotalMessages:(uint64_t)((double)(*(void *)(a1 + 64) / 5) * 5.0)];
    [*(id *)(a1 + 32) _submitAWDMetric:v2 withContainer:v3];
  }
}

void sub_10030381C(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___IDSDSessionActiveParticipantsCache);
  id v2 = (void *)qword_1009C0AB8;
  qword_1009C0AB8 = (uint64_t)v1;
}

id sub_100303A50(id a1, id a2)
{
  id v2 = a2;
  uint64_t v4 = objc_opt_class(&OBJC_CLASS___NSNull, v3);
  if ((objc_opt_isKindOfClass(v2, v4) & 1) != 0) {
    id v5 = 0LL;
  }
  else {
    id v5 = v2;
  }

  return v5;
}

void sub_100303DD0(id a1, IDSLocalDeliveryMessage *a2, unint64_t a3, BOOL *a4)
{
}

BOOL sub_100303E60(uint64_t a1, void *a2)
{
  return [a2 dataProtectionClass] == *(_DWORD *)(a1 + 32);
}

BOOL sub_100303F04(uint64_t a1, void *a2)
{
  return [a2 messageType] == *(id *)(a1 + 32);
}

void sub_100304900()
{
}

void sub_100304928(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v10 = a2;
  if (([v10 deniedToSend] & 1) == 0)
  {
    uint64_t v7 = *(void **)(a1 + 32);
    if (!v7
      || (id v8 = (void *)objc_claimAutoreleasedReturnValue([v10 topic]),
          unsigned __int8 v9 = [v7 containsObject:v8],
          v8,
          (v9 & 1) == 0))
    {
      *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = a3;
      *a4 = 1;
    }
  }
}

id sub_100306264(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) networkCheckOverrideBehavior];
  qword_1009C0AC0 = (uint64_t)result;
  return result;
}

id sub_100306284(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void, BOOL))(*(void *)(a1 + 40) + 16LL))(*(void *)(a1 + 40), a2 != 0);
  return [*(id *)(a1 + 32) setAvailability:0];
}

void sub_1003064E4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (!v5 || v6)
  {
    uint64_t v12 = OSLogHandleForTransportCategory("IDSDSession");
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v16 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Failed creating local data, bailing...",  v16,  2u);
    }

    uint64_t v15 = os_log_shim_legacy_logging_enabled(v14);
    if ((_DWORD)v15)
    {
      if (_IDSShouldLogTransport(v15))
      {
        _IDSLogTransport(@"IDSDSession", @"IDS", @"Failed creating local data, bailing...");
      }
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue(+[IDSUTunController sharedInstance](&OBJC_CLASS___IDSUTunController, "sharedInstance"));
    unsigned __int8 v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uniqueID]);
    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) invitationManager]);
    __int16 v11 = (void *)objc_claimAutoreleasedReturnValue([v10 remoteBlob]);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    v17[2] = sub_1003066D4;
    void v17[3] = &unk_100900AF0;
    id v19 = *(id *)(a1 + 40);
    id v18 = v5;
    [v8 processRemoteConnectionDataForDevice:v9 remoteConnectionData:v11 completionHandler:v17];
  }
}

void sub_1003066D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = OSLogHandleForTransportCategory("IDSDSession");
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    id v9 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Finished connectivity check with error %@",  buf,  0xCu);
  }

  uint64_t v7 = os_log_shim_legacy_logging_enabled(v6);
  if ((_DWORD)v7)
  {
    if (_IDSShouldLogTransport(v7))
    {
      _IDSLogTransport(@"IDSDSession", @"IDS", @"Finished connectivity check with error %@");
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))(*(void *)(a1 + 40));
}

void sub_10030793C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) inviteTimer]);
  [v2 invalidate];

  [*(id *)(a1 + 32) setInviteTimer:0];
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSDSession](&OBJC_CLASS___IDSFoundationLog, "IDSDSession"));
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    [*(id *)(a1 + 32) inviteTimeout];
    int v14 = 134217984;
    uint64_t v15 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Setting invite timeout to %f seconds",  (uint8_t *)&v14,  0xCu);
  }

  id v5 = objc_alloc(&OBJC_CLASS___IMTimer);
  id v6 = [*(id *)(a1 + 32) inviteTimeout];
  double v8 = v7;
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v11 = im_primary_queue(v6, v10);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
  uint64_t v13 = -[IMTimer initWithTimeInterval:name:shouldWake:target:selector:userInfo:queue:]( v5,  "initWithTimeInterval:name:shouldWake:target:selector:userInfo:queue:",  @"SessionInviteTimeout",  1LL,  v9,  "_inviteTimedOut",  0LL,  v12,  v8);
  [*(id *)(a1 + 32) setInviteTimer:v13];
}

id sub_100307B08(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _inviteTimedOut];
}

void sub_100307C90(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) inviteTimer]);

  if (v2)
  {
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSDSession](&OBJC_CLASS___IDSFoundationLog, "IDSDSession"));
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Clearing invitation timeout timer", v5, 2u);
    }

    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) inviteTimer]);
    [v4 invalidate];

    [*(id *)(a1 + 32) setInviteTimer:0];
  }

void sub_100307DB4(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) connectionTimer]);

  if (v2)
  {
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSDSession](&OBJC_CLASS___IDSFoundationLog, "IDSDSession"));
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Clearing connection timeout timer", v5, 2u);
    }

    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) connectionTimer]);
    [v4 invalidate];

    [*(id *)(a1 + 32) setConnectionTimer:0];
  }

void sub_100307ED8(uint64_t a1)
{
  id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSDSession](&OBJC_CLASS___IDSFoundationLog, "IDSDSession"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    [*(id *)(a1 + 32) connectionTimeout];
    *(_DWORD *)buf = 134217984;
    uint64_t v23 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Setting connection timeout to %f seconds",  buf,  0xCu);
  }

  uint64_t v4 = OSLogHandleForTransportCategory("IDSDSession");
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    [*(id *)(a1 + 32) connectionTimeout];
    *(_DWORD *)buf = 134217984;
    uint64_t v23 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Setting connection timeout to %f seconds",  buf,  0xCu);
  }

  uint64_t v8 = os_log_shim_legacy_logging_enabled(v7);
  if ((_DWORD)v8)
  {
    if (_IDSShouldLogTransport(v8))
    {
      [*(id *)(a1 + 32) connectionTimeout];
      uint64_t v21 = v9;
      _IDSLogTransport(@"IDSDSession", @"IDS", @"Setting connection timeout to %f seconds");
      if (_IDSShouldLog(0LL, @"IDSDSession"))
      {
        objc_msgSend(*(id *)(a1 + 32), "connectionTimeout", v21);
        _IDSLogV(0LL, @"IDSFoundation", @"IDSDSession", @"Setting connection timeout to %f seconds");
      }
    }
  }

  uint64_t v10 = objc_alloc(&OBJC_CLASS___IMTimer);
  uint64_t v12 = *(void **)(a1 + 32);
  uint64_t v11 = (id *)(a1 + 32);
  id v13 = [v12 connectionTimeout];
  double v15 = v14;
  id v16 = *v11;
  uint64_t v18 = im_primary_queue(v13, v17);
  id v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
  double v20 = -[IMTimer initWithTimeInterval:name:shouldWake:target:selector:userInfo:queue:]( v10,  "initWithTimeInterval:name:shouldWake:target:selector:userInfo:queue:",  @"SessionConnectionTimeout",  1LL,  v16,  "_connectionTimedOut",  0LL,  v19,  v15);
  [*v11 setConnectionTimer:v20];
}

id sub_100308168(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _connectionTimedOut];
}

void sub_1003082B4(uint64_t a1)
{
  id v1 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) packetLossTimer]);

  if (v1)
  {
    id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSDSession](&OBJC_CLASS___IDSFoundationLog, "IDSDSession"));
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Clearing session packet loss timer", v3, 2u);
    }
  }

void sub_1003083B0(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) endSessionTimer]);

  if (v2)
  {
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSDSession](&OBJC_CLASS___IDSFoundationLog, "IDSDSession"));
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Clearing end session timeout timer", v5, 2u);
    }

    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) endSessionTimer]);
    [v4 invalidate];

    [*(id *)(a1 + 32) setEndSessionTimer:0];
  }

void sub_1003084D0(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) endSessionTimer]);
  [v2 invalidate];

  [*(id *)(a1 + 32) setEndSessionTimer:0];
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog IDSDSession](&OBJC_CLASS___IDSFoundationLog, "IDSDSession"));
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    [*(id *)(a1 + 32) endSessionTimeout];
    int v12 = 134217984;
    uint64_t v13 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Setting end session timeout to %f seconds",  (uint8_t *)&v12,  0xCu);
  }

  id v5 = objc_alloc(&OBJC_CLASS___IMTimer);
  uint64_t v6 = *(void *)(a1 + 32);
  double v7 = *(double *)(v6 + 120);
  uint64_t v9 = im_primary_queue(v5, v8);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  uint64_t v11 = -[IMTimer initWithTimeInterval:name:shouldWake:target:selector:userInfo:queue:]( v5,  "initWithTimeInterval:name:shouldWake:target:selector:userInfo:queue:",  @"EndSessionTimeout",  1LL,  v6,  "_endSessionTimedOut",  0LL,  v10,  v7);
  [*(id *)(a1 + 32) setEndSessionTimer:v11];
}

id sub_100308694(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _endSessionTimedOut];
}

BOOL sub_1003097B8(uint64_t a1, void *a2)
{
  return [a2 subsystem] != *(id *)(a1 + 32);
}

void sub_10030A4E8(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
  {
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
    if (os_log_type_enabled(v3, OS_LOG_TYPE_FAULT)) {
      sub_1006A81C4(a1, v3);
    }
    goto LABEL_8;
  }

  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) message]);
    int v8 = 138412290;
    uint64_t v9 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "  Successfully signed, sending (de)registration message: %@",  (uint8_t *)&v8,  0xCu);
  }

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sendBlock]);
  if (v6)
  {
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sendBlock]);
    double v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) message]);
    (*((void (**)(os_log_s *, void *))v3 + 2))(v3, v7);

LABEL_8:
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

id sub_10030A630(uint64_t a1)
{
  return [*(id *)(a1 + 32) setIsBuildingContext:0];
}

void sub_10030A8EC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  [*(id *)(a1 + 32) setValidationSession:v5];
  [*(id *)(a1 + 32) setValidationContextDisabled:1];
  [*(id *)(a1 + 32) setIsBuildingContext:0];
  if (v6)
  {
    double v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT)) {
      sub_1006A8248();
    }

    objc_msgSend(*(id *)(a1 + 40), "__failValidationQueueForSubsystemMechanism:", *(void *)(a1 + 48));
  }

  else
  {
    int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 138412290;
      id v10 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Successfully initialized validation session for request {validationSession: %@}",  (uint8_t *)&v9,  0xCu);
    }

    objc_msgSend(*(id *)(a1 + 40), "__flushValidationQueueForSubsystemMechanism:", *(void *)(a1 + 48));
  }
}

void sub_10030AC34(uint64_t a1, void *a2, void *a3, unint64_t a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v64 = a5;
  id v11 = v9;
  int v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)&uint8_t buf[4] = a4;
    LOWORD(v84) = 2112;
    *(void *)((char *)&v84 + 2) = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "  Received cert request response with result: %d   error: %@",  buf,  0x12u);
  }

  if (a4 < 2 || a4 == 200)
  {
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v11 responseCertificateData]);
    double v14 = v13;
    if (!v13)
    {
      uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
      if (os_log_type_enabled(v28, OS_LOG_TYPE_FAULT)) {
        sub_1006A830C(v28);
      }

      [*(id *)(a1 + 32) setIsBuildingContext:0];
      v80[0] = _NSConcreteStackBlock;
      v80[1] = 3221225472LL;
      v80[2] = sub_10030B3DC;
      v80[3] = &unk_1008F68C8;
      uint64_t v29 = *(void *)(a1 + 48);
      void v80[4] = *(void *)(a1 + 40);
      v80[5] = v29;
      im_dispatch_after_primary_queue(v80, 30.0);
      goto LABEL_46;
    }

    uint64_t v79 = 0LL;
    unsigned int v78 = 0;
    *(void *)buf = 0LL;
    *(void *)&__int128 v84 = buf;
    *((void *)&v84 + 1) = 0x2020000000LL;
    uint64_t v85 = 0LL;
    v76[0] = 0LL;
    v76[1] = v76;
    v76[2] = 0x2020000000LL;
    char v77 = 0;
    if ([v13 length])
    {
      if ([v14 length])
      {
        double v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)uint64_t v81 = 138412290;
          uint64_t v82 = v14;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Calling NACInit with: %@", v81, 0xCu);
        }

        id v16 = v14;
        sub_100514664((uint64_t)[v16 bytes], (int)objc_msgSend(v16, "length"));
        uint64_t v18 = v17;
        if ((_DWORD)v17)
        {
          uint64_t v19 = v84;
          uint64_t v20 = *(void *)(v84 + 24);
          if (v20)
          {
            sub_100515EC8(v20);
            uint64_t v19 = v84;
          }

          *(void *)(v19 + 24) = 0LL;
          uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
          if (os_log_type_enabled(v21, OS_LOG_TYPE_FAULT)) {
            sub_1006A845C(v18, v21, v22, v23, v24, v25, v26, v27);
          }

          [*(id *)(a1 + 32) setIsBuildingContext:0];
          objc_msgSend(*(id *)(a1 + 40), "__failValidationQueueForSubsystemMechanism:", *(void *)(a1 + 48));
          if (!v79) {
            goto LABEL_45;
          }
          sub_100515D7C(v79);
        }

        else
        {
          v69[0] = _NSConcreteStackBlock;
          v69[1] = 3221225472LL;
          v69[2] = sub_10030B3E8;
          v69[3] = &unk_100900B88;
          id v70 = v64;
          unsigned __int8 v73 = buf;
          unsigned __int8 v74 = v76;
          id v44 = *(id *)(a1 + 32);
          uint64_t v45 = *(void *)(a1 + 40);
          uint64_t v46 = *(void *)(a1 + 48);
          id v71 = v44;
          uint64_t v72 = v45;
          uint64_t v75 = v46;
          id v63 = objc_retainBlock(v69);
          unsigned __int8 v47 = objc_alloc_init(&OBJC_CLASS___IDSInitializeValidationMessage);
          -[IDSInitializeValidationMessage setCompletionBlock:](v47, "setCompletionBlock:", v63);
          id v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
          if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)uint64_t v81 = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_DEFAULT,  "Sending initialize validation request",  v81,  2u);
          }

          unsigned int v49 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
          if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
          {
            id v50 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) pushHandler]);
            id v51 = (void *)objc_claimAutoreleasedReturnValue([v50 pushToken]);
            *(_DWORD *)uint64_t v81 = 138412290;
            uint64_t v82 = v51;
            _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_DEFAULT,  "Push handler returned push token: %@",  v81,  0xCu);
          }

          -[IDSInitializeValidationMessage setTimeout:](v47, "setTimeout:", 36000.0);
          unsigned __int8 v52 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) pushHandler]);
          id v53 = (void *)objc_claimAutoreleasedReturnValue([v52 pushToken]);
          -[IDSInitializeValidationMessage setPushToken:](v47, "setPushToken:", v53);

          IDSAssignPushIdentityToMessage(v47);
          unsigned __int8 v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", v79, v78));
          -[IDSInitializeValidationMessage setSessionInfoRequest:](v47, "setSessionInfoRequest:", v54);
          if (+[IDSValidationSession isSigningSupported](&OBJC_CLASS___IDSValidationSession, "isSigningSupported"))
          {
            uint64_t v55 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
            if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)uint64_t v81 = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_DEFAULT,  "Initialized validation session",  v81,  2u);
            }

            uint64_t v58 = im_primary_queue(v56, v57);
            unsigned __int8 v59 = (void *)objc_claimAutoreleasedReturnValue(v58);
            v65[0] = _NSConcreteStackBlock;
            v65[1] = 3221225472LL;
            v65[2] = sub_10030B894;
            v65[3] = &unk_100900BB0;
            id v66 = *(id *)(a1 + 32);
            __int128 v60 = v47;
            uint64_t v61 = *(void *)(a1 + 40);
            id v67 = v60;
            uint64_t v68 = v61;
            +[IDSValidationSession validationSessionOnQueue:mechanism:withCompletion:]( &OBJC_CLASS___IDSValidationSession,  "validationSessionOnQueue:mechanism:withCompletion:",  v59,  0LL,  v65);

            unsigned __int8 v62 = (void (**)(void, void))v66;
          }

          else
          {
            unsigned __int8 v62 = (void (**)(void, void))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) validationMessageSendBlock]);
            ((void (**)(void, IDSInitializeValidationMessage *))v62)[2](v62, v47);
          }
        }
      }

      else
      {
        uint64_t v41 = v84;
        uint64_t v42 = *(void *)(v84 + 24);
        if (v42)
        {
          sub_100515EC8(v42);
          uint64_t v41 = v84;
        }

        *(void *)(v41 + 24) = 0LL;
        unsigned __int8 v43 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
        if (os_log_type_enabled(v43, OS_LOG_TYPE_FAULT)) {
          sub_1006A83F8();
        }

        [*(id *)(a1 + 32) setIsBuildingContext:0];
        objc_msgSend(*(id *)(a1 + 40), "__failValidationQueueForSubsystemMechanism:", *(void *)(a1 + 48));
      }
    }

    else
    {
      __int128 v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
      if (os_log_type_enabled(v37, OS_LOG_TYPE_FAULT)) {
        sub_1006A8394();
      }

      [*(id *)(a1 + 32) setValidationContextDisabled:1];
      [*(id *)(a1 + 32) setValidationContext:0];
      uint64_t v38 = objc_alloc_init(&OBJC_CLASS___NSDate);
      [*(id *)(a1 + 32) setValidateContextDate:v38];

      [*(id *)(a1 + 32) setValidateContextTTL:&off_100947998];
      unsigned __int8 v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
      if (os_log_type_enabled(v39, OS_LOG_TYPE_FAULT))
      {
        unsigned __int8 v40 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) validateContextTTL]);
        sub_1006A8348(v40, (uint64_t)v81, v39);
      }

      [*(id *)(a1 + 32) setIsBuildingContext:0];
      objc_msgSend(*(id *)(a1 + 40), "__flushValidationQueueForSubsystemMechanism:", *(void *)(a1 + 48));
    }

    if (v79) {
      sub_100515D7C(v79);
    }
LABEL_45:
    _Block_object_dispose(v76, 8);
    _Block_object_dispose(buf, 8);
LABEL_46:

    goto LABEL_47;
  }

  id v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
  if (os_log_type_enabled(v30, OS_LOG_TYPE_FAULT)) {
    sub_1006A82A8(a4, v30, v31, v32, v33, v34, v35, v36);
  }

  [*(id *)(a1 + 32) setIsBuildingContext:0];
  objc_msgSend( *(id *)(a1 + 40),  "__failValidationQueueWithErrorResponseCode:forSubsystemMechanism:",  8001,  *(void *)(a1 + 48));
LABEL_47:
}

void sub_10030B380( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

id sub_10030B3DC(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _sendAbsintheValidationCertRequestIfNeededForSubsystem:*(void *)(a1 + 40)];
}

void sub_10030B3E8(uint64_t a1, void *a2, void *a3, unint64_t a4)
{
  id v7 = a2;
  int v8 = a3;
  id v9 = v7;
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 responseSessionInfo]);
  id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = *(const __CFString **)(a1 + 32);
    *(_DWORD *)buf = 138412546;
    id v53 = v12;
    __int16 v54 = 2112;
    uint64_t v55 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "  Received validation initialization request response: %@   error: %@",  buf,  0x16u);
  }

  if (a4 >= 2 && a4 != 200)
  {
    double v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
    if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT)) {
      sub_1006A84C0(a4, v14, v15, v16, v17, v18, v19, v20);
    }
    goto LABEL_33;
  }

  if (!*(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL)) {
    goto LABEL_40;
  }
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) || ![v10 length])
  {
    [*(id *)(a1 + 40) setValidationContextDisabled:1];
  }

  else
  {
    uint64_t v40 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL);
    id v41 = v10;
    sub_10051498C(v40, (uint64_t)[v41 bytes], (int)objc_msgSend(v41, "length"));
    if ((_DWORD)v42)
    {
      uint64_t v43 = v42;
      double v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
      if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT)) {
        sub_1006A8588(v43, v14, v44, v45, v46, v47, v48, v49);
      }
LABEL_33:

      uint64_t v50 = *(void *)(*(void *)(a1 + 56) + 8LL);
      uint64_t v51 = *(void *)(v50 + 24);
      if (v51)
      {
        sub_100515EC8(v51);
        uint64_t v50 = *(void *)(*(void *)(a1 + 56) + 8LL);
      }

      *(void *)(v50 + 24) = 0LL;
      objc_msgSend(*(id *)(a1 + 48), "__failValidationQueueForSubsystemMechanism:", *(void *)(a1 + 72));
      goto LABEL_40;
    }
  }

  else {
    uint64_t v13 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL);
  }
  [*(id *)(a1 + 40) setValidationContext:v13];
  uint64_t v21 = objc_alloc_init(&OBJC_CLASS___NSDate);
  [*(id *)(a1 + 40) setValidateContextDate:v21];

  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v9 responseTTL]);
  [*(id *)(a1 + 40) setValidateContextTTL:v22];

  uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v24 = (__CFString *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) validateContextTTL]);
    *(_DWORD *)buf = 138412290;
    id v53 = v24;
    _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "  Succeeded establishing session key!  (TTL: %@)",  buf,  0xCu);
  }

  uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v9 responseAbsintheServKey]);
  uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v9 responseAbsintheResponse]);
  uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v28 = v25 == 0LL;
    uint64_t v29 = v25;
    id v30 = v8;
    if (v28) {
      uint64_t v31 = @"NO";
    }
    else {
      uint64_t v31 = @"YES";
    }
    if (v26) {
      uint64_t v32 = @"YES";
    }
    else {
      uint64_t v32 = @"NO";
    }
    uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) validationSession]);
    *(_DWORD *)buf = 138412802;
    uint64_t v34 = @"YES";
    if (!v33) {
      uint64_t v34 = @"NO";
    }
    id v53 = v31;
    int v8 = v30;
    uint64_t v25 = v29;
    __int16 v54 = 2112;
    uint64_t v55 = v32;
    __int16 v56 = 2112;
    uint64_t v57 = v34;
    _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "Processing validation response {servKey: %@, response: %@, session: %@}",  buf,  0x20u);
  }

  uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) validationSession]);
  if (v35)
  {
    uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) validationSession]);
    __int128 v37 = (void *)objc_claimAutoreleasedReturnValue([v36 activateWithValidationData:v26 serverKey:v25]);

    uint64_t v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    unsigned __int8 v39 = v38;
    if (v37)
    {
      if (os_log_type_enabled(v38, OS_LOG_TYPE_FAULT)) {
        sub_1006A8524();
      }
    }

    else if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "Successfully set up validation session",  buf,  2u);
    }
  }

  objc_msgSend(*(id *)(a1 + 48), "__flushValidationQueueForSubsystemMechanism:", *(void *)(a1 + 72));

LABEL_40:
  [*(id *)(a1 + 40) setIsBuildingContext:0];
}

void sub_10030B894(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  [a1[4] setValidationSession:v5];
  if (v6)
  {
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT)) {
      sub_1006A8248();
    }
  }

  else
  {
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = (void *)objc_claimAutoreleasedReturnValue([v5 UDID]);
      if (v8) {
        id v9 = @"YES";
      }
      else {
        id v9 = @"NO";
      }
      id v10 = (void *)objc_claimAutoreleasedReturnValue([v5 helloMessage]);
      *(_DWORD *)buf = 138412802;
      if (v10) {
        id v11 = @"YES";
      }
      else {
        id v11 = @"NO";
      }
      id v32 = v5;
      __int16 v33 = 2112;
      uint64_t v34 = v9;
      __int16 v35 = 2112;
      uint64_t v36 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Successfully initialized validation session and hello message for request {validationSession: %@, UDID: %@, helloMessage: %@}",  buf,  0x20u);
    }
  }

  int v12 = (void *)objc_claimAutoreleasedReturnValue([v5 UDID]);
  if (v12)
  {
    id v13 = a1[5];
    double v14 = (void *)objc_claimAutoreleasedReturnValue([v5 UDID]);
    [v13 setAbsintheUDID:v14];
  }

  if (!v6)
  {
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v5 helloMessage]);

    if (v15)
    {
      id v16 = a1[5];
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v5 helloMessage]);
      [v16 setAbsintheHello:v17];
    }
  }

  uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    id v19 = a1[5];
    uint64_t v28 = objc_claimAutoreleasedReturnValue([v19 absintheUDID]);
    id v30 = v6;
    uint64_t v20 = @"NO";
    if (v28) {
      uint64_t v21 = @"YES";
    }
    else {
      uint64_t v21 = @"NO";
    }
    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "absintheUDID", v28));
    uint64_t v23 = (const __CFString *)[v22 length];
    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([a1[5] absintheHello]);
    if (v24) {
      uint64_t v20 = @"YES";
    }
    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([a1[5] absintheHello]);
    id v26 = [v25 length];
    *(_DWORD *)buf = 138413314;
    id v32 = v19;
    __int16 v33 = 2112;
    uint64_t v34 = v21;
    __int16 v35 = 2048;
    uint64_t v36 = v23;
    __int16 v37 = 2112;
    uint64_t v38 = v20;
    id v6 = v30;
    __int16 v39 = 2048;
    id v40 = v26;
    _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Validation session parameters set on request {initializeMessage: %@, UDID: %@, UDID.length: %ld, helloMessage: %@, helloMessage.length: %ld}",  buf,  0x34u);
  }

  uint64_t v27 = (void (**)(void, void))objc_claimAutoreleasedReturnValue([a1[6] validationMessageSendBlock]);
  ((void (**)(void, id))v27)[2](v27, a1[5]);
}

uint64_t sub_10030C66C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10030C6F8(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___IDSDaemonMIGQueryInterface);
  id v2 = (void *)qword_1009C0AD8;
  qword_1009C0AD8 = (uint64_t)v1;
}

uint64_t sub_10030CA10(uint64_t result)
{
  if (!*(_BYTE *)(*(void *)(result + 32) + 24LL))
  {
    uint64_t v1 = result;
    uint64_t v2 = OSLogHandleForIDSCategory("Warning");
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = *(void *)(v1 + 32);
      *(_DWORD *)buf = 138412290;
      uint64_t v7 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "IDSDaemonMIGQueryInterface auth port died: %@",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v5))
    {
      MarcoLogMadridLevel( @"IDSDaemonMIGQueryInterface",  0LL,  @"IDQuery",  @"IDSDaemonMIGQueryInterface auth port died: %@");
      IMLogString( 0LL,  @"IDSIDQuery",  @"IDS",  @"IDQuery",  @"IDSDaemonMIGQueryInterface auth port died: %@");
      _IMWarn(@"IDSDaemonMIGQueryInterface auth port died: %@");
    }

    exit(-1);
  }

  return result;
}

void sub_10030CB60(id a1, OS_xpc_object *a2, OS_xpc_object *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = a3;
  uint64_t v6 = _os_feature_enabled_impl("IDS", "UseNewThreadArch_v1");
  if ((_DWORD)v6)
  {
    uint64_t v8 = im_primary_queue(v6, v7);
    id v9 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10030CCD0;
    block[3] = &unk_1008F5F80;
    uint64_t v21 = v4;
    uint64_t v22 = v5;
    id v10 = v5;
    double v14 = v4;
    dispatch_sync(v9, block);
  }

  else
  {
    v19[0] = 0xAAAAAAAAAAAAAAAALL;
    v19[1] = 0xAAAAAAAAAAAAAAAALL;
    uint64_t v11 = pthread_main_thread_np();
    pthread_dependency_init_np(v19, v11, 0LL);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    void v15[2] = sub_10030EA48;
    v15[3] = &unk_1008FEDE8;
    id v16 = v4;
    uint64_t v17 = v5;
    uint64_t v18 = v19;
    int v12 = v5;
    id v13 = v4;
    dispatch_async(&_dispatch_main_q, v15);
    pthread_dependency_wait_np(v19);
  }

void sub_10030CCD0(uint64_t a1)
{
}

void sub_10030CCDC(void *a1, void *a2)
{
  uint64_t v3 = a1;
  id v4 = a2;
  connection = v3;
  uint64_t pid = xpc_connection_get_pid(v3);
  xpc_type_t type = xpc_get_type(v4);
  xpc_object_t object = v4;
  if (type == (xpc_type_t)&_xpc_type_error)
  {
    if (v4 == &_xpc_error_connection_invalid)
    {
      uint64_t v51 = OSLogHandleForIDSCategory("IDQuery");
      unsigned __int8 v52 = (os_log_s *)objc_claimAutoreleasedReturnValue(v51);
      if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = xpc_connection_get_pid(v3);
        _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_DEFAULT,  "peer(%d) received XPC_ERROR_CONNECTION_INVALID",  buf,  8u);
      }

      if (os_log_shim_legacy_logging_enabled(v53))
      {
        xpc_connection_get_pid(v3);
        MarcoLogMadridLevel( @"IDSDaemonMIGQueryInterface",  0LL,  @"IDQuery",  @"peer(%d) received XPC_ERROR_CONNECTION_INVALID");
        xpc_connection_get_pid(v3);
        IMLogString( 0LL,  @"IDSIDQuery",  @"IDS",  @"IDQuery",  @"peer(%d) received XPC_ERROR_CONNECTION_INVALID");
        if ((_IMWillLog(@"IDQuery", v54) & 1) != 0)
        {
          xpc_connection_get_pid(v3);
          _IMAlwaysLog(0LL, @"IDQuery", @"peer(%d) received XPC_ERROR_CONNECTION_INVALID");
        }
      }

      uint64_t v55 = im_local_object_from_connection(v3);
      __int16 v56 = (void *)objc_claimAutoreleasedReturnValue(v55);
      uint64_t v57 = v56;
      if (v56)
      {
        [v56 _portDidBecomeInvalid];
        CFRelease(v57);
      }

      xpc_connection_cancel(v3);
    }

    else if (v4 == &_xpc_error_connection_interrupted)
    {
      uint64_t v111 = OSLogHandleForIDSCategory("IDQuery");
      uint64_t v112 = (os_log_s *)objc_claimAutoreleasedReturnValue(v111);
      if (os_log_type_enabled(v112, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = xpc_connection_get_pid(v3);
        _os_log_impl( (void *)&_mh_execute_header,  v112,  OS_LOG_TYPE_DEFAULT,  "peer(%d) received XPC_ERROR_CONNECTION_INTERRUPTED",  buf,  8u);
      }

      if (os_log_shim_legacy_logging_enabled(v113))
      {
        xpc_connection_get_pid(v3);
        MarcoLogMadridLevel( @"IDSDaemonMIGQueryInterface",  0LL,  @"IDQuery",  @"peer(%d) received XPC_ERROR_CONNECTION_INTERRUPTED");
        xpc_connection_get_pid(v3);
        IMLogString( 0LL,  @"IDSIDQuery",  @"IDS",  @"IDQuery",  @"peer(%d) received XPC_ERROR_CONNECTION_INTERRUPTED");
        if ((_IMWillLog(@"IDQuery", v114) & 1) != 0)
        {
          xpc_connection_get_pid(v3);
          _IMAlwaysLog(0LL, @"IDQuery", @"peer(%d) received XPC_ERROR_CONNECTION_INTERRUPTED");
        }
      }
    }

    else if (v4 == &_xpc_error_termination_imminent)
    {
      uint64_t v18 = OSLogHandleForIDSCategory("IDQuery");
      id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = xpc_connection_get_pid(v3);
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "peer(%d) received XPC_ERROR_TERMINATION_IMMINENT",  buf,  8u);
      }

      if (os_log_shim_legacy_logging_enabled(v20))
      {
        xpc_connection_get_pid(v3);
        MarcoLogMadridLevel( @"IDSDaemonMIGQueryInterface",  0LL,  @"IDQuery",  @"peer(%d) received XPC_ERROR_TERMINATION_IMMINENT");
        xpc_connection_get_pid(v3);
        IMLogString( 0LL,  @"IDSIDQuery",  @"IDS",  @"IDQuery",  @"peer(%d) received XPC_ERROR_TERMINATION_IMMINENT");
        if ((_IMWillLog(@"IDQuery", v21) & 1) != 0)
        {
          xpc_connection_get_pid(v3);
          _IMAlwaysLog(0LL, @"IDQuery", @"peer(%d) received XPC_ERROR_TERMINATION_IMMINENT");
        }
      }
    }
  }

  else if (type == (xpc_type_t)&_xpc_type_dictionary)
  {
    id v22 = v4;
    if (_IDSWillLog(@"IDSDaemonMIGQueryInterface"))
    {
      uint64_t v23 = xpc_copy_description(v22);
      uint64_t v24 = OSLogHandleForIDSCategory("IDQuery");
      uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)&uint8_t buf[4] = xpc_connection_get_pid(connection);
        *(_WORD *)&uint8_t buf[8] = 2080;
        *(void *)&buf[10] = v23;
        _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "received message from peer(%d): %s",  buf,  0x12u);
      }

      if (os_log_shim_legacy_logging_enabled(v26))
      {
        xpc_connection_get_pid(connection);
        MarcoLogMadridLevel( @"IDSDaemonMIGQueryInterface",  0LL,  @"IDQuery",  @"received message from peer(%d): %s");
        double v150 = (__CFString *)xpc_connection_get_pid(connection);
        v160 = v23;
        IMLogString( 0LL,  @"IDSIDQuery",  @"IDS",  @"IDQuery",  @"received message from peer(%d): %s");
        if ((_IMWillLog(@"IDQuery", v27) & 1) != 0)
        {
          double v150 = (__CFString *)xpc_connection_get_pid(connection);
          v160 = v23;
          _IMAlwaysLog(0LL, @"IDQuery", @"received message from peer(%d): %s");
        }
      }

      free(v23);
    }

    xpc_object_t xdict = v22;
    if (xpc_dictionary_get_BOOL(v22, "service-cache-request"))
    {
      uint64_t v28 = connection;
      id v29 = v22;
      xpc_object_t reply = xpc_dictionary_create_reply(v29);
      if (reply)
      {
        *(void *)&__int128 v31 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v31 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)buf = v31;
        *(_OWORD *)&uint8_t buf[16] = v31;
        xpc_connection_get_audit_token(v28, buf);
        pid_t v32 = xpc_connection_get_pid(v28);
        if ((IMDAuditTokenTaskHasEntitlement(buf, kIDSIDQueryCacheEntitlement) & 1) != 0
          || (IMDAuditTokenTaskHasEntitlement(buf, kIDSMessagingEntitlement) & 1) != 0
          || IMDAuditTokenTaskHasEntitlement(buf, kIDSRegistrationEntitlement))
        {
          uint64_t v33 = IMGetXPCStringFromDictionary(v29, "transactionID");
          uint64_t v34 = (char *)objc_claimAutoreleasedReturnValue(v33);
          uint64_t v35 = IMGetXPCStringFromDictionary(v29, "service");
          uint64_t v36 = (__CFString *)objc_claimAutoreleasedReturnValue(v35);
          uint64_t v37 = OSLogHandleForIDSCategory("IDQuery");
          uint64_t v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
          if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)v194 = 138412546;
            *(void *)&v194[4] = v36;
            *(_WORD *)&v194[12] = 2112;
            *(void *)&v194[14] = v34;
            _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEFAULT,  "*** Incoming cache query for (service: %@) (transactionID: %@)",  v194,  0x16u);
          }

          if (os_log_shim_legacy_logging_enabled(v39))
          {
            MarcoLogMadridLevel( @"IDSDaemonMIGQueryInterface",  0LL,  @"IDQuery",  @"*** Incoming cache query for (service: %@) (transactionID: %@)");
            double v150 = v36;
            v160 = v34;
            IMLogString( 0LL,  @"IDSIDQuery",  @"IDS",  @"IDQuery",  @"*** Incoming cache query for (service: %@) (transactionID: %@)");
            if ((_IMWillLog(@"IDQuery", v40) & 1) != 0)
            {
              double v150 = v36;
              v160 = v34;
              _IMAlwaysLog( 0LL,  @"IDQuery",  @"*** Incoming cache query for (service: %@) (transactionID: %@)");
            }
          }

          id v41 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDServiceController sharedInstance]( &OBJC_CLASS___IDSDServiceController,  "sharedInstance",  v150,  v160));
          uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue([v41 serviceWithIdentifier:v36]);

          uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue([v42 queryService]);
          uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue( +[IDSIDStatusQueryController sharedInstance]( &OBJC_CLASS___IDSIDStatusQueryController,  "sharedInstance"));
          uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue([v44 currentCacheForService:v43]);

          uint64_t v46 = OSLogHandleForIDSCategory("IDQuery");
          uint64_t v47 = (os_log_s *)objc_claimAutoreleasedReturnValue(v46);
          if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
          {
            unsigned int v48 = [v45 count];
            *(_DWORD *)v194 = 67109120;
            *(_DWORD *)&v194[4] = v48;
            _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "Current cache: %d count", v194, 8u);
          }

          if (os_log_shim_legacy_logging_enabled(v49))
          {
            id v151 = [v45 count];
            MarcoLogMadridLevel( @"IDSDaemonMIGQueryInterface",  0LL,  @"IDQuery",  @"Current cache: %d count");
            id v152 = objc_msgSend(v45, "count", v151);
            IMLogString(0LL, @"IDSIDQuery", @"IDS", @"IDQuery", @"Current cache: %d count");
            if ((_IMWillLog(@"IDQuery", v50) & 1) != 0)
            {
              objc_msgSend(v45, "count", v152);
              _IMAlwaysLog(0LL, @"IDQuery", @"Current cache: %d count");
            }
          }

          IMInsertNSStringsToXPCDictionary(reply, "service");
          IMInsertDictionariesToXPCDictionary(reply, "cache");
          IMInsertNSStringsToXPCDictionary(reply, "transactionID");
        }

        else
        {
          uint64_t v135 = OSLogHandleForIDSCategory("IDQuery");
          uint64_t v136 = (os_log_s *)objc_claimAutoreleasedReturnValue(v135);
          if (os_log_type_enabled(v136, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)v194 = 67109120;
            *(_DWORD *)&v194[4] = v32;
            _os_log_impl( (void *)&_mh_execute_header,  v136,  OS_LOG_TYPE_DEFAULT,  "Incoming cache query, but %d is not entitled to access the cache",  v194,  8u);
          }

          if (os_log_shim_legacy_logging_enabled(v137))
          {
            MarcoLogMadridLevel( @"IDSDaemonMIGQueryInterface",  0LL,  @"IDQuery",  @"Incoming cache query, but %d is not entitled to access the cache");
            IMLogString( 0LL,  @"IDSIDQuery",  @"IDS",  @"IDQuery",  @"Incoming cache query, but %d is not entitled to access the cache");
            if ((_IMWillLog(@"IDQuery", v138) & 1) != 0) {
              _IMAlwaysLog( 0LL,  @"IDQuery",  @"Incoming cache query, but %d is not entitled to access the cache");
            }
          }
        }

        xpc_connection_send_message(v28, reply);
      }

      else
      {
        uint64_t v124 = OSLogHandleForIDSCategory("Warning");
        NSUInteger v125 = (os_log_s *)objc_claimAutoreleasedReturnValue(v124);
        if (os_log_type_enabled(v125, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v125,  OS_LOG_TYPE_ERROR,  "Could not create reply message for cache request",  buf,  2u);
        }

        if (os_log_shim_legacy_logging_enabled(v126))
        {
          MarcoLogMadridLevel( @"IDSDaemonMIGQueryInterface",  0LL,  @"IDQuery",  @"Could not create reply message for cache request");
          IMLogString( 0LL,  @"IDSIDQuery",  @"IDS",  @"IDQuery",  @"Could not create reply message for cache request");
          _IMWarn(@"Could not create reply message for cache request");
        }
      }
    }

    else if (xpc_dictionary_get_BOOL(v22, "cached-id-status-query"))
    {
      id v176 = connection;
      xpc_object_t v181 = v22;
      xpc_object_t message = xpc_dictionary_create_reply(v181);
      if (message)
      {
        uint64_t v58 = IMGetXPCStringFromDictionary(v181, "transactionID");
        v175 = (void *)objc_claimAutoreleasedReturnValue(v58);
        uint64_t v59 = IMGetXPCStringFromDictionary(v181, "service");
        uint64_t v179 = (char *)objc_claimAutoreleasedReturnValue(v59);
        uint64_t v60 = IMGetXPCStringFromDictionary(v181, "from");
        double v170 = (void *)objc_claimAutoreleasedReturnValue(v60);
        uint64_t v61 = IMGetXPCArrayFromDictionary(v181, "destinations");
        id v178 = (void *)objc_claimAutoreleasedReturnValue(v61);
        BOOL v187 = xpc_dictionary_get_BOOL(v181, "respect-expiry");
        uint64_t v62 = OSLogHandleForIDSCategory("IDQuery");
        id v63 = (os_log_s *)objc_claimAutoreleasedReturnValue(v62);
        if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
        {
          id v64 = @"NO";
          *(_DWORD *)buf = 138413058;
          if (v187) {
            id v64 = @"YES";
          }
          *(void *)&uint8_t buf[4] = v64;
          *(_WORD *)&buf[12] = 2112;
          *(void *)&buf[14] = v179;
          *(_WORD *)&_BYTE buf[22] = 2112;
          *(void *)&_BYTE buf[24] = v175;
          LOWORD(v193) = 2112;
          *(void *)((char *)&v193 + 2) = v178;
          _os_log_impl( (void *)&_mh_execute_header,  v63,  OS_LOG_TYPE_DEFAULT,  "*** Incoming cached ID status query for (respectExpiry: %@)  (service: %@)  (transactionID: %@)  (destinations: %@)",  buf,  0x2Au);
        }

        if (os_log_shim_legacy_logging_enabled(v65))
        {
          id v66 = v187 ? @"YES" : @"NO";
          MarcoLogMadridLevel( @"IDSDaemonMIGQueryInterface",  0LL,  @"IDQuery",  @"*** Incoming cached ID status query for (respectExpiry: %@)  (service: %@)  (transactionID: %@)  (destinations: %@)");
          v166 = v175;
          id v167 = v178;
          double v150 = v66;
          v160 = v179;
          IMLogString( 0LL,  @"IDSIDQuery",  @"IDS",  @"IDQuery",  @"*** Incoming cached ID status query for (respectExpiry: %@)  (service: %@)  (transactionID: %@)  (destinations: %@)");
          if ((_IMWillLog(@"IDQuery", v67) & 1) != 0)
          {
            v166 = v175;
            id v167 = v178;
            double v150 = v66;
            v160 = v179;
            _IMAlwaysLog( 0LL,  @"IDQuery",  @"*** Incoming cached ID status query for (respectExpiry: %@)  (service: %@)  (transactionID: %@)  (destinations: %@)");
          }
        }

        uint64_t v173 = (void *)objc_claimAutoreleasedReturnValue( +[IDSURI URIWithUnprefixedURI:]( &OBJC_CLASS___IDSURI,  "URIWithUnprefixedURI:",  v170,  v150,  v160,  v166,  v167));
        uint64_t v68 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDServiceController sharedInstance](&OBJC_CLASS___IDSDServiceController, "sharedInstance"));
        id v174 = (void *)objc_claimAutoreleasedReturnValue([v68 serviceWithIdentifier:v179]);

        unsigned __int8 v69 = (void *)objc_claimAutoreleasedReturnValue([v174 queryService]);
        id v70 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
        uint64_t v169 = (void *)objc_claimAutoreleasedReturnValue([v70 accountsOnService:v174]);

        uint64_t v168 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v178, "__imArrayByApplyingBlock:", &stru_100900C60));
        id v177 = (void *)objc_claimAutoreleasedReturnValue( +[IDSQueryUtilities accountToQueryFrom:fromURI:destinationURIs:allowLocalAccount:]( &OBJC_CLASS___IDSQueryUtilities,  "accountToQueryFrom:fromURI:destinationURIs:allowLocalAccount:",  v169,  v173,  v168,  0LL));
        if (v177)
        {
          uint64_t v171 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
          v172 = (void *)objc_claimAutoreleasedReturnValue( +[IDSQueryUtilities prefixedAliasStringToQueryFrom:withPreferredFromURI:]( &OBJC_CLASS___IDSQueryUtilities,  "prefixedAliasStringToQueryFrom:withPreferredFromURI:",  v177,  v173));
          if (![v172 length])
          {
            uint64_t v71 = OSLogHandleForIDSCategory("IDQuery");
            uint64_t v72 = (os_log_s *)objc_claimAutoreleasedReturnValue(v71);
            if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              *(void *)&uint8_t buf[4] = v177;
              _os_log_impl( (void *)&_mh_execute_header,  v72,  OS_LOG_TYPE_DEFAULT,  "No fromURI for account %@",  buf,  0xCu);
            }

            if (os_log_shim_legacy_logging_enabled(v73))
            {
              MarcoLogMadridLevel( @"IDSDaemonMIGQueryInterface",  0LL,  @"IDQuery",  @"No fromURI for account %@");
              CFTypeRef v153 = v177;
              IMLogString(0LL, @"IDSIDQuery", @"IDS", @"IDQuery", @"No fromURI for account %@");
              if ((_IMWillLog(@"IDQuery", v74) & 1) != 0)
              {
                CFTypeRef v153 = v177;
                _IMAlwaysLog(0LL, @"IDQuery", @"No fromURI for account %@");
              }
            }
          }

          if (objc_msgSend(v172, "length", v153))
          {
            id v75 = sub_10011BB60(v178, v177);
            id v76 = (void *)objc_claimAutoreleasedReturnValue(v75);
            uint64_t v77 = OSLogHandleForIDSCategory("IDQuery");
            unsigned int v78 = (os_log_s *)objc_claimAutoreleasedReturnValue(v77);
            if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v79 = (void *)objc_claimAutoreleasedReturnValue([v177 uniqueID]);
              *(_DWORD *)buf = 138412546;
              *(void *)&uint8_t buf[4] = v79;
              *(_WORD *)&buf[12] = 2112;
              *(void *)&buf[14] = v172;
              _os_log_impl( (void *)&_mh_execute_header,  v78,  OS_LOG_TYPE_DEFAULT,  "Account: %@  fromURI: %@",  buf,  0x16u);
            }

            if (os_log_shim_legacy_logging_enabled(v80))
            {
              uint64_t v155 = (void *)objc_claimAutoreleasedReturnValue([v177 uniqueID]);
              MarcoLogMadridLevel( @"IDSDaemonMIGQueryInterface",  0LL,  @"IDQuery",  @"Account: %@  fromURI: %@");

              uint64_t v154 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v177, "uniqueID", v155, v172));
              __int16 v163 = v172;
              IMLogString(0LL, @"IDSIDQuery", @"IDS", @"IDQuery", @"Account: %@  fromURI: %@");

              if ((_IMWillLog(@"IDQuery", v81) & 1) != 0)
              {
                uint64_t v154 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v177, "uniqueID", v154, v172));
                __int16 v163 = v172;
                _IMAlwaysLog(0LL, @"IDQuery", @"Account: %@  fromURI: %@");
              }
            }

            __int128 v186 = (void *)objc_claimAutoreleasedReturnValue( +[IDSURI URIWithUnprefixedURI:withServiceLoggingHint:]( &OBJC_CLASS___IDSURI,  "URIWithUnprefixedURI:withServiceLoggingHint:",  v172,  v69,  v154,  v163));
            uint64_t v82 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
            __int128 v195 = 0u;
            __int128 v196 = 0u;
            memset(v194, 0, sizeof(v194));
            id obj = v76;
            id v83 = [obj countByEnumeratingWithState:v194 objects:buf count:16];
            if (v83)
            {
              uint64_t v84 = **(void **)&v194[16];
              do
              {
                for (i = 0LL; i != v83; i = (char *)i + 1)
                {
                  if (**(void **)&v194[16] != v84) {
                    objc_enumerationMutation(obj);
                  }
                  uint64_t v86 = *(void *)(*(void *)&v194[8] + 8LL * (void)i);
                  uint64_t v87 = OSLogHandleForIDSCategory("IDQuery");
                  uint64_t v88 = (os_log_s *)objc_claimAutoreleasedReturnValue(v87);
                  if (os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
                  {
                    uint64_t v89 = IDSLoggableDescriptionForHandleOnService(v86, v69);
                    __int128 v90 = (void *)objc_claimAutoreleasedReturnValue(v89);
                    *(_DWORD *)v188 = 138412546;
                    v189 = v90;
                    __int16 v190 = 2112;
                    __int16 v191 = v69;
                    _os_log_impl( (void *)&_mh_execute_header,  v88,  OS_LOG_TYPE_DEFAULT,  "Looking up cached value for %@ -> %@",  v188,  0x16u);
                  }

                  if (os_log_shim_legacy_logging_enabled(v91))
                  {
                    uint64_t v92 = IDSLoggableDescriptionForHandleOnService(v86, v69);
                    id v93 = (void *)objc_claimAutoreleasedReturnValue(v92);
                    MarcoLogMadridLevel( @"IDSDaemonMIGQueryInterface",  0LL,  @"IDQuery",  @"Looking up cached value for %@ -> %@");

                    uint64_t v94 = IDSLoggableDescriptionForHandleOnService(v86, v69);
                    uint64_t v156 = (void *)objc_claimAutoreleasedReturnValue(v94);
                    v164 = v69;
                    IMLogString( 0LL,  @"IDSIDQuery",  @"IDS",  @"IDQuery",  @"Looking up cached value for %@ -> %@");

                    if ((_IMWillLog(@"IDQuery", v95) & 1) != 0)
                    {
                      uint64_t v96 = IDSLoggableDescriptionForHandleOnService(v86, v69);
                      uint64_t v156 = (void *)objc_claimAutoreleasedReturnValue(v96);
                      v164 = v69;
                      _IMAlwaysLog(0LL, @"IDQuery", @"Looking up cached value for %@ -> %@");
                    }
                  }

                  id v97 = (void *)objc_claimAutoreleasedReturnValue( +[IDSIDStatusQueryController sharedInstance]( &OBJC_CLASS___IDSIDStatusQueryController,  "sharedInstance",  v156,  v164));
                  uint64_t v98 = (void *)objc_claimAutoreleasedReturnValue( +[IDSURI URIWithUnprefixedURI:withServiceLoggingHint:]( &OBJC_CLASS___IDSURI,  "URIWithUnprefixedURI:withServiceLoggingHint:",  v86,  v69));
                  id v99 = [v97 cachedIDStatusForID:v98 fromURI:v186 fromService:v69 respectExpiry:v187];

                  id v100 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v99));
                  -[NSMutableDictionary setObject:forKey:](v82, "setObject:forKey:", v100, v86);
                }

                id v83 = [obj countByEnumeratingWithState:v194 objects:buf count:16];
              }

              while (v83);
            }

            -[NSMutableDictionary setObject:forKey:](v171, "setObject:forKey:", v82, v179);
          }

          IMInsertDictionariesToXPCDictionary(message, "destinations");
          IMInsertNSStringsToXPCDictionary(message, "service");
          IMInsertNSStringsToXPCDictionary(message, "transactionID");
          uint64_t v101 = OSLogHandleForIDSCategory("IDQuery");
          id v102 = (os_log_s *)objc_claimAutoreleasedReturnValue(v101);
          if (os_log_type_enabled(v102, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v103 = IDSLoggableDescriptionForObjectOnService(v171, v69);
            NSUInteger v104 = (void *)objc_claimAutoreleasedReturnValue(v103);
            *(_DWORD *)v188 = 138412290;
            v189 = v104;
            _os_log_impl( (void *)&_mh_execute_header,  v102,  OS_LOG_TYPE_DEFAULT,  "Sending id status results %@",  v188,  0xCu);
          }

          if (os_log_shim_legacy_logging_enabled(v105))
          {
            uint64_t v106 = IDSLoggableDescriptionForObjectOnService(v171, v69);
            id v107 = (void *)objc_claimAutoreleasedReturnValue(v106);
            MarcoLogMadridLevel( @"IDSDaemonMIGQueryInterface",  0LL,  @"IDQuery",  @"Sending id status results %@");

            uint64_t v108 = IDSLoggableDescriptionForObjectOnService(v171, v69);
            CFTypeRef v157 = (void *)objc_claimAutoreleasedReturnValue(v108);
            IMLogString(0LL, @"IDSIDQuery", @"IDS", @"IDQuery", @"Sending id status results %@");

            if ((_IMWillLog(@"IDQuery", v109) & 1) != 0)
            {
              uint64_t v110 = IDSLoggableDescriptionForObjectOnService(v171, v69);
              id v158 = (void *)objc_claimAutoreleasedReturnValue(v110);
              _IMAlwaysLog(0LL, @"IDQuery", @"Sending id status results %@");
            }
          }

          xpc_connection_send_message(v176, message);
        }

        else
        {
          uint64_t v130 = OSLogHandleForIDSCategory("IDQuery");
          __int16 v131 = (os_log_s *)objc_claimAutoreleasedReturnValue(v130);
          if (os_log_type_enabled(v131, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            *(void *)&uint8_t buf[4] = v179;
            _os_log_impl( (void *)&_mh_execute_header,  v131,  OS_LOG_TYPE_DEFAULT,  "No registered account for service %@, bailing...",  buf,  0xCu);
          }

          if (os_log_shim_legacy_logging_enabled(v132))
          {
            MarcoLogMadridLevel( @"IDSDaemonMIGQueryInterface",  0LL,  @"IDQuery",  @"No registered account for service %@, bailing...");
            IMLogString( 0LL,  @"IDSIDQuery",  @"IDS",  @"IDQuery",  @"No registered account for service %@, bailing...");
            if ((_IMWillLog(@"IDQuery", v133) & 1) != 0) {
              _IMAlwaysLog(0LL, @"IDQuery", @"No registered account for service %@, bailing...");
            }
          }

          if (v176)
          {
            *(void *)v194 = IDSIDQueryControllerErrorDestinationSet;
            *(void *)buf = v178;
            id v134 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  buf,  v194,  1LL));
            id v159 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSIDQueryControllerErrorDomain,  -3000LL,  v134));
            IMInsertKeyedCodableObjectsToXPCDictionary(message, "error");

            xpc_connection_send_message(v176, message);
          }
        }
      }

      else
      {
        uint64_t v127 = OSLogHandleForIDSCategory("Warning");
        uint64_t v128 = (os_log_s *)objc_claimAutoreleasedReturnValue(v127);
        if (os_log_type_enabled(v128, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v128,  OS_LOG_TYPE_ERROR,  "Could not create reply message for cached id status query",  buf,  2u);
        }

        if (os_log_shim_legacy_logging_enabled(v129))
        {
          MarcoLogMadridLevel( @"IDSDaemonMIGQueryInterface",  0LL,  @"IDQuery",  @"Could not create reply message for cached id status query");
          IMLogString( 0LL,  @"IDSIDQuery",  @"IDS",  @"IDQuery",  @"Could not create reply message for cached id status query");
          _IMWarn(@"Could not create reply message for cached id status query");
        }
      }
    }

    else if (xpc_dictionary_get_BOOL(v22, "id-status-query"))
    {
      uint64_t v115 = connection;
      id v116 = v22;
      if (qword_1009C0AF0 != -1) {
        dispatch_once(&qword_1009C0AF0, &stru_100900C80);
      }
      uint64_t v117 = OSLogHandleForIDSCategory("IDQuery");
      __int128 v118 = (os_log_s *)objc_claimAutoreleasedReturnValue(v117);
      if (os_log_type_enabled(v118, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v118,  OS_LOG_TYPE_DEFAULT,  "__HandleIDStatusQuery - enqueuing",  buf,  2u);
      }

      if (os_log_shim_legacy_logging_enabled(v119))
      {
        MarcoLogMadridLevel( @"IDSDaemonMIGQueryInterface",  0LL,  @"IDQuery",  @"__HandleIDStatusQuery - enqueuing");
        IMLogString( 0LL,  @"IDSIDQuery",  @"IDS",  @"IDQuery",  @"__HandleIDStatusQuery - enqueuing");
        if ((_IMWillLog(@"IDQuery", v120) & 1) != 0) {
          _IMAlwaysLog(0LL, @"IDQuery", @"__HandleIDStatusQuery - enqueuing");
        }
      }

      *(void *)buf = _NSConcreteStackBlock;
      *(void *)&uint8_t buf[8] = 3221225472LL;
      *(void *)&uint8_t buf[16] = sub_10030F4EC;
      *(void *)&_BYTE buf[24] = &unk_1008F5F80;
      *(void *)&__int128 v193 = v116;
      *((void *)&v193 + 1) = v115;
      id v121 = v116;
      __int128 v122 = v115;
      __int128 v123 = objc_retainBlock(buf);
      [(id)qword_1009C0AE8 enqueueQueryBlock:v123 cleanup:0];
    }

    else if (xpc_dictionary_get_BOOL(v22, "set-id-status"))
    {
      sub_10030EB80(connection, v22);
    }

    else if (xpc_dictionary_get_BOOL(v22, "remote-device-status-query"))
    {
      sub_10030EF0C(connection, v22);
    }

    else if (xpc_dictionary_get_BOOL(v22, "id-status-info-query"))
    {
      sub_10030F0C4(connection, v22);
    }

    else if (xpc_dictionary_get_BOOL(v22, "flush-query-cache"))
    {
      sub_10030F27C(connection, v22);
    }

    else
    {
      double v139 = xpc_copy_description(v22);
      uint64_t v140 = OSLogHandleForIDSCategory("Warning");
      uint64_t v141 = (os_log_s *)objc_claimAutoreleasedReturnValue(v140);
      if (os_log_type_enabled(v141, OS_LOG_TYPE_ERROR))
      {
        uint64_t v142 = IMProcessNameForPid(pid);
        uint64_t v143 = (void *)objc_claimAutoreleasedReturnValue(v142);
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)&uint8_t buf[4] = pid;
        *(_WORD *)&uint8_t buf[8] = 2112;
        *(void *)&buf[10] = v143;
        *(_WORD *)&buf[18] = 2080;
        *(void *)&buf[20] = v139;
        _os_log_impl( (void *)&_mh_execute_header,  v141,  OS_LOG_TYPE_ERROR,  "Unknown message from peer: (%d):(%@) %s",  buf,  0x1Cu);
      }

      if (os_log_shim_legacy_logging_enabled(v144))
      {
        uint64_t v145 = IMProcessNameForPid(pid);
        id v146 = (void *)objc_claimAutoreleasedReturnValue(v145);
        MarcoLogMadridLevel( @"IDSDaemonMIGQueryInterface",  0LL,  @"IDQuery",  @"Unknown message from peer: (%d):(%@) %s");

        uint64_t v147 = IMProcessNameForPid(pid);
        id v148 = (void *)objc_claimAutoreleasedReturnValue(v147);
        IMLogString( 0LL,  @"IDSIDQuery",  @"IDS",  @"IDQuery",  @"Unknown message from peer: (%d):(%@) %s");

        uint64_t v149 = IMProcessNameForPid(pid);
        id v165 = (void *)objc_claimAutoreleasedReturnValue(v149);
        _IMWarn(@"Unknown message from peer: (%d):(%@) %s");
      }

      free(v139);
      xpc_connection_cancel(connection);
    }
  }

  else
  {
    uint64_t v7 = xpc_copy_description(v4);
    uint64_t v8 = OSLogHandleForIDSCategory("IDQuery");
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = IMProcessNameForPid(pid);
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = pid;
      *(_WORD *)&uint8_t buf[8] = 2112;
      *(void *)&buf[10] = v11;
      *(_WORD *)&buf[18] = 2080;
      *(void *)&buf[20] = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "received unknown from peer(%d):(%@) %s",  buf,  0x1Cu);
    }

    if (os_log_shim_legacy_logging_enabled(v12))
    {
      uint64_t v13 = IMProcessNameForPid(pid);
      double v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
      MarcoLogMadridLevel( @"IDSDaemonMIGQueryInterface",  0LL,  @"IDQuery",  @"received unknown from peer(%d):(%@) %s");

      uint64_t v15 = IMProcessNameForPid(pid);
      uint64_t v161 = (void *)objc_claimAutoreleasedReturnValue(v15);
      IMLogString( 0LL,  @"IDSIDQuery",  @"IDS",  @"IDQuery",  @"received unknown from peer(%d):(%@) %s");

      if ((_IMWillLog(@"IDQuery", v16) & 1) != 0)
      {
        uint64_t v17 = IMProcessNameForPid(pid);
        v162 = (void *)objc_claimAutoreleasedReturnValue(v17);
        _IMAlwaysLog(0LL, @"IDQuery", @"received unknown from peer(%d):(%@) %s");
      }
    }

    free(v7);
  }
}

uint64_t sub_10030EA48(uint64_t a1)
{
  return pthread_dependency_fulfill_np(*(void *)(a1 + 48), 0LL);
}

id sub_10030EAE4(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "__setupServer");
}

void sub_10030EB80(void *a1, void *a2)
{
  uint64_t v3 = a1;
  id v4 = a2;
  *(void *)&__int128 v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v26[0] = v5;
  v26[1] = v5;
  xpc_connection_get_audit_token(v3, v26);
  pid_t pid = xpc_connection_get_pid(v3);
  if ((IMDAuditTokenTaskHasEntitlement(v26, kIDSIDQueryCacheUpdateEntitlement) & 1) != 0)
  {
    uint64_t v7 = IMGetXPCStringFromDictionary(v4, "service");
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    uint64_t v9 = IMGetXPCStringFromDictionary(v4, "destination");
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    uint64_t v11 = IMGetXPCIntFromDictionary(v4, "status");
    uint64_t v12 = OSLogHandleForIDSCategory("IDQuery");
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109634;
      int v28 = v11;
      __int16 v29 = 2112;
      id v30 = v8;
      __int16 v31 = 2112;
      pid_t v32 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "*** Incoming ID status update: %d  (service: %@)  (destination: %@)",  buf,  0x1Cu);
    }

    if (os_log_shim_legacy_logging_enabled(v14))
    {
      MarcoLogMadridLevel( @"IDSDaemonMIGQueryInterface",  0LL,  @"IDQuery",  @"*** Incoming ID status update: %d  (service: %@)  (destination: %@)");
      uint64_t v24 = v8;
      uint64_t v25 = v10;
      uint64_t v23 = v11;
      IMLogString( 0LL,  @"IDSIDQuery",  @"IDS",  @"IDQuery",  @"*** Incoming ID status update: %d  (service: %@)  (destination: %@)");
      if ((_IMWillLog(@"IDQuery", v15) & 1) != 0)
      {
        uint64_t v24 = v8;
        uint64_t v25 = v10;
        uint64_t v23 = v11;
        _IMAlwaysLog( 0LL,  @"IDQuery",  @"*** Incoming ID status update: %d  (service: %@)  (destination: %@)");
      }
    }

    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[IDSURI URIWithUnprefixedURI:withServiceLoggingHint:]( &OBJC_CLASS___IDSURI,  "URIWithUnprefixedURI:withServiceLoggingHint:",  v10,  v8,  v23,  v24,  v25));
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue( +[IDSIDStatusQueryController sharedInstance]( &OBJC_CLASS___IDSIDStatusQueryController,  "sharedInstance"));
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( +[IDSURI URIWithUnprefixedURI:withServiceLoggingHint:]( &OBJC_CLASS___IDSURI,  "URIWithUnprefixedURI:withServiceLoggingHint:",  @"email:myself",  v8));
    [v17 setCachedIDStatus:v11 ForID:v16 fromURI:v18 fromService:v8];
  }

  else
  {
    uint64_t v19 = OSLogHandleForIDSCategory("IDQuery");
    uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      int v28 = pid;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "*** Incoming ID status update, from un-entitled proess: %d",  buf,  8u);
    }

    if (os_log_shim_legacy_logging_enabled(v21))
    {
      MarcoLogMadridLevel( @"IDSDaemonMIGQueryInterface",  0LL,  @"IDQuery",  @"*** Incoming ID status update, from un-entitled proess: %d");
      IMLogString( 0LL,  @"IDSIDQuery",  @"IDS",  @"IDQuery",  @"*** Incoming ID status update, from un-entitled proess: %d");
      if ((_IMWillLog(@"IDQuery", v22) & 1) != 0) {
        _IMAlwaysLog(0LL, @"IDQuery", @"*** Incoming ID status update, from un-entitled proess: %d");
      }
    }
  }
}

void sub_10030EF0C(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (qword_1009C0B08 != -1) {
    dispatch_once(&qword_1009C0B08, &stru_100900D08);
  }
  uint64_t v5 = OSLogHandleForIDSCategory("IDQuery");
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "__HandleRemoteDeviceQuery - enqueuing", buf, 2u);
  }

  if (os_log_shim_legacy_logging_enabled(v7))
  {
    MarcoLogMadridLevel( @"IDSDaemonMIGQueryInterface",  0LL,  @"IDQuery",  @"__HandleRemoteDeviceQuery - enqueuing");
    IMLogString( 0LL,  @"IDSIDQuery",  @"IDS",  @"IDQuery",  @"__HandleRemoteDeviceQuery - enqueuing");
    if ((_IMWillLog(@"IDQuery", v8) & 1) != 0) {
      _IMAlwaysLog(0LL, @"IDQuery", @"__HandleRemoteDeviceQuery - enqueuing");
    }
  }

  uint64_t v12 = _NSConcreteStackBlock;
  uint64_t v13 = 3221225472LL;
  uint64_t v14 = sub_100310FE8;
  uint64_t v15 = &unk_1008F5F80;
  id v16 = v4;
  id v17 = v3;
  id v9 = v3;
  id v10 = v4;
  uint64_t v11 = objc_retainBlock(&v12);
  objc_msgSend((id)qword_1009C0AE8, "enqueueQueryBlock:cleanup:", v11, 0, v12, v13, v14, v15);
}

void sub_10030F0C4(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (qword_1009C0B10 != -1) {
    dispatch_once(&qword_1009C0B10, &stru_100900D70);
  }
  uint64_t v5 = OSLogHandleForIDSCategory("IDQuery");
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "__HandleIDInfoQuery - enqueuing", buf, 2u);
  }

  if (os_log_shim_legacy_logging_enabled(v7))
  {
    MarcoLogMadridLevel( @"IDSDaemonMIGQueryInterface",  0LL,  @"IDQuery",  @"__HandleIDInfoQuery - enqueuing");
    IMLogString(0LL, @"IDSIDQuery", @"IDS", @"IDQuery", @"__HandleIDInfoQuery - enqueuing");
    if ((_IMWillLog(@"IDQuery", v8) & 1) != 0) {
      _IMAlwaysLog(0LL, @"IDQuery", @"__HandleIDInfoQuery - enqueuing");
    }
  }

  uint64_t v12 = _NSConcreteStackBlock;
  uint64_t v13 = 3221225472LL;
  uint64_t v14 = sub_1003125AC;
  uint64_t v15 = &unk_1008F5F80;
  id v16 = v4;
  id v17 = v3;
  id v9 = v3;
  id v10 = v4;
  uint64_t v11 = objc_retainBlock(&v12);
  objc_msgSend((id)qword_1009C0AE8, "enqueueQueryBlock:cleanup:", v11, 0, v12, v13, v14, v15);
}

void sub_10030F27C(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  *(void *)&__int128 v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v14[0] = v5;
  v14[1] = v5;
  xpc_connection_get_audit_token(v3, v14);
  pid_t pid = xpc_connection_get_pid(v3);
  if ((IMDAuditTokenTaskHasEntitlement(v14, kIDSIDQueryCacheClearEntitlement) & 1) != 0)
  {
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMIDSLog daemon](&OBJC_CLASS___IMIDSLog, "daemon"));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      pid_t v16 = pid;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "*** Clearing ID status cache due to incoming cache clear from process: %d ***",  buf,  8u);
    }

    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPeerIDManager sharedInstance](&OBJC_CLASS___IDSPeerIDManager, "sharedInstance"));
    [v8 clearCacheAndPersistImmediately:1];

    id v9 = (void *)objc_claimAutoreleasedReturnValue( +[IDSIDStatusQueryController sharedInstance]( &OBJC_CLASS___IDSIDStatusQueryController,  "sharedInstance"));
    [v9 clearCache];
  }

  else
  {
    uint64_t v10 = OSLogHandleForIDSCategory("IDQuery");
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      pid_t v16 = pid;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "*** Incoming Query cache clear, from un-entitled proess: %d",  buf,  8u);
    }

    if (os_log_shim_legacy_logging_enabled(v12))
    {
      MarcoLogMadridLevel( @"IDSDaemonMIGQueryInterface",  0LL,  @"IDQuery",  @"*** Incoming Query cache clear, from un-entitled proess: %d");
      IMLogString( 0LL,  @"IDSIDQuery",  @"IDS",  @"IDQuery",  @"*** Incoming Query cache clear, from un-entitled proess: %d");
      if ((_IMWillLog(@"IDQuery", v13) & 1) != 0) {
        _IMAlwaysLog(0LL, @"IDQuery", @"*** Incoming Query cache clear, from un-entitled proess: %d");
      }
    }
  }
}

id sub_10030F4B4(id a1, NSString *a2)
{
  return +[IDSURI URIWithUnprefixedURI:](&OBJC_CLASS___IDSURI, "URIWithUnprefixedURI:", a2);
}

void sub_10030F4C4(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___IDSStatusQueryQueue);
  uint64_t v2 = (void *)qword_1009C0AE8;
  qword_1009C0AE8 = (uint64_t)v1;
}

void sub_10030F4EC(uint64_t a1)
{
  uint64_t v141 = 0LL;
  uint64_t v142 = &v141;
  uint64_t v143 = 0x3032000000LL;
  uint64_t v144 = sub_100310958;
  uint64_t v145 = sub_100310968;
  id reply = (id)0xAAAAAAAAAAAAAAAALL;
  id reply = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 32));
  if (v142[5])
  {
    uint64_t v2 = IMGetXPCStringFromDictionary(*(void *)(a1 + 32), "transactionID");
    id v121 = (void *)objc_claimAutoreleasedReturnValue(v2);
    uint64_t v3 = IMGetXPCStringFromDictionary(*(void *)(a1 + 32), "service");
    uint64_t v4 = objc_claimAutoreleasedReturnValue(v3);
    uint64_t v5 = IMGetXPCStringFromDictionary(*(void *)(a1 + 32), "from");
    __int128 v118 = (void *)objc_claimAutoreleasedReturnValue(v5);
    uint64_t v6 = IMGetXPCArrayFromDictionary(*(void *)(a1 + 32), "destinations");
    uint64_t v124 = (void *)objc_claimAutoreleasedReturnValue(v6);
    int v116 = IMGetXPCBoolFromDictionary(*(void *)(a1 + 32), "is-springboard");
    NSUInteger v125 = (void *)v4;
    int v7 = IMGetXPCBoolFromDictionary(*(void *)(a1 + 32), "force");
    int v115 = IMGetXPCBoolFromDictionary(*(void *)(a1 + 32), "bypass-limit");
    uint64_t v8 = OSLogHandleForIDSCategory("IDQuery");
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = IDSLoggableDescriptionForHandlesOnService(v124, v125);
      uint64_t v11 = objc_claimAutoreleasedReturnValue(v10);
      uint64_t v12 = (void *)v11;
      uint64_t v13 = @"NO";
      *(_DWORD *)buf = 138413570;
      uint64_t v156 = v125;
      if (v116) {
        uint64_t v14 = @"YES";
      }
      else {
        uint64_t v14 = @"NO";
      }
      if (v7) {
        uint64_t v15 = @"YES";
      }
      else {
        uint64_t v15 = @"NO";
      }
      if (v115) {
        uint64_t v13 = @"YES";
      }
      __int16 v157 = 2112;
      uint64_t v158 = (uint64_t)v121;
      __int16 v159 = 2112;
      uint64_t v160 = v11;
      __int16 v161 = 2112;
      v162 = v14;
      __int16 v163 = 2112;
      v164 = v15;
      __int16 v165 = 2112;
      v166 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "*** Incoming ID status query  (service: %@)  (transactionID: %@)  (destinations: %@)   (sb: %@)  (force: %@) (bypass limit: %@)",  buf,  0x3Eu);
    }

    if (os_log_shim_legacy_logging_enabled(v16))
    {
      uint64_t v17 = IDSLoggableDescriptionForHandlesOnService(v124, v125);
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
      uint64_t v19 = v116 ? @"YES" : @"NO";
      uint64_t v20 = v7 ? @"YES" : @"NO";
      uint64_t v21 = v115 ? @"YES" : @"NO";
      MarcoLogMadridLevel( @"IDSDaemonMIGQueryInterface",  0LL,  @"IDQuery",  @"*** Incoming ID status query  (service: %@)  (transactionID: %@)  (destinations: %@)   (sb: %@)  (force: %@) (bypass limit: %@)");

      uint64_t v22 = IDSLoggableDescriptionForHandlesOnService(v124, v125);
      uint64_t v106 = v20;
      id v107 = v21;
      NSUInteger v104 = (void *)objc_claimAutoreleasedReturnValue(v22);
      uint64_t v105 = v19;
      IMLogString( 0LL,  @"IDSIDQuery",  @"IDS",  @"IDQuery",  @"*** Incoming ID status query  (service: %@)  (transactionID: %@)  (destinations: %@)   (sb: %@)  (force: %@) (bypass limit: %@)");

      if ((_IMWillLog(@"IDQuery", v23) & 1) != 0)
      {
        uint64_t v24 = IDSLoggableDescriptionForHandlesOnService(v124, v125);
        uint64_t v106 = v20;
        id v107 = v21;
        NSUInteger v104 = (void *)objc_claimAutoreleasedReturnValue(v24);
        uint64_t v105 = v19;
        _IMAlwaysLog( 0LL,  @"IDQuery",  @"*** Incoming ID status query  (service: %@)  (transactionID: %@)  (destinations: %@)   (sb: %@)  (force: %@) (bypass limit: %@)");
      }
    }

    IMInsertNSStringsToXPCDictionary(v142[5], "service");
    IMInsertNSStringsToXPCDictionary(v142[5], "transactionID");
    uint64_t v119 = (void *)objc_claimAutoreleasedReturnValue(+[IDSURI URIWithUnprefixedURI:](&OBJC_CLASS___IDSURI, "URIWithUnprefixedURI:", v118, v121, 0LL));
    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDServiceController sharedInstance](&OBJC_CLASS___IDSDServiceController, "sharedInstance"));
    __int128 v122 = (void *)objc_claimAutoreleasedReturnValue([v25 serviceWithIdentifier:v125]);

    uint64_t v114 = (void *)objc_claimAutoreleasedReturnValue([v122 queryService]);
    uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
    uint64_t v117 = (void *)objc_claimAutoreleasedReturnValue([v26 accountsOnService:v122]);

    uint64_t v27 = OSLogHandleForIDSCategory("IDQuery");
    int v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      uint64_t v156 = v122;
      __int16 v157 = 2112;
      uint64_t v158 = (uint64_t)v125;
      _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "Found service %@ for serviceName %@",  buf,  0x16u);
    }

    id v30 = v125;
    if (os_log_shim_legacy_logging_enabled(v29))
    {
      MarcoLogMadridLevel( @"IDSDaemonMIGQueryInterface",  0LL,  @"IDQuery",  @"Found service %@ for serviceName %@");
      uint64_t v95 = v122;
      id v102 = v125;
      IMLogString( 0LL,  @"IDSIDQuery",  @"IDS",  @"IDQuery",  @"Found service %@ for serviceName %@");
      if ((_IMWillLog(@"IDQuery", v31) & 1) != 0)
      {
        uint64_t v95 = v122;
        id v102 = v125;
        _IMAlwaysLog(0LL, @"IDQuery", @"Found service %@ for serviceName %@");
      }
    }

    uint64_t v113 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v124, "__imArrayByApplyingBlock:", &stru_100900CA0, v95, v102, v104, v105, v106, v107));
    __int128 v123 = (void *)objc_claimAutoreleasedReturnValue( +[IDSQueryUtilities accountToQueryFrom:fromURI:destinationURIs:allowLocalAccount:]( &OBJC_CLASS___IDSQueryUtilities,  "accountToQueryFrom:fromURI:destinationURIs:allowLocalAccount:",  v117,  v119));
    if (!v123)
    {
      uint64_t v32 = OSLogHandleForIDSCategory("IDQuery");
      uint64_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v156 = v125;
        _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "No registered account for service %@",  buf,  0xCu);
      }

      id v30 = v125;
      if (os_log_shim_legacy_logging_enabled(v34))
      {
        MarcoLogMadridLevel( @"IDSDaemonMIGQueryInterface",  0LL,  @"IDQuery",  @"No registered account for service %@");
        uint64_t v96 = v125;
        IMLogString( 0LL,  @"IDSIDQuery",  @"IDS",  @"IDQuery",  @"No registered account for service %@");
        if ((_IMWillLog(@"IDQuery", v35) & 1) != 0)
        {
          uint64_t v96 = v125;
          _IMAlwaysLog(0LL, @"IDQuery", @"No registered account for service %@");
        }
      }
    }

    uint64_t v120 = (void *)objc_claimAutoreleasedReturnValue( +[IDSQueryUtilities prefixedAliasStringToQueryFrom:withPreferredFromURI:]( &OBJC_CLASS___IDSQueryUtilities,  "prefixedAliasStringToQueryFrom:withPreferredFromURI:",  v123,  v119,  v96));
    if (!v123) {
      goto LABEL_58;
    }
    if (![v120 length])
    {
      uint64_t v36 = OSLogHandleForIDSCategory("IDQuery");
      uint64_t v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v156 = v123;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "No fromURI for account %@", buf, 0xCu);
      }

      id v30 = v125;
      if (os_log_shim_legacy_logging_enabled(v38))
      {
        MarcoLogMadridLevel( @"IDSDaemonMIGQueryInterface",  0LL,  @"IDQuery",  @"No fromURI for account %@");
        id v97 = v123;
        IMLogString(0LL, @"IDSIDQuery", @"IDS", @"IDQuery", @"No fromURI for account %@");
        if ((_IMWillLog(@"IDQuery", v39) & 1) != 0)
        {
          id v97 = v123;
          _IMAlwaysLog(0LL, @"IDQuery", @"No fromURI for account %@");
        }
      }
    }

    if (!objc_msgSend(v120, "length", v97))
    {
LABEL_58:
      uint64_t v53 = OSLogHandleForIDSCategory("IDQuery");
      uint64_t v54 = (os_log_s *)objc_claimAutoreleasedReturnValue(v53);
      if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v156 = v30;
        _os_log_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_DEFAULT,  "No registered account for service after if %@, bailing...",  buf,  0xCu);
      }

      if (os_log_shim_legacy_logging_enabled(v55))
      {
        MarcoLogMadridLevel( @"IDSDaemonMIGQueryInterface",  0LL,  @"IDQuery",  @"No registered account for service after if %@, bailing...");
        id v97 = v125;
        IMLogString( 0LL,  @"IDSIDQuery",  @"IDS",  @"IDQuery",  @"No registered account for service after if %@, bailing...");
        if ((_IMWillLog(@"IDQuery", v56) & 1) != 0)
        {
          id v97 = v125;
          _IMAlwaysLog(0LL, @"IDQuery", @"No registered account for service after if %@, bailing...");
        }
      }

      uint64_t v57 = v142[5];
      uint64_t v147 = IDSIDQueryControllerErrorDestinationSet;
      id v148 = v124;
      uint64_t v58 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v148,  &v147,  1LL,  v97));
      id v99 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSIDQueryControllerErrorDomain,  -3000LL,  v58));
      IMInsertKeyedCodableObjectsToXPCDictionary(v57, "error");

      uint64_t v59 = *(_xpc_connection_s **)(a1 + 40);
      if (v59) {
        xpc_connection_send_message(v59, (xpc_object_t)v142[5]);
      }
      goto LABEL_110;
    }

    uint64_t v40 = OSLogHandleForIDSCategory("IDQuery");
    id v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      uint64_t v156 = v120;
      __int16 v157 = 2112;
      uint64_t v158 = (uint64_t)v123;
      _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEFAULT,  "Using %@ from %@ to perform id query.",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v42))
    {
      MarcoLogMadridLevel( @"IDSDaemonMIGQueryInterface",  0LL,  @"IDQuery",  @"Using %@ from %@ to perform id query.");
      id v97 = v120;
      uint64_t v103 = (uint64_t)v123;
      IMLogString( 0LL,  @"IDSIDQuery",  @"IDS",  @"IDQuery",  @"Using %@ from %@ to perform id query.");
      if ((_IMWillLog(@"IDQuery", v43) & 1) != 0)
      {
        id v97 = v120;
        uint64_t v103 = (uint64_t)v123;
        _IMAlwaysLog(0LL, @"IDQuery", @"Using %@ from %@ to perform id query.");
      }
    }

    id v44 = sub_10011BB60(v124, v123);
    uint64_t v112 = (void *)objc_claimAutoreleasedReturnValue(v44);
    uint64_t v111 = (void *)objc_claimAutoreleasedReturnValue([v123 _registrationCert]);
    if ([v112 count] && v111)
    {
      uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue(+[IMSystemMonitor sharedInstance](&OBJC_CLASS___IMSystemMonitor, "sharedInstance"));
      unsigned int v46 = [v45 isUnderFirstDataProtectionLock];

      if (!v46)
      {
        v136[0] = _NSConcreteStackBlock;
        v136[1] = 3221225472LL;
        v136[2] = sub_100310980;
        v136[3] = &unk_100900CC8;
        uint64_t v140 = &v141;
        id v108 = v114;
        id v137 = v108;
        id v70 = v125;
        id v138 = v70;
        id v139 = *(id *)(a1 + 40);
        uint64_t v109 = objc_retainBlock(v136);
        if (v7)
        {
          if (qword_1009C0B00 != -1) {
            dispatch_once(&qword_1009C0B00, &stru_100900CE8);
          }
          __int128 v134 = 0u;
          __int128 v135 = 0u;
          __int128 v132 = 0u;
          __int128 v133 = 0u;
          id obj = v124;
          id v71 = [obj countByEnumeratingWithState:&v132 objects:v150 count:16];
          if (v71)
          {
            uint64_t v72 = *(void *)v133;
            while (2)
            {
              for (i = 0LL; i != v71; i = (char *)i + 1)
              {
                if (*(void *)v133 != v72) {
                  objc_enumerationMutation(obj);
                }
                uint64_t v74 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%@",  v70,  *(void *)(*((void *)&v132 + 1) + 8LL * (void)i)));
                if (([(id)qword_1009C0AF8 underLimitForItem:v74] & 1) == 0)
                {
                  uint64_t v81 = OSLogHandleForIDSCategory("IDQuery");
                  uint64_t v82 = (os_log_s *)objc_claimAutoreleasedReturnValue(v81);
                  if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)buf = 138412546;
                    uint64_t v156 = v74;
                    __int16 v157 = 2112;
                    uint64_t v158 = qword_1009C0AF8;
                    _os_log_impl( (void *)&_mh_execute_header,  v82,  OS_LOG_TYPE_DEFAULT,  "Tried forcing, however this destination is not under the limit {destString: %@, rateLimiter: %@}",  buf,  0x16u);
                  }

                  if (os_log_shim_legacy_logging_enabled(v83))
                  {
                    MarcoLogMadridLevel( @"IDSDaemonMIGQueryInterface",  0LL,  @"IDQuery",  @"Tried forcing, however this destination is not under the limit {destString: %@, rateLimiter: %@}");
                    id v97 = v74;
                    uint64_t v103 = qword_1009C0AF8;
                    IMLogString( 0LL,  @"IDSIDQuery",  @"IDS",  @"IDQuery",  @"Tried forcing, however this destination is not under the limit {destString: %@, rateLimiter: %@}");
                    if ((_IMWillLog(@"IDQuery", v84) & 1) != 0)
                    {
                      id v97 = v74;
                      uint64_t v103 = qword_1009C0AF8;
                      _IMAlwaysLog( 0LL,  @"IDQuery",  @"Tried forcing, however this destination is not under the limit {destString: %@, rateLimiter: %@}");
                    }
                  }

                  char v80 = 0;
                  goto LABEL_104;
                }
              }

              id v71 = [obj countByEnumeratingWithState:&v132 objects:v150 count:16];
              if (v71) {
                continue;
              }
              break;
            }
          }

          __int128 v130 = 0u;
          __int128 v131 = 0u;
          __int128 v128 = 0u;
          __int128 v129 = 0u;
          id v75 = obj;
          id v76 = [v75 countByEnumeratingWithState:&v128 objects:v149 count:16];
          if (v76)
          {
            uint64_t v77 = *(void *)v129;
            do
            {
              for (j = 0LL; j != v76; j = (char *)j + 1)
              {
                if (*(void *)v129 != v77) {
                  objc_enumerationMutation(v75);
                }
                uint64_t v79 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%@",  v70,  *(void *)(*((void *)&v128 + 1) + 8LL * (void)j)));
                [(id)qword_1009C0AF8 noteItem:v79];
              }

              id v76 = [v75 countByEnumeratingWithState:&v128 objects:v149 count:16];
            }

            while (v76);
          }

          char v80 = 1;
LABEL_104:
        }

        else
        {
          char v80 = 0;
        }

        v126[0] = _NSConcreteStackBlock;
        v126[1] = 3221225472LL;
        v126[2] = sub_100310EF4;
        void v126[3] = &unk_1008F64D0;
        id v85 = v108;
        id v127 = v85;
        uint64_t v86 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v112, "__imArrayByApplyingBlock:", v126));
        if (v116)
        {
          uint64_t v87 = (void *)objc_claimAutoreleasedReturnValue( +[IDSServerBag sharedInstanceForBagType:]( &OBJC_CLASS___IDSServerBag,  "sharedInstanceForBagType:",  0LL));
          uint64_t v88 = (void *)objc_claimAutoreleasedReturnValue([v87 objectForKey:@"vc-disable-springboard-queries"]);
          unsigned int v89 = [v88 BOOLValue];

          uint64_t v90 = v89 ^ 1;
        }

        else
        {
          uint64_t v90 = 1LL;
        }

        uint64_t v91 = (void *)objc_claimAutoreleasedReturnValue( +[IDSIDStatusQueryController sharedInstance]( &OBJC_CLASS___IDSIDStatusQueryController,  "sharedInstance",  v97,  v103));
        uint64_t v92 = (void *)objc_claimAutoreleasedReturnValue( +[IDSURI URIWithUnprefixedURI:withServiceLoggingHint:]( &OBJC_CLASS___IDSURI,  "URIWithUnprefixedURI:withServiceLoggingHint:",  v120,  v85));
        id v93 = sub_100310F0C(@"IDStatus", *(void **)(a1 + 40), *(void *)(a1 + 32));
        uint64_t v94 = (void *)objc_claimAutoreleasedReturnValue(v93);
        BYTE1(v101) = v115;
        LOBYTE(v101) = v80;
        objc_msgSend( v91,  "requestIDStatusForIDs:fromIdentity:fromURI:fromService:lightQuery:allowQuery:forceQuery:bypassLimit:reason:completionBlock:",  v86,  v111,  v92,  v85,  1,  v90,  v101,  v94,  v109);

        goto LABEL_109;
      }

      uint64_t v47 = OSLogHandleForIDSCategory("Warning");
      unsigned int v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(v47);
      if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v156 = v124;
        _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_ERROR,  "Querying %@ while under first unlock, bailing...",  buf,  0xCu);
      }

      if (os_log_shim_legacy_logging_enabled(v49))
      {
        MarcoLogMadridLevel( @"IDSDaemonMIGQueryInterface",  0LL,  @"IDQuery",  @"Querying %@ while under first unlock, bailing...");
        IMLogString( 0LL,  @"IDSIDQuery",  @"IDS",  @"IDQuery",  @"Querying %@ while under first unlock, bailing...");
        id v97 = v124;
        _IMWarn(@"Querying %@ while under first unlock, bailing...");
      }

      uint64_t v50 = v142[5];
      uint64_t v51 = v124;
      if (!v124) {
        uint64_t v51 = &__NSArray0__struct;
      }
      uint64_t v151 = IDSIDQueryControllerErrorDestinationSet;
      id v152 = v51;
      unsigned __int8 v52 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v152,  &v151,  1LL,  v97,  v103));
      uint64_t v98 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSIDQueryControllerErrorDomain,  -4000LL,  v52));
      IMInsertKeyedCodableObjectsToXPCDictionary(v50, "error");
    }

    else
    {
      uint64_t v63 = OSLogHandleForIDSCategory("Warning");
      id v64 = (os_log_s *)objc_claimAutoreleasedReturnValue(v63);
      if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v156 = v124;
        _os_log_impl( (void *)&_mh_execute_header,  v64,  OS_LOG_TYPE_ERROR,  "No URIs or cert after filtering destinations %@, bailing...",  buf,  0xCu);
      }

      if (os_log_shim_legacy_logging_enabled(v65))
      {
        MarcoLogMadridLevel( @"IDSDaemonMIGQueryInterface",  0LL,  @"IDQuery",  @"No URIs or cert after filtering destinations %@, bailing...");
        IMLogString( 0LL,  @"IDSIDQuery",  @"IDS",  @"IDQuery",  @"No URIs or cert after filtering destinations %@, bailing...");
        id v97 = v124;
        _IMWarn(@"No URIs or cert after filtering destinations %@, bailing...");
      }

      uint64_t v66 = v142[5];
      uint64_t v67 = v124;
      if (!v124) {
        uint64_t v67 = &__NSArray0__struct;
      }
      uint64_t v153 = IDSIDQueryControllerErrorDestinationSet;
      uint64_t v154 = v67;
      uint64_t v68 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v154,  &v153,  1LL,  v97,  v103));
      id v100 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSIDQueryControllerErrorDomain,  -3000LL,  v68));
      IMInsertKeyedCodableObjectsToXPCDictionary(v66, "error");
    }

    unsigned __int8 v69 = *(_xpc_connection_s **)(a1 + 40);
    if (v69) {
      xpc_connection_send_message(v69, (xpc_object_t)v142[5]);
    }
LABEL_109:

LABEL_110:
    goto LABEL_111;
  }

  uint64_t v60 = OSLogHandleForIDSCategory("Warning");
  uint64_t v61 = (os_log_s *)objc_claimAutoreleasedReturnValue(v60);
  if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v61,  OS_LOG_TYPE_ERROR,  "Could not create reply message for cached id status query",  buf,  2u);
  }

  if (os_log_shim_legacy_logging_enabled(v62))
  {
    MarcoLogMadridLevel( @"IDSDaemonMIGQueryInterface",  0LL,  @"IDQuery",  @"Could not create reply message for cached id status query");
    IMLogString( 0LL,  @"IDSIDQuery",  @"IDS",  @"IDQuery",  @"Could not create reply message for cached id status query");
    _IMWarn(@"Could not create reply message for cached id status query");
  }

LABEL_111:
  _Block_object_dispose(&v141, 8);
}

          v552 = (char *)((v347 - 1) & v347);
          v553 = v348;
          v345 = __clz(__rbit64(v347)) + (v348 << 6);
        }

        v350 = v546;
        sub_1003F5FC8(v335[6] + *(void *)(v550 + 72) * v345, v546, v344);
        sub_1003F600C(v350, v133, v344);
        v351 = v133 + *(int *)(v551 + 52);
        if ((*(_BYTE *)(v351 + 8) & 1) == 0 && *(void *)v351 == v132[4]) {
          break;
        }
        sub_1003F5FC8(v133, v337, v344);
        v371 = swift_retain_n(v132, 2LL);
        v372 = (os_log_s *)Logger.logObject.getter(v371);
        v373 = v344;
        v374 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v372, v374))
        {
          v375 = swift_slowAlloc(32LL, -1LL);
          v376 = swift_slowAlloc(96LL, -1LL);
          v558[0] = v376;
          *(_DWORD *)v375 = v535;
          *(void *)(v375 + 4) = sub_1003FFBB0(0xD00000000000002ELL, (unint64_t)v533, v558);
          *(_WORD *)(v375 + 12) = 2080;
          v377 = *(uint64_t (**)(uint64_t))(*v132 + 176LL);
          v378 = swift_retain(v132);
          v379 = v377(v378);
          v381 = v380;
          swift_release(v132);
          *(void *)(v375 + 14) = sub_1003FFBB0(v379, v381, v558);
          swift_release_n(v132, 2LL);
          swift_bridgeObjectRelease(v381);
          *(_WORD *)(v375 + 22) = 2080;
          v383 = type metadata accessor for UUID(0LL, v382);
          v384 = sub_10040A2B0( &qword_1009B95C0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          v385 = v383;
          v337 = (uint64_t)v543;
          v386 = dispatch thunk of CustomStringConvertible.description.getter(v385, v384);
          v388 = v387;
          *(void *)(v375 + 24) = sub_1003FFBB0(v386, v387, v558);
          swift_bridgeObjectRelease(v388);
          sub_1003F6050(v337, v373);
          _os_log_impl( (void *)&_mh_execute_header,  v372,  v374,  "%s: participant: %s should include cached MKI %s",  (uint8_t *)v375,  0x20u);
          swift_arrayDestroy(v376, 3LL, v532);
          v389 = v376;
          __int128 v133 = (uint64_t)v541;
          swift_slowDealloc(v389, -1LL, -1LL);
          v390 = v375;
          v338 = v540;
          swift_slowDealloc(v390, -1LL, -1LL);
        }

        else
        {
          swift_release_n(v132, 2LL);

          sub_1003F6050(v337, v373);
        }

        v344 = v373;
        v391 = v539;
        sub_100410FD0(v548, v539, &qword_1009B99D8);
        v392 = v549;
        if (v554((char *)v391, 1LL, v549) == 1)
        {
          sub_1003F6050(v133, v373);
          sub_10040A274(v391, &qword_1009B99D8);
          goto LABEL_95;
        }

        v393 = v391;
        v394 = v534;
        sub_1003F600C(v393, v534, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
        v395 = sub_10042F48C(v133, v394 + *(int *)(v392 + 24));
        if (!v395)
        {
          sub_1003F6050(v394, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
LABEL_124:
          sub_1003F6050(v133, v344);
          goto LABEL_95;
        }

        v396 = v395;
        if ((swift_isUniquelyReferenced_nonNull_native(v542) & 1) != 0) {
          v397 = v542;
        }
        else {
          v397 = sub_100432F18(0LL, v542[2] + 1LL, 1, v542);
        }
        v399 = v397[2];
        v398 = v397[3];
        v400 = v534;
        if (v399 >= v398 >> 1)
        {
          v397 = sub_100432F18((void *)(v398 > 1), v399 + 1, 1, v397);
          v400 = v534;
        }

        v397[2] = v399 + 1;
        v542 = v397;
        v397[v399 + 4] = v396;
        sub_1003F6050(v400, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
        sub_1003F6050(v133, v373);
        v338 = v540;
LABEL_95:
        v335 = v545;
        v343 = (unint64_t)v552;
        v339 = v553;
      }

      sub_1003F5FC8(v133, v338, v344);
      v352 = swift_retain_n(v132, 2LL);
      v353 = (os_log_s *)Logger.logObject.getter(v352);
      v354 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v353, v354))
      {
        v355 = swift_slowAlloc(32LL, -1LL);
        v356 = swift_slowAlloc(96LL, -1LL);
        v558[0] = v356;
        *(_DWORD *)v355 = v535;
        *(void *)(v355 + 4) = sub_1003FFBB0(0xD00000000000002ELL, v525 | 0x8000000000000000LL, v558);
        *(_WORD *)(v355 + 12) = 2080;
        v357 = *(uint64_t (**)(uint64_t))(*v132 + 176LL);
        v358 = swift_retain(v132);
        v359 = v357(v358);
        v361 = v360;
        swift_release(v132);
        *(void *)(v355 + 14) = sub_1003FFBB0(v359, v361, v558);
        swift_release_n(v132, 2LL);
        swift_bridgeObjectRelease(v361);
        *(_WORD *)(v355 + 22) = 2080;
        v363 = type metadata accessor for UUID(0LL, v362);
        v364 = sub_10040A2B0( &qword_1009B95C0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        v365 = v363;
        v337 = (uint64_t)v543;
        v366 = dispatch thunk of CustomStringConvertible.description.getter(v365, v364);
        v368 = v367;
        *(void *)(v355 + 24) = sub_1003FFBB0(v366, v367, v558);
        swift_bridgeObjectRelease(v368);
        sub_1003F6050(v540, v344);
        _os_log_impl( (void *)&_mh_execute_header,  v353,  v354,  "%s: participant: %s should not include its own MKI %s",  (uint8_t *)v355,  0x20u);
        swift_arrayDestroy(v356, 3LL, (char *)&type metadata for Any + 8);
        v369 = v356;
        __int128 v133 = (uint64_t)v541;
        swift_slowDealloc(v369, -1LL, -1LL);
        v370 = v355;
        v338 = v540;
        swift_slowDealloc(v370, -1LL, -1LL);
      }

      else
      {
        swift_release_n(v132, 2LL);
        sub_1003F6050(v338, v344);
      }

      goto LABEL_124;
    }
  }

  else
  {
    sub_10040A274(v326, &qword_1009B8E08);
  }

void sub_1003107B0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
}

uint64_t sub_100310958(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100310968(uint64_t a1)
{
}

id sub_100310970(id a1, NSString *a2)
{
  return +[IDSURI URIWithUnprefixedURI:](&OBJC_CLASS___IDSURI, "URIWithUnprefixedURI:", a2);
}

void sub_100310980(void *a1, void *a2, void *a3, void *a4, int a5, void *a6)
{
  id v11 = a2;
  id v12 = a3;
  id v13 = a4;
  id v14 = a6;
  uint64_t v15 = OSLogHandleForIDSCategory("IDQuery");
  uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v17 = @"NO";
    if (a5) {
      uint64_t v18 = @"YES";
    }
    else {
      uint64_t v18 = @"NO";
    }
    if (*(void *)(*(void *)(a1[7] + 8LL) + 40LL)) {
      uint64_t v17 = @"YES";
    }
    *(_DWORD *)buf = 138413570;
    id v49 = v11;
    __int16 v50 = 2112;
    id v51 = v12;
    __int16 v52 = 2112;
    id v53 = v13;
    __int16 v54 = 2112;
    uint64_t v55 = v18;
    __int16 v56 = 2112;
    id v57 = v14;
    __int16 v58 = 2112;
    uint64_t v59 = v17;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Received status query updates (idStatusUpdates: %@)  (updateFromURI: %@)  (updateService: %@)  (success: %@)  (err or: %@) - replyMessage? %@",  buf,  0x3Eu);
  }

  if (os_log_shim_legacy_logging_enabled(v19))
  {
    uint64_t v20 = a5 ? @"YES" : @"NO";
    MarcoLogMadridLevel( @"IDSDaemonMIGQueryInterface",  0LL,  @"IDQuery",  @"Received status query updates (idStatusUpdates: %@)  (updateFromURI: %@)  (updateService: %@)  (success: %@)  (error: %@) - replyMessage? %@");
    uint64_t v21 = *(void *)(*(void *)(a1[7] + 8LL) + 40LL) ? @"YES" : @"NO";
    id v46 = v14;
    uint64_t v47 = v21;
    id v44 = v13;
    uint64_t v45 = v20;
    id v39 = v11;
    id v43 = v12;
    IMLogString( 0LL,  @"IDSIDQuery",  @"IDS",  @"IDQuery",  @"Received status query updates (idStatusUpdates: %@)  (updateFromURI: %@)  (updateService: %@)  (success: %@)  (error: %@) - replyMessage? %@");
    if ((_IMWillLog(@"IDQuery", v22) & 1) != 0)
    {
      if (*(void *)(*(void *)(a1[7] + 8LL) + 40LL)) {
        uint64_t v23 = @"YES";
      }
      else {
        uint64_t v23 = @"NO";
      }
      id v46 = v14;
      uint64_t v47 = (__CFString *)v23;
      id v44 = v13;
      uint64_t v45 = v20;
      id v39 = v11;
      id v43 = v12;
      _IMAlwaysLog( 0LL,  @"IDQuery",  @"Received status query updates (idStatusUpdates: %@)  (updateFromURI: %@)  (updateService: %@)  (success: %@)  (error: %@) - replyMessage? %@");
    }
  }

  if (*(void *)(*(void *)(a1[7] + 8LL) + 40LL))
  {
    uint64_t v24 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKey:a1[4]]);
    if (v25) {
      -[NSMutableDictionary setObject:forKey:](v24, "setObject:forKey:", v25, a1[5]);
    }
    if (-[NSMutableDictionary count](v24, "count", v39, v43, v44, v45, v46, v47))
    {
      uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  v24,  1LL,  0LL));
      IMInsertDatasToXPCDictionary(*(void *)(*(void *)(a1[7] + 8LL) + 40LL), "destinations");
    }

    uint64_t v26 = OSLogHandleForIDSCategory("IDQuery");
    uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v28 = IDSLoggableDescriptionForObjectOnService(v11, a1[4]);
      uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
      *(_DWORD *)buf = 138412290;
      id v49 = v29;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Sending id status results %@", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v30))
    {
      uint64_t v31 = IDSLoggableDescriptionForObjectOnService(v11, a1[4]);
      uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
      MarcoLogMadridLevel( @"IDSDaemonMIGQueryInterface",  0LL,  @"IDQuery",  @"Sending id status results %@");

      uint64_t v33 = IDSLoggableDescriptionForObjectOnService(v11, a1[4]);
      id v41 = (void *)objc_claimAutoreleasedReturnValue(v33);
      IMLogString(0LL, @"IDSIDQuery", @"IDS", @"IDQuery", @"Sending id status results %@");

      if ((_IMWillLog(@"IDQuery", v34) & 1) != 0)
      {
        uint64_t v35 = IDSLoggableDescriptionForObjectOnService(v11, a1[4]);
        uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue(v35);
        _IMAlwaysLog(0LL, @"IDQuery", @"Sending id status results %@");
      }
    }

    uint64_t v36 = (_xpc_connection_s *)a1[6];
    if (v36) {
      xpc_connection_send_message(v36, *(xpc_object_t *)(*(void *)(a1[7] + 8LL) + 40LL));
    }
    uint64_t v37 = *(void *)(a1[7] + 8LL);
    uint64_t v38 = *(void **)(v37 + 40);
    *(void *)(v37 + 40) = 0LL;
  }
}

void sub_100310E0C(id a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[IDSServerBag sharedInstanceForBagType:](&OBJC_CLASS___IDSServerBag, "sharedInstanceForBagType:", 0LL));
  id v9 = (id)objc_claimAutoreleasedReturnValue([v1 objectForKey:@"client-query-max-per-uri"]);

  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[IDSServerBag sharedInstanceForBagType:](&OBJC_CLASS___IDSServerBag, "sharedInstanceForBagType:", 0LL));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKey:@"client-query-max-time-range"]);

  if (!v9)
  {
    uint64_t v4 = 6LL;
    if (v3) {
      goto LABEL_3;
    }
LABEL_5:
    double v6 = 82800.0;
    goto LABEL_6;
  }

  uint64_t v4 = (uint64_t)[v9 integerValue];
  if (!v3) {
    goto LABEL_5;
  }
LABEL_3:
  [v3 doubleValue];
  double v6 = v5;
LABEL_6:
  int v7 = -[IDSRateLimiter initWithLimit:timeLimit:]( objc_alloc(&OBJC_CLASS___IDSRateLimiter),  "initWithLimit:timeLimit:",  v4,  v6);
  uint64_t v8 = (void *)qword_1009C0AF8;
  qword_1009C0AF8 = (uint64_t)v7;
}

IDSURI *sub_100310EF4(uint64_t a1, uint64_t a2)
{
  return +[IDSURI URIWithUnprefixedURI:withServiceLoggingHint:]( &OBJC_CLASS___IDSURI,  "URIWithUnprefixedURI:withServiceLoggingHint:",  a2,  *(void *)(a1 + 32));
}

id sub_100310F0C(void *a1, void *a2, uint64_t a3)
{
  id v5 = a1;
  double v6 = a2;
  uint64_t v7 = IMGetXPCStringFromDictionary(a3, "processName");
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  if (v8) {
    id v9 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@[%@]", v5, v8);
  }
  else {
    id v9 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@[%llu]",  v5,  xpc_connection_get_pid(v6));
  }
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);

  return v10;
}

void sub_100310FC0(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___IDSStatusQueryQueue);
  uint64_t v2 = (void *)qword_1009C0AE8;
  qword_1009C0AE8 = (uint64_t)v1;
}

void sub_100310FE8(uint64_t a1)
{
  uint64_t v117 = 0LL;
  __int128 v118 = &v117;
  uint64_t v119 = 0x3032000000LL;
  uint64_t v120 = sub_100310958;
  id v121 = sub_100310968;
  id reply = (id)0xAAAAAAAAAAAAAAAALL;
  id reply = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 32));
  if (v118[5])
  {
    uint64_t v2 = IMGetXPCStringFromDictionary(*(void *)(a1 + 32), "transactionID");
    uint64_t v110 = (void *)objc_claimAutoreleasedReturnValue(v2);
    uint64_t v3 = IMGetXPCStringFromDictionary(*(void *)(a1 + 32), "service");
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    uint64_t v5 = IMGetXPCStringFromDictionary(*(void *)(a1 + 32), "from");
    id v108 = (void *)objc_claimAutoreleasedReturnValue(v5);
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDestination classesForStrictUnarchiving]( &OBJC_CLASS___IDSDestination,  "classesForStrictUnarchiving"));
    uint64_t v8 = IMGetXPCKeyedCodableFromDictionaryWithSecureCodingAllowedClasses(v6, "destination", v7);
    id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);

    int v105 = IMGetXPCBoolFromDictionary(*(void *)(a1 + 32), "is-springboard");
    int v100 = IMGetXPCBoolFromDictionary(*(void *)(a1 + 32), "disallow-query");
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 destinationURIs]);
    uint64_t v109 = (void *)objc_claimAutoreleasedReturnValue([v10 allObjects]);

    uint64_t v11 = OSLogHandleForIDSCategory("IDQuery");
    id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      id v13 = (void *)objc_claimAutoreleasedReturnValue([v9 destinationURIs]);
      id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 allObjects]);
      uint64_t v15 = IDSLoggableDescriptionForHandlesOnService(v14, v4);
      uint64_t v16 = objc_claimAutoreleasedReturnValue(v15);
      uint64_t v17 = (void *)v16;
      uint64_t v18 = @"NO";
      *(_DWORD *)buf = 138413058;
      __int128 v130 = v4;
      if (v105) {
        uint64_t v18 = @"YES";
      }
      __int16 v131 = 2112;
      __int128 v132 = v110;
      __int16 v133 = 2112;
      uint64_t v134 = v16;
      __int16 v135 = 2112;
      uint64_t v136 = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "*** Incoming ID status query  (service: %@)  (transactionID: %@)  (destinations: %@)   (sb: %@)",  buf,  0x2Au);
    }

    if (os_log_shim_legacy_logging_enabled(v19))
    {
      uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v9 destinationURIs]);
      uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v20 allObjects]);
      uint64_t v22 = IDSLoggableDescriptionForHandlesOnService(v21, v4);
      uint64_t v23 = objc_claimAutoreleasedReturnValue(v22);
      uint64_t v24 = (void *)v23;
      uint64_t v25 = v105 ? @"YES" : @"NO";
      uint64_t v96 = v23;
      MarcoLogMadridLevel( @"IDSDaemonMIGQueryInterface",  0LL,  @"IDQuery",  @"*** Incoming ID status query  (service: %@)  (transactionID: %@)  (destinations: %@)   (sb: %@)");

      uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "destinationURIs", v4, v110, v96, v25));
      uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v26 allObjects]);
      uint64_t v28 = IDSLoggableDescriptionForHandlesOnService(v27, v4);
      uint64_t v95 = (void *)objc_claimAutoreleasedReturnValue(v28);
      id v97 = v25;
      IMLogString( 0LL,  @"IDSIDQuery",  @"IDS",  @"IDQuery",  @"*** Incoming ID status query  (service: %@)  (transactionID: %@)  (destinations: %@)   (sb: %@)");

      if ((_IMWillLog(@"IDQuery", v29) & 1) != 0)
      {
        uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "destinationURIs", v4, v110, v95, v25));
        uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v30 allObjects]);
        uint64_t v32 = IDSLoggableDescriptionForHandlesOnService(v31, v4);
        uint64_t v95 = (void *)objc_claimAutoreleasedReturnValue(v32);
        id v97 = v25;
        _IMAlwaysLog( 0LL,  @"IDQuery",  @"*** Incoming ID status query  (service: %@)  (transactionID: %@)  (destinations: %@)   (sb: %@)");
      }
    }

    IMInsertNSStringsToXPCDictionary(v118[5], "service");
    IMInsertNSStringsToXPCDictionary(v118[5], "transactionID");
    uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue(+[IDSURI URIWithUnprefixedURI:](&OBJC_CLASS___IDSURI, "URIWithUnprefixedURI:", v108, v110, 0LL));
    uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDServiceController sharedInstance](&OBJC_CLASS___IDSDServiceController, "sharedInstance"));
    uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([v34 serviceWithIdentifier:v4]);

    NSUInteger v104 = (void *)objc_claimAutoreleasedReturnValue([v35 queryService]);
    uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
    id v107 = (void *)objc_claimAutoreleasedReturnValue([v36 accountsOnService:v35]);

    uint64_t v37 = OSLogHandleForIDSCategory("IDQuery");
    uint64_t v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      __int128 v130 = v35;
      __int16 v131 = 2112;
      __int128 v132 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEFAULT,  "Found service %@ for serviceName %@",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v39))
    {
      MarcoLogMadridLevel( @"IDSDaemonMIGQueryInterface",  0LL,  @"IDQuery",  @"Found service %@ for serviceName %@");
      uint64_t v87 = v35;
      id v93 = v4;
      IMLogString( 0LL,  @"IDSIDQuery",  @"IDS",  @"IDQuery",  @"Found service %@ for serviceName %@");
      if ((_IMWillLog(@"IDQuery", v40) & 1) != 0)
      {
        uint64_t v87 = v35;
        id v93 = v4;
        _IMAlwaysLog(0LL, @"IDQuery", @"Found service %@ for serviceName %@");
      }
    }

    uint64_t v103 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v109, "__imArrayByApplyingBlock:", &stru_100900D28, v87, v93, v95, v97));
    id v41 = (void *)objc_claimAutoreleasedReturnValue( +[IDSQueryUtilities accountToQueryFrom:fromURI:destinationURIs:allowLocalAccount:]( &OBJC_CLASS___IDSQueryUtilities,  "accountToQueryFrom:fromURI:destinationURIs:allowLocalAccount:",  v107,  v33));
    if (!v41)
    {
      uint64_t v42 = OSLogHandleForIDSCategory("IDQuery");
      id v43 = (os_log_s *)objc_claimAutoreleasedReturnValue(v42);
      if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        __int128 v130 = v4;
        _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEFAULT,  "No registered account for service %@",  buf,  0xCu);
      }

      if (os_log_shim_legacy_logging_enabled(v44))
      {
        MarcoLogMadridLevel( @"IDSDaemonMIGQueryInterface",  0LL,  @"IDQuery",  @"No registered account for service %@");
        uint64_t v88 = v4;
        IMLogString( 0LL,  @"IDSIDQuery",  @"IDS",  @"IDQuery",  @"No registered account for service %@");
        if ((_IMWillLog(@"IDQuery", v45) & 1) != 0)
        {
          uint64_t v88 = v4;
          _IMAlwaysLog(0LL, @"IDQuery", @"No registered account for service %@");
        }
      }
    }

    id v46 = (void *)objc_claimAutoreleasedReturnValue( +[IDSQueryUtilities prefixedAliasStringToQueryFrom:withPreferredFromURI:]( &OBJC_CLASS___IDSQueryUtilities,  "prefixedAliasStringToQueryFrom:withPreferredFromURI:",  v41,  v33,  v88));
    uint64_t v47 = v46;
    if (!v41) {
      goto LABEL_45;
    }
    if (![v46 length])
    {
      uint64_t v48 = OSLogHandleForIDSCategory("IDQuery");
      id v49 = (os_log_s *)objc_claimAutoreleasedReturnValue(v48);
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        __int128 v130 = v41;
        _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "No fromURI for account %@", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled(v50))
      {
        MarcoLogMadridLevel( @"IDSDaemonMIGQueryInterface",  0LL,  @"IDQuery",  @"No fromURI for account %@");
        unsigned int v89 = v41;
        IMLogString(0LL, @"IDSIDQuery", @"IDS", @"IDQuery", @"No fromURI for account %@");
        if ((_IMWillLog(@"IDQuery", v51) & 1) != 0)
        {
          unsigned int v89 = v41;
          _IMAlwaysLog(0LL, @"IDQuery", @"No fromURI for account %@");
        }
      }
    }

    if (!objc_msgSend(v47, "length", v89))
    {
LABEL_45:
      uint64_t v63 = OSLogHandleForIDSCategory("IDQuery");
      id v64 = (os_log_s *)objc_claimAutoreleasedReturnValue(v63);
      if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        __int128 v130 = v4;
        _os_log_impl( (void *)&_mh_execute_header,  v64,  OS_LOG_TYPE_DEFAULT,  "No registered account for service after if %@, bailing...",  buf,  0xCu);
      }

      if (os_log_shim_legacy_logging_enabled(v65))
      {
        MarcoLogMadridLevel( @"IDSDaemonMIGQueryInterface",  0LL,  @"IDQuery",  @"No registered account for service after if %@, bailing...");
        unsigned int v89 = v4;
        IMLogString( 0LL,  @"IDSIDQuery",  @"IDS",  @"IDQuery",  @"No registered account for service after if %@, bailing...");
        if ((_IMWillLog(@"IDQuery", v66) & 1) != 0)
        {
          unsigned int v89 = v4;
          _IMAlwaysLog(0LL, @"IDQuery", @"No registered account for service after if %@, bailing...");
        }
      }

      uint64_t v67 = v118[5];
      uint64_t v123 = IDSIDQueryControllerErrorDestinationSet;
      uint64_t v124 = v109;
      uint64_t v68 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v124,  &v123,  1LL,  v89));
      uint64_t v90 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSIDQueryControllerErrorDomain,  -3000LL,  v68));
      IMInsertKeyedCodableObjectsToXPCDictionary(v67, "error");

      unsigned __int8 v69 = *(_xpc_connection_s **)(a1 + 40);
      if (v69) {
        xpc_connection_send_message(v69, (xpc_object_t)v118[5]);
      }
      goto LABEL_73;
    }

    uint64_t v52 = OSLogHandleForIDSCategory("IDQuery");
    id v53 = (os_log_s *)objc_claimAutoreleasedReturnValue(v52);
    if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      __int128 v130 = v47;
      __int16 v131 = 2112;
      __int128 v132 = v41;
      _os_log_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_DEFAULT,  "Using %@ from %@ to perform id query.",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v54))
    {
      MarcoLogMadridLevel( @"IDSDaemonMIGQueryInterface",  0LL,  @"IDQuery",  @"Using %@ from %@ to perform id query.");
      unsigned int v89 = v47;
      uint64_t v94 = v41;
      IMLogString( 0LL,  @"IDSIDQuery",  @"IDS",  @"IDQuery",  @"Using %@ from %@ to perform id query.");
      if ((_IMWillLog(@"IDQuery", v55) & 1) != 0)
      {
        unsigned int v89 = v47;
        uint64_t v94 = v41;
        _IMAlwaysLog(0LL, @"IDQuery", @"Using %@ from %@ to perform id query.");
      }
    }

    id v56 = sub_10011BB60(v109, v41);
    id v102 = (void *)objc_claimAutoreleasedReturnValue(v56);
    uint64_t v101 = (void *)objc_claimAutoreleasedReturnValue([v41 _registrationCert]);
    if ([v102 count] && v101)
    {
      id v57 = (void *)objc_claimAutoreleasedReturnValue(+[IMSystemMonitor sharedInstance](&OBJC_CLASS___IMSystemMonitor, "sharedInstance"));
      unsigned int v58 = [v57 isUnderFirstDataProtectionLock];

      if (!v58)
      {
        v113[0] = _NSConcreteStackBlock;
        v113[1] = 3221225472LL;
        v113[2] = sub_10031210C;
        v113[3] = &unk_100900D50;
        int v116 = &v117;
        id v76 = v104;
        id v114 = v76;
        id v115 = *(id *)(a1 + 40);
        uint64_t v98 = objc_retainBlock(v113);
        v111[0] = _NSConcreteStackBlock;
        v111[1] = 3221225472LL;
        v111[2] = sub_10031256C;
        v111[3] = &unk_1008F64D0;
        id v77 = v76;
        id v112 = v77;
        id v99 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v102, "__imArrayByApplyingBlock:", v111));
        if (v105)
        {
          unsigned int v78 = (void *)objc_claimAutoreleasedReturnValue( +[IDSServerBag sharedInstanceForBagType:]( &OBJC_CLASS___IDSServerBag,  "sharedInstanceForBagType:",  0LL));
          uint64_t v79 = (void *)objc_claimAutoreleasedReturnValue([v78 objectForKey:@"vc-disable-springboard-queries"]);
          unsigned int v106 = [v79 BOOLValue];
        }

        else
        {
          unsigned int v106 = 0;
        }

        uint64_t v82 = (void *)objc_claimAutoreleasedReturnValue( +[IDSIDStatusQueryController sharedInstance]( &OBJC_CLASS___IDSIDStatusQueryController,  "sharedInstance",  v89,  v94));
        uint64_t v83 = (void *)objc_claimAutoreleasedReturnValue( +[IDSURI URIWithUnprefixedURI:withServiceLoggingHint:]( &OBJC_CLASS___IDSURI,  "URIWithUnprefixedURI:withServiceLoggingHint:",  v47,  v77));
        id v84 = sub_100310F0C(@"RemoteDevice", *(void **)(a1 + 40), *(void *)(a1 + 32));
        id v85 = (void *)objc_claimAutoreleasedReturnValue(v84);
        [v82 remoteDevicesForIDs:v99 fromIdentity:v101 fromURI:v83 fromService:v77 lightQuery:1 allowQuery:(v106 | v100) ^ 1 reason:v85 completionBlock:v98];

        uint64_t v62 = v114;
        goto LABEL_72;
      }

      uint64_t v59 = OSLogHandleForIDSCategory("Warning");
      uint64_t v60 = (os_log_s *)objc_claimAutoreleasedReturnValue(v59);
      if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        __int128 v130 = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v60,  OS_LOG_TYPE_ERROR,  "Querying %@ while under first unlock, bailing...",  buf,  0xCu);
      }

      if (os_log_shim_legacy_logging_enabled(v61))
      {
        MarcoLogMadridLevel( @"IDSDaemonMIGQueryInterface",  0LL,  @"IDQuery",  @"Querying %@ while under first unlock, bailing...");
        IMLogString( 0LL,  @"IDSIDQuery",  @"IDS",  @"IDQuery",  @"Querying %@ while under first unlock, bailing...");
        unsigned int v89 = v9;
        _IMWarn(@"Querying %@ while under first unlock, bailing...");
      }

      if (v109)
      {
        uint64_t v125 = IDSIDQueryControllerErrorDestinationSet;
        uint64_t v126 = v109;
        uint64_t v62 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v126,  &v125,  1LL));
      }

      else
      {
        uint64_t v62 = 0LL;
      }

      uint64_t v86 = v118[5];
      uint64_t v92 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSIDQueryControllerErrorDomain,  -4000LL,  v62,  v89,  v94));
      IMInsertKeyedCodableObjectsToXPCDictionary(v86, "error");

      uint64_t v81 = *(_xpc_connection_s **)(a1 + 40);
      if (!v81) {
        goto LABEL_72;
      }
    }

    else
    {
      uint64_t v73 = OSLogHandleForIDSCategory("Warning");
      uint64_t v74 = (os_log_s *)objc_claimAutoreleasedReturnValue(v73);
      if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        __int128 v130 = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v74,  OS_LOG_TYPE_ERROR,  "No URIs or cert after filtering destinations %@, bailing...",  buf,  0xCu);
      }

      if (os_log_shim_legacy_logging_enabled(v75))
      {
        MarcoLogMadridLevel( @"IDSDaemonMIGQueryInterface",  0LL,  @"IDQuery",  @"No URIs or cert after filtering destinations %@, bailing...");
        IMLogString( 0LL,  @"IDSIDQuery",  @"IDS",  @"IDQuery",  @"No URIs or cert after filtering destinations %@, bailing...");
        unsigned int v89 = v9;
        _IMWarn(@"No URIs or cert after filtering destinations %@, bailing...");
      }

      if (v109)
      {
        uint64_t v127 = IDSIDQueryControllerErrorDestinationSet;
        __int128 v128 = v109;
        uint64_t v62 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v128,  &v127,  1LL));
      }

      else
      {
        uint64_t v62 = 0LL;
      }

      uint64_t v80 = v118[5];
      uint64_t v91 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSIDQueryControllerErrorDomain,  -3000LL,  v62,  v89,  v94));
      IMInsertKeyedCodableObjectsToXPCDictionary(v80, "error");

      uint64_t v81 = *(_xpc_connection_s **)(a1 + 40);
      if (!v81) {
        goto LABEL_72;
      }
    }

    xpc_connection_send_message(v81, (xpc_object_t)v118[5]);
LABEL_72:

LABEL_73:
    goto LABEL_74;
  }

  uint64_t v70 = OSLogHandleForIDSCategory("Warning");
  id v71 = (os_log_s *)objc_claimAutoreleasedReturnValue(v70);
  if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v71,  OS_LOG_TYPE_ERROR,  "Could not create reply message for cached id status query",  buf,  2u);
  }

  if (os_log_shim_legacy_logging_enabled(v72))
  {
    MarcoLogMadridLevel( @"IDSDaemonMIGQueryInterface",  0LL,  @"IDQuery",  @"Could not create reply message for cached id status query");
    IMLogString( 0LL,  @"IDSIDQuery",  @"IDS",  @"IDQuery",  @"Could not create reply message for cached id status query");
    _IMWarn(@"Could not create reply message for cached id status query");
  }

LABEL_74:
  _Block_object_dispose(&v117, 8);
}

    uint64_t v65 = v189;
    uint64_t v94 = (void *)swift_bridgeObjectRelease_n(v189, 2LL);
    id v71 = v188;
LABEL_75:
    NSUInteger v104 = (uint64_t)v186;
    (*(void (**)(void *))((swift_isaMask & *v92) + 0x108LL))(v94);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v184 + 48))(v104, 1LL, v185) == 1)
    {

      uint64_t v66 = (void *)sub_10040A274(v104, &qword_1009B97A8);
      goto LABEL_90;
    }

    int v105 = (uint64_t)v181;
    sub_1003F600C(v104, (uint64_t)v181, type metadata accessor for IDSGroupEncryptionPublicIdentity);
    unsigned int v106 = (*(uint64_t (**)(void))((swift_isaMask & *v177) + 0xF8LL))(v179);
    if (v106)
    {
      id v107 = v106;
      id v108 = (char *)v175;
      uint64_t v109 = *v175;
      uint64_t v110 = v175[1];
      uint64_t v111 = v167;
      sub_1003F5FC8(v105, v167, type metadata accessor for IDSGroupEncryptionPublicIdentity);
      id v112 = *(void *)((char *)v92
                       + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_participantID);
      uint64_t v113 = (uint64_t)v171;
      id v114 = v173;
      (*(void (**)(char *, char *, uint64_t))(v172 + 16))(v171, &v108[*(int *)(v174 + 28)], v173);
      sub_1004028CC(v109, v110);
      id v115 = v107 | 0x200000000LL;
      int v116 = v169;
      sub_10040FA98(v115, v109, v110, v111, v112, v113, v169);
      swift_storeEnumTagMultiPayload(v116, v170, 1LL);
      uint64_t v117 = v168;
      sub_10041AC80(v168, v116);
      sub_1003F6050(v117, type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
      __int128 v118 = v166;
      uint64_t v119 = sub_1003F5FC8((uint64_t)v108, v166, type metadata accessor for IDSDSessionKeyValueDeliveryLocalEntry);
      uint64_t v120 = (os_log_s *)Logger.logObject.getter(v119);
      id v121 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v120, v121))
      {
        __int128 v122 = swift_slowAlloc(22LL, -1LL);
        uint64_t v123 = swift_slowAlloc(64LL, -1LL);
        double v192 = (void *)v123;
        *(_DWORD *)__int128 v122 = v160.n128_u32[0];
        LODWORD(v191) = v179;
        type metadata accessor for IDSGroupSessionClientDataKey(0LL);
        uint64_t v125 = String.init<A>(describing:)(&v191, v124);
        uint64_t v127 = v126;
        *(void *)(v122 + 4) = sub_1003FFBB0(v125, v126, (uint64_t *)&v192);
        swift_bridgeObjectRelease(v127);
        *(_WORD *)(v122 + 12) = 2080;
        __int128 v128 = sub_10040A2B0( &qword_1009B95C0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        __int128 v129 = dispatch thunk of CustomStringConvertible.description.getter(v114, v128);
        __int16 v131 = v130;
        *(void *)(v122 + 14) = sub_1003FFBB0(v129, v130, (uint64_t *)&v192);
        swift_bridgeObjectRelease(v131);
        sub_1003F6050(v118, type metadata accessor for IDSDSessionKeyValueDeliveryLocalEntry);
        _os_log_impl( (void *)&_mh_execute_header,  v120,  v121,  "adding KV to desired: key %s with data ID %s",  (uint8_t *)v122,  0x16u);
        swift_arrayDestroy(v123, 2LL, v159);
        swift_slowDealloc(v123, -1LL, -1LL);
        swift_slowDealloc(v122, -1LL, -1LL);
      }

      else
      {

        sub_1003F6050(v118, type metadata accessor for IDSDSessionKeyValueDeliveryLocalEntry);
      }

      uint64_t v66 = (void *)sub_1003F6050((uint64_t)v181, type metadata accessor for IDSGroupEncryptionPublicIdentity);
      unsigned int v78 = v87;
      uint64_t v65 = v189;
      uint64_t v79 = v190;
      id v71 = v188;
    }

    else
    {
      sub_1003F6050(v105, type metadata accessor for IDSGroupEncryptionPublicIdentity);

LABEL_90:
      unsigned int v78 = v87;
      uint64_t v79 = v190;
    }
  }

  uint64_t v141 = *(id *)(v189 + 40);
  uint64_t v142 = static NSObject.== infix(_:_:)(v141, v98);

  if ((v142 & 1) != 0) {
    goto LABEL_74;
  }
  uint64_t v65 = v189;
  if (v99 == 2) {
    goto LABEL_46;
  }
  uint64_t v143 = 6LL;
  while (1)
  {
    uint64_t v144 = v143 - 3;
    if (__OFADD__(v143 - 4, 1LL)) {
      break;
    }
    uint64_t v145 = *(id *)(v65 + 8 * v143);
    id v146 = static NSObject.== infix(_:_:)(v145, v98);

    if ((v146 & 1) != 0) {
      goto LABEL_74;
    }
    ++v143;
    uint64_t v65 = v189;
    if (v144 == v99) {
      goto LABEL_46;
    }
  }

  sub_10041D3BC(v77);
  uint64_t v117 = a2;
  if (!a2) {
    goto LABEL_107;
  }
  __int128 v118 = swift_bridgeObjectRetain_n(a2, 3LL);
  uint64_t v119 = (os_log_s *)Logger.logObject.getter(v118);
  uint64_t v120 = static os_log_type_t.default.getter();
  id v121 = &off_100717000;
  if (os_log_type_enabled(v119, v120))
  {
    __int128 v122 = swift_slowAlloc(22LL, -1LL);
    uint64_t v123 = swift_slowAlloc(64LL, -1LL);
    v202 = (void *)v123;
    *(_DWORD *)__int128 v122 = 136315394;
    v198 = sub_1003FFBB0(0xD00000000000002ELL, 0x80000001008426D0LL, (uint64_t *)&v202);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v198, &v199, v122 + 4, v122 + 12);
    *(_WORD *)(v122 + 12) = 2080;
    uint64_t v124 = swift_bridgeObjectRetain(a2);
    uint64_t v125 = Dictionary.description.getter(v124);
    uint64_t v127 = v126;
    swift_bridgeObjectRelease(a2);
    v198 = sub_1003FFBB0(v125, v127, (uint64_t *)&v202);
    id v121 = &off_100717000;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v198, &v199, v122 + 14, v122 + 22);
    swift_bridgeObjectRelease(v127);
    swift_bridgeObjectRelease_n(a2, 2LL);
    _os_log_impl( (void *)&_mh_execute_header,  v119,  v120,  "%s: Updating members lightweightStatus based on %s",  (uint8_t *)v122,  0x16u);
    swift_arrayDestroy(v123, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v123, -1LL, -1LL);
    swift_slowDealloc(v122, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a2, 2LL);
  }

  __int128 v128 = 0LL;
  __int128 v129 = a2 + 64;
  __int128 v130 = 1LL << *(_BYTE *)(a2 + 32);
  __int16 v131 = -1LL;
  if (v130 < 64) {
    __int16 v131 = ~(-1LL << v130);
  }
  __int128 v132 = v131 & *(void *)(a2 + 64);
  __int16 v133 = (unint64_t)(v130 + 63) >> 6;
  __int128 v196 = *((void *)v121 + 61);
  uint64_t v5 = v197;
  while (2)
  {
    if (v132)
    {
      __int16 v135 = __clz(__rbit64(v132));
      v132 &= v132 - 1;
      uint64_t v136 = v135 | (v128 << 6);
      goto LABEL_98;
    }

    id v137 = v128 + 1;
    if (__OFADD__(v128, 1LL))
    {
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
      goto LABEL_150;
    }

    if (v137 >= v133) {
      goto LABEL_106;
    }
    id v138 = *(void *)(v129 + 8 * v137);
    ++v128;
    if (v138) {
      goto LABEL_97;
    }
    __int128 v128 = v137 + 1;
    if (v137 + 1 >= v133) {
      goto LABEL_106;
    }
    id v138 = *(void *)(v129 + 8 * v128);
    if (v138) {
      goto LABEL_97;
    }
    __int128 v128 = v137 + 2;
    if (v137 + 2 >= v133) {
      goto LABEL_106;
    }
    id v138 = *(void *)(v129 + 8 * v128);
    if (v138)
    {
LABEL_97:
      __int128 v132 = (v138 - 1) & v138;
      uint64_t v136 = __clz(__rbit64(v138)) + (v128 << 6);
LABEL_98:
      uint64_t v140 = *(void *)(v117 + 56);
      uint64_t v141 = (uint64_t *)(*(void *)(v117 + 48) + 16 * v136);
      uint64_t v143 = *v141;
      uint64_t v142 = v141[1];
      uint64_t v144 = *(unsigned __int8 *)(v140 + v136);
      uint64_t v145 = objc_allocWithZone(&OBJC_CLASS___IDSURI);
      swift_bridgeObjectRetain_n(v142, 2LL);
      id v146 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v142);
      uint64_t v147 = [v145 initWithPrefixedURI:v146];

      if (v147)
      {
        swift_bridgeObjectRelease(v142);
        uint64_t v5 = v197;
        id v148 = (void *)(*(uint64_t (**)(id))((swift_isaMask & *v197) + 0x2B8LL))(v147);
        if (v148)
        {
          uint64_t v134 = v148;
          (*(void (**)(uint64_t))((swift_isaMask & *v148) + 0x88LL))(v144);
        }

        else
        {
        }

        uint64_t v117 = a2;
      }

      else
      {
        swift_bridgeObjectRetain(v142);
        double v150 = (os_log_s *)Logger.logObject.getter(v149);
        uint64_t v151 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v150, (os_log_type_t)v151))
        {
          id v152 = swift_slowAlloc(22LL, -1LL);
          uint64_t v153 = swift_slowAlloc(64LL, -1LL);
          v202 = (void *)v153;
          *(_DWORD *)id v152 = v196;
          *(void *)(v152 + 4) = sub_1003FFBB0(0xD00000000000002ELL, 0x80000001008426D0LL, (uint64_t *)&v202);
          *(_WORD *)(v152 + 12) = 2080;
          swift_bridgeObjectRetain(v142);
          *(void *)(v152 + 14) = sub_1003FFBB0(v143, v142, (uint64_t *)&v202);
          swift_bridgeObjectRelease_n(v142, 3LL);
          _os_log_impl( (void *)&_mh_execute_header,  v150,  (os_log_type_t)v151,  "%s: Error initializing IDSURI for %s",  (uint8_t *)v152,  0x16u);
          swift_arrayDestroy(v153, 2LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v153, -1LL, -1LL);
          swift_slowDealloc(v152, -1LL, -1LL);
        }

        else
        {

          swift_bridgeObjectRelease_n(v142, 2LL);
        }

        uint64_t v5 = v197;
        uint64_t v117 = a2;
      }

      continue;
    }

    break;
  }

  id v139 = v137 + 3;
  if (v139 < v133)
  {
    id v138 = *(void *)(v129 + 8 * v139);
    if (!v138)
    {
      while (1)
      {
        __int128 v128 = v139 + 1;
        if (__OFADD__(v139, 1LL)) {
          break;
        }
        if (v128 >= v133) {
          goto LABEL_106;
        }
        id v138 = *(void *)(v129 + 8 * v128);
        ++v139;
        if (v138) {
          goto LABEL_97;
        }
      }

  __break(1u);
LABEL_75:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
  __break(1u);
  return result;
}

void sub_100311F8C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, char a37)
{
}

id sub_1003120FC(id a1, NSString *a2)
{
  return +[IDSURI URIWithUnprefixedURI:](&OBJC_CLASS___IDSURI, "URIWithUnprefixedURI:", a2);
}

void sub_10031210C(void *a1, void *a2, void *a3, void *a4, int a5, void *a6)
{
  id v11 = a2;
  id v12 = a3;
  id v13 = a4;
  id v14 = a6;
  uint64_t v15 = OSLogHandleForIDSCategory("IDQuery");
  uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v17 = @"NO";
    if (a5) {
      uint64_t v18 = @"YES";
    }
    else {
      uint64_t v18 = @"NO";
    }
    if (*(void *)(*(void *)(a1[6] + 8LL) + 40LL)) {
      uint64_t v17 = @"YES";
    }
    *(_DWORD *)buf = 138413570;
    id v38 = v11;
    __int16 v39 = 2112;
    id v40 = v12;
    __int16 v41 = 2112;
    id v42 = v13;
    __int16 v43 = 2112;
    uint64_t v44 = v18;
    __int16 v45 = 2112;
    id v46 = v14;
    __int16 v47 = 2112;
    uint64_t v48 = v17;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Received status query updates (idStatusUpdates: %@)  (updateFromURI: %@)  (updateService: %@)  (success: %@)  (err or: %@) - replyMessage? %@",  buf,  0x3Eu);
  }

  if (os_log_shim_legacy_logging_enabled(v19))
  {
    MarcoLogMadridLevel( @"IDSDaemonMIGQueryInterface",  0LL,  @"IDQuery",  @"Received status query updates (idStatusUpdates: %@)  (updateFromURI: %@)  (updateService: %@)  (success: %@)  (error: %@) - replyMessage? %@");
    IMLogString( 0LL,  @"IDSIDQuery",  @"IDS",  @"IDQuery",  @"Received status query updates (idStatusUpdates: %@)  (updateFromURI: %@)  (updateService: %@)  (success: %@)  (error: %@) - replyMessage? %@");
    if ((_IMWillLog(@"IDQuery", v20) & 1) != 0) {
      _IMAlwaysLog( 0LL,  @"IDQuery",  @"Received status query updates (idStatusUpdates: %@)  (updateFromURI: %@)  (updateService: %@)  (success: %@)  (error: %@) - replyMessage? %@");
    }
  }

  if (*(void *)(*(void *)(a1[6] + 8LL) + 40LL))
  {
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  v11,  0LL,  0LL));
    IMInsertDatasToXPCDictionary(*(void *)(*(void *)(a1[6] + 8LL) + 40LL), "destinations");
    IMInsertKeyedCodableObjectsToXPCDictionary(*(void *)(*(void *)(a1[6] + 8LL) + 40LL), "error");
    uint64_t v22 = OSLogHandleForIDSCategory("IDQuery");
    uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v24 = IDSLoggableDescriptionForObjectOnService(v21, a1[4]);
      uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
      *(_DWORD *)buf = 138412290;
      id v38 = v25;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Sending id status results %@", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v26))
    {
      uint64_t v27 = IDSLoggableDescriptionForObjectOnService(v21, a1[4]);
      uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
      MarcoLogMadridLevel( @"IDSDaemonMIGQueryInterface",  0LL,  @"IDQuery",  @"Sending id status results %@");

      uint64_t v29 = IDSLoggableDescriptionForObjectOnService(v21, a1[4]);
      uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue(v29);
      IMLogString(0LL, @"IDSIDQuery", @"IDS", @"IDQuery", @"Sending id status results %@");

      if ((_IMWillLog(@"IDQuery", v30) & 1) != 0)
      {
        uint64_t v31 = IDSLoggableDescriptionForObjectOnService(v21, a1[4]);
        uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue(v31);
        _IMAlwaysLog(0LL, @"IDQuery", @"Sending id status results %@");
      }
    }

    uint64_t v32 = (_xpc_connection_s *)a1[5];
    if (v32) {
      xpc_connection_send_message(v32, *(xpc_object_t *)(*(void *)(a1[6] + 8LL) + 40LL));
    }
    uint64_t v33 = *(void *)(a1[6] + 8LL);
    uint64_t v34 = *(void **)(v33 + 40);
    *(void *)(v33 + 40) = 0LL;
  }
}

IDSURI *sub_10031256C(uint64_t a1, uint64_t a2)
{
  return +[IDSURI URIWithUnprefixedURI:withServiceLoggingHint:]( &OBJC_CLASS___IDSURI,  "URIWithUnprefixedURI:withServiceLoggingHint:",  a2,  *(void *)(a1 + 32));
}

void sub_100312584(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___IDSStatusQueryQueue);
  uint64_t v2 = (void *)qword_1009C0AE8;
  qword_1009C0AE8 = (uint64_t)v1;
}

void sub_1003125AC(uint64_t a1)
{
  uint64_t v126 = 0LL;
  uint64_t v127 = &v126;
  uint64_t v128 = 0x3032000000LL;
  __int128 v129 = sub_100310958;
  __int128 v130 = sub_100310968;
  id reply = (id)0xAAAAAAAAAAAAAAAALL;
  id reply = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 32));
  if (v127[5])
  {
    uint64_t v2 = IMGetXPCStringFromDictionary(*(void *)(a1 + 32), "transactionID");
    uint64_t v119 = (void *)objc_claimAutoreleasedReturnValue(v2);
    uint64_t v3 = IMGetXPCStringFromDictionary(*(void *)(a1 + 32), "service");
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDestination classesForStrictUnarchiving]( &OBJC_CLASS___IDSDestination,  "classesForStrictUnarchiving"));
    uint64_t v7 = IMGetXPCKeyedCodableFromDictionaryWithSecureCodingAllowedClasses(v5, "destination", v6);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);

    uint64_t v107 = IMGetXPCIntFromDictionary(*(void *)(a1 + 32), "info-types");
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v11 = objc_opt_class(&OBJC_CLASS___IDSIDInfoOptions, v10);
    uint64_t v12 = IMGetXPCKeyedCodableFromDictionaryWithSecureCoding(v9, "id-info-options", v11);
    int v116 = (void *)objc_claimAutoreleasedReturnValue(v12);
    uint64_t v13 = IMGetXPCStringFromDictionary(*(void *)(a1 + 32), "from");
    id v115 = (void *)objc_claimAutoreleasedReturnValue(v13);
    int v112 = IMGetXPCBoolFromDictionary(*(void *)(a1 + 32), "is-springboard");
    unsigned __int8 v106 = [v116 waitForReply];
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v8 destinationURIs]);
    __int128 v118 = (void *)objc_claimAutoreleasedReturnValue([v14 allObjects]);

    uint64_t v15 = OSLogHandleForIDSCategory("IDQuery");
    uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v8 destinationURIs]);
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v17 allObjects]);
      uint64_t v19 = IDSLoggableDescriptionForHandlesOnService(v18, v4);
      uint64_t v20 = objc_claimAutoreleasedReturnValue(v19);
      uint64_t v21 = (void *)v20;
      uint64_t v22 = @"NO";
      *(_DWORD *)buf = 138413058;
      id v139 = v4;
      if (v112) {
        uint64_t v22 = @"YES";
      }
      __int16 v140 = 2112;
      uint64_t v141 = v119;
      __int16 v142 = 2112;
      uint64_t v143 = v20;
      __int16 v144 = 2112;
      uint64_t v145 = v22;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "*** Incoming ID status query  (service: %@)  (transactionID: %@)  (destinations: %@)   (sb: %@)",  buf,  0x2Au);
    }

    if (os_log_shim_legacy_logging_enabled(v23))
    {
      uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v8 destinationURIs]);
      uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v24 allObjects]);
      uint64_t v26 = IDSLoggableDescriptionForHandlesOnService(v25, v4);
      uint64_t v27 = objc_claimAutoreleasedReturnValue(v26);
      uint64_t v28 = (void *)v27;
      uint64_t v29 = v112 ? @"YES" : @"NO";
      uint64_t v103 = v27;
      MarcoLogMadridLevel( @"IDSDaemonMIGQueryInterface",  0LL,  @"IDQuery",  @"*** Incoming ID status query  (service: %@)  (transactionID: %@)  (destinations: %@)   (sb: %@)");

      uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "destinationURIs", v4, v119, v103, v29));
      uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v30 allObjects]);
      uint64_t v32 = IDSLoggableDescriptionForHandlesOnService(v31, v4);
      id v102 = (void *)objc_claimAutoreleasedReturnValue(v32);
      NSUInteger v104 = v29;
      IMLogString( 0LL,  @"IDSIDQuery",  @"IDS",  @"IDQuery",  @"*** Incoming ID status query  (service: %@)  (transactionID: %@)  (destinations: %@)   (sb: %@)");

      if ((_IMWillLog(@"IDQuery", v33) & 1) != 0)
      {
        uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "destinationURIs", v4, v119, v102, v29));
        uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([v34 allObjects]);
        uint64_t v36 = IDSLoggableDescriptionForHandlesOnService(v35, v4);
        id v102 = (void *)objc_claimAutoreleasedReturnValue(v36);
        NSUInteger v104 = v29;
        _IMAlwaysLog( 0LL,  @"IDQuery",  @"*** Incoming ID status query  (service: %@)  (transactionID: %@)  (destinations: %@)   (sb: %@)");
      }
    }

    IMInsertNSStringsToXPCDictionary(v127[5], "service");
    IMInsertNSStringsToXPCDictionary(v127[5], "transactionID");
    uint64_t v117 = (void *)objc_claimAutoreleasedReturnValue(+[IDSURI URIWithUnprefixedURI:](&OBJC_CLASS___IDSURI, "URIWithUnprefixedURI:", v115, v119, 0LL));
    uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDServiceController sharedInstance](&OBJC_CLASS___IDSDServiceController, "sharedInstance"));
    id v38 = (void *)objc_claimAutoreleasedReturnValue([v37 serviceWithIdentifier:v4]);

    uint64_t v111 = (void *)objc_claimAutoreleasedReturnValue([v38 queryService]);
    __int16 v39 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
    id v114 = (void *)objc_claimAutoreleasedReturnValue([v39 accountsOnService:v38]);

    uint64_t v40 = OSLogHandleForIDSCategory("IDQuery");
    __int16 v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      id v139 = v38;
      __int16 v140 = 2112;
      uint64_t v141 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEFAULT,  "Found service %@ for serviceName %@",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v42))
    {
      MarcoLogMadridLevel( @"IDSDaemonMIGQueryInterface",  0LL,  @"IDQuery",  @"Found service %@ for serviceName %@");
      id v93 = v38;
      int v100 = v4;
      IMLogString( 0LL,  @"IDSIDQuery",  @"IDS",  @"IDQuery",  @"Found service %@ for serviceName %@");
      if ((_IMWillLog(@"IDQuery", v43) & 1) != 0)
      {
        id v93 = v38;
        int v100 = v4;
        _IMAlwaysLog(0LL, @"IDQuery", @"Found service %@ for serviceName %@");
      }
    }

    uint64_t v110 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v118, "__imArrayByApplyingBlock:", &stru_100900D90, v93, v100, v102, v104));
    uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue( +[IDSQueryUtilities accountToQueryFrom:fromURI:destinationURIs:allowLocalAccount:]( &OBJC_CLASS___IDSQueryUtilities,  "accountToQueryFrom:fromURI:destinationURIs:allowLocalAccount:",  v114,  v117));
    if (!v44)
    {
      uint64_t v45 = OSLogHandleForIDSCategory("IDQuery");
      id v46 = (os_log_s *)objc_claimAutoreleasedReturnValue(v45);
      if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        id v139 = v4;
        _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEFAULT,  "No registered account for service %@",  buf,  0xCu);
      }

      if (os_log_shim_legacy_logging_enabled(v47))
      {
        MarcoLogMadridLevel( @"IDSDaemonMIGQueryInterface",  0LL,  @"IDQuery",  @"No registered account for service %@");
        uint64_t v94 = v4;
        IMLogString( 0LL,  @"IDSIDQuery",  @"IDS",  @"IDQuery",  @"No registered account for service %@");
        if ((_IMWillLog(@"IDQuery", v48) & 1) != 0)
        {
          uint64_t v94 = v4;
          _IMAlwaysLog(0LL, @"IDQuery", @"No registered account for service %@");
        }
      }
    }

    id v49 = (void *)objc_claimAutoreleasedReturnValue( +[IDSQueryUtilities prefixedAliasStringToQueryFrom:withPreferredFromURI:]( &OBJC_CLASS___IDSQueryUtilities,  "prefixedAliasStringToQueryFrom:withPreferredFromURI:",  v44,  v117,  v94));
    uint64_t v50 = v49;
    if (!v44) {
      goto LABEL_46;
    }
    if (![v49 length])
    {
      uint64_t v51 = OSLogHandleForIDSCategory("IDQuery");
      uint64_t v52 = (os_log_s *)objc_claimAutoreleasedReturnValue(v51);
      if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        id v139 = v44;
        _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "No fromURI for account %@", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled(v53))
      {
        MarcoLogMadridLevel( @"IDSDaemonMIGQueryInterface",  0LL,  @"IDQuery",  @"No fromURI for account %@");
        uint64_t v95 = v44;
        IMLogString(0LL, @"IDSIDQuery", @"IDS", @"IDQuery", @"No fromURI for account %@");
        if ((_IMWillLog(@"IDQuery", v54) & 1) != 0)
        {
          uint64_t v95 = v44;
          _IMAlwaysLog(0LL, @"IDQuery", @"No fromURI for account %@");
        }
      }
    }

    if (!objc_msgSend(v50, "length", v95))
    {
LABEL_46:
      uint64_t v68 = OSLogHandleForIDSCategory("IDQuery");
      unsigned __int8 v69 = (os_log_s *)objc_claimAutoreleasedReturnValue(v68);
      if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        id v139 = v4;
        _os_log_impl( (void *)&_mh_execute_header,  v69,  OS_LOG_TYPE_DEFAULT,  "No registered account for service after if %@, bailing...",  buf,  0xCu);
      }

      if (os_log_shim_legacy_logging_enabled(v70))
      {
        MarcoLogMadridLevel( @"IDSDaemonMIGQueryInterface",  0LL,  @"IDQuery",  @"No registered account for service after if %@, bailing...");
        uint64_t v95 = v4;
        IMLogString( 0LL,  @"IDSIDQuery",  @"IDS",  @"IDQuery",  @"No registered account for service after if %@, bailing...");
        if ((_IMWillLog(@"IDQuery", v71) & 1) != 0)
        {
          uint64_t v95 = v4;
          _IMAlwaysLog(0LL, @"IDQuery", @"No registered account for service after if %@, bailing...");
        }
      }

      uint64_t v72 = v127[5];
      uint64_t v132 = IDSIDQueryControllerErrorDestinationSet;
      __int16 v133 = v118;
      uint64_t v73 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v133,  &v132,  1LL,  v95));
      id v97 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSIDQueryControllerErrorDomain,  -3000LL,  v73));
      IMInsertKeyedCodableObjectsToXPCDictionary(v72, "error");

      uint64_t v74 = *(_xpc_connection_s **)(a1 + 40);
      if (v74) {
        xpc_connection_send_message(v74, (xpc_object_t)v127[5]);
      }
      goto LABEL_69;
    }

    uint64_t v55 = OSLogHandleForIDSCategory("IDQuery");
    id v56 = (os_log_s *)objc_claimAutoreleasedReturnValue(v55);
    if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      id v139 = v50;
      __int16 v140 = 2112;
      uint64_t v141 = v44;
      _os_log_impl( (void *)&_mh_execute_header,  v56,  OS_LOG_TYPE_DEFAULT,  "Using %@ from %@ to perform id query.",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v57))
    {
      MarcoLogMadridLevel( @"IDSDaemonMIGQueryInterface",  0LL,  @"IDQuery",  @"Using %@ from %@ to perform id query.");
      uint64_t v95 = v50;
      uint64_t v101 = v44;
      IMLogString( 0LL,  @"IDSIDQuery",  @"IDS",  @"IDQuery",  @"Using %@ from %@ to perform id query.");
      if ((_IMWillLog(@"IDQuery", v58) & 1) != 0)
      {
        uint64_t v95 = v50;
        uint64_t v101 = v44;
        _IMAlwaysLog(0LL, @"IDQuery", @"Using %@ from %@ to perform id query.");
      }
    }

    id v59 = sub_10011BB60(v118, v44);
    uint64_t v109 = (void *)objc_claimAutoreleasedReturnValue(v59);
    id v108 = (void *)objc_claimAutoreleasedReturnValue([v44 _registrationCert]);
    if ([v109 count] && v108)
    {
      uint64_t v60 = (void *)objc_claimAutoreleasedReturnValue(+[IMSystemMonitor sharedInstance](&OBJC_CLASS___IMSystemMonitor, "sharedInstance"));
      unsigned int v61 = [v60 isUnderFirstDataProtectionLock];

      if (!v61)
      {
        v122[0] = _NSConcreteStackBlock;
        v122[1] = 3221225472LL;
        v122[2] = sub_100313724;
        v122[3] = &unk_100900D50;
        uint64_t v125 = &v126;
        id v84 = v111;
        id v123 = v84;
        id v124 = *(id *)(a1 + 40);
        id v85 = objc_retainBlock(v122);
        v120[0] = _NSConcreteStackBlock;
        v120[1] = 3221225472LL;
        v120[2] = sub_100313B84;
        v120[3] = &unk_1008F64D0;
        id v86 = v84;
        id v121 = v86;
        int v105 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v109, "__imArrayByApplyingBlock:", v120));
        if (v112)
        {
          uint64_t v87 = (void *)objc_claimAutoreleasedReturnValue( +[IDSServerBag sharedInstanceForBagType:]( &OBJC_CLASS___IDSServerBag,  "sharedInstanceForBagType:",  0LL));
          uint64_t v88 = (void *)objc_claimAutoreleasedReturnValue([v87 objectForKey:@"vc-disable-springboard-queries"]);
          unsigned __int8 v113 = [v88 BOOLValue];
        }

        else
        {
          unsigned __int8 v113 = 0;
        }

        unsigned int v89 = (void *)objc_claimAutoreleasedReturnValue( +[IDSIDStatusQueryController sharedInstance]( &OBJC_CLASS___IDSIDStatusQueryController,  "sharedInstance",  v95,  v101));
        uint64_t v90 = (void *)objc_claimAutoreleasedReturnValue( +[IDSURI URIWithUnprefixedURI:withServiceLoggingHint:]( &OBJC_CLASS___IDSURI,  "URIWithUnprefixedURI:withServiceLoggingHint:",  v50,  v86));
        id v91 = sub_100310F0C(@"InfoQuery", *(void **)(a1 + 40), *(void *)(a1 + 32));
        uint64_t v92 = (void *)objc_claimAutoreleasedReturnValue(v91);
        BYTE1(v99) = (v113 | v106) ^ 1;
        LOBYTE(v99) = 1;
        objc_msgSend( v89,  "infoForIDs:fromIdentity:fromURI:fromService:infoType:infoOptions:lightQuery:allowQuery:reason:completion:",  v105,  v108,  v90,  v86,  v107,  v116,  v99,  v92,  v85);

        goto LABEL_68;
      }

      uint64_t v62 = OSLogHandleForIDSCategory("Warning");
      uint64_t v63 = (os_log_s *)objc_claimAutoreleasedReturnValue(v62);
      if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        id v139 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v63,  OS_LOG_TYPE_ERROR,  "Querying %@ while under first unlock, bailing...",  buf,  0xCu);
      }

      if (os_log_shim_legacy_logging_enabled(v64))
      {
        MarcoLogMadridLevel( @"IDSDaemonMIGQueryInterface",  0LL,  @"IDQuery",  @"Querying %@ while under first unlock, bailing...");
        IMLogString( 0LL,  @"IDSIDQuery",  @"IDS",  @"IDQuery",  @"Querying %@ while under first unlock, bailing...");
        uint64_t v95 = v8;
        _IMWarn(@"Querying %@ while under first unlock, bailing...");
      }

      uint64_t v65 = v127[5];
      uint64_t v66 = v118;
      if (!v118) {
        uint64_t v66 = &__NSArray0__struct;
      }
      uint64_t v134 = IDSIDQueryControllerErrorDestinationSet;
      __int16 v135 = v66;
      uint64_t v67 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v135,  &v134,  1LL,  v95,  v101));
      uint64_t v96 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSIDQueryControllerErrorDomain,  -4000LL,  v67));
      IMInsertKeyedCodableObjectsToXPCDictionary(v65, "error");
    }

    else
    {
      uint64_t v78 = OSLogHandleForIDSCategory("Warning");
      uint64_t v79 = (os_log_s *)objc_claimAutoreleasedReturnValue(v78);
      if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138412290;
        id v139 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v79,  OS_LOG_TYPE_ERROR,  "No URIs or cert after filtering destinations %@, bailing...",  buf,  0xCu);
      }

      if (os_log_shim_legacy_logging_enabled(v80))
      {
        MarcoLogMadridLevel( @"IDSDaemonMIGQueryInterface",  0LL,  @"IDQuery",  @"No URIs or cert after filtering destinations %@, bailing...");
        IMLogString( 0LL,  @"IDSIDQuery",  @"IDS",  @"IDQuery",  @"No URIs or cert after filtering destinations %@, bailing...");
        uint64_t v95 = v8;
        _IMWarn(@"No URIs or cert after filtering destinations %@, bailing...");
      }

      uint64_t v81 = v127[5];
      uint64_t v136 = IDSIDQueryControllerErrorDestinationSet;
      id v137 = v118;
      uint64_t v82 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v137,  &v136,  1LL,  v95,  v101));
      uint64_t v98 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSIDQueryControllerErrorDomain,  -3000LL,  v82));
      IMInsertKeyedCodableObjectsToXPCDictionary(v81, "error");
    }

    uint64_t v83 = *(_xpc_connection_s **)(a1 + 40);
    if (v83) {
      xpc_connection_send_message(v83, (xpc_object_t)v127[5]);
    }
LABEL_68:

LABEL_69:
    goto LABEL_70;
  }

  uint64_t v75 = OSLogHandleForIDSCategory("Warning");
  id v76 = (os_log_s *)objc_claimAutoreleasedReturnValue(v75);
  if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v76,  OS_LOG_TYPE_ERROR,  "Could not create reply message for cached id status query",  buf,  2u);
  }

  if (os_log_shim_legacy_logging_enabled(v77))
  {
    MarcoLogMadridLevel( @"IDSDaemonMIGQueryInterface",  0LL,  @"IDQuery",  @"Could not create reply message for cached id status query");
    IMLogString( 0LL,  @"IDSIDQuery",  @"IDS",  @"IDQuery",  @"Could not create reply message for cached id status query");
    _IMWarn(@"Could not create reply message for cached id status query");
  }

void sub_1003135A4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, char a39)
{
}

id sub_100313714(id a1, NSString *a2)
{
  return +[IDSURI URIWithUnprefixedURI:](&OBJC_CLASS___IDSURI, "URIWithUnprefixedURI:", a2);
}

void sub_100313724(void *a1, void *a2, void *a3, void *a4, int a5, void *a6)
{
  id v11 = a2;
  id v12 = a3;
  id v13 = a4;
  id v14 = a6;
  uint64_t v15 = OSLogHandleForIDSCategory("IDQuery");
  uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v17 = @"NO";
    if (a5) {
      uint64_t v18 = @"YES";
    }
    else {
      uint64_t v18 = @"NO";
    }
    if (*(void *)(*(void *)(a1[6] + 8LL) + 40LL)) {
      uint64_t v17 = @"YES";
    }
    *(_DWORD *)buf = 138413570;
    id v38 = v11;
    __int16 v39 = 2112;
    id v40 = v12;
    __int16 v41 = 2112;
    id v42 = v13;
    __int16 v43 = 2112;
    uint64_t v44 = v18;
    __int16 v45 = 2112;
    id v46 = v14;
    __int16 v47 = 2112;
    uint64_t v48 = v17;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Received status query updates (idStatusUpdates: %@)  (updateFromURI: %@)  (updateService: %@)  (success: %@)  (err or: %@) - replyMessage? %@",  buf,  0x3Eu);
  }

  if (os_log_shim_legacy_logging_enabled(v19))
  {
    MarcoLogMadridLevel( @"IDSDaemonMIGQueryInterface",  0LL,  @"IDQuery",  @"Received status query updates (idStatusUpdates: %@)  (updateFromURI: %@)  (updateService: %@)  (success: %@)  (error: %@) - replyMessage? %@");
    IMLogString( 0LL,  @"IDSIDQuery",  @"IDS",  @"IDQuery",  @"Received status query updates (idStatusUpdates: %@)  (updateFromURI: %@)  (updateService: %@)  (success: %@)  (error: %@) - replyMessage? %@");
    if ((_IMWillLog(@"IDQuery", v20) & 1) != 0) {
      _IMAlwaysLog( 0LL,  @"IDQuery",  @"Received status query updates (idStatusUpdates: %@)  (updateFromURI: %@)  (updateService: %@)  (success: %@)  (error: %@) - replyMessage? %@");
    }
  }

  if (*(void *)(*(void *)(a1[6] + 8LL) + 40LL))
  {
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  v11,  0LL,  0LL));
    IMInsertDatasToXPCDictionary(*(void *)(*(void *)(a1[6] + 8LL) + 40LL), "destinations");
    IMInsertKeyedCodableObjectsToXPCDictionary(*(void *)(*(void *)(a1[6] + 8LL) + 40LL), "error");
    uint64_t v22 = OSLogHandleForIDSCategory("IDQuery");
    uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v24 = IDSLoggableDescriptionForObjectOnService(v21, a1[4]);
      uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
      *(_DWORD *)buf = 138412290;
      id v38 = v25;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Sending id status results %@", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v26))
    {
      uint64_t v27 = IDSLoggableDescriptionForObjectOnService(v21, a1[4]);
      uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
      MarcoLogMadridLevel( @"IDSDaemonMIGQueryInterface",  0LL,  @"IDQuery",  @"Sending id status results %@");

      uint64_t v29 = IDSLoggableDescriptionForObjectOnService(v21, a1[4]);
      uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue(v29);
      IMLogString(0LL, @"IDSIDQuery", @"IDS", @"IDQuery", @"Sending id status results %@");

      if ((_IMWillLog(@"IDQuery", v30) & 1) != 0)
      {
        uint64_t v31 = IDSLoggableDescriptionForObjectOnService(v21, a1[4]);
        uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue(v31);
        _IMAlwaysLog(0LL, @"IDQuery", @"Sending id status results %@");
      }
    }

    uint64_t v32 = (_xpc_connection_s *)a1[5];
    if (v32) {
      xpc_connection_send_message(v32, *(xpc_object_t *)(*(void *)(a1[6] + 8LL) + 40LL));
    }
    uint64_t v33 = *(void *)(a1[6] + 8LL);
    uint64_t v34 = *(void **)(v33 + 40);
    *(void *)(v33 + 40) = 0LL;
  }
}

IDSURI *sub_100313B84(uint64_t a1, uint64_t a2)
{
  return +[IDSURI URIWithUnprefixedURI:withServiceLoggingHint:]( &OBJC_CLASS___IDSURI,  "URIWithUnprefixedURI:withServiceLoggingHint:",  a2,  *(void *)(a1 + 32));
}

void sub_100314F88(uint64_t a1)
{
}

void sub_100316228(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog delivery_oversized](&OBJC_CLASS___IDSFoundationLog, "delivery_oversized"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    int v5 = 138412546;
    uint64_t v6 = v3;
    __int16 v7 = 2112;
    uint64_t v8 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "GUID %@ Tokens for URI:\n%@",  (uint8_t *)&v5,  0x16u);
  }
}

void sub_1003162E0(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog delivery_oversized](&OBJC_CLASS___IDSFoundationLog, "delivery_oversized"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    int v5 = 138412546;
    uint64_t v6 = v3;
    __int16 v7 = 2112;
    uint64_t v8 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "GUID %@ Skipped Destinations:\n%@",  (uint8_t *)&v5,  0x16u);
  }
}

uint64_t sub_100316D14(uint64_t a1, void *a2)
{
  uint64_t v9 = 0LL;
  uint64_t v10 = &v9;
  uint64_t v11 = 0x2020000000LL;
  uint64_t v12 = 0LL;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  timeval v5[2] = sub_100316DD8;
  v5[3] = &unk_1008F68F0;
  __int16 v7 = &v9;
  uint64_t v8 = a1;
  id v2 = a2;
  id v6 = v2;
  sub_1003AFCA0(v5, v2);
  uint64_t v3 = v10[3];

  _Block_object_dispose(&v9, 8);
  return v3;
}

void sub_100316DC0(_Unwind_Exception *a1)
{
}

void sub_100316DD8(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 48))
  {
    CSDBRecordStoreAddRecord(a2);
    if (CSDBRecordSaveStore(a2))
    {
      uint64_t Database = CSDBRecordStoreGetDatabase(a2);
      uint64_t v5 = *(void *)(a1 + 48);
      uint64_t v6 = CSDBRecordIndexOfPropertyNamed(&off_100900DB0, 9LL, "guid");
      *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = CSDBRecordCopyProperty(v5, v6);
      if (Database)
      {
        if (_IMWillLog(@"IMDSpotlight", v7)) {
          _IMAlwaysLog( 0LL,  @"IMDSpotlight",  @"Done with IDSIncomingMessageRecordAddMessageRecord, lets update Spotlight with this message record.");
        }
        int ID = CSDBRecordGetID(*(void *)(a1 + 48));
        uint64_t v9 = sub_1003174C0((uint64_t)kCFAllocatorDefault, ID, 0, *(void **)(a1 + 32));
        if (v9) {
          CFRelease(v9);
        }
      }
    }
  }

uint64_t sub_100316EC0(uint64_t a1, const __CFString *a2, int a3, void *a4)
{
  id v7 = a4;
  if (a1)
  {
    if (a2 && a3 && CFStringGetLength(a2))
    {
      uint64_t v15 = 0LL;
      uint64_t v16 = &v15;
      uint64_t v17 = 0x2020000000LL;
      uint64_t v18 = 0LL;
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472LL;
      v10[2] = sub_100316FF8;
      v10[3] = &unk_100900FC0;
      id v13 = a2;
      uint64_t v14 = a1;
      uint64_t v12 = &v15;
      id v11 = v7;
      sub_1003AFDCC( (uint64_t)@"SELECT ROWID, guid, topic, from_id, message_data, date, is_local, message_identifier, expiration_date, control_category FROM incoming_message WHERE message_identifier = ? ",  v10,  v11);
      a1 = v16[3];

      _Block_object_dispose(&v15, 8);
    }

    else
    {
      a1 = sub_100316D14(a1, v7);
    }
  }

  return a1;
}

void sub_100316FE0(_Unwind_Exception *a1)
{
}

void sub_100316FF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (const __CFArray *)CSDBRecordStoreProcessStatement(a2, &off_100900F18, a4, 0LL, 0LL);
  if (CFArrayGetCount(v8) || !*(void *)(a1 + 56))
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v8, 0LL);
    uint64_t v10 = CSDBRecordIndexOfPropertyNamed(&off_100900DB0, 9LL, "guid");
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = CSDBRecordCopyProperty(ValueAtIndex, v10);
    uint64_t v11 = OSLogHandleForIDSCategory("IDSIncomingMessageRecord");
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = *(void *)(a1 + 48);
      uint64_t v14 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
      *(_DWORD *)buf = 138412546;
      uint64_t v22 = v13;
      __int16 v23 = 2112;
      uint64_t v24 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "IDSIncomingMessageRecordAddMessageRecordDedup deduped message with identifier %@. Will use storage guid %@",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v15)
      && _IDSShouldLog(0LL, @"IDSIncomingMessageRecord"))
    {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSIncomingMessageRecord",  @"IDSIncomingMessageRecordAddMessageRecordDedup deduped message with identifier %@. Will use storage guid %@");
    }
  }

  else
  {
    CSDBRecordStoreAddRecord(a2);
    if (CSDBRecordSaveStore(a2))
    {
      uint64_t v16 = *(void *)(a1 + 56);
      uint64_t v17 = CSDBRecordIndexOfPropertyNamed(&off_100900DB0, 9LL, "guid");
      *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = CSDBRecordCopyProperty(v16, v17);
      if (a3)
      {
        if (_IMWillLog(@"IMDSpotlight", v18)) {
          _IMAlwaysLog( 0LL,  @"IMDSpotlight",  @"Done with IDSIncomingMessageRecordAddMessageRecordDedup, lets update Spotlight with this message record.");
        }
        int ID = CSDBRecordGetID(*(void *)(a1 + 56));
        uint64_t v20 = sub_1003174C0((uint64_t)kCFAllocatorDefault, ID, 0, *(void **)(a1 + 32));
        if (v20) {
          CFRelease(v20);
        }
      }
    }
  }

  if (v8) {
    CFRelease(v8);
  }
}

void *sub_10031725C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, const __CFString *a8, unsigned int a9, unsigned __int8 a10, void *a11, void *a12)
{
  id v19 = a12;
  pthread_once(&stru_1009B86F8, (void (*)(void))sub_1003186CC);
  uint64_t Instance = _CFRuntimeCreateInstance(a1, qword_1009C0B18, 16LL, 0LL);
  uint64_t v21 = (void *)Instance;
  if (Instance)
  {
    *(void *)(Instance + 16) = 0LL;
    *(void *)(Instance + 24) = 0LL;
    *(_DWORD *)(Instance + 16) = 0;
    id v22 = v19;
    [v22 ensureDatabaseIsInitialized];
    uint64_t v24 = (const void *)CSDBRecordCreate(&off_100900F18);

    if (v24)
    {
      id v31 = v19;
      uint64_t v26 = 0LL;
      v33[0] = a2;
      v33[1] = a3;
      v33[2] = a4;
      v33[3] = a5;
      v33[4] = a6;
      v33[5] = a7;
      v33[6] = a8;
      v33[7] = 0LL;
      v33[8] = a9;
      do
      {
        CSDBRecordSetProperty(v24, dword_1009C0B20[v26], v33[v26]);
        ++v26;
      }

      while (v26 != 9);
      uint64_t v27 = sub_100316EC0((uint64_t)v24, a8, a10, v22);
      if (v27)
      {
        uint64_t v28 = (const void *)v27;
        v21[3] = (int)CSDBRecordGetID(v24);
        id v19 = v31;
        if (a11) {
          *a11 = v28;
        }
        else {
          CFRelease(v28);
        }
      }

      else
      {
        CFRelease(v21);
        uint64_t v21 = 0LL;
        id v19 = v31;
      }

      CFRelease(v24);
    }

    else
    {
      CFRelease(v21);
      uint64_t v21 = 0LL;
    }
  }

  return v21;
}

const void *sub_1003174C0(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7 = a4;
  pthread_once(&stru_1009B86F8, (void (*)(void))sub_1003186CC);
  uint64_t Instance = _CFRuntimeCreateInstance(a1, qword_1009C0B18, 16LL, 0LL);
  if (Instance)
  {
    uint64_t v9 = (const void *)Instance;
    *(void *)(Instance + 16) = 0LL;
    *(void *)(Instance + 24) = a2;
    *(_DWORD *)(Instance + 16) = 0;
    if (a3) {
      uint64_t v10 = (const void *)sub_100317568(a2, v7);
    }
    else {
      uint64_t v10 = (const void *)sub_10031765C(a2, v7);
    }
    if (v10)
    {
      uint64_t v11 = v9;
    }

    else
    {
      uint64_t v10 = v9;
      uint64_t v11 = 0LL;
    }

    CFRelease(v10);
  }

  else
  {
    uint64_t v11 = 0LL;
  }

  return v11;
}

uint64_t sub_100317568(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v7 = 0LL;
  uint64_t v8 = &v7;
  uint64_t v9 = 0x2020000000LL;
  uint64_t v10 = 0LL;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _DWORD v6[2] = sub_10031761C;
  v6[3] = &unk_1008F69B8;
  void v6[4] = &v7;
  void v6[5] = a1;
  sub_1003AFCA0(v6, v3);
  uint64_t v4 = v8[3];
  _Block_object_dispose(&v7, 8);

  return v4;
}

void sub_100317604( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_10031761C(uint64_t a1, uint64_t a2)
{
  uint64_t result = CSDBRecordStoreCopyInstanceOfClassWithUID(a2, &off_100900F18, *(unsigned int *)(a1 + 40));
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  return result;
}

uint64_t sub_10031765C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v7 = 0LL;
  uint64_t v8 = &v7;
  uint64_t v9 = 0x2020000000LL;
  uint64_t v10 = 0LL;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _DWORD v6[2] = sub_100317710;
  v6[3] = &unk_1008F69B8;
  void v6[4] = &v7;
  void v6[5] = a1;
  sub_1003AFD04(v6, v3);
  uint64_t v4 = v8[3];
  _Block_object_dispose(&v7, 8);

  return v4;
}

void sub_1003176F8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100317710(uint64_t a1, uint64_t a2)
{
  uint64_t result = CSDBRecordStoreCopyInstanceOfClassWithUID(a2, &off_100900F18, *(unsigned int *)(a1 + 40));
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  return result;
}

void sub_100317750(const __CFString *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (_IMWillLog(@"IDSIncomingMessageRecord", v6)) {
    _IMAlwaysLog( 0LL,  @"IDSIncomingMessageRecord",  @"IDSIncomingMessageRecordUpdateExpirationForGUID %@ with expiration %lld");
  }
  if (a1 && CFStringGetLength(a1))
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    void v7[2] = sub_10031780C;
    v7[3] = &unk_100900FE0;
    void v7[4] = a2;
    void v7[5] = a1;
    sub_1003AFE40((uint64_t)@"UPDATE incoming_message SET expiration_date = ?WHERE guid = ? ;", v7, v5);
  }
}

uint64_t sub_10031780C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return CSDBSqliteStatementPerform(a4);
}

uint64_t sub_100317848(void *a1)
{
  id v1 = a1;
  uint64_t v5 = 0LL;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000LL;
  uint64_t v8 = 0LL;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1003178F8;
  v4[3] = &unk_1008F6A58;
  void v4[4] = &v5;
  sub_1003AFD68(v4, v1);
  uint64_t v2 = v6[3];
  _Block_object_dispose(&v5, 8);

  return v2;
}

void sub_1003178E0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1003178F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = CSDBSqliteDatabaseStatementForReading( a3,  @"SELECT topic, count(ROWID) FROM incoming_message GROUP BY topic");
  if (result)
  {
    uint64_t v5 = result;
    if (*(void *)(result + 8))
    {
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = CSDBSqliteStatementCopyAllRowsStringsForColumnsAtIndices( result,  &off_100948910);
      return CSDBSqliteStatementReset(v5);
    }
  }

  return result;
}

uint64_t sub_100317960(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  uint64_t v18 = 0LL;
  id v19 = &v18;
  uint64_t v20 = 0x2020000000LL;
  uint64_t v21 = 0LL;
  uint64_t v14 = 0LL;
  uint64_t v15 = &v14;
  uint64_t v16 = 0x2020000000LL;
  char v17 = 1;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_100317A7C;
  v8[3] = &unk_100901008;
  uint64_t v12 = a2;
  uint64_t v13 = a1;
  id v5 = a3;
  id v9 = v5;
  uint64_t v10 = &v18;
  uint64_t v11 = &v14;
  sub_1003AFD68(v8, v5);
  if (a4) {
    *a4 = *((_BYTE *)v15 + 24);
  }
  uint64_t v6 = v19[3];

  _Block_object_dispose(&v14, 8);
  _Block_object_dispose(&v18, 8);

  return v6;
}

void sub_100317A58( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_100317A7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = CSDBSqliteDatabaseStatementForReading( a3,  @"SELECT ROWID, guid, topic, from_id, message_data, date, is_local, message_identifier, expiration_date, control_category FROM incoming_message WHERE is_local = ? ORDER BY ROWID DESC LIMIT ?");
  if (v5 && (uint64_t v6 = v5, *(void *)(v5 + 8)))
  {
    CSDBSqliteBindInt64(v5, *(void *)(a1 + 56));
    CSDBSqliteBindInt64(v6, *(void *)(a1 + 64));
    uint64_t v7 = (const __CFArray *)CSDBRecordStoreProcessStatement(a2, &off_100900F18, v6, 0LL, 0LL);
    CFIndex Count = CFArrayGetCount(v7);
    if ((int)Count >= 1)
    {
      CFIndex v9 = (int)Count;
      uint64_t v10 = Count;
      uint64_t v11 = (Count << 32) - 0x100000000LL;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v7, v11 >> 32);
        int ID = CSDBRecordGetID(ValueAtIndex);
        uint64_t v14 = sub_1003174C0((uint64_t)kCFAllocatorDefault, ID, 0, *(void **)(a1 + 32));
        uint64_t v15 = v14;
        if (!*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL)) {
          break;
        }
        if (v14) {
          goto LABEL_7;
        }
LABEL_8:
        v11 -= 0x100000000LL;
        if (!--v10) {
          goto LABEL_13;
        }
      }

      *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = CFArrayCreateMutable( kCFAllocatorDefault,  v9,  &kCFTypeArrayCallBacks);
      if (!v15) {
        goto LABEL_8;
      }
LABEL_7:
      CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL), v15);
      CFRelease(v15);
      goto LABEL_8;
    }

uint64_t sub_100317C0C(uint64_t a1, void *a2, _BYTE *a3)
{
  uint64_t v16 = 0LL;
  char v17 = &v16;
  uint64_t v18 = 0x2020000000LL;
  uint64_t v19 = 0LL;
  uint64_t v12 = 0LL;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x2020000000LL;
  char v15 = 1;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_100317D1C;
  v7[3] = &unk_100901030;
  uint64_t v11 = a1;
  id v4 = a2;
  id v8 = v4;
  CFIndex v9 = &v16;
  uint64_t v10 = &v12;
  sub_1003AFD68(v7, v4);
  if (a3) {
    *a3 = *((_BYTE *)v13 + 24);
  }
  uint64_t v5 = v17[3];

  _Block_object_dispose(&v12, 8);
  _Block_object_dispose(&v16, 8);

  return v5;
}

void sub_100317CF8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100317D1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = CSDBSqliteDatabaseStatementForReading( a3,  @"SELECT ROWID, guid, topic, from_id, message_data, date, is_local, message_identifier, expiration_date, control_category FROM incoming_message WHERE expiration_date > 0 AND expiration_date < ? ORDER BY ROWID DESC; ");
  if (v5 && (uint64_t v6 = v5, *(void *)(v5 + 8)))
  {
    CSDBSqliteBindInt64(v5, *(void *)(a1 + 56));
    uint64_t v7 = (const __CFArray *)CSDBRecordStoreProcessStatement(a2, &off_100900F18, v6, 0LL, 0LL);
    CFIndex Count = CFArrayGetCount(v7);
    if ((int)Count >= 1)
    {
      CFIndex v9 = (int)Count;
      uint64_t v10 = Count;
      uint64_t v11 = (Count << 32) - 0x100000000LL;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v7, v11 >> 32);
        int ID = CSDBRecordGetID(ValueAtIndex);
        uint64_t v14 = sub_1003174C0((uint64_t)kCFAllocatorDefault, ID, 0, *(void **)(a1 + 32));
        char v15 = v14;
        if (!*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL)) {
          break;
        }
        if (v14) {
          goto LABEL_7;
        }
LABEL_8:
        v11 -= 0x100000000LL;
        if (!--v10) {
          goto LABEL_13;
        }
      }

      *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = CFArrayCreateMutable( kCFAllocatorDefault,  v9,  &kCFTypeArrayCallBacks);
      if (!v15) {
        goto LABEL_8;
      }
LABEL_7:
      CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL), v15);
      CFRelease(v15);
      goto LABEL_8;
    }

uint64_t sub_100317EA0(uint64_t a1, int a2, uint64_t a3, void *a4, _BYTE *a5)
{
  uint64_t v20 = 0LL;
  uint64_t v21 = &v20;
  uint64_t v22 = 0x2020000000LL;
  uint64_t v23 = 0LL;
  uint64_t v16 = 0LL;
  char v17 = &v16;
  uint64_t v18 = 0x2020000000LL;
  char v19 = 1;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_100317FC4;
  v9[3] = &unk_100901058;
  int v15 = a2;
  uint64_t v13 = a3;
  uint64_t v14 = a1;
  id v6 = a4;
  id v10 = v6;
  uint64_t v11 = &v20;
  uint64_t v12 = &v16;
  sub_1003AFD68(v9, v6);
  if (a5) {
    *a5 = *((_BYTE *)v17 + 24);
  }
  uint64_t v7 = v21[3];

  _Block_object_dispose(&v16, 8);
  _Block_object_dispose(&v20, 8);

  return v7;
}

void sub_100317FA0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_100317FC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = CSDBSqliteDatabaseStatementForReading( a3,  @"SELECT ROWID, guid, topic, from_id, message_data, date, is_local, message_identifier, expiration_date, control_category FROM incoming_message WHERE is_local = ? AND control_category = ? ORDER BY ROWID DESC LIMIT ?; ");
  if (v5 && (uint64_t v6 = v5, *(void *)(v5 + 8)))
  {
    CSDBSqliteBindInt64(v5, *(void *)(a1 + 56));
    CSDBSqliteBindInt(v6, *(unsigned int *)(a1 + 72));
    CSDBSqliteBindInt64(v6, *(void *)(a1 + 64));
    uint64_t v7 = (const __CFArray *)CSDBRecordStoreProcessStatement(a2, &off_100900F18, v6, 0LL, 0LL);
    CFIndex Count = CFArrayGetCount(v7);
    if ((int)Count >= 1)
    {
      CFIndex v9 = (int)Count;
      uint64_t v10 = Count;
      uint64_t v11 = (Count << 32) - 0x100000000LL;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v7, v11 >> 32);
        int ID = CSDBRecordGetID(ValueAtIndex);
        uint64_t v14 = sub_1003174C0((uint64_t)kCFAllocatorDefault, ID, 0, *(void **)(a1 + 32));
        int v15 = v14;
        if (!*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL)) {
          break;
        }
        if (v14) {
          goto LABEL_7;
        }
LABEL_8:
        v11 -= 0x100000000LL;
        if (!--v10) {
          goto LABEL_13;
        }
      }

      *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = CFArrayCreateMutable( kCFAllocatorDefault,  v9,  &kCFTypeArrayCallBacks);
      if (!v15) {
        goto LABEL_8;
      }
LABEL_7:
      CFArrayAppendValue(*(CFMutableArrayRef *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL), v15);
      CFRelease(v15);
      goto LABEL_8;
    }

void sub_100318160(const __CFString *a1, void *a2)
{
  id v3 = a2;
  if (a1 && CFStringGetLength(a1))
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472LL;
    timeval v5[2] = sub_100318210;
    v5[3] = &unk_1008F6D90;
    void v5[4] = a1;
    sub_1003AFDCC( (uint64_t)@"SELECT ROWID, guid, topic, from_id, message_data, date, is_local, message_identifier, expiration_date, control_category FROM incoming_message WHERE guid = ? ORDER BY ROWID ASC;",
      v5,
      v3);
  }
}

uint64_t sub_100318210(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (const __CFArray *)CSDBRecordStoreProcessStatement(a2, &off_100900F18, a4, 0LL, 0LL);
  int Count = CFArrayGetCount(v6);
  if (Count >= 1)
  {
    CFIndex v8 = 0LL;
    uint64_t v9 = Count;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v6, v8);
      CSDBRecordStoreRemoveRecord(a2, ValueAtIndex);
      ++v8;
    }

    while (v9 != v8);
  }

  CFRelease(v6);
  CSDBRecordSaveStore(a2);
  return CSDBRecordStoreInvalidateCachesWithStore(a2);
}

void sub_1003182B0(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (_IMWillLog(@"IDSIncomingMessageRecord", v6)) {
    _IMAlwaysLog( 0LL,  @"IDSIncomingMessageRecord",  @"IDSIncomingMessageRecordDeleteMessagesOlderThanThreshold %lld");
  }
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_10031835C;
  v7[3] = &unk_100900FE0;
  void v7[4] = a1;
  void v7[5] = a2;
  sub_1003AFE40((uint64_t)@"DELETE FROM incoming_message WHERE date < ? LIMIT ?; ", v7, v5);
}

uint64_t sub_10031835C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return CSDBSqliteStatementPerform(a4);
}

void sub_100318398(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (_IMWillLog(@"IDSIncomingMessageRecord", v4)) {
    _IMAlwaysLog( 0LL,  @"IDSIncomingMessageRecord",  @"IDSIncomingMessageRecordDeleteRestrictedMessagesOlderThanThreshold %lld");
  }
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  timeval v5[2] = sub_100318438;
  v5[3] = &unk_1008F6D90;
  void v5[4] = a1;
  sub_1003AFE40( (uint64_t)@"DELETE FROM incoming_message WHERE expiration_date > 0 AND expiration_date < ?; ",
    v5,
    v3);
}

uint64_t sub_100318438(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return CSDBSqliteStatementPerform(a4);
}

void sub_100318464( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  id v19 = a11;
  uint64_t v20 = v19;
  if (a1)
  {
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472LL;
    v21[2] = sub_100318568;
    v21[3] = &unk_100901080;
    uint64_t v23 = a1;
    id v22 = v19;
    uint64_t v24 = a2;
    uint64_t v25 = a3;
    uint64_t v26 = a4;
    uint64_t v27 = a5;
    uint64_t v28 = a6;
    uint64_t v29 = a7;
    uint64_t v30 = a8;
    uint64_t v31 = a9;
    uint64_t v32 = a10;
    sub_1003AFBE0(a1 + 16, v21, v22);
  }

  else
  {
    _IMWarn(@"NULL message passed to %s");
  }
}

void sub_100318568(uint64_t a1)
{
  uint64_t v2 = sub_10031765C(*(void *)(*(void *)(a1 + 40) + 24LL), *(void **)(a1 + 32));
  if (v2)
  {
    id v3 = (const void *)v2;
    if (*(void *)(a1 + 48)) {
      **(void **)(a1 + 4_Block_object_dispose((const void *)(v11 - 80), 8) = (int)CSDBRecordGetID(v2);
    }
    if (*(void *)(a1 + 56)) {
      **(void **)(a1 + 56) = CSDBRecordCopyProperty(v3, dword_1009C0B20[0]);
    }
    if (*(void *)(a1 + 64)) {
      **(void **)(a1 + 64) = CSDBRecordCopyProperty(v3, dword_1009C0B24);
    }
    if (*(void *)(a1 + 72)) {
      **(void **)(a1 + 72) = CSDBRecordCopyProperty(v3, dword_1009C0B28);
    }
    if (*(void *)(a1 + 80)) {
      **(void **)(a1 + 80) = CSDBRecordCopyProperty(v3, dword_1009C0B2C);
    }
    if (*(void *)(a1 + 88)) {
      **(void **)(a1 + 8_Block_object_dispose((const void *)(v11 - 80), 8) = CSDBRecordGetProperty(v3, dword_1009C0B30);
    }
    if (*(void *)(a1 + 96)) {
      **(_BYTE **)(a1 + 96) = CSDBRecordGetProperty(v3, dword_1009C0B34) != 0;
    }
    if (*(void *)(a1 + 104)) {
      **(void **)(a1 + 104) = CSDBRecordGetProperty(v3, dword_1009C0B3C);
    }
    if (*(void *)(a1 + 112)) {
      **(_DWORD **)(a1 + 112) = CSDBRecordGetProperty(v3, dword_1009C0B40);
    }
    CFRelease(v3);
  }

uint64_t sub_1003186CC()
{
  uint64_t v0 = 0LL;
  qword_1009C0B18 = _CFRuntimeRegisterClass(&unk_1009010A0);
  id v1 = &off_100900DB0;
  do
  {
    uint64_t v2 = *v1;
    v1 += 5;
    uint64_t result = CSDBRecordIndexOfPropertyNamed(&off_100900DB0, 9LL, v2);
    dword_1009C0B20[v0++] = result;
  }

  while (v0 != 9);
  return result;
}

uint64_t sub_100318738(uint64_t result)
{
  *(void *)(result + 24) = -1LL;
  return result;
}

void sub_100318744(uint64_t a1)
{
  uint64_t v2 = (os_unfair_lock_s *)(a1 + 16);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
  *(void *)(a1 + 24) = -1LL;
  os_unfair_lock_unlock(v2);
}

BOOL sub_100318778(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 24) == *(void *)(a2 + 24);
}

uint64_t sub_10031878C(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

CFStringRef sub_100318794(os_unfair_lock_s *a1)
{
  uint64_t v2 = a1 + 4;
  os_unfair_lock_lock(a1 + 4);
  id v3 = CFGetAllocator(a1);
  CFAllocatorRef v4 = CFGetAllocator(a1);
  CFStringRef v5 = CFStringCreateWithFormat(v3, 0LL, @"<IDSIncomingMessageRecord %p [%p]>{}", a1, v4);
  os_unfair_lock_unlock(v2);
  return v5;
}

id sub_100318D68(void *a1, void *a2)
{
  id v22 = a1;
  id v3 = a2;
  uint64_t v21 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  id obj = v3;
  id v4 = [obj countByEnumeratingWithState:&v27 objects:v32 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v20 = *(void *)v28;
    do
    {
      for (i = 0LL; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v28 != v20) {
          objc_enumerationMutation(obj);
        }
        uint64_t v7 = *(void *)(*((void *)&v27 + 1) + 8LL * (void)i);
        __int128 v23 = 0u;
        __int128 v24 = 0u;
        __int128 v25 = 0u;
        __int128 v26 = 0u;
        id v8 = v22;
        id v9 = [v8 countByEnumeratingWithState:&v23 objects:v31 count:16];
        if (v9)
        {
          id v10 = v9;
          uint64_t v11 = *(void *)v24;
LABEL_8:
          uint64_t v12 = 0LL;
          while (1)
          {
            if (*(void *)v24 != v11) {
              objc_enumerationMutation(v8);
            }
            uint64_t v13 = *(void **)(*((void *)&v23 + 1) + 8 * v12);
            uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v13 SIMIdentifier]);
            unsigned __int8 v15 = [v14 isEqual:v7];

            if ((v15 & 1) != 0) {
              break;
            }
            if (v10 == (id)++v12)
            {
              id v10 = [v8 countByEnumeratingWithState:&v23 objects:v31 count:16];
              if (v10) {
                goto LABEL_8;
              }
              goto LABEL_14;
            }
          }

          uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[IDSPhoneSubscription phoneSubscriptionWithSIM:]( &OBJC_CLASS___IDSPhoneSubscription,  "phoneSubscriptionWithSIM:",  v13));

          if (v16) {
            goto LABEL_17;
          }
        }

        else
        {
LABEL_14:
        }

        uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[IDSPhoneSubscription phoneSubscriptionWithLabelID:]( &OBJC_CLASS___IDSPhoneSubscription,  "phoneSubscriptionWithLabelID:",  v7));
LABEL_17:
        -[NSMutableArray addObject:](v21, "addObject:", v16);
      }

      id v5 = [obj countByEnumeratingWithState:&v27 objects:v32 count:16];
    }

    while (v5);
  }

  id v17 = -[NSMutableArray copy](v21, "copy");
  return v17;
}

BOOL sub_100319234(id a1, IDSUser *a2)
{
  return -[IDSUser hasBeenProvisioned](a2, "hasBeenProvisioned");
}

id sub_10031923C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 userStore]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 propertiesForUser:v3]);

  uint64_t v6 = objc_alloc(&OBJC_CLASS___IDSURI);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v3 phoneNumber]);
  id v8 = -[IDSURI initWithUnprefixedURI:](v6, "initWithUnprefixedURI:", v7);

  id v9 = objc_alloc(&OBJC_CLASS___IDSPhoneTemporaryAliasDescription);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v3 expirationDate]);

  id v11 = objc_msgSend( v9,  "initWithURI:expirationDate:selected:",  v8,  v10,  objc_msgSend(v5, "disableRegistration") ^ 1);
  return v11;
}

id sub_1003196B4(void *a1, void *a2)
{
  id v3 = a2;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  _DWORD v11[2] = sub_10031AA28;
  v11[3] = &unk_1008FBBC8;
  id v12 = v3;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "__imArrayByFilteringWithBlock:", v11));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 firstObject]);

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 SIMIdentifier]);
  uint64_t v7 = v6;
  if (v6) {
    id v8 = v6;
  }
  else {
    id v8 = (id)objc_claimAutoreleasedReturnValue([v3 labelID]);
  }
  id v9 = v8;

  return v9;
}

id sub_100319F20(uint64_t a1, void *a2)
{
  return sub_1003196B4(*(void **)(a1 + 32), a2);
}

BOOL sub_10031AA28(uint64_t a1, void *a2)
{
  id v3 = (id)IDSSubscriptionSlotFromCTSIMSlot([a2 slot]);
  return v3 == [*(id *)(a1 + 32) subscriptionSlot];
}

void sub_10031AB74(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___IDSPeerIDManager);
  uint64_t v2 = (void *)qword_1009C0B50;
  qword_1009C0B50 = (uint64_t)v1;
}

void sub_10031AD80(_Unwind_Exception *a1)
{
}

uint64_t sub_10031AD9C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    uint64_t v2 = OSLogHandleForIDSCategory("PeerLookup");
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = _os_feature_enabled_impl("IDS", "SwiftDataForQueryCache");
      id v5 = @"NO";
      if (v4) {
        id v5 = @"YES";
      }
      *(_DWORD *)buf = 138412290;
      id v9 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "SwiftDataForQueryCache FF enabled: %@",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v6) && _IDSShouldLog(0LL, @"PeerLookup"))
    {
      _os_feature_enabled_impl("IDS", "SwiftDataForQueryCache");
      _IDSLogV(0LL, @"IDSFoundation", @"PeerLookup", @"SwiftDataForQueryCache FF enabled: %@");
    }
  }

  return 0LL;
}

LABEL_218:
                        }

                        else
                        {
                          uint64_t v145 = 0LL;
                        }

                        objc_autoreleasePoolPop(context);
                        LOBYTE(v213) = v239;
                        LOBYTE(v209) = v270;
                        uint64_t v153 = -[IDSEndpoint initWithURI:serviceIdentifier:clientData:KTLoggableData:KTDeviceSignature:mismatchedAccountFlag:ktCapableFlag:pushToken:sessionToken:expireDate:refreshDate:anonymizedSenderID:verifiedBusiness:serializedPublicMessageProtectionIdentity:queryTimeInterval:serializedNGMDeviceIdentity:serializedNGMDevicePrekey:serializedApplicationPublicKey:endpointURIProperties:familyEndpointData:gameCenterData:]( objc_alloc(&OBJC_CLASS___IDSEndpoint),  "initWithURI:serviceIdentifier:clientData:KTLoggableData:KTDeviceSignature:mismatchedAcc ountFlag:ktCapableFlag:pushToken:sessionToken:expireDate:refreshDate:anonymizedSenderID :verifiedBusiness:serializedPublicMessageProtectionIdentity:queryTimeInterval:serialize dNGMDeviceIdentity:serializedNGMDevicePrekey:serializedApplicationPublicKey:endpointURI Properties:familyEndpointData:gameCenterData:",  v17,  v13,  v134,  v281,  v276,  v266,  v143,  v209,  v287,  v278,  v262,  v263,  v240,  v213,  v250,  v248,  v249,  v145,  v264,  v273,  v267);
                        -[NSMutableArray addObject:](v252, "addObject:", v153);

                        __int128 v271 = 1;
                      }
                    }

                    else
                    {
                      double v150 = OSLogHandleForIDSCategory("PeerLookup");
                      uint64_t v151 = (os_log_s *)objc_claimAutoreleasedReturnValue(v150);
                      if (os_log_type_enabled(v151, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_WORD *)buf = 0;
                        _os_log_impl( (void *)&_mh_execute_header,  v151,  OS_LOG_TYPE_DEFAULT,  "   No known push token found, ignoring",  buf,  2u);
                      }

                      if (os_log_shim_legacy_logging_enabled(v152)
                        && _IDSShouldLog(0LL, @"PeerLookup"))
                      {
                        _IDSLogV( 0LL,  @"IDSFoundation",  @"PeerLookup",  @"   No known push token found, ignoring");
                      }
                    }
                  }

                  else
                  {
                    id v115 = OSLogHandleForIDSCategory("Warning");
                    int v116 = (os_log_s *)objc_claimAutoreleasedReturnValue(v115);
                    if (os_log_type_enabled(v116, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)buf = 138412290;
                      v342 = (uint64_t)v287;
                      _os_log_impl( (void *)&_mh_execute_header,  v116,  OS_LOG_TYPE_ERROR,  "   No known iMessage public key found for token, skipping this identity: %@",  buf,  0xCu);
                    }

                    if (os_log_shim_legacy_logging_enabled(v117))
                    {
                      _IDSWarnV( @"IDSFoundation",  @"   No known iMessage public key found for token, skipping this identity: %@");
                      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"   No known iMessage public key found for token, skipping this identity: %@");
                      v207 = v287;
                      _IDSLogTransport( @"Warning",  @"IDS",  @"   No known iMessage public key found for token, skipping this identity: %@");
                    }
                  }

                  uint64_t v33 = v265 + 1;
                }

                while ((id)(v265 + 1) != v259);
                v259 = [v244 countByEnumeratingWithState:&v322 objects:v340 count:16];
              }

              while (v259);
            }

            else
            {
              __int128 v271 = 0;
            }

            uint64_t v154 = objc_alloc(&OBJC_CLASS___KTVerifierResult);
            uint64_t v155 = (void *)objc_claimAutoreleasedReturnValue( +[IDSKeyTransparencyVerifier keyTransparencyURIPrefixForServiceIdentifier:]( &OBJC_CLASS___IDSKeyTransparencyVerifier,  "keyTransparencyURIPrefixForServiceIdentifier:",  v13));
            uint64_t v156 = (void *)objc_claimAutoreleasedReturnValue([v17 prefixedURI]);
            __int16 v157 = (void *)objc_claimAutoreleasedReturnValue([v155 stringByAppendingString:v156]);
            uint64_t v158 = (void *)objc_claimAutoreleasedReturnValue( +[IDSKeyTransparencyVerifier keyTransparencyApplicationForServiceIdentifier:]( &OBJC_CLASS___IDSKeyTransparencyVerifier,  "keyTransparencyApplicationForServiceIdentifier:",  v13));
            __int128 v284 = [v154 initPendingForUri:v157 application:v158];

            __int16 v159 = objc_alloc(&OBJC_CLASS___IDSQueryKeyTransparencyContext);
            uint64_t v160 = (void *)objc_claimAutoreleasedReturnValue(-[IDSKeyTransparencyIndex accountKey](v218, "accountKey"));
            v286 = -[IDSQueryKeyTransparencyContext initWithVerifierResult:ticket:accountKey:queryResponseTime:ktOptIn:]( v159,  "initWithVerifierResult:ticket:accountKey:queryResponseTime:ktOptIn:",  v284,  0LL,  v160,  v216,  v215);

            __int16 v161 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v235, "objectForKeyedSubscript:", v17));
            LODWORD(v160) = v161 == 0LL;

            if ((_DWORD)v160)
            {
              v162 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
              __int16 v163 = OSLogHandleForIDSCategory("PeerLookup");
              v164 = (os_log_s *)objc_claimAutoreleasedReturnValue(v163);
              if (os_log_type_enabled(v164, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138412802;
                v342 = (uint64_t)v13;
                v343 = 2112;
                v344 = v17;
                v345 = 2112;
                v346 = v162;
                _os_log_impl( (void *)&_mh_execute_header,  v164,  OS_LOG_TYPE_DEFAULT,  "Will save endpoints to SwiftData DB for service: %@, uri: %@, uuid: %@",  buf,  0x20u);
              }

              if (os_log_shim_legacy_logging_enabled(v165)
                && _IDSShouldLog(0LL, @"PeerLookup"))
              {
                v210 = v17;
                uint64_t v211 = v162;
                v207 = v13;
                _IDSLogV( 0LL,  @"IDSFoundation",  @"PeerLookup",  @"Will save endpoints to SwiftData DB for service: %@, uri: %@, uuid: %@");
              }

              v310[0] = _NSConcreteStackBlock;
              v310[1] = 3221225472LL;
              v310[2] = sub_10031DB78;
              v310[3] = &unk_1008F6080;
              v166 = v13;
              __int128 v311 = v166;
              __int128 v312 = v17;
              id v167 = v162;
              __int128 v313 = v167;
              [v214 saveEndpoints:v252 ktContext:v286 service:v166 fromURI:v12 toURI:v17 completion:v310];
            }

            __int128 v282 = (void *)objc_claimAutoreleasedReturnValue( +[IDSPeerIDValue peerIDValueWithEndpoints:keyTransparencyContext:]( &OBJC_CLASS___IDSPeerIDValue,  "peerIDValueWithEndpoints:keyTransparencyContext:",  v252,  v286,  v207));
            [v251 setObject:v282 forKey:v229];
            uint64_t v168 = _os_feature_enabled_impl("IDS", "SwiftDataForQueryCache");
            uint64_t v169 = (id *)p_managerOLD;
            if (v168) {
              uint64_t v169 = (id *)p_managerSD;
            }
            double v170 = (void *)objc_claimAutoreleasedReturnValue([*v169 clientDataUpdateBlocks]);
            uint64_t v171 = (id)objc_claimAutoreleasedReturnValue([v170 allValues]);

            __int128 v309 = 0u;
            __int128 v308 = 0u;
            __int128 v307 = 0u;
            __int128 v306 = 0u;
            uint64_t v288 = v171;
            v172 = [v288 countByEnumeratingWithState:&v306 objects:v336 count:16];
            if (v172)
            {
              id v290 = *(void *)v307;
              do
              {
                for (m = 0LL; m != v172; m = (char *)m + 1)
                {
                  if (*(void *)v307 != v290) {
                    objc_enumerationMutation(v288);
                  }
                  id v174 = *(void *)(*((void *)&v306 + 1) + 8LL * (void)m);
                  __int128 v302 = 0u;
                  __int128 v303 = 0u;
                  __int128 v304 = 0u;
                  __int128 v305 = 0u;
                  v175 = v252;
                  id v176 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v175,  "countByEnumeratingWithState:objects:count:",  &v302,  v335,  16LL);
                  if (v176)
                  {
                    id v177 = *(void *)v303;
                    do
                    {
                      for (n = 0LL; n != v176; n = (char *)n + 1)
                      {
                        if (*(void *)v303 != v177) {
                          objc_enumerationMutation(v175);
                        }
                        (*(void (**)(uint64_t, id, void *, id, void))(v174 + 16))( v174,  v13,  v17,  v12,  *(void *)(*((void *)&v302 + 1) + 8LL * (void)n));
                      }

                      id v176 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v175,  "countByEnumeratingWithState:objects:count:",  &v302,  v335,  16LL);
                    }

                    while (v176);
                  }
                }

                v172 = [v288 countByEnumeratingWithState:&v306 objects:v336 count:16];
              }

              while (v172);
            }

            if ((v271 & 1) == 0) {
              -[IDSPeerIDManager forgetPeerTokensForURI:fromURI:service:]( v227,  "forgetPeerTokensForURI:fromURI:service:",  v17,  v12,  v13);
            }
            uint64_t v179 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v271 & 1));
            -[NSMutableDictionary setObject:forKeyedSubscript:](v225, "setObject:forKeyedSubscript:", v179, v17);

            v180 = -[NSMutableArray copy](v252, "copy");
            -[NSMutableDictionary setObject:forKeyedSubscript:](v235, "setObject:forKeyedSubscript:", v180, v17);
          }

          else
          {
            -[IDSPeerIDManager forgetPeerTokensForURI:fromURI:service:]( v227,  "forgetPeerTokensForURI:fromURI:service:",  v17,  v12,  v13);
            -[NSMutableDictionary setObject:forKeyedSubscript:]( v225,  "setObject:forKeyedSubscript:",  &__kCFBooleanFalse,  v17);
            -[NSMutableDictionary setObject:forKeyedSubscript:]( v235,  "setObject:forKeyedSubscript:",  &__NSArray0__struct,  v17);
          }

          unsigned __int8 v15 = v228 + 1;
        }

        while ((id)(v228 + 1) != v226);
        xpc_object_t v181 = [obj countByEnumeratingWithState:&v330 objects:v352 count:16];
        v226 = v181;
      }

      while (v181);
    }

    id v291 = (void *)objc_claimAutoreleasedReturnValue( -[IDSPeerIDManagerProtocol _peerIDKeysForService:]( v227->_managerOLD,  "_peerIDKeysForService:",  v13));
    id v182 = [v291 count];
    if (v182 > (id)-[IDSPeerIDManager excessiveQueryCacheEntriesThreshold](v227, "excessiveQueryCacheEntriesThreshold"))
    {
      __int128 v183 = OSLogHandleForIDSCategory("PeerLookup");
      __int128 v184 = (os_log_s *)objc_claimAutoreleasedReturnValue(v183);
      if (os_log_type_enabled(v184, OS_LOG_TYPE_DEFAULT))
      {
        __int128 v185 = [v291 count];
        *(_DWORD *)buf = 138412546;
        v342 = (uint64_t)v13;
        v343 = 2048;
        v344 = v185;
        _os_log_impl( (void *)&_mh_execute_header,  v184,  OS_LOG_TYPE_DEFAULT,  "Excessive query cache entries detected for service: %@ {current count: %ld}",  buf,  0x16u);
      }

      if (os_log_shim_legacy_logging_enabled(v186)
        && _IDSShouldLog(0LL, @"PeerLookup"))
      {
        v207 = v13;
        v210 = [v291 count];
        _IDSLogV( 0LL,  @"IDSFoundation",  @"PeerLookup",  @"Excessive query cache entries detected for service: %@ {current count: %ld}");
      }

      reportedExcessiveQueryCacheEntries = v227->_reportedExcessiveQueryCacheEntries;
      if (!reportedExcessiveQueryCacheEntries)
      {
        v188 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
        v189 = v227->_reportedExcessiveQueryCacheEntries;
        v227->_reportedExcessiveQueryCacheEntries = v188;

        reportedExcessiveQueryCacheEntries = v227->_reportedExcessiveQueryCacheEntries;
      }

      if ((-[NSMutableSet containsObject:]( reportedExcessiveQueryCacheEntries,  "containsObject:",  v13,  v207,  v210) & 1) == 0)
      {
        -[NSMutableSet addObject:](v227->_reportedExcessiveQueryCacheEntries, "addObject:", v13);
        if (+[IDSAutoBugCapture isSupported](&OBJC_CLASS___IDSAutoBugCapture, "isSupported"))
        {
          __int16 v190 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"(%@)",  v13));
          v300[0] = _NSConcreteStackBlock;
          v300[1] = 3221225472LL;
          v300[2] = sub_10031DDA0;
          v300[3] = &unk_1008F8320;
          __int128 v301 = v13;
          +[IDSAutoBugCapture triggerCaptureWithEvent:context:completion:]( &OBJC_CLASS___IDSAutoBugCapture,  "triggerCaptureWithEvent:context:completion:",  211LL,  v190,  v300);
        }
      }
    }

    __int16 v191 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
    if (os_log_type_enabled(v191, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v191,  OS_LOG_TYPE_DEFAULT,  "Remote query finished - kicking KT peer verification",  buf,  2u);
    }

    double v192 = (void *)objc_claimAutoreleasedReturnValue( +[IDSKeyTransparencyVerifier sharedInstance]( &OBJC_CLASS___IDSKeyTransparencyVerifier,  "sharedInstance"));
    [v192 kickPeerVerificationForURIs:obj service:v13 localURI:v12 fetchNow:0 withCompletion:&stru_1009011D8];

    __int128 v193 = _os_feature_enabled_impl("IDS", "SwiftDataForQueryCache");
    v194 = (id *)p_managerOLD;
    if (v193) {
      v194 = (id *)p_managerSD;
    }
    __int128 v195 = (void *)objc_claimAutoreleasedReturnValue([*v194 endpointQueryListeners]);
    __int128 v196 = (id)objc_claimAutoreleasedReturnValue([v195 allValues]);

    __int128 v298 = 0u;
    __int128 v299 = 0u;
    __int128 v296 = 0u;
    __int128 v297 = 0u;
    uint64_t v197 = v196;
    v198 = [v197 countByEnumeratingWithState:&v296 objects:v334 count:16];
    if (v198)
    {
      id v199 = *(void *)v297;
      do
      {
        for (ii = 0LL; ii != v198; ii = (char *)ii + 1)
        {
          if (*(void *)v297 != v199) {
            objc_enumerationMutation(v197);
          }
          uint64_t v201 = *(void **)(*((void *)&v296 + 1) + 8LL * (void)ii);
          v202 = (void *)objc_claimAutoreleasedReturnValue([v201 queryCompletionBlock]);
          if (v202)
          {
            v203 = (void *)objc_claimAutoreleasedReturnValue([v201 queue]);
            v204 = v203 == 0LL;

            if (!v204)
            {
              v205 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v201 queue]);
              block[0] = _NSConcreteStackBlock;
              block[1] = 3221225472LL;
              block[2] = sub_10031DF98;
              block[3] = &unk_1008F60E8;
              void block[4] = v201;
              char v293 = v13;
              __int128 v294 = v12;
              __int128 v295 = v235;
              dispatch_async(v205, block);
            }
          }
        }

        v198 = [v197 countByEnumeratingWithState:&v296 objects:v334 count:16];
      }

      while (v198);
    }

    uint64_t v14 = -[NSMutableDictionary copy](v225, "copy");
  }

  return v14;
}

void sub_10031DB78(void *a1, int a2, void *a3)
{
  id v5 = a3;
  if (v5 || !a2)
  {
    uint64_t v12 = OSLogHandleForIDSCategory("PeerLookup");
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = a1[4];
      uint64_t v15 = a1[5];
      uint64_t v16 = a1[6];
      *(_DWORD *)buf = 138413058;
      uint64_t v19 = v14;
      __int16 v20 = 2112;
      uint64_t v21 = v15;
      __int16 v22 = 2112;
      id v23 = v5;
      __int16 v24 = 2112;
      uint64_t v25 = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Error saving endpoints to SwiftData DB for service: %@, uri: %@, error: %@, uuid: %@",  buf,  0x2Au);
    }

    if (os_log_shim_legacy_logging_enabled(v17) && _IDSShouldLog(0LL, @"PeerLookup")) {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"PeerLookup",  @"Error saving endpoints to SwiftData DB for service: %@, uri: %@, error: %@, uuid: %@");
    }
  }

  else
  {
    uint64_t v6 = OSLogHandleForIDSCategory("PeerLookup");
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = a1[4];
      uint64_t v9 = a1[5];
      id v10 = (void *)a1[6];
      *(_DWORD *)buf = 138412802;
      uint64_t v19 = v8;
      __int16 v20 = 2112;
      uint64_t v21 = v9;
      __int16 v22 = 2112;
      id v23 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Successfully saved endpoints to SwiftData DB for service: %@, uri: %@, uuid: %@",  buf,  0x20u);
    }

    if (os_log_shim_legacy_logging_enabled(v11) && _IDSShouldLog(0LL, @"PeerLookup")) {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"PeerLookup",  @"Successfully saved endpoints to SwiftData DB for service: %@, uri: %@, uuid: %@");
    }
  }
}

void sub_10031DDA0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = OSLogHandleForIDSCategory("PeerLookup");
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412802;
    uint64_t v12 = v9;
    __int16 v13 = 2112;
    id v14 = v5;
    __int16 v15 = 2112;
    id v16 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Triggered auto bug capture for excessive query cache entries for service: %@ {session : %@, error: %@}",  buf,  0x20u);
  }

  if (os_log_shim_legacy_logging_enabled(v10) && _IDSShouldLog(0LL, @"PeerLookup")) {
    _IDSLogV( 0LL,  @"IDSFoundation",  @"PeerLookup",  @"Triggered auto bug capture for excessive query cache entries for service: %@ {session : %@, error: %@}");
  }
}

void sub_10031DEE4(id a1, NSArray *a2, NSError *a3)
{
  id v3 = a3;
  if (v3)
  {
    int v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 138412290;
      id v6 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Failed kicking KT peer verification for query { error: %@ }",  (uint8_t *)&v5,  0xCu);
    }
  }
}

void sub_10031DF98(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) queryCompletionBlock]);
  (*((void (**)(id, void, void, void))v2 + 2))( v2,  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56));
}

void sub_100320E3C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    int v9 = 138412802;
    uint64_t v10 = v8;
    __int16 v11 = 2112;
    id v12 = v5;
    __int16 v13 = 2112;
    id v14 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Finished capturing AutoBugCapture diagnostics for differed query cache results { context: %@, sessionID: %@, error: %@ }",  (uint8_t *)&v9,  0x20u);
  }
}

double sub_100321AD8()
{
  if (qword_1009C0BE0 != -1) {
    dispatch_once(&qword_1009C0BE0, &stru_100901B20);
  }
  return *(double *)&qword_1009C0B68 * (double)mach_continuous_time();
}

uint64_t sub_10032267C(uint64_t a1)
{
  uint64_t v2 = OSLogHandleForTransportCategory("IDSUTunController");
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    uint64_t v8 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%@ called nw_service_connector_cancel_active_connection",  buf,  0xCu);
  }

  uint64_t result = os_log_shim_legacy_logging_enabled(v5);
  if ((_DWORD)result)
  {
    uint64_t result = _IDSShouldLogTransport(result);
    if ((_DWORD)result)
    {
      _IDSLogTransport( @"IDSUTunController",  @"IDS",  @"%@ called nw_service_connector_cancel_active_connection");
      uint64_t result = _IDSShouldLog(0LL, @"IDSUTunController");
      if ((_DWORD)result) {
        return _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSUTunController",  @"%@ called nw_service_connector_cancel_active_connection");
      }
    }
  }

  return result;
}

void sub_100322CC4(id a1, BOOL a2)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[IDSUTunController sharedInstance](&OBJC_CLASS___IDSUTunController, "sharedInstance"));
  objc_msgSend(v2, "onTransportThread_StopBTDatagramLinkForDefaultPairedDevice");
}

uint64_t sub_100322CF8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void, void, uint64_t, void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  0LL,  0LL,  0LL,  0LL,  0xFFFFFFFFLL,  0LL,  0LL,  *(void *)(a1 + 32));
}

void sub_100323474(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_100323500;
  v7[3] = &unk_1008F7900;
  uint64_t v4 = *(void **)(a1 + 40);
  void v7[4] = *(void *)(a1 + 32);
  id v8 = v4;
  id v9 = v3;
  id v5 = v3;
  IDSTransportThreadAddBlock(v7, v6);
}

id *sub_100323500(id *result, char a2)
{
  if ((a2 & 1) == 0) {
    return (id *)_[result[4] _triggerStallDetectionLogsForDetector:result[5] withEvent:result[6]];
  }
  return result;
}

void sub_100323518(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  void v7[2] = sub_1003235A4;
  v7[3] = &unk_1008F7900;
  uint64_t v4 = *(void **)(a1 + 40);
  void v7[4] = *(void *)(a1 + 32);
  id v8 = v4;
  id v9 = v3;
  id v5 = v3;
  IDSTransportThreadAddBlock(v7, v6);
}

uint64_t sub_1003235A4(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
  {
    id v2 = (void *)result;
    uint64_t v3 = OSLogHandleForTransportCategory("IDSGenericConnection");
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = v2[4];
      uint64_t v6 = v2[5];
      uint64_t v7 = v2[6];
      *(_DWORD *)buf = 134218498;
      uint64_t v10 = v5;
      __int16 v11 = 2112;
      uint64_t v12 = v6;
      __int16 v13 = 2112;
      uint64_t v14 = v7;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%p %@ Stall warning [%@]", buf, 0x20u);
    }

    uint64_t result = os_log_shim_legacy_logging_enabled(v8);
    if ((_DWORD)result)
    {
      uint64_t result = _IDSShouldLogTransport(result);
      if ((_DWORD)result)
      {
        _IDSLogTransport(@"IDSGenericConnection", @"IDS", @"%p %@ Stall warning [%@]");
        uint64_t result = _IDSShouldLog(0LL, @"IDSGenericConnection");
        if ((_DWORD)result) {
          return _IDSLogV(0LL, @"IDSFoundation", @"IDSGenericConnection", @"%p %@ Stall warning [%@]");
        }
      }
    }
  }

  return result;
}

void sub_100324564(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___IDSUTunController);
  id v2 = (void *)qword_1009C0B78;
  qword_1009C0B78 = (uint64_t)v1;
}

uint64_t tcp6checksum(int8x16_t *a1, int8x16_t *a2, int8x16_t *a3, unint64_t a4)
{
  if (a4 < 0x14) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v7 = a3[1].u16[0];
  a3[1].i16[0] = 0;
  uint32x4_t v8 = 0uLL;
  if (a1 && a2) {
    uint32x4_t v8 = vpadalq_u16(vpaddlq_u16((uint16x8_t)vrev16q_s8(*a2)), (uint16x8_t)vrev16q_s8(*a1));
  }
  uint32x4_t v24 = v8;
  int v9 = WORD1(a4);
  unint64_t v10 = a4 & 0xFFFFFFFFFFFFFFF0LL;
  __chkstk_darwin();
  memset((char *)&v24 - 2 * v10, 170, v11);
  uint64_t v12 = a3;
  if ((a3 & 1) != 0)
  {
    memcpy((char *)&v24 - 2 * v10, a3, a4 & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v12 = (int8x16_t *)((char *)&v24 - 2 * v10);
  }

  unsigned int v13 = __rev16(v7);
  unint64_t v14 = (a4 >> 4) + 1;
  uint32x4_t v15 = v24;
  do
  {
    int8x16_t v16 = *v12++;
    uint32x4_t v15 = vpadalq_u16(v15, (uint16x8_t)vrev16q_s8(v16));
    --v14;
  }

  while (v14 > 1);
  unsigned int v17 = (unsigned __int16)a4
      + v9
      + vpadalq_u32((uint64x2_t)vdupq_laneq_s64((int64x2_t)vpaddlq_u32(v15), 1), v15).u32[0]
      + 6;
  uint64_t v18 = &a3->i8[a4];
  if ((a4 & 1) != 0)
  {
    int v19 = *--v18;
    v17 += v19 << 8;
  }

  unsigned int v20 = (a4 >> 1) & 7;
  if (v20)
  {
    uint64_t v21 = v18 - 1;
    unsigned int v22 = v20 + 1;
    do
    {
      v17 += bswap32(*(unsigned __int16 *)(v21 - 1)) >> 16;
      v21 -= 2;
      --v22;
    }

    while (v22 > 1);
  }

  if (v17 >= 0x10000)
  {
    do
      unsigned int v17 = HIWORD(v17) + (unsigned __int16)v17;
    while (HIWORD(v17));
  }

  unsigned int v23 = v17 ^ 0xFFFF;
  a3[1].i16[0] = bswap32(v23) >> 16;
  return v23 - v13;
}

uint64_t udp6checksum(int8x16_t *a1, int8x16_t *a2, int8x16_t *a3, unint64_t a4, int8x16_t a5)
{
  if (a4 < 8) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v8 = a3->u16[3];
  a3->i16[3] = 0;
  __n128 v9 = 0uLL;
  if (a1 && a2)
  {
    a5 = vrev16q_s8(*a1);
    __n128 v9 = (__n128)vpadalq_u16(vpaddlq_u16((uint16x8_t)vrev16q_s8(*a2)), (uint16x8_t)a5);
  }

  unint64_t v10 = a4 & 0xFFFFFFFFFFFFFFF0LL;
  __chkstk_darwin((__n128)a5, v9);
  uint32x4_t v24 = v12;
  if (v10)
  {
    memset((char *)&v24 - 2 * v10, 170, v11);
    uint32x4_t v12 = v24;
  }

  unsigned int v13 = a3;
  if ((a3 & 1) != 0)
  {
    memcpy((char *)&v24 - 2 * v10, a3, a4 & 0xFFFFFFFFFFFFFFF0LL);
    uint32x4_t v12 = v24;
    unsigned int v13 = (int8x16_t *)((char *)&v24 - 2 * v10);
  }

  if (a4 >= 0x10)
  {
    unint64_t v14 = (a4 >> 4) + 1;
    do
    {
      int8x16_t v15 = *v13++;
      uint32x4_t v12 = vpadalq_u16(v12, (uint16x8_t)vrev16q_s8(v15));
      --v14;
    }

    while (v14 > 1);
  }

  unsigned int v16 = (unsigned __int16)a4
      + WORD1(a4)
      + vpadalq_u32((uint64x2_t)vdupq_laneq_s64((int64x2_t)vpaddlq_u32(v12), 1), v12).u32[0]
      + 17;
  unsigned int v17 = &a3->i8[a4];
  if ((a4 & 1) != 0)
  {
    int v18 = *--v17;
    v16 += v18 << 8;
  }

  unsigned int v19 = (a4 >> 1) & 7;
  if (v19)
  {
    unsigned int v20 = v17 - 1;
    unsigned int v21 = v19 + 1;
    do
    {
      v16 += bswap32(*(unsigned __int16 *)(v20 - 1)) >> 16;
      v20 -= 2;
      --v21;
    }

    while (v21 > 1);
  }

  unsigned int v22 = __rev16(v8);
  if (v16 >= 0x10000)
  {
    do
      unsigned int v16 = HIWORD(v16) + (unsigned __int16)v16;
    while (HIWORD(v16));
  }

  unsigned int v23 = v16 ^ 0xFFFF;
  a3->i16[3] = bswap32(v23) >> 16;
  return v23 - v22;
}

void sub_10032494C(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    [*(id *)(a1 + 32) _reloadSettings];
    uint64_t v3 = IMGetDomainIntForKey(@"com.apple.ids", @"customTest");
    switch(v3)
    {
      case 0LL:
        return;
      case 1LL:
        uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Custom Test 1 - simple control channel internal fail",  (uint8_t *)&buf,  2u);
        }

        uint64_t v5 = sub_1003BBA5C(*(void *)(a1 + 32) + 8LL, kIDSDefaultPairedDeviceID);
        uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
        unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue([v6 controlChannel]);
        [v7 simulateDecryptionFailure];
        goto LABEL_6;
      case 2LL:
        unsigned int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Custom Test 2 - reset before control channel internal fail",  (uint8_t *)&buf,  2u);
        }

        uint64_t v9 = sub_1003BBA5C(*(void *)(a1 + 32) + 8LL, kIDSDefaultPairedDeviceID);
        unint64_t v10 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v9);
        uint64_t v11 = sub_1003BB3A8( (uint64_t)-[dispatch_queue_s connectionsTableByLocalRemotePortKey]( v10,  "connectionsTableByLocalRemotePortKey"),  67109888);
        uint32x4_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
        [*(id *)(a1 + 32) resetTCPConnection:v12 forDeviceConnectionInfo:v10];
        unsigned int v13 = (void *)objc_claimAutoreleasedReturnValue(-[dispatch_queue_s controlChannel](v10, "controlChannel"));
        [v13 simulateDecryptionFailure];

        goto LABEL_15;
      case 3LL:
        unint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Custom Test 3 - simulate the control channel connection reset loop",  (uint8_t *)&buf,  2u);
        }

        *(_BYTE *)(*(void *)(a1 + 32) + 128LL) = 1;
        uint64_t v17 = im_primary_queue(v15, v16);
        unint64_t v10 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v17);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472LL;
        block[2] = sub_1003253D8;
        block[3] = &unk_1008F6010;
        void block[4] = *(void *)(a1 + 32);
        dispatch_async(v10, block);
LABEL_15:

        return;
      case 4LL:
        unsigned int v18 = IMGetDomainIntForKey(@"com.apple.ids", @"networkingLogDumpFlags");
        unsigned int v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf) = 67109120;
          DWORD1(buf) = v18;
          _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Custom Test 4 - dump logs with flags %08X",  (uint8_t *)&buf,  8u);
        }

        if (v18 <= 1) {
          uint64_t v20 = 1LL;
        }
        else {
          uint64_t v20 = v18;
        }
        IDSNetworkingLogDump("Test", v20);
        return;
      case 5LL:
        unsigned int v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Custom Test 5 - simulate reaching file descriptor limit",  (uint8_t *)&buf,  2u);
        }

        unsigned int v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
        while (1)
        {
          uint64_t v23 = socket(30, 2, 0);
          uint64_t v24 = *__error();
          uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(buf) = 67109120;
            DWORD1(buf) = v23;
            _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "Custom Test 5 - made new socket %d",  (uint8_t *)&buf,  8u);
          }

          IDSAssertNonFatalErrnoWithSource( v24,  "Custom Test 5",  "/Library/Caches/com.apple.xbs/Sources/IdentityServices_Swift/IDSAgent/IDSUTunController.m",  1339LL);
          __int128 v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v23));
          [v22 addObject:v26];
        }

      case 6LL:
        __int128 v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "Custom Test 6 - pop alert",  (uint8_t *)&buf,  2u);
        }

        IDSInternalAlertSimple( @"2017-01-01",  @"CustomTest6",  @"Custom Test 6",  @"Message to pop up for testing");
        return;
      case 7LL:
        __int128 v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "Custom Test 7 - trigger utun socket stall detection",  (uint8_t *)&buf,  2u);
        }

        __int128 v29 = (void *)objc_claimAutoreleasedReturnValue( +[IDSStallDetector detectorWithName:]( &OBJC_CLASS___IDSStallDetector,  "detectorWithName:",  @"kUTunConnectionDefaultUrgentOutgoingDetectorName"));
        uint64_t v6 = v29;
        if (v29)
        {
          [v29 forceTriggerStallDetectedBlockWithEventName:@"TestTrigger"];
        }

        else
        {
          unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
          if (os_log_type_enabled((os_log_t)v7, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(buf) = 138412290;
            *(void *)((char *)&buf + 4) = @"kUTunConnectionDefaultUrgentOutgoingDetectorName";
            _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v7,  OS_LOG_TYPE_DEFAULT,  "Custem Test 7 - Couldn't find the detector %@",  (uint8_t *)&buf,  0xCu);
          }

void sub_1003253D8(uint64_t a1)
{
  uint64_t v2 = sub_1003BBA5C(*(void *)(a1 + 32) + 8LL, kIDSDefaultPairedDeviceID);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v2);
  uint64_t v3 = sub_1003BB3A8((uint64_t)[v6 connectionsTableByLocalRemotePortKey], 67109888);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  [*(id *)(a1 + 32) resetTCPConnection:v4 forDeviceConnectionInfo:v6];
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v6 controlChannel]);
  [v5 simulateDecryptionFailure];
}

void sub_100325460(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 controlChannel]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 cbuuid]);
  unsigned int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue([v6 description]);

  unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue([v4 cbuuid]);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v5 remoteDeviceEncryptionInfo]);

  unint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
  BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
  if (v9)
  {
    if (v11)
    {
      *(_DWORD *)__int128 buf = 138412546;
      __int128 v28 = v7;
      __int16 v29 = 2112;
      id v30 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Custom Test 10 - about to ask main queue to sync onto TransportThread for %@ on %@",  buf,  0x16u);
    }

    uint64_t v14 = im_primary_queue(v12, v13);
    uint64_t v15 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v14);
    unsigned int v21 = _NSConcreteStackBlock;
    uint64_t v22 = 3221225472LL;
    uint64_t v23 = sub_100325750;
    uint64_t v24 = &unk_1008F5F80;
    uint64_t v16 = v7;
    uint64_t v25 = v16;
    id v17 = v8;
    id v26 = v17;
    dispatch_async(v15, &v21);

    unsigned int v18 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog utunController]( &OBJC_CLASS___IDSFoundationLog,  "utunController",  v21,  v22,  v23,  v24));
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412546;
      __int128 v28 = v16;
      __int16 v29 = 2112;
      id v30 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Custom Test 10 - telling control channel to encrypt and send message for %@ on %@",  buf,  0x16u);
    }

    [v5 setAvoidMainQueueOverrideToNO:*(_BYTE *)(a1 + 32) == 0];
    unsigned int v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", a1 + 33, 1LL));
    [v5 sendMessage:v19];

    uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412546;
      __int128 v28 = v16;
      __int16 v29 = 2112;
      id v30 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "Custom Test 10 - asked main queue to sync onto TransportThread for %@ on %@",  buf,  0x16u);
    }

    unint64_t v10 = v25;
  }

  else if (v11)
  {
    *(_DWORD *)__int128 buf = 138412546;
    __int128 v28 = v7;
    __int16 v29 = 2112;
    id v30 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Custom Test 10 - skipping test for %@ on %@",  buf,  0x16u);
  }
}

void sub_100325750(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    *(_DWORD *)__int128 buf = 138412546;
    uint64_t v15 = v3;
    __int16 v16 = 2112;
    uint64_t v17 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Custom Test 10 - about to sync onto TransportThread for %@ on %@",  buf,  0x16u);
  }

  unsigned int v8 = _NSConcreteStackBlock;
  uint64_t v9 = 3221225472LL;
  unint64_t v10 = sub_1003258CC;
  BOOL v11 = &unk_1008F8800;
  id v12 = *(id *)(a1 + 32);
  id v13 = *(id *)(a1 + 40);
  IDSTransportThreadAddSyncBlock(&v8);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog utunController]( &OBJC_CLASS___IDSFoundationLog,  "utunController",  v8,  v9,  v10,  v11));
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    *(_DWORD *)__int128 buf = 138412546;
    uint64_t v15 = v6;
    __int16 v16 = 2112;
    uint64_t v17 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Custom Test 10 - sync onto TransportThread returned for %@ on %@",  buf,  0x16u);
  }
}

void sub_1003258CC(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    int v5 = 138412546;
    uint64_t v6 = v3;
    __int16 v7 = 2112;
    uint64_t v8 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Custom Test 10 - sync operation on TransportThread for %@ on %@",  (uint8_t *)&v5,  0x16u);
  }
}

id sub_100325984(uint64_t a1)
{
  return [*(id *)(a1 + 32) startControlChannelWithDevice:*(void *)(a1 + 40) endpoint:0];
}

void sub_100325994(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v6 = (id)objc_claimAutoreleasedReturnValue([v4 cbuuid]);
  int v5 = (void *)objc_claimAutoreleasedReturnValue([v4 deviceUniqueID]);

  [*(id *)(*(void *)(a1 + 32) + 96) stopLinkForDeviceUniqueID:v5 cbuuid:v6 disconnectWP:1];
}

void sub_100325CE0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  int v5 = (void *)objc_claimAutoreleasedReturnValue([v4 controlChannel]);
  [v5 setDisableEncryption:*(unsigned __int8 *)(*(void *)(a1 + 32) + 115)];

  int v6 = NEVirtualInterfaceSetMaxPendingPackets(v4[1037], *(unsigned int *)(*(void *)(a1 + 32) + 108LL));
  int v7 = *__error();
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = v4[1];
    if (v6) {
      int v10 = 0;
    }
    else {
      int v10 = v7;
    }
    int v11 = 138412802;
    uint64_t v12 = v9;
    __int16 v13 = 1024;
    int v14 = v6;
    __int16 v15 = 1024;
    int v16 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%@: SetMaxPendingPackets %d (%d)",  (uint8_t *)&v11,  0x18u);
  }
}

void sub_1003260C4( void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, int a6, unsigned __int16 *a7, size_t a8, char *a9, char *a10)
{
  id v15 = a1;
  int v16 = a2;
  uint64_t v17 = a3;
  if (a6 == 6)
  {
    int v18 = *((unsigned __int8 *)a7 + 13);
    int v83 = -((*((unsigned __int8 *)a7 + 12) >> 2) & 0x3C);
    unsigned int v19 = bswap32(*((_DWORD *)a7 + 1));
  }

  else
  {
    int v18 = 170;
    int v83 = 1431655766;
    unsigned int v19 = -1431655766;
  }

  unsigned int v82 = v19;
  uint64_t v20 = a9;
  unsigned int v21 = a10;
  unsigned int v86 = __rev16(*a7);
  unsigned int v88 = __rev16(a7[1]);
  if (*((_BYTE *)v15 + 104))
  {
    uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      if (a8 >= 0x28) {
        uint64_t v23 = 40LL;
      }
      else {
        uint64_t v23 = a8;
      }
      uint64_t v24 = (unsigned __int16 *)objc_claimAutoreleasedReturnValue([v16 vifName]);
      uint64_t v25 = objc_claimAutoreleasedReturnValue( +[NSData dataWithBytesNoCopy:length:freeWhenDone:]( &OBJC_CLASS___NSData,  "dataWithBytesNoCopy:length:freeWhenDone:",  a7,  v23,  0LL));
      id v26 = (void *)v25;
      *(_DWORD *)__int128 buf = 138413826;
      __int128 v27 = " ...";
      id v93 = v24;
      if (a8 < 0x29) {
        __int128 v27 = "";
      }
      __int16 v94 = 1024;
      *(_DWORD *)uint64_t v95 = v86;
      *(_WORD *)&v95[4] = 1024;
      *(_DWORD *)&v95[6] = v88;
      __int16 v96 = 1024;
      *(_DWORD *)id v97 = a6;
      *(_WORD *)&v97[4] = 2048;
      *(void *)&v97[6] = a8;
      *(_WORD *)&v97[14] = 2112;
      *(void *)&v97[16] = v25;
      *(_WORD *)&v97[24] = 2080;
      *(void *)&v97[26] = v27;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "%@: Payload Handler! %u => %u proto:%d (len=%ld)\n\t\t=> data[%@%s]",  buf,  0x3Cu);

      unsigned int v21 = a10;
      uint64_t v20 = a9;
    }
  }

  if (*((_BYTE *)v16 + 8264))
  {
    __int128 v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v29 = (unsigned __int16 *)objc_claimAutoreleasedReturnValue([v16 vifName]);
      id v30 = v16[1];
      *(_DWORD *)__int128 buf = 138412546;
      id v93 = v29;
      __int16 v94 = 2112;
      *(void *)uint64_t v95 = v30;
      _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "%@: device %@ is suspending traffic",  buf,  0x16u);
    }

    *uint64_t v20 = 1;
    char *v21 = 0;
    goto LABEL_17;
  }

  uint64_t v81 = v20;
  id v85 = v21;
  if (v17 && (uint64_t)[*((id *)v17 + 18) state] >= 2 && objc_msgSend(*((id *)v17 + 18), "localContext"))
  {
    unsigned int v31 = [*((id *)v17 + 18) localCID];
    *(void *)&__n[1] = a7;
    __n[0] = a8;
    uint64_t v32 = IDSHC_Compress([*((id *)v17 + 18) localContext], &__n[1], __n);
    unsigned int v80 = v31;
    if (v32)
    {
      int v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v34 = (unsigned __int16 *)objc_claimAutoreleasedReturnValue([v16 vifName]);
        *(_DWORD *)__int128 buf = 138412546;
        id v93 = v34;
        __int16 v94 = 2048;
        *(void *)uint64_t v95 = v32;
        _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "%@: IDSHC_Compress failed (%lu), revert back to un-compressed",  buf,  0x16u);

        unsigned int v31 = v80;
      }
    }

    uint64_t v35 = *(void *)&__n[1];
    if (v31 < 0x10)
    {
      --*(void *)&__n[1];
      ++__n[0];
      char v37 = a6 == 6 ? -96 : 0x80;
      *(_BYTE *)(v35 - 1) = v31 | v37;
    }

    else
    {
      *(void *)&__n[1] -= 3LL;
      __n[0] += 3;
      char v36 = a6 == 6 ? -80 : -112;
      *(_BYTE *)(v35 - 3) = v36;
      *(_BYTE *)(*(void *)&__n[1] + [(id)qword_1009BEC18 setShouldPostNotifications:1] = BYTE1(v31);
      *(_BYTE *)(*(void *)&__n[1] + 2LL) = v31;
    }

    id v38 = (void *)_IDSLinkPacketBufferCreate( "/Library/Caches/com.apple.xbs/Sources/IdentityServices_Swift/IDSAgent/IDSUTunController.m",  1605LL);
    memcpy((void *)*v38, *(const void **)&__n[1], __n[0]);
    unint64_t v39 = __n[0];
    v38[2] = __n[0];
    if (!v32)
    {
      if (*((_BYTE *)v15 + 104))
      {
        __int128 v74 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
        if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
        {
          if (v39 >= 0x14) {
            uint64_t v75 = 20LL;
          }
          else {
            uint64_t v75 = v39;
          }
          id v76 = v16[1038];
          uint64_t v77 = objc_claimAutoreleasedReturnValue( +[NSData dataWithBytesNoCopy:length:freeWhenDone:]( &OBJC_CLASS___NSData,  "dataWithBytesNoCopy:length:freeWhenDone:",  *v38,  v75,  0LL));
          *(_DWORD *)__int128 buf = 138414338;
          uint64_t v78 = " ...";
          id v93 = v76;
          *(_DWORD *)uint64_t v95 = 1;
          __int16 v94 = 1024;
          *(_WORD *)&v95[4] = 1024;
          *(_DWORD *)&v95[6] = a6 == 6;
          __int16 v96 = 1024;
          *(_DWORD *)id v97 = v80;
          *(_WORD *)&v97[4] = 1024;
          *(_DWORD *)&v97[6] = v86;
          *(_WORD *)&v97[10] = 1024;
          *(_DWORD *)&v97[12] = v88;
          *(_WORD *)&v97[16] = 2048;
          *(void *)&v97[18] = v39;
          *(_WORD *)&v97[26] = 2112;
          uint64_t v79 = (void *)v77;
          *(void *)&v97[28] = v77;
          *(_WORD *)&v97[36] = 2080;
          uint64_t v98 = v78;
          _os_log_impl( (void *)&_mh_execute_header,  v74,  OS_LOG_TYPE_DEFAULT,  "%@: outgoing header (compressed_bit:%d protocol_bit:%d local_cid:%d s_port:%u d_port:%u)\n \t\t=> c(%luB): [%@%s]",  buf,  0x48u);
        }
      }

      int v40 = a6;
LABEL_36:
      if (*((_BYTE *)v15 + 114) && *((_BYTE *)v17 + 4784))
      {
        unsigned __int16 v41 = v17[2406];
        uint64_t v42 = sub_1001FD140((uint64_t)(v17 + 96), v41, (unsigned __int8 *)*v38, v38[2], 1);
        if ((_DWORD)v42)
        {
          uint64_t v43 = v42;
          id v44 = [v16 portMap];
          __int16 v45 = (void *)objc_claimAutoreleasedReturnValue([v17 addressPair]);
          id v46 = (void *)objc_claimAutoreleasedReturnValue([v45 localAddress]);
          objc_msgSend(v15, "releasePortIfNecessary:port:", v44, objc_msgSend(v46, "saPortHostOrder"));

          __int16 v47 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Encryption failure: %u",  v43));
          [v15 removeConnection:v17 fromDeviceConnectionInfo:v16 removeCode:5301 removeReason:v47];

          _IDSLinkPacketBufferRelease( "/Library/Caches/com.apple.xbs/Sources/IdentityServices_Swift/IDSAgent/IDSUTunController.m",  1636LL,  v38);
          goto LABEL_17;
        }

        IDSLinkPacketBufferAddBufferStart(v38, 4294967288LL);
        id v48 = (_WORD *)*v38;
        _WORD *v48 = 224;
        v48[1] = bswap32(v17[2406]) >> 16;
        *((_DWORD *)v48 + 1) = bswap32(*((_DWORD *)v17 + 1200));
        [v17 setSeqSend:(unsigned __int16)(v41 + 1)];
      }

      goto LABEL_41;
    }
  }

  int v40 = a6;
  id v38 = (void *)_IDSLinkPacketBufferCreate( "/Library/Caches/com.apple.xbs/Sources/IdentityServices_Swift/IDSAgent/IDSUTunController.m",  1613LL);
  *(_BYTE *)*id v38 = 32 * (a6 == 6);
  memcpy((void *)(*v38 + 1LL), a7, a8);
  v38[2] = a8 + 1;
  if (v17) {
    goto LABEL_36;
  }
LABEL_41:
  *((_BYTE *)v38 + 3_Block_object_dispose((const void *)(v11 - 80), 8) = [v17 isCloudEnabled];
  *((_BYTE *)v38 + 41) = [v17 isDefaultPairedDevice];
  else {
    unsigned __int8 v49 = [v17 isRealTime];
  }
  *((_BYTE *)v38 + 42) = v49;
  int v50 = a8;
  if (qword_1009C0BE0 != -1) {
    dispatch_once(&qword_1009C0BE0, &stru_100901B20);
  }
  uint64_t v89 = mach_continuous_time();
  double v51 = *(double *)&qword_1009C0B68;
  if (v40 == 6)
  {
    unsigned int v52 = v18 & 2;
    if (v17)
    {
      int v53 = v82 + a8 + v83 + (v52 >> 1);
      int v54 = *((_DWORD *)v17 + 25);
      if ((v54 & 0x40) != 0)
      {
      }

      else
      {
        *((_DWORD *)v17 + 25) = v54 | 0x40;
        *((_DWORD *)v17 + 23) = v53;
        int v55 = v18;
        if (qword_1009C0BE0 != -1) {
          dispatch_once(&qword_1009C0BE0, &stru_100901B20);
        }
        [v17 setConnectionSetupStartTime:*(double *)&qword_1009C0B68 * (double)mach_continuous_time()];
        id v56 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
        if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 138412290;
          id v93 = v17;
          _os_log_impl( (void *)&_mh_execute_header,  v56,  OS_LOG_TYPE_DEFAULT,  "First packet for connection %@",  buf,  0xCu);
        }

        int v18 = v55;
      }
    }

    if (*((_BYTE *)v15 + 104))
    {
      uint64_t v57 = v17;
      int v58 = v18;
      uint64_t v59 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
      if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v60 = (unsigned __int16 *)objc_claimAutoreleasedReturnValue([v16 vifName]);
        unsigned int v61 = "S";
        if (!v52) {
          unsigned int v61 = "";
        }
        uint64_t v87 = v61;
        id v62 = "R";
        if ((v58 & 4) == 0) {
          id v62 = "";
        }
        id v84 = v62;
        uint64_t v90 = v16;
        if ((v58 & 8) != 0) {
          uint64_t v63 = "P";
        }
        else {
          uint64_t v63 = "";
        }
        if ((v58 & 0x10) != 0) {
          char v64 = ".";
        }
        else {
          char v64 = "";
        }
        unsigned int v65 = [v57 expectedNextOutgoingSequenceNumber];
        *(_DWORD *)__int128 buf = 138414082;
        id v93 = v60;
        __int16 v94 = 1024;
        *(_DWORD *)uint64_t v95 = v50;
        *(_WORD *)&v95[4] = 1024;
        *(_DWORD *)&v95[6] = v58;
        __int16 v96 = 2080;
        *(void *)id v97 = v87;
        *(_WORD *)&v97[8] = 2080;
        *(void *)&v97[10] = v84;
        *(_WORD *)&v97[18] = 2080;
        *(void *)&v97[20] = v63;
        int v16 = v90;
        *(_WORD *)&v97[28] = 2080;
        *(void *)&v97[30] = v64;
        LOWORD(v9_Block_object_dispose((const void *)(v11 - 80), 8) = 1024;
        *(_DWORD *)((char *)&v98 + 2) = v65;
        _os_log_impl( (void *)&_mh_execute_header,  v59,  OS_LOG_TYPE_DEFAULT,  "%@: Sending TCP %uB (flags[%02X] [%s%s%s%s])) noseq:%08x",  buf,  0x46u);
      }

      uint64_t v17 = v57;
    }
  }

  else if (v40 == 17)
  {
    kdebug_trace(722010168LL, 0LL, 0LL, 0LL, 0LL);
  }

  char v66 = 1;
  *((_BYTE *)v38 + 40) = 1;
  uint64_t v67 = v38[2];
  id v68 = [*((id *)v15 + 12) sendPacketBuffer:v38 toDeviceUniqueID:v16[2] cbuuid:v16[1]];
  id v69 = v68;
  if (v68 == (id)1)
  {
    char v73 = 0;
    __int128 v70 = v85;
  }

  else
  {
    __int128 v70 = v85;
    if (v68 == (id)13)
    {
      __int128 v71 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
      if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v72 = [v16 utunSocket];
        *(_DWORD *)__int128 buf = 67109120;
        LODWORD(v93) = v72;
        _os_log_impl( (void *)&_mh_execute_header,  v71,  OS_LOG_TYPE_DEFAULT,  "[throughput] link throttling (s: %u)",  buf,  8u);
      }

      char v66 = 1;
    }

    else
    {
      char v66 = 0;
    }

    char v73 = 1;
  }

  *uint64_t v81 = v66;
  *__int128 v70 = v73;
  if (v17)
  {
    ++*((void *)v17 + 604);
    *((void *)v17 + 606) += v67;
    if (!v69) {
      *((double *)v17 + 17) = v51 * (double)v89;
    }
  }

BOOL sub_100326B60(void *a1, void *a2, uint64_t a3)
{
  unint64_t v3 = *(unsigned int *)(a3 + 2628);
  uint64_t v7 = a3 + 1536;
  uint64_t v8 = a3 + 8 * v3;
  do
  {
    id v9 = *(id *)v8;
    unsigned __int8 v17 = -86;
    char v16 = -86;
    sub_1003260C4( a1,  a2,  v9,  v10,  v11,  *(unsigned __int8 *)(v7 + v3),  *(unsigned __int16 **)(v8 + 1600),  *(void *)(v8 + 2112),  (char *)&v17,  &v16);
    if (v16)
    {
      id v12 = *(id *)v8;
      *(void *)uint64_t v8 = 0LL;

      ++*(_DWORD *)(a3 + 2628);
    }

    int v13 = v17;
    BOOL v14 = v17 != 0;

    if (v13) {
      break;
    }
    ++v3;
    v8 += 8LL;
  }

  while (v3 < *(unsigned int *)(a3 + 2624));
  return v14;
}

void sub_100326C5C(void *a1, void *a2, char *a3)
{
  id v8 = a1;
  int v5 = a2;
  if (v5[2079]) {
    sub_1006A865C();
  }
  int v6 = (unsigned int *)v5;
  if (!sub_100326B60(v8, v5, (uint64_t)(v5 + 2085)) && !sub_100326B60(v8, v6, (uint64_t)(v6 + 4828)))
  {
    char v7 = 0;
    if (!a3) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }

  char v7 = 1;
  IDSTransportThreadSuspendSocket(v6[4152], 1LL);
  if (a3) {
LABEL_5:
  }
    *a3 = v7;
LABEL_6:
}

void sub_100326D2C( void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8)
{
  uint64_t v10 = a1;
  uint64_t v11 = a2;
  id v85 = v10;
  if (v10[27] < a8)
  {
    id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = (void *)objc_claimAutoreleasedReturnValue([v11 vifName]);
      int v14 = v85[27];
      *(_DWORD *)__int128 buf = 138412802;
      *(void *)&uint8_t buf[4] = v13;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)id v93 = a8;
      *(_WORD *)&v93[4] = 1024;
      *(_DWORD *)&v93[6] = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "%@: numPackets %u != max %u - dropping excess",  buf,  0x18u);
    }

    a8 = v85[27];
  }

  if (v11[4826] != v11[4827])
  {
    id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      char v16 = (void *)objc_claimAutoreleasedReturnValue([v11 vifName]);
      int v17 = v11[4826] - v11[4827];
      *(_DWORD *)__int128 buf = 138412546;
      *(void *)&uint8_t buf[4] = v16;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)id v93 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "%@: payload handler called while there are pending outgoing urgent packets - [%u] dropped",  buf,  0x12u);
    }

    unint64_t v18 = v11[4827];
    if (v18 < v11[4826])
    {
      do
      {
        unsigned int v19 = *(void **)&v11[2 * v18 + 4170];
        *(void *)&v11[2 * v18 + 4170] = 0LL;

        ++v18;
      }

      while (v18 < v11[4826]);
    }
  }

  v11[4827] = 0;
  v11[4826] = 0;
  if (v11[5484] != v11[5485])
  {
    uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v21 = (void *)objc_claimAutoreleasedReturnValue([v11 vifName]);
      int v22 = v11[5484] - v11[5485];
      *(_DWORD *)__int128 buf = 138412546;
      *(void *)&uint8_t buf[4] = v21;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)id v93 = v22;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "%@: payload handler called while there are pending outgoing regular packets - [%u] dropped",  buf,  0x12u);
    }

    unint64_t v23 = v11[5485];
    if (v23 < v11[5484])
    {
      do
      {
        uint64_t v24 = *(void **)&v11[2 * v23 + 4828];
        *(void *)&v11[2 * v23 + 4828] = 0LL;

        ++v23;
      }

      while (v23 < v11[5484]);
    }
  }

  v11[5485] = 0;
  v11[5484] = 0;
  uint64_t v90 = a8;
  if (a8)
  {
    uint64_t v25 = 0LL;
    do
    {
      int v26 = *(unsigned __int8 *)(a5 + v25);
      if (v26 == 6 || v26 == 17)
      {
        __int128 v28 = *(unsigned __int16 **)(a6 + 8 * v25);
        unsigned int v29 = *v28;
        unsigned int v30 = v28[1];
        if (v26 == 6)
        {
          char v31 = *((_BYTE *)v28 + 13);
          unsigned int v32 = bswap32(*((_DWORD *)v28 + 1));
          BOOL v33 = ((*((unsigned __int8 *)v28 + 12) >> 2) & 0x3C) == *(_DWORD *)(a7 + 8 * v25);
        }

        else
        {
          kdebug_trace(722010164LL, 0LL, 0LL, 0LL, 0LL);
          BOOL v33 = 0;
          char v31 = 0;
          unsigned int v32 = 0;
        }

        uint64_t v34 = __rev16(v29);
        uint64_t v35 = __rev16(v30);
        uint64_t v36 = sub_1003BB3A8( (uint64_t)objc_msgSend(v11, "connectionsTableByLocalRemotePortKey", v80, v81, v82, v83),  v35 | ((_DWORD)v34 << 16));
        char v37 = (void *)objc_claimAutoreleasedReturnValue(v36);
        int v40 = v37;
        if (v37 || *(_BYTE *)(a5 + v25) == 6 && (v31 & 4) != 0)
        {
          if (!v33 && ([v37 priority] == (id)200 || objc_msgSend(v40, "priority") == (id)100))
          {
            int v38 = 0;
            unint64_t v39 = &OBJC_IVAR___IDSDeviceConnectionInfo_regularPackets;
          }

          else
          {
            int v38 = 1;
            unint64_t v39 = &OBJC_IVAR___IDSDeviceConnectionInfo_urgentPackets;
          }

          uint64_t v46 = *v39;
          __int16 v47 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
          BOOL v48 = os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v90 == 1)
          {
            if (v48)
            {
              unsigned __int8 v49 = (void *)objc_claimAutoreleasedReturnValue([v11 vifName]);
              *(_DWORD *)__int128 buf = 138412546;
              *(void *)&uint8_t buf[4] = v49;
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)id v93 = v38;
              _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_DEFAULT,  "%@: handleMultiple - saving packet to list (urgent: %d)",  buf,  0x12u);
            }
          }

          else if (v48)
          {
            int v50 = (void *)objc_claimAutoreleasedReturnValue([v11 vifName]);
            *(_DWORD *)__int128 buf = 138413058;
            *(void *)&uint8_t buf[4] = v50;
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)id v93 = v25;
            *(_WORD *)&v93[4] = 1024;
            *(_DWORD *)&v93[6] = v90;
            *(_WORD *)&v93[10] = 1024;
            *(_DWORD *)&v93[12] = v38;
            _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_DEFAULT,  "%@: handleMultiple - saving packet #%u (total %u) to list (urgent: %d)",  buf,  0x1Eu);
          }

          *(void *)__int128 buf = 0xAAAAAAAAAAAAAAAALL;
          double v51 = (char *)v11 + v46;
          id v52 = objc_initWeak((id *)buf, v40);
          uint64_t v53 = *(unsigned int *)((char *)v11 + v46 + 2624);
          int v54 = *(void **)((char *)&v11[2 * v53] + v46);
          *(void *)&v51[8 * v53] = v40;

          uint64_t v55 = *(unsigned int *)((char *)v11 + v46 + 2624);
          uint64_t v56 = (uint64_t)&v11[2 * v55] + v46;
          *(void *)(v56 + 512) = *(void *)(a3 + 8 * v25);
          *(void *)(v56 + 1024) = *(void *)(a4 + 8 * v25);
          v51[v55 + 1536] = *(_BYTE *)(a5 + v25);
          uint64_t v57 = *(unsigned int *)((char *)v11 + v46 + 2624);
          uint64_t v58 = (uint64_t)&v11[2 * v57] + v46;
          *(void *)(v58 + 1600) = *(void *)(a6 + 8 * v25);
          *(void *)(v58 + 2112) = *(void *)(a7 + 8 * v25);
          *((_DWORD *)v51 + 656) = v57 + 1;
          objc_destroyWeak((id *)buf);
        }

        else
        {
          uint64_t v59 = OSLogHandleForIDSCategory("UTun-oversized");
          uint64_t v60 = (os_log_s *)objc_claimAutoreleasedReturnValue(v59);
          if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
          {
            unsigned int v61 = (void *)objc_claimAutoreleasedReturnValue([v11 vifName]);
            *(_DWORD *)__int128 buf = 138413058;
            *(void *)&uint8_t buf[4] = v61;
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)id v93 = v34;
            *(_WORD *)&v93[4] = 1024;
            *(_DWORD *)&v93[6] = v35;
            *(_WORD *)&v93[10] = 2112;
            *(void *)&v93[12] = v11;
            _os_log_impl( (void *)&_mh_execute_header,  v60,  OS_LOG_TYPE_DEFAULT,  "%@: cannot find connection for outgoing packet [%u => %u] in [%@]",  buf,  0x22u);
          }

          if (os_log_shim_legacy_logging_enabled(v62)
            && _IDSShouldLog(0LL, @"UTun-oversized"))
          {
            uint64_t v82 = v35;
            int v83 = v11;
            unsigned int v80 = (void *)objc_claimAutoreleasedReturnValue([v11 vifName]);
            uint64_t v81 = v34;
            _IDSLogV( 0LL,  @"IDSFoundation",  @"UTun-oversized",  @"%@: cannot find connection for outgoing packet [%u => %u] in [%@]");
          }

          if (*(_BYTE *)(a5 + v25) == 6)
          {
            memset(v97, 170, sizeof(v97));
            unsigned int v63 = *((_DWORD *)v28 + 2);
            char v64 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
            int v65 = bswap32(v63);
            if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)__int128 buf = 67109376;
              *(_DWORD *)&uint8_t buf[4] = v32;
              *(_WORD *)&uint8_t buf[8] = 1024;
              *(_DWORD *)&buf[10] = v65;
              _os_log_impl( (void *)&_mh_execute_header,  v64,  OS_LOG_TYPE_DEFAULT,  "reset TCP using seq:%08x ack:%08x",  buf,  0xEu);
            }

            if ((v31 & 2) != 0) {
              int v66 = v32;
            }
            else {
              int v66 = v32 + 1;
            }
            sub_100327784((uint64_t)v97, v35, v34, v65, v66);
            uint64_t v67 = (void *)objc_claimAutoreleasedReturnValue([v11 remoteSA]);
            id v68 = (char *)[v67 sa6];
            id v69 = (void *)objc_claimAutoreleasedReturnValue([v11 localSA]);
            tcp6checksum( (int8x16_t *)(v68 + 8),  (int8x16_t *)((char *)[v69 sa6] + 8),  (int8x16_t *)v97,  0x14uLL);

            if (*((void *)v11 + 2079)) {
              sub_1006A8684();
            }
            id v70 = [v11 vifRef];
            __int128 v71 = (void *)objc_claimAutoreleasedReturnValue([v11 remoteSA]);
            id v72 = [v71 sa];
            char v73 = (void *)objc_claimAutoreleasedReturnValue([v11 localSA]);
            int v74 = NEVirtualInterfaceWriteIPPayload(v70, v72, [v73 sa], 6, v97, 20);

            uint64_t v75 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
            if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
            {
              id v76 = (void *)objc_claimAutoreleasedReturnValue([v11 vifName]);
              uint64_t v77 = (void *)objc_claimAutoreleasedReturnValue([v11 localSA]);
              uint64_t v78 = (void *)objc_claimAutoreleasedReturnValue([v11 remoteSA]);
              uint64_t v79 = (void *)objc_claimAutoreleasedReturnValue( +[NSData dataWithBytesNoCopy:length:freeWhenDone:]( &OBJC_CLASS___NSData,  "dataWithBytesNoCopy:length:freeWhenDone:",  v97,  20LL,  0LL));
              *(_DWORD *)__int128 buf = 138413314;
              *(void *)&uint8_t buf[4] = v76;
              *(_WORD *)&buf[12] = 2112;
              *(void *)id v93 = v77;
              *(_WORD *)&v93[8] = 2112;
              *(void *)&v93[10] = v78;
              *(_WORD *)&v93[18] = 1024;
              int v94 = v74;
              __int16 v95 = 2112;
              __int16 v96 = v79;
              _os_log_impl( (void *)&_mh_execute_header,  v75,  OS_LOG_TYPE_DEFAULT,  "%@: write generated reset %@ <= %@ neRet=%d\n\t\t<= data[%@]",  buf,  0x30u);
            }
          }
        }
      }

      else
      {
        int v40 = (void *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
        if (os_log_type_enabled((os_log_t)v40, OS_LOG_TYPE_DEFAULT))
        {
          id v42 = (id)objc_claimAutoreleasedReturnValue([v11 vifName]);
          int v43 = *(unsigned __int8 *)(a5 + v25);
          int v44 = *((unsigned __int8 *)v85 + 104);
          if (*((_BYTE *)v85 + 104))
          {
            id v84 = (__CFString *)objc_claimAutoreleasedReturnValue( +[NSData dataWithBytesNoCopy:length:freeWhenDone:]( &OBJC_CLASS___NSData,  "dataWithBytesNoCopy:length:freeWhenDone:",  *(void *)(a6 + 8 * v25),  *(void *)(a7 + 8 * v25),  0LL));
            __int16 v45 = v84;
          }

          else
          {
            __int16 v45 = @"--";
          }

          *(_DWORD *)__int128 buf = 138412802;
          *(void *)&uint8_t buf[4] = v42;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)id v93 = v43;
          *(_WORD *)&v93[4] = 2112;
          *(void *)&v93[6] = v45;
          _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v40,  OS_LOG_TYPE_DEFAULT,  "%@: dropping unknown proto[%u] packet [%@]",  buf,  0x1Cu);
          if (v44) {
        }
          }
      }

      ++v25;
    }

    while (v90 != v25);
  }

  sub_100326C5C(v85, v11, 0LL);
}

void sub_100327784(uint64_t a1, __int16 a2, __int16 a3, int a4, int a5)
{
  *(_BYTE *)a1 = HIBYTE(a2);
  *(_BYTE *)(a1 + 1) = a2;
  *(_BYTE *)(a1 + 2) = HIBYTE(a3);
  *(_BYTE *)(a1 + 3) = a3;
  *(_BYTE *)(a1 + 4) = HIBYTE(a4);
  *(_BYTE *)(a1 + 5) = BYTE2(a4);
  *(_BYTE *)(a1 + 6) = BYTE1(a4);
  *(_BYTE *)(a1 + 7) = a4;
  *(_BYTE *)(a1 + _Block_object_dispose((const void *)(v11 - 80), 8) = HIBYTE(a5);
  *(_BYTE *)(a1 + 9) = BYTE2(a5);
  *(_BYTE *)(a1 + 10) = BYTE1(a5);
  *(_BYTE *)(a1 + 11) = a5;
  *(_WORD *)(a1 + 12) = 5200;
  *(_DWORD *)(a1 + 14) = 0;
  *(_WORD *)(a1 + 1_Block_object_dispose((const void *)(v11 - 80), 8) = 0;
  int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    char v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSData dataWithBytesNoCopy:length:freeWhenDone:]( &OBJC_CLASS___NSData,  "dataWithBytesNoCopy:length:freeWhenDone:",  a1,  20LL,  0LL));
    int v8 = 138412290;
    id v9 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Made reset[%@]", (uint8_t *)&v8, 0xCu);
  }
}

LABEL_240:
}

void sub_10032AF24( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8)
{
  id v15 = objc_autoreleasePoolPush();
  sub_100326D2C(*(void **)(a1 + 32), *(void **)(a1 + 40), a3, a4, a5, a6, a7, a8);
  objc_autoreleasePoolPop(v15);
}

void sub_10032AFA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v13 = objc_autoreleasePoolPush();
  LOBYTE(v14) = 1;
  [*(id *)(a1 + 32) handleIPPayload:a6 bytesLength:a7 source:a3 destination:a4 upperProtocol:a5 forDeviceConnectionInfo:*(void *)(a1 + 40) flush:v14 callerShouldStop:0];
  objc_autoreleasePoolPop(v13);
}

void sub_10032B028(uint64_t a1)
{
  unint64_t v3 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  if (v3[2079])
  {
    _[(id)v2 handleUtunChannelRead:v3 limit:*(unsigned int *)(v2 + 108)];
  }

  else if (*(_BYTE *)(v2 + 105))
  {
    char v8 = -86;
    sub_100326C5C((void *)v2, v3, &v8);
    if (!v8)
    {
      id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        int v5 = *(_DWORD *)(a1 + 48);
        *(_DWORD *)__int128 buf = 67109120;
        int v10 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "ready-to-read-multiple on %d (utun)",  buf,  8u);
      }

      NEVirtualInterfaceReadyToReadMultiple( *(void *)(*(void *)(a1 + 32) + 8296LL),  *(unsigned int *)(*(void *)(a1 + 40) + 108LL));
    }
  }

  else
  {
    int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(_DWORD *)(a1 + 48);
      *(_DWORD *)__int128 buf = 67109120;
      int v10 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "ready-to-read on %d (utun)", buf, 8u);
    }

    NEVirtualInterfaceReadyToRead(*(void *)(*(void *)(a1 + 32) + 8296LL));
  }

uint64_t sub_10032B1D0(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 16672LL) = 0LL;
  return IDSTransportThreadSuspendSocket(*(unsigned int *)(a1 + 40), 2LL);
}

void sub_10032BC78( uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void *a9)
{
  id v13 = a2;
  uint64_t v14 = a8;
  id v15 = a9;
  if (!v15)
  {
    id v20 = *(id *)(a1 + 40);
    if (![*(id *)(a1 + 32) shouldUseIPsecLink])
    {
      [v20 setSdOriginal:a6];
      [v20 setSdNumberNoClose:a6];
      uint64_t v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 67109120;
        LODWORD(v66) = a6;
        _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "about to wait for connect ready for {socket:%d}",  buf,  8u);
      }

      v50[0] = _NSConcreteStackBlock;
      v50[1] = 3221225472LL;
      v50[2] = sub_10032DFB0;
      v50[3] = &unk_1008FDFE0;
      __int128 v27 = &v51;
      id v30 = v20;
      id v51 = v30;
      int v54 = a6;
      unsigned int v29 = (id *)v52;
      id v37 = *(id *)(a1 + 32);
      uint64_t v38 = *(void *)(a1 + 72);
      v52[0] = v37;
      v52[1] = v38;
      id v53 = *(id *)(a1 + 56);
      IDSTransportThreadAddSocket(a6, 0LL, v50);
      unint64_t v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 67109120;
        LODWORD(v66) = a6;
        _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "scheduled wait for connect ready for {socket:%d}",  buf,  8u);
      }

      char v31 = v53;
      goto LABEL_30;
    }

    if (v14)
    {
      if (v20)
      {
LABEL_17:
        nw_connection_set_queue(v14, *(dispatch_queue_t *)(*(void *)(a1 + 72) + 136LL));
        v55[0] = _NSConcreteStackBlock;
        v55[1] = 3221225472LL;
        v55[2] = sub_10032C3B8;
        void v55[3] = &unk_1009016C0;
        __int128 v27 = (id *)&v56;
        __int128 v28 = v14;
        uint64_t v56 = v28;
        unsigned int v29 = &v57;
        id v30 = v20;
        id v57 = v30;
        id v58 = *(id *)(a1 + 32);
        uint64_t v59 = a7;
        int v60 = a6;
        nw_connection_set_event_handler(v28, v55);
        nw_connection_start(v28);
        [v30 reportToAWD:5 connectionType:*(unsigned int *)(a1 + 88) error:0];
        char v31 = v58;
LABEL_30:

        v46[0] = _NSConcreteStackBlock;
        v46[1] = 3221225472LL;
        v46[2] = sub_10032E9E8;
        v46[3] = &unk_1008F7900;
        id v47 = v30;
        id v40 = *(id *)(a1 + 32);
        uint64_t v41 = *(void *)(a1 + 72);
        id v48 = v40;
        uint64_t v49 = v41;
        id v42 = v30;
        IDSTransportThreadAddBlockAfter(v46, 120.0);

        goto LABEL_38;
      }

      id v20 = (id)objc_claimAutoreleasedReturnValue( +[IDSGenericConnectionID idWithAccount:service:name:]( &OBJC_CLASS___IDSGenericConnectionID,  "idWithAccount:service:name:",  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void *)(a1 + 64)));
      uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) connectionsByID]);
      uint64_t v26 = objc_claimAutoreleasedReturnValue([v25 objectForKey:v20]);

      if (v26)
      {

        id v20 = (id)v26;
        goto LABEL_17;
      }

      int v44 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
      if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v45 = *(void *)(a1 + 80);
        *(_DWORD *)__int128 buf = 134218498;
        int v66 = v14;
        __int16 v67 = 2112;
        id v68 = v14;
        __int16 v69 = 2112;
        uint64_t v70 = v45;
        _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEFAULT,  "ids-ipsec: service connection (%p) %@ connected for service %@ but no generic connection - saving in cache",  buf,  0x20u);
      }

      int v43 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) serviceConnectionCache]);
      [v43 setObject:v14 forKey:*(void *)(a1 + 80)];
    }

    else
    {
      int v43 = (void *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
      if (os_log_type_enabled((os_log_t)v43, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v43,  OS_LOG_TYPE_DEFAULT,  "startDataChannelWithDevice: finished with no error, but no socket and no connection",  buf,  2u);
      }
    }

LABEL_37:
    goto LABEL_38;
  }

  char v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    int v17 = *(nw_connection **)(*(void *)(a1 + 32) + 8LL);
    *(_DWORD *)__int128 buf = 138412546;
    int v66 = v17;
    __int16 v67 = 2112;
    id v68 = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "error creating socket with [%@] [%@]",  buf,  0x16u);
  }

  unsigned int v18 = [*(id *)(a1 + 32) shouldUseIPsecLink];
  unsigned int v19 = *(void **)(a1 + 40);
  if (v18)
  {
    id v20 = v19;
    if (!v20)
    {
      unsigned int v21 = (void *)objc_claimAutoreleasedReturnValue( +[IDSGenericConnectionID idWithAccount:service:name:]( &OBJC_CLASS___IDSGenericConnectionID,  "idWithAccount:service:name:",  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void *)(a1 + 64)));
      int v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) connectionsByID]);
      id v20 = (id)objc_claimAutoreleasedReturnValue([v22 objectForKey:v21]);
    }

    objc_msgSend( *(id *)(a1 + 40),  "reportToAWD:connectionType:error:",  5,  *(unsigned int *)(a1 + 88),  -[nw_connection code](v15, "code"));
    if (v20)
    {
      unint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v20 serviceConnection]);

      if (v23)
      {
        uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 138412290;
          int v66 = v15;
          _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "ids-ipsec: start_request returns error but data channel fine - assuming connected via available block. Error %@",  buf,  0xCu);
        }

        goto LABEL_37;
      }
    }
  }

  else
  {
    objc_msgSend( v19,  "reportToAWD:connectionType:error:",  objc_msgSend(*(id *)(*(void *)(a1 + 72) + 96), "currentLinkType:", *(void *)(*(void *)(a1 + 32) + 8)),  *(unsigned int *)(a1 + 88),  -[nw_connection code](v15, "code"));
  }

  unsigned int v32 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) openSocketCompletionHandler]);

  if (v32)
  {
    objc_msgSend(*(id *)(a1 + 40), "setStateFlags:", objc_msgSend(*(id *)(a1 + 40), "stateFlags") | 2);
    BOOL v33 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) openSocketCompletionHandler]);
    uint64_t v34 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) completionQueue]);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10032C370;
    block[3] = &unk_1009015F8;
    id v63 = v33;
    uint64_t v64 = a7;
    uint64_t v62 = v15;
    id v35 = v33;
    dispatch_async(v34, block);
  }

  else
  {
    [*(id *)(a1 + 40) setSd:0xFFFFFFFFLL];
    [*(id *)(a1 + 40) setConnectError:v15];
  }

uint64_t sub_10032C370(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void, void, uint64_t, void, void, void))(a1[5] + 16LL))( a1[5],  0LL,  0LL,  0LL,  0LL,  0xFFFFFFFFLL,  a1[6],  0LL,  a1[4]);
}

void sub_10032C3B8(uint64_t a1, int a2, void *a3)
{
  int v5 = a3;
  int v6 = v5;
  switch(a2)
  {
    case 0:
    case 4:
      if (v5) {
        CFErrorRef v7 = nw_error_copy_cf_error(v5);
      }
      else {
        CFErrorRef v7 = 0LL;
      }
      v25[0] = _NSConcreteStackBlock;
      v25[1] = 3221225472LL;
      void v25[2] = sub_10032D29C;
      v25[3] = &unk_100901698;
      int v26 = a2;
      v25[4] = *(id *)(a1 + 32);
      int v27 = *(_DWORD *)(a1 + 64);
      v25[5] = *(id *)(a1 + 40);
      v25[6] = v7;
      v25[7] = *(id *)(a1 + 48);
      id v9 = v25;
      goto LABEL_25;
    case 3:
      if (v5)
      {
        CFErrorRef v8 = nw_error_copy_cf_error(v5);
        if (v8)
        {
          CFErrorRef v7 = v8;
LABEL_21:
          int v14 = -1;
          goto LABEL_24;
        }
      }

      uint64_t v10 = *(void *)(a1 + 32);
      uint64_t v11 = TrafficClassForIDSOpenSocketPriorityLevel([*(id *)(a1 + 40) socketTrafficClass]);
      nw_connection_reset_traffic_class(v10, v11);
      int connected_socket = nw_connection_get_connected_socket(*(void *)(a1 + 32));
      if (connected_socket < 0)
      {
        int v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v18 = *(void *)(a1 + 32);
          *(_DWORD *)__int128 buf = 134218242;
          *(void *)char v31 = v18;
          *(_WORD *)&v31[8] = 2112;
          *(void *)unsigned int v32 = v18;
          _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Failed to extract internal socket of (%p) %@",  buf,  0x16u);
        }

        CFErrorRef v7 = 0LL;
        goto LABEL_21;
      }

      int v13 = connected_socket;
      int v14 = dup(connected_socket);
      if (v14 < 0)
      {
        unsigned int v19 = __error();
        IDSAssertNonFatalErrnoWithSource( *v19,  "UTunController dup() failed",  "/Library/Caches/com.apple.xbs/Sources/IdentityServices_Swift/IDSAgent/IDSUTunController.m",  2874LL);
      }

      else
      {
        id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v16 = *(void *)(a1 + 32);
          *(_DWORD *)__int128 buf = 67109890;
          *(_DWORD *)char v31 = v14;
          *(_WORD *)&v31[4] = 1024;
          *(_DWORD *)&v31[6] = v13;
          *(_WORD *)unsigned int v32 = 2048;
          *(void *)&v32[2] = v16;
          __int16 v33 = 2112;
          uint64_t v34 = v16;
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Extracted {socket:%d} from internal {socket:%d} of (%p) %@",  buf,  0x22u);
        }
      }

      CFErrorRef v7 = 0LL;
LABEL_24:
      v28[0] = _NSConcreteStackBlock;
      v28[1] = 3221225472LL;
      v28[2] = sub_10032C750;
      v28[3] = &unk_100901648;
      void v28[4] = *(id *)(a1 + 32);
      int v29 = v14;
      v28[5] = *(id *)(a1 + 40);
      v28[6] = v7;
      v28[7] = *(id *)(a1 + 48);
      id v9 = v28;
LABEL_25:
      v9[8] = *(void *)(a1 + 56);
      id v20 = v7;
      IDSTransportThreadAddBlock(v9, v21);

LABEL_26:
      return;
    case 5:
      if (v5) {
        CFErrorRef v7 = nw_error_copy_cf_error(v5);
      }
      else {
        CFErrorRef v7 = 0LL;
      }
      v22[0] = _NSConcreteStackBlock;
      v22[1] = 3221225472LL;
      v22[2] = sub_10032D950;
      v22[3] = &unk_100901698;
      int v23 = 5;
      v22[4] = *(id *)(a1 + 32);
      int v24 = *(_DWORD *)(a1 + 64);
      v22[5] = *(id *)(a1 + 40);
      v22[6] = v7;
      v22[7] = *(id *)(a1 + 48);
      id v9 = v22;
      goto LABEL_25;
    default:
      goto LABEL_26;
  }

void sub_10032C750(uint64_t a1)
{
  uint64_t v2 = OSLogHandleForTransportCategory("UTun-oversized");
  unint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(_DWORD *)(a1 + 72);
    int v5 = *(void **)(a1 + 32);
    int v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) addressPair]);
    id v7 = (id)objc_claimAutoreleasedReturnValue([v6 shortDescription]);
    uint64_t v8 = *(void *)(a1 + 48);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) connectionID]);
    uint64_t v10 = *(void *)(a1 + 56);
    *(_DWORD *)__int128 buf = 134219522;
    __int128 v71 = v5;
    __int16 v72 = 2112;
    char v73 = v5;
    __int16 v74 = 1024;
    int v75 = v4;
    __int16 v76 = 2112;
    id v77 = v7;
    __int16 v78 = 2112;
    uint64_t v79 = v8;
    __int16 v80 = 2112;
    uint64_t v81 = v9;
    __int16 v82 = 2114;
    uint64_t v83 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "connect ready for nw_connection (%p) %@ {socket:%d} (ports[%@]), event error: %@, connection[%@], device[%{public}@]",  buf,  0x44u);
  }

  uint64_t v12 = os_log_shim_legacy_logging_enabled(v11);
  if ((_DWORD)v12)
  {
    if (_IDSShouldLogTransport(v12))
    {
      uint64_t v13 = *(void *)(a1 + 32);
      uint64_t v14 = *(unsigned int *)(a1 + 72);
      id v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) addressPair]);
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 shortDescription]);
      uint64_t v17 = *(void *)(a1 + 48);
      id v58 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) connectionID]);
      uint64_t v59 = *(void *)(a1 + 56);
      uint64_t v56 = v16;
      uint64_t v57 = v17;
      uint64_t v54 = v13;
      uint64_t v55 = v14;
      uint64_t v52 = v13;
      _IDSLogTransport( @"UTun-oversized",  @"IDS",  @"connect ready for nw_connection (%p) %@ {socket:%d} (ports[%@]), event error: %@, connection[%@], device[%{public}@]");

      if (_IDSShouldLog(0LL, @"UTun-oversized"))
      {
        uint64_t v18 = *(void *)(a1 + 32);
        uint64_t v19 = *(unsigned int *)(a1 + 72);
        id v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "addressPair", v52, v54, v55, v16, v17, v58, v59));
        uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v20 shortDescription]);
        uint64_t v22 = *(void *)(a1 + 48);
        id v58 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) connectionID]);
        uint64_t v59 = *(void *)(a1 + 56);
        uint64_t v56 = v21;
        uint64_t v57 = v22;
        uint64_t v54 = v18;
        uint64_t v55 = v19;
        uint64_t v52 = v18;
        _IDSLogV( 0LL,  @"IDSFoundation",  @"UTun-oversized",  @"connect ready for nw_connection (%p) %@ {socket:%d} (ports[%@]), event error: %@, connection[%@], device[%{public}@]");
      }
    }
  }

  int v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "serviceConnection", v52, v54, v55, v56, v57, v58, v59));
  if (v23)
  {
    int v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) serviceConnection]);
    BOOL v25 = v24 == *(void **)(a1 + 32);

    if (!v25)
    {
      int v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        int v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) serviceConnection]);
        __int128 v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) serviceConnection]);
        *(_DWORD *)__int128 buf = 134218242;
        __int128 v71 = v27;
        __int16 v72 = 2112;
        char v73 = v28;
        _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "Enabled new connection, cancelling previous instance (%p) %@",  buf,  0x16u);
      }

      int v29 = (nw_connection *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) serviceConnection]);
      nw_connection_cancel(v29);

      if (([*(id *)(a1 + 40) sd] & 0x80000000) == 0)
      {
        close((int)[*(id *)(a1 + 40) sd]);
        [*(id *)(a1 + 40) setSd:0xFFFFFFFFLL];
      }

      [*(id *)(a1 + 40) setServiceConnection:0];
    }
  }

  [*(id *)(a1 + 40) setServiceConnection:*(void *)(a1 + 32)];
  if ([*(id *)(a1 + 40) didInvalidate])
  {
    uint64_t v30 = OSLogHandleForTransportCategory("UTun-oversized");
    char v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v32 = *(void **)(a1 + 40);
      *(_DWORD *)__int128 buf = 138412290;
      __int128 v71 = v32;
      _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "This connection %@ has already been invalidated. Calling _closeSockets.",  buf,  0xCu);
    }

    uint64_t v34 = os_log_shim_legacy_logging_enabled(v33);
    if ((_DWORD)v34)
    {
      if (_IDSShouldLogTransport(v34))
      {
        uint64_t v53 = *(void *)(a1 + 40);
        _IDSLogTransport( @"UTun-oversized",  @"IDS",  @"This connection %@ has already been invalidated. Calling _closeSockets.");
        if (_IDSShouldLog(0LL, @"UTun-oversized"))
        {
          uint64_t v53 = *(void *)(a1 + 40);
          _IDSLogV( 0LL,  @"IDSFoundation",  @"UTun-oversized",  @"This connection %@ has already been invalidated. Calling _closeSockets.");
        }
      }
    }

    objc_msgSend(*(id *)(a1 + 40), "_closeSockets", v53);
    id v35 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) openSocketCompletionHandler]);
    uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) openSocketCompletionHandler]);

    if (v36)
    {
      id v37 = (id *)(a1 + 40);
      [*(id *)(a1 + 40) setOpenSocketCompletionHandler:0];
      objc_msgSend(*(id *)(a1 + 40), "setStateFlags:", objc_msgSend(*(id *)(a1 + 40), "stateFlags") | 2);
      uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) vifName]);
      unint64_t v39 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@: Connection (%@) was invalidated.",  v38,  *(void *)(a1 + 40)));

      id v40 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObject:forKey:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObject:forKey:",  v39,  NSLocalizedDescriptionKey));
      uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"IDSUTun",  5503LL,  v40));

      id v42 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*v37 completionQueue]);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_10032CED8;
      block[3] = &unk_1008F6358;
      id v68 = v41;
      id v69 = v35;
      id v43 = v41;
      dispatch_async(v42, block);
    }
  }

  else
  {
    int v44 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) openSocketCompletionHandler]);

    if (v44)
    {
      objc_msgSend(*(id *)(a1 + 40), "setStateFlags:", objc_msgSend(*(id *)(a1 + 40), "stateFlags") | 2);
      uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) openSocketCompletionHandler]);
      [*(id *)(a1 + 40) setOpenSocketCompletionHandler:0];
      int v46 = *(_DWORD *)(a1 + 72);
      int v47 = TrafficClassForIDSOpenSocketPriorityLevel([*(id *)(a1 + 40) socketTrafficClass]);
      sub_10032CF20(v46, v47);
      id v48 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) completionQueue]);
      v60[0] = _NSConcreteStackBlock;
      v60[1] = 3221225472LL;
      v60[2] = sub_10032D20C;
      v60[3] = &unk_100901620;
      id v64 = v45;
      id v49 = *(id *)(a1 + 56);
      int v66 = *(_DWORD *)(a1 + 72);
      uint64_t v50 = *(void *)(a1 + 64);
      id v61 = v49;
      uint64_t v65 = v50;
      id v62 = *(id *)(a1 + 32);
      id v63 = *(id *)(a1 + 48);
      id v51 = v45;
      dispatch_async(v48, v60);
    }

    else
    {
      [*(id *)(a1 + 40) setSd:*(unsigned int *)(a1 + 72)];
      [*(id *)(a1 + 40) setConnectError:*(void *)(a1 + 48)];
    }
  }

uint64_t sub_10032CED8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void, void, uint64_t, void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  0LL,  0LL,  0LL,  0LL,  0xFFFFFFFFLL,  0LL,  0LL,  *(void *)(a1 + 32));
}

void sub_10032CF20(int a1, int a2)
{
  int v10 = a2;
  if (a1 != -1)
  {
    if (setsockopt(a1, 0xFFFF, 4230, &v10, 4u))
    {
      int v3 = *__error();
      int v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        int v5 = v10;
        int v6 = strerror(v3);
        *(_DWORD *)__int128 buf = 67109890;
        int v12 = a1;
        __int16 v13 = 1024;
        int v14 = v5;
        __int16 v15 = 1024;
        int v16 = v3;
        __int16 v17 = 2080;
        uint64_t v18 = v6;
        id v7 = "setsockopt on socket (%d) failed for traffic class (%d), (error=%d: %s).";
        uint64_t v8 = v4;
        uint32_t v9 = 30;
LABEL_7:
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, v7, buf, v9);
      }
    }

    else
    {
      int v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 67109376;
        int v12 = a1;
        __int16 v13 = 1024;
        int v14 = v10;
        id v7 = "setsockopt on socket (%d) succeeded for traffic class (%d).";
        uint64_t v8 = v4;
        uint32_t v9 = 14;
        goto LABEL_7;
      }
    }
  }

void sub_10032D08C(int a1)
{
  if (a1 != -1)
  {
    v15[0] = 0LL;
    v15[1] = 0LL;
    uint64_t v2 = objc_alloc(&OBJC_CLASS___NSUUID);
    int v3 = -[NSUUID initWithUUIDString:](v2, "initWithUUIDString:", NRParametersWhitelistedAppUUIDString);
    -[NSUUID getUUIDBytes:](v3, "getUUIDBytes:", v15);
    if (setsockopt(a1, 0xFFFF, 4360, v15, 0x10u))
    {
      int v4 = *__error();
      int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = 67109634;
        int v10 = a1;
        __int16 v11 = 1024;
        int v12 = v4;
        __int16 v13 = 2080;
        int v14 = strerror(v4);
        int v6 = "setsockopt on socket (%d) failed for delegated uuid (error=%d: %s).";
        id v7 = v5;
        uint32_t v8 = 24;
LABEL_7:
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)&v9, v8);
      }
    }

    else
    {
      int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        int v9 = 67109120;
        int v10 = a1;
        int v6 = "setsockopt on socket (%d) succeeded for delegated uuid";
        id v7 = v5;
        uint32_t v8 = 8;
        goto LABEL_7;
      }
    }
  }

void sub_10032D20C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) controlChannelVersion]);
  (*(void (**)(uint64_t, id, id, id, id, void, void, void, void))(v2 + 16))( v2,  v3,  [*(id *)(a1 + 32) capabilityFlags],  objc_msgSend(*(id *)(a1 + 32), "instanceID"),  objc_msgSend(*(id *)(a1 + 32), "serviceMinCompatibilityVersion"),  *(unsigned int *)(a1 + 72),  *(void *)(a1 + 64),  *(void *)(a1 + 40),  *(void *)(a1 + 48));
}

void sub_10032D29C(uint64_t a1)
{
  uint64_t v2 = OSLogHandleForTransportCategory("UTun-oversized");
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = nw_connection_state_to_string(*(unsigned int *)(a1 + 72));
    int v5 = *(_DWORD *)(a1 + 76);
    int v6 = *(void **)(a1 + 32);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) addressPair]);
    id v8 = (id)objc_claimAutoreleasedReturnValue([v7 shortDescription]);
    uint64_t v9 = *(void *)(a1 + 48);
    int v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) connectionID]);
    uint64_t v11 = *(void *)(a1 + 56);
    *(_DWORD *)__int128 buf = 136316930;
    uint64_t v65 = v4;
    __int16 v66 = 2048;
    __int16 v67 = v6;
    __int16 v68 = 2112;
    id v69 = v6;
    __int16 v70 = 1024;
    int v71 = v5;
    __int16 v72 = 2112;
    id v73 = v8;
    __int16 v74 = 2112;
    uint64_t v75 = v9;
    __int16 v76 = 2112;
    id v77 = v10;
    __int16 v78 = 2114;
    uint64_t v79 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "connection event %s for nw_connection (%p) %@ {socket:%d} (ports[%@]), event error: %@, connection[%@], device[%{public}@]",  buf,  0x4Eu);
  }

  uint64_t v13 = os_log_shim_legacy_logging_enabled(v12);
  if ((_DWORD)v13)
  {
    if (_IDSShouldLogTransport(v13))
    {
      uint64_t v14 = nw_connection_state_to_string(*(unsigned int *)(a1 + 72));
      uint64_t v15 = *(void *)(a1 + 32);
      uint64_t v16 = *(unsigned int *)(a1 + 76);
      __int16 v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) addressPair]);
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v17 shortDescription]);
      uint64_t v19 = *(void *)(a1 + 48);
      uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) connectionID]);
      uint64_t v57 = *(void *)(a1 + 56);
      uint64_t v54 = v18;
      uint64_t v55 = v19;
      uint64_t v51 = v15;
      uint64_t v53 = v16;
      uint64_t v48 = v14;
      uint64_t v49 = v15;
      _IDSLogTransport( @"UTun-oversized",  @"IDS",  @"connection event %s for nw_connection (%p) %@ {socket:%d} (ports[%@]), event error: %@, connection[%@], device[%{public}@]");

      if (_IDSShouldLog(0LL, @"UTun-oversized"))
      {
        uint64_t v20 = nw_connection_state_to_string(*(unsigned int *)(a1 + 72));
        uint64_t v21 = *(void *)(a1 + 32);
        uint64_t v22 = *(unsigned int *)(a1 + 76);
        int v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "addressPair", v48, v49, v51, v53, v18, v19, v56, v57));
        int v24 = (void *)objc_claimAutoreleasedReturnValue([v23 shortDescription]);
        uint64_t v25 = *(void *)(a1 + 48);
        uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) connectionID]);
        uint64_t v57 = *(void *)(a1 + 56);
        uint64_t v54 = v24;
        uint64_t v55 = v25;
        uint64_t v51 = v21;
        uint64_t v53 = v22;
        uint64_t v48 = v20;
        uint64_t v49 = v21;
        _IDSLogV( 0LL,  @"IDSFoundation",  @"UTun-oversized",  @"connection event %s for nw_connection (%p) %@ {socket:%d} (ports[%@]), event error: %@, connection[%@], device[%{public}@]");
      }
    }
  }

  int v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "serviceConnection", v48, v49, v51, v53, v54, v55, v56, v57));
  if (!v26
    || (int v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) serviceConnection]),
        BOOL v28 = v27 == *(void **)(a1 + 32),
        v27,
        v26,
        v28))
  {
    if (([*(id *)(a1 + 40) sd] & 0x80000000) == 0)
    {
      close((int)[*(id *)(a1 + 40) sd]);
      [*(id *)(a1 + 40) setSd:0xFFFFFFFFLL];
    }

    uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) vifName]);
    unint64_t v39 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@: nw_connection %@ in bad state %s",  v38,  *(void *)(a1 + 32),  nw_connection_state_to_string(*(unsigned int *)(a1 + 72)));
    id v37 = (void *)objc_claimAutoreleasedReturnValue(v39);

    id v40 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObject:forKey:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObject:forKey:",  v37,  NSLocalizedDescriptionKey));
    uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"IDSUTun",  5501LL,  v40));

    id v42 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) openSocketCompletionHandler]);
    if (v42)
    {
      objc_msgSend(*(id *)(a1 + 40), "setStateFlags:", objc_msgSend(*(id *)(a1 + 40), "stateFlags") | 2);
      id v43 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) openSocketCompletionHandler]);
      [*(id *)(a1 + 40) setOpenSocketCompletionHandler:0];
      int v44 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) completionQueue]);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_10032D8BC;
      block[3] = &unk_100901670;
      id v61 = v43;
      id v45 = *(id *)(a1 + 56);
      int v63 = -1;
      uint64_t v46 = *(void *)(a1 + 64);
      id v59 = v45;
      uint64_t v62 = v46;
      id v60 = v41;
      id v47 = v43;
      dispatch_async(v44, block);
    }

    else
    {
      [*(id *)(a1 + 40) setSd:0xFFFFFFFFLL];
      [*(id *)(a1 + 40) setConnectError:v41];
    }

    nw_connection_cancel(*(nw_connection_t *)(a1 + 32));

    goto LABEL_21;
  }

  uint64_t v29 = OSLogHandleForTransportCategory("UTun-oversized");
  uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v31 = *(void *)(a1 + 32);
    unsigned int v32 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) serviceConnection]);
    uint64_t v33 = *(void **)(a1 + 40);
    *(_DWORD *)__int128 buf = 134218498;
    uint64_t v65 = v31;
    __int16 v66 = 2048;
    __int16 v67 = v32;
    __int16 v68 = 2112;
    id v69 = v33;
    _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "serviceConnection (%p) not same as existing serviceConnection (%p) for genericConnection %@",  buf,  0x20u);
  }

  uint64_t v35 = os_log_shim_legacy_logging_enabled(v34);
  if ((_DWORD)v35)
  {
    if (_IDSShouldLogTransport(v35))
    {
      uint64_t v36 = *(void *)(a1 + 32);
      uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) serviceConnection]);
      uint64_t v52 = *(void *)(a1 + 40);
      _IDSLogTransport( @"UTun-oversized",  @"IDS",  @"serviceConnection (%p) not same as existing serviceConnection (%p) for genericConnection %@");

      if (_IDSShouldLog(0LL, @"UTun-oversized"))
      {
        id v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "serviceConnection", v36, v50, v52));
        _IDSLogV( 0LL,  @"IDSFoundation",  @"UTun-oversized",  @"serviceConnection (%p) not same as existing serviceConnection (%p) for genericConnection %@");
LABEL_21:
      }
    }
  }

void sub_10032D8BC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) controlChannelVersion]);
  (*(void (**)(uint64_t, id, id, id, id, void, void, void, void))(v2 + 16))( v2,  v3,  [*(id *)(a1 + 32) capabilityFlags],  objc_msgSend(*(id *)(a1 + 32), "instanceID"),  objc_msgSend(*(id *)(a1 + 32), "serviceMinCompatibilityVersion"),  *(unsigned int *)(a1 + 64),  *(void *)(a1 + 56),  0,  *(void *)(a1 + 40));
}

void sub_10032D950(uint64_t a1)
{
  uint64_t v2 = OSLogHandleForTransportCategory("UTun-oversized");
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = nw_connection_state_to_string(*(unsigned int *)(a1 + 72));
    int v5 = *(_DWORD *)(a1 + 76);
    int v6 = *(void **)(a1 + 32);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) addressPair]);
    id v8 = (id)objc_claimAutoreleasedReturnValue([v7 shortDescription]);
    uint64_t v9 = *(void *)(a1 + 48);
    int v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) connectionID]);
    uint64_t v11 = *(void *)(a1 + 56);
    *(_DWORD *)__int128 buf = 136316930;
    uint64_t v65 = v4;
    __int16 v66 = 2048;
    __int16 v67 = v6;
    __int16 v68 = 2112;
    id v69 = v6;
    __int16 v70 = 1024;
    int v71 = v5;
    __int16 v72 = 2112;
    id v73 = v8;
    __int16 v74 = 2112;
    uint64_t v75 = v9;
    __int16 v76 = 2112;
    id v77 = v10;
    __int16 v78 = 2114;
    uint64_t v79 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "connection event %s for nw_connection (%p) %@ {socket:%d} (ports[%@]), event error: %@, connection[%@], device[%{public}@]",  buf,  0x4Eu);
  }

  uint64_t v13 = os_log_shim_legacy_logging_enabled(v12);
  if ((_DWORD)v13)
  {
    if (_IDSShouldLogTransport(v13))
    {
      uint64_t v14 = nw_connection_state_to_string(*(unsigned int *)(a1 + 72));
      uint64_t v15 = *(void *)(a1 + 32);
      uint64_t v16 = *(unsigned int *)(a1 + 76);
      __int16 v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) addressPair]);
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v17 shortDescription]);
      uint64_t v19 = *(void *)(a1 + 48);
      uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) connectionID]);
      uint64_t v57 = *(void *)(a1 + 56);
      uint64_t v54 = v18;
      uint64_t v55 = v19;
      uint64_t v51 = v15;
      uint64_t v53 = v16;
      uint64_t v48 = v14;
      uint64_t v49 = v15;
      _IDSLogTransport( @"UTun-oversized",  @"IDS",  @"connection event %s for nw_connection (%p) %@ {socket:%d} (ports[%@]), event error: %@, connection[%@], device[%{public}@]");

      if (_IDSShouldLog(0LL, @"UTun-oversized"))
      {
        uint64_t v20 = nw_connection_state_to_string(*(unsigned int *)(a1 + 72));
        uint64_t v21 = *(void *)(a1 + 32);
        uint64_t v22 = *(unsigned int *)(a1 + 76);
        int v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "addressPair", v48, v49, v51, v53, v18, v19, v56, v57));
        int v24 = (void *)objc_claimAutoreleasedReturnValue([v23 shortDescription]);
        uint64_t v25 = *(void *)(a1 + 48);
        uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) connectionID]);
        uint64_t v57 = *(void *)(a1 + 56);
        uint64_t v54 = v24;
        uint64_t v55 = v25;
        uint64_t v51 = v21;
        uint64_t v53 = v22;
        uint64_t v48 = v20;
        uint64_t v49 = v21;
        _IDSLogV( 0LL,  @"IDSFoundation",  @"UTun-oversized",  @"connection event %s for nw_connection (%p) %@ {socket:%d} (ports[%@]), event error: %@, connection[%@], device[%{public}@]");
      }
    }
  }

  int v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "openSocketCompletionHandler", v48, v49, v51, v53, v54, v55, v56, v57));
  BOOL v27 = v26 == 0LL;

  if (!v27)
  {
    BOOL v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) serviceConnection]);
    if (!v28
      || (uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) serviceConnection]),
          BOOL v30 = v29 == *(void **)(a1 + 32),
          v29,
          v28,
          v30))
    {
      id v40 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) vifName]);
      unint64_t v39 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@: nw_connection %@ canceled",  v40,  *(void *)(a1 + 32)));

      uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObject:forKey:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObject:forKey:",  v39,  NSLocalizedDescriptionKey));
      id v42 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"IDSUTun",  5502LL,  v41));

      objc_msgSend(*(id *)(a1 + 40), "setStateFlags:", objc_msgSend(*(id *)(a1 + 40), "stateFlags") | 2);
      id v43 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) openSocketCompletionHandler]);
      [*(id *)(a1 + 40) setOpenSocketCompletionHandler:0];
      int v44 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) completionQueue]);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_10032DF1C;
      block[3] = &unk_100901670;
      id v61 = v43;
      id v45 = *(id *)(a1 + 56);
      int v63 = -1;
      uint64_t v62 = *(void *)(a1 + 64);
      id v59 = v45;
      id v60 = v42;
      id v46 = v42;
      id v47 = v43;
      dispatch_async(v44, block);

      goto LABEL_17;
    }

    uint64_t v31 = OSLogHandleForTransportCategory("UTun-oversized");
    unsigned int v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v33 = *(void *)(a1 + 32);
      uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) serviceConnection]);
      uint64_t v35 = *(void **)(a1 + 40);
      *(_DWORD *)__int128 buf = 134218498;
      uint64_t v65 = v33;
      __int16 v66 = 2048;
      __int16 v67 = v34;
      __int16 v68 = 2112;
      id v69 = v35;
      _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "serviceConnection (%p) not same as existing serviceConnection (%p) for genericConnection %@",  buf,  0x20u);
    }

    uint64_t v37 = os_log_shim_legacy_logging_enabled(v36);
    if ((_DWORD)v37)
    {
      if (_IDSShouldLogTransport(v37))
      {
        uint64_t v38 = *(void *)(a1 + 32);
        uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) serviceConnection]);
        uint64_t v52 = *(void *)(a1 + 40);
        _IDSLogTransport( @"UTun-oversized",  @"IDS",  @"serviceConnection (%p) not same as existing serviceConnection (%p) for genericConnection %@");

        if (_IDSShouldLog(0LL, @"UTun-oversized"))
        {
          unint64_t v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "serviceConnection", v38, v50, v52));
          _IDSLogV( 0LL,  @"IDSFoundation",  @"UTun-oversized",  @"serviceConnection (%p) not same as existing serviceConnection (%p) for genericConnection %@");
LABEL_17:
        }
      }
    }
  }

void sub_10032DF1C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) controlChannelVersion]);
  (*(void (**)(uint64_t, id, id, id, id, void, void, void, void))(v2 + 16))( v2,  v3,  [*(id *)(a1 + 32) capabilityFlags],  objc_msgSend(*(id *)(a1 + 32), "instanceID"),  objc_msgSend(*(id *)(a1 + 32), "serviceMinCompatibilityVersion"),  *(unsigned int *)(a1 + 64),  *(void *)(a1 + 56),  0,  *(void *)(a1 + 40));
}

void sub_10032DFB0(uint64_t a1)
{
  socklen_t v69 = 4;
  int __errnum = -1431655766;
  int v2 = getsockopt(*(_DWORD *)(a1 + 64), 0xFFFF, 4103, &__errnum, &v69);
  uint64_t v3 = OSLogHandleForTransportCategory("UTun-oversized");
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(a1 + 64);
    int v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) addressPair]);
    id v7 = (id)objc_claimAutoreleasedReturnValue([v6 shortDescription]);
    if (v2) {
      int v8 = -1;
    }
    else {
      int v8 = __errnum;
    }
    if (v2)
    {
      uint64_t v9 = "unknown";
    }

    else if (__errnum)
    {
      uint64_t v9 = strerror(__errnum);
    }

    else
    {
      uint64_t v9 = "no error";
    }

    int v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) connectionID]);
    uint64_t v11 = *(void *)(a1 + 40);
    *(_DWORD *)__int128 buf = 67110402;
    int v72 = v5;
    __int16 v73 = 2112;
    *(void *)__int16 v74 = v7;
    *(_WORD *)&v74[8] = 1024;
    *(_DWORD *)&v74[10] = v8;
    __int16 v75 = 2080;
    __int16 v76 = v9;
    __int16 v77 = 2112;
    __int16 v78 = v10;
    __int16 v79 = 2114;
    uint64_t v80 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "connect ready for {socket:%d} (ports[%@]), socket error: %d (%s), connection[%@], device[%{public}@]",  buf,  0x36u);
  }

  uint64_t v13 = os_log_shim_legacy_logging_enabled(v12);
  if ((_DWORD)v13 && _IDSShouldLogTransport(v13))
  {
    uint64_t v14 = *(unsigned int *)(a1 + 64);
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) addressPair]);
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 shortDescription]);
    uint64_t v17 = v2 ? 0xFFFFFFFFLL : __errnum;
    if (v2) {
      uint64_t v18 = "unknown";
    }
    else {
      uint64_t v18 = __errnum ? strerror(__errnum) : "no error";
    }
    id v59 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) connectionID]);
    uint64_t v60 = *(void *)(a1 + 40);
    uint64_t v57 = v17;
    id v58 = v18;
    uint64_t v55 = v14;
    uint64_t v56 = v16;
    _IDSLogTransport( @"UTun-oversized",  @"IDS",  @"connect ready for {socket:%d} (ports[%@]), socket error: %d (%s), connection[%@], device[%{public}@]");

    if (_IDSShouldLog(0LL, @"UTun-oversized"))
    {
      uint64_t v19 = *(unsigned int *)(a1 + 64);
      uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "addressPair", v55, v16, v17, v18, v59, v60));
      uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v20 shortDescription]);
      if (v2) {
        uint64_t v22 = 0xFFFFFFFFLL;
      }
      else {
        uint64_t v22 = __errnum;
      }
      if (v2)
      {
        int v23 = "unknown";
      }

      else if (__errnum)
      {
        int v23 = strerror(__errnum);
      }

      else
      {
        int v23 = "no error";
      }

      id v59 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) connectionID]);
      uint64_t v60 = *(void *)(a1 + 40);
      uint64_t v57 = v22;
      id v58 = v23;
      uint64_t v55 = v19;
      uint64_t v56 = v21;
      _IDSLogV( 0LL,  @"IDSFoundation",  @"UTun-oversized",  @"connect ready for {socket:%d} (ports[%@]), socket error: %d (%s), connection[%@], device[%{public}@]");
    }
  }

  int v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "idsDeviceConnectionUUID", v55, v56, v57, v58, v59, v60));

  if (v24)
  {
    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDeviceConnectionAWDMetrics sharedInstance]( &OBJC_CLASS___IDSDeviceConnectionAWDMetrics,  "sharedInstance"));
    [*(id *)(a1 + 32) connectionInitTime];
    double v27 = v26;
    BOOL v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) idsDeviceConnectionUUID]);
    [v25 setConnectionInitTime:v28 forConnectionUUID:v27];
  }

  uint64_t v29 = *(unsigned int *)(a1 + 64);
  if (v2)
  {
    int __errnum = *__error();
    BOOL v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 67109120;
      int v72 = __errnum;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "getsockopt failed %d", buf, 8u);
    }
  }

  if (__errnum)
  {
    uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) vifName]);
    unsigned int v32 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@: socket failed (errno=%d)",  v31,  __errnum));

    uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObject:forKey:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObject:forKey:",  v32,  NSLocalizedDescriptionKey));
    uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"IDSUTun",  5005LL,  v33));

    int v35 = *(_DWORD *)(a1 + 64);
    if (v35 != -1) {
      close(v35);
    }

    uint64_t v29 = 0xFFFFFFFFLL;
  }

  else
  {
    if ((v29 & 0x80000000) == 0)
    {
      [*(id *)(a1 + 32) setSdCopy:dup(v29)];
      if (([*(id *)(a1 + 32) sdCopy] & 0x80000000) != 0)
      {
        unint64_t v39 = __error();
        IDSAssertNonFatalErrnoWithSource( *v39,  "UTunController dup() failed",  "/Library/Caches/com.apple.xbs/Sources/IdentityServices_Swift/IDSAgent/IDSUTunController.m",  3073LL);
      }

      else
      {
        uint64_t v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v37 = [*(id *)(a1 + 32) sdCopy];
          uint64_t v38 = *(void *)(a1 + 32);
          *(_DWORD *)__int128 buf = 67109634;
          int v72 = v37;
          __int16 v73 = 1024;
          *(_DWORD *)__int16 v74 = v29;
          *(_WORD *)&v74[4] = 2112;
          *(void *)&v74[6] = v38;
          _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "Saved sdCopy {socket:%d} of {socket:%d} in %@",  buf,  0x18u);
        }
      }
    }

    uint64_t v34 = 0LL;
  }

  id v40 = *(void **)(*(void *)(a1 + 48) + 96LL);
  uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) cbuuid]);
  id v42 = [v40 currentLinkType:v41];

  id v43 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) openSocketCompletionHandler]);
  if (v43)
  {
    objc_msgSend(*(id *)(a1 + 32), "setStateFlags:", objc_msgSend(*(id *)(a1 + 32), "stateFlags") | 2);
    int v44 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) openSocketCompletionHandler]);
    [*(id *)(a1 + 32) setOpenSocketCompletionHandler:0];
    if (qword_1009C0BE0 != -1) {
      dispatch_once(&qword_1009C0BE0, &stru_100901B20);
    }
    uint64_t v45 = mach_continuous_time();
    double v46 = *(double *)&qword_1009C0B68;
    int v47 = TrafficClassForIDSOpenSocketPriorityLevel([*(id *)(a1 + 32) socketTrafficClass]);
    sub_10032CF20(v29, v47);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10032E7D4;
    block[3] = &unk_1009016E8;
    double v66 = v46 * (double)v45;
    id v65 = v44;
    int8x16_t v61 = *(int8x16_t *)(a1 + 40);
    id v48 = (id)v61.i64[0];
    int8x16_t v63 = vextq_s8(v61, v61, 8uLL);
    int v68 = v29;
    id v67 = v42;
    id v64 = v34;
    id v49 = v44;
    dispatch_block_t v50 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, QOS_CLASS_USER_INTERACTIVE, 0, block);
    uint64_t v51 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) completionQueue]);
    dispatch_async(v51, v50);
  }

  else
  {
    [*(id *)(a1 + 32) setSd:v29];
    [*(id *)(a1 + 32) setConnectError:v34];
  }

  if ([*(id *)(a1 + 56) isEqualToIgnoringCase:@"com.apple.private.alloy.phonecontinuity"])
  {
    uint64_t v52 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
    if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_DEFAULT,  "Skipping header compression for phone continuity",  buf,  2u);
    }
  }

  else if (!v34)
  {
    uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) compressionInfo]);
    BOOL v54 = (uint64_t)[v53 state] < 2;

    if (v54) {
      [*(id *)(a1 + 48) startCompressionForConnection:*(void *)(a1 + 32) deviceConnectionInfo:*(void *)(a1 + 40)];
    }
  }

  IDSTransportThreadRemoveSocket(*(unsigned int *)(a1 + 64));
}

void sub_10032E7D4(uint64_t a1)
{
  if (qword_1009C0BE0 != -1) {
    dispatch_once(&qword_1009C0BE0, &stru_100901B20);
  }
  double v2 = *(double *)&qword_1009C0B68 * (double)mach_continuous_time() - *(double *)(a1 + 64);
  uint64_t v3 = OSLogHandleForTransportCategory("IDSUTunController");
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    *(_DWORD *)__int128 buf = 138412546;
    uint64_t v13 = v5;
    __int16 v14 = 2048;
    double v15 = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "%@: openSocketCompletionHandler dispatch time %0.6lf seconds",  buf,  0x16u);
  }

  uint64_t v7 = os_log_shim_legacy_logging_enabled(v6);
  if ((_DWORD)v7)
  {
    if (_IDSShouldLogTransport(v7))
    {
      double v11 = v2;
      uint64_t v10 = *(void *)(a1 + 32);
      _IDSLogTransport( @"IDSUTunController",  @"IDS",  @"%@: openSocketCompletionHandler dispatch time %0.6lf seconds");
      if (_IDSShouldLog(0LL, @"IDSUTunController"))
      {
        double v11 = v2;
        uint64_t v10 = *(void *)(a1 + 32);
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSUTunController",  @"%@: openSocketCompletionHandler dispatch time %0.6lf seconds");
      }
    }
  }

  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "controlChannelVersion", v10, *(void *)&v11));
  (*(void (**)(uint64_t, void *, id, id, id, void, void, void, void))(v8 + 16))( v8,  v9,  [*(id *)(a1 + 40) capabilityFlags],  objc_msgSend(*(id *)(a1 + 40), "instanceID"),  objc_msgSend(*(id *)(a1 + 40), "serviceMinCompatibilityVersion"),  *(unsigned int *)(a1 + 80),  *(void *)(a1 + 72),  0,  *(void *)(a1 + 48));
}

void sub_10032E9E8(id *a1)
{
  if (([a1[4] stateFlags] & 1) == 0
    && ([a1[4] didInvalidate] & 1) == 0)
  {
    uint64_t v2 = OSLogHandleForTransportCategory("UTunConnection");
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      id v4 = a1[4];
      *(_DWORD *)__int128 buf = 138412546;
      double v26 = v4;
      __int16 v27 = 2112;
      BOOL v28 = &off_100947A10;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "openSocket was never called on connection (%@) within %@ seconds of starting it.  Kill the connection!",  buf,  0x16u);
    }

    uint64_t v6 = os_log_shim_legacy_logging_enabled(v5);
    if ((_DWORD)v6)
    {
      if (_IDSShouldLogTransport(v6))
      {
        id v23 = a1[4];
        int v24 = &off_100947A10;
        _IDSLogTransport( @"UTunConnection",  @"IDS",  @"openSocket was never called on connection (%@) within %@ seconds of starting it.  Kill the connection!");
        if (_IDSShouldLog(0LL, @"UTunConnection"))
        {
          id v23 = a1[4];
          int v24 = &off_100947A10;
          _IDSLogV( 0LL,  @"IDSFoundation",  @"UTunConnection",  @"openSocket was never called on connection (%@) within %@ seconds of starting it.  Kill the connection!");
        }
      }
    }

    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "connectionID", v23, v24));
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([a1[4] localConnectionGUID]);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([a1[4] remoteConnectionGUID]);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v7 account]);
    double v11 = (void *)objc_claimAutoreleasedReturnValue([v7 service]);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v7 name]);
    uint64_t v13 = sub_10032ED20(v8, v9, v10, v11, v12);
    __int16 v14 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(v13);

    if (v14)
    {
      double v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([a1[5] vifName]);
        id v17 = a1[4];
        *(_DWORD *)__int128 buf = 138412802;
        double v26 = v16;
        __int16 v27 = 2112;
        BOOL v28 = v14;
        __int16 v29 = 2112;
        id v30 = v17;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "%@: close channel control message [%@] created for connection %@",  buf,  0x20u);
      }

      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([a1[5] controlChannel]);
      [v18 sendMessage:v14];
    }

    id v19 = a1[6];
    id v20 = [a1[5] portMap];
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([a1[4] addressPair]);
    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v21 localAddress]);
    objc_msgSend(v19, "releasePortIfNecessary:port:", v20, objc_msgSend(v22, "saPortHostOrder"));

    objc_msgSend( a1[6],  "removeConnection:fromDeviceConnectionInfo:removeCode:removeReason:",  a1[4],  a1[5],  5104,  @"openSocket was never called, closing connection");
  }

NSMutableData *sub_10032ED20(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  if (a1)
  {
    id v11 = a1;
    id v12 = a5;
    id v13 = a4;
    __int16 v27 = (const char *)[v11 UTF8String];
    unsigned __int16 v14 = strlen(v27);
    if (v9)
    {
      double v26 = (const char *)[v9 UTF8String];
      unsigned int v15 = (unsigned __int16)strlen(v26);
    }

    else
    {
      double v26 = 0LL;
      unsigned int v15 = 0;
    }

    id v28 = v10;
    id v17 = (const char *)[v10 UTF8String];
    unsigned __int16 v18 = strlen(v17);
    id v19 = v13;
    id v20 = (const char *)[v19 UTF8String];

    unsigned __int16 v21 = strlen(v20);
    id v22 = v12;
    id v23 = (const char *)[v22 UTF8String];

    unsigned __int16 v24 = strlen(v23);
    v29[0] = 3;
    v29[1] = HIBYTE(v14);
    v29[2] = v14;
    v29[3] = BYTE1(v15);
    void v29[4] = v15;
    void v29[5] = HIBYTE(v18);
    v29[6] = v18;
    v29[7] = HIBYTE(v21);
    v29[8] = v21;
    v29[9] = HIBYTE(v24);
    v29[10] = v24;
    uint64_t v16 = objc_alloc_init(&OBJC_CLASS___NSMutableData);
    -[NSMutableData appendBytes:length:](v16, "appendBytes:length:", v29, 11LL);
    if (v14) {
      -[NSMutableData appendBytes:length:](v16, "appendBytes:length:", v27, v14);
    }
    if (v15) {
      -[NSMutableData appendBytes:length:](v16, "appendBytes:length:", v26, v15);
    }
    -[NSMutableData appendBytes:length:](v16, "appendBytes:length:", v17, v18, v26);
    -[NSMutableData appendBytes:length:](v16, "appendBytes:length:", v20, v21);
    -[NSMutableData appendBytes:length:](v16, "appendBytes:length:", v23, v24);
    id v10 = v28;
  }

  else
  {
    uint64_t v16 = 0LL;
  }

  return v16;
}

void sub_10032F504( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, id location)
{
}

void sub_10032F528(uint64_t a1, void *a2, int a3, int a4, int a5, int a6)
{
  id v11 = a2;
  if (v11)
  {
    if (!*(_BYTE *)(a1 + 64))
    {
      id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) controlChannel]);
      id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 deviceUniqueID]);

      if (v13)
      {
        unsigned __int16 v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v15 = *(void **)(a1 + 40);
          *(_DWORD *)__int128 buf = 138412546;
          *(void *)&uint8_t buf[4] = v13;
          __int16 v60 = 2112;
          id v61 = v15;
          _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Successfully decrypted control message, lock peer %@ for cbuuid %@.",  buf,  0x16u);
        }

        uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[IDSUTunDeliveryController sharedInstance]( &OBJC_CLASS___IDSUTunDeliveryController,  "sharedInstance"));
        [v16 lockContinuityPeer:v13 btUUID:*(void *)(a1 + 40)];
      }
    }

    uint64_t v17 = OSLogHandleForIDSCategory("UTun-oversized");
    unsigned __int16 v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v19 = *(void *)(a1 + 32);
      id v20 = *(void **)(a1 + 48);
      *(_DWORD *)__int128 buf = 134218498;
      *(void *)&uint8_t buf[4] = v19;
      __int16 v60 = 2112;
      id v61 = v11;
      __int16 v62 = 2112;
      int8x16_t v63 = v20;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "%p: control channel got message %@ device conn info:%@",  buf,  0x20u);
    }

    if (os_log_shim_legacy_logging_enabled(v21)
      && _IDSShouldLog(0LL, @"UTun-oversized"))
    {
      id v52 = v11;
      uint64_t v53 = *(void *)(a1 + 48);
      uint64_t v51 = *(void *)(a1 + 32);
      _IDSLogV( 0LL,  @"IDSFoundation",  @"UTun-oversized",  @"%p: control channel got message %@ device conn info:%@");
    }

    objc_msgSend( *(id *)(a1 + 32),  "receiveControlChannelMessage:fromCbuuid:deviceUniqueID:",  v11,  *(void *)(a1 + 40),  *(void *)(a1 + 56),  v51,  v52,  v53);
    goto LABEL_42;
  }

  if (a4 && *(_BYTE *)(a1 + 64))
  {
    id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "FairPlay authentication failed, obliterate device connection.",  buf,  2u);
    }

    uint64_t v25 = im_primary_queue(v23, v24);
    double v26 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v25);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10032FC04;
    block[3] = &unk_1008F6010;
    void block[4] = *(void *)(a1 + 32);
    dispatch_async(v26, block);

    goto LABEL_42;
  }

  if (a6)
  {
    __int16 v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) linkManager]);
    [v27 triggerBTCorruptionRecoveryForCBUUID:*(void *)(a1 + 40)];
  }

  uint64_t v28 = sub_1003BB3A8((uint64_t)[*(id *)(a1 + 48) connectionsTableByLocalRemotePortKey], 67109888);
  __int16 v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
  [*(id *)(a1 + 32) resetTCPConnection:v29 forDeviceConnectionInfo:*(void *)(a1 + 48)];
  if (a3) {
    [*(id *)(a1 + 32) resetAllConnectionsForDevice:*(void *)(a1 + 48)];
  }
  unsigned int v30 = [*(id *)(a1 + 48) linkLayerConnected];
  uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDevicePolicyController sharedInstance](&OBJC_CLASS___IDSDevicePolicyController, "sharedInstance"));
  unsigned int v32 = [v31 shouldBlackOutDeviceWithCbuuid:*(void *)(a1 + 40)];

  if (v32)
  {
    uint64_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v34 = *(void **)(a1 + 56);
      uint64_t v35 = *(void *)(a1 + 40);
      uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) controlChannel]);
      unsigned int v37 = (void *)objc_claimAutoreleasedReturnValue([v36 deviceUniqueID]);
      *(_DWORD *)__int128 buf = 138412802;
      *(void *)&uint8_t buf[4] = v35;
      __int16 v60 = 2112;
      id v61 = v34;
      __int16 v62 = 2112;
      int8x16_t v63 = v37;
      _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "Device %@/%@ (CC:%@) is blacked out due to fairplay failures",  buf,  0x20u);
    }

    uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) linkManager]);
    [v38 stopLinkForDeviceUniqueID:*(void *)(a1 + 56) cbuuid:*(void *)(a1 + 40) disconnectWP:1];

    goto LABEL_29;
  }

  if (!v30)
  {
LABEL_29:
    unint64_t v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
    if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v40 = *(void *)(a1 + 40);
      *(_DWORD *)__int128 buf = 138412290;
      *(void *)&uint8_t buf[4] = v40;
      _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "Add a block for control channel reestablishment on link connects for %@",  buf,  0xCu);
    }

    *(void *)__int128 buf = 0xAAAAAAAAAAAAAAAALL;
    objc_initWeak((id *)buf, *(id *)(a1 + 48));
    uint64_t v41 = *(void **)(a1 + 48);
    v54[0] = _NSConcreteStackBlock;
    v54[1] = 3221225472LL;
    v54[2] = sub_10032FC6C;
    v54[3] = &unk_100901738;
    objc_copyWeak(&v55, (id *)buf);
    v54[4] = *(void *)(a1 + 32);
    [v41 addBlocksOnLinkConnect:v54];
    objc_destroyWeak(&v55);
    objc_destroyWeak((id *)buf);
    goto LABEL_32;
  }

  v56[0] = _NSConcreteStackBlock;
  v56[1] = 3221225472LL;
  v56[2] = sub_10032FC5C;
  v56[3] = &unk_1008F8800;
  v56[4] = *(void *)(a1 + 32);
  id v57 = *(id *)(a1 + 48);
  IDSTransportThreadAddBlockAfter(v56, 1.0);

LABEL_32:
  if (!*(_BYTE *)(a1 + 64) && a5)
  {
    id v42 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) controlChannel]);
    id v43 = (void *)objc_claimAutoreleasedReturnValue([v42 deviceUniqueID]);

    int v44 = (void *)objc_claimAutoreleasedReturnValue( +[IDSUTunDeliveryController sharedInstance]( &OBJC_CLASS___IDSUTunDeliveryController,  "sharedInstance"));
    uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue([v44 pendingContinuityPeerID:*(void *)(a1 + 40)]);

    unsigned int v46 = [v43 isEqualToString:v45];
    int v47 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
    BOOL v48 = os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT);
    if (v46)
    {
      if (v48)
      {
        uint64_t v49 = *(void *)(a1 + 56);
        dispatch_block_t v50 = *(void **)(a1 + 40);
        *(_DWORD *)__int128 buf = 138412546;
        *(void *)&uint8_t buf[4] = v49;
        __int16 v60 = 2112;
        id v61 = v50;
        _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_DEFAULT,  "Failed to encrypt/decrypt control message with deviceUniqueID %@, try different peer for %@.",  buf,  0x16u);
      }

      int v47 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSUTunDeliveryController sharedInstance]( &OBJC_CLASS___IDSUTunDeliveryController,  "sharedInstance"));
      -[os_log_s tryNextContinuityPeer:](v47, "tryNextContinuityPeer:", *(void *)(a1 + 40));
    }

    else if (v48)
    {
      *(_DWORD *)__int128 buf = 138412546;
      *(void *)&uint8_t buf[4] = v43;
      __int16 v60 = 2112;
      id v61 = v45;
      _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_DEFAULT,  "deviceUniqueID mismatch (%@!=%@), ignore decryption error.",  buf,  0x16u);
    }
  }

LABEL_42:
}

void sub_10032FBC4(_Unwind_Exception *a1)
{
}

void sub_10032FC04(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[IDSPairingManager sharedInstance](&OBJC_CLASS___IDSPairingManager, "sharedInstance"));
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v3 pairedDeviceUUIDString]);
  [v1 obliterateConnectionInfoForCBUUID:v2];
}

id sub_10032FC5C(uint64_t a1)
{
  return [*(id *)(a1 + 32) startControlChannelWithDevice:*(void *)(a1 + 40) endpoint:0];
}

void sub_10032FC6C(uint64_t a1, char a2, uint64_t a3)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v7 = WeakRetained;
  if (!a3 && (a2 & 1) == 0 && WeakRetained)
  {
    id v8 = WeakRetained;
    [*(id *)(a1 + 32) startControlChannelWithDevice:WeakRetained endpoint:0];
    uint64_t v7 = v8;
  }
}

void sub_10032FCD0(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  if (!v5 && (a2 & 1) == 0)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));

    id v5 = 0LL;
    if (WeakRetained)
    {
      id v7 = objc_loadWeakRetained((id *)(a1 + 40));
      [*(id *)(a1 + 32) startControlChannelWithDevice:v7 endpoint:0];

      id v5 = 0LL;
    }
  }
}

id sub_100330000(uint64_t a1)
{
  uint64_t v2 = -[IDSLinkManager initWithDelegate:]( objc_alloc(&OBJC_CLASS___IDSLinkManager),  "initWithDelegate:",  *(void *)(a1 + 32));
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 96);
  *(void *)(v3 + 96) = v2;

  [*(id *)(*(void *)(a1 + 32) + 96) setRequireBT:*(unsigned __int8 *)(a1 + 40)];
  return [*(id *)(*(void *)(a1 + 32) + 96) start];
}

void sub_1003301BC(uint64_t a1, void *a2, __CFError *a3)
{
  id v5 = a2;
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 40);
    *(_DWORD *)__int128 buf = 134218754;
    id v18 = v5;
    __int16 v19 = 2112;
    id v20 = v5;
    __int16 v21 = 2112;
    id v22 = a3;
    __int16 v23 = 2080;
    uint64_t v24 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "nw_service_connector_start_request returned connection(%p) %@ error %@ for %s",  buf,  0x2Au);
  }

  if (!a3) {
    goto LABEL_8;
  }
  int Code = CFErrorGetCode(a3);
  if (Code != 36)
  {
    if (Code == 17)
    {
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        id v10 = "nw_service_connector_start_request returned EEXIST - exit";
LABEL_11:
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v10, buf, 2u);
        goto LABEL_12;
      }

      goto LABEL_12;
    }

uint64_t sub_1003303B4(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void, void, uint64_t, void, void, void))(a1[6] + 16LL))( a1[6],  0LL,  0LL,  0LL,  0LL,  0xFFFFFFFFLL,  0LL,  a1[4],  a1[5]);
}

void sub_100330EA0(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    uint64_t v13 = 0LL;
    id v14 = &v13;
    uint64_t v15 = 0x2020000000LL;
    char v16 = 0;
    uint64_t v7 = _NSConcreteStackBlock;
    id v9 = sub_10033102C;
    id v10 = &unk_1009017E8;
    uint64_t v3 = *(void **)(a1 + 40);
    uint64_t v4 = *(void *)(a1 + 32) + 8LL;
    uint64_t v8 = 3221225472LL;
    id v11 = v3;
    uint64_t v12 = &v13;
    sub_1003BBD80(v4, (uint64_t)&v7);
    if (*((_BYTE *)v14 + 24))
    {
      id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog utunController]( &OBJC_CLASS___IDSFoundationLog,  "utunController",  v7,  v8,  v9,  v10));
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8LL);
        *(_DWORD *)__int128 buf = 138412546;
        uint64_t v18 = v6;
        __int16 v19 = 1024;
        int v20 = dword_1009B87C8;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "UTunController calling startControlChannelWithDevice for [%@] after %d seconds",  buf,  0x12u);
      }

      [*(id *)(a1 + 32) startControlChannelWithDevice:*(void *)(a1 + 40) endpoint:0];
    }

    _Block_object_dispose(&v13, 8);
  }

void sub_100331008( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_10033102C(uint64_t result, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  if (*(void *)(result + 32) == a3)
  {
    *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = 1;
    *a4 = 1;
  }

  return result;
}

void sub_1003318B8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void *a9)
{
  id v11 = *(void **)(a1 + 32);
  uint64_t v12 = *(void *)(a1 + 40);
  uint64_t v13 = *(void *)(a1 + 48);
  id v14 = a9;
  id v15 = a8;
  [v11 prepareControlChannelForDeviceConnectionInfo:v12 genericConnection:v13];
  [*(id *)(a1 + 32) didConnectControlChannelForDeviceConnectionInfo:*(void *)(a1 + 40) connection:v15 error:v14];
}

void sub_100331934( id *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  id v11 = a9;
  uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([a1[4] cbuuid]);
    *(_DWORD *)__int128 buf = 138412290;
    __int16 v23 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "startControlChannelWithDevice - waiting for connect ready for %@",  buf,  0xCu);
  }

  [a1[5] setSdNumberNoClose:a6];
  [a1[6] prepareControlChannelForDeviceConnectionInfo:a1[4] genericConnection:a1[5]];
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472LL;
  v17[2] = sub_100331A98;
  void v17[3] = &unk_1008F9060;
  int v21 = a6;
  id v14 = a1[4];
  id v15 = a1[6];
  id v18 = v14;
  id v19 = v15;
  id v20 = v11;
  id v16 = v11;
  IDSTransportThreadAddSocket(a6, 0LL, v17);
}

void sub_100331A98(uint64_t a1)
{
  socklen_t v20 = 4;
  int __errnum = 0;
  int v2 = getsockopt(*(_DWORD *)(a1 + 56), 0xFFFF, 4103, &__errnum, &v20);
  uint64_t v3 = OSLogHandleForTransportCategory("UTun-oversized");
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(a1 + 56);
    if (v2) {
      int v6 = -1;
    }
    else {
      int v6 = __errnum;
    }
    if (v2)
    {
      uint64_t v7 = "unknown";
    }

    else if (__errnum)
    {
      uint64_t v7 = strerror(__errnum);
    }

    else
    {
      uint64_t v7 = "no error";
    }

    uint64_t v8 = *(void *)(a1 + 32);
    *(_DWORD *)__int128 buf = 67109890;
    int v23 = v5;
    __int16 v24 = 1024;
    *(_DWORD *)uint64_t v25 = v6;
    *(_WORD *)&v25[4] = 2080;
    *(void *)&v25[6] = v7;
    __int16 v26 = 2114;
    uint64_t v27 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "legacy control channel connect ready {socket:%d}, socket error: %d (%s), device[%{public}@]",  buf,  0x22u);
  }

  uint64_t v10 = os_log_shim_legacy_logging_enabled(v9);
  if ((_DWORD)v10 && _IDSShouldLogTransport(v10))
  {
    if (!v2 && __errnum) {
      strerror(__errnum);
    }
    _IDSLogTransport( @"UTun-oversized",  @"IDS",  @"legacy control channel connect ready {socket:%d}, socket error: %d (%s), device[%{public}@]");
    if (_IDSShouldLog(0LL, @"UTun-oversized"))
    {
      if (!v2)
      {
        if (__errnum) {
          strerror(__errnum);
        }
      }

      _IDSLogV( 0LL,  @"IDSFoundation",  @"UTun-oversized",  @"legacy control channel connect ready {socket:%d}, socket error: %d (%s), device[%{public}@]");
    }
  }

  if (v2)
  {
    int __errnum = *__error();
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = __errnum;
      uint64_t v13 = strerror(__errnum);
      *(_DWORD *)__int128 buf = 67109378;
      int v23 = v12;
      __int16 v24 = 2080;
      *(void *)uint64_t v25 = v13;
      id v14 = "getsockopt failed %d / %s";
LABEL_27:
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v14, buf, 0x12u);
      goto LABEL_28;
    }

    goto LABEL_28;
  }

  if (__errnum)
  {
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      int v15 = __errnum;
      id v16 = strerror(__errnum);
      *(_DWORD *)__int128 buf = 67109378;
      int v23 = v15;
      __int16 v24 = 2080;
      *(void *)uint64_t v25 = v16;
      id v14 = "socket error %d / %s";
      goto LABEL_27;
    }

uint64_t sub_100332C94(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void, void, uint64_t, void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  0LL,  0LL,  0LL,  0LL,  0xFFFFFFFFLL,  0LL,  0LL,  *(void *)(a1 + 32));
}

LABEL_241:
        int v15 = 1;
        goto LABEL_242;
      }

      id v19 = 6;
    }

    else
    {
      id v19 = 17;
    }

    xpc_object_t v181 = v19;
    if ((v17 & 0x80) == 0)
    {
      oslog = 0LL;
      __int16 v190 = (int8x16_t *)(var0 + 1);
      v189 = var2 - 1;
      uint64_t v179 = bswap32(*(unsigned __int16 *)(var0 + 1)) >> 16;
      v180 = __rev16(*(unsigned __int16 *)(var0 + 3));
      id v182 = 43690;
      id v178 = 0xAAAAAAAAAAAAAAAALL;
      goto LABEL_27;
    }

    if (logPackets)
    {
      if (var2 >= 0x14) {
        uint64_t v25 = 20LL;
      }
      else {
        uint64_t v25 = var2;
      }
      oslog = (os_log_s *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", var0, v25));
      __int16 v26 = var2;
      if ((v17 & 0x10) == 0) {
        goto LABEL_40;
      }
    }

    else
    {
      oslog = 0LL;
      __int16 v26 = 0xAAAAAAAAAAAAAAAALL;
      if ((v17 & 0x10) == 0)
      {
LABEL_40:
        id v178 = v26;
        id v182 = *var0 & 0xF;
        uint64_t v27 = -1;
        uint64_t v28 = 1LL;
LABEL_67:
        __int16 v190 = (int8x16_t *)&var0[v28];
        v189 = v27 + var2;
        if (v16)
        {
          __int128 v185 = v16;
          uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([v16 compressionInfo]);
          uint64_t v34 = [v33 remoteCID];

          if (v34 != v182)
          {
            uint64_t v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
            if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDeviceConnectionInfo vifName](v8, "vifName"));
              unsigned int v37 = (void *)objc_claimAutoreleasedReturnValue([v185 compressionInfo]);
              *(_DWORD *)__int128 buf = 138412802;
              *(void *)&uint8_t buf[4] = v36;
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&_BYTE buf[14] = [v37 remoteCID];
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v182;
              _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEFAULT,  "%@: found connection with mismatched (remoteCID 0x%04x != remoteCID 0x%04x)",  buf,  0x18u);
            }

            goto LABEL_241;
          }
        }

        else
        {
          *(void *)__int128 buf = 0LL;
          *(void *)&uint8_t buf[8] = buf;
          *(void *)&uint8_t buf[16] = 0x3032000000LL;
          *(void *)&_BYTE buf[24] = sub_100334B1C;
          *(void *)&_BYTE buf[32] = sub_100334B2C;
          *(void *)&buf[40] = 0LL;
          v187[0] = _NSConcreteStackBlock;
          v187[1] = 3221225472LL;
          v187[2] = sub_100334B34;
          v187[3] = &unk_100901838;
          v188 = v182;
          v187[4] = buf;
          sub_1003BB694( (uint64_t)-[IDSDeviceConnectionInfo connectionsTableByLocalRemotePortKey]( v8,  "connectionsTableByLocalRemotePortKey"),  (uint64_t)v187);
          uint64_t v38 = *(double **)(*(void *)&buf[8] + 40LL);
          __int128 v185 = v38;
          if (v38)
          {
            unint64_t v39 = v38;
          }

          else
          {
            uint64_t v90 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
            if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
            {
              id v91 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDeviceConnectionInfo vifName](v8, "vifName"));
              *(_DWORD *)id v199 = 138412546;
              id v200 = v91;
              uint64_t v201 = 1024;
              v202 = v182;
              _os_log_impl( (void *)&_mh_execute_header,  v90,  OS_LOG_TYPE_DEFAULT,  "%@: failed to resolve connection for remoteCID 0x%04x",  v199,  0x12u);
            }

            uint64_t v38 = 0LL;
          }

          _Block_object_dispose(buf, 8);

          if (!v38) {
            goto LABEL_164;
          }
        }

        uint64_t v92 = (void *)objc_claimAutoreleasedReturnValue([v185 compressionInfo]);
        id v93 = [v92 remoteContext] == 0;

        if (v93)
        {
          __int16 v62 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
          if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
          {
            id v97 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDeviceConnectionInfo vifName](v8, "vifName"));
            uint64_t v98 = (void *)objc_claimAutoreleasedReturnValue([v185 compressionInfo]);
            uint64_t v99 = [v98 remoteCID];
            *(_DWORD *)__int128 buf = 138412546;
            *(void *)&uint8_t buf[4] = v97;
            *(_WORD *)&_BYTE buf[12] = 1024;
            *(_DWORD *)&_BYTE buf[14] = v99;
            _os_log_impl( (void *)&_mh_execute_header,  v62,  OS_LOG_TYPE_DEFAULT,  "%@: remoteContext is nil for remoteCID %d, decompression failed.",  buf,  0x12u);
          }

          goto LABEL_115;
        }

        int v94 = (void *)objc_claimAutoreleasedReturnValue([v185 compressionInfo]);
        __int16 v95 = IDSHC_DecompressSimple(&v190, &v189, [v94 remoteContext]);

        if (v95)
        {
          int v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
            __int16 v96 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDeviceConnectionInfo vifName](v8, "vifName"));
            *(_DWORD *)__int128 buf = 138412546;
            *(void *)&uint8_t buf[4] = v96;
            *(_WORD *)&_BYTE buf[12] = 2048;
            *(void *)&_BYTE buf[14] = v95;
            _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "%@: IDSHC_DecompressSimple failed (%lu)",  buf,  0x16u);
          }

          goto LABEL_156;
        }

        uint64_t v101 = (void *)objc_claimAutoreleasedReturnValue([v185 addressPair]);
        id v102 = (void *)objc_claimAutoreleasedReturnValue([v101 remoteAddress]);
        uint64_t v179 = [v102 saPortHostOrder];

        uint64_t v103 = (void *)objc_claimAutoreleasedReturnValue([v185 addressPair]);
        NSUInteger v104 = (void *)objc_claimAutoreleasedReturnValue([v103 localAddress]);
        v180 = [v104 saPortHostOrder];

        id v16 = v185;
LABEL_27:
        if (v18)
        {
          if (v189 <= 19)
          {
            __int128 v185 = v16;
            int v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
            if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)__int128 buf = 138412546;
              *(void *)&uint8_t buf[4] = v186;
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&_BYTE buf[14] = v189;
              _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "%@: incoming packet not enough bytes for TCP header %d",  buf,  0x12u);
            }

LABEL_156:
LABEL_157:
            int v15 = 0;
LABEL_242:

            __int16 v29 = v185;
            goto LABEL_243;
          }
        }

        else
        {
          if (v189 <= 7)
          {
            __int128 v185 = v16;
            int v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
            if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)__int128 buf = 138412546;
              *(void *)&uint8_t buf[4] = v186;
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&_BYTE buf[14] = v189;
              _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "%@: incoming packet not enough bytes for UDP header %d",  buf,  0x12u);
            }

            goto LABEL_156;
          }

          if (logPackets)
          {
            id v176 = mach_continuous_time() - v184;
            id v177 = 1;
            goto LABEL_60;
          }
        }

        id v177 = 0;
        id v176 = 0xAAAAAAAAAAAAAAAALL;
LABEL_60:
        if (!v16)
        {
          unsigned int v32 = sub_1003BB3A8( (uint64_t)-[IDSDeviceConnectionInfo connectionsTableByLocalRemotePortKey]( v8,  "connectionsTableByLocalRemotePortKey"),  v179 | (v180 << 16));
          id v16 = (double *)objc_claimAutoreleasedReturnValue(v32);
        }

        __int128 v185 = v16;
        if ((v17 & 0x80) != 0) {
          goto LABEL_76;
        }
        if (v18)
        {
        }

        else if (!udp6checksum(0LL, 0LL, v190, v189, v9))
        {
LABEL_76:
          if (v18)
          {
            if (logPackets)
            {
              uint64_t v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
              if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
              {
                id v174 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDeviceConnectionInfo vifName](v8, "vifName"));
                uint64_t v173 = v189;
                uint64_t v41 = v190->u8[13];
                if ((v41 & 2) != 0) {
                  id v42 = "S";
                }
                else {
                  id v42 = "";
                }
                id v43 = "R";
                if ((v41 & 4) == 0) {
                  id v43 = "";
                }
                uint64_t v171 = v43;
                v172 = v42;
                if ((v41 & 8) != 0) {
                  int v44 = "P";
                }
                else {
                  int v44 = "";
                }
                uint64_t v45 = ".";
                if ((v41 & 0x10) == 0) {
                  uint64_t v45 = "";
                }
                uint64_t v169 = v45;
                double v170 = v44;
                unsigned int v46 = (void *)objc_claimAutoreleasedReturnValue([v16 flagsString]);
                *(_DWORD *)__int128 buf = 138414850;
                *(void *)&uint8_t buf[4] = v174;
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&_BYTE buf[14] = v173;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v41;
                *(_WORD *)&_BYTE buf[24] = 2080;
                *(void *)&buf[26] = v172;
                *(_WORD *)&buf[34] = 2080;
                *(void *)&buf[36] = v171;
                *(_WORD *)&buf[44] = 2080;
                *(void *)&buf[46] = v170;
                *(_WORD *)double v192 = 2080;
                *(void *)&v192[2] = v169;
                LOWORD(v193) = 1024;
                *(_DWORD *)((char *)&v193 + 2) = v180;
                HIWORD(v193) = 1024;
                v194 = v179;
                __int128 v195 = 2112;
                __int128 v196 = v46;
                uint64_t v197 = 2048;
                v198 = v185;
                _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEFAULT,  "%@: Got TCP %dB (flags[%02X] [%s%s%s%s])) for %u <= %u (connection %@ (%p))",  buf,  0x60u);
              }

              id v16 = v185;
            }

            if (v16)
            {
              int v47 = (void *)objc_claimAutoreleasedReturnValue([v16 connectionID]);
              BOOL v48 = (void *)objc_claimAutoreleasedReturnValue([v47 service]);
              else {
                uint64_t v49 = 4;
              }
              v175 = v49;

              dispatch_block_t v50 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDeviceConnectionInfo remoteSA](v8, "remoteSA"));
              uint64_t v51 = (char *)[v50 sa6];
              id v52 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDeviceConnectionInfo localSA](v8, "localSA"));
              uint64_t v53 = (char *)[v52 sa6];
              tcp6checksum((int8x16_t *)(v51 + 8), (int8x16_t *)(v53 + 8), v190, v189);

              BOOL v54 = v189;
              id v55 = v190->u32[1];
              uint64_t v56 = (v190->u8[12] >> 2) & 0x3C;
              if (v56
                && self->_encryptionEnabled
                && (!*((_BYTE *)v185 + 4784) ? (id v57 = 1) : (id v57 = v15), (v57 & 1) == 0))
              {
                uint64_t v126 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog utunController]( &OBJC_CLASS___IDSFoundationLog,  "utunController"));
                if (os_log_type_enabled(v126, OS_LOG_TYPE_DEFAULT))
                {
                  __int16 v133 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDeviceConnectionInfo vifName](v8, "vifName"));
                  *(_DWORD *)__int128 buf = 138412290;
                  *(void *)&uint8_t buf[4] = v133;
                  _os_log_impl( (void *)&_mh_execute_header,  v126,  OS_LOG_TYPE_DEFAULT,  "%@: dropping TCP (unencrypted) - expect to be encrypted",  buf,  0xCu);
                }
              }

              else
              {
                id v58 = [v185 stateFlags];
                id v59 = v58;
                __int16 v60 = bswap32(v55);
                id v61 = (v60 + v54 - v56);
                if ((v190->i8[13] & 2) == 0)
                {
                  if ((v58 & 0x80) == 0)
                  {
                    __int16 v62 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog utunController]( &OBJC_CLASS___IDSFoundationLog,  "utunController"));
                    if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
                    {
                      int8x16_t v63 = objc_claimAutoreleasedReturnValue(-[IDSDeviceConnectionInfo vifName](v8, "vifName"));
                      id v64 = (void *)v63;
                      id v65 = v190->u8[13];
                      double v66 = "S";
                      if ((v65 & 2) == 0) {
                        double v66 = "";
                      }
                      id v67 = "R";
                      *(_DWORD *)__int128 buf = 138414338;
                      if ((v65 & 4) == 0) {
                        id v67 = "";
                      }
                      *(void *)&uint8_t buf[4] = v63;
                      *(_WORD *)&_BYTE buf[12] = 1024;
                      *(_DWORD *)&_BYTE buf[14] = v189;
                      if ((v65 & 8) != 0) {
                        int v68 = "P";
                      }
                      else {
                        int v68 = "";
                      }
                      *(_WORD *)&buf[18] = 1024;
                      *(_DWORD *)&buf[20] = v65;
                      if ((v65 & 0x10) != 0) {
                        socklen_t v69 = ".";
                      }
                      else {
                        socklen_t v69 = "";
                      }
                      *(_WORD *)&_BYTE buf[24] = 2080;
                      *(void *)&buf[26] = v66;
                      *(_WORD *)&buf[34] = 2080;
                      *(void *)&buf[36] = v67;
                      *(_WORD *)&buf[44] = 2080;
                      *(void *)&buf[46] = v68;
                      *(_WORD *)double v192 = 2080;
                      *(void *)&v192[2] = v69;
                      LOWORD(v193) = 1024;
                      *(_DWORD *)((char *)&v193 + 2) = v180;
                      HIWORD(v193) = 1024;
                      v194 = v179;
                      _os_log_impl( (void *)&_mh_execute_header,  v62,  OS_LOG_TYPE_DEFAULT,  "%@: dropping TCP (unexpected - no first packet) %dB (flags[%02X] [%s%s%s%s])) for %u <= %u",  buf,  0x4Cu);
                    }

LABEL_115:
                    goto LABEL_241;
                  }

                  if ((v59 & 0x100) != 0) {
                    goto LABEL_201;
                  }
                  [v185 setStateFlags:v59 | 0x100];
                  uint64_t v110 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog utunController]( &OBJC_CLASS___IDSFoundationLog,  "utunController"));
                  if (os_log_type_enabled(v110, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)__int128 buf = 138412290;
                    *(void *)&uint8_t buf[4] = v185;
                    _os_log_impl( (void *)&_mh_execute_header,  v110,  OS_LOG_TYPE_DEFAULT,  "Received the first data packet for %@",  buf,  0xCu);
                  }

                  uint64_t v111 = sub_100321AD8();
                  v185[609] = v111;
                  if (v111 != 0.0)
                  {
                    int v112 = (void *)objc_claimAutoreleasedReturnValue([v185 idsDeviceConnectionUUID]);
                    unsigned __int8 v113 = v112 == 0LL;

                    if (!v113)
                    {
                      id v114 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDeviceConnectionAWDMetrics sharedInstance]( &OBJC_CLASS___IDSDeviceConnectionAWDMetrics,  "sharedInstance"));
                      id v115 = v185[609];
                      int v116 = (void *)objc_claimAutoreleasedReturnValue([v185 idsDeviceConnectionUUID]);
                      [v114 setFirstPacketReceiveTime:v116 forConnectionUUID:v115];
                    }
                  }

                  if (!-[IDSDeviceConnectionInfo shouldUseIPsecLink](v8, "shouldUseIPsecLink")) {
                    goto LABEL_184;
                  }
                  goto LABEL_147;
                }

                if ((v58 & 0x80) == 0)
                {
                  [v185 setStateFlags:v58 | 0x80];
                  [v185 setFirstPacketReceiveTime:sub_100321AD8()];
                  [v185 setFirstIncomingSYNSequenceNumber:v60];
                  [v185 setExpectedNextIncomingSequenceNumber:(v61 + 1)];
                  if (!-[IDSDeviceConnectionInfo shouldUseIPsecLink](v8, "shouldUseIPsecLink"))
                  {
LABEL_184:
                    uint64_t v89 = -[IDSLinkManager currentLinkType:](self->_linkManager, "currentLinkType:", v8->_cbuuid);
                    goto LABEL_185;
                  }

LABEL_147:
                  uint64_t v89 = 5LL;
LABEL_185:
                  [v185 reportToAWD:v89 connectionType:v175 error:0];
LABEL_201:
                  __int128 v130 = 1.22978294e19;
                  if ((v190->i8[13] & 4) != 0)
                  {
                    __int16 v131 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog utunController]( &OBJC_CLASS___IDSFoundationLog,  "utunController"));
                    if (os_log_type_enabled(v131, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)__int128 buf = 138412290;
                      *(void *)&uint8_t buf[4] = v185;
                      _os_log_impl( (void *)&_mh_execute_header,  v131,  OS_LOG_TYPE_DEFAULT,  "Got reset for connection %@",  buf,  0xCu);
                    }

                    objc_msgSend(v185, "setStateFlags:", objc_msgSend(v185, "stateFlags") | 0x20);
                  }

                  uint64_t v132 = v184;
                  goto LABEL_220;
                }

                if (v180 != 1024
                  || (_DWORD)v60 == [v185 firstIncomingSYNSequenceNumber]
                  || (v190->i8[13] & 0x10) != 0)
                {
                  goto LABEL_201;
                }

                uint64_t v117 = v189;
                __int128 v118 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog utunController]( &OBJC_CLASS___IDSFoundationLog,  "utunController"));
                if (os_log_type_enabled(v118, OS_LOG_TYPE_DEFAULT))
                {
                  if (v117 >= 40) {
                    uint64_t v117 = 40;
                  }
                  cbuuid = v8->_cbuuid;
                  uint64_t v120 = objc_claimAutoreleasedReturnValue( +[NSData dataWithBytesNoCopy:length:freeWhenDone:]( &OBJC_CLASS___NSData,  "dataWithBytesNoCopy:length:freeWhenDone:",  v190,  v117,  0LL));
                  id v121 = (void *)v120;
                  *(_DWORD *)__int128 buf = 138412802;
                  if (v117 == v189) {
                    __int128 v122 = "";
                  }
                  else {
                    __int128 v122 = " ...";
                  }
                  *(void *)&uint8_t buf[4] = cbuuid;
                  *(_WORD *)&_BYTE buf[12] = 2112;
                  *(void *)&_BYTE buf[14] = v120;
                  *(_WORD *)&_BYTE buf[22] = 2080;
                  *(void *)&_BYTE buf[24] = v122;
                  _os_log_impl( (void *)&_mh_execute_header,  v118,  OS_LOG_TYPE_DEFAULT,  "Control channel reestablishment request from [%@]\n\t\t<= data[%@%s]",  buf,  0x20u);
                }

                -[IDSUTunController resetTCPConnection:forDeviceConnectionInfo:]( self,  "resetTCPConnection:forDeviceConnectionInfo:",  v185,  v8);
                id v123 = (void *)objc_claimAutoreleasedReturnValue( +[NSData dataWithBytes:length:]( &OBJC_CLASS___NSData,  "dataWithBytes:length:",  v190,  v189));
                -[IDSDeviceConnectionInfo setControlChannelCachedSYN:](v8, "setControlChannelCachedSYN:", v123);

                id v124 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDeviceConnectionInfo controlChannel](v8, "controlChannel"));
                [v124 setDidReceiveReestablishmentRequest:1];

                uint64_t v125 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDeviceConnectionInfo controlChannel](v8, "controlChannel"));
                [v125 setReestablishmentRequestReceiveTime:sub_100321AD8()];

                uint64_t v126 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog utunController]( &OBJC_CLASS___IDSFoundationLog,  "utunController"));
                if (os_log_type_enabled(v126, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v127 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDeviceConnectionInfo controlChannel](v8, "controlChannel"));
                  uint64_t v128 = [v127 didReceiveReestablishmentRequest];
                  __int128 v129 = @"NO";
                  if (v128) {
                    __int128 v129 = @"YES";
                  }
                  *(_DWORD *)__int128 buf = 138412290;
                  *(void *)&uint8_t buf[4] = v129;
                  _os_log_impl( (void *)&_mh_execute_header,  v126,  OS_LOG_TYPE_DEFAULT,  "Control channel setDidReceiveReestablishment %@ after reestablishment request",  buf,  0xCu);
                }
              }

LABEL_211:
              goto LABEL_241;
            }

            __int16 v76 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
            if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
            {
              __int16 v77 = objc_claimAutoreleasedReturnValue(-[IDSDeviceConnectionInfo vifName](v8, "vifName"));
              __int16 v78 = (void *)v77;
              __int16 v79 = v190->u8[13];
              uint64_t v80 = "S";
              if ((v79 & 2) == 0) {
                uint64_t v80 = "";
              }
              uint64_t v81 = "R";
              *(_DWORD *)__int128 buf = 138414338;
              if ((v79 & 4) == 0) {
                uint64_t v81 = "";
              }
              *(void *)&uint8_t buf[4] = v77;
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&_BYTE buf[14] = v189;
              if ((v79 & 8) != 0) {
                __int16 v82 = "P";
              }
              else {
                __int16 v82 = "";
              }
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v79;
              if ((v79 & 0x10) != 0) {
                uint64_t v83 = ".";
              }
              else {
                uint64_t v83 = "";
              }
              *(_WORD *)&_BYTE buf[24] = 2080;
              *(void *)&buf[26] = v80;
              *(_WORD *)&buf[34] = 2080;
              *(void *)&buf[36] = v81;
              *(_WORD *)&buf[44] = 2080;
              *(void *)&buf[46] = v82;
              *(_WORD *)double v192 = 2080;
              *(void *)&v192[2] = v83;
              LOWORD(v193) = 1024;
              *(_DWORD *)((char *)&v193 + 2) = v180;
              HIWORD(v193) = 1024;
              v194 = v179;
              _os_log_impl( (void *)&_mh_execute_header,  v76,  OS_LOG_TYPE_DEFAULT,  "%@: dropping TCP (no connection) %dB (flags[%02X] [%s%s%s%s])) for %u <= %u",  buf,  0x4Cu);
            }
          }

          else
          {
            if (v16)
            {
              if (!self->_encryptionEnabled || (!*((_BYTE *)v16 + 4784) ? (__int16 v70 = 1) : (__int16 v70 = v15), (v70 & 1) != 0))
              {
                int v71 = (void *)objc_claimAutoreleasedReturnValue([v16 readHandler]);

                if (v71)
                {
                  int v72 = &v190->i8[8];
                  __int16 v73 = v189 - 8LL;
                  a3->var1 = v73;
                  a3->var2 = v73;
                  a3->var0 = v72;
                  __int16 v74 = (void (**)(void, void))objc_claimAutoreleasedReturnValue([v185 readHandler]);
                  ((void (**)(void, $54F6A343B951227605E470F4B19DD8D1 *))v74)[2](v74, a3);

                  goto LABEL_241;
                }

                uint64_t v141 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDeviceConnectionInfo remoteSA](v8, "remoteSA"));
                __int16 v142 = (char *)[v141 sa6];
                uint64_t v143 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDeviceConnectionInfo localSA](v8, "localSA"));
                __int16 v144 = (char *)[v143 sa6];
                udp6checksum((int8x16_t *)(v142 + 8), (int8x16_t *)(v144 + 8), v190, v189, v145);

                if (logPackets)
                {
                  uint64_t v132 = mach_continuous_time();
                  __int128 v130 = (double)(v132 - v184);
                }

                else
                {
                  __int128 v130 = 1.22978294e19;
                  uint64_t v132 = v184;
                }

                kdebug_trace(722010188LL, 0LL, 0LL, 0LL, 0LL);
LABEL_220:
                if (v8->_utunChannel)
                {
                  id v146 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDeviceConnectionInfo remoteSA](v8, "remoteSA"));
                  uint64_t v147 = [v146 sa];
                  id v148 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDeviceConnectionInfo localSA](v8, "localSA"));
                  uint64_t v149 = [v148 sa];
                  double v150 = -[IDSUTunController handleUtunChannelWrite:source:destination:upperProtocol:bytes:bytesLen:]( self,  "handleUtunChannelWrite:source:destination:upperProtocol:bytes:bytesLen:",  v8,  v147,  v149,  v181,  v190,  v189);
                }

                else
                {
                  uint64_t v151 = -[IDSDeviceConnectionInfo vifRef](v8, "vifRef");
                  id v146 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDeviceConnectionInfo remoteSA](v8, "remoteSA"));
                  id v152 = [v146 sa];
                  id v148 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDeviceConnectionInfo localSA](v8, "localSA"));
                  uint64_t v153 = [v148 sa];
                  double v150 = NEVirtualInterfaceWriteIPPayload(v151, v152, v153, v181, v190, v189);
                }

                uint64_t v154 = v150;

                if (v177)
                {
                  uint64_t v155 = mach_continuous_time();
                  uint64_t v156 = (void *)qword_1009C7520;
                  __int16 v157 = (void *)objc_claimAutoreleasedReturnValue( +[IDSUTunTimingLogger incomingEventWithTimestamp:duration:processTime:compressionTime:kernelTime:bytes:]( &OBJC_CLASS___IDSUTunTimingLogger,  "incomingEventWithTimestamp:duration:processTime:compressionTime:kernelTime:bytes:",  var2 - 8,  *(double *)&qword_1009C0B68 * (double)v155,  *(double *)&qword_1009C0B68 * (double)(v155 - v184),  v130 * *(double *)&qword_1009C0B68,  *(double *)&qword_1009C0B68 * (double)v176,  *(double *)&qword_1009C0B68 * (double)(v155 - v132)));
                  [v156 addEvent:v157];
                }

                if (logPackets)
                {
                  if ((v17 & 0x80) != 0)
                  {
                    uint64_t v158 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog utunController]( &OBJC_CLASS___IDSFoundationLog,  "utunController"));
                    if (os_log_type_enabled(v158, OS_LOG_TYPE_DEFAULT))
                    {
                      __int16 v159 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDeviceConnectionInfo vifName](v8, "vifName"));
                      uint64_t v160 = " ...";
                      *(_DWORD *)__int128 buf = 138414338;
                      *(void *)&uint8_t buf[4] = v159;
                      *(_WORD *)&_BYTE buf[12] = 1024;
                      if (v178 < 0x15) {
                        uint64_t v160 = "";
                      }
                      *(_DWORD *)&_BYTE buf[14] = 1;
                      *(_WORD *)&buf[18] = 1024;
                      *(_DWORD *)&buf[20] = v182;
                      *(_WORD *)&_BYTE buf[24] = 1024;
                      *(_DWORD *)&buf[26] = v181;
                      *(_WORD *)&buf[30] = 1024;
                      *(_DWORD *)&_BYTE buf[32] = v179;
                      *(_WORD *)&buf[36] = 1024;
                      *(_DWORD *)&buf[38] = v180;
                      *(_WORD *)&buf[42] = 2048;
                      *(void *)&buf[44] = v178;
                      *(_WORD *)&buf[52] = 2112;
                      *(void *)double v192 = oslog;
                      *(_WORD *)&v192[8] = 2080;
                      __int128 v193 = v160;
                      _os_log_impl( (void *)&_mh_execute_header,  v158,  OS_LOG_TYPE_DEFAULT,  "%@: incoming data - compressed: %d(cid:%u) protocol:%d s_port:%u d_port:%u.\n \t\t<= c(%luB): [%@%s]",  buf,  0x48u);
                    }
                  }

                  __int16 v161 = v189;
                  v162 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog utunController]( &OBJC_CLASS___IDSFoundationLog,  "utunController"));
                  if (os_log_type_enabled(v162, OS_LOG_TYPE_DEFAULT))
                  {
                    if (v161 >= 40) {
                      __int16 v161 = 40;
                    }
                    __int16 v163 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDeviceConnectionInfo vifName](v8, "vifName"));
                    v164 = [v185 expectedNextIncomingSequenceNumber];
                    __int16 v165 = objc_claimAutoreleasedReturnValue( +[NSData dataWithBytesNoCopy:length:freeWhenDone:]( &OBJC_CLASS___NSData,  "dataWithBytesNoCopy:length:freeWhenDone:",  v190,  v161,  0LL));
                    v166 = (void *)v165;
                    *(_DWORD *)__int128 buf = 138414082;
                    if (v161 == v189) {
                      id v167 = "";
                    }
                    else {
                      id v167 = " ...";
                    }
                    *(void *)&uint8_t buf[4] = v163;
                    *(_WORD *)&_BYTE buf[12] = 1024;
                    *(_DWORD *)&_BYTE buf[14] = v181;
                    *(_WORD *)&buf[18] = 1024;
                    *(_DWORD *)&buf[20] = v180;
                    *(_WORD *)&_BYTE buf[24] = 1024;
                    *(_DWORD *)&buf[26] = v179;
                    *(_WORD *)&buf[30] = 1024;
                    *(_DWORD *)&_BYTE buf[32] = v154;
                    *(_WORD *)&buf[36] = 1024;
                    *(_DWORD *)&buf[38] = v164;
                    *(_WORD *)&buf[42] = 2112;
                    *(void *)&buf[44] = v165;
                    *(_WORD *)&buf[52] = 2080;
                    *(void *)double v192 = v167;
                    _os_log_impl( (void *)&_mh_execute_header,  v162,  OS_LOG_TYPE_DEFAULT,  "%@: write ippayload (proto=%u) %u <= %u neRet=%d niseq:%08x\n\t\t<= data[%@%s]",  buf,  0x3Eu);
                  }
                }

                objc_msgSend(v185, "setPacketsReceived:", (char *)objc_msgSend(v185, "packetsReceived") + 1);
                objc_msgSend(v185, "setBytesReceived:", (char *)objc_msgSend(v185, "bytesReceived") + a3->var2);
                goto LABEL_241;
              }

              uint64_t v126 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
              if (os_log_type_enabled(v126, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v134 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDeviceConnectionInfo vifName](v8, "vifName"));
                *(_DWORD *)__int128 buf = 138413058;
                *(void *)&uint8_t buf[4] = v134;
                *(_WORD *)&_BYTE buf[12] = 1024;
                *(_DWORD *)&_BYTE buf[14] = v189;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v180;
                *(_WORD *)&_BYTE buf[24] = 1024;
                *(_DWORD *)&buf[26] = v179;
                _os_log_impl( (void *)&_mh_execute_header,  v126,  OS_LOG_TYPE_DEFAULT,  "%@: dropping UDP (unencrypted) %dB for %u <= %u",  buf,  0x1Eu);
              }

              goto LABEL_211;
            }

            __int16 v76 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
            if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
            {
              int v100 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDeviceConnectionInfo vifName](v8, "vifName"));
              *(_DWORD *)__int128 buf = 138413058;
              *(void *)&uint8_t buf[4] = v100;
              *(_WORD *)&_BYTE buf[12] = 1024;
              *(_DWORD *)&_BYTE buf[14] = v189;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v180;
              *(_WORD *)&_BYTE buf[24] = 1024;
              *(_DWORD *)&buf[26] = v179;
              _os_log_impl( (void *)&_mh_execute_header,  v76,  OS_LOG_TYPE_DEFAULT,  "%@: dropping UDP (no connection) %dB for %u <= %u",  buf,  0x1Eu);
            }
          }

LABEL_164:
          __int128 v185 = 0LL;
          goto LABEL_241;
        }

        [v16 setChecksumFailed:1];
        if ((-[IDSDeviceConnectionInfo capabilityFlags](v8, "capabilityFlags") & 0x80) != 0)
        {
          int v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
            __int16 v75 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDeviceConnectionInfo vifName](v8, "vifName"));
            *(_DWORD *)__int128 buf = 138412546;
            *(void *)&uint8_t buf[4] = v75;
            *(_WORD *)&_BYTE buf[12] = 2112;
            *(void *)&_BYTE buf[14] = v185;
            _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "%@: checksum failed for connection %@",  buf,  0x16u);
          }

          goto LABEL_156;
        }

        goto LABEL_76;
      }
    }

    if (var2 <= 2)
    {
      __int128 v185 = v16;
      uint64_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412546;
        *(void *)&uint8_t buf[4] = v186;
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&_BYTE buf[14] = var2;
        _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "%@: incoming packet not enough bytes for largeCID %d",  buf,  0x12u);
      }

      goto LABEL_157;
    }

    id v178 = v26;
    id v182 = bswap32(*(unsigned __int16 *)(var0 + 1)) >> 16;
    uint64_t v27 = -3;
    uint64_t v28 = 3LL;
    goto LABEL_67;
  }

  socklen_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412546;
    *(void *)&uint8_t buf[4] = v186;
    *(_WORD *)&_BYTE buf[12] = 1024;
    *(_DWORD *)&_BYTE buf[14] = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "%@: incoming packet not enough bytes to parse %d",  buf,  0x12u);
  }

  int v15 = 0;
LABEL_244:

  return v15;
}

void sub_100334AF4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, char a33)
{
}

uint64_t sub_100334B1C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100334B2C(uint64_t a1)
{
}

void sub_100334B34(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  id v10 = a3;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v10 compressionInfo]);
  unsigned int v8 = [v7 remoteCID];
  int v9 = *(unsigned __int16 *)(a1 + 40);

  if (v8 == v9)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL), a3);
    *a4 = 1;
  }
}

NSMutableData *sub_100335BE0(unsigned int a1, id a2, void *a3, void *a4, void *a5, void *a6)
{
  id v10 = a2;
  id v11 = a6;
  id v12 = a5;
  id v13 = a4;
  id v14 = a3;
  uint64_t v28 = (const char *)[v10 UTF8String];
  LODWORD(a4) = strlen(v28);
  id v15 = v14;
  id v16 = (const char *)[v15 UTF8String];

  LODWORD(v15) = strlen(v16);
  id v17 = v13;
  id v18 = (const char *)[v17 UTF8String];

  unsigned int v19 = strlen(v18);
  id v20 = v12;
  int v21 = (const char *)[v20 UTF8String];

  unsigned int v22 = strlen(v21);
  id v23 = v11;
  __int16 v24 = (const char *)[v23 UTF8String];

  unsigned int v25 = strlen(v24);
  LOWORD(v23) = v25;
  char v31 = 5;
  __int16 v32 = bswap32(a4) >> 16;
  __int16 v33 = bswap32(v15) >> 16;
  __int16 v34 = bswap32(v19) >> 16;
  __int16 v35 = bswap32(v22) >> 16;
  __int16 v36 = bswap32(v25) >> 16;
  __int16 v30 = __rev16(a1);
  __int16 v26 = objc_alloc_init(&OBJC_CLASS___NSMutableData);
  -[NSMutableData appendBytes:length:](v26, "appendBytes:length:", &v31, 11LL);
  -[NSMutableData appendBytes:length:](v26, "appendBytes:length:", &v30, 2LL);
  -[NSMutableData appendBytes:length:](v26, "appendBytes:length:", v28, (unsigned __int16)a4);
  -[NSMutableData appendBytes:length:](v26, "appendBytes:length:", v16, (unsigned __int16)v15);
  -[NSMutableData appendBytes:length:](v26, "appendBytes:length:", v18, (unsigned __int16)v19);
  -[NSMutableData appendBytes:length:](v26, "appendBytes:length:", v21, (unsigned __int16)v22);
  -[NSMutableData appendBytes:length:](v26, "appendBytes:length:", v24, (unsigned __int16)v23);
  return v26;
}