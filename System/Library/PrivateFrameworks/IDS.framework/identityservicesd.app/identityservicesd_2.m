LABEL_330:
              goto LABEL_331;
            }

            if (v94 && v195)
            {
              v205 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s localConnectionGUID](v195, "localConnectionGUID"));
              v206 = [v205 isEqualToString:v94];

              if ((v206 & 1) == 0)
              {
                v207 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog utunController]( &OBJC_CLASS___IDSFoundationLog,  "utunController"));
                if (os_log_type_enabled(v207, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl( (void *)&_mh_execute_header,  v207,  OS_LOG_TYPE_DEFAULT,  "control message not for current connection - assume local is current for now (message is old) and se nd CloseChannel for remote attempt",  buf,  2u);
                }

                v208 = (void *)objc_claimAutoreleasedReturnValue([v393 controlChannel]);
                v209 = sub_10032ED20(0LL, v76, v377, v374, v141);
                v210 = (void *)objc_claimAutoreleasedReturnValue(v209);
                [v208 sendMessage:v210];

                goto LABEL_330;
              }
            }

            else if (!v195)
            {
              goto LABEL_285;
            }

            v241 = (void *)objc_claimAutoreleasedReturnValue( -[os_log_s localConnectionGUID]( v195,  "localConnectionGUID",  v328,  v345,  v346,  v347,  v348,  v349,  v350,  v351,  v352,  v353,  v354));
            if (-[NSString isEqualToString:](v94, "isEqualToString:", v241))
            {
              v242 = (-[os_log_s stateFlags](v195, "stateFlags") & 8) == 0;

              if (!v242)
              {
                v243 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog utunController]( &OBJC_CLASS___IDSFoundationLog,  "utunController"));
                if (os_log_type_enabled(v243, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl( (void *)&_mh_execute_header,  v243,  OS_LOG_TYPE_DEFAULT,  "control message repeated for current connection - assume local is current and remote reconciled",  buf,  2u);
                }

                goto LABEL_330;
              }
            }

            else
            {
            }

            if ((-[os_log_s stateFlags](v195, "stateFlags") & 8) == 0)
            {
              v244 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s localConnectionGUID](v195, "localConnectionGUID"));
              v245 = [v244 compare:v76] == (id)1;

              if (v245)
              {
                v246 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog utunController]( &OBJC_CLASS___IDSFoundationLog,  "utunController"));
                if (os_log_type_enabled(v246, OS_LOG_TYPE_DEFAULT))
                {
                  v247 = (void *)objc_claimAutoreleasedReturnValue([v393 vifName]);
                  v248 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s localConnectionGUID](v195, "localConnectionGUID"));
                  *(_DWORD *)buf = 138412546;
                  v401 = v247;
                  v402 = 2112;
                  *(void *)v403 = v248;
                  _os_log_impl( (void *)&_mh_execute_header,  v246,  OS_LOG_TYPE_DEFAULT,  "%@: found connection [%@] - remote wins",  buf,  0x16u);
                }

                v249 = [v393 portMap];
                v250 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s addressPair](v195, "addressPair"));
                v251 = (void *)objc_claimAutoreleasedReturnValue([v250 localAddress]);
                -[IDSUTunController releasePortIfNecessary:port:]( v390,  "releasePortIfNecessary:port:",  v249,  [v251 saPortHostOrder]);

                -[os_log_s setAddressPair:](v195, "setAddressPair:", v369);
              }

              goto LABEL_288;
            }

            v255 = [v393 portMap];
            v256 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s addressPair](v195, "addressPair"));
            v257 = (void *)objc_claimAutoreleasedReturnValue([v256 localAddress]);
            -[IDSUTunController releasePortIfNecessary:port:]( v390,  "releasePortIfNecessary:port:",  v255,  [v257 saPortHostOrder]);

            -[IDSUTunController removeConnection:fromDeviceConnectionInfo:removeCode:removeReason:]( v390,  "removeConnection:fromDeviceConnectionInfo:removeCode:removeReason:",  v195,  v393,  5050LL,  @"stale connection");
            -[IDSUTunController checkSuspendTrafficForDevice:wait:]( v390,  "checkSuspendTrafficForDevice:wait:",  v393,  1LL);
LABEL_285:
            v195 = -[IDSGenericConnection initWithConnectionID:protocol:isCloudEnabled:]( objc_alloc(&OBJC_CLASS___IDSGenericConnection),  "initWithConnectionID:protocol:isCloudEnabled:",  v372,  v384,  0LL);
            v258 = (void *)objc_claimAutoreleasedReturnValue([v393 cbuuid]);
            -[os_log_s setIsDefaultPairedDevice:]( v195,  "setIsDefaultPairedDevice:",  [v258 isEqualToString:kIDSDefaultPairedDeviceID]);

            -[os_log_s setAddressPair:](v195, "setAddressPair:", v369);
            v259 = (void *)objc_claimAutoreleasedReturnValue([v393 connectionsByID]);
            [v259 setObject:v195 forKey:v372];

            v260 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
            if (os_log_type_enabled(v260, OS_LOG_TYPE_DEFAULT))
            {
              v261 = (void *)objc_claimAutoreleasedReturnValue([v393 vifName]);
              v262 = objc_claimAutoreleasedReturnValue(-[os_log_s localConnectionGUID](v195, "localConnectionGUID"));
              v263 = [v262 UTF8String];
              *(_DWORD *)buf = 138413058;
              v401 = v261;
              v402 = 1024;
              *(_DWORD *)v403 = (_DWORD)v197;
              *(_WORD *)&v403[4] = 1024;
              *(_DWORD *)&v403[6] = (_DWORD)v366;
              *(_WORD *)&v403[10] = 2080;
              *(void *)&v403[12] = v263;
              _os_log_impl( (void *)&_mh_execute_header,  v260,  OS_LOG_TYPE_DEFAULT,  "%@: send setup channel message ports[%u:::%u] guid[%s]",  buf,  0x22u);
            }

            v264 = (void *)objc_claimAutoreleasedReturnValue([v393 controlChannel]);
            v265 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s localConnectionGUID](v195, "localConnectionGUID"));
            v266 = sub_10033A8F0((char)v384, (__int16)v197, (__int16)v366, v265, v76, v377, v374, v141, v17 == 13, v363);
            v267 = (void *)objc_claimAutoreleasedReturnValue(v266);
            [v264 sendMessage:v267];

            -[os_log_s setStateFlags:]( v195,  "setStateFlags:",  -[os_log_s stateFlags](v195, "stateFlags") | 4);
            -[os_log_s setConnectionSetupStartTime:](v195, "setConnectionSetupStartTime:", sub_100321AD8());
LABEL_288:
            v268 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s addressPair](v195, "addressPair"));
            v269 = (void *)objc_claimAutoreleasedReturnValue([v268 localAddress]);
            v270 = [v269 saPortHostOrder];
            v271 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s addressPair](v195, "addressPair"));
            v272 = (void *)objc_claimAutoreleasedReturnValue([v271 remoteAddress]);
            -[os_log_s setUint32Key:]( v195,  "setUint32Key:",  (v270 << 16) | [v272 saPortHostOrder]);

            v273 = sub_1003BB3A8( (uint64_t)[v393 connectionsTableByLocalRemotePortKey],  (int)-[os_log_s uint32Key](v195, "uint32Key"));
            v274 = (void *)objc_claimAutoreleasedReturnValue(v273);
            v275 = v274;
            if (v274) {
              [v274 invalidate];
            }
            sub_1003BB0A4( (int *)[v393 connectionsTableByLocalRemotePortKey],  (int)-[os_log_s uint32Key](v195, "uint32Key"),  v195);
            -[os_log_s setStateFlags:]( v195,  "setStateFlags:",  -[os_log_s stateFlags](v195, "stateFlags") | 8);
            -[os_log_s setRemoteConnectionGUID:](v195, "setRemoteConnectionGUID:", v76);
            if (!v387) {
              goto LABEL_326;
            }
            -[os_log_s setDataProtectionClass:](v195, "setDataProtectionClass:", ~(_DWORD)v363 & 2);
            -[os_log_s setIsDirectMsgChannel:](v195, "setIsDirectMsgChannel:", 1LL);
            if ((v363 & 4) != 0)
            {
              v276 = 200LL;
            }

            else if ((v363 & 8) != 0)
            {
              v276 = 300LL;
            }

            else
            {
              if ((v363 & 0x10) == 0) {
                goto LABEL_326;
              }
              v276 = 100LL;
            }

            -[os_log_s setSocketTrafficClass:](v195, "setSocketTrafficClass:", v276);
LABEL_326:
            v324 = (void *)objc_claimAutoreleasedReturnValue([v372 serviceConnectorServiceForAccount]);
            -[IDSUTunController startDataChannelWithDevice:genericConnection:serviceConnectorService:endpoint:]( v390,  "startDataChannelWithDevice:genericConnection:serviceConnectorService:endpoint:",  v393,  v195,  v324,  0LL);
            if (v387 && [v392 isEqualToString:kIDSDefaultPairedDeviceID])
            {
              v325 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon daemon](&OBJC_CLASS___IDSDaemon, "daemon"));
              [v325 receivedDirectMsgSocketRequestForService:v374 stream:v141 flags:v363];
            }

            goto LABEL_330;
          }

          v94 = -[NSString initWithBytes:length:encoding:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithBytes:length:encoding:",  v93,  v89,  4LL);
          if (v94)
          {
            v93 += v89;
            goto LABEL_150;
          }

          v155 = OSLogHandleForTransportCategory("IDSNetworking");
          v156 = (os_log_s *)objc_claimAutoreleasedReturnValue(v155);
          if (os_log_type_enabled(v156, OS_LOG_TYPE_DEFAULT))
          {
            v157 = (void *)objc_claimAutoreleasedReturnValue([v393 vifName]);
            *(_DWORD *)buf = 138412290;
            v401 = v157;
            _os_log_impl( (void *)&_mh_execute_header,  v156,  OS_LOG_TYPE_DEFAULT,  "%@: UTCMType_SetupChannel cannot decode account",  buf,  0xCu);
          }

          v159 = os_log_shim_legacy_logging_enabled(v158);
          if ((_DWORD)v159)
          {
            if (_IDSShouldLogTransport(v159))
            {
              v334 = (void *)objc_claimAutoreleasedReturnValue([v393 vifName]);
              _IDSLogTransport( @"IDSNetworking",  @"IDS",  @"%@: UTCMType_SetupChannel cannot decode account");

              if (_IDSShouldLog(0LL, @"IDSNetworking"))
              {
                v94 = (NSString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v393, "vifName", v334));
                _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSNetworking",  @"%@: UTCMType_SetupChannel cannot decode account");
                goto LABEL_334;
              }
            }
          }
        }

        else
        {
          v123 = OSLogHandleForTransportCategory("IDSNetworking");
          v124 = (os_log_s *)objc_claimAutoreleasedReturnValue(v123);
          if (os_log_type_enabled(v124, OS_LOG_TYPE_DEFAULT))
          {
            v125 = (void *)objc_claimAutoreleasedReturnValue([v393 vifName]);
            *(_DWORD *)buf = 138412290;
            v401 = v125;
            _os_log_impl( (void *)&_mh_execute_header,  v124,  OS_LOG_TYPE_DEFAULT,  "%@: UTCMType_SetupChannel cannot decode remoteConnectionGUID",  buf,  0xCu);
          }

          v127 = os_log_shim_legacy_logging_enabled(v126);
          if ((_DWORD)v127)
          {
            if (_IDSShouldLogTransport(v127))
            {
              v329 = (void *)objc_claimAutoreleasedReturnValue([v393 vifName]);
              _IDSLogTransport( @"IDSNetworking",  @"IDS",  @"%@: UTCMType_SetupChannel cannot decode remoteConnectionGUID");

              if (_IDSShouldLog(0LL, @"IDSNetworking"))
              {
                v94 = (NSString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v393, "vifName", v329));
                _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSNetworking",  @"%@: UTCMType_SetupChannel cannot decode remoteConnectionGUID");
LABEL_334:
              }
            }
          }
        }

LABEL_335:
        goto LABEL_12;
      }

      v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        v19 = (void *)objc_claimAutoreleasedReturnValue([v393 vifName]);
        *(_DWORD *)buf = 138412290;
        v401 = v19;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "%@: UTCMType_SetupChannel insufficient header",  buf,  0xCu);
      }

LABEL_283:
LABEL_318:
LABEL_319:
          v216 = v361;
          goto LABEL_320;
        }
      }

      else
      {
      }

      if ((-[os_log_s stateFlags](v164, "stateFlags") & 8) == 0)
      {
        if (-[os_log_s keyMaterialLength](v164, "keyMaterialLength") != (_DWORD)v362)
        {
          v254 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
          if (os_log_type_enabled(v254, OS_LOG_TYPE_DEFAULT))
          {
            v326 = (void *)objc_claimAutoreleasedReturnValue([v393 vifName]);
            v327 = -[os_log_s keyMaterialLength](v164, "keyMaterialLength");
            *(_DWORD *)buf = 138412802;
            v401 = v326;
            v402 = 1024;
            *(_DWORD *)v403 = v327;
            *(_WORD *)&v403[4] = 1024;
            *(_DWORD *)&v403[6] = v362;
            _os_log_impl( (void *)&_mh_execute_header,  v254,  OS_LOG_TYPE_DEFAULT,  "%@: nonmatching key material length (local:%u remote:%u)",  buf,  0x18u);
          }

          goto LABEL_283;
        }

        v277 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s localConnectionGUID](v164, "localConnectionGUID"));
        v278 = [v277 compare:v76] == (id)1;

        if (v278)
        {
          v279 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
          if (os_log_type_enabled(v279, OS_LOG_TYPE_DEFAULT))
          {
            v280 = (void *)objc_claimAutoreleasedReturnValue([v393 vifName]);
            v281 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s localConnectionGUID](v164, "localConnectionGUID"));
            *(_DWORD *)buf = 138412546;
            v401 = v280;
            v402 = 2112;
            *(void *)v403 = v281;
            _os_log_impl( (void *)&_mh_execute_header,  v279,  OS_LOG_TYPE_DEFAULT,  "%@: found connection [%@] - remote wins",  buf,  0x16u);
          }

          v282 = [v393 portMap];
          v283 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s addressPair](v164, "addressPair"));
          v284 = (void *)objc_claimAutoreleasedReturnValue([v283 localAddress]);
          -[IDSUTunController releasePortIfNecessary:port:]( v390,  "releasePortIfNecessary:port:",  v282,  [v284 saPortHostOrder]);

          -[os_log_s setAddressPair:](v164, "setAddressPair:", v359);
        }

LABEL_311:
        -[os_log_s setSSRCRecv:](v164, "setSSRCRecv:", v365);
        -[os_log_s setSeqRecvStart:](v164, "setSeqRecvStart:", v368);
        v307 = -[os_log_s localKeyMaterial](v164, "localKeyMaterial");
        v308 = v362;
        v309 = (char *)&v162[v379];
        do
        {
          v310 = *v309++;
          *v307++ ^= v310;
          --v308;
        }

        while (v308);
        bzero(&v162[v379], v362);
        v311 = (void *)objc_claimAutoreleasedReturnValue([v393 controlChannelVersion]);
        v312 = [v311 intValue] == 1;

        if (!v312) {
          -[os_log_s setSrtpProtocolVersion:](v164, "setSrtpProtocolVersion:", 1LL);
        }
        v313 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s localConnectionGUID](v164, "localConnectionGUID"));
        v314 = [v313 compare:v76] == (id)1;

        sub_1001FCBA8( -[os_log_s encryptionState](v164, "encryptionState"),  (uint64_t)-[os_log_s localKeyMaterial](v164, "localKeyMaterial"),  (int)-[os_log_s keyMaterialLength](v164, "keyMaterialLength"),  v314,  (int)-[os_log_s SSRCSend](v164, "SSRCSend"),  (__int16)-[os_log_s seqSendStart](v164, "seqSendStart"),  (int)-[os_log_s SSRCRecv](v164, "SSRCRecv"),  (__int16)-[os_log_s seqRecvStart](v164, "seqRecvStart"),  (int)-[os_log_s srtpProtocolVersion](v164, "srtpProtocolVersion"));
        sub_1003BB0A4( (int *)[v393 incomingEncryptionTableBySSRC],  (int)-[os_log_s SSRCRecv](v164, "SSRCRecv"),  v164);
        v315 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s addressPair](v164, "addressPair"));
        v316 = (void *)objc_claimAutoreleasedReturnValue([v315 localAddress]);
        v317 = [v316 saPortHostOrder];
        v318 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s addressPair](v164, "addressPair"));
        v319 = (void *)objc_claimAutoreleasedReturnValue([v318 remoteAddress]);
        -[os_log_s setUint32Key:]( v164,  "setUint32Key:",  (v317 << 16) | [v319 saPortHostOrder]);

        v320 = sub_1003BB3A8( (uint64_t)[v393 connectionsTableByLocalRemotePortKey],  (int)-[os_log_s uint32Key](v164, "uint32Key"));
        v321 = (void *)objc_claimAutoreleasedReturnValue(v320);
        v322 = v321;
        if (v321) {
          [v321 invalidate];
        }
        sub_1003BB0A4( (int *)[v393 connectionsTableByLocalRemotePortKey],  (int)-[os_log_s uint32Key](v164, "uint32Key"),  v164);
        -[os_log_s setStateFlags:](v164, "setStateFlags:", -[os_log_s stateFlags](v164, "stateFlags") | 8);
        -[os_log_s setRemoteConnectionGUID:](v164, "setRemoteConnectionGUID:", v76);
        v323 = (void *)objc_claimAutoreleasedReturnValue([v360 serviceConnectorServiceForAccount]);
        -[IDSUTunController startDataChannelWithDevice:genericConnection:serviceConnectorService:endpoint:]( v390,  "startDataChannelWithDevice:genericConnection:serviceConnectorService:endpoint:",  v393,  v164,  v323,  0LL);

        goto LABEL_318;
      }

      v285 = [v393 portMap];
      v286 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s addressPair](v164, "addressPair"));
      v287 = (void *)objc_claimAutoreleasedReturnValue([v286 localAddress]);
      -[IDSUTunController releasePortIfNecessary:port:]( v390,  "releasePortIfNecessary:port:",  v285,  [v287 saPortHostOrder]);

      -[IDSUTunController removeConnection:fromDeviceConnectionInfo:removeCode:removeReason:]( v390,  "removeConnection:fromDeviceConnectionInfo:removeCode:removeReason:",  v164,  v393,  5050LL,  @"stale connection");
      -[IDSUTunController checkSuspendTrafficForDevice:wait:](v390, "checkSuspendTrafficForDevice:wait:", v393, 1LL);
LABEL_304:
      v164 = -[IDSGenericConnection initWithConnectionID:protocol:keyMaterialLength:isCloudEnabled:]( objc_alloc(&OBJC_CLASS___IDSGenericConnection),  "initWithConnectionID:protocol:keyMaterialLength:isCloudEnabled:",  v360,  v376,  v362,  0LL);
      v288 = (void *)objc_claimAutoreleasedReturnValue([v393 cbuuid]);
      -[os_log_s setIsDefaultPairedDevice:]( v164,  "setIsDefaultPairedDevice:",  [v288 isEqualToString:kIDSDefaultPairedDeviceID]);

      -[os_log_s setAddressPair:](v164, "setAddressPair:", v359);
      v289 = (void *)objc_claimAutoreleasedReturnValue([v393 connectionsByID]);
      [v289 setObject:v164 forKey:v360];

      do
      {
        v290 = arc4random();
        v291 = sub_1003BB3A8((uint64_t)[v393 outgoingEncryptionTableBySSRC], v290);
        v292 = (void *)objc_claimAutoreleasedReturnValue(v291);
        v293 = v292 == 0LL;
      }

      while (!v293);
      -[os_log_s setSSRCSend:](v164, "setSSRCSend:", v290);
      -[os_log_s setSeqSendStart:](v164, "setSeqSendStart:", (unsigned __int16)arc4random());
      -[os_log_s setSeqSend:](v164, "setSeqSend:", -[os_log_s seqSendStart](v164, "seqSendStart"));
      -[os_log_s setEncryptionEnabled:](v164, "setEncryptionEnabled:", 1LL);
      v294 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
      if (os_log_type_enabled(v294, OS_LOG_TYPE_DEFAULT))
      {
        v295 = (void *)objc_claimAutoreleasedReturnValue([v393 vifName]);
        v296 = objc_claimAutoreleasedReturnValue(-[os_log_s localConnectionGUID](v164, "localConnectionGUID"));
        v297 = [v296 UTF8String];
        v298 = -[os_log_s seqSendStart](v164, "seqSendStart");
        *(_DWORD *)buf = 138413570;
        v401 = v295;
        v402 = 1024;
        *(_DWORD *)v403 = (_DWORD)v358;
        *(_WORD *)&v403[4] = 1024;
        *(_DWORD *)&v403[6] = (_DWORD)v357;
        *(_WORD *)&v403[10] = 2080;
        *(void *)&v403[12] = v297;
        *(_WORD *)&v403[20] = 1024;
        *(_DWORD *)&v403[22] = v290;
        *(_WORD *)&v403[26] = 1024;
        *(_DWORD *)v404 = v298;
        _os_log_impl( (void *)&_mh_execute_header,  v294,  OS_LOG_TYPE_DEFAULT,  "%@: send setup encrypted channel message ports[%u:::%u] guid[%s] ssrc:%08x startSeq:%04x",  buf,  0x2Eu);
      }

      v299 = (void *)objc_claimAutoreleasedReturnValue([v393 controlChannel]);
      v300 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s localConnectionGUID](v164, "localConnectionGUID"));
      v301 = (unsigned __int16)-[os_log_s seqSendStart](v164, "seqSendStart");
      v302 = sub_10033AB74( (char)v376,  (__int16)v358,  (__int16)v357,  v300,  v76,  v386,  v382,  v361,  v290,  SBYTE1(v290),  SBYTE2(v290),  SBYTE3(v290),  v301,  SHIBYTE(v301),  (uint64_t)-[os_log_s localKeyMaterial](v164, "localKeyMaterial"),  (unsigned __int16)-[os_log_s keyMaterialLength](v164, "keyMaterialLength"));
      v303 = (void *)objc_claimAutoreleasedReturnValue(v302);
      [v299 sendMessage:v303];

      -[os_log_s setStateFlags:](v164, "setStateFlags:", -[os_log_s stateFlags](v164, "stateFlags") | 4);
      -[os_log_s setConnectionSetupStartTime:](v164, "setConnectionSetupStartTime:", sub_100321AD8());
      v304 = sub_1003BB3A8( (uint64_t)[v393 connectionsTableByLocalRemotePortKey],  (int)-[os_log_s uint32Key](v164, "uint32Key"));
      v305 = (void *)objc_claimAutoreleasedReturnValue(v304);
      v306 = v305;
      if (v305) {
        [v305 invalidate];
      }
      sub_1003BB0A4( (int *)[v393 outgoingEncryptionTableBySSRC],  (int)-[os_log_s SSRCSend](v164, "SSRCSend"),  v164);

      goto LABEL_311;
    case 7u:
      v37 = (void *)objc_claimAutoreleasedReturnValue([v393 controlChannel]);
      [v37 processFairplayHostSessionInfo:v394];

      goto LABEL_12;
    case 8u:
      v49 = (void *)objc_claimAutoreleasedReturnValue([v393 controlChannel]);
      [v49 processFairplayDeviceInfo:v394];

      goto LABEL_12;
    case 9u:
      v22 = (void *)objc_claimAutoreleasedReturnValue([v393 controlChannel]);
      [v22 processFairplayDeviceSessionInfo:v394];

      goto LABEL_12;
    case 0xAu:
      v50 = (void *)objc_claimAutoreleasedReturnValue([v393 controlChannel]);
      [v50 processOTRNegotiationMessage:v394];

      goto LABEL_12;
    case 0xBu:
      if ((unint64_t)v14 <= 1)
      {
        v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          v21 = (void *)objc_claimAutoreleasedReturnValue([v393 vifName]);
          *(_DWORD *)buf = 138412290;
          v401 = v21;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "%@: UTCMType_EncryptControlChannel missing data",  buf,  0xCu);
        }

        goto LABEL_11;
      }

      v53 = v13[1];
      v54 = (NSString *)objc_claimAutoreleasedReturnValue([v393 controlChannel]);
      v55 = -[NSString isReadyForEncrypting](v54, "isReadyForEncrypting");
      v56 = -[NSString isDefaultPairedDevicePairedLocally](v54, "isDefaultPairedDevicePairedLocally");
      v57 = -[NSString isDefaultPairedDevicePairedRemotely](v54, "isDefaultPairedDevicePairedRemotely");
      v58 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
      if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
      {
        v59 = (void *)objc_claimAutoreleasedReturnValue([v393 vifName]);
        *(_DWORD *)buf = 138413826;
        v401 = v59;
        v402 = 1024;
        *(_DWORD *)v403 = v53;
        *(_WORD *)&v403[4] = 1024;
        *(_DWORD *)&v403[6] = (v53 >> 1) & 1;
        *(_WORD *)&v403[10] = 1024;
        *(_DWORD *)&v403[12] = v53 & 1;
        *(_WORD *)&v403[16] = 1024;
        *(_DWORD *)&v403[18] = v55;
        *(_WORD *)&v403[22] = 1024;
        *(_DWORD *)&v403[24] = v56;
        *(_WORD *)v404 = 1024;
        *(_DWORD *)&v404[2] = v57;
        _os_log_impl( (void *)&_mh_execute_header,  v58,  OS_LOG_TYPE_DEFAULT,  "%@: got control message: encrypt control channel flags %d ispairedlocally %d ispairedremotely %d (isencrypting : %d ispairedlocally %d ispairedremotely %d)",  buf,  0x30u);
      }

      if ((v55 & 1) != 0) {
        goto LABEL_123;
      }
      -[NSString setIsDefaultPairedDevicePairedRemotely:](v54, "setIsDefaultPairedDevicePairedRemotely:", v53 & 1);
      if ((~v53 & 3) != 0)
      {
        if ((v53 & 1) != 0) {
          v119 = v56;
        }
        else {
          v119 = 0;
        }
        if (v119 != 1)
        {
LABEL_123:

          goto LABEL_12;
        }

        v120 = sub_10033A7EC(1);
        v61 = (void *)objc_claimAutoreleasedReturnValue(v120);
        -[NSString sendPriorityMessage:](v54, "sendPriorityMessage:", v61);
      }

      else
      {
        v60 = sub_1003BB3A8((uint64_t)[v393 connectionsTableByLocalRemotePortKey], 67109888);
        v61 = (void *)objc_claimAutoreleasedReturnValue(v60);
        -[IDSUTunController resetTCPConnection:forDeviceConnectionInfo:]( v390,  "resetTCPConnection:forDeviceConnectionInfo:",  v61,  v393);
        -[NSString encryptControlChannelForStoredIdentities](v54, "encryptControlChannelForStoredIdentities");
      }

      goto LABEL_123;
    case 0xCu:
      v23 = (void *)objc_claimAutoreleasedReturnValue([v393 controlChannel]);
      [v23 processSuspendOTRNegotiationMessage:v394];

      goto LABEL_12;
    case 0xEu:
      if ((unint64_t)v14 <= 9)
      {
        v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          v51 = (void *)objc_claimAutoreleasedReturnValue([v393 vifName]);
          *(_DWORD *)buf = 138412290;
          v401 = v51;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "%@: UTCMType_DirectMsgInfo insufficient header",  buf,  0xCu);
        }

        goto LABEL_11;
      }

      if ([v9 isEqualToString:kIDSDefaultPairedDeviceID])
      {
        v78 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
        if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
        {
          v79 = (void *)objc_claimAutoreleasedReturnValue([v393 vifName]);
          *(_DWORD *)buf = 138412290;
          v401 = v79;
          _os_log_impl( (void *)&_mh_execute_header,  v78,  OS_LOG_TYPE_DEFAULT,  "%@: got control message: direct message info",  buf,  0xCu);
        }

        v80 = -[NSData initWithBytes:length:]( objc_alloc(&OBJC_CLASS___NSData),  "initWithBytes:length:",  v13 + 1,  v16 - 1);
        v82 = im_primary_queue(v80, v81);
        v83 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v82);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472LL;
        block[2] = sub_10033AFD8;
        block[3] = &unk_1008F6010;
        v396 = v80;
        v84 = v80;
        dispatch_async(v83, block);
      }

      goto LABEL_12;
    default:
      v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        v52 = (void *)objc_claimAutoreleasedReturnValue([v393 vifName]);
        *(_DWORD *)buf = 138412546;
        v401 = v52;
        v402 = 1024;
        *(_DWORD *)v403 = v17;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "%@: got invalid control message %d",  buf,  0x12u);
      }

      goto LABEL_11;
  }

void sub_10033A69C(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x100339760LL);
  }

  _Unwind_Resume(a1);
}

id sub_10033A7EC(int a1)
{
  v6[0] = 11;
  if (a1) {
    char v2 = 3;
  }
  else {
    char v2 = 1;
  }
  v6[1] = v2;
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", v6, 2LL));
  v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109634;
    int v8 = 1;
    __int16 v9 = 1024;
    int v10 = a1;
    __int16 v11 = 2112;
    v12 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "sending control message: encrypt control channel (%d, %d) %@",  buf,  0x18u);
  }

  return v3;
}

NSMutableData *sub_10033A8F0( char a1, __int16 a2, __int16 a3, void *a4, void *a5, void *a6, void *a7, void *a8, char a9, uint64_t a10)
{
  id v16 = a5;
  id v17 = a6;
  if (a9) {
    char v18 = 13;
  }
  else {
    char v18 = 2;
  }
  char v35 = v18;
  id v19 = a4;
  id v20 = a8;
  id v21 = a7;
  v37 = (const char *)[v19 UTF8String];
  unsigned __int16 v22 = strlen(v37);
  v39 = v16;
  if (v16)
  {
    v34 = (const char *)[v16 UTF8String];
    unsigned int v23 = (unsigned __int16)strlen(v34);
  }

  else
  {
    v34 = 0LL;
    unsigned int v23 = 0;
  }

  id v38 = v17;
  v24 = (const char *)[v38 UTF8String];
  unsigned __int16 v25 = strlen(v24);
  id v26 = v21;
  v27 = (const char *)[v26 UTF8String];

  unsigned __int16 v28 = strlen(v27);
  id v29 = v20;
  v30 = (const char *)[v29 UTF8String];

  unsigned __int16 v31 = strlen(v30);
  v41[0] = v35;
  v41[1] = a1;
  v41[2] = HIBYTE(a2);
  v41[3] = a2;
  v41[4] = HIBYTE(a3);
  v41[5] = a3;
  v41[6] = HIBYTE(v22);
  v41[7] = v22;
  v41[8] = BYTE1(v23);
  v41[9] = v23;
  v41[10] = HIBYTE(v25);
  v41[11] = v25;
  v41[12] = HIBYTE(v28);
  v41[13] = v28;
  v41[14] = HIBYTE(v31);
  v41[15] = v31;
  v32 = objc_alloc_init(&OBJC_CLASS___NSMutableData);
  -[NSMutableData appendBytes:length:](v32, "appendBytes:length:", v41, 16LL);
  -[NSMutableData appendBytes:length:](v32, "appendBytes:length:", v37, v22);
  if (v23) {
    -[NSMutableData appendBytes:length:](v32, "appendBytes:length:", v34, v23);
  }
  -[NSMutableData appendBytes:length:](v32, "appendBytes:length:", v24, v25);
  -[NSMutableData appendBytes:length:](v32, "appendBytes:length:", v27, v28);
  -[NSMutableData appendBytes:length:](v32, "appendBytes:length:", v30, v31);
  if (a9)
  {
    uint64_t v40 = a10;
    -[NSMutableData appendBytes:length:](v32, "appendBytes:length:", &v40, 8LL);
  }

  return v32;
}

NSMutableData *sub_10033AB74( char a1, __int16 a2, __int16 a3, void *a4, void *a5, void *a6, void *a7, void *a8, char a9, char a10, char a11, char a12, char a13, char a14, uint64_t a15, unsigned __int16 a16)
{
  id v21 = a5;
  id v22 = a6;
  id v23 = a4;
  id v24 = a8;
  id v25 = a7;
  v42 = (const char *)[v23 UTF8String];
  unsigned __int16 v26 = strlen(v42);
  v43 = v21;
  if (v21)
  {
    id v38 = (const char *)[v21 UTF8String];
    unsigned int v27 = (unsigned __int16)strlen(v38);
  }

  else
  {
    unsigned int v27 = 0;
    id v38 = 0LL;
  }

  id v41 = v22;
  unsigned __int16 v28 = (const char *)[v41 UTF8String];
  unsigned __int16 v29 = strlen(v28);
  id v30 = v25;
  unsigned __int16 v31 = (const char *)[v30 UTF8String];

  unsigned __int16 v32 = strlen(v31);
  id v33 = v24;
  v34 = (const char *)[v33 UTF8String];

  unsigned __int16 v35 = strlen(v34);
  v44[0] = 6;
  v44[1] = a1;
  v44[2] = HIBYTE(a2);
  v44[3] = a2;
  v44[4] = HIBYTE(a3);
  v44[5] = a3;
  v44[6] = HIBYTE(v26);
  v44[7] = v26;
  v44[8] = BYTE1(v27);
  v44[9] = v27;
  v44[10] = HIBYTE(v29);
  v44[11] = v29;
  v44[12] = HIBYTE(v32);
  v44[13] = v32;
  v44[14] = HIBYTE(v35);
  v44[15] = v35;
  v44[16] = a12;
  v44[17] = a11;
  v44[18] = a10;
  v44[19] = a9;
  v44[20] = a14;
  v44[21] = a13;
  v44[22] = HIBYTE(a16);
  v44[23] = a16;
  v36 = objc_alloc_init(&OBJC_CLASS___NSMutableData);
  -[NSMutableData appendBytes:length:](v36, "appendBytes:length:", v44, 24LL);
  -[NSMutableData appendBytes:length:](v36, "appendBytes:length:", v42, v26);
  if (v27) {
    -[NSMutableData appendBytes:length:](v36, "appendBytes:length:", v38, v27);
  }
  -[NSMutableData appendBytes:length:](v36, "appendBytes:length:", v28, v29, v38);
  -[NSMutableData appendBytes:length:](v36, "appendBytes:length:", v31, v32);
  -[NSMutableData appendBytes:length:](v36, "appendBytes:length:", v34, v35);
  -[NSMutableData appendBytes:length:](v36, "appendBytes:length:", a15, a16);

  return v36;
}

void sub_10033AE18(uint64_t a1)
{
  unint64_t v2 = (unint64_t)[*(id *)(a1 + 32) capabilityFlags];
  v3 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPairingManager sharedInstance](&OBJC_CLASS___IDSPairingManager, "sharedInstance"));
  v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) productBuildVersion]);
  char v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) productVersion]);
  id v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) productName]);
  id v19 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) pairingProtocolVersion]);
  unsigned int v16 = [v19 unsignedIntValue];
  v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) minCompatibilityVersion]);
  unsigned int v15 = [v5 unsignedIntValue];
  v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) maxCompatibilityVersion]);
  id v7 = [v6 unsignedIntValue];
  int v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) serviceMinCompatibilityVersion]);
  unsigned __int16 v9 = (unsigned __int16)[v8 unsignedShortValue];
  int v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) deviceUniqueID]);
  __int16 v11 = (void *)objc_claimAutoreleasedReturnValue([v10 UUIDString]);
  LOWORD(v14) = v9;
  [v3 updatePairedDeviceBuildVersion:v4 productVersion:v18 productName:v17 pairingProtocolVersion:v16 minCompatibilityVersion:v15 maxCompatib ilityVersion:v7 serviceMinCompatibilityVersion:v14 capabilityFlags:v2 deviceUniqueID:v11];

  if (_IDSSupportsDirectMessaging(v12, v13))
  {
    id v20 = (id)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
    [v20 processDirectMessagingCapability:(v2 >> 11) & 1];
  }

void sub_10033AFD8(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
  [v2 processDirectMessagingInfo:*(void *)(a1 + 32)];
}

void sub_10033C550(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:@"completionHandler"]);
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) controlChannelVersion]);
  (*((void (**)(id, void *, id, id, id, void, void, void, void))v3 + 2))( v3,  v2,  [*(id *)(a1 + 40) capabilityFlags],  objc_msgSend(*(id *)(a1 + 40), "instanceID"),  objc_msgSend(*(id *)(a1 + 40), "serviceMinCompatibilityVersion"),  *(unsigned int *)(a1 + 64),  *(void *)(a1 + 56),  0,  *(void *)(a1 + 48));
}

void sub_10033C5F8(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) vifName]);
  id v6 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@: openSocketWithOptions unable to allocate new port - cannot continue",  v2));

  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObject:forKey:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObject:forKey:",  v6,  NSLocalizedDescriptionKey));
  v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"IDSUTun",  5201LL,  v3));

  v5 = (void (**)(void, void, void, void, void, void, void, void, void))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKey:@"completionHandler"]);
  ((void (**)(void, void, void, void, void, uint64_t, void, void, void *))v5)[2]( v5,  0LL,  0LL,  0LL,  0LL,  0xFFFFFFFFLL,  0LL,  0LL,  v4);
}

void sub_10033CD94(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 96LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      BOOL v5 = *(_BYTE *)(a1 + 48) == 0;
      *(_DWORD *)buf = 67109120;
      LODWORD(v20) = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "setShouldStartBTForDefaultPairedDevice: %d",  buf,  8u);
    }

    [*(id *)(*(void *)(a1 + 32) + 96) setShouldStartBTLinkManager:*(_BYTE *)(a1 + 48) == 0];
    uint64_t v6 = kIDSDefaultPairedDeviceID;
    uint64_t v7 = sub_1003BBA5C(*(void *)(a1 + 32) + 8LL, kIDSDefaultPairedDeviceID);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (v3)
    {
      int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        id v20 = v3;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "_prepareConnectionInfoWithCBUUID: deviceConnectionInfo already exists %@",  buf,  0xCu);
      }
    }

    else
    {
      unsigned __int16 v9 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPairingManager sharedInstance](&OBJC_CLASS___IDSPairingManager, "sharedInstance"));
      unsigned int v10 = [v9 isPaired];

      if (v10)
      {
        int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) defaultPairedDeviceIdentityPair]);
        __int16 v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          id v20 = v8;
          _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "localdevicecontroller is paired [%@]",  buf,  0xCu);
        }
      }

      else
      {
        uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "checking localdevicecontroller not paired",  buf,  2u);
        }

        uint64_t v15 = im_primary_queue(v13, v14);
        unsigned int v16 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v15);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472LL;
        block[2] = sub_10033D074;
        block[3] = &unk_1008F6010;
        block[4] = *(void *)(a1 + 32);
        dispatch_async(v16, block);

        int v8 = 0LL;
      }

      id v17 =  [*(id *)(a1 + 32) _prepareConnectionInfoWithCBUUID:v6 deviceUniqueID:*(void *)(a1 + 40) shouldUseIPsecLink:*(unsigned __int8 *)(a1 + 48) identityPair:v8 remoteDeviceEncryptionInfo:0];
    }
  }

  else if (v4)
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "prepareDefaultPairedConnectionInfoWithDeviceUniqueID failed due to invalid linkManager",  buf,  2u);
  }
}

void sub_10033D074(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPairingManager sharedInstance](&OBJC_CLASS___IDSPairingManager, "sharedInstance"));
  [v2 addDelegate:*(void *)(a1 + 32)];

  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPairingManager sharedInstance](&OBJC_CLASS___IDSPairingManager, "sharedInstance"));
  unsigned int v4 = [v3 isPaired];

  if (v4) {
    [*(id *)(a1 + 32) didUpdatePairedDevice:0];
  }
}

void sub_10033D388(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      uint64_t v5 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138412546;
      *(void *)&uint8_t buf[4] = v4;
      __int16 v62 = 2112;
      uint64_t v63 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%@: openSocketWithOptions called with options [%@]",  buf,  0x16u);
    }

    uint64_t v6 = sub_1003BBA5C(*(void *)(a1 + 48) + 8LL, *(void *)(a1 + 32));
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    if (v7)
    {
      int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = *(void *)(a1 + 64);
        *(_DWORD *)buf = 138412290;
        *(void *)&uint8_t buf[4] = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Update deviceUniqueID for controlChannel %@",  buf,  0xCu);
      }

      unsigned int v10 = (void *)objc_claimAutoreleasedReturnValue([v7 controlChannel]);
      [v10 setDeviceUniqueID:*(void *)(a1 + 64)];

      __int16 v11 = (void *)objc_claimAutoreleasedReturnValue([v7 controlChannel]);
      [v11 setRemoteDeviceEncryptionInfo:*(void *)(a1 + 72)];
LABEL_8:

      unsigned int v12 = [v7 linkLayerConnected];
      if (*(_BYTE *)(a1 + 81)) {
        BOOL v13 = 0;
      }
      else {
        BOOL v13 = *(_BYTE *)(a1 + 82) == 0;
      }
      id v21 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDevicePolicyController sharedInstance]( &OBJC_CLASS___IDSDevicePolicyController,  "sharedInstance"));
      unsigned int v22 = [v21 shouldBlackOutDeviceWithCbuuid:*(void *)(a1 + 32)];

      if (v22)
      {
        id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v24 = *(void *)(a1 + 32);
          uint64_t v25 = *(void *)(a1 + 64);
          *(_DWORD *)buf = 138412546;
          *(void *)&uint8_t buf[4] = v24;
          __int16 v62 = 2112;
          uint64_t v63 = v25;
          _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "Device %@/%@ is blacked out due to fairplay failures",  buf,  0x16u);
        }

        [*(id *)(*(void *)(a1 + 48) + 96) stopLinkForDeviceUniqueID:*(void *)(a1 + 64) cbuuid:*(void *)(a1 + 32) disconnectWP:1];
        BOOL v13 = 0;
      }

      else if (v12)
      {
        [*(id *)(a1 + 48) setupDataConnectionWithDeviceConnectionInfo:v7 options:*(void *)(a1 + 40)];
        [*(id *)(a1 + 48) checkSuspendTrafficForDevice:v7 wait:0];
LABEL_32:
        id v38 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKey:IDSOpenSocketOptionPhoneCallKey]);
        BOOL v39 = v38 == 0LL;

        if (!v39) {
          [*(id *)(*(void *)(a1 + 48) + 96) setIsOnPhoneCall:1 forDeviceID:*(void *)(a1 + 32)];
        }
        goto LABEL_34;
      }

      unsigned __int8 v54 = 0;
      unsigned __int16 v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKey:@"account"]);
      unsigned int v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKey:@"service"]);
      unsigned __int16 v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKey:IDSOpenSocketOptionStreamNameKey]);
      unsigned __int16 v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKey:IDSOpenSocketOptionClientIDKey]);
      id v30 = (void *)objc_claimAutoreleasedReturnValue( +[IDSGenericConnectionID idWithAccount:service:name:]( &OBJC_CLASS___IDSGenericConnectionID,  "idWithAccount:service:name:",  v26,  v27,  v28));
      if (v13) {
        [*(id *)(*(void *)(a1 + 48) + 96) startLinkForDeviceUniqueID:*(void *)(a1 + 64) cbuuid:*(void *)(a1 + 32)];
      }
      [v7 cancelBlockOnLinkConnectWithID:v30 cancelSucceeded:&v54];
      int v31 = v54;
      BOOL v32 = v54 == 0;
      id v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
      BOOL v34 = os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT);
      if (v32)
      {
        if (v34)
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "Add a block for data channel setup on link connects.",  buf,  2u);
        }

        *(void *)buf = 0xAAAAAAAAAAAAAAAALL;
        objc_initWeak((id *)buf, v7);
        v47[0] = _NSConcreteStackBlock;
        v47[1] = 3221225472LL;
        v47[2] = sub_10033DC94;
        v47[3] = &unk_1009018B0;
        objc_copyWeak(&v53, (id *)buf);
        id v48 = v30;
        id v49 = v29;
        id v50 = *(id *)(a1 + 32);
        id v36 = *(id *)(a1 + 40);
        uint64_t v37 = *(void *)(a1 + 48);
        id v51 = v36;
        uint64_t v52 = v37;
        [v7 addBlocksOnLinkConnect:v47];

        objc_destroyWeak(&v53);
        objc_destroyWeak((id *)buf);
      }

      else
      {
        if (v34)
        {
          uint64_t v35 = *(void *)(a1 + 40);
          *(_DWORD *)buf = 138412546;
          *(void *)&uint8_t buf[4] = v30;
          __int16 v62 = 2112;
          uint64_t v63 = v35;
          _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "Canceled a previously scheduled openSocket for %@. Rescheduling openSocket with new options %@.",  buf,  0x16u);
        }
      }

      if (v31) {
        goto LABEL_34;
      }
      goto LABEL_32;
    }

    if (*(_BYTE *)(a1 + 80))
    {
      uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v15 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 138412290;
        *(void *)&uint8_t buf[4] = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "%@: openSocketWithOptions called for default paired device but no connectionInfo - aborting",  buf,  0xCu);
      }

      unsigned int v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@: openSocketWithOptions called for default paired device but no connectionInfo - cannot continue",  *(void *)(a1 + 32)));
      id v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObject:forKey:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObject:forKey:",  v16,  NSLocalizedDescriptionKey));
      char v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"IDSUTun",  5255LL,  v17));

      id v19 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKey:@"completionHandlerQueue"]);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_10033DBC4;
      block[3] = &unk_1008F5F80;
      id v59 = *(id *)(a1 + 40);
      id v60 = v18;
      id v20 = v18;
      dispatch_async(v19, block);
    }

    else
    {
      __int16 v11 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 56) objectForKeyedSubscript:IDSOpenSocketOptionUnauthenticatedIdentityPair]);
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 48) _prepareConnectionInfoWithCBUUID:*(void *)(a1 + 32) deviceUniqueID:*(void *)(a1 + 64) shouldUseIPsecLink:0 identityPair:v11 remoteDeviceEncryptionInfo:*(void *)(a1 + 72)]);
      if (v7) {
        goto LABEL_8;
      }
      uint64_t v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
      if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v41 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 138412290;
        *(void *)&uint8_t buf[4] = v41;
        _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEFAULT,  "%@: openSocketWithOptions unable to create new device - cannot continue",  buf,  0xCu);
      }

      v42 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@: openSocketWithOptions unable to create new device - cannot continue",  *(void *)(a1 + 32)));
      v43 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObject:forKey:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObject:forKey:",  v42,  NSLocalizedDescriptionKey));
      v44 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"IDSUTun",  5201LL,  v43));

      v45 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKey:@"completionHandlerQueue"]);
      v55[0] = _NSConcreteStackBlock;
      v55[1] = 3221225472LL;
      v55[2] = sub_10033DC2C;
      v55[3] = &unk_1008F5F80;
      id v56 = *(id *)(a1 + 40);
      id v57 = v44;
      id v46 = v44;
      dispatch_async(v45, v55);
    }

    uint64_t v7 = 0LL;
LABEL_34:
  }

void sub_10033DBA0(_Unwind_Exception *a1)
{
}

void sub_10033DBC4(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:@"completionHandler"]);
  (*((void (**)(id, void, void, void, void, uint64_t, void, void, void))v2 + 2))( v2,  0LL,  0LL,  0LL,  0LL,  0xFFFFFFFFLL,  0LL,  0LL,  *(void *)(a1 + 40));
}

void sub_10033DC2C(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:@"completionHandler"]);
  (*((void (**)(id, void, void, void, void, uint64_t, void, void, void))v2 + 2))( v2,  0LL,  0LL,  0LL,  0LL,  0xFFFFFFFFLL,  0LL,  0LL,  *(void *)(a1 + 40));
}

void sub_10033DC94(uint64_t a1, int a2, void *a3, _BYTE *a4)
{
  id v7 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
  if (WeakRetained)
  {
    if (v7)
    {
      if (([*(id *)(a1 + 32) isEqual:v7] & 1) != 0
        || [*(id *)(a1 + 40) isEqual:v7])
      {
        uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v10 = *(void *)(a1 + 48);
          *(_DWORD *)buf = 138412290;
          uint64_t v30 = v10;
          _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%@: scheduled openSocketWithOptions attempt canceled - closeSocket called",  buf,  0xCu);
        }

        __int16 v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@: scheduled openSocketWithOptions attempt canceled - closeSocket called",  *(void *)(a1 + 48)));
        unsigned int v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObject:forKey:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObject:forKey:",  v11,  NSLocalizedDescriptionKey));
        BOOL v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"IDSUTun",  5205LL,  v12));

        uint64_t v14 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) objectForKey:@"completionHandlerQueue"]);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472LL;
        block[2] = sub_10033E018;
        block[3] = &unk_1008F5F80;
        id v27 = *(id *)(a1 + 56);
        id v28 = v13;
        id v15 = v13;
        dispatch_async(v14, block);
        *a4 = 1;
      }
    }

    else if (a2)
    {
      unsigned int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v17 = *(void *)(a1 + 48);
        *(_DWORD *)buf = 138412290;
        uint64_t v30 = v17;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "%@: openSocketWithOptions attempt canceled - possibly obliteration",  buf,  0xCu);
      }

      char v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@: openSocketWithOptions attempt canceled - possibly obliteration",  *(void *)(a1 + 48)));
      id v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObject:forKey:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObject:forKey:",  v18,  NSLocalizedDescriptionKey));
      id v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"IDSUTun",  5204LL,  v19));

      id v21 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) objectForKey:@"completionHandlerQueue"]);
      v23[0] = _NSConcreteStackBlock;
      v23[1] = 3221225472LL;
      v23[2] = sub_10033E080;
      v23[3] = &unk_1008F5F80;
      id v24 = *(id *)(a1 + 56);
      id v25 = v20;
      id v22 = v20;
      dispatch_async(v21, v23);
    }

    else
    {
      [*(id *)(a1 + 64) setupDataConnectionWithDeviceConnectionInfo:WeakRetained options:*(void *)(a1 + 56)];
      [*(id *)(a1 + 64) checkSuspendTrafficForDevice:WeakRetained wait:0];
    }
  }
}

void sub_10033E018(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:@"completionHandler"]);
  (*((void (**)(id, void, void, void, void, uint64_t, void, void, void))v2 + 2))( v2,  0LL,  0LL,  0LL,  0LL,  0xFFFFFFFFLL,  0LL,  0LL,  *(void *)(a1 + 40));
}

void sub_10033E080(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:@"completionHandler"]);
  (*((void (**)(id, void, void, void, void, uint64_t, void, void, void))v2 + 2))( v2,  0LL,  0LL,  0LL,  0LL,  0xFFFFFFFFLL,  0LL,  0LL,  *(void *)(a1 + 40));
}

void sub_10033E15C(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    id v3 = *(void **)(a1 + 32);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 40) + 8LL;
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3221225472LL;
      v9[2] = sub_10033E22C;
      v9[3] = &unk_100901928;
      uint64_t v5 = v3;
      uint64_t v6 = *(void *)(a1 + 40);
      uint64_t v10 = v5;
      uint64_t v11 = v6;
      sub_1003BBD80(v4, (uint64_t)v9);
      id v7 = v10;
    }

    else
    {
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        v8[0] = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "cleanupSocketsForClient: clientID is nil.",  (uint8_t *)v8,  2u);
      }
    }
  }

void sub_10033E22C(uint64_t a1, void *a2, void *a3)
{
  id v34 = a2;
  id v4 = a3;
  uint64_t v5 = OSLogHandleForTransportCategory("UTun");
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    id v7 = *(void **)(a1 + 32);
    *(_DWORD *)buf = 138412546;
    id v49 = v34;
    __int16 v50 = 2112;
    id v51 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Device %@: utun cleaning up device connection for clientID: %@",  buf,  0x16u);
  }

  uint64_t v9 = os_log_shim_legacy_logging_enabled(v8);
  if ((_DWORD)v9)
  {
    if (_IDSShouldLogTransport(v9))
    {
      id v32 = v34;
      uint64_t v33 = *(void *)(a1 + 32);
      _IDSLogTransport( @"UTun",  @"IDS",  @"Device %@: utun cleaning up device connection for clientID: %@");
      if (_IDSShouldLog(0LL, @"UTun"))
      {
        id v32 = v34;
        uint64_t v33 = *(void *)(a1 + 32);
        _IDSLogV( 0LL,  @"IDSFoundation",  @"UTun",  @"Device %@: utun cleaning up device connection for clientID: %@");
      }
    }
  }

  id v10 = v4;
  char v47 = 0;
  [v10 cancelBlockOnLinkConnectWithID:*(void *)(a1 + 32) cancelSucceeded:&v47];
  uint64_t v11 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  id v12 = [v10 connectionsTableByLocalRemotePortKey];
  v43[0] = _NSConcreteStackBlock;
  v43[1] = 3221225472LL;
  v43[2] = sub_10033E6CC;
  v43[3] = &unk_100901900;
  id v44 = *(id *)(a1 + 32);
  id v13 = v10;
  id v45 = v13;
  uint64_t v14 = v11;
  id v46 = v14;
  sub_1003BB694((uint64_t)v12, (uint64_t)v43);
  __int128 v41 = 0u;
  __int128 v42 = 0u;
  __int128 v39 = 0u;
  __int128 v40 = 0u;
  obj = v14;
  id v38 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v39,  v54,  16LL);
  if (v38)
  {
    uint64_t v36 = *(void *)v40;
    do
    {
      for (i = 0LL; i != v38; i = (char *)i + 1)
      {
        if (*(void *)v40 != v36) {
          objc_enumerationMutation(obj);
        }
        unsigned int v16 = *(void **)(*((void *)&v39 + 1) + 8LL * (void)i);
        uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "connectionID", v32, v33));
        char v18 = (void *)objc_claimAutoreleasedReturnValue([v16 localConnectionGUID]);
        id v19 = (void *)objc_claimAutoreleasedReturnValue([v16 remoteConnectionGUID]);
        id v20 = (void *)objc_claimAutoreleasedReturnValue([v17 account]);
        id v21 = (void *)objc_claimAutoreleasedReturnValue([v17 service]);
        id v22 = (void *)objc_claimAutoreleasedReturnValue([v17 name]);
        id v23 = sub_10032ED20(v18, v19, v20, v21, v22);
        id v24 = (void *)objc_claimAutoreleasedReturnValue(v23);

        if (v24)
        {
          id v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
          {
            unsigned __int16 v26 = (void *)objc_claimAutoreleasedReturnValue([v13 vifName]);
            *(_DWORD *)buf = 138412802;
            id v49 = v26;
            __int16 v50 = 2112;
            id v51 = v24;
            __int16 v52 = 2112;
            id v53 = v16;
            _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "%@: close channel control message [%@] created for connection %@",  buf,  0x20u);
          }

          id v27 = (void *)objc_claimAutoreleasedReturnValue([v13 controlChannel]);
          [v27 sendMessage:v24];
        }

        id v28 = *(void **)(a1 + 40);
        id v29 = [v13 portMap];
        uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([v16 addressPair]);
        int v31 = (void *)objc_claimAutoreleasedReturnValue([v30 localAddress]);
        objc_msgSend(v28, "releasePortIfNecessary:port:", v29, objc_msgSend(v31, "saPortHostOrder"));

        [*(id *)(a1 + 40) removeConnection:v16 fromDeviceConnectionInfo:v13 removeCode:5030 removeReason:@"Cleaning up all connections for service"];
      }

      id v38 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v39,  v54,  16LL);
    }

    while (v38);
  }
}

void sub_10033E6CC(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 clientID]);
  unsigned int v6 = [v5 isEqualToIgnoringCase:*(void *)(a1 + 32)];

  if (v6)
  {
    uint64_t v7 = OSLogHandleForTransportCategory("UTun-oversized");
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      uint64_t v10 = *(void *)(a1 + 40);
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v4 connectionID]);
      id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 service]);
      *(_DWORD *)buf = 138412802;
      uint64_t v25 = v10;
      __int16 v26 = 2112;
      uint64_t v27 = v9;
      __int16 v28 = 2112;
      id v29 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "utun cleaning up device connection info: %@, clientID: %@, connection for service %@",  buf,  0x20u);
    }

    uint64_t v14 = os_log_shim_legacy_logging_enabled(v13);
    if ((_DWORD)v14)
    {
      if (_IDSShouldLogTransport(v14))
      {
        uint64_t v16 = *(void *)(a1 + 32);
        uint64_t v15 = *(void *)(a1 + 40);
        uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v4 connectionID]);
        uint64_t v22 = v16;
        id v23 = (void *)objc_claimAutoreleasedReturnValue([v17 service]);
        uint64_t v21 = v15;
        _IDSLogTransport( @"UTun-oversized",  @"IDS",  @"utun cleaning up device connection info: %@, clientID: %@, connection for service %@");

        if (_IDSShouldLog(0LL, @"UTun-oversized"))
        {
          uint64_t v19 = *(void *)(a1 + 32);
          uint64_t v18 = *(void *)(a1 + 40);
          id v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "connectionID", v21, v22, v23));
          uint64_t v22 = v19;
          id v23 = (void *)objc_claimAutoreleasedReturnValue([v20 service]);
          uint64_t v21 = v18;
          _IDSLogV( 0LL,  @"IDSFoundation",  @"UTun-oversized",  @"utun cleaning up device connection info: %@, clientID: %@, connection for service %@");
        }
      }
    }

    objc_msgSend(*(id *)(a1 + 48), "addObject:", v4, v21, v22, v23);
  }
}

void sub_10033E9A8(id *a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    id v3 = a1 + 4;
    id v4 = (void *)objc_claimAutoreleasedReturnValue([a1[4] objectForKey:IDSOpenSocketOptionCBUUIDKey]);
    id v24 = (void *)objc_claimAutoreleasedReturnValue([*v3 objectForKey:IDSOpenSocketOptionDeviceUniqueIDKey]);
    uint64_t v5 = sub_1003BBA5C((uint64_t)a1[5] + 8, (uint64_t)v4);
    unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    if (([v4 isEqualToString:kIDSDefaultPairedDeviceID] & 1) == 0)
    {
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 controlChannel]);
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 deviceUniqueID]);

      if (([v8 isEqualToString:v24] & 1) == 0)
      {
        uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412546;
          *(void *)&uint8_t buf[4] = v24;
          __int16 v33 = 2112;
          id v34 = v8;
          _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "closeSocketWithOptions found deviceUniqueID mismatch (%@ != %@), ignore.",  buf,  0x16u);
        }

        goto LABEL_23;
      }
    }

    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([a1[4] objectForKey:@"account"]);
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue([a1[4] objectForKey:@"service"]);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([a1[4] objectForKey:IDSOpenSocketOptionStreamNameKey]);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[IDSGenericConnectionID idWithAccount:service:name:]( &OBJC_CLASS___IDSGenericConnectionID,  "idWithAccount:service:name:",  v8,  v9,  v10));
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v6 connectionsByID]);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKey:v11]);

    if ([v6 linkLayerConnected])
    {
      [a1[5] closeDataConnectionWithDeviceConnectionInfo:v6 options:a1[4]];
      [a1[5] checkSuspendTrafficForDevice:v6 wait:1];
    }

    else
    {
      char v31 = 0;
      [v6 cancelBlockOnLinkConnectWithID:v11 cancelSucceeded:&v31];
      BOOL v14 = v31 == 0;
      uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
      BOOL v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
      if (!v14)
      {
        if (v16)
        {
          *(_DWORD *)buf = 138412290;
          *(void *)&uint8_t buf[4] = v11;
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Canceled a previously scheduled openSocket for %@. Not scheduling closeSocket.",  buf,  0xCu);
        }

        goto LABEL_22;
      }

      if (v16)
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Add a block for data channel close on link connects.",  buf,  2u);
      }

      *(void *)buf = 0xAAAAAAAAAAAAAAAALL;
      objc_initWeak((id *)buf, v6);
      v28[0] = _NSConcreteStackBlock;
      v28[1] = 3221225472LL;
      v28[2] = sub_10033EE4C;
      v28[3] = &unk_100901950;
      objc_copyWeak(&v30, (id *)buf);
      int8x16_t v23 = *((int8x16_t *)a1 + 2);
      id v17 = (id)v23.i64[0];
      int8x16_t v29 = vextq_s8(v23, v23, 8uLL);
      [v6 addBlocksOnLinkConnect:v28];

      objc_destroyWeak(&v30);
      objc_destroyWeak((id *)buf);
    }

    if (a1[7])
    {
      uint64_t v18 = (dispatch_queue_s *)a1[6];
      if (!a1[6])
      {
        dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0xFFFFFFFFFFFF8000LL);
        uint64_t v20 = objc_claimAutoreleasedReturnValue(global_queue);

        uint64_t v18 = (dispatch_queue_s *)v20;
      }

      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_10033EEBC;
      block[3] = &unk_1008F6358;
      id v27 = a1[7];
      id v26 = v13;
      dispatch_async(v18, block);
    }

    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "objectForKey:", IDSOpenSocketOptionPhoneCallKey, *(_OWORD *)&v23));
    BOOL v22 = v21 == 0LL;

    if (!v22) {
      [*((id *)a1[5] + 12) setIsOnPhoneCall:0 forDeviceID:v4];
    }
LABEL_22:

LABEL_23:
  }

void sub_10033EE28(_Unwind_Exception *a1)
{
}

void sub_10033EE4C(uint64_t a1, char a2, uint64_t a3)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  uint64_t v7 = WeakRetained;
  if (!a3 && (a2 & 1) == 0 && WeakRetained)
  {
    id v8 = WeakRetained;
    [*(id *)(a1 + 32) closeDataConnectionWithDeviceConnectionInfo:WeakRetained options:*(void *)(a1 + 40)];
    [*(id *)(a1 + 32) checkSuspendTrafficForDevice:v8 wait:1];
    uint64_t v7 = v8;
  }
}

uint64_t sub_10033EEBC(uint64_t a1)
{
  return (*(uint64_t (**)(void, id, id, id, id))(*(void *)(a1 + 40) + 16))( *(void *)(a1 + 40),  [*(id *)(a1 + 32) packetsSent],  objc_msgSend(*(id *)(a1 + 32), "bytesSent"),  objc_msgSend(*(id *)(a1 + 32), "packetsReceived"),  objc_msgSend(*(id *)(a1 + 32), "bytesReceived"));
}

id sub_10033F27C(uint64_t a1)
{
  return [*(id *)(a1 + 32) doCheckSuspendTrafficForDevice:*(void *)(a1 + 40)];
}

id sub_10033F498(uint64_t a1)
{
  return [*(id *)(a1 + 32) doCheckSuspendTrafficForDevice:*(void *)(a1 + 40)];
}

void sub_10033F518(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:IDSOpenSocketOptionCBUUIDKey]);
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:@"account"]);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:@"service"]);
    unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:IDSOpenSocketOptionStreamNameKey]);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:@"suspendWait"]);
    id v8 = v7;
    if (v7) {
      unsigned int v21 = [v7 BOOLValue];
    }
    else {
      unsigned int v21 = 0;
    }
    uint64_t v9 = sub_1003BBA5C(*(void *)(a1 + 40) + 8LL, (uint64_t)v3);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[IDSGenericConnectionID idWithAccount:service:name:]( &OBJC_CLASS___IDSGenericConnectionID,  "idWithAccount:service:name:",  v4,  v5,  v6));
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v10 connectionsByID]);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKey:v11]);

    BOOL v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v20 = v6;
      uint64_t v15 = v5;
      BOOL v16 = v4;
      id v17 = v3;
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v10 vifName]);
      uint64_t v19 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412802;
      int8x16_t v23 = v18;
      __int16 v24 = 2112;
      uint64_t v25 = v19;
      __int16 v26 = 2112;
      id v27 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "%@: suspendSocketWithOptions called with options [%@] (connection %@)",  buf,  0x20u);

      id v3 = v17;
      id v4 = v16;
      uint64_t v5 = v15;
      unsigned int v6 = v20;
    }

    if (v13)
    {
      if (([v13 suspended] & 1) == 0)
      {
        [v13 setSuspended:1];
        [*(id *)(a1 + 40) checkSuspendTrafficForDevice:v10 wait:v21];
      }
    }
  }

void sub_10033F7EC(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:IDSOpenSocketOptionCBUUIDKey]);
    uint64_t v27 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:IDSOpenSocketOptionDeviceUniqueIDKey]);
    uint64_t v4 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:@"account"]);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:@"service"]);
    unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:IDSOpenSocketOptionStreamNameKey]);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:IDSOpenSocketOptionCloudEnabledKey]);
    unsigned __int8 v25 = [v7 BOOLValue];

    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:IDSOpenSocketOptionIsIDSDSessionSocket]);
    unsigned __int8 v9 = [v8 BOOLValue];

    uint64_t v10 = sub_1003BBA5C(*(void *)(a1 + 40) + 8LL, (uint64_t)v3);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    __int16 v26 = (void *)v4;
    id v12 = (void *)objc_claimAutoreleasedReturnValue( +[IDSGenericConnectionID idWithAccount:service:name:]( &OBJC_CLASS___IDSGenericConnectionID,  "idWithAccount:service:name:",  v4,  v5,  v6));
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v11 connectionsByID]);
    BOOL v14 = (void *)objc_claimAutoreleasedReturnValue([v13 objectForKey:v12]);

    if (*(_BYTE *)(a1 + 48))
    {
      uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        BOOL v16 = (void *)objc_claimAutoreleasedReturnValue([v11 vifName]);
        id v17 = *(void **)(a1 + 32);
        *(_DWORD *)buf = 138412802;
        int8x16_t v29 = v16;
        __int16 v30 = 2112;
        char v31 = v17;
        __int16 v32 = 2112;
        __int16 v33 = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "%@: resumeSocketWithOptions called with options [%@] (connection %@)",  buf,  0x20u);
      }
    }

    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDevicePolicyController sharedInstance]( &OBJC_CLASS___IDSDevicePolicyController,  "sharedInstance"));
    unsigned int v19 = [v18 shouldBlackOutDeviceWithCbuuid:v3];

    if (v19)
    {
      uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v21 = (void *)objc_claimAutoreleasedReturnValue([v11 controlChannel]);
        BOOL v22 = (void *)objc_claimAutoreleasedReturnValue([v21 deviceUniqueID]);
        *(_DWORD *)buf = 138412546;
        int8x16_t v29 = v3;
        __int16 v30 = 2112;
        char v31 = v22;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "Device %@/%@ is blacked out due to fairplay failures",  buf,  0x16u);
      }

      int8x16_t v23 = (void *)v27;
      [*(id *)(*(void *)(a1 + 40) + 96) stopLinkForDeviceUniqueID:v27 cbuuid:v3 disconnectWP:1];
    }

    else
    {
      char v24 = v25 | v9;
      int8x16_t v23 = (void *)v27;
      if ((v24 & 1) == 0) {
        [*(id *)(*(void *)(a1 + 40) + 96) startLinkForDeviceUniqueID:v27 cbuuid:v3];
      }
      if (v14 && [v14 suspended])
      {
        [v14 setSuspended:0];
        [*(id *)(a1 + 40) checkSuspendTrafficForDevice:v11 wait:0];
      }
    }
  }

void *sub_10033FCBC(void *result)
{
  if (*(void *)(result[4] + 96LL)) {
    return [*(id *)(result[4] + 96) startUDPGlobalLinkForDevice:result[5]];
  }
  return result;
}

void sub_10033FD4C(uint64_t a1)
{
  uint64_t v2 = sub_1003BBA5C(*(void *)(a1 + 32) + 8LL, *(void *)(a1 + 40));
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v5)
    {
      uint64_t v6 = *(void *)(a1 + 40);
      int v13 = 138412290;
      uint64_t v14 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "removeDeviceConnectionInfoForDevice for %@",  (uint8_t *)&v13,  0xCu);
    }

    [*(id *)(a1 + 32) resetAllConnectionsForDevice:v3];
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v3 controlChannel]);
    [v7 invalidate];

    uint64_t v9 = v3[2079];
    if (v9) {
      id fd = (id)os_channel_get_fd(v9, v8);
    }
    else {
      id fd = [v3 utunSocket];
    }
    IDSTransportThreadRemoveSocket(fd);
    [v3 cancelBlocksOnLinkConnect];
    [v3 invalidate];
    sub_1003BBB68(*(void *)(a1 + 32) + 8LL, *(const char **)(a1 + 40));
  }

  else
  {
    if (v5)
    {
      uint64_t v11 = *(void *)(a1 + 40);
      int v13 = 138412290;
      uint64_t v14 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "removeDeviceConnectionInfoForDevice found no match for %@",  (uint8_t *)&v13,  0xCu);
    }
  }

  id v12 = *(void **)(*(void *)(a1 + 32) + 96LL);
  if (v12) {
    [v12 stopUDPGlobalLinkForDevice:*(void *)(a1 + 40)];
  }
}

void *sub_10033FF9C(void *result)
{
  if (*(void *)(result[4] + 96LL)) {
    return [*(id *)(result[4] + 96) createConnectionDataForDevice:result[5] localPartyID:result[6] dataReadyHandler:result[7]];
  }
  return result;
}

void *sub_10034007C(void *result)
{
  if (*(void *)(result[4] + 96LL)) {
    return [*(id *)(result[4] + 96) processRemoteConnectionDataForDevice:result[5] remoteConnectionData:result[6] completionHandler:result[7]];
  }
  return result;
}

void *sub_100340154(void *result)
{
  if (*(void *)(result[4] + 96LL)) {
    return [*(id *)(result[4] + 96) startConnectionForDevice:result[5] isInitiator:*((unsigned __int8 *)result + 56) remotePartyID:result[6] useStunMICheck:*((unsigned __int8 *)result + 57)];
  }
  return result;
}

void sub_1003401EC(uint64_t a1)
{
  uint64_t v2 = sub_1003BBA5C(*(void *)(a1 + 32) + 8LL, *(void *)(a1 + 40));
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v5)
    {
      uint64_t v6 = *(void *)(a1 + 40);
      int v13 = 138412290;
      uint64_t v14 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "removeDeviceConnectionInfoForDevice for %@.",  (uint8_t *)&v13,  0xCu);
    }

    [*(id *)(a1 + 32) resetAllConnectionsForDevice:v3];
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v3 controlChannel]);
    [v7 invalidate];

    uint64_t v9 = v3[2079];
    if (v9) {
      id fd = (id)os_channel_get_fd(v9, v8);
    }
    else {
      id fd = [v3 utunSocket];
    }
    IDSTransportThreadRemoveSocket(fd);
    [v3 cancelBlocksOnLinkConnect];
    [v3 invalidate];
    sub_1003BBB68(*(void *)(a1 + 32) + 8LL, *(const char **)(a1 + 40));
  }

  else
  {
    if (v5)
    {
      uint64_t v11 = *(void *)(a1 + 40);
      int v13 = 138412290;
      uint64_t v14 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "removeDeviceConnectionInfoForDevice found no match for %@.",  (uint8_t *)&v13,  0xCu);
    }
  }

  id v12 = *(void **)(*(void *)(a1 + 32) + 96LL);
  if (v12) {
    [v12 stopGlobalLinkForDevice:*(void *)(a1 + 40)];
  }
}

void *sub_1003404B0(void *result)
{
  if (*(void *)(result[4] + 96LL)) {
    return [*(id *)(result[4] + 96) startGlobalLinkForDevice:result[5]];
  }
  return result;
}

void *sub_10034059C(void *result)
{
  if (*(void *)(result[4] + 96LL))
  {
    v1 = result;
    uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      int v3 = *((_DWORD *)v1 + 16);
      v4[0] = 67109120;
      v4[1] = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "IDSUTunController connectGlobalLinkForDevice preferredLocalInterface: %i",  (uint8_t *)v4,  8u);
    }

    return [*(id *)(v1[4] + 96) connectGlobalLinkForDevice:v1[5] sessionInfo:v1[6] connectReadyHandler:v1[7] withLocalInterfacePreference:*((unsigned int *)v1 + 16)];
  }

  return result;
}

void sub_100340710(uint64_t a1, uint64_t a2)
{
  int v3 = *(void **)(*(void *)(a1 + 32) + 96LL);
  if (v3)
  {
    [v3 disconnectGlobalLinkForDevice:*(void *)(a1 + 40) isReinitiating:*(unsigned __int8 *)(a1 + 56) completionHandler:*(void *)(a1 + 48)];
  }

  else if (*(void *)(a1 + 48))
  {
    uint64_t v4 = im_primary_queue(0LL, a2);
    BOOL v5 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v4);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1003407D8;
    block[3] = &unk_1008F6330;
    id v8 = *(id *)(a1 + 48);
    dispatch_block_t v6 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, QOS_CLASS_USER_INTERACTIVE, 0, block);
    dispatch_async(v5, v6);
  }

uint64_t sub_1003407D8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_1003408A8(void *a1)
{
  return [*(id *)(a1[4] + 96) setAcceptedRelaySession:a1[5] relaySessionID:a1[6] options:a1[7]];
}

id sub_100340938(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 96) setHasPendingAllocation:*(unsigned __int8 *)(a1 + 48) forIDSSession:*(void *)(a1 + 40)];
}

id sub_1003409EC(void *a1)
{
  return [*(id *)(a1[4] + 96) setTimeBase:a1[5] forIDSSession:a1[6]];
}

id sub_100340A8C(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 96) setIsReliableUnicastSession:*(unsigned __int8 *)(a1 + 48) isClient:*(unsigned __int8 *)(a1 + 49) forIDSSession:*(void *)(a1 + 40)];
}

id sub_100340B20(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 96) setAllowP2PforIDSSession:*(void *)(a1 + 40) isEnabled:*(unsigned __int8 *)(a1 + 48)];
}

id sub_100340BB0(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 96) setForceTCPFallbackOnWiFi:*(void *)(a1 + 40) forceTCPFallbackOnWiFi:*(unsigned __int8 *)(a1 + 48)];
}

id sub_100340C40(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 96) setForceTCPFallbackOnCell:*(void *)(a1 + 40) forceTCPFallbackOnCell:*(unsigned __int8 *)(a1 + 48)];
}

id sub_100340CD0(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 96) setSharedSessionHasJoined:*(unsigned __int8 *)(a1 + 48) forIDSSession:*(void *)(a1 + 40)];
}

id sub_100340D84(void *a1)
{
  return _[*(id *)(a1[4] + 96) setCellInterfaceName:a1[5] forIDSSession:a1[6]];
}

id sub_100340E38(void *a1)
{
  return [*(id *)(a1[4] + 96) setIDSContextBlob:a1[5] forIDSSession:a1[6]];
}

void sub_100340EC0(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 96LL);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
    BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    if (v3)
    {
      if (v5)
      {
        uint64_t v6 = *(void *)(a1 + 40);
        int v7 = 138412290;
        uint64_t v8 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "clearSharedSessionHasJoinedForIDSSession for session %@",  (uint8_t *)&v7,  0xCu);
      }

      [*(id *)(*(void *)(a1 + 32) + 96) clearSharedSessionHasJoinedForIDSSession:*(void *)(a1 + 40)];
    }

    else
    {
      if (v5)
      {
        LOWORD(v7) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "clearSharedSessionHasJoinedForIDSSession failed due to invalid linkManager",  (uint8_t *)&v7,  2u);
      }
    }
  }

void sub_100341038(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 96LL);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
    BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    if (v3)
    {
      if (v5)
      {
        uint64_t v6 = *(void *)(a1 + 40);
        int v7 = 138412290;
        uint64_t v8 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "clearCellInterfaceName for session %@",  (uint8_t *)&v7,  0xCu);
      }

      [*(id *)(*(void *)(a1 + 32) + 96) clearCellInterfaceName:*(void *)(a1 + 40)];
    }

    else
    {
      if (v5)
      {
        LOWORD(v7) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "clearCellInterfaceName failed due to invalid linkManager",  (uint8_t *)&v7,  2u);
      }
    }
  }

void sub_1003411B0(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 96LL);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
    BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    if (v3)
    {
      if (v5)
      {
        uint64_t v6 = *(void *)(a1 + 40);
        int v7 = 138412290;
        uint64_t v8 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "clearIDSContextBlob for session %@",  (uint8_t *)&v7,  0xCu);
      }

      [*(id *)(*(void *)(a1 + 32) + 96) clearIDSContextBlob:*(void *)(a1 + 40)];
    }

    else
    {
      if (v5)
      {
        LOWORD(v7) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "clearIDSContextBlob failed due to invalid linkManager",  (uint8_t *)&v7,  2u);
      }
    }
  }

id sub_10034135C(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 96) handleAllocateRequestFailureForDevice:*(void *)(a1 + 40) requestID:*(void *)(a1 + 48) errorCode:*(unsigned int *)(a1 + 56)];
}

void sub_100341414(uint64_t a1)
{
  unint64_t v11 = 0xAAAAAAAAAAAAAAAALL;
  int v10 = -1431655766;
  id v2 = [*(id *)(*(void *)(a1 + 32) + 96) currentLinkType:&v11 andRATType:&v10 forDeviceID:*(void *)(a1 + 40)];
  uint64_t v4 = im_primary_queue(v2, v3);
  BOOL v5 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v4);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _BYTE v6[2] = sub_1003414C4;
  v6[3] = &unk_100901A18;
  id v7 = *(id *)(a1 + 48);
  unint64_t v8 = v11;
  int v9 = v10;
  dispatch_async(v5, v6);
}

uint64_t sub_1003414C4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(unsigned int *)(a1 + 48));
}

uint64_t sub_1003416AC(uint64_t a1)
{
  return kdebug_trace(722010136LL, 0LL, 0LL, 0LL, 0LL);
}

void sub_1003418D4(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    if (*(void *)(*(void *)(a1 + 32) + 96LL))
    {
      uint64_t v3 = kIDSDefaultPairedDeviceID;
      id v4 = [*(id *)(a1 + 40) isEqualToString:kIDSDefaultPairedDeviceID];
      if ((_DWORD)v4)
      {
        uint64_t v6 = im_primary_queue(v4, v5);
        id v7 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v6);
        dispatch_async(v7, &stru_100901A38);
      }

      uint64_t v8 = sub_1003BBA5C(*(void *)(a1 + 32) + 8LL, *(void *)(a1 + 40));
      int v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
      if (v9)
      {
        int v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v11 = *(void *)(a1 + 40);
          *(_DWORD *)buf = 138412290;
          uint64_t v21 = v11;
          _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "obliterateConnectionInfo: clear all connections for cbuuid %@",  buf,  0xCu);
        }

        [*(id *)(a1 + 32) resetAllConnectionsForDevice:v9];
        id v12 = (void *)objc_claimAutoreleasedReturnValue([v9 controlChannel]);
        [v12 invalidate];

        uint64_t v14 = v9[2079];
        if (v14) {
          id fd = (id)os_channel_get_fd(v14, v13);
        }
        else {
          id fd = [v9 utunSocket];
        }
        IDSTransportThreadRemoveSocket(fd);
        [v9 cancelBlocksOnLinkConnect];
        [v9 invalidate];
        sub_1003BBB68(*(void *)(a1 + 32) + 8LL, *(const char **)(a1 + 40));
      }

      BOOL v16 = *(void **)(a1 + 56);
      if (v16)
      {
        id v17 = *(dispatch_queue_s **)(a1 + 48);
        if (v17)
        {
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472LL;
          block[2] = sub_100341B8C;
          block[3] = &unk_1008F6330;
          id v19 = v16;
          dispatch_async(v17, block);
        }
      }
    }

    else
    {
      int v9 = (void *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
      if (os_log_type_enabled((os_log_t)v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v9,  OS_LOG_TYPE_DEFAULT,  "obliterateConnectionInfo failed due to invalid linkManager",  buf,  2u);
      }
    }
  }

void sub_100341B14(id a1)
{
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[IDSUTunDeliveryController sharedInstance](&OBJC_CLASS___IDSUTunDeliveryController, "sharedInstance"));
  [v1 enableConnectionForDefaultPairedDevice:0];

  if (_IDSSupportsDirectMessaging(v2, v3))
  {
    id v4 = (id)objc_claimAutoreleasedReturnValue(+[IDSUTunDeliveryController sharedInstance](&OBJC_CLASS___IDSUTunDeliveryController, "sharedInstance"));
    [v4 defaultPeerSupportsDirectMessaging:0 isObliterating:1];
  }

uint64_t sub_100341B8C(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "obliterateConnectionInfo: completionBlock",  v4,  2u);
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100341C58(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    uint64_t v3 = sub_1003BBA5C(*(void *)(a1 + 32) + 8LL, kIDSDefaultPairedDeviceID);
    id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
    BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    if (v4)
    {
      if (v6)
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Clearing control channel", buf, 2u);
      }

      uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue([v4 controlChannel]);
      [*(id *)(*(void *)(a1 + 32) + 96) setRequireBT:1];
      -[os_log_s setIdentityPair:](v5, "setIdentityPair:", 0LL);
      -[os_log_s setIsDefaultPairedDevicePairedLocally:](v5, "setIsDefaultPairedDevicePairedLocally:", 0LL);
    }

    else if (v6)
    {
      *(_WORD *)id v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Couldn't find deviceConnection info", v7, 2u);
    }
  }

void sub_100341DEC(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 96LL);
    if (v3)
    {
      if (*(_BYTE *)(a1 + 48)) {
        [v3 setShouldStartBTLinkManager:0];
      }
      id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v5 = *(void *)(a1 + 40);
        int v7 = 138412290;
        uint64_t v8 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "addPairedDevice with cbuuid %@",  (uint8_t *)&v7,  0xCu);
      }

      [*(id *)(*(void *)(a1 + 32) + 96) addPairedDevice:*(void *)(a1 + 40)];
    }

    else
    {
      BOOL v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v7) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "addPairedDevice failed due to invalid linkManager",  (uint8_t *)&v7,  2u);
      }
    }
  }

void sub_100341F88(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 96LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
    BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    if (v3)
    {
      if (v5)
      {
        uint64_t v6 = *(void *)(a1 + 40);
        int v7 = 138412290;
        uint64_t v8 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "connectPairedDevice with cbuuid %@",  (uint8_t *)&v7,  0xCu);
      }

      [*(id *)(*(void *)(a1 + 32) + 96) connectPairedDevice:*(void *)(a1 + 40)];
    }

    else
    {
      if (v5)
      {
        LOWORD(v7) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "connectPairedDevice failed due to invalid linkManager",  (uint8_t *)&v7,  2u);
      }
    }
  }

void sub_100342100(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 96LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
    BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    if (v3)
    {
      if (v5)
      {
        uint64_t v6 = *(void *)(a1 + 40);
        int v7 = 138412290;
        uint64_t v8 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "deletePairedDevice with cbuuid %@",  (uint8_t *)&v7,  0xCu);
      }

      [*(id *)(*(void *)(a1 + 32) + 96) deletePairedDevice:*(void *)(a1 + 40)];
    }

    else
    {
      if (v5)
      {
        LOWORD(v7) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "deletePairedDevice failed due to invalid linkManager",  (uint8_t *)&v7,  2u);
      }
    }
  }

void sub_1003422B0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1003422C8(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 96LL);
  if (v2)
  {
    id v3 = [v2 copyLinkStatsDict];
    uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8LL);
    BOOL v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;
  }

  else
  {
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v9 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "copyLinkStatsDict failed due to invalid linkManager",  v9,  2u);
    }

    uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8LL);
    uint64_t v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = 0LL;
  }

void sub_1003423F0(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 96LL);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
    BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    if (v3)
    {
      if (v5)
      {
        uint64_t v6 = *(void *)(a1 + 40);
        int v7 = 138412290;
        uint64_t v8 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "clearPluginCacheForSession for session %@",  (uint8_t *)&v7,  0xCu);
      }

      [*(id *)(*(void *)(a1 + 32) + 96) clearPluginCacheForSession:*(void *)(a1 + 40)];
    }

    else
    {
      if (v5)
      {
        LOWORD(v7) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "clearPluginCacheForSession failed due to invalid linkManager",  (uint8_t *)&v7,  2u);
      }
    }
  }

void sub_100342568(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    if (*(void *)(*(void *)(a1 + 32) + 96LL))
    {
      [*(id *)(*(void *)(a1 + 32) + 96) clearReliableUnicastStateForSession:*(void *)(a1 + 40)];
    }

    else
    {
      uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v3 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "clearReliableUnicastStateForSession failed due to invalid linkManager",  v3,  2u);
      }
    }
  }

void sub_1003428FC(uint64_t a1, uint64_t a2, void *a3)
{
  id v12 = a3;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v12 connectionID]);
  BOOL v5 = (void *)objc_claimAutoreleasedReturnValue([v4 service]);

  if ([v5 length]
    && (([*(id *)(a1 + 32) containsObject:v5] & 1) != 0
     || ![*(id *)(a1 + 32) count]))
  {
    uint64_t v6 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
    if (!v6)
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8LL);
      int v9 = *(void **)(v8 + 40);
      *(void *)(v8 + 40) = Mutable;

      uint64_t v6 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
    }

    int v10 = (IDSServiceStatistics *)objc_claimAutoreleasedReturnValue([v6 objectForKey:v5]);
    if (!v10) {
      int v10 = objc_alloc_init(&OBJC_CLASS___IDSServiceStatistics);
    }
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKey:v5]);
    -[IDSServiceStatistics setPacketsSent:]( v10,  "setPacketsSent:",  (char *)[v11 packetsSent]
    + (void)[v12 packetsSent]
    + -[IDSServiceStatistics packetsSent](v10, "packetsSent"));
    -[IDSServiceStatistics setPacketsReceived:]( v10,  "setPacketsReceived:",  (char *)[v11 packetsReceived]
    + (void)[v12 packetsReceived]
    + -[IDSServiceStatistics packetsReceived](v10, "packetsReceived"));
    -[IDSServiceStatistics setBytesSent:]( v10,  "setBytesSent:",  (char *)[v11 bytesSent]
    + (void)[v12 bytesSent]
    + -[IDSServiceStatistics bytesSent](v10, "bytesSent"));
    -[IDSServiceStatistics setBytesReceived:]( v10,  "setBytesReceived:",  (char *)[v11 bytesReceived]
    + (void)[v12 bytesReceived]
    + -[IDSServiceStatistics bytesReceived](v10, "bytesReceived"));
    if (v10) {
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL), v5, v10);
    }
    [*(id *)(a1 + 40) removeObjectForKey:v5];
  }
}

void sub_100342C84( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100342CA4(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    uint64_t v3 = objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(a1 + 32),  "onTransportThread_PerServiceDataTransferredForDevice:services:",  *(void *)(a1 + 40),  *(void *)(a1 + 48)));
    uint64_t v4 = *(void *)(*(void *)(a1 + 56) + 8LL);
    BOOL v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;
  }

void sub_100342E7C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100342E9C(uint64_t a1)
{
  uint64_t v2 = sub_1003BBA5C(*(void *)(a1 + 32) + 8LL, *(void *)(a1 + 40));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  uint64_t v4 = v3;
  if (v3)
  {
    id v5 = [v3 connectionsTableByLocalRemotePortKey];
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_100342F40;
    v8[3] = &unk_100901AD8;
    id v6 = *(id *)(a1 + 48);
    uint64_t v7 = *(void *)(a1 + 56);
    id v9 = v6;
    uint64_t v10 = v7;
    sub_1003BB694((uint64_t)v5, (uint64_t)v8);
  }
}

void sub_100342F40(uint64_t a1, uint64_t a2, void *a3)
{
  id v18 = a3;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v18 connectionID]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 service]);

  if ([v5 length]
    && (([*(id *)(a1 + 32) containsObject:v5] & 1) != 0
     || ![*(id *)(a1 + 32) count]))
  {
    if (!*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL))
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8LL);
      uint64_t v8 = *(void **)(v7 + 40);
      *(void *)(v7 + 40) = Mutable;
    }

    id v9 = (char *)[v18 packetsSent];
    uint64_t v10 = (char *)[v18 bytesSent];
    uint64_t v11 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) objectForKey:v5]);
    if (!v11) {
      uint64_t v11 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    }
    id v12 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKey:]( v11,  "objectForKey:",  @"localDeliveryQueueStatMessageCount"));
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v11, "objectForKey:", @"localDeliveryQueueStatBytes"));
    uint64_t v14 = &v9[(void)[v12 unsignedLongLongValue]];
    uint64_t v15 = &v10[(void)[v13 unsignedLongLongValue]];
    BOOL v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v14));
    -[NSMutableDictionary setObject:forKey:](v11, "setObject:forKey:", v16, @"localDeliveryQueueStatMessageCount");

    id v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v15));
    -[NSMutableDictionary setObject:forKey:](v11, "setObject:forKey:", v17, @"localDeliveryQueueStatBytes");

    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setObject:v11 forKey:v5];
  }
}

void sub_1003432C8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1003432E8(uint64_t a1)
{
  uint64_t v2 = sub_1003BBA5C(*(void *)(a1 + 32) + 8LL, *(void *)(a1 + 40));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  uint64_t v4 = v3;
  if (v3)
  {
    id v5 = [v3 connectionsTableByLocalRemotePortKey];
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_10034338C;
    v8[3] = &unk_100901AD8;
    id v6 = *(id *)(a1 + 48);
    uint64_t v7 = *(void *)(a1 + 56);
    id v9 = v6;
    uint64_t v10 = v7;
    sub_1003BB694((uint64_t)v5, (uint64_t)v8);
  }
}

void sub_10034338C(uint64_t a1, uint64_t a2, void *a3)
{
  id v18 = a3;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v18 connectionID]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 service]);

  if ([v5 length]
    && (([*(id *)(a1 + 32) containsObject:v5] & 1) != 0
     || ![*(id *)(a1 + 32) count]))
  {
    if (!*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL))
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8LL);
      uint64_t v8 = *(void **)(v7 + 40);
      *(void *)(v7 + 40) = Mutable;
    }

    id v9 = (char *)[v18 packetsReceived];
    uint64_t v10 = (char *)[v18 bytesReceived];
    uint64_t v11 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) objectForKey:v5]);
    if (!v11) {
      uint64_t v11 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    }
    id v12 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKey:]( v11,  "objectForKey:",  @"localDeliveryQueueStatMessageCount"));
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v11, "objectForKey:", @"localDeliveryQueueStatBytes"));
    uint64_t v14 = &v9[(void)[v12 unsignedLongLongValue]];
    uint64_t v15 = &v10[(void)[v13 unsignedLongLongValue]];
    BOOL v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v14));
    -[NSMutableDictionary setObject:forKey:](v11, "setObject:forKey:", v16, @"localDeliveryQueueStatMessageCount");

    id v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v15));
    -[NSMutableDictionary setObject:forKey:](v11, "setObject:forKey:", v17, @"localDeliveryQueueStatBytes");

    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) setObject:v11 forKey:v5];
  }
}

void sub_100343660( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100343678(uint64_t a1)
{
  uint64_t v2 = sub_1003BBA5C(*(void *)(a1 + 32) + 8LL, *(void *)(a1 + 40));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  uint64_t v4 = v3;
  if (v3)
  {
    id v5 = [v3 connectionsTableByLocalRemotePortKey];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_1003437A4;
    v10[3] = &unk_100901AD8;
    id v6 = (os_log_s *)*(id *)(a1 + 48);
    uint64_t v7 = *(void *)(a1 + 56);
    uint64_t v11 = v6;
    uint64_t v12 = v7;
    sub_1003BB694((uint64_t)v5, (uint64_t)v10);
    uint64_t v8 = v11;
  }

  else
  {
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138412290;
      uint64_t v14 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "getTransmittedPacketsForDevice: cannot find device %@",  buf,  0xCu);
    }
  }
}

void sub_1003437A4(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = *(void **)(a1 + 32);
  id v8 = v4;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 connectionID]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 service]);
  LODWORD(v5) = [v5 containsObject:v7];

  if ((_DWORD)v5) {
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) += [v8 packetsSent];
  }
}

void sub_100343910( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100343928(uint64_t a1)
{
  uint64_t v2 = sub_1003BBA5C(*(void *)(a1 + 32) + 8LL, *(void *)(a1 + 40));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  id v4 = v3;
  if (v3)
  {
    id v5 = [v3 connectionsTableByLocalRemotePortKey];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_100343A54;
    v10[3] = &unk_100901AD8;
    id v6 = (os_log_s *)*(id *)(a1 + 48);
    uint64_t v7 = *(void *)(a1 + 56);
    uint64_t v11 = v6;
    uint64_t v12 = v7;
    sub_1003BB694((uint64_t)v5, (uint64_t)v10);
    id v8 = v11;
  }

  else
  {
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138412290;
      uint64_t v14 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "getTransmittedPacketsForDevice: cannot find device %@",  buf,  0xCu);
    }
  }
}

void sub_100343A54(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = *(void **)(a1 + 32);
  id v8 = v4;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 connectionID]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 service]);
  LODWORD(v5) = [v5 containsObject:v7];

  if ((_DWORD)v5) {
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) += [v8 packetsReceived];
  }
}

void sub_100343B34(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 96LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
    BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    if (v3)
    {
      if (v5)
      {
        if (*(_BYTE *)(a1 + 40)) {
          id v6 = @"YES";
        }
        else {
          id v6 = @"NO";
        }
        int v7 = 138412290;
        id v8 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "setPreferInfraWiFi %@",  (uint8_t *)&v7,  0xCu);
      }

      [*(id *)(*(void *)(a1 + 32) + 96) setPreferInfraWiFi:*(unsigned __int8 *)(a1 + 40)];
    }

    else
    {
      if (v5)
      {
        LOWORD(v7) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "setPreferInfraWiFi failed due to invalid linkManager",  (uint8_t *)&v7,  2u);
      }
    }
  }

void sub_100343CC8(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    if (*(void *)(*(void *)(a1 + 32) + 96LL))
    {
      [*(id *)(*(void *)(a1 + 32) + 96) setLinkPreferences:*(void *)(a1 + 40)];
    }

    else
    {
      uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v3 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "setLinkPreferences failed due to invalid linkManager",  v3,  2u);
      }
    }
  }

void sub_100343E04(uint64_t a1)
{
  uint64_t v2 = sub_1003BBA5C(*(void *)(a1 + 32) + 8LL, kIDSDefaultPairedDeviceID);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  if ([v3 linkLayerConnected])
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 controlChannel]);
    [v4 sendOTRNegotiationMessage:*(void *)(a1 + 40) negotiationCount:*(unsigned int *)(a1 + 56) negotiationData:*(void *)(a1 + 48)];
  }

  else
  {
    BOOL v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 40);
      int v7 = 138412290;
      uint64_t v8 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Drop OTR negotiation message for %@, link is not connected.",  (uint8_t *)&v7,  0xCu);
    }

    id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 controlChannel]);
    [v4 suspendOTRNegotiation:*(void *)(a1 + 40)];
  }
}

void sub_100343F94(uint64_t a1)
{
  uint64_t v2 = sub_1003BBA5C(*(void *)(a1 + 32) + 8LL, kIDSDefaultPairedDeviceID);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  if ([v3 linkLayerConnected])
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 controlChannel]);
    [v4 sendSuspendOTRNegotiationMessage:*(void *)(a1 + 40)];
  }

  else
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
    if (os_log_type_enabled((os_log_t)v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 40);
      int v6 = 138412290;
      uint64_t v7 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v4,  OS_LOG_TYPE_DEFAULT,  "Drop suspend OTR negotiation message for %@, link is not connected.",  (uint8_t *)&v6,  0xCu);
    }
  }
}

void sub_10034409C(const char *a1, int a2)
{
  if (a1 && *a1)
  {
    int v4 = socket(30, 2, 0);
    if (v4 == -1)
    {
      id v17 = __error();
      IDSAssertNonFatalErrnoWithSource( *v17,  "UTunController changeInterfaceAvailability socket() failed",  "/Library/Caches/com.apple.xbs/Sources/IdentityServices_Swift/IDSAgent/IDSUTunController.m",  7179LL);
      id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        *(void *)&uint8_t buf[4] = a1;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Cannot open socket for ioctl for %s on disconnect",  buf,  0xCu);
      }

      goto LABEL_23;
    }

    int v5 = v4;
    *(void *)&__int128 v6 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)buf = v6;
    __int128 v24 = v6;
    __strlcpy_chk(buf, a1, 16LL, 16LL);
    if (ioctl(v5, 0xC02069AAuLL, buf) == -1)
    {
      uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_22;
      }
      *(_DWORD *)id v19 = 136315138;
      *(void *)uint64_t v20 = a1;
      uint64_t v12 = "Cannot get interface state for %s on disconnect";
    }

    else
    {
      int v7 = BYTE3(v24);
      int v8 = a2 ^ 1;
      BYTE3(v24) = a2 ^ 1;
      int v9 = ioctl(v5, 0xC02069A9uLL, buf);
      uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
      BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
      if (v9 != -1)
      {
        if (v11)
        {
          *(_DWORD *)id v19 = 67109634;
          *(_DWORD *)uint64_t v20 = v7;
          *(_WORD *)&v20[4] = 1024;
          *(_DWORD *)&v20[6] = v8;
          __int16 v21 = 2080;
          BOOL v22 = a1;
          uint64_t v12 = "Set interface availability from %u to %u (0 is available) %s";
          uint64_t v13 = v10;
          uint32_t v14 = 24;
LABEL_21:
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, v12, v19, v14);
        }

void sub_100344B88(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    uint64_t v3 = sub_1003BBA5C(*(void *)(a1 + 32) + 8LL, kIDSDefaultPairedDeviceID);
    int v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    if ([v4 shouldUseIPsecLink])
    {
      int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "ipsec path does not require control channel encryption",  buf,  2u);
      }

      uint64_t v8 = im_primary_queue(v6, v7);
      int v9 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v8);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_100344D74;
      block[3] = &unk_1008F6010;
      void block[4] = *(void *)(a1 + 32);
      dispatch_async(v9, block);
    }

    else
    {
      int v9 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v4 controlChannel]);
      if (-[dispatch_queue_s isDefaultPairedDevicePairedLocally]( v9,  "isDefaultPairedDevicePairedLocally"))
      {
        uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController"));
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "control channel already paired", buf, 2u);
        }

        uint64_t v13 = im_primary_queue(v11, v12);
        uint32_t v14 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v13);
        v17[0] = _NSConcreteStackBlock;
        v17[1] = 3221225472LL;
        v17[2] = sub_100344DB8;
        v17[3] = &unk_1008F6010;
        v17[4] = *(void *)(a1 + 32);
        dispatch_async(v14, v17);
      }

      else if (*(void *)(a1 + 40))
      {
        -[dispatch_queue_s setIdentityPair:](v9, "setIdentityPair:");
        -[dispatch_queue_s setIsDefaultPairedDevicePairedLocally:](v9, "setIsDefaultPairedDevicePairedLocally:", 1LL);
        id v15 = sub_10033A7EC((int)-[dispatch_queue_s isDefaultPairedDevicePairedRemotely]( v9,  "isDefaultPairedDevicePairedRemotely"));
        BOOL v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
        -[dispatch_queue_s sendPriorityMessage:](v9, "sendPriorityMessage:", v16);
      }
    }
  }

void sub_100344D74(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[IDSPairingManager sharedInstance](&OBJC_CLASS___IDSPairingManager, "sharedInstance"));
  [v2 removeDelegate:*(void *)(a1 + 32)];
}

void sub_100344DB8(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[IDSPairingManager sharedInstance](&OBJC_CLASS___IDSPairingManager, "sharedInstance"));
  [v2 removeDelegate:*(void *)(a1 + 32)];
}

void sub_1003450C8(id a1)
{
  mach_timebase_info info = (mach_timebase_info)0xAAAAAAAAAAAAAAAALL;
  mach_timebase_info(&info);
  LODWORD(v2) = info.denom;
  LODWORD(v1) = info.numer;
  *(double *)&qword_1009C0B68 = (double)v1 / (double)v2 / 1000000000.0;
}

id sub_100345E68(id a1, IDSURI *a2)
{
  unint64_t v2 = a2;
  uint64_t v3 = objc_autoreleasePoolPush();
  int v4 = (void *)objc_claimAutoreleasedReturnValue(-[IDSURI tokenFreeURI](v2, "tokenFreeURI"));
  objc_autoreleasePoolPop(v3);

  return v4;
}

id sub_100345EB8(void *a1, void *a2, unsigned int a3)
{
  id v5 = a2;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([a1 prefixedURI]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@,%@,%d",  v5,  v6,  a3));

  return v7;
}

id sub_100346028(id a1, IDSURI *a2)
{
  unint64_t v2 = a2;
  uint64_t v3 = objc_autoreleasePoolPush();
  int v4 = (void *)objc_claimAutoreleasedReturnValue(-[IDSURI tokenFreeURI](v2, "tokenFreeURI"));
  objc_autoreleasePoolPop(v3);

  return v4;
}

id sub_1003462D8(id a1, IDSURI *a2)
{
  unint64_t v2 = a2;
  uint64_t v3 = objc_autoreleasePoolPush();
  int v4 = (void *)objc_claimAutoreleasedReturnValue(-[IDSURI tokenFreeURI](v2, "tokenFreeURI"));
  objc_autoreleasePoolPop(v3);

  return v4;
}

uint64_t sub_100348578(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100348588(uint64_t a1)
{
}

id sub_100348590(id a1, IDSURI *a2)
{
  return -[IDSURI prefixedURI](a2, "prefixedURI");
}

void sub_100348598(uint64_t a1, void *a2, void *a3, unint64_t a4, void *a5)
{
  id v8 = a2;
  id v9 = a3;
  id v333 = a5;
  uint64_t v347 = a1;
  [*(id *)(a1 + 32) _dequeuePendingQueryIfPossible];
  double v10 = COERCE_DOUBLE(v9);
  double v334 = v10;
  if (IMGetDomainBoolForKey(@"com.apple.registration", @"overrideQueryResponseCode"))
  {
    a4 = IMGetDomainIntForKey(@"com.apple.registration", @"queryCodeOverride");
    double v10 = COERCE_DOUBLE( objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  FTErrorDomain)));

    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
    if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT)) {
      sub_1006A8780(a4, v11);
    }
  }

  id v340 = v8;
  v344 = (void *)objc_claimAutoreleasedReturnValue([v340 responseIdentities]);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v340 responseIdentities]);
  uint64_t v14 = objc_opt_class(&OBJC_CLASS___NSDictionary, v13);
  char isKindOfClass = objc_opt_isKindOfClass(v12, v14);

  if ((isKindOfClass & 1) == 0)
  {
    uint64_t v16 = OSLogHandleForIDSCategory("Warning");
    id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      id v18 = (void *)objc_claimAutoreleasedReturnValue([v340 responseIdentities]);
      uint64_t v20 = (objc_class *)objc_opt_class(v18, v19);
      __int16 v21 = NSStringFromClass(v20);
      double v22 = COERCE_DOUBLE((id)objc_claimAutoreleasedReturnValue(v21));
      id v23 = (id)objc_claimAutoreleasedReturnValue([v340 responseIdentities]);
      *(_DWORD *)buf = 138413058;
      double v380 = v22;
      __int16 v381 = 2112;
      *(void *)v382 = v23;
      *(_WORD *)&v382[8] = 2112;
      *(double *)&v382[10] = v10;
      __int16 v383 = 2048;
      unint64_t v384 = a4;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "Response identities is not what we expected (%@ instead of NSDictionary) %@, error %@, resultCode %ld",  buf,  0x2Au);
    }

    if (os_log_shim_legacy_logging_enabled(v24))
    {
      unsigned __int8 v25 = (void *)objc_claimAutoreleasedReturnValue([v340 responseIdentities]);
      uint64_t v27 = (objc_class *)objc_opt_class(v25, v26);
      __int16 v28 = NSStringFromClass(v27);
      int8x16_t v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
      v321 = (void *)objc_claimAutoreleasedReturnValue([v340 responseIdentities]);
      _IDSWarnV( @"IDSFoundation",  @"Response identities is not what we expected (%@ instead of NSDictionary) %@, error %@, resultCode %ld");

      __int16 v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v340, "responseIdentities", v29, v321, *(void *)&v10, a4));
      __int16 v32 = (objc_class *)objc_opt_class(v30, v31);
      __int16 v33 = NSStringFromClass(v32);
      id v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
      v322 = (void *)objc_claimAutoreleasedReturnValue([v340 responseIdentities]);
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"Response identities is not what we expected (%@ instead of NSDictionary) %@, error %@, resultCode %ld");

      uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v340, "responseIdentities", v34, v322, *(void *)&v10, a4));
      uint64_t v37 = (objc_class *)objc_opt_class(v35, v36);
      id v38 = NSStringFromClass(v37);
      double v326 = v10;
      unint64_t v328 = a4;
      double v314 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue(v38));
      v320 = (__CFString *)objc_claimAutoreleasedReturnValue([v340 responseIdentities]);
      _IDSLogTransport( @"Warning",  @"IDS",  @"Response identities is not what we expected (%@ instead of NSDictionary) %@, error %@, resultCode %ld");
    }

    v344 = 0LL;
  }

  char v374 = 0;
  int v39 = sub_10019E8E0(*(void **)&v10);
  int v40 = v39;
  uint64_t v41 = *(void *)(*(void *)(v347 + 120) + 8LL);
  if (*(_BYTE *)(v41 + 24)) {
    char v42 = v39;
  }
  else {
    char v42 = 0;
  }
  *(_BYTE *)(v41 + 24) = v42;
  if (v39)
  {
    *(void *)&double v43 = (int)++*(_DWORD *)(*(void *)(*(void *)(v347 + 128) + 8LL) + 24LL);
    if ((*(void *)&v43 == 9LL || *(void *)&v43 == 4LL)
      && !+[IDSPeerIDQueryHandler isServerBackoffModeActive]( &OBJC_CLASS___IDSPeerIDQueryHandler,  "isServerBackoffModeActive",  *(void *)&v314,  v320,  *(void *)&v326,  v328))
    {
      uint64_t v44 = OSLogHandleForIDSCategory("PeerLookup");
      id v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v44);
      if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        double v380 = v43;
        _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEFAULT,  "We have suffered %ld network failures. Forcing the server bag to reload.",  buf,  0xCu);
      }

      if (os_log_shim_legacy_logging_enabled(v46)
        && _IDSShouldLog(0LL, @"PeerLookup"))
      {
        double v314 = v43;
        _IDSLogV( 0LL,  @"IDSFoundation",  @"PeerLookup",  @"We have suffered %ld network failures. Forcing the server bag to reload.");
      }

      char v47 = (void *)objc_claimAutoreleasedReturnValue( +[IDSServerBag sharedInstanceForBagType:]( &OBJC_CLASS___IDSServerBag,  "sharedInstanceForBagType:",  0LL,  *(void *)&v314));
      [v47 forceBagLoad];
    }
  }

  uint64_t v48 = OSLogHandleForIDSCategory("PeerLookup");
  id v49 = (os_log_s *)objc_claimAutoreleasedReturnValue(v48);
  if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v50 = @"NO";
    if (v40) {
      __int16 v50 = @"YES";
    }
    int v51 = *(_DWORD *)(*(void *)(*(void *)(v347 + 128) + 8LL) + 24LL);
    *(_DWORD *)buf = 138412802;
    double v380 = v10;
    __int16 v381 = 2112;
    *(void *)v382 = v50;
    *(_WORD *)&v382[8] = 1024;
    *(_DWORD *)&v382[10] = v51;
    _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_DEFAULT,  "Query completed with error %@. isNetworkError? %@ numNetworkFailures %d",  buf,  0x1Cu);
  }

  if (os_log_shim_legacy_logging_enabled(v52) && _IDSShouldLog(0LL, @"PeerLookup"))
  {
    id v53 = @"NO";
    if (v40) {
      id v53 = @"YES";
    }
    v320 = (__CFString *)v53;
    *(void *)&double v326 = *(unsigned int *)(*(void *)(*(void *)(v347 + 128) + 8LL) + 24LL);
    double v314 = v10;
    _IDSLogV( 0LL,  @"IDSFoundation",  @"PeerLookup",  @"Query completed with error %@. isNetworkError? %@ numNetworkFailures %d");
  }

  unsigned int v332 = +[IDSPeerIDQueryHandler isQueryRetryForBadSignatureEnabled]( &OBJC_CLASS___IDSPeerIDQueryHandler,  "isQueryRetryForBadSignatureEnabled",  *(void *)&v314,  v320,  *(void *)&v326);
  int v55 = v10 == 0.0 && a4 < 2;
  int v337 = sub_10019E604(*(void **)&v10, &v374);
  uint64_t v56 = *(void *)(*(void *)(v347 + 136) + 8LL);
  if (*(_BYTE *)(v56 + 24)) {
    BOOL v57 = v374 == 0;
  }
  else {
    BOOL v57 = 1;
  }
  char v58 = !v57;
  *(_BYTE *)(v56 + 24) = v58;
  id v59 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  [v59 timeIntervalSinceDate:*(void *)(v347 + 40)];
  double v61 = v60;

  if (a4 == 6003)
  {
    uint64_t v62 = OSLogHandleForIDSCategory("Warning");
    uint64_t v63 = (os_log_s *)objc_claimAutoreleasedReturnValue(v62);
    if (os_log_type_enabled(v63, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v63,  OS_LOG_TYPE_ERROR,  "Time is off, considering this an invalid result",  buf,  2u);
    }

    if (os_log_shim_legacy_logging_enabled(v64))
    {
      _IDSWarnV(@"IDSFoundation", @"Time is off, considering this an invalid result");
      _IDSLogV(0LL, @"IDSFoundation", @"Warning", @"Time is off, considering this an invalid result");
      *(void *)&double v65 = _IDSLogTransport( @"Warning",  @"IDS",  @"Time is off, considering this an invalid result").n128_u64[0];
    }

    *(double *)&uint64_t v66 = COERCE_DOUBLE( objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSPeerIDManagerErrorDomain,  3LL,  0LL,  v65)));

    int v337 = 0;
    int v55 = 0;
    double v10 = *(double *)&v66;
  }

  double v341 = v10;
  uint64_t v67 = OSLogHandleForIDSCategory("Chat");
  v68 = (os_log_s *)objc_claimAutoreleasedReturnValue(v67);
  if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v69 = *(void *)(v347 + 48);
    uint64_t v70 = *(void *)(v347 + 56);
    unint64_t v71 = *(void *)(v347 + 64);
    uint64_t v72 = *(void *)(v347 + 72);
    *(_DWORD *)buf = 134219010;
    double v380 = v61;
    __int16 v381 = 2112;
    *(void *)v382 = v69;
    *(_WORD *)&v382[8] = 2112;
    *(void *)&v382[10] = v70;
    __int16 v383 = 2112;
    unint64_t v384 = v71;
    __int16 v385 = 2112;
    *(void *)v386 = v72;
    _os_log_impl( (void *)&_mh_execute_header,  v68,  OS_LOG_TYPE_DEFAULT,  "Query time was: %f  (identifier: %@) (URIs: %@) (service: %@) (fromURI: %@)",  buf,  0x34u);
  }

  if (os_log_shim_legacy_logging_enabled(v73))
  {
    unint64_t v328 = *(void *)(v347 + 64);
    uint64_t v330 = *(void *)(v347 + 72);
    __int128 v323 = *(_OWORD *)(v347 + 48);
    double v315 = v61;
    _IDSLogEventV( @"IDSFoundation",  @"Chat",  @"Query time was: %f  (identifier: %@) (URIs: %@) (service: %@) (fromURI: %@)");
  }

  v345 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  if (v55)
  {
    v74 = objc_autoreleasePoolPush();
    v75 = (void *)objc_claimAutoreleasedReturnValue([v340 uris]);
    v372[0] = _NSConcreteStackBlock;
    v372[1] = 3221225472LL;
    v372[2] = sub_10034B1B0;
    v372[3] = &unk_1008F64D0;
    id v373 = *(id *)(v347 + 64);
    v335 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v75, "__imArrayByApplyingBlock:", v372));

    v76 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v347 + 32) delegate]);
    v77 = (void *)objc_claimAutoreleasedReturnValue( [v76 finishedQueryWithInfo:v344 forURIs:v335 fromURI:*(void *)(v347 + 72) service:*(void *)(v347 + 64)]);

    __int128 v370 = 0u;
    __int128 v371 = 0u;
    __int128 v368 = 0u;
    __int128 v369 = 0u;
    id v78 = v77;
    id v79 = [v78 countByEnumeratingWithState:&v368 objects:v387 count:16];
    if (v79)
    {
      double v342 = 0.0;
      uint64_t v80 = *(void *)v369;
      uint64_t v81 = IDSPeerIDManagerErrorDomain;
      char v346 = 1;
      do
      {
        for (i = 0LL; i != v79; i = (char *)i + 1)
        {
          if (*(void *)v369 != v80) {
            objc_enumerationMutation(v78);
          }
          uint64_t v83 = *(void *)(*((void *)&v368 + 1) + 8LL * (void)i);
          v84 = objc_autoreleasePoolPush();
          v85 = (void *)objc_claimAutoreleasedReturnValue([v78 objectForKey:v83]);
          unsigned int v86 = [v85 BOOLValue];

          if (v86)
          {
            ++*(void *)&v342;
          }

          else
          {
            if (!*(void *)(*(void *)(*(void *)(v347 + 144) + 8LL) + 40LL))
            {
              CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable( 0LL,  0LL,  &kCFTypeDictionaryKeyCallBacks,  &kCFTypeDictionaryValueCallBacks);
              uint64_t v88 = *(void *)(*(void *)(v347 + 144) + 8LL);
              v89 = *(void **)(v88 + 40);
              *(void *)(v88 + 40) = Mutable;
            }

            v90 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v81,  3LL,  0LL,  *(void *)&v315,  v323,  v328,  v330));
            [*(id *)(*(void *)(*(void *)(v347 + 144) + 8) + 40) setObject:v90 forKeyedSubscript:v83];

            char v346 = 0;
          }

          objc_autoreleasePoolPop(v84);
        }

        id v79 = [v78 countByEnumeratingWithState:&v368 objects:v387 count:16];
      }

      while (v79);
    }

    else
    {
      double v342 = 0.0;
      char v346 = 1;
    }

    -[NSMutableDictionary addEntriesFromDictionary:](v345, "addEntriesFromDictionary:", v78);
    objc_autoreleasePoolPop(v74);
  }

  else
  {
    double v342 = 0.0;
    char v346 = 0;
  }

  if (v374) {
    unsigned int v91 = 6;
  }
  else {
    unsigned int v91 = 15;
  }
  v92 = (void *)objc_claimAutoreleasedReturnValue( +[IDSPairingManager sharedInstance]( &OBJC_CLASS___IDSPairingManager,  "sharedInstance",  *(void *)&v315));
  unsigned __int8 v93 = [v92 isCurrentDeviceTinkerConfiguredWatch];

  v94 = objc_autoreleasePoolPush();
  uint64_t v95 = OSLogHandleForIDSCategory("PeerLookup");
  v96 = (os_log_s *)objc_claimAutoreleasedReturnValue(v95);
  if (os_log_type_enabled(v96, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v97 = +[IDSPeerIDQueryHandler isServerBackoffModeActive]( &OBJC_CLASS___IDSPeerIDQueryHandler,  "isServerBackoffModeActive");
    *(double *)&v98 = COERCE_DOUBLE(@"not ");
    if (v97) {
      *(double *)&v98 = COERCE_DOUBLE(&stru_100912B50);
    }
    *(_DWORD *)buf = 138412290;
    double v380 = *(double *)&v98;
    _os_log_impl((void *)&_mh_execute_header, v96, OS_LOG_TYPE_DEFAULT, " We are %@in backoff mode.", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v99) && _IDSShouldLog(0LL, @"PeerLookup"))
  {
    unsigned int v100 = +[IDSPeerIDQueryHandler isServerBackoffModeActive]( &OBJC_CLASS___IDSPeerIDQueryHandler,  "isServerBackoffModeActive");
    v101 = @"not ";
    if (v100) {
      v101 = &stru_100912B50;
    }
    v316 = v101;
    _IDSLogV(0LL, @"IDSFoundation", @"PeerLookup", @" We are %@in backoff mode.");
  }

  uint64_t v102 = OSLogHandleForIDSCategory("PeerLookup");
  v103 = (os_log_s *)objc_claimAutoreleasedReturnValue(v102);
  if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v104 = +[IDSPeerIDQueryHandler shouldUseSelfTokens](&OBJC_CLASS___IDSPeerIDQueryHandler, "shouldUseSelfTokens");
    *(double *)&v105 = COERCE_DOUBLE(@"not ");
    if (v104) {
      *(double *)&v105 = COERCE_DOUBLE(&stru_100912B50);
    }
    *(_DWORD *)buf = 138412290;
    double v380 = *(double *)&v105;
    _os_log_impl((void *)&_mh_execute_header, v103, OS_LOG_TYPE_DEFAULT, " We are %@in self session mode.", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v106) && _IDSShouldLog(0LL, @"PeerLookup"))
  {
    unsigned int v107 = +[IDSPeerIDQueryHandler shouldUseSelfTokens](&OBJC_CLASS___IDSPeerIDQueryHandler, "shouldUseSelfTokens");
    v108 = @"not ";
    if (v107) {
      v108 = &stru_100912B50;
    }
    v316 = v108;
    _IDSLogV(0LL, @"IDSFoundation", @"PeerLookup", @" We are %@in self session mode.");
  }

  *(void *)&double v336 = v91 >> v93;
  if (+[IDSPeerIDQueryHandler isServerBackoffModeActive]( &OBJC_CLASS___IDSPeerIDQueryHandler,  "isServerBackoffModeActive",  v316)
    && *(_BYTE *)(v347 + 180))
  {
    double v336 = COERCE_DOUBLE((id)+[IDSPeerIDQueryHandler serverBackoffModeMaxSenderRetries]( &OBJC_CLASS___IDSPeerIDQueryHandler,  "serverBackoffModeMaxSenderRetries"));
    uint64_t v109 = OSLogHandleForIDSCategory("PeerLookup");
    v110 = (os_log_s *)objc_claimAutoreleasedReturnValue(v109);
    if (os_log_type_enabled(v110, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v380) = LODWORD(v336);
      _os_log_impl( (void *)&_mh_execute_header,  v110,  OS_LOG_TYPE_DEFAULT,  " **** We are in backoff mode! Using override for maxRetries %d",  buf,  8u);
    }

    if (os_log_shim_legacy_logging_enabled(v111) && _IDSShouldLog(0LL, @"PeerLookup"))
    {
      double v317 = v336;
      _IDSLogV( 0LL,  @"IDSFoundation",  @"PeerLookup",  @" **** We are in backoff mode! Using override for maxRetries %d");
    }
  }

  uint64_t v112 = OSLogHandleForIDSCategory("PeerLookup");
  v113 = (os_log_s *)objc_claimAutoreleasedReturnValue(v112);
  if (os_log_type_enabled(v113, OS_LOG_TYPE_DEFAULT))
  {
    double v114 = *(double *)(v347 + 56);
    int v115 = *(_DWORD *)(*(void *)(*(void *)(v347 + 152) + 8LL) + 24LL);
    unsigned int v116 = [v340 forceCellular];
    v117 = @"NO";
    *(_DWORD *)buf = 138413570;
    double v380 = v114;
    __int16 v381 = 2112;
    if (v337) {
      v118 = @"YES";
    }
    else {
      v118 = @"NO";
    }
    if ((v346 & 1) != 0) {
      v119 = @"YES";
    }
    else {
      v119 = @"NO";
    }
    *(void *)v382 = v119;
    *(_WORD *)&v382[8] = 2112;
    if (v116) {
      v117 = @"YES";
    }
    *(double *)&v382[10] = v341;
    __int16 v383 = 2112;
    unint64_t v384 = (unint64_t)v118;
    __int16 v385 = 1024;
    *(_DWORD *)v386 = v115;
    *(_WORD *)&v386[4] = 2112;
    *(void *)&v386[6] = v117;
    _os_log_impl( (void *)&_mh_execute_header,  v113,  OS_LOG_TYPE_DEFAULT,  "Looked up %@   success: %@   error: %@   will retry: %@   retries: %d  tried force cell: %@",  buf,  0x3Au);
  }

  if (os_log_shim_legacy_logging_enabled(v120))
  {
    double v121 = *(double *)(v347 + 56);
    if ((v346 & 1) != 0) {
      v122 = @"YES";
    }
    else {
      v122 = @"NO";
    }
    if (v337) {
      v123 = @"YES";
    }
    else {
      v123 = @"NO";
    }
    uint64_t v124 = *(unsigned int *)(*(void *)(*(void *)(v347 + 152) + 8LL) + 24LL);
    else {
      v125 = @"NO";
    }
    uint64_t v330 = v124;
    v331 = v125;
    *((double *)&v323 + 1) = v341;
    unint64_t v328 = (unint64_t)v123;
    double v317 = v121;
    *(void *)&__int128 v323 = v122;
    _IDSLogEventV( @"IDSFoundation",  @"PeerLookup",  @"Looked up %@   success: %@   error: %@   will retry: %@   retries: %d  tried force cell: %@");
  }

  uint64_t v126 = OSLogHandleForIDSCategory("PeerLookup");
  v127 = (os_log_s *)objc_claimAutoreleasedReturnValue(v126);
  if (os_log_type_enabled(v127, OS_LOG_TYPE_DEFAULT))
  {
    *(double *)&v128 = COERCE_DOUBLE(@"NO");
    if ((v346 & 1) != 0) {
      *(double *)&v128 = COERCE_DOUBLE(@"YES");
    }
    *(_DWORD *)buf = 138412290;
    double v380 = *(double *)&v128;
    _os_log_impl((void *)&_mh_execute_header, v127, OS_LOG_TYPE_DEFAULT, "               Success: %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v129) && _IDSShouldLog(0LL, @"PeerLookup"))
  {
    *(double *)&v130 = COERCE_DOUBLE(@"NO");
    if ((v346 & 1) != 0) {
      *(double *)&v130 = COERCE_DOUBLE(@"YES");
    }
    double v317 = *(double *)&v130;
    _IDSLogV(0LL, @"IDSFoundation", @"PeerLookup", @"               Success: %@");
  }

  uint64_t v131 = OSLogHandleForIDSCategory("PeerLookup");
  v132 = (os_log_s *)objc_claimAutoreleasedReturnValue(v131);
  if (os_log_type_enabled(v132, OS_LOG_TYPE_DEFAULT))
  {
    v133 = (void *)objc_claimAutoreleasedReturnValue([v340 uris]);
    id v134 = [v133 count];
    *(_DWORD *)buf = 134218240;
    double v380 = v342;
    __int16 v381 = 2048;
    *(void *)v382 = v134;
    _os_log_impl((void *)&_mh_execute_header, v132, OS_LOG_TYPE_DEFAULT, "    Found identity for: %lu/%lu", buf, 0x16u);
  }

  if (os_log_shim_legacy_logging_enabled(v135) && _IDSShouldLog(0LL, @"PeerLookup"))
  {
    v136 = (void *)objc_claimAutoreleasedReturnValue([v340 uris]);
    double v317 = v342;
    *(void *)&__int128 v323 = [v136 count];
    _IDSLogV(0LL, @"IDSFoundation", @"PeerLookup", @"    Found identity for: %lu/%lu");
  }

  uint64_t v137 = OSLogHandleForIDSCategory("PeerLookup");
  v138 = (os_log_s *)objc_claimAutoreleasedReturnValue(v137);
  if (os_log_type_enabled(v138, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v139 = [v340 forceCellular];
    *(double *)&v140 = COERCE_DOUBLE(@"NO");
    if (v139) {
      *(double *)&v140 = COERCE_DOUBLE(@"YES");
    }
    *(_DWORD *)buf = 138412290;
    double v380 = *(double *)&v140;
    _os_log_impl((void *)&_mh_execute_header, v138, OS_LOG_TYPE_DEFAULT, "  Tried Force Cellular: %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v141) && _IDSShouldLog(0LL, @"PeerLookup"))
  {
    unsigned int v142 = [v340 forceCellular];
    *(double *)&v143 = COERCE_DOUBLE(@"NO");
    if (v142) {
      *(double *)&v143 = COERCE_DOUBLE(@"YES");
    }
    double v317 = *(double *)&v143;
    _IDSLogV(0LL, @"IDSFoundation", @"PeerLookup", @"  Tried Force Cellular: %@");
  }

  uint64_t v144 = OSLogHandleForTransportCategory("PeerLookup");
  v145 = (os_log_s *)objc_claimAutoreleasedReturnValue(v144);
  if (os_log_type_enabled(v145, OS_LOG_TYPE_DEFAULT))
  {
    double v146 = *(double *)(v347 + 56);
    int v147 = *(_DWORD *)(*(void *)(*(void *)(v347 + 152) + 8LL) + 24LL);
    unsigned int v148 = [v340 forceCellular];
    v149 = @"NO";
    *(_DWORD *)buf = 138413570;
    double v380 = v146;
    __int16 v381 = 2112;
    if (v337) {
      v150 = @"YES";
    }
    else {
      v150 = @"NO";
    }
    if ((v346 & 1) != 0) {
      v151 = @"YES";
    }
    else {
      v151 = @"NO";
    }
    *(void *)v382 = v151;
    *(_WORD *)&v382[8] = 2112;
    if (v148) {
      v149 = @"YES";
    }
    *(double *)&v382[10] = v341;
    __int16 v383 = 2112;
    unint64_t v384 = (unint64_t)v150;
    __int16 v385 = 1024;
    *(_DWORD *)v386 = v147;
    *(_WORD *)&v386[4] = 2112;
    *(void *)&v386[6] = v149;
    _os_log_impl( (void *)&_mh_execute_header,  v145,  OS_LOG_TYPE_DEFAULT,  "Looked up %@   success: %@   error: %@   will retry: %@   retries: %d  tried force cell: %@",  buf,  0x3Au);
  }

  uint64_t v153 = os_log_shim_legacy_logging_enabled(v152);
  if ((_DWORD)v153 && _IDSShouldLogTransport(v153))
  {
    double v154 = *(double *)(v347 + 56);
    v155 = (v346 & 1) != 0 ? @"YES" : @"NO";
    v156 = v337 ? @"YES" : @"NO";
    uint64_t v157 = *(unsigned int *)(*(void *)(*(void *)(v347 + 152) + 8LL) + 24LL);
    v158 = objc_msgSend(v340, "forceCellular", *(void *)&v317, v323, v328, v330, v331)
         ? @"YES"
         : @"NO";
    uint64_t v330 = v157;
    v331 = v158;
    *((double *)&v323 + 1) = v341;
    unint64_t v328 = (unint64_t)v156;
    double v317 = v154;
    *(void *)&__int128 v323 = v155;
    _IDSLogTransport( @"PeerLookup",  @"IDS",  @"Looked up %@   success: %@   error: %@   will retry: %@   retries: %d  tried force cell: %@");
    if (_IDSShouldLog(0LL, @"PeerLookup"))
    {
      double v159 = *(double *)(v347 + 56);
      uint64_t v160 = *(unsigned int *)(*(void *)(*(void *)(v347 + 152) + 8LL) + 24LL);
      else {
        v161 = @"NO";
      }
      uint64_t v330 = v160;
      v331 = v161;
      *((double *)&v323 + 1) = v341;
      unint64_t v328 = (unint64_t)v156;
      double v317 = v159;
      *(void *)&__int128 v323 = v155;
      _IDSLogV( 0LL,  @"IDSFoundation",  @"PeerLookup",  @"Looked up %@   success: %@   error: %@   will retry: %@   retries: %d  tried force cell: %@");
    }
  }

  uint64_t v162 = OSLogHandleForTransportCategory("PeerLookup");
  v163 = (os_log_s *)objc_claimAutoreleasedReturnValue(v162);
  if (os_log_type_enabled(v163, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    double v380 = v61;
    _os_log_impl((void *)&_mh_execute_header, v163, OS_LOG_TYPE_DEFAULT, "Query Time: %f", buf, 0xCu);
  }

  uint64_t v165 = os_log_shim_legacy_logging_enabled(v164);
  if ((_DWORD)v165)
  {
    if (_IDSShouldLogTransport(v165))
    {
      double v317 = v61;
      _IDSLogTransport(@"PeerLookup", @"IDS", @"Query Time: %f");
      if (_IDSShouldLog(0LL, @"PeerLookup"))
      {
        double v317 = v61;
        _IDSLogV(0LL, @"IDSFoundation", @"PeerLookup", @"Query Time: %f");
      }
    }
  }

  uint64_t v166 = OSLogHandleForIDSCategory("PeerLookup");
  v167 = (os_log_s *)objc_claimAutoreleasedReturnValue(v166);
  if (os_log_type_enabled(v167, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    double v380 = v61;
    _os_log_impl((void *)&_mh_execute_header, v167, OS_LOG_TYPE_DEFAULT, "            Query Time: %f", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v168) && _IDSShouldLog(0LL, @"PeerLookup"))
  {
    double v317 = v61;
    _IDSLogV(0LL, @"IDSFoundation", @"PeerLookup", @"            Query Time: %f");
  }

  uint64_t v169 = OSLogHandleForIDSCategory("PeerLookup");
  v170 = (os_log_s *)objc_claimAutoreleasedReturnValue(v169);
  if (os_log_type_enabled(v170, OS_LOG_TYPE_DEFAULT))
  {
    double v171 = *(double *)(v347 + 56);
    *(_DWORD *)buf = 138412290;
    double v380 = v171;
    _os_log_impl((void *)&_mh_execute_header, v170, OS_LOG_TYPE_DEFAULT, "                  URIs: %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v172) && _IDSShouldLog(0LL, @"PeerLookup"))
  {
    double v317 = *(double *)(v347 + 56);
    _IDSLogV(0LL, @"IDSFoundation", @"PeerLookup", @"                  URIs: %@");
  }

  uint64_t v173 = OSLogHandleForIDSCategory("PeerLookup");
  v174 = (os_log_s *)objc_claimAutoreleasedReturnValue(v173);
  if (os_log_type_enabled(v174, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v175 = IDSLoggableDescriptionForObjectOnService(v344, *(void *)(v347 + 64));
    double v176 = COERCE_DOUBLE((id)objc_claimAutoreleasedReturnValue(v175));
    *(_DWORD *)buf = 138412290;
    double v380 = v176;
    _os_log_impl((void *)&_mh_execute_header, v174, OS_LOG_TYPE_DEFAULT, "    responseIdentities: %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v177) && _IDSShouldLog(0LL, @"PeerLookup"))
  {
    uint64_t v178 = IDSLoggableDescriptionForObjectOnService(v344, *(void *)(v347 + 64));
    double v317 = COERCE_DOUBLE(objc_claimAutoreleasedReturnValue(v178));
    _IDSLogV(0LL, @"IDSFoundation", @"PeerLookup", @"    responseIdentities: %@");
  }

  uint64_t v179 = OSLogHandleForIDSCategory("PeerLookup");
  v180 = (os_log_s *)objc_claimAutoreleasedReturnValue(v179);
  if (os_log_type_enabled(v180, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    double v380 = v341;
    _os_log_impl((void *)&_mh_execute_header, v180, OS_LOG_TYPE_DEFAULT, "                 error: %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v181) && _IDSShouldLog(0LL, @"PeerLookup"))
  {
    double v317 = v341;
    _IDSLogV(0LL, @"IDSFoundation", @"PeerLookup", @"                 error: %@");
  }

  uint64_t v182 = OSLogHandleForIDSCategory("PeerLookup");
  v183 = (os_log_s *)objc_claimAutoreleasedReturnValue(v182);
  if (os_log_type_enabled(v183, OS_LOG_TYPE_DEFAULT))
  {
    v184 = @"NO";
    if (v337) {
      *(double *)&v185 = COERCE_DOUBLE(@"YES");
    }
    else {
      *(double *)&v185 = COERCE_DOUBLE(@"NO");
    }
    int v186 = *(_DWORD *)(*(void *)(*(void *)(v347 + 152) + 8LL) + 24LL);
    if (v374) {
      v184 = @"YES";
    }
    *(_DWORD *)buf = 138412802;
    double v380 = *(double *)&v185;
    __int16 v381 = 1024;
    *(_DWORD *)v382 = v186;
    *(_WORD *)&v382[4] = 2112;
    *(void *)&v382[6] = v184;
    _os_log_impl( (void *)&_mh_execute_header,  v183,  OS_LOG_TYPE_DEFAULT,  "           shouldRetry: %@   retries: %d   wasOffline: %@",  buf,  0x1Cu);
  }

  if (os_log_shim_legacy_logging_enabled(v187) && _IDSShouldLog(0LL, @"PeerLookup"))
  {
    v188 = @"NO";
    if (v337) {
      *(double *)&v189 = COERCE_DOUBLE(@"YES");
    }
    else {
      *(double *)&v189 = COERCE_DOUBLE(@"NO");
    }
    if (v374) {
      v188 = @"YES";
    }
    *(void *)&__int128 v323 = *(unsigned int *)(*(void *)(*(void *)(v347 + 152) + 8LL) + 24LL);
    *((void *)&v323 + 1) = v188;
    double v317 = *(double *)&v189;
    _IDSLogV( 0LL,  @"IDSFoundation",  @"PeerLookup",  @"           shouldRetry: %@   retries: %d   wasOffline: %@");
  }

  uint64_t v190 = OSLogHandleForIDSCategory("PeerLookup");
  v191 = (os_log_s *)objc_claimAutoreleasedReturnValue(v190);
  if (os_log_type_enabled(v191, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    LODWORD(v380) = LODWORD(v336);
    _os_log_impl((void *)&_mh_execute_header, v191, OS_LOG_TYPE_DEFAULT, "            maxRetries: %d", buf, 8u);
  }

  if (os_log_shim_legacy_logging_enabled(v192) && _IDSShouldLog(0LL, @"PeerLookup"))
  {
    double v317 = v336;
    _IDSLogV(0LL, @"IDSFoundation", @"PeerLookup", @"            maxRetries: %d");
  }

  uint64_t v193 = OSLogHandleForIDSCategory("PeerLookup");
  v194 = (os_log_s *)objc_claimAutoreleasedReturnValue(v193);
  if (os_log_type_enabled(v194, OS_LOG_TYPE_DEFAULT))
  {
    *(double *)&v195 = COERCE_DOUBLE(@"NO");
    if (a4 == 6003) {
      *(double *)&v195 = COERCE_DOUBLE(@"YES");
    }
    *(_DWORD *)buf = 138412290;
    double v380 = *(double *)&v195;
    _os_log_impl((void *)&_mh_execute_header, v194, OS_LOG_TYPE_DEFAULT, "         Timestamp off: %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v196) && _IDSShouldLog(0LL, @"PeerLookup"))
  {
    *(double *)&v197 = COERCE_DOUBLE(@"NO");
    if (a4 == 6003) {
      *(double *)&v197 = COERCE_DOUBLE(@"YES");
    }
    double v317 = *(double *)&v197;
    _IDSLogV(0LL, @"IDSFoundation", @"PeerLookup", @"         Timestamp off: %@");
  }

  objc_autoreleasePoolPop(v94);
  v198 = (void *)objc_claimAutoreleasedReturnValue([*(id *)&v341 domain]);
  unsigned int v199 = [v198 isEqualToString:NSPOSIXErrorDomain];

  v200 = (void *)objc_claimAutoreleasedReturnValue([*(id *)&v341 domain]);
  if ([v200 isEqualToString:NSURLErrorDomain])
  {
    unsigned int v201 = 1;
  }

  else
  {
    v202 = (void *)objc_claimAutoreleasedReturnValue([*(id *)&v341 domain]);
    unsigned int v201 = [v202 isEqualToString:kCFErrorDomainCFNetwork];
  }

  v203 = (void *)objc_claimAutoreleasedReturnValue(+[FTNetworkSupport sharedInstance](&OBJC_CLASS___FTNetworkSupport, "sharedInstance"));
  unsigned int v204 = [v203 wiFiActiveAndReachable];

  uint64_t v205 = 1LL;
  if (v204) {
    unsigned int v206 = 2;
  }
  else {
    unsigned int v206 = 1;
  }
  if ((v346 & 1) == 0) {
    uint64_t v205 = sub_10019EA40(a4);
  }
  BOOL v339 = a4 == 6005;
  unsigned __int8 v207 = objc_msgSend(v340, "hasAttemptedAPSDelivery", *(void *)&v317, v323, v328, v330, v331);
  if ([v340 deliveryMechanism] == (id)1) {
    uint64_t v208 = 3LL;
  }
  else {
    uint64_t v208 = v206;
  }
  if (v201) {
    int v209 = 2;
  }
  else {
    int v209 = 1;
  }
  if (v199) {
    unsigned int v210 = 3;
  }
  else {
    unsigned int v210 = v209;
  }
  if (v341 == 0.0) {
    uint64_t v211 = 0LL;
  }
  else {
    uint64_t v211 = v210;
  }
  id v212 = objc_alloc(&OBJC_CLASS___IDSQueryCompletionMetric);
  uint64_t v213 = *(void *)(v347 + 64);
  uint64_t v214 = *(unsigned int *)(v347 + 176);
  BYTE1(v324) = [v344 count] == 0;
  LOBYTE(v324) = v207;
  id v343 = [v212 initWithService:v213 querySuccess:v346 & 1 connectionType:v208 queryTimeInterval:v214 queryURITypes:v205 conferenceResultCode:v211 queryErrorTy pe:v61 queryError:*(void *)&v341 wasReversePushAttempted:v324 hasEmptyResult:*(void *)(v347 + 80) queryReason:*(int *)(*(void *)(*(void *)(v347 + 152) + 8) + 24) retryCount:objc_msgSend(*(id *)(v347 + 88) uriCount:"count")];
  v215 = (void *)objc_claimAutoreleasedReturnValue(+[IDSCoreAnalyticsLogger defaultLogger](&OBJC_CLASS___IDSCoreAnalyticsLogger, "defaultLogger"));
  [v215 logMetric:v343];

  if (!v339)
  {
    int v226 = 0;
    goto LABEL_261;
  }

  if (v332)
  {
    v216 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
    uint64_t v217 = *(void *)(v347 + 64);
    v218 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v347 + 72) prefixedURI]);
    v219 = (void *)objc_claimAutoreleasedReturnValue([v216 deviceCertificateForService:v217 uri:v218]);

    if (v219)
    {
      v220 = (void *)objc_claimAutoreleasedReturnValue([v340 IDCertificate]);
      unsigned __int8 v221 = [v219 isEqualToData:v220];

      if ((v221 & 1) == 0)
      {
        int v222 = *(_DWORD *)(*(void *)(*(void *)(v347 + 160) + 8LL) + 24LL);
        BOOL v223 = v222 < +[IDSPeerIDQueryHandler queryRetryNumberForBadSignature]( &OBJC_CLASS___IDSPeerIDQueryHandler,  "queryRetryNumberForBadSignature");
        v224 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog queryRetry](&OBJC_CLASS___IMRGLog, "queryRetry"));
        BOOL v225 = os_log_type_enabled(v224, OS_LOG_TYPE_DEFAULT);
        if (v223)
        {
          if (v225)
          {
            *(_WORD *)buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v224,  OS_LOG_TYPE_DEFAULT,  "Query used old certificate, retrying",  buf,  2u);
          }

          [v340 setIDCertificate:v219];
          ++*(_DWORD *)(*(void *)(*(void *)(v347 + 160) + 8LL) + 24LL);
          int v226 = 1;
          goto LABEL_260;
        }

        if (v225)
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v224,  OS_LOG_TYPE_DEFAULT,  "Retries exhausted, not retrying",  buf,  2u);
        }
      }
    }
  }

  else
  {
    v219 = (void *)objc_claimAutoreleasedReturnValue(+[IMRGLog queryRetry](&OBJC_CLASS___IMRGLog, "queryRetry"));
    if (os_log_type_enabled((os_log_t)v219, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v219,  OS_LOG_TYPE_DEFAULT,  "Server has disabled bad query signature recovery",  buf,  2u);
    }
  }

  int v226 = 0;
LABEL_260:

LABEL_261:
  if (v346 & 1 | ((v337 & 1) == 0))
  {
    if (!v226)
    {
LABEL_263:
      if (((*(void *)&v341 == 0LL) & v346) != 0)
      {
        double v341 = 0.0;
      }

      else
      {
        v260 = (void *)objc_claimAutoreleasedReturnValue([*(id *)&v341 domain]);
        unsigned int v261 = [v260 isEqualToString:FTErrorDomain];

        if (v261)
        {
          uint64_t v262 = *(void *)(v347 + 96);
          if (v262)
          {
            id v263 = (id)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObject:forKey:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObject:forKey:",  v262,  IDSPeerIDManagerFromIdentityUserInfoKey));
          }

          else
          {
            id v263 = 0LL;
          }

          *(double *)&uint64_t v264 = COERCE_DOUBLE( objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( NSError,  "errorWithDomain:code:userInfo:",  FTErrorDomain,  [*(id *)&v341 code],  v263)));

          double v341 = *(double *)&v264;
        }

        if (!*(void *)(*(void *)(*(void *)(v347 + 144) + 8LL) + 40LL))
        {
          CFMutableDictionaryRef v265 = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
          uint64_t v266 = *(void *)(*(void *)(v347 + 144) + 8LL);
          v267 = *(void **)(v266 + 40);
          *(void *)(v266 + 40) = v265;
        }

        __int128 v362 = 0u;
        __int128 v363 = 0u;
        __int128 v360 = 0u;
        __int128 v361 = 0u;
        v268 = (void *)objc_claimAutoreleasedReturnValue([v340 uris]);
        id v269 = [v268 countByEnumeratingWithState:&v360 objects:v378 count:16];
        if (v269)
        {
          uint64_t v270 = *(void *)v361;
          do
          {
            for (j = 0LL; j != v269; j = (char *)j + 1)
            {
              if (*(void *)v361 != v270) {
                objc_enumerationMutation(v268);
              }
              v272 = (void *)objc_claimAutoreleasedReturnValue( +[IDSURI URIWithPrefixedURI:]( &OBJC_CLASS___IDSURI,  "URIWithPrefixedURI:",  *(void *)(*((void *)&v360 + 1) + 8LL * (void)j)));
              if (v341 != 0.0) {
                [*(id *)(*(void *)(*(void *)(v347 + 144) + 8) + 40) setObject:*(void *)&v341 forKeyedSubscript:v272];
              }
            }

            id v269 = [v268 countByEnumeratingWithState:&v360 objects:v378 count:16];
          }

          while (v269);
        }
      }

      v273 = (void *)objc_claimAutoreleasedReturnValue(+[IMMobileNetworkManager sharedInstance](&OBJC_CLASS___IMMobileNetworkManager, "sharedInstance"));
      [v273 removeFastDormancyDisableToken:*(void *)(v347 + 104)];

      uint64_t v274 = OSLogHandleForIDSCategory("PeerLookup");
      v275 = (os_log_s *)objc_claimAutoreleasedReturnValue(v274);
      if (os_log_type_enabled(v275, OS_LOG_TYPE_DEFAULT))
      {
        v276 = @"NO";
        if ((v346 & 1) != 0) {
          v277 = @"YES";
        }
        else {
          v277 = @"NO";
        }
        double v278 = *(double *)(v347 + 112);
        if (*(_BYTE *)(*(void *)(*(void *)(v347 + 120) + 8LL) + 24LL)) {
          v279 = @"YES";
        }
        else {
          v279 = @"NO";
        }
        if (*(_BYTE *)(*(void *)(*(void *)(v347 + 136) + 8LL) + 24LL)) {
          v276 = @"YES";
        }
        *(_DWORD *)buf = 138413058;
        double v380 = v278;
        __int16 v381 = 2112;
        *(void *)v382 = v277;
        *(_WORD *)&v382[8] = 2112;
        *(void *)&v382[10] = v279;
        __int16 v383 = 2112;
        unint64_t v384 = (unint64_t)v276;
        _os_log_impl( (void *)&_mh_execute_header,  v275,  OS_LOG_TYPE_DEFAULT,  "  All done query set for: %@   success: %@  allNetworkFailures: %@  entirelyOffline: %@",  buf,  0x2Au);
      }

      if (os_log_shim_legacy_logging_enabled(v280))
      {
        v281 = @"NO";
        if ((v346 & 1) != 0) {
          v282 = @"YES";
        }
        else {
          v282 = @"NO";
        }
        if (*(_BYTE *)(*(void *)(*(void *)(v347 + 120) + 8LL) + 24LL)) {
          v283 = @"YES";
        }
        else {
          v283 = @"NO";
        }
        if (*(_BYTE *)(*(void *)(*(void *)(v347 + 136) + 8LL) + 24LL)) {
          v281 = @"YES";
        }
        v327 = v283;
        v329 = v281;
        double v318 = *(double *)(v347 + 112);
        v325 = v282;
        _IDSLogEventV( @"IDSFoundation",  @"PeerLookup",  @"  All done query set for: %@   success: %@  allNetworkFailures: %@  entirelyOffline: %@");
      }

      if (objc_msgSend(*(id *)(v347 + 88), "count", *(void *)&v318, v325, v327, v329)
        && *(_BYTE *)(*(void *)(*(void *)(v347 + 120) + 8LL) + 24LL)
        && !+[IDSPeerIDQueryHandler isServerBackoffModeActive]( &OBJC_CLASS___IDSPeerIDQueryHandler,  "isServerBackoffModeActive"))
      {
        uint64_t v284 = OSLogHandleForIDSCategory("PeerLookup");
        v285 = (os_log_s *)objc_claimAutoreleasedReturnValue(v284);
        if (os_log_type_enabled(v285, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v285,  OS_LOG_TYPE_DEFAULT,  " **** Every failure was a network failure - forcing the bag to reload",  buf,  2u);
        }

        if (os_log_shim_legacy_logging_enabled(v286)
          && _IDSShouldLog(0LL, @"PeerLookup"))
        {
          _IDSLogV( 0LL,  @"IDSFoundation",  @"PeerLookup",  @" **** Every failure was a network failure - forcing the bag to reload");
        }

        v287 = (void *)objc_claimAutoreleasedReturnValue( +[IDSServerBag sharedInstanceForBagType:]( &OBJC_CLASS___IDSServerBag,  "sharedInstanceForBagType:",  0LL));
        [v287 forceBagLoad];
      }

      v259 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      __int128 v358 = 0u;
      __int128 v359 = 0u;
      __int128 v356 = 0u;
      __int128 v357 = 0u;
      id v288 = *(id *)(v347 + 112);
      id v289 = [v288 countByEnumeratingWithState:&v356 objects:v377 count:16];
      if (v289)
      {
        uint64_t v290 = *(void *)v357;
        do
        {
          for (k = 0LL; k != v289; k = (char *)k + 1)
          {
            if (*(void *)v357 != v290) {
              objc_enumerationMutation(v288);
            }
            v292 = *(void **)(*((void *)&v356 + 1) + 8LL * (void)k);
            v293 = objc_autoreleasePoolPush();
            v294 = (void *)objc_claimAutoreleasedReturnValue([v292 tokenFreeURI]);
            v295 = (void *)objc_claimAutoreleasedReturnValue([v294 prefixedURI]);

            v296 = (void *)objc_claimAutoreleasedReturnValue([v344 _dictionaryForKey:v295]);
            v297 = (void *)objc_claimAutoreleasedReturnValue([v296 _numberForKey:@"negative-cache-ttl-seconds"]);

            if (v297) {
              CFDictionarySetValue((CFMutableDictionaryRef)v259, v295, v297);
            }

            objc_autoreleasePoolPop(v293);
          }

          id v289 = [v288 countByEnumeratingWithState:&v356 objects:v377 count:16];
        }

        while (v289);
      }

      v298 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(v347 + 32) _completionBlocksForURIs:*(void *)(v347 + 112) fromURI:*(void *)(v347 + 72) fromService:*(void *)(v347 + 64) forRefresh:*(unsigned __int8 *)(v347 + 181)]);
      id v299 = [v298 copy];

      __int128 v354 = 0u;
      __int128 v355 = 0u;
      __int128 v352 = 0u;
      __int128 v353 = 0u;
      id v300 = v299;
      id v301 = [v300 countByEnumeratingWithState:&v352 objects:v376 count:16];
      if (v301)
      {
        uint64_t v302 = *(void *)v353;
        do
        {
          for (m = 0LL; m != v301; m = (char *)m + 1)
          {
            if (*(void *)v353 != v302) {
              objc_enumerationMutation(v300);
            }
            (*(void (**)(void, void))(*(void *)(*((void *)&v352 + 1) + 8LL * (void)m) + 16LL))( *(void *)(*((void *)&v352 + 1) + 8LL * (void)m),  *(void *)(v347 + 72));
          }

          id v301 = [v300 countByEnumeratingWithState:&v352 objects:v376 count:16];
        }

        while (v301);
      }

      v304 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(v347 + 32) + 40) allValues]);
      id v305 = [v304 copy];

      __int128 v350 = 0u;
      __int128 v351 = 0u;
      __int128 v348 = 0u;
      __int128 v349 = 0u;
      id v306 = v305;
      id v307 = [v306 countByEnumeratingWithState:&v348 objects:v375 count:16];
      if (v307)
      {
        uint64_t v308 = *(void *)v349;
        do
        {
          for (n = 0LL; n != v307; n = (char *)n + 1)
          {
            if (*(void *)v349 != v308) {
              objc_enumerationMutation(v306);
            }
            (*(void (**)(void, void))(*(void *)(*((void *)&v348 + 1) + 8LL * (void)n) + 16LL))( *(void *)(*((void *)&v348 + 1) + 8LL * (void)n),  *(void *)(v347 + 72));
          }

          id v307 = [v306 countByEnumeratingWithState:&v348 objects:v375 count:16];
        }

        while (v307);
      }

      [*(id *)(v347 + 32) _removeCompletionBlocksForURIs:*(void *)(v347 + 112) fromURI:*(void *)(v347 + 72) fromService:*(void *)(v347 + 64) forRefresh:*(unsigned __int8 *)(v347 + 181)];
      uint64_t v310 = *(void *)(*(void *)(v347 + 144) + 8LL);
      v311 = *(void **)(v310 + 40);
      *(void *)(v310 + 40) = 0LL;

      uint64_t v312 = *(void *)(*(void *)(v347 + 168) + 8LL);
      v313 = *(void **)(v312 + 40);
      *(void *)(v312 + 40) = 0LL;

      goto LABEL_392;
    }
  }

  else
  {
    if (*(_DWORD *)(*(void *)(*(void *)(v347 + 152) + 8LL) + 24LL) < SLODWORD(v336)) {
      char v227 = 1;
    }
    else {
      char v227 = v226;
    }
    if ((v227 & 1) == 0) {
      goto LABEL_263;
    }
  }

  uint64_t v228 = *(void *)(*(void *)(v347 + 144) + 8LL);
  v229 = *(void **)(v228 + 40);
  *(void *)(v228 + 40) = 0LL;

  uint64_t v230 = v347 + 152;
  ++*(_DWORD *)(*(void *)(*(void *)(v347 + 152) + 8LL) + 24LL);
  if (v374) {
    double v231 = 20.0;
  }
  else {
    double v231 = 5.0;
  }
  if (v374) {
    double v232 = 10.0;
  }
  else {
    double v232 = 3.0;
  }
  int v233 = *(_DWORD *)(*(void *)(*(void *)v230 + 8LL) + 24LL);
  objc_msgSend(v340, "setForceCellular:", objc_msgSend(v340, "forceCellular") ^ 1);
  if (v374) {
    double v234 = 120.0;
  }
  else {
    double v234 = 30.0;
  }
  else {
    double v235 = v234;
  }
  if (v231 >= v235) {
    double v236 = v231;
  }
  else {
    double v236 = v235;
  }
  +[IDSPeerIDQueryHandler queryRetryIntervalForBadSignature]( &OBJC_CLASS___IDSPeerIDQueryHandler,  "queryRetryIntervalForBadSignature");
  double v238 = v237;
  uint64_t v239 = OSLogHandleForIDSCategory("PeerLookup");
  v240 = (os_log_s *)objc_claimAutoreleasedReturnValue(v239);
  if (os_log_type_enabled(v240, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    double v380 = v234;
    _os_log_impl((void *)&_mh_execute_header, v240, OS_LOG_TYPE_DEFAULT, " Max Query Interval: %f", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v241) && _IDSShouldLog(0LL, @"PeerLookup"))
  {
    double v318 = v234;
    _IDSLogV(0LL, @"IDSFoundation", @"PeerLookup", @" Max Query Interval: %f");
  }

  uint64_t v242 = OSLogHandleForIDSCategory("PeerLookup");
  v243 = (os_log_s *)objc_claimAutoreleasedReturnValue(v242);
  if (os_log_type_enabled(v243, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    double v380 = v232;
    _os_log_impl((void *)&_mh_execute_header, v243, OS_LOG_TYPE_DEFAULT, "   Query Multiplier: %f", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v244) && _IDSShouldLog(0LL, @"PeerLookup"))
  {
    double v318 = v232;
    _IDSLogV(0LL, @"IDSFoundation", @"PeerLookup", @"   Query Multiplier: %f");
  }

  uint64_t v245 = OSLogHandleForIDSCategory("PeerLookup");
  v246 = (os_log_s *)objc_claimAutoreleasedReturnValue(v245);
  if (os_log_type_enabled(v246, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    double v380 = v231;
    _os_log_impl((void *)&_mh_execute_header, v246, OS_LOG_TYPE_DEFAULT, " Base Retry Interval: %f", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v247) && _IDSShouldLog(0LL, @"PeerLookup"))
  {
    double v318 = v231;
    _IDSLogV(0LL, @"IDSFoundation", @"PeerLookup", @" Base Retry Interval: %f");
  }

  uint64_t v248 = OSLogHandleForIDSCategory("PeerLookup");
  v249 = (os_log_s *)objc_claimAutoreleasedReturnValue(v248);
  if (os_log_type_enabled(v249, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    double v380 = v231 * ((double)v233 / 15.0 * v232 + 1.0);
    _os_log_impl((void *)&_mh_execute_header, v249, OS_LOG_TYPE_DEFAULT, "      Retry Interval: %f", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v250) && _IDSShouldLog(0LL, @"PeerLookup"))
  {
    double v318 = v231 * ((double)v233 / 15.0 * v232 + 1.0);
    _IDSLogV(0LL, @"IDSFoundation", @"PeerLookup", @"      Retry Interval: %f");
  }

  if (+[IDSPeerIDQueryHandler isServerBackoffModeActive]( &OBJC_CLASS___IDSPeerIDQueryHandler,  "isServerBackoffModeActive",  *(void *)&v318)
    && !*(_BYTE *)(v347 + 180))
  {
    double v236 = (double)+[IDSPeerIDQueryHandler serverBackoffModeReceiverRetryInterval]( &OBJC_CLASS___IDSPeerIDQueryHandler,  "serverBackoffModeReceiverRetryInterval");
    uint64_t v251 = OSLogHandleForIDSCategory("PeerLookup");
    v252 = (os_log_s *)objc_claimAutoreleasedReturnValue(v251);
    if (os_log_type_enabled(v252, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      double v380 = v236;
      _os_log_impl( (void *)&_mh_execute_header,  v252,  OS_LOG_TYPE_DEFAULT,  " **** We are in backoff mode! Overriding retry interval %f",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v253) && _IDSShouldLog(0LL, @"PeerLookup"))
    {
      double v319 = v236;
      _IDSLogV( 0LL,  @"IDSFoundation",  @"PeerLookup",  @" **** We are in backoff mode! Overriding retry interval %f");
    }

    double v238 = (double)+[IDSPeerIDQueryHandler serverBackoffModeReceiverRetryInterval]( &OBJC_CLASS___IDSPeerIDQueryHandler,  "serverBackoffModeReceiverRetryInterval",  *(void *)&v319);
  }

  if (!v226) {
    double v238 = v236;
  }
  uint64_t v254 = OSLogHandleForIDSCategory("PeerLookup");
  v255 = (os_log_s *)objc_claimAutoreleasedReturnValue(v254);
  if (os_log_type_enabled(v255, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    double v380 = v238;
    _os_log_impl((void *)&_mh_execute_header, v255, OS_LOG_TYPE_DEFAULT, " ** Will retry in: %f", buf, 0xCu);
  }

  v364[0] = _NSConcreteStackBlock;
  v364[1] = 3221225472LL;
  v364[2] = sub_10034B1C8;
  v364[3] = &unk_1008F5F58;
  v365 = (NSMutableDictionary *)v340;
  id v257 = *(id *)(v347 + 56);
  uint64_t v258 = *(void *)(v347 + 32);
  id v366 = v257;
  uint64_t v367 = v258;
  im_dispatch_after_primary_queue(v364, v238);

  v259 = v365;
LABEL_392:
}

IDSURI *sub_10034B1B0(uint64_t a1, uint64_t a2)
{
  return +[IDSURI URIWithPrefixedURI:withServiceLoggingHint:]( &OBJC_CLASS___IDSURI,  "URIWithPrefixedURI:withServiceLoggingHint:",  a2,  *(void *)(a1 + 32));
}

id sub_10034B1C8(uint64_t a1)
{
  unint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NetworkChangeNotifier sharedInstance](&OBJC_CLASS___NetworkChangeNotifier, "sharedInstance"));
  id v3 = [v2 linkQualityForInterfaceType:2];

  if (v3 != (id)2)
  {
    uint64_t v4 = OSLogHandleForIDSCategory("PeerLookup");
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  " ** WiFi link quality is not good, requesting cellular preferred",  buf,  2u);
    }

    if (os_log_shim_legacy_logging_enabled(v6) && _IDSShouldLog(0LL, @"PeerLookup")) {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"PeerLookup",  @" ** WiFi link quality is not good, requesting cellular preferred");
    }
    [*(id *)(a1 + 32) setForceCellular:1];
  }

  uint64_t v7 = OSLogHandleForIDSCategory("PeerLookup");
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1 + 40);
    *(_DWORD *)buf = 138412290;
    uint64_t v18 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, " => Retrying query for URIs: %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v10) && _IDSShouldLog(0LL, @"PeerLookup"))
  {
    uint64_t v16 = *(void *)(a1 + 40);
    _IDSLogV(0LL, @"IDSFoundation", @"PeerLookup", @" => Retrying query for URIs: %@");
  }

  uint64_t v11 = OSLogHandleForIDSCategory("PeerLookup");
  uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v13 = *(void *)(a1 + 40);
    *(_DWORD *)buf = 138412290;
    uint64_t v18 = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, " => Retrying query for URIs: %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v14) && _IDSShouldLog(0LL, @"PeerLookup"))
  {
    uint64_t v16 = *(void *)(a1 + 40);
    _IDSLogV(0LL, @"IDSFoundation", @"PeerLookup", @" => Retrying query for URIs: %@");
  }

  return objc_msgSend(*(id *)(*(void *)(a1 + 48) + 16), "sendMessage:", *(void *)(a1 + 32), v16);
}

id sub_10034B470(uint64_t a1)
{
  return [*(id *)(a1 + 32) _dequeuePendingQueryIfPossible];
}

void sub_10034C090(id a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v7 = OSLogHandleForIDSCategory("Attachments");
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218496;
    unint64_t v11 = a2;
    __int16 v12 = 2048;
    unint64_t v13 = a3;
    __int16 v14 = 2048;
    unint64_t v15 = a4;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Send attachment message progress updated to %lld of %lld (%lld bps)",  buf,  0x20u);
  }

  if (os_log_shim_legacy_logging_enabled(v9))
  {
    if (_IDSShouldLog(0LL, @"Attachments")) {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Attachments",  @"Send attachment message progress updated to %lld of %lld (%lld bps)");
    }
  }

void sub_10034C1B8( uint64_t a1, void *a2, int a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, uint64_t a10)
{
  id v17 = a2;
  id v18 = a4;
  id v56 = a5;
  id value = a6;
  id v59 = a7;
  id v19 = a8;
  id v57 = a9;
  char v58 = v17;
  if (a3)
  {
    uint64_t v20 = OSLogHandleForIDSCategory("Attachments");
    __int16 v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v69 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Succeeded uploading file transfer: %@",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v22) && _IDSShouldLog(0LL, @"Attachments"))
    {
      id v55 = v17;
      _IDSLogV(0LL, @"IDSFoundation", @"Attachments", @"Succeeded uploading file transfer: %@");
    }

    id v23 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    uint64_t v24 = (__CFDictionary *)v23;
    if (value) {
      CFDictionarySetValue((CFMutableDictionaryRef)v23, @"mmcs-owner", value);
    }
    if (v19) {
      CFDictionarySetValue(v24, @"mmcs-url", v19);
    }
    unsigned __int8 v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v59, "__imHexString", v55));
    if (v25) {
      CFDictionarySetValue(v24, @"mmcs-signature-hex", v25);
    }

    uint64_t v26 = objc_alloc_init(&OBJC_CLASS___IDSAttachmentEncryptionParameter);
    uint64_t v27 = JWEncodeDictionary(v24);
    __int16 v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
    -[IDSAttachmentEncryptionParameter setDataToEncrypt:](v26, "setDataToEncrypt:", v28);

    uint64_t v32 = IMSingleObjectArray(*(void *)(a1 + 32), v29, v30, v31);
    __int16 v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
    -[IDSAttachmentEncryptionParameter setEndpoints:](v26, "setEndpoints:", v33);

    -[IDSAttachmentEncryptionParameter setGuid:](v26, "setGuid:", *(void *)(a1 + 40));
    -[IDSAttachmentEncryptionParameter setEncryptionType:](v26, "setEncryptionType:", *(void *)(a1 + 88));
    -[IDSAttachmentEncryptionParameter setFromID:](v26, "setFromID:", *(void *)(a1 + 48));
    -[IDSAttachmentEncryptionParameter setService:](v26, "setService:", *(void *)(a1 + 56));
    id v34 = objc_alloc(&OBJC_CLASS___IDSEncryptionComponent);
    uint64_t v35 = *(void **)(a1 + 64);
    uint64_t v36 = v35[1];
    uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([v35 pinnedIdentityController]);
    id v38 = -[IDSEncryptionComponent initWithEncryptionController:pinnedIdentityController:]( v34,  "initWithEncryptionController:pinnedIdentityController:",  v36,  v37);

    uint64_t v67 = v38;
    int v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v67, 1LL));
    id v40 = (id)objc_claimAutoreleasedReturnValue( +[IDSPipelineComponent pipelineFromComponents:]( &OBJC_CLASS___IDSPipelineComponent,  "pipelineFromComponents:",  v39));

    uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue([v40 runWithInput:v26]);
    v62[0] = _NSConcreteStackBlock;
    v62[1] = 3221225472LL;
    v62[2] = sub_10034C7E4;
    v62[3] = &unk_100901C18;
    id v63 = *(id *)(a1 + 72);
    id v64 = *(id *)(a1 + 80);
    id v65 = *(id *)(a1 + 32);
    uint64_t v66 = a10;
    [v41 registerResultBlock:v62];
  }

  else
  {
    uint64_t v42 = OSLogHandleForIDSCategory("Attachments");
    double v43 = (os_log_s *)objc_claimAutoreleasedReturnValue(v42);
    if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v44 = *(void **)(a1 + 72);
      *(_DWORD *)buf = 138412290;
      id v69 = v44;
      _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEFAULT,  "Failed uploading attachment file transfer: %@",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v45) && _IDSShouldLog(0LL, @"Attachments"))
    {
      id v55 = *(id *)(a1 + 72);
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Attachments",  @"Failed uploading attachment file transfer: %@");
    }

    uint64_t v46 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    uint64_t v24 = (__CFDictionary *)v46;
    if (v19) {
      CFDictionarySetValue((CFMutableDictionaryRef)v46, @"url", v19);
    }
    char v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "domain", v55));
    if (v47) {
      CFDictionarySetValue(v24, @"eD", v47);
    }

    uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [v18 code]));
    if (v48) {
      CFDictionarySetValue(v24, @"eC", v48);
    }

    id v49 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a10));
    if (v49) {
      CFDictionarySetValue(v24, @"fS", v49);
    }

    uint64_t v26 = -[NSDictionary initWithObjectsAndKeys:]( objc_alloc(&OBJC_CLASS___NSDictionary),  "initWithObjectsAndKeys:",  @"Failed uploading attachment file transfer (failed upload)",  NSLocalizedDescriptionKey,  v24,  @"MMCSUploadErrorKey",  0LL,  v56,  v57);
    __int16 v50 = objc_alloc(&OBJC_CLASS___NSError);
    id v38 = -[NSError initWithDomain:code:userInfo:](v50, "initWithDomain:code:userInfo:", IDSSendErrorDomain, 4LL, v26);
    [*(id *)(a1 + 80) failWithError:v38];
    int v51 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
    uint64_t v52 = *(void *)(a1 + 72);
    id v61 = 0LL;
    unsigned __int8 v53 = [v51 removeItemAtPath:v52 error:&v61];
    id v40 = v61;
  }
}

void sub_10034C7E4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 state] == (id)1)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
    uint64_t v5 = *(void *)(a1 + 32);
    id v21 = 0LL;
    unsigned __int8 v6 = [v4 removeItemAtPath:v5 error:&v21];
    id v7 = v21;

    uint64_t v9 = objc_alloc(&OBJC_CLASS___NSDictionary);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
    unint64_t v11 = -[NSDictionary initWithObjectsAndKeys:]( v9,  "initWithObjectsAndKeys:",  @"Failed uploading attachment file transfer (failed post-upload encryption)",  NSLocalizedDescriptionKey,  v10,  NSUnderlyingErrorKey,  0LL);

    __int16 v12 = objc_alloc(&OBJC_CLASS___NSError);
    unint64_t v13 = -[NSError initWithDomain:code:userInfo:](v12, "initWithDomain:code:userInfo:", IDSSendErrorDomain, 4LL, v11);
    [*(id *)(a1 + 40) failWithError:v13];
  }

  else
  {
    __int16 v14 = (void *)objc_claimAutoreleasedReturnValue([v3 value]);
    unint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 endpointsToEncryptedData]);
    id v7 = (id)objc_claimAutoreleasedReturnValue([v15 objectForKey:*(void *)(a1 + 48)]);

    uint64_t v16 = objc_alloc(&OBJC_CLASS___IDSMMCSUploadResult);
    id v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", *(void *)(a1 + 56)));
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472LL;
    v19[2] = sub_10034C9FC;
    v19[3] = &unk_1008F6010;
    uint64_t v20 = (NSDictionary *)*(id *)(a1 + 32);
    id v18 = -[IDSMMCSUploadResult initWithEncryptedResult:dataLength:fileCleanupBlock:]( v16,  "initWithEncryptedResult:dataLength:fileCleanupBlock:",  v7,  v17,  v19);

    [*(id *)(a1 + 40) fulfillWithValue:v18];
    unint64_t v11 = v20;
  }
}

void sub_10034C9FC(uint64_t a1)
{
  unint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  uint64_t v3 = *(void *)(a1 + 32);
  id v7 = 0LL;
  unsigned __int8 v4 = [v2 removeItemAtPath:v3 error:&v7];
  id v5 = v7;
}

void sub_10034D3F0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v35 = a2;
  id v36 = a3;
  id v7 = a4;
  uint64_t v8 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
    *(_DWORD *)buf = 138413058;
    double v43 = v10;
    __int16 v44 = 2112;
    id v45 = v35;
    __int16 v46 = 2112;
    id v47 = v36;
    __int16 v48 = 2112;
    id v49 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Updating listener on %@ willSendToDestinations %@ skipped %@ regPropToDest %@",  buf,  0x2Au);
  }

  if (os_log_shim_legacy_logging_enabled(v11) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    id v33 = v36;
    id v34 = v7;
    uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
    id v32 = v35;
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Updating listener on %@ willSendToDestinations %@ skipped %@ regPropToDest %@");
  }

  __int16 v12 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  __int128 v39 = 0u;
  __int128 v40 = 0u;
  __int128 v37 = 0u;
  __int128 v38 = 0u;
  id v13 = v7;
  id v14 = [v13 countByEnumeratingWithState:&v37 objects:v41 count:16];
  if (v14)
  {
    uint64_t v15 = *(void *)v38;
    do
    {
      for (i = 0LL; i != v14; i = (char *)i + 1)
      {
        if (*(void *)v38 != v15) {
          objc_enumerationMutation(v13);
        }
        uint64_t v17 = *(void *)(*((void *)&v37 + 1) + 8LL * (void)i);
        id v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "objectForKeyedSubscript:", v17, v31, v32, v33, v34));
        id v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "__imArrayByApplyingBlock:", &stru_100901C60));
        -[NSMutableDictionary setObject:forKeyedSubscript:](v12, "setObject:forKeyedSubscript:", v19, v17);
      }

      id v14 = [v13 countByEnumeratingWithState:&v37 objects:v41 count:16];
    }

    while (v14);
  }

  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
  id v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) localObject]);
  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v20 broadcasterForLocalObject:v21 messageContext:*(void *)(a1 + 40)]);

  if (v22)
  {
    uint64_t v24 = *(void **)(a1 + 32);
    id v23 = (id *)(a1 + 32);
    unsigned __int8 v25 = (void *)objc_claimAutoreleasedReturnValue([v24 identifier]);
    uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([*v23 alternateCallbackID]);
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([*v23 mainAccountUUID]);
    __int16 v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "__imArrayByApplyingBlock:", &stru_100901C80));
    uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v36, "__imArrayByApplyingBlock:", &stru_100901CA0));
    id v30 = -[NSMutableDictionary copy](v12, "copy");
    [v22 messageIdentifier:v25 alternateCallbackID:v26 forAccount:v27 willSendToDestinations:v28 skippedDestinations:v29 registrationPropertyToDestinations:v30];
  }
}

id sub_10034D774(id a1, IDSURI *a2)
{
  return -[IDSURI prefixedURI](a2, "prefixedURI");
}

id sub_10034D77C(id a1, IDSURI *a2)
{
  return -[IDSURI prefixedURI](a2, "prefixedURI");
}

id sub_10034D784(id a1, IDSURI *a2)
{
  return -[IDSURI prefixedURI](a2, "prefixedURI");
}

void sub_10034D78C(uint64_t a1, void *a2)
{
  id v3 = a2;
  state.opaque[0] = 0xAAAAAAAAAAAAAAAALL;
  state.opaque[1] = 0xAAAAAAAAAAAAAAAALL;
  os_activity_scope_enter(*(os_activity_t *)(a1 + 32), &state);
  uint64_t v4 = OSLogHandleForIDSCategory("IDSDaemon");
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) identifier]);
    id v7 = [v3 idsResponseCode];
    id v8 = (id)objc_claimAutoreleasedReturnValue([v3 responseError]);
    unsigned int v9 = [v3 lastCall];
    uint64_t v10 = @"NO";
    uint64_t v11 = *(void *)(a1 + 48);
    *(_DWORD *)buf = 138413314;
    if (v9) {
      uint64_t v10 = @"YES";
    }
    id v76 = v6;
    __int16 v77 = 2048;
    id v78 = v7;
    __int16 v79 = 2112;
    id v80 = v8;
    __int16 v81 = 2112;
    v82 = v10;
    __int16 v83 = 2112;
    uint64_t v84 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Updating listener on %@ with responseCode %ld error %@  lastCall %@ - messageContext %@",  buf,  0x34u);
  }

  if (os_log_shim_legacy_logging_enabled(v12) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) identifier]);
    id v14 = [v3 idsResponseCode];
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v3 responseError]);
    unsigned int v16 = [v3 lastCall];
    uint64_t v17 = @"NO";
    if (v16) {
      uint64_t v17 = @"YES";
    }
    uint64_t v67 = v17;
    uint64_t v68 = *(void *)(a1 + 48);
    id v65 = v14;
    uint64_t v66 = v15;
    id v63 = v13;
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Updating listener on %@ with responseCode %ld error %@  lastCall %@ - messageContext %@");
  }

  id v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "responseError", v63, v65, v66, v67, v68));
  if ([v18 code] != (id)24)
  {

LABEL_19:
    unsigned __int8 v25 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    id v27 = *(id *)(a1 + 56);
    if (v27) {
      CFDictionarySetValue((CFMutableDictionaryRef)v25, IDSMessageContextServiceIdentifierKey, v27);
    }

    __int16 v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) localDestinationDeviceUUID]);
    if (v28) {
      CFDictionarySetValue((CFMutableDictionaryRef)v25, IDSMessageContextOriginalDestinationDeviceKey, v28);
    }

    uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) destinationCorrelationIdentifier]);
    if (v29) {
      CFDictionarySetValue((CFMutableDictionaryRef)v25, IDSMessageContextDestinationCorrelationIdentifierKey, v29);
    }

    id v30 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) fromID]);
    if (v30) {
      CFDictionarySetValue((CFMutableDictionaryRef)v25, IDSMessageContextFromIDKey, v30);
    }

    uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v3 responseTimeStamp]);
    if (v31)
    {
      id v32 = (void *)objc_claimAutoreleasedReturnValue([v3 responseTimeStamp]);
      id v33 = sub_10034E194(v32);
      id v34 = (void *)objc_claimAutoreleasedReturnValue(v33);

      [v34 timeIntervalSince1970];
      id v36 = v35;
      __int128 v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
      if (v37) {
        CFDictionarySetValue((CFMutableDictionaryRef)v25, IDSMessageContextServerTimestampKey, v37);
      }

      __int128 v38 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) command]);
      if (v38) {
        CFDictionarySetValue((CFMutableDictionaryRef)v25, IDSMessageContextOriginalCommandKey, v38);
      }

      uint64_t v39 = OSLogHandleForIDSCategory("IDSDaemon");
      __int128 v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
      if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        id v76 = v36;
        _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEFAULT,  "ServerTimeStamps before broadcast is  %f",  buf,  0xCu);
      }

      if (os_log_shim_legacy_logging_enabled(v41) && _IDSShouldLog(0LL, @"IDSDaemon"))
      {
        id v64 = v36;
        _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon", @"ServerTimeStamps before broadcast is  %f");
      }

      uint64_t v42 = OSLogHandleForIDSCategory("IDSDaemon");
      double v43 = (os_log_s *)objc_claimAutoreleasedReturnValue(v42);
      if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        id v76 = v34;
        _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEFAULT,  "ServerDate before broadcast is  %@",  buf,  0xCu);
      }

      if (os_log_shim_legacy_logging_enabled(v44) && _IDSShouldLog(0LL, @"IDSDaemon"))
      {
        id v64 = v34;
        _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon", @"ServerDate before broadcast is  %@");
      }
    }

    id v45 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "currentAverageRTT", v64));
    if (v45) {
      CFDictionarySetValue((CFMutableDictionaryRef)v25, IDSMessageContextAverageLocalRTTKey, v45);
    }

    __int16 v46 = (void *)objc_claimAutoreleasedReturnValue([v3 localMessageState]);
    if (v46) {
      CFDictionarySetValue((CFMutableDictionaryRef)v25, IDSMessageContextLocalMessageStateKey, v46);
    }

    id v47 = (void *)objc_claimAutoreleasedReturnValue([v3 endpointState]);
    if (v47) {
      CFDictionarySetValue((CFMutableDictionaryRef)v25, IDSMessageContextEndpointStateKey, v47);
    }

    __int16 v48 = (void *)objc_claimAutoreleasedReturnValue([v3 isDeviceBlackedOut]);
    if (v48) {
      CFDictionarySetValue((CFMutableDictionaryRef)v25, IDSMessageContextDeviceBlackedOutKey, v48);
    }

    id v49 = (void *)objc_claimAutoreleasedReturnValue([v3 wpConnectionErrorDomain]);
    if (v49) {
      CFDictionarySetValue((CFMutableDictionaryRef)v25, IDSMessageContextWPConnectionErrorDomainKey, v49);
    }

    __int16 v50 = (void *)objc_claimAutoreleasedReturnValue([v3 wpConnectionErrorCode]);
    if (v50) {
      CFDictionarySetValue((CFMutableDictionaryRef)v25, IDSMessageContextWPConnectionErrorCodeKey, v50);
    }

    int v51 = (void *)objc_claimAutoreleasedReturnValue([v3 wpConnectionErrorUserInfo]);
    if (v51) {
      CFDictionarySetValue((CFMutableDictionaryRef)v25, IDSMessageContextWPConnectionErrorUserInfoKey, v51);
    }

    uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 88) daemon]);
    unsigned __int8 v53 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) localObject]);
    uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v52 broadcasterForLocalObject:v53 messageContext:*(void *)(a1 + 48)]);

    if (v26)
    {
      uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) command]);
      unsigned int v55 = [v54 isEqualToNumber:&off_100947A40];

      if (v55)
      {
        id v56 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) command]);
        if (v56) {
          CFDictionarySetValue((CFMutableDictionaryRef)v25, IDSMessageContextOriginalCommandKey, v56);
        }
      }

      id v57 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) identifier]);
      char v58 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) alternateCallbackID]);
      id v59 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) mainAccountUUID]);
      id v60 = [v3 idsResponseCode];
      id v61 = (void *)objc_claimAutoreleasedReturnValue([v3 responseError]);
      objc_msgSend( v26,  "messageIdentifier:alternateCallbackID:forAccount:updatedWithResponseCode:error:lastCall:context:",  v57,  v58,  v59,  v60,  v61,  objc_msgSend(v3, "lastCall"),  v25);
    }

    else
    {
      uint64_t v62 = *(void **)(a1 + 72);
      v69[0] = _NSConcreteStackBlock;
      v69[1] = 3221225472LL;
      v69[2] = sub_10034E234;
      v69[3] = &unk_1008F95C8;
      id v70 = *(id *)(a1 + 40);
      id v71 = v3;
      uint64_t v72 = v25;
      id v73 = *(id *)(a1 + 64);
      [v62 enqueueBroadcast:v69 forTopic:*(void *)(a1 + 80) entitlement:kIDSMessagingEntitlement command:0 capabilities:kIDSListenerCapConsumesLaunchOnDemandOutgoingMessageUpdates messageContext:*(void *)(a1 + 48)];

      id v57 = v70;
    }

    goto LABEL_67;
  }

  BOOL v19 = *(_BYTE *)(a1 + 96) == 0;

  if (v19) {
    goto LABEL_19;
  }
  uint64_t v20 = OSLogHandleForIDSCategory("IDSDaemon");
  id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v22 = *(void **)(a1 + 56);
    *(_DWORD *)buf = 138412290;
    id v76 = v22;
    _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Silently failing %@ messages due to watch switch",  buf,  0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v23) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    id v64 = *(void **)(a1 + 56);
    _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon", @"Silently failing %@ messages due to watch switch");
  }

  id v24 = objc_msgSend(*(id *)(a1 + 64), "dataProtectionClass", v64);
  unsigned __int8 v25 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) identifier]);
  uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) alternateCallbackID]);
  +[IDSDMessageStore deleteOutgoingMessageWithGUID:alternateGUID:dataProtectionClass:]( &OBJC_CLASS___IDSDMessageStore,  "deleteOutgoingMessageWithGUID:alternateGUID:dataProtectionClass:",  v25,  v26,  v24);
LABEL_67:

  os_activity_scope_leave(&state);
}

void sub_10034E0B8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, os_activity_scope_state_s state)
{
}

id sub_10034E194(void *a1)
{
  id v1 = a1;
  unint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  if (v1)
  {
    else {
      uint64_t v3 = objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSince1970:](&OBJC_CLASS___NSDate, "dateWithTimeIntervalSince1970:"));
    }
    uint64_t v4 = (void *)v3;

    unint64_t v2 = v4;
  }

  id v5 = v2;

  return v5;
}

void sub_10034E234(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) alternateCallbackID]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) mainAccountUUID]);
    id v7 = [*(id *)(a1 + 40) idsResponseCode];
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) responseError]);
    objc_msgSend( v3,  "messageIdentifier:alternateCallbackID:forAccount:updatedWithResponseCode:error:lastCall:context:",  v4,  v5,  v6,  v7,  v8,  objc_msgSend(*(id *)(a1 + 40), "lastCall"),  *(void *)(a1 + 48));
  }

  else if ([*(id *)(a1 + 40) lastCall])
  {
    id v9 = [*(id *)(a1 + 56) dataProtectionClass];
    uint64_t v10 = OSLogHandleForIDSCategory("Warning");
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
      *(_DWORD *)buf = 138412290;
      uint64_t v20 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "Found no valid broadcaster for outgoing message %@, cleaning up",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v13))
    {
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
      _IDSWarnV(@"IDSFoundation", @"Found no valid broadcaster for outgoing message %@, cleaning up");

      id v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "identifier", v17));
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"Found no valid broadcaster for outgoing message %@, cleaning up");

      unsigned int v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "identifier", v18));
      _IDSLogTransport( @"Warning",  @"IDS",  @"Found no valid broadcaster for outgoing message %@, cleaning up");
    }

    id v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "identifier", v16));
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) alternateCallbackID]);
    +[IDSDMessageStore deleteOutgoingMessageWithGUID:alternateGUID:dataProtectionClass:]( &OBJC_CLASS___IDSDMessageStore,  "deleteOutgoingMessageWithGUID:alternateGUID:dataProtectionClass:",  v14,  v15,  v9);
  }
}

void sub_10034E954( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, int a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, int a27)
{
  if (a2 == 1)
  {
    objc_begin_catch(exception_object);
    objc_end_catch();
    JUMPOUT(0x10034E7D4LL);
  }

  _Unwind_Resume(exception_object);
}

void sub_10034EB68(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 48);
  id v7 = v3;
  if (v4)
  {
    (*(void (**)(uint64_t, id))(v4 + 16))(v4, v3);
    id v3 = v7;
  }

  if ([v3 lastCall])
  {
    uint64_t v5 = *(void *)(a1 + 32);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) alternateCallbackID]);
    +[IDSDMessageStore deleteOutgoingMessageWithGUID:alternateGUID:dataProtectionClass:]( &OBJC_CLASS___IDSDMessageStore,  "deleteOutgoingMessageWithGUID:alternateGUID:dataProtectionClass:",  v5,  v6,  *(unsigned int *)(a1 + 56));
  }
}

void sub_10034EBF8(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 48))
  {
    uint64_t v3 = im_primary_queue(a1, a2);
    uint64_t v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v3);
    block = _NSConcreteStackBlock;
    uint64_t v13 = 3221225472LL;
    id v14 = sub_10034EDA4;
    uint64_t v15 = &unk_1008F6330;
    id v16 = *(id *)(a1 + 48);
    dispatch_async(v4, &block);
  }

  uint64_t v5 = OSLogHandleForIDSCategory("IDSDaemon");
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    uint64_t v18 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Deleting sent outgoing message with guid %@ after exception",  buf,  0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v8) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    uint64_t v11 = *(void *)(a1 + 32);
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Deleting sent outgoing message with guid %@ after exception");
  }

  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "alternateCallbackID", v11, block, v13, v14, v15));
  +[IDSDMessageStore deleteOutgoingMessageWithGUID:alternateGUID:dataProtectionClass:]( &OBJC_CLASS___IDSDMessageStore,  "deleteOutgoingMessageWithGUID:alternateGUID:dataProtectionClass:",  v9,  v10,  *(unsigned int *)(a1 + 56));
}

void sub_10034EDA4(uint64_t a1)
{
  unint64_t v2 = objc_alloc_init(&OBJC_CLASS___IDSDeliveryContext);
  -[IDSDeliveryContext setIdsResponseCode:](v2, "setIdsResponseCode:", 10LL);
  -[IDSDeliveryContext setLastCall:](v2, "setLastCall:", 1LL);
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

LABEL_281:
            int v233 = OSLogHandleForTransportCategory("AOVERCEncryption");
            double v234 = (os_log_s *)objc_claimAutoreleasedReturnValue(v233);
            if (os_log_type_enabled(v234, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 134217984;
              unsigned int v332 = v322;
              _os_log_impl( (void *)&_mh_execute_header,  v234,  OS_LOG_TYPE_DEFAULT,  "A over C encryption has failed to encrypt with error %ld",  buf,  0xCu);
            }

            double v236 = os_log_shim_legacy_logging_enabled(v235);
            if ((_DWORD)v236)
            {
              if (_IDSShouldLogTransport(v236))
              {
                _IDSLogTransport( @"AOVERCEncryption",  @"IDS",  @"A over C encryption has failed to encrypt with error %ld");
                if (_IDSShouldLog(0LL, @"AOVERCEncryption")) {
                  _IDSLogV( 0LL,  @"IDSFoundation",  @"AOVERCEncryption",  @"A over C encryption has failed to encrypt with error %ld");
                }
              }
            }

            double v237 = objc_alloc(&OBJC_CLASS___NSError);
            double v238 = -[NSError initWithDomain:code:userInfo:]( v237,  "initWithDomain:code:userInfo:",  IDSSendErrorDomain,  26LL,  0LL);
            uint64_t v239 = -[IDSDeliveryContext initWithResponseCode:error:lastCall:]( objc_alloc(&OBJC_CLASS___IDSDeliveryContext),  "initWithResponseCode:error:lastCall:",  26LL,  v238,  1LL);
            v308[2](v308, v239);

            goto LABEL_315;
          }

          v229 = (IDSProtobuf *)objc_claimAutoreleasedReturnValue([v13 message]);
          v240 = JWEncodeDictionary(v229);
          uint64_t v241 = (void *)objc_claimAutoreleasedReturnValue(v240);
          uint64_t v242 = (void *)objc_claimAutoreleasedReturnValue( +[IDSEncryptionHelpers encryptLocalDeliveryPayload:toDevice:forService:withDataProtectionClass:encryptionType:priority:error:]( &OBJC_CLASS___IDSEncryptionHelpers,  "encryptLocalDeliveryPayload:toDevice:forService:withDataProtectionClass:encryptionType:priority:error:",  v241,  v216,  v307,  1LL,  1LL,  300LL,  &v322));
          if (v242)
          {
            [v13 setData:v242];
            [v13 setMessage:0];

            goto LABEL_290;
          }
        }

        goto LABEL_281;
      }

      uint64_t v120 = (IDSDeliveryContext *)objc_claimAutoreleasedReturnValue([v13 message]);
      uint64_t v162 = objc_opt_class(&OBJC_CLASS___NSString, v161);
      v163 = IDSMessageResourceTransferURLKey;
      uint64_t v164 = sub_10028D3BC(v162, v120, IDSMessageResourceTransferURLKey);
      v285 = (__CFString *)objc_claimAutoreleasedReturnValue(v164);
      if (!v285)
      {
LABEL_259:

        goto LABEL_260;
      }

      uint64_t v165 = [v13 setEnforceRemoteTimeouts:1];
      v167 = CSDBGetMobileUserDirectory(v165, v166);
      if (v167) {
        uint64_t v168 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v167));
      }
      else {
        uint64_t v168 = @"~";
      }
      uint64_t v169 = v167 == 0;
      v170 = (void *)objc_claimAutoreleasedReturnValue([v13 identifier]);
      double v171 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:",  v168,  @"/Library/IdentityServices/files/",  v170,  0LL));
      v283 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString pathWithComponents:](&OBJC_CLASS___NSString, "pathWithComponents:", v171));

      if (!v169) {
      uint64_t v172 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
      }
      __int128 v323 = 0LL;
      uint64_t v173 = [v172 createDirectoryAtPath:v283 withIntermediateDirectories:1 attributes:0 error:&v323];
      v282 = (__CFString *)v323;

      if ((v173 & 1) == 0)
      {
        uint64_t v181 = OSLogHandleForTransportCategory("IDSDaemon");
        uint64_t v182 = (os_log_s *)objc_claimAutoreleasedReturnValue(v181);
        if (os_log_type_enabled(v182, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412546;
          unsigned int v332 = v283;
          id v333 = 2112;
          double v334 = v282;
          _os_log_impl( (void *)&_mh_execute_header,  v182,  OS_LOG_TYPE_DEFAULT,  "file persistence - failed to create unique file directory %@ error %@",  buf,  0x16u);
        }

        v184 = os_log_shim_legacy_logging_enabled(v183);
        if ((_DWORD)v184)
        {
          if (_IDSShouldLogTransport(v184))
          {
            _IDSLogTransport( @"IDSDaemon",  @"IDS",  @"file persistence - failed to create unique file directory %@ error %@");
            if (_IDSShouldLog(0LL, @"IDSDaemon")) {
              _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"file persistence - failed to create unique file directory %@ error %@");
            }
          }
        }

        if (v308)
        {
          v185 = objc_alloc(&OBJC_CLASS___NSError);
          int v186 = -[NSError initWithDomain:code:userInfo:]( v185,  "initWithDomain:code:userInfo:",  IDSSendErrorDomain,  22LL,  0LL);
          uint64_t v187 = -[IDSDeliveryContext initWithResponseCode:error:lastCall:]( objc_alloc(&OBJC_CLASS___IDSDeliveryContext),  "initWithResponseCode:error:lastCall:",  22LL,  v186,  1LL);
          v308[2](v308, v187);
        }

        goto LABEL_275;
      }

      uint64_t v175 = objc_opt_class(&OBJC_CLASS___NSString, v174);
      double v176 = sub_10028D3BC(v175, v120, IDSMessageResourceTransferSandboxExtensionKey);
      uint64_t v177 = (void *)objc_claimAutoreleasedReturnValue(v176);
      uint64_t v178 = v177;
      if (v177)
      {
        v180 = sandbox_extension_consume([v177 UTF8String]);
      }

      else
      {
        v188 = OSLogHandleForTransportCategory("IDSDaemon");
        v189 = (os_log_s *)objc_claimAutoreleasedReturnValue(v188);
        if (os_log_type_enabled(v189, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          unsigned int v332 = v285;
          _os_log_impl( (void *)&_mh_execute_header,  v189,  OS_LOG_TYPE_DEFAULT,  "No sandbox extension for received resource [%@]",  buf,  0xCu);
        }

        v191 = os_log_shim_legacy_logging_enabled(v190);
        if ((_DWORD)v191)
        {
          if (_IDSShouldLogTransport(v191))
          {
            uint64_t v266 = v285;
            _IDSLogTransport(@"IDSDaemon", @"IDS", @"No sandbox extension for received resource [%@]");
            if (_IDSShouldLog(0LL, @"IDSDaemon"))
            {
              uint64_t v266 = v285;
              _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"No sandbox extension for received resource [%@]");
            }
          }
        }

        v180 = 0LL;
      }

      uint64_t v192 = objc_opt_class(&OBJC_CLASS___NSString, v179);
      uint64_t v193 = sub_10028D3BC(v192, v120, IDSMessageResourceTransferOriginalFileSandboxExtensionKey);
      v194 = (void *)objc_claimAutoreleasedReturnValue(v193);
      v195 = v194;
      if (v194)
      {
        uint64_t v196 = sandbox_extension_consume([v194 UTF8String]);
      }

      else
      {
        v197 = OSLogHandleForTransportCategory("IDSDaemon");
        v198 = (os_log_s *)objc_claimAutoreleasedReturnValue(v197);
        if (os_log_type_enabled(v198, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          unsigned int v332 = v285;
          _os_log_impl( (void *)&_mh_execute_header,  v198,  OS_LOG_TYPE_DEFAULT,  "No sandbox extension for received resource [%@]",  buf,  0xCu);
        }

        v200 = os_log_shim_legacy_logging_enabled(v199);
        if ((_DWORD)v200)
        {
          if (_IDSShouldLogTransport(v200))
          {
            uint64_t v266 = v285;
            _IDSLogTransport(@"IDSDaemon", @"IDS", @"No sandbox extension for received resource [%@]");
            if (_IDSShouldLog(0LL, @"IDSDaemon"))
            {
              uint64_t v266 = v285;
              _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"No sandbox extension for received resource [%@]");
            }
          }
        }

        uint64_t v196 = 0LL;
      }

      unsigned int v201 = sub_100351920(v285, v283);
      v202 = (__CFString *)objc_claimAutoreleasedReturnValue(v201);
      if (v178) {
        sandbox_extension_release(v180);
      }
      if (v195) {
        sandbox_extension_release(v196);
      }
      if (v202)
      {
        v203 = (NSError *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  v120));
        -[NSError setObject:forKey:](v203, "setObject:forKey:", v202, v163);
        [v13 setMessage:v203];
        unsigned int v204 = OSLogHandleForIDSCategory("IDSDaemon");
        uint64_t v205 = (os_log_s *)objc_claimAutoreleasedReturnValue(v204);
        if (os_log_type_enabled(v205, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412546;
          unsigned int v332 = v285;
          id v333 = 2112;
          double v334 = v202;
          _os_log_impl( (void *)&_mh_execute_header,  v205,  OS_LOG_TYPE_DEFAULT,  "file persistence - moved file %@ => %@",  buf,  0x16u);
        }

        if (os_log_shim_legacy_logging_enabled(v206)
          && _IDSShouldLog(0LL, @"IDSDaemon"))
        {
          uint64_t v266 = v285;
          uint64_t v270 = v202;
          _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon", @"file persistence - moved file %@ => %@");
        }
      }

      else
      {
        unsigned __int8 v207 = OSLogHandleForTransportCategory("IDSDaemon");
        uint64_t v208 = (os_log_s *)objc_claimAutoreleasedReturnValue(v207);
        if (os_log_type_enabled(v208, OS_LOG_TYPE_DEFAULT))
        {
          int v209 = (__CFString *)(id)objc_claimAutoreleasedReturnValue([v13 dictionaryRepresentation]);
          *(_DWORD *)buf = 138412802;
          unsigned int v332 = v285;
          id v333 = 2112;
          double v334 = 0LL;
          v335 = 2112;
          double v336 = v209;
          _os_log_impl( (void *)&_mh_execute_header,  v208,  OS_LOG_TYPE_DEFAULT,  "file persistence - failed to move file %@ => %@ params %@",  buf,  0x20u);
        }

        uint64_t v211 = os_log_shim_legacy_logging_enabled(v210);
        if ((_DWORD)v211)
        {
          if (_IDSShouldLogTransport(v211))
          {
            uint64_t v270 = 0LL;
            v273 = (void *)objc_claimAutoreleasedReturnValue([v13 dictionaryRepresentation]);
            uint64_t v266 = v285;
            _IDSLogTransport( @"IDSDaemon",  @"IDS",  @"file persistence - failed to move file %@ => %@ params %@");

            if (_IDSShouldLog(0LL, @"IDSDaemon"))
            {
              id v212 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "dictionaryRepresentation", v285, 0, v273));
              uint64_t v270 = 0LL;
              v273 = v212;
              uint64_t v266 = v285;
              _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"file persistence - failed to move file %@ => %@ params %@");
            }
          }
        }

        if (!v308)
        {
LABEL_258:

          if (v202) {
            goto LABEL_259;
          }
LABEL_275:

LABEL_316:
          goto LABEL_317;
        }

        uint64_t v213 = objc_alloc(&OBJC_CLASS___NSError);
        v203 = -[NSError initWithDomain:code:userInfo:]( v213,  "initWithDomain:code:userInfo:",  IDSSendErrorDomain,  22LL,  0LL);
        uint64_t v214 = -[IDSDeliveryContext initWithResponseCode:error:lastCall:]( objc_alloc(&OBJC_CLASS___IDSDeliveryContext),  "initWithResponseCode:error:lastCall:",  22LL,  v203,  1LL);
        v308[2](v308, v214);
      }

      goto LABEL_258;
    }

    uint64_t v39 = objc_alloc(&OBJC_CLASS___NSError);
    __int128 v40 = -[NSError initWithDomain:code:userInfo:](v39, "initWithDomain:code:userInfo:", IDSSendErrorDomain, 27LL, 0LL);
    uint64_t v41 = -[IDSDeliveryContext initWithResponseCode:error:lastCall:]( objc_alloc(&OBJC_CLASS___IDSDeliveryContext),  "initWithResponseCode:error:lastCall:",  27LL,  v40,  1LL);
    v308[2](v308, v41);
  }

  else
  {
    id v34 = OSLogHandleForIDSCategory("Warning");
    id v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      id v36 = (__CFString *)objc_claimAutoreleasedReturnValue([v13 accountUUID]);
      *(_DWORD *)buf = 138412290;
      unsigned int v332 = v36;
      _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_ERROR,  "Registration is not active on account %@, ignoring...",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v37))
    {
      uint64_t v256 = (void *)objc_claimAutoreleasedReturnValue([v13 accountUUID]);
      _IDSWarnV(@"IDSFoundation", @"Registration is not active on account %@, ignoring...");

      id v257 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "accountUUID", v256));
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"Registration is not active on account %@, ignoring...");

      uint64_t v258 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "accountUUID", v257));
      _IDSLogTransport(@"Warning", @"IDS", @"Registration is not active on account %@, ignoring...");
    }

    if (v308)
    {
      __int128 v38 = -[IDSDeliveryContext initWithResponseCode:error:lastCall:]( objc_alloc(&OBJC_CLASS___IDSDeliveryContext),  "initWithResponseCode:error:lastCall:",  9LL,  0LL,  1LL);
      v308[2](v308, v38);
    }
  }

LABEL_319:
}

uint64_t sub_100351824(char a1, int a2, void *a3)
{
  id v5 = a3;
  if ((a1 & 1) != 0)
  {
LABEL_7:
    uint64_t v8 = 1LL;
    goto LABEL_8;
  }

  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPairingManager sharedInstance](&OBJC_CLASS___IDSPairingManager, "sharedInstance"));
  unsigned int v7 = [v6 shouldUseIPsecLinkForDefaultPairedDevice];

  uint64_t v8 = 0LL;
  if (a2 == 1 && v7)
  {
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMIDSLog daemon](&OBJC_CLASS___IMIDSLog, "daemon"));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 138412290;
      id v12 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Changing Class-A to AOverC for service %@",  (uint8_t *)&v11,  0xCu);
    }

    goto LABEL_7;
  }

id sub_100351920(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  id v6 = 0LL;
  if (v3 && v4)
  {
    unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](&OBJC_CLASS___NSURL, "fileURLWithPath:", v3));
    v53[0] = v5;
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 lastPathComponent]);
    v53[1] = v8;
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v53, 2LL));
    id v10 = (id)objc_claimAutoreleasedReturnValue(+[NSString pathWithComponents:](&OBJC_CLASS___NSString, "pathWithComponents:", v9));

    int v11 = (void *)objc_claimAutoreleasedReturnValue([v7 lastPathComponent]);
    id v12 = [v5 stringByAppendingString:v11];

    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 attributesOfItemAtPath:v10 error:0]);

    if (v14)
    {
      uint64_t v15 = OSLogHandleForIDSCategory("IDSDaemon");
      id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        id v48 = v3;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "file persistence - destination file exists %@",  buf,  0xCu);
      }

      if (os_log_shim_legacy_logging_enabled(v17) && _IDSShouldLog(0LL, @"IDSDaemon")) {
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"file persistence - destination file exists %@");
      }
      id v6 = 0LL;
      goto LABEL_33;
    }

    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
    id v46 = 0LL;
    unsigned __int8 v19 = [v18 moveItemAtPath:v3 toPath:v10 error:&v46];
    id v20 = v46;

    if ((v19 & 1) == 0)
    {
      id v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
      id v14 = (void *)objc_claimAutoreleasedReturnValue([v21 attributesOfItemAtPath:v10 error:0]);

      if (v14)
      {
LABEL_32:
        id v10 = v10;

        id v6 = v10;
LABEL_33:

        goto LABEL_34;
      }

      uint64_t v22 = OSLogHandleForIDSCategory("IDSDaemon");
      uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412802;
        id v48 = v3;
        __int16 v49 = 2112;
        id v50 = v10;
        __int16 v51 = 2112;
        id v52 = v20;
        _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "file persistence - failed to move file %@ => %@ (error %@)",  buf,  0x20u);
      }

      if (os_log_shim_legacy_logging_enabled(v24) && _IDSShouldLog(0LL, @"IDSDaemon"))
      {
        id v40 = v10;
        id v42 = v20;
        id v38 = v3;
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"file persistence - failed to move file %@ => %@ (error %@)");
      }

      unsigned __int8 v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager", v38, v40, v42));
      id v45 = 0LL;
      unsigned __int8 v26 = [v25 copyItemAtPath:v3 toPath:v10 error:&v45];
      id v27 = v45;

      if ((v26 & 1) == 0)
      {
        uint64_t v28 = OSLogHandleForIDSCategory("IDSDaemon");
        uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412802;
          id v48 = v3;
          __int16 v49 = 2112;
          id v50 = v10;
          __int16 v51 = 2112;
          id v52 = v27;
          _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "file persistence - failed to copy file %@ => %@ (error %@)",  buf,  0x20u);
        }

        if (os_log_shim_legacy_logging_enabled(v30)
          && _IDSShouldLog(0LL, @"IDSDaemon"))
        {
          id v41 = v10;
          id v43 = v27;
          id v39 = v3;
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"file persistence - failed to copy file %@ => %@ (error %@)");
        }

        id v10 = 0LL;
      }

      uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager", v39, v41, v43));
      id v44 = 0LL;
      unsigned __int8 v32 = [v31 removeItemAtPath:v3 error:&v44];
      id v33 = v44;

      if ((v32 & 1) == 0)
      {
        uint64_t v34 = OSLogHandleForIDSCategory("IDSDaemon");
        id v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
        if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138412546;
          id v48 = v3;
          __int16 v49 = 2112;
          id v50 = v33;
          _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEBUG,  "file persistence - failed to remove original file %@ (error %@)",  buf,  0x16u);
        }

        if (os_log_shim_legacy_logging_enabled(v36)
          && _IDSShouldLog(1LL, @"IDSDaemon"))
        {
          _IDSLogV( 1LL,  @"IDSFoundation",  @"IDSDaemon",  @"file persistence - failed to remove original file %@ (error %@)");
        }
      }
    }

    id v14 = 0LL;
    goto LABEL_32;
  }

void sub_100351E84(uint64_t a1, void *a2, char a3, int a4)
{
  id v7 = a2;
  uint64_t v8 = v7;
  if ((a3 & 1) != 0)
  {
    id v57 = v7;
    char v56 = a4;
    if (a4)
    {
      v81[0] = _NSConcreteStackBlock;
      v81[1] = 3221225472LL;
      v81[2] = sub_10035285C;
      v81[3] = &unk_100901D68;
      uint64_t v87 = *(void *)(a1 + 104);
      uint64_t v9 = v81;
      v81[4] = *(id *)(a1 + 32);
      v81[5] = *(id *)(a1 + 40);
      id v82 = *(id *)(a1 + 48);
      id v83 = v8;
      int v88 = *(_DWORD *)(a1 + 112);
      id v84 = *(id *)(a1 + 88);
      id v85 = *(id *)(a1 + 96);
      id v86 = *(id *)(a1 + 80);
      id v10 = objc_retainBlock(v81);
    }

    else
    {
      if (!*(_BYTE *)(a1 + 116))
      {
        uint64_t v36 = *(void **)(a1 + 56);
        __int128 v37 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) identifier]);
        LODWORD(v36) = [v36 _canSendNonUrgentInternetMessageForTopic:v37];

        if ((_DWORD)v36)
        {
          uint64_t v38 = OSLogHandleForIDSCategory("IDSDaemon");
          id v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);
          if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "Sending a non-urgent sync message as we have a go ahead based on the server policy",  buf,  2u);
          }

          if (os_log_shim_legacy_logging_enabled(v40)
            && _IDSShouldLog(0LL, @"IDSDaemon"))
          {
            _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Sending a non-urgent sync message as we have a go ahead based on the server policy");
          }

          v73[0] = _NSConcreteStackBlock;
          v73[1] = 3221225472LL;
          v73[2] = sub_1003528FC;
          v73[3] = &unk_100901D68;
          uint64_t v77 = *(void *)(a1 + 104);
          id v41 = (id *)v73;
          v73[4] = *(id *)(a1 + 32);
          v73[5] = *(id *)(a1 + 40);
          v73[6] = *(id *)(a1 + 48);
          v73[7] = v57;
          int v78 = *(_DWORD *)(a1 + 112);
          id v74 = *(id *)(a1 + 88);
          id v75 = *(id *)(a1 + 96);
          id v76 = *(id *)(a1 + 80);
          id v42 = objc_retainBlock(v73);
        }

        else
        {
          v72[0] = _NSConcreteStackBlock;
          v72[1] = 3221225472LL;
          v72[2] = sub_100352934;
          v72[3] = &unk_100901DB8;
          id v41 = (id *)v72;
          v72[4] = *(id *)(a1 + 32);
          v72[5] = v57;
          v72[6] = *(id *)(a1 + 56);
          v72[7] = *(id *)(a1 + 80);
          id v42 = objc_retainBlock(v72);
        }

        uint64_t v45 = im_primary_queue(v43, v44);
        id v46 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v45);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472LL;
        block[2] = sub_100352C48;
        block[3] = &unk_100901E08;
        uint64_t v67 = *(void *)(a1 + 104);
        uint64_t v62 = (IDSDeliveryContext *)*(id *)(a1 + 32);
        id v63 = v57;
        int v68 = *(_DWORD *)(a1 + 112);
        id v65 = *(id *)(a1 + 80);
        char v69 = *(_BYTE *)(a1 + 116);
        id v64 = *(id *)(a1 + 56);
        id v10 = v42;
        uint64_t v66 = v10;
        dispatch_async(v46, block);

        id v33 = v62;
        goto LABEL_32;
      }

      v79[0] = _NSConcreteStackBlock;
      v79[1] = 3221225472LL;
      v79[2] = sub_100352894;
      v79[3] = &unk_100901D90;
      uint64_t v9 = v79;
      v79[4] = *(id *)(a1 + 32);
      v79[5] = *(id *)(a1 + 48);
      int v80 = *(_DWORD *)(a1 + 112);
      id v10 = objc_retainBlock(v79);
    }

    if (*(_BYTE *)(a1 + 116))
    {
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
      unsigned __int8 v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"message %@ on service %@",  v18,  *(void *)(a1 + 64)));

      id v20 = *(void **)(a1 + 104);
      uint64_t v21 = *(void *)(a1 + 64);
      uint64_t v22 = *(void *)(a1 + 72);
      uint64_t v23 = *(void *)(a1 + 32);
      uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDaemonPriorityQueueController sharedInstance]( &OBJC_CLASS___IDSDaemonPriorityQueueController,  "sharedInstance"));
      unsigned __int8 v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "queueForPriority:", objc_msgSend(*(id *)(a1 + 32), "priority")));
      v70[0] = _NSConcreteStackBlock;
      v70[1] = 3221225472LL;
      v70[2] = sub_100352C30;
      v70[3] = &unk_1008F99D8;
      id v71 = v10;
      [v20 _performDuetCheckAndSendForServiceIdentifier:v21 serviceDuetIdentifiers:v22 sendParameters:v23 logString:v19 fromQueue:v25 completionBlock:v70];
    }

    else
    {
      ((void (*)(NSError *, void))v10->_code)(v10, 0LL);
    }

    if (!*(void *)(a1 + 80)) {
      goto LABEL_33;
    }
    uint64_t v26 = OSLogHandleForIDSCategory("IDSDaemon");
    id v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v28 = *(void *)(a1 + 64);
      id v29 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
      uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) alternateCallbackID]);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)v90 = 11;
      *(_WORD *)&v90[4] = 2112;
      *(void *)&v90[6] = v28;
      *(_WORD *)&v90[14] = 2112;
      *(void *)&v90[16] = v29;
      __int16 v91 = 2112;
      v92 = v30;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "Notifying client IDSResponsePersisted(%d) for %@ id %@ alt %@",  buf,  0x26u);
    }

    if (os_log_shim_legacy_logging_enabled(v31) && _IDSShouldLog(0LL, @"IDSDaemon"))
    {
      uint64_t v32 = *(void *)(a1 + 64);
      uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
      unsigned int v55 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) alternateCallbackID]);
      uint64_t v52 = 11LL;
      uint64_t v53 = v32;
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Notifying client IDSResponsePersisted(%d) for %@ id %@ alt %@");
    }

    id v33 = -[IDSDeliveryContext initWithResponseCode:error:lastCall:]( objc_alloc(&OBJC_CLASS___IDSDeliveryContext),  "initWithResponseCode:error:lastCall:",  11LL,  0LL,  1LL);
    (*(void (**)(void, IDSDeliveryContext *, uint64_t, uint64_t))(*(void *)(a1 + 80) + 16LL))( *(void *)(a1 + 80),  v33,  v34,  v35);
LABEL_32:

LABEL_33:
    if (objc_msgSend(*(id *)(a1 + 32), "priority", v52, v53, v54, v55) != (id)300) {
      goto LABEL_40;
    }
    if (!*(_BYTE *)(a1 + 116)) {
      goto LABEL_40;
    }
    if ((v56 & 1) != 0) {
      goto LABEL_40;
    }
    id v47 = (void *)objc_claimAutoreleasedReturnValue( +[IDSUTunDeliveryController sharedInstance]( &OBJC_CLASS___IDSUTunDeliveryController,  "sharedInstance"));
    unsigned int v48 = [v47 hasSpaceForMessagesWithPriority:300 dataProtectionClass:*(unsigned int *)(a1 + 112)];

    if (!v48) {
      goto LABEL_40;
    }
    __int16 v49 = (void *)objc_claimAutoreleasedReturnValue( +[IDSUTunDeliveryController sharedInstance]( &OBJC_CLASS___IDSUTunDeliveryController,  "sharedInstance"));
    unsigned int v50 = [v49 hasSpaceForMessagesWithPriority:300 dataProtectionClass:*(unsigned int *)(a1 + 112)];

    if (!v50) {
      goto LABEL_40;
    }
    __int16 v51 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDaemonPriorityQueueController sharedInstance]( &OBJC_CLASS___IDSDaemonPriorityQueueController,  "sharedInstance"));
    v58[0] = _NSConcreteStackBlock;
    v58[1] = 3221225472LL;
    v58[2] = sub_10035315C;
    v58[3] = &unk_1008F78D8;
    id v59 = (IDSDeliveryContext *)*(id *)(a1 + 56);
    int v60 = *(_DWORD *)(a1 + 112);
    [v51 performBlockMainQueue:v58];

    id v12 = v59;
LABEL_39:

LABEL_40:
    uint64_t v8 = v57;
    goto LABEL_41;
  }

  if (*(void *)(a1 + 80))
  {
    id v57 = v7;
    int v11 = objc_alloc(&OBJC_CLASS___NSError);
    id v10 = -[NSError initWithDomain:code:userInfo:](v11, "initWithDomain:code:userInfo:", IDSSendErrorDomain, 18LL, 0LL);
    id v12 = -[IDSDeliveryContext initWithResponseCode:error:lastCall:]( objc_alloc(&OBJC_CLASS___IDSDeliveryContext),  "initWithResponseCode:error:lastCall:",  18LL,  v10,  1LL);
    (*(void (**)(void))(*(void *)(a1 + 80) + 16LL))();
    uint64_t v13 = OSLogHandleForTransportCategory("IDSDaemon");
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412546;
      *(void *)v90 = v57;
      *(_WORD *)&v90[8] = 2112;
      *(void *)&v90[10] = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Persisting message failed guid: %@  params: %@, failing with IDSResponseDataProtectionClassUnavailable",  buf,  0x16u);
    }

    uint64_t v17 = os_log_shim_legacy_logging_enabled(v16);
    if ((_DWORD)v17)
    {
      if (_IDSShouldLogTransport(v17))
      {
        _IDSLogTransport( @"IDSDaemon",  @"IDS",  @"Persisting message failed guid: %@  params: %@, failing with IDSResponseDataProtectionClassUnavailable");
        if (_IDSShouldLog(0LL, @"IDSDaemon")) {
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Persisting message failed guid: %@  params: %@, failing with IDSResponseDataProtectionClassUnavailable");
        }
      }
    }

    goto LABEL_39;
  }

id sub_10035285C(uint64_t a1)
{
  return [*(id *)(a1 + 88) _forwardSendMessageToAccountWithSendParameters:*(void *)(a1 + 32) service:*(void *)(a1 + 40) threadContext:*(void *)(a1 + 48) guid:*(void *)(a1 + 56) dataProtectionClass:*(unsigned int *)(a1 + 96) willSendBlock:*(void *)(a1 + 64) p rogressBlock:*(void *)(a1 + 72) completionBlock:*(void *)(a1 + 80)];
}

void sub_100352894(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountUUID]);
  +[IDSDaemon _sendLocalDeliveryMessagesForAccountUUID:threadContext:priority:dataProtectionClass:]( IDSDaemon,  "_sendLocalDeliveryMessagesForAccountUUID:threadContext:priority:dataProtectionClass:",  v2,  *(void *)(a1 + 40),  [*(id *)(a1 + 32) priority],  *(unsigned int *)(a1 + 48));
}

id sub_1003528FC(uint64_t a1)
{
  return [*(id *)(a1 + 88) _forwardSendMessageToAccountWithSendParameters:*(void *)(a1 + 32) service:*(void *)(a1 + 40) threadContext:*(void *)(a1 + 48) guid:*(void *)(a1 + 56) dataProtectionClass:*(unsigned int *)(a1 + 96) willSendBlock:*(void *)(a1 + 64) p rogressBlock:*(void *)(a1 + 72) completionBlock:*(void *)(a1 + 80)];
}

void sub_100352934(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = OSLogHandleForIDSCategory("IDSDaemon");
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) message]);
    id v7 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) destinations]);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
    uint64_t v9 = *(void *)(a1 + 40);
    *(_DWORD *)buf = 138413314;
    id v25 = v3;
    __int16 v26 = 2112;
    id v27 = v6;
    __int16 v28 = 2112;
    id v29 = v7;
    __int16 v30 = 2112;
    uint64_t v31 = v8;
    __int16 v32 = 2112;
    uint64_t v33 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "account %@ sendMessage: %@ to: %@ identifier: %@ guid: %@ - non-urgent message has been persisted.",  buf,  0x34u);
  }

  if (os_log_shim_legacy_logging_enabled(v10) && _IDSShouldLog(1LL, @"IDSDaemon"))
  {
    int v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) message]);
    id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) destinations]);
    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
    uint64_t v23 = *(void *)(a1 + 40);
    id v20 = v11;
    uint64_t v21 = v12;
    id v18 = v3;
    _IDSLogV( 1LL,  @"IDSFoundation",  @"IDSDaemon",  @"account %@ sendMessage: %@ to: %@ identifier: %@ guid: %@ - non-urgent message has been persisted.");
  }

  objc_msgSend(*(id *)(a1 + 48), "_processOutgoingNonUrgentInternetMessages", v18, v20, v21, v22, v23);
  if (*(void *)(a1 + 56))
  {
    uint64_t v13 = OSLogHandleForIDSCategory("IDSDaemon");
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) message]);
      *(_DWORD *)buf = 138412290;
      id v25 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Non-urgent message send %@ will be maintained by us from now on, alerting sender that it's been persisted and sc heduled for sending.",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v16) && _IDSShouldLog(0LL, @"IDSDaemon"))
    {
      unsigned __int8 v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) message]);
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Non-urgent message send %@ will be maintained by us from now on, alerting sender that it's been persisted and scheduled for sending.");
    }

    uint64_t v17 = -[IDSDeliveryContext initWithResponseCode:error:lastCall:]( objc_alloc(&OBJC_CLASS___IDSDeliveryContext),  "initWithResponseCode:error:lastCall:",  0LL,  0LL,  1LL);
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))(*(void *)(a1 + 56));
  }
}

uint64_t sub_100352C30(uint64_t result, int a2)
{
  if (a2) {
    return (*(uint64_t (**)(void))(*(void *)(result + 32) + 16LL))();
  }
  return result;
}

void sub_100352C48(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 72) accountController]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountUUID]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 accountWithUniqueID:v3]);

  if (!v4)
  {
    uint64_t v15 = OSLogHandleForIDSCategory("IDSDaemon");
    uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountUUID]);
      *(_DWORD *)buf = 138412290;
      *(void *)id v46 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "(Messaging2) No account found for ID: %@",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v18) && _IDSShouldLog(0LL, @"IDSDaemon"))
    {
      id v39 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountUUID]);
      _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon", @"(Messaging2) No account found for ID: %@");
    }

    IMLogBacktrace(@"IDSDaemon");
    uint64_t v19 = *(void *)(a1 + 40);
    id v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) alternateCallbackID]);
    +[IDSDMessageStore deleteOutgoingMessageWithGUID:alternateGUID:dataProtectionClass:]( &OBJC_CLASS___IDSDMessageStore,  "deleteOutgoingMessageWithGUID:alternateGUID:dataProtectionClass:",  v19,  v20,  *(unsigned int *)(a1 + 80));

    uint64_t v21 = objc_alloc(&OBJC_CLASS___NSError);
    uint64_t v22 = -[NSError initWithDomain:code:userInfo:](v21, "initWithDomain:code:userInfo:", IDSSendErrorDomain, 2LL, 0LL);
    if (*(void *)(a1 + 56))
    {
      uint64_t v23 = -[IDSDeliveryContext initWithResponseCode:error:lastCall:]( objc_alloc(&OBJC_CLASS___IDSDeliveryContext),  "initWithResponseCode:error:lastCall:",  2LL,  v22,  1LL);
      (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))(*(void *)(a1 + 56));
    }

    goto LABEL_19;
  }

  if (*(_BYTE *)(a1 + 84))
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 service]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 identifier]);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"message %@ on service %@",  v5,  v7));

    uint64_t v9 = *(void **)(a1 + 48);
    uint64_t v10 = *(void *)(a1 + 32);
    uint64_t v13 = im_primary_queue(v11, v12);
    id v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
    v42[0] = _NSConcreteStackBlock;
    v42[1] = 3221225472LL;
    v42[2] = sub_100353144;
    v42[3] = &unk_100901DE0;
    id v44 = *(id *)(a1 + 64);
    id v43 = v4;
    [v9 _performDuetCheckAndSendForAccount:v43 sendParameters:v10 logString:v8 fromQueue:v14 completionBlock:v42];
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
  }

  if (*(void *)(a1 + 56))
  {
    uint64_t v24 = OSLogHandleForIDSCategory("IDSDaemon");
    id v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v26 = (void *)objc_claimAutoreleasedReturnValue([v4 service]);
      id v27 = (id)objc_claimAutoreleasedReturnValue([v26 identifier]);
      id v28 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
      id v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) alternateCallbackID]);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)id v46 = 11;
      *(_WORD *)&v46[4] = 2112;
      *(void *)&v46[6] = v27;
      __int16 v47 = 2112;
      id v48 = v28;
      __int16 v49 = 2112;
      unsigned int v50 = v29;
      _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "Notifying client IDSResponsePersisted(%d) for %@ id %@ alt %@",  buf,  0x26u);
    }

    if (os_log_shim_legacy_logging_enabled(v30) && _IDSShouldLog(0LL, @"IDSDaemon"))
    {
      uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v4 service]);
      __int16 v32 = (void *)objc_claimAutoreleasedReturnValue([v31 identifier]);
      uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
      id v41 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) alternateCallbackID]);
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Notifying client IDSResponsePersisted(%d) for %@ id %@ alt %@");
    }

    uint64_t v22 = -[IDSDeliveryContext initWithResponseCode:error:lastCall:]( objc_alloc(&OBJC_CLASS___IDSDeliveryContext),  "initWithResponseCode:error:lastCall:",  11LL,  0LL,  0LL);
    (*(void (**)(void, IDSDeliveryContext *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 56) + 16LL))( *(void *)(a1 + 56),  v22,  v33,  v34,  v35,  v36,  v37,  v38);
LABEL_19:
  }
}

void sub_100353110(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x100352E24LL);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_100353144(uint64_t result, int a2)
{
  if (a2) {
    return (*(uint64_t (**)(void, void))(*(void *)(result + 40) + 16LL))( *(void *)(result + 40),  *(void *)(result + 32));
  }
  return result;
}

void sub_10035315C(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 40)));
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObject:](&OBJC_CLASS___NSArray, "arrayWithObject:", v4));
  [v3 _handleSpaceBecomingAvailableForUrgentLocalMessagesWithDataProtectionClasses:v5 withMessageTypes:0];

  objc_autoreleasePoolPop(v2);
}

void sub_100353ED8(_Unwind_Exception *exc_buf, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1003534ECLL);
  }

  _Unwind_Resume(exc_buf);
}

void sub_100353F58(id *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([a1[4] servicePushTopic]);
  id v5 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([a1[4] subService]);
  id v7 = [v6 length];
  id v8 = a1[4];
  if (v7) {
    uint64_t v9 = objc_claimAutoreleasedReturnValue([v8 subService]);
  }
  else {
    uint64_t v9 = objc_claimAutoreleasedReturnValue([v8 serviceIdentifier]);
  }
  uint64_t v10 = (void *)v9;

  if (v10) {
    CFDictionarySetValue((CFMutableDictionaryRef)v5, IDSMessageContextServiceIdentifierKey, v10);
  }
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([a1[5] localDestinationDeviceUUID]);
  if (v11) {
    CFDictionarySetValue((CFMutableDictionaryRef)v5, IDSMessageContextOriginalDestinationDeviceKey, v11);
  }

  if (v4)
  {
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v3 responseError]);
    if ([v12 code] == (id)24)
    {
      unsigned int v13 = [a1[4] silentlyFailMessagesOnSwitch];

      if (v13)
      {
        uint64_t v14 = OSLogHandleForIDSCategory("IDSDaemon");
        uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          id v36 = v10;
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Silently failing %@ messages due to watch switch",  buf,  0xCu);
        }

        if (os_log_shim_legacy_logging_enabled(v16)
          && _IDSShouldLog(0LL, @"IDSDaemon"))
        {
          id v29 = v10;
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Silently failing %@ messages due to watch switch");
        }

        goto LABEL_19;
      }
    }

    else
    {
    }

    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472LL;
    v31[2] = sub_1003543AC;
    v31[3] = &unk_1008F7C28;
    id v32 = a1[5];
    id v33 = v3;
    uint64_t v34 = v5;
    [v17 enqueueBroadcast:v31 forTopic:v4 entitlement:kIDSMessagingEntitlement command:0 capabilities:kIDSListenerCapConsumesLaunchOnDemandOutgoingMessageUpdates messageContext:0];
  }

void sub_1003543AC(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v9 = (id)objc_claimAutoreleasedReturnValue([v3 identifier]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) alternateCallbackID]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) mainAccountUUID]);
  id v7 = [*(id *)(a1 + 40) idsResponseCode];
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) responseError]);
  objc_msgSend( v4,  "messageIdentifier:alternateCallbackID:forAccount:updatedWithResponseCode:error:lastCall:context:",  v9,  v5,  v6,  v7,  v8,  objc_msgSend(*(id *)(a1 + 40), "lastCall"),  *(void *)(a1 + 48));
}

void sub_10035447C(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    id v2 = -[IDSDeliveryContext initWithResponseCode:error:lastCall:]( objc_alloc(&OBJC_CLASS___IDSDeliveryContext),  "initWithResponseCode:error:lastCall:",  10LL,  0LL,  1LL);
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

void sub_1003551AC(_Unwind_Exception *exc_buf, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1003547B8LL);
  }

  _Unwind_Resume(exc_buf);
}

void sub_10035522C(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([a1[4] servicePushTopic]);
  id v5 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([a1[4] subService]);
  id v7 = [v6 length];
  id v8 = a1[4];
  if (v7) {
    uint64_t v9 = objc_claimAutoreleasedReturnValue([v8 subService]);
  }
  else {
    uint64_t v9 = objc_claimAutoreleasedReturnValue([v8 serviceIdentifier]);
  }
  uint64_t v10 = (void *)v9;

  if (v10) {
    CFDictionarySetValue((CFMutableDictionaryRef)v5, IDSMessageContextServiceIdentifierKey, v10);
  }
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([a1[5] localDestinationDeviceUUID]);
  if (v11) {
    CFDictionarySetValue((CFMutableDictionaryRef)v5, IDSMessageContextOriginalDestinationDeviceKey, v11);
  }

  if (v4)
  {
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v3 responseError]);
    if ([v12 code] == (id)24)
    {
      unsigned int v13 = [a1[4] silentlyFailMessagesOnSwitch];

      if (v13)
      {
        uint64_t v14 = OSLogHandleForIDSCategory("IDSDaemon");
        uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          id v36 = v10;
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Silently failing %@ messages due to watch switch",  buf,  0xCu);
        }

        if (os_log_shim_legacy_logging_enabled(v16)
          && _IDSShouldLog(0LL, @"IDSDaemon"))
        {
          id v29 = v10;
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Silently failing %@ messages due to watch switch");
        }

        goto LABEL_19;
      }
    }

    else
    {
    }

    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472LL;
    v31[2] = sub_100355680;
    v31[3] = &unk_1008F7C28;
    id v32 = a1[5];
    id v33 = v3;
    uint64_t v34 = v5;
    [v17 enqueueBroadcast:v31 forTopic:v4 entitlement:kIDSMessagingEntitlement command:0 capabilities:kIDSListenerCapConsumesLaunchOnDemandOutgoingMessageUpdates messageContext:0];
  }

void sub_100355680(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v9 = (id)objc_claimAutoreleasedReturnValue([v3 identifier]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) alternateCallbackID]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) mainAccountUUID]);
  id v7 = [*(id *)(a1 + 40) idsResponseCode];
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) responseError]);
  objc_msgSend( v4,  "messageIdentifier:alternateCallbackID:forAccount:updatedWithResponseCode:error:lastCall:context:",  v9,  v5,  v6,  v7,  v8,  objc_msgSend(*(id *)(a1 + 40), "lastCall"),  *(void *)(a1 + 48));
}

void sub_100355750(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    id v2 = -[IDSDeliveryContext initWithResponseCode:error:lastCall:]( objc_alloc(&OBJC_CLASS___IDSDeliveryContext),  "initWithResponseCode:error:lastCall:",  10LL,  0LL,  1LL);
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

void sub_100355864(uint64_t a1)
{
  __int128 v7 = 0u;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      id v6 = 0LL;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        objc_msgSend( *(id *)(a1 + 40),  "_failSavedMessageCleanly:withResponseCode:",  *(void *)(*((void *)&v7 + 1) + 8 * (void)v6),  *(void *)(a1 + 48),  (void)v7);
        id v6 = (char *)v6 + 1;
      }

      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }

    while (v4);
  }
}

void sub_100355AFC(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) serviceController]);
    id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 serviceWithPushTopic:*(void *)(a1 + 32)]);
    unsigned int v4 = [v3 shouldSilentlyFailMessagesOnSwitch];

    if (*(void *)(a1 + 64) == 24LL && v4)
    {
      uint64_t v5 = OSLogHandleForIDSCategory("IDSDaemon");
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        __int128 v7 = *(void **)(a1 + 32);
        *(_DWORD *)buf = 138412290;
        __int16 v37 = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Silently failing %@ messages due to watch switch",  buf,  0xCu);
      }

      if (os_log_shim_legacy_logging_enabled(v8))
      {
        if (_IDSShouldLog(0LL, @"IDSDaemon"))
        {
          uint64_t v30 = *(void **)(a1 + 32);
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Silently failing %@ messages due to watch switch");
        }
      }
    }

    else
    {
      __int128 v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) command]);
      id v11 = [v10 integerValue];

      if (v11 == (id)229)
      {
        uint64_t v12 = OSLogHandleForIDSCategory("IDSDaemon");
        unsigned int v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) guid]);
          *(_DWORD *)buf = 138412290;
          __int16 v37 = v14;
          _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Silently failing message with guid %@ due to it being a proxy ",  buf,  0xCu);
        }

        if (os_log_shim_legacy_logging_enabled(v15)
          && _IDSShouldLog(0LL, @"IDSDaemon"))
        {
          uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) guid]);
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Silently failing message with guid %@ due to it being a proxy ");
        }
      }

      else
      {
        uint64_t v16 = objc_alloc_init(&OBJC_CLASS___IMMessageContext);
        uint64_t v17 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
        uint64_t v18 = (__CFDictionary *)v17;
        uint64_t v19 = *(const void **)(a1 + 32);
        if (v19) {
          CFDictionarySetValue((CFMutableDictionaryRef)v17, IDSMessageContextServiceIdentifierKey, v19);
        }
        id v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) localDestinationDeviceUUID]);
        if (v20) {
          CFDictionarySetValue(v18, IDSMessageContextOriginalDestinationDeviceKey, v20);
        }

        v32[0] = _NSConcreteStackBlock;
        v32[1] = 3221225472LL;
        v32[2] = sub_100355F2C;
        v32[3] = &unk_100901E80;
        unsigned int v21 = *(void **)(a1 + 40);
        id v22 = *(id *)(a1 + 48);
        uint64_t v24 = *(void *)(a1 + 56);
        uint64_t v23 = *(void *)(a1 + 64);
        uint64_t v34 = v18;
        uint64_t v35 = v23;
        id v33 = v22;
        uint64_t v25 = kIDSMessagingEntitlement;
        uint64_t v26 = kIDSListenerCapConsumesLaunchOnDemandOutgoingMessageUpdates;
        id v27 = v18;
        [v21 enqueueBroadcast:v32 forTopic:v24 entitlement:v25 command:0 capabilities:v26 messageContext:v16];
      }
    }

    id v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "guid", v30));
    id v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) alternateGUID]);
    +[IDSDMessageStore deleteOutgoingMessageWithGUID:alternateGUID:]( &OBJC_CLASS___IDSDMessageStore,  "deleteOutgoingMessageWithGUID:alternateGUID:",  v28,  v29);
  }

  else
  {
    id v31 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) guid]);
    __int128 v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) alternateGUID]);
    +[IDSDMessageStore deleteOutgoingMessageWithGUID:alternateGUID:]( &OBJC_CLASS___IDSDMessageStore,  "deleteOutgoingMessageWithGUID:alternateGUID:",  v31,  v9);
  }

void sub_100355F2C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = OSLogHandleForTransportCategory("IDSDaemon");
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) guid]);
    *(_DWORD *)buf = 138412290;
    uint64_t v15 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Broadcasting failure of outgoing message %@ that never got processed through the database",  buf,  0xCu);
  }

  uint64_t v8 = os_log_shim_legacy_logging_enabled(v7);
  if ((_DWORD)v8 && _IDSShouldLogTransport(v8))
  {
    unsigned int v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) guid]);
    _IDSLogTransport( @"IDSDaemon",  @"IDS",  @"Broadcasting failure of outgoing message %@ that never got processed through the database");
  }

  __int128 v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSSendErrorDomain,  *(void *)(a1 + 48),  0LL,  v13));
  if (v3)
  {
    __int128 v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) guid]);
    id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) alternateGUID]);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) mainAccountGuid]);
    objc_msgSend( v3,  "messageIdentifier:alternateCallbackID:forAccount:updatedWithResponseCode:error:lastCall:context:",  v10,  v11,  v12,  objc_msgSend(v9, "code"),  v9,  1,  *(void *)(a1 + 40));
  }
}

void sub_1003563F8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _maxOutgoingDatabasesSizeInMB];
  v7[0] = 0LL;
  v7[1] = v7;
  v7[2] = 0x3032000000LL;
  v7[3] = sub_100356518;
  v7[4] = sub_100356528;
  id v8 = 0LL;
  id v3 = *(void **)(a1 + 40);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _BYTE v6[2] = sub_100356530;
  v6[3] = &unk_100901EA8;
  void v6[4] = v7;
  [v3 enumerateObjectsUsingBlock:v6];
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDaemonPriorityQueueController sharedInstance]( &OBJC_CLASS___IDSDaemonPriorityQueueController,  "sharedInstance"));
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_1003565E4;
  v5[3] = &unk_100901ED0;
  v5[4] = *(void *)(a1 + 32);
  v5[5] = v7;
  v5[6] = v2;
  [v4 performBlockSyncPriority:v5];

  _Block_object_dispose(v7, 8);
}

void sub_100356500( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

uint64_t sub_100356518(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100356528(uint64_t a1)
{
}

void sub_100356530(uint64_t a1, void *a2)
{
  id v9 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 accountWithUniqueID:v9]);

  if (([v4 isUsableForSending] & 1) == 0)
  {
    uint64_t v5 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
    if (!v5)
    {
      id v6 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8LL);
      id v8 = *(void **)(v7 + 40);
      *(void *)(v7 + 40) = v6;

      uint64_t v5 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL);
    }

    [v5 addObject:v9];
  }
}

void sub_1003565E4(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPairingManager sharedInstance](&OBJC_CLASS___IDSPairingManager, "sharedInstance"));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 pairedDeviceUniqueID]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDMessageStore allUnsentOutgoingMessagesForAccounts:localDestinationDeviceID:hardLimit:]( &OBJC_CLASS___IDSDMessageStore,  "allUnsentOutgoingMessagesForAccounts:localDestinationDeviceID:hardLimit:",  v2,  v4,  2500LL));

  [*(id *)(a1 + 32) _failSavedMessagesCleanly:v5 withResponseCode:9];
  if (+[IDSDMessageStore databaseSizeBiggerThanThreshold:]( &OBJC_CLASS___IDSDMessageStore,  "databaseSizeBiggerThanThreshold:",  *(void *)(a1 + 48)))
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDMessageStore largestPayloadSizeAccountUUID]( &OBJC_CLASS___IDSDMessageStore,  "largestPayloadSizeAccountUUID"));
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 threadSafeServiceWithAccountUniqueID:v6]);
    unsigned int v9 = [v8 adHocServiceType];

    if (v9 == 2)
    {
      __int128 v10 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPairingManager sharedInstance](&OBJC_CLASS___IDSPairingManager, "sharedInstance"));
      id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 pairedDeviceUniqueID]);
    }

    else
    {
      id v11 = 0LL;
    }

    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDMessageStore allOutgoingMessagesOnAccountGUID:localDestinationDeviceID:]( &OBJC_CLASS___IDSDMessageStore,  "allOutgoingMessagesOnAccountGUID:localDestinationDeviceID:",  v6,  v11));
    uint64_t v13 = OSLogHandleForTransportCategory("IDSDaemon");
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = *(void *)(a1 + 48);
      *(_DWORD *)buf = 67109378;
      int v26 = v15;
      __int16 v27 = 2112;
      id v28 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "IDS outgoing DB past threshold size %d MB, largest payload size account UUID: %@",  buf,  0x12u);
    }

    uint64_t v17 = os_log_shim_legacy_logging_enabled(v16);
    if ((_DWORD)v17 && _IDSShouldLogTransport(v17))
    {
      uint64_t v23 = *(void *)(a1 + 48);
      uint64_t v24 = v6;
      *(void *)&double v18 = _IDSLogTransport( @"IDSDaemon",  @"IDS",  @"IDS outgoing DB past threshold size %d MB, largest payload size account UUID: %@").n128_u64[0];
    }

    objc_msgSend(*(id *)(a1 + 32), "_failSavedMessagesCleanly:withResponseCode:", v12, 19, v18, v23, v24);
  }

  uint64_t v19 = OSLogHandleForTransportCategory("IDSDaemon");
  id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "Ending cleanup of outgoing message database",  buf,  2u);
  }

  uint64_t v22 = os_log_shim_legacy_logging_enabled(v21);
}

void sub_100356948(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) _maxMessagesForRunawayClientConsideration];
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDaemonPriorityQueueController sharedInstance]( &OBJC_CLASS___IDSDaemonPriorityQueueController,  "sharedInstance"));
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_1003569C4;
  v3[3] = &unk_1008F6558;
  v3[4] = v1;
  [v2 performBlockSyncPriority:v3];
}

void sub_1003569C4(uint64_t a1)
{
  id v1 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDMessageStore largestEnquedMessagesAccountUUIDOverThreshold:]( &OBJC_CLASS___IDSDMessageStore,  "largestEnquedMessagesAccountUUIDOverThreshold:",  *(void *)(a1 + 32)));
  if ([v1 length])
  {
    uint64_t v2 = OSLogHandleForIDSCategory("IDSDaemon");
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Runaway Client Detected, Purging messages for given client",  v5,  2u);
    }

    if (os_log_shim_legacy_logging_enabled(v4) && _IDSShouldLog(0LL, @"IDSDaemon")) {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Runaway Client Detected, Purging messages for given client");
    }
    +[IDSDMessageStore deleteAllMessagesWithAccountGUID:]( &OBJC_CLASS___IDSDMessageStore,  "deleteAllMessagesWithAccountGUID:",  v1);
  }
}

void sub_100357038(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x100356FB8LL);
  }

  _Unwind_Resume(a1);
}

void sub_100357304(id a1, OS_xpc_object *a2)
{
  uint64_t v2 = a2;
  xpc_activity_state_t state = xpc_activity_get_state(v2);
  if (state == 2)
  {
    uint64_t v11 = OSLogHandleForIDSCategory("IDSDaemon");
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = @"YES";
      if (!v2) {
        uint64_t v13 = @"NO";
      }
      *(_DWORD *)buf = 138412290;
      double v18 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Got called to checkpoint vacuum DB run state with non null activity %@",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v14) && _IDSShouldLog(0LL, @"IDSDaemon"))
    {
      uint64_t v15 = @"YES";
      if (!v2) {
        uint64_t v15 = @"NO";
      }
      uint64_t v16 = v15;
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Got called to checkpoint vacuum DB run state with non null activity %@");
    }

    +[IDSDMessageStore checkpointAndVacuumDBWithDataProtectionClass:]( &OBJC_CLASS___IDSDMessageStore,  "checkpointAndVacuumDBWithDataProtectionClass:",  0LL,  v16);
    +[IDSDMessageStore checkpointAndVacuumDBWithDataProtectionClass:]( &OBJC_CLASS___IDSDMessageStore,  "checkpointAndVacuumDBWithDataProtectionClass:",  2LL);
  }

  else if (!state)
  {
    uint64_t v4 = OSLogHandleForIDSCategory("IDSDaemon");
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      id v6 = @"YES";
      if (!v2) {
        id v6 = @"NO";
      }
      *(_DWORD *)buf = 138412290;
      double v18 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Told to Check In for Checkpointing and Vacuum with activity %@ ",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v7) && _IDSShouldLog(0LL, @"IDSDaemon")) {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Told to Check In for Checkpointing and Vacuum with activity %@ ");
    }
    xpc_object_t v8 = xpc_dictionary_create(0LL, 0LL, 0LL);
    xpc_dictionary_set_int64(v8, XPC_ACTIVITY_GRACE_PERIOD, 0LL);
    xpc_dictionary_set_int64(v8, XPC_ACTIVITY_DELAY, 86400LL);
    xpc_dictionary_set_BOOL(v8, XPC_ACTIVITY_REQUIRE_SCREEN_SLEEP, 1);
    xpc_dictionary_set_BOOL(v8, XPC_ACTIVITY_ALLOW_BATTERY, 0);
    xpc_dictionary_set_string(v8, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_MAINTENANCE);
    xpc_dictionary_set_BOOL(v8, XPC_ACTIVITY_REQUIRES_CLASS_C, 1);
    xpc_object_t v9 = xpc_activity_copy_criteria(v2);
    __int128 v10 = v9;
    if (!v9 || !xpc_equal(v9, v8)) {
      xpc_activity_set_criteria(v2, v8);
    }
  }
}

void sub_100357A34(uint64_t a1, void *a2)
{
  id v9 = a2;
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) service]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 identifier]);
  LODWORD(v3) = [v3 client:v9 isEntitledToAccessService:v5 forEntitlement:kIDSMessagingEntitlement shouldWarn:1];

  if ((_DWORD)v3)
  {
    uint64_t v6 = objc_claimAutoreleasedReturnValue([v9 ID]);
    uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8LL);
    xpc_object_t v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = v6;
  }
}

void sub_100357AD8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    id v6 = [v3 idsResponseCode];
    id v7 = (id)objc_claimAutoreleasedReturnValue([v3 responseError]);
    unsigned int v8 = [v3 lastCall];
    id v9 = @"NO";
    uint64_t v10 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 134218754;
    if (v8) {
      id v9 = @"YES";
    }
    id v14 = v6;
    __int16 v15 = 2112;
    id v16 = v7;
    __int16 v17 = 2112;
    double v18 = v9;
    __int16 v19 = 2112;
    uint64_t v20 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "sendServerMessage updated with responseCode %ld error %@  lastCall %@ - messageContext %@",  buf,  0x2Au);
  }

  if (os_log_shim_legacy_logging_enabled(v11) && _IDSShouldLog(1LL, @"IDSDaemon"))
  {
    [v3 idsResponseCode];
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v3 responseError]);
    [v3 lastCall];
    _IDSLogV( 1LL,  @"IDSFoundation",  @"IDSDaemon",  @"sendServerMessage updated with responseCode %ld error %@  lastCall %@ - messageContext %@");
  }
}

void sub_1003583F0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 entitlements]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 dictionaryRepresentation]);
  **(void **)(a1 + 32) = [v5 copy];

  id v6 = (id)objc_claimAutoreleasedReturnValue([v3 ID]);
  **(void **)(a1 + 40) = [v6 copy];
}

void sub_100358E48(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localObject]);
  id v3 = *(void **)(a1 + 40);
  if (v3)
  {
    id v4 = [v3 keyType];
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) keyDiversifier]);
  }

  else
  {
    uint64_t v5 = 0LL;
    id v4 = 0LL;
  }

  uint64_t v6 = OSLogHandleForIDSCategory("IDSDaemon");
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v8 = *(void **)(a1 + 80);
    id v9 = *(void **)(a1 + 56);
    uint64_t v10 = *(void *)(a1 + 64);
    uint64_t v12 = *(void *)(a1 + 40);
    uint64_t v11 = *(void *)(a1 + 48);
    *(_DWORD *)buf = 138413314;
    uint64_t v55 = v11;
    __int16 v56 = 2112;
    id v57 = v9;
    __int16 v58 = 2048;
    id v59 = v8;
    __int16 v60 = 2112;
    uint64_t v61 = v10;
    __int16 v62 = 2112;
    uint64_t v63 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Daemon received signData request {requestID: %@, data: %@, algo: %ld, service: %@, options: %@}",  buf,  0x34u);
  }

  if (os_log_shim_legacy_logging_enabled(v13) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    uint64_t v51 = *(void *)(a1 + 64);
    uint64_t v52 = *(void *)(a1 + 40);
    uint64_t v49 = *(void *)(a1 + 80);
    __int128 v46 = *(_OWORD *)(a1 + 48);
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Daemon received signData request {requestID: %@, data: %@, algo: %ld, service: %@, options: %@}");
  }

  if (*(void *)(a1 + 56)
    && *(void *)(a1 + 64)
    && *(void *)(a1 + 48)
    && IDSIsValidSigningAlgorithm(*(void *)(a1 + 80))
    && (IDSIsValidSigningKeyType(v4) & 1) != 0)
  {
    if ([*(id *)(a1 + 72) validateListenerForLocalObject:v2 andCheckEntitlement:kIDSMessagingEntitlement forAccessToServiceWithIdentifier:*(void *)(a1 + 64)])
    {
      id v14 = [*(id *)(a1 + 72) _signatureTypeForSigningAlgorithm:*(void *)(a1 + 80)];
      if (v14 != (id)-1000LL || (_DWORD)v4)
      {
        id v36 = (void *)objc_claimAutoreleasedReturnValue( +[IDSEncryptionController sharedInstance]( &OBJC_CLASS___IDSEncryptionController,  "sharedInstance",  v46,  v49,  v51,  v52));
        uint64_t v37 = *(void *)(a1 + 56);
        uint64_t v38 = *(void *)(a1 + 64);
        id v53 = 0LL;
        uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue( [v36 publicKeySignData:v37 withSignatureType:v14 keyType:v4 keyDiversifier:v5 service:v38 priority:300 error:&v53]);
        id v20 = v53;

        uint64_t v39 = OSLogHandleForIDSCategory("IDSDaemon");
        uint64_t v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
        if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v41 = *(void *)(a1 + 48);
          *(_DWORD *)buf = 138412802;
          uint64_t v55 = v41;
          __int16 v56 = 2112;
          id v57 = v23;
          __int16 v58 = 2112;
          id v59 = v20;
          _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEFAULT,  "Finished signing request... broadcasting { request: %@, signedData: %@, error: %@ }",  buf,  0x20u);
        }

        if (os_log_shim_legacy_logging_enabled(v42)
          && _IDSShouldLog(0LL, @"IDSDaemon"))
        {
          id v48 = v23;
          id v50 = v20;
          uint64_t v47 = *(void *)(a1 + 48);
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Finished signing request... broadcasting { request: %@, signedData: %@, error: %@ }");
        }

        objc_msgSend(*(id *)(a1 + 32), "setReply:", 1, v47, v48, v50);
        id v43 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
        id v44 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localObject]);
        uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue([v43 broadcasterForLocalObject:v44 messageContext:*(void *)(a1 + 32)]);

        [v45 finishedSigningForRequest:*(void *)(a1 + 48) signedData:v23 error:v20];
      }

      else
      {
        uint64_t v15 = OSLogHandleForIDSCategory("IDSDaemon");
        id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v17 = *(void *)(a1 + 48);
          double v18 = *(void **)(a1 + 80);
          *(_DWORD *)buf = 138412802;
          uint64_t v55 = v17;
          __int16 v56 = 2048;
          id v57 = v18;
          __int16 v58 = 2048;
          id v59 = 0LL;
          _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Daemon dropping request %@ because it has a mismatched signing algorithm %ld and key type %ld",  buf,  0x20u);
        }

        if (os_log_shim_legacy_logging_enabled(v19)
          && _IDSShouldLog(0LL, @"IDSDaemon"))
        {
          *((void *)&v46 + 1) = *(void *)(a1 + 80);
          uint64_t v49 = 0LL;
          *(void *)&__int128 v46 = *(void *)(a1 + 48);
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Daemon dropping request %@ because it has a mismatched signing algorithm %ld and key type %ld");
        }

        id v20 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSSigningErrorDomain,  1LL,  0LL,  v46,  v49,  v51,  v52));
        [*(id *)(a1 + 32) setReply:1];
        uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
        uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localObject]);
        uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v21 broadcasterForLocalObject:v22 messageContext:*(void *)(a1 + 32)]);

        [v23 finishedSigningForRequest:*(void *)(a1 + 48) signedData:0 error:v20];
      }
    }

    else
    {
      uint64_t v30 = OSLogHandleForIDSCategory("IDSDaemon");
      id v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v32 = *(void *)(a1 + 48);
        *(_DWORD *)buf = 138412290;
        uint64_t v55 = v32;
        _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "Daemon dropping request %@ because unentitled",  buf,  0xCu);
      }

      if (os_log_shim_legacy_logging_enabled(v33) && _IDSShouldLog(0LL, @"IDSDaemon"))
      {
        *(void *)&__int128 v46 = *(void *)(a1 + 48);
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Daemon dropping request %@ because unentitled");
      }

      id v20 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSSigningErrorDomain,  4LL,  0LL,  v46,  v49,  v51,  v52));
      [*(id *)(a1 + 32) setReply:1];
      uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
      uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localObject]);
      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v34 broadcasterForLocalObject:v35 messageContext:*(void *)(a1 + 32)]);

      [v23 finishedSigningForRequest:*(void *)(a1 + 48) signedData:0 error:v20];
    }

    goto LABEL_30;
  }

  uint64_t v24 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v26 = *(void *)(a1 + 48);
    *(_DWORD *)buf = 138412290;
    uint64_t v55 = v26;
    _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "Daemon dropping request %@ because it is missing required parameter",  buf,  0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v27) && _IDSShouldLog(0LL, @"IDSDaemon")) {
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Daemon dropping request %@ because it is missing required parameter");
  }
  if (*(void *)(a1 + 48))
  {
    id v20 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSSigningErrorDomain,  1LL,  0LL));
    [*(id *)(a1 + 32) setReply:1];
    id v28 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
    id v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localObject]);
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v28 broadcasterForLocalObject:v29 messageContext:*(void *)(a1 + 32)]);

    [v23 finishedSigningForRequest:*(void *)(a1 + 48) signedData:0 error:v20];
LABEL_30:
  }
}

void sub_100359764(uint64_t a1)
{
  v92 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localObject]);
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    unsigned int v90 = [v2 keyType];
    __int16 v91 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) keyDiversifier]);
  }

  else
  {
    __int16 v91 = 0LL;
    unsigned int v90 = 0;
  }

  uint64_t v3 = OSLogHandleForIDSCategory("IDSDaemon");
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 56);
    uint64_t v6 = *(void *)(a1 + 64);
    uint64_t v7 = *(void *)(a1 + 96);
    uint64_t v8 = *(void *)(a1 + 72);
    uint64_t v9 = *(void *)(a1 + 80);
    uint64_t v11 = *(void *)(a1 + 40);
    uint64_t v10 = *(void *)(a1 + 48);
    *(_DWORD *)buf = 138413826;
    uint64_t v108 = v10;
    __int16 v109 = 2112;
    uint64_t v110 = v5;
    __int16 v111 = 2112;
    uint64_t v112 = v6;
    __int16 v113 = 2048;
    uint64_t v114 = v7;
    __int16 v115 = 2112;
    uint64_t v116 = v8;
    __int16 v117 = 2112;
    uint64_t v118 = v9;
    __int16 v119 = 2112;
    uint64_t v120 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Daemon received verifySignedData request {requestID: %@, signedData: %@, data: %@, algo: %ld, service: %@, uri: %@, options: %@}",  buf,  0x48u);
  }

  if (os_log_shim_legacy_logging_enabled(v12) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    uint64_t v79 = *(void *)(a1 + 80);
    uint64_t v80 = *(void *)(a1 + 40);
    uint64_t v77 = *(void *)(a1 + 96);
    uint64_t v78 = *(void *)(a1 + 72);
    uint64_t v75 = *(void *)(a1 + 64);
    __int128 v73 = *(_OWORD *)(a1 + 48);
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Daemon received verifySignedData request {requestID: %@, signedData: %@, data: %@, algo: %ld, service: %@, uri: %@, options: %@}");
  }

  if (*(void *)(a1 + 56)
    && *(void *)(a1 + 64)
    && *(void *)(a1 + 72)
    && *(void *)(a1 + 80)
    && *(void *)(a1 + 48)
    && IDSIsValidSigningAlgorithm(*(void *)(a1 + 96))
    && (IDSIsValidSigningKeyType(v90) & 1) != 0)
  {
    if ([*(id *)(a1 + 88) validateListenerForLocalObject:v92 andCheckEntitlement:kIDSMessagingEntitlement forAccessToServiceWithIdentifier:*(void *)(a1 + 72)])
    {
      if ([*(id *)(a1 + 80) isTokenURI])
      {
        id v83 = [*(id *)(a1 + 88) _signatureTypeForSigningAlgorithm:*(void *)(a1 + 96)];
        if (v83 != (id)-1000LL || v90)
        {
          uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 80), "prefixedURI", v73, v75, v77, v78, v79, v80));
          id v104 = 0LL;
          uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v38 _stripPotentialTokenURIWithToken:&v104]);
          id v18 = v104;

          id v82 = -[IDSURI initWithPrefixedURI:](objc_alloc(&OBJC_CLASS___IDSURI), "initWithPrefixedURI:", v21);
          if (v18 && v21)
          {
            uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDAccountController sharedInstance]( &OBJC_CLASS___IDSDAccountController,  "sharedInstance"));
            uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDServiceController sharedInstance]( &OBJC_CLASS___IDSDServiceController,  "sharedInstance"));
            uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue([v40 serviceWithIdentifier:*(void *)(a1 + 72)]);
            uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue([v39 registeredAccountsOnService:v41]);

            __int128 v102 = 0u;
            __int128 v103 = 0u;
            __int128 v100 = 0u;
            __int128 v101 = 0u;
            id obj = v42;
            id v86 = [obj countByEnumeratingWithState:&v100 objects:v106 count:16];
            if (v86)
            {
              id v43 = 0LL;
              v89 = 0LL;
              uint64_t v85 = *(void *)v101;
              uint64_t v44 = kIDSServiceDefaultsSentinelAlias;
              while (2)
              {
                uint64_t v45 = 0LL;
                do
                {
                  if (*(void *)v101 != v85)
                  {
                    uint64_t v46 = v45;
                    objc_enumerationMutation(obj);
                    uint64_t v45 = v46;
                  }

                  uint64_t v87 = v45;
                  uint64_t v47 = *(void **)(*((void *)&v100 + 1) + 8 * v45);
                  id v48 = (void *)objc_claimAutoreleasedReturnValue([v47 primaryRegistration]);
                  uint64_t v88 = objc_claimAutoreleasedReturnValue([v48 registrationCert]);

                  __int128 v98 = 0u;
                  __int128 v99 = 0u;
                  __int128 v96 = 0u;
                  __int128 v97 = 0u;
                  uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue([v47 prefixedURIStringsFromRegistration]);
                  id v50 = [v49 countByEnumeratingWithState:&v96 objects:v105 count:16];
                  if (v50)
                  {
                    uint64_t v51 = *(void *)v97;
                    while (2)
                    {
                      for (i = 0LL; i != v50; i = (char *)i + 1)
                      {
                        if (*(void *)v97 != v51) {
                          objc_enumerationMutation(v49);
                        }
                        id v53 = *(void **)(*((void *)&v96 + 1) + 8LL * (void)i);
                        if (([v53 isEqualToString:v44] & 1) == 0)
                        {
                          uint64_t v54 = -[IDSURI initWithPrefixedURI:]( objc_alloc(&OBJC_CLASS___IDSURI),  "initWithPrefixedURI:",  v53);

                          v89 = v54;
                          goto LABEL_64;
                        }
                      }

                      id v50 = [v49 countByEnumeratingWithState:&v96 objects:v105 count:16];
                      if (v50) {
                        continue;
                      }
                      break;
                    }
                  }

void sub_10035A4B4(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = @"NO";
    *(_DWORD *)buf = 138412802;
    if ((_DWORD)a2) {
      uint64_t v9 = @"YES";
    }
    uint64_t v19 = v8;
    __int16 v20 = 2112;
    uint64_t v21 = v9;
    __int16 v22 = 2112;
    id v23 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Finished signing verification request... broadcasting { request: %@, verified: %@, error: %@ }",  buf,  0x20u);
  }

  if (os_log_shim_legacy_logging_enabled(v10) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    uint64_t v11 = @"NO";
    if ((_DWORD)a2) {
      uint64_t v11 = @"YES";
    }
    uint64_t v16 = v11;
    id v17 = v5;
    uint64_t v15 = *(void *)(a1 + 32);
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Finished signing verification request... broadcasting { request: %@, verified: %@, error: %@ }");
  }

  objc_msgSend(*(id *)(a1 + 40), "setReply:", 1, v15, v16, v17);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) localObject]);
  id v14 = (void *)objc_claimAutoreleasedReturnValue([v12 broadcasterForLocalObject:v13 messageContext:*(void *)(a1 + 40)]);

  [v14 finishedVerifyingSignedDataForRequest:*(void *)(a1 + 32) success:a2 error:v5];
}

void sub_10035A75C(uint64_t a1)
{
  id v236 = 0LL;
  id v237 = 0LL;
  [*(id *)(a1 + 32) _fetchAccountEntitlements:&v237 listenerID:&v236 inContext:*(void *)(a1 + 40)];
  id v1 = v237;
  id v2 = v236;
  uint64_t v208 = v1;
  if (v1)
  {
    id v206 = v2;
    id v217 = [[IDSSendParameters alloc] initWithDictionary:*(void *)(a1 + 48)];
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v217 accountUUID]);
    [v217 setMainAccountUUID:v3];

    id v4 = (void *)objc_claimAutoreleasedReturnValue([v217 fromID]);
    [v217 setOriginalfromID:v4];

    if ([*(id *)(a1 + 32) dropMessageIfDropPointIsDetectedWithSendParameters:v217])
    {
      id v5 = objc_alloc(&OBJC_CLASS___NSString);
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v217 messageUUID]);
      unsigned __int8 v207 = -[NSString initWithData:encoding:](v5, "initWithData:encoding:", v6, 4LL);

      uint64_t v7 = OSLogHandleForIDSCategory("IDSDaemon");
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v217 messageType]);
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v217 accountUUID]);
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v217 fromID]);
        *(_DWORD *)buf = 138413058;
        uint64_t v242 = (NSMutableDictionary *)v207;
        __int16 v243 = 2112;
        uint64_t v244 = v9;
        __int16 v245 = 2112;
        v246 = v10;
        __int16 v247 = 2112;
        uint64_t v248 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Message has been dropped at point IDSMessageDropPointDaemon { messageID: %@, type: %@, accountID: %@, fromID: %@ }",  buf,  0x2Au);
      }

      if (os_log_shim_legacy_logging_enabled(v12) && _IDSShouldLog(0LL, @"IDSDaemon"))
      {
        uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v217 messageType]);
        unsigned int v201 = (void *)objc_claimAutoreleasedReturnValue([v217 accountUUID]);
        v203 = (void *)objc_claimAutoreleasedReturnValue([v217 fromID]);
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Message has been dropped at point IDSMessageDropPointDaemon { messageID: %@, type: %@, accountID: %@, fromID: %@ }");
      }

void sub_10035C4B4(uint64_t a1, void *a2)
{
  id v11 = a2;
  uint64_t v3 = IDSSendErrorDomain;
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObject:forKey:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObject:forKey:",  @"Sending Internet IDS Messages before first unlock is no longer supported. Please contact the IDS & Privacy teams to discuss further",  @"Reason"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v3,  18LL,  v4));

  if (v11)
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) messageUUID]);
    uint64_t v7 = JWUUIDPushObjectToString(v6);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) alternateCallbackID]);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) mainAccountUUID]);
    objc_msgSend( v11,  "messageIdentifier:alternateCallbackID:forAccount:updatedWithResponseCode:error:lastCall:context:",  v8,  v9,  v10,  objc_msgSend(v5, "code"),  v5,  1,  *(void *)(a1 + 40));
  }
}

void sub_10035C5D4(uint64_t a1, void *a2)
{
  id v11 = a2;
  uint64_t v3 = IDSSendErrorDomain;
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObject:forKey:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObject:forKey:",  @"Destination device is not active for this account",  @"Reason"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v3,  24LL,  v4));

  if (v11)
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) messageUUID]);
    uint64_t v7 = JWUUIDPushObjectToString(v6);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) alternateCallbackID]);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) mainAccountUUID]);
    objc_msgSend( v11,  "messageIdentifier:alternateCallbackID:forAccount:updatedWithResponseCode:error:lastCall:context:",  v8,  v9,  v10,  objc_msgSend(v5, "code"),  v5,  1,  *(void *)(a1 + 40));
  }
}

void sub_10035C6F4(uint64_t a1, void *a2)
{
  id v11 = a2;
  uint64_t v3 = IDSSendErrorDomain;
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObject:forKey:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObject:forKey:",  @"Sender phone number is not bound to account AppleID.",  @"Reason"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v3,  37LL,  v4));

  if (v11)
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) messageUUID]);
    uint64_t v7 = JWUUIDPushObjectToString(v6);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) alternateCallbackID]);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) mainAccountUUID]);
    objc_msgSend( v11,  "messageIdentifier:alternateCallbackID:forAccount:updatedWithResponseCode:error:lastCall:context:",  v8,  v9,  v10,  objc_msgSend(v5, "code"),  v5,  1,  *(void *)(a1 + 40));
  }
}

id sub_10035C814(void *a1, uint64_t a2)
{
  uint64_t v3 = (void *)objc_opt_class(a1[4], a2);
  return _[v3 sendMessageWithIDSSendParameters:a1[5] messageContext:a1[6] threadContext:a1[7] progressBlock:a1[8] onObject:a1[4]];
}

void sub_10035D284(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x10035D050LL);
  }

  _Unwind_Resume(a1);
}

void sub_10035D2E4(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) replayStateCommitter]);
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) replayKey]);
  [v3 commitStateForKey:v2];
}

void sub_10035D65C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = OSLogHandleForIDSCategory("IDSDaemon");
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 40);
    uint64_t v9 = *(void *)(a1 + 48);
    uint64_t v8 = *(void *)(a1 + 56);
    id v10 = [v3 idsResponseCode];
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v3 responseError]);
    *(_DWORD *)buf = 138413570;
    uint64_t v31 = v7;
    __int16 v32 = 2112;
    uint64_t v33 = v6;
    __int16 v34 = 2112;
    uint64_t v35 = v9;
    __int16 v36 = 2112;
    uint64_t v37 = v8;
    __int16 v38 = 2048;
    id v39 = v10;
    __int16 v40 = 2112;
    uint64_t v41 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Finished sending cancel message using queueOneIdentifier: %@  fromID: %@  service: %@  messageIdentifier: %@   wit h responseCode: %ld responseError: %@",  buf,  0x3Eu);
  }

  if (os_log_shim_legacy_logging_enabled(v12) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    uint64_t v13 = *(void *)(a1 + 32);
    uint64_t v14 = *(void *)(a1 + 40);
    uint64_t v15 = *(void *)(a1 + 48);
    uint64_t v16 = *(void *)(a1 + 56);
    id v28 = [v3 idsResponseCode];
    uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v3 responseError]);
    uint64_t v26 = v15;
    uint64_t v27 = v16;
    uint64_t v24 = v13;
    uint64_t v25 = v14;
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Finished sending cancel message using queueOneIdentifier: %@  fromID: %@  service: %@  messageIdentifier: %@   with responseCode: %ld responseError: %@");
  }

  if (objc_msgSend(v3, "idsResponseCode", v24, v25, v26, v27, v28, v29))
  {
    BOOL v17 = 0LL;
  }

  else
  {
    id v18 = (void *)objc_claimAutoreleasedReturnValue([v3 responseError]);
    BOOL v17 = v18 == 0LL;
  }

  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance"));
  __int16 v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) localObject]);
  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v19 broadcasterForLocalObject:v20 messageContext:*(void *)(a1 + 64)]);

  if (v21)
  {
    uint64_t v22 = *(void *)(a1 + 72);
    id v23 = (void *)objc_claimAutoreleasedReturnValue([v3 responseError]);
    [v21 didCancelMessageWithSuccess:v17 onAccount:v22 error:v23 identifier:*(void *)(a1 + 56)];
  }
}

void sub_10035E024( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a2 == 1)
  {
    objc_begin_catch(exception_object);
    objc_end_catch();
    JUMPOUT(0x10035DD38LL);
  }

  _Unwind_Resume(exception_object);
}

void sub_10035E1DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 40);
  if (v4) {
    (*(void (**)(uint64_t, id))(v4 + 16))(v4, v3);
  }
  uint64_t v5 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    unsigned int v8 = [v3 lastCall];
    uint64_t v9 = @"NO";
    if (v8) {
      uint64_t v9 = @"YES";
    }
    *(_DWORD *)buf = 138412546;
    uint64_t v12 = v7;
    __int16 v13 = 2112;
    uint64_t v14 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "Sent outgoing error message with guid %@. Last call? %@",  buf,  0x16u);
  }

  if (os_log_shim_legacy_logging_enabled(v10) && _IDSShouldLog(1LL, @"IDSDaemon"))
  {
    [v3 lastCall];
    _IDSLogV( 1LL,  @"IDSFoundation",  @"IDSDaemon",  @"Sent outgoing error message with guid %@. Last call? %@");
  }
}

void sub_10035EEBC(uint64_t a1, void *a2, void *a3, double a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = OSLogHandleForTransportCategory("IDSDaemon");
  uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412802;
    id v20 = v7;
    __int16 v21 = 2048;
    double v22 = a4;
    __int16 v23 = 1024;
    BOOL v24 = v8 == 0LL;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Completed forced OTR negotiation: token is %@, setupTime is %.6f, error==nil is %d",  buf,  0x1Cu);
  }

  uint64_t v12 = os_log_shim_legacy_logging_enabled(v11);
  if ((_DWORD)v12)
  {
    if (_IDSShouldLogTransport(v12))
    {
      BOOL v18 = v8 == 0LL;
      double v17 = a4;
      id v16 = v7;
      _IDSLogTransport( @"IDSDaemon",  @"IDS",  @"Completed forced OTR negotiation: token is %@, setupTime is %.6f, error==nil is %d");
      if (_IDSShouldLog(0LL, @"IDSDaemon"))
      {
        BOOL v18 = v8 == 0LL;
        double v17 = a4;
        id v16 = v7;
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Completed forced OTR negotiation: token is %@, setupTime is %.6f, error==nil is %d");
      }
    }
  }

  __int16 v13 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDaemon sharedInstance](&OBJC_CLASS___IDSDaemon, "sharedInstance", v16, *(void *)&v17, v18));
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localObject]);
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v13 broadcasterForLocalObject:v14 messageContext:*(void *)(a1 + 32)]);

  if (v15) {
    [v15 OTRTestCallback:v7 time:v8 error:a4];
  }
}

void sub_10035F818(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 lastCall])
  {
    if ([v3 idsResponseCode])
    {
      uint64_t v4 = OSLogHandleForIDSCategory("IDSDaemon");
      uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v3 responseError]);
        uint64_t v7 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 138412546;
        id v16 = v6;
        __int16 v17 = 2112;
        uint64_t v18 = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "** Failed sending engram decryption failure {responseError: %@, token: %@}",  buf,  0x16u);
      }

      if (os_log_shim_legacy_logging_enabled(v8) && _IDSShouldLog(0LL, @"IDSDaemon"))
      {
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v3 responseError]);
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"** Failed sending engram decryption failure {responseError: %@, token: %@}");
LABEL_13:
      }
    }

    else
    {
      uint64_t v10 = OSLogHandleForIDSCategory("IDSDaemon");
      uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v3 responseError]);
        uint64_t v13 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 138412546;
        id v16 = v12;
        __int16 v17 = 2112;
        uint64_t v18 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Finished sending engram decryption failure {responseError: %@, token: %@}",  buf,  0x16u);
      }

      if (os_log_shim_legacy_logging_enabled(v14) && _IDSShouldLog(0LL, @"IDSDaemon"))
      {
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v3 responseError]);
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Finished sending engram decryption failure {responseError: %@, token: %@}");
        goto LABEL_13;
      }
    }
  }
}

void sub_10035FA38(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x10035F9ACLL);
  }

  _Unwind_Resume(a1);
}

id sub_10036003C(id a1, id a2)
{
  id v2 = a2;
  id v3 = -[NSData initWithBase64EncodedString:options:]( objc_alloc(&OBJC_CLASS___NSData),  "initWithBase64EncodedString:options:",  v2,  0LL);

  return v3;
}

id sub_1003609BC(id a1, id a2)
{
  return [a2 base64EncodedStringWithOptions:0];
}

void sub_100361A38(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[IDSUTunDeliveryController sharedInstance](&OBJC_CLASS___IDSUTunDeliveryController, "sharedInstance"));
  unsigned __int8 v3 = [v2 hasSpaceForMessagesWithPriority:*(void *)(a1 + 48) dataProtectionClass:*(unsigned int *)(a1 + 56)];

  if ((v3 & 1) != 0)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDMessageStore unsentNonUrgentAccountUUIDsRequiringDuetOverrides:priority:dataProtectionClass:]( &OBJC_CLASS___IDSDMessageStore,  "unsentNonUrgentAccountUUIDsRequiringDuetOverrides:priority:dataProtectionClass:",  *(unsigned __int8 *)(a1 + 60),  *(void *)(a1 + 48),  *(unsigned int *)(a1 + 56)));
    if ([v4 count]) {
      [*(id *)(a1 + 32) addObjectsFromArray:v4];
    }
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) allObjects]);
    id v6 = [v5 mutableCopy];

    uint64_t v7 = OSLogHandleForIDSCategory("IDSDaemon");
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 48);
      uint64_t v10 = @"Sync";
      if (v9 == 200) {
        uint64_t v10 = @"Default";
      }
      if (v9 == 300) {
        uint64_t v11 = @"URGENT";
      }
      else {
        uint64_t v11 = v10;
      }
      *(_DWORD *)buf = 138412546;
      uint64_t v27 = v11;
      __int16 v28 = 2112;
      id v29 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "AccountUUIDs with pending %@ messages %@",  buf,  0x16u);
    }

    uint64_t v13 = os_log_shim_legacy_logging_enabled(v12);
    if ((_DWORD)v13)
    {
      uint64_t v13 = _IDSShouldLog(0LL, @"IDSDaemon");
      if ((_DWORD)v13) {
        uint64_t v13 = _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"AccountUUIDs with pending %@ messages %@");
      }
    }

    uint64_t v15 = im_primary_queue(v13, v14);
    id v16 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v15);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100361D44;
    block[3] = &unk_100902040;
    uint64_t v17 = *(void *)(a1 + 48);
    void block[4] = *(void *)(a1 + 40);
    id v23 = v6;
    uint64_t v24 = v17;
    int v25 = *(_DWORD *)(a1 + 56);
    id v18 = v6;
    dispatch_async(v16, block);
  }

  else
  {
    uint64_t v19 = OSLogHandleForIDSCategory("IDSDaemon");
    id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "No space in local delivery queues for these messages.",  buf,  2u);
    }

    if (os_log_shim_legacy_logging_enabled(v21) && _IDSShouldLog(0LL, @"IDSDaemon")) {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"No space in local delivery queues for these messages.");
    }
  }

void sub_100361D44(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  [*(id *)(a1 + 32) _processLocalMessagesWithAccountUUIDs:*(void *)(a1 + 40) priority:*(void *)(a1 + 48) dataProtectionClass:*(unsigned int *)(a1 + 56)];
  objc_autoreleasePoolPop(v2);
}

void sub_100362138(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[IDSUTunDeliveryController sharedInstance](&OBJC_CLASS___IDSUTunDeliveryController, "sharedInstance"));
  unsigned __int8 v3 = [v2 hasSpaceForCloudMessagesWithPriority:*(void *)(a1 + 56) dataProtectionClass:*(unsigned int *)(a1 + 64)];

  if ((v3 & 1) != 0)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDMessageStore unsentNonUrgentAccountUUIDsRequiringDuetOverrides:priority:dataProtectionClass:withMessageTypes:]( &OBJC_CLASS___IDSDMessageStore,  "unsentNonUrgentAccountUUIDsRequiringDuetOverrides:priority:dataProtectionClass:withMessageTypes:",  *(unsigned __int8 *)(a1 + 68),  *(void *)(a1 + 56),  *(unsigned int *)(a1 + 64),  *(void *)(a1 + 32)));
    if ([v4 count]) {
      [*(id *)(a1 + 40) addObjectsFromArray:v4];
    }
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) allObjects]);
    id v6 = [v5 mutableCopy];

    uint64_t v7 = OSLogHandleForIDSCategory("IDSDaemon");
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 56);
      uint64_t v10 = @"Sync";
      if (v9 == 200) {
        uint64_t v10 = @"Default";
      }
      if (v9 == 300) {
        uint64_t v11 = @"URGENT";
      }
      else {
        uint64_t v11 = v10;
      }
      *(_DWORD *)buf = 138412546;
      __int16 v28 = v11;
      __int16 v29 = 2112;
      id v30 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "AccountUUIDs with pending %@ messages %@",  buf,  0x16u);
    }

    uint64_t v13 = os_log_shim_legacy_logging_enabled(v12);
    if ((_DWORD)v13)
    {
      uint64_t v13 = _IDSShouldLog(0LL, @"IDSDaemon");
      if ((_DWORD)v13) {
        uint64_t v13 = _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"AccountUUIDs with pending %@ messages %@");
      }
    }

    uint64_t v15 = im_primary_queue(v13, v14);
    id v16 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v15);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100362460;
    block[3] = &unk_100901860;
    uint64_t v17 = *(void *)(a1 + 56);
    void block[4] = *(void *)(a1 + 48);
    id v23 = v6;
    uint64_t v25 = v17;
    int v26 = *(_DWORD *)(a1 + 64);
    id v24 = *(id *)(a1 + 32);
    id v18 = v6;
    dispatch_async(v16, block);
  }

  else
  {
    uint64_t v19 = OSLogHandleForIDSCategory("IDSDaemon");
    id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "No space in local delivery queues for these messages.",  buf,  2u);
    }

    if (os_log_shim_legacy_logging_enabled(v21) && _IDSShouldLog(0LL, @"IDSDaemon")) {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"No space in local delivery queues for these messages.");
    }
  }

void sub_100362460(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  [*(id *)(a1 + 32) _processLocalMessagesWithAccountUUIDs:*(void *)(a1 + 40) priority:*(void *)(a1 + 56) dataProtectionClass:*(unsigned int *)(a1 + 64) messageTypes:*(void *)(a1 + 48)];
  objc_autoreleasePoolPop(v2);
}

id sub_100362C88(uint64_t a1)
{
  return [*(id *)(a1 + 32) _processLocalMessagesWithAccountUUIDs:*(void *)(a1 + 40) priority:*(void *)(a1 + 48) dataProtectionClass:*(unsigned int *)(a1 + 56)];
}

void sub_100362C9C(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3 = (void *)objc_opt_class(*(void *)(a1 + 32), a2);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDaemonPriorityQueueController sharedInstance]( &OBJC_CLASS___IDSDaemonPriorityQueueController,  "sharedInstance"));
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 queueForPriority:*(void *)(a1 + 96)]);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_100362DDC;
  v12[3] = &unk_1009020B8;
  v12[4] = *(void *)(a1 + 32);
  id v13 = *(id *)(a1 + 64);
  id v9 = *(id *)(a1 + 72);
  uint64_t v11 = *(void **)(a1 + 88);
  uint64_t v10 = *(void *)(a1 + 96);
  id v14 = v9;
  uint64_t v18 = v10;
  int v19 = *(_DWORD *)(a1 + 104);
  id v17 = v11;
  id v15 = *(id *)(a1 + 80);
  id v16 = *(id *)(a1 + 56);
  [v3 _performDuetCheckAndSendForServiceIdentifier:v4 serviceDuetIdentifiers:v5 sendParameters:v6 logString:0 fromQueue:v8 completionBlock:v12];
}

void sub_100362DDC(uint64_t a1, uint64_t a2)
{
  if ((_DWORD)a2)
  {
    unsigned __int8 v3 = (void *)objc_opt_class(*(void *)(a1 + 32), a2);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) uniqueID]);
    [v3 _sendLocalDeliveryMessagesForAccountUUID:v4 threadContext:*(void *)(a1 + 48) priority:*(void *)(a1 + 80) dataProtectionClass:*(unsigned int *)(a1 + 88)];

    uint64_t v7 = im_primary_queue(v5, v6);
    int v26 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v7);
    dispatch_async(v26, *(dispatch_block_t *)(a1 + 72));
  }

  else
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(a1 + 32),  "_messageStoreForDataProtectionClass:",  objc_msgSend(*(id *)(a1 + 48), "dataProtectionClass")));
    id v9 = (void *)objc_claimAutoreleasedReturnValue( [v8 duetIdentifiersOverrideForAccountWithGUID:*(void *)(a1 + 56) priority:*(void *)(a1 + 80)]);

    if ([v9 count])
    {
      uint64_t v11 = *(void **)(a1 + 64);
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v9 allObjects]);
      [v11 setDuetIdentifiersOverride:v12];

      id v14 = (void *)objc_opt_class(*(void *)(a1 + 32), v13);
      id v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) serviceIdentifier]);
      id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) serviceDuetIdentifiers]);
      uint64_t v17 = *(void *)(a1 + 64);
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDaemonPriorityQueueController sharedInstance]( &OBJC_CLASS___IDSDaemonPriorityQueueController,  "sharedInstance"));
      int v19 = (void *)objc_claimAutoreleasedReturnValue([v18 queueForPriority:*(void *)(a1 + 80)]);
      v27[0] = _NSConcreteStackBlock;
      v27[1] = 3221225472LL;
      v27[2] = sub_10036300C;
      v27[3] = &unk_100902090;
      id v20 = *(void **)(a1 + 40);
      v27[4] = *(void *)(a1 + 32);
      id v28 = v20;
      id v21 = *(id *)(a1 + 48);
      id v23 = *(void **)(a1 + 72);
      uint64_t v22 = *(void *)(a1 + 80);
      id v29 = v21;
      uint64_t v31 = v22;
      int v32 = *(_DWORD *)(a1 + 88);
      id v30 = v23;
      [v14 _performDuetCheckAndSendForServiceIdentifier:v15 serviceDuetIdentifiers:v16 sendParameters:v17 logString:0 fromQueue:v19 completionBlock:v27];
    }

    else
    {
      uint64_t v24 = im_primary_queue(0LL, v10);
      uint64_t v25 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v24);
      dispatch_async(v25, *(dispatch_block_t *)(a1 + 72));
    }
  }

void sub_10036300C(uint64_t a1, uint64_t a2)
{
  if ((_DWORD)a2)
  {
    unsigned __int8 v3 = (void *)objc_opt_class(*(void *)(a1 + 32), a2);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) uniqueID]);
    [v3 _sendLocalDeliveryMessagesForAccountUUID:v4 threadContext:*(void *)(a1 + 48) priority:*(void *)(a1 + 64) dataProtectionClass:*(unsigned int *)(a1 + 72)];
  }

  uint64_t v5 = im_primary_queue(a1, a2);
  uint64_t v6 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v5);
  dispatch_async(v6, *(dispatch_block_t *)(a1 + 56));
}

id sub_1003638C4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _processLocalMessagesWithAccountUUIDs:*(void *)(a1 + 40) priority:*(void *)(a1 + 56) dataProtectionClass:*(unsigned int *)(a1 + 64) messageTypes:*(void *)(a1 + 48)];
}

void sub_1003638D8(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3 = (void *)objc_opt_class(*(void *)(a1 + 32), a2);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDaemonPriorityQueueController sharedInstance]( &OBJC_CLASS___IDSDaemonPriorityQueueController,  "sharedInstance"));
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 queueForPriority:*(void *)(a1 + 104)]);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_100363A30;
  v11[3] = &unk_100902130;
  v11[4] = *(void *)(a1 + 32);
  id v12 = *(id *)(a1 + 64);
  id v9 = *(id *)(a1 + 72);
  uint64_t v10 = *(void *)(a1 + 104);
  id v13 = v9;
  uint64_t v18 = v10;
  id v14 = *(id *)(a1 + 80);
  int v19 = *(_DWORD *)(a1 + 112);
  id v17 = *(id *)(a1 + 96);
  id v15 = *(id *)(a1 + 88);
  id v16 = *(id *)(a1 + 56);
  [v3 _performDuetCheckAndSendForServiceIdentifier:v4 serviceDuetIdentifiers:v5 sendParameters:v6 logString:0 fromQueue:v8 completionBlock:v11];
}

void sub_100363A30(uint64_t a1, uint64_t a2)
{
  if ((_DWORD)a2)
  {
    unsigned __int8 v3 = (void *)objc_opt_class(*(void *)(a1 + 32), a2);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) uniqueID]);
    [v3 _sendLocalDeliveryMessagesForAccountUUID:v4 threadContext:*(void *)(a1 + 48) priority:*(void *)(a1 + 88) messageTypes:*(void *)(a1 + 56) dataProtectionClass:*(unsigned int *)(a1 + 96)];

    uint64_t v7 = im_primary_queue(v5, v6);
    uint64_t v25 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v7);
    dispatch_async(v25, *(dispatch_block_t *)(a1 + 80));
  }

  else
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(a1 + 32),  "_messageStoreForDataProtectionClass:",  objc_msgSend(*(id *)(a1 + 48), "dataProtectionClass")));
    id v9 = (void *)objc_claimAutoreleasedReturnValue( [v8 duetIdentifiersOverrideForAccountWithGUID:*(void *)(a1 + 64) priority:*(void *)(a1 + 88)]);

    if ([v9 count])
    {
      uint64_t v11 = *(void **)(a1 + 72);
      id v12 = (void *)objc_claimAutoreleasedReturnValue([v9 allObjects]);
      [v11 setDuetIdentifiersOverride:v12];

      id v14 = (void *)objc_opt_class(*(void *)(a1 + 32), v13);
      id v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) serviceIdentifier]);
      id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) serviceDuetIdentifiers]);
      uint64_t v17 = *(void *)(a1 + 72);
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDaemonPriorityQueueController sharedInstance]( &OBJC_CLASS___IDSDaemonPriorityQueueController,  "sharedInstance"));
      int v19 = (void *)objc_claimAutoreleasedReturnValue([v18 queueForPriority:*(void *)(a1 + 88)]);
      v26[0] = _NSConcreteStackBlock;
      v26[1] = 3221225472LL;
      v26[2] = sub_100363C78;
      v26[3] = &unk_100902108;
      id v20 = *(void **)(a1 + 40);
      v26[4] = *(void *)(a1 + 32);
      id v27 = v20;
      id v21 = *(id *)(a1 + 48);
      uint64_t v22 = *(void *)(a1 + 88);
      id v28 = v21;
      uint64_t v31 = v22;
      id v29 = *(id *)(a1 + 56);
      int v32 = *(_DWORD *)(a1 + 96);
      id v30 = *(id *)(a1 + 80);
      [v14 _performDuetCheckAndSendForServiceIdentifier:v15 serviceDuetIdentifiers:v16 sendParameters:v17 logString:0 fromQueue:v19 completionBlock:v26];
    }

    else
    {
      uint64_t v23 = im_primary_queue(0LL, v10);
      uint64_t v24 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v23);
      dispatch_async(v24, *(dispatch_block_t *)(a1 + 80));
    }
  }

void sub_100363C78(uint64_t a1, uint64_t a2)
{
  if ((_DWORD)a2)
  {
    unsigned __int8 v3 = (void *)objc_opt_class(*(void *)(a1 + 32), a2);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) uniqueID]);
    [v3 _sendLocalDeliveryMessagesForAccountUUID:v4 threadContext:*(void *)(a1 + 48) priority:*(void *)(a1 + 72) messageTypes:*(void *)(a1 + 56) dataProtectionClass:*(unsigned int *)(a1 + 80)];
  }

  uint64_t v5 = im_primary_queue(a1, a2);
  uint64_t v6 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v5);
  dispatch_async(v6, *(dispatch_block_t *)(a1 + 64));
}

id sub_100364668(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _nonUrgentInternetSendTimerFired];
}

void sub_100366C4C(_Unwind_Exception *exc_buf, int a2)
{
  if (a2 == 1)
  {

    objc_end_catch();
    JUMPOUT(0x100366114LL);
  }

  _Unwind_Resume(exc_buf);
}

void sub_100366D00(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) guid]);

  if (v2)
  {
    uint64_t v3 = OSLogHandleForIDSCategory("IDSDaemon");
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) guid]);
      *(_DWORD *)buf = 138412290;
      uint64_t v37 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Deleting non-urgent internet outgoing message with guid %@",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v6) && _IDSShouldLog(0LL, @"IDSDaemon"))
    {
      id v30 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) guid]);
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Deleting non-urgent internet outgoing message with guid %@");
    }

    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance", v30));
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountGUID]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v7 accountWithUniqueID:v8]);

    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 service]);
    id v11 = [v10 dataProtectionClass];

    id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) guid]);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) alternateGUID]);
    +[IDSDMessageStore deleteOutgoingMessageWithGUID:alternateGUID:dataProtectionClass:]( &OBJC_CLASS___IDSDMessageStore,  "deleteOutgoingMessageWithGUID:alternateGUID:dataProtectionClass:",  v12,  v13,  v11);
  }

  __int128 v33 = 0u;
  __int128 v34 = 0u;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) combinedMessages]);
  id v15 = [v14 countByEnumeratingWithState:&v31 objects:v35 count:16];
  if (v15)
  {
    uint64_t v16 = *(void *)v32;
    do
    {
      for (i = 0LL; i != v15; i = (char *)i + 1)
      {
        if (*(void *)v32 != v16) {
          objc_enumerationMutation(v14);
        }
        uint64_t v18 = *(void **)(*((void *)&v31 + 1) + 8LL * (void)i);
        int v19 = (void *)objc_claimAutoreleasedReturnValue([v18 guid]);

        if (v19)
        {
          uint64_t v20 = OSLogHandleForIDSCategory("IDSDaemon");
          id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v18 guid]);
            *(_DWORD *)buf = 138412290;
            uint64_t v37 = v22;
            _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Deleting non-urgent internet outgoing combinedMessage with guid %@",  buf,  0xCu);
          }

          if (os_log_shim_legacy_logging_enabled(v23)
            && _IDSShouldLog(0LL, @"IDSDaemon"))
          {
            id v30 = (void *)objc_claimAutoreleasedReturnValue([v18 guid]);
            _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Deleting non-urgent internet outgoing combinedMessage with guid %@");
          }

          uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDAccountController sharedInstance]( &OBJC_CLASS___IDSDAccountController,  "sharedInstance",  v30));
          uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountGUID]);
          int v26 = (void *)objc_claimAutoreleasedReturnValue([v24 accountWithUniqueID:v25]);

          id v27 = (void *)objc_claimAutoreleasedReturnValue([v26 service]);
          id v28 = [v27 dataProtectionClass];

          id v29 = (void *)objc_claimAutoreleasedReturnValue([v18 guid]);
          +[IDSDMessageStore deleteOutgoingMessageWithGUID:alternateGUID:dataProtectionClass:]( &OBJC_CLASS___IDSDMessageStore,  "deleteOutgoingMessageWithGUID:alternateGUID:dataProtectionClass:",  v29,  0LL,  v28);
        }
      }

      id v15 = [v14 countByEnumeratingWithState:&v31 objects:v35 count:16];
    }

    while (v15);
  }
}

void sub_100367130(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v29 = a1;
  uint64_t v4 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v3 guid]);
    *(_DWORD *)buf = 138412290;
    __int128 v34 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Sending individual non-urgent internet message %@",  buf,  0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v7) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v3 guid]);
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Sending individual non-urgent internet message %@");
  }

  uint64_t v24 = *(void **)(v29 + 32);
  id v28 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "message", v17));
  id v27 = [v3 copySendParameters];
  int v26 = (void *)objc_claimAutoreleasedReturnValue([v3 fromID]);
  uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v3 destinations]);
  unsigned int v23 = [v3 useDictAsTopLevel];
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v3 dataToEncrypt]);
  unsigned __int8 v22 = [v3 encryptPayload];
  unsigned __int8 v21 = [v3 wantsResponse];
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v3 expirationDate]);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v3 command]);
  unsigned __int8 v11 = [v3 wantsDeliveryStatus];
  unsigned __int8 v12 = [v3 wantsCertifiedDelivery];
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v3 deliveryStatusContext]);
  id v14 = (void *)objc_claimAutoreleasedReturnValue([v3 messageUUID]);
  id v15 = [v3 priority];
  v30[0] = _NSConcreteStackBlock;
  v30[1] = 3221225472LL;
  v30[2] = sub_100367450;
  v30[3] = &unk_1008F7C00;
  id v31 = v3;
  id v32 = *(id *)(v29 + 32);
  id v16 = v3;
  LOWORD(v20) = 0;
  BYTE1(v19) = v12;
  LOBYTE(v19) = v11;
  BYTE1(v1_Block_object_dispose(va, 8) = v21;
  LOBYTE(v1_Block_object_dispose(va, 8) = v22;
  objc_msgSend( v24,  "sendMessage:params:bulkedPayload:fromID:toDestinations:useDictAsTopLevel:dataToEncrypt:encryptPayload:wantsResponse: expirationDate:command:wantsDeliveryStatus:wantsCertifiedDelivery:deliveryStatusContext:messageUUID:priority:localDe livery:disallowRefresh:willSendBlock:completionBlock:",  v28,  v27,  0,  v26,  v25,  v23,  v8,  v18,  v9,  v10,  v19,  v13,  v14,  v15,  v20,  0,  v30);
}

void sub_100367450(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) guid]);
    else {
      uint64_t v7 = @"NO";
    }
    id v8 = (id)objc_claimAutoreleasedReturnValue([v3 responseError]);
    *(_DWORD *)buf = 138413058;
    id v21 = v6;
    __int16 v22 = 2112;
    unsigned int v23 = v7;
    __int16 v24 = 2112;
    id v25 = v8;
    __int16 v26 = 2048;
    id v27 = [v3 idsResponseCode];
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Deleting sent non-urgent internet outgoing sole message with guid %@? %@. Error? %@ response code %ld",  buf,  0x2Au);
  }

  if (os_log_shim_legacy_logging_enabled(v9) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) guid]);
    else {
      unsigned __int8 v11 = @"NO";
    }
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v3 responseError]);
    id v19 = [v3 idsResponseCode];
    id v16 = v10;
    uint64_t v17 = v11;
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Deleting sent non-urgent internet outgoing sole message with guid %@? %@. Error? %@ response code %ld");
  }

  if (objc_msgSend(v3, "lastCall", v16, v17, v18, v19))
  {
    unsigned __int8 v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) service]);
    id v13 = [v12 dataProtectionClass];

    id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) guid]);
    id v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) alternateGUID]);
    +[IDSDMessageStore deleteOutgoingMessageWithGUID:alternateGUID:dataProtectionClass:]( &OBJC_CLASS___IDSDMessageStore,  "deleteOutgoingMessageWithGUID:alternateGUID:dataProtectionClass:",  v14,  v15,  v13);
  }
}

void sub_1003676B0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) guid]);
    else {
      uint64_t v7 = @"NO";
    }
    id v8 = (id)objc_claimAutoreleasedReturnValue([v3 responseError]);
    *(_DWORD *)buf = 138413058;
    id v17 = v6;
    __int16 v18 = 2112;
    id v19 = v7;
    __int16 v20 = 2112;
    id v21 = v8;
    __int16 v22 = 2048;
    id v23 = [v3 idsResponseCode];
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Deleting sent non-urgent internet message with guid %@? %@. Error? %@ response code %ld",  buf,  0x2Au);
  }

  if (os_log_shim_legacy_logging_enabled(v9) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) guid]);
    else {
      unsigned __int8 v11 = @"NO";
    }
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v3 responseError]);
    id v15 = [v3 idsResponseCode];
    unsigned __int8 v12 = v10;
    id v13 = v11;
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Deleting sent non-urgent internet message with guid %@? %@. Error? %@ response code %ld");
  }
}

void sub_1003686D8(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) replayStateCommitter]);
  [v2 commitStateForKey:*(void *)(a1 + 40)];
}

void sub_100369828(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5, void *a6, void *a7)
{
  id v121 = a2;
  id v124 = a4;
  v125 = a5;
  id v129 = a6;
  id v128 = a7;
  if (_os_feature_enabled_impl("IDS", "GFTPerfSignpostCollection")
    && IDSCommandIsGroupSessionCommand(*(void *)(a1 + 32)))
  {
    kdebug_trace(722010444, [*(id *)(a1 + 32) integerValue], 0, 0, 0);
  }

  uint64_t v13 = sub_1002B1E4C(v129);
  unint64_t v122 = (unint64_t)[v128 encryptionType];
  uint64_t v130 = v13;
  if (([v128 usedCachedData] & 1) == 0)
  {
    if (v122 == 4)
    {
      CFMutableDictionaryRef theDict = (CFMutableDictionaryRef)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a3));
      id v115 = v129;
      id v14 = (void *)objc_claimAutoreleasedReturnValue([v128 additionalDecryptionResult]);
      id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 objectForKey:&off_100947B30]);
      id v16 = v15;
      id value = v16;
      if (![v16 code])
      {
        id v17 = (void *)objc_claimAutoreleasedReturnValue([v16 domain]);
        unsigned int v18 = [v17 isEqualToString:@"com.apple.messageprotection"];

        id value = v16;
        if (v18)
        {

          id value = 0LL;
        }
      }

      if (v15) {
        id v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", value == 0LL));
      }
      else {
        id v19 = 0LL;
      }

      id v113 = 0LL;
      __int16 v119 = 0LL;
      goto LABEL_18;
    }

    if ((v122 & 0xFFFFFFFFFFFFFFFELL) == 4)
    {
      __int16 v119 = 0LL;
      id v113 = 0LL;
    }

    else
    {
      __int16 v119 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a3));
      id v113 = v129;
      if (v122 != 5)
      {
        CFMutableDictionaryRef theDict = 0LL;
        id v115 = 0LL;
        id value = 0LL;
        id v19 = 0LL;
        goto LABEL_18;
      }
    }

    id value = v129;
    id v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a3));
    CFMutableDictionaryRef theDict = 0LL;
    id v115 = 0LL;
LABEL_18:
    uint64_t v20 = OSLogHandleForIDSCategory("MessageService");
    id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v22 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138413058;
      *(void *)v151 = theDict;
      *(_WORD *)&v151[8] = 2112;
      *(void *)&v151[10] = v119;
      *(_WORD *)&v151[18] = 2112;
      *(void *)&v151[20] = v19;
      __int16 v152 = 2112;
      uint64_t v153 = v22;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Incoming message - processing metrics {ECSuccess: %@, legacySuccess: %@, secondarySuccess: %@, command: %@}",  buf,  0x2Au);
    }

    if (os_log_shim_legacy_logging_enabled(v23)
      && _IDSShouldLog(0LL, @"MessageService"))
    {
      id v109 = v19;
      uint64_t v110 = *(void *)(a1 + 32);
      CFMutableDictionaryRef v105 = theDict;
      unsigned int v107 = v119;
      _IDSLogV( 0LL,  @"IDSFoundation",  @"MessageService",  @"Incoming message - processing metrics {ECSuccess: %@, legacySuccess: %@, secondarySuccess: %@, command: %@}");
    }

    uint64_t v25 = *(void *)(a1 + 32);
    uint64_t v24 = *(void *)(a1 + 40);
    unsigned __int8 v26 = objc_msgSend(v128, "usedLastResortCache", v105, v107, v109, v110);
    id v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) prefixedURI]);
    id v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) rawToken]);
    uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) pushHandlerForAPSDelegatePort]);
    id v30 = (void *)objc_claimAutoreleasedReturnValue([v29 pushToken]);
    LOBYTE(v106) = v26;
    +[IDSMessageMetricReporter reportMessageMetricWithMetadata:secondarySuccess:ECSuccess:legacySuccess:command:decryptedEqual:triedLastResort:secondaryError:ECError:legacyError:fromDestination:fromToken:toToken:]( &OBJC_CLASS___IDSMessageMetricReporter,  "reportMessageMetricWithMetadata:secondarySuccess:ECSuccess:legacySuccess:command:decryptedEqual:triedLastResort:se condaryError:ECError:legacyError:fromDestination:fromToken:toToken:",  v24,  v19,  theDict,  v119,  v25,  1LL,  v106,  value,  v115,  v113,  v27,  v28,  v30);

    uint64_t v13 = v130;
  }

  if (v13)
  {
    theDicta = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSGenericErrorDomain,  v13,  0LL));
    if ([*(id *)(a1 + 64) _shouldForgetCachedPeerTokensForDecryptionErrorType:v130 withOriginalDecryptionError:v129])
    {
      uint64_t v31 = OSLogHandleForIDSCategory("IDSDaemon");
      id v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v33 = *(void *)(a1 + 48);
        *(_DWORD *)buf = 138412290;
        *(void *)v151 = v33;
        _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "Blowing away local peer cache for peer tokens for URI: %@",  buf,  0xCu);
      }

      if (os_log_shim_legacy_logging_enabled(v34) && _IDSShouldLog(0LL, @"IDSDaemon"))
      {
        CFMutableDictionaryRef v105 = *(CFMutableDictionaryRef *)(a1 + 48);
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Blowing away local peer cache for peer tokens for URI: %@");
      }

      uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPeerIDManager sharedInstance](&OBJC_CLASS___IDSPeerIDManager, "sharedInstance", v105));
      uint64_t v36 = *(void *)(a1 + 48);
      uint64_t v37 = *(void *)(a1 + 88);
      __int16 v38 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 96) queryService]);
      [v35 forgetPeerTokensForURI:v36 fromURI:v37 service:v38];
    }

    int v39 = v130;
    if (*(_BYTE *)(a1 + 184)
      || (int v39 = v130, ![*(id *)(a1 + 64) _shouldRetryForDecryptionErrorType:v130]))
    {
      uint64_t v49 = OSLogHandleForIDSCategory("IDSDaemon");
      id v50 = (os_log_s *)objc_claimAutoreleasedReturnValue(v49);
      if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v51 = *(void *)(a1 + 72);
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)v151 = v39;
        *(_WORD *)&v151[4] = 2112;
        *(void *)&v151[6] = v51;
        *(_WORD *)&v151[14] = 2112;
        *(void *)&v151[16] = v129;
        _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_DEFAULT,  "** Had decryption error: %d { guid: %@, error: %@ }",  buf,  0x1Cu);
      }

      int v53 = os_log_shim_legacy_logging_enabled(v52);
      uint64_t v54 = v130;
      if (v53)
      {
        unsigned int v107 = *(void **)(a1 + 72);
        id v109 = v129;
        CFMutableDictionaryRef v105 = (CFMutableDictionaryRef)v130;
        _IDSLogEventV( @"IDSFoundation",  @"IDSDaemon",  @"** Had decryption error: %d { guid: %@, error: %@ }");
        uint64_t v54 = v130;
      }

      uint64_t v55 = sub_1002B1AA4(v54);
      FTAWDLogIMessageReceived(0LL, 27LL, v55, 0LL, 0LL, 0LL, 0LL, 0LL, v105, v107, v109);
      if (v130 == 601)
      {
        id v56 = [[IDSMissingMessageMetric alloc] initWithReason:704 guid:*(void *)(a1 + 72) service:*(void *)(a1 + 80) additionalInformation:0];
        +[IDSMissingMessageMetricReporter sendMetric:]( &OBJC_CLASS___IDSMissingMessageMetricReporter,  "sendMetric:",  v56);
      }

      v134[0] = _NSConcreteStackBlock;
      v134[1] = 3221225472LL;
      v134[2] = sub_10036A8C0;
      v134[3] = &unk_1009021D0;
      id v57 = *(id *)(a1 + 168);
      uint64_t v58 = *(void *)(a1 + 176);
      id v140 = v57;
      uint64_t v141 = v58;
      id v135 = *(id *)(a1 + 104);
      id v136 = *(id *)(a1 + 136);
      id v137 = *(id *)(a1 + 144);
      theDicta = theDicta;
      v138 = theDicta;
      id v139 = *(id *)(a1 + 128);
      uint64_t v120 = objc_retainBlock(v134);
      if (v122 == 5) {
        uint64_t v59 = v129;
      }
      else {
        uint64_t v59 = 0LL;
      }
      id v60 = v59;
      if (v122 == 4) {
        BOOL v61 = v129;
      }
      else {
        BOOL v61 = 0LL;
      }
      id v62 = v61;
      if ((v122 & 0xFFFFFFFFFFFFFFFELL) == 4) {
        uint64_t v63 = 0LL;
      }
      else {
        uint64_t v63 = v129;
      }
      uint64_t v112 = v60;
      uint64_t v114 = v62;
      id v116 = v63;
      v123 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(a1 + 64),  "_failureReasonMessageFromSecondaryError:ECError:andLegacyError:",  v60,  v62));
      if ([*(id *)(a1 + 64) _shouldReplyWithCertifiedDeliveryReceiptForDecryptionErrorType:v130])
      {
        uint64_t v64 = *(void **)(a1 + 64);
        uint64_t v65 = *(void *)(a1 + 104);
        uint64_t v66 = *(void *)(a1 + 80);
        uint64_t v67 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v130));
        [v64 _sendCertifiedDeliveryReceiptIfNeededForNiceMessage:v65 service:v66 failureReason:v67 failureReasonMessage:v123 generateDeliveryReceipt:0];
      }

      if ([*(id *)(a1 + 64) _shouldReplyWithRemoteDecryptionErrorMessageForDecryptionErrorType:v130])
      {
        valuea = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 104) pushUUID]);
        unsigned __int8 v111 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 104) command]);
        uint64_t v68 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
        uint64_t v69 = IDSGetUUIDData(valuea);
        id v70 = (void *)objc_claimAutoreleasedReturnValue(v69);
        if (v70) {
          CFDictionarySetValue((CFMutableDictionaryRef)v68, IDSFailedUUIDKey, v70);
        }

        if (valuea) {
          CFDictionarySetValue((CFMutableDictionaryRef)v68, IDSFailedMessageIDKey, valuea);
        }
        id v71 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v130));
        if (v71) {
          CFDictionarySetValue((CFMutableDictionaryRef)v68, IDSFailureReasonKey, v71);
        }

        if (v123) {
          CFDictionarySetValue((CFMutableDictionaryRef)v68, IDSFailureReasonMessageKey, v123);
        }
        uint64_t v72 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 120) dataRepresentation]);
        if (v72) {
          CFDictionarySetValue((CFMutableDictionaryRef)v68, @"gI", v72);
        }

        __int128 v73 = (id *)(a1 + 56);
        uint64_t v74 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) rawToken]);
        uint64_t v75 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) prefixedURI]);
        uint64_t v76 = (void *)_IDSCopyIDForTokenWithURI(v74, v75);

        uint64_t v77 = *(void **)(a1 + 64);
        uint64_t v78 = *(void *)(a1 + 88);
        uint64_t v79 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](&OBJC_CLASS___NSSet, "setWithObject:", v76));
        uint64_t v80 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDestination destinationWithStrings:]( &OBJC_CLASS___IDSDestination,  "destinationWithStrings:",  v79));
        uint64_t v81 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 152) uniqueID]);
        id v82 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 120LL));
        v131[0] = _NSConcreteStackBlock;
        v131[1] = 3221225472LL;
        v131[2] = sub_10036A9FC;
        v131[3] = &unk_1009021F8;
        uint64_t v133 = v130;
        id v132 = *v73;
        LOBYTE(v10_Block_object_dispose(va, 8) = 1;
        [v77 _sendErrorMessage:v68 originalCommand:v111 fromURI:v78 toDestinations:v80 usingAccountWithUniqueID:v81 useDictAsTopLevel:1 dataToEncr ypt:-1.0 wantsResponse:0 timeout:v108 command:v82 priority:300 completionBlock:v131];
      }

      ((void (*)(void))v120[2])();
    }

    else
    {
      uint64_t v40 = OSLogHandleForIDSCategory("IDSDaemon");
      uint64_t v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
      if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v42 = *(void *)(a1 + 72);
        [*(id *)(a1 + 64) _decryptionRetryIntervalForError:v129];
        *(_DWORD *)buf = 138412546;
        *(void *)v151 = v42;
        *(_WORD *)&v151[8] = 2048;
        *(void *)&v151[10] = v43;
        _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEFAULT,  "Retrying decryption for message %@ in %f seconds",  buf,  0x16u);
      }

      if (os_log_shim_legacy_logging_enabled(v44) && _IDSShouldLog(0LL, @"IDSDaemon"))
      {
        uint64_t v45 = *(__CFDictionary **)(a1 + 72);
        [*(id *)(a1 + 64) _decryptionRetryIntervalForError:v129];
        unsigned int v107 = v46;
        CFMutableDictionaryRef v105 = v45;
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Retrying decryption for message %@ in %f seconds");
      }

      objc_msgSend(*(id *)(a1 + 64), "_decryptionRetryIntervalForError:", v129, v105, v107);
      double v48 = v47;
      v142[0] = _NSConcreteStackBlock;
      v142[1] = 3221225472LL;
      v142[2] = sub_10036A884;
      v142[3] = &unk_1009021A8;
      v142[4] = *(void *)(a1 + 64);
      id v143 = *(id *)(a1 + 104);
      id v144 = *(id *)(a1 + 112);
      id v145 = *(id *)(a1 + 120);
      id v146 = *(id *)(a1 + 80);
      id v147 = *(id *)(a1 + 48);
      id v148 = *(id *)(a1 + 128);
      id v149 = *(id *)(a1 + 168);
      im_dispatch_after_primary_queue(v142, v48);
    }
  }

  else
  {
    if ([v128 usedLastResortCache]) {
      [*(id *)(a1 + 64) _submitLastResortCacheMetricForGUID:*(void *)(a1 + 72) service:*(void *)(a1 + 80)];
    }
    if (*(void *)(a1 + 176) == 3LL)
    {
      theDicta = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      id v83 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 104) rawMessage]);
      if (v83)
      {
        CFDictionarySetValue((CFMutableDictionaryRef)theDicta, IDSIncomingMessagePushPayloadKey, v83);
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_1006A8818();
      }

      unsigned int v100 = *(const void **)(a1 + 136);
      if (v100) {
        CFDictionarySetValue((CFMutableDictionaryRef)theDicta, IDSIncomingMessageOriginalEncryptionTypeKey, v100);
      }
      __int128 v101 = *(const void **)(a1 + 144);
      if (v101) {
        CFDictionarySetValue((CFMutableDictionaryRef)theDicta, IDSIncomingMessageEngramEncryptedDataKey, v101);
      }
      (*(void (**)(void))(*(void *)(a1 + 168) + 16LL))();
    }

    else
    {
      if (v125)
      {
        uint64_t v84 = OSLogHandleForIDSCategory("MessageService");
        uint64_t v85 = (os_log_s *)objc_claimAutoreleasedReturnValue(v84);
        if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          *(void *)v151 = v125;
          _os_log_impl( (void *)&_mh_execute_header,  v85,  OS_LOG_TYPE_DEFAULT,  "Gossip - EncryptedAttributes: %@",  buf,  0xCu);
        }

        if (os_log_shim_legacy_logging_enabled(v86)
          && _IDSShouldLog(0LL, @"MessageService"))
        {
          CFMutableDictionaryRef v105 = v125;
          _IDSLogV(0LL, @"IDSFoundation", @"MessageService", @"Gossip - EncryptedAttributes: %@");
        }

        uint64_t v87 = (void *)objc_claimAutoreleasedReturnValue( -[__CFDictionary objectForKeyedSubscript:]( v125,  "objectForKeyedSubscript:",  NGMEncryptedAttributeKTGossipData,  v105));

        if (v87)
        {
          uint64_t v88 = (void *)objc_claimAutoreleasedReturnValue(+[IDSKTGossipManager sharedInstance](&OBJC_CLASS___IDSKTGossipManager, "sharedInstance"));
          v89 = (void *)objc_claimAutoreleasedReturnValue( -[__CFDictionary objectForKeyedSubscript:]( v125,  "objectForKeyedSubscript:",  NGMEncryptedAttributeKTGossipData));
          [v88 sthReceivedFromGossipReceipient:v89];
        }
      }

      if (*(void *)(a1 + 128))
      {
        id v90 = objc_alloc(&OBJC_CLASS___IDSCertifiedDeliveryContext);
        __int16 v91 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 128) originalGUID]);
        v92 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 128) service]);
        uint64_t v94 = IDSEncryptionTypeFromEncryptionTypeString(*(void *)(a1 + 136), v93);
        id v95 = [*(id *)(a1 + 128) certifiedDeliveryVersion];
        uint64_t v96 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 128) certifiedDeliveryRTS]);
        __int128 v97 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 128) senderToken]);
        __int128 v98 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 128) localURI]);
        __int128 v99 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 128) remoteURI]);
        theDicta = (NSMutableDictionary *)[v90 initWithGUID:v91 service:v92 encryptionType:v94 certifiedDeliveryVersion:v95 certifiedDelive ryRTS:v96 senderToken:v97 localURI:v98 remoteURI:v99 replayKey:*(void *)(a1 + 160)];
      }

      else
      {
        theDicta = 0LL;
      }

      __int128 v102 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      __int128 v103 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 104) rawMessage]);
      if (v103)
      {
        CFDictionarySetValue((CFMutableDictionaryRef)v102, IDSIncomingMessagePushPayloadKey, v103);
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_1006A8818();
      }

      if (v124) {
        CFDictionarySetValue((CFMutableDictionaryRef)v102, IDSIncomingMessageDecryptedDataKey, v124);
      }
      id v104 = *(const void **)(a1 + 136);
      if (v104) {
        CFDictionarySetValue((CFMutableDictionaryRef)v102, IDSIncomingMessageOriginalEncryptionTypeKey, v104);
      }
      (*(void (**)(void))(*(void *)(a1 + 168) + 16LL))();
    }
  }
}

id sub_10036A884(uint64_t a1)
{
  LOBYTE(v2) = 1;
  return [*(id *)(a1 + 32) _optionallyDecryptNiceMessage:*(void *)(a1 + 40) encryptedData:*(void *)(a1 + 48) forGroupID:*(void *)(a1 + 56) forTopic:*(void *)(a1 + 64) fromURI:*(void *)(a1 + 72) certifiedDeliveryContext:*(void *)(a1 + 80) isLiveRetry:v2  completionBlock:*(void *)(a1 + 88)];
}

void sub_10036A8C0(uint64_t a1)
{
  if (*(void *)(a1 + 72))
  {
    uint64_t v2 = *(void *)(a1 + 80);
    id v3 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) rawMessage]);
    uint64_t v5 = v4;
    if (v2 == 3)
    {
      if (v4)
      {
        CFDictionarySetValue((CFMutableDictionaryRef)v3, IDSIncomingMessagePushPayloadKey, v4);
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_1006A8818();
      }

      id v6 = *(const void **)(a1 + 40);
      if (v6) {
        CFDictionarySetValue((CFMutableDictionaryRef)v3, IDSIncomingMessageOriginalEncryptionTypeKey, v6);
      }
      uint64_t v7 = *(const void **)(a1 + 48);
      if (!v7) {
        goto LABEL_18;
      }
      id v8 = (const void **)&IDSIncomingMessageEngramEncryptedDataKey;
    }

    else
    {
      if (v4)
      {
        CFDictionarySetValue((CFMutableDictionaryRef)v3, IDSIncomingMessagePushPayloadKey, v4);
      }

      else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        sub_1006A8818();
      }

      uint64_t v7 = *(const void **)(a1 + 40);
      if (!v7) {
        goto LABEL_18;
      }
      id v8 = (const void **)&IDSIncomingMessageOriginalEncryptionTypeKey;
    }

    CFDictionarySetValue((CFMutableDictionaryRef)v3, *v8, v7);
LABEL_18:
    (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
  }

void sub_10036A9FC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 lastCall])
  {
    if ([v3 idsResponseCode])
    {
      uint64_t v4 = OSLogHandleForIDSCategory("IDSDaemon");
      uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = *(void *)(a1 + 40);
        uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v3 responseError]);
        uint64_t v8 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 67109634;
        int v18 = v6;
        __int16 v19 = 2112;
        uint64_t v20 = v7;
        __int16 v21 = 2112;
        uint64_t v22 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "** Failed sending decryption error: %d, %@ to token: %@",  buf,  0x1Cu);
      }

      if (os_log_shim_legacy_logging_enabled(v9) && _IDSShouldLog(0LL, @"IDSDaemon"))
      {
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v3 responseError]);
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"** Failed sending decryption error: %d, %@ to token: %@");
LABEL_13:
      }
    }

    else
    {
      uint64_t v11 = OSLogHandleForIDSCategory("IDSDaemon");
      unsigned __int8 v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v13 = *(void *)(a1 + 40);
        id v14 = (void *)objc_claimAutoreleasedReturnValue([v3 responseError]);
        uint64_t v15 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 67109634;
        int v18 = v13;
        __int16 v19 = 2112;
        uint64_t v20 = v14;
        __int16 v21 = 2112;
        uint64_t v22 = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Finished sending decryption error: %d, %@  to token: %@",  buf,  0x1Cu);
      }

      if (os_log_shim_legacy_logging_enabled(v16) && _IDSShouldLog(0LL, @"IDSDaemon"))
      {
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v3 responseError]);
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Finished sending decryption error: %d, %@  to token: %@");
        goto LABEL_13;
      }
    }
  }
}

void sub_10036AC4C(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x10036ABB4LL);
  }

  _Unwind_Resume(a1);
}

void sub_10036B528(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5, void *a6, void *a7)
{
  id v136 = a2;
  id v140 = a4;
  id v141 = a5;
  id v13 = a6;
  id v14 = a7;
  id v145 = v13;
  uint64_t v15 = sub_1002B1E4C(v13);
  unint64_t v16 = (unint64_t)[v14 encryptionType];
  id v142 = v14;
  uint64_t v146 = v15;
  id value = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) command]);
  if (v16 != 4)
  {
    BOOL v19 = (v16 & 0xFFFFFFFFFFFFFFFELL) == 4;
    if ((v16 & 0xFFFFFFFFFFFFFFFELL) == 4)
    {
      id v143 = 0LL;
    }

    else
    {
      id v143 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a3));
      if (v16 != 5)
      {
        id v17 = 0LL;
        uint64_t v133 = 0LL;
        BOOL v19 = 0;
        int v18 = 0LL;
        goto LABEL_4;
      }
    }

    id v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a3));
    uint64_t v133 = 0LL;
    uint64_t v20 = v145;
    int v18 = v145;
    goto LABEL_9;
  }

  uint64_t v133 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a3));
  id v17 = 0LL;
  id v143 = 0LL;
  int v18 = 0LL;
  BOOL v19 = 1;
LABEL_4:
  uint64_t v20 = v145;
LABEL_9:
  __int16 v21 = v20;
  if (v16 != 4) {
    uint64_t v20 = 0LL;
  }
  id v128 = v20;
  if (v19) {
    uint64_t v22 = 0LL;
  }
  else {
    uint64_t v22 = v21;
  }
  id v130 = v22;
  id v23 = v18;
  if (v16 == 4)
  {
    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v142 additionalDecryptionResult]);
    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v24 objectForKey:&off_100947B30]);
    id v26 = v25;

    id v23 = v26;
    if (![v26 code])
    {
      id v27 = (void *)objc_claimAutoreleasedReturnValue([v26 domain]);
      unsigned int v28 = [v27 isEqualToString:@"com.apple.messageprotection"];

      id v23 = v26;
      if (v28)
      {

        id v23 = 0LL;
      }
    }

    if (v25) {
      uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v23 == 0LL));
    }

    id v17 = v25;
  }

  uint64_t v29 = OSLogHandleForIDSCategory("MessageService");
  id v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138413058;
    *(void *)id v168 = v133;
    *(_WORD *)&v168[8] = 2112;
    *(void *)&v168[10] = v143;
    *(_WORD *)&v168[18] = 2112;
    *(void *)&v168[20] = v17;
    __int16 v169 = 2112;
    v170 = value;
    _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "EC overflow message came in, processing metric {ECSuccess: %@, legacySuccess: %@, secondarySuccess: %@, command: %@}",  buf,  0x2Au);
  }

  if (os_log_shim_legacy_logging_enabled(v31)
    && _IDSShouldLog(0LL, @"MessageService"))
  {
    id v123 = v17;
    id v124 = value;
    id v119 = v133;
    id v121 = v143;
    _IDSLogV( 0LL,  @"IDSFoundation",  @"MessageService",  @"EC overflow message came in, processing metric {ECSuccess: %@, legacySuccess: %@, secondarySuccess: %@, command: %@}");
  }

  uint64_t v32 = *(void *)(a1 + 40);
  unsigned __int8 v33 = objc_msgSend(v142, "usedLastResortCache", v119, v121, v123, v124);
  uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) prefixedURI]);
  uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) rawToken]);
  uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) pushHandlerForAPSDelegatePort]);
  v125 = (void *)objc_claimAutoreleasedReturnValue([v36 pushToken]);
  id v121 = v23;
  id v123 = v128;
  LOBYTE(v119) = v33;
  +[IDSMessageMetricReporter reportMessageMetricWithMetadata:secondarySuccess:ECSuccess:legacySuccess:command:decryptedEqual:triedLastResort:secondaryError:ECError:legacyError:fromDestination:fromToken:toToken:]( &OBJC_CLASS___IDSMessageMetricReporter,  "reportMessageMetricWithMetadata:secondarySuccess:ECSuccess:legacySuccess:command:decryptedEqual:triedLastResort:seco ndaryError:ECError:legacyError:fromDestination:fromToken:toToken:",  v32,  v17,  v133,  v143,  value,  1LL);

  uint64_t v15 = v146;
LABEL_27:
  if (v15)
  {
    uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSGenericErrorDomain,  v15,  0LL));
    if ([*(id *)(a1 + 64) _shouldForgetCachedPeerTokensForDecryptionErrorType:v146 withOriginalDecryptionError:v145])
    {
      uint64_t v38 = OSLogHandleForIDSCategory("MessageService");
      int v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v40 = *(void *)(a1 + 48);
        *(_DWORD *)buf = 138412290;
        *(void *)id v168 = v40;
        _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "Blowing away local peer cache for peer tokens for URI: %@",  buf,  0xCu);
      }

      if (os_log_shim_legacy_logging_enabled(v41)
        && _IDSShouldLog(0LL, @"MessageService"))
      {
        id v119 = *(id *)(a1 + 48);
        _IDSLogV( 0LL,  @"IDSFoundation",  @"MessageService",  @"Blowing away local peer cache for peer tokens for URI: %@");
      }

      uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPeerIDManager sharedInstance](&OBJC_CLASS___IDSPeerIDManager, "sharedInstance", v119));
      uint64_t v43 = *(void *)(a1 + 48);
      uint64_t v44 = *(void *)(a1 + 72);
      uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 80) queryService]);
      [v42 forgetPeerTokensForURI:v43 fromURI:v44 service:v45];
    }

    uint64_t v46 = OSLogHandleForIDSCategory("IDSDaemon");
    double v47 = (os_log_s *)objc_claimAutoreleasedReturnValue(v46);
    if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v48 = *(void *)(a1 + 88);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)id v168 = v146;
      *(_WORD *)&v168[4] = 2112;
      *(void *)&v168[6] = v48;
      *(_WORD *)&v168[14] = 2112;
      *(void *)&v168[16] = v145;
      _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_DEFAULT,  "** Had decryption error: %d { guid: %@, error: %@ }",  buf,  0x1Cu);
    }

    int v50 = os_log_shim_legacy_logging_enabled(v49);
    uint64_t v51 = v146;
    if (v50)
    {
      id v121 = *(id *)(a1 + 88);
      id v123 = v145;
      id v119 = (id)v146;
      _IDSLogEventV( @"IDSFoundation",  @"IDSDaemon",  @"** Had decryption error: %d { guid: %@, error: %@ }");
      uint64_t v51 = v146;
    }

    uint64_t v52 = sub_1002B1AA4(v51);
    FTAWDLogIMessageReceived(0LL, 27LL, v52, 0LL, 0LL, 0LL, 0LL, 0LL, v119, v121, v123);
    v161[0] = _NSConcreteStackBlock;
    v161[1] = 3221225472LL;
    v161[2] = sub_10036C790;
    v161[3] = &unk_100902248;
    id v166 = *(id *)(a1 + 128);
    id v162 = *(id *)(a1 + 32);
    id v163 = *(id *)(a1 + 96);
    id v144 = v37;
    id v164 = v144;
    id v165 = *(id *)(a1 + 104);
    id v134 = objc_retainBlock(v161);
    if (*(void *)(a1 + 136) == 5LL) {
      int v53 = v145;
    }
    else {
      int v53 = 0LL;
    }
    id v54 = v53;
    if (*(void *)(a1 + 136) == 4LL) {
      uint64_t v55 = v145;
    }
    else {
      uint64_t v55 = 0LL;
    }
    id v56 = v55;
    if ((*(void *)(a1 + 136) & 0xFFFFFFFFFFFFFFFELL) == 4) {
      id v57 = 0LL;
    }
    else {
      id v57 = v145;
    }
    v127 = v54;
    id v129 = v56;
    id v131 = v57;
    valuea = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(a1 + 64),  "_failureReasonMessageFromSecondaryError:ECError:andLegacyError:",  v54,  v56));
    if ([*(id *)(a1 + 64) _shouldReplyWithCertifiedDeliveryReceiptForDecryptionErrorType:v146])
    {
      uint64_t v58 = *(void **)(a1 + 64);
      uint64_t v59 = *(void *)(a1 + 32);
      uint64_t v60 = *(void *)(a1 + 112);
      BOOL v61 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v146));
      [v58 _sendCertifiedDeliveryReceiptIfNeededForNiceMessage:v59 service:v60 failureReason:v61 failureReasonMessage:valuea generateDeliveryReceipt:0];
    }

    if ([*(id *)(a1 + 64) _shouldReplyWithRemoteDecryptionErrorMessageForDecryptionErrorType:v146])
    {
      id v62 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      uint64_t v63 = IDSGetUUIDData(*(void *)(a1 + 88));
      uint64_t v64 = (void *)objc_claimAutoreleasedReturnValue(v63);
      if (v64) {
        CFDictionarySetValue((CFMutableDictionaryRef)v62, IDSFailedUUIDKey, v64);
      }

      uint64_t v65 = *(const void **)(a1 + 88);
      if (v65) {
        CFDictionarySetValue((CFMutableDictionaryRef)v62, IDSFailedMessageIDKey, v65);
      }
      uint64_t v66 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v146));
      if (v66) {
        CFDictionarySetValue((CFMutableDictionaryRef)v62, IDSFailureReasonKey, v66);
      }

      if (valuea) {
        CFDictionarySetValue((CFMutableDictionaryRef)v62, IDSFailureReasonMessageKey, valuea);
      }
      uint64_t v126 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) command]);
      uint64_t v67 = (id *)(a1 + 56);
      uint64_t v68 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) rawToken]);
      uint64_t v69 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) prefixedURI]);
      id v70 = (void *)_IDSCopyIDForTokenWithURI(v68, v69);

      uint64_t v72 = *(void **)(a1 + 64);
      uint64_t v71 = *(void *)(a1 + 72);
      __int128 v73 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](&OBJC_CLASS___NSSet, "setWithObject:", v70));
      uint64_t v74 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDestination destinationWithStrings:]( &OBJC_CLASS___IDSDestination,  "destinationWithStrings:",  v73));
      uint64_t v75 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 120) uniqueID]);
      uint64_t v76 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 120LL));
      v158[0] = _NSConcreteStackBlock;
      v158[1] = 3221225472LL;
      v158[2] = sub_10036C850;
      v158[3] = &unk_1009021F8;
      uint64_t v160 = v146;
      id v159 = *v67;
      LOBYTE(v122) = 1;
      [v72 _sendErrorMessage:v62 originalCommand:v126 fromURI:v71 toDestinations:v74 usingAccountWithUniqueID:v75 useDictAsTopLevel:1 dataToEncryp t:-1.0 wantsResponse:0 timeout:v122 command:v76 priority:300 completionBlock:v158];
    }

    ((void (*)(void))v134[2])();

    uint64_t v77 = v166;
  }

  else
  {
    if ([v142 usedLastResortCache]) {
      [*(id *)(a1 + 64) _submitLastResortCacheMetricForGUID:*(void *)(a1 + 88) service:*(void *)(a1 + 112)];
    }
    uint64_t v78 = (void *)objc_claimAutoreleasedReturnValue([v140 _FTOptionallyDecompressData]);
    uint64_t v79 = JWDecodeDictionary(v78);
    id v144 = (id)objc_claimAutoreleasedReturnValue(v79);

    if (!v144)
    {
      uint64_t v80 = JWDecodeDictionary(v140);
      id v144 = (id)objc_claimAutoreleasedReturnValue(v80);
    }

    uint64_t v81 = OSLogHandleForIDSCategory("MessageService");
    id v82 = (os_log_s *)objc_claimAutoreleasedReturnValue(v81);
    if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      *(void *)id v168 = v144;
      _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_DEFAULT, "messageDictionary: %@", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v83)
      && _IDSShouldLog(0LL, @"MessageService"))
    {
      id v119 = v144;
      _IDSLogV(0LL, @"IDSFoundation", @"MessageService", @"messageDictionary: %@");
    }

    valueb = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v144, "_stringForKey:", @"mmcs-url", v119));
    id v147 = (void *)objc_claimAutoreleasedReturnValue([v144 _stringForKey:@"mmcs-signature-hex"]);
    id v135 = (void *)objc_claimAutoreleasedReturnValue([v144 _stringForKey:@"mmcs-owner"]);
    if (v141)
    {
      uint64_t v84 = OSLogHandleForIDSCategory("MessageService");
      uint64_t v85 = (os_log_s *)objc_claimAutoreleasedReturnValue(v84);
      if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        *(void *)id v168 = v141;
        _os_log_impl( (void *)&_mh_execute_header,  v85,  OS_LOG_TYPE_DEFAULT,  "Gossip - EncryptedAttributes: %@",  buf,  0xCu);
      }

      if (os_log_shim_legacy_logging_enabled(v86)
        && _IDSShouldLog(0LL, @"MessageService"))
      {
        id v120 = v141;
        _IDSLogV(0LL, @"IDSFoundation", @"MessageService", @"Gossip - EncryptedAttributes: %@");
      }

      uint64_t v87 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v141, "objectForKeyedSubscript:", NGMEncryptedAttributeKTGossipData, v120));

      if (v87)
      {
        uint64_t v88 = (void *)objc_claimAutoreleasedReturnValue(+[IDSKTGossipManager sharedInstance](&OBJC_CLASS___IDSKTGossipManager, "sharedInstance"));
        v89 = (void *)objc_claimAutoreleasedReturnValue([v141 objectForKeyedSubscript:NGMEncryptedAttributeKTGossipData]);
        [v88 sthReceivedFromGossipReceipient:v89];
      }
    }

    uint64_t v90 = OSLogHandleForIDSCategory("MessageService");
    __int16 v91 = (os_log_s *)objc_claimAutoreleasedReturnValue(v90);
    if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      *(void *)id v168 = v147;
      _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_DEFAULT, " => Settled on signature: %@", buf, 0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v92)
      && _IDSShouldLog(0LL, @"MessageService"))
    {
      id v120 = v147;
      _IDSLogV(0LL, @"IDSFoundation", @"MessageService", @" => Settled on signature: %@");
    }

    if (v147 && valueb && v135)
    {
      uint64_t v93 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
      uint64_t v94 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue([v93 _randomTemporaryPathWithSuffix:0]);

      id v132 = -[IDSServiceProperties initWithServiceIdentifier:]( objc_alloc(&OBJC_CLASS___IDSServiceProperties),  "initWithServiceIdentifier:",  *(void *)(a1 + 112));
      id v95 = (void *)objc_claimAutoreleasedReturnValue(-[IDSServiceProperties dataUsageBundleID](v132, "dataUsageBundleID"));
      id v96 = -[IDSDaemon _IMTransferServiceController]_0();
      __int128 v97 = (void *)objc_claimAutoreleasedReturnValue(v96);
      __int128 v98 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringGUID](&OBJC_CLASS___NSString, "stringGUID"));
      uint64_t v99 = *(void *)(a1 + 112);
      unsigned int v100 = (void *)objc_claimAutoreleasedReturnValue([v147 _FTDataFromHexString]);
      v148[0] = _NSConcreteStackBlock;
      v148[1] = 3221225472LL;
      v148[2] = sub_10036CE78;
      v148[3] = &unk_100902290;
      v148[4] = *(void *)(a1 + 64);
      id v149 = *(id *)(a1 + 32);
      id v150 = *(id *)(a1 + 112);
      id v151 = *(id *)(a1 + 48);
      id v152 = *(id *)(a1 + 104);
      id v155 = *(id *)(a1 + 128);
      id v153 = *(id *)(a1 + 88);
      id v154 = *(id *)(a1 + 96);
      [v97 receiveFileTransfer:v98 topic:v99 path:v94 requestURLString:valueb ownerID:v135 sourceAppID:v95 signature:v100 decryptionKey:0 fileSize:0 progressBlo ck:&stru_100902268 completionBlock:v148];
    }

    else
    {
      uint64_t v101 = OSLogHandleForIDSCategory("MessageService");
      __int128 v102 = (os_log_s *)objc_claimAutoreleasedReturnValue(v101);
      if (os_log_type_enabled(v102, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v102,  OS_LOG_TYPE_DEFAULT,  " => Missing fields from dictionary, returning error",  buf,  2u);
      }

      if (os_log_shim_legacy_logging_enabled(v103)
        && _IDSShouldLog(0LL, @"MessageService"))
      {
        _IDSLogV( 0LL,  @"IDSFoundation",  @"MessageService",  @" => Missing fields from dictionary, returning error");
      }

      objc_msgSend( *(id *)(a1 + 64),  "_sendCertifiedDeliveryReceiptIfNeededForNiceMessage:service:failureReason:failureReasonMessage:generateDeliveryReceipt:",  *(void *)(a1 + 32),  *(void *)(a1 + 112),  &off_100947B48,  0,  0,  v120);
      uint64_t v94 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      uint64_t v104 = IDSGetUUIDData(*(void *)(a1 + 88));
      CFMutableDictionaryRef v105 = (void *)objc_claimAutoreleasedReturnValue(v104);
      if (v105) {
        CFDictionarySetValue((CFMutableDictionaryRef)v94, IDSFailedUUIDKey, v105);
      }

      uint64_t v106 = *(const void **)(a1 + 88);
      if (v106) {
        CFDictionarySetValue((CFMutableDictionaryRef)v94, IDSFailedMessageIDKey, v106);
      }
      unsigned int v107 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", 400LL));
      if (v107) {
        CFDictionarySetValue((CFMutableDictionaryRef)v94, IDSFailureReasonKey, v107);
      }

      id v132 = (IDSServiceProperties *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) command]);
      uint64_t v108 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) rawToken]);
      id v109 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) prefixedURI]);
      id v95 = (void *)_IDSCopyIDForTokenWithURI(v108, v109);

      unsigned __int8 v111 = *(void **)(a1 + 64);
      uint64_t v110 = *(void *)(a1 + 72);
      uint64_t v112 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](&OBJC_CLASS___NSSet, "setWithObject:", v95));
      id v113 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDestination destinationWithStrings:]( &OBJC_CLASS___IDSDestination,  "destinationWithStrings:",  v112));
      uint64_t v114 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 120) uniqueID]);
      id v115 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 120LL));
      v156[0] = _NSConcreteStackBlock;
      v156[1] = 3221225472LL;
      v156[2] = sub_10036CAD4;
      v156[3] = &unk_1008F8A50;
      id v157 = *(id *)(a1 + 56);
      LOBYTE(v121) = 1;
      [v111 _sendErrorMessage:v94 originalCommand:v132 fromURI:v110 toDestinations:v113 usingAccountWithUniqueID:v114 useDictAsTopLevel:1 dataToEncryp t:-1.0 wantsResponse:0 timeout:v121 command:v115 priority:300 completionBlock:v156];

      if (*(void *)(a1 + 128))
      {
        id v116 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
        __int16 v117 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) rawMessage]);
        if (v117)
        {
          CFDictionarySetValue((CFMutableDictionaryRef)v116, IDSIncomingMessagePushPayloadKey, v117);
        }

        else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
        {
          sub_1006A8818();
        }

        uint64_t v118 = *(const void **)(a1 + 96);
        if (v118) {
          CFDictionarySetValue((CFMutableDictionaryRef)v116, IDSIncomingMessageOriginalEncryptionTypeKey, v118);
        }
        (*(void (**)(void))(*(void *)(a1 + 128) + 16LL))();
      }
    }

    uint64_t v77 = valueb;
  }
}

void sub_10036C790(uint64_t a1)
{
  if (*(void *)(a1 + 64))
  {
    uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) rawMessage]);
    if (v3)
    {
      CFDictionarySetValue((CFMutableDictionaryRef)v2, IDSIncomingMessagePushPayloadKey, v3);
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1006A8818();
    }

    uint64_t v4 = *(const void **)(a1 + 40);
    if (v4) {
      CFDictionarySetValue((CFMutableDictionaryRef)v2, IDSIncomingMessageOriginalEncryptionTypeKey, v4);
    }
    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
  }

void sub_10036C850(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 lastCall])
  {
    if ([v3 idsResponseCode])
    {
      uint64_t v4 = OSLogHandleForIDSCategory("IDSDaemon");
      uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = *(void *)(a1 + 40);
        uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v3 responseError]);
        uint64_t v8 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 67109634;
        int v18 = v6;
        __int16 v19 = 2112;
        uint64_t v20 = v7;
        __int16 v21 = 2112;
        uint64_t v22 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "** Failed sending decryption error: %d %@ to token: %@",  buf,  0x1Cu);
      }

      if (os_log_shim_legacy_logging_enabled(v9) && _IDSShouldLog(0LL, @"IDSDaemon"))
      {
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v3 responseError]);
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"** Failed sending decryption error: %d %@ to token: %@");
LABEL_13:
      }
    }

    else
    {
      uint64_t v11 = OSLogHandleForIDSCategory("IDSDaemon");
      unsigned __int8 v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v13 = *(void *)(a1 + 40);
        id v14 = (void *)objc_claimAutoreleasedReturnValue([v3 responseError]);
        uint64_t v15 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 67109634;
        int v18 = v13;
        __int16 v19 = 2112;
        uint64_t v20 = v14;
        __int16 v21 = 2112;
        uint64_t v22 = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Finished sending decryption error: %d %@ to token: %@",  buf,  0x1Cu);
      }

      if (os_log_shim_legacy_logging_enabled(v16) && _IDSShouldLog(0LL, @"IDSDaemon"))
      {
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v3 responseError]);
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Finished sending decryption error: %d %@ to token: %@");
        goto LABEL_13;
      }
    }
  }
}

void sub_10036CAA0(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x10036CA08LL);
  }

  _Unwind_Resume(a1);
}

void sub_10036CAD4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 lastCall])
  {
    if ([v3 idsResponseCode])
    {
      uint64_t v4 = OSLogHandleForIDSCategory("MessageService");
      uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v3 responseError]);
        uint64_t v7 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 67109634;
        int v16 = 400;
        __int16 v17 = 2112;
        int v18 = v6;
        __int16 v19 = 2112;
        uint64_t v20 = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "** Failed sending download (bad field) error: %d %@ to token: %@",  buf,  0x1Cu);
      }

      if (os_log_shim_legacy_logging_enabled(v8)
        && _IDSShouldLog(0LL, @"MessageService"))
      {
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v3 responseError]);
        _IDSLogV( 0LL,  @"IDSFoundation",  @"MessageService",  @"** Failed sending download (bad field) error: %d %@ to token: %@");
LABEL_13:
      }
    }

    else
    {
      uint64_t v10 = OSLogHandleForIDSCategory("MessageService");
      uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        unsigned __int8 v12 = (void *)objc_claimAutoreleasedReturnValue([v3 responseError]);
        uint64_t v13 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 67109634;
        int v16 = 400;
        __int16 v17 = 2112;
        int v18 = v12;
        __int16 v19 = 2112;
        uint64_t v20 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Finished sending download (bad field) error: %d %@ to token: %@",  buf,  0x1Cu);
      }

      if (os_log_shim_legacy_logging_enabled(v14)
        && _IDSShouldLog(0LL, @"MessageService"))
      {
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v3 responseError]);
        _IDSLogV( 0LL,  @"IDSFoundation",  @"MessageService",  @"Finished sending download (bad field) error: %d %@ to token: %@");
        goto LABEL_13;
      }
    }
  }
}

void sub_10036CD1C(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x10036CC88LL);
  }

  _Unwind_Resume(a1);
}

void sub_10036CD50(id a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v7 = OSLogHandleForIDSCategory("Attachments");
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218496;
    unint64_t v11 = a2;
    __int16 v12 = 2048;
    unint64_t v13 = a3;
    __int16 v14 = 2048;
    unint64_t v15 = a4;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Attachment data download updated to %lld of %lld (%lld bps)",  buf,  0x20u);
  }

  if (os_log_shim_legacy_logging_enabled(v9))
  {
    if (_IDSShouldLog(0LL, @"Attachments")) {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Attachments",  @"Attachment data download updated to %lld of %lld (%lld bps)");
    }
  }

void sub_10036CE78(void *a1, void *a2, void *a3, int a4, void *a5, void *a6)
{
  id v11 = a2;
  id v12 = a3;
  id v13 = a5;
  id v14 = a6;
  if (a4)
  {
    uint64_t v15 = OSLogHandleForIDSCategory("MessageService");
    int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "retrieved message data for incoming attachent message",  buf,  2u);
    }

    if (os_log_shim_legacy_logging_enabled(v17)
      && _IDSShouldLog(0LL, @"MessageService"))
    {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"MessageService",  @"retrieved message data for incoming attachent message");
    }

    int v18 = (void *)a1[4];
    uint64_t v19 = a1[5];
    uint64_t v20 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](&OBJC_CLASS___NSURL, "fileURLWithPath:", v12));
    __int16 v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSData dataWithContentsOfURL:options:error:]( &OBJC_CLASS___NSData,  "dataWithContentsOfURL:options:error:",  v20,  1LL,  0LL));
    [v18 _optionallyDecryptNiceMessage:v19 encryptedData:v21 forGroupID:0 forTopic:a1[6] fromURI:a1[7] certifiedDeliveryContext:a1[8] completionBlock:a1[11]];
  }

  else
  {
    uint64_t v22 = OSLogHandleForIDSCategory("MessageService");
    id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v24 = a1[9];
      uint64_t v25 = a1[7];
      *(_DWORD *)buf = 138412802;
      uint64_t v30 = v24;
      __int16 v31 = 2112;
      uint64_t v32 = v25;
      __int16 v33 = 2112;
      id v34 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "Failed to grab message data for message ID: %@ from: %@ error %@",  buf,  0x20u);
    }

    if (os_log_shim_legacy_logging_enabled(v26)
      && _IDSShouldLog(0LL, @"MessageService"))
    {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"MessageService",  @"Failed to grab message data for message ID: %@ from: %@ error %@");
    }

    uint64_t v20 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    id v27 = (void *)objc_claimAutoreleasedReturnValue([(id)a1[5] rawMessage]);
    if (v27)
    {
      CFDictionarySetValue((CFMutableDictionaryRef)v20, IDSIncomingMessagePushPayloadKey, v27);
    }

    else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
    {
      sub_1006A8818();
    }

    unsigned int v28 = (const void *)a1[10];
    if (v28) {
      CFDictionarySetValue((CFMutableDictionaryRef)v20, IDSIncomingMessageOriginalEncryptionTypeKey, v28);
    }
    (*(void (**)(void, NSMutableDictionary *, void))(a1[11] + 16LL))(a1[11], v20, 0LL);
  }
}

uint64_t sub_10036D320(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(void *)(v2 + 368))
  {
    id v3 = *(void **)(v2 + 376);
    *(void *)(v2 + 376) = 0LL;

    uint64_t v2 = *(void *)(a1 + 32);
  }

  return pthread_mutex_unlock((pthread_mutex_t *)(v2 + 304));
}

LABEL_164:
      int v18 = v197;
      goto LABEL_93;
    }

    uint64_t v104 = OSLogHandleForTransportCategory("IDSDaemon");
    CFMutableDictionaryRef v105 = (os_log_s *)objc_claimAutoreleasedReturnValue(v104);
    if (os_log_type_enabled(v105, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v105,  OS_LOG_TYPE_DEFAULT,  "Incoming proxy nice message for broadcast",  buf,  2u);
    }

    unsigned int v107 = os_log_shim_legacy_logging_enabled(v106);
    if ((_DWORD)v107)
    {
      if (_IDSShouldLogTransport(v107))
      {
        _IDSLogTransport(@"IDSDaemon", @"IDS", @"Incoming proxy nice message for broadcast");
      }
    }

    uint64_t v182 = (void *)objc_claimAutoreleasedReturnValue([v208 _numberForKey:IDSCommandKey]);
    v180 = (void *)objc_claimAutoreleasedReturnValue([v208 _dictionaryForKey:IDSProxyTopLevelPayloadKey]);
    uint64_t v179 = (void *)objc_claimAutoreleasedReturnValue([v208 _dataForKey:IDSProxyPayloadKey]);
    int v186 = (char *)objc_claimAutoreleasedReturnValue([v208 _stringForKey:IDSProxyGuidKey]);
    v183 = (void *)objc_claimAutoreleasedReturnValue([v208 _stringForKey:IDSProxyToIDKey]);
    id v181 = (void *)objc_claimAutoreleasedReturnValue([v208 _stringForKey:IDSProxyFromIDKey]);
    v184 = -[IDSDaemon _checkIfDupeAndNoteGuid:local:topic:]( self,  "_checkIfDupeAndNoteGuid:local:topic:",  v186,  0LL,  v17);
    if (v184)
    {
      uint64_t v108 = OSLogHandleForIDSCategory("IDSDaemon");
      id v109 = (os_log_s *)objc_claimAutoreleasedReturnValue(v108);
      if (os_log_type_enabled(v109, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v302 = v186;
        _os_log_impl( (void *)&_mh_execute_header,  v109,  OS_LOG_TYPE_DEFAULT,  "Received local proxy message %@ is a duplicate. Ignoring.",  buf,  0xCu);
      }

      if (os_log_shim_legacy_logging_enabled(v110)
        && _IDSShouldLog(0LL, @"IDSDaemon"))
      {
        double v167 = v186;
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Received local proxy message %@ is a duplicate. Ignoring.");
      }

      +[IDSDMessageStore deleteIncomingMessageWithGUID:]( &OBJC_CLASS___IDSDMessageStore,  "deleteIncomingMessageWithGUID:",  v186,  v167);
      keya = 0LL;
      uint64_t v88 = 0;
      int v18 = v197;
LABEL_174:

      if ((v184 & 1) != 0) {
        goto LABEL_92;
      }
      goto LABEL_80;
    }

    uint64_t v122 = (__CFDictionary *)-[__CFDictionary mutableCopy](v197, "mutableCopy");
    if (!v122) {
      uint64_t v122 = CFDictionaryCreateMutable(0LL, 0LL, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    }
    id v123 = v186;
    if (v123) {
      CFDictionarySetValue(v122, key, v123);
    }

    id v124 = v183;
    if (v124) {
      CFDictionarySetValue(v122, IDSMessageContextToIDKey, v124);
    }

    int v18 = v122;
    v125 = v182;

    uint64_t v126 = (uint64_t)[v125 integerValue];
    uint64_t v88 = 0;
    keya = 0LL;
    if (v126 <= 179)
    {
    }

    else if (v126 <= 194)
    {
    }

    else
    {
      if (v126 > 241)
      {
        if (v126 == 242)
        {
          v237[0] = _NSConcreteStackBlock;
          v237[1] = 3221225472LL;
          v237[2] = sub_1003704A4;
          v237[3] = &unk_100902308;
          double v238 = v179;
          uint64_t v239 = v123;
          v240 = v17;
          uint64_t v241 = v124;
          uint64_t v242 = v181;
          __int16 v243 = v18;
          keya = objc_retainBlock(v237);
          uint64_t v158 = &v238;
          id v159 = (id *)&v239;
          uint64_t v160 = (id *)&v240;
          uint64_t v161 = &v241;
          id v162 = &v242;
          id v163 = (id *)&v243;
          id v164 = (int *)&kIDSListenerCapConsumesLaunchOnDemandIncomingData;
        }

        else
        {
          if (v126 != 243) {
            goto LABEL_173;
          }
          v230[0] = _NSConcreteStackBlock;
          v230[1] = 3221225472LL;
          v230[2] = sub_10037065C;
          v230[3] = &unk_100902308;
          __int128 v231 = v179;
          double v232 = v123;
          int v233 = v17;
          double v234 = v124;
          double v235 = v181;
          id v236 = v18;
          keya = objc_retainBlock(v230);
          uint64_t v158 = &v231;
          id v159 = (id *)&v232;
          uint64_t v160 = (id *)&v233;
          uint64_t v161 = &v234;
          id v162 = &v235;
          id v163 = (id *)&v236;
          id v164 = (int *)&kIDSListenerCapConsumesLaunchOnDemandIncomingProtobuf;
        }

        goto LABEL_172;
      }

      if ((unint64_t)(v126 - 195) >= 2)
      {
        if (v126 != 227)
        {
LABEL_173:

          uint64_t v210 = v125;
          goto LABEL_174;
        }

        v244[0] = _NSConcreteStackBlock;
        v244[1] = 3221225472LL;
        v244[2] = sub_1003703A0;
        v244[3] = &unk_1008FD768;
        v127 = (id *)v244;
        v244[4] = v125;
        v244[5] = v208;
        v244[6] = v180;
        v244[7] = v123;
        v244[8] = v17;
        v244[9] = v124;
        __int16 v245 = v181;
        v246 = v18;
        keya = objc_retainBlock(v244);

        goto LABEL_171;
      }
    }

    v247[0] = _NSConcreteStackBlock;
    v247[1] = 3221225472LL;
    v247[2] = sub_1003702E4;
    v247[3] = &unk_1009022E0;
    v127 = (id *)v247;
    v247[4] = v180;
    v247[5] = v123;
    v247[6] = v208;
    v247[7] = v17;
    v247[8] = v124;
    v247[9] = v181;
    uint64_t v248 = v18;
    keya = objc_retainBlock(v247);

LABEL_171:
    uint64_t v158 = v127 + 4;
    id v159 = v127 + 5;
    uint64_t v160 = v127 + 6;
    uint64_t v161 = v127 + 7;
    id v162 = v127 + 8;
    id v163 = v127 + 9;
    id v164 = (int *)&kIDSListenerCapConsumesLaunchOnDemandIncomingMessages;
LABEL_172:
    uint64_t v88 = *v164;

    goto LABEL_173;
  }

  __int16 v31 = OSLogHandleForIDSCategory("Warning");
  uint64_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
  if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315394;
    uint64_t v302 = "-[IDSDaemon(Messaging) _processIncomingLocalMessage:topic:command:deviceID:btUUID:context:storedGUID:priority"
           ":connectionType:didWakeHint:]";
    v303 = 2112;
    v304 = v17;
    _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_ERROR,  "%s: could not find IDSServiceProperties for topic %@",  buf,  0x16u);
  }

  if (os_log_shim_legacy_logging_enabled(v33))
  {
    _IDSWarnV(@"IDSFoundation", @"%s: could not find IDSServiceProperties for topic %@");
    _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"%s: could not find IDSServiceProperties for topic %@");
    id v166 = "-[IDSDaemon(Messaging) _processIncomingLocalMessage:topic:command:deviceID:btUUID:context:storedGUID:priority"
           ":connectionType:didWakeHint:]";
    __int16 v169 = v17;
    *(void *)&id v34 = _IDSLogTransport( @"Warning",  @"IDS",  @"%s: could not find IDSServiceProperties for topic %@").n128_u64[0];
  }

  +[IDSDMessageStore deleteIncomingMessageWithGUID:]( &OBJC_CLASS___IDSDMessageStore,  "deleteIncomingMessageWithGUID:",  v209,  v34,  v166,  v169);
LABEL_94:
}

void sub_10036F514(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = -[NSMutableDictionary initWithCapacity:](objc_alloc(&OBJC_CLASS___NSMutableDictionary), "initWithCapacity:", 2LL);
  uint64_t v5 = (const void *)a1[4];
  CFMutableDictionaryRef theDict = (__CFDictionary *)v4;
  if (v5) {
    CFDictionarySetValue((CFMutableDictionaryRef)v4, IDSOriginalCommandKey, v5);
  }
  uint64_t v6 = (const void *)a1[5];
  if (v6) {
    CFDictionarySetValue(theDict, IDSIncomingMessagePushPayloadKey, v6);
  }
  uint64_t v8 = a1[5];
  uint64_t v7 = a1[6];
  uint64_t v9 = a1[7];
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[IDSURI URIWithPrefixedURI:](&OBJC_CLASS___IDSURI, "URIWithPrefixedURI:", a1[8]));
  id v11 = (void *)objc_claimAutoreleasedReturnValue(+[IDSURI URIWithPrefixedURI:](&OBJC_CLASS___IDSURI, "URIWithPrefixedURI:", a1[9]));
  [v3 messageReceived:theDict withGUID:v7 withPayload:v8 forTopic:v9 toURI:v10 fromURI:v11 context:a1[10]];
}

void sub_10036F614(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  id v7 = a2;
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[IDSURI URIWithPrefixedURI:](&OBJC_CLASS___IDSURI, "URIWithPrefixedURI:", v6));
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[IDSURI URIWithPrefixedURI:](&OBJC_CLASS___IDSURI, "URIWithPrefixedURI:", *(void *)(a1 + 64)));
  [v7 protobufReceived:v3 withGUID:v4 forTopic:v5 toURI:v8 fromURI:v9 context:*(void *)(a1 + 72)];

  if ([*(id *)(a1 + 48) hasPrefix:@"com.apple.private.alloy.continuity"])
  {
    id v10 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 72) objectForKey:IDSMessageContextSequenceNumberKey]);
    kdebug_trace(722010260, [v10 unsignedIntegerValue], 0, 0, 0);
  }

void sub_10036F72C(void *a1, void *a2)
{
  uint64_t v3 = a1[4];
  uint64_t v4 = a1[5];
  uint64_t v5 = a1[6];
  uint64_t v6 = a1[7];
  id v7 = a2;
  id v9 = (id)objc_claimAutoreleasedReturnValue(+[IDSURI URIWithPrefixedURI:](&OBJC_CLASS___IDSURI, "URIWithPrefixedURI:", v6));
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[IDSURI URIWithPrefixedURI:](&OBJC_CLASS___IDSURI, "URIWithPrefixedURI:", a1[8]));
  [v7 dataReceived:v3 withGUID:v4 forTopic:v5 toURI:v9 fromURI:v8 context:a1[9]];
}

void sub_10036F7D4(void *a1, void *a2)
{
  uint64_t v3 = a1[4];
  uint64_t v4 = a1[5];
  uint64_t v5 = a1[6];
  uint64_t v6 = a1[7];
  id v7 = a2;
  id v9 = (id)objc_claimAutoreleasedReturnValue(+[IDSURI URIWithPrefixedURI:](&OBJC_CLASS___IDSURI, "URIWithPrefixedURI:", v6));
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[IDSURI URIWithPrefixedURI:](&OBJC_CLASS___IDSURI, "URIWithPrefixedURI:", a1[8]));
  [v7 dataReceived:v3 withGUID:v4 forTopic:v5 toURI:v9 fromURI:v8 context:a1[9]];
}

void sub_10036F87C(uint64_t a1, void *a2)
{
  id v59 = a2;
  uint64_t v2 = OSLogHandleForTransportCategory("IDSDaemon");
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(NSMutableDictionary **)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    uint64_t v72 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "The Account Was %@", buf, 0xCu);
  }

  uint64_t v6 = os_log_shim_legacy_logging_enabled(v5);
  if ((_DWORD)v6)
  {
    if (_IDSShouldLogTransport(v6))
    {
      uint64_t v57 = *(void *)(a1 + 32);
      _IDSLogTransport(@"IDSDaemon", @"IDS", @"The Account Was %@");
      if (_IDSShouldLog(0LL, @"IDSDaemon"))
      {
        uint64_t v57 = *(void *)(a1 + 32);
        _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon", @"The Account Was %@");
      }
    }
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance", v57));
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 accountsOnService:*(void *)(a1 + 40) withType:0]);
  uint64_t v63 = (void *)objc_claimAutoreleasedReturnValue([v8 firstObject]);

  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectForKey:@"dd"]);
  uint64_t v11 = objc_opt_class(&OBJC_CLASS___NSString, v10);
  if ((objc_opt_isKindOfClass(v9, v11) & 1) != 0)
  {
    id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectForKey:@"dd"]);
    id value = (void *)objc_claimAutoreleasedReturnValue(+[NSData _IDSDataFromBase64String:](&OBJC_CLASS___NSData, "_IDSDataFromBase64String:", v12));
  }

  else
  {
    id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectForKey:@"dd"]);
    uint64_t v14 = objc_opt_class(&OBJC_CLASS___NSData, v13);
    if ((objc_opt_isKindOfClass(v12, v14) & 1) != 0) {
      id value = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectForKey:@"dd"]);
    }
    else {
      id value = 0LL;
    }
  }

  uint64_t v16 = objc_opt_class(&OBJC_CLASS___NSString, v15);
  id v17 = sub_10028D3BC(v16, *(void **)(a1 + 48), @"U");
  uint64_t v60 = (void *)objc_claimAutoreleasedReturnValue(v17);
  uint64_t v18 = JWDecodeDictionary(value);
  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
  CFMutableDictionaryRef theDict = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  if (value) {
    CFDictionarySetValue((CFMutableDictionaryRef)theDict, IDSIncomingMessageDecryptedDataKey, value);
  }
  CFDictionarySetValue((CFMutableDictionaryRef)theDict, IDSIncomingMessageOriginalEncryptionTypeKey, @"pair");
  if ([v63 accountType] == 1)
  {
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v63 primaryRegistration]);
    __int16 v21 = (void *)objc_claimAutoreleasedReturnValue([v20 dsHandle]);
    BOOL v61 = (void *)objc_claimAutoreleasedReturnValue([v21 _stripFZIDPrefix]);

    id v22 = [*(id *)(a1 + 40) shouldRegisterUsingDSHandle];
    id v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) identifier]);
    uint64_t v24 = _IDSPrefersPhoneNumbersForServiceIdentifier(v23);

    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v63 unprefixedURIStringsFromRegistration]);
    uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v63 pseudonyms]);
    id v27 = (void *)_IDSCopyCallerIDWithPseudonyms(0LL, v25, v26, v61, v22, v24);
    unsigned int v28 = (void *)objc_claimAutoreleasedReturnValue([v27 _bestGuessURI]);
  }

  else
  {
    BOOL v61 = (void *)objc_claimAutoreleasedReturnValue([v63 accountInfo]);
    __int128 v68 = 0u;
    __int128 v69 = 0u;
    __int128 v66 = 0u;
    __int128 v67 = 0u;
    uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v61 objectForKeyedSubscript:kIDSServiceDefaultsVettedAliasesKey]);
    id v30 = [v29 countByEnumeratingWithState:&v66 objects:v70 count:16];
    if (v30)
    {
      uint64_t v31 = *(void *)v67;
LABEL_18:
      uint64_t v32 = 0LL;
      while (1)
      {
        if (*(void *)v67 != v31) {
          objc_enumerationMutation(v29);
        }
        uint64_t v33 = *(void *)(*((void *)&v66 + 1) + 8 * v32);
        id v34 = (void *)objc_claimAutoreleasedReturnValue([v19 objectForKey:@"p"]);
        uint64_t v35 = (void *)_IDSCopyIDForPhoneNumberWithOptions(v33, 0LL, 0LL);
        unsigned __int8 v36 = [v34 containsObject:v35];

        if ((v36 & 1) != 0) {
          break;
        }
        if (v30 == (id)++v32)
        {
          id v30 = [v29 countByEnumeratingWithState:&v66 objects:v70 count:16];
          if (v30) {
            goto LABEL_18;
          }
          goto LABEL_24;
        }
      }

      unsigned int v28 = (void *)_IDSCopyIDForPhoneNumberWithOptions(v33, 0LL, 0LL);

      if (v28) {
        goto LABEL_28;
      }
    }

    else
    {
LABEL_24:
    }

    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v63 loginID]);
    unsigned int v28 = (void *)_IDSCopyIDForPhoneNumberWithOptions(v25, 0LL, 0LL);
  }

LABEL_28:
  uint64_t v37 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  uint64_t v38 = (__CFDictionary *)v37;
  int v39 = *(const void **)(a1 + 56);
  if (v39) {
    CFDictionarySetValue((CFMutableDictionaryRef)v37, IDSCommandKey, v39);
  }
  uint64_t v40 = IDSGetUUIDData(v60);
  uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue(v40);
  if (v41) {
    CFDictionarySetValue(v38, IDSUUIDKey, v41);
  }

  if (v28)
  {
    CFDictionarySetValue(v38, IDSSenderIDKey, v28);
    CFDictionarySetValue(v38, IDSReceiverIDKey, v28);
  }

  uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPairingManager sharedInstance](&OBJC_CLASS___IDSPairingManager, "sharedInstance"));
  uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue([v42 pairedDevicePushToken]);

  if (v43) {
    CFDictionarySetValue(v38, IDSTokenKey, v43);
  }

  uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue([v19 objectForKey:@"p"]);
  if (v44)
  {
    uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue([v19 objectForKey:@"p"]);
    if (v45) {
      CFDictionarySetValue(v38, @"p", v45);
    }
  }

  uint64_t v46 = (const void *)IDSDeliveryStatusContextKey;
  double v47 = (void *)objc_claimAutoreleasedReturnValue([v19 objectForKey:IDSDeliveryStatusContextKey]);

  if (v47)
  {
    uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue([v19 objectForKey:v46]);
    if (v48) {
      CFDictionarySetValue(v38, v46, v48);
    }
  }

  if (v38) {
    CFDictionarySetValue((CFMutableDictionaryRef)theDict, IDSIncomingMessagePushPayloadKey, v38);
  }
  uint64_t v49 = OSLogHandleForTransportCategory("IDSDaemon");
  int v50 = (os_log_s *)objc_claimAutoreleasedReturnValue(v49);
  if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    uint64_t v72 = theDict;
    _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_DEFAULT,  "The message that will be broadcast is %@",  buf,  0xCu);
  }

  uint64_t v52 = os_log_shim_legacy_logging_enabled(v51);
  if ((_DWORD)v52)
  {
    if (_IDSShouldLogTransport(v52))
    {
      uint64_t v58 = theDict;
      _IDSLogTransport(@"IDSDaemon", @"IDS", @"The message that will be broadcast is %@");
      if (_IDSShouldLog(0LL, @"IDSDaemon"))
      {
        uint64_t v58 = theDict;
        _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon", @"The message that will be broadcast is %@");
      }
    }
  }

  uint64_t v54 = *(void *)(a1 + 64);
  uint64_t v53 = *(void *)(a1 + 72);
  uint64_t v55 = (void *)objc_claimAutoreleasedReturnValue(+[IDSURI URIWithPrefixedURI:](&OBJC_CLASS___IDSURI, "URIWithPrefixedURI:", *(void *)(a1 + 80), v58));
  id v56 = (void *)objc_claimAutoreleasedReturnValue(+[IDSURI URIWithPrefixedURI:](&OBJC_CLASS___IDSURI, "URIWithPrefixedURI:", *(void *)(a1 + 88)));
  [v59 messageReceived:theDict withGUID:v54 withPayload:v38 forTopic:v53 toURI:v55 fromURI:v56 context:*(void *)(a1 + 96)];
}

void sub_1003700A0(void *a1, void *a2)
{
  uint64_t v3 = a1[4];
  uint64_t v4 = a1[5];
  uint64_t v5 = a1[6];
  id v6 = a2;
  id v7 = (id)objc_claimAutoreleasedReturnValue(+[IDSURI URIWithPrefixedURI:](&OBJC_CLASS___IDSURI, "URIWithPrefixedURI:", v5));
  [v6 messageIdentifier:v3 forTopic:v4 toURI:v7 fromURI:0 hasBeenDeliveredWithContext:a1[7]];
}

void sub_100370124(id a1, NSArray *a2, NSArray *a3, NSDictionary *a4)
{
  id v6 = a2;
  id v7 = a3;
  uint64_t v8 = a4;
  uint64_t v9 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Will Send Block After Send", v12, 2u);
  }
}

void sub_100370218(id a1, IDSDeliveryContext *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Message Send After Transposing", v6, 2u);
  }
}

void sub_1003702E4(void *a1, void *a2)
{
  uint64_t v3 = a1[4];
  uint64_t v4 = a1[5];
  uint64_t v5 = a1[6];
  uint64_t v6 = a1[7];
  uint64_t v7 = a1[8];
  id v8 = a2;
  id v10 = (id)objc_claimAutoreleasedReturnValue(+[IDSURI URIWithPrefixedURI:](&OBJC_CLASS___IDSURI, "URIWithPrefixedURI:", v7));
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[IDSURI URIWithPrefixedURI:](&OBJC_CLASS___IDSURI, "URIWithPrefixedURI:", a1[9]));
  [v8 messageReceived:v3 withGUID:v4 withPayload:v5 forTopic:v6 toURI:v10 fromURI:v9 context:a1[10]];
}

void sub_1003703A0(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = -[NSMutableDictionary initWithCapacity:](objc_alloc(&OBJC_CLASS___NSMutableDictionary), "initWithCapacity:", 2LL);
  uint64_t v5 = (const void *)a1[4];
  CFMutableDictionaryRef theDict = (__CFDictionary *)v4;
  if (v5) {
    CFDictionarySetValue((CFMutableDictionaryRef)v4, IDSOriginalCommandKey, v5);
  }
  uint64_t v6 = (const void *)a1[5];
  if (v6) {
    CFDictionarySetValue(theDict, IDSIncomingMessagePushPayloadKey, v6);
  }
  uint64_t v8 = a1[5];
  uint64_t v7 = a1[6];
  uint64_t v9 = a1[7];
  uint64_t v10 = a1[8];
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[IDSURI URIWithPrefixedURI:](&OBJC_CLASS___IDSURI, "URIWithPrefixedURI:", a1[9]));
  id v12 = (void *)objc_claimAutoreleasedReturnValue(+[IDSURI URIWithPrefixedURI:](&OBJC_CLASS___IDSURI, "URIWithPrefixedURI:", a1[10]));
  [v3 messageReceived:v7 withGUID:v9 withPayload:v8 forTopic:v10 toURI:v11 fromURI:v12 context:a1[11]];
}

void sub_1003704A4(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = a1[4];
    uint64_t v7 = a1[5];
    uint64_t v8 = a1[6];
    uint64_t v9 = a1[7];
    uint64_t v10 = a1[8];
    *(_DWORD *)buf = 138413314;
    uint64_t v21 = v6;
    __int16 v22 = 2112;
    uint64_t v23 = v7;
    __int16 v24 = 2112;
    uint64_t v25 = v8;
    __int16 v26 = 2112;
    uint64_t v27 = v9;
    __int16 v28 = 2112;
    uint64_t v29 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "PROXY BROADCASTING BLOCK %@ Guid %@ Topic %@ ToID %@ fromID %@",  buf,  0x34u);
  }

  if (os_log_shim_legacy_logging_enabled(v11) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    uint64_t v19 = a1[8];
    __int128 v17 = *((_OWORD *)a1 + 2);
    __int128 v18 = *((_OWORD *)a1 + 3);
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"PROXY BROADCASTING BLOCK %@ Guid %@ Topic %@ ToID %@ fromID %@");
  }

  uint64_t v12 = a1[4];
  uint64_t v13 = a1[5];
  uint64_t v14 = a1[6];
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[IDSURI URIWithPrefixedURI:](&OBJC_CLASS___IDSURI, "URIWithPrefixedURI:", a1[7], v17, v18, v19));
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[IDSURI URIWithPrefixedURI:](&OBJC_CLASS___IDSURI, "URIWithPrefixedURI:", a1[8]));
  [v3 dataReceived:v12 withGUID:v13 forTopic:v14 toURI:v15 fromURI:v16 context:a1[9]];
}

void sub_10037065C(void *a1, void *a2)
{
  uint64_t v3 = a1[4];
  id v4 = a2;
  uint64_t v5 = JWDecodeDictionary(v3);
  id v10 = (id)objc_claimAutoreleasedReturnValue(v5);
  uint64_t v6 = a1[5];
  uint64_t v7 = a1[6];
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[IDSURI URIWithPrefixedURI:](&OBJC_CLASS___IDSURI, "URIWithPrefixedURI:", a1[7]));
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[IDSURI URIWithPrefixedURI:](&OBJC_CLASS___IDSURI, "URIWithPrefixedURI:", a1[8]));
  [v4 protobufReceived:v10 withGUID:v6 forTopic:v7 toURI:v8 fromURI:v9 context:a1[9]];
}

id sub_10037070C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDaemonPriorityQueueController sharedInstance]( &OBJC_CLASS___IDSDaemonPriorityQueueController,  "sharedInstance"));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "queueForPriority:", (int)objc_msgSend( *(id *)(a1 + 48),  "intValue")));
  [v2 getLocalIncomingPowerAssertion:v3 queue:v5];

  return [*(id *)(a1 + 32) enqueueIncomingMessageBroadcast:*(void *)(a1 + 88) broadcastData:*(void *)(a1 + 56) forTopic:*(void *)(a1 + 64) entitlement:kIDSMessagingEntitlement command:*(void *)(a1 + 72) capabilities:*(unsigned int *)(a1 + 96) messageContext:*(void *)(a1 + 80)];
}

id sub_1003707B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = im_primary_queue(a1, a2);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  [v3 getLocalIncomingPowerAssertion:v4 queue:v6];

  return [*(id *)(a1 + 32) enqueueIncomingMessageBroadcast:*(void *)(a1 + 80) broadcastData:*(void *)(a1 + 48) forTopic:*(void *)(a1 + 56) entitlement:kIDSMessagingEntitlement command:*(void *)(a1 + 64) capabilities:*(unsigned int *)(a1 + 88) messageContext:*(void *)(a1 + 72)];
}

void sub_100371238(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1003710D8LL);
  }

  _Unwind_Resume(a1);
}

void sub_100372410(uint64_t a1, int a2)
{
  if (a2) {
    objc_terminate();
  }
  JUMPOUT(0x10037241CLL);
}

int64_t sub_100372424(id a1, IDSDIncomingMessage *a2, IDSDIncomingMessage *a3)
{
  uint64_t v4 = a3;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDIncomingMessage message](a2, "message"));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKey:@"e"]);

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDIncomingMessage message](v4, "message"));
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKey:@"e"]);

  if (v6 && v8)
  {
    int64_t v9 = (int64_t)[v6 compare:v8];
  }

  else if (v6 || !v8)
  {
    if (v6) {
      BOOL v10 = v8 == 0LL;
    }
    else {
      BOOL v10 = 0;
    }
    if (v10) {
      int64_t v9 = -1LL;
    }
    else {
      int64_t v9 = 0LL;
    }
  }

  else
  {
    int64_t v9 = 1LL;
  }

  return v9;
}

id sub_1003724F0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _processStoredIncomingRemoteMessagesWithGUIDs:*(void *)(a1 + 40) ignoringGUIDs:*(void *)(a1 + 48) controlCategory:*(unsigned int *)(a1 + 64) lastTimeInterval:1 repeatedAttempt:*(double *)(a1 + 56)];
}

id sub_10037250C(uint64_t a1)
{
  return _objc_msgSend( *(id *)(a1 + 32),  "_processStoredIncomingRemoteMessagesWithGUIDs:ignoringGUIDs:controlCategory:lastTimeInterval:repeatedAttempt:",  0,  0,  objc_msgSend(*(id *)(a1 + 40), "unsignedIntValue"),  0,  0.0);
}

void sub_100372688(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPairingManager sharedInstance](&OBJC_CLASS___IDSPairingManager, "sharedInstance"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 pairedDeviceUniqueID]);

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDMessageStore unsentOutgoingMessagesUpToLimit:priority:wantsPayload:localDestinationDeviceID:]( &OBJC_CLASS___IDSDMessageStore,  "unsentOutgoingMessagesUpToLimit:priority:wantsPayload:localDestinationDeviceID:",  10000LL,  *(void *)(a1 + 56),  0LL,  v3));
  uint64_t v5 = objc_alloc_init(&OBJC_CLASS___IMMessageContext);
  -[IMMessageContext setShouldBoost:](v5, "setShouldBoost:", *(void *)(a1 + 56) == 300LL);
  uint64_t v6 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = (const __CFString *)[v4 count];
    uint64_t v9 = *(void *)(a1 + 56);
    BOOL v10 = @"Sync";
    if (v9 == 200) {
      BOOL v10 = @"Default";
    }
    if (v9 == 300) {
      uint64_t v11 = @"URGENT";
    }
    else {
      uint64_t v11 = v10;
    }
    *(_DWORD *)buf = 134218242;
    uint64_t v41 = v8;
    __int16 v42 = 2112;
    uint64_t v43 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Processing stored %lu outgoing messages due to unpairing. Priority %@",  buf,  0x16u);
  }

  if (os_log_shim_legacy_logging_enabled(v12) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    id v13 = [v4 count];
    uint64_t v14 = *(void *)(a1 + 56);
    uint64_t v15 = @"Sync";
    if (v14 == 200) {
      uint64_t v15 = @"Default";
    }
    if (v14 == 300) {
      uint64_t v16 = @"URGENT";
    }
    else {
      uint64_t v16 = v15;
    }
    id v30 = v13;
    uint64_t v31 = v16;
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Processing stored %lu outgoing messages due to unpairing. Priority %@");
  }

  __int128 v17 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDaemonPriorityQueueController sharedInstance]( &OBJC_CLASS___IDSDaemonPriorityQueueController,  "sharedInstance",  v30,  v31));
  v32[0] = _NSConcreteStackBlock;
  v32[1] = 3221225472LL;
  v32[2] = sub_100372A3C;
  v32[3] = &unk_100902450;
  id v18 = v4;
  id v33 = v18;
  id v19 = *(id *)(a1 + 32);
  uint64_t v20 = *(void *)(a1 + 40);
  uint64_t v21 = *(void **)(a1 + 48);
  id v34 = v19;
  uint64_t v35 = v20;
  uint64_t v38 = *(void *)(a1 + 64);
  id v36 = v21;
  __int16 v22 = v5;
  uint64_t v23 = *(void *)(a1 + 56);
  uint64_t v37 = v22;
  uint64_t v39 = v23;
  [v17 performBlockMainQueue:v32];

  uint64_t v24 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v26 = *(void *)(a1 + 56);
    uint64_t v27 = @"Sync";
    if (v26 == 200) {
      uint64_t v27 = @"Default";
    }
    if (v26 == 300) {
      __int16 v28 = @"URGENT";
    }
    else {
      __int16 v28 = v27;
    }
    *(_DWORD *)buf = 138412290;
    uint64_t v41 = v28;
    _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "Finished processing stored outgoing messages due to unpairing. Priority %@",  buf,  0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v29) && _IDSShouldLog(0LL, @"IDSDaemon")) {
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Finished processing stored outgoing messages due to unpairing. Priority %@");
  }
}

void sub_100372A3C(uint64_t a1)
{
  id v33 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  id v34 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  __int128 v44 = 0u;
  __int128 v45 = 0u;
  __int128 v46 = 0u;
  __int128 v47 = 0u;
  uint64_t v36 = a1;
  id obj = *(id *)(a1 + 32);
  id v2 = [obj countByEnumeratingWithState:&v44 objects:v50 count:16];
  if (v2)
  {
    uint64_t v3 = *(void *)v45;
    do
    {
      for (i = 0LL; i != v2; i = (char *)i + 1)
      {
        if (*(void *)v45 != v3) {
          objc_enumerationMutation(obj);
        }
        uint64_t v5 = *(void **)(*((void *)&v44 + 1) + 8LL * (void)i);
        uint64_t v6 = objc_autoreleasePoolPush();
        uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v5 accountGUID]);
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v7 accountWithUniqueID:v8]);

        if (v9)
        {
          BOOL v10 = (void *)objc_claimAutoreleasedReturnValue([v9 service]);
          if ([v10 adHocServiceType] != 2)
          {
            uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v9 service]);
            BOOL v12 = [v11 adHocServiceType] == 5;

LABEL_14:
            goto LABEL_15;
          }

void sub_100372ED8(uint64_t a1)
{
  __int128 v40 = 0u;
  __int128 v41 = 0u;
  __int128 v42 = 0u;
  __int128 v43 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v40 objects:v45 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v41;
    do
    {
      for (i = 0LL; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v41 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v40 + 1) + 8LL * (void)i);
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 guid]);
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v7 alternateGUID]);
        +[IDSDMessageStore deleteOutgoingMessageWithGUID:alternateGUID:]( &OBJC_CLASS___IDSDMessageStore,  "deleteOutgoingMessageWithGUID:alternateGUID:",  v8,  v9);
      }

      id v4 = [v2 countByEnumeratingWithState:&v40 objects:v45 count:16];
    }

    while (v4);
  }

  __int128 v38 = 0u;
  __int128 v39 = 0u;
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  id obj = *(id *)(a1 + 40);
  id v10 = [obj countByEnumeratingWithState:&v36 objects:v44 count:16];
  if (v10)
  {
    id v11 = v10;
    uint64_t v30 = *(void *)v37;
    key = (void *)IDSMessageContextServiceIdentifierKey;
    uint64_t v27 = (void *)IDSMessageContextOriginalDestinationDeviceKey;
    uint64_t v29 = kIDSMessagingEntitlement;
    uint64_t v12 = kIDSListenerCapConsumesLaunchOnDemandOutgoingMessageUpdates;
    do
    {
      for (j = 0LL; j != v11; j = (char *)j + 1)
      {
        if (*(void *)v37 != v30) {
          objc_enumerationMutation(obj);
        }
        uint64_t v14 = *(void **)(*((void *)&v36 + 1) + 8LL * (void)j);
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 first]);
        uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v14 second]);
        uint64_t v17 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
        id v18 = (__CFDictionary *)v17;
        if (v15) {
          CFDictionarySetValue((CFMutableDictionaryRef)v17, key, v15);
        }
        id v19 = (void *)objc_claimAutoreleasedReturnValue([v16 localDestinationDeviceUUID]);
        if (v19) {
          CFDictionarySetValue(v18, v27, v19);
        }

        v31[0] = _NSConcreteStackBlock;
        v31[1] = 3221225472LL;
        v31[2] = sub_100373230;
        v31[3] = &unk_100902428;
        uint64_t v35 = *(void *)(a1 + 72);
        uint64_t v20 = *(void **)(a1 + 48);
        id v32 = *(id *)(a1 + 56);
        id v33 = v16;
        id v34 = v18;
        uint64_t v21 = *(void *)(a1 + 64);
        __int16 v22 = v18;
        id v23 = v16;
        [v20 enqueueBroadcast:v31 forTopic:v15 entitlement:v29 command:0 capabilities:v12 messageContext:v21];
        uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v23 guid]);
        uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v23 alternateGUID]);
        +[IDSDMessageStore deleteOutgoingMessageWithGUID:alternateGUID:]( &OBJC_CLASS___IDSDMessageStore,  "deleteOutgoingMessageWithGUID:alternateGUID:",  v24,  v25);
      }

      id v11 = [obj countByEnumeratingWithState:&v36 objects:v44 count:16];
    }

    while (v11);
  }
}

void sub_100373230(uint64_t a1, void *a2)
{
  id v10 = a2;
  uint64_t v3 = IDSSendErrorDomain;
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObject:forKey:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObject:forKey:",  *(void *)(a1 + 32),  @"Reason"));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v3,  v4,  v5));

  if (v10)
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) guid]);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) alternateGUID]);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) mainAccountGuid]);
    objc_msgSend( v10,  "messageIdentifier:alternateCallbackID:forAccount:updatedWithResponseCode:error:lastCall:context:",  v7,  v8,  v9,  objc_msgSend(v6, "code"),  v6,  1,  *(void *)(a1 + 48));
  }
}

void sub_10037423C(_Unwind_Exception *exc_buf, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1003737D4LL);
  }

  _Unwind_Resume(exc_buf);
}

void sub_1003742A0(id *a1, void *a2)
{
  id v3 = a2;
  if ([v3 lastCall])
  {
    if (!a1[4])
    {
      uint64_t v23 = OSLogHandleForIDSCategory("IDSDaemon");
      uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        id v25 = (id)objc_claimAutoreleasedReturnValue([a1[6] guid]);
        unsigned int v26 = [v3 lastCall];
        uint64_t v27 = @"NO";
        if (v26) {
          uint64_t v27 = @"YES";
        }
        *(_DWORD *)buf = 138412546;
        id v43 = v25;
        __int16 v44 = 2112;
        __int128 v45 = v27;
        _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "Deleting sent outgoing urgent message with guid %@? %@",  buf,  0x16u);
      }

      if (os_log_shim_legacy_logging_enabled(v28) && _IDSShouldLog(0LL, @"IDSDaemon"))
      {
        uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([a1[6] guid]);
        unsigned int v30 = [v3 lastCall];
        uint64_t v31 = @"NO";
        if (v30) {
          uint64_t v31 = @"YES";
        }
        id v35 = v29;
        __int128 v36 = v31;
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Deleting sent outgoing urgent message with guid %@? %@");
      }

      goto LABEL_21;
    }

    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([a1[5] serviceController]);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 serviceWithPushTopic:a1[4]]);
    unsigned int v6 = [v5 shouldSilentlyFailMessagesOnSwitch];

    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v3 responseError]);
    if ([v7 code] != (id)24) {
      unsigned int v6 = 0;
    }

    if (v6 != 1)
    {
      v37[0] = _NSConcreteStackBlock;
      v37[1] = 3221225472LL;
      v37[2] = sub_1003747B8;
      v37[3] = &unk_1008F95C8;
      id v32 = a1[5];
      id v38 = a1[4];
      id v39 = a1[7];
      id v33 = v3;
      id v34 = a1[6];
      id v40 = v33;
      id v41 = v34;
      [v32 enqueueBroadcast:v37 forTopic:a1[4] entitlement:kIDSMessagingEntitlement command:0 capabilities:kIDSListenerCapConsumesLaunchOnDemandOutgoingMessageUpdates messageContext:0];

      uint64_t v21 = v38;
      goto LABEL_33;
    }

    uint64_t v8 = OSLogHandleForIDSCategory("IDSDaemon");
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      id v10 = a1[4];
      *(_DWORD *)buf = 138412290;
      id v43 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Silently failing %@ messages due to watch switch",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v11) && _IDSShouldLog(0LL, @"IDSDaemon"))
    {
      id v35 = a1[4];
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Silently failing %@ messages due to watch switch");
    }

    if (objc_msgSend(v3, "lastCall", v35))
    {
      uint64_t v12 = OSLogHandleForIDSCategory("IDSDaemon");
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        id v14 = (id)objc_claimAutoreleasedReturnValue([a1[6] guid]);
        unsigned int v15 = [v3 lastCall];
        uint64_t v16 = @"NO";
        if (v15) {
          uint64_t v16 = @"YES";
        }
        *(_DWORD *)buf = 138412546;
        id v43 = v14;
        __int16 v44 = 2112;
        __int128 v45 = v16;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Deleting sent outgoing urgent message with guid %@? %@",  buf,  0x16u);
      }

      if (os_log_shim_legacy_logging_enabled(v17) && _IDSShouldLog(0LL, @"IDSDaemon"))
      {
        id v18 = (void *)objc_claimAutoreleasedReturnValue([a1[6] guid]);
        unsigned int v19 = [v3 lastCall];
        uint64_t v20 = @"NO";
        if (v19) {
          uint64_t v20 = @"YES";
        }
        id v35 = v18;
        __int128 v36 = v20;
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Deleting sent outgoing urgent message with guid %@? %@");
      }

void sub_1003747B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  uint64_t v5 = (__CFDictionary *)v4;
  unsigned int v6 = *(const void **)(a1 + 32);
  if (v6) {
    CFDictionarySetValue((CFMutableDictionaryRef)v4, IDSMessageContextServiceIdentifierKey, v6);
  }
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) localDestinationDeviceUUID]);
  if (v7) {
    CFDictionarySetValue(v5, IDSMessageContextOriginalDestinationDeviceKey, v7);
  }

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) command]);
  if (v8) {
    CFDictionarySetValue(v5, IDSMessageContextOriginalCommandKey, v8);
  }

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) responseTimeStamp]);
  if (v9) {
    CFDictionarySetValue(v5, IDSMessageContextServerTimestampKey, v9);
  }

  if (v3)
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) identifier]);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) alternateCallbackID]);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) mainAccountUUID]);
    id v13 = [*(id *)(a1 + 48) idsResponseCode];
    id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) responseError]);
    objc_msgSend( v3,  "messageIdentifier:alternateCallbackID:forAccount:updatedWithResponseCode:error:lastCall:context:",  v10,  v11,  v12,  v13,  v14,  objc_msgSend(*(id *)(a1 + 48), "lastCall"),  v5);
  }

  if ([*(id *)(a1 + 48) lastCall])
  {
    uint64_t v15 = OSLogHandleForIDSCategory("IDSDaemon");
    uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      id v17 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) guid]);
      unsigned int v18 = [*(id *)(a1 + 48) lastCall];
      unsigned int v19 = @"NO";
      if (v18) {
        unsigned int v19 = @"YES";
      }
      *(_DWORD *)buf = 138412546;
      id v29 = v17;
      __int16 v30 = 2112;
      uint64_t v31 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Deleting sent outgoing urgent message with guid %@? %@",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v20) && _IDSShouldLog(0LL, @"IDSDaemon"))
    {
      uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) guid]);
      unsigned int v22 = [*(id *)(a1 + 48) lastCall];
      uint64_t v23 = @"NO";
      if (v22) {
        uint64_t v23 = @"YES";
      }
      unsigned int v26 = v21;
      uint64_t v27 = v23;
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Deleting sent outgoing urgent message with guid %@? %@");
    }

    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "guid", v26, v27));
    id v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) alternateGUID]);
    +[IDSDMessageStore deleteOutgoingMessageWithGUID:alternateGUID:]( &OBJC_CLASS___IDSDMessageStore,  "deleteOutgoingMessageWithGUID:alternateGUID:",  v24,  v25);
  }
}

void sub_100374B04(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    id v2 = -[IDSDeliveryContext initWithResponseCode:error:lastCall:]( objc_alloc(&OBJC_CLASS___IDSDeliveryContext),  "initWithResponseCode:error:lastCall:",  10LL,  0LL,  1LL);
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

void sub_100375A3C(uint64_t a1, void *a2)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_100375ADC;
  v5[3] = &unk_1009024C8;
  id v6 = a2;
  uint64_t v3 = *(void *)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  char v8 = *(_BYTE *)(a1 + 48);
  id v4 = v6;
  [v4 fetchGroupWithGroupID:v3 completion:v5];
}

void sub_100375ADC(uint64_t a1, void *a2)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_100375B80;
  v5[3] = &unk_1009024A0;
  id v6 = a2;
  uint64_t v3 = *(void **)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  char v8 = *(_BYTE *)(a1 + 48);
  id v4 = v6;
  [v3 _noteDecryptionFailureForGroup:v4 completion:v5];
}

void sub_100375B80(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = OSLogHandleForIDSCategory("IDSLogLevelLow");
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412546;
    uint64_t v9 = v6;
    __int16 v10 = 2112;
    id v11 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Noted decryption failure for engram group {group: %@, noteError: %@}",  buf,  0x16u);
  }

  if (os_log_shim_legacy_logging_enabled(v7) && _IDSShouldLog(0LL, @"IDSLogLevelLow")) {
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSLogLevelLow",  @"Noted decryption failure for engram group {group: %@, noteError: %@}");
  }
  (*(void (**)(void, void))(*(void *)(a1 + 40) + 16LL))(*(void *)(a1 + 40), 0LL);
}

void sub_100375F84(id a1)
{
  uint64_t v1 = objc_claimAutoreleasedReturnValue( +[NSSet setWithObjects:]( &OBJC_CLASS___NSSet,  "setWithObjects:",  &off_100947BC0,  &off_100947BD8,  &off_100947BF0,  &off_100947C08,  &off_100947C20,  &off_100947C38,  &off_100947C50,  0LL));
  id v2 = (void *)qword_1009C0BF0;
  qword_1009C0BF0 = v1;
}

void sub_10037607C(id a1)
{
  uint64_t v1 = objc_claimAutoreleasedReturnValue( +[NSSet setWithObjects:]( &OBJC_CLASS___NSSet,  "setWithObjects:",  &off_100947C68,  &off_100947C80,  &off_100947C98,  &off_100947CB0,  &off_100947CC8,  &off_100947CE0,  &off_100947CF8,  0LL));
  id v2 = (void *)qword_1009C0C00;
  qword_1009C0C00 = v1;
}

void sub_100376EB8(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x100376C24LL);
  }

  _Unwind_Resume(a1);
}

void *sub_100376FCC(void *result, void *a2)
{
  if (a2) {
    return [a2 messageIdentifier:result[4] forTopic:result[5] toURI:result[6] fromURI:result[7] hasBeenDeliveredWithContext:result[8]];
  }
  return result;
}

LABEL_148:
          +[IDSDMessageStore deleteIncomingMessageWithGUID:]( &OBJC_CLASS___IDSDMessageStore,  "deleteIncomingMessageWithGUID:",  v208);
LABEL_203:

          uint64_t v71 = v193;
LABEL_204:

LABEL_60:
LABEL_61:

          goto LABEL_62;
        }

        if (v188 == (id)132)
        {
          CFMutableDictionaryRef v105 = OSLogHandleForIDSCategory("IDSDaemon");
          uint64_t v106 = (os_log_s *)objc_claimAutoreleasedReturnValue(v105);
          if (os_log_type_enabled(v106, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v106,  OS_LOG_TYPE_DEFAULT,  "Received KTPeerUpdateMessage message",  buf,  2u);
          }

          __int128 v97 = v180;
          if (os_log_shim_legacy_logging_enabled(v107)
            && _IDSShouldLog(0LL, @"IDSDaemon"))
          {
            _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon", @"Received KTPeerUpdateMessage message");
          }

          -[IDSDaemon _processKTPeerUpdateMessageForService:localURI:remoteURI:]( self,  "_processKTPeerUpdateMessageForService:localURI:remoteURI:",  v13,  theDicta,  v14);
          goto LABEL_148;
        }

        uint64_t v108 = 0LL;
        if (theDicta && !v178 && !v176)
        {
          uint64_t v239 = 0LL;
          id v109 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon _validAccountForIncomingMessageSentToURI:service:outPseudonym:]( self,  "_validAccountForIncomingMessageSentToURI:service:outPseudonym:",  theDicta,  v207,  &v239));
          uint64_t v192 = v239;
          if (!v109)
          {
            id v124 = OSLogHandleForIDSCategory("Warning");
            v125 = (os_log_s *)objc_claimAutoreleasedReturnValue(v124);
            if (os_log_type_enabled(v125, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138413058;
              *(void *)&uint8_t buf[4] = v205;
              *(_WORD *)&_BYTE buf[12] = 2112;
              *(void *)&buf[14] = v208;
              *(_WORD *)&buf[22] = 2112;
              __int16 v247 = (uint64_t (*)(uint64_t, uint64_t))theDicta;
              *(_WORD *)uint64_t v248 = 2112;
              *(void *)&v248[2] = v12;
              _os_log_impl( (void *)&_mh_execute_header,  v125,  OS_LOG_TYPE_ERROR,  "Processing received message for which we couldn't find a relevant account, cleaning it up. { messageUUID : %@, storedGuid: %@, toURI: %@, message: %@ }",  buf,  0x2Au);
            }

            if (os_log_shim_legacy_logging_enabled(v126))
            {
              _IDSWarnV( @"IDSFoundation",  @"Processing received message for which we couldn't find a relevant account, cleaning it up. { messageUUID: %@, storedGuid: %@, toURI: %@, message: %@ }");
              _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"Processing received message for which we couldn't find a relevant account, cleaning it up. { messageUUID: %@, storedGuid: %@, toURI: %@, message: %@ }");
              id v166 = theDicta;
              __int16 v169 = v12;
              uint64_t v156 = (uint64_t)v205;
              id v163 = v208;
              *(void *)&v127 = _IDSLogTransport( @"Warning",  @"IDS",  @"Processing received message for which we couldn't find a relevant account, cleaning it up. { messageUUID: %@, storedGuid: %@, toURI: %@, message: %@ }").n128_u64[0];
            }

            -[objc_class deleteIncomingMessageWithGUID:]( -[IDSDaemon _messageStoreClass](self, "_messageStoreClass", v127, v156, v163, v166, v169),  "deleteIncomingMessageWithGUID:",  v208);
            id v128 = [[IDSMissingMessageMetric alloc] initWithReason:702 guid:v205 service:v13 additionalInformation:0];
            +[IDSMissingMessageMetricReporter sendMetric:]( &OBJC_CLASS___IDSMissingMessageMetricReporter,  "sendMetric:",  v128);
            id v129 = v186;
            if (v186 >= 1)
            {
              id v130 = objc_claimAutoreleasedReturnValue([v12 certifiedDeliveryRTS]);
              if (!v130)
              {
                id v131 = OSLogHandleForIDSCategory("Warning");
                id v132 = (os_log_s *)objc_claimAutoreleasedReturnValue(v131);
                if (os_log_type_enabled(v132, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 138412546;
                  *(void *)&uint8_t buf[4] = v205;
                  *(_WORD *)&_BYTE buf[12] = 2048;
                  *(void *)&buf[14] = v186;
                  _os_log_impl( (void *)&_mh_execute_header,  v132,  OS_LOG_TYPE_ERROR,  "No certified delivery RTS found in payload with cdv { guid: %@, cdv: %ld }",  buf,  0x16u);
                }

                id v129 = v186;
                if (os_log_shim_legacy_logging_enabled(v133))
                {
                  _IDSWarnV( @"IDSFoundation",  @"No certified delivery RTS found in payload with cdv { guid: %@, cdv: %ld }");
                  _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"No certified delivery RTS found in payload with cdv { guid: %@, cdv: %ld }");
                  _IDSLogTransport( @"Warning",  @"IDS",  @"No certified delivery RTS found in payload with cdv { guid: %@, cdv: %ld }");
                }
              }

              id v134 = objc_alloc(&OBJC_CLASS___IDSCertifiedDeliveryContext);
              id v135 = (void *)objc_claimAutoreleasedReturnValue([v200 rawToken]);
              id v136 = [v134 initWithGUID:v205 service:v13 certifiedDeliveryVersion:v129 certifiedDeliveryRTS:v130 senderToken:v135];
              uint64_t v190 = (id)v130;

              id v137 = [[IDSCertifiedDeliveryReceiptMessage alloc] initWithCertifiedDeliveryContext:v136];
              v138 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDeliveryController sharedInstance]( &OBJC_CLASS___IDSDeliveryController,  "sharedInstance"));
              v237[0] = _NSConcreteStackBlock;
              v237[1] = 3221225472LL;
              v237[2] = sub_10037A73C;
              v237[3] = &unk_1008F8A50;
              id v139 = v136;
              double v238 = v139;
              [v138 sendIDSMessage:v137 service:0 topic:v13 completionBlock:v237];
            }

            goto LABEL_202;
          }

          uint64_t v108 = v192;
        }

        v212[0] = _NSConcreteStackBlock;
        v212[1] = 3221225472LL;
        v212[2] = sub_10037A878;
        v212[3] = &unk_100902750;
        uint64_t v177 = v12;
        uint64_t v213 = v177;
        uint64_t v179 = v13;
        uint64_t v214 = v179;
        signed int v174 = v207;
        v215 = v174;
        uint64_t v175 = v205;
        id v216 = v175;
        id v217 = self;
        double v173 = v14;
        v218 = v173;
        uint64_t v172 = theDicta;
        v219 = v172;
        v220 = v200;
        id v221 = v63;
        id v222 = v198;
        BOOL v223 = v197;
        id v224 = v196;
        int v233 = v101;
        BOOL v225 = v180;
        double v234 = v36;
        id v226 = v193;
        uint64_t v192 = v108;
        char v227 = v192;
        __int128 v228 = v194;
        double v171 = v206;
        __int128 v229 = v171;
        __int128 v230 = v195;
        double v235 = v181;
        __int128 v231 = v199;
        double v232 = v186;
        id v236 = v184;
        v189 = objc_retainBlock(v212);
        if ([v179 isEqualToIgnoringCase:@"com.apple.private.alloy.icloudpairing"])
        {
          uint64_t v110 = OSLogHandleForIDSCategory("IDSDaemon");
          unsigned __int8 v111 = (os_log_s *)objc_claimAutoreleasedReturnValue(v110);
          if (os_log_type_enabled(v111, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 134217984;
            *(void *)&uint8_t buf[4] = 0x403E000000000000LL;
            _os_log_impl( (void *)&_mh_execute_header,  v111,  OS_LOG_TYPE_DEFAULT,  "  => Adding a delay of %f seconds to iCloud Pairing Messages",  buf,  0xCu);
          }

          if (os_log_shim_legacy_logging_enabled(v112)
            && _IDSShouldLog(0LL, @"IDSDaemon"))
          {
            uint64_t v156 = 0x403E000000000000LL;
            _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"  => Adding a delay of %f seconds to iCloud Pairing Messages");
          }

          *(void *)buf = 0LL;
          *(void *)&buf[8] = buf;
          *(void *)&uint8_t buf[16] = 0x3032000000LL;
          __int16 v247 = sub_100356518;
          *(void *)uint64_t v248 = sub_100356528;
          *(void *)&v248[8] = 0xAAAAAAAAAAAAAAAALL;
          *(void *)&v248[8] = -[IMPowerAssertion initWithIdentifier:timeout:]( objc_alloc(&OBJC_CLASS___IMPowerAssertion),  "initWithIdentifier:timeout:",  @"CloudPairingDelay",  35.0);
          v209[0] = _NSConcreteStackBlock;
          v209[1] = 3221225472LL;
          v209[2] = sub_1003824B4;
          v209[3] = &unk_1009027A0;
          uint64_t v210 = v189;
          uint64_t v211 = buf;
          id v113 = objc_retainBlock(v209);

          _Block_object_dispose(buf, 8);
        }

        else
        {
          uint64_t v114 = OSLogHandleForIDSCategory("IDSDaemon");
          id v115 = (os_log_s *)objc_claimAutoreleasedReturnValue(v114);
          if (os_log_type_enabled(v115, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v115, OS_LOG_TYPE_DEFAULT, "  => Processing immediately", buf, 2u);
          }

          if (os_log_shim_legacy_logging_enabled(v116)
            && _IDSShouldLog(0LL, @"IDSDaemon"))
          {
            _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon", @"  => Processing immediately");
          }

          id v113 = objc_retainBlock(v189);
        }

        __int16 v117 = -[IDSDaemon _isUnderFirstDataProtectionLock](self, "_isUnderFirstDataProtectionLock", v156);
        if (v208 || ([v174 shouldHaveRestrictedStorage] & 1) != 0)
        {
          if ((v117 & 1) != 0)
          {
            uint64_t v118 = OSLogHandleForIDSCategory("IDSDaemon");
            id v119 = (os_log_s *)objc_claimAutoreleasedReturnValue(v118);
            if (os_log_type_enabled(v119, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412546;
              *(void *)&uint8_t buf[4] = v175;
              *(_WORD *)&_BYTE buf[12] = 2112;
              *(void *)&buf[14] = v208;
              _os_log_impl( (void *)&_mh_execute_header,  v119,  OS_LOG_TYPE_DEFAULT,  "Under first data protection lock and message already stored -- ignoring {GUID: %@, storedGuid: %@}",  buf,  0x16u);
            }

            if (os_log_shim_legacy_logging_enabled(v120)
              && _IDSShouldLog(0LL, @"IDSDaemon"))
            {
              _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Under first data protection lock and message already stored -- ignoring {GUID: %@, storedGuid: %@}");
            }
          }

          else
          {
            id v121 = OSLogHandleForIDSCategory("IDSDaemon");
            uint64_t v122 = (os_log_s *)objc_claimAutoreleasedReturnValue(v121);
            if (os_log_type_enabled(v122, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              *(void *)&uint8_t buf[4] = v208;
              _os_log_impl( (void *)&_mh_execute_header,  v122,  OS_LOG_TYPE_DEFAULT,  "Processing message for stored guid %@",  buf,  0xCu);
            }

            if (os_log_shim_legacy_logging_enabled(v123)
              && _IDSShouldLog(0LL, @"IDSDaemon"))
            {
              _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon", @"Processing message for stored guid %@");
            }

            ((void (*)(void *, id, uint64_t, uint64_t))v113[2])(v113, v208, 1LL, 1LL);
          }
        }

        else
        {
          id v140 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDaemon serviceController](self, "serviceController"));
          int v187 = (void *)objc_claimAutoreleasedReturnValue([v140 serviceWithPushTopic:v179]);

          id v141 = [v187 dataProtectionClass];
          v185 = (void *)objc_claimAutoreleasedReturnValue([v177 encryptedPayload]);
          if (v117)
          {
            id v142 = OSLogHandleForIDSCategory("IDSDaemon");
            id v143 = (os_log_s *)objc_claimAutoreleasedReturnValue(v142);
            if (os_log_type_enabled(v143, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              *(void *)&uint8_t buf[4] = v175;
              _os_log_impl( (void *)&_mh_execute_header,  v143,  OS_LOG_TYPE_DEFAULT,  "Under first data protection lock. Sending message to storage. { guid: %@ }",  buf,  0xCu);
            }

            if (os_log_shim_legacy_logging_enabled(v144)
              && _IDSShouldLog(0LL, @"IDSDaemon"))
            {
              id v157 = v175;
              _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Under first data protection lock. Sending message to storage. { guid: %@ }");
            }

            uint64_t v182 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon _messageStoreForDataProtectionClass:]( self,  "_messageStoreForDataProtectionClass:",  v141,  v157));
            id v145 = (void *)objc_claimAutoreleasedReturnValue([v177 rawMessage]);
            uint64_t v146 = (void *)objc_claimAutoreleasedReturnValue([v173 prefixedURI]);
            id v147 = [v187 controlCategory];
            BYTE4(v15_Block_object_dispose(va, 8) = -[IDSDaemon _dedupBehaviorForNiceMessage:](self, "_dedupBehaviorForNiceMessage:", v177);
            LODWORD(v15_Block_object_dispose(va, 8) = v147;
            objc_msgSend( v182,  "storeIncomingMessage:forTopic:fromID:messageUUID:messagePayload:isLocal:controlCategory:dedupBehavior:completionBlock:",  v145,  v179,  v146,  v175,  v185,  0,  v158,  0);

            -[IDSDaemon _sendCertifiedDeliveryReceiptIfNeededForNiceMessage:service:failureReason:failureReasonMessage:generateDeliveryReceipt:]( self,  "_sendCertifiedDeliveryReceiptIfNeededForNiceMessage:service:failureReason:failureReasonMessage:generateDeliveryReceipt:",  v177,  v179,  &off_100947D88,  0LL,  0LL);
            if ([v174 wantsPendingMessageUpdates]) {
              -[IDSDaemon _broadcastPendingMessageUpdateForNiceMessage:fromURI:toURI:forTopic:messageContext:]( self,  "_broadcastPendingMessageUpdateForNiceMessage:fromURI:toURI:forTopic:messageContext:",  v177,  v173,  v172,  v179,  v171);
            }
          }

          else
          {
            v183 = (void *)objc_claimAutoreleasedReturnValue( -[IDSDaemon _messageStoreForDataProtectionClass:]( self,  "_messageStoreForDataProtectionClass:",  v141));
            id v148 = (void *)objc_claimAutoreleasedReturnValue([v177 rawMessage]);
            id v149 = (void *)objc_claimAutoreleasedReturnValue([v173 prefixedURI]);
            id v150 = [v187 controlCategory];
            BYTE4(v157) = -[IDSDaemon _dedupBehaviorForNiceMessage:](self, "_dedupBehaviorForNiceMessage:", v177);
            LODWORD(v157) = v150;
            objc_msgSend( v183,  "storeIncomingMessage:forTopic:fromID:messageUUID:messagePayload:isLocal:controlCategory:dedupBehavior:completionBlock:",  v148,  v179,  v149,  v175,  v185,  0,  v157,  v113);
          }
        }

        id v128 = v213;
LABEL_202:

        __int128 v97 = v180;
        goto LABEL_203;
      }

      __int128 v42 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPeerIDManager sharedInstance](&OBJC_CLASS___IDSPeerIDManager, "sharedInstance"));
      id v41 = (uint64_t (*)(uint64_t, uint64_t))objc_claimAutoreleasedReturnValue([v42 uriForShortHandle:v39]);

      id v40 = (void *)objc_claimAutoreleasedReturnValue([v41 prefixedURI]);
      if (v40) {
        CFDictionarySetValue(theDict, IDSSenderIDKey, v40);
      }
      goto LABEL_42;
    }

    __int128 v37 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPeerIDManager sharedInstance](&OBJC_CLASS___IDSPeerIDManager, "sharedInstance"));
    id v33 = (void *)objc_claimAutoreleasedReturnValue([v37 uriForShortHandle:v32]);

    id v34 = (void *)objc_claimAutoreleasedReturnValue([v33 prefixedURI]);
    if (v34) {
      CFDictionarySetValue(theDict, IDSReceiverIDKey, v34);
    }
    goto LABEL_33;
  }

  +[IDSDMessageStore deleteIncomingMessageWithGUID:]( &OBJC_CLASS___IDSDMessageStore,  "deleteIncomingMessageWithGUID:",  v208);
  uint64_t v20 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138413058;
    *(void *)&uint8_t buf[4] = v12;
    *(_WORD *)&_BYTE buf[12] = 2112;
    *(void *)&buf[14] = v14;
    *(_WORD *)&buf[22] = 2112;
    __int16 v247 = v13;
    *(_WORD *)uint64_t v248 = 2112;
    *(void *)&v248[2] = v208;
    _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "DROPPING MADRID MESSAGE: %@ fromID: %@ forTopic: %@ storedGUID %@",  buf,  0x2Au);
  }

  if (os_log_shim_legacy_logging_enabled(v22) && _IDSShouldLog(0LL, @"IDSDaemon")) {
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"DROPPING MADRID MESSAGE: %@ fromID: %@ forTopic: %@ storedGUID %@");
  }
LABEL_62:
  os_activity_scope_leave(&state);
  cut_arc_os_release(&v245);
}

              CSDBSqliteDatabaseSetVersion(a1, 8005LL);
              uint64_t v85 = OSLogHandleForIDSCategory("IDSDMessageStore");
              uint64_t v86 = (os_log_s *)objc_claimAutoreleasedReturnValue(v85);
              if (os_log_type_enabled(v86, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v86,  OS_LOG_TYPE_DEFAULT,  "Adding nonWaking, fireAndForget, queueOneIdentifier option",  buf,  2u);
              }

              if (os_log_shim_legacy_logging_enabled(v87)
                && _IDSShouldLog(0LL, @"IDSDMessageStore"))
              {
                _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDMessageStore",  @"Adding nonWaking, fireAndForget, queueOneIdentifier option");
              }

              uint64_t v88 = sub_1003B3B08( a2,  @"Unable to drop legacy table",  @"Successfully dropped legacy table",  @"DROP TABLE outgoing_message");
              CSDBRecordStoreCreateTablesForClass(&off_1009030C8, a2, 0LL);
              if (!v88) {
                goto LABEL_425;
              }
              CSDBSqliteDatabaseSetVersion(a1, 8006LL);
              goto LABEL_155;
            }

void sub_10037A6F8(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) senderKeyDistributionManager]);
  [v2 markLastActivePeerToken:*(void *)(a1 + 40) localURI:*(void *)(a1 + 48) remoteURI:*(void *)(a1 + 56)];
}

void sub_10037A73C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = [v3 idsResponseCode];
    uint64_t v7 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 134218242;
    id v10 = v6;
    __int16 v11 = 2112;
    uint64_t v12 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Sent certified delivery receipt for filtered message { success: %ld, context: %@ }",  buf,  0x16u);
  }

  if (os_log_shim_legacy_logging_enabled(v8) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    [v3 idsResponseCode];
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Sent certified delivery receipt for filtered message { success: %ld, context: %@ }");
  }
}

void sub_10037A878(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  uint64_t v6 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 40);
    *(_DWORD *)buf = 138412802;
    id v110 = v5;
    __int16 v111 = 2112;
    uint64_t v112 = v8;
    __int16 v113 = 2112;
    uint64_t v114 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Broadcasting the receipt of message %@  (%@)  (topic: %@)",  buf,  0x20u);
  }

  if (os_log_shim_legacy_logging_enabled(v10) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    uint64_t v80 = *(void *)(a1 + 32);
    uint64_t v82 = *(void *)(a1 + 40);
    id v77 = v5;
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Broadcasting the receipt of message %@  (%@)  (topic: %@)");
  }

  if ((a3 & 1) == 0)
  {
    uint64_t v12 = OSLogHandleForIDSCategory("Warning");
    id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = *(void *)(a1 + 32);
      uint64_t v15 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138412802;
      id v110 = v5;
      __int16 v111 = 2112;
      uint64_t v112 = v14;
      __int16 v113 = 2112;
      uint64_t v114 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "Persisting failed for message %@  (%@)  (topic: %@)",  buf,  0x20u);
    }

    if (os_log_shim_legacy_logging_enabled(v16))
    {
      _IDSWarnV(@"IDSFoundation", @"Persisting failed for message %@  (%@)  (topic: %@)");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"Persisting failed for message %@  (%@)  (topic: %@)");
      uint64_t v80 = *(void *)(a1 + 32);
      uint64_t v82 = *(void *)(a1 + 40);
      id v77 = v5;
      *(void *)&double v11 = _IDSLogTransport( @"Warning",  @"IDS",  @"Persisting failed for message %@  (%@)  (topic: %@)").n128_u64[0];
    }
  }

  uint64_t v17 = OSLogHandleForIDSCategory("IDSDaemon");
  unsigned int v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v19 = *(void **)(a1 + 56);
    *(_DWORD *)buf = 138412290;
    id v110 = v19;
    _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Performing validity check for message %@ sent to family service.",  buf,  0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v20) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    uint64_t v78 = *(void *)(a1 + 56);
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Performing validity check for message %@ sent to family service.");
  }

  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "familyManager", v78));
  unsigned int v22 = (void *)objc_claimAutoreleasedReturnValue([v21 familyMembers]);
  BOOL v23 = [v22 count] == 0;

  if (!v23)
  {
LABEL_18:
    if (objc_msgSend( *(id *)(a1 + 64),  "_shouldRejectMessageOnFamilyService:fromSenderURI:",  *(void *)(a1 + 48),  *(void *)(a1 + 72),  v79))
    {
      uint64_t v24 = OSLogHandleForIDSCategory("IDSDaemon");
      id v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v26 = *(void **)(a1 + 56);
        uint64_t v27 = *(void *)(a1 + 72);
        *(_DWORD *)buf = 138412546;
        id v110 = v26;
        __int16 v111 = 2112;
        uint64_t v112 = v27;
        _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "Family Message %@ is coming from an account that is not in the family. Sender was: %@",  buf,  0x16u);
      }

      if (os_log_shim_legacy_logging_enabled(v28) && _IDSShouldLog(0LL, @"IDSDaemon"))
      {
        uint64_t v78 = *(void *)(a1 + 56);
        uint64_t v81 = *(void *)(a1 + 72);
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Family Message %@ is coming from an account that is not in the family. Sender was: %@");
      }

      objc_msgSend(objc_msgSend(*(id *)(a1 + 64), "_messageStoreClass", v78, v81), "deleteIncomingMessageWithGUID:", v5);
      [*(id *)(a1 + 64) _sendCertifiedDeliveryReceiptIfNeededForNiceMessage:*(void *)(a1 + 32) service:*(void *)(a1 + 40) failureReason:&off_100947D58 failureReasonMessage:0 generateDeliveryReceipt:0];
      goto LABEL_75;
    }

    uint64_t v29 = OSLogHandleForIDSCategory("IDSDaemon");
    __int16 v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v31 = *(void **)(a1 + 56);
      *(_DWORD *)buf = 138412290;
      id v110 = v31;
      _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "Message %@ sent to family service passed validity requirements.",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v32) && _IDSShouldLog(0LL, @"IDSDaemon"))
    {
      uint64_t v78 = *(void *)(a1 + 56);
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Message %@ sent to family service passed validity requirements.");
    }

void sub_10037B544(uint64_t a1, void *a2)
{
  id v3 = a2;
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3221225472LL;
  v28[2] = sub_10037B9CC;
  v28[3] = &unk_100902700;
  id v29 = *(id *)(a1 + 32);
  id v30 = *(id *)(a1 + 40);
  id v31 = *(id *)(a1 + 48);
  id v32 = *(id *)(a1 + 56);
  id v33 = *(id *)(a1 + 64);
  id v34 = *(id *)(a1 + 72);
  id v4 = *(id *)(a1 + 80);
  char v50 = *(_BYTE *)(a1 + 200);
  uint64_t v5 = *(void *)(a1 + 88);
  uint64_t v6 = *(void **)(a1 + 96);
  id v35 = v4;
  uint64_t v36 = v5;
  id v37 = v6;
  id v38 = *(id *)(a1 + 104);
  id v39 = *(id *)(a1 + 112);
  id v40 = *(id *)(a1 + 120);
  id v41 = *(id *)(a1 + 128);
  id v25 = v3;
  id v49 = v25;
  id v42 = *(id *)(a1 + 136);
  char v51 = *(_BYTE *)(a1 + 201);
  id v43 = *(id *)(a1 + 144);
  id v44 = *(id *)(a1 + 152);
  id v45 = *(id *)(a1 + 160);
  id v46 = *(id *)(a1 + 168);
  id v47 = *(id *)(a1 + 176);
  id v48 = *(id *)(a1 + 184);
  char v52 = *(_BYTE *)(a1 + 202);
  uint64_t v27 = objc_retainBlock(v28);
  if (*(uint64_t *)(a1 + 192) < 1)
  {
    id v22 = 0LL;
  }

  else
  {
    unsigned int v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 80) certifiedDeliveryRTS]);
    if (!v26)
    {
      uint64_t v7 = OSLogHandleForIDSCategory("Warning");
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v9 = *(void *)(a1 + 72);
        uint64_t v10 = *(void *)(a1 + 192);
        *(_DWORD *)buf = 138412546;
        uint64_t v54 = v9;
        __int16 v55 = 2048;
        uint64_t v56 = v10;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "No certified delivery RTS found in payload with cdv { guid: %@, cdv: %ld }",  buf,  0x16u);
      }

      if (os_log_shim_legacy_logging_enabled(v11))
      {
        _IDSWarnV( @"IDSFoundation",  @"No certified delivery RTS found in payload with cdv { guid: %@, cdv: %ld }");
        _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"No certified delivery RTS found in payload with cdv { guid: %@, cdv: %ld }");
        _IDSLogTransport( @"Warning",  @"IDS",  @"No certified delivery RTS found in payload with cdv { guid: %@, cdv: %ld }");
      }
    }

    id v12 = objc_alloc(&OBJC_CLASS___IDSCertifiedDeliveryContext);
    uint64_t v13 = *(void *)(a1 + 40);
    uint64_t v14 = *(void *)(a1 + 72);
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 80) encryptionTypeStr]);
    uint64_t v17 = IDSEncryptionTypeFromEncryptionTypeString(v15, v16);
    uint64_t v18 = *(void *)(a1 + 192);
    unsigned int v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 136) rawToken]);
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 104) prefixedURI]);
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 96) prefixedURI]);
    id v22 = [v12 initWithGUID:v14 service:v13 encryptionType:v17 certifiedDeliveryVersion:v18 certifiedDeliveryRTS:v26 senderToken:v19 localURI:v20 remoteURI:v21];
  }

  uint64_t v24 = *(void *)(a1 + 80);
  BOOL v23 = *(void **)(a1 + 88);
  if (*(_BYTE *)(a1 + 203)) {
    [v23 _handleIncomingNiceAttachmentMessage:v24 forTopic:*(void *)(a1 + 40) fromURI:*(void *)(a1 + 96) certifiedDeliveryContext:v22 completionBlock:v27];
  }
  else {
    [v23 _optionallyDecryptNiceMessage:v24 encryptedData:0 forGroupID:*(void *)(a1 + 176) forTopic:*(void *)(a1 + 40) fromURI:*(void *)(a1 + 96) certifiedDeliveryContext:v22 completionBlock:v27];
  }
}

void sub_10037B9CC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v132 = a3;
  id v133 = a4;
  uint64_t v186 = 0LL;
  int v187 = (id *)&v186;
  uint64_t v188 = 0x3032000000LL;
  v189 = sub_100356518;
  uint64_t v190 = sub_100356528;
  id v191 = (id)0xAAAAAAAAAAAAAAAALL;
  id v131 = v7;
  id v191 = v131;
  uint64_t v180 = 0LL;
  id v181 = &v180;
  uint64_t v182 = 0x3032000000LL;
  v183 = sub_100356518;
  v184 = sub_100356528;
  id v185 = (id)0xAAAAAAAAAAAAAAAALL;
  id v185 = *(id *)(a1 + 32);
  id v134 = *(id *)(a1 + 40);
  id v135 = *(id *)(a1 + 48);
  id v136 = *(id *)(a1 + 56);
  id v137 = *(id *)(a1 + 64);
  id v138 = *(id *)(a1 + 72);
  uint64_t v141 = a1;
  id v139 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 80) storageContext]);
  if (_os_feature_enabled_impl("IDS", "EncryptedReceipt") && *(_BYTE *)(a1 + 200))
  {
    uint64_t v8 = OSLogHandleForIDSCategory("IDSDaemon");
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(void **)(a1 + 72);
      *(_DWORD *)buf = 138412290;
      v194 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Received encrypted receipt { guid: %@ }",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v11) && _IDSShouldLog(0LL, @"IDSDaemon"))
    {
      uint64_t v123 = *(void *)(a1 + 72);
      _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon", @"Received encrypted receipt { guid: %@ }");
    }

    uint64_t v12 = IDSIncomingMessageDecryptedDataKey;
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v187[5], "objectForKey:", IDSIncomingMessageDecryptedDataKey, v123));
    uint64_t v15 = objc_opt_class(&OBJC_CLASS___NSString, v14);
    if ((objc_opt_isKindOfClass(v13, v15) & 1) != 0)
    {
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v187[5] objectForKey:v12]);
      uint64_t v17 = objc_claimAutoreleasedReturnValue(+[NSData _IDSDataFromBase64String:](&OBJC_CLASS___NSData, "_IDSDataFromBase64String:", v16));
    }

    else
    {
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v187[5] objectForKey:v12]);
      uint64_t v19 = objc_opt_class(&OBJC_CLASS___NSData, v18);
      if ((objc_opt_isKindOfClass(v16, v19) & 1) == 0)
      {
        uint64_t v20 = 0LL;
LABEL_14:

        uint64_t v21 = JWDecodeDictionary(v20);
        id v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
        uint64_t v23 = _os_feature_enabled_impl("IDS", "CarrierPigeon");
        if ((_DWORD)v23)
        {
          uint64_t v25 = im_primary_queue(v23, v24);
          unsigned int v26 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v25);
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472LL;
          block[2] = sub_10037CED4;
          block[3] = &unk_1008F5F58;
          void block[4] = *(void *)(a1 + 88);
          id v178 = v22;
          id v179 = *(id *)(a1 + 80);
          dispatch_async(v26, block);
        }

        if (!v22
          || !IDSQueryHashKey
          || (uint64_t v27 = (id)CFDictionaryGetValue((CFDictionaryRef)v22, IDSQueryHashKey)) == 0LL)
        {
          uint64_t v36 = OSLogHandleForIDSCategory("IDSDaemon");
          id v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
          if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
          {
            id v38 = *(void **)(a1 + 72);
            *(_DWORD *)buf = 138412290;
            v194 = v38;
            _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "Delivery receipt %@ had encrypted payload, but had a poorly encoded queryHash.",  buf,  0xCu);
          }

          if (os_log_shim_legacy_logging_enabled(v39)
            && _IDSShouldLog(0LL, @"IDSDaemon"))
          {
            uint64_t v123 = *(void *)(a1 + 72);
            _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Delivery receipt %@ had encrypted payload, but had a poorly encoded queryHash.");
          }

          uint64_t v28 = 0LL;
          goto LABEL_31;
        }

        uint64_t v28 = v27;
        id v29 = -[NSMutableData initWithLength:](objc_alloc(&OBJC_CLASS___NSMutableData), "initWithLength:", 32LL);
        unsigned __int8 v30 = [v28 isEqualToData:v29];

        if ((v30 & 1) != 0)
        {
          uint64_t v31 = OSLogHandleForIDSCategory("IDSDaemon");
          id v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
          if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
          {
            id v33 = *(void **)(v141 + 72);
            *(_DWORD *)buf = 138412290;
            v194 = v33;
            _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "Decrypted hash was prosthetic 0 hash. Processed in DeliveryReceipt %@",  buf,  0xCu);
          }

          if (!os_log_shim_legacy_logging_enabled(v34)
            || !_IDSShouldLog(0LL, @"IDSDaemon"))
          {
            goto LABEL_31;
          }

          id v35 = @"Decrypted hash was prosthetic 0 hash. Processed in DeliveryReceipt %@";
        }

        else
        {
          [*(id *)(v141 + 88) queryHashForceUpdate:*(void *)(v141 + 32) fromURI:*(void *)(v141 + 96) messageUUID:*(void *)(v141 + 72) updateHash:v28 toURI:*(void *)(v141 + 104) service:*(void *)(v141 + 112)];
          uint64_t v117 = OSLogHandleForIDSCategory("IDSDaemon");
          uint64_t v118 = (os_log_s *)objc_claimAutoreleasedReturnValue(v117);
          if (os_log_type_enabled(v118, OS_LOG_TYPE_DEFAULT))
          {
            id v119 = *(void **)(v141 + 72);
            *(_DWORD *)buf = 138412290;
            v194 = v119;
            _os_log_impl( (void *)&_mh_execute_header,  v118,  OS_LOG_TYPE_DEFAULT,  "Decrypted hash Processed in DeliveryReceipt %@",  buf,  0xCu);
          }

          if (!os_log_shim_legacy_logging_enabled(v120)
            || (_IDSShouldLog(0LL, @"IDSDaemon") & 1) == 0)
          {
            goto LABEL_31;
          }

          id v35 = @"Decrypted hash Processed in DeliveryReceipt %@";
        }

        uint64_t v123 = *(void *)(v141 + 72);
        _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon", v35);
LABEL_31:

        goto LABEL_32;
      }

      uint64_t v17 = objc_claimAutoreleasedReturnValue([v187[5] objectForKey:v12]);
    }

    uint64_t v20 = (void *)v17;
    goto LABEL_14;
  }

void sub_10037CED4(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  id v7 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) fromURI]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) senderPushToken]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) toURI]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) pushUUID]);
  [v2 _handleDeliveryReceiptForSenderKeyCheck:v3 remoteURI:v7 remotePushToken:v4 localURI:v5 originalGUID:v6];
}

void sub_10037CF78(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 512LL);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v9, 1LL));
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[IDSSenderKeySendContext iMessageReceive]( &OBJC_CLASS____TtC17identityservicesd23IDSSenderKeySendContext,  "iMessageReceive"));
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _BYTE v6[2] = sub_10037D098;
  v6[3] = &unk_1008F8800;
  id v7 = *(id *)(a1 + 40);
  id v8 = *(id *)(a1 + 48);
  [v2 generateAndSendKeyIfNeededToURIs:v3 fromURI:v4 context:v5 completion:v6];
}

uint64_t sub_10037D098(uint64_t a1, int a2)
{
  uint64_t v4 = OSLogHandleForIDSCategory("IDSDaemon_SenderKey");
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = @"NO";
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v8 = *(void *)(a1 + 40);
    if (a2) {
      uint64_t v6 = @"YES";
    }
    *(_DWORD *)buf = 138412802;
    uint64_t v12 = v6;
    __int16 v13 = 2112;
    uint64_t v14 = v7;
    __int16 v15 = 2112;
    uint64_t v16 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Did trigger generateAndSendKeyIfNeededToURIs: %@ { toURI: %@ fromURI: %@ }",  buf,  0x20u);
  }

  uint64_t result = os_log_shim_legacy_logging_enabled(v9);
  if ((_DWORD)result)
  {
    uint64_t result = _IDSShouldLog(0LL, @"IDSDaemon_SenderKey");
    if ((_DWORD)result) {
      return _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon_SenderKey",  @"Did trigger generateAndSendKeyIfNeededToURIs: %@ { toURI: %@ fromURI: %@ }");
    }
  }

  return result;
}

void sub_10037D1F4(uint64_t a1, void *a2, void *a3, int a4)
{
  uint64_t v182 = a2;
  id v180 = a3;
  if (v180) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 232) + 8LL) + 40LL), a3);
  }
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPeerIDManager sharedInstance](&OBJC_CLASS___IDSPeerIDManager, "sharedInstance"));
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) queryService]);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v7 senderCorrelationIdentifierForURI:v8 pushToken:v9 fromURI:v10 service:v11]);

  if ([v12 length])
  {
    __int16 v13 = -[NSMutableDictionary initWithDictionary:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithDictionary:",  *(void *)(*(void *)(*(void *)(a1 + 232) + 8LL) + 40LL));
    id v14 = v12;
    if (v14) {
      CFDictionarySetValue((CFMutableDictionaryRef)v13, @"mid", v14);
    }

    uint64_t v15 = objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithDictionary:](&OBJC_CLASS___NSDictionary, "dictionaryWithDictionary:", v13));
    uint64_t v16 = *(void *)(*(void *)(a1 + 232) + 8LL);
    uint64_t v17 = *(void **)(v16 + 40);
    *(void *)(v16 + 40) = v15;
  }

  uint64_t v18 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v20 = *(void *)(a1 + 64);
    uint64_t v21 = *(void *)(a1 + 32);
    id v22 = (__CFString *)(id)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(a1 + 232) + 8) + 40) allKeys]);
    *(_DWORD *)buf = 138413058;
    *(void *)double v235 = v20;
    *(_WORD *)&v235[8] = 2112;
    *(void *)&v235[10] = v21;
    *(_WORD *)&v235[18] = 2112;
    *(void *)&v235[20] = v12;
    __int16 v236 = 2112;
    id v237 = v22;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Finished handling decryption {GUID: %@, URI: %@, SenderCorrelationIdentifier: %@, topLevelPayload: %@}",  buf,  0x2Au);
  }

  if (os_log_shim_legacy_logging_enabled(v23) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    uint64_t v24 = *(void *)(a1 + 64);
    uint64_t v25 = *(void *)(a1 + 32);
    __int128 v172 = v12;
    signed int v174 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 232) + 8) + 40) allKeys]);
    uint64_t v166 = v24;
    uint64_t v169 = v25;
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Finished handling decryption {GUID: %@, URI: %@, SenderCorrelationIdentifier: %@, topLevelPayload: %@}");
  }

  objc_msgSend( *(id *)(a1 + 72),  "_sendNiceMessageCheckpointIfNecessary:checkpoint:service:additionalInformation:",  *(void *)(a1 + 80),  9300,  *(void *)(a1 + 88),  0,  v166,  v169,  v172,  v174);
  unsigned int v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 80) serverTimestamp]);
  id v27 = sub_10034E194(v26);
  v183 = (void *)objc_claimAutoreleasedReturnValue(v27);

  [v183 timeIntervalSince1970];
  double v29 = v28;
  unsigned __int8 v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  [v30 timeIntervalSince1970];
  double v32 = v31;

  id v33 = [*(id *)(a1 + 96) BOOLValue];
  double v34 = v32 - v29;
  id v181 = [[IDSNoteMessageReceivedMetric alloc] initWithService:*(void *)(a1 + 88) accountType:0 fromStorage:v33 serverTimestamp:v29 localTimeDelta:v34];
  id v35 = (void *)objc_claimAutoreleasedReturnValue(+[IDSCoreAnalyticsLogger defaultLogger](&OBJC_CLASS___IDSCoreAnalyticsLogger, "defaultLogger"));
  [v35 logMetric:v181];

  uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue(+[IDSAWDLogging sharedInstance](&OBJC_CLASS___IDSAWDLogging, "sharedInstance"));
  [v36 noteMessageReceivedForService:*(void *)(a1 + 88) accountType:0 fromStorage:v33 serverTimestamp:v29 localTimeDelta:v34];

  if (!a4)
  {
    uint64_t v226 = 0LL;
    char v227 = &v226;
    uint64_t v228 = 0x3032000000LL;
    __int128 v229 = sub_100356518;
    __int128 v230 = sub_100356528;
    id v231 = 0LL;
    uint64_t v220 = 0LL;
    id v221 = &v220;
    uint64_t v222 = 0x3032000000LL;
    BOOL v223 = sub_100356518;
    id v224 = sub_100356528;
    id v225 = 0LL;
    uint64_t v44 = IDSIncomingMessageDecryptedDataKey;
    id v45 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(*(void *)(a1 + 232) + 8) + 40) objectForKey:IDSIncomingMessageDecryptedDataKey]);
    uint64_t v47 = objc_opt_class(&OBJC_CLASS___NSString, v46);
    if ((objc_opt_isKindOfClass(v45, v47) & 1) != 0)
    {
      id v49 = (void *)objc_claimAutoreleasedReturnValue(+[NSData _IDSDataFromBase64String:](&OBJC_CLASS___NSData, "_IDSDataFromBase64String:", v48));
    }

    else
    {
      uint64_t v51 = objc_opt_class(&OBJC_CLASS___NSData, v50);
      if ((objc_opt_isKindOfClass(v48, v51) & 1) == 0)
      {
        id v52 = 0LL;
LABEL_25:

        uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 80) rawBulkedData]);
        uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 80) isBulkedPayload]);
        unsigned int v55 = [v54 BOOLValue];
        if (v53) {
          int v56 = 1;
        }
        else {
          int v56 = v55;
        }

        id v179 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 80) rawUnencryptedPayload]);
        uint64_t v57 = (__CFString *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 80) originalCommand]);
        if (v57)
        {
          id v58 = v52;
          uint64_t v59 = OSLogHandleForIDSCategory("IDSDaemon");
          uint64_t v60 = (os_log_s *)objc_claimAutoreleasedReturnValue(v59);
          if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v61 = @"YES";
            if (!v58) {
              uint64_t v61 = @"NO";
            }
            *(_DWORD *)buf = 138412546;
            *(void *)double v235 = v57;
            *(_WORD *)&v235[8] = 2112;
            *(void *)&v235[10] = v61;
            _os_log_impl( (void *)&_mh_execute_header,  v60,  OS_LOG_TYPE_DEFAULT,  "Overflow attachment (with original command %@) -- checking for original payload? %@",  buf,  0x16u);
          }

          if (os_log_shim_legacy_logging_enabled(v62)
            && _IDSShouldLog(0LL, @"IDSDaemon"))
          {
            uint64_t v63 = @"YES";
            if (!v58) {
              uint64_t v63 = @"NO";
            }
            double v167 = v57;
            __int128 v170 = v63;
            _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Overflow attachment (with original command %@) -- checking for original payload? %@");
          }

          id v64 = v58;
          uint64_t v65 = v64;
          BOOL v66 = v56 == 0;
          if (v56) {
            unint64_t v67 = 0LL;
          }
          else {
            unint64_t v67 = (unint64_t)v64;
          }
          if (v66) {
            unint64_t v68 = 0LL;
          }
          else {
            unint64_t v68 = (unint64_t)v64;
          }
          if (v67 | v68)
          {
            uint64_t v69 = OSLogHandleForIDSCategory("IDSDaemon");
            id v70 = (os_log_s *)objc_claimAutoreleasedReturnValue(v69);
            if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
            {
              id v71 = @"NO";
              if (v67) {
                uint64_t v72 = @"YES";
              }
              else {
                uint64_t v72 = @"NO";
              }
              if (v68) {
                id v71 = @"YES";
              }
              *(_DWORD *)buf = 138412546;
              *(void *)double v235 = v72;
              *(_WORD *)&v235[8] = 2112;
              *(void *)&v235[10] = v71;
              _os_log_impl( (void *)&_mh_execute_header,  v70,  OS_LOG_TYPE_DEFAULT,  "Pulled out original payload %@ or bulked payload %@ from attachment message, using original command.",  buf,  0x16u);
            }

            if (os_log_shim_legacy_logging_enabled(v73)
              && _IDSShouldLog(0LL, @"IDSDaemon"))
            {
              id v74 = @"NO";
              if (v67) {
                id v75 = @"YES";
              }
              else {
                id v75 = @"NO";
              }
              if (v68) {
                id v74 = @"YES";
              }
              double v167 = v75;
              __int128 v170 = v74;
              _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Pulled out original payload %@ or bulked payload %@ from attachment message, using original command.");
            }

            id v52 = (id)v67;

            id v76 = (id)v68;
            objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 240) + 8LL) + 40LL), v57);
            uint64_t v53 = v76;
          }

          else
          {
            id v52 = v64;
          }
        }

        if (objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 240) + 8) + 40), "integerValue", v167, v170) == (id)242
          || [*(id *)(*(void *)(*(void *)(a1 + 240) + 8) + 40) integerValue] == (id)153)
        {
          uint64_t v77 = objc_claimAutoreleasedReturnValue([v52 _FTOptionallyDecompressData]);
LABEL_66:
          id v78 = 0LL;
          id v79 = (id)v227[5];
          v227[5] = v77;
          uint64_t v80 = 1LL;
LABEL_67:

          id v81 = v78;
LABEL_68:
          if ([*(id *)(a1 + 56) adHocServiceType] == 2)
          {
            uint64_t v83 = objc_opt_class(&OBJC_CLASS___NSData, v82);
            if ((objc_opt_isKindOfClass(v52, v83) & 1) != 0)
            {
              id v84 = objc_alloc(&OBJC_CLASS___IDSLocalDeliveryMessageReceivedMetric);
              unsigned int v85 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) identifier]);
              id v86 = objc_msgSend( v84,  "initWithService:isFromDefaultPairedDevice:messageSize:linkType:priority:",  v85,  1,  objc_msgSend(v52, "length"),  4,  300);

              id v87 = (void *)objc_claimAutoreleasedReturnValue( +[IDSCoreAnalyticsLogger defaultLogger]( &OBJC_CLASS___IDSCoreAnalyticsLogger,  "defaultLogger"));
              [v87 logMetric:v86];

              id v88 = (void *)objc_claimAutoreleasedReturnValue(+[IDSAWDLogging sharedInstance](&OBJC_CLASS___IDSAWDLogging, "sharedInstance"));
              id v89 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) identifier]);
              objc_msgSend( v88,  "messageReceivedForService:isFromDefaultPairedDevice:messageSize:linkType:priority:",  v89,  1,  objc_msgSend(v52, "length"),  4,  300);
            }
          }

          uint64_t v90 = objc_opt_class(&OBJC_CLASS___NSData, v82);
          if ((objc_opt_isKindOfClass(v53, v90) & 1) != 0 && [v53 length])
          {
            uint64_t v91 = OSLogHandleForIDSCategory("IDSDaemon");
            id v92 = (os_log_s *)objc_claimAutoreleasedReturnValue(v91);
            if (os_log_type_enabled(v92, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_DEFAULT, "Found rawBulkedData", buf, 2u);
            }

            if (os_log_shim_legacy_logging_enabled(v93)
              && _IDSShouldLog(0LL, @"IDSDaemon"))
            {
              _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon", @"Found rawBulkedData");
            }

            id v94 = (void *)objc_claimAutoreleasedReturnValue([v53 _FTOptionallyDecompressData]);
            uint64_t v95 = JWDecodeArray(v94);
            id v96 = (void *)objc_claimAutoreleasedReturnValue(v95);

            if ([v96 count])
            {
              id v98 = v96;
            }

            else
            {
              uint64_t v102 = JWDecodeArray(v53);
              uint64_t v103 = objc_claimAutoreleasedReturnValue(v102);

              id v98 = (void *)v103;
            }

            uint64_t v104 = objc_opt_class(&OBJC_CLASS___NSArray, v97);
            if ((objc_opt_isKindOfClass(v98, v104) & 1) != 0)
            {
LABEL_89:
              uint64_t v105 = OSLogHandleForIDSCategory("IDSDaemon");
              id v106 = (os_log_s *)objc_claimAutoreleasedReturnValue(v105);
              if (os_log_type_enabled(v106, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v107 = *(void *)(*(void *)(*(void *)(a1 + 240) + 8LL) + 40LL);
                char v108 = @"YES";
                if (v81) {
                  uint64_t v109 = @"YES";
                }
                else {
                  uint64_t v109 = @"NO";
                }
                if (v221[5]) {
                  uint64_t v110 = @"YES";
                }
                else {
                  uint64_t v110 = @"NO";
                }
                if (v227[5]) {
                  __int16 v111 = @"YES";
                }
                else {
                  __int16 v111 = @"NO";
                }
                if (!v98) {
                  char v108 = @"NO";
                }
                *(_DWORD *)buf = 138413314;
                *(void *)double v235 = v107;
                *(_WORD *)&v235[8] = 2112;
                *(void *)&v235[10] = v109;
                *(_WORD *)&v235[18] = 2112;
                *(void *)&v235[20] = v110;
                __int16 v236 = 2112;
                id v237 = v111;
                __int16 v238 = 2112;
                uint64_t v239 = v108;
                _os_log_impl( (void *)&_mh_execute_header,  v106,  OS_LOG_TYPE_DEFAULT,  "For command %@ we have unpacked dictionaryPayload? %@ protobufPayload? %@ dataPayload? %@ bulkedPayloads? %@",  buf,  0x34u);
              }

              if (os_log_shim_legacy_logging_enabled(v112)
                && _IDSShouldLog(0LL, @"IDSDaemon"))
              {
                __int16 v113 = @"YES";
                if (v81) {
                  uint64_t v114 = @"YES";
                }
                else {
                  uint64_t v114 = @"NO";
                }
                if (v221[5]) {
                  id v115 = @"YES";
                }
                else {
                  id v115 = @"NO";
                }
                if (v227[5]) {
                  uint64_t v116 = @"YES";
                }
                else {
                  uint64_t v116 = @"NO";
                }
                if (!v98) {
                  __int16 v113 = @"NO";
                }
                id v175 = v116;
                id v176 = v113;
                __int128 v171 = v114;
                __int128 v173 = v115;
                id v168 = *(const __CFString **)(*(void *)(*(void *)(a1 + 240) + 8LL) + 40LL);
                _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"For command %@ we have unpacked dictionaryPayload? %@ protobufPayload? %@ dataPayload? %@ bulkedPayloads? %@");
              }

              v187[0] = _NSConcreteStackBlock;
              v187[1] = 3221225472LL;
              v187[2] = sub_10037E97C;
              v187[3] = &unk_100902688;
              id v188 = *(id *)(a1 + 64);
              id v117 = *(id *)(a1 + 104);
              int v219 = v80;
              uint64_t v214 = &v226;
              v215 = &v220;
              uint64_t v118 = *(void *)(a1 + 72);
              id v119 = *(void **)(a1 + 80);
              id v189 = v117;
              uint64_t v190 = v118;
              id v191 = v119;
              id v192 = *(id *)(a1 + 32);
              id v193 = *(id *)(a1 + 56);
              id v194 = v12;
              id v120 = v81;
              id v195 = v120;
              id v196 = *(id *)(a1 + 128);
              id v197 = *(id *)(a1 + 136);
              id v198 = *(id *)(a1 + 144);
              id v199 = *(id *)(a1 + 152);
              id v200 = *(id *)(a1 + 160);
              id v201 = *(id *)(a1 + 168);
              id v202 = *(id *)(a1 + 120);
              id v203 = *(id *)(a1 + 48);
              id v204 = *(id *)(a1 + 176);
              id v205 = *(id *)(a1 + 96);
              id v206 = *(id *)(a1 + 184);
              double v218 = v29;
              id v121 = *(id *)(a1 + 192);
              uint64_t v122 = *(void *)(a1 + 240);
              id v207 = v121;
              uint64_t v216 = v122;
              id v208 = *(id *)(a1 + 40);
              id v209 = *(id *)(a1 + 200);
              id v123 = *(id *)(a1 + 88);
              uint64_t v124 = *(void *)(a1 + 232);
              id v210 = v123;
              uint64_t v217 = v124;
              id v211 = *(id *)(a1 + 208);
              id v212 = *(id *)(a1 + 216);
              id v125 = v98;
              id v213 = v125;
              v184[0] = _NSConcreteStackBlock;
              v184[1] = 3221225472LL;
              v184[2] = sub_100382474;
              v184[3] = &unk_1009026B0;
              uint64_t v126 = objc_retainBlock(v187);
              id v185 = v126;
              id v186 = *(id *)(a1 + 224);
              uint64_t v127 = objc_retainBlock(v184);
              id v128 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) identifier]);
              unsigned int v129 = +[IMUserDefaults serviceConstraintOverride:]( &OBJC_CLASS___IMUserDefaults,  "serviceConstraintOverride:",  v128);

              unsigned int v130 = [*(id *)(a1 + 56) constraintType];
              if (v129) {
                id v131 = (const __CFString *)v129;
              }
              else {
                id v131 = (const __CFString *)v130;
              }
              id v132 = (__CFString *)[[IDSBlastDoorMessageContext alloc] initWithService:*(void *)(a1 + 56) command:*(void *)(*(void *)(*(void *)(a1 + 240) + 8) + 40)];
              -[__CFString setPayloadType:](v132, "setPayloadType:", v80);
              if ((_DWORD)v80)
              {
                if ((_DWORD)v80 == 1)
                {
                  uint64_t v134 = v227[5];
                  if (v134)
                  {
                    double v232 = @"##payload-data##";
                    uint64_t v233 = v134;
                    id v135 = (id)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v233,  &v232,  1LL));
                  }

                  else
                  {
                    id v135 = &__NSDictionary0__struct;
                  }

LABEL_127:
                  uint64_t v136 = OSLogHandleForIDSCategory("IDSDaemon");
                  id v137 = (os_log_s *)objc_claimAutoreleasedReturnValue(v136);
                  if (os_log_type_enabled(v137, OS_LOG_TYPE_DEFAULT))
                  {
                    uint64_t v138 = *(void *)(a1 + 64);
                    *(_DWORD *)buf = 138412802;
                    *(void *)double v235 = v138;
                    *(_WORD *)&v235[8] = 1024;
                    *(_DWORD *)&v235[10] = (_DWORD)v131;
                    *(_WORD *)&v235[14] = 2112;
                    *(void *)&v235[16] = v132;
                    _os_log_impl( (void *)&_mh_execute_header,  v137,  OS_LOG_TYPE_DEFAULT,  "IDSBlastDoor: Incoming message %@ has constraint type %u and BlastDoor context %@",  buf,  0x1Cu);
                  }

                  if (os_log_shim_legacy_logging_enabled(v139)
                    && _IDSShouldLog(0LL, @"IDSDaemon"))
                  {
                    __int128 v171 = v131;
                    __int128 v173 = v132;
                    id v168 = *(const __CFString **)(a1 + 64);
                    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"IDSBlastDoor: Incoming message %@ has constraint type %u and BlastDoor context %@");
                  }

                  if ((_DWORD)v131)
                  {
                    if ((_DWORD)v131 == 2)
                    {
                      [*(id *)(*(void *)(a1 + 72) + 472) diffuseClientMessage:v135 context:v132 withCompletionBlock:v127];
LABEL_146:

                      _Block_object_dispose(&v220, 8);
                      _Block_object_dispose(&v226, 8);

                      goto LABEL_147;
                    }

                    if ((_DWORD)v131 != 1)
                    {
                      uint64_t v141 = OSLogHandleForIDSCategory("IDSDaemon");
                      id v142 = (os_log_s *)objc_claimAutoreleasedReturnValue(v141);
                      if (os_log_type_enabled(v142, OS_LOG_TYPE_DEFAULT))
                      {
                        uint64_t v143 = *(void *)(a1 + 64);
                        *(_DWORD *)buf = 67109378;
                        *(_DWORD *)double v235 = (_DWORD)v131;
                        *(_WORD *)&v235[4] = 2112;
                        *(void *)&v235[6] = v143;
                        _os_log_impl( (void *)&_mh_execute_header,  v142,  OS_LOG_TYPE_DEFAULT,  "IDSBlastDoor: Unknown constraint type %u, dropping message %@",  buf,  0x12u);
                      }

                      if (os_log_shim_legacy_logging_enabled(v144)
                        && _IDSShouldLog(0LL, @"IDSDaemon"))
                      {
                        id v168 = v131;
                        __int128 v171 = *(const __CFString **)(a1 + 64);
                        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"IDSBlastDoor: Unknown constraint type %u, dropping message %@");
                      }

                      +[IDSDMessageStore deleteIncomingMessageWithGUID:]( &OBJC_CLASS___IDSDMessageStore,  "deleteIncomingMessageWithGUID:",  *(void *)(a1 + 104),  v168,  v171,  v173,  v175,  v176);
                      uint64_t v145 = *(void *)(a1 + 224);
                      if (v145) {
                        (*(void (**)(void))(v145 + 16))();
                      }
                      goto LABEL_146;
                    }

                    uint64_t v140 = 1LL;
                  }

                  else
                  {
                    uint64_t v140 = 2LL;
                  }

                  ((void (*)(void *, id, uint64_t, void))v127[2])(v127, v135, v140, 0LL);
                  goto LABEL_146;
                }

                id v133 = (id)v221[5];
              }

              else
              {
                id v133 = v120;
              }

              id v135 = v133;
              goto LABEL_127;
            }
          }

          id v98 = 0LL;
          goto LABEL_89;
        }

        if ([*(id *)(*(void *)(*(void *)(a1 + 240) + 8) + 40) integerValue] == (id)250)
        {
          if (v179)
          {
            uint64_t v77 = objc_claimAutoreleasedReturnValue([v179 _FTOptionallyDecompressData]);
            goto LABEL_66;
          }

          id v81 = 0LL;
        }

        else
        {
          if ([*(id *)(*(void *)(*(void *)(a1 + 240) + 8) + 40) integerValue] == (id)243)
          {
            id v79 = (id)objc_claimAutoreleasedReturnValue([v52 _FTOptionallyDecompressData]);
            uint64_t v99 = JWDecodeDictionary(v79);
            uint64_t v100 = objc_claimAutoreleasedReturnValue(v99);
            uint64_t v101 = (void *)v221[5];
            v221[5] = v100;

            id v78 = 0LL;
            uint64_t v80 = 2LL;
            goto LABEL_67;
          }

          id v81 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 72) _payloadFromDecryptedData:v52]);
          if (!v81)
          {
            if (*(_BYTE *)(a1 + 248))
            {
              id v146 = [[IDSOffGridEncryptedMessage alloc] initWithPayload:v52 senderURI:*(void *)(a1 + 32) recipientURI:*(void *)(a1 + 48)];
              id v147 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 80) messageChunkNumber]);
              int8x16_t v148 = (void *)objc_claimAutoreleasedReturnValue([v146 encryptionProperties]);
              [v148 setSegmentNumber:v147];

              id v149 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 80) totalChunkCount]);
              id v150 = (void *)objc_claimAutoreleasedReturnValue([v146 encryptionProperties]);
              [v150 setTotalSegments:v149];

              id v151 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 80) pendingMessageCount]);
              [v146 setPendingTotalCount:v151];

              id v152 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 80) pendingMessagePerSenderCount]);
              [v146 setPendingCount:v152];

              id v153 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 80) serverTimestamp]);
              [v153 doubleValue];
              id v155 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSince1970:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSince1970:",  v154 / 1000000000.0));
              [v146 setDate:v155];

              id v156 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 80) desiredProtocol]);
              [v146 setPreferredService:v156];

              id v157 = (void *)objc_claimAutoreleasedReturnValue([v146 dictionaryRepresentation]);
              id v158 = [v157 mutableCopy];

              id v81 = v158;
            }

            else
            {
              id v81 = 0LL;
            }
          }

          if ([*(id *)(a1 + 88) isEqualToString:IDSServiceNameiMessageLite]
            && [*(id *)(a1 + 120) integerValue] == (id)128)
          {
            id v177 = objc_alloc(&OBJC_CLASS___IDSOffGridServiceUpdateMessage);
            id v159 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 80) desiredProtocol]);
            signed int v160 = [v159 intValue];
            id v178 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 80) fromURI]);
            id v161 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 80) toURI]);
            id v79 = [v177 initWithPreferredServiceType:v160 senderURI:v178 recipientURI:v161];

            id v162 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 80) expirationDate]);
            [v162 doubleValue];
            id v163 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSince1970:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSince1970:"));
            [v79 setExpirationDate:v163];

            id v164 = (void *)objc_claimAutoreleasedReturnValue([v79 dictionaryRepresentation]);
            id v165 = [v164 mutableCopy];

            id v78 = v165;
            uint64_t v80 = 0LL;
            goto LABEL_67;
          }
        }

        uint64_t v80 = 0LL;
        goto LABEL_68;
      }
    }

    id v52 = v49;

    goto LABEL_25;
  }

  uint64_t v37 = OSLogHandleForIDSCategory("Warning");
  id v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
  if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
  {
    uint64_t v39 = *(void *)(a1 + 104);
    uint64_t v40 = *(void *)(a1 + 112);
    *(_DWORD *)buf = 138478339;
    *(void *)double v235 = v39;
    *(_WORD *)&v235[8] = 2112;
    *(void *)&v235[10] = v182;
    *(_WORD *)&v235[18] = 2112;
    *(void *)&v235[20] = v40;
    _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_ERROR,  "Dropping message! {guid: %{private}@, processError: %@, decryptionError %@",  buf,  0x20u);
  }

  if (os_log_shim_legacy_logging_enabled(v41))
  {
    _IDSWarnV( @"IDSFoundation",  @"Dropping message! {guid: %{private}@, processError: %@, decryptionError %@");
    _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"Dropping message! {guid: %{private}@, processError: %@, decryptionError %@");
    __int128 v170 = v182;
    __int128 v173 = *(const __CFString **)(a1 + 112);
    double v167 = *(const __CFString **)(a1 + 104);
    *(void *)&double v42 = _IDSLogTransport( @"Warning",  @"IDS",  @"Dropping message! {guid: %{private}@, processError: %@, decryptionError %@").n128_u64[0];
  }

  objc_msgSend( objc_msgSend(*(id *)(a1 + 72), "_messageStoreClass", v42, v167, v170, v173),  "deleteIncomingMessageWithGUID:",  *(void *)(a1 + 104));
  uint64_t v43 = *(void *)(a1 + 224);
  if (v43) {
    (*(void (**)(void))(v43 + 16))();
  }
LABEL_147:
}

void sub_10037E730( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *exc_buf, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  if (a2 == 1)
  {
    id v64 = objc_begin_catch(a1);
    uint64_t v65 = OSLogHandleForIDSCategory("IDSDaemon");
    BOOL v66 = (os_log_s *)objc_claimAutoreleasedReturnValue(v65);
    if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)(v63 - 176) = 138412290;
      *(void *)(v63 - 172) = v64;
      _os_log_impl( (void *)&_mh_execute_header,  v66,  OS_LOG_TYPE_DEFAULT,  "Hit exception %@ trying to deserialize payloads",  (uint8_t *)(v63 - 176),  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v67) && _IDSShouldLog(0LL, @"IDSDaemon")) {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Hit exception %@ trying to deserialize payloads");
    }

    objc_end_catch();
    JUMPOUT(0x10037DE84LL);
  }

  _Block_object_dispose(&a63, 8);
  _Block_object_dispose((const void *)(v63 - 240), 8);
  _Unwind_Resume(a1);
}

void sub_10037E97C(uint64_t a1, void *a2, const __CFString *a3, void *a4)
{
  id v7 = a2;
  uint64_t v8 = a4;
  if (!v8)
  {
    uint64_t v13 = OSLogHandleForIDSCategory("IDSDaemon");
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = *(const __CFString **)(a1 + 32);
      uint64_t v16 = @"YES";
      *(_DWORD *)buf = 138412802;
      if (!v7) {
        uint64_t v16 = @"NO";
      }
      uint64_t v140 = v15;
      __int16 v141 = 2112;
      id v142 = v16;
      __int16 v143 = 2048;
      uint64_t v144 = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "IDSBlastDoor: Completed blastdoor validation for message %@ with validated payload %@ and message type %ld",  buf,  0x20u);
    }

    if (os_log_shim_legacy_logging_enabled(v17) && _IDSShouldLog(0LL, @"IDSDaemon"))
    {
      uint64_t v18 = @"YES";
      if (!v7) {
        uint64_t v18 = @"NO";
      }
      uint64_t v105 = v18;
      char v108 = a3;
      uint64_t v102 = *(void *)(a1 + 32);
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"IDSBlastDoor: Completed blastdoor validation for message %@ with validated payload %@ and message type %ld");
    }

    int v19 = *(_DWORD *)(a1 + 280);
    if (v19 == 2)
    {
      uint64_t v21 = *(void *)(*(void *)(a1 + 248) + 8LL);
      id v22 = v7;
      uint64_t v20 = *(void **)(v21 + 40);
      *(void *)(v21 + 40) = v22;
    }

    else
    {
      if (v19 != 1)
      {
LABEL_26:
        uint64_t v23 = objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(a1 + 48),  "_replayKeyForNiceMessage:encryptedData:",  *(void *)(a1 + 56),  0,  v102,  v105,  v108));
        unsigned int v26 = (__CFString *)v23;
        if (v23)
        {
          id v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 48) + 480) objectForKey:v23]);
          unsigned __int8 v28 = [v27 isEqualToIgnoringCase:*(void *)(a1 + 32)];

          if ((v28 & 1) == 0)
          {
            uint64_t v29 = OSLogHandleForIDSCategory("IDSDaemon");
            unsigned __int8 v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
            if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
            {
              double v31 = *(const __CFString **)(a1 + 32);
              double v32 = (__CFString *)(id)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 48) + 480) objectForKey:v26]);
              *(_DWORD *)buf = 138412802;
              uint64_t v140 = v26;
              __int16 v141 = 2112;
              id v142 = v31;
              __int16 v143 = 2112;
              uint64_t v144 = v32;
              _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "ERROR: Replay key %@ failed to match to the messageUUID %@ in the map: %@",  buf,  0x20u);
            }

            uint64_t v23 = os_log_shim_legacy_logging_enabled(v33);
            if ((_DWORD)v23)
            {
              uint64_t v23 = _IDSShouldLog(0LL, @"IDSDaemon");
              if ((_DWORD)v23)
              {
                id v106 = *(__CFString **)(a1 + 32);
                uint64_t v109 = (__CFString *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 48) + 480) objectForKey:v26]);
                uint64_t v103 = v26;
                _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"ERROR: Replay key %@ failed to match to the messageUUID %@ in the map: %@");
              }
            }
          }
        }

        if (a3 != (const __CFString *)2)
        {
          if (a3 != (const __CFString *)1)
          {
            uint64_t v36 = OSLogHandleForIDSCategory("IDSDaemon");
            uint64_t v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
            if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
            {
              id v38 = *(const __CFString **)(a1 + 32);
              *(_DWORD *)buf = 134218242;
              uint64_t v140 = a3;
              __int16 v141 = 2112;
              id v142 = v38;
              _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "IDSBlastDoor: Invalid message type %ld for message %@, dropping",  buf,  0x16u);
            }

            if (os_log_shim_legacy_logging_enabled(v39)
              && _IDSShouldLog(0LL, @"IDSDaemon"))
            {
              uint64_t v103 = a3;
              id v106 = *(__CFString **)(a1 + 32);
              _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"IDSBlastDoor: Invalid message type %ld for message %@, dropping");
            }

            +[IDSDMessageStore deleteIncomingMessageWithGUID:]( &OBJC_CLASS___IDSDMessageStore,  "deleteIncomingMessageWithGUID:",  *(void *)(a1 + 40),  v103,  v106,  v109);
            goto LABEL_129;
          }

          if (([*(id *)(a1 + 48) isMessageFromSelfForFromURI:*(void *)(a1 + 64) service:*(void *)(a1 + 72)] & 1) == 0 && (objc_msgSend( *(id *)(a1 + 48),  "firewallDatabaseAllowsFromURI:mergeID:service:",  *(void *)(a1 + 64),  *(void *)(a1 + 80),  *(void *)(a1 + 72)) & 1) == 0)
          {
            uint64_t v95 = OSLogHandleForIDSCategory("IDSDaemon");
            id v96 = (os_log_s *)objc_claimAutoreleasedReturnValue(v95);
            if (os_log_type_enabled(v96, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v97 = *(const __CFString **)(a1 + 80);
              id v98 = *(const __CFString **)(a1 + 64);
              unsigned int v99 = [*(id *)(a1 + 72) controlCategory];
              *(_DWORD *)buf = 138412802;
              uint64_t v140 = v98;
              __int16 v141 = 2112;
              id v142 = v97;
              __int16 v143 = 1024;
              LODWORD(v144) = v99;
              _os_log_impl( (void *)&_mh_execute_header,  v96,  OS_LOG_TYPE_DEFAULT,  "IDSBlastDoor: Sender %@ with mergeID %@ not in allow list for service category %u",  buf,  0x1Cu);
            }

            if (os_log_shim_legacy_logging_enabled(v100)
              && _IDSShouldLog(0LL, @"IDSDaemon"))
            {
              uint64_t v101 = *(const __CFString **)(a1 + 64);
              id v106 = *(__CFString **)(a1 + 80);
              uint64_t v109 = (__CFString *)[*(id *)(a1 + 72) controlCategory];
              uint64_t v103 = v101;
              _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"IDSBlastDoor: Sender %@ with mergeID %@ not in allow list for service category %u");
            }

            +[IDSDMessageStore updateExpirationForIncomingMessageWithGUID:expirationDate:]( IDSDMessageStore,  "updateExpirationForIncomingMessageWithGUID:expirationDate:",  *(void *)(a1 + 40),  objc_msgSend(*(id *)(a1 + 48), "_expirationTimeForRestrictedMessages", v103, v106, v109));
            goto LABEL_129;
          }

          id v34 = *(id *)(a1 + 88);

          id v7 = v34;
        }

        if (CUTIsInternalInstall(v23, v24, v25)) {
          unsigned int v35 = +[IMUserDefaults isWritePushPayloadsToDiskEnabled]( &OBJC_CLASS___IMUserDefaults,  "isWritePushPayloadsToDiskEnabled");
        }
        else {
          unsigned int v35 = 0;
        }
        uint64_t v40 = OSLogHandleForIDSCategory("IDSDaemon");
        uint64_t v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
        if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
        {
          double v42 = *(const __CFString **)(a1 + 32);
          uint64_t v43 = @"NO";
          if (*(void *)(a1 + 96)) {
            uint64_t v44 = @"YES";
          }
          else {
            uint64_t v44 = @"NO";
          }
          *(_DWORD *)buf = 138413314;
          if (v35) {
            uint64_t v43 = @"YES";
          }
          uint64_t v140 = v42;
          __int16 v141 = 2112;
          id v142 = v26;
          __int16 v143 = 2112;
          uint64_t v144 = @"YES";
          __int16 v145 = 2112;
          id v146 = v44;
          __int16 v147 = 2112;
          int8x16_t v148 = v43;
          _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEFAULT,  "Commit block status for message %@: Replay Key %@, IDSXAccountBlastdoor %@ hasCertifiedDelivery %@, isWriteP ayloadToDiskEnabled %@",  buf,  0x34u);
        }

        if (os_log_shim_legacy_logging_enabled(v45)
          && _IDSShouldLog(0LL, @"IDSDaemon"))
        {
          uint64_t v46 = @"NO";
          if (*(void *)(a1 + 96)) {
            uint64_t v47 = @"YES";
          }
          else {
            uint64_t v47 = @"NO";
          }
          if (v35) {
            uint64_t v46 = @"YES";
          }
          __int16 v111 = v47;
          uint64_t v112 = v46;
          id v106 = v26;
          uint64_t v109 = @"YES";
          uint64_t v103 = *(const __CFString **)(a1 + 32);
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Commit block status for message %@: Replay Key %@, IDSXAccountBlastdoor %@ hasCertifiedDelivery %@, isWritePayloadToDiskEnabled %@");
        }

        if (v26 && (*(void *)(a1 + 96) ? (char v48 = 1) : (char v48 = v35), (v48 & 1) == 0))
        {
          uint64_t v53 = OSLogHandleForIDSCategory("IDSDaemon");
          uint64_t v54 = (os_log_s *)objc_claimAutoreleasedReturnValue(v53);
          if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
          {
            unsigned int v55 = *(const __CFString **)(a1 + 32);
            *(_DWORD *)buf = 138412546;
            uint64_t v140 = v55;
            __int16 v141 = 2112;
            id v142 = v26;
            _os_log_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_DEFAULT,  "Commit block status for message %@: Calling commit block with replay key %@",  buf,  0x16u);
          }

          if (os_log_shim_legacy_logging_enabled(v56)
            && _IDSShouldLog(0LL, @"IDSDaemon"))
          {
            uint64_t v103 = *(const __CFString **)(a1 + 32);
            id v106 = v26;
            _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Commit block status for message %@: Calling commit block with replay key %@");
          }

          uint64_t v57 = (void *)objc_claimAutoreleasedReturnValue( +[IDSEncryptionController sharedInstance]( &OBJC_CLASS___IDSEncryptionController,  "sharedInstance",  v103,  v106,  v109,  v111,  v112));
          v137[0] = _NSConcreteStackBlock;
          v137[1] = 3221225472LL;
          v137[2] = sub_10037FB6C;
          v137[3] = &unk_1008F5F80;
          v137[4] = *(void *)(a1 + 48);
          id v58 = v26;
          uint64_t v138 = v58;
          [v57 performAsyncBlock:v137 priority:300];

          [*(id *)(*(void *)(a1 + 48) + 480) removeObjectForKey:v58];
        }

        else
        {
          uint64_t v49 = OSLogHandleForIDSCategory("IDSDaemon");
          uint64_t v50 = (os_log_s *)objc_claimAutoreleasedReturnValue(v49);
          if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v51 = *(const __CFString **)(a1 + 32);
            *(_DWORD *)buf = 138412290;
            uint64_t v140 = v51;
            _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_DEFAULT,  "Commit block status for message %@: Not calling commit block.",  buf,  0xCu);
          }

          if (os_log_shim_legacy_logging_enabled(v52)
            && _IDSShouldLog(0LL, @"IDSDaemon"))
          {
            uint64_t v103 = *(const __CFString **)(a1 + 32);
            _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Commit block status for message %@: Not calling commit block.");
          }
        }

        uint64_t v59 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "originalTimestamp", v103));
        id v60 = [*(id *)(a1 + 56) isTrustedSender];
        uint64_t v61 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
        id v62 = *(id *)(a1 + 104);
        if (v62) {
          CFDictionarySetValue((CFMutableDictionaryRef)v61, IDSMessageContextOutgoingResponseIdentifierKey, v62);
        }

        id v63 = *(id *)(a1 + 112);
        if (v63) {
          CFDictionarySetValue((CFMutableDictionaryRef)v61, IDSMessageContextIncomingResponseIdentifierKey, v63);
        }

        id v64 = *(id *)(a1 + 120);
        if (v64) {
          CFDictionarySetValue((CFMutableDictionaryRef)v61, IDSMessageContextExpectsPeerResponseKey, v64);
        }

        id v65 = *(id *)(a1 + 128);
        if (v65) {
          CFDictionarySetValue((CFMutableDictionaryRef)v61, IDSMessageContextWantsAppAckKey, v65);
        }

        id v66 = *(id *)(a1 + 40);
        if (v66) {
          CFDictionarySetValue((CFMutableDictionaryRef)v61, IDSMessageContextStorageGuidKey, v66);
        }

        id v67 = *(id *)(a1 + 136);
        if (v67) {
          CFDictionarySetValue((CFMutableDictionaryRef)v61, IDSMessageContextCommandContextKey, v67);
        }

        id v68 = *(id *)(a1 + 144);
        if (v68) {
          CFDictionarySetValue((CFMutableDictionaryRef)v61, IDSMessageContextOriginalCommandKey, v68);
        }

        uint64_t v69 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 152) prefixedURI]);
        if (v69) {
          CFDictionarySetValue((CFMutableDictionaryRef)v61, IDSMessageContextToIDKey, v69);
        }

        id v70 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 160) dictionaryRepresentation]);
        if (v70) {
          CFDictionarySetValue((CFMutableDictionaryRef)v61, IDSMessageContextTargettedPseudonymKey, v70);
        }

        id v71 = *(id *)(a1 + 168);
        if (v71) {
          CFDictionarySetValue((CFMutableDictionaryRef)v61, IDSMessageContextFromServerStorageKey, v71);
        }

        id v72 = *(id *)(a1 + 176);
        if (v72) {
          CFDictionarySetValue((CFMutableDictionaryRef)v61, IDSMessageContextEngramGroupIDKey, v72);
        }

        uint64_t v73 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithDouble:]( &OBJC_CLASS___NSNumber,  "numberWithDouble:",  *(double *)(a1 + 272)));
        if (v73) {
          CFDictionarySetValue((CFMutableDictionaryRef)v61, IDSMessageContextServerTimestampKey, v73);
        }

        id v74 = v59;
        if (v74) {
          CFDictionarySetValue((CFMutableDictionaryRef)v61, IDSMessageContextOriginalTimestampKey, v74);
        }

        id v75 = *(id *)(a1 + 80);
        if (v75) {
          CFDictionarySetValue((CFMutableDictionaryRef)v61, IDSMessageContextSenderCorrelationIdentifierKey, v75);
        }

        id v76 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) prefixedURI]);
        if (v76) {
          CFDictionarySetValue((CFMutableDictionaryRef)v61, IDSMessageContextFromIDKey, v76);
        }

        uint64_t v77 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 152) prefixedURI]);
        if (v77) {
          CFDictionarySetValue((CFMutableDictionaryRef)v61, IDSMessageContextToIDKey, v77);
        }

        id v78 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 96) dictionaryRepresentation]);
        if (v78) {
          CFDictionarySetValue((CFMutableDictionaryRef)v61, IDSMessageContextCertifiedDeliveryContextKey, v78);
        }

        id v79 = *(id *)(a1 + 136);
        if (v79) {
          CFDictionarySetValue((CFMutableDictionaryRef)v61, IDSMessageContextPublicIntentActionKey, v79);
        }

        id v80 = *(id *)(a1 + 32);
        if (v80) {
          CFDictionarySetValue((CFMutableDictionaryRef)v61, IDSMessageContextOriginalGUIDKey, v80);
        }

        id v81 = *(id *)(a1 + 184);
        if (v81) {
          CFDictionarySetValue((CFMutableDictionaryRef)v61, IDSMessageContextServiceIdentifierKey, v81);
        }

        uint64_t v82 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v60));
        if (v82) {
          CFDictionarySetValue((CFMutableDictionaryRef)v61, IDSMessageContextIsFromTrustedSender, v82);
        }

        if ([*(id *)(a1 + 48) _processNonMessagingPayloadWithCommand:*(void *)(*(void *)(*(void *)(a1 + 256) + 8) + 40) dictionaryPayload:v7 senderPushToken:*(void *)(a1 + 192) topic:*(void *)(a1 + 184) toURI:*(void *)(a1 + 152) fromU RI:*(void *)(a1 + 64) peerResponseIdentifier:*(void *)(a1 + 112) guid:*(void *)(a1 + 40) service:*(void *)(a1 + 72) idsMessageContext:v61 messageContext:*(void *)(a1 + 200)])
        {
          state.opaque[1] = 0xAAAAAAAAAAAAAAAALL;
          uint64_t v114 = _os_activity_create( (void *)&_mh_execute_header,  "Not broadcasting command",  (os_activity_t)&_os_activity_current,  OS_ACTIVITY_FLAG_DEFAULT);
          state.opaque[0] = 0xAAAAAAAAAAAAAAAALL;
          os_activity_scope_enter(v114, &state);
          uint64_t v83 = OSLogHandleForIDSCategory("IDSDaemon");
          id v84 = (os_log_s *)objc_claimAutoreleasedReturnValue(v83);
          if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
          {
            unsigned int v85 = *(const __CFString **)(a1 + 144);
            id v86 = *(const __CFString **)(a1 + 56);
            id v87 = *(const __CFString **)(a1 + 40);
            *(_DWORD *)buf = 138412802;
            uint64_t v140 = v85;
            __int16 v141 = 2112;
            id v142 = v86;
            __int16 v143 = 2112;
            uint64_t v144 = v87;
            _os_log_impl( (void *)&_mh_execute_header,  v84,  OS_LOG_TYPE_DEFAULT,  "Shouldn't broadcast for this command %@ for received message %@ with guid %@",  buf,  0x20u);
          }

          if (os_log_shim_legacy_logging_enabled(v88)
            && _IDSShouldLog(0LL, @"IDSDaemon"))
          {
            uint64_t v107 = *(void *)(a1 + 56);
            uint64_t v110 = *(void *)(a1 + 40);
            uint64_t v104 = *(void *)(a1 + 144);
            _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Shouldn't broadcast for this command %@ for received message %@ with guid %@");
          }

          +[IDSDMessageStore deleteIncomingMessageWithGUID:]( &OBJC_CLASS___IDSDMessageStore,  "deleteIncomingMessageWithGUID:",  *(void *)(a1 + 40),  v104,  v107,  v110);
          os_activity_scope_leave(&state);
          cut_arc_os_release(&v114);
        }

        else
        {
          v120[0] = _NSConcreteStackBlock;
          v120[1] = 3221225472LL;
          v120[2] = sub_10037FBAC;
          v120[3] = &unk_100902638;
          id v121 = v61;
          id v122 = *(id *)(a1 + 32);
          id v123 = *(id *)(a1 + 192);
          id v124 = *(id *)(a1 + 64);
          id v89 = *(id *)(a1 + 208);
          uint64_t v90 = *(void *)(a1 + 48);
          id v125 = v89;
          uint64_t v126 = v90;
          id v127 = *(id *)(a1 + 152);
          __int128 v136 = *(_OWORD *)(a1 + 256);
          id v128 = *(id *)(a1 + 184);
          id v129 = *(id *)(a1 + 72);
          id v130 = *(id *)(a1 + 40);
          id v131 = *(id *)(a1 + 216);
          id v132 = *(id *)(a1 + 56);
          id v133 = *(id *)(a1 + 224);
          id v91 = v7;
          id v134 = v91;
          id v135 = *(id *)(a1 + 200);
          id v92 = objc_retainBlock(v120);
          v115[0] = _NSConcreteStackBlock;
          v115[1] = 3221225472LL;
          v115[2] = sub_100382220;
          v115[3] = &unk_100902660;
          id v116 = *(id *)(a1 + 232);
          uint64_t v93 = v92;
          id v118 = v93;
          id v117 = v91;
          __int128 v119 = *(_OWORD *)(a1 + 240);
          id v94 = objc_retainBlock(v115);
          ((void (*)(void))v94[2])();
        }

LABEL_129:
        goto LABEL_130;
      }

      if (v7) {
        uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKey:@"##payload-data##"]);
      }
      else {
        uint64_t v20 = 0LL;
      }
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 240) + 8LL) + 40LL), v20);
      if (!v7)
      {
LABEL_25:

        id v7 = 0LL;
        goto LABEL_26;
      }
    }

    goto LABEL_25;
  }

  uint64_t v9 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = *(const __CFString **)(a1 + 32);
    *(_DWORD *)buf = 138412546;
    uint64_t v140 = v11;
    __int16 v141 = 2112;
    id v142 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "IDSBlastDoor: Received an error from blastdoor for message %@, dropping message %@",  buf,  0x16u);
  }

  if (os_log_shim_legacy_logging_enabled(v12) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    uint64_t v102 = *(void *)(a1 + 32);
    uint64_t v105 = v8;
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"IDSBlastDoor: Received an error from blastdoor for message %@, dropping message %@");
  }

  +[IDSDMessageStore deleteIncomingMessageWithGUID:]( &OBJC_CLASS___IDSDMessageStore,  "deleteIncomingMessageWithGUID:",  *(void *)(a1 + 40),  v102,  v105);
LABEL_130:
}

void sub_10037FA40( _Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, os_activity_scope_state_s state, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, char a25)
{
  if (a2 == 1)
  {
    objc_begin_catch(exception_object);
    objc_end_catch();
    JUMPOUT(0x10037F9C8LL);
  }

  _Unwind_Resume(exception_object);
}

void sub_10037FB6C(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) replayStateCommitter]);
  [v2 commitStateForKey:*(void *)(a1 + 40)];
}

void sub_10037FBAC(uint64_t a1, void *a2)
{
  id v109 = a2;
  uint64_t v3 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v5 = *(void **)(a1 + 32);
    uint64_t v6 = *(void **)(a1 + 40);
    *(_DWORD *)buf = 138412546;
    id v163 = v5;
    __int16 v164 = 2112;
    id v165 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEBUG,  "Broadcast will include message context %@, identifier %@",  buf,  0x16u);
  }

  if (os_log_shim_legacy_logging_enabled(v7) && _IDSShouldLog(1LL, @"IDSDaemon"))
  {
    uint64_t v100 = *(void *)(a1 + 32);
    uint64_t v103 = *(void *)(a1 + 40);
    _IDSLogV( 1LL,  @"IDSFoundation",  @"IDSDaemon",  @"Broadcast will include message context %@, identifier %@");
  }

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "rawToken", v100, v103));
  if ([v8 length])
  {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) prefixedURI]);
    if ([v9 length])
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) rawToken]);
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) prefixedURI]);
      uint64_t v12 = (void *)_IDSCopyIDForTokenWithURI(v10, v11);
      id v13 = (id)objc_claimAutoreleasedReturnValue( +[IDSURI URIWithPrefixedURI:withServiceLoggingHint:]( &OBJC_CLASS___IDSURI,  "URIWithPrefixedURI:withServiceLoggingHint:",  v12,  *(void *)(a1 + 64)));
    }

    else
    {
      id v13 = 0LL;
    }
  }

  else
  {
    id v13 = 0LL;
  }

  id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 72) serviceController]);
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 serviceWithIdentifier:*(void *)(a1 + 64)]);

  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
  char v108 = (void *)objc_claimAutoreleasedReturnValue([v16 accountsOnService:v15]);

  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v17 accountsOnService:v15 withType:0]);
  int v19 = (void *)objc_claimAutoreleasedReturnValue([v18 firstObject]);

  uint64_t v20 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412802;
    id v163 = v15;
    __int16 v164 = 2112;
    id v165 = v108;
    __int16 v166 = 2112;
    double v167 = v19;
    _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Found Topic %@  with all accounts %@ and Going to use account %@",  buf,  0x20u);
  }

  if (os_log_shim_legacy_logging_enabled(v22) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    uint64_t v104 = v108;
    id v106 = v19;
    uint64_t v101 = v15;
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Found Topic %@  with all accounts %@ and Going to use account %@");
  }

  uint64_t v23 = *(void **)(a1 + 72);
  uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 80), "prefixedURI", v101, v104, v106));
  LODWORD(v23) = [v23 shouldProxyMessageForService:v15 toIdentifier:v24];

  if ((_DWORD)v23)
  {
    uint64_t v25 = OSLogHandleForIDSCategory("IDSDaemon");
    unsigned int v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "Forwarding Message To Local Device to Process and Broadcast",  buf,  2u);
    }

    if (os_log_shim_legacy_logging_enabled(v27) && _IDSShouldLog(0LL, @"IDSDaemon")) {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Forwarding Message To Local Device to Process and Broadcast");
    }
    unsigned __int8 v28 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    id v29 = *(id *)(*(void *)(*(void *)(a1 + 152) + 8LL) + 40LL);
    if (v29) {
      CFDictionarySetValue((CFMutableDictionaryRef)v28, IDSCommandKey, v29);
    }

    id v30 = *(id *)(*(void *)(*(void *)(a1 + 160) + 8LL) + 40LL);
    if (v30) {
      CFDictionarySetValue((CFMutableDictionaryRef)v28, IDSProxyTopLevelPayloadKey, v30);
    }

    id v31 = *(id *)(a1 + 40);
    if (v31) {
      CFDictionarySetValue((CFMutableDictionaryRef)v28, IDSProxyGuidKey, v31);
    }

    id v32 = v109;
    if (v32) {
      CFDictionarySetValue((CFMutableDictionaryRef)v28, IDSProxyPayloadKey, v32);
    }

    id v33 = *(id *)(a1 + 88);
    if (v33) {
      CFDictionarySetValue((CFMutableDictionaryRef)v28, IDSProxyTopicKey, v33);
    }

    id v34 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 80) prefixedURI]);
    if (v34) {
      CFDictionarySetValue((CFMutableDictionaryRef)v28, IDSProxyToIDKey, v34);
    }

    unsigned int v35 = (void *)objc_claimAutoreleasedReturnValue([v13 prefixedURI]);
    if (v35) {
      CFDictionarySetValue((CFMutableDictionaryRef)v28, IDSProxyFromIDKey, v35);
    }

    +[NSDate timeIntervalSinceReferenceDate](&OBJC_CLASS___NSDate, "timeIntervalSinceReferenceDate");
    uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
    if (v36) {
      CFDictionarySetValue((CFMutableDictionaryRef)v28, IDSProxyForwardedTimeKey, v36);
    }

    id v37 = objc_alloc_init(&OBJC_CLASS___IDSSendParameters);
    [v37 setMessage:v28];
    [v37 setLocalDelivery:1];
    id v38 = (void *)objc_claimAutoreleasedReturnValue([v19 uniqueID]);
    [v37 setAccountUUID:v38];

    [v37 setPriority:300];
    [v37 setTimeout:172800.0];
    id v39 = IDSDefaultPairedDevice;
    uint64_t v40 = -[NSSet initWithObjects:](objc_alloc(&OBJC_CLASS___NSSet), "initWithObjects:", v39, 0LL);
    uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDestination destinationWithStrings:]( &OBJC_CLASS___IDSDestination,  "destinationWithStrings:",  v40));
    [v37 setDestinations:v41];

    double v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 229LL));
    [v37 setCommand:v42];

    uint64_t v43 = OSLogHandleForIDSCategory("IDSDaemon");
    uint64_t v44 = (os_log_s *)objc_claimAutoreleasedReturnValue(v43);
    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEFAULT,  "About To Send Message Over Local Link",  buf,  2u);
    }

    [v19 sendMessageWithSendParameters:v37 willSendBlock:&stru_100902550 completionBlock:&stru_100902570];
  }

  if ([*(id *)(a1 + 96) watchOnlyService])
  {
    uint64_t v46 = OSLogHandleForIDSCategory("IDSDaemon");
    uint64_t v47 = (os_log_s *)objc_claimAutoreleasedReturnValue(v46);
    if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_DEFAULT,  "We received a message on a service that is local only, we have kicked off a forwarding of the message if necessa ry, we can delete this message from our database",  buf,  2u);
    }

    if (os_log_shim_legacy_logging_enabled(v48) && _IDSShouldLog(0LL, @"IDSDaemon")) {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"We received a message on a service that is local only, we have kicked off a forwarding of the message if necessary, we can delete this message from our database");
    }
    +[IDSDMessageStore deleteIncomingMessageWithGUID:]( &OBJC_CLASS___IDSDMessageStore,  "deleteIncomingMessageWithGUID:",  *(void *)(a1 + 104));
  }

  if (*(void *)(a1 + 112))
  {
    uint64_t v49 = *(void *)(*(void *)(a1 + 152) + 8LL);
    uint64_t v50 = *(void **)(v49 + 40);
    *(void *)(v49 + 40) = &off_100947D70;
  }

  uint64_t v51 = (uint64_t)[*(id *)(*(void *)(*(void *)(a1 + 152) + 8) + 40) integerValue];
  if (v51 > 241)
  {
    switch(v51)
    {
      case 242LL:
        v158[0] = _NSConcreteStackBlock;
        v158[1] = 3221225472LL;
        v158[2] = sub_100381710;
        v158[3] = &unk_100902308;
        uint64_t v73 = (id *)v158;
        void v158[4] = v109;
        v158[5] = *(id *)(a1 + 104);
        v158[6] = *(id *)(a1 + 88);
        id v159 = *(id *)(a1 + 80);
        id v160 = v13;
        id v161 = *(id *)(a1 + 32);
        uint64_t v56 = objc_retainBlock(v158);

        goto LABEL_96;
      case 243LL:
        v128[0] = _NSConcreteStackBlock;
        v128[1] = 3221225472LL;
        v128[2] = sub_100381DCC;
        v128[3] = &unk_100902308;
        id v129 = v109;
        id v130 = *(id *)(a1 + 104);
        id v131 = *(id *)(a1 + 88);
        id v132 = *(id *)(a1 + 80);
        id v133 = v13;
        id v134 = *(id *)(a1 + 32);
        uint64_t v56 = objc_retainBlock(v128);

        id v64 = &v129;
        id v65 = &v130;
        id v66 = &v131;
        id v67 = (unsigned int *)&kIDSListenerCapConsumesLaunchOnDemandIncomingProtobuf;
        goto LABEL_108;
      case 244LL:
        goto LABEL_84;
      case 245LL:
        [*(id *)(a1 + 72) _processIncomingRemoteResourceTransferMessage:*(void *)(*(void *)(*(void *)(a1 + 160) + 8) + 40) forceDownload:0 guid:*(void *)(a1 + 104) context:*(void *)(a1 + 32) specificOriginatorURI:v13 broadcastTopic:*(void *)(a1 + 88)  toURI:*(void *)(a1 + 80) topic:*(void *)(a1 + 64) messageContext:*(void *)(a1 + 144)];
        goto LABEL_118;
      case 246LL:
      case 247LL:
        uint64_t v52 = OSLogHandleForIDSCategory("IDSDaemon");
        uint64_t v53 = (os_log_s *)objc_claimAutoreleasedReturnValue(v52);
        if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_DEFAULT,  "Broadcasting Incoming Invitation Message top",  buf,  2u);
        }

        if (os_log_shim_legacy_logging_enabled(v54)
          && _IDSShouldLog(0LL, @"IDSDaemon"))
        {
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Broadcasting Incoming Invitation Message top");
        }

        v142[0] = _NSConcreteStackBlock;
        v142[1] = 3221225472LL;
        v142[2] = sub_10038193C;
        v142[3] = &unk_100902308;
        unsigned int v55 = (id *)v142;
        void v142[4] = *(id *)(a1 + 136);
        void v142[5] = *(id *)(a1 + 104);
        v142[6] = *(id *)(a1 + 64);
        id v143 = *(id *)(a1 + 80);
        id v144 = v13;
        id v145 = *(id *)(a1 + 32);
        uint64_t v56 = objc_retainBlock(v142);

        goto LABEL_77;
      case 248LL:
      case 249LL:
        uint64_t v61 = OSLogHandleForIDSCategory("IDSDaemon");
        id v62 = (os_log_s *)objc_claimAutoreleasedReturnValue(v61);
        if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v62,  OS_LOG_TYPE_DEFAULT,  "Broadcasting Incoming Invitation Update Message top",  buf,  2u);
        }

        if (os_log_shim_legacy_logging_enabled(v63)
          && _IDSShouldLog(0LL, @"IDSDaemon"))
        {
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Broadcasting Incoming Invitation Update Message top");
        }

        v138[0] = _NSConcreteStackBlock;
        v138[1] = 3221225472LL;
        v138[2] = sub_100381A28;
        v138[3] = &unk_100902308;
        unsigned int v55 = (id *)v138;
        v138[4] = *(id *)(a1 + 136);
        v138[5] = *(id *)(a1 + 104);
        v138[6] = *(id *)(a1 + 64);
        id v139 = *(id *)(a1 + 80);
        id v140 = v13;
        id v141 = *(id *)(a1 + 32);
        uint64_t v56 = objc_retainBlock(v138);

LABEL_77:
        id v64 = v55 + 4;
        id v65 = v55 + 5;
        id v66 = v55 + 6;
        id v67 = (unsigned int *)&kIDSListenerCapConsumesLaunchOnDemandInvitationUpdates;
        goto LABEL_108;
      case 250LL:
        uint64_t v74 = OSLogHandleForIDSCategory("IDSDaemon");
        id v75 = (os_log_s *)objc_claimAutoreleasedReturnValue(v74);
        if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v75,  OS_LOG_TYPE_DEFAULT,  "Broadcasting HomeKit Message top",  buf,  2u);
        }

        if (os_log_shim_legacy_logging_enabled(v76)
          && _IDSShouldLog(0LL, @"IDSDaemon"))
        {
          _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon", @"Broadcasting HomeKit Message top");
        }

        v154[0] = _NSConcreteStackBlock;
        v154[1] = 3221225472LL;
        v154[2] = sub_100381724;
        v154[3] = &unk_100902308;
        uint64_t v73 = (id *)v154;
        v154[4] = v109;
        v154[5] = *(id *)(a1 + 104);
        v154[6] = *(id *)(a1 + 88);
        id v155 = *(id *)(a1 + 80);
        id v156 = v13;
        id v157 = *(id *)(a1 + 32);
        uint64_t v56 = objc_retainBlock(v154);

LABEL_96:
        id v64 = v73 + 4;
        id v65 = v73 + 5;
        id v66 = v73 + 6;
        id v67 = (unsigned int *)&kIDSListenerCapConsumesLaunchOnDemandIncomingData;
        goto LABEL_108;
      case 251LL:
        uint64_t v77 = OSLogHandleForIDSCategory("IDSDaemon");
        id v78 = (os_log_s *)objc_claimAutoreleasedReturnValue(v77);
        if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v78,  OS_LOG_TYPE_DEFAULT,  "Broadcasting HomeKit Report Message top",  buf,  2u);
        }

        if (os_log_shim_legacy_logging_enabled(v79)
          && _IDSShouldLog(0LL, @"IDSDaemon"))
        {
          _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon", @"Broadcasting HomeKit Report Message top");
        }

        v146[0] = _NSConcreteStackBlock;
        v146[1] = 3221225472LL;
        v146[2] = sub_100381810;
        v146[3] = &unk_1009022E0;
        id v147 = *(id *)(a1 + 128);
        id v148 = *(id *)(a1 + 56);
        id v149 = *(id *)(a1 + 80);
        id v150 = *(id *)(a1 + 104);
        id v151 = *(id *)(a1 + 64);
        id v152 = v13;
        id v153 = *(id *)(a1 + 32);
        uint64_t v56 = objc_retainBlock(v146);

        id v64 = &v147;
        id v65 = &v148;
        id v66 = &v149;
        id v67 = (unsigned int *)&kIDSListenerCapConsumesLaunchOnDemandAccessoryReportMessages;
        goto LABEL_108;
      default:
        if (v51 != 315) {
          goto LABEL_84;
        }
        uint64_t v68 = OSLogHandleForIDSCategory("IDSDaemon");
        uint64_t v69 = (os_log_s *)objc_claimAutoreleasedReturnValue(v68);
        if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
        {
          id v70 = *(void **)(a1 + 120);
          *(_DWORD *)buf = 138412290;
          id v163 = v70;
          _os_log_impl( (void *)&_mh_execute_header,  v69,  OS_LOG_TYPE_DEFAULT,  "Got a message of type FTCommandIDEngramEncryptedMessage -- dropping, this is not supported {message: %@}",  buf,  0xCu);
        }

        if (os_log_shim_legacy_logging_enabled(v71)
          && _IDSShouldLog(0LL, @"IDSDaemon"))
        {
          uint64_t v102 = *(void *)(a1 + 120);
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Got a message of type FTCommandIDEngramEncryptedMessage -- dropping, this is not supported {message: %@}");
        }

        goto LABEL_118;
    }
  }

  switch(v51)
  {
    case 120LL:
      if (([v15 wantsRemoteErrors] & 1) == 0
        && ![*(id *)(a1 + 64) isEqualToIgnoringCase:@"com.apple.madrid"])
      {
        uint64_t v83 = OSLogHandleForIDSCategory("Warning");
        id v84 = (os_log_s *)objc_claimAutoreleasedReturnValue(v83);
        if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR))
        {
          unsigned int v85 = *(void **)(a1 + 104);
          id v86 = *(void **)(a1 + 88);
          *(_DWORD *)buf = 138412546;
          id v163 = v85;
          __int16 v164 = 2112;
          id v165 = v86;
          _os_log_impl( (void *)&_mh_execute_header,  v84,  OS_LOG_TYPE_ERROR,  "Received IDS remote error (120) for client that can not hanlde it %@ %@",  buf,  0x16u);
        }

        if (os_log_shim_legacy_logging_enabled(v87))
        {
          _IDSWarnV( @"IDSFoundation",  @"Received IDS remote error (120) for client that can not hanlde it %@ %@");
          _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"Received IDS remote error (120) for client that can not hanlde it %@ %@");
          uint64_t v102 = *(void *)(a1 + 104);
          uint64_t v105 = *(void *)(a1 + 88);
          _IDSLogTransport( @"Warning",  @"IDS",  @"Received IDS remote error (120) for client that can not hanlde it %@ %@");
        }

        goto LABEL_118;
      }

      v122[0] = _NSConcreteStackBlock;
      v122[1] = 3221225472LL;
      v122[2] = sub_100381F44;
      v122[3] = &unk_1009025E8;
      uint64_t v126 = *(void *)(a1 + 160);
      id v72 = (id *)v122;
      v122[4] = *(id *)(a1 + 104);
      v122[5] = v109;
      v122[6] = *(id *)(a1 + 88);
      id v123 = *(id *)(a1 + 80);
      id v124 = v13;
      id v125 = *(id *)(a1 + 32);
      uint64_t v56 = objc_retainBlock(v122);

      break;
    case 121LL:
      v127[0] = _NSConcreteStackBlock;
      v127[1] = 3221225472LL;
      v127[2] = sub_100381DE0;
      v127[3] = &unk_1008F7C28;
      id v72 = (id *)v127;
      v127[4] = *(id *)(a1 + 136);
      v127[5] = *(id *)(a1 + 56);
      v127[6] = *(id *)(a1 + 32);
      uint64_t v56 = objc_retainBlock(v127);
      break;
    case 153LL:
      uint64_t v57 = OSLogHandleForIDSCategory("IDSDaemon");
      id v58 = (os_log_s *)objc_claimAutoreleasedReturnValue(v57);
      if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v58,  OS_LOG_TYPE_DEFAULT,  "Broadcasting GroupShare Message top",  buf,  2u);
      }

      id v60 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDGroupContextController sharedInstance]( &OBJC_CLASS___IDSDGroupContextController,  "sharedInstance"));
      v135[0] = _NSConcreteStackBlock;
      v135[1] = 3221225472LL;
      v135[2] = sub_100381B14;
      v135[3] = &unk_1009025C0;
      id v136 = v109;
      id v137 = *(id *)(a1 + 104);
      [v60 groupContextForProtectionSpace:0 withCompletion:v135];

      goto LABEL_118;
    default:
LABEL_84:
      if ([*(id *)(*(void *)(*(void *)(a1 + 152) + 8) + 40) integerValue] == (id)227
        && ![v109 count])
      {
        uint64_t v88 = OSLogHandleForIDSCategory("Warning");
        id v89 = (os_log_s *)objc_claimAutoreleasedReturnValue(v88);
        if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR))
        {
          uint64_t v90 = *(void **)(a1 + 104);
          id v91 = *(void **)(a1 + 88);
          *(_DWORD *)buf = 138412546;
          id v163 = v90;
          __int16 v164 = 2112;
          id v165 = v91;
          _os_log_impl( (void *)&_mh_execute_header,  v89,  OS_LOG_TYPE_ERROR,  "Received IDS message payload is empty, not delivering %@ %@",  buf,  0x16u);
        }

        if (os_log_shim_legacy_logging_enabled(v92))
        {
          _IDSWarnV(@"IDSFoundation", @"Received IDS message payload is empty, not delivering %@ %@");
          _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"Received IDS message payload is empty, not delivering %@ %@");
          uint64_t v102 = *(void *)(a1 + 104);
          uint64_t v105 = *(void *)(a1 + 88);
          _IDSLogTransport( @"Warning",  @"IDS",  @"Received IDS message payload is empty, not delivering %@ %@");
        }

        goto LABEL_118;
      }

      v117[0] = _NSConcreteStackBlock;
      v117[1] = 3221225472LL;
      v117[2] = sub_100381F80;
      v117[3] = &unk_1009025E8;
      uint64_t v121 = *(void *)(a1 + 160);
      id v72 = (id *)v117;
      v117[4] = *(id *)(a1 + 104);
      v117[5] = v109;
      v117[6] = *(id *)(a1 + 88);
      id v118 = *(id *)(a1 + 80);
      id v119 = v13;
      id v120 = *(id *)(a1 + 32);
      uint64_t v56 = objc_retainBlock(v117);

      break;
  }

  id v64 = v72 + 4;
  id v65 = v72 + 5;
  id v66 = v72 + 6;
  id v67 = (unsigned int *)&kIDSListenerCapConsumesLaunchOnDemandIncomingMessages;
LABEL_108:
  uint64_t v80 = *v67;

  if (v56)
  {
    id v81 = *(void **)(a1 + 72);
    v112[0] = _NSConcreteStackBlock;
    v112[1] = 3221225472LL;
    v112[2] = sub_100381FBC;
    v112[3] = &unk_100902610;
    id v113 = *(id *)(a1 + 104);
    id v114 = *(id *)(a1 + 88);
    id v115 = *(id *)(a1 + 64);
    uint64_t v82 = v56;
    id v116 = v82;
    [v81 enqueueBroadcast:v112 forTopic:*(void *)(a1 + 88) entitlement:kIDSMessagingEntitlement command:*(void *)(*(void *)(*(void *)(a1 + 152) + 8) + 40) capabilities:v80 messageContext:*(void *)(a1 + 144)];

    goto LABEL_125;
  }

void sub_100381468(id a1, NSArray *a2, NSArray *a3, NSDictionary *a4)
{
  uint64_t v6 = a2;
  uint64_t v7 = a3;
  uint64_t v8 = a4;
  uint64_t v9 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "PROXY: Will Send Block", v12, 2u);
  }
}

void sub_10038155C(id a1, IDSDeliveryContext *a2)
{
  id v2 = a2;
  uint64_t v3 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = -[IDSDeliveryContext idsResponseCode](v2, "idsResponseCode");
    id v6 = (id)objc_claimAutoreleasedReturnValue(-[IDSDeliveryContext responseError](v2, "responseError"));
    unsigned int v7 = -[IDSDeliveryContext lastCall](v2, "lastCall");
    uint64_t v8 = @"NO";
    *(_DWORD *)buf = 134218498;
    id v12 = v5;
    __int16 v13 = 2112;
    if (v7) {
      uint64_t v8 = @"YES";
    }
    id v14 = v6;
    __int16 v15 = 2112;
    uint64_t v16 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "PROXY: Completion Block %ld, %@, %@",  buf,  0x20u);
  }

  if (os_log_shim_legacy_logging_enabled(v9) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    -[IDSDeliveryContext idsResponseCode](v2, "idsResponseCode");
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDeliveryContext responseError](v2, "responseError"));
    -[IDSDeliveryContext lastCall](v2, "lastCall");
    _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon", @"PROXY: Completion Block %ld, %@, %@");
  }
}

id sub_100381710(void *a1, void *a2)
{
  return [a2 dataReceived:a1[4] withGUID:a1[5] forTopic:a1[6] toURI:a1[7] fromURI:a1[8] context:a1[9]];
}

void sub_100381724(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = OSLogHandleForIDSCategory("IDSDaemon");
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unsigned int v7 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Broadcasting HomeKit Message brodcast block",  v7,  2u);
  }

  [v3 accessoryDataReceived:a1[4] withGUID:a1[5] forTopic:a1[6] toURI:a1[7] fromURI:a1[8] context:a1[9]];
}

void sub_100381810(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = OSLogHandleForIDSCategory("IDSDaemon");
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Broadcasting HomeKit Report Message brodcast block",  buf,  2u);
  }

  if (os_log_shim_legacy_logging_enabled(v6) && _IDSShouldLog(0LL, @"IDSDaemon")) {
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Broadcasting HomeKit Report Message brodcast block");
  }
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) prefixedURI]);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) prefixedURI]);
  [v3 accessoryReportMessageReceived:v7 accessoryID:v8 controllerID:v9 withGUID:*(void *)(a1 + 56) forTopic:*(void *)(a1 + 64) toURI:*(void *)(a1 + 48) fromURI:*(void *)(a1 + 72) context:*(void *)(a1 + 80)];
}

void sub_10038193C(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = OSLogHandleForIDSCategory("IDSDaemon");
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Broadcasting Incoming Invitation Message block",  v7,  2u);
  }

  [v3 incomingInvitation:a1[4] withGUID:a1[5] forTopic:a1[6] toURI:a1[7] fromURI:a1[8] context:a1[9]];
}

void sub_100381A28(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = OSLogHandleForIDSCategory("IDSDaemon");
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Broadcasting Incoming Invitation Update Message block",  v7,  2u);
  }

  if (os_log_shim_legacy_logging_enabled(v6) && _IDSShouldLog(0LL, @"IDSDaemon")) {
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Broadcasting Incoming Invitation Update Message block");
  }
  [v3 incomingInvitationUpdate:a1[4] withGUID:a1[5] forTopic:a1[6] toURI:a1[7] fromURI:a1[8] context:a1[9]];
}

void sub_100381B14(uint64_t a1, void *a2)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_100381BAC;
  v5[3] = &unk_100902598;
  id v6 = a2;
  uint64_t v3 = *(void *)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  id v4 = v6;
  [v4 _groupFromPublicDataRepresentation:v3 completion:v5];
}

void sub_100381BAC(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (v5 && !a3)
  {
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog groupCrypto](&OBJC_CLASS___IDSFoundationLog, "groupCrypto"));
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 groupID]);
      *(_DWORD *)buf = 138543362;
      __int16 v13 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Received Sent Ahead Group {groupID: %{public}@}",  buf,  0xCu);
    }

    uint64_t v8 = *(void **)(a1 + 32);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_100381CF0;
    v9[3] = &unk_1008FA978;
    id v10 = v5;
    id v11 = *(id *)(a1 + 40);
    [v8 cacheIncomingGroup:v10 completion:v9];
  }
}

void sub_100381CF0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog groupCrypto](&OBJC_CLASS___IDSFoundationLog, "groupCrypto"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = 138543619;
    id v7 = v3;
    __int16 v8 = 2113;
    uint64_t v9 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Cached Sent Ahead Group {error: %{public}@, group: %{private}@}",  (uint8_t *)&v6,  0x16u);
  }

  +[IDSDMessageStore deleteIncomingMessageWithGUID:]( &OBJC_CLASS___IDSDMessageStore,  "deleteIncomingMessageWithGUID:",  *(void *)(a1 + 40));
}

id sub_100381DCC(void *a1, void *a2)
{
  return [a2 protobufReceived:a1[4] withGUID:a1[5] forTopic:a1[6] toURI:a1[7] fromURI:a1[8] context:a1[9]];
}

void sub_100381DE0(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v18 = (id)objc_claimAutoreleasedReturnValue([v3 objectForKey:@"d"]);
  uint64_t v6 = objc_opt_class(&OBJC_CLASS___NSString, v5);
  char isKindOfClass = objc_opt_isKindOfClass(v18, v6);
  if ((isKindOfClass & 1) != 0)
  {
    __int16 v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:@"d"]);
    uint64_t v9 = objc_claimAutoreleasedReturnValue(+[NSData _IDSDataFromBase64String:](&OBJC_CLASS___NSData, "_IDSDataFromBase64String:", v8));
LABEL_5:
    __int16 v13 = (void *)v9;
    char v14 = isKindOfClass ^ 1;
    goto LABEL_7;
  }

  __int16 v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:@"d"]);
  uint64_t v12 = objc_opt_class(&OBJC_CLASS___NSData, v11);
  if ((objc_opt_isKindOfClass(v8, v12) & 1) != 0)
  {
    uint64_t v9 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:@"d"]);
    goto LABEL_5;
  }

  char v14 = 0;
  __int16 v13 = 0LL;
LABEL_7:
  uint64_t v15 = objc_opt_class(&OBJC_CLASS___NSString, v10);
  id v16 = sub_10028D3BC(v15, *(void **)(a1 + 32), @"i");
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
  [v4 opportunisticDataReceived:v13 withIdentifier:v17 fromURI:*(void *)(a1 + 40) context:*(void *)(a1 + 48)];

  if ((v14 & 1) != 0) {
  if ((isKindOfClass & 1) != 0)
  }
}

id sub_100381F44(void *a1, void *a2)
{
  return [a2 messageReceived:*(void *)(*(void *)(a1[10] + 8) + 40) withGUID:a1[4] withPayload:a1[5] forTopic:a1[6] toURI:a1[7] fromURI:a1[8] context:a1[9]];
}

id sub_100381F80(void *a1, void *a2)
{
  return [a2 messageReceived:*(void *)(*(void *)(a1[10] + 8) + 40) withGUID:a1[4] withPayload:a1[5] forTopic:a1[6] toURI:a1[7] fromURI:a1[8] context:a1[9]];
}

void sub_100381FBC(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = a1[4];
    uint64_t v7 = a1[5];
    uint64_t v8 = a1[6];
    *(_DWORD *)buf = 138543874;
    uint64_t v20 = v6;
    __int16 v21 = 2114;
    uint64_t v22 = v7;
    __int16 v23 = 2114;
    uint64_t v24 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Broadcasting for received message with guid %{public}@   broadcast topic: %{public}@  (topic: %{public}@)",  buf,  0x20u);
  }

  if (os_log_shim_legacy_logging_enabled(v9) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    uint64_t v18 = a1[6];
    __int128 v17 = *((_OWORD *)a1 + 2);
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Broadcasting for received message with guid %{public}@   broadcast topic: %{public}@  (topic: %{public}@)");
  }

  if (v3)
  {
    (*(void (**)(void, id, uint64_t))(a1[7] + 16LL))(a1[7], v3, v10);
  }

  else
  {
    uint64_t v11 = OSLogHandleForIDSCategory("Warning");
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = a1[4];
      uint64_t v14 = a1[5];
      *(_DWORD *)buf = 138412546;
      uint64_t v20 = v13;
      __int16 v21 = 2112;
      uint64_t v22 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "No broadcaster found - deleting incoming message %@ on topic %@ with no listeners",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v15))
    {
      _IDSWarnV( @"IDSFoundation",  @"No broadcaster found - deleting incoming message %@ on topic %@ with no listeners");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"No broadcaster found - deleting incoming message %@ on topic %@ with no listeners");
      __int128 v17 = *((_OWORD *)a1 + 2);
      *(void *)&double v16 = _IDSLogTransport( @"Warning",  @"IDS",  @"No broadcaster found - deleting incoming message %@ on topic %@ with no listeners").n128_u64[0];
    }

    +[IDSDMessageStore deleteIncomingMessageWithGUID:]( &OBJC_CLASS___IDSDMessageStore,  "deleteIncomingMessageWithGUID:",  a1[4],  v16,  v17,  v18);
  }
}

void sub_100382220(uint64_t a1)
{
  if ([*(id *)(a1 + 32) count])
  {
    __int128 v15 = 0u;
    __int128 v16 = 0u;
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    id v2 = *(id *)(a1 + 32);
    id v3 = (char *)[v2 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v3)
    {
      uint64_t v4 = *(void *)v14;
      do
      {
        for (i = 0LL; i != v3; ++i)
        {
          if (*(void *)v14 != v4) {
            objc_enumerationMutation(v2);
          }
          uint64_t v6 = OSLogHandleForIDSCategory("IDSDaemon");
          uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
          if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Processing bulked payload ...", buf, 2u);
          }

          if (os_log_shim_legacy_logging_enabled(v8))
          {
          }

          (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
        }

        id v3 = (char *)[v2 countByEnumeratingWithState:&v13 objects:v17 count:16];
      }

      while (v3);
    }
  }

  else
  {
    id v9 = *(id *)(a1 + 40);
    uint64_t v10 = v9;
    if (!v9)
    {
      id v9 = *(id *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
      uint64_t v10 = v9;
      if (!v9) {
        uint64_t v10 = *(void **)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL);
      }
    }

    id v11 = v10;

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

uint64_t sub_100382474(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1003824B4(uint64_t a1, void *a2, char a3, char a4)
{
  id v7 = a2;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_100382560;
  v10[3] = &unk_100902778;
  id v8 = *(id *)(a1 + 32);
  id v11 = v7;
  id v12 = v8;
  char v14 = a3;
  char v15 = a4;
  uint64_t v13 = *(void *)(a1 + 40);
  id v9 = v7;
  im_dispatch_after_primary_queue(v10, 30.0);
}

void sub_100382560(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id v3 = *(void **)(v2 + 40);
  *(void *)(v2 + 40) = 0LL;
}

id sub_100382904(void *a1, void *a2)
{
  return _[a2 pendingIncomingMessageWithGUID:a1[4] forTopic:a1[5] toURI:a1[6] fromURI:a1[7] context:a1[8]];
}

void sub_100382918(void *a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    (*(void (**)(void))(a1[6] + 16LL))();
  }

  else
  {
    uint64_t v4 = OSLogHandleForIDSCategory("Warning");
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = a1[4];
      uint64_t v7 = a1[5];
      *(_DWORD *)buf = 138412546;
      uint64_t v10 = v6;
      __int16 v11 = 2112;
      uint64_t v12 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "No broadcaster found - dropping update for incoming pending message %@ on topic %@ with no listeners",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v8))
    {
      _IDSWarnV( @"IDSFoundation",  @"No broadcaster found - dropping update for incoming pending message %@ on topic %@ with no listeners");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"No broadcaster found - dropping update for incoming pending message %@ on topic %@ with no listeners");
      _IDSLogTransport( @"Warning",  @"IDS",  @"No broadcaster found - dropping update for incoming pending message %@ on topic %@ with no listeners");
    }
  }
}

id sub_100383408(void *a1, void *a2)
{
  return _[a2 pendingResourceWithMetadata:a1[4] guid:a1[5] forTopic:a1[6] toURI:a1[7] fromURI:a1[8] context:a1[9]];
}

void sub_10038341C(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = a1[4];
    uint64_t v7 = a1[5];
    uint64_t v8 = a1[6];
    *(_DWORD *)buf = 138543874;
    uint64_t v20 = v6;
    __int16 v21 = 2114;
    uint64_t v22 = v7;
    __int16 v23 = 2114;
    uint64_t v24 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Broadcasting for pending Resource with guid %{public}@   broadcast topic: %{public}@  (topic: %{public}@)",  buf,  0x20u);
  }

  if (os_log_shim_legacy_logging_enabled(v9) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    uint64_t v18 = a1[6];
    __int128 v17 = *((_OWORD *)a1 + 2);
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Broadcasting for pending Resource with guid %{public}@   broadcast topic: %{public}@  (topic: %{public}@)");
  }

  if (v3)
  {
    (*(void (**)(void, id, uint64_t))(a1[7] + 16LL))(a1[7], v3, v10);
  }

  else
  {
    uint64_t v11 = OSLogHandleForIDSCategory("Warning");
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = a1[4];
      uint64_t v14 = a1[5];
      *(_DWORD *)buf = 138412546;
      uint64_t v20 = v13;
      __int16 v21 = 2112;
      uint64_t v22 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "No broadcaster found - deleting incoming message %@ on topic %@ with no listeners",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v15))
    {
      _IDSWarnV( @"IDSFoundation",  @"No broadcaster found - deleting incoming message %@ on topic %@ with no listeners");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"No broadcaster found - deleting incoming message %@ on topic %@ with no listeners");
      __int128 v17 = *((_OWORD *)a1 + 2);
      *(void *)&double v16 = _IDSLogTransport( @"Warning",  @"IDS",  @"No broadcaster found - deleting incoming message %@ on topic %@ with no listeners").n128_u64[0];
    }

    +[IDSDMessageStore deleteIncomingMessageWithGUID:]( &OBJC_CLASS___IDSDMessageStore,  "deleteIncomingMessageWithGUID:",  a1[4],  v16,  v17,  v18);
  }
}

void sub_100383680(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5, void *a6)
{
  id v40 = a2;
  id v42 = a3;
  id v10 = a5;
  id v41 = a6;
  uint64_t v11 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    id v57 = v42;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "File Has Been Downloaded to %@", buf, 0xCu);
  }

  uint64_t v14 = os_log_shim_legacy_logging_enabled(v13);
  if ((_DWORD)v14)
  {
    uint64_t v14 = _IDSShouldLog(0LL, @"IDSDaemon");
    if ((_DWORD)v14) {
      uint64_t v14 = _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon", @"File Has Been Downloaded to %@");
    }
  }

  uint64_t v16 = CSDBGetMobileUserDirectory(v14, v15);
  if (v16) {
    __int128 v17 = (__CFString *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v16));
  }
  else {
    __int128 v17 = @"~";
  }
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:",  v17,  @"/Library/IdentityServices/files/",  *(void *)(a1 + 32),  0LL));
  int v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSString pathWithComponents:](&OBJC_CLASS___NSString, "pathWithComponents:", v18));

  if (v16) {
  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  }
  id v55 = v10;
  [v20 createDirectoryAtPath:v19 withIntermediateDirectories:1 attributes:0 error:&v55];
  id v39 = v55;

  id v21 = sub_100351920(v42, v19);
  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
  if (v22)
  {
    __int16 v23 = (__CFDictionary *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
    id v24 = v22;
    uint64_t v25 = (void *)sandbox_extension_issue_file( "com.apple.identityservices.deliver",  [v24 UTF8String],  0);
    if (v25)
    {
      unsigned int v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v25));
      if (v26) {
        CFDictionarySetValue(v23, IDSMessageResourceTransferSandboxExtensionKey, v26);
      }

      free(v25);
    }

    else
    {
      uint64_t v27 = OSLogHandleForIDSCategory("FTMessageDelivery");
      unsigned __int8 v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        id v57 = v24;
        _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "Failed to issue sandbox extension for file [%@]",  buf,  0xCu);
      }

      if (os_log_shim_legacy_logging_enabled(v29))
      {
        if (MarcoShouldLog(@"IDSAgent")) {
          MarcoLog( 0LL,  @"IDSAgent",  @"SocketPairMessage",  @"Failed to issue sandbox extension for file [%@]");
        }
        if (IMShouldLog(@"IDS", 0LL)) {
          IMLogString( 0LL,  @"IDS",  @"IDSAgent",  @"FTMessageDelivery",  @"Failed to issue sandbox extension for file [%@]");
        }
      }
    }

    CFDictionarySetValue(v23, IDSMessageResourceTransferURLKey, v24);
    id v30 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKey:@"attach-meta"]);
    if (v30) {
      CFDictionarySetValue(v23, IDSMessageResourceTransferMetadataKey, v30);
    }

    id v31 = [*(id *)(a1 + 48) mutableCopy];
    [v31 addEntriesFromDictionary:v23];
    v48[0] = _NSConcreteStackBlock;
    v48[1] = 3221225472LL;
    v48[2] = sub_100383C80;
    v48[3] = &unk_100902308;
    uint64_t v49 = v23;
    id v50 = *(id *)(a1 + 32);
    id v51 = *(id *)(a1 + 56);
    id v52 = *(id *)(a1 + 64);
    id v53 = *(id *)(a1 + 72);
    id v54 = v31;
    id v38 = v31;
    id v32 = v23;
    id v33 = objc_retainBlock(v48);
    id v34 = *(void **)(a1 + 80);
    v43[0] = _NSConcreteStackBlock;
    v43[1] = 3221225472LL;
    v43[2] = sub_100383CB4;
    v43[3] = &unk_100902610;
    id v44 = *(id *)(a1 + 32);
    id v45 = *(id *)(a1 + 56);
    id v46 = *(id *)(a1 + 88);
    id v47 = v33;
    uint64_t v35 = *(void *)(a1 + 56);
    uint64_t v36 = v33;
    id v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 245LL));
    [v34 enqueueBroadcast:v43 forTopic:v35 entitlement:kIDSMessagingEntitlement command:v37 capabilities:kIDSListenerCapConsumesLaunchOnDemandIncomingResource messageContext:*(void *)(a1 + 96)];
  }

  else
  {
    +[IDSDMessageStore deleteIncomingMessageWithGUID:]( &OBJC_CLASS___IDSDMessageStore,  "deleteIncomingMessageWithGUID:",  *(void *)(a1 + 32));
  }
}

id sub_100383C80(void *a1, void *a2)
{
  return [a2 messageReceived:a1[4] withGUID:a1[5] withPayload:a1[4] forTopic:a1[6] toURI:a1[7] fromURI:a1[8] context:a1[9]];
}

void sub_100383CB4(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = a1[4];
    uint64_t v7 = a1[5];
    uint64_t v8 = a1[6];
    *(_DWORD *)buf = 138543874;
    uint64_t v20 = v6;
    __int16 v21 = 2114;
    uint64_t v22 = v7;
    __int16 v23 = 2114;
    uint64_t v24 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Broadcasting for received message with guid %{public}@   broadcast topic: %{public}@  (topic: %{public}@)",  buf,  0x20u);
  }

  if (os_log_shim_legacy_logging_enabled(v9) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    uint64_t v18 = a1[6];
    __int128 v17 = *((_OWORD *)a1 + 2);
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Broadcasting for received message with guid %{public}@   broadcast topic: %{public}@  (topic: %{public}@)");
  }

  if (v3)
  {
    (*(void (**)(void, id, uint64_t))(a1[7] + 16LL))(a1[7], v3, v10);
  }

  else
  {
    uint64_t v11 = OSLogHandleForIDSCategory("Warning");
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = a1[4];
      uint64_t v14 = a1[5];
      *(_DWORD *)buf = 138412546;
      uint64_t v20 = v13;
      __int16 v21 = 2112;
      uint64_t v22 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "No broadcaster found - deleting incoming message %@ on topic %@ with no listeners",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v15))
    {
      _IDSWarnV( @"IDSFoundation",  @"No broadcaster found - deleting incoming message %@ on topic %@ with no listeners");
      _IDSLogV( 0LL,  @"IDSFoundation",  @"Warning",  @"No broadcaster found - deleting incoming message %@ on topic %@ with no listeners");
      __int128 v17 = *((_OWORD *)a1 + 2);
      *(void *)&double v16 = _IDSLogTransport( @"Warning",  @"IDS",  @"No broadcaster found - deleting incoming message %@ on topic %@ with no listeners").n128_u64[0];
    }

    +[IDSDMessageStore deleteIncomingMessageWithGUID:]( &OBJC_CLASS___IDSDMessageStore,  "deleteIncomingMessageWithGUID:",  a1[4],  v16,  v17,  v18);
  }
}

void sub_1003844BC(_Unwind_Exception *a1)
{
}

void sub_100384528(uint64_t a1, void *a2, char a3)
{
  id v5 = a2;
  uint64_t v6 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412546;
    id v17 = v5;
    __int16 v18 = 2112;
    uint64_t v19 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Storing item from server storage %@  (%@)",  buf,  0x16u);
  }

  if ((a3 & 1) == 0)
  {
    uint64_t v11 = OSLogHandleForIDSCategory("Warning");
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412546;
      id v17 = v5;
      __int16 v18 = 2112;
      uint64_t v19 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "Persisting failed for message %@  (%@)",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v14))
    {
      _IDSWarnV(@"IDSFoundation", @"Persisting failed for message %@  (%@)");
      _IDSLogV(0LL, @"IDSFoundation", @"Warning", @"Persisting failed for message %@  (%@)");
      *(void *)&double v10 = _IDSLogTransport( @"Warning",  @"IDS",  @"Persisting failed for message %@  (%@)").n128_u64[0];
    }
  }

  uint64_t v15 = *(void **)(a1 + 40);
  if (*(_BYTE *)(a1 + 56)) {
    objc_msgSend(v15, "_noteLastItemFromStorage:", v5, v10);
  }
  else {
    objc_msgSend(v15, "_noteItemFromStorage:", v5, v10);
  }
}

id sub_100384B54(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _storageTimerFired];
}

void sub_100384F88(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDMessageStore sharedInstance](&OBJC_CLASS___IDSDMessageStore, "sharedInstance"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 deleteExpiredIncomingRestrictedMessagesOlderThan:*(double *)(a1 + 40)]);

  uint64_t v4 = OSLogHandleForIDSCategory("IDSDaemon");
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    uint64_t v13 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Calling replay commit for expired incoming messages %@",  buf,  0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v6) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    uint64_t v11 = v3;
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Calling replay commit for expired incoming messages %@");
  }

  objc_msgSend(*(id *)(a1 + 32), "_callReplayCommitBlockForIncomingMessages:", v3, v11);
  uint64_t v7 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void **)(*(void *)(a1 + 32) + 480LL);
    *(_DWORD *)buf = 138412290;
    uint64_t v13 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Replay key map state: %@", buf, 0xCu);
  }
}

id sub_100385358(uint64_t a1)
{
  return [*(id *)(a1 + 32) _restrictedMessageCleanupTimerFired];
}

void sub_1003856A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3)
  {
    [v3 checkTransportLogWithReason:0];
  }

  else
  {
    uint64_t v5 = OSLogHandleForIDSCategory("IDSDaemon");
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      uint64_t v10 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Failed to hint service to check transport log {service: %@, reason: connected}",  buf,  0xCu);
    }

    if (os_log_shim_legacy_logging_enabled(v8) && _IDSShouldLog(0LL, @"IDSDaemon")) {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Failed to hint service to check transport log {service: %@, reason: connected}");
    }
  }
}

BOOL sub_100385EE8(id a1, id a2)
{
  id v2 = a2;
  uint64_t v4 = objc_opt_class(&OBJC_CLASS___NSDictionary, v3);
  char isKindOfClass = objc_opt_isKindOfClass(v2, v4);

  return isKindOfClass & 1;
}

void sub_1003866B0(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) serviceController]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 serviceWithPushTopic:*(void *)(a1 + 40)]);

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 appleIDAccountOnService:v3]);

  if ([v5 isRegistered])
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 prefixedURIStringsFromRegistration]);
    uint64_t v7 = objc_claimAutoreleasedReturnValue([v6 firstObject]);

    uint64_t v8 = (void *)v7;
  }

  else
  {
    uint64_t v8 = 0LL;
  }

  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void **)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  __int16 v23 = v8;
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[IDSURI URIWithPrefixedURI:withServiceLoggingHint:]( &OBJC_CLASS___IDSURI,  "URIWithPrefixedURI:withServiceLoggingHint:"));
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[IDSURI URIWithPrefixedURI:withServiceLoggingHint:]( &OBJC_CLASS___IDSURI,  "URIWithPrefixedURI:withServiceLoggingHint:",  *(void *)(a1 + 64),  *(void *)(a1 + 40)));
  LOBYTE(v9) = [v10 _processNonMessagingPayloadWithCommand:v11 dictionaryPayload:v12 senderPushToken:0 topic:v9 toURI:v13 f romURI:v14 peerResponseIdentifier:0 guid:0 service:v3 idsMessageContext:0 messageContext:0];

  if ((v9 & 1) == 0)
  {
    uint64_t v15 = OSLogHandleForTransportCategory("IDSDaemon");
    double v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = *(void *)(a1 + 40);
      uint64_t v18 = *(void *)(a1 + 48);
      uint64_t v20 = *(void *)(a1 + 56);
      uint64_t v19 = *(void *)(a1 + 64);
      *(_DWORD *)buf = 138544131;
      uint64_t v25 = v17;
      __int16 v26 = 2114;
      uint64_t v27 = v18;
      __int16 v28 = 2113;
      uint64_t v29 = v19;
      __int16 v30 = 2113;
      uint64_t v31 = v20;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Received a message over Bonjour Delivery that we can't process! -- dropping {service: %{public}@, command: %{pub lic}@, deviceID: %{private}@, message: %{private}@}",  buf,  0x2Au);
    }

    uint64_t v22 = os_log_shim_legacy_logging_enabled(v21);
    if ((_DWORD)v22)
    {
      if (_IDSShouldLogTransport(v22))
      {
        _IDSLogTransport( @"IDSDaemon",  @"IDS",  @"Received a message over Bonjour Delivery that we can't process! -- dropping {service: %{public}@, command: %{public}@, deviceID: %{private}@, message: %{private}@}");
        if (_IDSShouldLog(0LL, @"IDSDaemon")) {
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Received a message over Bonjour Delivery that we can't process! -- dropping {service: %{public}@, command: %{public}@, deviceID: %{private}@, message: %{private}@}");
        }
      }
    }
  }
}

void sub_10038700C(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  uint64_t v6 = OSLogHandleForTransportCategory("IDSDaemon");
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412802;
    uint64_t v12 = v8;
    __int16 v13 = 2112;
    id v14 = v5;
    __int16 v15 = 1024;
    int v16 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Stored incoming message under first lock for service %@ with guid %@. Success: %d",  buf,  0x1Cu);
  }

  uint64_t v10 = os_log_shim_legacy_logging_enabled(v9);
  if ((_DWORD)v10)
  {
    if (_IDSShouldLogTransport(v10))
    {
      _IDSLogTransport( @"IDSDaemon",  @"IDS",  @"Stored incoming message under first lock for service %@ with guid %@. Success: %d");
      if (_IDSShouldLog(0LL, @"IDSDaemon")) {
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Stored incoming message under first lock for service %@ with guid %@. Success: %d");
      }
    }
  }
}

void sub_1003876A4(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) serviceController]);
  id v3 = (id)objc_claimAutoreleasedReturnValue([v2 serviceWithPushTopic:*(void *)(a1 + 40)]);

  objc_msgSend( *(id *)(a1 + 32),  "_ackMessageWithSequenceNumber:forDeviceID:priority:dataProtectionClass:connectionType:guid:",  objc_msgSend(*(id *)(a1 + 48), "unsignedIntValue"),  *(void *)(a1 + 56),  *(void *)(a1 + 72),  objc_msgSend(v3, "dataProtectionClass"),  *(void *)(a1 + 80),  *(void *)(a1 + 64));
}

void sub_100387740(uint64_t a1)
{
  id v2 = (id *)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) serviceController]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 serviceWithPushTopic:*(void *)(a1 + 40)]);

  if (![*v2 _shouldStoreBeforeFirstUnlockIncomingLocalMessage:*(void *)(a1 + 48) from:*(void *)(a1 + 56) forTopic:*(void *)(a1 + 40)])
  {
    if (sub_100351824( (char)[v4 shouldProtectTrafficUsingClassA],  (int)objc_msgSend(v4, "dataProtectionClass"),  *(void **)(a1 + 40)))
    {
      id v5 = *(void **)(a1 + 32);
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 88) data]);
      uint64_t v7 = *(void *)(a1 + 40);
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPairingManager sharedInstance](&OBJC_CLASS___IDSPairingManager, "sharedInstance"));
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 pairedDeviceUniqueID]);
      id v40 = 0LL;
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v5 _decryptAOverCMessage:v6 topic:v7 fromDeviceID:v9 error:&v40]);
      id v11 = v40;

      if (!v10)
      {
        uint64_t v19 = OSLogHandleForIDSCategory("IDSDaemon");
        uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v21 = *(void *)(a1 + 40);
          *(_DWORD *)buf = 138412546;
          uint64_t v42 = v21;
          __int16 v43 = 2112;
          id v44 = v11;
          _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "Failed to decrypt AoverC message -- dropping {topic: %@, error: %@}",  buf,  0x16u);
        }

        uint64_t v23 = os_log_shim_legacy_logging_enabled(v22);
        if ((_DWORD)v23)
        {
          uint64_t v23 = _IDSShouldLog(0LL, @"IDSDaemon");
          if ((_DWORD)v23) {
            uint64_t v23 = _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Failed to decrypt AoverC message -- dropping {topic: %@, error: %@}");
          }
        }

        uint64_t v25 = im_primary_queue(v23, v24);
        __int16 v26 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v25);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472LL;
        block[2] = sub_100387B18;
        block[3] = &unk_100902450;
        void block[4] = *(void *)(a1 + 32);
        id v34 = *(id *)(a1 + 64);
        id v27 = *(id *)(a1 + 72);
        uint64_t v28 = *(void *)(a1 + 104);
        id v35 = v27;
        uint64_t v38 = v28;
        id v29 = v4;
        uint64_t v30 = *(void *)(a1 + 112);
        id v36 = v29;
        uint64_t v39 = v30;
        id v37 = *(id *)(a1 + 80);
        dispatch_block_t v31 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, block);
        dispatch_async(v26, v31);

        goto LABEL_7;
      }

      [*(id *)(a1 + 88) setData:v10];
    }

    uint64_t v12 = *(void **)(a1 + 32);
    id v11 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 88) dictionaryRepresentation]);
    uint64_t v13 = *(void *)(a1 + 96);
    uint64_t v14 = *(void *)(a1 + 72);
    uint64_t v15 = *(void *)(a1 + 56);
    uint64_t v16 = *(void *)(a1 + 40);
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectForKey:@"IDSIncomingLocalMessageContext"]);
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", *(void *)(a1 + 104)));
    LOBYTE(v32) = *(_BYTE *)(a1 + 120);
    [v12 _processIncomingLocalMessage:v11 topic:v16 command:v13 deviceID:v14 btUUID:v15 context:v17 storedGUID:0 priority:v18 connectionType:*(void *)(a1 + 112) didWakeHint:v32];

LABEL_7:
    goto LABEL_8;
  }

  objc_msgSend( *(id *)(a1 + 32),  "_ackMessageWithSequenceNumber:forDeviceID:priority:dataProtectionClass:connectionType:guid:",  objc_msgSend(*(id *)(a1 + 64), "unsignedIntValue"),  *(void *)(a1 + 72),  *(void *)(a1 + 104),  objc_msgSend(v4, "dataProtectionClass"),  *(void *)(a1 + 112),  *(void *)(a1 + 80));
LABEL_8:
}

id sub_100387B18(uint64_t a1)
{
  return objc_msgSend( *(id *)(a1 + 32),  "_ackMessageWithSequenceNumber:forDeviceID:priority:dataProtectionClass:connectionType:guid:",  objc_msgSend(*(id *)(a1 + 40), "unsignedIntValue"),  *(void *)(a1 + 48),  *(void *)(a1 + 72),  objc_msgSend(*(id *)(a1 + 56), "dataProtectionClass"),  *(void *)(a1 + 80),  *(void *)(a1 + 64));
}

void sub_100388088(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) serviceController]);
  id v3 = (id)objc_claimAutoreleasedReturnValue([v2 serviceWithPushTopic:*(void *)(a1 + 40)]);

  objc_msgSend( *(id *)(a1 + 32),  "_ackMessageWithSequenceNumber:forDeviceID:priority:dataProtectionClass:connectionType:guid:",  objc_msgSend(*(id *)(a1 + 48), "unsignedIntValue"),  *(void *)(a1 + 56),  *(void *)(a1 + 72),  objc_msgSend(v3, "dataProtectionClass"),  *(void *)(a1 + 80),  *(void *)(a1 + 64));
}

void sub_100388124(uint64_t a1)
{
  id v2 = (id *)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) serviceController]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 serviceWithPushTopic:*(void *)(a1 + 40)]);

  if ([*v2 _shouldStoreBeforeFirstUnlockIncomingLocalMessage:*(void *)(a1 + 48) from:*(void *)(a1 + 56) forTopic:*(void *)(a1 + 40)])
  {
    objc_msgSend( *(id *)(a1 + 32),  "_ackMessageWithSequenceNumber:forDeviceID:priority:dataProtectionClass:connectionType:guid:",  objc_msgSend(*(id *)(a1 + 64), "unsignedIntValue"),  *(void *)(a1 + 72),  *(void *)(a1 + 104),  objc_msgSend(v4, "dataProtectionClass"),  *(void *)(a1 + 112),  *(void *)(a1 + 80));
  }

  else
  {
    int v5 = sub_100351824( (char)[v4 shouldProtectTrafficUsingClassA],  (int)objc_msgSend(v4, "dataProtectionClass"),  *(void **)(a1 + 40));
    uint64_t v6 = *(void *)(a1 + 88);
    uint64_t v8 = *(void **)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    if (v5)
    {
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPairingManager sharedInstance](&OBJC_CLASS___IDSPairingManager, "sharedInstance"));
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 pairedDeviceUniqueID]);
      id v46 = 0LL;
      id v11 = (void *)objc_claimAutoreleasedReturnValue([v8 _decryptAOverCMessage:v6 topic:v7 fromDeviceID:v10 error:&v46]);
      id v12 = v46;

      if (v11)
      {

        uint64_t v14 = *(void **)(a1 + 32);
        uint64_t v13 = *(void *)(a1 + 40);
        uint64_t v15 = *(void *)(a1 + 96);
        uint64_t v16 = *(void *)(a1 + 72);
        uint64_t v17 = *(void *)(a1 + 56);
        uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectForKey:@"IDSIncomingLocalMessageContext"]);
        uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( &OBJC_CLASS___NSNumber,  "numberWithInteger:",  *(void *)(a1 + 104)));
        LOBYTE(v3_Block_object_dispose(va, 8) = *(_BYTE *)(a1 + 120);
        [v14 _processIncomingLocalMessage:v11 topic:v13 command:v15 deviceID:v16 btUUID:v17 context:v18 storedGUID:0 priority:v19 connectionType:*(void *)(a1 + 112) didWakeHint:v38];
      }

      else
      {
        uint64_t v25 = OSLogHandleForIDSCategory("IDSDaemon");
        __int16 v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v27 = *(void *)(a1 + 40);
          *(_DWORD *)buf = 138412546;
          uint64_t v48 = v27;
          __int16 v49 = 2112;
          id v50 = v12;
          _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "Failed to decrypt AoverC message -- dropping {topic: %@, error: %@}",  buf,  0x16u);
        }

        uint64_t v29 = os_log_shim_legacy_logging_enabled(v28);
        if ((_DWORD)v29)
        {
          uint64_t v29 = _IDSShouldLog(0LL, @"IDSDaemon");
          if ((_DWORD)v29) {
            uint64_t v29 = _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Failed to decrypt AoverC message -- dropping {topic: %@, error: %@}");
          }
        }

        uint64_t v31 = im_primary_queue(v29, v30);
        uint64_t v32 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v31);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472LL;
        block[2] = sub_100388540;
        block[3] = &unk_100902450;
        void block[4] = *(void *)(a1 + 32);
        id v40 = *(id *)(a1 + 64);
        id v33 = *(id *)(a1 + 72);
        uint64_t v34 = *(void *)(a1 + 104);
        id v41 = v33;
        uint64_t v44 = v34;
        id v35 = v4;
        uint64_t v36 = *(void *)(a1 + 112);
        id v42 = v35;
        uint64_t v45 = v36;
        id v43 = *(id *)(a1 + 80);
        dispatch_block_t v37 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, block);
        dispatch_async(v32, v37);
      }
    }

    else
    {
      uint64_t v20 = *(void *)(a1 + 96);
      uint64_t v21 = *(void *)(a1 + 72);
      uint64_t v22 = *(void *)(a1 + 56);
      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectForKey:@"IDSIncomingLocalMessageContext"]);
      uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( &OBJC_CLASS___NSNumber,  "numberWithInteger:",  *(void *)(a1 + 104)));
      LOBYTE(v3_Block_object_dispose(va, 8) = *(_BYTE *)(a1 + 120);
      [v8 _processIncomingLocalMessage:v6 topic:v7 command:v20 deviceID:v21 btUUID:v22 context:v23 storedGUID:0 priority:v24 connectionType:*(void *)(a1 + 112) didWakeHint:v38];
    }
  }
}

id sub_100388540(uint64_t a1)
{
  return objc_msgSend( *(id *)(a1 + 32),  "_ackMessageWithSequenceNumber:forDeviceID:priority:dataProtectionClass:connectionType:guid:",  objc_msgSend(*(id *)(a1 + 40), "unsignedIntValue"),  *(void *)(a1 + 48),  *(void *)(a1 + 72),  objc_msgSend(*(id *)(a1 + 56), "dataProtectionClass"),  *(void *)(a1 + 80),  *(void *)(a1 + 64));
}

void sub_100388A84(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) serviceController]);
  id v3 = (id)objc_claimAutoreleasedReturnValue([v2 serviceWithPushTopic:*(void *)(a1 + 40)]);

  objc_msgSend( *(id *)(a1 + 32),  "_ackMessageWithSequenceNumber:forDeviceID:priority:dataProtectionClass:connectionType:guid:",  objc_msgSend(*(id *)(a1 + 48), "unsignedIntValue"),  *(void *)(a1 + 56),  *(void *)(a1 + 72),  objc_msgSend(v3, "dataProtectionClass"),  *(void *)(a1 + 80),  *(void *)(a1 + 64));
}

void sub_100388B20(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) serviceController]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 serviceWithPushTopic:*(void *)(a1 + 40)]);

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
  id v55 = (void *)objc_claimAutoreleasedReturnValue([v4 appleIDAccountOnService:v3]);

  int v5 = v55;
  if ([v55 isRegistered])
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v55 prefixedURIStringsFromRegistration]);
    id v53 = (void *)objc_claimAutoreleasedReturnValue([v6 firstObject]);

    int v5 = v55;
  }

  else
  {
    id v53 = 0LL;
  }

  uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue([v5 fromIDForCBUUID:*(void *)(a1 + 48) deviceID:*(void *)(a1 + 56)]);
  if (!v56)
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPairingManager sharedInstance](&OBJC_CLASS___IDSPairingManager, "sharedInstance"));
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 pairedDeviceUniqueID]);
    uint64_t v56 = (void *)_IDSCopyIDForDeviceUniqueID();
  }

  int v9 = sub_100351824( (char)[v3 shouldProtectTrafficUsingClassA],  (int)objc_msgSend(v3, "dataProtectionClass"),  *(void **)(a1 + 40));
  if ((v9 & 1) != 0) {
    goto LABEL_8;
  }
  uint64_t v10 = JWDecodeDictionary(*(void *)(a1 + 64));
  id v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  uint64_t v12 = *(void *)(a1 + 40);
  uint64_t v13 = *(void **)(a1 + 32);
  uint64_t v14 = *(void *)(a1 + 72);
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[IDSURI URIWithPrefixedURI:withServiceLoggingHint:]( &OBJC_CLASS___IDSURI,  "URIWithPrefixedURI:withServiceLoggingHint:",  v53,  v12));
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[IDSURI URIWithPrefixedURI:withServiceLoggingHint:]( &OBJC_CLASS___IDSURI,  "URIWithPrefixedURI:withServiceLoggingHint:",  v56,  *(void *)(a1 + 40)));
  LOBYTE(v13) = [v13 _processNonMessagingPayloadWithCommand:v14 dictionaryPayload:v11 senderPushToken:0 topic:v12 toURI:v15  fromURI:v16 peerResponseIdentifier:0 guid:0 service:v3 idsMessageContext:0 messageContext:0];

  if ((v13 & 1) == 0)
  {
LABEL_8:
    LOWORD(v50) = *(_WORD *)(a1 + 120);
    id v54 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(a1 + 32),  "_incomingMessageStorageDictionaryForPayload:topic:deviceID:btUUID:command:messageUUID:sequenceNumb er:wantsAppAck:expectsPeerResponse:peerResponseIdentifier:",  *(void *)(a1 + 64),  *(void *)(a1 + 40),  *(void *)(a1 + 56),  *(void *)(a1 + 48),  *(void *)(a1 + 72),  *(void *)(a1 + 80),  *(void *)(a1 + 88),  v50,  *(void *)(a1 + 96)));
    if ([*(id *)(a1 + 32) _shouldStoreBeforeFirstUnlockIncomingLocalMessage:v54 from:*(void *)(a1 + 48) forTopic:*(void *)(a1 + 40)])
    {
      objc_msgSend( *(id *)(a1 + 32),  "_ackMessageWithSequenceNumber:forDeviceID:priority:dataProtectionClass:connectionType:guid:",  objc_msgSend(*(id *)(a1 + 88), "unsignedIntValue"),  *(void *)(a1 + 56),  *(void *)(a1 + 104),  objc_msgSend(v3, "dataProtectionClass"),  *(void *)(a1 + 112),  *(void *)(a1 + 80));
LABEL_18:

      goto LABEL_19;
    }

    if (v9)
    {
      uint64_t v17 = *(void *)(a1 + 40);
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPairingManager sharedInstance](&OBJC_CLASS___IDSPairingManager, "sharedInstance"));
      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v18 pairedDeviceUniqueID]);
      unsigned int v20 = +[IDSEncryptionHelpers areDataProtectionKeysAvailableForService:withDataProtectionClass:fromDevice:]( &OBJC_CLASS___IDSEncryptionHelpers,  "areDataProtectionKeysAvailableForService:withDataProtectionClass:fromDevice:",  v17,  1LL,  v19);

      if (v20)
      {
        uint64_t v21 = *(void *)(a1 + 64);
        uint64_t v23 = *(void **)(a1 + 32);
        uint64_t v22 = *(void *)(a1 + 40);
        uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPairingManager sharedInstance](&OBJC_CLASS___IDSPairingManager, "sharedInstance"));
        uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v24 pairedDeviceUniqueID]);
        id v64 = 0LL;
        uint64_t v52 = objc_claimAutoreleasedReturnValue([v23 _decryptAOverCMessage:v21 topic:v22 fromDeviceID:v25 error:&v64]);
        id v26 = v64;

        if (!v52)
        {
          uint64_t v37 = OSLogHandleForIDSCategory("IDSDaemon");
          uint64_t v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
          if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v39 = *(void *)(a1 + 40);
            *(_DWORD *)buf = 138412546;
            uint64_t v66 = v39;
            __int16 v67 = 2112;
            id v68 = v26;
            _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEFAULT,  "Failed to decrypt AoverC message -- dropping {topic: %@, error: %@}",  buf,  0x16u);
          }

          uint64_t v41 = os_log_shim_legacy_logging_enabled(v40);
          if ((_DWORD)v41)
          {
            uint64_t v41 = _IDSShouldLog(0LL, @"IDSDaemon");
            if ((_DWORD)v41) {
              uint64_t v41 = _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Failed to decrypt AoverC message -- dropping {topic: %@, error: %@}");
            }
          }

          uint64_t v43 = im_primary_queue(v41, v42);
          uint64_t v44 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v43);
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472LL;
          block[2] = sub_1003890F8;
          block[3] = &unk_100902450;
          void block[4] = *(void *)(a1 + 32);
          id v58 = *(id *)(a1 + 88);
          id v45 = *(id *)(a1 + 56);
          uint64_t v46 = *(void *)(a1 + 104);
          id v59 = v45;
          uint64_t v62 = v46;
          id v47 = v3;
          uint64_t v48 = *(void *)(a1 + 112);
          id v60 = v47;
          uint64_t v63 = v48;
          id v61 = *(id *)(a1 + 80);
          dispatch_block_t v49 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, block);
          dispatch_async(v44, v49);

          goto LABEL_17;
        }

        uint64_t v27 = JWDecodeDictionary(v52);
        uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
      }

      else
      {
        uint64_t v52 = 0LL;
        uint64_t v28 = 0LL;
      }
    }

    else
    {
      uint64_t v29 = JWDecodeDictionary(*(void *)(a1 + 64));
      uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(v29);
      uint64_t v52 = 0LL;
    }

    uint64_t v30 = *(void **)(a1 + 32);
    uint64_t v31 = *(void *)(a1 + 40);
    uint64_t v32 = *(void *)(a1 + 72);
    uint64_t v34 = *(void *)(a1 + 48);
    uint64_t v33 = *(void *)(a1 + 56);
    id v35 = (void *)objc_claimAutoreleasedReturnValue([v54 objectForKey:@"IDSIncomingLocalMessageContext"]);
    uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", *(void *)(a1 + 104)));
    LOBYTE(v51) = *(_BYTE *)(a1 + 122);
    [v30 _processIncomingLocalMessage:v28 topic:v31 command:v32 deviceID:v33 btUUID:v34 context:v35 storedGUID:0 priority:v36 connectionType:*(void *)(a1 + 112) didWakeHint:v51];

    id v26 = (id)v52;
LABEL_17:

    goto LABEL_18;
  }

id sub_1003890F8(uint64_t a1)
{
  return objc_msgSend( *(id *)(a1 + 32),  "_ackMessageWithSequenceNumber:forDeviceID:priority:dataProtectionClass:connectionType:guid:",  objc_msgSend(*(id *)(a1 + 40), "unsignedIntValue"),  *(void *)(a1 + 48),  *(void *)(a1 + 72),  objc_msgSend(*(id *)(a1 + 56), "dataProtectionClass"),  *(void *)(a1 + 80),  *(void *)(a1 + 64));
}

void sub_1003893FC(uint64_t a1)
{
  if (([*(id *)(a1 + 32) _shouldStoreBeforeFirstUnlockIncomingLocalMessage:*(void *)(a1 + 40) from:*(void *)(a1 + 48) forTopic:*(void *)(a1 + 56)] & 1) == 0)
  {
    uint64_t v2 = *(void *)(a1 + 64);
    uint64_t v3 = *(void *)(a1 + 72);
    uint64_t v5 = *(void *)(a1 + 48);
    uint64_t v4 = *(void *)(a1 + 56);
    uint64_t v6 = *(void **)(a1 + 32);
    id v9 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKey:@"IDSIncomingLocalMessageContext"]);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", *(void *)(a1 + 80)));
    LOBYTE(v_Block_object_dispose(va, 8) = 0;
    [v6 _processIncomingLocalMessage:0 topic:v4 command:v2 deviceID:v3 btUUID:v5 context:v9 storedGUID:0 priority:v7 connectionType:*(void *)(a1 + 88) didWakeHint:v8];
  }

void sub_100389E50(_Unwind_Exception *a1)
{
}

void sub_100389E74(uint64_t a1, void *a2, void *a3, void *a4, int a5, int a6)
{
  id v11 = a2;
  id v12 = a3;
  id v13 = a4;
  if (a6)
  {
    uint64_t v14 = *(void **)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL);
    if (v14)
    {
      [v14 cancel];
      [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) _unpublish];
      uint64_t v15 = *(void *)(*(void *)(a1 + 64) + 8LL);
      uint64_t v16 = *(void **)(v15 + 40);
      *(void *)(v15 + 40) = 0LL;
    }

    goto LABEL_37;
  }

  id v17 = [v12 integerValue];
  uint64_t v18 = (uint64_t)[v13 integerValue];
  id v19 = (id)v18;
  if (!a5) {
    goto LABEL_11;
  }
  uint64_t v20 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL);
  if (v20 == -1) {
    goto LABEL_11;
  }
  if (*(void *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL) == -1LL || v17 == (id)v18) {
    goto LABEL_11;
  }
  uint64_t v61 = (uint64_t)v17 - v20;
  if (v61 < 0) {
    uint64_t v61 = -v61;
  }
  if ((unint64_t)v61 >> 7 >= 0x7D)
  {
    if (100 * v61 / v18)
    {
      [*(id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40) timeIntervalSinceNow];
      if (v62 <= -1.0)
      {
LABEL_11:
        uint64_t v22 = *(void **)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL);
        if (v22)
        {
          [v22 setByteTotalCount:v13];
          [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) setByteCompletedCount:v12];
        }

        else
        {
          id v68 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) message]);
          uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v68 objectForKeyedSubscript:IDSMessageResourceTransferOriginalURLKey]);
          if (v23)
          {
            uint64_t v24 = -[NSProgress initWithParent:userInfo:]( objc_alloc(&OBJC_CLASS___NSProgress),  "initWithParent:userInfo:",  0LL,  0LL);
            uint64_t v25 = *(void *)(*(void *)(a1 + 64) + 8LL);
            id v26 = *(void **)(v25 + 40);
            *(void *)(v25 + 40) = v24;

            [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) setTotalUnitCount:1];
            uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](&OBJC_CLASS___NSURL, "URLWithString:", v23));
            [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) setFileURL:v27];

            [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) setByteTotalCount:v13];
            [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) setByteCompletedCount:v12];
            [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) setKind:NSProgressKindFile];
            [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) setCancellable:0];
            [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) setPausable:0];
            [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) setFileOperationKind:NSProgressFileOperationKindCopying];
            uint64_t v28 = *(void **)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL);
            uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](&OBJC_CLASS___NSURL, "URLWithString:", v23));
            [v28 setUserInfoObject:v29 forKey:NSProgressFileURLKey];

            uint64_t v30 = *(void **)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL);
            uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
            [v30 setUserInfoObject:v31 forKey:IDSSendResourceProgressIdentifier];

            [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) _publish];
          }
        }

        if (v17 == v19)
        {
          uint64_t v32 = *(void **)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL);
          if (v32)
          {
            [v32 setCompletedUnitCount:1];
            [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) _unpublish];
            uint64_t v33 = *(void *)(*(void *)(a1 + 64) + 8LL);
            uint64_t v34 = *(void **)(v33 + 40);
            *(void *)(v33 + 40) = 0LL;
          }
        }

        *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL) = v17;
        *(void *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL) = v19;
        uint64_t v35 = objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        uint64_t v36 = *(void *)(*(void *)(a1 + 88) + 8LL);
        uint64_t v37 = *(void **)(v36 + 40);
        *(void *)(v36 + 40) = v35;

        uint64_t v38 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
        uint64_t v39 = (__CFDictionary *)v38;
        if (v12) {
          CFDictionarySetValue((CFMutableDictionaryRef)v38, IDSMessageContextBytesSent, v12);
        }
        if (v13) {
          CFDictionarySetValue(v39, IDSMessageContextTotalBytes, v13);
        }
        uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) localObject]);
        if (v40
          && (uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) localObject]),
              unsigned int v42 = [v41 isValid],
              v41,
              v40,
              v42))
        {
          uint64_t v43 = *(void **)(a1 + 48);
          uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) localObject]);
          id v45 = (IDSIncomingMessageBroadcast *)objc_claimAutoreleasedReturnValue( [v43 broadcasterForLocalObject:v44 messageContext:*(void *)(a1 + 40)]);

          if (!v45)
          {
LABEL_35:

            goto LABEL_36;
          }

          uint64_t v46 = OSLogHandleForIDSCategory("IDSDaemon");
          id v47 = (os_log_s *)objc_claimAutoreleasedReturnValue(v46);
          if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
          {
            id v48 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
            id v49 = [v11 idsResponseCode];
            uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue([v11 responseError]);
            *(_DWORD *)buf = 138413314;
            id v76 = v48;
            __int16 v77 = 2048;
            id v78 = v49;
            __int16 v79 = 2112;
            uint64_t v80 = v50;
            __int16 v81 = 2112;
            id v82 = v12;
            __int16 v83 = 2112;
            id v84 = v13;
            _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_DEFAULT,  "Sending update to listener on %@ with responseCode %ld error %@ - %@/%@ bytes",  buf,  0x34u);
          }

          if (os_log_shim_legacy_logging_enabled(v51)
            && _IDSShouldLog(0LL, @"IDSDaemon"))
          {
            uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
            id v66 = v12;
            id v67 = v13;
            id v64 = [v11 idsResponseCode];
            id v65 = (void *)objc_claimAutoreleasedReturnValue([v11 responseError]);
            uint64_t v63 = v52;
            _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Sending update to listener on %@ with responseCode %ld error %@ - %@/%@ bytes");
          }

          id v54 = *(void **)(a1 + 32);
          id v53 = (id *)(a1 + 32);
          id v55 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v54, "identifier", v63, v64, v65, v66, v67));
          uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue([*v53 alternateCallbackID]);
          id v57 = (void *)objc_claimAutoreleasedReturnValue([*v53 mainAccountUUID]);
          id v58 = [v11 idsResponseCode];
          id v59 = (void *)objc_claimAutoreleasedReturnValue([v11 responseError]);
          -[IDSIncomingMessageBroadcast messageIdentifier:alternateCallbackID:forAccount:updatedWithResponseCode:error:lastCall:context:]( v45,  "messageIdentifier:alternateCallbackID:forAccount:updatedWithResponseCode:error:lastCall:context:",  v55,  v56,  v57,  v58,  v59,  [v11 lastCall],  v39);
        }

        else
        {
          if (!*(void *)(a1 + 56))
          {
LABEL_36:

            goto LABEL_37;
          }

          id v45 = objc_alloc_init(&OBJC_CLASS___IDSIncomingMessageBroadcast);
          -[IDSIncomingMessageBroadcast setTransient:](v45, "setTransient:", 1LL);
          id v60 = *(void **)(a1 + 48);
          v69[0] = _NSConcreteStackBlock;
          v69[1] = 3221225472LL;
          v69[2] = sub_10038A5D0;
          v69[3] = &unk_1008F95A0;
          id v70 = *(id *)(a1 + 32);
          id v71 = v11;
          id v72 = v12;
          id v73 = v13;
          uint64_t v74 = v39;
          [v60 enqueueIncomingMessageBroadcast:v69 broadcastData:v45 forTopic:*(void *)(a1 + 56) entitlement:kIDSMessagingEntitlement command:0 capabilities:0 messageContext:0];

          id v55 = v70;
        }

        goto LABEL_35;
      }
    }
  }

void sub_10038A5D0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = OSLogHandleForIDSCategory("IDSDaemon");
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
      id v7 = [*(id *)(a1 + 40) idsResponseCode];
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) responseError]);
      uint64_t v9 = *(void *)(a1 + 48);
      uint64_t v10 = *(void *)(a1 + 56);
      *(_DWORD *)buf = 138413314;
      id v26 = v6;
      __int16 v27 = 2048;
      id v28 = v7;
      __int16 v29 = 2112;
      uint64_t v30 = v8;
      __int16 v31 = 2112;
      uint64_t v32 = v9;
      __int16 v33 = 2112;
      uint64_t v34 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Broadcasting update to listener on %@ with responseCode %ld error %@ %@/%@ bytes",  buf,  0x34u);
    }

    if (os_log_shim_legacy_logging_enabled(v11) && _IDSShouldLog(0LL, @"IDSDaemon"))
    {
      id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
      id v13 = [*(id *)(a1 + 40) idsResponseCode];
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) responseError]);
      uint64_t v23 = *(void *)(a1 + 48);
      uint64_t v24 = *(void *)(a1 + 56);
      id v21 = v13;
      uint64_t v22 = v14;
      uint64_t v20 = v12;
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDaemon",  @"Broadcasting update to listener on %@ with responseCode %ld error %@ %@/%@ bytes");
    }

    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "identifier", v20, v21, v22, v23, v24));
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) alternateCallbackID]);
    id v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) mainAccountUUID]);
    id v18 = [*(id *)(a1 + 40) idsResponseCode];
    id v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) responseError]);
    objc_msgSend( v3,  "messageIdentifier:alternateCallbackID:forAccount:updatedWithResponseCode:error:lastCall:context:",  v15,  v16,  v17,  v18,  v19,  objc_msgSend(*(id *)(a1 + 40), "lastCall"),  *(void *)(a1 + 64));
  }
}

void sub_10038B3D0(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) service]);
  uint64_t v3 = *(void *)(a1 + 64);
  uint64_t v5 = *(void **)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v2 identifier]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( v5,  "dequeueBroadcastWithID:forMessageUUID:service:priority:",  v3,  v4,  v6,  (int)objc_msgSend(*(id *)(a1 + 56), "intValue")));

  if (v7)
  {
    uint64_t v8 = *(void **)(a1 + 40);
    id v9 = [v7 messageSequenceNumber];
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v7 messageSenderID]);
    objc_msgSend( v8,  "_ackMessageWithSequenceNumber:forDeviceID:priority:dataProtectionClass:connectionType:guid:",  v9,  v10,  (int)objc_msgSend(*(id *)(a1 + 56), "intValue"),  objc_msgSend(v2, "dataProtectionClass"),  *(void *)(a1 + 72),  *(void *)(a1 + 48));

    uint64_t v11 = OSLogHandleForTransportCategory("IDSDaemon");
    id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = *(void *)(a1 + 48);
      uint64_t v14 = *(void *)(a1 + 64);
      *(_DWORD *)buf = 138412802;
      uint64_t v18 = v13;
      __int16 v19 = 2048;
      uint64_t v20 = v14;
      __int16 v21 = 1024;
      unsigned int v22 = [v7 messageSequenceNumber];
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Broadcast: message %@ got client ack, sending IDS ack to sender, broadcast ID %lld, sequence number %u \n",  buf,  0x1Cu);
    }

    uint64_t v16 = os_log_shim_legacy_logging_enabled(v15);
    if ((_DWORD)v16 && _IDSShouldLogTransport(v16))
    {
      [v7 messageSequenceNumber];
      _IDSLogTransport( @"IDSDaemon",  @"IDS",  @"Broadcast: message %@ got client ack, sending IDS ack to sender, broadcast ID %lld, sequence number %u \n");
    }
  }
}

void sub_10038BDE0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 lastCall])
  {
    uint64_t v4 = OSLogHandleForIDSCategory("IDSDaemon");
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      unsigned int v7 = [v3 lastCall];
      uint64_t v8 = @"NO";
      if (v7) {
        uint64_t v8 = @"YES";
      }
      *(_DWORD *)buf = 138412546;
      uint64_t v11 = v6;
      __int16 v12 = 2112;
      uint64_t v13 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Sent app-level ack with guid %@. Last call? %@",  buf,  0x16u);
    }

    if (os_log_shim_legacy_logging_enabled(v9) && _IDSShouldLog(0LL, @"IDSDaemon"))
    {
      [v3 lastCall];
      _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon", @"Sent app-level ack with guid %@. Last call? %@");
    }
  }
}

void sub_10038D4F8(_Unwind_Exception *a1)
{
}

uint64_t sub_10038D514(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = OSLogHandleForIDSCategory("IDSDaemon");
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v4 = [WeakRetained isFirewallOn];
    uint64_t v5 = @"NO";
    if (v4) {
      uint64_t v5 = @"YES";
    }
    *(_DWORD *)buf = 138412290;
    uint64_t v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Is firewall enabled %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v6) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    [WeakRetained isFirewallOn];
    _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon", @"Is firewall enabled %@");
  }

  uint64_t v7 = OSLogHandleForIDSCategory("IDSDaemon");
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = (__CFString *)objc_claimAutoreleasedReturnValue([WeakRetained[60] allValues]);
    *(_DWORD *)buf = 138412290;
    uint64_t v14 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Pending replay blocks for guids %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v10) && _IDSShouldLog(0LL, @"IDSDaemon"))
  {
    __int16 v12 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained[60] allValues]);
    _IDSLogV(0LL, @"IDSFoundation", @"IDSDaemon", @"Pending replay blocks for guids %@");
  }

  return 0LL;
}

void sub_10038D72C(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x10038D694LL);
  }

  _Unwind_Resume(a1);
}

void sub_10038D7A0(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___IDSAppleIDRegistrationCenter);
  uint64_t v2 = (void *)qword_1009C0C18;
  qword_1009C0C18 = (uint64_t)v1;
}

void sub_10038E294()
{
}

void sub_10038E690()
{
}

void sub_10038EC14()
{
}

void sub_10038EE3C()
{
}

void sub_10038F2B4()
{
}

void sub_10038F2E8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, os_activity_scope_state_s state, char a25)
{
}

void sub_10038F300(uint64_t a1, int a2)
{
  if (!a2) {
    sub_10038F304();
  }
  objc_terminate();
  -[IDSAppleIDRegistrationCenter _notifyAuthenticationSuccess:](v2, v3, v4);
}

void sub_10038F5E0()
{
}

void sub_10038F60C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, os_activity_scope_state_s state, char a23)
{
}

void sub_10038F624(uint64_t a1, int a2)
{
  if (!a2) {
    sub_10038F628();
  }
  objc_terminate();
  -[IDSAppleIDRegistrationCenter _postUserNotificationWithTitle:message:identifier:completionHandler:]( v2,  v3,  v4,  v5,  v6,  v7);
}

void sub_10038FE94( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
}

void sub_1003900A4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8, void *a9, char a10)
{
  id v14 = a5;
  id v15 = a6;
  id v16 = a7;
  id v17 = a8;
  id v18 = a9;
  __int16 v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v20 = *(void *)(a1 + 32);
    int v30 = 138412290;
    uint64_t v31 = v20;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Received auth token response for reg: %@",  (uint8_t *)&v30,  0xCu);
  }

  id v21 = [v18 integerValue];
  if (!v16 || (a10 & 1) != 0)
  {
    if (a10)
    {
      uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v30) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  " ** user cancelled, bailing",  (uint8_t *)&v30,  2u);
      }

      uint64_t v25 = *(void *)(a1 + 32);
      uint64_t v24 = *(void **)(a1 + 40);
      uint64_t v26 = 1LL;
      uint64_t v27 = 41LL;
      id v28 = 0LL;
    }

    else
    {
      if (v21 == (id)5103)
      {
        uint64_t v25 = *(void *)(a1 + 32);
        uint64_t v24 = *(void **)(a1 + 40);
        uint64_t v26 = 5103LL;
        uint64_t v27 = 34LL;
      }

      else if (v21 == (id)5100)
      {
        uint64_t v25 = *(void *)(a1 + 32);
        uint64_t v24 = *(void **)(a1 + 40);
        uint64_t v26 = 5100LL;
        uint64_t v27 = 33LL;
      }

      else
      {
        __int16 v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
        if (os_log_type_enabled(v29, OS_LOG_TYPE_FAULT)) {
          sub_1006A8900(v29);
        }

        uint64_t v25 = *(void *)(a1 + 32);
        uint64_t v24 = *(void **)(a1 + 40);
        uint64_t v26 = 1LL;
        uint64_t v27 = 17LL;
      }

      id v28 = v17;
    }

    [v24 _notifyAuthenticationFailure:v25 responseCode:v26 registrationError:v27 error:0 info:v28];
  }

  else
  {
    unsigned int v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v30) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  " We have a token, great!",  (uint8_t *)&v30,  2u);
    }

    [*(id *)(a1 + 40) _noteSuccessfulToken:v16 profileID:v14 selfID:v15 forRegistrationInfo:*(void *)(a1 + 32) wasFetched:0];
  }
}

void sub_100390508( uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, void *a6, void *a7, void *a8, void *a9)
{
  id v14 = a3;
  id v15 = a5;
  id v16 = a6;
  id v17 = a7;
  id v18 = a8;
  id v19 = a9;
  uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v21 = *(void *)(a1 + 32);
    int v38 = 138412290;
    uint64_t v39 = v21;
    _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "Token fetcher finished for registration info: %@",  (uint8_t *)&v38,  0xCu);
  }

  if (!v15) {
    id v15 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) profileID]);
  }
  if ([v15 length] && objc_msgSend(v17, "length"))
  {
    unsigned int v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v3_Block_object_dispose((const void *)(v1 - 128), 8) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  " We have a token, just sending auth",  (uint8_t *)&v38,  2u);
    }

    [*(id *)(a1 + 40) _noteSuccessfulToken:v17 profileID:v15 selfID:v16 forRegistrationInfo:*(void *)(a1 + 32) wasFetched:1];
  }

  else if ([v14 length])
  {
    uint64_t v23 = *(void *)(a1 + 48);
    if (v23) {
      (*(void (**)(void))(v23 + 16))();
    }
    if (v19)
    {
      id v24 = [v19 integerValue];
      if (v24 == (id)5103)
      {
        uint64_t v26 = *(void *)(a1 + 32);
        uint64_t v25 = *(void **)(a1 + 40);
        uint64_t v27 = 5103LL;
        uint64_t v28 = 34LL;
      }

      else
      {
        if (v24 != (id)5100) {
          goto LABEL_26;
        }
        uint64_t v26 = *(void *)(a1 + 32);
        uint64_t v25 = *(void **)(a1 + 40);
        uint64_t v27 = 5100LL;
        uint64_t v28 = 33LL;
      }

      [v25 _notifyAuthenticationFailure:v26 responseCode:v27 registrationError:v28 error:0 info:v18];
      goto LABEL_26;
    }

    uint64_t v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v3_Block_object_dispose((const void *)(v1 - 128), 8) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  " ** No token found, requesting it!",  (uint8_t *)&v38,  2u);
    }

    [*(id *)(a1 + 40) _renewTokenForRegistrationInfo:*(void *)(a1 + 32) forceRenewal:0 failIfNotSilent:*(unsigned __int8 *)(a1 + 56)];
  }

  else
  {
    __int16 v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
    if (os_log_type_enabled(v29, OS_LOG_TYPE_FAULT)) {
      sub_1006A8940((uint64_t)v17, v29, v30, v31, v32, v33, v34, v35);
    }

    uint64_t v36 = *(void *)(a1 + 48);
    if (v36) {
      (*(void (**)(void))(v36 + 16))();
    }
  }

void sub_100390AE4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
}

id sub_100390E70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return _[*(id *)(a1 + 32) _processRegionValidationMessage:a2 deliveredWithError:a3 resultCode:a4 resultDictionary:a5];
}

id sub_1003910AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return _[*(id *)(a1 + 32) _processDefaultInvitationContextMessage:a2 deliveredWithError:a3 resultCode:a4 resultDictionary:a5];
}

id sub_100391BFC(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 nextComponent]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 runWithInput:v3]);

  return v5;
}

LABEL_75:
  if ((_DWORD)v5 == 1)
  {
    uint64_t v69 = (void *)objc_claimAutoreleasedReturnValue([v13 registeredKTData]);
    -[IDSKTRegistrationDataManager logKTRegistrationTimeMetricsForLatestRegisteredKTData:lastRegisteredKTData:forKeyIndex:]( v64,  "logKTRegistrationTimeMetricsForLatestRegisteredKTData:lastRegisteredKTData:forKeyIndex:",  v14,  v69,  1LL);
  }

  [v13 setRegisteredKTData:v14];
  [v13 setUnregisteredKTData:0];
  id v48 = 1;
LABEL_49:

  return v48;
}

void sub_100395E88(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v8 = im_primary_queue(v6, v7);
  uint64_t v9 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100395F44;
  block[3] = &unk_1008F5F58;
  void block[4] = *(void *)(a1 + 32);
  id v13 = v5;
  id v14 = v6;
  id v10 = v6;
  id v11 = v5;
  dispatch_async(v9, block);
}

void sub_100395F44(uint64_t a1)
{
  BOOL v2 = +[IMUserDefaults shouldDropKTAccountKeySignatureResponseOnLaunch]( &OBJC_CLASS___IMUserDefaults,  "shouldDropKTAccountKeySignatureResponseOnLaunch");
  if (v2 && CUTIsInternalInstall(v2, v3))
  {
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Default is set to drop account key signature response from transparencyd. This path is not hit during registration.",  buf,  2u);
    }

    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) keyManager]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"IDSKTRegistrationDataManagerErrorDomain",  -7000LL,  0LL));
    [v5 _handleTransparencySignatureResponse:0 error:v6];
  }

  else
  {
    id v7 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) keyManager]);
    [v7 _handleTransparencySignatureResponse:*(void *)(a1 + 40) error:*(void *)(a1 + 48)];
  }

void sub_100396BFC(id *a1, void *a2)
{
  id v34 = a2;
  if ([v34 count])
  {
    __int128 v41 = 0u;
    __int128 v42 = 0u;
    __int128 v39 = 0u;
    __int128 v40 = 0u;
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a1[4] allKeys]);
    id v4 = [v3 countByEnumeratingWithState:&v39 objects:v43 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v40;
      uint64_t v32 = *(void *)v40;
      do
      {
        id v7 = 0LL;
        id v33 = v5;
        do
        {
          if (*(void *)v40 != v6) {
            objc_enumerationMutation(v3);
          }
          uint64_t v8 = *(void *)(*((void *)&v39 + 1) + 8LL * (void)v7);
          uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([a1[5] objectForKeyedSubscript:v8]);
          id v10 = (void *)objc_claimAutoreleasedReturnValue([a1[6] serviceController]);
          id v11 = (void *)objc_claimAutoreleasedReturnValue([v9 serviceIdentifier]);
          __int16 v12 = (void *)objc_claimAutoreleasedReturnValue([v10 serviceWithIdentifier:v11]);

          if ([v12 adHocServiceType])
          {
            id v13 = (void *)objc_claimAutoreleasedReturnValue([a1[6] serviceController]);
            uint64_t v14 = objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "primaryServiceForAdhocServiceType:", objc_msgSend(v12, "adHocServiceType")));

            __int16 v12 = (void *)v14;
          }

          id v15 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( a1[6],  "_ktApplicationForKTRegistrationIndex:",  objc_msgSend(v12, "ktRegistrationDataIndex")));
          if (v15)
          {
            id v16 = (void *)objc_claimAutoreleasedReturnValue([a1[4] objectForKeyedSubscript:v8]);

            if (v16)
            {
              id v17 = (void *)objc_claimAutoreleasedReturnValue([v34 objectForKeyedSubscript:v15]);
              if (v17)
              {
                id v18 = v3;
                id v19 = (void *)objc_claimAutoreleasedReturnValue([a1[4] objectForKeyedSubscript:v8]);
                objc_msgSend(v19, "setKtOptInStatus:", objc_msgSend(v17, "status"));

                uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([a1[4] objectForKeyedSubscript:v8]);
                uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v17 timestamp]);
                [v20 setKtOptInTimestamp:v21];

                unsigned int v22 = (void *)objc_claimAutoreleasedReturnValue([v17 error]);
                if (v22)
                {
                  uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([a1[4] objectForKeyedSubscript:v8]);
                  id v24 = (void *)objc_claimAutoreleasedReturnValue([v17 error]);
                  uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [v24 code]));
                  [v23 setKtOptInErrorCode:v25];
                }

                id v26 = [v17 status];
                uint64_t v3 = v18;
                uint64_t v6 = v32;
                id v5 = v33;
              }

              else
              {
                id v26 = 0LL;
              }

              [v9 setOptedIntoKT:v26];
            }
          }

          id v7 = (char *)v7 + 1;
        }

        while (v5 != v7);
        id v5 = [v3 countByEnumeratingWithState:&v39 objects:v43 count:16];
      }

      while (v5);
    }
  }

  if ([a1[7] count])
  {
    id v27 = [[TransparencyIDSRegistrationRequest alloc] initWithSignatureRequests:a1[7]];
    [v27 setInitialTimeout:30.0];
    if ((objc_opt_respondsToSelector(v27, "setDontWaitForKeySigning:") & 1) != 0) {
      [v27 setDontWaitForKeySigning:1];
    }
    uint64_t v28 = a1[6];
    __int16 v29 = (void *)v28[4];
    v35[0] = _NSConcreteStackBlock;
    v35[1] = 3221225472LL;
    v35[2] = sub_100397030;
    v35[3] = &unk_100902A40;
    v35[4] = v28;
    id v36 = a1[4];
    id v37 = a1[5];
    id v38 = a1[8];
    [v29 transparencyGetKTSignatures:v27 complete:v35];
  }

  else
  {
    uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
      sub_1006A8D28();
    }

    uint64_t v31 = (void (**)(id, id))a1[8];
    if (v31) {
      v31[2](v31, a1[4]);
    }
  }
}

void sub_100397030(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v8 = im_primary_queue(v6, v7);
  uint64_t v9 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v8);
  v14[0] = _NSConcreteStackBlock;
  v14[2] = sub_100397124;
  v14[3] = &unk_1008F6380;
  uint64_t v10 = *(void *)(a1 + 32);
  id v11 = *(void **)(a1 + 40);
  id v15 = v5;
  uint64_t v16 = v10;
  v14[1] = 3221225472LL;
  id v17 = v6;
  id v18 = v11;
  id v19 = *(id *)(a1 + 48);
  id v20 = *(id *)(a1 + 56);
  id v12 = v6;
  id v13 = v5;
  dispatch_async(v9, v14);
}

uint64_t sub_100397124(uint64_t a1)
{
  BOOL v2 = +[IMUserDefaults shouldDropKTAccountKeySignatureOnlyDuringReg]( &OBJC_CLASS___IMUserDefaults,  "shouldDropKTAccountKeySignatureOnlyDuringReg");
  if (v2 && CUTIsInternalInstall(v2, v3))
  {
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Default is set to drop signature from KT account key response.",  buf,  2u);
    }

    __int128 v79 = 0u;
    __int128 v80 = 0u;
    __int128 v77 = 0u;
    __int128 v78 = 0u;
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) registrationData]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 allValues]);

    id v7 = [v6 countByEnumeratingWithState:&v77 objects:v89 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v78;
      do
      {
        for (i = 0LL; i != v8; i = (char *)i + 1)
        {
          if (*(void *)v78 != v9) {
            objc_enumerationMutation(v6);
          }
          [*(id *)(*((void *)&v77 + 1) + 8 * (void)i) setSignature:0];
        }

        id v8 = [v6 countByEnumeratingWithState:&v77 objects:v89 count:16];
      }

      while (v8);
    }
  }

  BOOL v11 = +[IMUserDefaults shouldDropKTAccountKeyOnlyDuringReg]( &OBJC_CLASS___IMUserDefaults,  "shouldDropKTAccountKeyOnlyDuringReg");
  if (v11 && CUTIsInternalInstall(v11, v12))
  {
    id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Default is set to drop public key from KT account key response.",  buf,  2u);
    }

    __int128 v75 = 0u;
    __int128 v76 = 0u;
    __int128 v73 = 0u;
    __int128 v74 = 0u;
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) registrationData]);
    id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 allValues]);

    id v16 = [v15 countByEnumeratingWithState:&v73 objects:v88 count:16];
    if (v16)
    {
      id v17 = v16;
      uint64_t v18 = *(void *)v74;
      do
      {
        for (j = 0LL; j != v17; j = (char *)j + 1)
        {
          if (*(void *)v74 != v18) {
            objc_enumerationMutation(v15);
          }
          [*(id *)(*((void *)&v73 + 1) + 8 * (void)j) setPublicKey:0];
        }

        id v17 = [v15 countByEnumeratingWithState:&v73 objects:v88 count:16];
      }

      while (v17);
    }
  }

  BOOL v20 = +[IMUserDefaults shouldDropKTAccountKeySignatureResponseDuringReg]( &OBJC_CLASS___IMUserDefaults,  "shouldDropKTAccountKeySignatureResponseDuringReg");
  if (v20 && CUTIsInternalInstall(v20, v21))
  {
    unsigned int v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "Default is set to drop account key signature response during registraiton.",  buf,  2u);
    }

    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) keyManager]);
    id v24 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"IDSKTRegistrationDataManagerErrorDomain",  -7000LL,  0LL));
    [v23 _handleTransparencySignatureResponseForRegistration:0 error:v24];
  }

  else
  {
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) keyManager]);
    [v23 _handleTransparencySignatureResponseForRegistration:*(void *)(a1 + 32) error:*(void *)(a1 + 48)];
  }

  __int128 v71 = 0u;
  __int128 v72 = 0u;
  __int128 v69 = 0u;
  __int128 v70 = 0u;
  id obj = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) allKeys]);
  id v25 = [obj countByEnumeratingWithState:&v69 objects:v87 count:16];
  if (v25)
  {
    id v27 = v25;
    uint64_t v28 = *(void *)v70;
    *(void *)&__int128 v26 = 138412802LL;
    __int128 v64 = v26;
    uint64_t v65 = *(void *)v70;
    do
    {
      __int16 v29 = 0LL;
      id v66 = v27;
      do
      {
        if (*(void *)v70 != v28) {
          objc_enumerationMutation(obj);
        }
        uint64_t v30 = *(void *)(*((void *)&v69 + 1) + 8LL * (void)v29);
        uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "objectForKeyedSubscript:", v30, v64));
        uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) serviceController]);
        id v33 = (void *)objc_claimAutoreleasedReturnValue([v31 serviceIdentifier]);
        id v34 = (void *)objc_claimAutoreleasedReturnValue([v32 serviceWithIdentifier:v33]);

        if ([v34 adHocServiceType])
        {
          uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) serviceController]);
          uint64_t v36 = objc_claimAutoreleasedReturnValue(objc_msgSend(v35, "primaryServiceForAdhocServiceType:", objc_msgSend(v34, "adHocServiceType")));

          id v34 = (void *)v36;
        }

        id v37 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) accountController]);
        id v38 = (void *)objc_claimAutoreleasedReturnValue([v37 appleIDAccountOnService:v34]);

        __int128 v39 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(a1 + 40),  "_ktApplicationForKTRegistrationIndex:",  objc_msgSend(v34, "ktRegistrationDataIndex")));
        if (v39)
        {
          __int128 v40 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) objectForKeyedSubscript:v30]);

          if (v40)
          {
            __int128 v41 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) registrationData]);
            __int128 v42 = v38;
            uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue([v41 objectForKeyedSubscript:v39]);

            uint64_t v44 = *(void **)(a1 + 40);
            id v45 = (void *)objc_claimAutoreleasedReturnValue([v43 dsid]);
            id v68 = v42;
            uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue([v42 dsID]);
            unsigned int v47 = [v44 doesSignatureDSID:v45 matchAccountDSID:v46];

            if (v43 && v47)
            {
              id v48 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) objectForKeyedSubscript:v30]);
              id v49 = (void *)objc_claimAutoreleasedReturnValue([v43 publicKey]);
              [v48 setKtPublicAccountKey:v49];

              uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) objectForKeyedSubscript:v30]);
              uint64_t v51 = (void *)objc_claimAutoreleasedReturnValue([v43 signature]);
              [v50 setKtDataSignature:v51];

              uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) objectForKeyedSubscript:v30]);
              id v53 = (void *)objc_claimAutoreleasedReturnValue([v43 orderedTimestamp]);
              [v52 setKtAccountKeyTimestamp:v53];

              goto LABEL_47;
            }

            if ((v47 & 1) == 0)
            {
              id v54 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
              if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
              {
                id v55 = (void *)objc_claimAutoreleasedReturnValue([v43 dsid]);
                uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue([v68 dsID]);
                *(_DWORD *)buf = v64;
                uint64_t v82 = v30;
                __int16 v83 = 2112;
                id v84 = v55;
                __int16 v85 = 2112;
                id v86 = v56;
                _os_log_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_DEFAULT,  "DSID for account and signature do not match. { service: %@, signatureDSID: %@, accountDSID: %@",  buf,  0x20u);
              }

              id v57 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) objectForKeyedSubscript:v30]);
              [v57 setKtPublicAccountKey:0];

              id v58 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) objectForKeyedSubscript:v30]);
              [v58 setKtDataSignature:0];

              uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) objectForKeyedSubscript:v30]);
              [v52 setKtAccountKeyTimestamp:0];
LABEL_47:

              id v59 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) objectForKeyedSubscript:v30]);
              id v60 = (void *)objc_claimAutoreleasedReturnValue([v43 dsid]);
              [v59 setDsid:v60];
            }

            if (*(void *)(a1 + 48))
            {
              uint64_t v61 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) objectForKeyedSubscript:v30]);
              double v62 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [*(id *)(a1 + 48) code]));
              [v61 setKtAccountKeyErrorCode:v62];
            }

            uint64_t v28 = v65;
            id v27 = v66;
            id v38 = v68;
          }
        }

        __int16 v29 = (char *)v29 + 1;
      }

      while (v27 != v29);
      id v27 = [obj countByEnumeratingWithState:&v69 objects:v87 count:16];
    }

    while (v27);
  }

  uint64_t result = *(void *)(a1 + 72);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 56));
  }
  return result;
}

void sub_100399000(uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  uint64_t v4 = im_primary_queue(a1, a2);
  id v5 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v4);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100399094;
  block[3] = &unk_1008F7DE0;
  id v6 = *(void **)(a1 + 40);
  void block[4] = *(void *)(a1 + 32);
  id v8 = v6;
  char v9 = v2;
  dispatch_async(v5, block);
}

void sub_100399094(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) keyManager]);
  [v2 _handleKVSUpdateResponseForTrustedDevices:*(void *)(a1 + 40) withSuccessfulKVSSync:*(unsigned __int8 *)(a1 + 48)];
}

void sub_10039BE54(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___IDSDaemonPriorityQueueController);
  id v2 = (void *)qword_1009C0C28;
  qword_1009C0C28 = (uint64_t)v1;
}

void sub_10039C0B8(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  objc_autoreleasePoolPop(v2);
}

void sub_10039C168(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  objc_autoreleasePoolPop(v2);
}

void sub_10039C218(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  objc_autoreleasePoolPop(v2);
}

void sub_10039C2C8(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  objc_autoreleasePoolPop(v2);
}

void sub_10039C384(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  objc_autoreleasePoolPop(v2);
}

void sub_10039C47C(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  objc_autoreleasePoolPop(v2);
}

void sub_10039C550(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  objc_autoreleasePoolPop(v2);
}

void sub_10039C62C(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  objc_autoreleasePoolPop(v2);
}

void sub_10039CAF0(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___IDSPinnedIdentityController);
  id v2 = (void *)qword_1009C0C38;
  qword_1009C0C38 = (uint64_t)v1;
}

IDSDAccount *__cdecl sub_10039DCCC(id a1, IDSServiceProperties *a2, int a3)
{
  uint64_t v3 = *(void *)&a3;
  uint64_t v4 = a2;
  id v5 = objc_alloc(&OBJC_CLASS___IDSDAccount);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringGUID](&OBJC_CLASS___NSString, "stringGUID"));
  id v7 = -[IDSDAccount initWithLoginID:service:uniqueID:accountType:accountConfig:]( v5,  "initWithLoginID:service:uniqueID:accountType:accountConfig:",  &stru_100912B50,  v4,  v6,  v3,  0LL);

  return v7;
}

id sub_10039E2DC(uint64_t a1)
{
  return [*(id *)(a1 + 32) synchronize];
}

id sub_10039E438(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a2 registration]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 userUniqueIdentifier]);
  id v5 = [v4 isEqualToString:*(void *)(a1 + 32)];

  return v5;
}

id sub_10039E490(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a2 registration]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 userUniqueIdentifier]);
  id v5 = [v4 isEqualToString:*(void *)(a1 + 32)];

  return v5;
}

LABEL_4:
    return;
  }

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[IDSRegistrationReasonTracker sharedInstance]( &OBJC_CLASS___IDSRegistrationReasonTracker,  "sharedInstance"));
  [v4 setMostRecentIDSRegistrationReason:1];

  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[IDSRegistrationReasonTracker sharedInstance]( &OBJC_CLASS___IDSRegistrationReasonTracker,  "sharedInstance"));
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[IDSRequestReasonContainer initialRequestWithSubreason:pathID:]( &OBJC_CLASS___IDSRequestReasonContainer,  "initialRequestWithSubreason:pathID:",  1LL,  1LL));
  [v5 setRegistrationRequestReason:v6];

  if (-[IDSDataMigrationTracker hasPerformedMigration](v2->_migrationTracker, "hasPerformedMigration"))
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[FTDeviceSupport sharedInstance](&OBJC_CLASS___FTDeviceSupport, "sharedInstance"));
    id v8 = [v7 registrationSupported];

    if (v8)
    {
      -[IDSUserAccountSynchronizer setMidSynchronize:](v2, "setMidSynchronize:", 1LL);
      uint64_t v182 = -[IDSDAccountController isiCloudSignedIn](v2->_accountController, "isiCloudSignedIn");
      if (v182) {
        id v194 = -[IDSDAccountController isiCloudHSA2](v2->_accountController, "isiCloudHSA2");
      }
      else {
        id v194 = 0;
      }
      id v19 = (__CFString *)objc_claimAutoreleasedReturnValue(-[IDSUserStore usersWithRealms:](v2->_userStore, "usersWithRealms:", &off_100948940));
      BOOL v20 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      uint64_t v21 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      unsigned int v22 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      v239[0] = _NSConcreteStackBlock;
      v239[1] = 3221225472LL;
      v239[2] = sub_1003A01EC;
      v239[3] = &unk_100902B28;
      uint64_t v23 = v20;
      v240 = v23;
      id v176 = v21;
      uint64_t v241 = v176;
      signed int v174 = v22;
      uint64_t v242 = v174;
      id v185 = v19;
      id v177 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString __imArrayByApplyingBlock:](v19, "__imArrayByApplyingBlock:", v239));
      id v24 = (void *)objc_claimAutoreleasedReturnValue(-[IDSUserAccountSynchronizer ctAdapter](v2, "ctAdapter"));
      __int16 v238 = 0LL;
      id v25 = (void *)objc_claimAutoreleasedReturnValue([v24 currentSIMsWithError:&v238]);
      __int128 v173 = v238;
      __int128 v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "__imArrayByApplyingBlock:", &stru_100902B68));
      v184 = objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v26));

      id v175 = v23;
      id v27 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableArray __imArrayByApplyingBlock:](v23, "__imArrayByApplyingBlock:", &stru_100902BA8));
      id v192 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v27));

      id v193 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      id v181 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v249 = v185;
        _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "Synchronizing users to accounts {users: %@}",  buf,  0xCu);
      }

      __int16 v29 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDAccountController accountsWithType:](v2->_accountController, "accountsWithType:", 0LL));
      uint64_t v30 = [v29 copy];

      uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(-[IDSDAccountController accountsWithType:](v2->_accountController, "accountsWithType:", 3LL));
      uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([v30 arrayByAddingObjectsFromArray:v31]);

      __int16 v236 = 0u;
      id v237 = 0u;
      double v234 = 0u;
      double v235 = 0u;
      id obj = v32;
      id v186 = v2;
      id v199 = [obj countByEnumeratingWithState:&v234 objects:v254 count:16];
      if (v199)
      {
        id v33 = v182 ^ 1;
        id v197 = *(void *)v235;
        if (v194) {
          id v34 = @"YES";
        }
        else {
          id v34 = @"NO";
        }
        int v187 = v34;
        do
        {
          uint64_t v35 = 0LL;
          do
          {
            if (*(void *)v235 != v197) {
              objc_enumerationMutation(obj);
            }
            id v203 = (char *)v35;
            uint64_t v36 = *(__CFString **)(*((void *)&v234 + 1) + 8LL * (void)v35);
            id v37 = objc_claimAutoreleasedReturnValue(-[__CFString registration](v36, "registration"));
            if ((-[__CFString isAdHocAccount](v36, "isAdHocAccount") & 1) != 0
              || (id v38 = -[__CFString isRegistered](v36, "isRegistered"),
                  __int128 v39 = (void *)v37,
                  (v38 & 1) == 0))
            {
              __int128 v39 = v36;
            }

            id v209 = (__CFString *)(id)objc_claimAutoreleasedReturnValue([v39 userUniqueIdentifier]);

            __int128 v40 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString service](v36, "service"));
            v233[0] = _NSConcreteStackBlock;
            v233[1] = 3221225472LL;
            v233[2] = sub_1003A037C;
            v233[3] = &unk_1008FE3E0;
            v233[4] = v36;
            __int128 v41 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString __imArrayByFilteringWithBlock:](v185, "__imArrayByFilteringWithBlock:", v233));
            __int128 v42 = objc_claimAutoreleasedReturnValue([v41 firstObject]);

            if (v42)
            {
              id v205 = (__CFString *)(id)objc_claimAutoreleasedReturnValue( -[IDSUserStore propertiesForUser:]( v2->_userStore,  "propertiesForUser:",  v42));
            }

            else
            {
              id v205 = 0LL;
            }

            id v201 = (id)v37;
            uint64_t v43 = -[__CFString accountType](v36, "accountType");
            else {
              uint64_t v44 = 0;
            }
            id v207 = (const __CFString *)v42;
            if (-[IDSRestrictions shouldDisableAccount:](v2->_restrictions, "shouldDisableAccount:", v36))
            {
              id v45 = v40;
              -[IDSDAccountController forceRemoveAccount:](v2->_accountController, "forceRemoveAccount:", v36);
              uint64_t v46 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
              if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138412546;
                v249 = v209;
                uint64_t v250 = 2112;
                uint64_t v251 = v36;
                unsigned int v47 = v46;
                id v48 = "Removing account for restricted service {uniqueIdentifier: %@, account: %@}";
                id v49 = 22;
                goto LABEL_52;
              }

  if (a5)
  {
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(a5);
    a5 = v22;
    if (!a7) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }

  uint64_t v21 = 0LL;
  if (a7)
  {
LABEL_6:
    uint64_t v23 = sub_10041D3C4(0LL, (unint64_t *)&unk_1009BC270, &OBJC_CLASS___IDSURI_ptr);
    id v24 = sub_1003F5CB4(&qword_1009BB150);
    id v25 = sub_100438928( (unint64_t *)&unk_1009BAC00,  (unint64_t *)&unk_1009BC270,  &OBJC_CLASS___IDSURI_ptr);
    __int128 v26 = v24;
    uint64_t v12 = a9;
    a7 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a7, v23, v26, v25);
  }

    if (++v7 == v25)
    {
      swift_bridgeObjectRelease(v6);
      return (uint64_t)v9;
    }
  }

  if (v8 == 2)
  {
LABEL_13:
    swift_bridgeObjectRetain(v13);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native(v9);
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_10046D484(0LL, v9[2] + 1LL, 1, v9);
      char v9 = (void *)result;
    }

    id v17 = v9[2];
    id v16 = v9[3];
    if (v17 >= v16 >> 1)
    {
      uint64_t result = (uint64_t)sub_10046D484((void *)(v16 > 1), v17 + 1, 1, v9);
      char v9 = (void *)result;
    }

    v9[2] = v17 + 1;
    uint64_t v10 = &v9[2 * v17];
    void v10[4] = v12;
    v10[5] = v13;
    goto LABEL_4;
  }

  id v19 = a1 + 9;
  BOOL v20 = 2LL;
  while (1)
  {
    uint64_t v21 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    uint64_t result = *(v19 - 1);
    unsigned int v22 = *v19;
    if (result == v12 && v22 == v13) {
      goto LABEL_4;
    }
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v22, v12, v13, 0LL);
    if ((result & 1) != 0) {
      goto LABEL_4;
    }
    v19 += 2;
    ++v20;
    if (v21 == v8) {
      goto LABEL_13;
    }
  }

LABEL_202:
                  uint64_t v126 = v208 + 1;
                }

                while ((id)(v208 + 1) != v206);
                id v206 = -[__CFString countByEnumeratingWithState:objects:count:]( v202,  "countByEnumeratingWithState:objects:count:",  &v215,  v245,  16LL);
                if (!v206)
                {
LABEL_204:

                  id v117 = v178;
                  id v113 = v179;
                  id v116 = v180;
                  break;
                }
              }
            }

            id v120 = v188 + 1;
          }

          while ((id)(v188 + 1) != v116);
          id v116 = [v113 countByEnumeratingWithState:&v219 objects:v246 count:16];
        }

        while (v116);
      }

      __int16 v166 = (void *)objc_claimAutoreleasedReturnValue(-[IDSUserAccountSynchronizer cachedDisabledByService](v2, "cachedDisabledByService"));
      double v167 = [v166 mutableCopy];
      id v168 = v167;
      if (v167)
      {
        uint64_t v169 = v167;
      }

      else
      {
        uint64_t v169 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
      }

      [v169 addEntriesFromDictionary:v193];
      -[IDSUserAccountSynchronizer setCachedDisabledByService:](v2, "setCachedDisabledByService:", v169);
      -[IDSUserAccountSynchronizer setMidSynchronize:](v2, "setMidSynchronize:", 0LL);
    }

    else
    {
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[FTDeviceSupport sharedInstance](&OBJC_CLASS___FTDeviceSupport, "sharedInstance"));
      id v15 = [v14 deviceType];

      if (v15 == (id)2)
      {
        uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
        if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
        {
          id v16 = (void *)objc_claimAutoreleasedReturnValue(+[FTDeviceSupport sharedInstance](&OBJC_CLASS___FTDeviceSupport, "sharedInstance"));
          else {
            id v17 = @"NO";
          }
          if (+[IDSRegistrationController systemSupportsPhoneNumberRegistration]( &OBJC_CLASS___IDSRegistrationController,  "systemSupportsPhoneNumberRegistration"))
          {
            uint64_t v18 = @"YES";
          }

          else
          {
            uint64_t v18 = @"NO";
          }

          *(_DWORD *)buf = 138412546;
          v249 = v17;
          uint64_t v250 = 2112;
          uint64_t v251 = v18;
          _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Can't setup phone number accounts { registrationSupported: %@, supportsSMSIdentification: %@ }",  buf,  0x16u);
        }

        goto LABEL_4;
      }
    }
  }

  else
  {
    char v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Waiting on migration -- deferring synchronize",  buf,  2u);
    }

    if (!v2->_migrationPromise)
    {
      uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Performing migration if needed", buf, 2u);
      }

      BOOL v11 = objc_claimAutoreleasedReturnValue(-[IDSDataMigrationTracker performMigrationIfNeeded](v2->_migrationTracker, "performMigrationIfNeeded"));
      migrationPromise = v2->_migrationPromise;
      v2->_migrationPromise = (CUTPromise *)v11;

      id v13 = v2->_migrationPromise;
      v243[0] = _NSConcreteStackBlock;
      v243[1] = 3221225472LL;
      v243[2] = sub_1003A010C;
      v243[3] = &unk_1008F7798;
      v243[4] = v2;
      -[CUTPromise registerResultBlock:](v13, "registerResultBlock:", v243);
    }
  }

void sub_1003A010C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = *(dispatch_queue_s **)(v1 + 72);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1003A0164;
  block[3] = &unk_1008F6010;
  void block[4] = v1;
  dispatch_async(v2, block);
}

id sub_1003A0164(uint64_t a1)
{
  id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v6 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Migration completed, performing synchronize",  v6,  2u);
  }

  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 88);
  *(void *)(v3 + 8_Block_object_dispose((const void *)(v1 - 128), 8) = 0LL;

  return [*(id *)(a1 + 32) synchronize];
}

id sub_1003A01EC(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 realm];
  if (![v3 realm])
  {
    id v5 = a1 + 4;
    goto LABEL_7;
  }

  if ([v3 realm] == (id)2)
  {
    id v5 = a1 + 5;
LABEL_7:
    [*v5 addObject:v3];
    goto LABEL_8;
  }

  if (v4 == (id)3)
  {
    id v5 = a1 + 6;
    goto LABEL_7;
  }

IMPair *__cdecl sub_1003A027C(id a1, IDSCTSIM *a2)
{
  id v2 = a2;
  id v3 = objc_alloc(&OBJC_CLASS___IMPair);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(-[IDSCTSIM mobileCountryCode](v2, "mobileCountryCode"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue(-[IDSCTSIM mobileNetworkCode](v2, "mobileNetworkCode"));

  id v6 = -[IMPair initWithFirst:second:](v3, "initWithFirst:second:", v4, v5);
  return v6;
}

IMPair *__cdecl sub_1003A02FC(id a1, IDSPhoneUser *a2)
{
  id v2 = a2;
  id v3 = objc_alloc(&OBJC_CLASS___IMPair);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(-[IDSPhoneUser countryCode](v2, "countryCode"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue(-[IDSPhoneUser networkCode](v2, "networkCode"));

  id v6 = -[IMPair initWithFirst:second:](v3, "initWithFirst:second:", v4, v5);
  return v6;
}

id sub_1003A037C(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 uniqueIdentifier]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userUniqueIdentifier]);
  id v5 = [v3 isEqualToString:v4];

  return v5;
}

void sub_1003A03DC(uint64_t a1)
{
  id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration_oversized](&OBJC_CLASS___IMRGLog, "registration_oversized"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    int v5 = 138412546;
    uint64_t v6 = v3;
    __int16 v7 = 2112;
    uint64_t v8 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%@ Current existing accounts {existingIdentifierByService: %@}",  (uint8_t *)&v5,  0x16u);
  }
}

void sub_1003A0494(uint64_t a1)
{
  id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration_oversized](&OBJC_CLASS___IMRGLog, "registration_oversized"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    int v5 = 138412546;
    uint64_t v6 = v3;
    __int16 v7 = 2112;
    uint64_t v8 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "%@ Current disabled accounts {disabledByService: %@}",  (uint8_t *)&v5,  0x16u);
  }
}

LABEL_252:
              id v156 = v199;
              id v199 = v156;
              -[IDSRegistration setDidRegisterWithDeviceSignature:]( v5,  "setDidRegisterWithDeviceSignature:",  [v156 BOOLValue]);
              id v198 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:@"opted-into-kt"]);
              if (_IDSRunningInDaemon(v198, v157) && v198)
              {
                id v159 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                if (os_log_type_enabled(v159, OS_LOG_TYPE_DEBUG)) {
                  sub_1006A94B8();
                }
              }

              else if (!v198)
              {
                goto LABEL_260;
              }

              id v160 = objc_opt_class(&OBJC_CLASS___NSNumber, v158);
              if ((objc_opt_isKindOfClass(v198, v160) & 1) == 0)
              {
                id v27 = 1;
LABEL_320:

                goto LABEL_321;
              }

                                            CSDBSqliteDatabaseSetVersion(a1, 10003LL);
                                            id v142 = OSLogHandleForIDSCategory("IDSDMessageStore");
                                            id v143 = (os_log_s *)objc_claimAutoreleasedReturnValue(v142);
                                            if (os_log_type_enabled(v143, OS_LOG_TYPE_DEFAULT))
                                            {
                                              *(_WORD *)buf = 0;
                                              _os_log_impl( (void *)&_mh_execute_header,  v143,  OS_LOG_TYPE_DEFAULT,  "Add nonCloudWaking column to outgoing_message",  buf,  2u);
                                            }

                                            if (os_log_shim_legacy_logging_enabled(v144)
                                              && _IDSShouldLog(0LL, @"IDSDMessageStore"))
                                            {
                                              _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDMessageStore",  @"Add nonCloudWaking column to outgoing_message");
                                            }

                                            id v145 = sub_1003B3CB0( a2,  @"live_delivery",  @"INTEGER DEFAULT 0",  @"outgoing_message");
                                            id v146 = sub_1003B3CB0( a2,  @"require_bluetooth",  @"INTEGER DEFAULT 0",  @"outgoing_message");
                                            if ((v145 & v146 & sub_1003B3CB0( a2,  @"require_local_wifi",  @"INTEGER DEFAULT 0",  @"outgoing_message")) != 1) {
                                              goto LABEL_425;
                                            }
                                            CSDBSqliteDatabaseSetVersion(a1, 10005LL);
                                            goto LABEL_259;
                                          }

LABEL_284:
              double v167 = v167;
              id v204 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:@"cert"]);
              if (_IDSRunningInDaemon(v204, v179) && v204)
              {
                id v181 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                if (os_log_type_enabled(v181, OS_LOG_TYPE_DEBUG)) {
                  sub_1006A9358();
                }
              }

              else if (!v204)
              {
LABEL_292:
                id v168 = v204;

                if (!v168)
                {
                  id v204 = v167;
                  double v167 = 0LL;
LABEL_270:
                  id v205 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistration idsUserID](v5, "idsUserID"));
                  if (-[IDSRegistration registrationType](v5, "registrationType"))
                  {
LABEL_306:
                    uint64_t v190 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                    if (os_log_type_enabled(v190, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)buf = 138412546;
                      id v207 = v117;
                      id v208 = 2112;
                      id v209 = v205;
                      _os_log_impl( (void *)&_mh_execute_header,  v190,  OS_LOG_TYPE_DEFAULT,  "Loaded auth cert: %@    ID: %@",  buf,  0x16u);
                    }

                    if ([v117 length] && objc_msgSend(v205, "length"))
                    {
                      id v191 = (void *)objc_claimAutoreleasedReturnValue( +[IDSRegistrationKeychainManager sharedInstance]( &OBJC_CLASS___IDSRegistrationKeychainManager,  "sharedInstance"));
                      id v192 = (void *)objc_claimAutoreleasedReturnValue([v191 authenticationCertForID:v205]);
                      id v196 = [v192 length];

                      id v193 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                      id v194 = os_log_type_enabled(v193, OS_LOG_TYPE_DEFAULT);
                      if (v196)
                      {
                        if (v194)
                        {
                          *(_DWORD *)buf = 138412290;
                          id v207 = v205;
                          _os_log_impl( (void *)&_mh_execute_header,  v193,  OS_LOG_TYPE_DEFAULT,  "Not migrating cert for user ID, we already have one: %@",  buf,  0xCu);
                        }
                      }

                      else
                      {
                        if (v194)
                        {
                          *(_DWORD *)buf = 138412290;
                          id v207 = v205;
                          _os_log_impl( (void *)&_mh_execute_header,  v193,  OS_LOG_TYPE_DEFAULT,  "Migrating auth cert for IDS User ID: %@",  buf,  0xCu);
                        }

                        id v193 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSRegistrationKeychainManager sharedInstance]( &OBJC_CLASS___IDSRegistrationKeychainManager,  "sharedInstance"));
                        -[os_log_s setAuthenticationCert:forID:](v193, "setAuthenticationCert:forID:", v117, v205);
                      }
                    }

                    id v27 = 0;
                    goto LABEL_318;
                  }

                  uint64_t v169 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistration mainID](v5, "mainID"));
                  if ([v123 length])
                  {
                    __int128 v170 = (void *)objc_claimAutoreleasedReturnValue( +[IDSRegistrationKeychainManager sharedInstance]( &OBJC_CLASS___IDSRegistrationKeychainManager,  "sharedInstance"));
                    __int128 v171 = (void *)objc_claimAutoreleasedReturnValue([v170 smsSignatureForID:v169]);
                    __int128 v172 = [v171 length];

                    if (!v172)
                    {
                      __int128 v173 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                      if (os_log_type_enabled(v173, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)buf = 138412546;
                        id v207 = v123;
                        id v208 = 2112;
                        id v209 = v169;
                        _os_log_impl( (void *)&_mh_execute_header,  v173,  OS_LOG_TYPE_DEFAULT,  "Migrating this SMS auth token: %@  mainID: %@",  buf,  0x16u);
                      }

                      signed int v174 = (void *)objc_claimAutoreleasedReturnValue( +[IDSRegistrationKeychainManager sharedInstance]( &OBJC_CLASS___IDSRegistrationKeychainManager,  "sharedInstance"));
                      [v174 setSMSSignature:v123 mainID:v169];
LABEL_304:
                    }
                  }

                  else
                  {
                    if (!v169)
                    {
                      id v185 = (void *)objc_claimAutoreleasedReturnValue(-[IDSRegistration _user](v5, "_user"));
                      uint64_t v169 = (void *)objc_claimAutoreleasedReturnValue([v185 unprefixedIdentifier]);

                      id v186 = (void *)objc_claimAutoreleasedReturnValue( +[IDSRegistrationKeychainManager sharedInstance]( &OBJC_CLASS___IDSRegistrationKeychainManager,  "sharedInstance"));
                      signed int v174 = (void *)objc_claimAutoreleasedReturnValue([v186 smsSignatureForID:v169]);

                      int v187 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                      if (os_log_type_enabled(v187, OS_LOG_TYPE_DEFAULT))
                      {
                        id v195 = (void *)objc_claimAutoreleasedReturnValue([v174 description]);
                        id v188 = IMTruncatedLoggingStringForString();
                        id v189 = (id)objc_claimAutoreleasedReturnValue(v188);
                        *(_DWORD *)buf = 138412546;
                        id v207 = v169;
                        id v208 = 2112;
                        id v209 = v189;
                        _os_log_impl( (void *)&_mh_execute_header,  v187,  OS_LOG_TYPE_DEFAULT,  "Using existing user mainID: %@   token: %@",  buf,  0x16u);
                      }

                      -[IDSRegistration setMainID:](v5, "setMainID:", v169);
                      goto LABEL_304;
                    }

                    v183 = (void *)objc_claimAutoreleasedReturnValue( +[IDSRegistrationKeychainManager sharedInstance]( &OBJC_CLASS___IDSRegistrationKeychainManager,  "sharedInstance"));
                    v184 = (void *)objc_claimAutoreleasedReturnValue([v183 smsSignatureForID:v169]);

                    if (!v184)
                    {
                      signed int v174 = (void *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
                      if (os_log_type_enabled((os_log_t)v174, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_WORD *)buf = 0;
                        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v174,  OS_LOG_TYPE_DEFAULT,  "******** We're missing an SMS auth token, this will SMS migration register ******** ",  buf,  2u);
                      }

                      goto LABEL_304;
                    }
                  }

                  goto LABEL_306;
                }

                if (![v167 count])
                {
LABEL_269:
                  id v204 = v167;
                  double v167 = v168;
                  goto LABEL_270;
                }

                v5->_needsMigration = 1;
LABEL_268:
                -[IDSRegistration setRegistrationStatus:](v5, "setRegistrationStatus:", 8LL);
                goto LABEL_269;
              }

              uint64_t v182 = objc_opt_class(&OBJC_CLASS___NSData, v180);
              if ((objc_opt_isKindOfClass(v204, v182) & 1) == 0)
              {
                id v27 = 1;
LABEL_318:

                goto LABEL_319;
              }

              goto LABEL_292;
            }

            id v150 = objc_opt_class(&OBJC_CLASS___NSNumber, v148);
            if ((objc_opt_isKindOfClass(obj, v150) & 1) != 0) {
              goto LABEL_244;
            }
LABEL_249:
            id v27 = 1;
LABEL_322:

            uint64_t v138 = v6;
            uint64_t v6 = v117;
            goto LABEL_323;
          }

          id v146 = objc_opt_class(&OBJC_CLASS___NSString, v144);
          if ((objc_opt_isKindOfClass(obj, v146) & 1) == 0) {
            goto LABEL_249;
          }
          goto LABEL_237;
        }

LABEL_234:
        id v27 = 1;
        id v201 = v117;
LABEL_323:

        id v124 = v6;
        id v117 = v123;
        id v123 = v200;
        uint64_t v6 = v201;
        goto LABEL_225;
      }

void sub_1003A3B20( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1003A3B38(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1003A3B48(uint64_t a1)
{
}

void sub_1003A3B50(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  id v16 = a7;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a7);
  if ([v15 length])
  {
    id v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dsHandle]);
    id v18 = [v17 length];

    if (!v18)
    {
      id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        int v29 = 138412290;
        id v30 = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "  ** Fixed Self ID to be: %@",  (uint8_t *)&v29,  0xCu);
      }

      [*(id *)(a1 + 32) setDSHandle:v15];
    }
  }

  if ([v14 length])
  {
    BOOL v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) profileID]);
    id v21 = [v20 length];

    if (!v21)
    {
      unsigned int v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        int v29 = 138412290;
        id v30 = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "  ** Fixed Profile ID to be: %@",  (uint8_t *)&v29,  0xCu);
      }

      [*(id *)(a1 + 32) setProfileID:v14];
    }
  }

  uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v24 = IMTruncatedLoggingStringForString(v16);
    id v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
    uint64_t v27 = IMGetEnvironmentName(v25, v26);
    uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
    int v29 = 138413314;
    id v30 = v12;
    __int16 v31 = 2112;
    id v32 = v13;
    __int16 v33 = 2112;
    id v34 = v15;
    __int16 v35 = 2112;
    uint64_t v36 = v25;
    __int16 v37 = 2112;
    id v38 = v28;
    _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "Successfully fetched token for account (%@:%@:%@): %@  (Environment: %@)",  (uint8_t *)&v29,  0x34u);
  }
}

void sub_1003A4094(uint64_t a1, uint64_t a2, void *a3, void *a4, int a5)
{
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    id v11 = [*(id *)(a1 + 32) length];
    if (v11) {
      id v13 = @"updated";
    }
    else {
      id v13 = @"removed";
    }
    if (a5) {
      id v14 = @"YES";
    }
    else {
      id v14 = @"NO";
    }
    uint64_t v15 = IMGetEnvironmentName(v11, v12);
    id v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
    uint64_t v17 = *(void *)(a1 + 32);
    int v18 = 138413570;
    id v19 = v13;
    __int16 v20 = 2112;
    id v21 = v8;
    __int16 v22 = 2112;
    id v23 = v9;
    __int16 v24 = 2112;
    id v25 = v14;
    __int16 v26 = 2112;
    uint64_t v27 = v16;
    __int16 v28 = 2112;
    uint64_t v29 = v17;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Successfully %@ token for account (%@:%@): %@  (Environment: %@  New Token: %@)",  (uint8_t *)&v18,  0x3Eu);
  }
}

void sub_1003A4408(id a1, NSString *a2, NSString *a3, NSString *a4, BOOL a5)
{
  BOOL v5 = a5;
  __int16 v7 = a3;
  id v8 = a4;
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
  if (v10)
  {
    if (v5) {
      uint64_t v12 = @"YES";
    }
    else {
      uint64_t v12 = @"NO";
    }
    uint64_t v13 = IMGetEnvironmentName(v10, v11);
    id v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
    int v15 = 138413058;
    id v16 = v7;
    __int16 v17 = 2112;
    int v18 = v8;
    __int16 v19 = 2112;
    __int16 v20 = v12;
    __int16 v21 = 2112;
    __int16 v22 = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Successfully voided password for account (%@:%@): %@  (Environment: %@)",  (uint8_t *)&v15,  0x2Au);
  }
}

id sub_1003A5740(id a1, IDSCTSIM *a2)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(-[IDSCTSIM phoneNumber](a2, "phoneNumber"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 lowercaseString]);

  return v3;
}

id sub_1003A577C(id a1, IDSTemporaryPhoneUser *a2)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(-[IDSTemporaryPhoneUser phoneNumber](a2, "phoneNumber"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 lowercaseString]);

  return v3;
}

void sub_1003A64D0( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

  ;
}

uint64_t sub_1003A64FC(uint64_t a1, uint64_t a2)
{
  return objc_opt_class(a1, a2);
}

uint64_t sub_1003A6504(uint64_t a1, uint64_t a2)
{
  return objc_opt_class(v2, a2);
}

void sub_1003A65A4(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___IDSDeviceConnectionAWDMetrics);
  uint64_t v2 = (void *)qword_1009C0C58;
  qword_1009C0C58 = (uint64_t)v1;
}

void sub_1003A6994(uint64_t a1, uint64_t a2, void *a3)
{
  id v7 = a3;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:IDSDeviceConnectionAWDMetricsCreatedAtKey]);
  [v4 doubleValue];
  double v6 = v5;
}

void sub_1003A6A14(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int16 v31 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:IDSDeviceConnectionAWDMetricsServiceNameKey]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:IDSDeviceConnectionAWDMetricsSuccessKey]);
  id v5 = [v4 BOOLValue];

  id v30 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:IDSDeviceConnectionAWDMetricsClientInitKey]);
  double v6 = (void *)objc_claimAutoreleasedReturnValue( [v3 objectForKeyedSubscript:IDSDeviceConnectionAWDMetricsClientOpenSocketCompletionKey]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:IDSDeviceConnectionAWDMetricsDaemonOpenSocketKey]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:IDSDeviceConnectionAWDMetricsDaemonCompletionHandlerKey]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:IDSDeviceConnectionAWDMetricsFirstDataPacketReceiveKey]);
  BOOL v10 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:IDSDeviceConnectionAWDMetricsConnectionInitKey]);
  if ([*(id *)(a1 + 32) _canReportMetric:v3])
  {
    id v11 = [[IDSDeviceConnectionDurationEventMetric alloc] initWithService:v31 wasSuccessful:v5 clientInitTime:v30 clientOpenSocketCompletionTime:v6 daemonOpenSocketTime:v7 daemonOpenS ocketCompletionTime:v8 firstPacketReceiveTime:v9 connectionInitTime:v10];
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[IDSCoreAnalyticsLogger defaultLogger](&OBJC_CLASS___IDSCoreAnalyticsLogger, "defaultLogger"));
    [v12 logMetric:v11];

    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[IDSAWDLogging sharedInstance](&OBJC_CLASS___IDSAWDLogging, "sharedInstance"));
    [v13 IDSDeviceConnectionForService:v31 wasSuccessful:v5 clientInitTime:v30 clientOpenSocketCompletionTime:v6 daemonOpenSocketTime:v7 dae monOpenSocketCompletionTime:v8 firstPacketReceiveTime:v9 connectionInitTime:v10];

    uint64_t v14 = OSLogHandleForTransportCategory("IDSDeviceConnectionAWDMetrics");
    int v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v33 = v3;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Final Report - %@", buf, 0xCu);
    }

    uint64_t v17 = os_log_shim_legacy_logging_enabled(v16);
    if ((_DWORD)v17)
    {
      if (_IDSShouldLogTransport(v17))
      {
        _IDSLogTransport(@"IDSDeviceConnectionAWDMetrics", @"IDS", @"Final Report - %@");
      }
    }

    __int16 v19 = *(os_unfair_lock_s **)(a1 + 32);
    int v18 = (os_unfair_lock_s **)(a1 + 32);
    os_unfair_lock_lock(v19 + 4);
    __int16 v20 = *(void **)&(*v18)[2]._os_unfair_lock_opaque;
    __int16 v21 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:IDSDeviceConnectionAWDMetricsConnectionUUIDKey]);
    [v20 removeObjectForKey:v21];

    os_unfair_lock_unlock(*v18 + 4);
  }

  else
  {
    uint64_t v22 = OSLogHandleForTransportCategory("IDSDeviceConnectionAWDMetrics");
    id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v33 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "Final Report - %@, but there might be client side errors.",  buf,  0xCu);
    }

    uint64_t v25 = os_log_shim_legacy_logging_enabled(v24);
    if ((_DWORD)v25)
    {
      if (_IDSShouldLogTransport(v25))
      {
        _IDSLogTransport( @"IDSDeviceConnectionAWDMetrics",  @"IDS",  @"Final Report - %@, but there might be client side errors.");
        if (_IDSShouldLog(0LL, @"IDSDeviceConnectionAWDMetrics")) {
          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDeviceConnectionAWDMetrics",  @"Final Report - %@, but there might be client side errors.");
        }
      }
    }

    uint64_t v27 = *(os_unfair_lock_s **)(a1 + 32);
    __int16 v26 = (os_unfair_lock_s **)(a1 + 32);
    os_unfair_lock_lock(v27 + 4);
    __int16 v28 = *(void **)&(*v26)[2]._os_unfair_lock_opaque;
    uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:IDSDeviceConnectionAWDMetricsConnectionUUIDKey]);
    [v28 removeObjectForKey:v29];

    os_unfair_lock_unlock(*v26 + 4);
  }
}

void sub_1003A8360(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___IDSDServiceController);
  uint64_t v2 = (void *)qword_1009C0C68;
  qword_1009C0C68 = (uint64_t)v1;
}

void sub_1003A9580(_Unwind_Exception *a1)
{
}

uint64_t sub_1003A95CC(uint64_t result, int a2)
{
  if (a2) {
    *(_BYTE *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
  }
  return result;
}

BOOL sub_1003AA6D8(id a1, IDSServiceProperties *a2)
{
  return -[IDSServiceProperties wantsTinkerDevices](a2, "wantsTinkerDevices");
}

BOOL sub_1003AA724(id a1, IDSServiceProperties *a2)
{
  return -[IDSServiceProperties isFamilyService](a2, "isFamilyService");
}

BOOL sub_1003AA770(id a1, IDSServiceProperties *a2)
{
  return -[IDSServiceProperties requiresPinnedIdentity](a2, "requiresPinnedIdentity");
}

void sub_1003AADB0(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

void sub_1003AAEF4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1003AAF0C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1003AAF1C(uint64_t a1)
{
}

void sub_1003AAF24(uint64_t a1)
{
  v7.receiver = *(id *)(a1 + 32);
  v7.super_class = (Class)&OBJC_CLASS___IDSPairedDeviceRepository;
  id v2 = objc_msgSendSuper2(&v7, "description");
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  uint64_t v4 = objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@ %@",  v3,  *(void *)(*(void *)(a1 + 32) + 8LL)));
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8LL);
  double v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;
}

id sub_1003AB044(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _criticalLoadPairedDeviceArray:*(void *)(a1 + 40)];
}

void sub_1003AB384( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1003AB3A0(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _criticalPairedDeviceWithCBUUID:*(void *)(a1 + 40)]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

id sub_1003AB5B4(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cbuuid]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _criticalPairedDeviceWithCBUUID:v2]);
  if (v3)
  {
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog pairedDeviceRepo](&OBJC_CLASS___IMRGLog, "pairedDeviceRepo"));
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1006AB038();
    }

    id v5 = 0LL;
  }

  else
  {
    [*(id *)(a1 + 40) _criticalPutPairedDevice:*(void *)(a1 + 32)];
    id v5 = [*(id *)(a1 + 40) _criticalPersistState];
  }

  return v5;
}

id sub_1003AB8E0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _criticalRemovePairedDeviceWithCBUUID:*(void *)(a1 + 40)];
}

void sub_1003ABA54( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1003ABA6C(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _criticalAllPairedDevices]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1003ABBAC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void sub_1003ABBC4(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _criticalAllPairedDevices]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

BOOL sub_1003ABBFC(uint64_t a1, void *a2)
{
  return [a2 pairingType] == *(id *)(a1 + 32);
}

void sub_1003ABF40( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

BOOL sub_1003ABF60(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [*(id *)(a1 + 32) _criticalActivatePairedDeviceWithCBUUID:*(void *)(a1 + 40)];
  return *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) == 0LL;
}

id sub_1003AC054(uint64_t a1)
{
  return [*(id *)(a1 + 32) _criticalPersistState];
}

void sub_1003AC498( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1003AC4B0(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _criticalActivePairedDevice]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

id sub_1003AC6B4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _criticalPurgeSecuredEncryptionKeysForAllPairedDevices];
}

id sub_1003AC960(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _criticalUpdatePairedDeviceWithCBUUID:*(void *)(a1 + 40) deviceInfoPayload:*(void *)(a1 + 48)];
}

id sub_1003ACBD4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _criticalUpdatePairedDeviceWithCBUUID:*(void *)(a1 + 40) supportIPsec:*(unsigned __int8 *)(a1 + 48)];
}

id sub_1003ACFFC(uint64_t a1)
{
  LOWORD(v2) = *(_WORD *)(a1 + 92);
  return objc_msgSend( *(id *)(a1 + 32),  "_criticalUpdatePairedDeviceWithCBUUID:deviceUniqueID:buildVersion:productVersion:productName:pairingProtocolV ersion:minCompatibilityVersion:maxCompatibilityVersion:serviceMinCompatibilityVersion:",  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void *)(a1 + 64),  *(void *)(a1 + 72),  *(unsigned int *)(a1 + 80),  *(void *)(a1 + 84),  v2);
}

id sub_1003AD928(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _criticalUpdatePairedDeviceWithCBUUID:*(void *)(a1 + 40) pairingType:*(void *)(a1 + 48)];
}

id sub_1003ADC78(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _criticalUpdatePairedDeviceWithCBUUID:*(void *)(a1 + 40) iCloudURIs:*(void *)(a1 + 48) pushToken:*(void *)(a1 + 56)];
}

void sub_1003ADFE8(_Unwind_Exception *a1)
{
}

id sub_1003AE000(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _criticalPerformTransactionWithBlock:*(void *)(a1 + 40)];
  *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = (_BYTE)result;
  return result;
}

id sub_1003AEC20(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  double v6 = (void *)objc_claimAutoreleasedReturnValue([a2 objectForKey:v5]);
  if ((objc_opt_isKindOfClass(v6, a1) & 1) != 0)
  {
    id v7 = v6;
  }

  else
  {
    if (v6)
    {
      id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
      if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT)) {
        sub_1006AB554((uint64_t)v5, a1, v8);
      }
    }

    id v7 = 0LL;
  }

  return v7;
}

id sub_1003AECC8(id a1, id a2)
{
  id v2 = a2;
  uint64_t v4 = objc_opt_class(&OBJC_CLASS___NSString, v3);
  if ((objc_opt_isKindOfClass(v2, v4) & 1) != 0) {
    id v5 = v2;
  }
  else {
    id v5 = 0LL;
  }
  id v6 = v5;

  return v6;
}

void sub_1003AF674(uint64_t a1, void *a2, uint64_t a3)
{
  id v11 = a2;
  if (a3)
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    id v5 = objc_alloc(&OBJC_CLASS___ENGroupID);
    id v6 = objc_alloc(&OBJC_CLASS___ENStableGroupID);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v11 responseEngramID]);
    id v8 = [v6 initWithDataRepresentation:v7];
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v11 responseVersion]);
    BOOL v10 = -[ENGroupID initWithStableGroupID:generation:]( v5,  "initWithStableGroupID:generation:",  v8,  [v9 intValue]);

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
}

id sub_1003AF764(void *a1)
{
  id v1 = a1;
  if (qword_1009C0C78 != -1) {
    dispatch_once(&qword_1009C0C78, &stru_100902F88);
  }
  pthread_mutex_lock(&stru_1009C0C80);
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[IMSystemMonitor sharedInstance](&OBJC_CLASS___IMSystemMonitor, "sharedInstance"));
  unsigned int v3 = [v2 isUnderDataProtectionLock];

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[IMSystemMonitor sharedInstance](&OBJC_CLASS___IMSystemMonitor, "sharedInstance"));
  unsigned int v5 = [v4 isUnderFirstDataProtectionLock];

  id v6 = [v1 dataProtectionClass];
  int v7 = (int)v6;
  uint64_t v8 = IDSDataProtectionClassStringFromDataProtectionClass(v6);
  id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  BOOL v10 = (void *)objc_claimAutoreleasedReturnValue([(id)qword_1009C0C70 objectForKey:v9]);
  if (!v10)
  {
    if (v7 == 1) {
      unsigned int v11 = v3;
    }
    else {
      unsigned int v11 = 0;
    }
    if (v11 == 1 || (!v7 ? (unsigned int v12 = v5) : (unsigned int v12 = 0), v12 == 1))
    {
      pthread_mutex_unlock(&stru_1009C0C80);
      BOOL v10 = 0LL;
      goto LABEL_14;
    }

    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"IDSMessageStore-%@",  v9));
    BOOL v10 = (void *)CSDBCreateThreadedRecordStoreWithQOSClassAndLookAsideBufferConfig(v14, 0LL, 0x1F400000080LL, 1LL);
    [(id)qword_1009C0C70 setObject:v10 forKey:v9];
    int v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog dataProtectionClass](&OBJC_CLASS___IMRGLog, "dataProtectionClass"));
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v17 = qword_1009C0C70;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "SharedMessage store %@", buf, 0xCu);
    }
  }

  pthread_mutex_unlock(&stru_1009C0C80);
LABEL_14:

  return v10;
}

void sub_1003AF96C(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  id v2 = (void *)qword_1009C0C70;
  qword_1009C0C70 = (uint64_t)v1;

  pthread_mutex_init(&stru_1009C0C80, 0LL);
}

void sub_1003AF9A4(int a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = sub_1003AF764(v5);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  CSDBThreadedRecordStoreOwnsCurrentThread(v8, 1LL);

  id v9 = sub_1003AF764(v5);
  BOOL v10 = (void *)objc_claimAutoreleasedReturnValue(v9);

  if (v10)
  {
    id v11 = v5;
    unsigned int v12 = v6;
    uint64_t v13 = objc_autoreleasePoolPush();
    unsigned int v14 = [v11 dataProtectionClass];
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472LL;
    v21[2] = sub_1003B03D0;
    v21[3] = &unk_100902FE8;
    unsigned int v22 = v14;
    int v15 = objc_retainBlock(v21);
    uint64_t v16 = v15;
    if (!v12) {
      unsigned int v12 = objc_retainBlock(v15);
    }
    id v17 = sub_1003AF764(v11);
    uint64_t v18 = objc_claimAutoreleasedReturnValue(v17);
    __int16 v19 = (void *)v18;
    int v20 = 2 * (v14 == 2);
    if (v14 == 1) {
      int v20 = 1;
    }
    CSDBThreadedRecordStoreEnsureDatabaseSetupWithProtection( v18,  a1 != 0,  v12,  sub_1003B0524,  sub_1003B0574,  sub_1003B06F4,  sub_1003B074C,  10023LL,  v20,  &stru_100903008);

    objc_autoreleasePoolPop(v13);
  }
}

void sub_1003AFB28(void *a1, uint64_t a2, void *a3)
{
  id v5 = a1;
  id v6 = sub_1003AF764(a3);
  id v7 = (id)objc_claimAutoreleasedReturnValue(v6);
  CSDBPerformBlock(v7, v5, a2);
}

void sub_1003AFB84(void *a1, void *a2, double a3)
{
  id v5 = a1;
  id v6 = sub_1003AF764(a2);
  id v7 = (id)objc_claimAutoreleasedReturnValue(v6);
  CSDBPerformBlockAfterDelay(v7, v5, a3);
}

void sub_1003AFBE0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  [v5 ensureDatabaseIsInitialized];
  id v7 = sub_1003AF764(v5);
  id v8 = (id)objc_claimAutoreleasedReturnValue(v7);

  CSDBPerformLockedSectionUsingUnfairLock(v8, a1, v6);
}

void sub_1003AFC54(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = sub_1003AF764(a2);
  id v5 = (id)objc_claimAutoreleasedReturnValue(v4);
  CSDBPerformLockedSectionForRecordStoreWithoutInitialize(v5, v3);
}

void sub_1003AFCA0(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  [v3 ensureDatabaseIsInitialized];
  id v5 = sub_1003AF764(v3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);

  CSDBPerformLockedSectionForRecordStore(v6, v4);
}

void sub_1003AFD04(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  [v3 ensureDatabaseIsInitialized];
  id v5 = sub_1003AF764(v3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);

  CSDBPerformUnlockedSectionForRecordStore(v6, v4);
}

void sub_1003AFD68(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  [v3 ensureDatabaseIsInitialized];
  id v5 = sub_1003AF764(v3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);

  CSDBPerformLockedSectionForDatabase(v6, v4);
}

void sub_1003AFDCC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  [v5 ensureDatabaseIsInitialized];
  id v7 = sub_1003AF764(v5);
  id v8 = (id)objc_claimAutoreleasedReturnValue(v7);

  CSDBPerformLockedSectionForQueryForReading(v8, a1, v6);
}

void sub_1003AFE40(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  [v5 ensureDatabaseIsInitialized];
  id v7 = sub_1003AF764(v5);
  id v8 = (id)objc_claimAutoreleasedReturnValue(v7);

  CSDBPerformLockedSectionForQueryForWriting(v8, a1, v6);
}

void sub_1003AFEB4(id a1, CSDBRecordStore *a2)
{
}

void sub_1003AFEDC(void *a1)
{
  id v1 = a1;
  uint64_t v2 = OSLogHandleForIDSCategory("IDSDMessageStore");
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Saving database.", buf, 2u);
  }

  if (os_log_shim_legacy_logging_enabled(v4)
    && _IDSShouldLog(0LL, @"IDSDMessageStore"))
  {
    _IDSLogV(0LL, @"IDSFoundation", @"IDSDMessageStore", @"Saving database.");
  }

  sub_1003AFCA0(&stru_100902FA8, v1);
  id v5 = sub_1003AF764(v1);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

  if (v6)
  {
    uint64_t v7 = OSLogHandleForIDSCategory("IDSDMessageStore");
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Destroying database.", v16, 2u);
    }

    if (os_log_shim_legacy_logging_enabled(v9)
      && _IDSShouldLog(0LL, @"IDSDMessageStore"))
    {
      _IDSLogV(0LL, @"IDSFoundation", @"IDSDMessageStore", @"Destroying database.");
    }

    id v10 = sub_1003AF764(v1);
    id v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    CSDBThreadedRecordStoreTeardownDatabase();

    uint64_t v12 = OSLogHandleForIDSCategory("IDSDMessageStore");
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Closed database.", v15, 2u);
    }

    if (os_log_shim_legacy_logging_enabled(v14)
      && _IDSShouldLog(0LL, @"IDSDMessageStore"))
    {
      _IDSLogV(0LL, @"IDSFoundation", @"IDSDMessageStore", @"Closed database.");
    }
  }
}

void sub_1003B0120(void *a1)
{
}

void sub_1003B0130(id a1, CSDBRecordStore *a2)
{
}

uint64_t sub_1003B0250(uint64_t a1)
{
  id v1 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) filename]);
  uint64_t v2 = sub_1003B028C(v1, 0LL);

  return v2;
}

uint64_t sub_1003B028C(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = objc_autoreleasePoolPush();
  if (v4)
  {
    uint64_t v6 = objc_claimAutoreleasedReturnValue([v3 stringByAppendingPathComponent:v4]);

    id v3 = (id)v6;
  }

  id v7 = v3;
  id v8 = [v7 fileSystemRepresentation];
  uint64_t v9 = CSDBGetMobileUserUID();
  uint64_t v10 = CSDBGetMobileUserGID();
  CSDBCreateDirectoriesToPath(v8, v9, v10);
  uint64_t v11 = objc_claimAutoreleasedReturnValue([v7 stringByResolvingAndStandardizingPath]);

  objc_autoreleasePoolPop(v5);
  return v11;
}

uint64_t sub_1003B03D0(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 32);
  uint64_t v2 = objc_autoreleasePoolPush();
  uint64_t v4 = CSDBGetMobileUserDirectory(v2, v3);
  if (v4)
  {
    id v5 = objc_alloc(&OBJC_CLASS___NSString);
    uint64_t v6 = v5;
    if ((_DWORD)v1 == 2)
    {
      id v7 = -[NSString initWithFormat:](v5, "initWithFormat:", @"%@", @"ids.db");
    }

    else
    {
      uint64_t v8 = IDSDataProtectionClassStringFromDataProtectionClass(v1);
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"ids-%@.db", v9));
      id v7 = -[NSString initWithFormat:](v6, "initWithFormat:", @"%@", v10);
    }

    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v4));
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:",  v11,  @"/Library/IdentityServices/",  0LL));
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString pathWithComponents:](&OBJC_CLASS___NSString, "pathWithComponents:", v12));

    uint64_t v4 = sub_1003B028C(v13, v7);
  }

  objc_autoreleasePoolPop(v2);
  return v4;
}

uint64_t sub_1003B0524(uint64_t a1, uint64_t a2)
{
  return CSDBRecordStoreCreateTablesForClass(&off_100903168, a2, 0LL);
}

uint64_t sub_1003B0574(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = OSLogHandleForIDSCategory("IDSDMessageStore");
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Enabling WAL journal mode.", buf, 2u);
  }

  if (os_log_shim_legacy_logging_enabled(v5)
    && _IDSShouldLog(1LL, @"IDSDMessageStore"))
  {
    _IDSLogV(1LL, @"IDSFoundation", @"IDSDMessageStore", @"Enabling WAL journal mode.");
  }

  CSDBSqliteConnectionPerformSQL(a2, @"PRAGMA journal_mode = wal;");
  uint64_t v6 = OSLogHandleForIDSCategory("IDSDMessageStore");
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Enabling Foreign Key support.", v10, 2u);
  }

  if (os_log_shim_legacy_logging_enabled(v8)
    && _IDSShouldLog(1LL, @"IDSDMessageStore"))
  {
    _IDSLogV(1LL, @"IDSFoundation", @"IDSDMessageStore", @"Enabling Foreign Key support.");
  }

  return CSDBSqliteConnectionPerformSQL(a2, @"PRAGMA foreign_keys = ON;");
}

BOOL sub_1003B06F4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3 <= 0x2726) {
    _IMWarn(@"This DB can be migrated.");
  }
  return a3 < 0x2727;
}

uint64_t sub_1003B074C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  uint64_t v7 = OSLogHandleForIDSCategory("Database");
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    int v222 = a3;
    __int16 v223 = 1024;
    int v224 = 10023;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Beginning migration.  The IDS db is currently at v%d, upgrading to v%d.",  buf,  0xEu);
  }

  if (os_log_shim_legacy_logging_enabled(v9) && _IDSShouldLog(0LL, @"Database"))
  {
    uint64_t v219 = a3;
    uint64_t v220 = 10023LL;
    _IDSLogV( 0LL,  @"IDSFoundation",  @"Database",  @"Beginning migration.  The IDS db is currently at v%d, upgrading to v%d.");
  }

  CSDBSqliteConnectionCommit(a2);
  if ((CSDBSqliteDatabaseCheckIntegrity(a2) & 1) != 0)
  {
    uint64_t v10 = OSLogHandleForIDSCategory("IDSDMessageStore");
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Initial integrity check success", buf, 2u);
    }

    if (os_log_shim_legacy_logging_enabled(v12)
      && _IDSShouldLog(0LL, @"IDSDMessageStore"))
    {
      _IDSLogV(0LL, @"IDSFoundation", @"IDSDMessageStore", @"Initial integrity check success");
    }
  }

  else
  {
    uint64_t v13 = CSDBSqliteConnectionPerformSQL(a2, @"REINDEX");
    if ((_DWORD)v13 != 101 && (_DWORD)v13)
    {
      uint64_t v219 = v13;
      _IMWarn(@"Reindexing the DB failed with SQLite result: %d");
    }

    else
    {
      uint64_t v14 = OSLogHandleForIDSCategory("Database");
      int v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Reindexing the DB worked.", buf, 2u);
      }
    }

    if ((CSDBSqliteDatabaseCheckIntegrity(a2) & 1) != 0)
    {
      uint64_t v17 = OSLogHandleForIDSCategory("IDSDMessageStore");
      uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Post-reindex integrity check success",  buf,  2u);
      }

      if (os_log_shim_legacy_logging_enabled(v19)
        && _IDSShouldLog(0LL, @"IDSDMessageStore"))
      {
        _IDSLogV(0LL, @"IDSFoundation", @"IDSDMessageStore", @"Post-reindex integrity check success");
      }
    }

    else
    {
      int v20 = CSDBSqliteDatabaseVacuum(a2);
      if (v20 != 101 && v20)
      {
        _IMWarn(@"IDSDMessageStore vacuum failed!");
      }

      else
      {
        uint64_t v21 = OSLogHandleForIDSCategory("IDSDMessageStore");
        unsigned int v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Database vacuum success", buf, 2u);
        }

        if (os_log_shim_legacy_logging_enabled(v23)
          && _IDSShouldLog(0LL, @"IDSDMessageStore"))
        {
          _IDSLogV(0LL, @"IDSFoundation", @"IDSDMessageStore", @"Database vacuum success");
        }
      }

      if ((CSDBSqliteDatabaseCheckIntegrity(a2) & 1) != 0)
      {
        uint64_t v24 = OSLogHandleForIDSCategory("IDSDMessageStore");
        uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Final integrity check success", buf, 2u);
        }

        if (os_log_shim_legacy_logging_enabled(v26)
          && _IDSShouldLog(0LL, @"IDSDMessageStore"))
        {
          _IDSLogV(0LL, @"IDSFoundation", @"IDSDMessageStore", @"Final integrity check success");
        }
      }

      else
      {
        _IMWarn(@"IDSDMessageStore final integrity check failed!");
      }
    }
  }

  CSDBSqliteConnectionBegin(a2);
  unsigned int v27 = a3 >> 3;
  if (a3 >> 3 <= 0x4E4)
  {
    CSDBSqliteConnectionBeginTransactionType(a2, 2LL);
    if ((_DWORD)a3 == 7000)
    {
      CSDBSqliteDatabaseSetVersion(a1, 7000LL);
      uint64_t v28 = OSLogHandleForIDSCategory("IDSDMessageStore");
      uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "Adding fields to support iMessage on IDS",  buf,  2u);
      }

      if (os_log_shim_legacy_logging_enabled(v30)
        && _IDSShouldLog(0LL, @"IDSDMessageStore"))
      {
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDMessageStore",  @"Adding fields to support iMessage on IDS");
      }

      int v31 = sub_1003B3B08( a2,  @"Unable to drop legacy table",  @"Successfully dropped legacy table",  @"DROP TABLE outgoing_message");
      CSDBRecordStoreCreateTablesForClass(&off_1009030C8, a2, 0LL);
      if (!v31) {
        goto LABEL_425;
      }
      CSDBSqliteDatabaseSetVersion(a1, 7001LL);
    }

    else if (a3 >> 1 != 3500)
    {
      unsigned int v38 = a3 - 7000;
      goto LABEL_61;
    }

    CSDBSqliteDatabaseSetVersion(a1, 7001LL);
    uint64_t v34 = OSLogHandleForIDSCategory("IDSDMessageStore");
    __int16 v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEFAULT,  "Adding field to support sending iMessage from aliases",  buf,  2u);
    }

    if (os_log_shim_legacy_logging_enabled(v36)
      && _IDSShouldLog(0LL, @"IDSDMessageStore"))
    {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDMessageStore",  @"Adding field to support sending iMessage from aliases");
    }

    int v37 = sub_1003B3B08( a2,  @"Unable to drop legacy table",  @"Successfully dropped legacy table",  @"DROP TABLE outgoing_message");
    CSDBRecordStoreCreateTablesForClass(&off_1009030C8, a2, 0LL);
    if (!v37) {
      goto LABEL_425;
    }
    CSDBSqliteDatabaseSetVersion(a1, 7002LL);
    unsigned int v38 = a3 - 7000;
LABEL_61:
    CSDBSqliteDatabaseSetVersion(a1, 7002LL);
    uint64_t v39 = OSLogHandleForIDSCategory("IDSDMessageStore");
    __int128 v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEFAULT,  "Adding support for high priority messages",  buf,  2u);
    }

    if (os_log_shim_legacy_logging_enabled(v41)
      && _IDSShouldLog(0LL, @"IDSDMessageStore"))
    {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDMessageStore",  @"Adding support for high priority messages");
    }

    int v42 = sub_1003B3B08( a2,  @"Unable to drop legacy table",  @"Successfully dropped legacy table",  @"DROP TABLE outgoing_message");
    CSDBRecordStoreCreateTablesForClass(&off_1009030C8, a2, 0LL);
    if (!v42) {
      goto LABEL_425;
    }
    CSDBSqliteDatabaseSetVersion(a1, 7003LL);
LABEL_68:
    if (a3 >> 2 == 1750)
    {
      CSDBSqliteDatabaseSetVersion(a1, 7003LL);
      uint64_t v43 = OSLogHandleForIDSCategory("IDSDMessageStore");
      uint64_t v44 = (os_log_s *)objc_claimAutoreleasedReturnValue(v43);
      if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEFAULT,  "Flushing stale messages to enable database",  buf,  2u);
      }

      if (os_log_shim_legacy_logging_enabled(v45)
        && _IDSShouldLog(0LL, @"IDSDMessageStore"))
      {
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDMessageStore",  @"Flushing stale messages to enable database");
      }

      int v46 = sub_1003B3B08( a2,  @"Unable to drop legacy table",  @"Successfully dropped legacy table",  @"DROP TABLE outgoing_message");
      int v47 = sub_1003B3B08( a2,  @"Unable to drop legacy table",  @"Successfully dropped legacy table",  @"DROP TABLE incoming_message");
      CSDBRecordStoreCreateTablesForClass(&off_1009030C8, a2, 0LL);
      CSDBRecordStoreCreateTablesForClass(&off_100903028, a2, 0LL);
      if ((v46 & v47) == 0) {
        goto LABEL_425;
      }
      CSDBSqliteDatabaseSetVersion(a1, 7004LL);
    }

    if (v38 > 4)
    {
      if (v38 != 5)
      {
        if (v38 > 6) {
          goto LABEL_100;
        }
        goto LABEL_93;
      }
    }

    else
    {
      CSDBSqliteDatabaseSetVersion(a1, 7004LL);
      uint64_t v48 = OSLogHandleForIDSCategory("IDSDMessageStore");
      id v49 = (os_log_s *)objc_claimAutoreleasedReturnValue(v48);
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_DEFAULT,  "Flushing potentially old stale messages",  buf,  2u);
      }

      if (os_log_shim_legacy_logging_enabled(v50)
        && _IDSShouldLog(0LL, @"IDSDMessageStore"))
      {
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDMessageStore",  @"Flushing potentially old stale messages");
      }

      int v51 = sub_1003B3B08( a2,  @"Unable to drop legacy table",  @"Successfully dropped legacy table",  @"DROP TABLE outgoing_message");
      int v52 = sub_1003B3B08( a2,  @"Unable to drop legacy table",  @"Successfully dropped legacy table",  @"DROP TABLE incoming_message");
      CSDBRecordStoreCreateTablesForClass(&off_1009030C8, a2, 0LL);
      CSDBRecordStoreCreateTablesForClass(&off_100903028, a2, 0LL);
      if ((v51 & v52) == 0) {
        goto LABEL_425;
      }
      CSDBSqliteDatabaseSetVersion(a1, 7005LL);
    }

    CSDBSqliteDatabaseSetVersion(a1, 7005LL);
    uint64_t v53 = OSLogHandleForIDSCategory("IDSDMessageStore");
    id v54 = (os_log_s *)objc_claimAutoreleasedReturnValue(v53);
    if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_DEFAULT,  "Updating outgoing_message to have all needed fields",  buf,  2u);
    }

    if (os_log_shim_legacy_logging_enabled(v55)
      && _IDSShouldLog(0LL, @"IDSDMessageStore"))
    {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDMessageStore",  @"Updating outgoing_message to have all needed fields");
    }

    int v56 = sub_1003B3B08( a2,  @"Unable to drop legacy table",  @"Successfully dropped legacy table",  @"DROP TABLE outgoing_message");
    CSDBRecordStoreCreateTablesForClass(&off_1009030C8, a2, 0LL);
    if (!v56) {
      goto LABEL_425;
    }
    CSDBSqliteDatabaseSetVersion(a1, 7006LL);
LABEL_93:
    CSDBSqliteDatabaseSetVersion(a1, 7006LL);
    uint64_t v57 = OSLogHandleForIDSCategory("IDSDMessageStore");
    id v58 = (os_log_s *)objc_claimAutoreleasedReturnValue(v57);
    if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v58,  OS_LOG_TYPE_DEFAULT,  "Updating outgoing_message to have is_sent column",  buf,  2u);
    }

    if (os_log_shim_legacy_logging_enabled(v59)
      && _IDSShouldLog(0LL, @"IDSDMessageStore"))
    {
      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDMessageStore",  @"Updating outgoing_message to have is_sent column");
    }

    int v60 = sub_1003B3B08( a2,  @"Unable to drop legacy table",  @"Successfully dropped legacy table",  @"DROP TABLE outgoing_message");
    CSDBRecordStoreCreateTablesForClass(&off_1009030C8, a2, 0LL);
    if (!v60) {
      goto LABEL_425;
    }
    CSDBSqliteDatabaseSetVersion(a1, 7007LL);
LABEL_100:
    if (v27 == 875)
    {
      CSDBSqliteDatabaseSetVersion(a1, 7007LL);
      uint64_t v61 = OSLogHandleForIDSCategory("IDSDMessageStore");
      double v62 = (os_log_s *)objc_claimAutoreleasedReturnValue(v61);
      if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v62,  OS_LOG_TYPE_DEFAULT,  "Updating outgoing_message to have new send types and options.",  buf,  2u);
      }

      if (os_log_shim_legacy_logging_enabled(v63)
        && _IDSShouldLog(0LL, @"IDSDMessageStore"))
      {
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDMessageStore",  @"Updating outgoing_message to have new send types and options.");
      }

      int v64 = sub_1003B3B08( a2,  @"Unable to drop legacy table",  @"Successfully dropped legacy table",  @"DROP TABLE outgoing_message");
      CSDBRecordStoreCreateTablesForClass(&off_1009030C8, a2, 0LL);
      if (!v64) {
        goto LABEL_425;
      }
      CSDBSqliteDatabaseSetVersion(a1, 8000LL);
    }

    if (v38 > 0x3E8)
    {
      if (v38 != 1001)
      {
        if (v38 > 0x3EA)
        {
          if (v38 != 1003)
          {
            if (v38 > 0x3EC)
            {
              if (v38 != 1005)
              {
                if (v38 > 0x3EE)
                {
                  if (v38 != 1007)
                  {
                    if (v38 > 0x3F0)
                    {
                      if (v38 != 1009)
                      {
                        if (v38 > 0x3F2)
                        {
                          if (v38 != 1011)
                          {
                            if (v38 > 0x3F4)
                            {
                              if (v38 != 1013)
                              {
                                if (v38 > 0x3F6)
                                {
                                  if (v38 > 0x7D1)
                                  {
                                    if (v38 != 2002)
                                    {
                                      if (v38 > 0xBB9)
                                      {
                                        if (v38 != 3002)
                                        {
                                          if (v38 > 0xBBB)
                                          {
                                            if (v38 != 3004)
                                            {
                                              if (v38 > 0xBBD)
                                              {
                                                if (v38 != 3006)
                                                {
                                                  if (v38 > 0xBBF)
                                                  {
                                                    if (v38 != 3008)
                                                    {
                                                      if (v38 > 0xBC1)
                                                      {
                                                        if (v38 != 3010)
                                                        {
                                                          if (v38 > 0xBC3)
                                                          {
                                                            if (v38 != 3012)
                                                            {
                                                              if (v38 > 0xBC9)
                                                              {
                                                                if (v38 != 3018)
                                                                {
                                                                  if (v38 > 0xBCB)
                                                                  {
                                                                    if (v38 != 3020)
                                                                    {
                                                                      if (v38 > 0xBCD)
                                                                      {
                                                                        if (v38 != 3022) {
                                                                          goto LABEL_392;
                                                                        }
LABEL_385:
                                                                        CSDBSqliteDatabaseSetVersion(a1, 10022LL);
                                                                        uint64_t v215 = OSLogHandleForIDSCategory("IDSDMessageStore");
                                                                        uint64_t v216 = (os_log_s *)objc_claimAutoreleasedReturnValue(v215);
                                                                        if (os_log_type_enabled( v216,  OS_LOG_TYPE_DEFAULT))
                                                                        {
                                                                          *(_WORD *)buf = 0;
                                                                          _os_log_impl( (void *)&_mh_execute_header,  v216,  OS_LOG_TYPE_DEFAULT,  "Add delivery_minimum_time column to outgoing_message",  buf,  2u);
                                                                        }

                                                                        if (os_log_shim_legacy_logging_enabled(v217)
                                                                          && _IDSShouldLog( 0LL,  @"IDSDMessageStore"))
                                                                        {
                                                                          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDMessageStore",  @"Add delivery_minimum_time column to outgoing_message");
                                                                        }

                                                                        if ((sub_1003B3CB0( a2,  @"delivery_minimum_time",  @"INTEGER DEFAULT 0",  @"outgoing_message") & 1) != 0)
                                                                        {
                                                                          CSDBSqliteDatabaseSetVersion(a1, 10023LL);
LABEL_392:
                                                                          CSDBSqliteConnectionCommit(a2);
                                                                          CSDBSqliteConnectionPerformSQL( a2,  @"vacuum");
                                                                          uint64_t v32 = 0LL;
                                                                          goto LABEL_51;
                                                                        }

LABEL_425:
                                                                        CSDBSqliteConnectionCommit(a2);
                                                                        uint64_t v32 = 2LL;
                                                                        goto LABEL_426;
                                                                      }

LABEL_356:
                                                                    CSDBSqliteDatabaseSetVersion(a1, 10020LL);
                                                                    uint64_t v197 = OSLogHandleForIDSCategory("IDSDMessageStore");
                                                                    id v198 = (os_log_s *)objc_claimAutoreleasedReturnValue(v197);
                                                                    if (os_log_type_enabled(v198, OS_LOG_TYPE_DEFAULT))
                                                                    {
                                                                      *(_WORD *)buf = 0;
                                                                      _os_log_impl( (void *)&_mh_execute_header,  v198,  OS_LOG_TYPE_DEFAULT,  "Add expiration_date column to incoming_message",  buf,  2u);
                                                                    }

                                                                    if (os_log_shim_legacy_logging_enabled(v199)
                                                                      && _IDSShouldLog( 0LL,  @"IDSDMessageStore"))
                                                                    {
                                                                      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDMessageStore",  @"Add expiration_date column to incoming_message");
                                                                    }

                                                                    int v200 = sub_1003B3CB0( a2,  @"expiration_date",  @"INTEGER DEFAULT 0",  @"incoming_message");
                                                                    uint64_t v201 = OSLogHandleForIDSCategory("IDSDMessageStore");
                                                                    id v202 = (os_log_s *)objc_claimAutoreleasedReturnValue(v201);
                                                                    if (os_log_type_enabled(v202, OS_LOG_TYPE_DEFAULT))
                                                                    {
                                                                      *(_WORD *)buf = 0;
                                                                      _os_log_impl( (void *)&_mh_execute_header,  v202,  OS_LOG_TYPE_DEFAULT,  "Add control_category column to incoming_message",  buf,  2u);
                                                                    }

                                                                    if (os_log_shim_legacy_logging_enabled(v203)
                                                                      && _IDSShouldLog( 0LL,  @"IDSDMessageStore"))
                                                                    {
                                                                      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDMessageStore",  @"Add control_category column to incoming_message");
                                                                    }

                                                                    if ((v200 & sub_1003B3CB0( a2,  @"control_category",  @"INTEGER DEFAULT 0",  @"incoming_message")) != 1) {
                                                                      goto LABEL_425;
                                                                    }
                                                                    CSDBSqliteDatabaseSetVersion(a1, 10021LL);
                                                                    goto LABEL_368;
                                                                  }

LABEL_339:
                                                                  CSDBSqliteDatabaseSetVersion(a1, 10019LL);
                                                                  uint64_t v186 = OSLogHandleForIDSCategory("IDSDMessageStore");
                                                                  int v187 = (os_log_s *)objc_claimAutoreleasedReturnValue(v186);
                                                                  if (os_log_type_enabled(v187, OS_LOG_TYPE_DEFAULT))
                                                                  {
                                                                    *(_WORD *)buf = 0;
                                                                    _os_log_impl( (void *)&_mh_execute_header,  v187,  OS_LOG_TYPE_DEFAULT,  "Add send_mode column to outgoing_message",  buf,  2u);
                                                                  }

                                                                  if (os_log_shim_legacy_logging_enabled(v188)
                                                                    && _IDSShouldLog( 0LL,  @"IDSDMessageStore"))
                                                                  {
                                                                    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDMessageStore",  @"Add send_mode column to outgoing_message");
                                                                  }

                                                                  int v189 = sub_1003B3CB0( a2,  @"send_mode",  @"INTEGER DEFAULT 0",  @"outgoing_message");
                                                                  uint64_t v190 = OSLogHandleForIDSCategory("IDSDMessageStore");
                                                                  id v191 = (os_log_s *)objc_claimAutoreleasedReturnValue(v190);
                                                                  if (os_log_type_enabled(v191, OS_LOG_TYPE_DEFAULT))
                                                                  {
                                                                    *(_WORD *)buf = 0;
                                                                    _os_log_impl( (void *)&_mh_execute_header,  v191,  OS_LOG_TYPE_DEFAULT,  "Add kt_uri_verification_map column to outgoing_message",  buf,  2u);
                                                                  }

                                                                  if (os_log_shim_legacy_logging_enabled(v192)
                                                                    && _IDSShouldLog( 0LL,  @"IDSDMessageStore"))
                                                                  {
                                                                    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDMessageStore",  @"Add kt_uri_verification_map column to outgoing_message");
                                                                  }

                                                                  int v193 = sub_1003B3CB0( a2,  @"kt_uri_verification_map",  @"BLOB",  @"outgoing_message");
                                                                  uint64_t v194 = OSLogHandleForIDSCategory("IDSDMessageStore");
                                                                  id v195 = (os_log_s *)objc_claimAutoreleasedReturnValue(v194);
                                                                  if (os_log_type_enabled(v195, OS_LOG_TYPE_DEFAULT))
                                                                  {
                                                                    *(_WORD *)buf = 0;
                                                                    _os_log_impl( (void *)&_mh_execute_header,  v195,  OS_LOG_TYPE_DEFAULT,  "Add wants_firewall_donation column to outgoing_message",  buf,  2u);
                                                                  }

                                                                  if (os_log_shim_legacy_logging_enabled(v196)
                                                                    && _IDSShouldLog( 0LL,  @"IDSDMessageStore"))
                                                                  {
                                                                    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDMessageStore",  @"Add wants_firewall_donation column to outgoing_message");
                                                                  }

                                                                  CSDBSqliteDatabaseSetVersion(a1, 10020LL);
                                                                  goto LABEL_356;
                                                                }

LABEL_327:
                                                                CSDBSqliteDatabaseSetVersion(a1, 10018LL);
                                                                uint64_t v179 = OSLogHandleForIDSCategory("IDSDMessageStore");
                                                                id v180 = (os_log_s *)objc_claimAutoreleasedReturnValue(v179);
                                                                if (os_log_type_enabled(v180, OS_LOG_TYPE_DEFAULT))
                                                                {
                                                                  *(_WORD *)buf = 0;
                                                                  _os_log_impl( (void *)&_mh_execute_header,  v180,  OS_LOG_TYPE_DEFAULT,  "Add send_mode column to outgoing_message",  buf,  2u);
                                                                }

                                                                if (os_log_shim_legacy_logging_enabled(v181)
                                                                  && _IDSShouldLog( 0LL,  @"IDSDMessageStore"))
                                                                {
                                                                  _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDMessageStore",  @"Add send_mode column to outgoing_message");
                                                                }

                                                                int v182 = sub_1003B3CB0( a2,  @"send_mode",  @"INTEGER DEFAULT 0",  @"outgoing_message");
                                                                uint64_t v183 = OSLogHandleForIDSCategory("IDSDMessageStore");
                                                                v184 = (os_log_s *)objc_claimAutoreleasedReturnValue(v183);
                                                                if (os_log_type_enabled(v184, OS_LOG_TYPE_DEFAULT))
                                                                {
                                                                  *(_WORD *)buf = 0;
                                                                  _os_log_impl( (void *)&_mh_execute_header,  v184,  OS_LOG_TYPE_DEFAULT,  "Add wants_firewall_donation column to outgoing_message",  buf,  2u);
                                                                }

                                                                if (os_log_shim_legacy_logging_enabled(v185)
                                                                  && _IDSShouldLog( 0LL,  @"IDSDMessageStore"))
                                                                {
                                                                  _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDMessageStore",  @"Add wants_firewall_donation column to outgoing_message");
                                                                }

                                                                if ((v182 & sub_1003B3CB0( a2,  @"wants_firewall_donation",  @"INTEGER DEFAULT 0",  @"outgoing_message")) != 1) {
                                                                  goto LABEL_425;
                                                                }
                                                                CSDBSqliteDatabaseSetVersion(a1, 10019LL);
                                                                goto LABEL_339;
                                                              }

LABEL_315:
                                                              CSDBSqliteDatabaseSetVersion(a1, 10017LL);
                                                              uint64_t v172 = OSLogHandleForIDSCategory("IDSDMessageStore");
                                                              __int128 v173 = (os_log_s *)objc_claimAutoreleasedReturnValue(v172);
                                                              if (os_log_type_enabled(v173, OS_LOG_TYPE_DEFAULT))
                                                              {
                                                                *(_WORD *)buf = 0;
                                                                _os_log_impl( (void *)&_mh_execute_header,  v173,  OS_LOG_TYPE_DEFAULT,  "Add send_mode column to outgoing_message",  buf,  2u);
                                                              }

                                                              if (os_log_shim_legacy_logging_enabled(v174)
                                                                && _IDSShouldLog( 0LL,  @"IDSDMessageStore"))
                                                              {
                                                                _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDMessageStore",  @"Add send_mode column to outgoing_message");
                                                              }

                                                              int v175 = sub_1003B3CB0( a2,  @"send_mode",  @"INTEGER DEFAULT 0",  @"outgoing_message");
                                                              uint64_t v176 = OSLogHandleForIDSCategory("IDSDMessageStore");
                                                              id v177 = (os_log_s *)objc_claimAutoreleasedReturnValue(v176);
                                                              if (os_log_type_enabled(v177, OS_LOG_TYPE_DEFAULT))
                                                              {
                                                                *(_WORD *)buf = 0;
                                                                _os_log_impl( (void *)&_mh_execute_header,  v177,  OS_LOG_TYPE_DEFAULT,  "Add kt_uri_verification_map column to outgoing_message",  buf,  2u);
                                                              }

                                                              if (os_log_shim_legacy_logging_enabled(v178)
                                                                && _IDSShouldLog( 0LL,  @"IDSDMessageStore"))
                                                              {
                                                                _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDMessageStore",  @"Add kt_uri_verification_map column to outgoing_message");
                                                              }

                                                              if ((v175 & sub_1003B3CB0( a2,  @"kt_uri_verification_map",  @"BLOB",  @"outgoing_message")) != 1) {
                                                                goto LABEL_425;
                                                              }
                                                              CSDBSqliteDatabaseSetVersion(a1, 10018LL);
                                                              goto LABEL_327;
                                                            }

LABEL_308:
                                                            CSDBSqliteDatabaseSetVersion(a1, 10012LL);
                                                            uint64_t v169 = OSLogHandleForIDSCategory("IDSDMessageStore");
                                                            __int128 v170 = (os_log_s *)objc_claimAutoreleasedReturnValue(v169);
                                                            if (os_log_type_enabled(v170, OS_LOG_TYPE_DEFAULT))
                                                            {
                                                              *(_WORD *)buf = 0;
                                                              _os_log_impl( (void *)&_mh_execute_header,  v170,  OS_LOG_TYPE_DEFAULT,  "Add send_mode column to outgoing_message",  buf,  2u);
                                                            }

                                                            if (os_log_shim_legacy_logging_enabled(v171)
                                                              && _IDSShouldLog( 0LL,  @"IDSDMessageStore"))
                                                            {
                                                              _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDMessageStore",  @"Add send_mode column to outgoing_message");
                                                            }

                                                            if (!sub_1003B3CB0( a2,  @"send_mode",  @"INTEGER DEFAULT 0",  @"outgoing_message")) {
                                                              goto LABEL_425;
                                                            }
                                                            CSDBSqliteDatabaseSetVersion(a1, 10017LL);
                                                            goto LABEL_315;
                                                          }

LABEL_294:
                                                        CSDBSqliteDatabaseSetVersion(a1, 10010LL);
                                                        uint64_t v163 = OSLogHandleForIDSCategory("IDSDMessageStore");
                                                        __int16 v164 = (os_log_s *)objc_claimAutoreleasedReturnValue(v163);
                                                        if (os_log_type_enabled(v164, OS_LOG_TYPE_DEFAULT))
                                                        {
                                                          *(_WORD *)buf = 0;
                                                          _os_log_impl( (void *)&_mh_execute_header,  v164,  OS_LOG_TYPE_DEFAULT,  "Dropping old bypass_duet messages",  buf,  2u);
                                                        }

                                                        if (os_log_shim_legacy_logging_enabled(v165)
                                                          && _IDSShouldLog(0LL, @"IDSDMessageStore"))
                                                        {
                                                          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDMessageStore",  @"Dropping old bypass_duet messages");
                                                        }

                                                        if (!sub_1003B3B08( a2,  @"Unable to drop bypass_duet messages",  @"Successfully dropped bypass_duet messages",  @"DELETE FROM outgoing_message where bypass_duet = 1;")) {
                                                          goto LABEL_425;
                                                        }
                                                        CSDBSqliteDatabaseSetVersion(a1, 10011LL);
                                                        goto LABEL_301;
                                                      }

LABEL_280:
                                                    CSDBSqliteDatabaseSetVersion(a1, 10008LL);
                                                    uint64_t v156 = OSLogHandleForIDSCategory("IDSDMessageStore");
                                                    id v157 = (os_log_s *)objc_claimAutoreleasedReturnValue(v156);
                                                    if (os_log_type_enabled(v157, OS_LOG_TYPE_DEFAULT))
                                                    {
                                                      *(_WORD *)buf = 0;
                                                      _os_log_impl( (void *)&_mh_execute_header,  v157,  OS_LOG_TYPE_DEFAULT,  "Add originalTimestamp column to outgoing_message",  buf,  2u);
                                                    }

                                                    if (os_log_shim_legacy_logging_enabled(v158)
                                                      && _IDSShouldLog(0LL, @"IDSDMessageStore"))
                                                    {
                                                      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDMessageStore",  @"Add originalTimestamp column to outgoing_message");
                                                    }

                                                    if (!sub_1003B3CB0( a2,  @"original_timestamp",  @"INTEGER DEFAULT 0",  @"outgoing_message")) {
                                                      goto LABEL_425;
                                                    }
                                                    CSDBSqliteDatabaseSetVersion(a1, 10009LL);
                                                    goto LABEL_287;
                                                  }

LABEL_273:
                                                  CSDBSqliteDatabaseSetVersion(a1, 10007LL);
                                                  uint64_t v153 = OSLogHandleForIDSCategory("IDSDMessageStore");
                                                  double v154 = (os_log_s *)objc_claimAutoreleasedReturnValue(v153);
                                                  if (os_log_type_enabled(v154, OS_LOG_TYPE_DEFAULT))
                                                  {
                                                    *(_WORD *)buf = 0;
                                                    _os_log_impl( (void *)&_mh_execute_header,  v154,  OS_LOG_TYPE_DEFAULT,  "Add wantsCertifiedDelivery column to outgoing_message",  buf,  2u);
                                                  }

                                                  if (os_log_shim_legacy_logging_enabled(v155)
                                                    && _IDSShouldLog(0LL, @"IDSDMessageStore"))
                                                  {
                                                    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDMessageStore",  @"Add wantsCertifiedDelivery column to outgoing_message");
                                                  }

                                                  if (!sub_1003B3CB0( a2,  @"wants_certified_delivery",  @"INTEGER DEFAULT 0",  @"outgoing_message")) {
                                                    goto LABEL_425;
                                                  }
                                                  CSDBSqliteDatabaseSetVersion(a1, 10008LL);
                                                  goto LABEL_280;
                                                }

LABEL_266:
                                                CSDBSqliteDatabaseSetVersion(a1, 10006LL);
                                                uint64_t v150 = OSLogHandleForIDSCategory("IDSDMessageStore");
                                                id v151 = (os_log_s *)objc_claimAutoreleasedReturnValue(v150);
                                                if (os_log_type_enabled(v151, OS_LOG_TYPE_DEFAULT))
                                                {
                                                  *(_WORD *)buf = 0;
                                                  _os_log_impl( (void *)&_mh_execute_header,  v151,  OS_LOG_TYPE_DEFAULT,  "Add ignoreMaxRetryCount column to outgoing_message",  buf,  2u);
                                                }

                                                if (os_log_shim_legacy_logging_enabled(v152)
                                                  && _IDSShouldLog(0LL, @"IDSDMessageStore"))
                                                {
                                                  _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDMessageStore",  @"Add ignoreMaxRetryCount column to outgoing_message");
                                                }

                                                if (!sub_1003B3CB0( a2,  @"ignore_max_retry_count",  @"INTEGER DEFAULT 0",  @"outgoing_message")) {
                                                  goto LABEL_425;
                                                }
                                                CSDBSqliteDatabaseSetVersion(a1, 10007LL);
                                                goto LABEL_273;
                                              }

LABEL_259:
                                              CSDBSqliteDatabaseSetVersion(a1, 10005LL);
                                              uint64_t v147 = OSLogHandleForIDSCategory("IDSDMessageStore");
                                              id v148 = (os_log_s *)objc_claimAutoreleasedReturnValue(v147);
                                              if (os_log_type_enabled(v148, OS_LOG_TYPE_DEFAULT))
                                              {
                                                *(_WORD *)buf = 0;
                                                _os_log_impl( (void *)&_mh_execute_header,  v148,  OS_LOG_TYPE_DEFAULT,  "Add wants progress column to outgoing_message",  buf,  2u);
                                              }

                                              if (os_log_shim_legacy_logging_enabled(v149)
                                                && _IDSShouldLog(0LL, @"IDSDMessageStore"))
                                              {
                                                _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDMessageStore",  @"Add wants progress column to outgoing_message");
                                              }

                                              if (!sub_1003B3CB0( a2,  @"wants_progress",  @"INTEGER DEFAULT 0",  @"outgoing_message")) {
                                                goto LABEL_425;
                                              }
                                              CSDBSqliteDatabaseSetVersion(a1, 10006LL);
                                              goto LABEL_266;
                                            }

LABEL_245:
                                          CSDBSqliteDatabaseSetVersion(a1, 10003LL);
                                          uint64_t v139 = OSLogHandleForIDSCategory("IDSDMessageStore");
                                          id v140 = (os_log_s *)objc_claimAutoreleasedReturnValue(v139);
                                          if (os_log_type_enabled(v140, OS_LOG_TYPE_DEFAULT))
                                          {
                                            *(_WORD *)buf = 0;
                                            _os_log_impl( (void *)&_mh_execute_header,  v140,  OS_LOG_TYPE_DEFAULT,  "Add nonCloudWaking column to outgoing_message",  buf,  2u);
                                          }

                                          if (os_log_shim_legacy_logging_enabled(v141)
                                            && _IDSShouldLog(0LL, @"IDSDMessageStore"))
                                          {
                                            _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDMessageStore",  @"Add nonCloudWaking column to outgoing_message");
                                          }

                                          if (!sub_1003B3CB0( a2,  @"non_cloud_waking",  @"INTEGER DEFAULT 0",  @"outgoing_message")) {
                                            goto LABEL_425;
                                          }
                                          CSDBSqliteDatabaseSetVersion(a1, 10004LL);
                                          goto LABEL_252;
                                        }

LABEL_238:
                                        CSDBSqliteDatabaseSetVersion(a1, 10002LL);
                                        uint64_t v136 = OSLogHandleForIDSCategory("IDSDMessageStore");
                                        id v137 = (os_log_s *)objc_claimAutoreleasedReturnValue(v136);
                                        if (os_log_type_enabled(v137, OS_LOG_TYPE_DEFAULT))
                                        {
                                          *(_WORD *)buf = 0;
                                          _os_log_impl( (void *)&_mh_execute_header,  v137,  OS_LOG_TYPE_DEFAULT,  "Add skip_self column to outgoing_message",  buf,  2u);
                                        }

                                        if (os_log_shim_legacy_logging_enabled(v138)
                                          && _IDSShouldLog(0LL, @"IDSDMessageStore"))
                                        {
                                          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDMessageStore",  @"Add skip_self column to outgoing_message");
                                        }

                                        if (!sub_1003B3CB0( a2,  @"skip_self",  @"INTEGER DEFAULT 0",  @"outgoing_message")) {
                                          goto LABEL_425;
                                        }
                                        CSDBSqliteDatabaseSetVersion(a1, 10003LL);
                                        goto LABEL_245;
                                      }

LABEL_231:
                                      CSDBSqliteDatabaseSetVersion(a1, 10001LL);
                                      uint64_t v129 = OSLogHandleForIDSCategory("IDSDMessageStore");
                                      id v130 = (os_log_s *)objc_claimAutoreleasedReturnValue(v129);
                                      if (os_log_type_enabled(v130, OS_LOG_TYPE_DEFAULT))
                                      {
                                        *(_WORD *)buf = 0;
                                        _os_log_impl( (void *)&_mh_execute_header,  v130,  OS_LOG_TYPE_DEFAULT,  "Setting a reasonable timeout on messages which are missing them",  buf,  2u);
                                      }

                                      if (os_log_shim_legacy_logging_enabled(v131)
                                        && _IDSShouldLog(0LL, @"IDSDMessageStore"))
                                      {
                                        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDMessageStore",  @"Setting a reasonable timeout on messages which are missing them");
                                      }

                                      id v132 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date", v219, v220));
                                      id v133 = (void *)objc_claimAutoreleasedReturnValue([v132 dateByAddingTimeInterval:172800.0]);

                                      [v133 timeIntervalSinceReferenceDate];
                                      id v135 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"UPDATE outgoing_message SET expiration_date = %lld WHERE expiration_date = 0;",
                                                         (uint64_t)v134));
                                      if (!sub_1003B3B08( a2,  @"Unable to set expiration date on messages",  @"Successfully added expiration date on messages",  v135))
                                      {

                                        goto LABEL_425;
                                      }

                                      CSDBSqliteDatabaseSetVersion(a1, 10002LL);

                                      goto LABEL_238;
                                    }

LABEL_217:
                                  CSDBSqliteDatabaseSetVersion(a1, 9001LL);
                                  uint64_t v121 = OSLogHandleForIDSCategory("IDSDMessageStore");
                                  id v122 = (os_log_s *)objc_claimAutoreleasedReturnValue(v121);
                                  if (os_log_type_enabled(v122, OS_LOG_TYPE_DEFAULT))
                                  {
                                    *(_WORD *)buf = 0;
                                    _os_log_impl( (void *)&_mh_execute_header,  v122,  OS_LOG_TYPE_DEFAULT,  "Add pending_delete column to outgoing_message",  buf,  2u);
                                  }

                                  if (os_log_shim_legacy_logging_enabled(v123)
                                    && _IDSShouldLog(0LL, @"IDSDMessageStore"))
                                  {
                                    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDMessageStore",  @"Add pending_delete column to outgoing_message");
                                  }

                                  int v124 = sub_1003B3CB0( a2,  @"pending_delete",  @"INTEGER DEFAULT 0",  @"outgoing_message");
                                  int v125 = sub_1003B3CB0( a2,  @"local_destination_device_uuid",  @"TEXT",  @"outgoing_message");
                                  if ((v124 & v125 & sub_1003B3CB0( a2,  @"enqueued_date",  @"INTEGER DEFAULT 0",  @"outgoing_message")) != 1) {
                                    goto LABEL_425;
                                  }
                                  CSDBSqliteDatabaseSetVersion(a1, 9002LL);
                                  goto LABEL_224;
                                }

LABEL_210:
                                CSDBSqliteDatabaseSetVersion(a1, 8014LL);
                                uint64_t v118 = OSLogHandleForIDSCategory("IDSDMessageStore");
                                id v119 = (os_log_s *)objc_claimAutoreleasedReturnValue(v118);
                                if (os_log_type_enabled(v119, OS_LOG_TYPE_DEFAULT))
                                {
                                  *(_WORD *)buf = 0;
                                  _os_log_impl( (void *)&_mh_execute_header,  v119,  OS_LOG_TYPE_DEFAULT,  "Add main_account_guid column to outgoing_message",  buf,  2u);
                                }

                                if (os_log_shim_legacy_logging_enabled(v120)
                                  && _IDSShouldLog(0LL, @"IDSDMessageStore"))
                                {
                                  _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDMessageStore",  @"Add main_account_guid column to outgoing_message");
                                }

                                if (!sub_1003B3CB0( a2,  @"main_account_guid",  @"TEXT",  @"outgoing_message")) {
                                  goto LABEL_425;
                                }
                                CSDBSqliteDatabaseSetVersion(a1, 9001LL);
                                goto LABEL_217;
                              }

LABEL_203:
                              CSDBSqliteDatabaseSetVersion(a1, 8013LL);
                              uint64_t v115 = OSLogHandleForIDSCategory("IDSDMessageStore");
                              id v116 = (os_log_s *)objc_claimAutoreleasedReturnValue(v115);
                              if (os_log_type_enabled(v116, OS_LOG_TYPE_DEFAULT))
                              {
                                *(_WORD *)buf = 0;
                                _os_log_impl( (void *)&_mh_execute_header,  v116,  OS_LOG_TYPE_DEFAULT,  "Adding indexes on account_guid, priority and is_send",  buf,  2u);
                              }

                              if (os_log_shim_legacy_logging_enabled(v117)
                                && _IDSShouldLog(0LL, @"IDSDMessageStore"))
                              {
                                _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDMessageStore",  @"Adding indexes on account_guid, priority and is_send");
                              }

                              if (!sub_1003B3B08( a2,  @"Unable to add outgoing_message similar message query index",  @"Successfully added outgoing_message similar message query index",  @"CREATE INDEX outgoing_message_similarity_idx ON outgoing_message(account_guid, priority, is_sent);")) {
                                goto LABEL_425;
                              }
                              CSDBSqliteDatabaseSetVersion(a1, 8014LL);
                              goto LABEL_210;
                            }

LABEL_190:
                          CSDBSqliteDatabaseSetVersion(a1, 8011LL);
                          uint64_t v109 = OSLogHandleForIDSCategory("IDSDMessageStore");
                          uint64_t v110 = (os_log_s *)objc_claimAutoreleasedReturnValue(v109);
                          if (os_log_type_enabled(v110, OS_LOG_TYPE_DEFAULT))
                          {
                            *(_WORD *)buf = 0;
                            _os_log_impl( (void *)&_mh_execute_header,  v110,  OS_LOG_TYPE_DEFAULT,  "Add enforce_remote_timeout column to outgoing_message",  buf,  2u);
                          }

                          if (os_log_shim_legacy_logging_enabled(v111)
                            && _IDSShouldLog(0LL, @"IDSDMessageStore"))
                          {
                            _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDMessageStore",  @"Add enforce_remote_timeout column to outgoing_message");
                          }

                          if (!sub_1003B3CB0( a2,  @"enforce_remote_timeout",  @"INTEGER DEFAULT 0",  @"outgoing_message")) {
                            goto LABEL_425;
                          }
                          CSDBSqliteDatabaseSetVersion(a1, 8012LL);
                          goto LABEL_197;
                        }

LABEL_183:
                        CSDBSqliteDatabaseSetVersion(a1, 8010LL);
                        uint64_t v105 = OSLogHandleForIDSCategory("IDSDMessageStore");
                        id v106 = (os_log_s *)objc_claimAutoreleasedReturnValue(v105);
                        if (os_log_type_enabled(v106, OS_LOG_TYPE_DEFAULT))
                        {
                          *(_WORD *)buf = 0;
                          _os_log_impl( (void *)&_mh_execute_header,  v106,  OS_LOG_TYPE_DEFAULT,  "Adding indexes on message guid",  buf,  2u);
                        }

                        if (os_log_shim_legacy_logging_enabled(v107)
                          && _IDSShouldLog(0LL, @"IDSDMessageStore"))
                        {
                          _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDMessageStore",  @"Adding indexes on message guid");
                        }

                        int v108 = sub_1003B3B08( a2,  @"Unable to add outgoing_message guid index",  @"Successfully added outgoing_message guid index",  @"CREATE INDEX IF NOT EXISTS outgoing_message_guid_idx ON outgoing_message(guid);");
                        if ((v108 & sub_1003B3B08( a2,  @"Unable to add incoming_message guid index",  @"Successfully added incoming_message guid index",  @"CREATE INDEX IF NOT EXISTS incoming_message_guid_idx ON incoming_message(guid);")) != 1) {
                          goto LABEL_425;
                        }
                        CSDBSqliteDatabaseSetVersion(a1, 8011LL);
                        goto LABEL_190;
                      }

LABEL_169:
                    CSDBSqliteDatabaseSetVersion(a1, 8008LL);
                    uint64_t v97 = OSLogHandleForIDSCategory("IDSDMessageStore");
                    uint64_t v98 = (os_log_s *)objc_claimAutoreleasedReturnValue(v97);
                    if (os_log_type_enabled(v98, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_impl( (void *)&_mh_execute_header,  v98,  OS_LOG_TYPE_DEFAULT,  "isLocal added to incoming message record",  buf,  2u);
                    }

                    if (os_log_shim_legacy_logging_enabled(v99)
                      && _IDSShouldLog(0LL, @"IDSDMessageStore"))
                    {
                      _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDMessageStore",  @"isLocal added to incoming message record");
                    }

                    int v100 = sub_1003B3B08( a2,  @"Unable to drop legacy table",  @"Successfully dropped legacy table",  @"DROP TABLE incoming_message");
                    CSDBRecordStoreCreateTablesForClass(&off_100903028, a2, 0LL);
                    if (!v100) {
                      goto LABEL_425;
                    }
                    CSDBSqliteDatabaseSetVersion(a1, 8009LL);
                    goto LABEL_176;
                  }

    id result = swift_release(v407);
    __break(1u);
    return result;
  }

  if (v211 >= 1)
  {
    id v213 = 0LL;
    v400 = v404 & 0xC000000000000001LL;
    do
    {
      if (v400)
      {
        uint64_t v214 = specialized _ArrayBuffer._getElementSlowPath(_:)(v213, v404);
      }

      else
      {
        uint64_t v214 = *(void *)(v404 + 8 * v213 + 32);
        swift_retain(v214);
      }

      uint64_t v215 = (char *)v406;
      sub_100449638((void *)v406);
      uint64_t v217 = v397;
      uint64_t v216 = v398;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v397 + 48))(v215, 1LL, v398) == 1)
      {
        sub_10040A274((uint64_t)v215, &qword_1009BC130);
        double v218 = v403;
        uint64_t v219 = v405;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v403 + 56))(v79, 1LL, 1LL, v405);
        swift_release(v214);
      }

      else
      {
        uint64_t v220 = *(void (**)(char *, char *, uint64_t))(v217 + 32);
        id v221 = v396;
        v220(v396, v215, v216);
        int v222 = v405;
        __int16 v223 = v79 + *(int *)(v405 + 48);
        *(void *)uint64_t v79 = v214;
        int v224 = v216;
        uint64_t v219 = v222;
        v220((char *)v223, v221, v224);
        double v218 = v403;
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v403 + 56))(v79, 0LL, 1LL, v219);
      }

      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v218 + 48))(v79, 1LL, v219) == 1)
      {
        sub_10040A274(v79, &qword_1009BCAD0);
      }

      else
      {
        id v225 = v391;
        sub_10041D378(v79, v391, &qword_1009BCAD8);
        sub_10041D378(v225, v401, &qword_1009BCAD8);
        if ((swift_isUniquelyReferenced_nonNull_native(v212) & 1) == 0) {
          uint64_t v212 = (void *)sub_100503A18(0, v212[2] + 1LL, 1, (unint64_t)v212);
        }
        char v227 = v212[2];
        uint64_t v226 = v212[3];
        uint64_t v228 = v403;
        if (v227 >= v226 >> 1)
        {
          __int128 v229 = sub_100503A18(v226 > 1, v227 + 1, 1, (unint64_t)v212);
          uint64_t v228 = v403;
          uint64_t v212 = (void *)v229;
        }

        v212[2] = v227 + 1;
        sub_10041D378( v401,  (uint64_t)v212 + ((*(unsigned __int8 *)(v228 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v228 + 80))
        + *(void *)(v228 + 72) * v227,
          &qword_1009BCAD8);
      }

      ++v213;
    }

    while (v211 != v213);
    goto LABEL_104;
  }

  __break(1u);
LABEL_163:
  __int16 v245 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v122);
LABEL_117:
  swift_bridgeObjectRelease(v122);
  v246 = type metadata accessor for SenderKeyDistributionManager(0LL);
  __int16 v247 = (*(uint64_t (**)(void))(v246 + 816))();
  v249 = v248;
  uint64_t v250 = (char *)v387;
  uint64_t v251 = Date.init()(v247);
  Date.addingTimeInterval(_:)(v251, -v249);
  v252 = v397;
  uint64_t v253 = *(void (**)(char *, uint64_t))(v397 + 8);
  v253(v250, v100);
  sub_100449638((void *)v79);
  uint64_t v254 = *(void (**)(uint64_t, uint64_t, uint64_t))(v252 + 32);
  v255 = (uint64_t)v384;
  v254((uint64_t)v384, v79, v100);
  if ((static Date.> infix(_:_:)(v255, v98) & 1) != 0)
  {
    v402 = v102;
    uint64_t v256 = sub_100446720();
    v406 = (uint64_t)v257;
    uint64_t v258 = sub_100446490();
    v260 = v259;
    unsigned int v261 = v387;
    sub_100447148((char *)v387);
    uint64_t v262 = sub_1004469B0();
    sub_100446C34();
    id v263 = nullsub_36(v262);
    CFMutableDictionaryRef v265 = v264;
    uint64_t v266 = v382;
    v267 = v256;
    v268 = v398;
    id v269 = v258;
    uint64_t v270 = (uint64_t)v384;
    sub_10046BDE8(v267, v406, v269, v260, (uint64_t)v261, v263, v271, v265, v382, v272);
    v273 = sub_100447444();
    uint64_t v274 = v381;
    sub_100466FC0((uint64_t)v266, v273, v275, v381);
    v276 = type metadata accessor for SenderKeyAndState(0LL);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v276 - 8) + 56LL))(v274, 0LL, 1LL, v276);
    sub_100427794(v274, v370, (uint64_t *)&unk_1009BAC60);
    v277 = v377;
    (*(void (**)(char *, uint64_t, uint64_t))(v397 + 16))(v377, v270, v268);
    double v278 = swift_retain_n(v245, 2LL);
    v279 = (os_log_s *)Logger.logObject.getter(v278);
    uint64_t v280 = static os_log_type_t.default.getter();
    v281 = v280;
    if (os_log_type_enabled(v279, v280))
    {
      v282 = swift_slowAlloc(22LL, -1LL);
      LODWORD(v406) = v281;
      v283 = v282;
      v405 = swift_slowAlloc(64LL, -1LL);
      *(void *)&v407 = v405;
      *(_DWORD *)v283 = 136315394;
      uint64_t v284 = sub_10040A2B0( &qword_1009B9D98,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
      v404 = (uint64_t)v279;
      v285 = dispatch thunk of CustomStringConvertible.description.getter(v268, v284);
      v287 = v286;
      v408 = sub_1003FFBB0(v285, v286, (uint64_t *)&v407);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v408, &v409, v283 + 4, v283 + 12);
      swift_bridgeObjectRelease(v287);
      v253(v277, v268);
      *(_WORD *)(v283 + 12) = 2080;
      id v288 = sub_100446EB8();
      uint64_t v290 = v289;
      v291 = Data.description.getter(v288, v289);
      v293 = v292;
      sub_100402A84(v288, v290);
      v408 = sub_1003FFBB0(v291, v293, (uint64_t *)&v407);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v408, &v409, v283 + 14, v283 + 22);
      swift_release_n(v245, 2LL);
      swift_bridgeObjectRelease(v293);
      v294 = (os_log_t)v404;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v404,  (os_log_type_t)v406,  "Last iMessaged device was seen at: %s token: %s",  (uint8_t *)v283,  0x16u);
      v295 = v405;
      swift_arrayDestroy(v405, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v295, -1LL, -1LL);
      swift_slowDealloc(v283, -1LL, -1LL);
      swift_release(v245);

      v296 = v398;
      v253(v384, v398);
      v297 = &v410;
      goto LABEL_138;
    }

    swift_release_n(v245, 2LL);

    v253(v277, v268);
    swift_release(v245);
    v253((char *)v270, v268);
    __int128 v361 = &v410;
LABEL_142:
    __int128 v359 = (char *)*(v361 - 32);
    __int128 v360 = v268;
    goto LABEL_143;
  }

LABEL_155:
                CSDBSqliteDatabaseSetVersion(a1, 8006LL);
                uint64_t v89 = OSLogHandleForIDSCategory("IDSDMessageStore");
                uint64_t v90 = (os_log_s *)objc_claimAutoreleasedReturnValue(v89);
                if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl( (void *)&_mh_execute_header,  v90,  OS_LOG_TYPE_DEFAULT,  "Outgoing message priority changes",  buf,  2u);
                }

                if (os_log_shim_legacy_logging_enabled(v91)
                  && _IDSShouldLog(0LL, @"IDSDMessageStore"))
                {
                  _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDMessageStore",  @"Outgoing message priority changes");
                }

                int v92 = sub_1003B3B08( a2,  @"Unable to drop legacy table",  @"Successfully dropped legacy table",  @"DROP TABLE outgoing_message");
                CSDBRecordStoreCreateTablesForClass(&off_1009030C8, a2, 0LL);
                if (!v92) {
                  goto LABEL_425;
                }
                CSDBSqliteDatabaseSetVersion(a1, 8007LL);
                goto LABEL_162;
              }

LABEL_141:
            CSDBSqliteDatabaseSetVersion(a1, 8004LL);
            uint64_t v81 = OSLogHandleForIDSCategory("IDSDMessageStore");
            uint64_t v82 = (os_log_s *)objc_claimAutoreleasedReturnValue(v81);
            if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_DEFAULT, "Adding compress option", buf, 2u);
            }

            if (os_log_shim_legacy_logging_enabled(v83)
              && _IDSShouldLog(0LL, @"IDSDMessageStore"))
            {
              _IDSLogV(0LL, @"IDSFoundation", @"IDSDMessageStore", @"Adding compress option");
            }

            int v84 = sub_1003B3B08( a2,  @"Unable to drop legacy table",  @"Successfully dropped legacy table",  @"DROP TABLE outgoing_message");
            CSDBRecordStoreCreateTablesForClass(&off_1009030C8, a2, 0LL);
            if (!v84) {
              goto LABEL_425;
            }
            CSDBSqliteDatabaseSetVersion(a1, 8005LL);
            goto LABEL_148;
          }

void sub_1003B3AC8(id a1, CSDBThreadedRecordStore *a2)
{
  uint64_t v2 = a2;
  CSDBThreadedRecordStoreRegisterClass(v2, &off_100903028);
  CSDBThreadedRecordStoreRegisterClass(v2, &off_1009030C8);
}

uint64_t sub_1003B3B08(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if ([v9 length])
  {
    int v10 = CSDBSqliteConnectionPerformSQL(a1, v9);
    if (v10) {
      BOOL v11 = v10 == 101;
    }
    else {
      BOOL v11 = 1;
    }
    uint64_t v12 = v11;
    if (v10 && v10 != 101)
    {
      CSDBSqliteErrMsg(a1);
      _IMWarn(@"%@ SQLiteResult: %d SQLite Message: %s");
    }

    else
    {
      uint64_t v13 = OSLogHandleForIDSCategory("IDSDMessageStore");
      uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        id v18 = v8;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
      }

      if (os_log_shim_legacy_logging_enabled(v15)
        && _IDSShouldLog(0LL, @"IDSDMessageStore"))
      {
        _IDSLogV(0LL, @"IDSFoundation", @"IDSDMessageStore", @"%@");
      }
    }
  }

  else
  {
    _IMWarn(@"No migration block to execute!");
    uint64_t v12 = 1LL;
  }

  return v12;
}

uint64_t sub_1003B3CB0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1 && [v7 length] && objc_msgSend(v8, "length") && objc_msgSend(v9, "length"))
  {
    int v10 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"SELECT %@ FROM %@",  v7,  v9);
    int v11 = CSDBSqliteConnectionPerformSQL(a1, v10);
    if ((v11 - 100) >= 2 && v11)
    {
      uint64_t v17 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"IDS DB migration failed to add column %@ to the %@ table.",  v7,  v9);
      id v18 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"Added %@ column to the %@ table.",  v7,  v9);
      uint64_t v19 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"ALTER TABLE %@ ADD COLUMN %@ %@;",
              v9,
              v7,
              v8);
      uint64_t v15 = sub_1003B3B08(a1, v17, v18, v19);
    }

    else
    {
      uint64_t v12 = OSLogHandleForIDSCategory("IDSDMessageStore");
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412546;
        id v21 = v7;
        __int16 v22 = 2112;
        id v23 = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "The %@ column already exists on %@, skipping this step.",  buf,  0x16u);
      }

      if (os_log_shim_legacy_logging_enabled(v14)
        && _IDSShouldLog(0LL, @"IDSDMessageStore"))
      {
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSDMessageStore",  @"The %@ column already exists on %@, skipping this step.");
      }

      uint64_t v15 = 1LL;
    }
  }

  else
  {
    _IMWarn(@"Cannot perform _IDSDatabaseAddColumnOfTypeToTable(%@, %@, %@)");
    uint64_t v15 = 0LL;
  }

  return v15;
}

void sub_1003B43D8(id a1)
{
  off_1009C0CC0 = (_UNKNOWN *)IMWeakLinkSymbol("SecKeyCopyExternalRepresentation", @"MessageProtection");
}

id sub_1003B4704(void *a1)
{
  id v1 = a1;
  if (![v1 containsString:@":"])
  {
    if ([v1 _appearsToBeEmail])
    {
      id v2 = (id)_IDSCopyIDForEmailAddress(v1);
      goto LABEL_11;
    }

    if ([v1 _appearsToBePhoneNumber])
    {
      id v2 = (id)_IDSCopyIDForPhoneNumberWithOptions(v1, 0LL, 1LL);
      goto LABEL_11;
    }

    if ([v1 _appearsToBePseudonymID])
    {
      id v2 = (id)objc_claimAutoreleasedReturnValue([v1 _URIFromCanonicalizedPseudonymID]);
      goto LABEL_11;
    }

    if ([v1 _appearsToBeTemporaryID])
    {
      id v2 = (id)objc_claimAutoreleasedReturnValue([v1 _URIFromCanonicalizedTemporaryID]);
      goto LABEL_11;
    }
  }

  id v2 = v1;
LABEL_11:
  uint64_t v3 = v2;

  return v3;
}

int64_t sub_1003B6100(id a1, NSUUID *a2, NSUUID *a3)
{
  uint64_t v4 = a3;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(-[NSUUID UUIDString](a2, "UUIDString"));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(-[NSUUID UUIDString](v4, "UUIDString"));

  id v7 = [v5 caseInsensitiveCompare:v6];
  return (int64_t)v7;
}

uint64_t sub_1003B684C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1003B6858(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
  }

  else
  {
    if (!*(_BYTE *)(a1 + 88))
    {
      uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) utunDeliveryController]);
      [v4 addUTunPeerWithDeviceUniqueID:IDSDeviceDefaultPairedDeviceUniqueID btuuid:*(void *)(a1 + 40)];
    }

    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) utunDeliveryController]);
    [v5 prepareForQuickSwitch];

    kdebug_trace(722010144LL, 0LL, 0LL, 0LL, 0LL);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) pairingManager]);
    [v6 addLocalPairedDevice:*(void *)(a1 + 40) BTOutOfBandKey:*(void *)(a1 + 48) shouldPairDirectlyOverIPsec:*(unsigned __int8 *)(a1 + 88) pairingType:*(void *)(a1 + 80) bluetoothMACAddress:*(void *)(a1 + 56)];

    kdebug_trace(722010148LL, 0LL, 0LL, 0LL, 0LL);
    kdebug_trace(722010116LL, 0LL, 0LL, 0LL, 0LL);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountController]);
    [v7 startLocalSetup];

    kdebug_trace(722010120LL, 0LL, 0LL, 0LL, 0LL);
    kdebug_trace(722010112LL, 0LL, 0LL, 0LL, 0LL);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) utunDeliveryController]);
    [v8 localSetupStarted];

    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) utunController]);
    [v9 startLocalSetup];

    uint64_t v10 = OSLogHandleForTransportCategory("WatchPairing");
    int v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(void *)(a1 + 64);
      *(_DWORD *)buf = 138412290;
      uint64_t v17 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "(Daemon) Told to add a paired device %@",  buf,  0xCu);
    }

    uint64_t v14 = os_log_shim_legacy_logging_enabled(v13);
    if ((_DWORD)v14)
    {
      if (_IDSShouldLogTransport(v14))
      {
        _IDSLogTransport(@"WatchPairing", @"IDS", @"(Daemon) Told to add a paired device %@");
      }
    }

    kdebug_trace(722010140LL, 0LL, 0LL, 0LL, 0LL);
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) utunController]);
    [v15 addPairedDevice:*(void *)(a1 + 40) shouldPairDirectlyOverIPsec:*(unsigned __int8 *)(a1 + 88)];
  }
}

id sub_1003B6CBC(id a1, IDSEndpoint *a2)
{
  id v2 = a2;
  id v3 = (IDSKeyTransparencyEntry *)objc_claimAutoreleasedReturnValue(-[IDSEndpoint pushToken](v2, "pushToken"));
  if (v3)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(-[IDSEndpoint KTLoggableData](v2, "KTLoggableData"));

    if (v4)
    {
      uint64_t v5 = objc_alloc(&OBJC_CLASS___IDSKeyTransparencyEntry);
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(-[IDSEndpoint pushToken](v2, "pushToken"));
      id v7 = (void *)objc_claimAutoreleasedReturnValue(-[IDSEndpoint KTLoggableData](v2, "KTLoggableData"));
      id v8 = (void *)objc_claimAutoreleasedReturnValue(-[IDSEndpoint KTDeviceSignature](v2, "KTDeviceSignature"));
      id v3 = -[IDSKeyTransparencyEntry initWithPushToken:loggableData:signedData:]( v5,  "initWithPushToken:loggableData:signedData:",  v6,  v7,  v8);

      -[IDSKeyTransparencyEntry setKtCapable:](v3, "setKtCapable:", -[IDSEndpoint ktCapableFlag](v2, "ktCapableFlag"));
    }

    else
    {
      id v3 = 0LL;
    }
  }

  return v3;
}

void sub_1003B707C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 state];
  uint64_t v5 = *(void *)(a1 + 32);
  if (v4)
  {
    id v6 = (id)objc_claimAutoreleasedReturnValue([v3 error]);

    (*(void (**)(uint64_t, void, id))(v5 + 16))(v5, 0LL, v6);
  }

  else
  {
    id v6 = (id)objc_claimAutoreleasedReturnValue([v3 value]);

    (*(void (**)(uint64_t, id, void))(v5 + 16))(v5, v6, 0LL);
  }
}

void sub_1003B738C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, void *a7)
{
  id v9 = a7;
  uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = @"NO";
    if (a6) {
      int v11 = @"YES";
    }
    *(_DWORD *)buf = 138412546;
    unsigned int v27 = v11;
    __int16 v28 = 2112;
    id v29 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Completed query for forced verification. { success: %@, errorDictionary: %@ }",  buf,  0x16u);
  }

  uint64_t v12 = -[IDSPeerIDKey initWithService:fromURI:toURI:]( objc_alloc(&OBJC_CLASS___IDSPeerIDKey),  "initWithService:fromURI:toURI:",  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 48));
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) _peerIDManager]);
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v13 pleaseDontCopyCacheDictionaryRepresentation]);
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 objectForKeyedSubscript:v12]);

  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 keyTransparencyContext]);
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v16 ticket]);

  id v18 = objc_alloc(&OBJC_CLASS___IDSKeyTransparencyIndex);
  uint64_t v19 = *(void *)(a1 + 32);
  int v20 = (void *)objc_claimAutoreleasedReturnValue([v15 keyTransparencyContext]);
  id v21 = (void *)objc_claimAutoreleasedReturnValue([v20 accountKey]);
  __int16 v22 = -[IDSKeyTransparencyIndex initWithServiceIdentifier:accountKey:URI:]( v18,  "initWithServiceIdentifier:accountKey:URI:",  v19,  v21,  *(void *)(a1 + 48));

  id v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) _verifier]);
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472LL;
  v24[2] = sub_1003B75C0;
  v24[3] = &unk_1008F98D0;
  id v25 = *(id *)(a1 + 64);
  [v23 forceVerificationWithIndex:v22 ticket:v17 completion:v24];
}

uint64_t sub_1003B75C0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1003B7674(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _verifier]);
  id v4 = (id)objc_claimAutoreleasedReturnValue([v2 fetchTrustedDevicesFromKVS]);

  if ([v4 count]) {
    id v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "__imArrayByApplyingBlock:", &stru_100903D48));
  }
  else {
    id v3 = &__NSArray0__struct;
  }
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

id sub_1003B7704(id a1, IDSProtoKeyTransparencyTrustedDevice *a2)
{
  return -[IDSProtoKeyTransparencyTrustedDevice dictionaryRepresentation](a2, "dictionaryRepresentation");
}

void sub_1003B77CC(uint64_t a1, void *a2)
{
  id v3 = a2;

  id v4 = (id)objc_claimAutoreleasedReturnValue([v3 error]);
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1003B78D0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  id v8 = v5;
  id v9 = [v8 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v17;
    do
    {
      for (i = 0LL; i != v10; i = (char *)i + 1)
      {
        if (*(void *)v17 != v11) {
          objc_enumerationMutation(v8);
        }
        uint64_t v13 = *(const void **)(*((void *)&v16 + 1) + 8LL * (void)i);
        uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKey:", v13, (void)v16));
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 dictionaryRepresentation]);
        if (v15) {
          CFDictionarySetValue((CFMutableDictionaryRef)v7, v13, v15);
        }
      }

      id v10 = [v8 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }

    while (v10);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1003B7AD4(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v20 = a1;
  id v7 = a2;
  id v8 = a3;
  id v21 = a5;
  CFMutableDictionaryRef theDict = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  id v9 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  id v10 = v7;
  id v11 = [v10 countByEnumeratingWithState:&v23 objects:v27 count:16];
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = *(void *)v24;
    do
    {
      for (i = 0LL; i != v12; i = (char *)i + 1)
      {
        if (*(void *)v24 != v13) {
          objc_enumerationMutation(v10);
        }
        uint64_t v15 = *(const void **)(*((void *)&v23 + 1) + 8LL * (void)i);
        __int128 v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKey:", v15, v20));
        __int128 v17 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKey:v15]);
        __int128 v18 = (void *)objc_claimAutoreleasedReturnValue([v16 dictionaryRepresentation]);
        if (v18) {
          CFDictionarySetValue((CFMutableDictionaryRef)theDict, v15, v18);
        }

        __int128 v19 = (void *)objc_claimAutoreleasedReturnValue([v17 dictionaryRepresentation]);
        if (v19) {
          CFDictionarySetValue((CFMutableDictionaryRef)v9, v15, v19);
        }
      }

      id v12 = [v10 countByEnumeratingWithState:&v23 objects:v27 count:16];
    }

    while (v12);
  }

  (*(void (**)(void))(*(void *)(v20 + 32) + 16LL))();
}

uint64_t sub_1003B7D50(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1003B85CC(id a1)
{
  id v1 = -[IDSRestoreMonitor initWithTimerBlock:]( objc_alloc(&OBJC_CLASS___IDSRestoreMonitor),  "initWithTimerBlock:",  &stru_100903DA8);
  id v2 = (void *)qword_1009C0CD0;
  qword_1009C0CD0 = (uint64_t)v1;
}

IMTimer *__cdecl sub_1003B8600(id a1, id a2, SEL a3)
{
  id v4 = a2;
  id v5 = objc_alloc(&OBJC_CLASS___IMTimer);
  uint64_t v7 = im_primary_queue(v5, v6);
  id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  id v9 = -[IMTimer initWithTimeInterval:name:shouldWake:target:selector:userInfo:queue:]( v5,  "initWithTimeInterval:name:shouldWake:target:selector:userInfo:queue:",  @"com.apple.identityservicesd-backup-check",  0LL,  v4,  a3,  0LL,  v8,  60.0);

  return v9;
}

id sub_1003B8A10(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _timerFired];
}

void sub_1003B8DF4(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___IDSFirewallStore);
  id v2 = (void *)qword_1009C0CE8;
  qword_1009C0CE8 = (uint64_t)v1;
}

void sub_1003B919C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _currentLocalTime];
  id v9 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) uri]);
  id v3 = [v9 prefixedURI];
  id v4 = [*(id *)(a1 + 40) mergeID];
  uint64_t v5 = *(unsigned int *)(a1 + 48);
  uint64_t v6 = *(unsigned __int8 *)(a1 + 52);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) lastSeen]);
  [v7 timeIntervalSince1970];
  sub_1003EA418((uint64_t)v3, (uint64_t)v4, v5, v6, (uint64_t)v8, (uint64_t)v2);
}

void sub_1003B9240(uint64_t a1)
{
  id v15 = [*(id *)(a1 + 32) _currentLocalTime];
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  id obj = *(id *)(a1 + 40);
  id v2 = [obj countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v14 = *(void *)v17;
    do
    {
      id v4 = 0LL;
      do
      {
        if (*(void *)v17 != v14) {
          objc_enumerationMutation(obj);
        }
        uint64_t v5 = *(void *)(*((void *)&v16 + 1) + 8LL * (void)v4);
        uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) uri]);
        id v7 = [v6 prefixedURI];
        id v8 = [*(id *)(a1 + 48) mergeID];
        uint64_t v9 = *(unsigned int *)(a1 + 56);
        uint64_t v10 = *(unsigned __int8 *)(a1 + 60);
        id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) lastSeen]);
        [v11 timeIntervalSince1970];
        sub_1003EA338((uint64_t)v7, (uint64_t)v8, v5, v9, v10, (uint64_t)v12, (uint64_t)v15);

        id v4 = (char *)v4 + 1;
      }

      while (v3 != v4);
      id v3 = [obj countByEnumeratingWithState:&v16 objects:v20 count:16];
    }

    while (v3);
  }
}

id sub_1003B95FC(uint64_t a1)
{
  id result = [*(id *)(a1 + 40) count];
  if (result) {
    return (id)sub_1003EA7CC( (const __CFArray *)[*(id *)(a1 + 40) allObjects],  *(unsigned int *)(a1 + 48),  *(unsigned __int8 *)(a1 + 52));
  }
  return result;
}

id sub_1003B9888(uint64_t a1)
{
  id result = [*(id *)(a1 + 40) count];
  if (result) {
    return (id)sub_1003EA5D8( (const __CFArray *)[*(id *)(a1 + 40) allObjects],  *(unsigned int *)(a1 + 48));
  }
  return result;
}

uint64_t sub_1003B9930(uint64_t a1)
{
  return sub_1003EA968(*(unsigned int *)(a1 + 32));
}

uint64_t sub_1003B9994(uint64_t a1)
{
  return sub_1003EA8D0(*(unsigned int *)(a1 + 32), *(unsigned __int8 *)(a1 + 36));
}

void sub_1003B9A68( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1003B9A80(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uri]);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = sub_1003EA9F0( (uint64_t)[v2 prefixedURI],  *(unsigned int *)(a1 + 48),  *(unsigned __int8 *)(a1 + 52));
}

void sub_1003B9C00(_Unwind_Exception *a1)
{
}

void sub_1003B9C18(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uri]);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = sub_1003EAB0C( (uint64_t)[v2 prefixedURI],  *(unsigned int *)(a1 + 48));
}

uint64_t sub_1003B9C68(uint64_t a1)
{
  uint64_t result = sub_1003EAC1C((uint64_t)[*(id *)(a1 + 32) mergeID], *(unsigned int *)(a1 + 48));
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = result;
  return result;
}

void sub_1003B9D54( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_1003B9D6C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1003B9D7C(uint64_t a1)
{
}

void sub_1003B9D84(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _createFirewallRecordsFromSQLRecords:sub_1003EAD2C(*(unsigned int *)(a1 + 48))];
  uint64_t v3 = objc_claimAutoreleasedReturnValue(v2);
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_1003B9E7C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1003B9E94(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _createFirewallRecordsFromSQLRecords:sub_1003EAE1C(*(unsigned int *)(a1 + 48))];
  uint64_t v3 = objc_claimAutoreleasedReturnValue(v2);
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_1003BA28C(id a1)
{
  uint64_t v1 = OSLogHandleForIDSCategory("IDSFirewallStore");
  id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "Performing initial database housekeeping",  buf,  2u);
  }

  if (os_log_shim_legacy_logging_enabled(v3)
    && _IDSShouldLog(1LL, @"IDSFirewallStore"))
  {
    _IDSLogV(1LL, @"IDSFoundation", @"IDSFirewallStore", @"Performing initial database housekeeping");
  }

  uint64_t v4 = OSLogHandleForIDSCategory("IDSFirewallStore");
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)id v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "  => Setting cache size", v11, 2u);
  }

  if (os_log_shim_legacy_logging_enabled(v6)
    && _IDSShouldLog(1LL, @"IDSFirewallStore"))
  {
    _IDSLogV(1LL, @"IDSFoundation", @"IDSFirewallStore", @"  => Setting cache size");
  }

  sub_1001A3924(10LL);
  uint64_t v7 = OSLogHandleForIDSCategory("Database");
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "  => Invalidating caches", v10, 2u);
  }

  sub_1001A38DC();
}

void sub_1003BA538(_Unwind_Exception *a1)
{
}

uint64_t sub_1003BA554(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = OSLogHandleForIDSCategory("IDSFirewallStore");
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v4 = +[IMUserDefaults isFirewallEnabled](&OBJC_CLASS___IMUserDefaults, "isFirewallEnabled");
    uint64_t v5 = @"NO";
    if (v4) {
      uint64_t v5 = @"YES";
    }
    *(_DWORD *)buf = 138412290;
    v25[0] = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Is firewall user default enabled %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v6)
    && _IDSShouldLog(0LL, @"IDSFirewallStore"))
  {
    unsigned int v7 = +[IMUserDefaults isFirewallEnabled](&OBJC_CLASS___IMUserDefaults, "isFirewallEnabled");
    id v8 = @"NO";
    if (v7) {
      id v8 = @"YES";
    }
    __int16 v22 = v8;
    _IDSLogV(0LL, @"IDSFoundation", @"IDSFirewallStore", @"Is firewall user default enabled %@");
  }

  uint64_t v9 = OSLogHandleForIDSCategory("IDSFirewallStore");
  uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v11 = +[IMUserDefaults shouldFirewallDropForAllCategories]( &OBJC_CLASS___IMUserDefaults,  "shouldFirewallDropForAllCategories");
    double v12 = @"NO";
    if (v11) {
      double v12 = @"YES";
    }
    *(_DWORD *)buf = 138412290;
    v25[0] = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Should firewall drop for all categories %@",  buf,  0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v13)
    && _IDSShouldLog(0LL, @"IDSFirewallStore"))
  {
    unsigned int v14 = +[IMUserDefaults shouldFirewallDropForAllCategories]( &OBJC_CLASS___IMUserDefaults,  "shouldFirewallDropForAllCategories");
    id v15 = @"NO";
    if (v14) {
      id v15 = @"YES";
    }
    __int16 v22 = v15;
    _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSFirewallStore",  @"Should firewall drop for all categories %@");
  }

  __int128 v16 = 0LL;
  do
  {
    __int128 v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(WeakRetained, "getAllAllowedEntriesForCategory:", v16, v22, v23));
    uint64_t v18 = OSLogHandleForIDSCategory("IDSFirewallStore");
    __int128 v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109378;
      LODWORD(v25[0]) = (_DWORD)v16;
      WORD2(v25[0]) = 2112;
      *(void *)((char *)v25 + 6) = v17;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Entries for category %u: %@", buf, 0x12u);
    }

    if (os_log_shim_legacy_logging_enabled(v20)
      && _IDSShouldLog(0LL, @"IDSFirewallStore"))
    {
      __int16 v22 = v16;
      __int128 v23 = v17;
      _IDSLogV(0LL, @"IDSFoundation", @"IDSFirewallStore", @"Entries for category %u: %@");
    }

    __int128 v16 = (const __CFString *)((_DWORD)v16 + 1);
  }

  while ((_DWORD)v16 != 11);

  return 0LL;
}

void sub_1003BA890(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1003BA6ECLL);
  }

  _Unwind_Resume(a1);
}

void sub_1003BA994(uint64_t a1)
{
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  uint64_t v3 = *(void *)(a1 + 32);
  double v4 = *(double *)(v3 + 40) - Current + 600.0;
  if (v4 <= 0.0)
  {
    [(id)v3 closeDatabase];
  }

  else
  {
    int64_t v5 = (uint64_t)(v4 * 1000000000.0);
    uint64_t v6 = *(dispatch_source_s **)(v3 + 32);
    dispatch_time_t v7 = dispatch_time(0LL, v5);
    dispatch_source_set_timer(v6, v7, 0x7FFFFFFFFFFFFFFFuLL, v5 / 10);
  }

double sub_1003BAB20(uint64_t a1)
{
  uint64_t v2 = *(dispatch_source_s **)(*(void *)(a1 + 32) + 32LL);
  if (v2)
  {
    dispatch_source_cancel(v2);
    uint64_t v3 = *(void *)(a1 + 32);
    double v4 = *(void **)(v3 + 32);
    *(void *)(v3 + 32) = 0LL;
  }

  return sub_1001A366C();
}

id sub_1003BACD0(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _runCleanupWithExpirationInterval:2592000.0];
}

void sub_1003BADF0(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSince1970:]( NSDate,  "dateWithTimeIntervalSince1970:",  (double)(unint64_t)[*(id *)(a1 + 32) _currentLocalTime]));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[IDSServerBag sharedInstanceForBagType:](&OBJC_CLASS___IDSServerBag, "sharedInstanceForBagType:", 0LL));
  double v4 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKey:@"ids-firewall-record-expiration-time-in-seconds"]);

  [v4 doubleValue];
  if (v5 == 0.0) {
    double v5 = *(double *)(a1 + 40);
  }
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v2 dateByAddingTimeInterval:-v5]);
  uint64_t v7 = OSLogHandleForIDSCategory("IDSFirewallStore");
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138412290;
    unsigned int v14 = v6;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Removing entries older than %@", buf, 0xCu);
  }

  if (os_log_shim_legacy_logging_enabled(v9)
    && _IDSShouldLog(1LL, @"IDSFirewallStore"))
  {
    double v12 = v6;
    *(void *)&double v10 = _IDSLogV( 1LL,  @"IDSFoundation",  @"IDSFirewallStore",  @"Removing entries older than %@").n128_u64[0];
  }

  objc_msgSend(v6, "timeIntervalSince1970", v10, v12);
  sub_1003EAF0C((uint64_t)v11);
  sub_1001A38DC();
  [*(id *)(a1 + 32) _setDatabaseCloseTimerOnIvarQueue];
}

void *sub_1003BB06C(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 16) = 0;
  *(_DWORD *)a1 = a2;
  uint64_t result = malloc(16LL * a2);
  *(void *)(a1 + _Block_object_dispose(va, 8) = result;
  return result;
}

void sub_1003BB09C(uint64_t a1)
{
}

void sub_1003BB0A4(int *a1, int a2, void *a3)
{
  if (!*((void *)a1 + 1))
  {
    double v11 = (os_log_s *)+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController");
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    int v24 = 136315138;
    *(void *)__int128 v25 = "SimpleUInt32ToObjectTable_SetObjectForKey";
    double v12 = "%s: table empty";
    uint64_t v13 = v11;
    uint32_t v14 = 12;
    goto LABEL_22;
  }

  id v6 = a3;
  uint64_t v7 = a1[4];
  id v8 = (char *)*((void *)a1 + 1);
  if ((int)v7 <= 0)
  {
    int v15 = a1[4];
    LODWORD(v7) = 0;
LABEL_20:
    id v21 = &v8[16 * (int)v7];
    *(_DWORD *)id v21 = a2;
    *((void *)v21 + 1) = a3;
    a1[4] = v15 + 1;
    __int16 v22 = (os_log_s *)+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController");
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    int v23 = a1[4];
    int v24 = 67109890;
    *(_DWORD *)__int128 v25 = a2;
    *(_WORD *)&v25[4] = 1024;
    *(_DWORD *)&v25[6] = v7;
    LOWORD(v26) = 1024;
    *(_DWORD *)((char *)&v26 + 2) = v23;
    HIWORD(v26) = 2112;
    unsigned int v27 = a3;
    double v12 = "UI32Table_Set: key %08X at %d (total elements: %d) store object %@";
    uint64_t v13 = v22;
    uint32_t v14 = 30;
LABEL_22:
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, v12, (uint8_t *)&v24, v14);
    return;
  }

  uint64_t v9 = 0LL;
  uint64_t v10 = 0LL;
  while (*(_DWORD *)&v8[v9] != a2)
  {
    ++v10;
    v9 += 16LL;
    if (v7 == v10) {
      goto LABEL_11;
    }
  }

  if ((_DWORD)v7 != (_DWORD)v10)
  {
    __int128 v19 = (os_log_s *)+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController");
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v20 = *(void *)(*((void *)a1 + 1) + v9 + 8);
      int v24 = 138412546;
      *(void *)__int128 v25 = v20;
      *(_WORD *)&v25[8] = 2112;
      __int128 v26 = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "UI32Table_Set: replacing object %@ with %@",  (uint8_t *)&v24,  0x16u);
    }

    int v15 = a1[4] - 1;
    id v8 = (char *)*((void *)a1 + 1);
    LODWORD(v7) = v10;
    goto LABEL_20;
  }

uint64_t sub_1003BB3A8(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = *(unsigned int *)(a1 + 16);
    if ((int)v3 >= 1)
    {
      for (uint64_t i = v2 + 8; *(_DWORD *)(i - 8) != a2; i += 16LL)
      {
        if (!--v3) {
          return 0LL;
        }
      }

      if ((_DWORD)v3) {
        return *(void *)i;
      }
    }
  }

  else
  {
    double v5 = (os_log_s *)+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController");
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315138;
      id v8 = "SimpleUInt32ToObjectTable_ObjectForKey_NoRetain";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%s: table empty", (uint8_t *)&v7, 0xCu);
    }
  }

  return 0LL;
}

void sub_1003BB494(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2)
  {
    id v8 = (os_log_s *)+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController");
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    int v15 = 136315138;
    *(void *)__int128 v16 = "SimpleUInt32ToObjectTable_RemoveObjectForKey";
    uint64_t v9 = "%s: table empty";
    uint64_t v10 = v8;
    uint32_t v11 = 12;
LABEL_12:
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, v9, (uint8_t *)&v15, v11);
    return;
  }

  uint64_t v5 = *(unsigned int *)(a1 + 16);
  uint64_t v6 = 0LL;
  uint64_t v7 = 0LL;
  while (*(_DWORD *)(v2 + v6) != a2)
  {
    ++v7;
    v6 += 16LL;
    if (v5 == v7) {
      goto LABEL_10;
    }
  }

  if ((_DWORD)v5 == (_DWORD)v7)
  {
LABEL_10:
    double v12 = (os_log_s *)+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController");
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    int v15 = 67109376;
    *(_DWORD *)__int128 v16 = a2;
    *(_WORD *)&v16[4] = 1024;
    *(_DWORD *)&v16[6] = v5;
    uint64_t v9 = "UI32Table_Remove: did not find %08X (from %d entries)";
    uint64_t v10 = v12;
    uint32_t v11 = 14;
    goto LABEL_12;
  }

  uint64_t v13 = (os_log_s *)+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController");
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = *(void *)(*(void *)(a1 + 8) + v6 + 8);
    int v15 = 138412802;
    *(void *)__int128 v16 = v14;
    *(_WORD *)&v16[8] = 1024;
    int v17 = v7;
    __int16 v18 = 1024;
    int v19 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "UI32Table_Remove: removing %@ @%d (from %d entries)",  (uint8_t *)&v15,  0x18u);
  }

  --*(_DWORD *)(a1 + 16);
}

void sub_1003BB694(uint64_t a1, uint64_t a2)
{
  int v4 = 0;
  char v5 = 0;
  int v6 = *(_DWORD *)(a1 + 16);
  char v10 = 0;
  do
  {
    if (v4 >= v6) {
      break;
    }
    char v9 = 0;
    uint64_t v7 = (unsigned int *)(*(void *)(a1 + 8) + 16LL * v4);
    (*(void (**)(uint64_t, void, void, char *, char *))(a2 + 16))(a2, *v7, *((void *)v7 + 1), &v10, &v9);
    if (v9)
    {

      BOOL v8 = __OFSUB__(v6--, 1);
      if (!((v6 < 0) ^ v8 | (v6 == 0))) {
        *(_OWORD *)(*(void *)(a1 + 8) + 16LL * v4) = *(_OWORD *)(*(void *)(a1 + 8) + 16LL * v6);
      }
      char v5 = 1;
    }

    else
    {
      ++v4;
    }
  }

  while (!v10);
  if ((v5 & 1) != 0) {
    *(_DWORD *)(a1 + 16) = v6;
  }
}

void sub_1003BB758(int *a1, void *a2, void *a3)
{
  if (!*((void *)a1 + 1))
  {
    char v10 = (os_log_s *)+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController");
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    int v22 = 136315138;
    *(void *)int v23 = "SimpleNSStringToObjectTable_SetObjectForKey";
    uint32_t v11 = "%s: table empty";
    double v12 = v10;
    goto LABEL_9;
  }

  id v6 = a3;
  uint64_t v7 = a1[4];
  if ((int)v7 > 0)
  {
    uint64_t v8 = 0LL;
    uint64_t v9 = 0LL;
    while (([*(id *)(*((void *)a1 + 1) + v8) isEqualToString:a2] & 1) == 0)
    {
      ++v9;
      v8 += 16LL;
      if (v7 == v9) {
        goto LABEL_12;
      }
    }

    if ((_DWORD)v7 != (_DWORD)v9)
    {
      uint64_t v20 = (os_log_s *)+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController");
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v21 = *(void *)(*((void *)a1 + 1) + v8 + 8);
        int v22 = 138412546;
        *(void *)int v23 = v21;
        *(_WORD *)&v23[8] = 2112;
        *(void *)int v24 = a3;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "NSSTable_Set: replacing object %@ with %@",  (uint8_t *)&v22,  0x16u);
      }

      *(void *)(*((void *)a1 + 1) + 16 * v9 + _Block_object_dispose(va, 8) = a3;
      LODWORD(v7) = v9;
      goto LABEL_18;
    }

uint64_t sub_1003BBA5C(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8))
  {
    uint64_t v3 = *(unsigned int *)(a1 + 16);
    if ((int)v3 >= 1)
    {
      for (uint64_t i = 0LL;
            ([*(id *)(*(void *)(a1 + 8) + i) isEqualToString:a2] & 1) == 0;
            i += 16LL)
      {
        if (!--v3) {
          return 0LL;
        }
      }

      if ((_DWORD)v3) {
        return *(void *)(*(void *)(a1 + 8) + i + 8);
      }
    }
  }

  else
  {
    id v6 = (os_log_s *)+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController");
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 136315138;
      uint64_t v9 = "SimpleNSStringToObjectTable_ObjectForKey_NoRetain";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%s: table empty", (uint8_t *)&v8, 0xCu);
    }
  }

  return 0LL;
}

void sub_1003BBB68(uint64_t a1, const char *a2)
{
  if (!*(void *)(a1 + 8))
  {
    uint64_t v7 = (os_log_s *)+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController");
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    int v14 = 136315138;
    int v15 = "SimpleNSStringToObjectTable_RemoveObjectForKey";
    int v8 = "%s: table empty";
    uint64_t v9 = v7;
    uint32_t v10 = 12;
LABEL_12:
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v8, (uint8_t *)&v14, v10);
    return;
  }

  uint64_t v4 = *(unsigned int *)(a1 + 16);
  uint64_t v5 = 0LL;
  uint64_t v6 = 0LL;
  while (([*(id *)(*(void *)(a1 + 8) + v5) isEqualToString:a2] & 1) == 0)
  {
    ++v6;
    v5 += 16LL;
    if (v4 == v6) {
      goto LABEL_10;
    }
  }

  if ((_DWORD)v4 == (_DWORD)v6)
  {
LABEL_10:
    uint32_t v11 = (os_log_s *)+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController");
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    int v14 = 138412546;
    int v15 = a2;
    __int16 v16 = 1024;
    int v17 = v4;
    int v8 = "NSSTable_Remove: did not find %@ (from %d entries)";
    uint64_t v9 = v11;
    uint32_t v10 = 18;
    goto LABEL_12;
  }

  double v12 = (os_log_s *)+[IDSFoundationLog utunController](&OBJC_CLASS___IDSFoundationLog, "utunController");
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    uint32_t v13 = *(const char **)(*(void *)(a1 + 8) + v5 + 8);
    int v14 = 138412802;
    int v15 = v13;
    __int16 v16 = 1024;
    int v17 = v6;
    __int16 v18 = 1024;
    int v19 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "NSSTable_Remove: removing %@ @%d (from %d entries)",  (uint8_t *)&v14,  0x18u);
  }

  --*(_DWORD *)(a1 + 16);
}

void sub_1003BBD80(uint64_t a1, uint64_t a2)
{
  int v4 = 0;
  char v5 = 0;
  int v6 = *(_DWORD *)(a1 + 16);
  char v10 = 0;
  do
  {
    if (v4 >= v6) {
      break;
    }
    char v9 = 0;
    uint64_t v7 = (void *)(*(void *)(a1 + 8) + 16LL * v4);
    (*(void (**)(uint64_t, void, void, char *, char *))(a2 + 16))(a2, *v7, v7[1], &v10, &v9);
    if (v9)
    {

      BOOL v8 = __OFSUB__(v6--, 1);
      if (!((v6 < 0) ^ v8 | (v6 == 0))) {
        *(_OWORD *)(*(void *)(a1 + 8) + 16LL * v4) = *(_OWORD *)(*(void *)(a1 + 8) + 16LL * v6);
      }
      char v5 = 1;
    }

    else
    {
      ++v4;
    }
  }

  while (!v10);
  if ((v5 & 1) != 0) {
    *(_DWORD *)(a1 + 16) = v6;
  }
}

void sub_1003BC850(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___IDSGroupEncryptionController2Shim);
  uint64_t v2 = (void *)qword_1009C0D00;
  qword_1009C0D00 = (uint64_t)v1;
}

void sub_1003BCD64( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

id sub_1003BCD7C(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id result = [a2 isEqualToString:*(void *)(a1 + 32)];
  if ((_DWORD)result)
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
    *a4 = 1;
  }

  return result;
}

void sub_1003BCF54(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    uint64_t v22 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "setAccount: Add the registraion listener for account: %@",  buf,  0xCu);
  }

  int v4 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
  char v5 = (void *)objc_claimAutoreleasedReturnValue([v4 accountWithUniqueID:*(void *)(a1 + 32)]);

  int v6 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  id obj = (id)objc_claimAutoreleasedReturnValue([v5 registeredDevices]);
  id v7 = [obj countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v17;
    do
    {
      for (uint64_t i = 0LL; i != v8; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v17 != v9) {
          objc_enumerationMutation(obj);
        }
        uint32_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v16 + 1) + 8 * (void)i) pushToken]);
        double v12 = (void *)objc_claimAutoreleasedReturnValue([v5 service]);
        uint32_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 identifier]);
        int v14 = (void *)objc_claimAutoreleasedReturnValue( +[IDSPushToken pushTokenWithData:withServiceLoggingHint:]( &OBJC_CLASS___IDSPushToken,  "pushTokenWithData:withServiceLoggingHint:",  v11,  v13));
        -[NSMutableSet addObject:](v6, "addObject:", v14);
      }

      id v8 = [obj countByEnumeratingWithState:&v16 objects:v20 count:16];
    }

    while (v8);
  }

  [*(id *)(*(void *)(a1 + 40) + 80) setObject:v6 forKeyedSubscript:*(void *)(a1 + 32)];
  [v5 addRegistrationListener:*(void *)(a1 + 40)];
}

id sub_1003BD2F8(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v7 = 138412290;
    uint64_t v8 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "setAccount: Remove the registraion listener for account: %@",  (uint8_t *)&v7,  0xCu);
  }

  int v4 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDAccountController sharedInstance](&OBJC_CLASS___IDSDAccountController, "sharedInstance"));
  char v5 = (void *)objc_claimAutoreleasedReturnValue([v4 accountWithUniqueID:*(void *)(a1 + 32)]);
  [v5 removeRegistrationListener:*(void *)(a1 + 40)];

  return [*(id *)(*(void *)(a1 + 40) + 80) setObject:0 forKeyedSubscript:*(void *)(a1 + 32)];
}

uint64_t sub_1003BD570(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_1003BF258(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1003BFAC4(_Unwind_Exception *a1)
{
}

void sub_1003BFB28(void *a1, int a2)
{
  int v4 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(*(void *)(a1[8] + 8LL) + 24LL)) {
      char v5 = @"YES";
    }
    else {
      char v5 = @"NO";
    }
    if (*(_BYTE *)(*(void *)(a1[9] + 8LL) + 24LL)) {
      int v6 = @"YES";
    }
    else {
      int v6 = @"NO";
    }
    uint64_t v7 = a1[4];
    uint64_t v8 = a1[5];
    v11[0] = 67110146;
    v11[1] = a2;
    __int16 v12 = 2112;
    uint32_t v13 = v5;
    __int16 v14 = 2112;
    int v15 = v6;
    __int16 v16 = 2112;
    uint64_t v17 = v7;
    __int16 v18 = 2112;
    uint64_t v19 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "sendMessage: sendKeyMaterialMessageDataOverQR completed with %d. completionBlocks called %@ %@, groupID %@, sessionID %@",  (uint8_t *)v11,  0x30u);
  }

  if (a1[6])
  {
    uint64_t v9 = *(void *)(a1[8] + 8LL);
    if (!*(_BYTE *)(v9 + 24))
    {
      *(_BYTE *)(v9 + 24) = 1;
      (*(void (**)(void))(a1[6] + 16LL))();
    }
  }

  if (a1[7])
  {
    uint64_t v10 = *(void *)(a1[9] + 8LL);
    if (!*(_BYTE *)(v10 + 24))
    {
      *(_BYTE *)(v10 + 24) = 1;
      (*(void (**)(void))(a1[7] + 16LL))();
    }
  }

void sub_1003BFC98(void *a1, void *a2)
{
  id v3 = a2;
  int v4 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = a1[11];
    id v7 = [v3 idsResponseCode];
    else {
      uint64_t v8 = @"NO";
    }
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v3 responseError]);
    int v18 = 138413314;
    *(void *)uint64_t v19 = v5;
    *(_WORD *)&v19[8] = 2048;
    *(void *)&v19[10] = v6;
    *(_WORD *)&v19[18] = 2048;
    *(void *)&v19[20] = v7;
    *(_WORD *)&v19[28] = 2112;
    *(void *)&v19[30] = v8;
    *(_WORD *)&v19[38] = 2112;
    *(void *)&v19[40] = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Group session encryption message completion block fired { GUID: %@, command: %ld, responseCode: %lu, lastCall: %@, error: %@ }",  (uint8_t *)&v18,  0x34u);
  }

  if ([v3 lastCall])
  {
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController"));
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v11 = [v3 responseCode];
      if (*(_BYTE *)(*(void *)(a1[9] + 8LL) + 24LL)) {
        __int16 v12 = @"YES";
      }
      else {
        __int16 v12 = @"NO";
      }
      if (*(_BYTE *)(*(void *)(a1[10] + 8LL) + 24LL)) {
        uint32_t v13 = @"YES";
      }
      else {
        uint32_t v13 = @"NO";
      }
      uint64_t v14 = a1[5];
      uint64_t v15 = a1[6];
      int v18 = 67110146;
      *(_DWORD *)uint64_t v19 = v11;
      *(_WORD *)&void v19[4] = 2112;
      *(void *)&v19[6] = v12;
      *(_WORD *)&v19[14] = 2112;
      *(void *)&v19[16] = v13;
      *(_WORD *)&v19[24] = 2112;
      *(void *)&v19[26] = v14;
      *(_WORD *)&v19[34] = 2112;
      *(void *)&v19[36] = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "sendMessage: sendMessageWithSendParameters completed with %d. completionBlocks called %@ %@, groupID %@, sessionID %@",  (uint8_t *)&v18,  0x30u);
    }

    if (a1[7])
    {
      uint64_t v16 = *(void *)(a1[9] + 8LL);
      if (!*(_BYTE *)(v16 + 24))
      {
        *(_BYTE *)(v16 + 24) = 1;
        (*(void (**)(void, id))(a1[7] + 16))(a1[7], [v3 responseCode]);
      }
    }

    if (a1[8])
    {
      uint64_t v17 = *(void *)(a1[10] + 8LL);
      if (!*(_BYTE *)(v17 + 24))
      {
        *(_BYTE *)(v17 + 24) = 1;
        (*(void (**)(void))(a1[8] + 16LL))();
      }
    }
  }
}

void sub_1003BFF0C(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController_oversize]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController_oversize"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = 136315651;
    uint64_t v5 = "IDSGroupEncryptionController2Shim.m";
    __int16 v6 = 1024;
    int v7 = 678;
    __int16 v8 = 2113;
    uint64_t v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s:%d %{private}@", (uint8_t *)&v4, 0x1Cu);
  }
}

id sub_1003C00F0(void *a1)
{
  uint64_t v1 = (void *)a1[4];
  uint64_t v2 = a1[5];
  uint64_t v3 = a1[6];
  uint64_t v4 = a1[7];
  uint64_t v5 = a1[8];
  [v1 _multiwayFTMessageSendTimeout];
  LOBYTE(v7) = 0;
  return objc_msgSend( v1,  "_sendMessage:toDestination:forGroup:sessionID:command:timeout:shouldExpire:useQR:completion:completionBlock:",  v2,  v3,  v4,  v5,  210,  0,  v7,  0,  0);
}

id sub_1003C0260(void *a1)
{
  uint64_t v1 = (void *)a1[4];
  uint64_t v2 = a1[5];
  uint64_t v3 = a1[6];
  uint64_t v4 = a1[7];
  uint64_t v5 = a1[8];
  [v1 _multiwayFTMessageSendTimeout];
  LOBYTE(v7) = 0;
  return objc_msgSend( v1,  "_sendMessage:toDestination:forGroup:sessionID:command:timeout:shouldExpire:useQR:completion:completionBlock:",  v2,  v3,  v4,  v5,  210,  1,  v7,  0,  0);
}

uint64_t sub_1003C08A8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 pushToken]);
  if (v7)
  {
    __int16 v8 = (void *)objc_claimAutoreleasedReturnValue([v5 pushToken]);
    if ([v8 isNull])
    {
      unsigned int v9 = 0;
    }

    else
    {
      uint64_t v10 = *(void **)(a1 + 32);
      unsigned int v11 = (void *)objc_claimAutoreleasedReturnValue([v5 pushToken]);
      __int16 v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "__imHexString"));
      unsigned int v9 = [v10 containsObject:v12];
    }
  }

  else
  {
    unsigned int v9 = 0;
  }

  uint32_t v13 = (void *)objc_claimAutoreleasedReturnValue([v6 pushToken]);
  if (v13)
  {
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v6 pushToken]);
    if ([v14 isNull])
    {
      unsigned int v15 = 0;
    }

    else
    {
      uint64_t v16 = *(void **)(a1 + 32);
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v6 pushToken]);
      int v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "__imHexString"));
      unsigned int v15 = [v16 containsObject:v18];
    }
  }

  else
  {
    unsigned int v15 = 0;
  }

  if (v9 ^ 1 | v15) {
    uint64_t v19 = (v9 ^ 1) & v15;
  }
  else {
    uint64_t v19 = -1LL;
  }

  return v19;
}

void sub_1003C164C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sessionController]);
  uint64_t v3 = (uint64_t *)(a1 + 40);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 sessionWithGroupID:*(void *)(a1 + 40)]);

  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController"));
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *v3;
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v4 uniqueID]);
    *(_DWORD *)buf = 138412802;
    uint64_t v25 = v6;
    __int16 v26 = 2112;
    unsigned int v27 = v7;
    __int16 v28 = 2112;
    id v29 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "rollNewKeysAfterResettingPrekeysForGroups: %@ session %@: %@",  buf,  0x20u);
  }

  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472LL;
  v20[2] = sub_1003C1858;
  v20[3] = &unk_1008F60E8;
  __int128 v21 = *(_OWORD *)(a1 + 32);
  id v22 = *(id *)(a1 + 48);
  id v8 = v4;
  id v23 = v8;
  unsigned int v9 = objc_retainBlock(v20);
  uint64_t v10 = (void (**)(void))v9;
  if (v8)
  {
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472LL;
    v18[2] = sub_1003C1A14;
    v18[3] = &unk_1008F6330;
    uint64_t v19 = v9;
    [v8 recvMembershipChangeEventWithReason:3 completionHandler:v18];
  }

  else
  {
    unsigned int v11 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController"));
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      sub_1006AB888((uint64_t)v3, v11, v12, v13, v14, v15, v16, v17);
    }

    v10[2](v10);
  }
}

void sub_1003C1858(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) resetKeysForGroup:*(void *)(a1 + 40) shouldRemoveCurrentParticipants:1];
  uint64_t v4 = im_primary_queue(v2, v3);
  id v5 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v4);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_1003C1908;
  v8[3] = &unk_1008F60E8;
  void v8[4] = *(void *)(a1 + 32);
  id v6 = *(id *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 40);
  id v9 = v6;
  uint64_t v10 = v7;
  id v11 = *(id *)(a1 + 56);
  dispatch_async(v5, v8);
}

void sub_1003C1908(uint64_t a1)
{
  id v2 =  [*(id *)(a1 + 32) createRealTimeEncryptionFullIdentityForDevice:*(void *)(a1 + 40) completionBlock:0];
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 48);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) uniqueID]);
  [v3 sendPublicKeyToGroup:v4 sessionID:v5];

  id v6 = *(void **)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 48);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) uniqueID]);
  [v6 requestKeyMaterialForGroup:v7 sessionID:v8];

  id v9 = *(void **)(a1 + 32);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) uniqueID]);
  [v9 _updateRelevantEncryptedDataBlobForSession:v10];

  id v11 = (id)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjectsAndKeys:",  &off_100947FC8,  IDSGlobalLinkOptionSessionInfoRequestTypeKey,  &off_100947FE0,  IDSGlobalLinkOptionSessionInfoCommandFlagKey,  0LL));
  [*(id *)(a1 + 56) requestSessionInfoWithOptions:v11];
}

uint64_t sub_1003C1A14(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1003C1DFC(uint64_t a1)
{
  id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController_oversize]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController_oversize"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v4 = 136315651;
    id v5 = "IDSGroupEncryptionController2Shim.m";
    __int16 v6 = 1024;
    int v7 = 1013;
    __int16 v8 = 2113;
    uint64_t v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s:%d %{private}@", (uint8_t *)&v4, 0x1Cu);
  }
}

void sub_1003C1ECC(void *a1)
{
  id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = a1[5];
    uint64_t v5 = a1[6];
    int v10 = 138412802;
    uint64_t v11 = v3;
    __int16 v12 = 2112;
    uint64_t v13 = v4;
    __int16 v14 = 2112;
    uint64_t v15 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "didReceiveEndpointsUpdate: %@ forGroup: %@ - roll new keys for the group (previous %@)",  (uint8_t *)&v10,  0x20u);
  }

  __int16 v6 = (void *)a1[7];
  int v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObject:](&OBJC_CLASS___NSArray, "arrayWithObject:", a1[5]));
  [v6 rollNewKeysAfterResettingPrekeysForGroups:v7 withReason:2];

  [*(id *)(a1[7] + 88) invalidate];
  uint64_t v8 = a1[7];
  uint64_t v9 = *(void **)(v8 + 88);
  *(void *)(v8 + 8_Block_object_dispose((const void *)(v1 - 160), 8) = 0LL;
}

void sub_1003C27A8(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_1003C2894;
  v10[3] = &unk_1008FC5A0;
  id v3 = v2;
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void **)(a1 + 48);
  id v11 = v3;
  uint64_t v12 = v4;
  id v13 = v5;
  [v3 initializeWithCompletion:v10];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_1003C2A94;
  v7[3] = &unk_1008FC5C8;
  __int16 v6 = *(void **)(a1 + 48);
  v7[4] = *(void *)(a1 + 40);
  id v8 = v6;
  id v9 = *(id *)(a1 + 56);
  [*(id *)(a1 + 32) setResolvedEndpointsDidUpdateHandler:v7];
}

void sub_1003C2894(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  int v7 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  id v8 = v5;
  id v9 = [v8 countByEnumeratingWithState:&v17 objects:v29 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v18;
    do
    {
      uint64_t v12 = 0LL;
      do
      {
        if (*(void *)v18 != v11) {
          objc_enumerationMutation(v8);
        }
        id v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((void *)&v17 + 1) + 8 * (void)v12), "pushToken", (void)v17));
        __int16 v14 = (void *)objc_claimAutoreleasedReturnValue(+[IDSPushToken pushTokenWithData:](&OBJC_CLASS___IDSPushToken, "pushTokenWithData:", v13));
        -[NSMutableSet addObject:](v7, "addObject:", v14);

        uint64_t v12 = (char *)v12 + 1;
      }

      while (v10 != v12);
      id v10 = [v8 countByEnumeratingWithState:&v17 objects:v29 count:16];
    }

    while (v10);
  }

  uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController"));
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v16 = a1[4];
    *(_DWORD *)buf = 134218754;
    uint64_t v22 = v16;
    __int16 v23 = 2112;
    id v24 = v8;
    __int16 v25 = 2112;
    id v26 = v6;
    __int16 v27 = 2112;
    __int16 v28 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "setMembers: endpointSubscription: %p initialResolvedEndpoints: %@ error: %@ _lastKnownGroupIDToPushTokens: %@",  buf,  0x2Au);
  }

  os_unfair_lock_lock((os_unfair_lock_t)(a1[5] + 36LL));
  [*(id *)(a1[5] + 72) setObject:v7 forKeyedSubscript:a1[6]];
  os_unfair_lock_unlock((os_unfair_lock_t)(a1[5] + 36LL));
}

id sub_1003C2A94(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) didReceiveEndpointsUpdate:a2 forGroup:*(void *)(a1 + 40) sessionID:*(void *)(a1 + 48)];
}

void sub_1003C3184(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sessionController]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 sessionWithGroupID:*(void *)(a1 + 40)]);

  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog RealTimeEncryptionController]( &OBJC_CLASS___IDSFoundationLog,  "RealTimeEncryptionController"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 40);
    int v6 = 138412290;
    uint64_t v7 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Account is no longer registered, ending group: %@",  (uint8_t *)&v6,  0xCu);
  }

  [v3 endSessionWithReason:47];
}

uint64_t IDSProtoApplicationKeyEntryReadFrom(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    if ((v6 >> 3) == 2)
    {
      uint64_t Data = PBReaderReadData(a2);
      uint64_t v18 = objc_claimAutoreleasedReturnValue(Data);
      __int128 v19 = *(void **)(a1 + 16);
      *(void *)(a1 + 16) = v18;
    }

    else if ((v6 >> 3) == 1)
    {
      char v12 = 0;
      unsigned int v13 = 0;
      uint64_t v14 = 0LL;
      *(_BYTE *)(a1 + 24) |= 1u;
      while (1)
      {
        unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1LL || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v16 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0) {
          goto LABEL_30;
        }
        v12 += 7;
        BOOL v9 = v13++ >= 9;
        if (v9)
        {
          LODWORD(v14) = 0;
          goto LABEL_32;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_30:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        LODWORD(v14) = 0;
      }
LABEL_32:
      *(_DWORD *)(a1 + _Block_object_dispose((const void *)(v1 - 160), 8) = v14;
    }

    else
    {
      uint64_t result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result) {
        return result;
      }
    }
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1003C7554( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

id sub_1003C7584()
{
  if (qword_1009C0D10 != -1) {
    dispatch_once(&qword_1009C0D10, &stru_100903F98);
  }
  return (id)qword_1009C0D08;
}

void sub_1003C75C4(id a1)
{
  nw_protocol_definition_t definition = nw_framer_create_definition("IDSNWSocketPairConnectionProtocol", 0, &stru_100903FD8);
  id v2 = (void *)qword_1009C0D08;
  qword_1009C0D08 = (uint64_t)definition;
}

int sub_1003C75F8(id a1, OS_nw_framer *a2)
{
  id v2 = a2;
  nw_framer_set_input_handler(v2, &stru_100904018);
  nw_framer_set_output_handler(v2, &stru_100904080);
  nw_framer_pass_through_output(v2);

  return 1;
}

unint64_t sub_1003C7644(id a1, OS_nw_framer *a2)
{
  id v2 = a2;
  size_t v3 = +[IDSSocketPairMessage headerDataSize](&OBJC_CLASS___IDSSocketPairMessage, "headerDataSize");
  v5.n128_u64[0] = 67109376LL;
  __n128 v15 = v5;
  do
  {
    uint64_t v17 = 0LL;
    uint64_t v18 = &v17;
    uint64_t v19 = 0x2020000000LL;
    char v20 = 0;
    __chkstk_darwin(v5, v4);
    unint64_t v6 = (__n128 *)((char *)&v15 - ((v3 + 15) & 0x1FFFFFFF0LL));
    if ((_DWORD)v3) {
      memset((char *)&v15 - ((v3 + 15) & 0x1FFFFFFF0LL), 170, v3);
    }
    parse[0] = _NSConcreteStackBlock;
    parse[1] = 3221225472LL;
    parse[2] = sub_1003C7914;
    parse[3] = &unk_100904040;
    parse[4] = &v17;
    parse[5] = v3;
    if (!nw_framer_parse_input(v2, v3, v3, (uint8_t *)&v15 - ((v3 + 15) & 0x1FFFFFFF0LL), parse))
    {
      int v12 = 1;
      goto LABEL_18;
    }

    if (!*((_BYTE *)v18 + 24))
    {
      BOOL v9 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog socketPairConnection]( &OBJC_CLASS___IDSFoundationLog,  "socketPairConnection"));
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "IDSNWSocketPairConnection: IDSNWSocketPairConnectionProtocol returning -- no header.",  buf,  2u);
      }

      goto LABEL_16;
    }

    int v7 = v6->n128_u8[0];
    unsigned int v8 = *(unsigned __int32 *)((char *)v6->n128_u32 + 1);
    BOOL v9 = nw_framer_message_create(v2);
    int v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog socketPairConnection](&OBJC_CLASS___IDSFoundationLog, "socketPairConnection"));
    unsigned int v11 = bswap32(v8);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = v15.n128_u32[0];
      unsigned int v22 = v11;
      __int16 v23 = 1024;
      int v24 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "IDSNWSocketPairConnection: IDSNWSocketPairConnectionProtocol read message_length:%u, type:%u",  buf,  0xEu);
    }

    if (!nw_framer_deliver_input_no_copy(v2, v3 + v11, v9, 1))
    {
      unsigned int v13 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog socketPairConnection]( &OBJC_CLASS___IDSFoundationLog,  "socketPairConnection"));
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "IDSNWSocketPairConnection: IDSNWSocketPairConnectionProtocol returning partial data.",  buf,  2u);
      }

LABEL_16:
      int v12 = 1;
      goto LABEL_17;
    }

    int v12 = 0;
LABEL_17:

LABEL_18:
    _Block_object_dispose(&v17, 8);
  }

  while (!v12);

  return 0LL;
}

void sub_1003C78E4(_Unwind_Exception *a1)
{
}

uint64_t sub_1003C7914(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 && *(void *)(a1 + 40) <= a3) {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
  }
  return 0LL;
}

void sub_1003C793C(id a1, OS_nw_framer *a2, OS_nw_protocol_metadata *a3, unint64_t a4, BOOL a5)
{
}

void sub_1003C7C4C(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if ((a2 - 4) >= 2 && a2)
  {
    if (a2 == 3)
    {
      uint64_t v6 = nw_connection_copy_connected_path(*(void *)(*(void *)(a1 + 32) + 88LL));
      int v7 = (void *)v6;
      if (v6)
      {
        uint64_t is_multilayer_packet_logging_enabled = nw_path_is_multilayer_packet_logging_enabled(v6);
        BOOL v9 = *(void **)(a1 + 32);
      }

      else
      {
        uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog socketPairConnection]( &OBJC_CLASS___IDSFoundationLog,  "socketPairConnection"));
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          __n128 v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
          int v18 = 138412290;
          uint64_t v19 = v15;
          _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "IDSNWSocketPairConnection: %@ Connection: nw_path_t is NULL, dissabling cross-layer logging.",  (uint8_t *)&v18,  0xCu);
        }

        BOOL v9 = *(void **)(a1 + 32);
        uint64_t is_multilayer_packet_logging_enabled = 0LL;
      }

      [v9 setShouldUseCrossLayerLogging:is_multilayer_packet_logging_enabled];
      char v16 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog socketPairConnection]( &OBJC_CLASS___IDSFoundationLog,  "socketPairConnection"));
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
        int v18 = 138412290;
        uint64_t v19 = v17;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "IDSNWSocketPairConnection: %@ Connection from listener is ready.",  (uint8_t *)&v18,  0xCu);
      }

      [*(id *)(a1 + 32) _receiveFromNWConnection:*(void *)(*(void *)(a1 + 32) + 88)];
    }

    else
    {
      int v12 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog socketPairConnection]( &OBJC_CLASS___IDSFoundationLog,  "socketPairConnection"));
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
        int v18 = 138412546;
        uint64_t v19 = v13;
        __int16 v20 = 1024;
        int v21 = a2;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "IDSNWSocketPairConnection: %@ Listening connection state: %d",  (uint8_t *)&v18,  0x12u);
      }
    }
  }

  else
  {
    int v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog socketPairConnection](&OBJC_CLASS___IDSFoundationLog, "socketPairConnection"));
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
      int v18 = 138412290;
      uint64_t v19 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "IDSNWSocketPairConnection: %@ Listening connection closed.",  (uint8_t *)&v18,  0xCu);
    }

    [*(id *)(a1 + 32) endSession];
  }
}

void sub_1003C81A8(uint64_t a1, void *a2, void *a3, int a4, void *a5)
{
  BOOL v9 = a2;
  int v10 = a3;
  id v11 = a5;
  if (v9)
  {
    size_t size = dispatch_data_get_size(v9);
    if (HIDWORD(size)) {
      goto LABEL_24;
    }
  }

  else
  {
    size_t size = 0LL;
  }

  unsigned int v13 = +[IDSSocketPairMessage headerDataSize](&OBJC_CLASS___IDSSocketPairMessage, "headerDataSize");
  BOOL is_final = nw_content_context_get_is_final(v10);
  __n128 v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog socketPairConnection](&OBJC_CLASS___IDSFoundationLog, "socketPairConnection"));
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    char v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
    *(_DWORD *)buf = 138412546;
    uint64_t v34 = v16;
    __int16 v35 = 1024;
    LODWORD(v36) = size;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "IDSNWSocketPairConnection: %@ Read %u bytes",  buf,  0x12u);
  }

  if (v9 && size >= v13)
  {
    BOOL v30 = is_final;
    uint64_t v17 = v9;
    int v29 = a4;
    int v18 = (void *)objc_claimAutoreleasedReturnValue(-[dispatch_data_s subdataWithRange:](v17, "subdataWithRange:", 0LL, v13));
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue( -[dispatch_data_s subdataWithRange:]( v17,  "subdataWithRange:",  v13,  (char *)-[dispatch_data_s length](v17, "length") - v13));
    id v20 = v18;
    if (bswap32(*(_DWORD *)((char *)[v20 bytes] + 1)) + v13 == (_DWORD)size && v29 != 0)
    {
      unsigned int v22 = (void *)objc_claimAutoreleasedReturnValue( +[IDSSocketPairMessage messageWithHeaderData:data:]( &OBJC_CLASS___IDSSocketPairMessage,  "messageWithHeaderData:data:",  v20,  v19));
      [*(id *)(a1 + 32) _processIncomingRawMessage:v22];
    }

    BOOL is_final = v30;
  }

  if (v11) {
    int v23 = 1;
  }
  else {
    int v23 = is_final;
  }
  if (v23 != 1)
  {
    __int16 v27 = (void *)objc_claimAutoreleasedReturnValue( +[IDSDaemonPriorityQueueController sharedInstance]( &OBJC_CLASS___IDSDaemonPriorityQueueController,  "sharedInstance"));
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472LL;
    v31[2] = sub_1003C84DC;
    v31[3] = &unk_1008F5F80;
    __int16 v28 = *(void **)(a1 + 40);
    void v31[4] = *(void *)(a1 + 32);
    id v32 = v28;
    [v27 performBlockWithPriority:v31 priority:*(void *)(*(void *)(a1 + 32) + 80)];

    goto LABEL_26;
  }

  int v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog socketPairConnection](&OBJC_CLASS___IDSFoundationLog, "socketPairConnection"));
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
    id v26 = @"NO";
    *(_DWORD *)buf = 138412802;
    uint64_t v34 = v25;
    __int16 v35 = 2112;
    if (is_final) {
      id v26 = @"YES";
    }
    id v36 = v11;
    __int16 v37 = 2112;
    unsigned int v38 = v26;
    _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "IDSNWSocketPairConnection: %@ nw_connection_receive_message Error %@, isFinal %@",  buf,  0x20u);
  }

LABEL_24:
  [*(id *)(a1 + 32) endSession];
LABEL_26:
}

id sub_1003C84DC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _receiveFromNWConnection:*(void *)(a1 + 40)];
}

_DWORD *sub_1003C8DDC(uint64_t a1)
{
  uint64_t result = *(_DWORD **)(a1 + 32);
  if (!result[8]) {
    return [result _dequeueNextMessageFromOutgoingQueue];
  }
  return result;
}

void sub_1003C916C(uint64_t a1, void *a2)
{
  id v9 = a2;
  uint64_t v4 = objc_opt_class(&OBJC_CLASS___NSDictionary, v3);
  char isKindOfClass = objc_opt_isKindOfClass(v9, v4);
  uint64_t v6 = *(void **)(a1 + 32);
  if ((isKindOfClass & 1) != 0)
  {
    uint64_t v7 = objc_claimAutoreleasedReturnValue([v9 objectForKey:@"originalMessage"]);

    id v8 = (id)v7;
  }

  else
  {
    id v8 = v9;
  }

  id v10 = v8;
  [v6 addObject:v8];
}

void sub_1003C92C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog socketPairConnection](&OBJC_CLASS___IDSFoundationLog, "socketPairConnection"));
  id v5 = v4;
  if (v3)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
      int v8 = 138412546;
      id v9 = v6;
      __int16 v10 = 2112;
      id v11 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "IDSNWSocketPairConnection: _sendDataViaNWConnection: %@ Error %@! Could not write data to nw_connection.",  (uint8_t *)&v8,  0x16u);
    }

    [*(id *)(a1 + 32) endSession];
  }

  else
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
      sub_1006AC3F8(a1, v5);
    }
  }

  --*(_DWORD *)(*(void *)(a1 + 32) + 32LL);
  uint64_t v7 = *(_DWORD **)(a1 + 32);
  if (!v7[8]) {
    [v7 _dequeueNextMessageFromOutgoingQueue];
  }
}

void sub_1003C9580(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

void sub_1003C9B74(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 16);
  *(void *)(v3 + 16) = 0LL;

  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 8LL));
}

uint64_t sub_1003CA0D0(uint64_t a1)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_1003CA134;
  v3[3] = &unk_1008F78B0;
  __int128 v4 = *(_OWORD *)(a1 + 32);
  uint64_t v1 = *(unsigned int *)(a1 + 48);
  int v5 = *(_DWORD *)(a1 + 52);
  return IDSTransportThreadAddSocket(v1, v3, 0LL);
}

void sub_1003CA134(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(v2 + 32);
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 8));
  if (v3)
  {
    uint64_t v4 = *(unsigned int *)(a1 + 48);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_1003CA248;
    v8[3] = &unk_100904120;
    uint64_t v5 = *(void *)(a1 + 40);
    void v8[4] = *(void *)(a1 + 32);
    sub_1001FF594(v3, v5, v4, v8);
  }

  else
  {
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog Multiplexer](&OBJC_CLASS___IDSFoundationLog, "Multiplexer"));
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      uint64_t v10 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "startReadOnTransportThread fd ready to read but os_channel now nil - %@",  buf,  0xCu);
    }
  }

uint64_t sub_1003CA248(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (uint64_t (**)(id, void))objc_retainBlock(*(id *)(*(void *)(a1 + 32) + 16LL));
  *(_BYTE *)(a2 + 43) = *(_BYTE *)(*(void *)(a1 + 32) + 66LL);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 8LL));
  uint64_t v5 = v4[2](v4, a2);

  return v5;
}

nw_protocol_definition_t sub_1003CA7A4(void *a1)
{
  start_handler[0] = _NSConcreteStackBlock;
  start_handler[1] = 3221225472LL;
  start_handler[2] = sub_1003CA828;
  start_handler[3] = &unk_1009041B8;
  id v5 = a1;
  id v1 = v5;
  nw_protocol_definition_t definition = nw_framer_create_definition("IDSGroupSessionProtocol", 0, start_handler);

  return definition;
}

uint64_t sub_1003CA828(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = a2;
  [v3 setFramer:v4];
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) transport]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 participantIDToAliasConverter]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) multiplexerParams]);
  id v8 = [v7 participantID];
  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) multiplexerParams]);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 salt]);
  id v11 = [v6 participantIDForAlias:v8 salt:v10];

  [*(id *)(a1 + 32) setContext:v11];
  unsigned __int8 v12 = [*(id *)(a1 + 32) verboseFunctionalLogging];
  input_handler[0] = _NSConcreteStackBlock;
  input_handler[1] = 3221225472LL;
  input_handler[2] = sub_1003CA974;
  input_handler[3] = &unk_100904170;
  id v16 = v11;
  unsigned __int8 v17 = v12;
  id v15 = *(id *)(a1 + 32);
  nw_framer_set_input_handler(v4, input_handler);
  nw_framer_set_output_handler(v4, &stru_100904190);

  return 1LL;
}

uint64_t sub_1003CA974(uint64_t a1, nw_framer *a2)
{
  do
  {
    parse[0] = _NSConcreteStackBlock;
    parse[1] = 3221225472LL;
    parse[2] = sub_1003CAA24;
    parse[3] = &unk_100904148;
    uint64_t v4 = *(void **)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 40);
    char v10 = *(_BYTE *)(a1 + 48);
    id v8 = v4;
    BOOL v5 = nw_framer_parse_input(a2, 1uLL, 0xFFFFFFFFuLL, 0LL, parse);
  }

  while (v5);
  return 1LL;
}

size_t sub_1003CAA24(uint64_t a1, const void *a2, size_t a3)
{
  size_t result = 0LL;
  if (a2 && a3)
  {
    uint64_t v7 = _IDSLinkPacketBufferCreate( "/Library/Caches/com.apple.xbs/Sources/IdentityServices_Swift/IDSAgent/IDSMultiplexer.m",  255LL);
    id v8 = (uint64_t *)v7;
    uint64_t v9 = *(void *)(a1 + 40);
    if (v9)
    {
      *(_DWORD *)(v7 + 536) |= 1u;
      *(void *)(v7 + 48_Block_object_dispose((const void *)(v1 - 160), 8) = v9;
    }

    memcpy(*(void **)v7, a2, a3);
    v8[2] = a3;
    char v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog Multiplexer](&OBJC_CLASS___IDSFoundationLog, "Multiplexer"));
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void *)(a1 + 40);
      int v14 = 134218240;
      size_t v15 = a3;
      __int16 v16 = 2048;
      uint64_t v17 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "input_handler read %lu bytes for participant %llu",  (uint8_t *)&v14,  0x16u);
    }

    if (*(_BYTE *)(a1 + 48))
    {
      unsigned __int8 v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog Multiplexer](&OBJC_CLASS___IDSFoundationLog, "Multiplexer"));
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v13 = sub_1001FF4E0(*v8, v8[2]);
        int v14 = 136315138;
        size_t v15 = (size_t)v13;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "input_handler whole packet:\n%s",  (uint8_t *)&v14,  0xCu);
      }
    }

    [*(id *)(a1 + 32) callPacketBufferReadHandler:v8];
    _IDSLinkPacketBufferRelease( "/Library/Caches/com.apple.xbs/Sources/IdentityServices_Swift/IDSAgent/IDSMultiplexer.m",  270LL,  v8);
    return a3;
  }

  return result;
}

void sub_1003CABCC(id a1, OS_nw_framer *a2, OS_nw_protocol_metadata *a3, unint64_t a4, BOOL a5)
{
}

void sub_1003CB1E8(uint64_t a1)
{
}

void sub_1003CB6B0(uint64_t a1, void *a2, void *a3, char a4, void *a5)
{
  id v9 = a3;
  id v10 = a5;
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472LL;
  void v25[2] = sub_1003CB88C;
  v25[3] = &unk_1008FC640;
  char v30 = a4;
  id v11 = v9;
  id v26 = v11;
  id v12 = v10;
  uint64_t v13 = *(void *)(a1 + 32);
  int v14 = *(void **)(a1 + 40);
  id v27 = v12;
  uint64_t v28 = v13;
  id v29 = v14;
  id v15 = a2;
  __int16 v16 = objc_retainBlock(v25);
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 184LL));
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) multiplexerParams]);
  id v18 = [v17 participantID];

  uint64_t v19 = _IDSLinkPacketBufferCreate( "/Library/Caches/com.apple.xbs/Sources/IdentityServices_Swift/IDSAgent/IDSMultiplexer.m",  485LL);
  uint64_t v20 = v19;
  if (v18)
  {
    *(_DWORD *)(v19 + 536) |= 1u;
    *(void *)(v19 + 48_Block_object_dispose((const void *)(v1 - 160), 8) = v18;
  }

  uint64_t v21 = *(void *)v19;
  *(_WORD *)uint64_t v21 = __rev16([*(id *)(a1 + 32) localPort]);
  unsigned __int16 v22 = (unsigned __int16)[*(id *)(a1 + 32) remotePort];
  *(_BYTE *)(v21 + 2) = HIBYTE(v22);
  *(_BYTE *)(v21 + 3) = v22;
  *(_DWORD *)(v21 + 4) = 0;
  id v23 = v15;
  memcpy((void *)(v21 + 8), [v23 bytes], (size_t)objc_msgSend(v23, "length"));
  int v24 = (char *)[v23 length];

  *(void *)(v20 + 16) = v24 + 8;
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 184LL));
  [*(id *)(a1 + 32) callPacketBufferReadHandler:v20];
  ((void (*)(void *))v16[2])(v16);
}

id sub_1003CB88C(id result)
{
  id v1 = (id *)result;
  if (*((_BYTE *)result + 64))
  {
    uint64_t v2 = (nw_content_context *)*((void *)result + 4);
    if (!v2 || (size_t result = (id)nw_content_context_get_is_final(v2), (_DWORD)result)) {
      exit(0);
    }
  }

  if (!v1[5]) {
    return [v1[6] receiveFromSimulatorSendToQRLoopFromConnection:v1[7]];
  }
  return result;
}

void sub_1003CB904(id a1, OS_nw_error *a2)
{
  if (a2)
  {
    int error_code = nw_error_get_error_code(a2);
    *__error() = error_code;
  }

void sub_1003CBE48(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___IDSDevicePropertiesStateNotifier);
  uint64_t v2 = (void *)qword_1009C0D20;
  qword_1009C0D20 = (uint64_t)v1;
}

BOOL sub_1003CC744(void *a1)
{
  id v1 = a1;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 unprefixedURI]);
  CMFItemFromString = (const void *)CreateCMFItemFromString();
  int IsItemBlocked = CMFBlockListIsItemBlocked();
  if (CMFItemFromString) {
    CFRelease(CMFItemFromString);
  }

  return IsItemBlocked != 0;
}

NSMutableData *sub_1003CCD80(void *a1)
{
  id v1 = a1;
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSMutableData);
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "allObjects", 0));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 sortedArrayUsingComparator:&stru_100904298]);

  id v5 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v11;
    do
    {
      id v8 = 0LL;
      do
      {
        if (*(void *)v11 != v7) {
          objc_enumerationMutation(v4);
        }
        -[NSMutableData appendData:](v2, "appendData:", *(void *)(*((void *)&v10 + 1) + 8LL * (void)v8));
        id v8 = (char *)v8 + 1;
      }

      while (v6 != v8);
      id v6 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }

    while (v6);
  }

  return v2;
}

void sub_1003CD968(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1003CD368LL);
  }

  _Unwind_Resume(a1);
}

id sub_1003CD9DC(id a1, IDSServiceProperties *a2)
{
  return -[IDSServiceProperties queryService](a2, "queryService");
}

int64_t sub_1003CDAD8(id a1, NSData *a2, NSData *a3)
{
  uint64_t v4 = a3;
  id v5 = (void *)objc_claimAutoreleasedReturnValue(-[NSData __imHexString](a2, "__imHexString"));
  id v6 = (void *)objc_claimAutoreleasedReturnValue(-[NSData __imHexString](v4, "__imHexString"));

  id v7 = [v5 compare:v6];
  return (int64_t)v7;
}

void sub_1003CDB84(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___IDSDevicePolicyController);
  uint64_t v2 = (void *)qword_1009C0D30;
  qword_1009C0D30 = (uint64_t)v1;
}

void sub_1003CDE04(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    if (a2 == 2)
    {
      objc_begin_catch(exception_object);
      objc_end_catch();
      JUMPOUT(0x1003CDD78LL);
    }

    objc_begin_catch(exception_object);
    os_unfair_lock_unlock(v2);
    objc_exception_rethrow();
    __break(1u);
    JUMPOUT(0x1003CDE50LL);
  }

  _Unwind_Resume(exception_object);
}

void sub_1003CDE60(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1003CDE28LL);
  }
  objc_terminate();
  -[IDSDevicePolicyController endFairplayAuthenticationForDeviceWithCbuuid:](v2, v3, v4);
}

void sub_1003CDEB8(void *a1)
{
}

void sub_1003CDECC(_Unwind_Exception *a1)
{
}

void sub_1003CE258(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    if (a2 == 2)
    {
      objc_begin_catch(exception_object);
      objc_end_catch();
      JUMPOUT(0x1003CE0A0LL);
    }

    objc_begin_catch(exception_object);
    os_unfair_lock_unlock(v2);
    objc_exception_rethrow();
    __break(1u);
    JUMPOUT(0x1003CE2E8LL);
  }

  _Unwind_Resume(exception_object);
}

void sub_1003CE84C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(dispatch_queue_s **)(v1 + 32);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1003CE8A4;
  block[3] = &unk_1008F6010;
  void block[4] = v1;
  dispatch_async(v2, block);
}

id sub_1003CE8A4(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Migration completed, calling updateUsers",  v4,  2u);
  }

  return [*(id *)(*(void *)(a1 + 32) + 16) reloadUsersForRealm:1];
}

void sub_1003CEAEC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

Class sub_1003CEB04(uint64_t a1)
{
  SEL v3 = 0LL;
  if (!qword_1009C0D40)
  {
    __int128 v4 = off_1009042D8;
    uint64_t v5 = 0LL;
    qword_1009C0D40 = _sl_dlopen(&v4, &v3);
  }

  if (!qword_1009C0D40) {
    sub_1006AC6C8(&v3);
  }
  if (v3) {
    free(v3);
  }
  Class result = objc_getClass("UMUserPersona");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL)) {
    sub_1006AC744();
  }
  qword_1009C0D38 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  return result;
}

void sub_1003CFC40(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, double a5)
{
  id v12 = a4;
  id v9 = *(void **)(a1 + 32);
  __int128 v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) localObject]);
  __int128 v11 = (void *)objc_claimAutoreleasedReturnValue([v9 broadcasterForLocalObject:v10 messageContext:*(void *)(a1 + 40)]);

  if (v11) {
    [v11 iMessageReportSpamCheckUnknownResponseForRequestID:*(void *)(a1 + 48) status:a2 abusive:a3 delay:v12 withError:a5];
  }
}

id sub_1003CFCE4(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (!v1)
  {
LABEL_13:
    id v5 = 0LL;
    goto LABEL_15;
  }

  SEL v3 = (void *)objc_claimAutoreleasedReturnValue([v1 domain]);
  unsigned int v4 = [v3 isEqualToString:NSOSStatusErrorDomain];

  if (!v4)
  {
    __int128 v15 = 0u;
    __int128 v16 = 0u;
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    id v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "underlyingErrors", 0));
    id v7 = [v6 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v14;
      while (2)
      {
        __int128 v10 = 0LL;
        do
        {
          if (*(void *)v14 != v9) {
            objc_enumerationMutation(v6);
          }
          uint64_t v11 = sub_1003CFCE4(*(void *)(*((void *)&v13 + 1) + 8LL * (void)v10));
          if ((_DWORD)v11)
          {
            id v5 = (id)v11;

            goto LABEL_15;
          }

          __int128 v10 = (char *)v10 + 1;
        }

        while (v8 != v10);
        id v8 = [v6 countByEnumeratingWithState:&v13 objects:v17 count:16];
        if (v8) {
          continue;
        }
        break;
      }
    }

    goto LABEL_13;
  }

  id v5 = [v2 code];
LABEL_15:

  return v5;
}

id sub_1003CFF14(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _repairTimerHit:a2];
}

id sub_1003D020C(uint64_t a1)
{
  return [*(id *)(a1 + 32) recertifyDeviceIfNeeded];
}

id sub_1003D0214(uint64_t a1)
{
  return [*(id *)(a1 + 32) recertifyDeviceIfNeeded];
}

void sub_1003D021C(uint64_t a1)
{
  id v7 = 0LL;
  int v2 = MAERecertifyDeviceWithError(&v7);
  id v3 = v7;
  unsigned int v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = @"NO";
    if (v2) {
      id v5 = @"YES";
    }
    *(_DWORD *)buf = 138412546;
    uint64_t v9 = v5;
    __int16 v10 = 2112;
    id v11 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Completed device re-certification { result: %@, error: %@ }",  buf,  0x16u);
  }

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _BYTE v6[2] = sub_1003D0350;
  v6[3] = &unk_1008F6010;
  void v6[4] = *(void *)(a1 + 32);
  im_dispatch_after_primary_queue(v6, 0.0);
}

void sub_1003D0350(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  [v2 deviceRecertificationCompleted:*(void *)(a1 + 32)];
}

BOOL sub_1003D07D4(uint64_t a1)
{
  double v2 = SecCertificateNotValidAfter();
  double Current = CFAbsoluteTimeGetCurrent();
  double v4 = Current + 864000.0;
  CFDateRef v5 = CFDateCreate(kCFAllocatorDefault, v2);
  CFDateRef v6 = CFDateCreate(kCFAllocatorDefault, Current);
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    id v8 = @"NO";
    int v10 = 134219266;
    uint64_t v11 = a1;
    __int16 v12 = 2048;
    if (v2 < v4) {
      id v8 = @"YES";
    }
    double v13 = v2;
    __int16 v14 = 2048;
    double v15 = Current;
    __int16 v16 = 2112;
    CFDateRef v17 = v5;
    __int16 v18 = 2112;
    CFDateRef v19 = v6;
    __int16 v20 = 2112;
    uint64_t v21 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Checking if cert is near expiry { cert: %p, expireTime: %f, currentTime: %f, expirationDate: %@, currentDate: %@, isNearExpiry: %@ }",  (uint8_t *)&v10,  0x3Eu);
  }

  if (v5) {
    CFRelease(v5);
  }
  if (v6) {
    CFRelease(v6);
  }
  return v2 < v4;
}

void sub_1003D0944(id a1)
{
  id v1 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog warning](&OBJC_CLASS___IMRGLog, "warning"));
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)double v2 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_DEFAULT,  "Telling apsd to invalidate the identity",  v2,  2u);
  }

  [sub_1003D09B8() invalidateDeviceIdentity];
}

id sub_1003D09B8()
{
  if (qword_1009C0D60 != -1) {
    dispatch_once(&qword_1009C0D60, &stru_100904358);
  }
  return (id)qword_1009C0D58;
}

void sub_1003D0A5C(id a1)
{
  id v1 = (const __CFString *)MGCopyAnswer(@"HWModelStr", 0LL);
  if (v1)
  {
    double v2 = v1;
    if (CFStringHasSuffix(v1, @"DEV")) {
      BOOL v3 = 1;
    }
    else {
      BOOL v3 = CFStringHasSuffix(v2, @"dev") != 0;
    }
    byte_1009C0D48 = v3;
    CFRelease(v2);
  }

void sub_1003D0AD4(id a1)
{
  qword_1009C0D58 = IMWeakLinkClass(@"APSConnection", @"ApplePushService");
}

void sub_1003D1090(uint64_t a1, void *a2)
{
  id v3 = a2;
  double v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog registration](&OBJC_CLASS___IMRGLog, "registration"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    id v34 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Executing temporary phone user transaction %@",  buf,  0xCu);
  }

  id v5 = [v3 type];
  if (v5 == (id)1)
  {
    id v13 = v3;
    __int128 v28 = 0u;
    __int128 v29 = 0u;
    __int128 v30 = 0u;
    __int128 v31 = 0u;
    uint64_t v26 = a1;
    id v14 = *(id *)(a1 + 32);
    id v15 = [v14 countByEnumeratingWithState:&v28 objects:v32 count:16];
    if (v15)
    {
      id v16 = v15;
      id v25 = v3;
      int v10 = 0LL;
      uint64_t v17 = *(void *)v29;
      id obj = v14;
      do
      {
        for (uint64_t i = 0LL; i != v16; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v29 != v17) {
            objc_enumerationMutation(obj);
          }
          CFDateRef v19 = *(void **)(*((void *)&v28 + 1) + 8LL * (void)i);
          __int16 v20 = (void *)objc_claimAutoreleasedReturnValue([v19 phoneNumber]);
          uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v13 user]);
          unsigned __int16 v22 = (void *)objc_claimAutoreleasedReturnValue([v21 phoneNumber]);
          unsigned int v23 = [v20 isEqualToString:v22];

          if (v23)
          {
            id v24 = v19;

            int v10 = v24;
          }
        }

        id v16 = [obj countByEnumeratingWithState:&v28 objects:v32 count:16];
      }

      while (v16);

      id v3 = v25;
      if (!v10) {
        goto LABEL_22;
      }
      if ([v13 alertType] == (id)1) {
        +[IDSTemporaryPhoneAlertManager attemptPresentationOfExpirationAlertForUser:]( &OBJC_CLASS___IDSTemporaryPhoneAlertManager,  "attemptPresentationOfExpirationAlertForUser:",  v10);
      }
      [*(id *)(v26 + 32) removeObject:v10];
    }

    else
    {
      int v10 = v14;
    }

    goto LABEL_21;
  }

  if (!v5)
  {
    id v6 = v3;
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 credential]);

    if (!v7)
    {
LABEL_22:

      goto LABEL_23;
    }

    id v8 = *(void **)(a1 + 32);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v6 user]);
    [v8 addObject:v9];

    int v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) userStore]);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v6 credential]);
    __int16 v12 = (void *)objc_claimAutoreleasedReturnValue([v6 user]);
    [v10 setCredential:v11 forUser:v12];

LABEL_21:
    goto LABEL_22;
  }

void sub_1003D2FF8(uint64_t a1)
{
  uint64_t v2 = OSLogHandleForTransportCategory("IDSBTLink");
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(a1 + 32)) {
      double v4 = @"Downstream";
    }
    else {
      double v4 = @"Upstream";
    }
    *(_DWORD *)buf = 138412290;
    uint64_t v9 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Start collecting logs due to %@ Magnet corruption",  buf,  0xCu);
  }

  uint64_t v6 = os_log_shim_legacy_logging_enabled(v5);
  if ((_DWORD)v6)
  {
    if (_IDSShouldLogTransport(v6))
    {
      _IDSLogTransport(@"IDSBTLink", @"IDS", @"Start collecting logs due to %@ Magnet corruption");
      if (_IDSShouldLog(0LL, @"IDSBTLink")) {
        _IDSLogV( 0LL,  @"IDSFoundation",  @"IDSBTLink",  @"Start collecting logs due to %@ Magnet corruption");
      }
    }
  }

  if (qword_1009C0D70 != -1) {
    dispatch_once(&qword_1009C0D70, &stru_1009043A0);
  }
  if (off_1009C0D68)
  {
    if (*(_BYTE *)(a1 + 32)) {
      id v7 = @"Downstream data corruption";
    }
    else {
      id v7 = @"Upstream data corruption";
    }
    off_1009C0D68(@"IDS", v7, 2LL, 152LL);
  }

void sub_1003D31D0(id a1)
{
  off_1009C0D68 = (uint64_t (*)(void, void, void, void))CUTWeakLinkSymbol( "DLCCollectLogs",  @"DiagnosticLogCollection");
}

id sub_1003D347C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _processIncomingPacket];
}

id sub_1003D3484(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _processOutgoingPacket];
}

void sub_1003D5C48(id a1)
{
  mach_timebase_info info = (mach_timebase_info)0xAAAAAAAAAAAAAAAALL;
  mach_timebase_info(&info);
  LODWORD(v2) = info.denom;
  LODWORD(v1) = info.numer;
  *(double *)&qword_1009C0D80 = (double)v1 / (double)v2 / 1000000000.0;
}

void sub_1003D62A4(_Unwind_Exception *a1)
{
}

void sub_1003D62C0(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a5;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog delivery](&OBJC_CLASS___IDSFoundationLog, "delivery"));
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138413058;
    uint64_t v48 = v14;
    __int16 v49 = 2112;
    id v50 = WeakRetained;
    __int16 v51 = 2048;
    uint64_t v52 = a4;
    __int16 v53 = 2112;
    id v54 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "GUID %@ Finished MML %@ with result code: %ld error: %@",  buf,  0x2Au);
  }

  id v15 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained chunkNumber]);
  id v16 = (void *)objc_claimAutoreleasedReturnValue([v10 description]);
  id v32 = (void *)objc_claimAutoreleasedReturnValue([v11 description]);
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v9 messageBodyUsingCache]);
  id v34 = v9;
  __int16 v18 = (void *)objc_claimAutoreleasedReturnValue([v9 service]);
  uint64_t v19 = IDSLoggableDescriptionForObjectOnService(v17, v18);
  __int16 v20 = (void *)objc_claimAutoreleasedReturnValue(v19);

  v39[0] = _NSConcreteStackBlock;
  v39[1] = 3221225472LL;
  v39[2] = sub_1003D65E0;
  v39[3] = &unk_1008FC5F0;
  id v40 = *(id *)(a1 + 32);
  id v31 = v15;
  id v41 = v31;
  uint64_t v45 = a4;
  id v30 = v16;
  id v42 = v30;
  id v29 = v32;
  id v43 = v29;
  id v21 = v20;
  id v44 = v21;
  cut_dispatch_log_queue(v39);
  __int128 v37 = 0u;
  __int128 v38 = 0u;
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  id v33 = WeakRetained;
  unsigned __int16 v22 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained aggregateMessages]);
  id v23 = [v22 countByEnumeratingWithState:&v35 objects:v46 count:16];
  if (v23)
  {
    id v24 = v23;
    uint64_t v25 = *(void *)v36;
    do
    {
      for (uint64_t i = 0LL; i != v24; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v36 != v25) {
          objc_enumerationMutation(v22);
        }
        id v27 = *(void **)(*((void *)&v35 + 1) + 8LL * (void)i);
        __int128 v28 = (void (**)(void, void, void, void, void))objc_claimAutoreleasedReturnValue([v27 completionBlock]);
        ((void (**)(void, void *, id, uint64_t, id))v28)[2](v28, v27, v10, a4, v11);
      }

      id v24 = [v22 countByEnumeratingWithState:&v35 objects:v46 count:16];
    }

    while (v24);
  }
}

void sub_1003D65E0(void *a1)
{
  uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog delivery_oversized](&OBJC_CLASS___IDSFoundationLog, "delivery_oversized"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = a1[5];
    uint64_t v5 = a1[6];
    uint64_t v6 = a1[7];
    uint64_t v8 = a1[8];
    uint64_t v7 = a1[9];
    int v9 = 138413570;
    uint64_t v10 = v3;
    __int16 v11 = 2112;
    uint64_t v12 = v4;
    __int16 v13 = 2048;
    uint64_t v14 = v7;
    __int16 v15 = 2112;
    uint64_t v16 = v5;
    __int16 v17 = 2112;
    uint64_t v18 = v6;
    __int16 v19 = 2112;
    uint64_t v20 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Full response info for GUID %@ Finished MML %@ with result code: %ld error: %@ result dictionary: %@ message body: %@",  (uint8_t *)&v9,  0x3Eu);
  }
}

void sub_1003D67F8(_Unwind_Exception *a1)
{
}

void sub_1003D6814(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v9 = a3;
  id v10 = a5;
  id v11 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
  __int16 v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog delivery](&OBJC_CLASS___IDSFoundationLog, "delivery"));
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = *(void *)(a1 + 32);
    __int16 v15 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained chunkNumber]);
    *(_DWORD *)buf = 138413058;
    uint64_t v58 = v14;
    __int16 v59 = 2112;
    int v60 = v15;
    __int16 v61 = 2048;
    uint64_t v62 = a4;
    __int16 v63 = 2112;
    id v64 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "GUID %@ Finished Fanout %@ with result code: %ld error: %@",  buf,  0x2Au);
  }

  __int16 v49 = WeakRetained;
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained chunkNumber]);
  __int16 v17 = (void *)objc_claimAutoreleasedReturnValue([v9 description]);
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v10 description]);
  __int16 v19 = (void *)objc_claimAutoreleasedReturnValue([v11 messageBodyUsingCache]);
  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v11 service]);

  uint64_t v21 = IDSLoggableDescriptionForObjectOnService(v19, v20);
  unsigned __int16 v22 = (void *)objc_claimAutoreleasedReturnValue(v21);

  v50[0] = _NSConcreteStackBlock;
  v50[1] = 3221225472LL;
  v50[2] = sub_1003D6C98;
  v50[3] = &unk_1008FC5F0;
  id v51 = *(id *)(a1 + 32);
  id v48 = v16;
  id v52 = v48;
  uint64_t v56 = a4;
  id v23 = v17;
  id v53 = v23;
  id v24 = v18;
  id v54 = v24;
  id v25 = v22;
  id v55 = v25;
  cut_dispatch_log_queue(v50);
  uint64_t v26 = 2LL;
  else {
    uint64_t v27 = 0LL;
  }
  if (v9)
  {
    __int128 v28 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjectsAndKeys:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjectsAndKeys:",  v9,  NSUnderlyingErrorKey,  0LL));
    id v29 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  IDSSendErrorDomain,  v27,  v28));
  }

  else
  {
    id v29 = 0LL;
  }

  id v30 = -[IDSDeliveryContext initWithResponseCode:error:lastCall:]( objc_alloc(&OBJC_CLASS___IDSDeliveryContext),  "initWithResponseCode:error:lastCall:",  v27,  v29,  1LL);
  -[IDSDeliveryContext setDisplayURIs:](v30, "setDisplayURIs:", *(void *)(a1 + 40));
  id v31 = (void *)objc_claimAutoreleasedReturnValue([v10 _numberForKey:@"e"]);

  if (v31)
  {
    id v32 = (void *)objc_claimAutoreleasedReturnValue([v10 _numberForKey:@"e"]);
    -[IDSDeliveryContext setResponseTimeStamp:](v30, "setResponseTimeStamp:", v32);
  }

  if (-[IDSDeliveryContext idsResponseCode](v30, "idsResponseCode"))
  {
    id v33 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) delegate]);
    [v33 receivedErrorWithContext:v30];
  }

  if (!*(_BYTE *)(a1 + 72) || v29) {
    [v49 callAllIndividualCompletionBlocksWithDeliveryContext:v30];
  }
  if (a4 == 7000)
  {
    id v34 = (void *)objc_claimAutoreleasedReturnValue([v10 _numberForKey:@"ttr"]);

    if (v34)
    {
      __int128 v35 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) delegate]);
      __int128 v36 = (void *)objc_claimAutoreleasedReturnValue([v49 topic]);
      uint64_t v37 = objc_claimAutoreleasedReturnValue([v10 _numberForKey:@"ttr"]);
      int v47 = v29;
      id v38 = v10;
      id v39 = v9;
      id v40 = v25;
      id v41 = v24;
      id v42 = v23;
      id v43 = (void *)v37;
      [v35 receivedRateLimitingResponseForTopic:v36 ttr:v37];

      id v23 = v42;
      id v24 = v41;
      id v25 = v40;
      id v9 = v39;
      id v10 = v38;
      id v29 = v47;
    }
  }

  id v44 = [*(id *)(a1 + 56) count];
  uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue(+[IMMobileNetworkManager sharedInstance](&OBJC_CLASS___IMMobileNetworkManager, "sharedInstance"));
  int v46 = v45;
  if (v44) {
    [v45 addFastDormancyDisableToken:@"IDSDeliveryManager"];
  }
  else {
    [v45 removeFastDormancyDisableToken:@"IDSDeliveryManager"];
  }
}

void sub_1003D6C98(void *a1)
{
  uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog delivery_oversized](&OBJC_CLASS___IDSFoundationLog, "delivery_oversized"));
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = a1[5];
    uint64_t v5 = a1[6];
    uint64_t v6 = a1[7];
    uint64_t v8 = a1[8];
    uint64_t v7 = a1[9];
    int v9 = 138413570;
    uint64_t v10 = v3;
    __int16 v11 = 2112;
    uint64_t v12 = v4;
    __int16 v13 = 2048;
    uint64_t v14 = v7;
    __int16 v15 = 2112;
    uint64_t v16 = v5;
    __int16 v17 = 2112;
    uint64_t v18 = v6;
    __int16 v19 = 2112;
    uint64_t v20 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Full response info for GUID %@ Finished Fanout %@ with result code: %ld error: %@ result dictionary: %@ message body: %@",  (uint8_t *)&v9,  0x3Eu);
  }
}

void sub_1003D6F3C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog delivery](&OBJC_CLASS___IDSFoundationLog, "delivery"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 40);
    if ([v3 responseCode]) {
      uint64_t v7 = @"NO";
    }
    else {
      uint64_t v7 = @"YES";
    }
    id v8 = [v3 responseCode];
    int v9 = (void *)objc_claimAutoreleasedReturnValue([v3 responseError]);
    int v23 = 138413314;
    uint64_t v24 = v5;
    __int16 v25 = 2112;
    uint64_t v26 = v6;
    __int16 v27 = 2112;
    __int128 v28 = v7;
    __int16 v29 = 2048;
    id v30 = v8;
    __int16 v31 = 2112;
    id v32 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "GUID %@ Finished sending to destination %@ { success: %@, code: %ld, error: %@ }",  (uint8_t *)&v23,  0x34u);
  }

  if ([v3 responseCode])
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) delegate]);
    [v10 receivedErrorWithContext:v3];
  }

  __int16 v11 = (void *)objc_claimAutoreleasedReturnValue([v3 responseTimeStamp]);

  if (v11)
  {
    uint64_t v12 = *(void **)(*(void *)(a1 + 48) + 8LL);
    if (!v12
      || ([v12 doubleValue],
          double v14 = v13,
          __int16 v15 = (void *)objc_claimAutoreleasedReturnValue([v3 responseTimeStamp]),
          [v15 doubleValue],
          double v17 = v16,
          v15,
          v14 > v17))
    {
      uint64_t v18 = objc_claimAutoreleasedReturnValue([v3 responseTimeStamp]);
      uint64_t v19 = *(void *)(a1 + 48);
      uint64_t v20 = *(void **)(v19 + 8);
      *(void *)(v19 + _Block_object_dispose(va, 8) = v18;
    }
  }

  [*(id *)(a1 + 56) removeObject:*(void *)(a1 + 64)];
  if (![*(id *)(a1 + 56) count])
  {
    [v3 setResponseTimeStamp:*(void *)(*(void *)(a1 + 48) + 8)];
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) delegate]);
    [v21 finishedTrackingMadridAcksWithContext:v3 uris:*(void *)(a1 + 72) guid:*(void *)(a1 + 32)];
  }

  uint64_t v22 = *(void *)(a1 + 80);
  if (v22) {
    (*(void (**)(uint64_t, id))(v22 + 16))(v22, v3);
  }
}

void sub_1003D8FA4(id a1)
{
  unint64_t v1 = objc_alloc_init(&OBJC_CLASS___IDSKeyTransparencyVerifier);
  uint64_t v2 = (void *)qword_1009C0D90;
  qword_1009C0D90 = (uint64_t)v1;
}

void sub_1003D95F4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, id location)
{
}

uint64_t sub_1003D9618(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog sysdiagnose_keyTransparency](&OBJC_CLASS___IMRGLog, "sysdiagnose_keyTransparency"));
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v4 = [WeakRetained isOptedInForServiceIdentifier:@"com.apple.madrid"];
      uint64_t v5 = @"NO";
      if (v4) {
        uint64_t v5 = @"YES";
      }
      int v7 = 138412290;
      id v8 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "KT Opt In Status: %@", (uint8_t *)&v7, 0xCu);
    }

    [WeakRetained fetchCurrentDeviceKVSKey:&stru_1009044A0];
    [*(id *)(a1 + 32) getCurrentRegistrationStateWithCompletion:&stru_1009044C0];
  }

  return 0LL;
}

void sub_1003D9728(id a1, NSDictionary *a2, NSError *a3)
{
  id v3 = a2;
  unsigned int v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog sysdiagnose_keyTransparency](&OBJC_CLASS___IMRGLog, "sysdiagnose_keyTransparency"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(-[NSDictionary allKeys](v3, "allKeys"));
    int v6 = 138412290;
    int v7 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "This device's KVS keys: {kvsKeys: %@}",  (uint8_t *)&v6,  0xCu);
  }
}

void sub_1003D97F4(id a1, NSArray *a2)
{
  uint64_t v2 = a2;
  id v3 = &IMInsertBoolsToXPCDictionary_ptr;
  unsigned int v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IMRGLog sysdiagnose_keyTransparency](&OBJC_CLASS___IMRGLog, "sysdiagnose_keyTransparency"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    NSUInteger v27 = -[NSArray count](v2, "count");
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Found %lu registrations on KT services",  buf,  0xCu);
  }

  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  id obj = v2;
  id v5 = -[NSArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v22,  v36,  16LL);
  if (v5)
  {
    id v7 = v5;
    uint64_t v8 = *(void *)v23;
    *(void *)&__int128 v6 = 138413314LL;
    __int128 v19 = v6;
    uint64_t v20 = *(void *)v23;
    do
    {
      int v9 = 0LL;
      do
      {
        if (*(void *)v23 != v8) {
          objc_enumerationMutation(obj);
        }
        uint64_t v10 = *(void **)(*((void *)&v22 + 1) + 8LL * (void)v9);
        __int16 v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3[440], "sysdiagnose_keyTransparency", v19));
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v10 userID]);
          uint64_t v13 = _IDSStringFromIDSRegistrationStatus([v10 status]);
          double v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
          id v15 = [v10 optedIn];
          else {
            double v16 = @"NO";
          }
          unsigned int v17 = [v10 containsDeviceSignature];
          *(_DWORD *)buf = v19;
          if (v17) {
            uint64_t v18 = @"YES";
          }
          else {
            uint64_t v18 = @"NO";
          }
          NSUInteger v27 = (NSUInteger)v12;
          __int16 v28 = 2112;
          __int16 v29 = v14;
          __int16 v30 = 2048;
          id v31 = v15;
          __int16 v32 = 2112;
          id v33 = v16;
          __int16 v34 = 2112;
          __int128 v35 = v18;
          _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "    Registration user ID: %@, Registration status: %@, KTOptInStatus(at time of registration, may be out of date): %lu, containsAccountKey:%@, containsDeviceSignature: %@",  buf,  0x34u);

          id v3 = &IMInsertBoolsToXPCDictionary_ptr;
          uint64_t v8 = v20;
        }

        int v9 = (char *)v9 + 1;
      }

      while (v7 != v9);
      id v7 = -[NSArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v22,  v36,  16LL);
    }

    while (v7);
  }
}

void sub_1003D9D50(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = v4;
  if (*(void *)(a1 + 40))
  {
    id v7 = v4;
    if (v4) {
      __int128 v6 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _clientErrorWithCode:-1100 debugDescription:@"Failed to determine eligibility for the key transparency trust circle" underlyingError:v4]);
    }
    else {
      __int128 v6 = 0LL;
    }
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();

    id v5 = v7;
  }
}

void sub_1003D9EC0(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    __int128 v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) registrationDataSource]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 currentLocalKeyTransparencyEligibleServiceIdentifiers]);
  }

  else
  {
    id v7 = &__NSArray0__struct;
  }

  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = 138412546;
    __int16 v11 = v7;
    __int16 v12 = 2112;
    id v13 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Done fetching local device trust circle eligible service identifiers { eligibleServices: %@, error: %@ }",  (uint8_t *)&v10,  0x16u);
  }

  uint64_t v9 = *(void *)(a1 + 40);
  if (v9) {
    (*(void (**)(uint64_t, void *, id))(v9 + 16))(v9, v7, v5);
  }
}

void sub_1003DA750(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
  uint64_t v8 = v7;
  if (v6)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1006ACBD8();
    }

    uint64_t v9 = *(void *)(a1 + 56);
    int v10 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _clientErrorWithCode:-9004 debugDescription:@"Failed to get query results." underlyingError:v6]);
    (*(void (**)(uint64_t, void *, void *))(v9 + 16))(v9, &__NSArray0__struct, v10);
  }

  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void *)(a1 + 40);
      uint64_t v12 = *(void *)(a1 + 48);
      id v13 = @"YES";
      if (!*(_BYTE *)(a1 + 64)) {
        id v13 = @"NO";
      }
      *(_DWORD *)buf = 138412802;
      uint64_t v21 = v11;
      __int16 v22 = 2112;
      uint64_t v23 = v12;
      __int16 v24 = 2112;
      __int128 v25 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Calling into Transparency to validate peers { uris: %@ service: %@ fetchNow: %@ }",  buf,  0x20u);
    }

    uint64_t v14 = objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
    uint64_t v15 = *(void *)(a1 + 32);
    double v16 = *(void **)(v15 + 120);
    *(void *)(v15 + cut_arc_os_release(v1 - 120) = v14;

    int v10 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _keyTransparencyVerifierForServiceIdentifier:*(void *)(a1 + 48)]);
    uint64_t v17 = *(unsigned __int8 *)(a1 + 64);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472LL;
    v18[2] = sub_1003DA94C;
    v18[3] = &unk_1008FA470;
    id v19 = *(id *)(a1 + 56);
    [v10 validatePeers:v5 fetchNow:v17 completionBlock:v18];
  }
}

uint64_t sub_1003DA94C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1003DAC0C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

BOOL sub_1003DAF04(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 serviceIdentifier]);
  if ([v4 containsObject:v5])
  {
    BOOL v6 = 1LL;
  }

  else if ([v3 keyIndex])
  {
    BOOL v6 = (int)[v3 keyIndex] < 4;
  }

  else
  {
    BOOL v6 = 0LL;
  }

  return v6;
}

void sub_1003DB590(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 138412290;
    id v8 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Done nuking KT verification state { error: %@ }",  (uint8_t *)&v7,  0xCu);
  }

  uint64_t v5 = *(void *)(a1 + 40);
  if (v5)
  {
    if (v3)
    {
      BOOL v6 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _clientErrorWithCode:-6000 debugDescription:@"Failed to nuke key transparency state" underlyingError:v3]);
      uint64_t v5 = *(void *)(a1 + 40);
    }

    else
    {
      BOOL v6 = 0LL;
    }

    (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v6);
  }
}

void sub_1003DBA98(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = objc_alloc_init(&OBJC_CLASS___IDSKTVerificationResult);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 uri]);
  [v3 setUri:v4];

  objc_msgSend(v3, "setOptedIn:", objc_msgSend(v2, "optedIn"));
  uint64_t v5 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  BOOL v6 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  int v7 = (void *)objc_claimAutoreleasedReturnValue([v2 loggableDatas]);
  id v8 = [v7 countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v18;
    do
    {
      for (uint64_t i = 0LL; i != v9; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v18 != v10) {
          objc_enumerationMutation(v7);
        }
        uint64_t v12 = *(void **)(*((void *)&v17 + 1) + 8LL * (void)i);
        id v13 = [v12 result];
        uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v12 deviceID]);
        if (v13 == (id)1) {
          uint64_t v15 = v5;
        }
        else {
          uint64_t v15 = v6;
        }
        -[NSMutableArray addObject:](v15, "addObject:", v14);
      }

      id v9 = [v7 countByEnumeratingWithState:&v17 objects:v21 count:16];
    }

    while (v9);
  }

  [v3 setVerifiedPushTokens:v5];
  [v3 setUnverifiedPushTokens:v6];
  os_unfair_lock_lock(&stru_1009C0D98);
  if (v3) {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), *(const void **)(a1 + 40), v3);
  }
  os_unfair_lock_unlock(&stru_1009C0D98);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

uint64_t sub_1003DBC88(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

id sub_1003DC04C(id a1, KTLoggableData *a2)
{
  return -[KTLoggableData deviceID](a2, "deviceID");
}

void sub_1003DC360(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = a1[4];
    unint64_t v9 = (unint64_t)[v5 succeed];
    if (v9 > 3) {
      uint64_t v10 = @"Unrecognized";
    }
    else {
      uint64_t v10 = off_100904988[v9];
    }
    uint64_t v11 = a1[5];
    unsigned int v12 = [v5 optedIn];
    int v19 = 138413314;
    id v13 = @"NO";
    uint64_t v20 = v8;
    __int16 v21 = 2112;
    if (v12) {
      id v13 = @"YES";
    }
    __int16 v22 = v10;
    __int16 v23 = 2112;
    id v24 = v6;
    __int16 v25 = 2112;
    uint64_t v26 = v11;
    __int16 v27 = 2112;
    __int16 v28 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Finished KT validate peer result { KTURI: %@, result: %@, error: %@, ticket: %@, optedIn: %@ }",  (uint8_t *)&v19,  0x34u);
  }

  uint64_t v14 = (void *)a1[6];
  uint64_t v15 = a1[7];
  uint64_t v16 = a1[8];
  id v17 = [v5 succeed];
  __int128 v18 = (void *)objc_claimAutoreleasedReturnValue([v5 loggableDatas]);
  objc_msgSend( v14,  "_fulfillOrFailPromiseSeal:basedOnIndex:KTResult:ktLoggableDatas:optedIn:error:",  v15,  v16,  v17,  v18,  objc_msgSend(v5, "optedIn"),  v6);
}

void sub_1003DC7EC(uint64_t a1, uint64_t a2, unint64_t a3, int a4, uint64_t a5, void *a6)
{
  id v9 = a6;
  uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = *(void *)(a1 + 32);
    if (a3 > 3) {
      unsigned int v12 = @"Unrecognized";
    }
    else {
      unsigned int v12 = off_100904988[a3];
    }
    id v13 = @"NO";
    uint64_t v14 = *(void *)(a1 + 40);
    int v17 = 138413314;
    if (a4) {
      id v13 = @"YES";
    }
    uint64_t v18 = v11;
    __int16 v19 = 2112;
    uint64_t v20 = v12;
    __int16 v21 = 2112;
    id v22 = v9;
    __int16 v23 = 2112;
    uint64_t v24 = v14;
    __int16 v25 = 2112;
    uint64_t v26 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Finished KT force validate { KTURI: %@, result: %@, error: %@, ticket: %@, optedIn: %@",  (uint8_t *)&v17,  0x34u);
  }

  uint64_t v15 = *(void *)(a1 + 56);
  if (v15)
  {
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) _clientErrorForKTResult:a3 underlyingError:v9]);
    (*(void (**)(uint64_t, void *))(v15 + 16))(v15, v16);
  }
}

void sub_1003DCFB0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5, void *a6)
{
  id v10 = a6;
  id v11 = a5;
  unsigned int v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v13 = *(void *)(a1 + 32);
    if (a3 > 3) {
      uint64_t v14 = @"Unrecognized";
    }
    else {
      uint64_t v14 = off_100904988[a3];
    }
    uint64_t v15 = @"NO";
    uint64_t v16 = *(void *)(a1 + 40);
    int v17 = 138413314;
    if ((_DWORD)a4) {
      uint64_t v15 = @"YES";
    }
    uint64_t v18 = v13;
    __int16 v19 = 2112;
    uint64_t v20 = v14;
    __int16 v21 = 2112;
    id v22 = v10;
    __int16 v23 = 2112;
    uint64_t v24 = v16;
    __int16 v25 = 2112;
    uint64_t v26 = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Finished KT validate enrollment result { KTURI: %@, result: %@, error: %@, ticket: %@, optedIn: %@ }",  (uint8_t *)&v17,  0x34u);
  }

  [*(id *)(a1 + 48) _fulfillOrFailPromiseSeal:*(void *)(a1 + 56) basedOnIndex:*(void *)(a1 + 64) KTResult:a3 ktLoggableDatas:v11 optedIn:a4 error:v10];
}

id sub_1003DDB54(id a1, NSString *a2)
{
  id v2 = a2;
  if (-[NSString isEqualToString:](v2, "isEqualToString:", kFZServiceDefaultsSentinelAlias)
    && -[NSString isEqualToString:](v2, "isEqualToString:", kIDSServiceDefaultsSentinelSelfAlias))
  {
    id v3 = 0LL;
  }

  else
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue(+[IDSURI URIWithPrefixedURI:](&OBJC_CLASS___IDSURI, "URIWithPrefixedURI:", v2));
  }

  return v3;
}

uint64_t sub_1003DDBC8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1003DDED8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5 && ([v5 containsObject:*(void *)(a1 + 32)] & 1) != 0)
  {
    int v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) accountController]);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) serviceController]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 serviceWithIdentifier:*(void *)(a1 + 32)]);
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v7 appleIDAccountOnService:v9]);

    id v11 = [*(id *)(a1 + 48) BOOLValue];
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472LL;
    v18[2] = sub_1003DE0A8;
    v18[3] = &unk_100904688;
    int8x16_t v17 = *(int8x16_t *)(a1 + 32);
    id v12 = (id)v17.i64[0];
    int8x16_t v19 = vextq_s8(v17, v17, 8uLL);
    id v20 = *(id *)(a1 + 56);
    [v10 updateKTOptInStatus:v11 withCompletion:v18];
  }

  else
  {
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      sub_1006AD2AC();
    }

    uint64_t v14 = *(void *)(a1 + 56);
    id v15 = objc_alloc(&OBJC_CLASS___IDSKTOptInResult);
    id v10 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 40) _clientErrorWithCode:-8000 debugDescription:0 underlyingError:v6]);
    id v16 = [v15 initWithSuccess:0 serverProvidedSMT:0 error:v10];
    (*(void (**)(uint64_t, id))(v14 + 16))(v14, v16);
  }
}

void sub_1003DE0A8(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    else {
      id v5 = @"NO";
    }
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
    *(_DWORD *)buf = 138412546;
    uint64_t v18 = v5;
    __int16 v19 = 2112;
    id v20 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Received KT opt-in result from server {success: %@, error: %@}",  buf,  0x16u);
  }

  if (_os_feature_enabled_impl("IDS", "KTOptInRefreshCache"))
  {
    if ([v3 success])
    {
      id v10 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);

      if (!v10)
      {
        uint64_t v12 = im_primary_base_queue(v11);
        uint64_t v13 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v12);
        v15[0] = _NSConcreteStackBlock;
        v15[1] = 3221225472LL;
        v15[2] = sub_1003DE258;
        v15[3] = &unk_1008F5F80;
        uint64_t v14 = (void *)a1[5];
        v15[4] = a1[4];
        id v16 = v14;
        dispatch_async(v13, v15);
      }
    }
  }

  (*(void (**)(void, id, uint64_t, uint64_t, uint64_t))(a1[6] + 16LL))(a1[6], v3, v7, v8, v9);
}

id sub_1003DE258(uint64_t a1)
{
  return [*(id *)(a1 + 32) clearCacheAndUpdatePeersForService:*(void *)(a1 + 40)];
}

void sub_1003DE820(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5 && ([v5 containsObject:*(void *)(a1 + 32)] & 1) != 0)
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) accountController]);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) serviceController]);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 serviceWithIdentifier:*(void *)(a1 + 32)]);
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v7 appleIDAccountOnService:v9]);

    uint64_t v11 = *(void *)(a1 + 48);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472LL;
    v18[2] = sub_1003DE9EC;
    v18[3] = &unk_100904688;
    int8x16_t v17 = *(int8x16_t *)(a1 + 32);
    id v12 = (id)v17.i64[0];
    int8x16_t v19 = vextq_s8(v17, v17, 8uLL);
    id v20 = *(id *)(a1 + 56);
    [v10 updateKTOptInStatusWithRequest:v11 withCompletion:v18];
  }

  else
  {
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      sub_1006AD2AC();
    }

    uint64_t v14 = *(void *)(a1 + 56);
    id v15 = objc_alloc(&OBJC_CLASS___IDSKTOptInResult);
    id v10 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 40) _clientErrorWithCode:-8000 debugDescription:0 underlyingError:v6]);
    id v16 = [v15 initWithSuccess:0 optedInOutURIs:0 serverSMTByURI:0 error:v10];
    (*(void (**)(uint64_t, id))(v14 + 16))(v14, v16);
  }
}

void sub_1003DE9EC(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    else {
      id v5 = @"NO";
    }
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
    *(_DWORD *)buf = 138412546;
    uint64_t v18 = v5;
    __int16 v19 = 2112;
    id v20 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Received KT opt in result from server {success: %@, error: %@}",  buf,  0x16u);
  }

  if (_os_feature_enabled_impl("IDS", "KTOptInRefreshCache"))
  {
    if ([v3 success])
    {
      id v10 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);

      if (!v10)
      {
        uint64_t v12 = im_primary_base_queue(v11);
        uint64_t v13 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v12);
        v15[0] = _NSConcreteStackBlock;
        v15[1] = 3221225472LL;
        v15[2] = sub_1003DEB9C;
        v15[3] = &unk_1008F5F80;
        uint64_t v14 = (void *)a1[5];
        v15[4] = a1[4];
        id v16 = v14;
        dispatch_async(v13, v15);
      }
    }
  }

  (*(void (**)(void, id, uint64_t, uint64_t, uint64_t))(a1[6] + 16LL))(a1[6], v3, v7, v8, v9);
}

id sub_1003DEB9C(uint64_t a1)
{
  return [*(id *)(a1 + 32) clearCacheAndUpdatePeersForService:*(void *)(a1 + 40)];
}

void sub_1003DEBA8(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    else {
      id v5 = @"NO";
    }
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
    *(_DWORD *)buf = 138412546;
    uint64_t v18 = v5;
    __int16 v19 = 2112;
    id v20 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Received KT opt out result from server {success: %@, error: %@}",  buf,  0x16u);
  }

  if (_os_feature_enabled_impl("IDS", "KTOptInRefreshCache"))
  {
    if ([v3 success])
    {
      id v10 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);

      if (!v10)
      {
        uint64_t v12 = im_primary_base_queue(v11);
        uint64_t v13 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v12);
        v15[0] = _NSConcreteStackBlock;
        v15[1] = 3221225472LL;
        v15[2] = sub_1003DED58;
        v15[3] = &unk_1008F5F80;
        uint64_t v14 = (void *)a1[5];
        v15[4] = a1[4];
        id v16 = v14;
        dispatch_async(v13, v15);
      }
    }
  }

  (*(void (**)(void, id, uint64_t, uint64_t, uint64_t))(a1[6] + 16LL))(a1[6], v3, v7, v8, v9);
}

id sub_1003DED58(uint64_t a1)
{
  return [*(id *)(a1 + 32) clearCacheAndUpdatePeersForService:*(void *)(a1 + 40)];
}

void sub_1003DF290(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    id v9 = [v5 state];
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v5 smtTimestamp]);
    int v14 = 138413058;
    uint64_t v15 = v8;
    __int16 v16 = 2048;
    id v17 = v9;
    __int16 v18 = 2112;
    __int16 v19 = v10;
    __int16 v20 = 2112;
    id v21 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Fetched opt in state for KT application %@ { state: %ld smtTimestamp: %@ getError: %@",  (uint8_t *)&v14,  0x2Au);
  }

  uint64_t v11 = objc_alloc(&OBJC_CLASS___IDSKTOptInState);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v5 smtTimestamp]);
  uint64_t v13 = -[IDSKTOptInState initWithTimeStamp:status:error:]( v11,  "initWithTimeStamp:status:error:",  v12,  [v5 state],  v6);

  os_unfair_lock_lock(&stru_1009C0D9C);
  if (v13) {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), *(const void **)(a1 + 32), v13);
  }
  os_unfair_lock_unlock(&stru_1009C0D9C);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

uint64_t sub_1003DF428(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

id sub_1003DF8DC(id a1, NSString *a2)
{
  id v2 = a2;
  if (-[NSString isEqualToString:](v2, "isEqualToString:", kIDSServiceDefaultsSentinelSelfAlias)) {
    id v3 = 0LL;
  }
  else {
    id v3 = -[IDSURI initWithPrefixedURI:](objc_alloc(&OBJC_CLASS___IDSURI), "initWithPrefixedURI:", v2);
  }

  return v3;
}

void sub_1003E0098( uint64_t a1, void *a2, void *a3, void *a4, void *a5, char a6, void *a7, uint64_t a8, void *a9)
{
  id v39 = a2;
  id v38 = a3;
  id v37 = a4;
  id v40 = a5;
  id v14 = a7;
  id v34 = a9;
  if ((a6 & 1) == 0)
  {
    uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency", v34));
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      sub_1006AD400();
    }
  }

  __int128 v36 = v14;
  __int16 v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "peerIDManager", v34));
  uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue( [v16 endpointsForURIs:*(void *)(a1 + 40) service:v40 fromURI:*(void *)(a1 + 48)]);

  id v17 = v40;
  id v42 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  __int128 v47 = 0u;
  __int128 v48 = 0u;
  __int128 v49 = 0u;
  __int128 v50 = 0u;
  id obj = *(id *)(a1 + 40);
  id v46 = [obj countByEnumeratingWithState:&v47 objects:v51 count:16];
  if (v46)
  {
    uint64_t v44 = *(void *)v48;
    do
    {
      for (uint64_t i = 0LL; i != v46; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v48 != v44) {
          objc_enumerationMutation(obj);
        }
        __int16 v19 = *(void **)(*((void *)&v47 + 1) + 8LL * (void)i);
        __int16 v20 = (void *)objc_claimAutoreleasedReturnValue([v45 objectForKey:v19]);
        if ([v20 count])
        {
          id v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "__imArrayByApplyingBlock:", &stru_100904718));
          id v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _KTDatasForIDSKeyTransparencyEntries:v21]);
          __int16 v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerIDManager]);
          uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue( [v23 keyTransparencyContextForService:v17 fromURI:*(void *)(a1 + 48) toURI:v19]);

          id v25 = objc_alloc(&OBJC_CLASS___KTVerificationInfo);
          uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v24 accountKey]);
          id v27 = [v25 initWithAccountKey:v26 serverLoggableDatas:v22];

          objc_msgSend(v27, "setOptedIn:", objc_msgSend(v24, "ktOptIn"));
          __int16 v28 = (void *)objc_claimAutoreleasedReturnValue([v24 queryResponseTime]);

          if (v28)
          {
            __int16 v29 = (void *)objc_claimAutoreleasedReturnValue([v24 queryResponseTime]);
            [v27 setIdsResponseTime:v29];
          }

          __int16 v30 = (void *)objc_claimAutoreleasedReturnValue( +[IDSKeyTransparencyVerifier keyTransparencyURIPrefixForServiceIdentifier:]( &OBJC_CLASS___IDSKeyTransparencyVerifier,  "keyTransparencyURIPrefixForServiceIdentifier:",  v17));
          id v31 = (void *)objc_claimAutoreleasedReturnValue([v19 prefixedURI]);
          if (v30)
          {
            __int16 v32 = (void *)objc_claimAutoreleasedReturnValue([v19 prefixedURI]);
            uint64_t v33 = objc_claimAutoreleasedReturnValue([v30 stringByAppendingString:v32]);

            id v31 = (void *)v33;
            id v17 = v40;
          }

          -[NSMutableDictionary setObject:forKeyedSubscript:](v42, "setObject:forKeyedSubscript:", v27, v31);
        }
      }

      id v46 = [obj countByEnumeratingWithState:&v47 objects:v51 count:16];
    }

    while (v46);
  }

  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

id sub_1003E0440(id a1, IDSEndpoint *a2)
{
  id v2 = a2;
  id v3 = (IDSKeyTransparencyEntry *)objc_claimAutoreleasedReturnValue(-[IDSEndpoint pushToken](v2, "pushToken"));

  if (v3)
  {
    id v4 = objc_alloc(&OBJC_CLASS___IDSKeyTransparencyEntry);
    id v5 = (void *)objc_claimAutoreleasedReturnValue(-[IDSEndpoint pushToken](v2, "pushToken"));
    id v6 = (void *)objc_claimAutoreleasedReturnValue(-[IDSEndpoint KTLoggableData](v2, "KTLoggableData"));
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(-[IDSEndpoint KTDeviceSignature](v2, "KTDeviceSignature"));
    id v3 = -[IDSKeyTransparencyEntry initWithPushToken:loggableData:signedData:]( v4,  "initWithPushToken:loggableData:signedData:",  v5,  v6,  v7);

    -[IDSKeyTransparencyEntry setKtCapable:](v3, "setKtCapable:", -[IDSEndpoint ktCapableFlag](v2, "ktCapableFlag"));
  }

  return v3;
}

id sub_1003E0A98(id a1, NSString *a2)
{
  id v2 = a2;
  if (-[NSString isEqualToString:](v2, "isEqualToString:", kFZServiceDefaultsSentinelAlias)
    && -[NSString isEqualToString:](v2, "isEqualToString:", kIDSServiceDefaultsSentinelSelfAlias))
  {
    id v3 = 0LL;
  }

  else
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue(+[IDSURI URIWithPrefixedURI:](&OBJC_CLASS___IDSURI, "URIWithPrefixedURI:", v2));
  }

  return v3;
}

void sub_1003E0B0C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
  uint64_t v8 = v7;
  if (v6)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1006AD4C8();
    }

    uint64_t v9 = *(void *)(a1 + 64);
    id v10 = [[KTSelfVerificationInfo alloc] initWithSyncedLoggableDatas:&__NSArray0__struct uriToServerLoggableDatas:&__NSDictionary0__struct];
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _clientErrorWithCode:-9004 debugDescription:@"Failed to get query results." underlyingError:v6]);
    (*(void (**)(uint64_t, id, void *))(v9 + 16))(v9, v10, v11);
  }

  else
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Force syncing KVS for self verification.",  buf,  2u);
    }

    id v10 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) forceSyncKVS]);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    v13[2] = sub_1003E0CE0;
    v13[3] = &unk_1009047A0;
    uint64_t v12 = *(void **)(a1 + 40);
    v13[4] = *(void *)(a1 + 32);
    id v14 = v12;
    id v15 = *(id *)(a1 + 48);
    id v16 = v5;
    id v17 = *(id *)(a1 + 56);
    id v18 = *(id *)(a1 + 64);
    [v10 registerResultBlock:v13];
  }
}

void sub_1003E0CE0(uint64_t a1, void *a2)
{
  id v3 = [a2 state];
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (!v5) {
      goto LABEL_7;
    }
    *(_WORD *)buf = 0;
    id v6 = "Failed to sync KVS.";
  }

  else
  {
    if (!v5) {
      goto LABEL_7;
    }
    *(_WORD *)buf = 0;
    id v6 = "Successfully synced KVS.";
  }

  _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, v6, buf, 2u);
LABEL_7:

  uint64_t v57 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) fetchTrustedDevicesFromKVS]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_KTDatasForIDSProtoKeyTransparencyTrustedDevices:serviceIdentifier:"));
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) peerIDManager]);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( [v8 keyTransparencyContextForService:*(void *)(a1 + 40) fromURI:*(void *)(a1 + 48) toURI:*(void *)(a1 + 48)]);

  id v10 = objc_alloc(&OBJC_CLASS___IDSKeyTransparencyIndex);
  uint64_t v11 = *(void *)(a1 + 40);
  id v55 = v9;
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v9 accountKey]);
  uint64_t v13 = -[IDSKeyTransparencyIndex initWithServiceIdentifier:accountKey:URI:]( v10,  "initWithServiceIdentifier:accountKey:URI:",  v11,  v12,  *(void *)(a1 + 48));

  __int16 v63 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  __int128 v75 = 0u;
  __int128 v76 = 0u;
  __int128 v77 = 0u;
  __int128 v78 = 0u;
  id v14 = *(id *)(a1 + 56);
  id v15 = [v14 countByEnumeratingWithState:&v75 objects:v85 count:16];
  if (v15)
  {
    id v16 = v15;
    uint64_t v17 = *(void *)v76;
    do
    {
      for (uint64_t i = 0LL; i != v16; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v76 != v17) {
          objc_enumerationMutation(v14);
        }
        __int16 v19 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 56) objectForKeyedSubscript:*(void *)(*((void *)&v75 + 1) + 8 * (void)i)]);
        __int16 v20 = (void *)objc_claimAutoreleasedReturnValue([v19 serverLoggableDatas]);
        -[NSMutableSet addObjectsFromArray:](v63, "addObjectsFromArray:", v20);
      }

      id v16 = [v14 countByEnumeratingWithState:&v75 objects:v85 count:16];
    }

    while (v16);
  }

  id v21 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableSet allObjects](v63, "allObjects"));
  id v54 = v13;
  [*(id *)(a1 + 32) _mutateSuccessfulSyncIndicatorOnKTLoggableDatas:v7 forIndex:v13];
  id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "__imArrayByApplyingBlock:", &stru_100904758));
    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "__imArrayByApplyingBlock:", &stru_100904778));
    *(_DWORD *)buf = 138412546;
    uint64_t v82 = v23;
    __int16 v83 = 2112;
    int v84 = v24;
    _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "Calling in to note KT synced datas on existing UUID for self-validation { serverKTDataPushTokens: %@, syncedKTData PushTokens: %@ }",  buf,  0x16u);
  }

  id v53 = v21;
  uint64_t v56 = v7;

  uint64_t v58 = a1;
  id v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) dependentRegistrationsIncludingCurrentDevice]);
  id v66 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  uint64_t v65 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  id v64 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  __int128 v71 = 0u;
  __int128 v72 = 0u;
  __int128 v73 = 0u;
  __int128 v74 = 0u;
  id obj = v25;
  id v26 = [obj countByEnumeratingWithState:&v71 objects:v80 count:16];
  if (v26)
  {
    id v27 = v26;
    uint64_t v62 = *(void *)v72;
    uint64_t v61 = IDSDevicePropertyPushToken;
    uint64_t v60 = IDSDevicePropertyPrivateDeviceData;
    uint64_t v28 = IDSPrivateDeviceDataProductBuildVersion;
    uint64_t v29 = IDSPrivateDeviceDataProductName;
    uint64_t v30 = IDSPrivateDeviceDataTransparencyVersion;
    do
    {
      for (j = 0LL; j != v27; j = (char *)j + 1)
      {
        if (*(void *)v72 != v62) {
          objc_enumerationMutation(obj);
        }
        __int16 v32 = *(void **)(*((void *)&v71 + 1) + 8LL * (void)j);
        uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "objectForKey:", v61, v53));
        id v34 = (void *)objc_claimAutoreleasedReturnValue([v32 objectForKey:v60]);
        __int128 v35 = (void *)objc_claimAutoreleasedReturnValue([v34 objectForKey:v28]);
        __int128 v36 = (void *)objc_claimAutoreleasedReturnValue([v34 objectForKey:v29]);
        id v37 = (void *)objc_claimAutoreleasedReturnValue([v34 objectForKey:v30]);
        -[NSMutableDictionary setObject:forKeyedSubscript:](v66, "setObject:forKeyedSubscript:", v35, v33);
        -[NSMutableDictionary setObject:forKeyedSubscript:](v65, "setObject:forKeyedSubscript:", v36, v33);
        -[NSMutableDictionary setObject:forKeyedSubscript:](v64, "setObject:forKeyedSubscript:", v37, v33);
      }

      id v27 = [obj countByEnumeratingWithState:&v71 objects:v80 count:16];
    }

    while (v27);
  }

  __int128 v69 = 0u;
  __int128 v70 = 0u;
  __int128 v67 = 0u;
  __int128 v68 = 0u;
  id v38 = v53;
  id v39 = [v38 countByEnumeratingWithState:&v67 objects:v79 count:16];
  if (v39)
  {
    id v40 = v39;
    uint64_t v41 = *(void *)v68;
    do
    {
      for (k = 0LL; k != v40; k = (char *)k + 1)
      {
        if (*(void *)v68 != v41) {
          objc_enumerationMutation(v38);
        }
        id v43 = *(void **)(*((void *)&v67 + 1) + 8LL * (void)k);
        uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "deviceID", v53));
        uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v66, "objectForKeyedSubscript:", v44));
        [v43 setBuild:v45];

        id v46 = (void *)objc_claimAutoreleasedReturnValue([v43 deviceID]);
        __int128 v47 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v65, "objectForKeyedSubscript:", v46));
        [v43 setProduct:v47];

        __int128 v48 = (void *)objc_claimAutoreleasedReturnValue([v43 deviceID]);
        __int128 v49 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v64, "objectForKeyedSubscript:", v48));
        [v43 setVersion:v49];
      }

      id v40 = [v38 countByEnumeratingWithState:&v67 objects:v79 count:16];
    }

    while (v40);
  }

  id v50 = [[KTSelfVerificationInfo alloc] initWithSyncedLoggableDatas:v56 uriToServerLoggableDatas:*(void *)(v58 + 56)];
  id v51 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v58 + 64) primaryRegistration]);
  id v52 = (void *)objc_claimAutoreleasedReturnValue([v51 pushToken]);
  [v50 setSelfDeviceID:v52];

  (*(void (**)(void))(*(void *)(v58 + 72) + 16LL))();
}

id sub_1003E1380(id a1, KTLoggableData *a2)
{
  return -[KTLoggableData deviceID](a2, "deviceID");
}

id sub_1003E1388(id a1, KTLoggableData *a2)
{
  return -[KTLoggableData deviceID](a2, "deviceID");
}

void sub_1003E1824( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
}

void sub_1003E1848(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id WeakRetained = objc_loadWeakRetained(a1 + 6);
  if (v6)
  {
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_1006AD52C();
    }
    id v9 = 0LL;
  }

  else
  {
    id v9 = objc_msgSend(a1[4], "_IDSKTAccountStatusForKTAccountStatus:", objc_msgSend(v5, "accountStatus"));
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [v5 accountStatus]));
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v9));
      *(_DWORD *)buf = 138412546;
      __int16 v20 = v10;
      __int16 v21 = 2112;
      id v22 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Received KTAccountStatus from transparency. { KTAccountStatus: %@, currentKTAccountStatus: %@ }",  buf,  0x16u);
    }
  }

  uint64_t v14 = im_primary_queue(v12, v13);
  id v15 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v14);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1003E1A3C;
  block[3] = &unk_1009047F0;
  void block[4] = WeakRetained;
  id v18 = v9;
  id v17 = a1[5];
  dispatch_async(v15, block);
}

uint64_t sub_1003E1A3C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

uint64_t sub_1003E2F90(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1003E3BBC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  [v4 timeIntervalSinceDate:*(void *)(a1 + 32)];
  double v6 = v5;
  id v7 = [v3 state];
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
  BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
  if (v7)
  {
    if (v9)
    {
      id v10 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
      *(_DWORD *)buf = 134218242;
      double v24 = v6;
      __int16 v25 = 2112;
      id v26 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Failed to sync KVS. { timeInterval: %f, error: %@ }",  buf,  0x16u);
    }

    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger"));
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
    [v11 logResultForEvent:@"ktKVSSync" hardFailure:1 result:v12];

    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger"));
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v6));
    id v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%@",  @"ktKVSSyncTime",  @"Failure"));
    [v13 logMetric:v14 withName:v15];

    id v16 = *(void **)(a1 + 40);
    id v17 = (void *)objc_claimAutoreleasedReturnValue([v3 error]);
    [v16 failWithError:v17];
  }

  else
  {
    if (v9)
    {
      *(_DWORD *)buf = 134217984;
      double v24 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Successfully synced KVS. {timeInterval: %f",  buf,  0xCu);
    }

    id v18 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger"));
    [v18 logSuccessForEventNamed:@"ktKVSSync"];

    __int16 v19 = (void *)objc_claimAutoreleasedReturnValue(+[TransparencyAnalytics logger](&OBJC_CLASS___TransparencyAnalytics, "logger"));
    __int16 v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v6));
    __int16 v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%@",  @"ktKVSSyncTime",  @"Success"));
    [v19 logMetric:v20 withName:v21];

    id v22 = *(void **)(a1 + 40);
    id v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
    [v22 fulfillWithValue:v17];
  }
}

void sub_1003E4124(uint64_t a1, void *a2)
{
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 allKeys]);
  id v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v11;
    while (2)
    {
      for (uint64_t i = 0LL; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v3);
        }
        if (![*(id *)(a1 + 32) isKeyInKVS:*(void *)(*((void *)&v10 + 1) + 8 * (void)i)])
        {

          uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog KeyTransparency](&OBJC_CLASS___IDSFoundationLog, "KeyTransparency"));
          if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)BOOL v9 = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "This device is missing from KVS. Uploading it.",  v9,  2u);
          }

          id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) keyManager]);
          [v3 updateKVSForKTRegistrationData];
          goto LABEL_13;
        }
      }

      id v5 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }

void sub_1003E4330(uint64_t a1)
{
  unint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) keyTransparencyStore]);
  id v2 = (void *)objc_claimAutoreleasedReturnValue([v1 fetchAllEntries]);

  CFMutableDictionaryRef theDict = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  __int16 v19 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  id v3 = v2;
  id v4 = [v3 countByEnumeratingWithState:&v23 objects:v29 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v24;
    uint64_t v21 = IDSKTKVSTrustedDeviceMetadataKey;
    uint64_t v22 = IDSKTKVSTrustedDeviceKey;
    do
    {
      for (uint64_t i = 0LL; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v24 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(const void **)(*((void *)&v23 + 1) + 8LL * (void)i);
        BOOL v9 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKey:v8]);
        uint64_t v11 = objc_opt_class(&OBJC_CLASS___NSDictionary, v10);
        if ((objc_opt_isKindOfClass(v9, v11) & 1) != 0)
        {
          __int128 v12 = objc_alloc(&OBJC_CLASS___IDSProtoKeyTransparencyTrustedDevice);
          __int128 v13 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKey:v22]);
          uint64_t v14 = -[IDSProtoKeyTransparencyTrustedDevice initWithData:](v12, "initWithData:", v13);

          id v15 = objc_alloc(&OBJC_CLASS___IDSProtoKeyTransparencyTrustedDeviceMetadata);
          id v16 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKey:v21]);
          id v17 = -[IDSProtoKeyTransparencyTrustedDeviceMetadata initWithData:](v15, "initWithData:", v16);

          if (v14) {
            CFDictionarySetValue((CFMutableDictionaryRef)theDict, v8, v14);
          }
          if (v17) {
            CFDictionarySetValue((CFMutableDictionaryRef)v19, v8, v17);
          }
        }

        else
        {
          uint64_t v14 = (IDSProtoKeyTransparencyTrustedDevice *)objc_claimAutoreleasedReturnValue( +[IDSFoundationLog KeyTransparency]( &OBJC_CLASS___IDSFoundationLog,  "KeyTransparency"));
          if (os_log_type_enabled((os_log_t)v14, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            uint64_t v28 = v8;
            _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)v14,  OS_LOG_TYPE_ERROR,  "KVSEntry not of expected type, skipping. {kvsKey: %@}",  buf,  0xCu);
          }
        }
      }

      id v5 = [v3 countByEnumeratingWithState:&v23 objects:v29 count:16];
    }

    while (v5);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

BOOL sub_1003E587C(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 registrationDataSource]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) serviceIdentifier]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v4 pushToken]);

  id v8 = [v5 expectedRemoteKeyTransparencyEligibilityForServiceIdentifier:v6 pushToken:v7];
  return v8 == (id)1;
}

id sub_1003E59C8(uint64_t a1, uint64_t a2)
{
  return _[*(id *)(a1 + 32) _isTrustedCandidate:a2 index:*(void *)(a1 + 40) givenTrustedDevices:*(void *)(a1 + 48)];
}

unint64_t sub_1003E5A9C(uint64_t a1, void *a2)
{
  unint64_t v7 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([(id)v7 trustedServices]);
  BOOL v9 = _NSConcreteStackBlock;
  uint64_t v10 = 3221225472LL;
  uint64_t v11 = sub_1003E5B9C;
  __int128 v12 = &unk_1009048D8;
  id v13 = *(id *)(a1 + 32);
  id v14 = *(id *)(a1 + 40);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "__imArrayByFilteringWithBlock:", &v9));

  id v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "pushToken", v9, v10, v11, v12));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([(id)v7 pushToken]);

  LODWORD(v7) = [v5 isEqual:v6];
  if ([v4 count]) {
    unint64_t v7 = v7;
  }
  else {
    unint64_t v7 = 0LL;
  }

  return v7;
}

uint64_t sub_1003E5B9C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 serviceIdentifier]);
  if (v4)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) serviceIdentifier]);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v3 serviceIdentifier]);
    unsigned int v7 = [v5 isEqual:v6];
  }

  else
  {
    unsigned int v7 = 0;
  }

  id v8 = (void *)objc_claimAutoreleasedReturnValue([v3 ktLoggableData]);
  BOOL v9 = (void *)objc_claimAutoreleasedReturnValue([v8 data]);
  if (v9)
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) loggableData]);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v3 ktLoggableData]);
    __int128 v12 = (void *)objc_claimAutoreleasedReturnValue([v11 data]);
    unsigned int v13 = [v10 isEqual:v12];
  }

  else
  {
    unsigned int v13 = 0;
  }

  id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) URI]);
  if (v14)
  {
    id v15 = (void *)objc_claimAutoreleasedReturnValue([v3 uris]);
    id v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "__imArrayByApplyingBlock:", &stru_1009048B0));
    id v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) URI]);
    unsigned int v18 = [v16 containsObject:v17];
  }

  else
  {
    unsigned int v18 = 0;
  }

  return v7 & v13 & v18;
}

id sub_1003E5D2C(id a1, NSString *a2)
{
  return +[IDSURI URIWithPrefixedURI:](&OBJC_CLASS___IDSURI, "URIWithPrefixedURI:", a2);
}

IDSKeyTransparencyEntry *sub_1003E62BC(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "trustedServices", 0));
  id v5 = [v4 countByEnumeratingWithState:&v23 objects:v27 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v24;
    while (2)
    {
      for (uint64_t i = 0LL; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v24 != v7) {
          objc_enumerationMutation(v4);
        }
        BOOL v9 = *(void **)(*((void *)&v23 + 1) + 8LL * (void)i);
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 serviceIdentifier]);
        if ([v10 isEqualToString:*(void *)(a1 + 32)])
        {

LABEL_13:
          id v15 = (void *)objc_claimAutoreleasedReturnValue([v9 ktLoggableData]);
          unsigned int v13 = (void *)objc_claimAutoreleasedReturnValue([v15 data]);

          id v14 = (void *)objc_claimAutoreleasedReturnValue([v9 deviceSignature]);
          goto LABEL_14;
        }

        unsigned int v11 = [v9 keyIndex];
        int v12 = sub_1002E08AC((int)[*(id *)(a1 + 40) ktRegistrationDataIndex]);

        if (v11 == v12) {
          goto LABEL_13;
        }
      }

      id v6 = [v4 countByEnumeratingWithState:&v23 objects:v27 count:16];
      unsigned int v13 = 0LL;
      id v14 = 0LL;
      if (v6) {
        continue;
      }
      break;
    }
  }

  else
  {
    unsigned int v13 = 0LL;
    id v14 = 0LL;
  }

int64_t sub_1003E6BA0(id a1, NSData *a2, NSData *a3)
{
  id v4 = a3;
  id v5 = (void *)objc_claimAutoreleasedReturnValue(-[NSData __imHexString](a2, "__imHexString"));
  id v6 = (void *)objc_claimAutoreleasedReturnValue(-[NSData __imHexString](v4, "__imHexString"));

  id v7 = [v5 compare:v6];
  return (int64_t)v7;
}

void sub_1003E6FE4(id a1)
{
  v3[0] = IDSiMessageKeyTransparencyService;
  v3[1] = IDSMultiplex1KeyTransparencyService;
  v4[0] = @"im://";
  v4[1] = @"mp1://";
  v3[2] = IDSFaceTimeMultiKeyTransparencyService;
  _DWORD v4[2] = @"ftm://";
  uint64_t v1 = objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v4,  v3,  3LL));
  id v2 = (void *)qword_1009C0DA0;
  qword_1009C0DA0 = v1;
}

void sub_1003E8500( void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

uint64_t sub_1003EA338(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_1003EA3A0;
  v8[3] = &unk_1009049E8;
  void v8[4] = a1;
  void v8[5] = a2;
  v8[6] = a3;
  v8[7] = a4;
  __int16 v8[8] = a5;
  v8[9] = a6;
  v8[10] = a7;
  sub_1001A35BC( (uint64_t)@"INSERT INTO firewall_record (handle, merge_id, service, category, is_donated, last_seen_date, last_modified_date) VALUES (?, ?, ?, ?, ?, ?, ?);",
    v8);
  return 1LL;
}

uint64_t sub_1003EA3A0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return CSDBSqliteStatementPerform(a4);
}

uint64_t sub_1003EA418(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_1003EA47C;
  v7[3] = &unk_100904A08;
  v7[4] = a2;
  void v7[5] = a5;
  v7[6] = a6;
  v7[7] = a1;
  v7[8] = a3;
  v7[9] = a4;
  sub_1001A35BC( (uint64_t)@"UPDATE firewall_record SET merge_id = ?, last_seen_date = ?, last_modified_date = ? WHERE handle = ? AND category = ? AND is_donated = ?;",
    v7);
  return 1LL;
}

uint64_t sub_1003EA47C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return CSDBSqliteStatementPerform(a4);
}

uint64_t sub_1003EA4E8(const __CFArray *a1, uint64_t a2)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(0LL, 0LL);
  CFStringAppend(Mutable, @"DELETE FROM firewall_record WHERE handle ");
  CFIndex Count = CFArrayGetCount(a1);
  id v6 = (const __CFString *)CSDBGenerateInClauseForCount(Count);
  CFStringAppend(Mutable, v6);
  CFStringAppend(Mutable, @"AND category = ?");
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_1003EA59C;
  v8[3] = &unk_100900FE0;
  void v8[4] = a1;
  void v8[5] = a2;
  sub_1001A35BC((uint64_t)Mutable, v8);
  return 1LL;
}

uint64_t sub_1003EA59C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return CSDBSqliteStatementPerform(a4);
}

uint64_t sub_1003EA5D8(const __CFArray *a1, uint64_t a2)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(0LL, 0LL);
  CFStringAppend(Mutable, @"DELETE FROM firewall_record WHERE merge_id ");
  CFIndex Count = CFArrayGetCount(a1);
  id v6 = (const __CFString *)CSDBGenerateInClauseForCount(Count);
  CFStringAppend(Mutable, v6);
  CFStringAppend(Mutable, @"AND category = ?");
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_1003EA68C;
  v8[3] = &unk_100900FE0;
  void v8[4] = a1;
  void v8[5] = a2;
  sub_1001A35BC((uint64_t)Mutable, v8);
  return 1LL;
}

uint64_t sub_1003EA68C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return CSDBSqliteStatementPerform(a4);
}

uint64_t sub_1003EA6C8(const __CFArray *a1, uint64_t a2, uint64_t a3)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(0LL, 0LL);
  CFStringAppend(Mutable, @"DELETE FROM firewall_record WHERE handle ");
  CFIndex Count = CFArrayGetCount(a1);
  id v8 = (const __CFString *)CSDBGenerateInClauseForCount(Count);
  CFStringAppend(Mutable, v8);
  CFStringAppend(Mutable, @"AND category = ? AND is_donated = ?;");
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_1003EA784;
  v10[3] = &unk_100904A28;
  void v10[4] = a1;
  v10[5] = a2;
  v10[6] = a3;
  sub_1001A35BC((uint64_t)Mutable, v10);
  return 1LL;
}

uint64_t sub_1003EA784(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return CSDBSqliteStatementPerform(a4);
}

uint64_t sub_1003EA7CC(const __CFArray *a1, uint64_t a2, uint64_t a3)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(0LL, 0LL);
  CFStringAppend(Mutable, @"DELETE FROM firewall_record WHERE merge_id ");
  CFIndex Count = CFArrayGetCount(a1);
  id v8 = (const __CFString *)CSDBGenerateInClauseForCount(Count);
  CFStringAppend(Mutable, v8);
  CFStringAppend(Mutable, @"AND category = ? AND is_donated = ?;");
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_1003EA888;
  v10[3] = &unk_100904A28;
  void v10[4] = a1;
  v10[5] = a2;
  v10[6] = a3;
  sub_1001A35BC((uint64_t)Mutable, v10);
  return 1LL;
}

uint64_t sub_1003EA888(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return CSDBSqliteStatementPerform(a4);
}

uint64_t sub_1003EA8D0(uint64_t a1, uint64_t a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_1003EA92C;
  void v3[3] = &unk_100900FE0;
  void v3[4] = a1;
  void v3[5] = a2;
  sub_1001A35BC((uint64_t)@"DELETE FROM firewall_record WHERE category = ? AND is_donated = ?", v3);
  return 1LL;
}

uint64_t sub_1003EA92C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return CSDBSqliteStatementPerform(a4);
}

uint64_t sub_1003EA968(uint64_t a1)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472LL;
  v2[2] = sub_1003EA9C4;
  v2[3] = &unk_1008F6D90;
  v2[4] = a1;
  sub_1001A35BC((uint64_t)@"DELETE FROM firewall_record WHERE category = ?", v2);
  return 1LL;
}

uint64_t sub_1003EA9C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return CSDBSqliteStatementPerform(a4);
}

uint64_t sub_1003EA9F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0LL;
  id v7 = &v6;
  uint64_t v8 = 0x2020000000LL;
  char v9 = 0;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_1003EAA9C;
  v5[3] = &unk_100904A50;
  v5[6] = a2;
  void v5[7] = a3;
  void v5[4] = &v6;
  v5[5] = a1;
  sub_1001A3614( (uint64_t)@"SELECT COUNT(1) FROM firewall_record WHERE handle = ? AND category = ? AND is_donated = ?LIMIT 1;",
    v5);
  uint64_t v3 = *((unsigned __int8 *)v7 + 24);
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_1003EAA84(_Unwind_Exception *a1)
{
}

uint64_t sub_1003EAA9C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = CSDBSqliteStep(a4);
  if ((_DWORD)result)
  {
    uint64_t result = CSDBSqliteStatementInteger64ResultColumn(a4, 0LL);
    *(_BYTE *)(*(void *)(a1[4] + 8LL) + 24LL) = result > 0;
  }

  return result;
}

uint64_t sub_1003EAB0C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = 0LL;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000LL;
  char v8 = 0;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  _DWORD v4[2] = sub_1003EABB8;
  void v4[3] = &unk_1008F69E0;
  v4[5] = a1;
  v4[6] = a2;
  v4[4] = &v5;
  sub_1001A3614((uint64_t)@"SELECT COUNT(1) FROM firewall_record WHERE handle = ? AND category = ?LIMIT 1;", v4);
  uint64_t v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1003EABA0(_Unwind_Exception *a1)
{
}

uint64_t sub_1003EABB8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = CSDBSqliteStep(a4);
  if ((_DWORD)result)
  {
    uint64_t result = CSDBSqliteStatementInteger64ResultColumn(a4, 0LL);
    *(_BYTE *)(*(void *)(a1[4] + 8LL) + 24LL) = result > 0;
  }

  return result;
}

uint64_t sub_1003EAC1C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = 0LL;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000LL;
  char v8 = 0;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  _DWORD v4[2] = sub_1003EACC8;
  void v4[3] = &unk_1008F69E0;
  v4[5] = a1;
  v4[6] = a2;
  v4[4] = &v5;
  sub_1001A3614((uint64_t)@"SELECT COUNT(1) FROM firewall_record WHERE merge_id = ? AND category = ?LIMIT 1;", v4);
  uint64_t v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1003EACB0(_Unwind_Exception *a1)
{
}

uint64_t sub_1003EACC8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = CSDBSqliteStep(a4);
  if ((_DWORD)result)
  {
    uint64_t result = CSDBSqliteStatementInteger64ResultColumn(a4, 0LL);
    *(_BYTE *)(*(void *)(a1[4] + 8LL) + 24LL) = result > 0;
  }

  return result;
}

uint64_t sub_1003EAD2C(uint64_t a1)
{
  uint64_t v4 = 0LL;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2020000000LL;
  uint64_t v7 = 0LL;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_1003EADD4;
  void v3[3] = &unk_100904A78;
  void v3[4] = &v4;
  void v3[5] = a1;
  sub_1001A3614( (uint64_t)@"SELECT DISTINCT handle, last_seen_date, is_donated, merge_id FROM firewall_record WHERE category = ?;",
    v3);
  uint64_t v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1003EADBC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1003EADD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = CSDBSqliteStatementCopyAllRowsStringsForColumnsAtIndices(a4, &off_100948988);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  return result;
}

uint64_t sub_1003EAE1C(uint64_t a1)
{
  uint64_t v4 = 0LL;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2020000000LL;
  uint64_t v7 = 0LL;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_1003EAEC4;
  void v3[3] = &unk_100904A78;
  void v3[4] = &v4;
  void v3[5] = a1;
  sub_1001A3614( (uint64_t)@"SELECT DISTINCT handle, last_seen_date, is_donated, merge_id FROM firewall_record WHERE category = ? AND is_donated = 1;",
    v3);
  uint64_t v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1003EAEAC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1003EAEC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = CSDBSqliteStatementCopyAllRowsStringsForColumnsAtIndices(a4, &off_1009489A0);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  return result;
}

void sub_1003EAF0C(uint64_t a1)
{
  v1[0] = _NSConcreteStackBlock;
  v1[1] = 3221225472LL;
  v1[2] = sub_1003EAF64;
  v1[3] = &unk_1008F6D90;
  v1[4] = a1;
  sub_1001A35BC((uint64_t)@"DELETE from firewall_record WHERE last_seen_date < ? AND is_donated = 0; ", v1);
}

uint64_t sub_1003EAF64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return CSDBSqliteStatementPerform(a4);
}

void sub_1003F1FA0(id a1)
{
  dispatch_queue_attr_t v1 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  uint64_t v2 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v1);
  dispatch_queue_attr_t initially_inactive = dispatch_queue_attr_make_initially_inactive(v2);
  uint64_t v4 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(initially_inactive);
  dispatch_queue_t object = dispatch_queue_create("IDSGroupAgentQueue", v4);

  uint64_t v10 = IDSRealTimeContext(v5, v6, v7, v8, v9);
  unsigned int v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  nw_queue_context_target_dispatch_queue(v11, object);

  dispatch_activate(object);
  int v12 = -[IDSGroupAgent initWithQueue:isSessionControlEnabled:]( objc_alloc(&OBJC_CLASS___IDSGroupAgent),  "initWithQueue:isSessionControlEnabled:",  object,  _os_feature_enabled_impl("IDS", "IDSGroupAgentSessionControlFlow"));
  unsigned int v13 = (void *)qword_1009C0DB0;
  qword_1009C0DB0 = (uint64_t)v12;

  [(id)qword_1009C0DB0 registerAgent];
  [(id)qword_1009C0DB0 registerEntitledAgent];
  sub_1000EEBC8();
}

void sub_1003F2558(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = a4;
  uint64_t object_at_index = nw_array_get_object_at_index(v8, 0LL);
  uint64_t v11 = objc_claimAutoreleasedReturnValue(object_at_index);
  int v12 = (void *)v11;
  if (v11)
  {
    unsigned int v13 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s",  nw_endpoint_get_application_service_alias(v11));
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    id v15 = -[IDSGroupSessionConnectionParameters initWithStringRepresentation:]( objc_alloc(&OBJC_CLASS___IDSGroupSessionConnectionParameters),  "initWithStringRepresentation:",  v14);
    id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog TransportLevelAgent](&OBJC_CLASS___IDSFoundationLog, "TransportLevelAgent"));
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      id v17 = (void *)objc_claimAutoreleasedReturnValue(-[IDSGroupSessionConnectionParameters sessionID](v15, "sessionID"));
      *(_DWORD *)buf = 138412802;
      id v36 = v8;
      __int16 v37 = 2112;
      id v38 = v17;
      __int16 v39 = 2112;
      id v40 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "add_members_handler: request to add members %@, for sessionID %@, client %@",  buf,  0x20u);
    }

    id v31 = v7;

    unsigned int v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) membersArrayDict]);
    __int16 v19 = (void *)objc_claimAutoreleasedReturnValue(-[IDSGroupSessionConnectionParameters sessionID](v15, "sessionID"));
    __int16 v20 = (void *)objc_claimAutoreleasedReturnValue([v18 objectForKey:v19]);

    if (v20)
    {
      uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog TransportLevelAgent](&OBJC_CLASS___IDSFoundationLog, "TransportLevelAgent"));
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        id v36 = v20;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "add_members_handler: current members found %@",  buf,  0xCu);
      }

      id combined_array = (id)nw_array_create_combined_array(v20, v8);
    }

    else
    {
      id combined_array = v8;
    }

    __int128 v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) membersArrayDict]);
    __int128 v24 = (void *)objc_claimAutoreleasedReturnValue(-[IDSGroupSessionConnectionParameters sessionID](v15, "sessionID"));
    [v23 setObject:combined_array forKey:v24];

    __int128 v25 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s",  nw_endpoint_get_application_service_name(v12));
    __int128 v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
    id v27 = (void *)nw_array_create();
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472LL;
    v32[2] = sub_1003F2924;
    v32[3] = &unk_100904AC0;
    id v28 = v26;
    id v33 = v28;
    id v29 = v27;
    id v34 = v29;
    nw_array_apply(combined_array, v32);
    uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog TransportLevelAgent](&OBJC_CLASS___IDSFoundationLog, "TransportLevelAgent"));
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v36 = v29;
      _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "add_members_handler: calling assign with %@",  buf,  0xCu);
    }

    v9[2](v9, v29);
    id v7 = v31;
  }

  else
  {
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog TransportLevelAgent](&OBJC_CLASS___IDSFoundationLog, "TransportLevelAgent"));
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "add_members_handler: nw_agent_set_group_handlers called with empty array",  buf,  2u);
    }
  }
}

uint64_t sub_1003F2924(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s",  nw_endpoint_get_application_service_name());
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

  return 1LL;
}

void sub_1003F29A8(id a1, OS_nw_agent_client *a2, OS_nw_array *a3, id a4)
{
  uint64_t v5 = a2;
  uint64_t v6 = a3;
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog TransportLevelAgent](&OBJC_CLASS___IDSFoundationLog, "TransportLevelAgent"));
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 138412546;
    uint64_t v9 = v6;
    __int16 v10 = 2112;
    uint64_t v11 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Request to remove members %@, for client %@ ",  (uint8_t *)&v8,  0x16u);
  }
}

void sub_1003F2A7C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (void *)nw_agent_client_copy_endpoint(v5);
  int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog TransportLevelAgent](&OBJC_CLASS___IDSFoundationLog, "TransportLevelAgent"));
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    __int128 v24 = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Client starting flow to %@\n", buf, 0xCu);
  }

  if (v7)
  {
    uint64_t v9 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s",  nw_endpoint_get_description(v7));
    __int16 v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 72) objectForKeyedSubscript:v10]);
    int v12 = objc_alloc(&OBJC_CLASS___IDSTransportLevelAgentClientInfo);
    unsigned int v13 = (void *)objc_claimAutoreleasedReturnValue([v11 appleID]);
    id v14 = -[IDSTransportLevelAgentClientInfo initWithAgentClient:assign:parameters:]( v12,  "initWithAgentClient:assign:parameters:",  v5,  v6,  v13);

    -[IDSTransportLevelAgentClientInfo setLocalEndpoint:](v14, "setLocalEndpoint:", v7);
    -[IDSTransportLevelAgentClientInfo setEndpoint:](v14, "setEndpoint:", v7);
    id v15 = sub_1003F2CF4();
    id v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
    id v17 = (void *)objc_claimAutoreleasedReturnValue([v11 secondaryPort]);
    unsigned int v18 = (void *)objc_claimAutoreleasedReturnValue([v17 stringValue]);

    id v19 = v16;
    __int16 v20 = (const char *)[v19 cStringUsingEncoding:134217984];
    id v21 = v18;
    nw_endpoint_t host = nw_endpoint_create_host(v20, (const char *)[v21 cStringUsingEncoding:134217984]);
    -[IDSTransportLevelAgentClientInfo setLocalEndpoint:](v14, "setLocalEndpoint:", host);

    [*(id *)(*(void *)(a1 + 32) + 96) connectionRequest:v14];
    [*(id *)(*(void *)(a1 + 32) + 80) setObject:v14 forKey:v10];
  }

  else
  {
    __int16 v10 = (void *)nw_agent_client_copy_path(v5);
    if ((nw_path_is_listener() & 1) == 0) {
      (*((void (**)(id, void, void, void))v6 + 2))(v6, 0LL, 0LL, 0LL);
    }
  }
}

id sub_1003F2CF4()
{
  int v6 = 0;
  uint64_t v5 = 0LL;
  uint64_t v4 = 1LL;
  arc4random_buf(&v5, 8uLL);
  *(void *)&__int128 v0 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v0 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v8[14] = v0;
  *(_OWORD *)id v7 = v0;
  *(_OWORD *)int v8 = v0;
  inet_ntop(30, &v4, v7, 0x2Eu);
  dispatch_queue_attr_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v7, 7708LL, v4));
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 stringByAppendingString:@"%"]);

  return v2;
}

void sub_1003F2DC4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)nw_agent_client_copy_endpoint(a2);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@", v3));

  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog TransportLevelAgent](&OBJC_CLASS___IDSFoundationLog, "TransportLevelAgent"));
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    id v33 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Client stopped flow to endpoint %@\n",  buf,  0xCu);
  }

  int v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 72) objectForKeyedSubscript:v4]);
  id v7 = objc_alloc(&OBJC_CLASS___IDSGroupSessionConnectionParameters);
  int v8 = (void *)objc_claimAutoreleasedReturnValue([v6 appleID]);
  uint64_t v9 = -[IDSGroupSessionConnectionParameters initWithStringRepresentation:](v7, "initWithStringRepresentation:", v8);

  if (v9 && !-[IDSGroupSessionConnectionParameters participantID](v9, "participantID"))
  {
    __int16 v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) membersArrayDict]);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(-[IDSGroupSessionConnectionParameters sessionID](v9, "sessionID"));
    [v10 removeObjectForKey:v11];

    int v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) portCollisionDetection]);
    unsigned int v13 = (void *)objc_claimAutoreleasedReturnValue(-[IDSGroupSessionConnectionParameters sessionID](v9, "sessionID"));
    [v12 removeObjectForKey:v13];

    id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) managedSessions]);
    id v15 = (void *)objc_claimAutoreleasedReturnValue(-[IDSGroupSessionConnectionParameters sessionID](v9, "sessionID"));
    id v16 = (void *)objc_claimAutoreleasedReturnValue([v14 objectForKey:v15]);

    if (v16)
    {
      id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog TransportLevelAgent](&OBJC_CLASS___IDSFoundationLog, "TransportLevelAgent"));
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v18 = (void *)objc_claimAutoreleasedReturnValue(-[IDSGroupSessionConnectionParameters sessionID](v9, "sessionID"));
        *(_DWORD *)buf = 138412290;
        id v33 = v18;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Group session %@ ended.", buf, 0xCu);
      }

      uint64_t v21 = im_primary_queue(v19, v20);
      uint64_t v22 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v21);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_1003F3150;
      block[3] = &unk_1008F5F80;
      id v30 = v16;
      __int128 v23 = v9;
      id v31 = v23;
      dispatch_async(v22, block);

      __int128 v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) managedSessions]);
      __int128 v25 = (void *)objc_claimAutoreleasedReturnValue(-[IDSGroupSessionConnectionParameters sessionID](v23, "sessionID"));
      [v24 removeObjectForKey:v25];
    }

    __int128 v26 = *(void **)(*(void *)(a1 + 32) + 112LL);
    id v27 = (void *)objc_claimAutoreleasedReturnValue(-[IDSGroupSessionConnectionParameters sessionID](v9, "sessionID"));
    [v26 removeObjectForKey:v27];
  }

  [*(id *)(*(void *)(a1 + 32) + 72) setObject:0 forKeyedSubscript:v4];
  id v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 80) objectForKeyedSubscript:v4]);
  if (v28)
  {
    [*(id *)(*(void *)(a1 + 32) + 96) connectionCancel:v28];
    [*(id *)(*(void *)(a1 + 32) + 80) removeObjectForKey:v4];
  }
}

void sub_1003F3150(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[IDSDSessionController sharedInstance](&OBJC_CLASS___IDSDSessionController, "sharedInstance"));
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) sessionID]);
  [v3 cleanupSession:v2 shouldCleanSessionStatus:1];
}

void sub_1003F31B8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = a3;
  int v6 = (void *)nw_agent_client_copy_endpoint(a2);
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog TransportLevelAgent](&OBJC_CLASS___IDSFoundationLog, "TransportLevelAgent"));
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = 138412290;
    uint64_t v11 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "resolve_handler: resolve request for endpoint %@\n",  (uint8_t *)&v10,  0xCu);
  }

  if (v6)
  {
    int v8 = (void *)nw_array_create();
    if ([*(id *)(a1 + 32) isAppleEndpointForExistingSession:v6])
    {
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) resolveAppleEndpoint:v6]);
      if (v9) {
        nw_array_append(v8, v9);
      }
      v5[2](v5, v8);
    }
  }
}

void sub_1003F32E0(id a1, OS_nw_agent_client *a2)
{
  uint64_t v2 = (void *)nw_agent_client_copy_endpoint(a2);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog TransportLevelAgent](&OBJC_CLASS___IDSFoundationLog, "TransportLevelAgent"));
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 138412290;
    uint64_t v5 = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "resolve_handler: stop_resolve_handler called for endpoint:%@",  (uint8_t *)&v4,  0xCu);
  }
}

void sub_1003F36D8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog TransportLevelAgent](&OBJC_CLASS___IDSFoundationLog, "TransportLevelAgent"));
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    id v25 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "resolve_handler: resolve request for client %@\n",  buf,  0xCu);
  }

  int v8 = (void *)nw_agent_client_copy_endpoint(v5);
  if (v8)
  {
    uint64_t v9 = (void *)nw_array_create();
    int v10 = (void *)nw_agent_client_copy_path(v5);
    uint64_t v11 = (void *)nw_path_copy_parameters(v10);
    uint64_t v12 = nw_parameters_get_server_mode() ^ 1;
    unsigned int v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog TransportLevelAgent](&OBJC_CLASS___IDSFoundationLog, "TransportLevelAgent"));
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v25) = v12;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "resolve_handler: isClient: %d\n", buf, 8u);
    }

    id v14 = *(void **)(a1 + 32);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472LL;
    v19[2] = sub_1003F38D0;
    v19[3] = &unk_100904C08;
    id v15 = v6;
    uint64_t v16 = *(void *)(a1 + 32);
    id v20 = v9;
    uint64_t v21 = v16;
    id v22 = v11;
    id v23 = v15;
    id v17 = v11;
    id v18 = v9;
    [v14 createNewSessionForClientRequest:v8 isClient:v12 registrationCompletionBlock:v19];
  }
}

void sub_1003F38D0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:IDSSessionUniqueIDKey]);
  if (v5)
  {
    [*(id *)(a1 + 40) resolveAirDropProEndpointWithParams:*(void *)(a1 + 48) options:v4 agentResolveResponse:*(void *)(a1 + 56)];
  }

  else
  {
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog TransportLevelAgent](&OBJC_CLASS___IDSFoundationLog, "TransportLevelAgent"));
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v7 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "resolve_handler: could not create session.",  v7,  2u);
    }

    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }
}

void sub_1003F3998(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)nw_agent_client_copy_endpoint(v3);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog TransportLevelAgent](&OBJC_CLASS___IDSFoundationLog, "TransportLevelAgent"));
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    id v13 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "resolve_handler: stop_resolve_handler called for client:%@",  buf,  0xCu);
  }

  if ([*(id *)(a1 + 32) isAirDropSession:v4])
  {
    id v6 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%s",  nw_endpoint_get_application_service_alias(v4));
    id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    int v8 = (void *)objc_claimAutoreleasedReturnValue([v7 componentsSeparatedByString:@":"]);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 objectAtIndexedSubscript:4]);
    int v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 104) objectForKey:v9]);
    uint64_t v11 = v10;
    if (v10)
    {
      [v10 leaveGroupSession:0 options:0];
      [*(id *)(*(void *)(a1 + 32) + 104) removeObjectForKey:v9];
      [*(id *)(*(void *)(a1 + 32) + 112) removeObjectForKey:v9];
      [*(id *)(*(void *)(a1 + 32) + 120) removeObjectForKey:v9];
    }
  }
}

void sub_1003F4758(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[IDSDSessionController sharedInstance](&OBJC_CLASS___IDSDSessionController, "sharedInstance"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 setupNewOutgoingSessionWithOptions:*(void *)(a1 + 32)]);

  if (v3)
  {
    [v3 setClientID:*(void *)(a1 + 56)];
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog TransportLevelAgent](&OBJC_CLASS___IDSFoundationLog, "TransportLevelAgent"));
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      *(void *)&uint8_t buf[4] = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Created new sesssion: %@", buf, 0xCu);
    }

    [*(id *)(*(void *)(a1 + 40) + 104) setValue:v3 forKey:*(void *)(a1 + 48)];
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
    memset(buf, 170, 20);
    arc4random_buf(buf, 0x14uLL);
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", buf, 20LL));
    [v5 setObject:v6 forKeyedSubscript:IDSGroupSessionParticipantDataKey];

    [v5 setObject:&__kCFBooleanTrue forKeyedSubscript:IDSGroupSessionIsReliableUnicastSession];
    [v5 setObject:&__kCFBooleanTrue forKeyedSubscript:IDSGroupSessionStartedAsUPlusOneKey];
    [v5 setObject:&__kCFBooleanFalse forKeyedSubscript:IDSGroupSessionNewServerAllocationKey];
    [v3 joinWithOptions:v5];
  }

  else
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 104) objectForKey:*(void *)(a1 + 48)]);
    if (v5)
    {
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog TransportLevelAgent](&OBJC_CLASS___IDSFoundationLog, "TransportLevelAgent"));
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = *(void *)(a1 + 48);
        *(_DWORD *)buf = 138412546;
        *(void *)&uint8_t buf[4] = v5;
        *(_WORD *)&_BYTE buf[12] = 2112;
        *(void *)&buf[14] = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "resolve_handler: Found existing session %@ with sessiondID %@, calling registration completion handler!",  buf,  0x16u);
      }

      uint64_t v19 = IDSSessionUniqueIDKey;
      uint64_t v20 = *(void *)(a1 + 48);
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v20,  &v19,  1LL));
      int v10 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) queue]);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_1003F4AB4;
      block[3] = &unk_1008F6358;
      id v11 = *(id *)(a1 + 64);
      id v17 = v9;
      id v18 = v11;
      id v12 = v9;
      dispatch_async(v10, block);
    }

    else
    {
      id v13 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) queue]);
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472LL;
      v14[2] = sub_1003F4AC8;
      v14[3] = &unk_1008F6330;
      id v15 = *(id *)(a1 + 64);
      dispatch_async(v13, v14);

      id v12 = v15;
    }
  }
}

uint64_t sub_1003F4AB4(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  1LL,  *(void *)(a1 + 32));
}

uint64_t sub_1003F4AC8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

int64_t sub_1003F4C94(id a1, id a2, id a3)
{
  return (int64_t)[a2 compare:a3];
}

void sub_1003F5158(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v14[0] = 0LL;
  v14[1] = 0LL;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) entitledAgent]);
  nw_agent_get_uuid(v7, v14);

  nw_endpoint_set_agent_identifier(v6, v14);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 112) objectForKeyedSubscript:*(void *)(a1 + 40)]);
  if (!v8)
  {
    uint64_t v8 = (void *)nw_array_create();
    [*(id *)(*(void *)(a1 + 32) + 112) setObject:v8 forKey:*(void *)(a1 + 40)];
  }

  nw_array_append(v8, v6);
  uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[IDSFoundationLog TransportLevelAgent](&OBJC_CLASS___IDSFoundationLog, "TransportLevelAgent"));
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = 138412546;
    id v11 = v5;
    __int16 v12 = 2112;
    id v13 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "resolve_handler: storing evaluator:%@, responding with endpoints: %@",  (uint8_t *)&v10,  0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  [*(id *)(*(void *)(a1 + 32) + 120) setObject:v5 forKey:*(void *)(a1 + 40)];
}

uint64_t sub_1003F56D8(void *a1)
{
  id v1 = objc_claimAutoreleasedReturnValue([a1 dataUsingEncoding:4]);
  CC_SHA1( objc_msgSend(v1, "bytes", *(void *)v5, *(void *)&v5[8], *(void *)&v5[16]),  (CC_LONG)objc_msgSend(v1, "length"),  v5);
  id v2 = objc_claimAutoreleasedReturnValue( +[NSData dataWithBytes:length:]( &OBJC_CLASS___NSData, "dataWithBytes:length:", v5, 20LL));
  uint64_t v3 = *(unsigned int *)[v2 bytes];

  return v3;
}

void *sub_1003F5B9C()
{
  return &unk_1007181C0;
}

BOOL sub_1003F5BA8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int sub_1003F5BC0()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1003F5C04()
{
}

Swift::Int sub_1003F5C2C(uint64_t a1)
{
  Swift::UInt v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_1003F5C6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1003F5CB4(&qword_1009B8E08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003F5CB4(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

uint64_t type metadata accessor for IDSGroupEncryptionKeyMaterialController.OneKey(uint64_t a1)
{
  return sub_100402020( a1,  (uint64_t *)&unk_1009C0F50,  (uint64_t)&nominal type descriptor for IDSGroupEncryptionKeyMaterialController.OneKey);
}

uint64_t sub_1003F5D08(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1003F5CB4(&qword_1009B8E08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for IDSGroupEncryptionKeyMaterialController.TwoKey(uint64_t a1)
{
  return sub_100402020( a1,  (uint64_t *)&unk_1009C0F60,  (uint64_t)&nominal type descriptor for IDSGroupEncryptionKeyMaterialController.TwoKey);
}

uint64_t sub_1003F5D64@<X0>(double a1@<X0>, double a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  double v35 = a2;
  type metadata accessor for IDSGroupEncryptionKeyMaterialController.TwoKey(0LL);
  __chkstk_darwin(v9, v10);
  __int16 v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for IDSGroupEncryptionKeyMaterialController.OneKey(0LL);
  __chkstk_darwin(v13, v14);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.KeyState(0LL);
  __chkstk_darwin(v18, v19);
  uint64_t v21 = (char *)&v34 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1003F5FC8(v5, (uint64_t)v21, v22);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v21, v17);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload != 1)
    {
      uint64_t v28 = type metadata accessor for Date(0LL);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56LL))( a4,  1LL,  1LL,  v28);
    }

    uint64_t v24 = sub_1003F600C( (uint64_t)v21,  (uint64_t)v12,  type metadata accessor for IDSGroupEncryptionKeyMaterialController.TwoKey);
    if ((a3 & 1) != 0)
    {
      uint64_t v30 = type metadata accessor for Date(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56LL))(a4, 1LL, 1LL, v30);
    }

    else
    {
      Date.advanced(by:)(v24, v35);
      uint64_t v25 = type metadata accessor for Date(0LL);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56LL))(a4, 0LL, 1LL, v25);
    }

    id v31 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.TwoKey;
    uint64_t v32 = (uint64_t)v12;
  }

  else
  {
    uint64_t v26 = sub_1003F600C( (uint64_t)v21,  (uint64_t)v16,  type metadata accessor for IDSGroupEncryptionKeyMaterialController.OneKey);
    if ((a3 & 1) != 0)
    {
      uint64_t v33 = type metadata accessor for Date(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56LL))(a4, 1LL, 1LL, v33);
    }

    else
    {
      Date.advanced(by:)(v26, a1);
      uint64_t v27 = type metadata accessor for Date(0LL);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56LL))(a4, 0LL, 1LL, v27);
    }

    id v31 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.OneKey;
    uint64_t v32 = (uint64_t)v16;
  }

  return sub_1003F6050(v32, v31);
}

uint64_t type metadata accessor for IDSGroupEncryptionKeyMaterialController.KeyState(uint64_t a1)
{
  return sub_100402020( a1,  (uint64_t *)&unk_1009C0F70,  (uint64_t)&nominal type descriptor for IDSGroupEncryptionKeyMaterialController.KeyState);
}

uint64_t sub_1003F5FC8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_1003F600C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_1003F6050(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t sub_1003F608C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.TwoKey(0LL);
  __chkstk_darwin(v5, v6);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.OneKey(0LL);
  __chkstk_darwin(v10, v11);
  __n128 v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.KeyState(0LL);
  __chkstk_darwin(v15, v16);
  __n128 v18 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1003F5FC8(v2, (uint64_t)v18, v19);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v18, v14);
  if (!EnumCaseMultiPayload)
  {
    sub_1003F600C((uint64_t)v18, (uint64_t)v13, type metadata accessor for IDSGroupEncryptionKeyMaterialController.OneKey);
    sub_1003F5FC8((uint64_t)&v13[*(int *)(v9 + 20)], a1, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    uint64_t v21 = (uint64_t)v13;
    id v22 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.OneKey;
    goto LABEL_5;
  }

  if (EnumCaseMultiPayload == 1)
  {
    sub_1003F600C((uint64_t)v18, (uint64_t)v8, type metadata accessor for IDSGroupEncryptionKeyMaterialController.TwoKey);
    sub_1003F5FC8((uint64_t)&v8[*(int *)(v4 + 20)], a1, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    uint64_t v21 = (uint64_t)v8;
    id v22 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.TwoKey;
LABEL_5:
    sub_1003F6050(v21, v22);
    uint64_t v23 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56LL))( a1,  0LL,  1LL,  v23);
  }

  uint64_t v25 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56LL))( a1,  1LL,  1LL,  v25);
}

uint64_t sub_1003F6258()
{
  uint64_t v1 = v0;
  type metadata accessor for IDSGroupEncryptionKeyMaterialController.TwoKey(0LL);
  __chkstk_darwin(v2, v3);
  __n128 v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for IDSGroupEncryptionKeyMaterialController.OneKey(0LL);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.KeyState(0LL);
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1003F5FC8(v1, (uint64_t)v14, v15);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v14, v10);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload != 1) {
      return 0x79656B206F6ELL;
    }
    sub_1003F600C((uint64_t)v14, (uint64_t)v5, type metadata accessor for IDSGroupEncryptionKeyMaterialController.TwoKey);
    uint64_t v29 = 0LL;
    unint64_t v30 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(29LL);
    v17._countAndFlagsBits = 0x7379656B206F7774LL;
    v17._dispatch_queue_t object = (void *)0xEF20666F20736120LL;
    String.append(_:)(v17);
    double v19 = Date.timeIntervalSinceNow.getter(v18);
    Double.write<A>(to:)( &v29,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation,  -v19);
    v20._countAndFlagsBits = 0x73646E6F63657320LL;
    v20._dispatch_queue_t object = (void *)0xEC0000006F676120LL;
    String.append(_:)(v20);
    uint64_t v21 = v29;
    uint64_t v22 = (uint64_t)v5;
    uint64_t v23 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.TwoKey;
  }

  else
  {
    sub_1003F600C((uint64_t)v14, (uint64_t)v9, type metadata accessor for IDSGroupEncryptionKeyMaterialController.OneKey);
    uint64_t v29 = 0LL;
    unint64_t v30 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(28LL);
    v24._countAndFlagsBits = 0x2079656B20656E6FLL;
    v24._dispatch_queue_t object = (void *)0xEE0020666F207361LL;
    String.append(_:)(v24);
    double v26 = Date.timeIntervalSinceNow.getter(v25);
    Double.write<A>(to:)( &v29,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation,  -v26);
    v27._countAndFlagsBits = 0x73646E6F63657320LL;
    v27._dispatch_queue_t object = (void *)0xEC0000006F676120LL;
    String.append(_:)(v27);
    uint64_t v21 = v29;
    uint64_t v22 = (uint64_t)v9;
    uint64_t v23 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.OneKey;
  }

  sub_1003F6050(v22, v23);
  return v21;
}

uint64_t sub_1003F64F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.KeyState(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for IDSGroupEncryptionKeyMaterialController.State(uint64_t a1)
{
  return sub_100402020( a1,  qword_1009C0F80,  (uint64_t)&nominal type descriptor for IDSGroupEncryptionKeyMaterialController.State);
}

uint64_t sub_1003F6548@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.KeyState(0LL);
  swift_storeEnumTagMultiPayload(a1, v2, 2LL);
  __n128 v3 = (int *)type metadata accessor for IDSGroupEncryptionKeyMaterialController.State(0LL);
  uint64_t v4 = a1 + v3[5];
  *(void *)uint64_t v4 = 0LL;
  *(void *)(v4 + _Block_object_dispose(va, 8) = 0LL;
  *(_BYTE *)(v4 + 16) = 1;
  *(_BYTE *)(a1 + v3[6]) = 0;
  uint64_t v5 = a1 + v3[7];
  *(void *)(v5 + _Block_object_dispose(va, 8) = 0LL;
  swift_unknownObjectWeakInit(v5, 0LL);
  *(void *)(a1 + v3[8]) = 0LL;
  uint64_t v6 = v3[9];
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000LL) != 0)
  {
    if (_CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
    {
      sub_1004016F4((uint64_t)_swiftEmptyArrayStorage);
      *(void *)(a1 + v6) = v9;
    }

    else
    {
      __n128 v7 = &_swiftEmptySetSingleton;
      *(void *)(a1 + v6) = &_swiftEmptySetSingleton;
    }

    if (_CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage)) {
      sub_1004016F4((uint64_t)_swiftEmptyArrayStorage);
    }
    else {
      __n128 v7 = &_swiftEmptySetSingleton;
    }
  }

  else
  {
    __n128 v7 = &_swiftEmptySetSingleton;
    *(void *)(a1 + v6) = &_swiftEmptySetSingleton;
  }

uint64_t sub_1003F6694()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionKeyMaterialController_state);
  uint64_t v2 = *(void *)(class metadata base offset for ManagedBuffer + *(void *)v1 + 16LL);
  __n128 v3 = (os_unfair_lock_s *)(v1 + ((*(unsigned int *)(*(void *)v1 + 48LL) + 3LL) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v3);
  uint64_t v4 = v1 + *(int *)(type metadata accessor for IDSGroupEncryptionKeyMaterialController.State(0LL) + 28) + v2;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v4);
  os_unfair_lock_unlock(v3);
  return Strong;
}

void sub_1003F6724(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(v2 + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionKeyMaterialController_state);
  uint64_t v5 = *(void *)(class metadata base offset for ManagedBuffer + *(void *)v4 + 16LL);
  uint64_t v6 = (os_unfair_lock_s *)(v4 + ((*(unsigned int *)(*(void *)v4 + 48LL) + 3LL) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v6);
  uint64_t v7 = v4 + *(int *)(type metadata accessor for IDSGroupEncryptionKeyMaterialController.State(0LL) + 28) + v5;
  *(void *)(v7 + _Block_object_dispose(va, 8) = a2;
  swift_unknownObjectWeakAssign(v7, a1);
  os_unfair_lock_unlock(v6);
}

void (*sub_1003F67BC(void *a1))(void ***a1, char a2)
{
  __n128 v3 = malloc(0x28uLL);
  *a1 = v3;
  uint64_t v4 = *(uint64_t **)(v1 + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionKeyMaterialController_state);
  v3[2] = v4;
  uint64_t v5 = *v4;
  uint64_t v6 = *(void *)(class metadata base offset for ManagedBuffer + *v4 + 16);
  void v3[3] = v6;
  uint64_t v7 = *(unsigned int *)(v5 + 48);
  *((_DWORD *)v3 + _Block_object_dispose(va, 8) = v7;
  uint64_t v8 = (os_unfair_lock_s *)((char *)v4 + ((v7 + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v8);
  uint64_t v9 = (char *)v4 + *(int *)(type metadata accessor for IDSGroupEncryptionKeyMaterialController.State(0LL) + 28) + v6;
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v9);
  uint64_t v11 = *((void *)v9 + 1);
  os_unfair_lock_unlock(v8);
  void *v3 = Strong;
  v3[1] = v11;
  return sub_1003F6874;
}

void sub_1003F6874(void ***a1, char a2)
{
  uint64_t v2 = *a1;
  __n128 v3 = **a1;
  uint64_t v4 = (*a1)[1];
  uint64_t v5 = (char *)(*a1)[2];
  uint64_t v6 = (*((unsigned int *)*a1 + 8) + 3LL) & 0x1FFFFFFFCLL;
  uint64_t v7 = (os_unfair_lock_s *)&v5[v6];
  uint64_t v8 = (char *)(*a1)[3] + (void)v5;
  if ((a2 & 1) != 0)
  {
    id v9 = v3;
    os_unfair_lock_lock(v7);
    uint64_t v10 = &v8[*(int *)(type metadata accessor for IDSGroupEncryptionKeyMaterialController.State(0LL) + 28)];
    *((void *)v10 + 1) = v4;
    swift_unknownObjectWeakAssign(v10, v9);
    os_unfair_lock_unlock(v7);
  }

  else
  {
    os_unfair_lock_lock((os_unfair_lock_t)&v5[v6]);
    uint64_t v11 = &v8[*(int *)(type metadata accessor for IDSGroupEncryptionKeyMaterialController.State(0LL) + 28)];
    *((void *)v11 + 1) = v4;
    swift_unknownObjectWeakAssign(v11, v3);
    os_unfair_lock_unlock(v7);
  }

  free(v2);
}

uint64_t sub_1003F6944()
{
  uint64_t v1 = (unsigned __int8 *)(v0
                         + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionKeyMaterialController_shortKIEnabled);
  swift_beginAccess( v0 + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionKeyMaterialController_shortKIEnabled,  v3,  0LL,  0LL);
  return *v1;
}

uint64_t sub_1003F6988(char a1)
{
  __n128 v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionKeyMaterialController_shortKIEnabled);
  uint64_t result = swift_beginAccess(v3, v5, 1LL, 0LL);
  _BYTE *v3 = a1;
  return result;
}

void *sub_1003F69D0(uint64_t a1)
{
  return &j__swift_endAccess;
}

uint64_t sub_1003F6A18()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionKeyMaterialController_state);
  uint64_t v2 = *(void *)(class metadata base offset for ManagedBuffer + *(void *)v1 + 16LL);
  __n128 v3 = (os_unfair_lock_s *)(v1 + ((*(unsigned int *)(*(void *)v1 + 48LL) + 3LL) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v3);
  uint64_t v4 = *(void *)(v1 + *(int *)(type metadata accessor for IDSGroupEncryptionKeyMaterialController.State(0LL) + 20) + v2);
  os_unfair_lock_unlock(v3);
  return v4;
}

void sub_1003F6AA4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v7 = *(void *)(v3 + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionKeyMaterialController_state);
  uint64_t v8 = v7 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v7 + 16LL);
  id v9 = (os_unfair_lock_s *)(v7 + ((*(unsigned int *)(*(void *)v7 + 48LL) + 3LL) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v9);
  uint64_t v10 = v8 + *(int *)(type metadata accessor for IDSGroupEncryptionKeyMaterialController.State(0LL) + 20);
  *(void *)uint64_t v10 = a1;
  *(void *)(v10 + _Block_object_dispose(va, 8) = a2;
  *(_BYTE *)(v10 + 16) = a3 & 1;
  sub_1003F7C80(v8);
  os_unfair_lock_unlock(v9);
}

void (*sub_1003F6B40(void *a1))(uint64_t **a1)
{
  uint64_t v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = *(uint64_t **)(v1 + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionKeyMaterialController_state);
  void v3[3] = v1;
  void v3[4] = v4;
  uint64_t v5 = *v4;
  uint64_t v6 = *(void *)(class metadata base offset for ManagedBuffer + *v4 + 16);
  void v3[5] = v6;
  uint64_t v7 = *(unsigned int *)(v5 + 48);
  *((_DWORD *)v3 + 5) = v7;
  uint64_t v8 = (os_unfair_lock_s *)((char *)v4 + ((v7 + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v8);
  id v9 = (char *)v4 + *(int *)(type metadata accessor for IDSGroupEncryptionKeyMaterialController.State(0LL) + 20) + v6;
  uint64_t v10 = *(void *)v9;
  uint64_t v11 = *((void *)v9 + 1);
  char v12 = v9[16];
  os_unfair_lock_unlock(v8);
  void *v3 = v10;
  v3[1] = v11;
  *((_BYTE *)v3 + 16) = v12;
  return sub_1003F6BFC;
}

void sub_1003F6BFC(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (*a1)[4];
  uint64_t v3 = (os_unfair_lock_s *)(v2 + ((*((unsigned int *)*a1 + 5) + 3LL) & 0x1FFFFFFFCLL));
  uint64_t v4 = v2 + (*a1)[5];
  uint64_t v5 = **a1;
  uint64_t v6 = (*a1)[1];
  char v7 = *((_BYTE *)*a1 + 16);
  os_unfair_lock_lock(v3);
  uint64_t v8 = v4 + *(int *)(type metadata accessor for IDSGroupEncryptionKeyMaterialController.State(0LL) + 20);
  *(void *)uint64_t v8 = v5;
  *(void *)(v8 + _Block_object_dispose(va, 8) = v6;
  *(_BYTE *)(v8 + 16) = v7;
  sub_1003F7C80(v4);
  os_unfair_lock_unlock(v3);
  free(v1);
}

uint64_t sub_1003F6C88()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionKeyMaterialController_state);
  uint64_t v2 = v1 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v1 + 16LL);
  uint64_t v3 = (os_unfair_lock_s *)(v1 + ((*(unsigned int *)(*(void *)v1 + 48LL) + 3LL) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v3);
  uint64_t v4 = *(unsigned __int8 *)(v2
                          + *(int *)(type metadata accessor for IDSGroupEncryptionKeyMaterialController.State(0LL) + 24));
  os_unfair_lock_unlock(v3);
  return v4;
}

void sub_1003F6CFC(char a1)
{
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionKeyMaterialController_state);
  uint64_t v4 = v3 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v3 + 16LL);
  uint64_t v5 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(void *)v3 + 48LL) + 3LL) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v5);
  *(_BYTE *)(v4 + *(int *)(type metadata accessor for IDSGroupEncryptionKeyMaterialController.State(0LL) + objc_destroyWeak((id *)(v2 - 24)) = a1 & 1;
  sub_1003F886C(v4);
  os_unfair_lock_unlock(v5);
}

void (*sub_1003F6D80(uint64_t a1))(uint64_t a1)
{
  uint64_t v3 = *(uint64_t **)(v1 + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionKeyMaterialController_state);
  *(void *)a1 = v1;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v3;
  uint64_t v4 = *v3;
  uint64_t v5 = *(void *)(class metadata base offset for ManagedBuffer + *v3 + 16);
  *(void *)(a1 + 16) = v5;
  uint64_t v6 = (char *)v3 + v5;
  uint64_t v7 = *(unsigned int *)(v4 + 48);
  *(_DWORD *)(a1 + 24) = v7;
  uint64_t v8 = (os_unfair_lock_s *)((char *)v3 + ((v7 + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v8);
  LOBYTE(v6) = v6[*(int *)(type metadata accessor for IDSGroupEncryptionKeyMaterialController.State(0LL) + 24)];
  os_unfair_lock_unlock(v8);
  *(_BYTE *)(a1 + 2_Block_object_dispose(va, 8) = (_BYTE)v6;
  return sub_1003F6E18;
}

void sub_1003F6E18(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = (os_unfair_lock_s *)(v1 + ((*(unsigned int *)(a1 + 24) + 3LL) & 0x1FFFFFFFCLL));
  uint64_t v3 = v1 + *(void *)(a1 + 16);
  char v4 = *(_BYTE *)(a1 + 28);
  os_unfair_lock_lock(v2);
  *(_BYTE *)(v3 + *(int *)(type metadata accessor for IDSGroupEncryptionKeyMaterialController.State(0LL) + objc_destroyWeak((id *)(v2 - 24)) = v4;
  sub_1003F886C(v3);
  os_unfair_lock_unlock(v2);
}

uint64_t sub_1003F6E7C()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionKeyMaterialController_state);
  uint64_t v2 = v1 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v1 + 16LL);
  uint64_t v3 = (os_unfair_lock_s *)(v1 + ((*(unsigned int *)(*(void *)v1 + 48LL) + 3LL) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v3);
  uint64_t v4 = *(void *)(v2 + *(int *)(type metadata accessor for IDSGroupEncryptionKeyMaterialController.State(0LL) + 32));
  os_unfair_lock_unlock(v3);
  return v4;
}

void sub_1003F6EF0(uint64_t a1)
{
  uint64_t v3 = *(void *)((char *)v1 + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionKeyMaterialController_state);
  uint64_t v4 = v3 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v3 + 16LL);
  uint64_t v5 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(void *)v3 + 48LL) + 3LL) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v5);
  sub_1003F6F68(v4, a1, v1);
  os_unfair_lock_unlock(v5);
}

uint64_t sub_1003F6F68(uint64_t a1, uint64_t a2, void *a3)
{
  id v50 = a3;
  uint64_t v5 = (int *)type metadata accessor for IDSGroupEncryptionKeyMaterialController.TwoKey(0LL);
  __chkstk_darwin(v6, v7);
  id v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.OneKey(0LL);
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.KeyState(0LL);
  __chkstk_darwin(v16, v17);
  double v19 = (char *)&v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v20, v21);
  uint64_t v23 = (char *)&v50 - v22;
  uint64_t v24 = *(int *)(type metadata accessor for IDSGroupEncryptionKeyMaterialController.State(0LL) + 32);
  uint64_t v25 = *(void *)(a1 + v24);
  if (v25) {
    BOOL v26 = v25 == a2;
  }
  else {
    BOOL v26 = 1;
  }
  int v27 = !v26;
  int v51 = v27;
  *(void *)(a1 + v24) = a2;
  sub_1003F5FC8(a1, (uint64_t)v23, type metadata accessor for IDSGroupEncryptionKeyMaterialController.KeyState);
  uint64_t result = swift_getEnumCaseMultiPayload(v23, v15);
  uint64_t v29 = result;
  if ((_DWORD)result)
  {
    if ((_DWORD)result != 1) {
      goto LABEL_12;
    }
    sub_1003F6050(a1, type metadata accessor for IDSGroupEncryptionKeyMaterialController.KeyState);
    sub_1003F600C((uint64_t)v23, (uint64_t)v9, type metadata accessor for IDSGroupEncryptionKeyMaterialController.TwoKey);
    uint64_t v30 = v5[5];
    id v31 = &v19[v30];
    sub_1003F5FC8( (uint64_t)&v9[v30],  (uint64_t)&v19[v30],  type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    uint64_t v32 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
    uint64_t v33 = &v31[*(int *)(v32 + 52)];
    *(void *)uint64_t v33 = a2;
    v33[8] = 0;
    uint64_t v34 = v5[6];
    double v35 = &v19[v34];
    sub_1003F5FC8( (uint64_t)&v9[v34],  (uint64_t)&v19[v34],  type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    id v36 = &v35[*(int *)(v32 + 52)];
    *(void *)id v36 = a2;
    v36[8] = 0;
    sub_1003F5C6C((uint64_t)v9, (uint64_t)v19);
    uint64_t v37 = v5[7];
    id v38 = &v9[v37];
    __int16 v39 = &v19[v37];
    uint64_t v40 = type metadata accessor for Date(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 16LL))(v39, v38, v40);
    uint64_t v41 = (uint64_t)v9;
    id v42 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.TwoKey;
  }

  else
  {
    sub_1003F6050(a1, type metadata accessor for IDSGroupEncryptionKeyMaterialController.KeyState);
    sub_1003F600C((uint64_t)v23, (uint64_t)v14, type metadata accessor for IDSGroupEncryptionKeyMaterialController.OneKey);
    uint64_t v43 = *(int *)(v10 + 20);
    uint64_t v44 = &v19[v43];
    sub_1003F5FC8( (uint64_t)&v14[v43],  (uint64_t)&v19[v43],  type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    uint64_t v45 = &v44[*(int *)(type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL) + 52)];
    *(void *)uint64_t v45 = a2;
    v45[8] = 0;
    sub_1003F5C6C((uint64_t)v14, (uint64_t)v19);
    uint64_t v46 = *(int *)(v10 + 24);
    __int128 v47 = &v14[v46];
    __int128 v48 = &v19[v46];
    uint64_t v49 = type metadata accessor for Date(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v49 - 8) + 16LL))(v48, v47, v49);
    uint64_t v41 = (uint64_t)v14;
    id v42 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.OneKey;
  }

  sub_1003F6050(v41, v42);
  swift_storeEnumTagMultiPayload(v19, v15, v29);
  uint64_t result = sub_1003F600C((uint64_t)v19, a1, type metadata accessor for IDSGroupEncryptionKeyMaterialController.KeyState);
LABEL_12:
  if (v51) {
    return (*(uint64_t (**)(uint64_t))((swift_isaMask & *v50) + 0x188LL))(a1);
  }
  return result;
}

void (*sub_1003F7290(void *a1))(uint64_t **a1)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  uint64_t v4 = *(uint64_t **)(v1 + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionKeyMaterialController_state);
  v3[1] = v1;
  v3[2] = v4;
  uint64_t v5 = *v4;
  uint64_t v6 = *(void *)(class metadata base offset for ManagedBuffer + *v4 + 16);
  void v3[3] = v6;
  __n128 v7 = (char *)v4 + v6;
  uint64_t v8 = *(unsigned int *)(v5 + 48);
  *((_DWORD *)v3 + _Block_object_dispose(va, 8) = v8;
  id v9 = (os_unfair_lock_s *)((char *)v4 + ((v8 + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v9);
  uint64_t v10 = *(void *)&v7[*(int *)(type metadata accessor for IDSGroupEncryptionKeyMaterialController.State(0LL) + 32)];
  os_unfair_lock_unlock(v9);
  void *v3 = v10;
  return sub_1003F7338;
}

void sub_1003F7338(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (*a1)[2];
  uint64_t v3 = (os_unfair_lock_s *)(v2 + ((*((unsigned int *)*a1 + 8) + 3LL) & 0x1FFFFFFFCLL));
  uint64_t v4 = v2 + (*a1)[3];
  uint64_t v6 = **a1;
  uint64_t v5 = (void *)(*a1)[1];
  os_unfair_lock_lock(v3);
  sub_1003F6F68(v4, v6, v5);
  os_unfair_lock_unlock(v3);
  free(v1);
}

void sub_1003F73A4()
{
}

uint64_t sub_1003F73B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __n128 v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for IDSGroupEncryptionKeyMaterialController.OneKey(0LL);
  __chkstk_darwin(v8, v9);
  __n128 v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.KeyState(0LL);
  __chkstk_darwin(v13, v14);
  __n128 v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1003F5FC8(a1, (uint64_t)v16, v17);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v16, v12);
  if (!EnumCaseMultiPayload)
  {
    sub_1003F600C((uint64_t)v16, (uint64_t)v11, type metadata accessor for IDSGroupEncryptionKeyMaterialController.OneKey);
    sub_1003F5C6C((uint64_t)v11, a2);
    uint64_t v19 = (uint64_t)v11;
    __n128 v20 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.OneKey;
    return sub_1003F6050(v19, v20);
  }

  if (EnumCaseMultiPayload == 1)
  {
    sub_1003F600C((uint64_t)v16, (uint64_t)v7, type metadata accessor for IDSGroupEncryptionKeyMaterialController.TwoKey);
    sub_1003F5C6C((uint64_t)v7, a2);
    uint64_t v19 = (uint64_t)v7;
    __n128 v20 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.TwoKey;
    return sub_1003F6050(v19, v20);
  }

  uint64_t v22 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56LL))( a2,  1LL,  1LL,  v22);
}

void sub_1003F7538()
{
}

uint64_t sub_1003F7544@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.TwoKey(0LL);
  __chkstk_darwin(v5, v6);
  __n128 v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.OneKey(0LL);
  __chkstk_darwin(v10, v11);
  __n128 v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.KeyState(0LL);
  __chkstk_darwin(v15, v16);
  uint64_t v18 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1003F5FC8(a1, (uint64_t)v18, v19);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v18, v14);
  if (!EnumCaseMultiPayload)
  {
    sub_1003F600C((uint64_t)v18, (uint64_t)v13, type metadata accessor for IDSGroupEncryptionKeyMaterialController.OneKey);
    sub_1003F5FC8((uint64_t)&v13[*(int *)(v9 + 20)], a2, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    uint64_t v21 = (uint64_t)v13;
    uint64_t v22 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.OneKey;
    goto LABEL_5;
  }

  if (EnumCaseMultiPayload == 1)
  {
    sub_1003F600C((uint64_t)v18, (uint64_t)v8, type metadata accessor for IDSGroupEncryptionKeyMaterialController.TwoKey);
    sub_1003F5FC8((uint64_t)&v8[*(int *)(v4 + 20)], a2, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    uint64_t v21 = (uint64_t)v8;
    uint64_t v22 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.TwoKey;
LABEL_5:
    sub_1003F6050(v21, v22);
    uint64_t v23 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56LL))( a2,  0LL,  1LL,  v23);
  }

  uint64_t v25 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56LL))( a2,  1LL,  1LL,  v25);
}

void sub_1003F7710()
{
}

void sub_1003F771C(void (*a1)(uint64_t))
{
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionKeyMaterialController_state);
  uint64_t v4 = v3 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v3 + 16LL);
  __n128 v5 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(void *)v3 + 48LL) + 3LL) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v5);
  a1(v4);
  os_unfair_lock_unlock(v5);
}

uint64_t sub_1003F7794@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.TwoKey(0LL);
  __chkstk_darwin(v5, v6);
  __n128 v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.KeyState(0LL);
  __chkstk_darwin(v10, v11);
  __n128 v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1003F5FC8(a1, (uint64_t)v13, v14);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v13, v9);
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      sub_1003F600C( (uint64_t)v13,  (uint64_t)v8,  type metadata accessor for IDSGroupEncryptionKeyMaterialController.TwoKey);
      sub_1003F5FC8( (uint64_t)&v8[*(int *)(v4 + 24)],  a2,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      sub_1003F6050((uint64_t)v8, type metadata accessor for IDSGroupEncryptionKeyMaterialController.TwoKey);
      uint64_t v16 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL))( a2,  0LL,  1LL,  v16);
    }

    else
    {
      uint64_t v19 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL))( a2,  1LL,  1LL,  v19);
    }
  }

  else
  {
    uint64_t v18 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))(a2, 1LL, 1LL, v18);
    return sub_1003F6050((uint64_t)v13, type metadata accessor for IDSGroupEncryptionKeyMaterialController.KeyState);
  }

uint64_t sub_1003F791C()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionKeyMaterialController_state);
  uint64_t v2 = v1 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v1 + 16LL);
  uint64_t v3 = (os_unfair_lock_s *)(v1 + ((*(unsigned int *)(*(void *)v1 + 48LL) + 3LL) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v3);
  uint64_t v4 = *(void *)(v2 + *(int *)(type metadata accessor for IDSGroupEncryptionKeyMaterialController.State(0LL) + 60));
  os_unfair_lock_unlock(v3);
  return v4;
}

char *sub_1003F7990( void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, char a8, char a9, char a10, char a11, char a12)
{
  int v17 = a8 & 1;
  id v18 = objc_allocWithZone(v12);
  uint64_t v19 = sub_100401B10((uint64_t)a1, a2, a3, a4, a5, a6, a7, v17, a9 & 1, a10, a11, a12);

  return v19;
}

id sub_1003F7A48()
{
  uint64_t v1 = *(void *)&v0[OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionKeyMaterialController_state];
  uint64_t v2 = v1 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v1 + 16LL);
  uint64_t v3 = (os_unfair_lock_s *)(v1 + ((*(unsigned int *)(*(void *)v1 + 48LL) + 3LL) & 0x1FFFFFFFCLL));
  swift_retain(v1);
  os_unfair_lock_lock(v3);
  sub_1003F7AEC(v2);
  os_unfair_lock_unlock(v3);
  swift_release(v1);
  v5.receiver = v0;
  v5.super_class = (Class)type metadata accessor for IDSGroupEncryptionKeyMaterialController(0LL);
  return objc_msgSendSuper2(&v5, "dealloc");
}

uint64_t sub_1003F7AEC(uint64_t a1)
{
  uint64_t result = type metadata accessor for IDSGroupEncryptionKeyMaterialController.State(0LL);
  uint64_t v3 = *(int *)(result + 44);
  uint64_t v4 = *(void *)(a1 + v3);
  if (v4)
  {
    uint64_t v5 = swift_retain(*(void *)(a1 + v3));
    dispatch thunk of DispatchWorkItem.cancel()(v5);
    uint64_t result = swift_release_n(v4, 2LL);
    *(void *)(a1 + v3) = 0LL;
  }

  return result;
}

void sub_1003F7C80(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v78 = *(void *)(v2 - 8);
  uint64_t v79 = v2;
  __chkstk_darwin(v3, v4);
  __int128 v77 = &v70[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v80 = type metadata accessor for DispatchTime(0LL);
  uint64_t v75 = *(void *)(v80 - 8);
  __chkstk_darwin(v6, v7);
  uint64_t v82 = &v70[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v9, v10);
  __int128 v76 = &v70[-v11];
  uint64_t v12 = type metadata accessor for DispatchWorkItemFlags(0LL);
  __chkstk_darwin(v13, v14);
  uint64_t v81 = &v70[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  sub_1003F5CB4(&qword_1009BC130);
  __chkstk_darwin(v16, v17);
  uint64_t v19 = &v70[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v20 = type metadata accessor for Date(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v22, v23);
  uint64_t v25 = &v70[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v26, v27);
  __int16 v83 = &v70[-v28];
  uint64_t v29 = (int *)type metadata accessor for IDSGroupEncryptionKeyMaterialController.State(0LL);
  uint64_t v30 = v29[11];
  uint64_t v31 = *(void *)(a1 + v30);
  if (v31)
  {
    uint64_t v32 = swift_retain(*(void *)(a1 + v30));
    dispatch thunk of DispatchWorkItem.cancel()(v32);
    swift_release_n(v31, 2LL);
    *(void *)(a1 + v30) = 0LL;
  }

  uint64_t v33 = a1 + v29[7];
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v33);
  if (Strong)
  {
    double v35 = (void *)Strong;
    uint64_t v36 = *(void *)(v33 + 8);
    uint64_t ObjectType = swift_getObjectType(Strong);
    LOBYTE(v36) = (*(uint64_t (**)(uint64_t, uint64_t))(v36 + 8))(ObjectType, v36);

    if ((v36 & 1) != 0)
    {
      sub_1003F5D64(*(double *)(a1 + v29[5]), *(double *)(a1 + v29[5] + 8), *(_BYTE *)(a1 + v29[5] + 16), (uint64_t)v19);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v21 + 48))(v19, 1LL, v20) == 1)
      {
        sub_10040A274((uint64_t)v19, &qword_1009BC130);
        return;
      }

      uint64_t v41 = v83;
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v21 + 32))(v83, v19, v20);
      uint64_t v42 = (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v21 + 16))(v25, v41, v20);
      uint64_t v43 = (os_log_s *)Logger.logObject.getter(v42);
      os_log_type_t v44 = static os_log_type_t.default.getter();
      int v45 = v44;
      if (os_log_type_enabled(v43, v44))
      {
        uint64_t v46 = swift_slowAlloc(22LL, -1LL);
        uint64_t v73 = swift_slowAlloc(32LL, -1LL);
        aBlock[0] = v73;
        *(_DWORD *)uint64_t v46 = 136315394;
        os_log_t v72 = v43;
        uint64_t v87 = sub_1003FFBB0(0xD00000000000001ELL, 0x800000010083E2A0LL, aBlock);
        int v71 = v45;
        uint64_t v47 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, &v88, v46 + 4, v46 + 12);
        *(_WORD *)(v46 + 12) = 2048;
        uint64_t v87 = Date.timeIntervalSinceNow.getter(v47);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, &v88, v46 + 14, v46 + 22);
        __int128 v74 = *(void (**)(_BYTE *, uint64_t))(v21 + 8);
        v74(v25, v20);
        os_log_t v48 = v72;
        _os_log_impl( (void *)&_mh_execute_header,  v72,  (os_log_type_t)v71,  "%s: scheduling roll task after %f seconds",  (uint8_t *)v46,  0x16u);
        uint64_t v49 = v73;
        swift_arrayDestroy(v73, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v49, -1LL, -1LL);
        swift_slowDealloc(v46, -1LL, -1LL);
      }

      else
      {

        __int128 v74 = *(void (**)(_BYTE *, uint64_t))(v21 + 8);
        v74(v25, v20);
      }

      uint64_t v50 = swift_allocObject(&unk_100905140, 24LL, 7LL);
      swift_unknownObjectWeakInit(v50 + 16, v84);
      aBlock[4] = (uint64_t)sub_10040A360;
      uint64_t v86 = v50;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = (uint64_t)sub_1003F8400;
      aBlock[3] = (uint64_t)&unk_100905158;
      int v51 = _Block_copy(aBlock);
      uint64_t v87 = (uint64_t)&_swiftEmptyArrayStorage;
      uint64_t v52 = sub_10040A2B0( (unint64_t *)&unk_1009BAC40,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      swift_retain(v50);
      uint64_t v53 = sub_1003F5CB4((uint64_t *)&unk_1009B9870);
      uint64_t v54 = sub_1004021DC((unint64_t *)&qword_1009BAC50, (uint64_t *)&unk_1009B9870);
      id v55 = v81;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v87, v53, v54, v12, v52);
      uint64_t v56 = type metadata accessor for DispatchWorkItem(0LL);
      swift_allocObject(v56, *(unsigned int *)(v56 + 48), *(unsigned __int16 *)(v56 + 52));
      uint64_t v57 = DispatchWorkItem.init(flags:block:)(v55, v51);
      uint64_t v58 = v86;
      swift_release(v50);
      swift_release(v58);
      uint64_t v59 = *(void *)(a1 + v30);
      swift_retain(v57);
      uint64_t v60 = swift_release(v59);
      *(void *)(a1 + v30) = v57;
      uint64_t v61 = v82;
      uint64_t v62 = static DispatchTime.now()(v60);
      double v63 = Date.timeIntervalSinceNow.getter(v62) * 1000.0;
      if ((~*(void *)&v63 & 0x7FF0000000000000LL) != 0)
      {
        if (v63 > -9.22337204e18)
        {
          if (v63 < 9.22337204e18)
          {
            uint64_t v65 = v77;
            uint64_t v64 = v78;
            void *v77 = (uint64_t)v63;
            uint64_t v66 = v79;
            (*(void (**)(void *, void, uint64_t))(v64 + 104))( v65,  enum case for DispatchTimeInterval.milliseconds(_:),  v79);
            __int128 v67 = v76;
            DispatchTime.advanced(by:)(v65);
            (*(void (**)(void *, uint64_t))(v64 + 8))(v65, v66);
            __int128 v68 = *(void (**)(_BYTE *, uint64_t))(v75 + 8);
            uint64_t v69 = v80;
            v68(v61, v80);
            OS_dispatch_queue.asyncAfter(deadline:execute:)(v67, v57);
            swift_release(v57);
            v68(v67, v69);
            v74(v83, v20);
            return;
          }

          goto LABEL_20;
        }
      }

      else
      {
        __break(1u);
      }

      __break(1u);
LABEL_20:
      __break(1u);
      return;
    }
  }

  int v84 = (os_log_s *)Logger.logObject.getter(Strong);
  os_log_type_t v38 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v84, v38))
  {
    __int16 v39 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v40 = swift_slowAlloc(32LL, -1LL);
    aBlock[0] = v40;
    *(_DWORD *)__int16 v39 = 136315138;
    uint64_t v87 = sub_1003FFBB0(0xD00000000000001ELL, 0x800000010083E2A0LL, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, &v88, v39 + 4, v39 + 12);
    _os_log_impl( (void *)&_mh_execute_header,  v84,  v38,  "%s: not scheduling roll task: session is not active",  v39,  0xCu);
    swift_arrayDestroy(v40, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v40, -1LL, -1LL);
    swift_slowDealloc(v39, -1LL, -1LL);
  }
}

void sub_1003F8404(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = a1;
  uint64_t v4 = swift_bridgeObjectRetain_n(a1, 2LL);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc(22LL, -1LL);
    uint64_t v8 = (void *)swift_slowAlloc(64LL, -1LL);
    uint64_t v46 = v8;
    *(_DWORD *)uint64_t v7 = 136315394;
    int v45 = (void *)sub_1003FFBB0(0xD000000000000017LL, 0x800000010083E0F0LL, (uint64_t *)&v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v7 + 4, v7 + 12);
    *(_WORD *)(v7 + 12) = 2080;
    uint64_t v9 = type metadata accessor for IDSGroupEncryptionControllerMember();
    uint64_t v10 = sub_10040A2B0( (unint64_t *)&qword_1009B8E30,  (uint64_t (*)(uint64_t))type metadata accessor for IDSGroupEncryptionControllerMember,  (uint64_t)&protocol conformance descriptor for NSObject);
    uint64_t v11 = swift_bridgeObjectRetain(v3);
    uint64_t v12 = Set.description.getter(v11, v9, v10);
    unint64_t v14 = v13;
    swift_bridgeObjectRelease(v3);
    int v45 = (void *)sub_1003FFBB0(v12, v14, (uint64_t *)&v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v7 + 14, v7 + 22);
    swift_bridgeObjectRelease_n(v3, 2LL);
    swift_bridgeObjectRelease(v14);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%s: %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy(v8, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(v3, 2LL);
  }

  uint64_t v15 = *(void *)(v2 + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionKeyMaterialController_state);
  uint64_t v16 = v15 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v15 + 16LL);
  __n128 v17 = (os_unfair_lock_s *)(v15 + ((*(unsigned int *)(*(void *)v15 + 48LL) + 3LL) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v17);
  uint64_t v18 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.State(0LL);
  if ((*(_BYTE *)(v16 + *(int *)(v18 + 24)) & 1) != 0)
  {
    if ((v3 & 0xC000000000000001LL) != 0)
    {
      uint64_t v46 = &_swiftEmptySetSingleton;
      if (v3 < 0) {
        uint64_t v19 = v3;
      }
      else {
        uint64_t v19 = v3 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v3);
      uint64_t v20 = __CocoaSet.makeIterator()(v19);
      uint64_t v21 = __CocoaSet.Iterator.next()();
      if (v21)
      {
        uint64_t v22 = v21;
        uint64_t v43 = v17;
        uint64_t v23 = type metadata accessor for IDSGroupEncryptionControllerMember();
        do
        {
          uint64_t v44 = v22;
          uint64_t v24 = swift_dynamicCast(&v45, &v44, (char *)&type metadata for Swift.AnyObject + 8, v23, 7LL);
          char v25 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v45) + 0x80LL))(v24);
          __n128 v26 = v45;
          if ((v25 & 1) != 0)
          {
          }

          else
          {
            __n128 v27 = v46;
            unint64_t v28 = v46[2];
            if (v46[3] <= v28)
            {
              sub_1004001F0(v28 + 1);
              __n128 v27 = v46;
            }

            Swift::Int v29 = NSObject._rawHashValue(seed:)(v27[5]);
            uint64_t v30 = (char *)(v27 + 7);
            uint64_t v31 = -1LL << *((_BYTE *)v27 + 32);
            unint64_t v32 = v29 & ~v31;
            unint64_t v33 = v32 >> 6;
            if (((-1LL << v32) & ~v27[(v32 >> 6) + 7]) != 0)
            {
              unint64_t v34 = __clz(__rbit64((-1LL << v32) & ~v27[(v32 >> 6) + 7])) | v32 & 0x7FFFFFFFFFFFFFC0LL;
            }

            else
            {
              char v35 = 0;
              unint64_t v36 = (unint64_t)(63 - v31) >> 6;
              do
              {
                if (++v33 == v36 && (v35 & 1) != 0)
                {
                  __break(1u);
                  return;
                }

                BOOL v37 = v33 == v36;
                if (v33 == v36) {
                  unint64_t v33 = 0LL;
                }
                v35 |= v37;
                uint64_t v38 = *(void *)&v30[8 * v33];
              }

              while (v38 == -1);
              unint64_t v34 = __clz(__rbit64(~v38)) + (v33 << 6);
            }

            *(void *)&v30[(v34 >> 3) & 0x1FFFFFFFFFFFFFF8LL] |= 1LL << v34;
            *(void *)(v27[6] + 8 * v34) = v26;
            ++v27[2];
          }

          uint64_t v22 = __CocoaSet.Iterator.next()();
        }

        while (v22);
        uint64_t v3 = (uint64_t)v46;
        __n128 v17 = v43;
      }

      else
      {
        uint64_t v3 = (uint64_t)&_swiftEmptySetSingleton;
      }

      swift_release(v20);
    }

    else
    {
      uint64_t v39 = swift_bridgeObjectRetain(v3);
      uint64_t v3 = sub_1004007EC(v39, v40, v41);
    }
  }

  else
  {
    swift_bridgeObjectRetain(v3);
  }

  uint64_t v42 = *(int *)(v18 + 40);
  swift_bridgeObjectRelease(*(void *)(v16 + v42));
  *(void *)(v16 + v42) = v3;
  sub_1003F886C(v16);
  os_unfair_lock_unlock(v17);
}

uint64_t sub_1003F886C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v32 = *(void *)(v10 - 8);
  uint64_t v33 = v10;
  uint64_t v13 = __chkstk_darwin(v11, v12);
  uint64_t v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v30 = v15;
    uint64_t v18 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v19 = swift_slowAlloc(32LL, -1LL);
    uint64_t v31 = v9;
    uint64_t v20 = v19;
    aBlock[0] = v19;
    *(_DWORD *)uint64_t v18 = 136315138;
    unint64_t v34 = (void *)sub_1003FFBB0(0xD000000000000012LL, 0x800000010083E240LL, aBlock);
    uint64_t v15 = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, aBlock, v18 + 4, v18 + 12);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "%s", v18, 0xCu);
    swift_arrayDestroy(v20, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v21 = v20;
    uint64_t v9 = v31;
    swift_slowDealloc(v21, -1LL, -1LL);
    swift_slowDealloc(v18, -1LL, -1LL);
  }

  uint64_t result = type metadata accessor for IDSGroupEncryptionKeyMaterialController.State(0LL);
  uint64_t v23 = *(int *)(result + 48);
  if ((*(_BYTE *)(a1 + v23) & 1) == 0)
  {
    *(_BYTE *)(a1 + v23) = 1;
    uint64_t v24 = swift_allocObject(&unk_100904FB0, 24LL, 7LL);
    *(void *)(v24 + 16) = v2;
    aBlock[4] = (uint64_t)sub_10040A140;
    uint64_t v36 = v24;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = (uint64_t)sub_1003F8400;
    aBlock[3] = (uint64_t)&unk_100904FC8;
    char v25 = _Block_copy(aBlock);
    static DispatchQoS.unspecified.getter(v2);
    unint64_t v34 = &_swiftEmptyArrayStorage;
    uint64_t v26 = sub_10040A2B0( (unint64_t *)&unk_1009BAC40,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v27 = sub_1003F5CB4((uint64_t *)&unk_1009B9870);
    uint64_t v28 = sub_1004021DC((unint64_t *)&qword_1009BAC50, (uint64_t *)&unk_1009B9870);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v34, v27, v28, v4, v26);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v15, v9, v25);
    _Block_release(v25);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v15, v33);
    return swift_release(v36);
  }

  return result;
}

uint64_t sub_1003F8B98(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

uint64_t sub_1003F8BC4(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v13, v14);
  uint64_t v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = *(void *)&v2[OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionKeyMaterialController_q];
  os_log_type_t v17 = (void *)swift_allocObject(&unk_100904CA0, 40LL, 7LL);
  v17[2] = v2;
  v17[3] = a1;
  v17[4] = a2;
  aBlock[4] = sub_100402080;
  uint64_t v28 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1003F8400;
  aBlock[3] = &unk_100904CB8;
  uint64_t v18 = _Block_copy(aBlock);
  uint64_t v19 = v2;
  uint64_t v20 = swift_retain(a2);
  static DispatchQoS.unspecified.getter(v20);
  uint64_t v26 = &_swiftEmptyArrayStorage;
  uint64_t v21 = sub_10040A2B0( (unint64_t *)&unk_1009BAC40,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v22 = sub_1003F5CB4((uint64_t *)&unk_1009B9870);
  uint64_t v23 = sub_1004021DC((unint64_t *)&qword_1009BAC50, (uint64_t *)&unk_1009B9870);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v22, v23, v5, v21);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v16, v10, v18);
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v16, v11);
  return swift_release(v28);
}

uint64_t sub_1003F8DBC()
{
  *(void *)(v1 + 16) = v0;
  return swift_task_switch(sub_1003F8DD4, 0LL, 0LL);
}

uint64_t sub_1003F8DD4()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = swift_task_alloc(32LL);
  v0[3] = v2;
  *(void *)(v2 + 16) = v1;
  uint64_t v3 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[4] = v3;
  void *v3 = v0;
  v3[1] = sub_1003F8E74;
  return withCheckedContinuation<A>(isolation:function:_:)();
}

uint64_t sub_1003F8E74()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 24LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 32LL));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_1003F8ED0, 0LL, 0LL);
}

uint64_t sub_1003F8ED0()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003F8ED8(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_1003F5CB4(&qword_1009BB480);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v7, v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))( (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v4);
  uint64_t v9 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v10 = (v9 + 16) & ~v9;
  uint64_t v11 = swift_allocObject(&unk_100905190, v10 + v6, v9 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))( v11 + v10,  (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v4);
  (*(void (**)(uint64_t (*)(), uint64_t))((swift_isaMask & *a2) + 0x150LL))(sub_10040A4B8, v11);
  return swift_release(v11);
}

void sub_1003F8FCC()
{
  uint64_t v1 = *(void *)((char *)v0 + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionKeyMaterialController_state);
  uint64_t v2 = v1 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v1 + 16LL);
  uint64_t v3 = (os_unfair_lock_s *)(v1 + ((*(unsigned int *)(*(void *)v1 + 48LL) + 3LL) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v3);
  (*(void (**)(uint64_t))((swift_isaMask & *v0) + 0x168LL))(v2);
  os_unfair_lock_unlock(v3);
}

uint64_t sub_1003F9050(uint64_t a1)
{
  uint64_t v2 = v1;
  type metadata accessor for IDSGroupEncryptionKeyMaterialController.OneKey(0LL);
  __chkstk_darwin(v4, v5);
  __n128 v7 = (char *)&v132 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.KeyState(0LL);
  __chkstk_darwin(v9, v10);
  uint64_t v143 = (uint64_t)&v132 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1003F5CB4(&qword_1009BC130);
  __chkstk_darwin(v12, v13);
  uint64_t v147 = (uint64_t)&v132 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for Date(0LL);
  uint64_t v148 = *(void *)(v15 - 8);
  uint64_t v149 = v15;
  __chkstk_darwin(v16, v17);
  uint64_t v144 = (char *)&v132 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v19, v20);
  int v145 = (char *)&v132 - v21;
  __chkstk_darwin(v22, v23);
  int v146 = (char *)&v132 - v24;
  uint64_t v25 = (int *)type metadata accessor for IDSGroupEncryptionKeyMaterialController.State(0LL);
  __chkstk_darwin(v26, v27);
  uint64_t v29 = (char *)&v132 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v30, v31);
  uint64_t v33 = (char *)&v132 - v32;
  uint64_t v36 = __chkstk_darwin(v34, v35);
  uint64_t v38 = (char *)&v132 - v37;
  uint64_t v39 = a1 + *(int *)(v36 + 28);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v39);
  if (Strong)
  {
    __n128 v41 = (void *)Strong;
    uint64_t v42 = *(void *)(v39 + 8);
    uint64_t ObjectType = swift_getObjectType(Strong);
    LOBYTE(v42) = (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 16))(ObjectType, v42);

    if ((v42 & 1) != 0)
    {
      sub_1003F5FC8(a1, (uint64_t)v38, type metadata accessor for IDSGroupEncryptionKeyMaterialController.State);
      uint64_t v44 = (char *)v2 + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionKeyMaterialController_l;
      sub_1003F5FC8( (uint64_t)v38,  (uint64_t)v33,  type metadata accessor for IDSGroupEncryptionKeyMaterialController.State);
      uint64_t v45 = sub_1003F5FC8( (uint64_t)v38,  (uint64_t)v29,  type metadata accessor for IDSGroupEncryptionKeyMaterialController.State);
      uint64_t v141 = v44;
      uint64_t v46 = (os_log_s *)Logger.logObject.getter(v45);
      os_log_type_t v47 = static os_log_type_t.default.getter();
      int v48 = v47;
      BOOL v49 = os_log_type_enabled(v46, v47);
      uint64_t v138 = v2;
      uint64_t v139 = v7;
      uint64_t v136 = v8;
      id v140 = v38;
      if (v49)
      {
        uint64_t v50 = swift_slowAlloc(32LL, -1LL);
        uint64_t v142 = (_BYTE *)swift_slowAlloc(96LL, -1LL);
        uint64_t v150 = (uint64_t)v142;
        *(_DWORD *)uint64_t v50 = 136315650;
        uint64_t v152 = sub_1003FFBB0(0x5F28657461647075LL, 0xEA0000000000293ALL, &v150);
        os_log_t v134 = (os_log_t)&v153;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, &v153, v50 + 4, v50 + 12);
        *(_WORD *)(v50 + 12) = 2080;
        uint64_t v133 = v50 + 14;
        uint64_t v51 = v25[9];
        os_log_t v137 = v46;
        uint64_t v52 = a1;
        uint64_t v53 = *(void *)&v33[v51];
        uint64_t v54 = type metadata accessor for IDSGroupEncryptionControllerMember();
        uint64_t v55 = sub_10040A2B0( (unint64_t *)&qword_1009B8E30,  (uint64_t (*)(uint64_t))type metadata accessor for IDSGroupEncryptionControllerMember,  (uint64_t)&protocol conformance descriptor for NSObject);
        uint64_t v56 = swift_bridgeObjectRetain(v53);
        uint64_t v57 = Set.description.getter(v56, v54, v55);
        LODWORD(v135) = v48;
        unint64_t v59 = v58;
        uint64_t v60 = v53;
        a1 = v52;
        swift_bridgeObjectRelease(v60);
        uint64_t v152 = sub_1003FFBB0(v57, v59, &v150);
        os_log_t v61 = v134;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, v134, v133, v50 + 22);
        swift_bridgeObjectRelease(v59);
        sub_1003F6050((uint64_t)v33, type metadata accessor for IDSGroupEncryptionKeyMaterialController.State);
        *(_WORD *)(v50 + 22) = 2080;
        uint64_t v62 = *(void *)&v29[v25[10]];
        uint64_t v63 = swift_bridgeObjectRetain(v62);
        uint64_t v64 = Set.description.getter(v63, v54, v55);
        unint64_t v66 = v65;
        swift_bridgeObjectRelease(v62);
        uint64_t v152 = sub_1003FFBB0(v64, v66, &v150);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, v61, v50 + 24, v50 + 32);
        swift_bridgeObjectRelease(v66);
        sub_1003F6050((uint64_t)v29, type metadata accessor for IDSGroupEncryptionKeyMaterialController.State);
        os_log_t v67 = v137;
        _os_log_impl( (void *)&_mh_execute_header,  v137,  (os_log_type_t)v135,  "%s: previous members: %s; new members: %s",
          (uint8_t *)v50,
          0x20u);
        uint64_t v68 = (uint64_t)v142;
        swift_arrayDestroy(v142, 3LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v68, -1LL, -1LL);
        swift_slowDealloc(v50, -1LL, -1LL);
      }

      else
      {

        sub_1003F6050((uint64_t)v33, type metadata accessor for IDSGroupEncryptionKeyMaterialController.State);
        sub_1003F6050((uint64_t)v29, type metadata accessor for IDSGroupEncryptionKeyMaterialController.State);
      }

      uint64_t v82 = v25[9];
      uint64_t v81 = (os_log_s *)v25[10];
      uint64_t v83 = *(void *)(a1 + v82);
      uint64_t v142 = (_BYTE *)a1;
      os_log_t v137 = v81;
      uint64_t v84 = *(void *)((char *)v81 + a1);
      swift_bridgeObjectRetain(v83);
      swift_bridgeObjectRetain(v84);
      uint64_t v85 = sub_10048873C(v83, v84);
      uint64_t v87 = v86;
      uint64_t v89 = v88;
      uint64_t v91 = v90;
      swift_bridgeObjectRelease(v83);
      swift_bridgeObjectRelease(v84);
      if ((v83 & 0xC000000000000001LL) != 0)
      {
        if (v83 < 0) {
          uint64_t v92 = v83;
        }
        else {
          uint64_t v92 = v83 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(v83);
        uint64_t v93 = __CocoaSet.count.getter(v92);
        swift_bridgeObjectRelease(v83);
      }

      else
      {
        uint64_t v93 = *(void *)(v83 + 16);
      }

      swift_bridgeObjectRetain(v84);
      swift_bridgeObjectRelease(v83);
      *(void *)&v142[v82] = v84;
      swift_bridgeObjectRetain_n(v85, 2LL);
      swift_bridgeObjectRetain_n(v87, 2LL);
      swift_bridgeObjectRetain_n(v89, 2LL);
      uint64_t v94 = swift_bridgeObjectRetain_n(v91, 2LL);
      uint64_t v95 = (os_log_s *)Logger.logObject.getter(v94);
      os_log_type_t v96 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v95, v96))
      {
        uint64_t v97 = swift_slowAlloc(22LL, -1LL);
        os_log_t v134 = v95;
        uint64_t v98 = v97;
        uint64_t v135 = swift_slowAlloc(64LL, -1LL);
        uint64_t v152 = v135;
        *(_DWORD *)uint64_t v98 = 136315394;
        uint64_t v150 = sub_1003FFBB0(0x5F28657461647075LL, 0xEA0000000000293ALL, &v152);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v150, v151, v98 + 4, v98 + 12);
        *(_WORD *)(v98 + 12) = 2080;
        uint64_t v150 = (uint64_t)v85;
        v151[0] = v87;
        v151[1] = v89;
        v151[2] = v91;
        unint64_t v99 = sub_100402224();
        uint64_t v100 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for IDSGroupMembershipDiff,  v99);
        unint64_t v102 = v101;
        uint64_t v150 = sub_1003FFBB0(v100, v101, &v152);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v150, v151, v98 + 14, v98 + 22);
        swift_bridgeObjectRelease(v91);
        swift_bridgeObjectRelease_n(v89, 2LL);
        swift_bridgeObjectRelease_n(v87, 2LL);
        swift_bridgeObjectRelease_n(v85, 2LL);
        swift_bridgeObjectRelease(v102);
        swift_bridgeObjectRelease(v91);
        os_log_t v103 = v134;
        _os_log_impl((void *)&_mh_execute_header, v134, v96, "%s: diff: %s", (uint8_t *)v98, 0x16u);
        uint64_t v104 = v135;
        swift_arrayDestroy(v135, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v104, -1LL, -1LL);
        swift_slowDealloc(v98, -1LL, -1LL);

        uint64_t v105 = (uint64_t)v139;
        if (v93) {
          goto LABEL_19;
        }
      }

      else
      {
        swift_bridgeObjectRelease_n(v91, 2LL);
        swift_bridgeObjectRelease_n(v89, 2LL);
        swift_bridgeObjectRelease_n(v87, 2LL);
        swift_bridgeObjectRelease_n(v85, 2LL);

        uint64_t v105 = (uint64_t)v139;
        if (v93)
        {
LABEL_19:
          if (sub_10048845C((uint64_t)v85, v87, v89, v91))
          {
            swift_bridgeObjectRelease(v91);
            swift_bridgeObjectRelease(v89);
            swift_bridgeObjectRelease(v87);
            swift_bridgeObjectRelease(v85);
            uint64_t v106 = (uint64_t)v142;
            (*(void (**)(_BYTE *))((swift_isaMask & *v138) + 0x188LL))(v142);
          }

          else
          {
            BOOL v119 = sub_100488494((uint64_t)v85, v87, v89);
            swift_bridgeObjectRelease(v91);
            swift_bridgeObjectRelease(v89);
            swift_bridgeObjectRelease(v87);
            swift_bridgeObjectRelease(v85);
            if (v119)
            {
              uint64_t v106 = (uint64_t)v142;
              if (*((_BYTE *)v138
                   + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionKeyMaterialController_isRatchetEnabled) == 1)
                sub_1003FB45C((uint64_t)v142);
              else {
                (*(void (**)(_BYTE *))((swift_isaMask & *v138) + 0x188LL))(v142);
              }
            }

            else
            {
              uint64_t v106 = (uint64_t)v142;
              uint64_t v120 = v147;
              sub_1003F5D64(*(double *)&v142[v25[5]], *(double *)&v142[v25[5] + 8], v142[v25[5] + 16], v147);
              uint64_t v121 = v148;
              uint64_t v122 = v149;
              if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v148 + 48))(v120, 1LL, v149) == 1)
              {
                sub_10040A274(v120, &qword_1009BC130);
              }

              else
              {
                uint64_t v123 = v146;
                uint64_t v124 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v121 + 32))(v146, v120, v122);
                int v125 = v144;
                uint64_t v126 = Date.init()(v124);
                id v127 = v145;
                Date.advanced(by:)(v126, 0.1);
                uint64_t v128 = *(void (**)(char *, uint64_t))(v121 + 8);
                v128(v125, v122);
                char v129 = static Date.< infix(_:_:)(v123, v127);
                v128(v127, v122);
                if ((v129 & 1) != 0)
                {
                  uint64_t v130 = v143;
                  sub_1003F5FC8(v106, v143, type metadata accessor for IDSGroupEncryptionKeyMaterialController.KeyState);
                  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v130, v136);
                  if (EnumCaseMultiPayload)
                  {
                    if (EnumCaseMultiPayload == 1) {
                      sub_1003FA390(v106);
                    }
                    v128(v123, v122);
                    sub_1003F6050(v130, type metadata accessor for IDSGroupEncryptionKeyMaterialController.KeyState);
                    goto LABEL_21;
                  }

                  sub_1003F600C(v130, v105, type metadata accessor for IDSGroupEncryptionKeyMaterialController.OneKey);
                  sub_1003F9EB4(v106, v105);
                  sub_1003F6050(v105, type metadata accessor for IDSGroupEncryptionKeyMaterialController.OneKey);
                }

                v128(v123, v122);
              }
            }
          }

BOOL sub_1003F9E2C(unint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionKeyMaterialController_state);
  uint64_t v4 = v3 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v3 + 16LL);
  __n128 v5 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(void *)v3 + 48LL) + 3LL) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v5);
  BOOL v6 = *(void *)(v4 + *(int *)(type metadata accessor for IDSGroupEncryptionKeyMaterialController.State(0LL) + 60)) > a1;
  os_unfair_lock_unlock(v5);
  return v6;
}

void sub_1003F9EB4(uint64_t a1, uint64_t a2)
{
  uint64_t v67 = a2;
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v75 = *(void *)(v3 - 8);
  uint64_t v76 = v3;
  __chkstk_darwin(v4, v5);
  uint64_t v74 = (char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v72 = *(void *)(v7 - 8);
  uint64_t v73 = v7;
  __chkstk_darwin(v8, v9);
  os_log_type_t v71 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for Date(0LL);
  uint64_t v68 = *(void *)(v11 - 8);
  uint64_t v69 = v11;
  __chkstk_darwin(v12, v13);
  unint64_t v66 = (char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v65 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.KeyState(0LL);
  __chkstk_darwin(v15, v16);
  uint64_t v18 = (char *)&v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1003F5CB4(&qword_1009B8E08);
  __chkstk_darwin(v19, v20);
  __n128 v22 = (char *)&v64 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v23, v24);
  __n128 v26 = (char *)&v64 - v25;
  uint64_t v27 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  uint64_t v28 = *(void *)(v27 - 8);
  __chkstk_darwin(v29, v30);
  uint64_t v32 = (char *)&v64 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v33, v34);
  uint64_t v36 = (char *)&v64 - v35;
  __chkstk_darwin(v37, v38);
  __n128 v40 = (char *)&v64 - v39;
  uint64_t v41 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.State(0LL);
  uint64_t v42 = *(int *)(v41 + 32);
  uint64_t v70 = a1;
  sub_1003FCC58(*(void *)(a1 + v42), (uint64_t)v26);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1LL, v27) == 1)
  {
    sub_10040A274((uint64_t)v26, &qword_1009B8E08);
    uint64_t v43 = v70;
  }

  else
  {
    sub_1003F600C((uint64_t)v26, (uint64_t)v40, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    uint64_t v44 = v67;
    sub_1003F5C6C(v67, (uint64_t)v22);
    uint64_t v45 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.OneKey(0LL);
    sub_1003F5FC8( v44 + *(int *)(v45 + 20),  (uint64_t)v36,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    uint64_t v46 = sub_1003F5FC8((uint64_t)v40, (uint64_t)v32, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    os_log_type_t v47 = v66;
    Date.init()(v46);
    sub_1003F6050((uint64_t)v40, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    sub_1003F5D08((uint64_t)v22, (uint64_t)v18);
    int v48 = (int *)type metadata accessor for IDSGroupEncryptionKeyMaterialController.TwoKey(0LL);
    sub_1003F600C((uint64_t)v36, (uint64_t)&v18[v48[5]], type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    sub_1003F600C((uint64_t)v32, (uint64_t)&v18[v48[6]], type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    (*(void (**)(char *, char *, uint64_t))(v68 + 32))(&v18[v48[7]], v47, v69);
    swift_storeEnumTagMultiPayload(v18, v65, 1LL);
    uint64_t v43 = v70;
    sub_1003F64F0((uint64_t)v18, v70);
  }

  uint64_t v49 = v43 + *(int *)(v41 + 28);
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong(v49);
  uint64_t v51 = *(void *)(v49 + 8);
  uint64_t v52 = v77;
  uint64_t v53 = (void *)swift_allocObject(&unk_1009050A0, 40LL, 7LL);
  void v53[2] = Strong;
  v53[3] = v51;
  v53[4] = v52;
  aBlock[4] = sub_100402294;
  uint64_t v80 = v53;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1003F8400;
  aBlock[3] = &unk_1009050B8;
  uint64_t v54 = _Block_copy(aBlock);
  id v55 = Strong;
  uint64_t v56 = v52;
  uint64_t v57 = v71;
  static DispatchQoS.unspecified.getter(v56);
  uint64_t v78 = &_swiftEmptyArrayStorage;
  uint64_t v58 = sub_10040A2B0( (unint64_t *)&unk_1009BAC40,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v59 = sub_1003F5CB4((uint64_t *)&unk_1009B9870);
  uint64_t v60 = sub_1004021DC((unint64_t *)&qword_1009BAC50, (uint64_t *)&unk_1009B9870);
  os_log_t v61 = v74;
  uint64_t v62 = v59;
  uint64_t v63 = v76;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v78, v62, v60, v76, v58);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v57, v61, v54);
  _Block_release(v54);
  (*(void (**)(char *, uint64_t))(v75 + 8))(v61, v63);
  (*(void (**)(char *, uint64_t))(v72 + 8))(v57, v73);
  swift_release(v80);
  (*(void (**)(uint64_t, void, unint64_t, uint64_t))((swift_isaMask & *v56) + 0x208LL))( (uint64_t)v56 + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionKeyMaterialController_l,  0LL,  0xE000000000000000LL,  v43);
}

void sub_1003FA390(uint64_t a1)
{
  uint64_t v96 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v3 = *(void *)(v96 - 8);
  __chkstk_darwin(v4, v5);
  uint64_t v7 = (char *)&v88 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v10, v11);
  uint64_t v100 = (char *)&v88 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Date(0LL);
  uint64_t v94 = *(void *)(v13 - 8);
  uint64_t v95 = v13;
  __chkstk_darwin(v14, v15);
  uint64_t v93 = (char *)&v88 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  uint64_t v97 = *(void *)(v17 - 8);
  uint64_t v98 = v17;
  __chkstk_darwin(v18, v19);
  uint64_t v89 = (uint64_t)&v88 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v21, v22);
  uint64_t v92 = (uint64_t)&v88 - v23;
  sub_1003F5CB4(&qword_1009B8E08);
  __chkstk_darwin(v24, v25);
  uint64_t v27 = (char *)&v88 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v28, v29);
  uint64_t v91 = (uint64_t)&v88 - v30;
  uint64_t v90 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.TwoKey(0LL);
  __chkstk_darwin(v31, v32);
  __n128 v34 = (char *)&v88 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v106 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.KeyState(0LL);
  __chkstk_darwin(v35, v36);
  __n128 v38 = (char *)&v88 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v41 = __chkstk_darwin(v39, v40);
  uint64_t v105 = (uint64_t)&v88 - v42;
  unint64_t v99 = v1;
  uint64_t v107 = (uint64_t)v1 + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionKeyMaterialController_l;
  uint64_t v43 = (os_log_s *)Logger.logObject.getter(v41);
  os_log_type_t v44 = static os_log_type_t.default.getter();
  BOOL v45 = os_log_type_enabled(v43, v44);
  os_log_t v103 = v7;
  uint64_t v104 = v3;
  uint64_t v101 = v9;
  uint64_t v102 = v8;
  if (v45)
  {
    uint64_t v46 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v47 = swift_slowAlloc(32LL, -1LL);
    aBlock[0] = v47;
    *(_DWORD *)uint64_t v46 = 136315138;
    uint64_t v108 = (void *)sub_1003FFBB0(0xD000000000000011LL, 0x800000010083E280LL, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v108, aBlock, v46 + 4, v46 + 12);
    _os_log_impl((void *)&_mh_execute_header, v43, v44, "%s: roll to next key", v46, 0xCu);
    swift_arrayDestroy(v47, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v47, -1LL, -1LL);
    swift_slowDealloc(v46, -1LL, -1LL);
  }

  uint64_t v49 = v105;
  uint64_t v48 = v106;
  sub_1003F5FC8(a1, v105, type metadata accessor for IDSGroupEncryptionKeyMaterialController.KeyState);
  if (swift_getEnumCaseMultiPayload(v49, v48) == 1)
  {
    sub_1003F600C(v49, (uint64_t)v34, type metadata accessor for IDSGroupEncryptionKeyMaterialController.TwoKey);
    uint64_t v50 = v90;
    uint64_t v51 = v91;
    sub_1003F5FC8( (uint64_t)&v34[*(int *)(v90 + 20)],  v91,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v97 + 56))(v51, 0LL, 1LL, v98);
    uint64_t v52 = v92;
    uint64_t v53 = sub_1003F5FC8( (uint64_t)&v34[*(int *)(v50 + 24)],  v92,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    uint64_t v54 = v93;
    Date.init()(v53);
    sub_1003F6050((uint64_t)v34, type metadata accessor for IDSGroupEncryptionKeyMaterialController.TwoKey);
    sub_1003F5D08(v51, (uint64_t)v38);
    uint64_t v55 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.OneKey(0LL);
    sub_1003F600C( v52,  (uint64_t)&v38[*(int *)(v55 + 20)],  type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    (*(void (**)(char *, char *, uint64_t))(v94 + 32))(&v38[*(int *)(v55 + 24)], v54, v95);
    swift_storeEnumTagMultiPayload(v38, v48, 0LL);
    sub_1003F64F0((uint64_t)v38, a1);
    uint64_t v56 = v96;
    uint64_t v57 = v99;
  }

  else
  {
    uint64_t v58 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.State(0LL);
    uint64_t v57 = v99;
    sub_1003FCC58(*(void *)(a1 + *(int *)(v58 + 32)), (uint64_t)v27);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v97 + 48))(v27, 1LL, v98) == 1)
    {
      uint64_t v59 = sub_10040A274((uint64_t)v27, &qword_1009B8E08);
      uint64_t v60 = (os_log_s *)Logger.logObject.getter(v59);
      os_log_type_t v61 = static os_log_type_t.default.getter();
      BOOL v62 = os_log_type_enabled(v60, v61);
      uint64_t v63 = v96;
      if (v62)
      {
        uint64_t v64 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v65 = a1;
        uint64_t v66 = swift_slowAlloc(32LL, -1LL);
        aBlock[0] = v66;
        *(_DWORD *)uint64_t v64 = 136315138;
        uint64_t v108 = (void *)sub_1003FFBB0(0xD000000000000011LL, 0x800000010083E280LL, aBlock);
        uint64_t v49 = v105;
        uint64_t v48 = v106;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v108, aBlock, v64 + 4, v64 + 12);
        _os_log_impl((void *)&_mh_execute_header, v60, v61, "%s: setting state to .noKey", v64, 0xCu);
        swift_arrayDestroy(v66, 1LL, (char *)&type metadata for Any + 8);
        uint64_t v67 = v66;
        a1 = v65;
        swift_slowDealloc(v67, -1LL, -1LL);
        swift_slowDealloc(v64, -1LL, -1LL);
      }

      uint64_t v56 = v63;
      sub_1003F6050(a1, type metadata accessor for IDSGroupEncryptionKeyMaterialController.KeyState);
      swift_storeEnumTagMultiPayload(a1, v48, 2LL);
      (*(void (**)(uint64_t, void, unint64_t, uint64_t))((swift_isaMask & *v57) + 0x208LL))( v107,  0LL,  0xE000000000000000LL,  a1);
    }

    else
    {
      uint64_t v68 = v89;
      sub_1003F600C((uint64_t)v27, v89, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      uint64_t v69 = v91;
      sub_1003F608C(v91);
      uint64_t v70 = v92;
      uint64_t v71 = sub_1003F5FC8(v68, v92, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      uint64_t v72 = v93;
      Date.init()(v71);
      sub_1003F6050(v68, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      sub_1003F5D08(v69, (uint64_t)v38);
      uint64_t v73 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.OneKey(0LL);
      sub_1003F600C( v70,  (uint64_t)&v38[*(int *)(v73 + 20)],  type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      (*(void (**)(char *, char *, uint64_t))(v94 + 32))(&v38[*(int *)(v73 + 24)], v72, v95);
      swift_storeEnumTagMultiPayload(v38, v48, 0LL);
      sub_1003F64F0((uint64_t)v38, a1);
      uint64_t v56 = v96;
    }

    sub_1003F6050(v49, type metadata accessor for IDSGroupEncryptionKeyMaterialController.KeyState);
  }

  uint64_t v74 = a1 + *(int *)(type metadata accessor for IDSGroupEncryptionKeyMaterialController.State(0LL) + 28);
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong(v74);
  uint64_t v76 = *(void *)(v74 + 8);
  uint64_t v106 = *(void *)((char *)v57 + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionKeyMaterialController_q);
  os_log_type_t v77 = (void *)swift_allocObject(&unk_1009050F0, 40LL, 7LL);
  v77[2] = Strong;
  v77[3] = v76;
  v77[4] = v57;
  aBlock[4] = (uint64_t)sub_100402294;
  os_log_type_t v110 = v77;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = (uint64_t)sub_1003F8400;
  aBlock[3] = (uint64_t)&unk_100905108;
  uint64_t v78 = _Block_copy(aBlock);
  id v79 = Strong;
  uint64_t v80 = v57;
  uint64_t v81 = a1;
  uint64_t v82 = v80;
  uint64_t v83 = v100;
  static DispatchQoS.unspecified.getter(v80);
  uint64_t v108 = &_swiftEmptyArrayStorage;
  uint64_t v84 = sub_10040A2B0( (unint64_t *)&unk_1009BAC40,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v85 = sub_1003F5CB4((uint64_t *)&unk_1009B9870);
  uint64_t v86 = sub_1004021DC((unint64_t *)&qword_1009BAC50, (uint64_t *)&unk_1009B9870);
  uint64_t v87 = v103;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v108, v85, v86, v56, v84);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v83, v87, v78);
  _Block_release(v78);
  (*(void (**)(char *, uint64_t))(v104 + 8))(v87, v56);
  (*(void (**)(char *, uint64_t))(v101 + 8))(v83, v102);
  swift_release(v110);
  (*(void (**)(uint64_t, void, unint64_t, uint64_t))((swift_isaMask & *v82) + 0x208LL))( v107,  0LL,  0xE000000000000000LL,  v81);
}

void sub_1003FAC5C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v78 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v12, v13);
  uint64_t v97 = (char *)&v78 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for Date(0LL);
  uint64_t v85 = *(void *)(v15 - 8);
  uint64_t v86 = v15;
  __chkstk_darwin(v16, v17);
  uint64_t v84 = (char *)&v78 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v96 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.KeyState(0LL);
  __chkstk_darwin(v19, v20);
  uint64_t v83 = (uint64_t)&v78 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1003F5CB4(&qword_1009B8E08);
  __chkstk_darwin(v22, v23);
  uint64_t v82 = (char *)&v78 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v25, v26);
  __n128 v28 = (char *)&v78 - v27;
  uint64_t v94 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  uint64_t v29 = *(void *)(v94 - 8);
  __chkstk_darwin(v30, v31);
  uint64_t v81 = (uint64_t)&v78 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v33, v34);
  uint64_t v80 = (uint64_t)&v78 - v35;
  uint64_t v36 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.State(0LL);
  uint64_t v95 = v36;
  uint64_t v37 = *(int *)(v36 + 60);
  uint64_t v38 = *(void *)(a1 + v37);
  __n128 v39 = (void *)(v38 + 1);
  if (v38 == -1)
  {
    __break(1u);
  }

  else
  {
    uint64_t v88 = v2;
    uint64_t v89 = v11;
    uint64_t v92 = v5;
    uint64_t v93 = v4;
    *(void *)(a1 + v37) = v39;
    uint64_t v40 = (uint64_t)v2 + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionKeyMaterialController_l;
    uint64_t v41 = (os_log_s *)Logger.logObject.getter(v36);
    os_log_type_t v42 = static os_log_type_t.default.getter();
    BOOL v43 = os_log_type_enabled(v41, v42);
    uint64_t v90 = v10;
    uint64_t v91 = v9;
    if (v43)
    {
      uint64_t v44 = swift_slowAlloc(22LL, -1LL);
      uint64_t v79 = a1;
      uint64_t v45 = v44;
      uint64_t v46 = swift_slowAlloc(32LL, -1LL);
      aBlock[0] = v46;
      *(_DWORD *)uint64_t v45 = 136315394;
      uint64_t v98 = (void *)sub_1003FFBB0(0x6C6C6F5264726168LL, 0xEC000000293A5F28LL, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, aBlock, v45 + 4, v45 + 12);
      *(_WORD *)(v45 + 12) = 2048;
      uint64_t v98 = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, aBlock, v45 + 14, v45 + 22);
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "%s: hard rolling; gen count: %llu", (uint8_t *)v45, 0x16u);
      swift_arrayDestroy(v46, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1LL, -1LL);
      uint64_t v47 = v45;
      a1 = v79;
      swift_slowDealloc(v47, -1LL, -1LL);
    }

    uint64_t v48 = v95;
    uint64_t v49 = v88;
    sub_1003FCC58(*(void *)(a1 + *(int *)(v95 + 32)), (uint64_t)v28);
    uint64_t v50 = v94;
    int v51 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v29 + 48))(v28, 1LL, v94);
    uint64_t v87 = v40;
    if (v51 == 1)
    {
      uint64_t v52 = sub_10040A274((uint64_t)v28, &qword_1009B8E08);
      uint64_t v53 = (os_log_s *)Logger.logObject.getter(v52);
      os_log_type_t v54 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v53, v54))
      {
        uint64_t v55 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v56 = swift_slowAlloc(32LL, -1LL);
        aBlock[0] = v56;
        *(_DWORD *)uint64_t v55 = 136315138;
        uint64_t v98 = (void *)sub_1003FFBB0(0x6C6C6F5264726168LL, 0xEC000000293A5F28LL, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, aBlock, v55 + 4, v55 + 12);
        _os_log_impl((void *)&_mh_execute_header, v53, v54, "%s: setting state to .noKey", v55, 0xCu);
        swift_arrayDestroy(v56, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v56, -1LL, -1LL);
        swift_slowDealloc(v55, -1LL, -1LL);
      }

      sub_1003F6050(a1, type metadata accessor for IDSGroupEncryptionKeyMaterialController.KeyState);
      swift_storeEnumTagMultiPayload(a1, v96, 2LL);
      (*(void (**)(uint64_t, void, unint64_t, uint64_t))((swift_isaMask & *v49) + 0x208LL))( v40,  0LL,  0xE000000000000000LL,  a1);
    }

    else
    {
      uint64_t v57 = v80;
      sub_1003F600C((uint64_t)v28, v80, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      uint64_t v58 = (uint64_t)v82;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v29 + 56))(v82, 1LL, 1LL, v50);
      uint64_t v59 = v81;
      uint64_t v60 = sub_1003F5FC8(v57, v81, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      os_log_type_t v61 = v84;
      Date.init()(v60);
      sub_1003F6050(v57, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      uint64_t v62 = v83;
      sub_1003F5D08(v58, v83);
      uint64_t v63 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.OneKey(0LL);
      sub_1003F600C(v59, v62 + *(int *)(v63 + 20), type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      (*(void (**)(uint64_t, char *, uint64_t))(v85 + 32))(v62 + *(int *)(v63 + 24), v61, v86);
      swift_storeEnumTagMultiPayload(v62, v96, 0LL);
      sub_1003F64F0(v62, a1);
    }

    uint64_t v64 = a1 + *(int *)(v48 + 28);
    uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong(v64);
    uint64_t v66 = *(void *)(v64 + 8);
    uint64_t v67 = (void *)swift_allocObject(&unk_100904CF0, 40LL, 7LL);
    v67[2] = Strong;
    v67[3] = v66;
    v67[4] = v49;
    aBlock[4] = (uint64_t)sub_100402294;
    uint64_t v100 = v67;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = (uint64_t)sub_1003F8400;
    aBlock[3] = (uint64_t)&unk_100904D08;
    uint64_t v68 = _Block_copy(aBlock);
    id v69 = Strong;
    uint64_t v70 = v49;
    uint64_t v71 = v97;
    static DispatchQoS.unspecified.getter(v70);
    uint64_t v98 = &_swiftEmptyArrayStorage;
    uint64_t v72 = sub_10040A2B0( (unint64_t *)&unk_1009BAC40,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v73 = sub_1003F5CB4((uint64_t *)&unk_1009B9870);
    uint64_t v74 = sub_1004021DC((unint64_t *)&qword_1009BAC50, (uint64_t *)&unk_1009B9870);
    uint64_t v75 = v91;
    uint64_t v76 = v73;
    uint64_t v77 = v93;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v98, v76, v74, v93, v72);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v71, v75, v68);
    _Block_release(v68);
    (*(void (**)(char *, uint64_t))(v92 + 8))(v75, v77);
    (*(void (**)(char *, uint64_t))(v89 + 8))(v71, v90);
    swift_release(v100);
    (*(void (**)(uint64_t, void, unint64_t, uint64_t))((swift_isaMask & *v70) + 0x208LL))( v87,  0LL,  0xE000000000000000LL,  a1);
  }

void sub_1003FB3D8()
{
  uint64_t v1 = *(void *)((char *)v0 + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionKeyMaterialController_state);
  uint64_t v2 = v1 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v1 + 16LL);
  uint64_t v3 = (os_unfair_lock_s *)(v1 + ((*(unsigned int *)(*(void *)v1 + 48LL) + 3LL) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v3);
  (*(void (**)(uint64_t))((swift_isaMask & *v0) + 0x188LL))(v2);
  os_unfair_lock_unlock(v3);
}

void sub_1003FB45C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v206 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.TwoKey(0LL);
  __chkstk_darwin(v4, v5);
  uint64_t v201 = (char *)&v186 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7, v8);
  uint64_t v202 = (uint64_t)&v186 - v9;
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v197 = *(void *)(v10 - 8);
  __chkstk_darwin(v11, v12);
  uint64_t v196 = (char *)&v186 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v198 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v195 = *(void *)(v198 - 8);
  __chkstk_darwin(v14, v15);
  uint64_t v194 = (char *)&v186 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1003F5CB4(&qword_1009B8E08);
  __chkstk_darwin(v17, v18);
  int v200 = (char *)&v186 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v20, v21);
  uint64_t v199 = (char *)&v186 - v22;
  uint64_t v23 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  uint64_t v208 = *(void *)(v23 - 8);
  uint64_t v209 = v23;
  __chkstk_darwin(v24, v25);
  uint64_t v191 = (uint64_t)&v186 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v27, v28);
  uint64_t v204 = (uint64_t)&v186 - v29;
  __chkstk_darwin(v30, v31);
  uint64_t v190 = (uint64_t)&v186 - v32;
  __chkstk_darwin(v33, v34);
  uint64_t v203 = (uint64_t)&v186 - v35;
  uint64_t v205 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.OneKey(0LL);
  __chkstk_darwin(v36, v37);
  __n128 v39 = (char *)&v186 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v40, v41);
  uint64_t v207 = (uint64_t)&v186 - v42;
  uint64_t v210 = (void **)type metadata accessor for IDSGroupEncryptionKeyMaterialController.KeyState(0LL);
  __chkstk_darwin(v43, v44);
  uint64_t v193 = (uint64_t)&v186 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v46, v47);
  uint64_t v49 = (char *)&v186 - v48;
  uint64_t v50 = type metadata accessor for Date(0LL);
  uint64_t v51 = *(void *)(v50 - 8);
  uint64_t v54 = __chkstk_darwin(v52, v53);
  uint64_t v56 = (char *)&v186 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static Date.now.getter(v54);
  uint64_t v192 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.State(0LL);
  uint64_t v57 = a1 + *(int *)(v192 + 56);
  double v58 = Date.timeIntervalSince(_:)(v57);
  uint64_t v59 = (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v56, v50);
  if (v58 <= 5.0)
  {
    uint64_t v92 = (os_log_s *)Logger.logObject.getter(v59);
    os_log_type_t v93 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v92, v93))
    {
      uint64_t v94 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v95 = (void **)swift_slowAlloc(32LL, -1LL);
      aBlock = v95;
      *(_DWORD *)uint64_t v94 = 136315138;
      uint64_t v218 = sub_1003FFBB0(0x2874656863746172LL, 0xEB00000000293A5FLL, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v218, v219, v94 + 4, v94 + 12);
      _os_log_impl( (void *)&_mh_execute_header,  v92,  v93,  "%s: ratchet canceled because we just ratcheted recently",  v94,  0xCu);
      swift_arrayDestroy(v95, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v95, -1LL, -1LL);
      swift_slowDealloc(v94, -1LL, -1LL);
    }
  }

  else
  {
    static Date.now.getter(v59);
    uint64_t v60 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v51 + 40))(v57, v56, v50);
    os_log_type_t v61 = (os_log_s *)Logger.logObject.getter(v60);
    os_log_type_t v62 = static os_log_type_t.default.getter();
    BOOL v63 = os_log_type_enabled(v61, v62);
    uint64_t v188 = v10;
    int v189 = v39;
    if (v63)
    {
      uint64_t v64 = v2;
      uint64_t v65 = a1;
      uint64_t v66 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v67 = (void **)swift_slowAlloc(32LL, -1LL);
      aBlock = v67;
      *(_DWORD *)uint64_t v66 = 136315138;
      uint64_t v218 = sub_1003FFBB0(0x2874656863746172LL, 0xEB00000000293A5FLL, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v218, v219, v66 + 4, v66 + 12);
      _os_log_impl((void *)&_mh_execute_header, v61, v62, "%s: ratchet (rolling)", v66, 0xCu);
      swift_arrayDestroy(v67, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v67, -1LL, -1LL);
      uint64_t v68 = v66;
      a1 = v65;
      uint64_t v2 = v64;
      swift_slowDealloc(v68, -1LL, -1LL);
    }

    sub_1003F5FC8(a1, (uint64_t)v49, type metadata accessor for IDSGroupEncryptionKeyMaterialController.KeyState);
    uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v49, v210);
    if (!(_DWORD)EnumCaseMultiPayload)
    {
      uint64_t v96 = sub_1003F600C((uint64_t)v49, v207, type metadata accessor for IDSGroupEncryptionKeyMaterialController.OneKey);
      uint64_t v97 = (os_log_s *)Logger.logObject.getter(v96);
      os_log_type_t v98 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v97, v98))
      {
        unint64_t v99 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v100 = (void **)swift_slowAlloc(32LL, -1LL);
        aBlock = v100;
        *(_DWORD *)unint64_t v99 = 136315138;
        uint64_t v218 = sub_1003FFBB0(0x2874656863746172LL, 0xEB00000000293A5FLL, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v218, v219, v99 + 4, v99 + 12);
        _os_log_impl( (void *)&_mh_execute_header,  v97,  v98,  "%s: ratcheting current key because we have one key",  v99,  0xCu);
        swift_arrayDestroy(v100, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v100, -1LL, -1LL);
        swift_slowDealloc(v99, -1LL, -1LL);
      }

      uint64_t v101 = v209;
      uint64_t v102 = (uint64_t)v189;
      os_log_t v103 = v199;
      swift_beginAccess(&dword_1009C7528, &v218, 1LL, 0LL);
      int v104 = dword_1009C7528 + 1;
      if (dword_1009C7528 != -1)
      {
        ++dword_1009C7528;
        uint64_t v105 = v207;
        uint64_t v106 = v207 + *(int *)(v205 + 20);
        sub_10043AFC0(v104, v103);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v208 + 48))(v103, 1LL, v101) == 1)
        {
          sub_10040A274((uint64_t)v103, &qword_1009B8E08);
          uint64_t v107 = sub_1003F5FC8(v105, v102, type metadata accessor for IDSGroupEncryptionKeyMaterialController.OneKey);
          uint64_t v108 = (os_log_s *)Logger.logObject.getter(v107);
          os_log_type_t v109 = static os_log_type_t.default.getter();
          uint64_t v110 = v102;
          if (os_log_type_enabled(v108, v109))
          {
            uint64_t v111 = swift_slowAlloc(22LL, -1LL);
            uint64_t v210 = (void **)swift_slowAlloc(64LL, -1LL);
            aBlock = v210;
            *(_DWORD *)uint64_t v111 = 136315394;
            uint64_t v217 = (void *)sub_1003FFBB0(0x2874656863746172LL, 0xEB00000000293A5FLL, (uint64_t *)&aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v217, &v218, v111 + 4, v111 + 12);
            *(_WORD *)(v111 + 12) = 2080;
            uint64_t v112 = sub_10040A2B0( &qword_1009B90F0,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent,  (uint64_t)&unk_100718F00);
            uint64_t v113 = dispatch thunk of CustomStringConvertible.description.getter(v101, v112);
            unint64_t v115 = v114;
            uint64_t v217 = (void *)sub_1003FFBB0(v113, v114, (uint64_t *)&aBlock);
            uint64_t v116 = v207;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v217, &v218, v111 + 14, v111 + 22);
            swift_bridgeObjectRelease(v115);
            sub_1003F6050(v110, type metadata accessor for IDSGroupEncryptionKeyMaterialController.OneKey);
            _os_log_impl( (void *)&_mh_execute_header,  v108,  v109,  "%s: ratcheting failed for local key: %s",  (uint8_t *)v111,  0x16u);
            uint64_t v117 = v210;
            swift_arrayDestroy(v210, 2LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v117, -1LL, -1LL);
            swift_slowDealloc(v111, -1LL, -1LL);
          }

          else
          {
            uint64_t v116 = v105;

            sub_1003F6050(v110, type metadata accessor for IDSGroupEncryptionKeyMaterialController.OneKey);
          }

          sub_1003FA390(a1);
          uint64_t v147 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.OneKey;
          uint64_t v148 = v116;
        }

        else
        {
          int v187 = v2;
          uint64_t v136 = v203;
          sub_1003F600C((uint64_t)v103, v203, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
          uint64_t v137 = v190;
          uint64_t v138 = sub_1003F5FC8(v136, v190, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
          uint64_t v139 = (os_log_s *)Logger.logObject.getter(v138);
          os_log_type_t v140 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v139, v140))
          {
            uint64_t v141 = swift_slowAlloc(22LL, -1LL);
            uint64_t v142 = (void **)swift_slowAlloc(64LL, -1LL);
            aBlock = v142;
            *(_DWORD *)uint64_t v141 = 136315394;
            uint64_t v217 = (void *)sub_1003FFBB0(0x2874656863746172LL, 0xEB00000000293A5FLL, (uint64_t *)&aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v217, &v218, v141 + 4, v141 + 12);
            *(_WORD *)(v141 + 12) = 2080;
            uint64_t v143 = sub_10040A2B0( &qword_1009B90F0,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent,  (uint64_t)&unk_100718F00);
            uint64_t v144 = dispatch thunk of CustomStringConvertible.description.getter(v209, v143);
            unint64_t v146 = v145;
            uint64_t v217 = (void *)sub_1003FFBB0(v144, v145, (uint64_t *)&aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v217, &v218, v141 + 14, v141 + 22);
            swift_bridgeObjectRelease(v146);
            uint64_t v101 = v209;
            sub_1003F6050(v137, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
            _os_log_impl( (void *)&_mh_execute_header,  v139,  v140,  "%s: ratcheted to new local key: %s",  (uint8_t *)v141,  0x16u);
            swift_arrayDestroy(v142, 2LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v142, -1LL, -1LL);
            swift_slowDealloc(v141, -1LL, -1LL);
          }

          else
          {

            sub_1003F6050(v137, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
          }

          uint64_t v169 = v193;
          sub_1003F5FC8(v106, v193, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v208 + 56))(v169, 0LL, 1LL, v101);
          uint64_t v170 = sub_1003F5FC8( v203,  v169 + *(int *)(v205 + 20),  type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
          Date.init()(v170);
          swift_storeEnumTagMultiPayload(v169, v210, 0LL);
          sub_1003F64F0(v169, a1);
          uint64_t v171 = a1 + *(int *)(v192 + 28);
          uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong(v171);
          uint64_t v173 = *(void *)(v171 + 8);
          uint64_t v174 = v187;
          int v175 = (void *)swift_allocObject(&unk_100905050, 40LL, 7LL);
          v175[2] = Strong;
          v175[3] = v173;
          v175[4] = v174;
          uint64_t v215 = sub_100402294;
          uint64_t v216 = v175;
          aBlock = _NSConcreteStackBlock;
          uint64_t v212 = 1107296256LL;
          id v213 = sub_1003F8400;
          uint64_t v214 = &unk_100905068;
          uint64_t v176 = _Block_copy(&aBlock);
          id v177 = Strong;
          id v178 = v174;
          uint64_t v179 = v194;
          static DispatchQoS.unspecified.getter(v178);
          uint64_t v217 = &_swiftEmptyArrayStorage;
          uint64_t v180 = sub_10040A2B0( (unint64_t *)&unk_1009BAC40,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
          uint64_t v181 = sub_1003F5CB4((uint64_t *)&unk_1009B9870);
          uint64_t v182 = sub_1004021DC((unint64_t *)&qword_1009BAC50, (uint64_t *)&unk_1009B9870);
          uint64_t v183 = v196;
          uint64_t v184 = v181;
          uint64_t v185 = v188;
          dispatch thunk of SetAlgebra.init<A>(_:)(&v217, v184, v182, v188, v180);
          OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v179, v183, v176);
          _Block_release(v176);
          (*(void (**)(char *, uint64_t))(v197 + 8))(v183, v185);
          (*(void (**)(char *, uint64_t))(v195 + 8))(v179, v198);
          swift_release(v216);
          sub_1003F7C80(a1);

          sub_1003F6050(v203, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
          uint64_t v147 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.OneKey;
          uint64_t v148 = v207;
        }

        goto LABEL_36;
      }

      goto LABEL_38;
    }

    if ((_DWORD)EnumCaseMultiPayload == 1)
    {
      uint64_t v70 = (uint64_t)v49;
      uint64_t v71 = v202;
      uint64_t v72 = sub_1003F600C(v70, v202, type metadata accessor for IDSGroupEncryptionKeyMaterialController.TwoKey);
      uint64_t v73 = (os_log_s *)Logger.logObject.getter(v72);
      os_log_type_t v74 = static os_log_type_t.default.getter();
      BOOL v75 = os_log_type_enabled(v73, v74);
      int v187 = v2;
      if (v75)
      {
        uint64_t v76 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v77 = (void **)swift_slowAlloc(32LL, -1LL);
        aBlock = v77;
        *(_DWORD *)uint64_t v76 = 136315138;
        uint64_t v218 = sub_1003FFBB0(0x2874656863746172LL, 0xEB00000000293A5FLL, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v218, v219, v76 + 4, v76 + 12);
        _os_log_impl( (void *)&_mh_execute_header,  v73,  v74,  "%s: ratcheting current key because we have two key",  v76,  0xCu);
        swift_arrayDestroy(v77, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v77, -1LL, -1LL);
        swift_slowDealloc(v76, -1LL, -1LL);
      }

      uint64_t v78 = v209;
      uint64_t v79 = (uint64_t)v201;
      swift_beginAccess(&dword_1009C7528, &v218, 1LL, 0LL);
      int v80 = dword_1009C7528 + 1;
      uint64_t v81 = v200;
      if (dword_1009C7528 != -1)
      {
        ++dword_1009C7528;
        uint64_t v82 = v71 + *(int *)(v206 + 20);
        sub_10043AFC0(v80, v200);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v208 + 48))(v81, 1LL, v78) == 1)
        {
          sub_10040A274((uint64_t)v81, &qword_1009B8E08);
          uint64_t v83 = sub_1003F5FC8(v71, v79, type metadata accessor for IDSGroupEncryptionKeyMaterialController.TwoKey);
          uint64_t v84 = (os_log_s *)Logger.logObject.getter(v83);
          os_log_type_t v85 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v84, v85))
          {
            uint64_t v86 = swift_slowAlloc(22LL, -1LL);
            uint64_t v210 = (void **)swift_slowAlloc(64LL, -1LL);
            aBlock = v210;
            *(_DWORD *)uint64_t v86 = 136315394;
            uint64_t v217 = (void *)sub_1003FFBB0(0x2874656863746172LL, 0xEB00000000293A5FLL, (uint64_t *)&aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v217, &v218, v86 + 4, v86 + 12);
            *(_WORD *)(v86 + 12) = 2080;
            uint64_t v87 = sub_10040A2B0( &qword_1009B90F0,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent,  (uint64_t)&unk_100718F00);
            uint64_t v88 = dispatch thunk of CustomStringConvertible.description.getter(v78, v87);
            unint64_t v90 = v89;
            uint64_t v217 = (void *)sub_1003FFBB0(v88, v89, (uint64_t *)&aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v217, &v218, v86 + 14, v86 + 22);
            swift_bridgeObjectRelease(v90);
            sub_1003F6050(v79, type metadata accessor for IDSGroupEncryptionKeyMaterialController.TwoKey);
            _os_log_impl( (void *)&_mh_execute_header,  v84,  v85,  "%s: ratcheting failed for local key: %s",  (uint8_t *)v86,  0x16u);
            uint64_t v91 = v210;
            swift_arrayDestroy(v210, 2LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v91, -1LL, -1LL);
            swift_slowDealloc(v86, -1LL, -1LL);
          }

          else
          {

            sub_1003F6050(v79, type metadata accessor for IDSGroupEncryptionKeyMaterialController.TwoKey);
          }

          sub_1003FA390(a1);
          uint64_t v147 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.TwoKey;
          uint64_t v148 = v71;
        }

        else
        {
          uint64_t v122 = v204;
          sub_1003F600C((uint64_t)v81, v204, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
          uint64_t v123 = v191;
          uint64_t v124 = sub_1003F5FC8(v122, v191, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
          int v125 = (os_log_s *)Logger.logObject.getter(v124);
          os_log_type_t v126 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v125, v126))
          {
            uint64_t v127 = swift_slowAlloc(22LL, -1LL);
            uint64_t v128 = (void **)swift_slowAlloc(64LL, -1LL);
            aBlock = v128;
            *(_DWORD *)uint64_t v127 = 136315394;
            uint64_t v217 = (void *)sub_1003FFBB0(0x2874656863746172LL, 0xEB00000000293A5FLL, (uint64_t *)&aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v217, &v218, v127 + 4, v127 + 12);
            *(_WORD *)(v127 + 12) = 2080;
            uint64_t v129 = a1;
            uint64_t v130 = sub_10040A2B0( &qword_1009B90F0,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent,  (uint64_t)&unk_100718F00);
            uint64_t v131 = v191;
            uint64_t v132 = dispatch thunk of CustomStringConvertible.description.getter(v209, v130);
            unint64_t v134 = v133;
            uint64_t v217 = (void *)sub_1003FFBB0(v132, v133, (uint64_t *)&aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v217, &v218, v127 + 14, v127 + 22);
            swift_bridgeObjectRelease(v134);
            uint64_t v135 = v131;
            a1 = v129;
            uint64_t v71 = v202;
            uint64_t v78 = v209;
            sub_1003F6050(v135, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
            _os_log_impl( (void *)&_mh_execute_header,  v125,  v126,  "%s: ratcheted to new local key: %s",  (uint8_t *)v127,  0x16u);
            swift_arrayDestroy(v128, 2LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v128, -1LL, -1LL);
            swift_slowDealloc(v127, -1LL, -1LL);
          }

          else
          {

            sub_1003F6050(v123, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
          }

          uint64_t v149 = v187;
          uint64_t v150 = v193;
          sub_1003F5FC8(v82, v193, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v208 + 56))(v150, 0LL, 1LL, v78);
          uint64_t v151 = v206;
          sub_1003F5FC8( v204,  v150 + *(int *)(v206 + 20),  type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
          uint64_t v152 = sub_1003F5FC8( v71 + *(int *)(v151 + 24),  v150 + *(int *)(v151 + 24),  type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
          Date.init()(v152);
          swift_storeEnumTagMultiPayload(v150, v210, 1LL);
          sub_1003F64F0(v150, a1);
          uint64_t v153 = a1 + *(int *)(v192 + 28);
          double v154 = (void *)swift_unknownObjectWeakLoadStrong(v153);
          uint64_t v155 = *(void *)(v153 + 8);
          uint64_t v210 = *(void ***)&v149[OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionKeyMaterialController_q];
          uint64_t v156 = (void *)swift_allocObject(&unk_100905000, 40LL, 7LL);
          v156[2] = v154;
          v156[3] = v155;
          void v156[4] = v149;
          uint64_t v215 = sub_100402294;
          uint64_t v216 = v156;
          aBlock = _NSConcreteStackBlock;
          uint64_t v212 = 1107296256LL;
          id v213 = sub_1003F8400;
          uint64_t v214 = &unk_100905018;
          id v157 = _Block_copy(&aBlock);
          uint64_t v158 = v149;
          uint64_t v159 = v157;
          v158;
          id v160 = v154;
          uint64_t v161 = v194;
          static DispatchQoS.unspecified.getter(v160);
          uint64_t v217 = &_swiftEmptyArrayStorage;
          uint64_t v162 = sub_10040A2B0( (unint64_t *)&unk_1009BAC40,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
          uint64_t v163 = sub_1003F5CB4((uint64_t *)&unk_1009B9870);
          uint64_t v164 = sub_1004021DC((unint64_t *)&qword_1009BAC50, (uint64_t *)&unk_1009B9870);
          uint64_t v165 = v71;
          uint64_t v166 = v196;
          uint64_t v167 = v163;
          uint64_t v168 = v188;
          dispatch thunk of SetAlgebra.init<A>(_:)(&v217, v167, v164, v188, v162);
          OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v161, v166, v159);
          _Block_release(v159);
          (*(void (**)(char *, uint64_t))(v197 + 8))(v166, v168);
          (*(void (**)(char *, uint64_t))(v195 + 8))(v161, v198);
          swift_release(v216);
          sub_1003F7C80(a1);

          sub_1003F6050(v204, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
          uint64_t v147 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.TwoKey;
          uint64_t v148 = v165;
        }

void *sub_1003FCAA8()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionKeyMaterialController_persistenceManager);
  swift_beginAccess( v0 + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionKeyMaterialController_persistenceManager,  v5,  0LL,  0LL);
  uint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

void sub_1003FCAF4(void *a1)
{
  id v3 = (void **)(v1 + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionKeyMaterialController_persistenceManager);
  swift_beginAccess(v3, v5, 1LL, 0LL);
  __n128 v4 = *v3;
  os_unfair_lock_s *v3 = a1;
}

void *sub_1003FCB44(uint64_t a1)
{
  return &j_j__swift_endAccess;
}

uint64_t sub_1003FCB88()
{
  uint64_t v1 = (unsigned int *)(v0 + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionKeyMaterialController_rollIndex);
  swift_beginAccess( v0 + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionKeyMaterialController_rollIndex,  v3,  0LL,  0LL);
  return *v1;
}

uint64_t sub_1003FCBCC(int a1)
{
  id v3 = (_DWORD *)(v1 + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionKeyMaterialController_rollIndex);
  uint64_t result = swift_beginAccess(v3, v5, 1LL, 0LL);
  _DWORD *v3 = a1;
  return result;
}

void *sub_1003FCC14(uint64_t a1)
{
  return &j_j__swift_endAccess;
}

uint64_t sub_1003FCC58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  id v3 = v2;
  uint64_t v6 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v8, v9);
  uint64_t v177 = (uint64_t)&v167 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11, v12);
  uint64_t v179 = (char *)&v167 - v13;
  uint64_t v14 = type metadata accessor for Date(0LL);
  uint64_t v174 = *(void *)(v14 - 8);
  __chkstk_darwin(v15, v16);
  id v178 = (char *)&v167 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1003F5CB4(&qword_1009B90E8);
  __chkstk_darwin(v18, v19);
  __n128 v21 = (char *)&v167 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = type metadata accessor for UUID(0LL, v22);
  uint64_t v183 = *(void *)(v23 - 8);
  uint64_t v184 = v23;
  __chkstk_darwin(v24, v25);
  unint64_t v176 = (unint64_t)&v167 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v27, v28);
  __n128 v30 = (char *)&v167 - v29;
  __chkstk_darwin(v31, v32);
  __n128 v34 = (char *)&v167 - v33;
  uint64_t v37 = __chkstk_darwin(v35, v36);
  uint64_t v185 = (char *)&v167 - v38;
  uint64_t v39 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v2) + 0xB0LL))(v37);
  uint64_t v182 = v7;
  if ((v39 & 1) == 0)
  {
    uint64_t v175 = a1;
    uint64_t v57 = (os_log_s *)Logger.logObject.getter(v39);
    os_log_type_t v58 = static os_log_type_t.default.getter();
    BOOL v59 = os_log_type_enabled(v57, v58);
    uint64_t v180 = a2;
    uint64_t v181 = v6;
    if (v59)
    {
      uint64_t v60 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v61 = swift_slowAlloc(32LL, -1LL);
      uint64_t v186 = v61;
      *(_DWORD *)uint64_t v60 = 136315138;
      uint64_t v189 = sub_1003FFBB0(0xD00000000000001BLL, 0x800000010083E260LL, &v186);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v189, &v190, v60 + 4, v60 + 12);
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "%s: Generting key with normal UUID KI", v60, 0xCu);
      swift_arrayDestroy(v61, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v61, -1LL, -1LL);
      swift_slowDealloc(v60, -1LL, -1LL);
    }

    goto LABEL_22;
  }

  if (!a1)
  {
    os_log_type_t v62 = (os_log_s *)Logger.logObject.getter(v39);
    os_log_type_t v63 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v62, v63))
    {
      uint64_t v64 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v65 = v6;
      uint64_t v66 = swift_slowAlloc(32LL, -1LL);
      uint64_t v186 = v66;
      *(_DWORD *)uint64_t v64 = 136315138;
      uint64_t v189 = sub_1003FFBB0(0xD00000000000001BLL, 0x800000010083E260LL, &v186);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v189, &v190, v64 + 4, v64 + 12);
      _os_log_impl( (void *)&_mh_execute_header,  v62,  v63,  "%s: Generting key abort because we don't have a participant ID yet to form short MKI",  v64,  0xCu);
      uint64_t v67 = 1LL;
      swift_arrayDestroy(v66, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v68 = v66;
      uint64_t v6 = v65;
      swift_slowDealloc(v68, -1LL, -1LL);
      swift_slowDealloc(v64, -1LL, -1LL);
    }

    else
    {

      uint64_t v67 = 1LL;
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v182 + 56))(a2, v67, 1LL, v6);
  }

  uint64_t v181 = v6;
  __n128 v40 = *(uint64_t (**)(void))((swift_isaMask & *v2) + 0x1B8LL);
  int v41 = v40();
  uint64_t v180 = a2;
  uint64_t v175 = a1;
  uint64_t v173 = v40;
  if (v41 != 1
    || (uint64_t v42 = (*(uint64_t (**)(void))((swift_isaMask & *v2) + 0x1A0LL))()) == 0
    || (v43 = (void *)v42, unint64_t v44 = sub_1004EFF30(a1, 0LL), v43, (v44 & 0x100000000LL) != 0))
  {
LABEL_18:
    unsigned int v69 = v40();
    unint64_t v70 = sub_100439E78(v69, 0LL);
    unsigned int v71 = v70;
    unint64_t v73 = v72;
    uint64_t v172 = HIDWORD(v70);
    sub_10043ABD8(v70, v72, (uint64_t)v21);
    uint64_t v74 = v183;
    uint64_t v75 = v184;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v183 + 48))(v21, 1LL, v184) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v34, v21, v75);
      uint64_t v139 = v74;
      uint64_t v171 = *(uint64_t (**)(char *, char *, uint64_t))(v74 + 16);
      uint64_t v140 = v171(v30, v34, v75);
      uint64_t v141 = (os_log_s *)Logger.logObject.getter(v140);
      os_log_type_t v142 = static os_log_type_t.default.getter();
      LODWORD(v170) = v142;
      if (os_log_type_enabled(v141, v142))
      {
        uint64_t v143 = swift_slowAlloc(32LL, -1LL);
        uint64_t v169 = swift_slowAlloc(96LL, -1LL);
        uint64_t v189 = v169;
        *(_DWORD *)uint64_t v143 = 136315650;
        os_log_t v168 = v141;
        uint64_t v186 = sub_1003FFBB0(0xD00000000000001BLL, 0x800000010083E260LL, &v189);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v186, v187, v143 + 4, v143 + 12);
        *(_WORD *)(v143 + 12) = 2080;
        uint64_t v167 = v143 + 14;
        uint64_t v144 = sub_10040A2B0( &qword_1009B95C0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v145 = dispatch thunk of CustomStringConvertible.description.getter(v184, v144);
        unint64_t v147 = v146;
        uint64_t v186 = sub_1003FFBB0(v145, v146, &v189);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v186, v187, v167, v143 + 22);
        swift_bridgeObjectRelease(v147);
        uint64_t v148 = *(void (**)(char *, uint64_t))(v139 + 8);
        v148(v30, v184);
        *(_WORD *)(v143 + 22) = 2080;
        uint64_t v186 = __PAIR64__(v172, v71);
        v187[0] = v73;
        uint64_t v149 = String.init<A>(describing:)(&v186, &type metadata for IDSGroupEncryptionKeyMaterialShortKIInfo);
        unint64_t v151 = v150;
        uint64_t v186 = sub_1003FFBB0(v149, v150, &v189);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v186, v187, v143 + 24, v143 + 32);
        swift_bridgeObjectRelease(v151);
        os_log_t v152 = v168;
        _os_log_impl( (void *)&_mh_execute_header,  v168,  (os_log_type_t)v170,  "%s: Generted keyIndex %s with [ShortKI info: %s]",  (uint8_t *)v143,  0x20u);
        uint64_t v153 = v169;
        swift_arrayDestroy(v169, 3LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v153, -1LL, -1LL);
        uint64_t v154 = v143;
        uint64_t v75 = v184;
        swift_slowDealloc(v154, -1LL, -1LL);
      }

      else
      {

        uint64_t v148 = *(void (**)(char *, uint64_t))(v139 + 8);
        v148(v30, v75);
      }

      uint64_t v157 = v171(v185, v34, v75);
      uint64_t v158 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v3) + 0x1A0LL))(v157);
      uint64_t v159 = v173;
      if (v158)
      {
        id v160 = (void *)v158;
        int v161 = v173();
        uint64_t v162 = (uint64_t)v178;
        ((void (*)(void))Date.init())();
        sub_1004F4D84(v175, v161, v162, 0LL, 0LL);

        uint64_t v158 = (*(uint64_t (**)(uint64_t, uint64_t))(v174 + 8))(v162, v14);
      }

      unsigned int v163 = ((uint64_t (*)(uint64_t))v159)(v158);
      if (v163 >= *(_DWORD *)sub_100439E6C())
      {
        (*(void (**)(uint64_t))((swift_isaMask & *v3) + 0x1C0LL))(1LL);
      }

      else
      {
        uint64_t result = (*(uint64_t (**)(uint64_t *))((swift_isaMask & *v3) + 0x1C8LL))(&v186);
        if (*v164 == -1)
        {
LABEL_51:
          __break(1u);
          goto LABEL_52;
        }

        ++*v164;
        ((void (*)(uint64_t *, void))result)(&v186, 0LL);
      }

      v148(v34, v75);
      char v84 = 2;
LABEL_23:
      os_log_type_t v85 = (void *)((char *)v3
                     + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionKeyMaterialController_cryptoHandler);
      uint64_t v86 = *(void *)((char *)v3
                      + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionKeyMaterialController_cryptoHandler
                      + 24);
      uint64_t v87 = *(void *)((char *)v3
                      + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionKeyMaterialController_cryptoHandler
                      + 32);
      sub_10040A238( (void *)((char *)v3 + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionKeyMaterialController_cryptoHandler),  v86);
      uint64_t v88 = (*(uint64_t (**)(uint64_t, uint64_t))(v87 + 40))(v86, v87);
      unint64_t v90 = v89;
      LOBYTE(v87) = v91;
      uint64_t v92 = v85[3];
      uint64_t v93 = v85[4];
      sub_10040A238(v85, v92);
      uint64_t v94 = (*(uint64_t (**)(uint64_t, uint64_t))(v93 + 48))(v92, v93);
      uint64_t v97 = v94;
      unint64_t v98 = v95;
      char v99 = v96;
      if ((v87 & 1) != 0)
      {
        sub_10040A25C(v88, v90, 1);
        swift_errorRetain(v88);
        uint64_t v109 = swift_errorRetain(v88);
        uint64_t v101 = (os_log_s *)Logger.logObject.getter(v109);
        os_log_type_t v110 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v101, v110))
        {
          uint64_t v111 = swift_slowAlloc(22LL, -1LL);
          uint64_t v112 = swift_slowAlloc(64LL, -1LL);
          uint64_t v186 = v112;
          *(_DWORD *)uint64_t v111 = 136315394;
          uint64_t v189 = sub_1003FFBB0(0xD00000000000001BLL, 0x800000010083E260LL, &v186);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v189, &v190, v111 + 4, v111 + 12);
          *(_WORD *)(v111 + 12) = 2080;
          uint64_t v189 = v88;
          swift_errorRetain(v88);
          uint64_t v113 = sub_1003F5CB4(&qword_1009BB150);
          uint64_t v114 = String.init<A>(describing:)(&v189, v113);
          unint64_t v176 = v98;
          unint64_t v116 = v115;
          uint64_t v189 = sub_1003FFBB0(v114, v115, &v186);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v189, &v190, v111 + 14, v111 + 22);
          swift_bridgeObjectRelease(v116);
          uint64_t v67 = 1LL;
          sub_10040A268(v88, v90, 1);
          sub_10040A268(v88, v90, 1);
          _os_log_impl((void *)&_mh_execute_header, v101, v110, "%s: error: %s", (uint8_t *)v111, 0x16u);
          swift_arrayDestroy(v112, 2LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v112, -1LL, -1LL);
          swift_slowDealloc(v111, -1LL, -1LL);

          sub_10040A268(v97, v176, v99 & 1);
          sub_10040A268(v88, v90, 1);
          sub_10040A268(v88, v90, 1);
          goto LABEL_37;
        }

        uint64_t v67 = 1LL;
        sub_10040A268(v88, v90, 1);
        sub_10040A268(v97, v98, v99 & 1);
        sub_10040A268(v88, v90, 1);
        sub_10040A268(v88, v90, 1);
        uint64_t v138 = v88;
LABEL_36:
        swift_errorRelease(v138);

        goto LABEL_37;
      }

      if ((v96 & 1) != 0)
      {
        sub_10040A25C(v94, v95, 1);
        sub_10040A25C(v97, v98, 1);
        sub_10040A25C(v97, v98, 1);
        uint64_t v100 = sub_10040A25C(v88, v90, 0);
        uint64_t v101 = (os_log_s *)Logger.logObject.getter(v100);
        os_log_type_t v102 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v101, v102))
        {
          uint64_t v103 = swift_slowAlloc(22LL, -1LL);
          uint64_t v104 = swift_slowAlloc(64LL, -1LL);
          uint64_t v186 = v104;
          *(_DWORD *)uint64_t v103 = 136315394;
          uint64_t v189 = sub_1003FFBB0(0xD00000000000001BLL, 0x800000010083E260LL, &v186);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v189, &v190, v103 + 4, v103 + 12);
          *(_WORD *)(v103 + 12) = 2080;
          uint64_t v189 = v97;
          swift_errorRetain(v97);
          uint64_t v105 = sub_1003F5CB4(&qword_1009BB150);
          uint64_t v106 = String.init<A>(describing:)(&v189, v105);
          unint64_t v108 = v107;
          uint64_t v189 = sub_1003FFBB0(v106, v107, &v186);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v189, &v190, v103 + 14, v103 + 22);
          swift_bridgeObjectRelease(v108);
          uint64_t v67 = 1LL;
          sub_10040A268(v97, v98, 1);
          sub_10040A268(v97, v98, 1);
          _os_log_impl((void *)&_mh_execute_header, v101, v102, "%s: error: %s", (uint8_t *)v103, 0x16u);
          swift_arrayDestroy(v104, 2LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v104, -1LL, -1LL);
          swift_slowDealloc(v103, -1LL, -1LL);

          sub_10040A268(v88, v90, 0);
          sub_10040A268(v97, v98, 1);
          sub_10040A268(v97, v98, 1);
          sub_10040A268(v88, v90, 0);
LABEL_37:
          (*(void (**)(char *, uint64_t))(v183 + 8))(v185, v184);
          a2 = v180;
LABEL_40:
          uint64_t v6 = v181;
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v182 + 56))(a2, v67, 1LL, v6);
        }

        sub_10040A268(v88, v90, 0);
        uint64_t v67 = 1LL;
        sub_10040A268(v97, v98, 1);
        sub_10040A268(v88, v90, 0);
        sub_10040A268(v97, v98, 1);
        sub_10040A268(v97, v98, 1);
        uint64_t v138 = v97;
        goto LABEL_36;
      }

      char v117 = v84;
      uint64_t result = swift_beginAccess(&dword_1009C7528, &v186, 1LL, 0LL);
      if (dword_1009C7528 != -1)
      {
        ++dword_1009C7528;
        uint64_t v118 = v176;
        (*(void (**)(unint64_t, char *, uint64_t))(v183 + 16))(v176, v185, v184);
        sub_10040A25C(v88, v90, 0);
        sub_10040A25C(v97, v98, 0);
        sub_10040A25C(v97, v98, 0);
        uint64_t v119 = sub_10040A25C(v88, v90, 0);
        unint64_t v120 = v90;
        uint64_t v121 = (uint64_t)v178;
        Date.init()(v119);
        uint64_t v122 = *(void *)((char *)v3
                         + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionKeyMaterialController_groupID);
        int v123 = dword_1009C7528;
        uint64_t v124 = swift_bridgeObjectRetain(*(void *)((char *)v3
                                                  + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionKeyMaterialController_groupID
                                                  + 8));
        uint64_t v166 = v175;
        char v165 = v117;
        int v125 = v179;
        uint64_t v175 = v97;
        unint64_t v176 = v98;
        sub_10043B45C(1, v118, v97, v98, v88, v120, v121, v122, v179, v124, v123, 0, v165, v166, 0);
        uint64_t v126 = v177;
        uint64_t v127 = sub_1003F5FC8((uint64_t)v125, v177, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        uint64_t v128 = (os_log_s *)Logger.logObject.getter(v127);
        os_log_type_t v129 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v128, v129))
        {
          uint64_t v130 = swift_slowAlloc(22LL, -1LL);
          uint64_t v131 = swift_slowAlloc(64LL, -1LL);
          uint64_t v189 = v131;
          *(_DWORD *)uint64_t v130 = 136315394;
          uint64_t v188 = sub_1003FFBB0(0xD00000000000001BLL, 0x800000010083E260LL, &v189);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v188, &v189, v130 + 4, v130 + 12);
          *(_WORD *)(v130 + 12) = 2080;
          uint64_t v132 = sub_10040A2B0( &qword_1009B90F0,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent,  (uint64_t)&unk_100718F00);
          uint64_t v133 = dispatch thunk of CustomStringConvertible.description.getter(v181, v132);
          unint64_t v135 = v134;
          uint64_t v188 = sub_1003FFBB0(v133, v134, &v189);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v188, &v189, v130 + 14, v130 + 22);
          swift_bridgeObjectRelease(v135);
          sub_1003F6050(v126, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
          _os_log_impl((void *)&_mh_execute_header, v128, v129, "%s: Created key %s", (uint8_t *)v130, 0x16u);
          swift_arrayDestroy(v131, 2LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v131, -1LL, -1LL);
          swift_slowDealloc(v130, -1LL, -1LL);

          sub_10040A268(v88, v120, 0);
          uint64_t v137 = v175;
          unint64_t v136 = v176;
          sub_10040A268(v175, v176, 0);
          sub_10040A268(v137, v136, 0);
          sub_10040A268(v88, v120, 0);
        }

        else
        {
          sub_10040A268(v88, v120, 0);
          uint64_t v156 = v175;
          unint64_t v155 = v176;
          sub_10040A268(v175, v176, 0);
          sub_10040A268(v156, v155, 0);
          sub_10040A268(v88, v120, 0);
          sub_1003F6050(v126, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        }

        (*(void (**)(char *, uint64_t))(v183 + 8))(v185, v184);
        a2 = v180;
        sub_1003F600C((uint64_t)v179, v180, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        uint64_t v67 = 0LL;
        goto LABEL_40;
      }

      __break(1u);
      goto LABEL_51;
    }

    uint64_t v76 = sub_10040A274((uint64_t)v21, &qword_1009B90E8);
    uint64_t v77 = (os_log_s *)Logger.logObject.getter(v76);
    os_log_type_t v78 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v77, v78))
    {
      uint64_t v79 = swift_slowAlloc(22LL, -1LL);
      uint64_t v80 = swift_slowAlloc(64LL, -1LL);
      uint64_t v189 = v80;
      *(_DWORD *)uint64_t v79 = 136315394;
      uint64_t v186 = sub_1003FFBB0(0xD00000000000001BLL, 0x800000010083E260LL, &v189);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v186, v187, v79 + 4, v79 + 12);
      *(_WORD *)(v79 + 12) = 2080;
      uint64_t v186 = __PAIR64__(v172, v71);
      v187[0] = v73;
      uint64_t v81 = String.init<A>(describing:)(&v186, &type metadata for IDSGroupEncryptionKeyMaterialShortKIInfo);
      unint64_t v83 = v82;
      uint64_t v186 = sub_1003FFBB0(v81, v82, &v189);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v186, v187, v79 + 14, v79 + 22);
      swift_bridgeObjectRelease(v83);
      _os_log_impl( (void *)&_mh_execute_header,  v77,  v78,  "%s: Failed to generate keyIndex with [ShortKI info: %s]",  (uint8_t *)v79,  0x16u);
      swift_arrayDestroy(v80, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v80, -1LL, -1LL);
      swift_slowDealloc(v79, -1LL, -1LL);
    }

LABEL_22:
    UUID.init()();
    char v84 = 0;
    goto LABEL_23;
  }

  uint64_t result = (v44 + 1);
  if ((_DWORD)v44 != -1)
  {
    __n128 v46 = *(uint64_t (**)(uint64_t))((swift_isaMask & *v3) + 0x1C0LL);
    uint64_t v47 = v46(result);
    unsigned int v48 = ((uint64_t (*)(uint64_t))v40)(v47);
    if (*(_DWORD *)sub_100439E6C() < v48) {
      v46(1LL);
    }
    uint64_t v49 = v3;
    uint64_t v50 = (os_log_s *)Logger.logObject.getter(v49);
    os_log_type_t v51 = static os_log_type_t.default.getter();
    int v52 = v51;
    if (os_log_type_enabled(v50, v51))
    {
      uint64_t v53 = swift_slowAlloc(24LL, -1LL);
      uint64_t v172 = swift_slowAlloc(32LL, -1LL);
      uint64_t v186 = v172;
      *(_DWORD *)uint64_t v53 = 136315650;
      LODWORD(v171) = v52;
      uint64_t v189 = sub_1003FFBB0(0xD00000000000001BLL, 0x800000010083E260LL, &v186);
      os_log_t v170 = v50;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v189, &v190, v53 + 4, v53 + 12);
      *(_WORD *)(v53 + 12) = 1024;
      LODWORD(v189) = v44;
      uint64_t v54 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v189, (char *)&v189 + 4, v53 + 14, v53 + 18);
      *(_WORD *)(v53 + 1_Block_object_dispose(va, 8) = 1024;
      __n128 v40 = v173;
      LODWORD(v189) = ((uint64_t (*)(uint64_t))v173)(v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v189, (char *)&v189 + 4, v53 + 20, v53 + 24);

      os_log_t v55 = v170;
      _os_log_impl( (void *)&_mh_execute_header,  v170,  (os_log_type_t)v171,  "%s: Found cached rollIndex %u, continuing from %u",  (uint8_t *)v53,  0x18u);
      uint64_t v56 = v172;
      swift_arrayDestroy(v172, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v56, -1LL, -1LL);
      swift_slowDealloc(v53, -1LL, -1LL);
    }

    else
    {

      __n128 v40 = v173;
    }

    goto LABEL_18;
  }

void *sub_1003FE068()
{
  __n128 v4 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5, v6);
  __n128 v8 = (char *)&v31 - v7;
  uint64_t v9 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15, v16);
  __n128 v18 = (char *)&v31 - v17;
  __chkstk_darwin(v19, v20);
  uint64_t v22 = (char *)&v31 - v21;
  uint64_t v25 = __chkstk_darwin(v23, v24);
  __n128 v27 = (char *)&v31 - v26;
  __n128 v32 = &_swiftEmptySetSingleton;
  (*(void (**)(uint64_t))((swift_isaMask & *v0) + 0x118LL))(v25);
  __n128 v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (v28(v8, 1LL, v9) == 1)
  {
    uint64_t v29 = sub_10040A274((uint64_t)v8, &qword_1009B8E08);
  }

  else
  {
    __n128 v31 = v14;
    sub_1003F600C((uint64_t)v8, (uint64_t)v27, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    sub_1003F5FC8((uint64_t)v27, (uint64_t)v18, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    sub_100400D68((uint64_t)v22, (uint64_t)v18);
    sub_1003F6050((uint64_t)v22, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    uint64_t v14 = v31;
    uint64_t v29 = sub_1003F6050((uint64_t)v27, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
  }

  (*(void (**)(uint64_t))((swift_isaMask & *v0) + 0x120LL))(v29);
  if (v28(v4, 1LL, v9) == 1)
  {
    sub_10040A274((uint64_t)v4, &qword_1009B8E08);
  }

  else
  {
    sub_1003F600C((uint64_t)v4, (uint64_t)v14, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    sub_1003F5FC8((uint64_t)v14, (uint64_t)v18, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    sub_100400D68((uint64_t)v22, (uint64_t)v18);
    sub_1003F6050((uint64_t)v22, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    sub_1003F6050((uint64_t)v14, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
  }

  return v32;
}

id sub_1003FE424()
{
  __n128 v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v9 = __chkstk_darwin(v7, v8);
  __n128 v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(uint64_t))((swift_isaMask & *v0) + 0x118LL))(v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1LL, v5) == 1)
  {
    sub_10040A274((uint64_t)v4, &qword_1009B8E08);
    return 0LL;
  }

  else
  {
    sub_1003F600C((uint64_t)v4, (uint64_t)v11, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    id v12 = sub_10043A878();
    sub_1003F6050((uint64_t)v11, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
  }

  return v12;
}

uint64_t sub_1003FE548(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v56 = *(void *)(v3 - 8);
  uint64_t v57 = v3;
  __chkstk_darwin(v4, v5);
  os_log_t v55 = (char *)v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v53 = *(void *)(v7 - 8);
  uint64_t v54 = v7;
  __chkstk_darwin(v8, v9);
  int v52 = (char *)v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1003F5CB4(&qword_1009B8E08);
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (char *)v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v17, v18);
  uint64_t v58 = (uint64_t)v51 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.KeyState(0LL);
  __chkstk_darwin(v21, v22);
  __n128 v24 = (char *)v51 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v25, v26);
  __n128 v28 = (char *)v51 - v27;
  uint64_t v29 = a1;
  sub_1003F5FC8(a1, (uint64_t)v51 - v27, type metadata accessor for IDSGroupEncryptionKeyMaterialController.KeyState);
  LODWORD(a1) = swift_getEnumCaseMultiPayload(v28, v20);
  uint64_t result = sub_1003F6050((uint64_t)v28, type metadata accessor for IDSGroupEncryptionKeyMaterialController.KeyState);
  if ((_DWORD)a1 == 2)
  {
    uint64_t v31 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.State(0LL);
    sub_1003FCC58(*(void *)(v29 + *(int *)(v31 + 32)), (uint64_t)v14);
    __n128 v32 = v1;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1LL, v15) == 1)
    {
      sub_10040A274((uint64_t)v14, &qword_1009B8E08);
      uint64_t v33 = v29;
    }

    else
    {
      uint64_t v34 = v58;
      sub_1003F600C((uint64_t)v14, v58, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v24, 1LL, 1LL, v15);
      uint64_t v35 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.OneKey(0LL);
      uint64_t v36 = sub_1003F5FC8( v34,  (uint64_t)&v24[*(int *)(v35 + 20)],  type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      Date.init()(v36);
      swift_storeEnumTagMultiPayload(v24, v20, 0LL);
      uint64_t v37 = v29;
      sub_1003F64F0((uint64_t)v24, v29);
      uint64_t v38 = v29 + *(int *)(v31 + 28);
      uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong(v38);
      uint64_t v40 = *(void *)(v38 + 8);
      v51[1] = *(void *)&v32[OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionKeyMaterialController_q];
      int v41 = (void *)swift_allocObject(&unk_100904D40, 40LL, 7LL);
      v41[2] = Strong;
      v41[3] = v40;
      v41[4] = v32;
      aBlock[4] = sub_100402294;
      uint64_t v61 = v41;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = sub_1003F8400;
      aBlock[3] = &unk_100904D58;
      uint64_t v42 = _Block_copy(aBlock);
      id v43 = Strong;
      unint64_t v44 = v32;
      uint64_t v45 = v52;
      static DispatchQoS.unspecified.getter(v44);
      BOOL v59 = &_swiftEmptyArrayStorage;
      uint64_t v46 = sub_10040A2B0( (unint64_t *)&unk_1009BAC40,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v47 = sub_1003F5CB4((uint64_t *)&unk_1009B9870);
      uint64_t v48 = sub_1004021DC((unint64_t *)&qword_1009BAC50, (uint64_t *)&unk_1009B9870);
      uint64_t v49 = v55;
      uint64_t v50 = v57;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v59, v47, v48, v57, v46);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v45, v49, v42);
      _Block_release(v42);

      (*(void (**)(char *, uint64_t))(v56 + 8))(v49, v50);
      (*(void (**)(char *, uint64_t))(v53 + 8))(v45, v54);
      sub_1003F6050(v58, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      swift_release(v61);
      uint64_t v33 = v37;
    }

    return sub_1003F886C(v33);
  }

  return result;
}

void sub_1003FE974()
{
  uint64_t v1 = *(void *)((char *)v0 + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionKeyMaterialController_state);
  uint64_t v2 = v1 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v1 + 16LL);
  uint64_t v3 = (os_unfair_lock_s *)(v1 + ((*(unsigned int *)(*(void *)v1 + 48LL) + 3LL) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v3);
  (*(void (**)(uint64_t))((swift_isaMask & *v0) + 0x1E8LL))(v2);
  os_unfair_lock_unlock(v3);
}

void sub_1003FEA84()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)((char *)v0 + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionKeyMaterialController_state);
  uint64_t v3 = *(void *)(class metadata base offset for ManagedBuffer + *(void *)v2 + 16LL);
  __n128 v4 = (os_unfair_lock_s *)(v2 + ((*(unsigned int *)(*(void *)v2 + 48LL) + 3LL) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v4);
  __n128 v5 = (char *)v0 + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionKeyMaterialController_l;
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v13 = v3;
    __n128 v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    uint64_t v15 = v10;
    *(_DWORD *)__n128 v9 = 136315138;
    uint64_t v14 = sub_1003FFBB0(0x29287465736572LL, 0xE700000000000000LL, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v9 + 4, v9 + 12);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "%s: setting state to .noKey", v9, 0xCu);
    swift_arrayDestroy(v10, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1LL, -1LL);
    __n128 v11 = v9;
    uint64_t v3 = v13;
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  sub_1003F6050(v2 + v3, type metadata accessor for IDSGroupEncryptionKeyMaterialController.KeyState);
  uint64_t v12 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.KeyState(0LL);
  swift_storeEnumTagMultiPayload(v2 + v3, v12, 2LL);
  (*(void (**)(char *, void, unint64_t, uint64_t))((swift_isaMask & *v1) + 0x208LL))( v5,  0LL,  0xE000000000000000LL,  v2 + v3);
  os_unfair_lock_unlock(v4);
}

void sub_1003FEC70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)((char *)v3 + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionKeyMaterialController_state);
  uint64_t v8 = v7 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v7 + 16LL);
  __n128 v9 = (os_unfair_lock_s *)(v7 + ((*(unsigned int *)(*(void *)v7 + 48LL) + 3LL) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))((swift_isaMask & *v3) + 0x208LL))(a1, a2, a3, v8);
  os_unfair_lock_unlock(v9);
}

void sub_1003FED14(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v115 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.TwoKey(0LL);
  __chkstk_darwin(v8, v9);
  uint64_t v116 = (uint64_t)&v113 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for IDSGroupEncryptionKeyMaterialController.OneKey(0LL);
  __chkstk_darwin(v11, v12);
  uint64_t v114 = (uint64_t)&v113 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v125 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.KeyState(0LL);
  __chkstk_darwin(v14, v15);
  uint64_t v122 = (uint64_t)&v113 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v17, v18);
  uint64_t v117 = (uint64_t)&v113 - v19;
  uint64_t v128 = sub_1003F5CB4(&qword_1009B8E08);
  __chkstk_darwin(v20, v21);
  unint64_t v120 = (char *)&v113 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v23, v24);
  uint64_t v119 = (uint64_t)&v113 - v25;
  __chkstk_darwin(v26, v27);
  uint64_t v118 = (uint64_t)&v113 - v28;
  uint64_t v121 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.State(0LL);
  __chkstk_darwin(v29, v30);
  uint64_t v126 = (uint64_t)&v113 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v32, v33);
  uint64_t v127 = (uint64_t)&v113 - v34;
  __chkstk_darwin(v35, v36);
  uint64_t v124 = (uint64_t)&v113 - v37;
  __chkstk_darwin(v38, v39);
  uint64_t v123 = (uint64_t)&v113 - v40;
  __chkstk_darwin(v41, v42);
  unint64_t v44 = (char *)&v113 - v43;
  uint64_t v129 = a4;
  sub_1003F5FC8(a4, (uint64_t)&v113 - v43, v45);
  uint64_t v46 = swift_bridgeObjectRetain_n(a3, 2LL);
  uint64_t v131 = a1;
  uint64_t v47 = (os_log_s *)Logger.logObject.getter(v46);
  os_log_type_t v48 = static os_log_type_t.default.getter();
  BOOL v49 = os_log_type_enabled(v47, v48);
  uint64_t v130 = a2;
  if (v49)
  {
    uint64_t v50 = swift_slowAlloc(22LL, -1LL);
    uint64_t v51 = swift_slowAlloc(64LL, -1LL);
    v133[0] = v51;
    *(_DWORD *)uint64_t v50 = 136315394;
    swift_bridgeObjectRetain(a3);
    uint64_t v132 = sub_1003FFBB0(a2, a3, v133);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, v133, v50 + 4, v50 + 12);
    swift_bridgeObjectRelease_n(a3, 3LL);
    *(_WORD *)(v50 + 12) = 2080;
    uint64_t v52 = sub_1003F6258();
    unint64_t v54 = v53;
    uint64_t v132 = sub_1003FFBB0(v52, v53, v133);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, v133, v50 + 14, v50 + 22);
    swift_bridgeObjectRelease(v54);
    sub_1003F6050((uint64_t)v44, type metadata accessor for IDSGroupEncryptionKeyMaterialController.State);
    _os_log_impl((void *)&_mh_execute_header, v47, v48, "%sKeyMaterialController (%s)", (uint8_t *)v50, 0x16u);
    swift_arrayDestroy(v51, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v51, -1LL, -1LL);
    swift_slowDealloc(v50, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(a3, 2LL);

    sub_1003F6050((uint64_t)v44, type metadata accessor for IDSGroupEncryptionKeyMaterialController.State);
  }

  uint64_t v55 = v129;
  uint64_t v56 = v123;
  sub_1003F5FC8(v129, v123, type metadata accessor for IDSGroupEncryptionKeyMaterialController.State);
  uint64_t v57 = swift_bridgeObjectRetain_n(a3, 2LL);
  uint64_t v58 = (void *)Logger.logObject.getter(v57);
  os_log_type_t v59 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled((os_log_t)v58, v59))
  {
    swift_bridgeObjectRelease_n(a3, 2LL);

    sub_1003F6050(v56, type metadata accessor for IDSGroupEncryptionKeyMaterialController.State);
    goto LABEL_13;
  }

  uint64_t v60 = swift_slowAlloc(22LL, -1LL);
  uint64_t v61 = swift_slowAlloc(64LL, -1LL);
  v133[0] = v61;
  *(_DWORD *)uint64_t v60 = 136315394;
  swift_bridgeObjectRetain(a3);
  uint64_t v132 = sub_1003FFBB0(v130, a3, v133);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, v133, v60 + 4, v60 + 12);
  swift_bridgeObjectRelease_n(a3, 3LL);
  *(_WORD *)(v60 + 12) = 2080;
  uint64_t v62 = v117;
  sub_1003F5FC8(v56, v117, type metadata accessor for IDSGroupEncryptionKeyMaterialController.KeyState);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v62, v125);
  if (EnumCaseMultiPayload)
  {
    uint64_t v64 = v118;
    if (EnumCaseMultiPayload != 1)
    {
      uint64_t v70 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v70 - 8) + 56LL))(v64, 1LL, 1LL, v70);
      goto LABEL_12;
    }

    uint64_t v65 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.TwoKey;
    uint64_t v66 = v116;
    sub_1003F600C(v62, v116, type metadata accessor for IDSGroupEncryptionKeyMaterialController.TwoKey);
    sub_1003F5C6C(v66, v64);
    uint64_t v67 = v66;
  }

  else
  {
    uint64_t v65 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.OneKey;
    uint64_t v68 = v62;
    uint64_t v69 = v114;
    sub_1003F600C(v68, v114, type metadata accessor for IDSGroupEncryptionKeyMaterialController.OneKey);
    uint64_t v64 = v118;
    sub_1003F5C6C(v69, v118);
    uint64_t v67 = v69;
  }

  sub_1003F6050(v67, v65);
LABEL_12:
  uint64_t v71 = String.init<A>(describing:)(v64, v128);
  unint64_t v73 = v72;
  uint64_t v132 = sub_1003FFBB0(v71, v72, v133);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, v133, v60 + 14, v60 + 22);
  swift_bridgeObjectRelease(v73);
  sub_1003F6050(v56, type metadata accessor for IDSGroupEncryptionKeyMaterialController.State);
  _os_log_impl((void *)&_mh_execute_header, (os_log_t)v58, v59, "%s    previous: %s", (uint8_t *)v60, 0x16u);
  swift_arrayDestroy(v61, 2LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v61, -1LL, -1LL);
  swift_slowDealloc(v60, -1LL, -1LL);

  uint64_t v55 = v129;
LABEL_13:
  uint64_t v74 = v124;
  sub_1003F5FC8(v55, v124, type metadata accessor for IDSGroupEncryptionKeyMaterialController.State);
  uint64_t v75 = swift_bridgeObjectRetain_n(a3, 2LL);
  uint64_t v76 = (os_log_s *)Logger.logObject.getter(v75);
  os_log_type_t v77 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v76, v77))
  {
    uint64_t v78 = swift_slowAlloc(22LL, -1LL);
    uint64_t v79 = swift_slowAlloc(64LL, -1LL);
    v133[0] = v79;
    *(_DWORD *)uint64_t v78 = 136315394;
    swift_bridgeObjectRetain(a3);
    uint64_t v132 = sub_1003FFBB0(v130, a3, v133);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, v133, v78 + 4, v78 + 12);
    swift_bridgeObjectRelease_n(a3, 3LL);
    *(_WORD *)(v78 + 12) = 2080;
    uint64_t v80 = v119;
    sub_1003F608C(v119);
    uint64_t v81 = String.init<A>(describing:)(v80, v128);
    unint64_t v83 = v82;
    uint64_t v132 = sub_1003FFBB0(v81, v82, v133);
    uint64_t v55 = v129;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, v133, v78 + 14, v78 + 22);
    swift_bridgeObjectRelease(v83);
    sub_1003F6050(v74, type metadata accessor for IDSGroupEncryptionKeyMaterialController.State);
    _os_log_impl((void *)&_mh_execute_header, v76, v77, "%s    current: %s", (uint8_t *)v78, 0x16u);
    swift_arrayDestroy(v79, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v79, -1LL, -1LL);
    swift_slowDealloc(v78, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(a3, 2LL);

    sub_1003F6050(v74, type metadata accessor for IDSGroupEncryptionKeyMaterialController.State);
  }

  uint64_t v84 = v127;
  sub_1003F5FC8(v55, v127, type metadata accessor for IDSGroupEncryptionKeyMaterialController.State);
  uint64_t v85 = swift_bridgeObjectRetain_n(a3, 2LL);
  uint64_t v86 = (os_log_s *)Logger.logObject.getter(v85);
  os_log_type_t v87 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v86, v87))
  {
    uint64_t v88 = swift_slowAlloc(22LL, -1LL);
    uint64_t v89 = swift_slowAlloc(64LL, -1LL);
    v133[0] = v89;
    *(_DWORD *)uint64_t v88 = 136315394;
    swift_bridgeObjectRetain(a3);
    uint64_t v132 = sub_1003FFBB0(v130, a3, v133);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, v133, v88 + 4, v88 + 12);
    swift_bridgeObjectRelease_n(a3, 3LL);
    *(_WORD *)(v88 + 12) = 2080;
    uint64_t v90 = v122;
    sub_1003F5FC8(v84, v122, type metadata accessor for IDSGroupEncryptionKeyMaterialController.KeyState);
    int v91 = swift_getEnumCaseMultiPayload(v90, v125);
    if (v91)
    {
      uint64_t v92 = (uint64_t)v120;
      if (v91 == 1)
      {
        uint64_t v93 = v116;
        sub_1003F600C(v122, v116, type metadata accessor for IDSGroupEncryptionKeyMaterialController.TwoKey);
        sub_1003F5FC8(v93 + *(int *)(v115 + 24), v92, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        sub_1003F6050(v93, type metadata accessor for IDSGroupEncryptionKeyMaterialController.TwoKey);
        uint64_t v94 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v94 - 8) + 56LL))(v92, 0LL, 1LL, v94);
      }

      else
      {
        uint64_t v96 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v96 - 8) + 56LL))(v92, 1LL, 1LL, v96);
      }
    }

    else
    {
      uint64_t v95 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
      uint64_t v92 = (uint64_t)v120;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v95 - 8) + 56LL))(v120, 1LL, 1LL, v95);
      sub_1003F6050(v122, type metadata accessor for IDSGroupEncryptionKeyMaterialController.KeyState);
    }

    uint64_t v97 = String.init<A>(describing:)(v92, v128);
    unint64_t v99 = v98;
    uint64_t v132 = sub_1003FFBB0(v97, v98, v133);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, v133, v88 + 14, v88 + 22);
    swift_bridgeObjectRelease(v99);
    sub_1003F6050(v127, type metadata accessor for IDSGroupEncryptionKeyMaterialController.State);
    _os_log_impl((void *)&_mh_execute_header, v86, v87, "%s    next: %s", (uint8_t *)v88, 0x16u);
    swift_arrayDestroy(v89, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v89, -1LL, -1LL);
    swift_slowDealloc(v88, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(a3, 2LL);

    sub_1003F6050(v84, type metadata accessor for IDSGroupEncryptionKeyMaterialController.State);
  }

  uint64_t v100 = swift_bridgeObjectRetain_n(a3, 2LL);
  uint64_t v101 = (os_log_s *)Logger.logObject.getter(v100);
  os_log_type_t v102 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v101, v102))
  {
    uint64_t v103 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v104 = swift_slowAlloc(32LL, -1LL);
    v133[0] = v104;
    *(_DWORD *)uint64_t v103 = 136315138;
    swift_bridgeObjectRetain(a3);
    uint64_t v132 = sub_1003FFBB0(v130, a3, v133);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, v133, v103 + 4, v103 + 12);
    swift_bridgeObjectRelease_n(a3, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v101, v102, "%s    ", v103, 0xCu);
    swift_arrayDestroy(v104, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v104, -1LL, -1LL);
    swift_slowDealloc(v103, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(a3, 2LL);
  }

  uint64_t v105 = v55;
  uint64_t v106 = v126;
  sub_1003F5FC8(v105, v126, type metadata accessor for IDSGroupEncryptionKeyMaterialController.State);
  uint64_t v107 = swift_bridgeObjectRetain_n(a3, 2LL);
  unint64_t v108 = (os_log_s *)Logger.logObject.getter(v107);
  os_log_type_t v109 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v108, v109))
  {
    uint64_t v110 = swift_slowAlloc(22LL, -1LL);
    uint64_t v111 = swift_slowAlloc(32LL, -1LL);
    v133[0] = v111;
    *(_DWORD *)uint64_t v110 = 136315394;
    swift_bridgeObjectRetain(a3);
    uint64_t v132 = sub_1003FFBB0(v130, a3, v133);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, v133, v110 + 4, v110 + 12);
    swift_bridgeObjectRelease_n(a3, 3LL);
    *(_WORD *)(v110 + 12) = 2048;
    uint64_t v112 = *(void *)(v106 + *(int *)(v121 + 60));
    sub_1003F6050(v106, type metadata accessor for IDSGroupEncryptionKeyMaterialController.State);
    uint64_t v132 = v112;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, v133, v110 + 14, v110 + 22);
    _os_log_impl((void *)&_mh_execute_header, v108, v109, "%s    generation: %llu", (uint8_t *)v110, 0x16u);
    swift_arrayDestroy(v111, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v111, -1LL, -1LL);
    swift_slowDealloc(v110, -1LL, -1LL);
  }

  else
  {
    sub_1003F6050(v106, type metadata accessor for IDSGroupEncryptionKeyMaterialController.State);
    swift_bridgeObjectRelease_n(a3, 2LL);
  }
}

uint64_t sub_1003FFA6C()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **v0) + 0x200LL))();
}

char *sub_1003FFAA4(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_1003F5CB4((uint64_t *)&unk_1009BB140);
      __n128 v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 17;
      }
      *((void *)v11 + 2) = v8;
      *((void *)v11 + 3) = 2 * (v13 >> 4);
      __n128 v14 = v11 + 32;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      __n128 v11 = (char *)&_swiftEmptyArrayStorage;
      __n128 v14 = (char *)&_swiftEmptyArrayStorage + 32;
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[16 * v8 + 32]) {
          memmove(v14, a4 + 32, 16 * v8);
        }
        *((void *)a4 + 2) = 0LL;
        goto LABEL_24;
      }
    }

    sub_10040A53C(0LL, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

uint64_t sub_1003FFBB0(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_1003FFC80(v12, 0LL, 0LL, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_10040A668((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }

  else
  {
    uint64_t ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_10040A668((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }

    swift_bridgeObjectRetain(a2);
  }

  sub_10040A648(v12);
  return v7;
}

uint64_t sub_1003FFC80(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000LL) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0LL, HIBYTE(a6) & 0xF, __dst, a3);
            uint64_t result = 0LL;
            *a1 = (uint64_t)__dst;
            return result;
          }

          goto LABEL_17;
        }
      }
    }

uint64_t sub_1003FFE38(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_1003FFECC(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1004000A4(0, *(void *)(v2 + 16) + 1LL, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_1004000A4(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

void *sub_1003FFECC(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000LL) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v4 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v4)
  {
    while (1)
    {
      char v5 = sub_100400040(v4, 0LL);
      if (v4 < 0) {
        break;
      }
      uint64_t v6 = v5;
      uint64_t v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0) {
        goto LABEL_14;
      }
      if (v7 == v4) {
        return v6;
      }
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "invalid Collection: less than 'count' elements in collection",  60LL,  2LL,  "Swift/ContiguousArrayBuffer.swift",  33LL,  v10,  1122LL,  0);
      __break(1u);
LABEL_10:
      uint64_t v4 = String.UTF8View._foreignCount()();
      if (!v4) {
        return &_swiftEmptyArrayStorage;
      }
    }

    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableBufferPointer with negative count",  46LL,  2LL,  "Swift/UnsafeBufferPointer.swift",  31LL,  v10,  71LL,  0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Insufficient space allocated to copy string contents",  52LL,  2LL,  "Swift/StringUTF8View.swift",  26LL,  v10,  430LL,  0);
    __break(1u);
  }

  else
  {
    return &_swiftEmptyArrayStorage;
  }

  return result;
}

void *sub_100400040(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  uint64_t v4 = sub_1003F5CB4((uint64_t *)&unk_1009B97F0);
  char v5 = (void *)swift_allocObject(v4, v2 + 32, 7LL);
  size_t v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_1004000A4(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_1003F5CB4((uint64_t *)&unk_1009B97F0);
    __n128 v11 = (char *)swift_allocObject(v10, v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * v12 - 64;
  }

  else
  {
    __n128 v11 = (char *)&_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  int v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8]) {
      memmove(v13, v14, v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }

Swift::Int sub_1004001F0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_1003F5CB4(&qword_1009B9100);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    __n128 v30 = v2;
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    int64_t v8 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1LL << v7);
    }
    else {
      uint64_t v9 = -1LL;
    }
    unint64_t v10 = v9 & *(void *)(v3 + 56);
    int64_t v11 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v12 = v5 + 56;
    Swift::Int result = swift_retain(v3);
    int64_t v14 = 0LL;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v14 << 6);
      }

      else
      {
        int64_t v18 = v14 + 1;
        if (__OFADD__(v14, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v18 >= v11) {
          goto LABEL_36;
        }
        unint64_t v19 = v8[v18];
        ++v14;
        if (!v19)
        {
          int64_t v14 = v18 + 1;
          if (v18 + 1 >= v11) {
            goto LABEL_36;
          }
          unint64_t v19 = v8[v14];
          if (!v19)
          {
            int64_t v14 = v18 + 2;
            if (v18 + 2 >= v11) {
              goto LABEL_36;
            }
            unint64_t v19 = v8[v14];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v11)
              {
LABEL_36:
                swift_release(v3);
                uint64_t v2 = v30;
                uint64_t v29 = 1LL << *(_BYTE *)(v3 + 32);
                if (v29 > 63) {
                  bzero((void *)(v3 + 56), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *int64_t v8 = -1LL << v29;
                }
                *(void *)(v3 + 16) = 0LL;
                break;
              }

              unint64_t v19 = v8[v20];
              if (!v19)
              {
                while (1)
                {
                  int64_t v14 = v20 + 1;
                  if (__OFADD__(v20, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v14 >= v11) {
                    goto LABEL_36;
                  }
                  unint64_t v19 = v8[v14];
                  ++v20;
                  if (v19) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v14 = v20;
            }
          }
        }

uint64_t sub_10040048C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  uint64_t v40 = *(void *)(v4 - 8);
  uint64_t v41 = v4;
  __chkstk_darwin(v5, v6);
  int64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_1003F5CB4(&qword_1009B90E0);
  uint64_t v10 = static _SetStorage.resize(original:capacity:move:)(v9, a1, 1LL);
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16)) {
    goto LABEL_39;
  }
  uint64_t v37 = v2;
  uint64_t v12 = 1LL << *(_BYTE *)(v9 + 32);
  uint64_t v13 = *(void *)(v9 + 56);
  __n128 v39 = (void *)(v9 + 56);
  if (v12 < 64) {
    uint64_t v14 = ~(-1LL << v12);
  }
  else {
    uint64_t v14 = -1LL;
  }
  unint64_t v15 = v14 & v13;
  int64_t v38 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v16 = v10 + 56;
  uint64_t result = swift_retain(v9);
  int64_t v18 = 0LL;
  while (1)
  {
    if (v15)
    {
      unint64_t v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v21 = v20 | (v18 << 6);
      goto LABEL_26;
    }

    int64_t v22 = v18 + 1;
    if (__OFADD__(v18, 1LL))
    {
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      return result;
    }

    if (v22 >= v38) {
      goto LABEL_35;
    }
    unint64_t v23 = v39[v22];
    ++v18;
    if (!v23)
    {
      int64_t v18 = v22 + 1;
      if (v22 + 1 >= v38) {
        goto LABEL_35;
      }
      unint64_t v23 = v39[v18];
      if (!v23)
      {
        int64_t v18 = v22 + 2;
        if (v22 + 2 >= v38) {
          goto LABEL_35;
        }
        unint64_t v23 = v39[v18];
        if (!v23) {
          break;
        }
      }
    }

uint64_t sub_1004007EC(uint64_t a1, __n128 a2, __n128 a3)
{
  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  unint64_t v7 = (1LL << v5) + 63;
  uint64_t v8 = v7 >> 6;
  size_t v9 = 8 * (v7 >> 6);
  if (v6 <= 0xD || (swift_stdlib_isStackAllocationSafe(8 * (v7 >> 6), 8LL) & 1) != 0)
  {
    __chkstk_darwin(a2, a3);
    bzero((char *)&v16 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0LL), v9);
    sub_100400948((unint64_t *)((char *)&v16 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0LL)), v8, a1);
    uint64_t v11 = v10;
    uint64_t v12 = swift_release(a1);
    if (v3) {
      swift_willThrow(v12);
    }
  }

  else
  {
    uint64_t v13 = (void *)swift_slowAlloc(v9, -1LL);
    bzero(v13, v9);
    sub_100400948((unint64_t *)v13, v8, a1);
    uint64_t v11 = v14;
    swift_release(a1);
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  return v11;
}

void sub_100400948(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = 0LL;
  int64_t v4 = 0LL;
  uint64_t v5 = a3 + 56;
  uint64_t v6 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v7 = -1LL;
  if (v6 < 64) {
    uint64_t v7 = ~(-1LL << v6);
  }
  unint64_t v8 = v7 & *(void *)(a3 + 56);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_5;
    }

    int64_t v15 = v4 + 1;
    if (__OFADD__(v4, 1LL))
    {
      __break(1u);
      goto LABEL_26;
    }

    if (v15 >= v9) {
      goto LABEL_24;
    }
    unint64_t v16 = *(void *)(v5 + 8 * v15);
    ++v4;
    if (!v16)
    {
      int64_t v4 = v15 + 1;
      if (v15 + 1 >= v9) {
        goto LABEL_24;
      }
      unint64_t v16 = *(void *)(v5 + 8 * v4);
      if (!v16)
      {
        int64_t v4 = v15 + 2;
        if (v15 + 2 >= v9) {
          goto LABEL_24;
        }
        unint64_t v16 = *(void *)(v5 + 8 * v4);
        if (!v16) {
          break;
        }
      }
    }

Swift::Int sub_100400B0C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    int64_t v9 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release(v4);
    return (Swift::Int)v9;
  }

  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_1003F5CB4(&qword_1009B9100);
  Swift::Int result = static _SetStorage.allocate(capacity:)(v5);
  int64_t v9 = (void *)result;
  unint64_t v29 = a1;
  if (a2 < 1) {
    unint64_t v10 = 0LL;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0LL;
  Swift::Int v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }

    uint64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1LL)) {
      goto LABEL_39;
    }
    if (v15 >= a2) {
      goto LABEL_36;
    }
    unint64_t v16 = v29[v15];
    ++v11;
    if (!v16)
    {
      uint64_t v11 = v15 + 1;
      if (v15 + 1 >= a2) {
        goto LABEL_36;
      }
      unint64_t v16 = v29[v11];
      if (!v16)
      {
        uint64_t v11 = v15 + 2;
        if (v15 + 2 >= a2) {
          goto LABEL_36;
        }
        unint64_t v16 = v29[v11];
        if (!v16) {
          break;
        }
      }
    }

uint64_t sub_100400D68(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *v3;
  uint64_t v13 = *(void *)(*v3 + 40LL);
  uint64_t v15 = sub_10040A2B0(&qword_1009B90D0, v14, (uint64_t)&unk_100718E98);
  swift_bridgeObjectRetain(v12);
  uint64_t v29 = a2;
  uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v13, v6, v15);
  uint64_t v17 = -1LL << *(_BYTE *)(v12 + 32);
  unint64_t v18 = v16 & ~v17;
  if (((*(void *)(v12 + 56 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v18) & 1) != 0)
  {
    uint64_t v27 = v3;
    uint64_t v28 = a1;
    uint64_t v19 = ~v17;
    uint64_t v20 = *(void *)(v7 + 72);
    while (1)
    {
      sub_1003F5FC8( *(void *)(v12 + 48) + v20 * v18,  (uint64_t)v11,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      uint64_t v21 = sub_10040A2B0( &qword_1009B90D8,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent,  (uint64_t)&unk_100718ED8);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v29, v6, v21);
      sub_1003F6050((uint64_t)v11, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      if ((v22 & 1) != 0) {
        break;
      }
      unint64_t v18 = (v18 + 1) & v19;
      if (((*(void *)(v12 + 56 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v18) & 1) == 0)
      {
        swift_bridgeObjectRelease(v12);
        uint64_t v3 = v27;
        a1 = v28;
        goto LABEL_7;
      }
    }

    swift_bridgeObjectRelease(v12);
    sub_1003F6050(v29, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    sub_1003F5FC8( *(void *)(*v27 + 48LL) + v20 * v18,  v28,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    return 0LL;
  }

  else
  {
    swift_bridgeObjectRelease(v12);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v24 = v29;
    sub_1003F5FC8(v29, (uint64_t)v11, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    uint64_t v30 = *v3;
    void *v3 = 0x8000000000000000LL;
    sub_100400FA8((uint64_t)v11, v18, isUniquelyReferenced_nonNull_native);
    uint64_t v25 = *v3;
    void *v3 = v30;
    swift_bridgeObjectRelease(v25);
    sub_1003F600C(v24, a1, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    return 1LL;
  }

uint64_t sub_100400FA8(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v33 = a1;
  uint64_t v6 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v12 = *(void *)(*v3 + 16);
  unint64_t v13 = *(void *)(*v3 + 24);
  uint64_t v31 = v7;
  unint64_t v32 = v3;
  if (v13 > v12 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  uint64_t v14 = v12 + 1;
  if ((a3 & 1) != 0)
  {
    sub_10040048C(v14);
  }

  else
  {
    if (v13 > v12)
    {
      sub_1004011B0();
      goto LABEL_12;
    }

    sub_1004013D0(v14);
  }

  uint64_t v15 = *v3;
  uint64_t v16 = *(void *)(*v3 + 40);
  uint64_t v17 = sub_10040A2B0( &qword_1009B90D0,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent,  (uint64_t)&unk_100718E98);
  uint64_t v18 = dispatch thunk of Hashable._rawHashValue(seed:)(v16, v6, v17);
  uint64_t v19 = -1LL << *(_BYTE *)(v15 + 32);
  a2 = v18 & ~v19;
  if (((*(void *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v20 = ~v19;
    uint64_t v21 = *(void *)(v7 + 72);
    do
    {
      sub_1003F5FC8( *(void *)(v15 + 48) + v21 * a2,  (uint64_t)v11,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      uint64_t v22 = sub_10040A2B0( &qword_1009B90D8,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent,  (uint64_t)&unk_100718ED8);
      char v23 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v33, v6, v22);
      sub_1003F6050((uint64_t)v11, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      if ((v23 & 1) != 0) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v20;
    }

    while (((*(void *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0);
  }

void *sub_1004011B0()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL) - 8);
  __chkstk_darwin(v3, v4);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1003F5CB4(&qword_1009B90E0);
  uint64_t v7 = *v0;
  uint64_t v8 = static _SetStorage.copy(original:)(*v0);
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
    uint64_t result = (void *)swift_release(v7);
LABEL_30:
    uint64_t *v1 = v9;
    return result;
  }

  BOOL v26 = v1;
  uint64_t result = (void *)(v8 + 56);
  uint64_t v11 = v7 + 56;
  unint64_t v12 = (unint64_t)((1LL << *(_BYTE *)(v9 + 32)) + 63) >> 6;
  int64_t v14 = 0LL;
  *(void *)(v9 + 16) = *(void *)(v7 + 16);
  uint64_t v15 = 1LL << *(_BYTE *)(v7 + 32);
  uint64_t v16 = -1LL;
  if (v15 < 64) {
    uint64_t v16 = ~(-1LL << v15);
  }
  unint64_t v17 = v16 & *(void *)(v7 + 56);
  int64_t v18 = (unint64_t)(v15 + 63) >> 6;
  while (1)
  {
    if (v17)
    {
      unint64_t v19 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v20 = v19 | (v14 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
      __break(1u);
      goto LABEL_32;
    }

    if (v22 >= v18) {
      goto LABEL_28;
    }
    unint64_t v23 = *(void *)(v11 + 8 * v22);
    ++v14;
    if (!v23)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v18) {
        goto LABEL_28;
      }
      unint64_t v23 = *(void *)(v11 + 8 * v14);
      if (!v23)
      {
        int64_t v14 = v22 + 2;
        if (v22 + 2 >= v18) {
          goto LABEL_28;
        }
        unint64_t v23 = *(void *)(v11 + 8 * v14);
        if (!v23) {
          break;
        }
      }
    }

uint64_t sub_1004013D0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  uint64_t v39 = *(void *)(v4 - 8);
  uint64_t v40 = v4;
  __chkstk_darwin(v5, v6);
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_1003F5CB4(&qword_1009B90E0);
  uint64_t v10 = static _SetStorage.resize(original:capacity:move:)(v9, a1, 0LL);
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16))
  {
    uint64_t result = swift_release(v9);
LABEL_37:
    *uint64_t v2 = v11;
    return result;
  }

  uint64_t v12 = 1LL << *(_BYTE *)(v9 + 32);
  uint64_t v13 = *(void *)(v9 + 56);
  uint64_t v36 = v2;
  uint64_t v37 = v9 + 56;
  if (v12 < 64) {
    uint64_t v14 = ~(-1LL << v12);
  }
  else {
    uint64_t v14 = -1LL;
  }
  unint64_t v15 = v14 & v13;
  int64_t v38 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v16 = v10 + 56;
  uint64_t result = swift_retain(v9);
  int64_t v18 = 0LL;
  while (1)
  {
    if (v15)
    {
      unint64_t v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v21 = v20 | (v18 << 6);
      goto LABEL_26;
    }

    int64_t v22 = v18 + 1;
    if (__OFADD__(v18, 1LL))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }

    if (v22 >= v38) {
      goto LABEL_35;
    }
    unint64_t v23 = *(void *)(v37 + 8 * v22);
    ++v18;
    if (!v23)
    {
      int64_t v18 = v22 + 1;
      if (v22 + 1 >= v38) {
        goto LABEL_35;
      }
      unint64_t v23 = *(void *)(v37 + 8 * v18);
      if (!v23)
      {
        int64_t v18 = v22 + 2;
        if (v22 + 2 >= v38) {
          goto LABEL_35;
        }
        unint64_t v23 = *(void *)(v37 + 8 * v18);
        if (!v23) {
          break;
        }
      }
    }

void sub_1004016F4(uint64_t a1)
{
  uint64_t v1 = a1;
  unint64_t v2 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v6 = a1;
    }
    else {
      uint64_t v6 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v6);
    swift_bridgeObjectRelease(v1);
    if (v3)
    {
LABEL_3:
      sub_1003F5CB4(&qword_1009B9100);
      uint64_t v4 = (void *)static _SetStorage.allocate(capacity:)(v3);
      if (!v2) {
        goto LABEL_4;
      }
LABEL_11:
      if (v1 < 0) {
        uint64_t v7 = v1;
      }
      else {
        uint64_t v7 = v1 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v1);
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v7);
      swift_bridgeObjectRelease(v1);
      if (!v5) {
        return;
      }
      goto LABEL_15;
    }
  }

  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v3) {
      goto LABEL_3;
    }
  }

  uint64_t v4 = &_swiftEmptySetSingleton;
  if (v2) {
    goto LABEL_11;
  }
LABEL_4:
  uint64_t v5 = *(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (!v5) {
    return;
  }
LABEL_15:
  uint64_t v8 = (char *)(v4 + 7);
  uint64_t v45 = v5;
  if ((v1 & 0xC000000000000001LL) != 0)
  {
    uint64_t v9 = 0LL;
    uint64_t v43 = v1;
    while (1)
    {
      uint64_t v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v1);
      BOOL v11 = __OFADD__(v9++, 1LL);
      if (v11)
      {
        __break(1u);
        goto LABEL_43;
      }

      uint64_t v12 = v10;
      Swift::Int v13 = NSObject._rawHashValue(seed:)(v4[5]);
      uint64_t v14 = -1LL << *((_BYTE *)v4 + 32);
      unint64_t v15 = v13 & ~v14;
      unint64_t v16 = v15 >> 6;
      uint64_t v17 = *(void *)&v8[8 * (v15 >> 6)];
      uint64_t v18 = 1LL << v15;
      if (((1LL << v15) & v17) != 0)
      {
        type metadata accessor for IDSGroupEncryptionControllerMember();
        id v19 = *(id *)(v4[6] + 8 * v15);
        char v20 = static NSObject.== infix(_:_:)(v19, v12);

        if ((v20 & 1) != 0)
        {
LABEL_17:
          swift_unknownObjectRelease(v12, v21);
          uint64_t v1 = v43;
          goto LABEL_18;
        }

        uint64_t v22 = ~v14;
        while (1)
        {
          unint64_t v15 = (v15 + 1) & v22;
          unint64_t v16 = v15 >> 6;
          uint64_t v17 = *(void *)&v8[8 * (v15 >> 6)];
          uint64_t v18 = 1LL << v15;
          if ((v17 & (1LL << v15)) == 0) {
            break;
          }
          id v23 = *(id *)(v4[6] + 8 * v15);
          char v24 = static NSObject.== infix(_:_:)(v23, v12);

          if ((v24 & 1) != 0) {
            goto LABEL_17;
          }
        }

        uint64_t v1 = v43;
      }

      *(void *)&v8[8 * v16] = v18 | v17;
      *(void *)(v4[6] + 8 * v15) = v12;
      uint64_t v25 = v4[2];
      BOOL v11 = __OFADD__(v25, 1LL);
      uint64_t v26 = v25 + 1;
      if (v11) {
        goto LABEL_44;
      }
      _DWORD v4[2] = v26;
LABEL_18:
      if (v9 == v45) {
        return;
      }
    }
  }

  uint64_t v27 = 0LL;
  uint64_t v44 = *(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (v27 != v44)
  {
    Swift::Int v28 = v4[5];
    id v29 = *(id *)(v1 + 32 + 8 * v27);
    Swift::Int v30 = NSObject._rawHashValue(seed:)(v28);
    uint64_t v31 = -1LL << *((_BYTE *)v4 + 32);
    unint64_t v32 = v30 & ~v31;
    unint64_t v33 = v32 >> 6;
    uint64_t v34 = *(void *)&v8[8 * (v32 >> 6)];
    uint64_t v35 = 1LL << v32;
    if (((1LL << v32) & v34) != 0)
    {
      type metadata accessor for IDSGroupEncryptionControllerMember();
      id v36 = *(id *)(v4[6] + 8 * v32);
      char v37 = static NSObject.== infix(_:_:)(v36, v29);

      if ((v37 & 1) != 0) {
        goto LABEL_30;
      }
      uint64_t v38 = ~v31;
      unint64_t v32 = (v32 + 1) & v38;
      unint64_t v33 = v32 >> 6;
      uint64_t v34 = *(void *)&v8[8 * (v32 >> 6)];
      uint64_t v35 = 1LL << v32;
      if ((v34 & (1LL << v32)) != 0)
      {
        while (1)
        {
          id v39 = *(id *)(v4[6] + 8 * v32);
          char v40 = static NSObject.== infix(_:_:)(v39, v29);

          if ((v40 & 1) != 0) {
            break;
          }
          unint64_t v32 = (v32 + 1) & v38;
          unint64_t v33 = v32 >> 6;
          uint64_t v34 = *(void *)&v8[8 * (v32 >> 6)];
          uint64_t v35 = 1LL << v32;
          if ((v34 & (1LL << v32)) == 0) {
            goto LABEL_38;
          }
        }

unint64_t sub_100401A4C()
{
  unint64_t result = qword_1009B9830;
  if (!qword_1009B9830)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___OS_dispatch_queue);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1009B9830);
  }

  return result;
}

uint64_t sub_100401A88(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2( 255LL,  (char *)a1 + (int)result,  -(result >> 32),  0LL,  0LL);
    *a1 = result;
  }

  return result;
}

uint64_t sub_100401ACC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

char *sub_100401B10( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, int a8, char a9, unsigned __int8 a10, unsigned __int8 a11, unsigned __int8 a12)
{
  Swift::Int v13 = v12;
  int v71 = a8;
  uint64_t v69 = a6;
  uint64_t v70 = a7;
  os_log_type_t v77 = a5;
  uint64_t v79 = a3;
  uint64_t v80 = a4;
  uint64_t v73 = a2;
  uint64_t v74 = a1;
  int v84 = a11;
  int v85 = a12;
  int v82 = a10;
  uint64_t v83 = type metadata accessor for Logger(0LL);
  uint64_t v81 = *(void *)(v83 - 8);
  __chkstk_darwin(v14, v15);
  uint64_t v78 = (char *)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v75 = *(void *)(v17 - 8);
  uint64_t v76 = v17;
  __chkstk_darwin(v18, v19);
  uint64_t v21 = (char *)&v69 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v23, v24);
  uint64_t v26 = (char *)&v69 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v27, v28);
  Swift::Int v30 = (char *)&v69 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v72 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.State(0LL);
  __chkstk_darwin(v31, v32);
  uint64_t v34 = (char *)&v69 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v35 = OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionKeyMaterialController_state;
  id v36 = v13;
  sub_1003F6548((uint64_t)v34);
  uint64_t v37 = sub_1003F5CB4(&qword_1009B8E10);
  uint64_t v38 = swift_allocObject( v37,  ((*(unsigned int *)(v37 + 48) + 3LL) & 0x1FFFFFFFCLL) + 4,  *(unsigned __int16 *)(v37 + 52) | 3LL);
  *(_DWORD *)(v38 + ((*(unsigned int *)(*(void *)v38 + 48LL) + 3LL) & 0x1FFFFFFFCLL)) = 0;
  sub_1003F5FC8( (uint64_t)v34,  v38 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v38 + 16LL),  type metadata accessor for IDSGroupEncryptionKeyMaterialController.State);
  sub_1003F6050((uint64_t)v34, type metadata accessor for IDSGroupEncryptionKeyMaterialController.State);
  *(void *)&v13[v35] = v38;
  uint64_t v39 = OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionKeyMaterialController_q;
  unint64_t v40 = sub_100401A4C();
  static DispatchQoS.unspecified.getter(v40);
  v87[0] = _swiftEmptyArrayStorage;
  uint64_t v41 = sub_10040A2B0( &qword_1009B8E20,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v42 = sub_1003F5CB4((uint64_t *)&unk_1009B9840);
  uint64_t v43 = sub_1004021DC((unint64_t *)&qword_1009B8E28, (uint64_t *)&unk_1009B9840);
  dispatch thunk of SetAlgebra.init<A>(_:)(v87, v42, v43, v22, v41);
  (*(void (**)(char *, void, uint64_t))(v75 + 104))( v21,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v76);
  uint64_t v44 = v30;
  uint64_t v45 = v77;
  *(void *)&v36[v39] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000035LL,  0x800000010083E0B0LL,  v44,  v26,  v21,  0LL);
  uint64_t v46 = (void **)&v36[OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionKeyMaterialController_persistenceManager];
  *(void *)&v36[OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionKeyMaterialController_persistenceManager] = 0LL;
  *(_DWORD *)&v36[OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionKeyMaterialController_rollIndex] = 1;
  uint64_t v47 = &v36[OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionKeyMaterialController_groupID];
  uint64_t v48 = v80;
  *(void *)uint64_t v47 = v79;
  *((void *)v47 + 1) = v48;
  sub_100401ACC( (uint64_t)v45,  (uint64_t)&v36[OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionKeyMaterialController_cryptoHandler]);
  BOOL v49 = v78;
  sub_10048ADB4(v82);
  (*(void (**)(char *, char *, uint64_t))(v81 + 32))( &v36[OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionKeyMaterialController_l],  v49,  v83);
  v36[OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionKeyMaterialController_shortKIEnabled] = v84;
  v36[OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionKeyMaterialController_isRatchetEnabled] = v85;
  uint64_t v50 = (void *)objc_opt_self(&OBJC_CLASS___IDSDaemon);
  id v51 = [v50 sharedInstance];

  if (!v51)
  {
    id v54 = 0LL;
    goto LABEL_5;
  }

  uint64_t result = (char *)[v50 sharedInstance];
  if (result)
  {
    unint64_t v53 = result;
    id v54 = [result persistenceManager];

LABEL_5:
    char v55 = v71;
    uint64_t v57 = v69;
    uint64_t v56 = v70;
    swift_beginAccess(v46, v87, 1LL, 0LL);
    uint64_t v58 = *v46;
    *uint64_t v46 = v54;

    os_log_type_t v59 = (objc_class *)type metadata accessor for IDSGroupEncryptionKeyMaterialController(0LL);
    v86.receiver = v36;
    v86.super_class = v59;
    uint64_t v60 = (char *)objc_msgSendSuper2(&v86, "init");
    uint64_t v61 = *(void *)&v60[OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionKeyMaterialController_state];
    uint64_t v62 = v61 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v61 + 16LL);
    os_log_type_t v63 = (os_unfair_lock_s *)(v61 + ((*(unsigned int *)(*(void *)v61 + 48LL) + 3LL) & 0x1FFFFFFFCLL));
    uint64_t v64 = v60;
    os_unfair_lock_lock(v63);
    uint64_t v65 = v72;
    uint64_t v66 = v62 + *(int *)(v72 + 28);
    uint64_t v67 = v74;
    *(void *)(v66 + _Block_object_dispose(va, 8) = v73;
    swift_unknownObjectWeakAssign(v66, v67);
    uint64_t v68 = v62 + *(int *)(v65 + 20);
    *(void *)uint64_t v68 = v57;
    *(void *)(v68 + _Block_object_dispose(va, 8) = v56;
    *(_BYTE *)(v68 + 16) = v55 & 1;
    *(_BYTE *)(v62 + *(int *)(v65 + objc_destroyWeak((id *)(v2 - 24)) = a9 & 1;
    os_unfair_lock_unlock(v63);

    sub_10040A648(v45);
    return v64;
  }

  __break(1u);
  return result;
}

uint64_t type metadata accessor for IDSGroupEncryptionKeyMaterialController(uint64_t a1)
{
  return sub_100402020( a1,  (uint64_t *)&unk_1009C0F40,  (uint64_t)&nominal type descriptor for IDSGroupEncryptionKeyMaterialController);
}

uint64_t sub_100402020(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata(a1, a3);
  }
  return result;
}

uint64_t sub_100402054()
{
  swift_release(*(void *)(v0 + 32));
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_100402080()
{
  uint64_t v1 = (void (*)(void))v0[3];
  uint64_t v2 = *(void *)(v0[2] + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionKeyMaterialController_state);
  uint64_t v3 = v0[4];
  uint64_t v4 = v2 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v2 + 16LL);
  uint64_t v5 = (os_unfair_lock_s *)(v2 + ((*(unsigned int *)(*(void *)v2 + 48LL) + 3LL) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v5);
  uint64_t v6 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.State(0LL);
  if (*(_BYTE *)(v4 + *(int *)(v6 + 48)) == 1)
  {
    uint64_t v7 = v6;
    uint64_t v8 = swift_allocObject(&unk_1009051B8, 32LL, 7LL);
    *(void *)(v8 + 16) = v1;
    *(void *)(v8 + 24) = v3;
    uint64_t v9 = *(int *)(v7 + 52);
    uint64_t v10 = *(char **)(v4 + v9);
    swift_retain(v3);
    if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0) {
      uint64_t v10 = sub_1003FFAA4(0LL, *((void *)v10 + 2) + 1LL, 1, v10);
    }
    unint64_t v12 = *((void *)v10 + 2);
    unint64_t v11 = *((void *)v10 + 3);
    if (v12 >= v11 >> 1) {
      uint64_t v10 = sub_1003FFAA4((char *)(v11 > 1), v12 + 1, 1, v10);
    }
    *((void *)v10 + 2) = v12 + 1;
    Swift::Int v13 = &v10[16 * v12];
    *((void *)v13 + 4) = sub_10040A51C;
    *((void *)v13 + 5) = v8;
    *(void *)(v4 + v9) = v10;
  }

  else
  {
    v1();
  }

  os_unfair_lock_unlock(v5);
}

uint64_t sub_1004021C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1004021D4(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1004021DC(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = sub_100401A88(a2);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_10040221C(uint64_t a1)
{
  return sub_1003F8ED8(a1, *(void **)(v1 + 16));
}

unint64_t sub_100402224()
{
  unint64_t result = qword_1009B8E40;
  if (!qword_1009B8E40)
  {
    unint64_t result = swift_getWitnessTable(&unk_10071C000, &type metadata for IDSGroupMembershipDiff);
    atomic_store(result, (unint64_t *)&qword_1009B8E40);
  }

  return result;
}

uint64_t sub_100402268()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

unint64_t sub_10040229C()
{
  unint64_t result = qword_1009B8E48;
  if (!qword_1009B8E48)
  {
    unint64_t result = swift_getWitnessTable( &unk_1007181C8,  &type metadata for IDSGroupEncryptionKeyMaterialController.MembershipChangePolicy);
    atomic_store(result, (unint64_t *)&qword_1009B8E48);
  }

  return result;
}

__n128 initializeBufferWithCopyOfBuffer for IDSGroupEncryptionKeyMaterialRollPolicy(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for IDSGroupEncryptionKeyMaterialRollPolicy(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for IDSGroupEncryptionKeyMaterialRollPolicy( uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = 0LL;
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    *(_BYTE *)(result + 16) = 0;
    *(_DWORD *)__n128 result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 17) = v3;
  return result;
}

uint64_t sub_100402348(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100402364(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    *(_BYTE *)(result + 16) = 1;
  }

  else
  {
    *(_BYTE *)(result + 16) = 0;
  }

  return result;
}

ValueMetadata *type metadata accessor for IDSGroupEncryptionKeyMaterialRollPolicy()
{
  return &type metadata for IDSGroupEncryptionKeyMaterialRollPolicy;
}

uint64_t sub_100402394()
{
  return type metadata accessor for IDSGroupEncryptionKeyMaterialController(0LL);
}

uint64_t sub_10040239C(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  uint64_t result = type metadata accessor for Logger(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    _DWORD v4[2] = &unk_100718318;
    void v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[4] = &unk_100718330;
    v4[5] = &unk_100718348;
    v4[6] = &unk_100718318;
    void v4[7] = &unk_100718360;
    v4[8] = (char *)&value witness table for Builtin.Int32 + 64;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 9LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

_BYTE *initializeBufferWithCopyOfBuffer for IDSGroupEncryptionKeyMaterialController.MembershipChangePolicy( _BYTE *result, _BYTE *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for IDSGroupEncryptionKeyMaterialController.MembershipChangePolicy( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

uint64_t storeEnumTagSinglePayload for IDSGroupEncryptionKeyMaterialController.MembershipChangePolicy( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100402544 + 4 * byte_1007181B5[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100402578 + 4 * byte_1007181B0[v4]))();
}

uint64_t sub_100402578(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100402580(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100402588LL);
  }
  return result;
}

uint64_t sub_100402594(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10040259CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1004025A0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004025A8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1004025B4(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_1004025BC(_BYTE *result, char a2)
{
  *uint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for IDSGroupEncryptionKeyMaterialController.MembershipChangePolicy()
{
  return &type metadata for IDSGroupEncryptionKeyMaterialController.MembershipChangePolicy;
}

uint64_t *sub_1004025D8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v12);
  }

  else
  {
    BOOL v7 = (int *)type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
    uint64_t v8 = *((void *)v7 - 1);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, int *))(v8 + 48))(a2, 1LL, v7))
    {
      uint64_t v10 = sub_1003F5CB4(&qword_1009B8E08);
      memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    }

    else
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      uint64_t v13 = v7[5];
      __n128 v14 = (char *)a1 + v13;
      __n128 v15 = (char *)a2 + v13;
      uint64_t v16 = type metadata accessor for UUID(0LL, v9);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16LL))(v14, v15, v16);
      uint64_t v17 = v7[6];
      __n128 v18 = (uint64_t *)((char *)a1 + v17);
      __n128 v19 = (uint64_t *)((char *)a2 + v17);
      uint64_t v20 = *v19;
      unint64_t v21 = v19[1];
      sub_1004028CC(*v19, v21);
      *__n128 v18 = v20;
      v18[1] = v21;
      uint64_t v22 = v7[7];
      __n128 v23 = (uint64_t *)((char *)a1 + v22);
      __n128 v24 = (uint64_t *)((char *)a2 + v22);
      uint64_t v25 = *v24;
      unint64_t v26 = v24[1];
      sub_1004028CC(*v24, v26);
      *__n128 v23 = v25;
      v23[1] = v26;
      uint64_t v27 = v7[8];
      __n128 v28 = (char *)a1 + v27;
      uint64_t v29 = (char *)a2 + v27;
      uint64_t v30 = type metadata accessor for Date(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 16LL))(v28, v29, v30);
      uint64_t v31 = v7[9];
      __n128 v32 = (uint64_t *)((char *)a1 + v31);
      uint64_t v33 = (uint64_t *)((char *)a2 + v31);
      uint64_t v34 = v33[1];
      void *v32 = *v33;
      v32[1] = v34;
      *(_DWORD *)((char *)a1 + v7[10]) = *(_DWORD *)((char *)a2 + v7[10]);
      *(_DWORD *)((char *)a1 + v7[11]) = *(_DWORD *)((char *)a2 + v7[11]);
      *((_BYTE *)a1 + v7[12]) = *((_BYTE *)a2 + v7[12]);
      uint64_t v35 = v7[13];
      id v36 = (char *)a1 + v35;
      uint64_t v37 = (char *)a2 + v35;
      v36[8] = v37[8];
      *(void *)id v36 = *(void *)v37;
      uint64_t v38 = *(void (**)(uint64_t *, void, uint64_t, int *))(v8 + 56);
      swift_bridgeObjectRetain(v34);
      v38(a1, 0LL, 1LL, v7);
    }

    uint64_t v39 = *(int *)(a3 + 20);
    unint64_t v40 = (char *)a1 + v39;
    uint64_t v41 = (char *)a2 + v39;
    *unint64_t v40 = *((_BYTE *)a2 + v39);
    uint64_t v42 = v7[5];
    uint64_t v43 = &v40[v42];
    uint64_t v44 = &v41[v42];
    uint64_t v45 = type metadata accessor for UUID(0LL, v11);
    (*(void (**)(_BYTE *, char *, uint64_t))(*(void *)(v45 - 8) + 16LL))(v43, v44, v45);
    uint64_t v46 = v7[6];
    uint64_t v47 = (uint64_t *)&v40[v46];
    uint64_t v48 = (uint64_t *)&v41[v46];
    uint64_t v49 = *v48;
    unint64_t v50 = v48[1];
    sub_1004028CC(*v48, v50);
    *uint64_t v47 = v49;
    v47[1] = v50;
    uint64_t v51 = v7[7];
    uint64_t v52 = (uint64_t *)&v40[v51];
    unint64_t v53 = (uint64_t *)&v41[v51];
    uint64_t v54 = *v53;
    unint64_t v55 = v53[1];
    sub_1004028CC(*v53, v55);
    *uint64_t v52 = v54;
    v52[1] = v55;
    uint64_t v56 = v7[8];
    uint64_t v57 = &v40[v56];
    uint64_t v58 = &v41[v56];
    uint64_t v59 = type metadata accessor for Date(0LL);
    uint64_t v60 = *(void (**)(char *, char *, uint64_t))(*(void *)(v59 - 8) + 16LL);
    v60(v57, v58, v59);
    uint64_t v61 = v7[9];
    uint64_t v62 = &v40[v61];
    os_log_type_t v63 = &v41[v61];
    uint64_t v64 = *((void *)v63 + 1);
    *uint64_t v62 = *(void *)v63;
    v62[1] = v64;
    *(_DWORD *)&v40[v7[10]] = *(_DWORD *)&v41[v7[10]];
    *(_DWORD *)&v40[v7[11]] = *(_DWORD *)&v41[v7[11]];
    v40[v7[12]] = v41[v7[12]];
    uint64_t v65 = v7[13];
    uint64_t v66 = &v40[v65];
    uint64_t v67 = &v41[v65];
    v66[8] = v67[8];
    *(void *)uint64_t v66 = *(void *)v67;
    uint64_t v68 = *(int *)(a3 + 24);
    uint64_t v69 = (char *)a1 + v68;
    uint64_t v70 = (char *)a2 + v68;
    swift_bridgeObjectRetain(v64);
    v60(v69, v70, v59);
  }

  return a1;
}

uint64_t sub_1004028CC(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain(result);
  }

  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100402910(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (int *)type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v4 - 1) + 48LL))(a1, 1LL, v4))
  {
    uint64_t v6 = a1 + v4[5];
    uint64_t v7 = type metadata accessor for UUID(0LL, v5);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL))(v6, v7);
    sub_100402A84(*(void *)(a1 + v4[6]), *(void *)(a1 + v4[6] + 8));
    sub_100402A84(*(void *)(a1 + v4[7]), *(void *)(a1 + v4[7] + 8));
    uint64_t v8 = a1 + v4[8];
    uint64_t v9 = type metadata accessor for Date(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(v8, v9);
    swift_bridgeObjectRelease(*(void *)(a1 + v4[9] + 8));
  }

  uint64_t v10 = a1 + *(int *)(a2 + 20);
  uint64_t v11 = v10 + v4[5];
  uint64_t v12 = type metadata accessor for UUID(0LL, v5);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8LL))(v11, v12);
  sub_100402A84(*(void *)(v10 + v4[6]), *(void *)(v10 + v4[6] + 8));
  sub_100402A84(*(void *)(v10 + v4[7]), *(void *)(v10 + v4[7] + 8));
  uint64_t v13 = v10 + v4[8];
  uint64_t v14 = type metadata accessor for Date(0LL);
  uint64_t v16 = *(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8LL);
  v16(v13, v14);
  swift_bridgeObjectRelease(*(void *)(v10 + v4[9] + 8));
  return ((uint64_t (*)(uint64_t, uint64_t))v16)(a1 + *(int *)(a2 + 24), v14);
}

uint64_t sub_100402A84(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release(result);
  }

  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

_BYTE *sub_100402AC8(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6 = (int *)type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, int *))(v7 + 48))(a2, 1LL, v6))
  {
    uint64_t v9 = sub_1003F5CB4(&qword_1009B8E08);
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64LL));
  }

  else
  {
    *a1 = *a2;
    uint64_t v11 = v6[5];
    uint64_t v12 = &a1[v11];
    uint64_t v13 = &a2[v11];
    uint64_t v14 = type metadata accessor for UUID(0LL, v8);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v14 - 8) + 16LL))(v12, v13, v14);
    uint64_t v15 = v6[6];
    uint64_t v16 = (uint64_t *)&a1[v15];
    uint64_t v17 = (uint64_t *)&a2[v15];
    uint64_t v18 = *v17;
    unint64_t v19 = v17[1];
    sub_1004028CC(*v17, v19);
    *uint64_t v16 = v18;
    v16[1] = v19;
    uint64_t v20 = v6[7];
    unint64_t v21 = (uint64_t *)&a1[v20];
    uint64_t v22 = (uint64_t *)&a2[v20];
    uint64_t v23 = *v22;
    unint64_t v24 = v22[1];
    sub_1004028CC(*v22, v24);
    *unint64_t v21 = v23;
    v21[1] = v24;
    uint64_t v25 = v6[8];
    unint64_t v26 = &a1[v25];
    uint64_t v27 = &a2[v25];
    uint64_t v28 = type metadata accessor for Date(0LL);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v28 - 8) + 16LL))(v26, v27, v28);
    uint64_t v29 = v6[9];
    uint64_t v30 = &a1[v29];
    uint64_t v31 = &a2[v29];
    uint64_t v32 = v31[1];
    void *v30 = *v31;
    v30[1] = v32;
    *(_DWORD *)&a1[v6[10]] = *(_DWORD *)&a2[v6[10]];
    *(_DWORD *)&a1[v6[11]] = *(_DWORD *)&a2[v6[11]];
    a1[v6[12]] = a2[v6[12]];
    uint64_t v33 = v6[13];
    uint64_t v34 = &a1[v33];
    uint64_t v35 = &a2[v33];
    v34[8] = v35[8];
    *(void *)uint64_t v34 = *(void *)v35;
    id v36 = *(void (**)(_BYTE *, void, uint64_t, int *))(v7 + 56);
    swift_bridgeObjectRetain(v32);
    v36(a1, 0LL, 1LL, v6);
  }

  uint64_t v37 = *(int *)(a3 + 20);
  uint64_t v38 = &a1[v37];
  uint64_t v39 = &a2[v37];
  *uint64_t v38 = a2[v37];
  uint64_t v40 = v6[5];
  uint64_t v41 = &v38[v40];
  uint64_t v42 = &v39[v40];
  uint64_t v43 = type metadata accessor for UUID(0LL, v10);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v43 - 8) + 16LL))(v41, v42, v43);
  uint64_t v44 = v6[6];
  uint64_t v45 = (uint64_t *)&v38[v44];
  uint64_t v46 = (uint64_t *)&v39[v44];
  uint64_t v47 = *v46;
  unint64_t v48 = v46[1];
  sub_1004028CC(*v46, v48);
  uint64_t *v45 = v47;
  v45[1] = v48;
  uint64_t v49 = v6[7];
  unint64_t v50 = (uint64_t *)&v38[v49];
  uint64_t v51 = (uint64_t *)&v39[v49];
  uint64_t v52 = *v51;
  unint64_t v53 = v51[1];
  sub_1004028CC(*v51, v53);
  *unint64_t v50 = v52;
  v50[1] = v53;
  uint64_t v54 = v6[8];
  unint64_t v55 = &v38[v54];
  uint64_t v56 = &v39[v54];
  uint64_t v57 = type metadata accessor for Date(0LL);
  uint64_t v58 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v57 - 8) + 16LL);
  v58(v55, v56, v57);
  uint64_t v59 = v6[9];
  uint64_t v60 = &v38[v59];
  uint64_t v61 = &v39[v59];
  uint64_t v62 = v61[1];
  *uint64_t v60 = *v61;
  v60[1] = v62;
  *(_DWORD *)&v38[v6[10]] = *(_DWORD *)&v39[v6[10]];
  *(_DWORD *)&v38[v6[11]] = *(_DWORD *)&v39[v6[11]];
  v38[v6[12]] = v39[v6[12]];
  uint64_t v63 = v6[13];
  uint64_t v64 = &v38[v63];
  uint64_t v65 = &v39[v63];
  v64[8] = v65[8];
  *(void *)uint64_t v64 = *(void *)v65;
  uint64_t v66 = *(int *)(a3 + 24);
  uint64_t v67 = &a1[v66];
  uint64_t v68 = &a2[v66];
  swift_bridgeObjectRetain(v62);
  v58(v67, v68, v57);
  return a1;
}

_BYTE *sub_100402D90(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6 = (int *)type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v7 + 48);
  int v9 = v8(a1, 1LL, v6);
  int v10 = v8(a2, 1LL, v6);
  if (!v9)
  {
    if (!v10)
    {
      *a1 = *a2;
      uint64_t v77 = v6[5];
      uint64_t v78 = &a1[v77];
      uint64_t v79 = &a2[v77];
      uint64_t v80 = type metadata accessor for UUID(0LL, v11);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v80 - 8) + 24LL))(v78, v79, v80);
      uint64_t v81 = v6[6];
      int v82 = (uint64_t *)&a1[v81];
      uint64_t v83 = (uint64_t *)&a2[v81];
      uint64_t v84 = *v83;
      unint64_t v85 = v83[1];
      sub_1004028CC(*v83, v85);
      uint64_t v86 = *v82;
      unint64_t v87 = v82[1];
      uint64_t *v82 = v84;
      v82[1] = v85;
      sub_100402A84(v86, v87);
      uint64_t v88 = v6[7];
      uint64_t v89 = (uint64_t *)&a1[v88];
      uint64_t v90 = (uint64_t *)&a2[v88];
      uint64_t v91 = *v90;
      unint64_t v92 = v90[1];
      sub_1004028CC(*v90, v92);
      uint64_t v93 = *v89;
      unint64_t v94 = v89[1];
      uint64_t *v89 = v91;
      v89[1] = v92;
      sub_100402A84(v93, v94);
      uint64_t v95 = v6[8];
      uint64_t v96 = &a1[v95];
      uint64_t v97 = &a2[v95];
      uint64_t v98 = type metadata accessor for Date(0LL);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v98 - 8) + 24LL))(v96, v97, v98);
      uint64_t v99 = v6[9];
      uint64_t v100 = &a1[v99];
      uint64_t v101 = &a2[v99];
      *uint64_t v100 = *v101;
      uint64_t v102 = v101[1];
      uint64_t v103 = v100[1];
      v100[1] = v102;
      swift_bridgeObjectRetain(v102);
      swift_bridgeObjectRelease(v103);
      *(_DWORD *)&a1[v6[10]] = *(_DWORD *)&a2[v6[10]];
      *(_DWORD *)&a1[v6[11]] = *(_DWORD *)&a2[v6[11]];
      a1[v6[12]] = a2[v6[12]];
      uint64_t v104 = v6[13];
      uint64_t v105 = &a1[v104];
      uint64_t v106 = &a2[v104];
      uint64_t v107 = *(void *)v106;
      v105[8] = v106[8];
      *(void *)uint64_t v105 = v107;
      goto LABEL_7;
    }

    sub_1003F6050((uint64_t)a1, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    goto LABEL_6;
  }

  if (v10)
  {
LABEL_6:
    uint64_t v40 = sub_1003F5CB4(&qword_1009B8E08);
    memcpy(a1, a2, *(void *)(*(void *)(v40 - 8) + 64LL));
    goto LABEL_7;
  }

  *a1 = *a2;
  uint64_t v12 = v6[5];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = type metadata accessor for UUID(0LL, v11);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v15 - 8) + 16LL))(v13, v14, v15);
  uint64_t v16 = v6[6];
  uint64_t v17 = (uint64_t *)&a1[v16];
  uint64_t v18 = (uint64_t *)&a2[v16];
  uint64_t v19 = *v18;
  unint64_t v20 = v18[1];
  sub_1004028CC(*v18, v20);
  *uint64_t v17 = v19;
  v17[1] = v20;
  uint64_t v21 = v6[7];
  uint64_t v22 = (uint64_t *)&a1[v21];
  uint64_t v23 = (uint64_t *)&a2[v21];
  uint64_t v24 = *v23;
  unint64_t v25 = v23[1];
  sub_1004028CC(*v23, v25);
  *uint64_t v22 = v24;
  v22[1] = v25;
  uint64_t v26 = v6[8];
  uint64_t v27 = &a1[v26];
  uint64_t v28 = &a2[v26];
  uint64_t v29 = type metadata accessor for Date(0LL);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v29 - 8) + 16LL))(v27, v28, v29);
  uint64_t v30 = v6[9];
  uint64_t v31 = &a1[v30];
  uint64_t v32 = &a2[v30];
  *uint64_t v31 = *v32;
  uint64_t v33 = v32[1];
  v31[1] = v33;
  *(_DWORD *)&a1[v6[10]] = *(_DWORD *)&a2[v6[10]];
  *(_DWORD *)&a1[v6[11]] = *(_DWORD *)&a2[v6[11]];
  a1[v6[12]] = a2[v6[12]];
  uint64_t v34 = v6[13];
  uint64_t v35 = &a1[v34];
  id v36 = &a2[v34];
  char v37 = v36[8];
  *(void *)uint64_t v35 = *(void *)v36;
  v35[8] = v37;
  uint64_t v38 = *(void (**)(_BYTE *, void, uint64_t, int *))(v7 + 56);
  swift_bridgeObjectRetain(v33);
  v38(a1, 0LL, 1LL, v6);
LABEL_7:
  uint64_t v41 = *(int *)(a3 + 20);
  uint64_t v42 = &a1[v41];
  uint64_t v43 = &a2[v41];
  _BYTE *v42 = a2[v41];
  uint64_t v44 = v6[5];
  uint64_t v45 = &v42[v44];
  uint64_t v46 = &v43[v44];
  uint64_t v47 = type metadata accessor for UUID(0LL, v39);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v47 - 8) + 24LL))(v45, v46, v47);
  uint64_t v48 = v6[6];
  uint64_t v49 = (uint64_t *)&v42[v48];
  unint64_t v50 = (uint64_t *)&v43[v48];
  uint64_t v51 = *v50;
  unint64_t v52 = v50[1];
  sub_1004028CC(*v50, v52);
  uint64_t v53 = *v49;
  unint64_t v54 = v49[1];
  *uint64_t v49 = v51;
  v49[1] = v52;
  sub_100402A84(v53, v54);
  uint64_t v55 = v6[7];
  uint64_t v56 = (uint64_t *)&v42[v55];
  uint64_t v57 = (uint64_t *)&v43[v55];
  uint64_t v58 = *v57;
  unint64_t v59 = v57[1];
  sub_1004028CC(*v57, v59);
  uint64_t v60 = *v56;
  unint64_t v61 = v56[1];
  *uint64_t v56 = v58;
  v56[1] = v59;
  sub_100402A84(v60, v61);
  uint64_t v62 = v6[8];
  uint64_t v63 = &v42[v62];
  uint64_t v64 = &v43[v62];
  uint64_t v65 = type metadata accessor for Date(0LL);
  uint64_t v66 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v65 - 8) + 24LL);
  v66(v63, v64, v65);
  uint64_t v67 = v6[9];
  uint64_t v68 = &v42[v67];
  uint64_t v69 = &v43[v67];
  void *v68 = *v69;
  uint64_t v70 = v69[1];
  uint64_t v71 = v68[1];
  v68[1] = v70;
  swift_bridgeObjectRetain(v70);
  swift_bridgeObjectRelease(v71);
  *(_DWORD *)&v42[v6[10]] = *(_DWORD *)&v43[v6[10]];
  *(_DWORD *)&v42[v6[11]] = *(_DWORD *)&v43[v6[11]];
  v42[v6[12]] = v43[v6[12]];
  uint64_t v72 = v6[13];
  uint64_t v73 = &v42[v72];
  uint64_t v74 = &v43[v72];
  uint64_t v75 = *(void *)v74;
  void v73[8] = v74[8];
  *(void *)uint64_t v73 = v75;
  v66(&a1[*(int *)(a3 + 24)], &a2[*(int *)(a3 + 24)], v65);
  return a1;
}

_BYTE *sub_1004031C8(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6 = (int *)type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, int *))(v7 + 48))(a2, 1LL, v6))
  {
    uint64_t v9 = sub_1003F5CB4(&qword_1009B8E08);
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64LL));
  }

  else
  {
    *a1 = *a2;
    uint64_t v11 = v6[5];
    uint64_t v12 = &a1[v11];
    uint64_t v13 = &a2[v11];
    uint64_t v14 = type metadata accessor for UUID(0LL, v8);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v14 - 8) + 32LL))(v12, v13, v14);
    *(_OWORD *)&a1[v6[6]] = *(_OWORD *)&a2[v6[6]];
    *(_OWORD *)&a1[v6[7]] = *(_OWORD *)&a2[v6[7]];
    uint64_t v15 = v6[8];
    uint64_t v16 = &a1[v15];
    uint64_t v17 = &a2[v15];
    uint64_t v18 = type metadata accessor for Date(0LL);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v18 - 8) + 32LL))(v16, v17, v18);
    *(_OWORD *)&a1[v6[9]] = *(_OWORD *)&a2[v6[9]];
    *(_DWORD *)&a1[v6[10]] = *(_DWORD *)&a2[v6[10]];
    *(_DWORD *)&a1[v6[11]] = *(_DWORD *)&a2[v6[11]];
    a1[v6[12]] = a2[v6[12]];
    uint64_t v19 = v6[13];
    unint64_t v20 = &a1[v19];
    uint64_t v21 = &a2[v19];
    *(void *)unint64_t v20 = *(void *)v21;
    v20[8] = v21[8];
    (*(void (**)(_BYTE *, void, uint64_t, int *))(v7 + 56))(a1, 0LL, 1LL, v6);
  }

  uint64_t v22 = *(int *)(a3 + 20);
  uint64_t v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  *uint64_t v23 = a2[v22];
  uint64_t v25 = v6[5];
  uint64_t v26 = &v23[v25];
  uint64_t v27 = &v24[v25];
  uint64_t v28 = type metadata accessor for UUID(0LL, v10);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v28 - 8) + 32LL))(v26, v27, v28);
  *(_OWORD *)&v23[v6[6]] = *(_OWORD *)&v24[v6[6]];
  *(_OWORD *)&v23[v6[7]] = *(_OWORD *)&v24[v6[7]];
  uint64_t v29 = v6[8];
  uint64_t v30 = &v23[v29];
  uint64_t v31 = &v24[v29];
  uint64_t v32 = type metadata accessor for Date(0LL);
  uint64_t v33 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v32 - 8) + 32LL);
  v33(v30, v31, v32);
  *(_OWORD *)&v23[v6[9]] = *(_OWORD *)&v24[v6[9]];
  *(_DWORD *)&v23[v6[10]] = *(_DWORD *)&v24[v6[10]];
  *(_DWORD *)&v23[v6[11]] = *(_DWORD *)&v24[v6[11]];
  v23[v6[12]] = v24[v6[12]];
  uint64_t v34 = v6[13];
  uint64_t v35 = &v23[v34];
  id v36 = &v24[v34];
  *(void *)uint64_t v35 = *(void *)v36;
  v35[8] = v36[8];
  v33(&a1[*(int *)(a3 + 24)], &a2[*(int *)(a3 + 24)], v32);
  return a1;
}

_BYTE *sub_100403420(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6 = (int *)type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v7 + 48);
  int v9 = v8(a1, 1LL, v6);
  int v10 = v8(a2, 1LL, v6);
  if (!v9)
  {
    if (!v10)
    {
      *a1 = *a2;
      uint64_t v53 = v6[5];
      unint64_t v54 = &a1[v53];
      uint64_t v55 = &a2[v53];
      uint64_t v56 = type metadata accessor for UUID(0LL, v11);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v56 - 8) + 40LL))(v54, v55, v56);
      uint64_t v57 = v6[6];
      uint64_t v58 = *(void *)&a1[v57];
      unint64_t v59 = *(void *)&a1[v57 + 8];
      *(_OWORD *)&a1[v57] = *(_OWORD *)&a2[v57];
      sub_100402A84(v58, v59);
      uint64_t v60 = v6[7];
      uint64_t v61 = *(void *)&a1[v60];
      unint64_t v62 = *(void *)&a1[v60 + 8];
      *(_OWORD *)&a1[v60] = *(_OWORD *)&a2[v60];
      sub_100402A84(v61, v62);
      uint64_t v63 = v6[8];
      uint64_t v64 = &a1[v63];
      uint64_t v65 = &a2[v63];
      uint64_t v66 = type metadata accessor for Date(0LL);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v66 - 8) + 40LL))(v64, v65, v66);
      uint64_t v67 = v6[9];
      uint64_t v68 = &a1[v67];
      uint64_t v69 = (uint64_t *)&a2[v67];
      uint64_t v71 = *v69;
      uint64_t v70 = v69[1];
      uint64_t v72 = v68[1];
      void *v68 = v71;
      v68[1] = v70;
      swift_bridgeObjectRelease(v72);
      *(_DWORD *)&a1[v6[10]] = *(_DWORD *)&a2[v6[10]];
      *(_DWORD *)&a1[v6[11]] = *(_DWORD *)&a2[v6[11]];
      a1[v6[12]] = a2[v6[12]];
      uint64_t v73 = v6[13];
      uint64_t v74 = &a1[v73];
      uint64_t v75 = &a2[v73];
      *(void *)uint64_t v74 = *(void *)v75;
      v74[8] = v75[8];
      goto LABEL_7;
    }

    sub_1003F6050((uint64_t)a1, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    goto LABEL_6;
  }

  if (v10)
  {
LABEL_6:
    uint64_t v24 = sub_1003F5CB4(&qword_1009B8E08);
    memcpy(a1, a2, *(void *)(*(void *)(v24 - 8) + 64LL));
    goto LABEL_7;
  }

  *a1 = *a2;
  uint64_t v12 = v6[5];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = type metadata accessor for UUID(0LL, v11);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v15 - 8) + 32LL))(v13, v14, v15);
  *(_OWORD *)&a1[v6[6]] = *(_OWORD *)&a2[v6[6]];
  *(_OWORD *)&a1[v6[7]] = *(_OWORD *)&a2[v6[7]];
  uint64_t v16 = v6[8];
  uint64_t v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  uint64_t v19 = type metadata accessor for Date(0LL);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v19 - 8) + 32LL))(v17, v18, v19);
  *(_OWORD *)&a1[v6[9]] = *(_OWORD *)&a2[v6[9]];
  *(_DWORD *)&a1[v6[10]] = *(_DWORD *)&a2[v6[10]];
  *(_DWORD *)&a1[v6[11]] = *(_DWORD *)&a2[v6[11]];
  a1[v6[12]] = a2[v6[12]];
  uint64_t v20 = v6[13];
  uint64_t v21 = &a1[v20];
  uint64_t v22 = &a2[v20];
  *(void *)uint64_t v21 = *(void *)v22;
  v21[8] = v22[8];
  (*(void (**)(_BYTE *, void, uint64_t, int *))(v7 + 56))(a1, 0LL, 1LL, v6);
LABEL_7:
  uint64_t v25 = *(int *)(a3 + 20);
  uint64_t v26 = &a1[v25];
  uint64_t v27 = &a2[v25];
  *uint64_t v26 = a2[v25];
  uint64_t v28 = v6[5];
  uint64_t v29 = &v26[v28];
  uint64_t v30 = &v27[v28];
  uint64_t v31 = type metadata accessor for UUID(0LL, v23);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v31 - 8) + 40LL))(v29, v30, v31);
  uint64_t v32 = v6[6];
  uint64_t v33 = *(void *)&v26[v32];
  unint64_t v34 = *(void *)&v26[v32 + 8];
  *(_OWORD *)&v26[v32] = *(_OWORD *)&v27[v32];
  sub_100402A84(v33, v34);
  uint64_t v35 = v6[7];
  uint64_t v36 = *(void *)&v26[v35];
  unint64_t v37 = *(void *)&v26[v35 + 8];
  *(_OWORD *)&v26[v35] = *(_OWORD *)&v27[v35];
  sub_100402A84(v36, v37);
  uint64_t v38 = v6[8];
  uint64_t v39 = &v26[v38];
  uint64_t v40 = &v27[v38];
  uint64_t v41 = type metadata accessor for Date(0LL);
  uint64_t v42 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v41 - 8) + 40LL);
  v42(v39, v40, v41);
  uint64_t v43 = v6[9];
  uint64_t v44 = &v26[v43];
  uint64_t v45 = (uint64_t *)&v27[v43];
  uint64_t v47 = *v45;
  uint64_t v46 = v45[1];
  uint64_t v48 = v44[1];
  void *v44 = v47;
  v44[1] = v46;
  swift_bridgeObjectRelease(v48);
  *(_DWORD *)&v26[v6[10]] = *(_DWORD *)&v27[v6[10]];
  *(_DWORD *)&v26[v6[11]] = *(_DWORD *)&v27[v6[11]];
  v26[v6[12]] = v27[v6[12]];
  uint64_t v49 = v6[13];
  unint64_t v50 = &v26[v49];
  uint64_t v51 = &v27[v49];
  *(void *)unint64_t v50 = *(void *)v51;
  v50[8] = v51[8];
  v42(&a1[*(int *)(a3 + 24)], &a2[*(int *)(a3 + 24)], v41);
  return a1;
}

uint64_t sub_1004037BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1004037C8);
}

uint64_t sub_1004037C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1003F5CB4(&qword_1009B8E08);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
  }

  else
  {
    uint64_t v11 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
    uint64_t v12 = *(void *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      uint64_t v8 = v11;
      uint64_t v13 = *(int *)(a3 + 20);
    }

    else
    {
      uint64_t v8 = type metadata accessor for Date(0LL);
      uint64_t v12 = *(void *)(v8 - 8);
      uint64_t v13 = *(int *)(a3 + 24);
    }

    uint64_t v10 = a1 + v13;
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }

  return v9(v10, a2, v8);
}

uint64_t sub_100403864(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100403870);
}

uint64_t sub_100403870(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_1003F5CB4(&qword_1009B8E08);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }

  else
  {
    uint64_t v13 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
    uint64_t v14 = *(void *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      uint64_t v10 = v13;
      uint64_t v15 = *(int *)(a4 + 20);
    }

    else
    {
      uint64_t v10 = type metadata accessor for Date(0LL);
      uint64_t v14 = *(void *)(v10 - 8);
      uint64_t v15 = *(int *)(a4 + 24);
    }

    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

void sub_100403914(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v8[0] = *(void *)(v2 - 8) + 64LL;
    uint64_t v4 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(319LL);
    if (v5 <= 0x3F)
    {
      v8[1] = *(void *)(v4 - 8) + 64LL;
      uint64_t v6 = type metadata accessor for Date(319LL);
      if (v7 <= 0x3F)
      {
        v8[2] = *(void *)(v6 - 8) + 64LL;
        swift_initStructMetadata(a1, 256LL, 3LL, v8, a1 + 16);
      }
    }
  }

void sub_1004039B4(uint64_t a1)
{
  if (!qword_1009B8ED0)
  {
    uint64_t v2 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_1009B8ED0);
    }
  }

uint64_t *sub_100403A08(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v12);
  }

  else
  {
    unint64_t v7 = (int *)type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
    uint64_t v8 = *((void *)v7 - 1);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, int *))(v8 + 48))(a2, 1LL, v7))
    {
      uint64_t v10 = sub_1003F5CB4(&qword_1009B8E08);
      memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    }

    else
    {
      *(_BYTE *)a1 = *(_BYTE *)a2;
      uint64_t v13 = v7[5];
      uint64_t v14 = (char *)a1 + v13;
      uint64_t v15 = (char *)a2 + v13;
      uint64_t v16 = type metadata accessor for UUID(0LL, v9);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16LL))(v14, v15, v16);
      uint64_t v17 = v7[6];
      uint64_t v18 = (uint64_t *)((char *)a1 + v17);
      uint64_t v19 = (uint64_t *)((char *)a2 + v17);
      uint64_t v20 = *v19;
      unint64_t v21 = v19[1];
      sub_1004028CC(*v19, v21);
      *uint64_t v18 = v20;
      v18[1] = v21;
      uint64_t v22 = v7[7];
      uint64_t v23 = (uint64_t *)((char *)a1 + v22);
      uint64_t v24 = (uint64_t *)((char *)a2 + v22);
      uint64_t v25 = *v24;
      unint64_t v26 = v24[1];
      sub_1004028CC(*v24, v26);
      *uint64_t v23 = v25;
      v23[1] = v26;
      uint64_t v27 = v7[8];
      uint64_t v28 = (char *)a1 + v27;
      uint64_t v29 = (char *)a2 + v27;
      uint64_t v30 = type metadata accessor for Date(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 16LL))(v28, v29, v30);
      uint64_t v31 = v7[9];
      uint64_t v32 = (uint64_t *)((char *)a1 + v31);
      uint64_t v33 = (uint64_t *)((char *)a2 + v31);
      uint64_t v34 = v33[1];
      void *v32 = *v33;
      v32[1] = v34;
      *(_DWORD *)((char *)a1 + v7[10]) = *(_DWORD *)((char *)a2 + v7[10]);
      *(_DWORD *)((char *)a1 + v7[11]) = *(_DWORD *)((char *)a2 + v7[11]);
      *((_BYTE *)a1 + v7[12]) = *((_BYTE *)a2 + v7[12]);
      uint64_t v35 = v7[13];
      uint64_t v36 = (char *)a1 + v35;
      unint64_t v37 = (char *)a2 + v35;
      v36[8] = v37[8];
      *(void *)uint64_t v36 = *(void *)v37;
      uint64_t v38 = *(void (**)(uint64_t *, void, uint64_t, int *))(v8 + 56);
      swift_bridgeObjectRetain(v34);
      v38(a1, 0LL, 1LL, v7);
    }

    uint64_t v39 = *(int *)(a3 + 20);
    uint64_t v40 = (char *)a1 + v39;
    uint64_t v41 = (char *)a2 + v39;
    *uint64_t v40 = *((_BYTE *)a2 + v39);
    uint64_t v42 = v7[5];
    uint64_t v43 = &v40[v42];
    uint64_t v44 = &v41[v42];
    uint64_t v45 = type metadata accessor for UUID(0LL, v11);
    uint64_t v95 = *(void (**)(_BYTE *, char *, uint64_t))(*(void *)(v45 - 8) + 16LL);
    v95(v43, v44, v45);
    uint64_t v46 = v7[6];
    uint64_t v96 = a3;
    uint64_t v47 = (uint64_t *)&v40[v46];
    uint64_t v48 = (uint64_t *)&v41[v46];
    uint64_t v49 = *v48;
    unint64_t v50 = v48[1];
    sub_1004028CC(*v48, v50);
    *uint64_t v47 = v49;
    v47[1] = v50;
    uint64_t v51 = v7[7];
    unint64_t v52 = (uint64_t *)&v40[v51];
    uint64_t v53 = (uint64_t *)&v41[v51];
    uint64_t v54 = *v53;
    unint64_t v55 = v53[1];
    sub_1004028CC(*v53, v55);
    *unint64_t v52 = v54;
    v52[1] = v55;
    uint64_t v56 = v7[8];
    uint64_t v57 = &v40[v56];
    uint64_t v58 = &v41[v56];
    uint64_t v59 = type metadata accessor for Date(0LL);
    uint64_t v60 = *(void (**)(char *, char *, uint64_t))(*(void *)(v59 - 8) + 16LL);
    v60(v57, v58, v59);
    uint64_t v61 = v7[9];
    unint64_t v62 = &v40[v61];
    uint64_t v63 = &v41[v61];
    uint64_t v64 = *((void *)v63 + 1);
    *unint64_t v62 = *(void *)v63;
    v62[1] = v64;
    *(_DWORD *)&v40[v7[10]] = *(_DWORD *)&v41[v7[10]];
    *(_DWORD *)&v40[v7[11]] = *(_DWORD *)&v41[v7[11]];
    v40[v7[12]] = v41[v7[12]];
    uint64_t v65 = v7[13];
    uint64_t v66 = &v40[v65];
    uint64_t v67 = &v41[v65];
    *(void *)uint64_t v66 = *(void *)v67;
    v66[8] = v67[8];
    uint64_t v68 = *(int *)(v96 + 24);
    uint64_t v69 = (char *)a1 + v68;
    uint64_t v70 = (char *)a2 + v68;
    *uint64_t v69 = *((_BYTE *)a2 + v68);
    uint64_t v71 = v7[5];
    uint64_t v72 = &v69[v71];
    uint64_t v73 = &v70[v71];
    swift_bridgeObjectRetain(v64);
    v95(v72, v73, v45);
    uint64_t v74 = v7[6];
    uint64_t v75 = (uint64_t *)&v69[v74];
    uint64_t v76 = (uint64_t *)&v70[v74];
    uint64_t v77 = *v76;
    unint64_t v78 = v76[1];
    sub_1004028CC(*v76, v78);
    uint64_t *v75 = v77;
    v75[1] = v78;
    uint64_t v79 = v7[7];
    uint64_t v80 = (uint64_t *)&v69[v79];
    uint64_t v81 = (uint64_t *)&v70[v79];
    uint64_t v82 = *v81;
    unint64_t v83 = v81[1];
    sub_1004028CC(*v81, v83);
    *uint64_t v80 = v82;
    v80[1] = v83;
    v60(&v69[v7[8]], &v70[v7[8]], v59);
    uint64_t v84 = v7[9];
    unint64_t v85 = &v69[v84];
    uint64_t v86 = &v70[v84];
    uint64_t v87 = *((void *)v86 + 1);
    void *v85 = *(void *)v86;
    v85[1] = v87;
    *(_DWORD *)&v69[v7[10]] = *(_DWORD *)&v70[v7[10]];
    *(_DWORD *)&v69[v7[11]] = *(_DWORD *)&v70[v7[11]];
    v69[v7[12]] = v70[v7[12]];
    uint64_t v88 = v7[13];
    uint64_t v89 = &v69[v88];
    uint64_t v90 = &v70[v88];
    v89[8] = v90[8];
    *(void *)uint64_t v89 = *(void *)v90;
    uint64_t v91 = *(int *)(v96 + 28);
    unint64_t v92 = (char *)a1 + v91;
    uint64_t v93 = (char *)a2 + v91;
    swift_bridgeObjectRetain(v87);
    v60(v92, v93, v59);
  }

  return a1;
}

uint64_t sub_100403DF8(uint64_t a1, int *a2)
{
  uint64_t v4 = (int *)type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v4 - 1) + 48LL))(a1, 1LL, v4))
  {
    uint64_t v6 = a1 + v4[5];
    uint64_t v7 = type metadata accessor for UUID(0LL, v5);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL))(v6, v7);
    sub_100402A84(*(void *)(a1 + v4[6]), *(void *)(a1 + v4[6] + 8));
    sub_100402A84(*(void *)(a1 + v4[7]), *(void *)(a1 + v4[7] + 8));
    uint64_t v8 = a1 + v4[8];
    uint64_t v9 = type metadata accessor for Date(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(v8, v9);
    swift_bridgeObjectRelease(*(void *)(a1 + v4[9] + 8));
  }

  uint64_t v10 = a1 + a2[5];
  uint64_t v11 = v10 + v4[5];
  uint64_t v12 = type metadata accessor for UUID(0LL, v5);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8LL);
  v13(v11, v12);
  sub_100402A84(*(void *)(v10 + v4[6]), *(void *)(v10 + v4[6] + 8));
  sub_100402A84(*(void *)(v10 + v4[7]), *(void *)(v10 + v4[7] + 8));
  uint64_t v14 = v10 + v4[8];
  uint64_t v15 = type metadata accessor for Date(0LL);
  uint64_t v18 = *(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8LL);
  v18(v14, v15);
  swift_bridgeObjectRelease(*(void *)(v10 + v4[9] + 8));
  uint64_t v16 = a1 + a2[6];
  v13(v16 + v4[5], v12);
  sub_100402A84(*(void *)(v16 + v4[6]), *(void *)(v16 + v4[6] + 8));
  sub_100402A84(*(void *)(v16 + v4[7]), *(void *)(v16 + v4[7] + 8));
  v18(v16 + v4[8], v15);
  swift_bridgeObjectRelease(*(void *)(v16 + v4[9] + 8));
  return ((uint64_t (*)(uint64_t, uint64_t))v18)(a1 + a2[7], v15);
}

_BYTE *sub_100403FD4(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6 = (int *)type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, int *))(v7 + 48))(a2, 1LL, v6))
  {
    uint64_t v9 = sub_1003F5CB4(&qword_1009B8E08);
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64LL));
  }

  else
  {
    *a1 = *a2;
    uint64_t v11 = v6[5];
    uint64_t v12 = &a1[v11];
    uint64_t v13 = &a2[v11];
    uint64_t v14 = type metadata accessor for UUID(0LL, v8);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v14 - 8) + 16LL))(v12, v13, v14);
    uint64_t v15 = v6[6];
    uint64_t v16 = (uint64_t *)&a1[v15];
    uint64_t v17 = (uint64_t *)&a2[v15];
    uint64_t v18 = *v17;
    unint64_t v19 = v17[1];
    sub_1004028CC(*v17, v19);
    *uint64_t v16 = v18;
    v16[1] = v19;
    uint64_t v20 = v6[7];
    unint64_t v21 = (uint64_t *)&a1[v20];
    uint64_t v22 = (uint64_t *)&a2[v20];
    uint64_t v23 = *v22;
    unint64_t v24 = v22[1];
    sub_1004028CC(*v22, v24);
    *unint64_t v21 = v23;
    v21[1] = v24;
    uint64_t v25 = v6[8];
    unint64_t v26 = &a1[v25];
    uint64_t v27 = &a2[v25];
    uint64_t v28 = type metadata accessor for Date(0LL);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v28 - 8) + 16LL))(v26, v27, v28);
    uint64_t v29 = v6[9];
    uint64_t v30 = &a1[v29];
    uint64_t v31 = &a2[v29];
    uint64_t v32 = v31[1];
    void *v30 = *v31;
    v30[1] = v32;
    *(_DWORD *)&a1[v6[10]] = *(_DWORD *)&a2[v6[10]];
    *(_DWORD *)&a1[v6[11]] = *(_DWORD *)&a2[v6[11]];
    a1[v6[12]] = a2[v6[12]];
    uint64_t v33 = v6[13];
    uint64_t v34 = &a1[v33];
    uint64_t v35 = &a2[v33];
    v34[8] = v35[8];
    *(void *)uint64_t v34 = *(void *)v35;
    uint64_t v36 = *(void (**)(_BYTE *, void, uint64_t, int *))(v7 + 56);
    swift_bridgeObjectRetain(v32);
    v36(a1, 0LL, 1LL, v6);
  }

  uint64_t v37 = *(int *)(a3 + 20);
  uint64_t v38 = &a1[v37];
  uint64_t v39 = &a2[v37];
  *uint64_t v38 = a2[v37];
  uint64_t v40 = v6[5];
  uint64_t v41 = &v38[v40];
  uint64_t v42 = &v39[v40];
  uint64_t v43 = type metadata accessor for UUID(0LL, v10);
  unint64_t v94 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v43 - 8) + 16LL);
  v94(v41, v42, v43);
  uint64_t v44 = v6[6];
  uint64_t v95 = a3;
  uint64_t v45 = (uint64_t *)&v38[v44];
  uint64_t v46 = (uint64_t *)&v39[v44];
  uint64_t v47 = *v46;
  unint64_t v48 = v46[1];
  sub_1004028CC(*v46, v48);
  uint64_t *v45 = v47;
  v45[1] = v48;
  uint64_t v49 = v6[7];
  unint64_t v50 = (uint64_t *)&v38[v49];
  uint64_t v51 = (uint64_t *)&v39[v49];
  uint64_t v52 = *v51;
  unint64_t v53 = v51[1];
  sub_1004028CC(*v51, v53);
  *unint64_t v50 = v52;
  v50[1] = v53;
  uint64_t v54 = v6[8];
  unint64_t v55 = &v38[v54];
  uint64_t v56 = &v39[v54];
  uint64_t v57 = type metadata accessor for Date(0LL);
  uint64_t v58 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v57 - 8) + 16LL);
  v58(v55, v56, v57);
  uint64_t v59 = v6[9];
  uint64_t v60 = &v38[v59];
  uint64_t v61 = &v39[v59];
  uint64_t v62 = v61[1];
  *uint64_t v60 = *v61;
  v60[1] = v62;
  *(_DWORD *)&v38[v6[10]] = *(_DWORD *)&v39[v6[10]];
  *(_DWORD *)&v38[v6[11]] = *(_DWORD *)&v39[v6[11]];
  v38[v6[12]] = v39[v6[12]];
  uint64_t v63 = v6[13];
  uint64_t v64 = &v38[v63];
  uint64_t v65 = &v39[v63];
  *(void *)uint64_t v64 = *(void *)v65;
  v64[8] = v65[8];
  uint64_t v66 = *(int *)(v95 + 24);
  uint64_t v67 = &a1[v66];
  uint64_t v68 = &a2[v66];
  *uint64_t v67 = a2[v66];
  uint64_t v69 = v6[5];
  uint64_t v70 = &v67[v69];
  uint64_t v71 = &v68[v69];
  swift_bridgeObjectRetain(v62);
  v94(v70, v71, v43);
  uint64_t v72 = v6[6];
  uint64_t v73 = (uint64_t *)&v67[v72];
  uint64_t v74 = (uint64_t *)&v68[v72];
  uint64_t v75 = *v74;
  unint64_t v76 = v74[1];
  sub_1004028CC(*v74, v76);
  *uint64_t v73 = v75;
  v73[1] = v76;
  uint64_t v77 = v6[7];
  unint64_t v78 = (uint64_t *)&v67[v77];
  uint64_t v79 = (uint64_t *)&v68[v77];
  uint64_t v80 = *v79;
  unint64_t v81 = v79[1];
  sub_1004028CC(*v79, v81);
  *unint64_t v78 = v80;
  v78[1] = v81;
  uint64_t v82 = v58;
  v58(&v67[v6[8]], &v68[v6[8]], v57);
  uint64_t v83 = v6[9];
  uint64_t v84 = &v67[v83];
  unint64_t v85 = &v68[v83];
  uint64_t v86 = v85[1];
  void *v84 = *v85;
  v84[1] = v86;
  *(_DWORD *)&v67[v6[10]] = *(_DWORD *)&v68[v6[10]];
  *(_DWORD *)&v67[v6[11]] = *(_DWORD *)&v68[v6[11]];
  v67[v6[12]] = v68[v6[12]];
  uint64_t v87 = v6[13];
  uint64_t v88 = &v67[v87];
  uint64_t v89 = &v68[v87];
  v88[8] = v89[8];
  *(void *)uint64_t v88 = *(void *)v89;
  uint64_t v90 = *(int *)(v95 + 28);
  uint64_t v91 = &a1[v90];
  unint64_t v92 = &a2[v90];
  swift_bridgeObjectRetain(v86);
  v82(v91, v92, v57);
  return a1;
}

_BYTE *sub_10040439C(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6 = (int *)type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v7 + 48);
  int v9 = v8(a1, 1LL, v6);
  int v10 = v8(a2, 1LL, v6);
  if (!v9)
  {
    if (!v10)
    {
      *a1 = *a2;
      uint64_t v102 = v6[5];
      uint64_t v103 = &a1[v102];
      uint64_t v104 = &a2[v102];
      uint64_t v105 = type metadata accessor for UUID(0LL, v11);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v105 - 8) + 24LL))(v103, v104, v105);
      uint64_t v106 = v6[6];
      uint64_t v107 = (uint64_t *)&a1[v106];
      unint64_t v108 = (uint64_t *)&a2[v106];
      uint64_t v109 = *v108;
      unint64_t v110 = v108[1];
      sub_1004028CC(*v108, v110);
      uint64_t v111 = *v107;
      unint64_t v112 = v107[1];
      *uint64_t v107 = v109;
      v107[1] = v110;
      sub_100402A84(v111, v112);
      uint64_t v113 = v6[7];
      uint64_t v114 = (uint64_t *)&a1[v113];
      uint64_t v115 = (uint64_t *)&a2[v113];
      uint64_t v116 = *v115;
      unint64_t v117 = v115[1];
      sub_1004028CC(*v115, v117);
      uint64_t v118 = *v114;
      unint64_t v119 = v114[1];
      *uint64_t v114 = v116;
      v114[1] = v117;
      sub_100402A84(v118, v119);
      uint64_t v120 = v6[8];
      uint64_t v121 = &a1[v120];
      uint64_t v122 = &a2[v120];
      uint64_t v123 = type metadata accessor for Date(0LL);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v123 - 8) + 24LL))(v121, v122, v123);
      uint64_t v124 = v6[9];
      uint64_t v125 = &a1[v124];
      uint64_t v126 = &a2[v124];
      void *v125 = *v126;
      uint64_t v127 = v126[1];
      uint64_t v128 = v125[1];
      v125[1] = v127;
      swift_bridgeObjectRetain(v127);
      swift_bridgeObjectRelease(v128);
      *(_DWORD *)&a1[v6[10]] = *(_DWORD *)&a2[v6[10]];
      *(_DWORD *)&a1[v6[11]] = *(_DWORD *)&a2[v6[11]];
      a1[v6[12]] = a2[v6[12]];
      uint64_t v129 = v6[13];
      uint64_t v130 = &a1[v129];
      uint64_t v131 = &a2[v129];
      uint64_t v132 = *(void *)v131;
      v130[8] = v131[8];
      *(void *)uint64_t v130 = v132;
      goto LABEL_7;
    }

    sub_1003F6050((uint64_t)a1, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    goto LABEL_6;
  }

  if (v10)
  {
LABEL_6:
    uint64_t v40 = sub_1003F5CB4(&qword_1009B8E08);
    memcpy(a1, a2, *(void *)(*(void *)(v40 - 8) + 64LL));
    goto LABEL_7;
  }

  *a1 = *a2;
  uint64_t v12 = v6[5];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = type metadata accessor for UUID(0LL, v11);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v15 - 8) + 16LL))(v13, v14, v15);
  uint64_t v16 = v6[6];
  uint64_t v17 = (uint64_t *)&a1[v16];
  uint64_t v18 = (uint64_t *)&a2[v16];
  uint64_t v19 = *v18;
  unint64_t v20 = v18[1];
  sub_1004028CC(*v18, v20);
  *uint64_t v17 = v19;
  v17[1] = v20;
  uint64_t v21 = v6[7];
  uint64_t v22 = (uint64_t *)&a1[v21];
  uint64_t v23 = (uint64_t *)&a2[v21];
  uint64_t v24 = *v23;
  unint64_t v25 = v23[1];
  sub_1004028CC(*v23, v25);
  *uint64_t v22 = v24;
  v22[1] = v25;
  uint64_t v26 = v6[8];
  uint64_t v27 = &a1[v26];
  uint64_t v28 = &a2[v26];
  uint64_t v29 = type metadata accessor for Date(0LL);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v29 - 8) + 16LL))(v27, v28, v29);
  uint64_t v30 = v6[9];
  uint64_t v31 = &a1[v30];
  uint64_t v32 = &a2[v30];
  *uint64_t v31 = *v32;
  uint64_t v33 = v32[1];
  v31[1] = v33;
  *(_DWORD *)&a1[v6[10]] = *(_DWORD *)&a2[v6[10]];
  *(_DWORD *)&a1[v6[11]] = *(_DWORD *)&a2[v6[11]];
  a1[v6[12]] = a2[v6[12]];
  uint64_t v34 = v6[13];
  uint64_t v35 = &a1[v34];
  uint64_t v36 = &a2[v34];
  char v37 = v36[8];
  *(void *)uint64_t v35 = *(void *)v36;
  v35[8] = v37;
  uint64_t v38 = *(void (**)(_BYTE *, void, uint64_t, int *))(v7 + 56);
  swift_bridgeObjectRetain(v33);
  v38(a1, 0LL, 1LL, v6);
LABEL_7:
  uint64_t v41 = *(int *)(a3 + 20);
  uint64_t v135 = a3;
  uint64_t v42 = &a1[v41];
  uint64_t v43 = &a2[v41];
  _BYTE *v42 = a2[v41];
  uint64_t v44 = v6[5];
  uint64_t v45 = &v42[v44];
  uint64_t v46 = &v43[v44];
  uint64_t v47 = type metadata accessor for UUID(0LL, v39);
  unint64_t v134 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v47 - 8) + 24LL);
  v134(v45, v46, v47);
  uint64_t v48 = v6[6];
  uint64_t v49 = (uint64_t *)&v42[v48];
  unint64_t v50 = (uint64_t *)&v43[v48];
  uint64_t v51 = *v50;
  unint64_t v52 = v50[1];
  sub_1004028CC(*v50, v52);
  uint64_t v53 = *v49;
  unint64_t v54 = v49[1];
  *uint64_t v49 = v51;
  v49[1] = v52;
  sub_100402A84(v53, v54);
  uint64_t v55 = v6[7];
  uint64_t v56 = (uint64_t *)&v42[v55];
  uint64_t v57 = (uint64_t *)&v43[v55];
  uint64_t v58 = *v57;
  unint64_t v59 = v57[1];
  sub_1004028CC(*v57, v59);
  uint64_t v60 = *v56;
  unint64_t v61 = v56[1];
  *uint64_t v56 = v58;
  v56[1] = v59;
  sub_100402A84(v60, v61);
  uint64_t v62 = v6[8];
  uint64_t v63 = &v42[v62];
  uint64_t v64 = &v43[v62];
  uint64_t v65 = type metadata accessor for Date(0LL);
  uint64_t v133 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v65 - 8) + 24LL);
  v133(v63, v64, v65);
  uint64_t v66 = v6[9];
  uint64_t v67 = &v42[v66];
  uint64_t v68 = &v43[v66];
  *uint64_t v67 = *v68;
  uint64_t v69 = v68[1];
  uint64_t v70 = v67[1];
  v67[1] = v69;
  swift_bridgeObjectRetain(v69);
  swift_bridgeObjectRelease(v70);
  *(_DWORD *)&v42[v6[10]] = *(_DWORD *)&v43[v6[10]];
  *(_DWORD *)&v42[v6[11]] = *(_DWORD *)&v43[v6[11]];
  v42[v6[12]] = v43[v6[12]];
  uint64_t v71 = v6[13];
  uint64_t v72 = &v42[v71];
  uint64_t v73 = &v43[v71];
  uint64_t v74 = *(void *)v73;
  void v72[8] = v73[8];
  *(void *)uint64_t v72 = v74;
  uint64_t v75 = *(int *)(v135 + 24);
  unint64_t v76 = &a1[v75];
  uint64_t v77 = &a2[v75];
  a1[v75] = a2[v75];
  v134(&a1[v75 + v6[5]], &a2[v75 + v6[5]], v47);
  uint64_t v78 = v6[6];
  uint64_t v79 = (uint64_t *)&v76[v78];
  uint64_t v80 = (uint64_t *)&v77[v78];
  uint64_t v81 = *v80;
  unint64_t v82 = v80[1];
  sub_1004028CC(*v80, v82);
  uint64_t v83 = *v79;
  unint64_t v84 = v79[1];
  *uint64_t v79 = v81;
  v79[1] = v82;
  sub_100402A84(v83, v84);
  uint64_t v85 = v6[7];
  uint64_t v86 = (uint64_t *)&v76[v85];
  uint64_t v87 = (uint64_t *)&v77[v85];
  uint64_t v88 = *v87;
  unint64_t v89 = v87[1];
  sub_1004028CC(*v87, v89);
  uint64_t v90 = *v86;
  unint64_t v91 = v86[1];
  *uint64_t v86 = v88;
  v86[1] = v89;
  sub_100402A84(v90, v91);
  v133(&v76[v6[8]], &v77[v6[8]], v65);
  uint64_t v92 = v6[9];
  uint64_t v93 = &v76[v92];
  unint64_t v94 = &v77[v92];
  *uint64_t v93 = *v94;
  uint64_t v95 = v94[1];
  uint64_t v96 = v93[1];
  v93[1] = v95;
  swift_bridgeObjectRetain(v95);
  swift_bridgeObjectRelease(v96);
  *(_DWORD *)&v76[v6[10]] = *(_DWORD *)&v77[v6[10]];
  *(_DWORD *)&v76[v6[11]] = *(_DWORD *)&v77[v6[11]];
  v76[v6[12]] = v77[v6[12]];
  uint64_t v97 = v6[13];
  uint64_t v98 = &v76[v97];
  uint64_t v99 = &v77[v97];
  uint64_t v100 = *(void *)v99;
  v98[8] = v99[8];
  *(void *)uint64_t v98 = v100;
  v133(&a1[*(int *)(v135 + 28)], &a2[*(int *)(v135 + 28)], v65);
  return a1;
}

_BYTE *sub_1004048F0(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6 = (int *)type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, int *))(v7 + 48))(a2, 1LL, v6))
  {
    uint64_t v9 = sub_1003F5CB4(&qword_1009B8E08);
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64LL));
  }

  else
  {
    *a1 = *a2;
    uint64_t v11 = v6[5];
    uint64_t v12 = &a1[v11];
    uint64_t v13 = &a2[v11];
    uint64_t v14 = type metadata accessor for UUID(0LL, v8);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v14 - 8) + 32LL))(v12, v13, v14);
    *(_OWORD *)&a1[v6[6]] = *(_OWORD *)&a2[v6[6]];
    *(_OWORD *)&a1[v6[7]] = *(_OWORD *)&a2[v6[7]];
    uint64_t v15 = v6[8];
    uint64_t v16 = &a1[v15];
    uint64_t v17 = &a2[v15];
    uint64_t v18 = type metadata accessor for Date(0LL);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v18 - 8) + 32LL))(v16, v17, v18);
    *(_OWORD *)&a1[v6[9]] = *(_OWORD *)&a2[v6[9]];
    *(_DWORD *)&a1[v6[10]] = *(_DWORD *)&a2[v6[10]];
    *(_DWORD *)&a1[v6[11]] = *(_DWORD *)&a2[v6[11]];
    a1[v6[12]] = a2[v6[12]];
    uint64_t v19 = v6[13];
    unint64_t v20 = &a1[v19];
    uint64_t v21 = &a2[v19];
    *(void *)unint64_t v20 = *(void *)v21;
    v20[8] = v21[8];
    (*(void (**)(_BYTE *, void, uint64_t, int *))(v7 + 56))(a1, 0LL, 1LL, v6);
  }

  uint64_t v22 = *(int *)(a3 + 20);
  uint64_t v45 = a3;
  uint64_t v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  *uint64_t v23 = a2[v22];
  uint64_t v25 = v6[5];
  uint64_t v26 = &v23[v25];
  uint64_t v27 = &v24[v25];
  uint64_t v28 = type metadata accessor for UUID(0LL, v10);
  uint64_t v44 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v28 - 8) + 32LL);
  v44(v26, v27, v28);
  *(_OWORD *)&v23[v6[6]] = *(_OWORD *)&v24[v6[6]];
  *(_OWORD *)&v23[v6[7]] = *(_OWORD *)&v24[v6[7]];
  uint64_t v29 = v6[8];
  uint64_t v30 = &v23[v29];
  uint64_t v31 = &v24[v29];
  uint64_t v32 = type metadata accessor for Date(0LL);
  uint64_t v33 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v32 - 8) + 32LL);
  v33(v30, v31, v32);
  *(_OWORD *)&v23[v6[9]] = *(_OWORD *)&v24[v6[9]];
  *(_DWORD *)&v23[v6[10]] = *(_DWORD *)&v24[v6[10]];
  *(_DWORD *)&v23[v6[11]] = *(_DWORD *)&v24[v6[11]];
  v23[v6[12]] = v24[v6[12]];
  uint64_t v34 = v6[13];
  uint64_t v35 = &v23[v34];
  uint64_t v36 = &v24[v34];
  *(void *)uint64_t v35 = *(void *)v36;
  v35[8] = v36[8];
  uint64_t v37 = *(int *)(v45 + 24);
  uint64_t v38 = &a1[v37];
  uint64_t v39 = &a2[v37];
  a1[v37] = a2[v37];
  v44(&a1[v37 + v6[5]], &a2[v37 + v6[5]], v28);
  *(_OWORD *)&v38[v6[6]] = *(_OWORD *)&v39[v6[6]];
  *(_OWORD *)&v38[v6[7]] = *(_OWORD *)&v39[v6[7]];
  v33(&v38[v6[8]], &v39[v6[8]], v32);
  *(_OWORD *)&v38[v6[9]] = *(_OWORD *)&v39[v6[9]];
  *(_DWORD *)&v38[v6[10]] = *(_DWORD *)&v39[v6[10]];
  *(_DWORD *)&v38[v6[11]] = *(_DWORD *)&v39[v6[11]];
  v38[v6[12]] = v39[v6[12]];
  uint64_t v40 = v6[13];
  uint64_t v41 = &v38[v40];
  uint64_t v42 = &v39[v40];
  *(void *)uint64_t v41 = *(void *)v42;
  v41[8] = v42[8];
  v33(&a1[*(int *)(v45 + 28)], &a2[*(int *)(v45 + 28)], v32);
  return a1;
}

_BYTE *sub_100404C04(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6 = (int *)type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v7 + 48);
  int v9 = v8(a1, 1LL, v6);
  int v10 = v8(a2, 1LL, v6);
  if (!v9)
  {
    if (!v10)
    {
      *a1 = *a2;
      uint64_t v71 = v6[5];
      uint64_t v72 = &a1[v71];
      uint64_t v73 = &a2[v71];
      uint64_t v74 = type metadata accessor for UUID(0LL, v11);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v74 - 8) + 40LL))(v72, v73, v74);
      uint64_t v75 = v6[6];
      uint64_t v76 = *(void *)&a1[v75];
      unint64_t v77 = *(void *)&a1[v75 + 8];
      *(_OWORD *)&a1[v75] = *(_OWORD *)&a2[v75];
      sub_100402A84(v76, v77);
      uint64_t v78 = v6[7];
      uint64_t v79 = *(void *)&a1[v78];
      unint64_t v80 = *(void *)&a1[v78 + 8];
      *(_OWORD *)&a1[v78] = *(_OWORD *)&a2[v78];
      sub_100402A84(v79, v80);
      uint64_t v81 = v6[8];
      unint64_t v82 = &a1[v81];
      uint64_t v83 = &a2[v81];
      uint64_t v84 = type metadata accessor for Date(0LL);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v84 - 8) + 40LL))(v82, v83, v84);
      uint64_t v85 = v6[9];
      uint64_t v86 = &a1[v85];
      uint64_t v87 = (uint64_t *)&a2[v85];
      uint64_t v89 = *v87;
      uint64_t v88 = v87[1];
      uint64_t v90 = v86[1];
      *uint64_t v86 = v89;
      v86[1] = v88;
      swift_bridgeObjectRelease(v90);
      *(_DWORD *)&a1[v6[10]] = *(_DWORD *)&a2[v6[10]];
      *(_DWORD *)&a1[v6[11]] = *(_DWORD *)&a2[v6[11]];
      a1[v6[12]] = a2[v6[12]];
      uint64_t v91 = v6[13];
      uint64_t v92 = &a1[v91];
      uint64_t v93 = &a2[v91];
      *(void *)uint64_t v92 = *(void *)v93;
      v92[8] = v93[8];
      goto LABEL_7;
    }

    sub_1003F6050((uint64_t)a1, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    goto LABEL_6;
  }

  if (v10)
  {
LABEL_6:
    uint64_t v24 = sub_1003F5CB4(&qword_1009B8E08);
    memcpy(a1, a2, *(void *)(*(void *)(v24 - 8) + 64LL));
    goto LABEL_7;
  }

  *a1 = *a2;
  uint64_t v12 = v6[5];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = type metadata accessor for UUID(0LL, v11);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v15 - 8) + 32LL))(v13, v14, v15);
  *(_OWORD *)&a1[v6[6]] = *(_OWORD *)&a2[v6[6]];
  *(_OWORD *)&a1[v6[7]] = *(_OWORD *)&a2[v6[7]];
  uint64_t v16 = v6[8];
  uint64_t v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  uint64_t v19 = type metadata accessor for Date(0LL);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v19 - 8) + 32LL))(v17, v18, v19);
  *(_OWORD *)&a1[v6[9]] = *(_OWORD *)&a2[v6[9]];
  *(_DWORD *)&a1[v6[10]] = *(_DWORD *)&a2[v6[10]];
  *(_DWORD *)&a1[v6[11]] = *(_DWORD *)&a2[v6[11]];
  a1[v6[12]] = a2[v6[12]];
  uint64_t v20 = v6[13];
  uint64_t v21 = &a1[v20];
  uint64_t v22 = &a2[v20];
  *(void *)uint64_t v21 = *(void *)v22;
  v21[8] = v22[8];
  (*(void (**)(_BYTE *, void, uint64_t, int *))(v7 + 56))(a1, 0LL, 1LL, v6);
LABEL_7:
  uint64_t v25 = *(int *)(a3 + 20);
  uint64_t v95 = a3;
  uint64_t v26 = &a1[v25];
  uint64_t v27 = &a2[v25];
  *uint64_t v26 = a2[v25];
  uint64_t v28 = v6[5];
  uint64_t v29 = &v26[v28];
  uint64_t v30 = &v27[v28];
  uint64_t v31 = type metadata accessor for UUID(0LL, v23);
  unint64_t v94 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v31 - 8) + 40LL);
  v94(v29, v30, v31);
  uint64_t v32 = v6[6];
  uint64_t v33 = *(void *)&v26[v32];
  unint64_t v34 = *(void *)&v26[v32 + 8];
  *(_OWORD *)&v26[v32] = *(_OWORD *)&v27[v32];
  sub_100402A84(v33, v34);
  uint64_t v35 = v6[7];
  uint64_t v36 = *(void *)&v26[v35];
  unint64_t v37 = *(void *)&v26[v35 + 8];
  *(_OWORD *)&v26[v35] = *(_OWORD *)&v27[v35];
  sub_100402A84(v36, v37);
  uint64_t v38 = v6[8];
  uint64_t v39 = &v26[v38];
  uint64_t v40 = &v27[v38];
  uint64_t v41 = type metadata accessor for Date(0LL);
  uint64_t v42 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v41 - 8) + 40LL);
  v42(v39, v40, v41);
  uint64_t v43 = v6[9];
  uint64_t v44 = &v26[v43];
  uint64_t v45 = (uint64_t *)&v27[v43];
  uint64_t v47 = *v45;
  uint64_t v46 = v45[1];
  uint64_t v48 = v44[1];
  void *v44 = v47;
  v44[1] = v46;
  swift_bridgeObjectRelease(v48);
  *(_DWORD *)&v26[v6[10]] = *(_DWORD *)&v27[v6[10]];
  *(_DWORD *)&v26[v6[11]] = *(_DWORD *)&v27[v6[11]];
  v26[v6[12]] = v27[v6[12]];
  uint64_t v49 = v6[13];
  unint64_t v50 = &v26[v49];
  uint64_t v51 = &v27[v49];
  *(void *)unint64_t v50 = *(void *)v51;
  v50[8] = v51[8];
  uint64_t v52 = *(int *)(v95 + 24);
  uint64_t v53 = &a1[v52];
  unint64_t v54 = &a2[v52];
  a1[v52] = a2[v52];
  v94(&a1[v52 + v6[5]], &a2[v52 + v6[5]], v31);
  uint64_t v55 = v6[6];
  uint64_t v56 = *(void *)&v53[v55];
  unint64_t v57 = *(void *)&v53[v55 + 8];
  *(_OWORD *)&v53[v55] = *(_OWORD *)&v54[v55];
  sub_100402A84(v56, v57);
  uint64_t v58 = v6[7];
  uint64_t v59 = *(void *)&v53[v58];
  unint64_t v60 = *(void *)&v53[v58 + 8];
  *(_OWORD *)&v53[v58] = *(_OWORD *)&v54[v58];
  sub_100402A84(v59, v60);
  v42(&v53[v6[8]], &v54[v6[8]], v41);
  uint64_t v61 = v6[9];
  uint64_t v62 = &v53[v61];
  uint64_t v63 = (uint64_t *)&v54[v61];
  uint64_t v65 = *v63;
  uint64_t v64 = v63[1];
  uint64_t v66 = v62[1];
  *uint64_t v62 = v65;
  v62[1] = v64;
  swift_bridgeObjectRelease(v66);
  *(_DWORD *)&v53[v6[10]] = *(_DWORD *)&v54[v6[10]];
  *(_DWORD *)&v53[v6[11]] = *(_DWORD *)&v54[v6[11]];
  v53[v6[12]] = v54[v6[12]];
  uint64_t v67 = v6[13];
  uint64_t v68 = &v53[v67];
  uint64_t v69 = &v54[v67];
  *(void *)uint64_t v68 = *(void *)v69;
  v68[8] = v69[8];
  v42(&a1[*(int *)(v95 + 28)], &a2[*(int *)(v95 + 28)], v41);
  return a1;
}

uint64_t sub_100405084(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100405090);
}

uint64_t sub_100405090(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1003F5CB4(&qword_1009B8E08);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
  }

  else
  {
    uint64_t v11 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
    uint64_t v12 = *(void *)(v11 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      uint64_t v8 = v11;
      uint64_t v13 = *(int *)(a3 + 20);
    }

    else
    {
      uint64_t v8 = type metadata accessor for Date(0LL);
      uint64_t v12 = *(void *)(v8 - 8);
      uint64_t v13 = *(int *)(a3 + 28);
    }

    uint64_t v10 = a1 + v13;
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  }

  return v9(v10, a2, v8);
}

uint64_t sub_10040512C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100405138);
}

uint64_t sub_100405138(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_1003F5CB4(&qword_1009B8E08);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }

  else
  {
    uint64_t v13 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
    uint64_t v14 = *(void *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      uint64_t v10 = v13;
      uint64_t v15 = *(int *)(a4 + 20);
    }

    else
    {
      uint64_t v10 = type metadata accessor for Date(0LL);
      uint64_t v14 = *(void *)(v10 - 8);
      uint64_t v15 = *(int *)(a4 + 28);
    }

    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

void sub_1004051DC(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    uint64_t v8 = *(void *)(v2 - 8) + 64LL;
    uint64_t v4 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(319LL);
    if (v5 <= 0x3F)
    {
      uint64_t v9 = *(void *)(v4 - 8) + 64LL;
      uint64_t v10 = v9;
      uint64_t v6 = type metadata accessor for Date(319LL);
      if (v7 <= 0x3F)
      {
        uint64_t v11 = *(void *)(v6 - 8) + 64LL;
        swift_initStructMetadata(a1, 256LL, 4LL, &v8, a1 + 16);
      }
    }
  }

uint64_t *sub_10040527C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v6 + 16LL) & ~(unint64_t)v6));
    swift_retain(v13);
  }

  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v14 = (int *)type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
      uint64_t v15 = *((void *)v14 - 1);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, int *))(v15 + 48))(a2, 1LL, v14))
      {
        uint64_t v17 = sub_1003F5CB4(&qword_1009B8E08);
        memcpy(a1, a2, *(void *)(*(void *)(v17 - 8) + 64LL));
      }

      else
      {
        *(_BYTE *)a1 = *(_BYTE *)a2;
        uint64_t v80 = v14[5];
        uint64_t v81 = (char *)a1 + v80;
        unint64_t v82 = (char *)a2 + v80;
        uint64_t v83 = type metadata accessor for UUID(0LL, v16);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v83 - 8) + 16LL))(v81, v82, v83);
        uint64_t v84 = v14[6];
        uint64_t v85 = (uint64_t *)((char *)a1 + v84);
        uint64_t v86 = (uint64_t *)((char *)a2 + v84);
        uint64_t v87 = *v86;
        unint64_t v88 = v86[1];
        sub_1004028CC(*v86, v88);
        uint64_t *v85 = v87;
        v85[1] = v88;
        uint64_t v89 = v14[7];
        uint64_t v90 = (uint64_t *)((char *)a1 + v89);
        uint64_t v91 = (uint64_t *)((char *)a2 + v89);
        uint64_t v92 = *v91;
        unint64_t v93 = v91[1];
        sub_1004028CC(*v91, v93);
        uint64_t *v90 = v92;
        v90[1] = v93;
        uint64_t v94 = v14[8];
        uint64_t v95 = (char *)a1 + v94;
        uint64_t v96 = (char *)a2 + v94;
        uint64_t v97 = type metadata accessor for Date(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v97 - 8) + 16LL))(v95, v96, v97);
        uint64_t v98 = v14[9];
        uint64_t v99 = (uint64_t *)((char *)a1 + v98);
        uint64_t v100 = (uint64_t *)((char *)a2 + v98);
        uint64_t v101 = v100[1];
        *uint64_t v99 = *v100;
        v99[1] = v101;
        *(_DWORD *)((char *)a1 + v14[10]) = *(_DWORD *)((char *)a2 + v14[10]);
        *(_DWORD *)((char *)a1 + v14[11]) = *(_DWORD *)((char *)a2 + v14[11]);
        *((_BYTE *)a1 + v14[12]) = *((_BYTE *)a2 + v14[12]);
        uint64_t v102 = v14[13];
        uint64_t v103 = (char *)a1 + v102;
        uint64_t v104 = (char *)a2 + v102;
        v103[8] = v104[8];
        *(void *)uint64_t v103 = *(void *)v104;
        uint64_t v105 = *(void (**)(uint64_t *, void, uint64_t, int *))(v15 + 56);
        swift_bridgeObjectRetain(v101);
        v105(a1, 0LL, 1LL, v14);
      }

      char v165 = (int *)type metadata accessor for IDSGroupEncryptionKeyMaterialController.TwoKey(0LL);
      uint64_t v106 = v165[5];
      uint64_t v107 = (char *)a1 + v106;
      unint64_t v108 = (char *)a2 + v106;
      *uint64_t v107 = *((_BYTE *)a2 + v106);
      uint64_t v109 = v14[5];
      unint64_t v110 = &v107[v109];
      uint64_t v111 = &v108[v109];
      uint64_t v113 = type metadata accessor for UUID(0LL, v112);
      unsigned int v163 = *(void (**)(_BYTE *, char *, uint64_t))(*(void *)(v113 - 8) + 16LL);
      v163(v110, v111, v113);
      uint64_t v114 = v14[6];
      uint64_t v115 = (uint64_t *)&v107[v114];
      uint64_t v116 = (uint64_t *)&v108[v114];
      uint64_t v117 = *v116;
      unint64_t v118 = v116[1];
      sub_1004028CC(*v116, v118);
      *uint64_t v115 = v117;
      v115[1] = v118;
      uint64_t v119 = v14[7];
      uint64_t v120 = (uint64_t *)&v107[v119];
      uint64_t v121 = (uint64_t *)&v108[v119];
      uint64_t v122 = *v121;
      unint64_t v123 = v121[1];
      sub_1004028CC(*v121, v123);
      *uint64_t v120 = v122;
      v120[1] = v123;
      uint64_t v124 = v14[8];
      uint64_t v125 = &v107[v124];
      uint64_t v126 = &v108[v124];
      uint64_t v127 = type metadata accessor for Date(0LL);
      uint64_t v162 = *(void (**)(char *, char *, uint64_t))(*(void *)(v127 - 8) + 16LL);
      v162(v125, v126, v127);
      uint64_t v128 = v14[9];
      uint64_t v129 = &v107[v128];
      uint64_t v130 = &v108[v128];
      uint64_t v131 = *((void *)v130 + 1);
      *uint64_t v129 = *(void *)v130;
      v129[1] = v131;
      *(_DWORD *)&v107[v14[10]] = *(_DWORD *)&v108[v14[10]];
      *(_DWORD *)&v107[v14[11]] = *(_DWORD *)&v108[v14[11]];
      v107[v14[12]] = v108[v14[12]];
      uint64_t v132 = v14[13];
      uint64_t v133 = &v107[v132];
      unint64_t v134 = &v108[v132];
      *(void *)uint64_t v133 = *(void *)v134;
      v133[8] = v134[8];
      uint64_t v135 = v165[6];
      unint64_t v136 = (char *)a1 + v135;
      uint64_t v137 = (char *)a2 + v135;
      _BYTE *v136 = *((_BYTE *)a2 + v135);
      uint64_t v138 = v14[5];
      uint64_t v139 = &v136[v138];
      uint64_t v140 = &v137[v138];
      swift_bridgeObjectRetain(v131);
      v163(v139, v140, v113);
      uint64_t v141 = v14[6];
      os_log_type_t v142 = (uint64_t *)&v136[v141];
      uint64_t v143 = (uint64_t *)&v137[v141];
      uint64_t v144 = *v143;
      unint64_t v145 = v143[1];
      sub_1004028CC(*v143, v145);
      *os_log_type_t v142 = v144;
      v142[1] = v145;
      uint64_t v146 = v14[7];
      unint64_t v147 = (uint64_t *)&v136[v146];
      uint64_t v148 = (uint64_t *)&v137[v146];
      uint64_t v149 = *v148;
      unint64_t v150 = v148[1];
      sub_1004028CC(*v148, v150);
      *unint64_t v147 = v149;
      v147[1] = v150;
      v162(&v136[v14[8]], &v137[v14[8]], v127);
      uint64_t v151 = v14[9];
      os_log_t v152 = &v136[v151];
      uint64_t v153 = &v137[v151];
      uint64_t v154 = *((void *)v153 + 1);
      *os_log_t v152 = *(void *)v153;
      v152[1] = v154;
      *(_DWORD *)&v136[v14[10]] = *(_DWORD *)&v137[v14[10]];
      *(_DWORD *)&v136[v14[11]] = *(_DWORD *)&v137[v14[11]];
      v136[v14[12]] = v137[v14[12]];
      uint64_t v155 = v14[13];
      uint64_t v156 = &v136[v155];
      uint64_t v157 = &v137[v155];
      v156[8] = v157[8];
      *(void *)uint64_t v156 = *(void *)v157;
      uint64_t v158 = v165[7];
      uint64_t v159 = (char *)a1 + v158;
      id v160 = (char *)a2 + v158;
      swift_bridgeObjectRetain(v154);
      v162(v159, v160, v127);
      unint64_t v77 = a1;
      uint64_t v78 = a3;
      uint64_t v79 = 1LL;
      goto LABEL_14;
    }

    if (!EnumCaseMultiPayload)
    {
      uint64_t v9 = (int *)type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
      uint64_t v10 = *((void *)v9 - 1);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, int *))(v10 + 48))(a2, 1LL, v9))
      {
        uint64_t v12 = sub_1003F5CB4(&qword_1009B8E08);
        memcpy(a1, a2, *(void *)(*(void *)(v12 - 8) + 64LL));
      }

      else
      {
        *(_BYTE *)a1 = *(_BYTE *)a2;
        uint64_t v18 = v9[5];
        uint64_t v19 = (char *)a1 + v18;
        uint64_t v20 = (char *)a2 + v18;
        uint64_t v21 = type metadata accessor for UUID(0LL, v11);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16LL))(v19, v20, v21);
        uint64_t v22 = v9[6];
        uint64_t v23 = (uint64_t *)((char *)a1 + v22);
        uint64_t v24 = (uint64_t *)((char *)a2 + v22);
        uint64_t v25 = *v24;
        unint64_t v26 = v24[1];
        sub_1004028CC(*v24, v26);
        *uint64_t v23 = v25;
        v23[1] = v26;
        uint64_t v27 = v9[7];
        uint64_t v28 = (uint64_t *)((char *)a1 + v27);
        uint64_t v29 = (uint64_t *)((char *)a2 + v27);
        uint64_t v30 = *v29;
        unint64_t v31 = v29[1];
        sub_1004028CC(*v29, v31);
        *uint64_t v28 = v30;
        v28[1] = v31;
        uint64_t v32 = v9[8];
        uint64_t v33 = (char *)a1 + v32;
        unint64_t v34 = (char *)a2 + v32;
        uint64_t v35 = type metadata accessor for Date(0LL);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 16LL))(v33, v34, v35);
        uint64_t v36 = v9[9];
        unint64_t v37 = (uint64_t *)((char *)a1 + v36);
        uint64_t v38 = (uint64_t *)((char *)a2 + v36);
        uint64_t v39 = v38[1];
        void *v37 = *v38;
        v37[1] = v39;
        *(_DWORD *)((char *)a1 + v9[10]) = *(_DWORD *)((char *)a2 + v9[10]);
        *(_DWORD *)((char *)a1 + v9[11]) = *(_DWORD *)((char *)a2 + v9[11]);
        *((_BYTE *)a1 + v9[12]) = *((_BYTE *)a2 + v9[12]);
        uint64_t v40 = v9[13];
        uint64_t v41 = (char *)a1 + v40;
        uint64_t v42 = (char *)a2 + v40;
        v41[8] = v42[8];
        *(void *)uint64_t v41 = *(void *)v42;
        uint64_t v43 = *(void (**)(uint64_t *, void, uint64_t, int *))(v10 + 56);
        swift_bridgeObjectRetain(v39);
        v43(a1, 0LL, 1LL, v9);
      }

      uint64_t v164 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.OneKey(0LL);
      uint64_t v44 = *(int *)(v164 + 20);
      uint64_t v45 = (char *)a1 + v44;
      uint64_t v46 = (char *)a2 + v44;
      _BYTE *v45 = *((_BYTE *)a2 + v44);
      uint64_t v47 = v9[5];
      uint64_t v48 = &v45[v47];
      uint64_t v49 = &v46[v47];
      uint64_t v51 = type metadata accessor for UUID(0LL, v50);
      (*(void (**)(_BYTE *, char *, uint64_t))(*(void *)(v51 - 8) + 16LL))(v48, v49, v51);
      uint64_t v52 = v9[6];
      uint64_t v53 = (uint64_t *)&v45[v52];
      unint64_t v54 = (uint64_t *)&v46[v52];
      uint64_t v55 = *v54;
      unint64_t v56 = v54[1];
      sub_1004028CC(*v54, v56);
      *uint64_t v53 = v55;
      v53[1] = v56;
      uint64_t v57 = v9[7];
      uint64_t v58 = (uint64_t *)&v45[v57];
      uint64_t v59 = (uint64_t *)&v46[v57];
      uint64_t v60 = *v59;
      unint64_t v61 = v59[1];
      sub_1004028CC(*v59, v61);
      *uint64_t v58 = v60;
      v58[1] = v61;
      uint64_t v62 = v9[8];
      uint64_t v63 = &v45[v62];
      uint64_t v64 = &v46[v62];
      uint64_t v65 = type metadata accessor for Date(0LL);
      uint64_t v66 = *(void (**)(char *, char *, uint64_t))(*(void *)(v65 - 8) + 16LL);
      v66(v63, v64, v65);
      uint64_t v67 = v9[9];
      uint64_t v68 = &v45[v67];
      uint64_t v69 = &v46[v67];
      uint64_t v70 = *((void *)v69 + 1);
      void *v68 = *(void *)v69;
      v68[1] = v70;
      *(_DWORD *)&v45[v9[10]] = *(_DWORD *)&v46[v9[10]];
      *(_DWORD *)&v45[v9[11]] = *(_DWORD *)&v46[v9[11]];
      v45[v9[12]] = v46[v9[12]];
      uint64_t v71 = v9[13];
      uint64_t v72 = &v45[v71];
      uint64_t v73 = &v46[v71];
      void v72[8] = v73[8];
      *(void *)uint64_t v72 = *(void *)v73;
      uint64_t v74 = *(int *)(v164 + 24);
      uint64_t v75 = (char *)a1 + v74;
      uint64_t v76 = (char *)a2 + v74;
      swift_bridgeObjectRetain(v70);
      v66(v75, v76, v65);
      unint64_t v77 = a1;
      uint64_t v78 = a3;
      uint64_t v79 = 0LL;
LABEL_14:
      swift_storeEnumTagMultiPayload(v77, v78, v79);
      return a1;
    }

    memcpy(a1, a2, *(void *)(v5 + 64));
  }

  return a1;
}

uint64_t sub_100405958(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_getEnumCaseMultiPayload(a1, a2);
  if ((_DWORD)result == 1)
  {
    uint64_t v17 = (int *)type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v17 - 1) + 48LL))(a1, 1LL, v17))
    {
      uint64_t v19 = a1 + v17[5];
      uint64_t v20 = type metadata accessor for UUID(0LL, v18);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8LL))(v19, v20);
      sub_100402A84(*(void *)(a1 + v17[6]), *(void *)(a1 + v17[6] + 8));
      sub_100402A84(*(void *)(a1 + v17[7]), *(void *)(a1 + v17[7] + 8));
      uint64_t v21 = a1 + v17[8];
      uint64_t v22 = type metadata accessor for Date(0LL);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8LL))(v21, v22);
      swift_bridgeObjectRelease(*(void *)(a1 + v17[9] + 8));
    }

    uint64_t v23 = (int *)type metadata accessor for IDSGroupEncryptionKeyMaterialController.TwoKey(0LL);
    uint64_t v24 = a1 + v23[5];
    uint64_t v25 = v24 + v17[5];
    uint64_t v27 = type metadata accessor for UUID(0LL, v26);
    uint64_t v28 = *(void (**)(uint64_t, uint64_t))(*(void *)(v27 - 8) + 8LL);
    v28(v25, v27);
    sub_100402A84(*(void *)(v24 + v17[6]), *(void *)(v24 + v17[6] + 8));
    sub_100402A84(*(void *)(v24 + v17[7]), *(void *)(v24 + v17[7] + 8));
    uint64_t v29 = v24 + v17[8];
    uint64_t v30 = type metadata accessor for Date(0LL);
    uint64_t v33 = *(void (**)(uint64_t, uint64_t))(*(void *)(v30 - 8) + 8LL);
    v33(v29, v30);
    swift_bridgeObjectRelease(*(void *)(v24 + v17[9] + 8));
    uint64_t v31 = a1 + v23[6];
    v28(v31 + v17[5], v27);
    sub_100402A84(*(void *)(v31 + v17[6]), *(void *)(v31 + v17[6] + 8));
    sub_100402A84(*(void *)(v31 + v17[7]), *(void *)(v31 + v17[7] + 8));
    v33(v31 + v17[8], v30);
    swift_bridgeObjectRelease(*(void *)(v31 + v17[9] + 8));
    return ((uint64_t (*)(uint64_t, uint64_t))v33)(a1 + v23[7], v30);
  }

  else if (!(_DWORD)result)
  {
    uint64_t v4 = (int *)type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v4 - 1) + 48LL))(a1, 1LL, v4))
    {
      uint64_t v6 = a1 + v4[5];
      uint64_t v7 = type metadata accessor for UUID(0LL, v5);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL))(v6, v7);
      sub_100402A84(*(void *)(a1 + v4[6]), *(void *)(a1 + v4[6] + 8));
      sub_100402A84(*(void *)(a1 + v4[7]), *(void *)(a1 + v4[7] + 8));
      uint64_t v8 = a1 + v4[8];
      uint64_t v9 = type metadata accessor for Date(0LL);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(v8, v9);
      swift_bridgeObjectRelease(*(void *)(a1 + v4[9] + 8));
    }

    uint64_t v10 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.OneKey(0LL);
    uint64_t v11 = a1 + *(int *)(v10 + 20);
    uint64_t v12 = v11 + v4[5];
    uint64_t v14 = type metadata accessor for UUID(0LL, v13);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8LL))(v12, v14);
    sub_100402A84(*(void *)(v11 + v4[6]), *(void *)(v11 + v4[6] + 8));
    sub_100402A84(*(void *)(v11 + v4[7]), *(void *)(v11 + v4[7] + 8));
    uint64_t v15 = v11 + v4[8];
    uint64_t v16 = type metadata accessor for Date(0LL);
    uint64_t v32 = *(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8LL);
    v32(v15, v16);
    swift_bridgeObjectRelease(*(void *)(v11 + v4[9] + 8));
    return ((uint64_t (*)(uint64_t, uint64_t))v32)(a1 + *(int *)(v10 + 24), v16);
  }

  return result;
}

_BYTE *sub_100405CB0(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v164 = a3;
    uint64_t v11 = (int *)type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
    uint64_t v12 = *((void *)v11 - 1);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, int *))(v12 + 48))(a2, 1LL, v11))
    {
      uint64_t v14 = sub_1003F5CB4(&qword_1009B8E08);
      memcpy(a1, a2, *(void *)(*(void *)(v14 - 8) + 64LL));
    }

    else
    {
      *a1 = *a2;
      uint64_t v78 = v11[5];
      uint64_t v79 = &a1[v78];
      uint64_t v80 = &a2[v78];
      uint64_t v81 = type metadata accessor for UUID(0LL, v13);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v81 - 8) + 16LL))(v79, v80, v81);
      uint64_t v82 = v11[6];
      uint64_t v83 = (uint64_t *)&a1[v82];
      uint64_t v84 = (uint64_t *)&a2[v82];
      uint64_t v85 = *v84;
      unint64_t v86 = v84[1];
      sub_1004028CC(*v84, v86);
      *uint64_t v83 = v85;
      v83[1] = v86;
      uint64_t v87 = v11[7];
      unint64_t v88 = (uint64_t *)&a1[v87];
      uint64_t v89 = (uint64_t *)&a2[v87];
      uint64_t v90 = *v89;
      unint64_t v91 = v89[1];
      sub_1004028CC(*v89, v91);
      *unint64_t v88 = v90;
      v88[1] = v91;
      uint64_t v92 = v11[8];
      unint64_t v93 = &a1[v92];
      uint64_t v94 = &a2[v92];
      uint64_t v95 = type metadata accessor for Date(0LL);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v95 - 8) + 16LL))(v93, v94, v95);
      uint64_t v96 = v11[9];
      uint64_t v97 = &a1[v96];
      uint64_t v98 = &a2[v96];
      uint64_t v99 = v98[1];
      *uint64_t v97 = *v98;
      v97[1] = v99;
      *(_DWORD *)&a1[v11[10]] = *(_DWORD *)&a2[v11[10]];
      *(_DWORD *)&a1[v11[11]] = *(_DWORD *)&a2[v11[11]];
      a1[v11[12]] = a2[v11[12]];
      uint64_t v100 = v11[13];
      uint64_t v101 = &a1[v100];
      uint64_t v102 = &a2[v100];
      v101[8] = v102[8];
      *(void *)uint64_t v101 = *(void *)v102;
      uint64_t v103 = *(void (**)(_BYTE *, void, uint64_t, int *))(v12 + 56);
      swift_bridgeObjectRetain(v99);
      v103(a1, 0LL, 1LL, v11);
    }

    uint64_t v162 = (int *)type metadata accessor for IDSGroupEncryptionKeyMaterialController.TwoKey(0LL);
    uint64_t v104 = v162[5];
    uint64_t v105 = &a1[v104];
    uint64_t v106 = &a2[v104];
    _BYTE *v105 = a2[v104];
    uint64_t v107 = v11[5];
    unint64_t v108 = &v105[v107];
    uint64_t v109 = &v106[v107];
    uint64_t v111 = type metadata accessor for UUID(0LL, v110);
    int v161 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v111 - 8) + 16LL);
    v161(v108, v109, v111);
    uint64_t v112 = v11[6];
    uint64_t v113 = (uint64_t *)&v105[v112];
    uint64_t v114 = (uint64_t *)&v106[v112];
    uint64_t v115 = *v114;
    unint64_t v116 = v114[1];
    sub_1004028CC(*v114, v116);
    uint64_t *v113 = v115;
    v113[1] = v116;
    uint64_t v117 = v11[7];
    unint64_t v118 = (uint64_t *)&v105[v117];
    uint64_t v119 = (uint64_t *)&v106[v117];
    uint64_t v120 = *v119;
    unint64_t v121 = v119[1];
    sub_1004028CC(*v119, v121);
    uint64_t *v118 = v120;
    v118[1] = v121;
    uint64_t v122 = v11[8];
    unint64_t v123 = &v105[v122];
    uint64_t v124 = &v106[v122];
    uint64_t v125 = type metadata accessor for Date(0LL);
    id v160 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v125 - 8) + 16LL);
    v160(v123, v124, v125);
    uint64_t v126 = v11[9];
    uint64_t v127 = &v105[v126];
    uint64_t v128 = &v106[v126];
    uint64_t v129 = v128[1];
    void *v127 = *v128;
    v127[1] = v129;
    *(_DWORD *)&v105[v11[10]] = *(_DWORD *)&v106[v11[10]];
    *(_DWORD *)&v105[v11[11]] = *(_DWORD *)&v106[v11[11]];
    v105[v11[12]] = v106[v11[12]];
    uint64_t v130 = v11[13];
    uint64_t v131 = &v105[v130];
    uint64_t v132 = &v106[v130];
    *(void *)uint64_t v131 = *(void *)v132;
    v131[8] = v132[8];
    uint64_t v133 = v162[6];
    unint64_t v134 = &a1[v133];
    uint64_t v135 = &a2[v133];
    *unint64_t v134 = a2[v133];
    uint64_t v136 = v11[5];
    uint64_t v137 = &v134[v136];
    uint64_t v138 = &v135[v136];
    swift_bridgeObjectRetain(v129);
    v161(v137, v138, v111);
    uint64_t v139 = v11[6];
    uint64_t v140 = (uint64_t *)&v134[v139];
    uint64_t v141 = (uint64_t *)&v135[v139];
    uint64_t v142 = *v141;
    unint64_t v143 = v141[1];
    sub_1004028CC(*v141, v143);
    uint64_t *v140 = v142;
    v140[1] = v143;
    uint64_t v144 = v11[7];
    unint64_t v145 = (uint64_t *)&v134[v144];
    uint64_t v146 = (uint64_t *)&v135[v144];
    uint64_t v147 = *v146;
    unint64_t v148 = v146[1];
    sub_1004028CC(*v146, v148);
    uint64_t *v145 = v147;
    v145[1] = v148;
    v160(&v134[v11[8]], &v135[v11[8]], v125);
    uint64_t v149 = v11[9];
    unint64_t v150 = &v134[v149];
    uint64_t v151 = &v135[v149];
    uint64_t v152 = v151[1];
    void *v150 = *v151;
    v150[1] = v152;
    *(_DWORD *)&v134[v11[10]] = *(_DWORD *)&v135[v11[10]];
    *(_DWORD *)&v134[v11[11]] = *(_DWORD *)&v135[v11[11]];
    v134[v11[12]] = v135[v11[12]];
    uint64_t v153 = v11[13];
    uint64_t v154 = &v134[v153];
    uint64_t v155 = &v135[v153];
    v154[8] = v155[8];
    *(void *)uint64_t v154 = *(void *)v155;
    uint64_t v156 = v162[7];
    uint64_t v157 = &a1[v156];
    uint64_t v158 = &a2[v156];
    swift_bridgeObjectRetain(v152);
    v160(v157, v158, v125);
    uint64_t v75 = a1;
    uint64_t v76 = v164;
    uint64_t v77 = 1LL;
    goto LABEL_12;
  }

  if (!EnumCaseMultiPayload)
  {
    uint64_t v163 = a3;
    uint64_t v7 = (int *)type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
    uint64_t v8 = *((void *)v7 - 1);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, int *))(v8 + 48))(a2, 1LL, v7))
    {
      uint64_t v10 = sub_1003F5CB4(&qword_1009B8E08);
      memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    }

    else
    {
      *a1 = *a2;
      uint64_t v15 = v7[5];
      uint64_t v16 = &a1[v15];
      uint64_t v17 = &a2[v15];
      uint64_t v18 = type metadata accessor for UUID(0LL, v9);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v18 - 8) + 16LL))(v16, v17, v18);
      uint64_t v19 = v7[6];
      uint64_t v20 = (uint64_t *)&a1[v19];
      uint64_t v21 = (uint64_t *)&a2[v19];
      uint64_t v22 = *v21;
      unint64_t v23 = v21[1];
      sub_1004028CC(*v21, v23);
      *uint64_t v20 = v22;
      v20[1] = v23;
      uint64_t v24 = v7[7];
      uint64_t v25 = (uint64_t *)&a1[v24];
      uint64_t v26 = (uint64_t *)&a2[v24];
      uint64_t v27 = *v26;
      unint64_t v28 = v26[1];
      sub_1004028CC(*v26, v28);
      *uint64_t v25 = v27;
      v25[1] = v28;
      uint64_t v29 = v7[8];
      uint64_t v30 = &a1[v29];
      uint64_t v31 = &a2[v29];
      uint64_t v32 = type metadata accessor for Date(0LL);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v32 - 8) + 16LL))(v30, v31, v32);
      uint64_t v33 = v7[9];
      unint64_t v34 = &a1[v33];
      uint64_t v35 = &a2[v33];
      uint64_t v36 = v35[1];
      void *v34 = *v35;
      v34[1] = v36;
      *(_DWORD *)&a1[v7[10]] = *(_DWORD *)&a2[v7[10]];
      *(_DWORD *)&a1[v7[11]] = *(_DWORD *)&a2[v7[11]];
      a1[v7[12]] = a2[v7[12]];
      uint64_t v37 = v7[13];
      uint64_t v38 = &a1[v37];
      uint64_t v39 = &a2[v37];
      v38[8] = v39[8];
      *(void *)uint64_t v38 = *(void *)v39;
      uint64_t v40 = *(void (**)(_BYTE *, void, uint64_t, int *))(v8 + 56);
      swift_bridgeObjectRetain(v36);
      v40(a1, 0LL, 1LL, v7);
    }

    uint64_t v41 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.OneKey(0LL);
    uint64_t v42 = *(int *)(v41 + 20);
    uint64_t v43 = &a1[v42];
    uint64_t v44 = &a2[v42];
    _BYTE *v43 = a2[v42];
    uint64_t v45 = v7[5];
    uint64_t v46 = &v43[v45];
    uint64_t v47 = &v44[v45];
    uint64_t v49 = type metadata accessor for UUID(0LL, v48);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v49 - 8) + 16LL))(v46, v47, v49);
    uint64_t v50 = v7[6];
    uint64_t v51 = (uint64_t *)&v43[v50];
    uint64_t v52 = (uint64_t *)&v44[v50];
    uint64_t v53 = *v52;
    unint64_t v54 = v52[1];
    sub_1004028CC(*v52, v54);
    *uint64_t v51 = v53;
    v51[1] = v54;
    uint64_t v55 = v7[7];
    unint64_t v56 = (uint64_t *)&v43[v55];
    uint64_t v57 = (uint64_t *)&v44[v55];
    uint64_t v58 = *v57;
    unint64_t v59 = v57[1];
    sub_1004028CC(*v57, v59);
    *unint64_t v56 = v58;
    v56[1] = v59;
    uint64_t v60 = v7[8];
    unint64_t v61 = &v43[v60];
    uint64_t v62 = &v44[v60];
    uint64_t v63 = type metadata accessor for Date(0LL);
    uint64_t v64 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v63 - 8) + 16LL);
    v64(v61, v62, v63);
    uint64_t v65 = v7[9];
    uint64_t v66 = &v43[v65];
    uint64_t v67 = &v44[v65];
    uint64_t v68 = v67[1];
    *uint64_t v66 = *v67;
    v66[1] = v68;
    *(_DWORD *)&v43[v7[10]] = *(_DWORD *)&v44[v7[10]];
    *(_DWORD *)&v43[v7[11]] = *(_DWORD *)&v44[v7[11]];
    v43[v7[12]] = v44[v7[12]];
    uint64_t v69 = v7[13];
    uint64_t v70 = &v43[v69];
    uint64_t v71 = &v44[v69];
    v70[8] = v71[8];
    *(void *)uint64_t v70 = *(void *)v71;
    uint64_t v72 = *(int *)(v41 + 24);
    uint64_t v73 = &a1[v72];
    uint64_t v74 = &a2[v72];
    swift_bridgeObjectRetain(v68);
    v64(v73, v74, v63);
    uint64_t v75 = a1;
    uint64_t v76 = v163;
    uint64_t v77 = 0LL;
LABEL_12:
    swift_storeEnumTagMultiPayload(v75, v76, v77);
    return a1;
  }

  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  return a1;
}

_BYTE *sub_100406364(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1003F6050((uint64_t)a1, type metadata accessor for IDSGroupEncryptionKeyMaterialController.KeyState);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v169 = a3;
      uint64_t v11 = (int *)type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
      uint64_t v12 = *((void *)v11 - 1);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, int *))(v12 + 48))(a2, 1LL, v11))
      {
        uint64_t v14 = sub_1003F5CB4(&qword_1009B8E08);
        memcpy(a1, a2, *(void *)(*(void *)(v14 - 8) + 64LL));
      }

      else
      {
        *a1 = *a2;
        uint64_t v80 = v11[5];
        uint64_t v81 = &a1[v80];
        uint64_t v82 = &a2[v80];
        uint64_t v83 = type metadata accessor for UUID(0LL, v13);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v83 - 8) + 16LL))(v81, v82, v83);
        uint64_t v84 = v11[6];
        uint64_t v85 = (uint64_t *)&a1[v84];
        unint64_t v86 = (uint64_t *)&a2[v84];
        uint64_t v87 = *v86;
        unint64_t v88 = v86[1];
        sub_1004028CC(*v86, v88);
        uint64_t *v85 = v87;
        v85[1] = v88;
        uint64_t v89 = v11[7];
        uint64_t v90 = (uint64_t *)&a1[v89];
        unint64_t v91 = (uint64_t *)&a2[v89];
        uint64_t v92 = *v91;
        unint64_t v93 = v91[1];
        sub_1004028CC(*v91, v93);
        uint64_t *v90 = v92;
        v90[1] = v93;
        uint64_t v94 = v11[8];
        uint64_t v95 = &a1[v94];
        uint64_t v96 = &a2[v94];
        uint64_t v97 = type metadata accessor for Date(0LL);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v97 - 8) + 16LL))(v95, v96, v97);
        uint64_t v98 = v11[9];
        uint64_t v99 = &a1[v98];
        uint64_t v100 = &a2[v98];
        *uint64_t v99 = *v100;
        uint64_t v101 = v100[1];
        v99[1] = v101;
        *(_DWORD *)&a1[v11[10]] = *(_DWORD *)&a2[v11[10]];
        *(_DWORD *)&a1[v11[11]] = *(_DWORD *)&a2[v11[11]];
        a1[v11[12]] = a2[v11[12]];
        uint64_t v102 = v11[13];
        uint64_t v103 = &a1[v102];
        uint64_t v104 = &a2[v102];
        char v105 = v104[8];
        *(void *)uint64_t v103 = *(void *)v104;
        v103[8] = v105;
        uint64_t v106 = *(void (**)(_BYTE *, void, uint64_t, int *))(v12 + 56);
        swift_bridgeObjectRetain(v101);
        v106(a1, 0LL, 1LL, v11);
      }

      uint64_t v167 = (int *)type metadata accessor for IDSGroupEncryptionKeyMaterialController.TwoKey(0LL);
      uint64_t v107 = v167[5];
      unint64_t v108 = &a1[v107];
      uint64_t v109 = &a2[v107];
      _BYTE *v108 = a2[v107];
      uint64_t v110 = v11[5];
      uint64_t v111 = &v108[v110];
      uint64_t v112 = &v109[v110];
      uint64_t v114 = type metadata accessor for UUID(0LL, v113);
      uint64_t v166 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v114 - 8) + 16LL);
      v166(v111, v112, v114);
      uint64_t v115 = v11[6];
      unint64_t v116 = (uint64_t *)&v108[v115];
      uint64_t v117 = (uint64_t *)&v109[v115];
      uint64_t v118 = *v117;
      unint64_t v119 = v117[1];
      sub_1004028CC(*v117, v119);
      *unint64_t v116 = v118;
      v116[1] = v119;
      uint64_t v120 = v11[7];
      unint64_t v121 = (uint64_t *)&v108[v120];
      uint64_t v122 = (uint64_t *)&v109[v120];
      uint64_t v123 = *v122;
      unint64_t v124 = v122[1];
      sub_1004028CC(*v122, v124);
      *unint64_t v121 = v123;
      v121[1] = v124;
      uint64_t v125 = v11[8];
      uint64_t v126 = &v108[v125];
      uint64_t v127 = &v109[v125];
      uint64_t v128 = type metadata accessor for Date(0LL);
      char v165 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v128 - 8) + 16LL);
      v165(v126, v127, v128);
      uint64_t v129 = v11[9];
      uint64_t v130 = &v108[v129];
      uint64_t v131 = &v109[v129];
      void *v130 = *v131;
      uint64_t v132 = v131[1];
      v130[1] = v132;
      *(_DWORD *)&v108[v11[10]] = *(_DWORD *)&v109[v11[10]];
      *(_DWORD *)&v108[v11[11]] = *(_DWORD *)&v109[v11[11]];
      v108[v11[12]] = v109[v11[12]];
      uint64_t v133 = v11[13];
      unint64_t v134 = &v108[v133];
      uint64_t v135 = &v109[v133];
      char v136 = v135[8];
      *(void *)unint64_t v134 = *(void *)v135;
      v134[8] = v136;
      uint64_t v137 = v167[6];
      uint64_t v138 = &a1[v137];
      uint64_t v139 = &a2[v137];
      _BYTE *v138 = a2[v137];
      uint64_t v140 = v11[5];
      uint64_t v141 = &v138[v140];
      uint64_t v142 = &v139[v140];
      swift_bridgeObjectRetain(v132);
      v166(v141, v142, v114);
      uint64_t v143 = v11[6];
      uint64_t v144 = (uint64_t *)&v138[v143];
      unint64_t v145 = (uint64_t *)&v139[v143];
      uint64_t v146 = *v145;
      unint64_t v147 = v145[1];
      sub_1004028CC(*v145, v147);
      *uint64_t v144 = v146;
      v144[1] = v147;
      uint64_t v148 = v11[7];
      uint64_t v149 = (uint64_t *)&v138[v148];
      unint64_t v150 = (uint64_t *)&v139[v148];
      uint64_t v151 = *v150;
      unint64_t v152 = v150[1];
      sub_1004028CC(*v150, v152);
      uint64_t *v149 = v151;
      v149[1] = v152;
      v165(&v138[v11[8]], &v139[v11[8]], v128);
      uint64_t v153 = v11[9];
      uint64_t v154 = &v138[v153];
      uint64_t v155 = &v139[v153];
      *uint64_t v154 = *v155;
      uint64_t v156 = v155[1];
      v154[1] = v156;
      *(_DWORD *)&v138[v11[10]] = *(_DWORD *)&v139[v11[10]];
      *(_DWORD *)&v138[v11[11]] = *(_DWORD *)&v139[v11[11]];
      v138[v11[12]] = v139[v11[12]];
      uint64_t v157 = v11[13];
      uint64_t v158 = &v138[v157];
      uint64_t v159 = &v139[v157];
      char v160 = v159[8];
      *(void *)uint64_t v158 = *(void *)v159;
      v158[8] = v160;
      uint64_t v161 = v167[7];
      uint64_t v162 = &a1[v161];
      uint64_t v163 = &a2[v161];
      swift_bridgeObjectRetain(v156);
      v165(v162, v163, v128);
      uint64_t v77 = a1;
      uint64_t v78 = v169;
      uint64_t v79 = 1LL;
      goto LABEL_13;
    }

    if (!EnumCaseMultiPayload)
    {
      uint64_t v168 = a3;
      uint64_t v7 = (int *)type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
      uint64_t v8 = *((void *)v7 - 1);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, int *))(v8 + 48))(a2, 1LL, v7))
      {
        uint64_t v10 = sub_1003F5CB4(&qword_1009B8E08);
        memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
      }

      else
      {
        *a1 = *a2;
        uint64_t v15 = v7[5];
        uint64_t v16 = &a1[v15];
        uint64_t v17 = &a2[v15];
        uint64_t v18 = type metadata accessor for UUID(0LL, v9);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v18 - 8) + 16LL))(v16, v17, v18);
        uint64_t v19 = v7[6];
        uint64_t v20 = (uint64_t *)&a1[v19];
        uint64_t v21 = (uint64_t *)&a2[v19];
        uint64_t v22 = *v21;
        unint64_t v23 = v21[1];
        sub_1004028CC(*v21, v23);
        *uint64_t v20 = v22;
        v20[1] = v23;
        uint64_t v24 = v7[7];
        uint64_t v25 = (uint64_t *)&a1[v24];
        uint64_t v26 = (uint64_t *)&a2[v24];
        uint64_t v27 = *v26;
        unint64_t v28 = v26[1];
        sub_1004028CC(*v26, v28);
        *uint64_t v25 = v27;
        v25[1] = v28;
        uint64_t v29 = v7[8];
        uint64_t v30 = &a1[v29];
        uint64_t v31 = &a2[v29];
        uint64_t v32 = type metadata accessor for Date(0LL);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v32 - 8) + 16LL))(v30, v31, v32);
        uint64_t v33 = v7[9];
        unint64_t v34 = &a1[v33];
        uint64_t v35 = &a2[v33];
        void *v34 = *v35;
        uint64_t v36 = v35[1];
        v34[1] = v36;
        *(_DWORD *)&a1[v7[10]] = *(_DWORD *)&a2[v7[10]];
        *(_DWORD *)&a1[v7[11]] = *(_DWORD *)&a2[v7[11]];
        a1[v7[12]] = a2[v7[12]];
        uint64_t v37 = v7[13];
        uint64_t v38 = &a1[v37];
        uint64_t v39 = &a2[v37];
        char v40 = v39[8];
        *(void *)uint64_t v38 = *(void *)v39;
        v38[8] = v40;
        uint64_t v41 = *(void (**)(_BYTE *, void, uint64_t, int *))(v8 + 56);
        swift_bridgeObjectRetain(v36);
        v41(a1, 0LL, 1LL, v7);
      }

      uint64_t v42 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.OneKey(0LL);
      uint64_t v43 = *(int *)(v42 + 20);
      uint64_t v44 = &a1[v43];
      uint64_t v45 = &a2[v43];
      _BYTE *v44 = a2[v43];
      uint64_t v46 = v7[5];
      uint64_t v47 = &v44[v46];
      uint64_t v48 = &v45[v46];
      uint64_t v50 = type metadata accessor for UUID(0LL, v49);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v50 - 8) + 16LL))(v47, v48, v50);
      uint64_t v51 = v7[6];
      uint64_t v52 = (uint64_t *)&v44[v51];
      uint64_t v53 = (uint64_t *)&v45[v51];
      uint64_t v54 = *v53;
      unint64_t v55 = v53[1];
      sub_1004028CC(*v53, v55);
      *uint64_t v52 = v54;
      v52[1] = v55;
      uint64_t v56 = v7[7];
      uint64_t v57 = (uint64_t *)&v44[v56];
      uint64_t v58 = (uint64_t *)&v45[v56];
      uint64_t v59 = *v58;
      unint64_t v60 = v58[1];
      sub_1004028CC(*v58, v60);
      *uint64_t v57 = v59;
      v57[1] = v60;
      uint64_t v61 = v7[8];
      uint64_t v62 = &v44[v61];
      uint64_t v63 = &v45[v61];
      uint64_t v64 = type metadata accessor for Date(0LL);
      uint64_t v65 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v64 - 8) + 16LL);
      v65(v62, v63, v64);
      uint64_t v66 = v7[9];
      uint64_t v67 = &v44[v66];
      uint64_t v68 = &v45[v66];
      *uint64_t v67 = *v68;
      uint64_t v69 = v68[1];
      v67[1] = v69;
      *(_DWORD *)&v44[v7[10]] = *(_DWORD *)&v45[v7[10]];
      *(_DWORD *)&v44[v7[11]] = *(_DWORD *)&v45[v7[11]];
      v44[v7[12]] = v45[v7[12]];
      uint64_t v70 = v7[13];
      uint64_t v71 = &v44[v70];
      uint64_t v72 = &v45[v70];
      char v73 = v72[8];
      *(void *)uint64_t v71 = *(void *)v72;
      v71[8] = v73;
      uint64_t v74 = *(int *)(v42 + 24);
      uint64_t v75 = &a1[v74];
      uint64_t v76 = &a2[v74];
      swift_bridgeObjectRetain(v69);
      v65(v75, v76, v64);
      uint64_t v77 = a1;
      uint64_t v78 = v168;
      uint64_t v79 = 0LL;
LABEL_13:
      swift_storeEnumTagMultiPayload(v77, v78, v79);
      return a1;
    }

    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  return a1;
}

_BYTE *sub_100406A58(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v11 = (int *)type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
    uint64_t v12 = *((void *)v11 - 1);
    uint64_t v83 = a3;
    if ((*(unsigned int (**)(_BYTE *, uint64_t, int *))(v12 + 48))(a2, 1LL, v11))
    {
      uint64_t v14 = sub_1003F5CB4(&qword_1009B8E08);
      memcpy(a1, a2, *(void *)(*(void *)(v14 - 8) + 64LL));
    }

    else
    {
      *a1 = *a2;
      uint64_t v46 = v11[5];
      uint64_t v47 = &a1[v46];
      uint64_t v48 = &a2[v46];
      uint64_t v49 = type metadata accessor for UUID(0LL, v13);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v49 - 8) + 32LL))(v47, v48, v49);
      *(_OWORD *)&a1[v11[6]] = *(_OWORD *)&a2[v11[6]];
      *(_OWORD *)&a1[v11[7]] = *(_OWORD *)&a2[v11[7]];
      uint64_t v50 = v11[8];
      uint64_t v51 = &a1[v50];
      uint64_t v52 = &a2[v50];
      uint64_t v53 = type metadata accessor for Date(0LL);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v53 - 8) + 32LL))(v51, v52, v53);
      *(_OWORD *)&a1[v11[9]] = *(_OWORD *)&a2[v11[9]];
      *(_DWORD *)&a1[v11[10]] = *(_DWORD *)&a2[v11[10]];
      *(_DWORD *)&a1[v11[11]] = *(_DWORD *)&a2[v11[11]];
      a1[v11[12]] = a2[v11[12]];
      uint64_t v54 = v11[13];
      unint64_t v55 = &a1[v54];
      uint64_t v56 = &a2[v54];
      *(void *)unint64_t v55 = *(void *)v56;
      v55[8] = v56[8];
      (*(void (**)(_BYTE *, void, uint64_t, int *))(v12 + 56))(a1, 0LL, 1LL, v11);
    }

    uint64_t v81 = (int *)type metadata accessor for IDSGroupEncryptionKeyMaterialController.TwoKey(0LL);
    uint64_t v57 = v81[5];
    uint64_t v58 = &a1[v57];
    uint64_t v59 = &a2[v57];
    *uint64_t v58 = a2[v57];
    uint64_t v60 = v11[5];
    uint64_t v61 = &v58[v60];
    uint64_t v62 = &v59[v60];
    uint64_t v64 = type metadata accessor for UUID(0LL, v63);
    uint64_t v80 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v64 - 8) + 32LL);
    v80(v61, v62, v64);
    *(_OWORD *)&v58[v11[6]] = *(_OWORD *)&v59[v11[6]];
    *(_OWORD *)&v58[v11[7]] = *(_OWORD *)&v59[v11[7]];
    uint64_t v65 = v11[8];
    uint64_t v66 = &v58[v65];
    uint64_t v67 = &v59[v65];
    uint64_t v68 = type metadata accessor for Date(0LL);
    uint64_t v69 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v68 - 8) + 32LL);
    v69(v66, v67, v68);
    *(_OWORD *)&v58[v11[9]] = *(_OWORD *)&v59[v11[9]];
    *(_DWORD *)&v58[v11[10]] = *(_DWORD *)&v59[v11[10]];
    *(_DWORD *)&v58[v11[11]] = *(_DWORD *)&v59[v11[11]];
    v58[v11[12]] = v59[v11[12]];
    uint64_t v70 = v11[13];
    uint64_t v71 = &v58[v70];
    uint64_t v72 = &v59[v70];
    *(void *)uint64_t v71 = *(void *)v72;
    v71[8] = v72[8];
    uint64_t v73 = v81[6];
    uint64_t v74 = &a1[v73];
    uint64_t v75 = &a2[v73];
    a1[v73] = a2[v73];
    v80(&a1[v73 + v11[5]], &a2[v73 + v11[5]], v64);
    *(_OWORD *)&v74[v11[6]] = *(_OWORD *)&v75[v11[6]];
    *(_OWORD *)&v74[v11[7]] = *(_OWORD *)&v75[v11[7]];
    v69(&v74[v11[8]], &v75[v11[8]], v68);
    *(_OWORD *)&v74[v11[9]] = *(_OWORD *)&v75[v11[9]];
    *(_DWORD *)&v74[v11[10]] = *(_DWORD *)&v75[v11[10]];
    *(_DWORD *)&v74[v11[11]] = *(_DWORD *)&v75[v11[11]];
    v74[v11[12]] = v75[v11[12]];
    uint64_t v76 = v11[13];
    uint64_t v77 = &v74[v76];
    uint64_t v78 = &v75[v76];
    v77[8] = v78[8];
    *(void *)uint64_t v77 = *(void *)v78;
    v69(&a1[v81[7]], &a2[v81[7]], v68);
    uint64_t v43 = a1;
    uint64_t v44 = v83;
    uint64_t v45 = 1LL;
    goto LABEL_12;
  }

  if (!EnumCaseMultiPayload)
  {
    uint64_t v7 = (int *)type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
    uint64_t v8 = *((void *)v7 - 1);
    uint64_t v82 = a3;
    if ((*(unsigned int (**)(_BYTE *, uint64_t, int *))(v8 + 48))(a2, 1LL, v7))
    {
      uint64_t v10 = sub_1003F5CB4(&qword_1009B8E08);
      memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
    }

    else
    {
      *a1 = *a2;
      uint64_t v15 = v7[5];
      uint64_t v16 = &a1[v15];
      uint64_t v17 = &a2[v15];
      uint64_t v18 = type metadata accessor for UUID(0LL, v9);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v18 - 8) + 32LL))(v16, v17, v18);
      *(_OWORD *)&a1[v7[6]] = *(_OWORD *)&a2[v7[6]];
      *(_OWORD *)&a1[v7[7]] = *(_OWORD *)&a2[v7[7]];
      uint64_t v19 = v7[8];
      uint64_t v20 = &a1[v19];
      uint64_t v21 = &a2[v19];
      uint64_t v22 = type metadata accessor for Date(0LL);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v22 - 8) + 32LL))(v20, v21, v22);
      *(_OWORD *)&a1[v7[9]] = *(_OWORD *)&a2[v7[9]];
      *(_DWORD *)&a1[v7[10]] = *(_DWORD *)&a2[v7[10]];
      *(_DWORD *)&a1[v7[11]] = *(_DWORD *)&a2[v7[11]];
      a1[v7[12]] = a2[v7[12]];
      uint64_t v23 = v7[13];
      uint64_t v24 = &a1[v23];
      uint64_t v25 = &a2[v23];
      *(void *)uint64_t v24 = *(void *)v25;
      v24[8] = v25[8];
      (*(void (**)(_BYTE *, void, uint64_t, int *))(v8 + 56))(a1, 0LL, 1LL, v7);
    }

    uint64_t v26 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.OneKey(0LL);
    uint64_t v27 = *(int *)(v26 + 20);
    unint64_t v28 = &a1[v27];
    uint64_t v29 = &a2[v27];
    *unint64_t v28 = a2[v27];
    uint64_t v30 = v7[5];
    uint64_t v31 = &v28[v30];
    uint64_t v32 = &v29[v30];
    uint64_t v34 = type metadata accessor for UUID(0LL, v33);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v34 - 8) + 32LL))(v31, v32, v34);
    *(_OWORD *)&v28[v7[6]] = *(_OWORD *)&v29[v7[6]];
    *(_OWORD *)&v28[v7[7]] = *(_OWORD *)&v29[v7[7]];
    uint64_t v35 = v7[8];
    uint64_t v36 = &v28[v35];
    uint64_t v37 = &v29[v35];
    uint64_t v38 = type metadata accessor for Date(0LL);
    uint64_t v39 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v38 - 8) + 32LL);
    v39(v36, v37, v38);
    *(_OWORD *)&v28[v7[9]] = *(_OWORD *)&v29[v7[9]];
    *(_DWORD *)&v28[v7[10]] = *(_DWORD *)&v29[v7[10]];
    *(_DWORD *)&v28[v7[11]] = *(_DWORD *)&v29[v7[11]];
    v28[v7[12]] = v29[v7[12]];
    uint64_t v40 = v7[13];
    uint64_t v41 = &v28[v40];
    uint64_t v42 = &v29[v40];
    v41[8] = v42[8];
    *(void *)uint64_t v41 = *(void *)v42;
    v39(&a1[*(int *)(v26 + 24)], &a2[*(int *)(v26 + 24)], v38);
    uint64_t v43 = a1;
    uint64_t v44 = v82;
    uint64_t v45 = 0LL;
LABEL_12:
    swift_storeEnumTagMultiPayload(v43, v44, v45);
    return a1;
  }

  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  return a1;
}

_BYTE *sub_100406FE8(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1003F6050((uint64_t)a1, type metadata accessor for IDSGroupEncryptionKeyMaterialController.KeyState);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v11 = (int *)type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
      uint64_t v12 = *((void *)v11 - 1);
      uint64_t v83 = a3;
      if ((*(unsigned int (**)(_BYTE *, uint64_t, int *))(v12 + 48))(a2, 1LL, v11))
      {
        uint64_t v14 = sub_1003F5CB4(&qword_1009B8E08);
        memcpy(a1, a2, *(void *)(*(void *)(v14 - 8) + 64LL));
      }

      else
      {
        *a1 = *a2;
        uint64_t v46 = v11[5];
        uint64_t v47 = &a1[v46];
        uint64_t v48 = &a2[v46];
        uint64_t v49 = type metadata accessor for UUID(0LL, v13);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v49 - 8) + 32LL))(v47, v48, v49);
        *(_OWORD *)&a1[v11[6]] = *(_OWORD *)&a2[v11[6]];
        *(_OWORD *)&a1[v11[7]] = *(_OWORD *)&a2[v11[7]];
        uint64_t v50 = v11[8];
        uint64_t v51 = &a1[v50];
        uint64_t v52 = &a2[v50];
        uint64_t v53 = type metadata accessor for Date(0LL);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v53 - 8) + 32LL))(v51, v52, v53);
        *(_OWORD *)&a1[v11[9]] = *(_OWORD *)&a2[v11[9]];
        *(_DWORD *)&a1[v11[10]] = *(_DWORD *)&a2[v11[10]];
        *(_DWORD *)&a1[v11[11]] = *(_DWORD *)&a2[v11[11]];
        a1[v11[12]] = a2[v11[12]];
        uint64_t v54 = v11[13];
        unint64_t v55 = &a1[v54];
        uint64_t v56 = &a2[v54];
        *(void *)unint64_t v55 = *(void *)v56;
        v55[8] = v56[8];
        (*(void (**)(_BYTE *, void, uint64_t, int *))(v12 + 56))(a1, 0LL, 1LL, v11);
      }

      uint64_t v81 = (int *)type metadata accessor for IDSGroupEncryptionKeyMaterialController.TwoKey(0LL);
      uint64_t v57 = v81[5];
      uint64_t v58 = &a1[v57];
      uint64_t v59 = &a2[v57];
      *uint64_t v58 = a2[v57];
      uint64_t v60 = v11[5];
      uint64_t v61 = &v58[v60];
      uint64_t v62 = &v59[v60];
      uint64_t v64 = type metadata accessor for UUID(0LL, v63);
      uint64_t v80 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v64 - 8) + 32LL);
      v80(v61, v62, v64);
      *(_OWORD *)&v58[v11[6]] = *(_OWORD *)&v59[v11[6]];
      *(_OWORD *)&v58[v11[7]] = *(_OWORD *)&v59[v11[7]];
      uint64_t v65 = v11[8];
      uint64_t v66 = &v58[v65];
      uint64_t v67 = &v59[v65];
      uint64_t v68 = type metadata accessor for Date(0LL);
      uint64_t v69 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v68 - 8) + 32LL);
      v69(v66, v67, v68);
      *(_OWORD *)&v58[v11[9]] = *(_OWORD *)&v59[v11[9]];
      *(_DWORD *)&v58[v11[10]] = *(_DWORD *)&v59[v11[10]];
      *(_DWORD *)&v58[v11[11]] = *(_DWORD *)&v59[v11[11]];
      v58[v11[12]] = v59[v11[12]];
      uint64_t v70 = v11[13];
      uint64_t v71 = &v58[v70];
      uint64_t v72 = &v59[v70];
      *(void *)uint64_t v71 = *(void *)v72;
      v71[8] = v72[8];
      uint64_t v73 = v81[6];
      uint64_t v74 = &a1[v73];
      uint64_t v75 = &a2[v73];
      a1[v73] = a2[v73];
      v80(&a1[v73 + v11[5]], &a2[v73 + v11[5]], v64);
      *(_OWORD *)&v74[v11[6]] = *(_OWORD *)&v75[v11[6]];
      *(_OWORD *)&v74[v11[7]] = *(_OWORD *)&v75[v11[7]];
      v69(&v74[v11[8]], &v75[v11[8]], v68);
      *(_OWORD *)&v74[v11[9]] = *(_OWORD *)&v75[v11[9]];
      *(_DWORD *)&v74[v11[10]] = *(_DWORD *)&v75[v11[10]];
      *(_DWORD *)&v74[v11[11]] = *(_DWORD *)&v75[v11[11]];
      v74[v11[12]] = v75[v11[12]];
      uint64_t v76 = v11[13];
      uint64_t v77 = &v74[v76];
      uint64_t v78 = &v75[v76];
      v77[8] = v78[8];
      *(void *)uint64_t v77 = *(void *)v78;
      v69(&a1[v81[7]], &a2[v81[7]], v68);
      uint64_t v43 = a1;
      uint64_t v44 = v83;
      uint64_t v45 = 1LL;
      goto LABEL_13;
    }

    if (!EnumCaseMultiPayload)
    {
      uint64_t v7 = (int *)type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
      uint64_t v8 = *((void *)v7 - 1);
      uint64_t v82 = a3;
      if ((*(unsigned int (**)(_BYTE *, uint64_t, int *))(v8 + 48))(a2, 1LL, v7))
      {
        uint64_t v10 = sub_1003F5CB4(&qword_1009B8E08);
        memcpy(a1, a2, *(void *)(*(void *)(v10 - 8) + 64LL));
      }

      else
      {
        *a1 = *a2;
        uint64_t v15 = v7[5];
        uint64_t v16 = &a1[v15];
        uint64_t v17 = &a2[v15];
        uint64_t v18 = type metadata accessor for UUID(0LL, v9);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v18 - 8) + 32LL))(v16, v17, v18);
        *(_OWORD *)&a1[v7[6]] = *(_OWORD *)&a2[v7[6]];
        *(_OWORD *)&a1[v7[7]] = *(_OWORD *)&a2[v7[7]];
        uint64_t v19 = v7[8];
        uint64_t v20 = &a1[v19];
        uint64_t v21 = &a2[v19];
        uint64_t v22 = type metadata accessor for Date(0LL);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v22 - 8) + 32LL))(v20, v21, v22);
        *(_OWORD *)&a1[v7[9]] = *(_OWORD *)&a2[v7[9]];
        *(_DWORD *)&a1[v7[10]] = *(_DWORD *)&a2[v7[10]];
        *(_DWORD *)&a1[v7[11]] = *(_DWORD *)&a2[v7[11]];
        a1[v7[12]] = a2[v7[12]];
        uint64_t v23 = v7[13];
        uint64_t v24 = &a1[v23];
        uint64_t v25 = &a2[v23];
        *(void *)uint64_t v24 = *(void *)v25;
        v24[8] = v25[8];
        (*(void (**)(_BYTE *, void, uint64_t, int *))(v8 + 56))(a1, 0LL, 1LL, v7);
      }

      uint64_t v26 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.OneKey(0LL);
      uint64_t v27 = *(int *)(v26 + 20);
      unint64_t v28 = &a1[v27];
      uint64_t v29 = &a2[v27];
      *unint64_t v28 = a2[v27];
      uint64_t v30 = v7[5];
      uint64_t v31 = &v28[v30];
      uint64_t v32 = &v29[v30];
      uint64_t v34 = type metadata accessor for UUID(0LL, v33);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v34 - 8) + 32LL))(v31, v32, v34);
      *(_OWORD *)&v28[v7[6]] = *(_OWORD *)&v29[v7[6]];
      *(_OWORD *)&v28[v7[7]] = *(_OWORD *)&v29[v7[7]];
      uint64_t v35 = v7[8];
      uint64_t v36 = &v28[v35];
      uint64_t v37 = &v29[v35];
      uint64_t v38 = type metadata accessor for Date(0LL);
      uint64_t v39 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v38 - 8) + 32LL);
      v39(v36, v37, v38);
      *(_OWORD *)&v28[v7[9]] = *(_OWORD *)&v29[v7[9]];
      *(_DWORD *)&v28[v7[10]] = *(_DWORD *)&v29[v7[10]];
      *(_DWORD *)&v28[v7[11]] = *(_DWORD *)&v29[v7[11]];
      v28[v7[12]] = v29[v7[12]];
      uint64_t v40 = v7[13];
      uint64_t v41 = &v28[v40];
      uint64_t v42 = &v29[v40];
      v41[8] = v42[8];
      *(void *)uint64_t v41 = *(void *)v42;
      v39(&a1[*(int *)(v26 + 24)], &a2[*(int *)(v26 + 24)], v38);
      uint64_t v43 = a1;
      uint64_t v44 = v82;
      uint64_t v45 = 0LL;
LABEL_13:
      swift_storeEnumTagMultiPayload(v43, v44, v45);
      return a1;
    }

    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  return a1;
}

uint64_t sub_100407590(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48LL))();
}

uint64_t sub_10040759C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56LL))();
}

uint64_t sub_1004075AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

uint64_t sub_1004075BC(uint64_t a1)
{
  uint64_t result = type metadata accessor for IDSGroupEncryptionKeyMaterialController.OneKey(319LL);
  if (v3 <= 0x3F)
  {
    v5[0] = *(void *)(result - 8) + 64LL;
    uint64_t result = type metadata accessor for IDSGroupEncryptionKeyMaterialController.TwoKey(319LL);
    if (v4 <= 0x3F)
    {
      v5[1] = *(void *)(result - 8) + 64LL;
      swift_initEnumMetadataMultiPayload(a1, 256LL, 2LL, v5);
      return 0LL;
    }
  }

  return result;
}

_BYTE *sub_10040763C(_BYTE *a1, _BYTE *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) == 0)
  {
    uint64_t v7 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.KeyState(0LL);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v7);
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v189 = v7;
      uint64_t v15 = (int *)type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
      uint64_t v16 = *((void *)v15 - 1);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, int *))(v16 + 48))(a2, 1LL, v15))
      {
        uint64_t v18 = sub_1003F5CB4(&qword_1009B8E08);
        memcpy(a1, a2, *(void *)(*(void *)(v18 - 8) + 64LL));
      }

      else
      {
        *a1 = *a2;
        uint64_t v82 = v15[5];
        uint64_t v83 = &a1[v82];
        uint64_t v84 = &a2[v82];
        uint64_t v85 = type metadata accessor for UUID(0LL, v17);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v85 - 8) + 16LL))(v83, v84, v85);
        uint64_t v86 = v15[6];
        uint64_t v87 = (uint64_t *)&a1[v86];
        unint64_t v88 = (uint64_t *)&a2[v86];
        uint64_t v89 = *v88;
        unint64_t v90 = v88[1];
        sub_1004028CC(*v88, v90);
        *uint64_t v87 = v89;
        v87[1] = v90;
        uint64_t v91 = v15[7];
        uint64_t v92 = (uint64_t *)&a1[v91];
        unint64_t v93 = (uint64_t *)&a2[v91];
        uint64_t v94 = *v93;
        unint64_t v95 = v93[1];
        sub_1004028CC(*v93, v95);
        uint64_t *v92 = v94;
        v92[1] = v95;
        uint64_t v96 = v15[8];
        uint64_t v97 = &a1[v96];
        uint64_t v98 = &a2[v96];
        uint64_t v99 = type metadata accessor for Date(0LL);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v99 - 8) + 16LL))(v97, v98, v99);
        uint64_t v100 = v15[9];
        uint64_t v101 = &a1[v100];
        uint64_t v102 = &a2[v100];
        uint64_t v103 = v102[1];
        void *v101 = *v102;
        v101[1] = v103;
        *(_DWORD *)&a1[v15[10]] = *(_DWORD *)&a2[v15[10]];
        *(_DWORD *)&a1[v15[11]] = *(_DWORD *)&a2[v15[11]];
        a1[v15[12]] = a2[v15[12]];
        uint64_t v104 = v15[13];
        char v105 = &a1[v104];
        uint64_t v106 = &a2[v104];
        v105[8] = v106[8];
        *(void *)char v105 = *(void *)v106;
        uint64_t v107 = *(void (**)(_BYTE *, void, uint64_t, int *))(v16 + 56);
        swift_bridgeObjectRetain(v103);
        v107(a1, 0LL, 1LL, v15);
      }

      int v187 = (int *)type metadata accessor for IDSGroupEncryptionKeyMaterialController.TwoKey(0LL);
      uint64_t v108 = v187[5];
      uint64_t v109 = &a1[v108];
      uint64_t v110 = &a2[v108];
      *uint64_t v109 = a2[v108];
      uint64_t v111 = v15[5];
      uint64_t v112 = &v109[v111];
      uint64_t v113 = &v110[v111];
      uint64_t v115 = type metadata accessor for UUID(0LL, v114);
      uint64_t v185 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v115 - 8) + 16LL);
      v185(v112, v113, v115);
      uint64_t v116 = v15[6];
      uint64_t v117 = (uint64_t *)&v109[v116];
      uint64_t v118 = (uint64_t *)&v110[v116];
      uint64_t v119 = *v118;
      unint64_t v120 = v118[1];
      sub_1004028CC(*v118, v120);
      uint64_t *v117 = v119;
      v117[1] = v120;
      uint64_t v121 = v15[7];
      uint64_t v122 = (uint64_t *)&v109[v121];
      uint64_t v123 = (uint64_t *)&v110[v121];
      uint64_t v124 = *v123;
      unint64_t v125 = v123[1];
      sub_1004028CC(*v123, v125);
      uint64_t *v122 = v124;
      v122[1] = v125;
      uint64_t v126 = v15[8];
      uint64_t v127 = &v109[v126];
      uint64_t v128 = &v110[v126];
      uint64_t v184 = type metadata accessor for Date(0LL);
      uint64_t v129 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v184 - 8) + 16LL);
      v129(v127, v128, v184);
      uint64_t v130 = v15[9];
      uint64_t v131 = &v109[v130];
      uint64_t v132 = &v110[v130];
      uint64_t v133 = v132[1];
      *uint64_t v131 = *v132;
      v131[1] = v133;
      *(_DWORD *)&v109[v15[10]] = *(_DWORD *)&v110[v15[10]];
      *(_DWORD *)&v109[v15[11]] = *(_DWORD *)&v110[v15[11]];
      v109[v15[12]] = v110[v15[12]];
      uint64_t v134 = v15[13];
      uint64_t v135 = &v109[v134];
      char v136 = &v110[v134];
      *(void *)uint64_t v135 = *(void *)v136;
      v135[8] = v136[8];
      uint64_t v137 = v187[6];
      uint64_t v138 = &a1[v137];
      uint64_t v139 = &a2[v137];
      _BYTE *v138 = a2[v137];
      uint64_t v140 = v15[5];
      uint64_t v141 = &v138[v140];
      uint64_t v142 = &v139[v140];
      swift_bridgeObjectRetain(v133);
      v185(v141, v142, v115);
      uint64_t v143 = v15[6];
      uint64_t v144 = (uint64_t *)&v138[v143];
      unint64_t v145 = (uint64_t *)&v139[v143];
      uint64_t v146 = *v145;
      unint64_t v147 = v145[1];
      sub_1004028CC(*v145, v147);
      *uint64_t v144 = v146;
      v144[1] = v147;
      uint64_t v148 = v15[7];
      uint64_t v149 = (uint64_t *)&v138[v148];
      unint64_t v150 = (uint64_t *)&v139[v148];
      uint64_t v151 = *v150;
      unint64_t v152 = v150[1];
      sub_1004028CC(*v150, v152);
      uint64_t *v149 = v151;
      v149[1] = v152;
      v129(&v138[v15[8]], &v139[v15[8]], v184);
      uint64_t v153 = v15[9];
      uint64_t v154 = &v138[v153];
      uint64_t v155 = &v139[v153];
      uint64_t v156 = v155[1];
      *uint64_t v154 = *v155;
      v154[1] = v156;
      *(_DWORD *)&v138[v15[10]] = *(_DWORD *)&v139[v15[10]];
      *(_DWORD *)&v138[v15[11]] = *(_DWORD *)&v139[v15[11]];
      v138[v15[12]] = v139[v15[12]];
      uint64_t v157 = v15[13];
      uint64_t v158 = &v138[v157];
      uint64_t v159 = &v139[v157];
      v158[8] = v159[8];
      *(void *)uint64_t v158 = *(void *)v159;
      uint64_t v160 = v187[7];
      uint64_t v161 = &a1[v160];
      uint64_t v162 = &a2[v160];
      swift_bridgeObjectRetain(v156);
      v129(v161, v162, v184);
      uint64_t v79 = a1;
      uint64_t v80 = v189;
      uint64_t v81 = 1LL;
    }

    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64LL));
LABEL_15:
        uint64_t v163 = a3[5];
        uint64_t v164 = a3[6];
        char v165 = &a1[v163];
        uint64_t v166 = &a2[v163];
        *(_OWORD *)char v165 = *(_OWORD *)v166;
        char v167 = a2[v164];
        v165[16] = v166[16];
        a1[v164] = v167;
        uint64_t v168 = a3[7];
        *(void *)(swift_unknownObjectWeakCopyInit(&a1[v168], &a2[v168]) + _Block_object_dispose(va, 8) = *(void *)&a2[v168 + 8];
        uint64_t v169 = a3[9];
        *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
        uint64_t v170 = *(void *)&a2[v169];
        *(void *)&a1[v169] = v170;
        uint64_t v171 = a3[10];
        uint64_t v172 = a3[11];
        uint64_t v173 = *(void *)&a2[v171];
        *(void *)&a1[v171] = v173;
        uint64_t v174 = *(void *)&a2[v172];
        *(void *)&a1[v172] = v174;
        uint64_t v175 = a3[13];
        a1[a3[12]] = a2[a3[12]];
        uint64_t v176 = *(void *)&a2[v175];
        *(void *)&a1[v175] = v176;
        uint64_t v177 = a3[14];
        uint64_t v190 = &a1[v177];
        id v178 = &a2[v177];
        uint64_t v179 = type metadata accessor for Date(0LL);
        uint64_t v14 = a1;
        uint64_t v180 = a2;
        uint64_t v181 = a3;
        uint64_t v182 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v179 - 8) + 16LL);
        swift_bridgeObjectRetain(v170);
        swift_bridgeObjectRetain(v173);
        swift_retain(v174);
        swift_bridgeObjectRetain(v176);
        v182(v190, v178, v179);
        *(void *)&v14[v181[15]] = *(void *)&v180[v181[15]];
        return v14;
      }

      uint64_t v188 = v7;
      uint64_t v9 = (int *)type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
      uint64_t v10 = *((void *)v9 - 1);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, int *))(v10 + 48))(a2, 1LL, v9))
      {
        uint64_t v12 = sub_1003F5CB4(&qword_1009B8E08);
        memcpy(a1, a2, *(void *)(*(void *)(v12 - 8) + 64LL));
      }

      else
      {
        *a1 = *a2;
        uint64_t v19 = v9[5];
        uint64_t v20 = &a1[v19];
        uint64_t v21 = &a2[v19];
        uint64_t v22 = type metadata accessor for UUID(0LL, v11);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v22 - 8) + 16LL))(v20, v21, v22);
        uint64_t v23 = v9[6];
        uint64_t v24 = (uint64_t *)&a1[v23];
        uint64_t v25 = (uint64_t *)&a2[v23];
        uint64_t v26 = *v25;
        unint64_t v27 = v25[1];
        sub_1004028CC(*v25, v27);
        uint64_t *v24 = v26;
        v24[1] = v27;
        uint64_t v28 = v9[7];
        uint64_t v29 = (uint64_t *)&a1[v28];
        uint64_t v30 = (uint64_t *)&a2[v28];
        uint64_t v31 = *v30;
        unint64_t v32 = v30[1];
        sub_1004028CC(*v30, v32);
        *uint64_t v29 = v31;
        v29[1] = v32;
        uint64_t v33 = v9[8];
        uint64_t v34 = &a1[v33];
        uint64_t v35 = &a2[v33];
        uint64_t v36 = type metadata accessor for Date(0LL);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v36 - 8) + 16LL))(v34, v35, v36);
        uint64_t v37 = v9[9];
        uint64_t v38 = &a1[v37];
        uint64_t v39 = &a2[v37];
        uint64_t v40 = v39[1];
        *uint64_t v38 = *v39;
        v38[1] = v40;
        *(_DWORD *)&a1[v9[10]] = *(_DWORD *)&a2[v9[10]];
        *(_DWORD *)&a1[v9[11]] = *(_DWORD *)&a2[v9[11]];
        a1[v9[12]] = a2[v9[12]];
        uint64_t v41 = v9[13];
        uint64_t v42 = &a1[v41];
        uint64_t v43 = &a2[v41];
        v42[8] = v43[8];
        *(void *)uint64_t v42 = *(void *)v43;
        uint64_t v44 = *(void (**)(_BYTE *, void, uint64_t, int *))(v10 + 56);
        swift_bridgeObjectRetain(v40);
        v44(a1, 0LL, 1LL, v9);
      }

      uint64_t v186 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.OneKey(0LL);
      uint64_t v45 = *(int *)(v186 + 20);
      uint64_t v46 = &a1[v45];
      uint64_t v47 = &a2[v45];
      *uint64_t v46 = a2[v45];
      uint64_t v48 = v9[5];
      uint64_t v49 = &v46[v48];
      uint64_t v50 = &v47[v48];
      uint64_t v52 = type metadata accessor for UUID(0LL, v51);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v52 - 8) + 16LL))(v49, v50, v52);
      uint64_t v53 = v9[6];
      uint64_t v54 = (uint64_t *)&v46[v53];
      unint64_t v55 = (uint64_t *)&v47[v53];
      uint64_t v56 = *v55;
      unint64_t v57 = v55[1];
      sub_1004028CC(*v55, v57);
      *uint64_t v54 = v56;
      v54[1] = v57;
      uint64_t v58 = v9[7];
      uint64_t v59 = (uint64_t *)&v46[v58];
      uint64_t v60 = (uint64_t *)&v47[v58];
      uint64_t v61 = *v60;
      unint64_t v62 = v60[1];
      sub_1004028CC(*v60, v62);
      *uint64_t v59 = v61;
      v59[1] = v62;
      uint64_t v63 = v9[8];
      uint64_t v64 = &v46[v63];
      uint64_t v65 = &v47[v63];
      uint64_t v66 = type metadata accessor for Date(0LL);
      uint64_t v67 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v66 - 8) + 16LL);
      v67(v64, v65, v66);
      uint64_t v68 = v67;
      uint64_t v69 = v9[9];
      uint64_t v70 = &v46[v69];
      uint64_t v71 = &v47[v69];
      uint64_t v72 = v71[1];
      *uint64_t v70 = *v71;
      v70[1] = v72;
      *(_DWORD *)&v46[v9[10]] = *(_DWORD *)&v47[v9[10]];
      *(_DWORD *)&v46[v9[11]] = *(_DWORD *)&v47[v9[11]];
      v46[v9[12]] = v47[v9[12]];
      uint64_t v73 = v9[13];
      uint64_t v74 = &v46[v73];
      uint64_t v75 = &v47[v73];
      v74[8] = v75[8];
      *(void *)uint64_t v74 = *(void *)v75;
      uint64_t v76 = *(int *)(v186 + 24);
      uint64_t v77 = &a1[v76];
      uint64_t v78 = &a2[v76];
      swift_bridgeObjectRetain(v72);
      v68(v77, v78, v66);
      uint64_t v79 = a1;
      uint64_t v80 = v188;
      uint64_t v81 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v79, v80, v81);
    goto LABEL_15;
  }

  uint64_t v13 = *(void *)a2;
  *(void *)a1 = *(void *)a2;
  uint64_t v14 = (_BYTE *)(v13 + ((v5 + 16LL) & ~(unint64_t)v5));
  swift_retain(v13);
  return v14;
}

uint64_t sub_100407E18(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.KeyState(0LL);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a1, v4);
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v20 = (int *)type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v20 - 1) + 48LL))(a1, 1LL, v20))
    {
      uint64_t v22 = a1 + v20[5];
      uint64_t v23 = type metadata accessor for UUID(0LL, v21);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v23 - 8) + 8LL))(v22, v23);
      sub_100402A84(*(void *)(a1 + v20[6]), *(void *)(a1 + v20[6] + 8));
      sub_100402A84(*(void *)(a1 + v20[7]), *(void *)(a1 + v20[7] + 8));
      uint64_t v24 = a1 + v20[8];
      uint64_t v25 = type metadata accessor for Date(0LL);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v25 - 8) + 8LL))(v24, v25);
      swift_bridgeObjectRelease(*(void *)(a1 + v20[9] + 8));
    }

    uint64_t v26 = (int *)type metadata accessor for IDSGroupEncryptionKeyMaterialController.TwoKey(0LL);
    uint64_t v27 = a1 + v26[5];
    uint64_t v28 = v27 + v20[5];
    uint64_t v30 = type metadata accessor for UUID(0LL, v29);
    uint64_t v31 = *(void (**)(uint64_t, uint64_t))(*(void *)(v30 - 8) + 8LL);
    v31(v28, v30);
    sub_100402A84(*(void *)(v27 + v20[6]), *(void *)(v27 + v20[6] + 8));
    sub_100402A84(*(void *)(v27 + v20[7]), *(void *)(v27 + v20[7] + 8));
    uint64_t v32 = v27 + v20[8];
    uint64_t v33 = type metadata accessor for Date(0LL);
    uint64_t v34 = *(void (**)(uint64_t, uint64_t))(*(void *)(v33 - 8) + 8LL);
    v34(v32, v33);
    swift_bridgeObjectRelease(*(void *)(v27 + v20[9] + 8));
    uint64_t v35 = a1 + v26[6];
    v31(v35 + v20[5], v30);
    sub_100402A84(*(void *)(v35 + v20[6]), *(void *)(v35 + v20[6] + 8));
    sub_100402A84(*(void *)(v35 + v20[7]), *(void *)(v35 + v20[7] + 8));
    v34(v35 + v20[8], v33);
    swift_bridgeObjectRelease(*(void *)(v35 + v20[9] + 8));
    v34(a1 + v26[7], v33);
  }

  else if (!EnumCaseMultiPayload)
  {
    uint64_t v6 = (int *)type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v6 - 1) + 48LL))(a1, 1LL, v6))
    {
      uint64_t v8 = a1 + v6[5];
      uint64_t v9 = type metadata accessor for UUID(0LL, v7);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(v8, v9);
      sub_100402A84(*(void *)(a1 + v6[6]), *(void *)(a1 + v6[6] + 8));
      sub_100402A84(*(void *)(a1 + v6[7]), *(void *)(a1 + v6[7] + 8));
      uint64_t v10 = a1 + v6[8];
      uint64_t v11 = type metadata accessor for Date(0LL);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))(v10, v11);
      swift_bridgeObjectRelease(*(void *)(a1 + v6[9] + 8));
    }

    uint64_t v12 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.OneKey(0LL);
    uint64_t v13 = a1 + *(int *)(v12 + 20);
    uint64_t v14 = v13 + v6[5];
    uint64_t v16 = type metadata accessor for UUID(0LL, v15);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8LL))(v14, v16);
    sub_100402A84(*(void *)(v13 + v6[6]), *(void *)(v13 + v6[6] + 8));
    sub_100402A84(*(void *)(v13 + v6[7]), *(void *)(v13 + v6[7] + 8));
    uint64_t v17 = v13 + v6[8];
    uint64_t v18 = type metadata accessor for Date(0LL);
    uint64_t v19 = *(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8LL);
    v19(v17, v18);
    swift_bridgeObjectRelease(*(void *)(v13 + v6[9] + 8));
    v19(a1 + *(int *)(v12 + 24), v18);
  }

  swift_unknownObjectWeakDestroy(a1 + a2[7]);
  swift_bridgeObjectRelease(*(void *)(a1 + a2[9]));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[10]));
  swift_release(*(void *)(a1 + a2[11]));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[13]));
  uint64_t v36 = a1 + a2[14];
  uint64_t v37 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v37 - 8) + 8LL))(v36, v37);
}

_BYTE *sub_1004081B0(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.KeyState(0LL);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v186 = v6;
    uint64_t v12 = (int *)type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
    uint64_t v13 = *((void *)v12 - 1);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, int *))(v13 + 48))(a2, 1LL, v12))
    {
      uint64_t v15 = sub_1003F5CB4(&qword_1009B8E08);
      memcpy(a1, a2, *(void *)(*(void *)(v15 - 8) + 64LL));
    }

    else
    {
      *a1 = *a2;
      uint64_t v79 = v12[5];
      uint64_t v80 = &a1[v79];
      uint64_t v81 = &a2[v79];
      uint64_t v82 = type metadata accessor for UUID(0LL, v14);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v82 - 8) + 16LL))(v80, v81, v82);
      uint64_t v83 = v12[6];
      uint64_t v84 = (uint64_t *)&a1[v83];
      uint64_t v85 = (uint64_t *)&a2[v83];
      uint64_t v86 = *v85;
      unint64_t v87 = v85[1];
      sub_1004028CC(*v85, v87);
      uint64_t *v84 = v86;
      v84[1] = v87;
      uint64_t v88 = v12[7];
      uint64_t v89 = (uint64_t *)&a1[v88];
      unint64_t v90 = (uint64_t *)&a2[v88];
      uint64_t v91 = *v90;
      unint64_t v92 = v90[1];
      sub_1004028CC(*v90, v92);
      uint64_t *v89 = v91;
      v89[1] = v92;
      uint64_t v93 = v12[8];
      uint64_t v94 = &a1[v93];
      unint64_t v95 = &a2[v93];
      uint64_t v96 = type metadata accessor for Date(0LL);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v96 - 8) + 16LL))(v94, v95, v96);
      uint64_t v97 = v12[9];
      uint64_t v98 = &a1[v97];
      uint64_t v99 = &a2[v97];
      uint64_t v100 = v99[1];
      void *v98 = *v99;
      v98[1] = v100;
      *(_DWORD *)&a1[v12[10]] = *(_DWORD *)&a2[v12[10]];
      *(_DWORD *)&a1[v12[11]] = *(_DWORD *)&a2[v12[11]];
      a1[v12[12]] = a2[v12[12]];
      uint64_t v101 = v12[13];
      uint64_t v102 = &a1[v101];
      uint64_t v103 = &a2[v101];
      v102[8] = v103[8];
      *(void *)uint64_t v102 = *(void *)v103;
      uint64_t v104 = *(void (**)(_BYTE *, void, uint64_t, int *))(v13 + 56);
      swift_bridgeObjectRetain(v100);
      v104(a1, 0LL, 1LL, v12);
    }

    uint64_t v184 = (int *)type metadata accessor for IDSGroupEncryptionKeyMaterialController.TwoKey(0LL);
    uint64_t v105 = v184[5];
    uint64_t v106 = &a1[v105];
    uint64_t v107 = &a2[v105];
    *uint64_t v106 = a2[v105];
    uint64_t v108 = v12[5];
    uint64_t v109 = &v106[v108];
    uint64_t v110 = &v107[v108];
    uint64_t v112 = type metadata accessor for UUID(0LL, v111);
    uint64_t v182 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v112 - 8) + 16LL);
    v182(v109, v110, v112);
    uint64_t v113 = v12[6];
    uint64_t v114 = (uint64_t *)&v106[v113];
    uint64_t v115 = (uint64_t *)&v107[v113];
    uint64_t v116 = *v115;
    unint64_t v117 = v115[1];
    sub_1004028CC(*v115, v117);
    *uint64_t v114 = v116;
    v114[1] = v117;
    uint64_t v118 = v12[7];
    uint64_t v119 = (uint64_t *)&v106[v118];
    unint64_t v120 = (uint64_t *)&v107[v118];
    uint64_t v121 = *v120;
    unint64_t v122 = v120[1];
    sub_1004028CC(*v120, v122);
    uint64_t *v119 = v121;
    v119[1] = v122;
    uint64_t v123 = v12[8];
    uint64_t v124 = &v106[v123];
    unint64_t v125 = &v107[v123];
    uint64_t v181 = type metadata accessor for Date(0LL);
    uint64_t v126 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v181 - 8) + 16LL);
    v126(v124, v125, v181);
    uint64_t v127 = v12[9];
    uint64_t v128 = &v106[v127];
    uint64_t v129 = &v107[v127];
    uint64_t v130 = v129[1];
    void *v128 = *v129;
    v128[1] = v130;
    *(_DWORD *)&v106[v12[10]] = *(_DWORD *)&v107[v12[10]];
    *(_DWORD *)&v106[v12[11]] = *(_DWORD *)&v107[v12[11]];
    v106[v12[12]] = v107[v12[12]];
    uint64_t v131 = v12[13];
    uint64_t v132 = &v106[v131];
    uint64_t v133 = &v107[v131];
    *(void *)uint64_t v132 = *(void *)v133;
    v132[8] = v133[8];
    uint64_t v134 = v184[6];
    uint64_t v135 = &a1[v134];
    char v136 = &a2[v134];
    *uint64_t v135 = a2[v134];
    uint64_t v137 = v12[5];
    uint64_t v138 = &v135[v137];
    uint64_t v139 = &v136[v137];
    swift_bridgeObjectRetain(v130);
    v182(v138, v139, v112);
    uint64_t v140 = v12[6];
    uint64_t v141 = (uint64_t *)&v135[v140];
    uint64_t v142 = (uint64_t *)&v136[v140];
    uint64_t v143 = *v142;
    unint64_t v144 = v142[1];
    sub_1004028CC(*v142, v144);
    *uint64_t v141 = v143;
    v141[1] = v144;
    uint64_t v145 = v12[7];
    uint64_t v146 = (uint64_t *)&v135[v145];
    unint64_t v147 = (uint64_t *)&v136[v145];
    uint64_t v148 = *v147;
    unint64_t v149 = v147[1];
    sub_1004028CC(*v147, v149);
    *uint64_t v146 = v148;
    v146[1] = v149;
    v126(&v135[v12[8]], &v136[v12[8]], v181);
    uint64_t v150 = v12[9];
    uint64_t v151 = &v135[v150];
    unint64_t v152 = &v136[v150];
    uint64_t v153 = v152[1];
    void *v151 = *v152;
    v151[1] = v153;
    *(_DWORD *)&v135[v12[10]] = *(_DWORD *)&v136[v12[10]];
    *(_DWORD *)&v135[v12[11]] = *(_DWORD *)&v136[v12[11]];
    v135[v12[12]] = v136[v12[12]];
    uint64_t v154 = v12[13];
    uint64_t v155 = &v135[v154];
    uint64_t v156 = &v136[v154];
    v155[8] = v156[8];
    *(void *)uint64_t v155 = *(void *)v156;
    uint64_t v157 = v184[7];
    uint64_t v158 = &a1[v157];
    uint64_t v159 = &a2[v157];
    swift_bridgeObjectRetain(v153);
    v126(v158, v159, v181);
    uint64_t v76 = a1;
    uint64_t v77 = v186;
    uint64_t v78 = 1LL;
    goto LABEL_12;
  }

  if (!EnumCaseMultiPayload)
  {
    uint64_t v185 = v6;
    uint64_t v8 = (int *)type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
    uint64_t v9 = *((void *)v8 - 1);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, int *))(v9 + 48))(a2, 1LL, v8))
    {
      uint64_t v11 = sub_1003F5CB4(&qword_1009B8E08);
      memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64LL));
    }

    else
    {
      *a1 = *a2;
      uint64_t v16 = v8[5];
      uint64_t v17 = &a1[v16];
      uint64_t v18 = &a2[v16];
      uint64_t v19 = type metadata accessor for UUID(0LL, v10);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v19 - 8) + 16LL))(v17, v18, v19);
      uint64_t v20 = v8[6];
      uint64_t v21 = (uint64_t *)&a1[v20];
      uint64_t v22 = (uint64_t *)&a2[v20];
      uint64_t v23 = *v22;
      unint64_t v24 = v22[1];
      sub_1004028CC(*v22, v24);
      *uint64_t v21 = v23;
      v21[1] = v24;
      uint64_t v25 = v8[7];
      uint64_t v26 = (uint64_t *)&a1[v25];
      uint64_t v27 = (uint64_t *)&a2[v25];
      uint64_t v28 = *v27;
      unint64_t v29 = v27[1];
      sub_1004028CC(*v27, v29);
      *uint64_t v26 = v28;
      v26[1] = v29;
      uint64_t v30 = v8[8];
      uint64_t v31 = &a1[v30];
      uint64_t v32 = &a2[v30];
      uint64_t v33 = type metadata accessor for Date(0LL);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v33 - 8) + 16LL))(v31, v32, v33);
      uint64_t v34 = v8[9];
      uint64_t v35 = &a1[v34];
      uint64_t v36 = &a2[v34];
      uint64_t v37 = v36[1];
      *uint64_t v35 = *v36;
      v35[1] = v37;
      *(_DWORD *)&a1[v8[10]] = *(_DWORD *)&a2[v8[10]];
      *(_DWORD *)&a1[v8[11]] = *(_DWORD *)&a2[v8[11]];
      a1[v8[12]] = a2[v8[12]];
      uint64_t v38 = v8[13];
      uint64_t v39 = &a1[v38];
      uint64_t v40 = &a2[v38];
      v39[8] = v40[8];
      *(void *)uint64_t v39 = *(void *)v40;
      uint64_t v41 = *(void (**)(_BYTE *, void, uint64_t, int *))(v9 + 56);
      swift_bridgeObjectRetain(v37);
      v41(a1, 0LL, 1LL, v8);
    }

    uint64_t v183 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.OneKey(0LL);
    uint64_t v42 = *(int *)(v183 + 20);
    uint64_t v43 = &a1[v42];
    uint64_t v44 = &a2[v42];
    _BYTE *v43 = a2[v42];
    uint64_t v45 = v8[5];
    uint64_t v46 = &v43[v45];
    uint64_t v47 = &v44[v45];
    uint64_t v49 = type metadata accessor for UUID(0LL, v48);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v49 - 8) + 16LL))(v46, v47, v49);
    uint64_t v50 = v8[6];
    uint64_t v51 = (uint64_t *)&v43[v50];
    uint64_t v52 = (uint64_t *)&v44[v50];
    uint64_t v53 = *v52;
    unint64_t v54 = v52[1];
    sub_1004028CC(*v52, v54);
    *uint64_t v51 = v53;
    v51[1] = v54;
    uint64_t v55 = v8[7];
    uint64_t v56 = (uint64_t *)&v43[v55];
    unint64_t v57 = (uint64_t *)&v44[v55];
    uint64_t v58 = *v57;
    unint64_t v59 = v57[1];
    sub_1004028CC(*v57, v59);
    *uint64_t v56 = v58;
    v56[1] = v59;
    uint64_t v60 = v8[8];
    uint64_t v61 = &v43[v60];
    unint64_t v62 = &v44[v60];
    uint64_t v63 = type metadata accessor for Date(0LL);
    uint64_t v64 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v63 - 8) + 16LL);
    v64(v61, v62, v63);
    uint64_t v65 = v64;
    uint64_t v66 = v8[9];
    uint64_t v67 = &v43[v66];
    uint64_t v68 = &v44[v66];
    uint64_t v69 = v68[1];
    *uint64_t v67 = *v68;
    v67[1] = v69;
    *(_DWORD *)&v43[v8[10]] = *(_DWORD *)&v44[v8[10]];
    *(_DWORD *)&v43[v8[11]] = *(_DWORD *)&v44[v8[11]];
    v43[v8[12]] = v44[v8[12]];
    uint64_t v70 = v8[13];
    uint64_t v71 = &v43[v70];
    uint64_t v72 = &v44[v70];
    v71[8] = v72[8];
    *(void *)uint64_t v71 = *(void *)v72;
    uint64_t v73 = *(int *)(v183 + 24);
    uint64_t v74 = &a1[v73];
    uint64_t v75 = &a2[v73];
    swift_bridgeObjectRetain(v69);
    v65(v74, v75, v63);
    uint64_t v76 = a1;
    uint64_t v77 = v185;
    uint64_t v78 = 0LL;
LABEL_12:
    swift_storeEnumTagMultiPayload(v76, v77, v78);
    goto LABEL_13;
  }

  memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64LL));
LABEL_13:
  uint64_t v160 = a3[5];
  uint64_t v161 = a3[6];
  uint64_t v162 = &a1[v160];
  uint64_t v163 = &a2[v160];
  *(_OWORD *)uint64_t v162 = *(_OWORD *)v163;
  char v164 = a2[v161];
  v162[16] = v163[16];
  a1[v161] = v164;
  uint64_t v165 = a3[7];
  *(void *)(swift_unknownObjectWeakCopyInit(&a1[v165], &a2[v165]) + _Block_object_dispose(va, 8) = *(void *)&a2[v165 + 8];
  uint64_t v166 = a3[9];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  uint64_t v167 = *(void *)&a2[v166];
  *(void *)&a1[v166] = v167;
  uint64_t v168 = a3[10];
  uint64_t v169 = a3[11];
  uint64_t v170 = *(void *)&a2[v168];
  *(void *)&a1[v168] = v170;
  uint64_t v171 = *(void *)&a2[v169];
  *(void *)&a1[v169] = v171;
  uint64_t v172 = a3[13];
  a1[a3[12]] = a2[a3[12]];
  uint64_t v173 = *(void *)&a2[v172];
  *(void *)&a1[v172] = v173;
  uint64_t v174 = a3[14];
  int v187 = &a1[v174];
  uint64_t v175 = &a2[v174];
  uint64_t v176 = type metadata accessor for Date(0LL);
  uint64_t v177 = a2;
  id v178 = a3;
  uint64_t v179 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v176 - 8) + 16LL);
  swift_bridgeObjectRetain(v167);
  swift_bridgeObjectRetain(v170);
  swift_retain(v171);
  swift_bridgeObjectRetain(v173);
  v179(v187, v175, v176);
  *(void *)&a1[v178[15]] = *(void *)&v177[v178[15]];
  return a1;
}

_BYTE *sub_10040895C(_BYTE *a1, _BYTE *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_1003F6050((uint64_t)a1, type metadata accessor for IDSGroupEncryptionKeyMaterialController.KeyState);
    uint64_t v6 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.KeyState(0LL);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v192 = v6;
      uint64_t v12 = (int *)type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
      uint64_t v13 = *((void *)v12 - 1);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, int *))(v13 + 48))(a2, 1LL, v12))
      {
        uint64_t v15 = sub_1003F5CB4(&qword_1009B8E08);
        memcpy(a1, a2, *(void *)(*(void *)(v15 - 8) + 64LL));
      }

      else
      {
        *a1 = *a2;
        uint64_t v81 = v12[5];
        uint64_t v82 = &a1[v81];
        uint64_t v83 = &a2[v81];
        uint64_t v84 = type metadata accessor for UUID(0LL, v14);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v84 - 8) + 16LL))(v82, v83, v84);
        uint64_t v85 = v12[6];
        uint64_t v86 = (uint64_t *)&a1[v85];
        unint64_t v87 = (uint64_t *)&a2[v85];
        uint64_t v88 = *v87;
        unint64_t v89 = v87[1];
        sub_1004028CC(*v87, v89);
        *uint64_t v86 = v88;
        v86[1] = v89;
        uint64_t v90 = v12[7];
        uint64_t v91 = (uint64_t *)&a1[v90];
        unint64_t v92 = (uint64_t *)&a2[v90];
        uint64_t v93 = *v92;
        unint64_t v94 = v92[1];
        sub_1004028CC(*v92, v94);
        *uint64_t v91 = v93;
        v91[1] = v94;
        uint64_t v95 = v12[8];
        uint64_t v96 = &a1[v95];
        uint64_t v97 = &a2[v95];
        uint64_t v98 = type metadata accessor for Date(0LL);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v98 - 8) + 16LL))(v96, v97, v98);
        uint64_t v99 = v12[9];
        uint64_t v100 = &a1[v99];
        uint64_t v101 = &a2[v99];
        *uint64_t v100 = *v101;
        uint64_t v102 = v101[1];
        v100[1] = v102;
        *(_DWORD *)&a1[v12[10]] = *(_DWORD *)&a2[v12[10]];
        *(_DWORD *)&a1[v12[11]] = *(_DWORD *)&a2[v12[11]];
        a1[v12[12]] = a2[v12[12]];
        uint64_t v103 = v12[13];
        uint64_t v104 = &a1[v103];
        uint64_t v105 = &a2[v103];
        char v106 = v105[8];
        *(void *)uint64_t v104 = *(void *)v105;
        v104[8] = v106;
        uint64_t v107 = *(void (**)(_BYTE *, void, uint64_t, int *))(v13 + 56);
        swift_bridgeObjectRetain(v102);
        v107(a1, 0LL, 1LL, v12);
      }

      uint64_t v190 = (int *)type metadata accessor for IDSGroupEncryptionKeyMaterialController.TwoKey(0LL);
      uint64_t v108 = v190[5];
      uint64_t v109 = &a1[v108];
      uint64_t v110 = &a2[v108];
      *uint64_t v109 = a2[v108];
      uint64_t v111 = v12[5];
      uint64_t v112 = &v109[v111];
      uint64_t v113 = &v110[v111];
      uint64_t v115 = type metadata accessor for UUID(0LL, v114);
      uint64_t v188 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v115 - 8) + 16LL);
      v188(v112, v113, v115);
      uint64_t v116 = v12[6];
      unint64_t v117 = (uint64_t *)&v109[v116];
      uint64_t v118 = (uint64_t *)&v110[v116];
      uint64_t v119 = *v118;
      unint64_t v120 = v118[1];
      sub_1004028CC(*v118, v120);
      uint64_t *v117 = v119;
      v117[1] = v120;
      uint64_t v121 = v12[7];
      unint64_t v122 = (uint64_t *)&v109[v121];
      uint64_t v123 = (uint64_t *)&v110[v121];
      uint64_t v124 = *v123;
      unint64_t v125 = v123[1];
      sub_1004028CC(*v123, v125);
      uint64_t *v122 = v124;
      v122[1] = v125;
      uint64_t v126 = v12[8];
      uint64_t v127 = &v109[v126];
      uint64_t v128 = &v110[v126];
      uint64_t v187 = type metadata accessor for Date(0LL);
      uint64_t v129 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v187 - 8) + 16LL);
      v129(v127, v128, v187);
      uint64_t v130 = v12[9];
      uint64_t v131 = &v109[v130];
      uint64_t v132 = &v110[v130];
      *uint64_t v131 = *v132;
      uint64_t v133 = v132[1];
      v131[1] = v133;
      *(_DWORD *)&v109[v12[10]] = *(_DWORD *)&v110[v12[10]];
      *(_DWORD *)&v109[v12[11]] = *(_DWORD *)&v110[v12[11]];
      v109[v12[12]] = v110[v12[12]];
      uint64_t v134 = v12[13];
      uint64_t v135 = &v109[v134];
      char v136 = &v110[v134];
      char v137 = v136[8];
      *(void *)uint64_t v135 = *(void *)v136;
      v135[8] = v137;
      uint64_t v138 = v190[6];
      uint64_t v139 = &a1[v138];
      uint64_t v140 = &a2[v138];
      *uint64_t v139 = a2[v138];
      uint64_t v141 = v12[5];
      uint64_t v142 = &v139[v141];
      uint64_t v143 = &v140[v141];
      swift_bridgeObjectRetain(v133);
      v188(v142, v143, v115);
      uint64_t v144 = v12[6];
      uint64_t v145 = (uint64_t *)&v139[v144];
      uint64_t v146 = (uint64_t *)&v140[v144];
      uint64_t v147 = *v146;
      unint64_t v148 = v146[1];
      sub_1004028CC(*v146, v148);
      uint64_t *v145 = v147;
      v145[1] = v148;
      uint64_t v149 = v12[7];
      uint64_t v150 = (uint64_t *)&v139[v149];
      uint64_t v151 = (uint64_t *)&v140[v149];
      uint64_t v152 = *v151;
      unint64_t v153 = v151[1];
      sub_1004028CC(*v151, v153);
      uint64_t *v150 = v152;
      v150[1] = v153;
      v129(&v139[v12[8]], &v140[v12[8]], v187);
      uint64_t v154 = v12[9];
      uint64_t v155 = &v139[v154];
      uint64_t v156 = &v140[v154];
      void *v155 = *v156;
      uint64_t v157 = v156[1];
      v155[1] = v157;
      *(_DWORD *)&v139[v12[10]] = *(_DWORD *)&v140[v12[10]];
      *(_DWORD *)&v139[v12[11]] = *(_DWORD *)&v140[v12[11]];
      v139[v12[12]] = v140[v12[12]];
      uint64_t v158 = v12[13];
      uint64_t v159 = &v139[v158];
      uint64_t v160 = &v140[v158];
      char v161 = v160[8];
      *(void *)uint64_t v159 = *(void *)v160;
      v159[8] = v161;
      uint64_t v162 = v190[7];
      uint64_t v163 = &a1[v162];
      char v164 = &a2[v162];
      swift_bridgeObjectRetain(v157);
      v129(v163, v164, v187);
      uint64_t v78 = a1;
      uint64_t v79 = v192;
      uint64_t v80 = 1LL;
      goto LABEL_13;
    }

    if (!EnumCaseMultiPayload)
    {
      uint64_t v191 = v6;
      uint64_t v8 = (int *)type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
      uint64_t v9 = *((void *)v8 - 1);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, int *))(v9 + 48))(a2, 1LL, v8))
      {
        uint64_t v11 = sub_1003F5CB4(&qword_1009B8E08);
        memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64LL));
      }

      else
      {
        *a1 = *a2;
        uint64_t v16 = v8[5];
        uint64_t v17 = &a1[v16];
        uint64_t v18 = &a2[v16];
        uint64_t v19 = type metadata accessor for UUID(0LL, v10);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v19 - 8) + 16LL))(v17, v18, v19);
        uint64_t v20 = v8[6];
        uint64_t v21 = (uint64_t *)&a1[v20];
        uint64_t v22 = (uint64_t *)&a2[v20];
        uint64_t v23 = *v22;
        unint64_t v24 = v22[1];
        sub_1004028CC(*v22, v24);
        *uint64_t v21 = v23;
        v21[1] = v24;
        uint64_t v25 = v8[7];
        uint64_t v26 = (uint64_t *)&a1[v25];
        uint64_t v27 = (uint64_t *)&a2[v25];
        uint64_t v28 = *v27;
        unint64_t v29 = v27[1];
        sub_1004028CC(*v27, v29);
        *uint64_t v26 = v28;
        v26[1] = v29;
        uint64_t v30 = v8[8];
        uint64_t v31 = &a1[v30];
        uint64_t v32 = &a2[v30];
        uint64_t v33 = type metadata accessor for Date(0LL);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v33 - 8) + 16LL))(v31, v32, v33);
        uint64_t v34 = v8[9];
        uint64_t v35 = &a1[v34];
        uint64_t v36 = &a2[v34];
        *uint64_t v35 = *v36;
        uint64_t v37 = v36[1];
        v35[1] = v37;
        *(_DWORD *)&a1[v8[10]] = *(_DWORD *)&a2[v8[10]];
        *(_DWORD *)&a1[v8[11]] = *(_DWORD *)&a2[v8[11]];
        a1[v8[12]] = a2[v8[12]];
        uint64_t v38 = v8[13];
        uint64_t v39 = &a1[v38];
        uint64_t v40 = &a2[v38];
        char v41 = v40[8];
        *(void *)uint64_t v39 = *(void *)v40;
        v39[8] = v41;
        uint64_t v42 = *(void (**)(_BYTE *, void, uint64_t, int *))(v9 + 56);
        swift_bridgeObjectRetain(v37);
        v42(a1, 0LL, 1LL, v8);
      }

      uint64_t v189 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.OneKey(0LL);
      uint64_t v43 = *(int *)(v189 + 20);
      uint64_t v44 = &a1[v43];
      uint64_t v45 = &a2[v43];
      _BYTE *v44 = a2[v43];
      uint64_t v46 = v8[5];
      uint64_t v47 = &v44[v46];
      uint64_t v48 = &v45[v46];
      uint64_t v50 = type metadata accessor for UUID(0LL, v49);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v50 - 8) + 16LL))(v47, v48, v50);
      uint64_t v51 = v8[6];
      uint64_t v52 = (uint64_t *)&v44[v51];
      uint64_t v53 = (uint64_t *)&v45[v51];
      uint64_t v54 = *v53;
      unint64_t v55 = v53[1];
      sub_1004028CC(*v53, v55);
      *uint64_t v52 = v54;
      v52[1] = v55;
      uint64_t v56 = v8[7];
      unint64_t v57 = (uint64_t *)&v44[v56];
      uint64_t v58 = (uint64_t *)&v45[v56];
      uint64_t v59 = *v58;
      unint64_t v60 = v58[1];
      sub_1004028CC(*v58, v60);
      *unint64_t v57 = v59;
      v57[1] = v60;
      uint64_t v61 = v8[8];
      unint64_t v62 = &v44[v61];
      uint64_t v63 = &v45[v61];
      uint64_t v64 = type metadata accessor for Date(0LL);
      uint64_t v65 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v64 - 8) + 16LL);
      v65(v62, v63, v64);
      uint64_t v66 = v65;
      uint64_t v67 = v8[9];
      uint64_t v68 = &v44[v67];
      uint64_t v69 = &v45[v67];
      void *v68 = *v69;
      uint64_t v70 = v69[1];
      v68[1] = v70;
      *(_DWORD *)&v44[v8[10]] = *(_DWORD *)&v45[v8[10]];
      *(_DWORD *)&v44[v8[11]] = *(_DWORD *)&v45[v8[11]];
      v44[v8[12]] = v45[v8[12]];
      uint64_t v71 = v8[13];
      uint64_t v72 = &v44[v71];
      uint64_t v73 = &v45[v71];
      char v74 = v73[8];
      *(void *)uint64_t v72 = *(void *)v73;
      void v72[8] = v74;
      uint64_t v75 = *(int *)(v189 + 24);
      uint64_t v76 = &a1[v75];
      uint64_t v77 = &a2[v75];
      swift_bridgeObjectRetain(v70);
      v66(v76, v77, v64);
      uint64_t v78 = a1;
      uint64_t v79 = v191;
      uint64_t v80 = 0LL;
LABEL_13:
      swift_storeEnumTagMultiPayload(v78, v79, v80);
      goto LABEL_14;
    }

    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64LL));
  }

_BYTE *sub_100409168(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.KeyState(0LL);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v98 = v6;
    uint64_t v12 = (int *)type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
    uint64_t v13 = *((void *)v12 - 1);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, int *))(v13 + 48))(a2, 1LL, v12))
    {
      uint64_t v15 = sub_1003F5CB4(&qword_1009B8E08);
      memcpy(a1, a2, *(void *)(*(void *)(v15 - 8) + 64LL));
    }

    else
    {
      *a1 = *a2;
      uint64_t v46 = v12[5];
      uint64_t v47 = &a1[v46];
      uint64_t v48 = &a2[v46];
      uint64_t v49 = type metadata accessor for UUID(0LL, v14);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v49 - 8) + 32LL))(v47, v48, v49);
      *(_OWORD *)&a1[v12[6]] = *(_OWORD *)&a2[v12[6]];
      *(_OWORD *)&a1[v12[7]] = *(_OWORD *)&a2[v12[7]];
      uint64_t v50 = v12[8];
      uint64_t v51 = &a1[v50];
      uint64_t v52 = &a2[v50];
      uint64_t v53 = type metadata accessor for Date(0LL);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v53 - 8) + 32LL))(v51, v52, v53);
      *(_OWORD *)&a1[v12[9]] = *(_OWORD *)&a2[v12[9]];
      *(_DWORD *)&a1[v12[10]] = *(_DWORD *)&a2[v12[10]];
      *(_DWORD *)&a1[v12[11]] = *(_DWORD *)&a2[v12[11]];
      a1[v12[12]] = a2[v12[12]];
      uint64_t v54 = v12[13];
      unint64_t v55 = &a1[v54];
      uint64_t v56 = &a2[v54];
      *(void *)unint64_t v55 = *(void *)v56;
      v55[8] = v56[8];
      (*(void (**)(_BYTE *, void, uint64_t, int *))(v13 + 56))(a1, 0LL, 1LL, v12);
    }

    uint64_t v96 = (int *)type metadata accessor for IDSGroupEncryptionKeyMaterialController.TwoKey(0LL);
    uint64_t v57 = v96[5];
    uint64_t v58 = &a1[v57];
    uint64_t v59 = &a2[v57];
    *uint64_t v58 = a2[v57];
    uint64_t v60 = v12[5];
    uint64_t v61 = &v58[v60];
    unint64_t v62 = &v59[v60];
    uint64_t v64 = type metadata accessor for UUID(0LL, v63);
    unint64_t v94 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v64 - 8) + 32LL);
    v94(v61, v62, v64);
    *(_OWORD *)&v58[v12[6]] = *(_OWORD *)&v59[v12[6]];
    *(_OWORD *)&v58[v12[7]] = *(_OWORD *)&v59[v12[7]];
    uint64_t v65 = v12[8];
    uint64_t v66 = &v58[v65];
    uint64_t v67 = &v59[v65];
    uint64_t v68 = type metadata accessor for Date(0LL);
    uint64_t v69 = v67;
    uint64_t v70 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v68 - 8) + 32LL);
    v70(v66, v69, v68);
    *(_OWORD *)&v58[v12[9]] = *(_OWORD *)&v59[v12[9]];
    *(_DWORD *)&v58[v12[10]] = *(_DWORD *)&v59[v12[10]];
    *(_DWORD *)&v58[v12[11]] = *(_DWORD *)&v59[v12[11]];
    v58[v12[12]] = v59[v12[12]];
    uint64_t v71 = v12[13];
    uint64_t v72 = &v58[v71];
    uint64_t v73 = &v59[v71];
    *(void *)uint64_t v72 = *(void *)v73;
    void v72[8] = v73[8];
    uint64_t v74 = v96[6];
    uint64_t v75 = &a1[v74];
    uint64_t v76 = &a2[v74];
    a1[v74] = a2[v74];
    v94(&a1[v74 + v12[5]], &a2[v74 + v12[5]], v64);
    *(_OWORD *)&v75[v12[6]] = *(_OWORD *)&v76[v12[6]];
    *(_OWORD *)&v75[v12[7]] = *(_OWORD *)&v76[v12[7]];
    v70(&v75[v12[8]], &v76[v12[8]], v68);
    *(_OWORD *)&v75[v12[9]] = *(_OWORD *)&v76[v12[9]];
    *(_DWORD *)&v75[v12[10]] = *(_DWORD *)&v76[v12[10]];
    *(_DWORD *)&v75[v12[11]] = *(_DWORD *)&v76[v12[11]];
    v75[v12[12]] = v76[v12[12]];
    uint64_t v77 = v12[13];
    uint64_t v78 = &v75[v77];
    uint64_t v79 = &v76[v77];
    v78[8] = v79[8];
    *(void *)uint64_t v78 = *(void *)v79;
    v70(&a1[v96[7]], &a2[v96[7]], v68);
    uint64_t v43 = a1;
    uint64_t v44 = v98;
    uint64_t v45 = 1LL;
    goto LABEL_12;
  }

  if (!EnumCaseMultiPayload)
  {
    uint64_t v97 = v6;
    uint64_t v8 = (int *)type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
    uint64_t v9 = *((void *)v8 - 1);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, int *))(v9 + 48))(a2, 1LL, v8))
    {
      uint64_t v11 = sub_1003F5CB4(&qword_1009B8E08);
      memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64LL));
    }

    else
    {
      *a1 = *a2;
      uint64_t v16 = v8[5];
      uint64_t v17 = &a1[v16];
      uint64_t v18 = &a2[v16];
      uint64_t v19 = type metadata accessor for UUID(0LL, v10);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v19 - 8) + 32LL))(v17, v18, v19);
      *(_OWORD *)&a1[v8[6]] = *(_OWORD *)&a2[v8[6]];
      *(_OWORD *)&a1[v8[7]] = *(_OWORD *)&a2[v8[7]];
      uint64_t v20 = v8[8];
      uint64_t v21 = &a1[v20];
      uint64_t v22 = &a2[v20];
      uint64_t v23 = type metadata accessor for Date(0LL);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v23 - 8) + 32LL))(v21, v22, v23);
      *(_OWORD *)&a1[v8[9]] = *(_OWORD *)&a2[v8[9]];
      *(_DWORD *)&a1[v8[10]] = *(_DWORD *)&a2[v8[10]];
      *(_DWORD *)&a1[v8[11]] = *(_DWORD *)&a2[v8[11]];
      a1[v8[12]] = a2[v8[12]];
      uint64_t v24 = v8[13];
      uint64_t v25 = &a1[v24];
      uint64_t v26 = &a2[v24];
      *(void *)uint64_t v25 = *(void *)v26;
      v25[8] = v26[8];
      (*(void (**)(_BYTE *, void, uint64_t, int *))(v9 + 56))(a1, 0LL, 1LL, v8);
    }

    uint64_t v95 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.OneKey(0LL);
    uint64_t v27 = *(int *)(v95 + 20);
    uint64_t v28 = &a1[v27];
    unint64_t v29 = &a2[v27];
    *uint64_t v28 = a2[v27];
    uint64_t v30 = v8[5];
    uint64_t v31 = &v28[v30];
    uint64_t v32 = &v29[v30];
    uint64_t v34 = type metadata accessor for UUID(0LL, v33);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v34 - 8) + 32LL))(v31, v32, v34);
    *(_OWORD *)&v28[v8[6]] = *(_OWORD *)&v29[v8[6]];
    *(_OWORD *)&v28[v8[7]] = *(_OWORD *)&v29[v8[7]];
    uint64_t v35 = v8[8];
    uint64_t v36 = &v28[v35];
    uint64_t v37 = &v29[v35];
    uint64_t v38 = type metadata accessor for Date(0LL);
    uint64_t v39 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v38 - 8) + 32LL);
    v39(v36, v37, v38);
    *(_OWORD *)&v28[v8[9]] = *(_OWORD *)&v29[v8[9]];
    *(_DWORD *)&v28[v8[10]] = *(_DWORD *)&v29[v8[10]];
    *(_DWORD *)&v28[v8[11]] = *(_DWORD *)&v29[v8[11]];
    v28[v8[12]] = v29[v8[12]];
    uint64_t v40 = v8[13];
    char v41 = &v28[v40];
    uint64_t v42 = &v29[v40];
    v41[8] = v42[8];
    *(void *)char v41 = *(void *)v42;
    v39(&a1[*(int *)(v95 + 24)], &a2[*(int *)(v95 + 24)], v38);
    uint64_t v43 = a1;
    uint64_t v44 = v97;
    uint64_t v45 = 0LL;
LABEL_12:
    swift_storeEnumTagMultiPayload(v43, v44, v45);
    goto LABEL_13;
  }

  memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64LL));
LABEL_13:
  uint64_t v80 = a3[5];
  uint64_t v81 = a3[6];
  uint64_t v82 = &a1[v80];
  uint64_t v83 = &a2[v80];
  *(_OWORD *)uint64_t v82 = *(_OWORD *)v83;
  char v84 = a2[v81];
  v82[16] = v83[16];
  a1[v81] = v84;
  uint64_t v85 = a3[7];
  *(void *)(swift_unknownObjectWeakTakeInit(&a1[v85], &a2[v85]) + _Block_object_dispose(va, 8) = *(void *)&a2[v85 + 8];
  uint64_t v86 = a3[9];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  *(void *)&a1[v86] = *(void *)&a2[v86];
  uint64_t v87 = a3[11];
  *(void *)&a1[a3[10]] = *(void *)&a2[a3[10]];
  *(void *)&a1[v87] = *(void *)&a2[v87];
  uint64_t v88 = a3[13];
  a1[a3[12]] = a2[a3[12]];
  *(void *)&a1[v88] = *(void *)&a2[v88];
  uint64_t v89 = a3[14];
  uint64_t v90 = &a1[v89];
  uint64_t v91 = &a2[v89];
  uint64_t v92 = type metadata accessor for Date(0LL);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v92 - 8) + 32LL))(v90, v91, v92);
  *(void *)&a1[a3[15]] = *(void *)&a2[a3[15]];
  return a1;
}

_BYTE *sub_1004097C0(_BYTE *a1, _BYTE *a2, int *a3)
{
  if (a1 != a2)
  {
    sub_1003F6050((uint64_t)a1, type metadata accessor for IDSGroupEncryptionKeyMaterialController.KeyState);
    uint64_t v6 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.KeyState(0LL);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v6);
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v103 = v6;
      uint64_t v12 = (int *)type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
      uint64_t v13 = *((void *)v12 - 1);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, int *))(v13 + 48))(a2, 1LL, v12))
      {
        uint64_t v15 = sub_1003F5CB4(&qword_1009B8E08);
        memcpy(a1, a2, *(void *)(*(void *)(v15 - 8) + 64LL));
      }

      else
      {
        *a1 = *a2;
        uint64_t v46 = v12[5];
        uint64_t v47 = &a1[v46];
        uint64_t v48 = &a2[v46];
        uint64_t v49 = type metadata accessor for UUID(0LL, v14);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v49 - 8) + 32LL))(v47, v48, v49);
        *(_OWORD *)&a1[v12[6]] = *(_OWORD *)&a2[v12[6]];
        *(_OWORD *)&a1[v12[7]] = *(_OWORD *)&a2[v12[7]];
        uint64_t v50 = v12[8];
        uint64_t v51 = &a1[v50];
        uint64_t v52 = &a2[v50];
        uint64_t v53 = type metadata accessor for Date(0LL);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v53 - 8) + 32LL))(v51, v52, v53);
        *(_OWORD *)&a1[v12[9]] = *(_OWORD *)&a2[v12[9]];
        *(_DWORD *)&a1[v12[10]] = *(_DWORD *)&a2[v12[10]];
        *(_DWORD *)&a1[v12[11]] = *(_DWORD *)&a2[v12[11]];
        a1[v12[12]] = a2[v12[12]];
        uint64_t v54 = v12[13];
        unint64_t v55 = &a1[v54];
        uint64_t v56 = &a2[v54];
        *(void *)unint64_t v55 = *(void *)v56;
        v55[8] = v56[8];
        (*(void (**)(_BYTE *, void, uint64_t, int *))(v13 + 56))(a1, 0LL, 1LL, v12);
      }

      uint64_t v101 = (int *)type metadata accessor for IDSGroupEncryptionKeyMaterialController.TwoKey(0LL);
      uint64_t v57 = v101[5];
      uint64_t v58 = &a1[v57];
      uint64_t v59 = &a2[v57];
      *uint64_t v58 = a2[v57];
      uint64_t v60 = v12[5];
      uint64_t v61 = &v58[v60];
      unint64_t v62 = &v59[v60];
      uint64_t v64 = type metadata accessor for UUID(0LL, v63);
      uint64_t v99 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v64 - 8) + 32LL);
      v99(v61, v62, v64);
      *(_OWORD *)&v58[v12[6]] = *(_OWORD *)&v59[v12[6]];
      *(_OWORD *)&v58[v12[7]] = *(_OWORD *)&v59[v12[7]];
      uint64_t v65 = v12[8];
      uint64_t v66 = &v58[v65];
      uint64_t v67 = &v59[v65];
      uint64_t v68 = type metadata accessor for Date(0LL);
      uint64_t v69 = v67;
      uint64_t v70 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v68 - 8) + 32LL);
      v70(v66, v69, v68);
      *(_OWORD *)&v58[v12[9]] = *(_OWORD *)&v59[v12[9]];
      *(_DWORD *)&v58[v12[10]] = *(_DWORD *)&v59[v12[10]];
      *(_DWORD *)&v58[v12[11]] = *(_DWORD *)&v59[v12[11]];
      v58[v12[12]] = v59[v12[12]];
      uint64_t v71 = v12[13];
      uint64_t v72 = &v58[v71];
      uint64_t v73 = &v59[v71];
      *(void *)uint64_t v72 = *(void *)v73;
      void v72[8] = v73[8];
      uint64_t v74 = v101[6];
      uint64_t v75 = &a1[v74];
      uint64_t v76 = &a2[v74];
      a1[v74] = a2[v74];
      v99(&a1[v74 + v12[5]], &a2[v74 + v12[5]], v64);
      *(_OWORD *)&v75[v12[6]] = *(_OWORD *)&v76[v12[6]];
      *(_OWORD *)&v75[v12[7]] = *(_OWORD *)&v76[v12[7]];
      v70(&v75[v12[8]], &v76[v12[8]], v68);
      *(_OWORD *)&v75[v12[9]] = *(_OWORD *)&v76[v12[9]];
      *(_DWORD *)&v75[v12[10]] = *(_DWORD *)&v76[v12[10]];
      *(_DWORD *)&v75[v12[11]] = *(_DWORD *)&v76[v12[11]];
      v75[v12[12]] = v76[v12[12]];
      uint64_t v77 = v12[13];
      uint64_t v78 = &v75[v77];
      uint64_t v79 = &v76[v77];
      v78[8] = v79[8];
      *(void *)uint64_t v78 = *(void *)v79;
      v70(&a1[v101[7]], &a2[v101[7]], v68);
      uint64_t v43 = a1;
      uint64_t v44 = v103;
      uint64_t v45 = 1LL;
      goto LABEL_13;
    }

    if (!EnumCaseMultiPayload)
    {
      uint64_t v102 = v6;
      uint64_t v8 = (int *)type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
      uint64_t v9 = *((void *)v8 - 1);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, int *))(v9 + 48))(a2, 1LL, v8))
      {
        uint64_t v11 = sub_1003F5CB4(&qword_1009B8E08);
        memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64LL));
      }

      else
      {
        *a1 = *a2;
        uint64_t v16 = v8[5];
        uint64_t v17 = &a1[v16];
        uint64_t v18 = &a2[v16];
        uint64_t v19 = type metadata accessor for UUID(0LL, v10);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v19 - 8) + 32LL))(v17, v18, v19);
        *(_OWORD *)&a1[v8[6]] = *(_OWORD *)&a2[v8[6]];
        *(_OWORD *)&a1[v8[7]] = *(_OWORD *)&a2[v8[7]];
        uint64_t v20 = v8[8];
        uint64_t v21 = &a1[v20];
        uint64_t v22 = &a2[v20];
        uint64_t v23 = type metadata accessor for Date(0LL);
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v23 - 8) + 32LL))(v21, v22, v23);
        *(_OWORD *)&a1[v8[9]] = *(_OWORD *)&a2[v8[9]];
        *(_DWORD *)&a1[v8[10]] = *(_DWORD *)&a2[v8[10]];
        *(_DWORD *)&a1[v8[11]] = *(_DWORD *)&a2[v8[11]];
        a1[v8[12]] = a2[v8[12]];
        uint64_t v24 = v8[13];
        uint64_t v25 = &a1[v24];
        uint64_t v26 = &a2[v24];
        *(void *)uint64_t v25 = *(void *)v26;
        v25[8] = v26[8];
        (*(void (**)(_BYTE *, void, uint64_t, int *))(v9 + 56))(a1, 0LL, 1LL, v8);
      }

      uint64_t v100 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.OneKey(0LL);
      uint64_t v27 = *(int *)(v100 + 20);
      uint64_t v28 = &a1[v27];
      unint64_t v29 = &a2[v27];
      *uint64_t v28 = a2[v27];
      uint64_t v30 = v8[5];
      uint64_t v31 = &v28[v30];
      uint64_t v32 = &v29[v30];
      uint64_t v34 = type metadata accessor for UUID(0LL, v33);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v34 - 8) + 32LL))(v31, v32, v34);
      *(_OWORD *)&v28[v8[6]] = *(_OWORD *)&v29[v8[6]];
      *(_OWORD *)&v28[v8[7]] = *(_OWORD *)&v29[v8[7]];
      uint64_t v35 = v8[8];
      uint64_t v36 = &v28[v35];
      uint64_t v37 = &v29[v35];
      uint64_t v38 = type metadata accessor for Date(0LL);
      uint64_t v39 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v38 - 8) + 32LL);
      v39(v36, v37, v38);
      *(_OWORD *)&v28[v8[9]] = *(_OWORD *)&v29[v8[9]];
      *(_DWORD *)&v28[v8[10]] = *(_DWORD *)&v29[v8[10]];
      *(_DWORD *)&v28[v8[11]] = *(_DWORD *)&v29[v8[11]];
      v28[v8[12]] = v29[v8[12]];
      uint64_t v40 = v8[13];
      char v41 = &v28[v40];
      uint64_t v42 = &v29[v40];
      v41[8] = v42[8];
      *(void *)char v41 = *(void *)v42;
      v39(&a1[*(int *)(v100 + 24)], &a2[*(int *)(v100 + 24)], v38);
      uint64_t v43 = a1;
      uint64_t v44 = v102;
      uint64_t v45 = 0LL;
LABEL_13:
      swift_storeEnumTagMultiPayload(v43, v44, v45);
      goto LABEL_14;
    }

    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64LL));
  }

uint64_t sub_100409E54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100409E60);
}

uint64_t sub_100409E60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.KeyState(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v9 = a1 + *(int *)(a3 + 28);
    uint64_t v10 = *(void *)(v9 + 8);
    int v11 = *(_DWORD *)v9 & 0x7FFFFFFF;
    if ((v10 & 0xF000000000000007LL) != 0) {
      return (v11 + 1);
    }
    else {
      return 0LL;
    }
  }

  else
  {
    uint64_t v12 = type metadata accessor for Date(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48LL))( a1 + *(int *)(a3 + 56),  a2,  v12);
  }

uint64_t sub_100409F0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100409F18);
}

uint64_t sub_100409F18(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for IDSGroupEncryptionKeyMaterialController.KeyState(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    int v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }

  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      uint64_t v13 = (void *)(a1 + *(int *)(a4 + 28));
      *uint64_t v13 = (a2 - 1);
      v13[1] = 1LL;
      return result;
    }

    uint64_t v10 = type metadata accessor for Date(0LL);
    uint64_t v12 = a1 + *(int *)(a4 + 56);
    int v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t sub_100409FC4(uint64_t a1)
{
  uint64_t result = type metadata accessor for IDSGroupEncryptionKeyMaterialController.KeyState(319LL);
  if (v3 <= 0x3F)
  {
    v5[0] = *(void *)(result - 8) + 64LL;
    v5[1] = &unk_1007183B8;
    void v5[2] = &unk_100718318;
    v5[3] = &unk_1007183D0;
    void v5[4] = (char *)&value witness table for Builtin.Int64 + 64;
    v5[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v5[6] = (char *)&value witness table for Builtin.BridgeObject + 64;
    void v5[7] = &unk_100718360;
    void v5[8] = &unk_100718318;
    v5[9] = (char *)&value witness table for Builtin.BridgeObject + 64;
    uint64_t result = type metadata accessor for Date(319LL);
    if (v4 <= 0x3F)
    {
      v5[10] = *(void *)(result - 8) + 64LL;
      v5[11] = (char *)&value witness table for Builtin.Int64 + 64;
      swift_initStructMetadata(a1, 256LL, 12LL, v5, a1 + 16);
      return 0LL;
    }
  }

  return result;
}

void type metadata accessor for os_unfair_lock_s()
{
  if (!qword_1009B96F0)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(0LL, &unk_100904F88);
    if (!v1) {
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_1009B96F0);
    }
  }

uint64_t sub_10040A0E4()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **(void **)(v0 + 16)) + 0x1E8LL))();
}

uint64_t sub_10040A11C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_10040A140()
{
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = *(void *)((char *)v1 + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionKeyMaterialController_state);
  uint64_t v3 = v2 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v2 + 16LL);
  unint64_t v4 = (os_unfair_lock_s *)(v2 + ((*(unsigned int *)(*(void *)v2 + 48LL) + 3LL) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v4);
  uint64_t v5 = type metadata accessor for IDSGroupEncryptionKeyMaterialController.State(0LL);
  uint64_t v6 = *(int *)(v5 + 48);
  *(_BYTE *)(v3 + v6) = 0;
  (*(void (**)(uint64_t))((swift_isaMask & *v1) + 0x168LL))(v3);
  if ((*(_BYTE *)(v3 + v6) & 1) == 0)
  {
    uint64_t v7 = *(int *)(v5 + 52);
    uint64_t v8 = *(void *)(v3 + v7);
    *(void *)(v3 + v7) = &_swiftEmptyArrayStorage;
    uint64_t v9 = *(void *)(v8 + 16);
    if (v9)
    {
      uint64_t v10 = (void *)(v8 + 40);
      do
      {
        uint64_t v12 = (void (*)(uint64_t))*(v10 - 1);
        uint64_t v11 = *v10;
        uint64_t v13 = swift_retain(*v10);
        v12(v13);
        swift_release(v11);
        v10 += 2;
        --v9;
      }

      while (v9);
    }

    swift_bridgeObjectRelease(v8);
  }

  os_unfair_lock_unlock(v4);
}

void *sub_10040A238(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) + 16LL) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80LL)));
  return result;
}

uint64_t sub_10040A25C(uint64_t a1, unint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return swift_errorRetain(a1);
  }
  else {
    return sub_1004028CC(a1, a2);
  }
}

uint64_t sub_10040A268(uint64_t a1, unint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return swift_errorRelease(a1);
  }
  else {
    return sub_100402A84(a1, a2);
  }
}

uint64_t sub_10040A274(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_1003F5CB4(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t sub_10040A2B0(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = a2(255LL);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

void sub_10040A2F0()
{
  if (v0[2])
  {
    uint64_t v2 = v0[3];
    uint64_t v1 = v0[4];
    uint64_t ObjectType = swift_getObjectType(v0[2]);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 24))(v1, ObjectType, v2);
  }

uint64_t sub_10040A33C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10040A360()
{
  uint64_t result = swift_unknownObjectWeakLoadStrong(v0 + 16);
  if (result)
  {
    uint64_t v2 = (void *)result;
    uint64_t v3 = *(void *)(result + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionKeyMaterialController_state);
    uint64_t v4 = v3 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v3 + 16LL);
    uint64_t v5 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(void *)v3 + 48LL) + 3LL) & 0x1FFFFFFFCLL));
    swift_retain(v3);
    os_unfair_lock_lock(v5);
    uint64_t v6 = *(int *)(type metadata accessor for IDSGroupEncryptionKeyMaterialController.State(0LL) + 44);
    swift_release(*(void *)(v4 + v6));
    *(void *)(v4 + v6) = 0LL;
    (*(void (**)(uint64_t))((swift_isaMask & *v2) + 0x168LL))(v4);
    os_unfair_lock_unlock(v5);

    return swift_release(v3);
  }

  return result;
}

uint64_t sub_10040A454()
{
  uint64_t v1 = sub_1003F5CB4(&qword_1009BB480);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10040A4B8()
{
  uint64_t v0 = sub_1003F5CB4(&qword_1009BB480);
  return CheckedContinuation.resume(returning:)(v0, v0);
}

uint64_t sub_10040A4F8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10040A51C()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_10040A53C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v6 = a4 + 16 * a1 + 32;
    unint64_t v7 = a3 + 16 * v4;
    if (v6 >= v7 || v6 + 16 * v4 <= a3)
    {
      sub_1003F5CB4(&qword_1009B90F8);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_10040A648(void *a1)
{
  uint64_t v1 = *(void *)(a1[3] - 8LL);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0) {
    return swift_release(*a1);
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_10040A668(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void type metadata accessor for SecKey()
{
  if (!qword_1009BBF20)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(0LL, &unk_1009052B0);
    if (!v1) {
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_1009BBF20);
    }
  }

uint64_t sub_10040A750()
{
  uint64_t v1 = *v0;
  v7[0] = 0LL;
  v7[1] = 0xE000000000000000LL;
  v2._countAndFlagsBits = 0x7469746E6564493CLL;
  v2._dispatch_queue_t object = (void *)0xEB00000000203A79LL;
  String.append(_:)(v2);
  uint64_t v6 = v1;
  type metadata accessor for SecKey();
  _print_unlocked<A, B>(_:_:)( &v6,  v7,  v3,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v4._countAndFlagsBits = 62LL;
  v4._dispatch_queue_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v4);
  return v7[0];
}

void *initializeBufferWithCopyOfBuffer for IDSGlobalLinkP2PKeyNegotiationLocalIdentity( void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  Swift::String v4 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  id v5 = v3;
  id v6 = v4;
  return a1;
}

void destroy for IDSGlobalLinkP2PKeyNegotiationLocalIdentity(id *a1)
{
}

uint64_t assignWithCopy for IDSGlobalLinkP2PKeyNegotiationLocalIdentity(uint64_t a1, uint64_t a2)
{
  Swift::String v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  unint64_t v7 = *(void **)(a2 + 8);
  uint64_t v8 = *(void **)(a1 + 8);
  *(void *)(a1 + _Block_object_dispose(va, 8) = v7;
  id v9 = v7;

  return a1;
}

__n128 initializeWithTake for IDSGlobalLinkP2PKeyNegotiationLocalIdentity(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t assignWithTake for IDSGlobalLinkP2PKeyNegotiationLocalIdentity(uint64_t a1, _OWORD *a2)
{
  Swift::String v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for IDSGlobalLinkP2PKeyNegotiationLocalIdentity(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IDSGlobalLinkP2PKeyNegotiationLocalIdentity( uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for IDSGlobalLinkP2PKeyNegotiationLocalIdentity()
{
  return &type metadata for IDSGlobalLinkP2PKeyNegotiationLocalIdentity;
}

uint64_t sub_10040A96C()
{
  return 1LL;
}

uint64_t sub_10040A974(uint64_t a1, char a2)
{
  if (!a1) {
    return 0LL;
  }
  Swift::String v4 = (void *)objc_opt_self(&OBJC_CLASS___NSKeyedArchiver);
  id v22 = 0LL;
  swift_unknownObjectRetain(a1, v5);
  id v6 = [v4 archivedDataWithRootObject:a1 requiringSecureCoding:a2 & 1 error:&v22];
  id v7 = v22;
  if (!v6)
  {
    uint64_t v10 = v7;
    uint64_t v11 = _convertNSErrorToError(_:)(v7);

    swift_willThrow(v12);
    uint64_t v13 = sub_1003F5CB4(&qword_1009B9108);
    uint64_t v14 = swift_allocObject(v13, 64LL, 7LL);
    *(_OWORD *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1007184C0;
    id v22 = 0LL;
    unint64_t v23 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(19LL);
    v15._dispatch_queue_t object = (void *)0x800000010083E800LL;
    v15._countAndFlagsBits = 0xD000000000000011LL;
    String.append(_:)(v15);
    uint64_t v21 = v11;
    uint64_t v16 = sub_1003F5CB4(&qword_1009BB150);
    _print_unlocked<A, B>(_:_:)( &v21,  &v22,  v16,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
    id v17 = v22;
    unint64_t v18 = v23;
    *(void *)(v14 + 56) = &type metadata for String;
    *(void *)(v14 + 32) = v17;
    *(void *)(v14 + 40) = v18;
    print(_:separator:terminator:)(v14, 32LL, 0xE100000000000000LL, 10LL, 0xE100000000000000LL);
    swift_bridgeObjectRelease(v14);
    swift_errorRelease(v11);
    swift_unknownObjectRelease(a1, v19);
    return 0LL;
  }

  uint64_t v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v6);

  swift_unknownObjectRelease(a1, v9);
  return v8;
}

uint64_t sub_10040AB44(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = 0LL;
  if (a3 >> 60 != 15)
  {
    sub_10040ACC4();
    sub_1004028CC(a2, a3);
    uint64_t v4 = static NSKeyedUnarchiver.unarchivedObject<A>(ofClass:from:)(a1, a2, a3, a4);
    sub_10040AD00(a2, a3);
  }

  return v4;
}

unint64_t sub_10040ACC4()
{
  unint64_t result = qword_1009B9110;
  if (!qword_1009B9110)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSKeyedUnarchiver);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1009B9110);
  }

  return result;
}

uint64_t sub_10040AD00(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_100402A84(result, a2);
  }
  return result;
}

uint64_t sub_10040AD14()
{
  return swift_deallocClassInstance(v0, 16LL, 7LL);
}

uint64_t sub_10040AD24()
{
  return swift_allocObject(v0, 16LL, 7LL);
}

void sub_10040AD34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for SHA256(0LL);
  v28[3] = *(void *)(v8 - 8);
  __chkstk_darwin(v9, v10);
  v11.n128_f64[0] = type metadata accessor for SHA256Digest(0LL);
  v28[5] = *(void *)(v12 - 8);
  __chkstk_darwin(v11, v13);
  void v28[4] = (char *)v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for String.Encoding(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v19 = __chkstk_darwin(v17, v18);
  uint64_t v21 = (char *)v28 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static String.Encoding.utf8.getter(v19);
  uint64_t v22 = String.data(using:allowLossyConversion:)(v21, 0LL, a1, a2);
  unint64_t v23 = *(void (**)(char *, uint64_t))(v16 + 8);
  unint64_t v25 = v24;
  v23(v21, v15);
  if (v25 >> 60 != 15)
  {
    __int128 v29 = xmmword_1007184D0;
    Data.append(_:)(v22, v25);
    Data.append(_:)(a3, a4);
    uint64_t v26 = *((void *)&v29 + 1) >> 62;
    sub_1004028CC(v29, *((unint64_t *)&v29 + 1));
    sub_10040A2B0( (unint64_t *)&qword_1009B9118,  (uint64_t (*)(uint64_t))&type metadata accessor for SHA256,  (uint64_t)&protocol conformance descriptor for SHA256);
    dispatch thunk of HashFunction.init()(v8);
    uint64_t v27 = (char *)&loc_10040AEE0 + *((int *)qword_10040B160 + v26);
    v28[1] = v25;
    v28[2] = v22;
    __asm { BR              X9 }
  }

  __break(1u);
  JUMPOUT(0x10040B15CLL);
}

_BYTE *sub_10040B170@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X1>, void *a3@<X8>)
{
  if (!result) {
    goto LABEL_4;
  }
  uint64_t v4 = a2 - result;
  if (a2 == result)
  {
    unint64_t result = 0LL;
LABEL_4:
    unint64_t v5 = 0xC000000000000000LL;
    goto LABEL_5;
  }

  if (v4 <= 14)
  {
    unint64_t result = (_BYTE *)sub_10040B3A0(result, a2);
    unint64_t v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }

  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    unint64_t result = (_BYTE *)sub_10040B460((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v8 | 0x8000000000000000LL;
  }

  else
  {
    unint64_t result = (_BYTE *)sub_10040B4D8((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v6 | 0x4000000000000000LL;
  }

uint64_t sub_10040B1E4(uint64_t a1, uint64_t a2)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v5 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }

    v5 += a1 - result;
  }

  BOOL v6 = __OFSUB__(a2, a1);
  uint64_t v7 = a2 - a1;
  if (v6)
  {
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v8 = __DataStorage._length.getter();
  if (v8 >= v7) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = v8;
  }
  uint64_t v10 = v5 + v9;
  if (v5) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0LL;
  }
  uint64_t v12 = type metadata accessor for SHA256(0LL);
  uint64_t v13 = sub_10040A2B0( (unint64_t *)&qword_1009B9118,  (uint64_t (*)(uint64_t))&type metadata accessor for SHA256,  (uint64_t)&protocol conformance descriptor for SHA256);
  return dispatch thunk of HashFunction.update(bufferPointer:)(v5, v11, v12, v13);
}

void *sub_10040B2A8(void *a1)
{
  uint64_t v1 = a1;
  if ((*(_BYTE *)(*(void *)(a1[3] - 8LL) + 82LL) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (void *)v2;
  }

  return v1;
}

uint64_t sub_10040B2E4(uint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    if (result <= 14)
    {
      if (result < 0) {
        __break(1u);
      }
      else {
        return 0LL;
      }
    }

    else
    {
      uint64_t v2 = type metadata accessor for __DataStorage(0LL);
      swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
      __DataStorage.init(length:)(v1);
      if (v1 >= 0x7FFFFFFF)
      {
        uint64_t v3 = type metadata accessor for Data.RangeReference(0LL);
        uint64_t result = swift_allocObject(v3, 32LL, 7LL);
        *(void *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
        *(void *)(result + 24) = v1;
      }

      else
      {
        return v1 << 32;
      }
    }
  }

  return result;
}

uint64_t type metadata accessor for ArchiveHelper()
{
  return objc_opt_self(&OBJC_CLASS____TtC17identityservicesd13ArchiveHelper);
}

uint64_t sub_10040B3A0(_BYTE *__src, _BYTE *a2)
{
  if (__src) {
    unint64_t v2 = a2 - __src;
  }
  else {
    unint64_t v2 = 0LL;
  }
  if ((v2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }

  if (v2 > 0xFF) {
    goto LABEL_11;
  }
  memset(__dst, 0, sizeof(__dst));
  char v5 = v2;
  if (__src && a2 != __src) {
    memcpy(__dst, __src, a2 - __src);
  }
  return *(void *)__dst;
}

uint64_t sub_10040B460(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = a2 - a1;
  }
  else {
    uint64_t v3 = 0LL;
  }
  uint64_t v4 = type metadata accessor for __DataStorage(0LL);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  uint64_t result = __DataStorage.init(bytes:length:)(a1, v3);
  if (v3 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v6 = type metadata accessor for Data.RangeReference(0LL);
    uint64_t result = swift_allocObject(v6, 32LL, 7LL);
    *(void *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
    *(void *)(result + 24) = v3;
  }

  return result;
}

uint64_t sub_10040B4D8(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = a2 - a1;
  }
  else {
    uint64_t v3 = 0LL;
  }
  uint64_t v4 = type metadata accessor for __DataStorage(0LL);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  uint64_t result = __DataStorage.init(bytes:length:)(a1, v3);
  if (v3 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v3 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  if ((v3 & 0x80000000) == 0) {
    return v3 << 32;
  }
LABEL_10:
  __break(1u);
  return result;
}

void sub_10040B558()
{
  *(_WORD *)&algn_1009C7578[6] = -4864;
}

void sub_10040B5A8()
{
  *(_WORD *)&algn_1009C7588[6] = -4864;
}

void sub_10040B5F8()
{
  qword_1009C7590 = 0x646F6D2D70617277LL;
  *(void *)algn_1009C7598 = 0xE900000000000065LL;
}

id sub_10040B640(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  if (*a3 != -1LL) {
    swift_once(a3, a6);
  }
  uint64_t v7 = *a5;
  swift_bridgeObjectRetain(v7);
  NSString v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t type metadata accessor for IDSGroupEncryptionPreKeyDictionaryKeys()
{
  return objc_opt_self(&OBJC_CLASS____TtC17identityservicesd38IDSGroupEncryptionPreKeyDictionaryKeys);
}

id sub_10040B704()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for IDSGroupEncryptionPreKeyDictionaryKeys();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for IDSGroupEncryptionDesiredPreKeyMaterialSet(uint64_t a1)
{
  uint64_t result = qword_1009C1230;
  if (!qword_1009C1230) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for IDSGroupEncryptionDesiredPreKeyMaterialSet);
  }
  return result;
}

uint64_t sub_10040B774()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10040DC2C(v0, qword_1009C75A0);
  sub_10040B7C0(v0, (uint64_t)qword_1009C75A0);
  return sub_10048ADB4(2u);
}

uint64_t sub_10040B7C0(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(void *)(a1 - 8) + 82LL) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t sub_10040B7D8()
{
  v0._dispatch_queue_t object = (void *)0x800000010083E870LL;
  v0._countAndFlagsBits = 0xD00000000000003BLL;
  String.append(_:)(v0);
  type metadata accessor for IDSGroupEncryptionDesiredPreKeyMaterialSet(0LL);
  uint64_t v1 = type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
  uint64_t v2 = sub_10040A2B0( &qword_1009B91B8,  type metadata accessor for IDSGroupEncryptionPublicIdentity,  (uint64_t)&unk_10071D364);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v1, v2);
  dispatch_queue_t object = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(object);
  v5._countAndFlagsBits = 62LL;
  v5._dispatch_queue_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v5);
  return 0LL;
}

void *sub_10040B8A4()
{
  uint64_t v1 = type metadata accessor for IDSGroupEncryptionDesiredPreKeyMaterialSet(0LL);
  __chkstk_darwin(v2, v3);
  uint64_t v96 = (uint64_t)&v94 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5, v6);
  NSString v8 = (char *)&v94 - v7;
  __chkstk_darwin(v9, v10);
  uint64_t v95 = (uint64_t)&v94 - v11;
  __chkstk_darwin(v12, v13);
  uint64_t v101 = (uint64_t)&v94 - v14;
  uint64_t v15 = type metadata accessor for Logger(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v104 = v15;
  uint64_t v105 = v16;
  __chkstk_darwin(v17, v18);
  uint64_t v20 = (char *)&v94 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v21, v22);
  uint64_t v97 = (char *)&v94 - v23;
  uint64_t v98 = type metadata accessor for IDSGroupEncryptionMaterialData(0LL);
  __chkstk_darwin(v24, v25);
  uint64_t v27 = (uint64_t *)((char *)&v94 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v28, v29);
  uint64_t v99 = (uint64_t)&v94 - v30;
  uint64_t v31 = type metadata accessor for Date(0LL);
  uint64_t v32 = *(void *)(v31 - 8);
  __chkstk_darwin(v33, v34);
  uint64_t v36 = (char *)&v94 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v110 = &_swiftEmptySetSingleton;
  uint64_t v100 = v1;
  uint64_t v37 = *(int *)(v1 + 20);
  unint64_t v102 = v0;
  uint64_t v38 = v0 + v37;
  CFDataRef v103 = sub_1004D3220();
  if (v39 >> 60 == 15)
  {
    if (qword_1009C1028 != -1) {
      swift_once(&qword_1009C1028, sub_10040B774);
    }
    uint64_t v40 = v104;
    uint64_t v41 = sub_10040B7C0(v104, (uint64_t)qword_1009C75A0);
    uint64_t v42 = v105;
    (*(void (**)(char *, uint64_t, uint64_t))(v105 + 16))(v20, v41, v40);
    uint64_t v43 = sub_1003F5FC8(v102, (uint64_t)v8, type metadata accessor for IDSGroupEncryptionDesiredPreKeyMaterialSet);
    uint64_t v44 = (os_log_s *)Logger.logObject.getter(v43);
    os_log_type_t v45 = static os_log_type_t.default.getter();
    int v46 = v45;
    if (os_log_type_enabled(v44, v45))
    {
      LODWORD(v102) = v46;
      uint64_t v47 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      CFDataRef v103 = (CFDataRef)swift_slowAlloc(32LL, -1LL);
      CFDataRef v109 = v103;
      *(_DWORD *)uint64_t v47 = 136315138;
      uint64_t v48 = v96;
      sub_1003F5FC8((uint64_t)v8, v96, type metadata accessor for IDSGroupEncryptionDesiredPreKeyMaterialSet);
      uint64_t v107 = 0LL;
      unint64_t v108 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(62LL);
      v49._dispatch_queue_t object = (void *)0x800000010083E870LL;
      v49._countAndFlagsBits = 0xD00000000000003BLL;
      String.append(_:)(v49);
      uint64_t v50 = type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
      uint64_t v51 = sub_10040A2B0( &qword_1009B91B8,  type metadata accessor for IDSGroupEncryptionPublicIdentity,  (uint64_t)&unk_10071D364);
      v52._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v50, v51);
      dispatch_queue_t object = v52._object;
      String.append(_:)(v52);
      swift_bridgeObjectRelease(object);
      v54._countAndFlagsBits = 62LL;
      v54._dispatch_queue_t object = (void *)0xE100000000000000LL;
      String.append(_:)(v54);
      uint64_t v55 = v107;
      unint64_t v56 = v108;
      sub_1003F6050(v48, type metadata accessor for IDSGroupEncryptionDesiredPreKeyMaterialSet);
      uint64_t v107 = sub_1003FFBB0(v55, v56, (uint64_t *)&v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, &v108, v47 + 4, v47 + 12);
      swift_bridgeObjectRelease(v56);
      sub_1003F6050((uint64_t)v8, type metadata accessor for IDSGroupEncryptionDesiredPreKeyMaterialSet);
      _os_log_impl( (void *)&_mh_execute_header,  v44,  (os_log_type_t)v102,  "%s.materialData: no public identity data",  v47,  0xCu);
      CFDataRef v57 = v103;
      swift_arrayDestroy(v103, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v57, -1LL, -1LL);
      swift_slowDealloc(v47, -1LL, -1LL);

      (*(void (**)(char *, uint64_t))(v105 + 8))(v20, v104);
    }

    else
    {
      sub_1003F6050((uint64_t)v8, type metadata accessor for IDSGroupEncryptionDesiredPreKeyMaterialSet);

      (*(void (**)(char *, uint64_t))(v42 + 8))(v20, v40);
    }
  }

  else
  {
    unint64_t v58 = v39;
    uint64_t v59 = sub_1003F5CB4((uint64_t *)&unk_1009B99C0);
    uint64_t inited = swift_initStackObject(v59, &v106);
    *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100718500;
    if (qword_1009C1010 != -1) {
      swift_once(&qword_1009C1010, sub_10040B558);
    }
    uint64_t v107 = qword_1009C7570;
    unint64_t v108 = *(void *)algn_1009C7578;
    swift_bridgeObjectRetain(*(void *)algn_1009C7578);
    AnyHashable.init<A>(_:)(&v107, &type metadata for String, &protocol witness table for String);
    *(void *)(inited + 96) = &type metadata for Data;
    CFDataRef v61 = v103;
    *(void *)(inited + 72) = v103;
    *(void *)(inited + 80) = v58;
    sub_1004028CC((uint64_t)v61, v58);
    if (qword_1009C1018 != -1) {
      swift_once(&qword_1009C1018, sub_10040B5A8);
    }
    uint64_t v107 = qword_1009C7580;
    unint64_t v108 = *(void *)algn_1009C7588;
    swift_bridgeObjectRetain(*(void *)algn_1009C7588);
    uint64_t v62 = AnyHashable.init<A>(_:)(&v107, &type metadata for String, &protocol witness table for String);
    uint64_t v63 = Date.init()(v62);
    double v64 = Date.timeIntervalSince1970.getter(v63);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v36, v31);
    *(void *)(inited + 16_Block_object_dispose(va, 8) = &type metadata for Double;
    *(double *)(inited + 144) = v64;
    if (qword_1009C1020 != -1) {
      swift_once(&qword_1009C1020, sub_10040B5F8);
    }
    uint64_t v107 = qword_1009C7590;
    unint64_t v108 = *(void *)algn_1009C7598;
    swift_bridgeObjectRetain(*(void *)algn_1009C7598);
    AnyHashable.init<A>(_:)(&v107, &type metadata for String, &protocol witness table for String);
    uint64_t v65 = type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
    uint64_t v66 = sub_1004D2F38(*(_BYTE *)(v38 + *(int *)(v65 + 32)));
    *(void *)(inited + 240) = &type metadata for Int;
    *(void *)(inited + 2swift_unknownObjectWeakDestroy(v0 + 16) = v66;
    unint64_t v67 = sub_10040C1F4(inited);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v67);
    id v69 = (id)JWEncodeDictionary(isa);

    uint64_t v70 = v101;
    if (v69)
    {
      uint64_t v71 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v69);
      uint64_t v73 = v72;

      uint64_t *v27 = v71;
      v27[1] = v73;
      swift_storeEnumTagMultiPayload(v27, v98, 3LL);
      uint64_t v74 = v99;
      sub_10040C73C(v99, (uint64_t)v27);
      sub_10040AD00((uint64_t)v103, v58);
      sub_1003F6050(v74, type metadata accessor for IDSGroupEncryptionMaterialData);
    }

    else
    {
      if (qword_1009C1028 != -1) {
        swift_once(&qword_1009C1028, sub_10040B774);
      }
      uint64_t v75 = v104;
      uint64_t v76 = sub_10040B7C0(v104, (uint64_t)qword_1009C75A0);
      uint64_t v77 = v97;
      (*(void (**)(char *, uint64_t, uint64_t))(v105 + 16))(v97, v76, v75);
      uint64_t v78 = sub_1003F5FC8(v102, v70, type metadata accessor for IDSGroupEncryptionDesiredPreKeyMaterialSet);
      uint64_t v79 = (os_log_s *)Logger.logObject.getter(v78);
      os_log_type_t v80 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v79, v80))
      {
        uint64_t v81 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        CFDataRef v82 = (CFDataRef)swift_slowAlloc(32LL, -1LL);
        uint64_t v83 = v70;
        CFDataRef v84 = v82;
        CFDataRef v109 = v82;
        unint64_t v102 = v58;
        *(_DWORD *)uint64_t v81 = 136315138;
        uint64_t v85 = v95;
        sub_1003F5FC8(v83, v95, type metadata accessor for IDSGroupEncryptionDesiredPreKeyMaterialSet);
        uint64_t v107 = 0LL;
        unint64_t v108 = 0xE000000000000000LL;
        _StringGuts.grow(_:)(62LL);
        v86._dispatch_queue_t object = (void *)0x800000010083E870LL;
        v86._countAndFlagsBits = 0xD00000000000003BLL;
        String.append(_:)(v86);
        uint64_t v87 = sub_10040A2B0( &qword_1009B91B8,  type metadata accessor for IDSGroupEncryptionPublicIdentity,  (uint64_t)&unk_10071D364);
        v88._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v65, v87);
        uint64_t v89 = v88._object;
        String.append(_:)(v88);
        swift_bridgeObjectRelease(v89);
        v90._countAndFlagsBits = 62LL;
        v90._dispatch_queue_t object = (void *)0xE100000000000000LL;
        String.append(_:)(v90);
        uint64_t v91 = v107;
        unint64_t v92 = v108;
        sub_1003F6050(v85, type metadata accessor for IDSGroupEncryptionDesiredPreKeyMaterialSet);
        uint64_t v107 = sub_1003FFBB0(v91, v92, (uint64_t *)&v109);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, &v108, v81 + 4, v81 + 12);
        swift_bridgeObjectRelease(v92);
        sub_1003F6050(v101, type metadata accessor for IDSGroupEncryptionDesiredPreKeyMaterialSet);
        _os_log_impl((void *)&_mh_execute_header, v79, v80, "%s.materialData: could not encode dictionary", v81, 0xCu);
        swift_arrayDestroy(v84, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v84, -1LL, -1LL);
        swift_slowDealloc(v81, -1LL, -1LL);

        sub_10040AD00((uint64_t)v103, v102);
        (*(void (**)(char *, uint64_t))(v105 + 8))(v97, v104);
      }

      else
      {
        sub_10040AD00((uint64_t)v103, v58);
        sub_1003F6050(v70, type metadata accessor for IDSGroupEncryptionDesiredPreKeyMaterialSet);

        (*(void (**)(char *, uint64_t))(v105 + 8))(v77, v75);
      }
    }
  }

  return v110;
}

unint64_t sub_10040C1F4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_1003F5CB4(&qword_1009B99D0);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  uint64_t v6 = v3 + 64;
  uint64_t v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10040DAA0(v7, (uint64_t)v16);
    unint64_t result = sub_10040C70C((uint64_t)v16);
    if ((v9 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v10 = v4[6] + 40 * result;
    __int128 v11 = v16[0];
    __int128 v12 = v16[1];
    *(void *)(v10 + 32) = v17;
    *(_OWORD *)uint64_t v10 = v11;
    *(_OWORD *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = v12;
    unint64_t result = (unint64_t)sub_10040DAE8(&v18, (_OWORD *)(v4[7] + 32 * result));
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    _DWORD v4[2] = v15;
    v7 += 72LL;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10040C320(unsigned int *a1, uint64_t a2)
{
  uint64_t v4 = *(int *)(type metadata accessor for IDSGroupEncryptionDesiredPreKeyMaterialSet(0LL) + 20);
  return sub_1004D3034((char *)a1 + v4, a2 + v4);
}

uint64_t sub_10040C384@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = 0;
  *(_BYTE *)(a2 + 4) = 3;
  uint64_t v4 = type metadata accessor for IDSGroupEncryptionDesiredPreKeyMaterialSet(0LL);
  return sub_1003F600C(a1, a2 + *(int *)(v4 + 20), type metadata accessor for IDSGroupEncryptionPublicIdentity);
}

uint64_t sub_10040C3D4()
{
  v0._dispatch_queue_t object = (void *)0x800000010083E870LL;
  v0._countAndFlagsBits = 0xD00000000000003BLL;
  String.append(_:)(v0);
  uint64_t v1 = type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
  uint64_t v2 = sub_10040A2B0( &qword_1009B91B8,  type metadata accessor for IDSGroupEncryptionPublicIdentity,  (uint64_t)&unk_10071D364);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v1, v2);
  dispatch_queue_t object = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(object);
  v5._countAndFlagsBits = 62LL;
  v5._dispatch_queue_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v5);
  return 0LL;
}

Swift::Int sub_10040C4A4()
{
  unint64_t v0 = sub_10040C97C();
  dispatch thunk of Hashable.hash(into:)(v4, &type metadata for IDSGroupEncryptionDesiredMaterialKind, v0);
  uint64_t v1 = type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
  uint64_t v2 = sub_10040A2B0( &qword_1009B91C8,  type metadata accessor for IDSGroupEncryptionPublicIdentity,  (uint64_t)&unk_10071D2FC);
  dispatch thunk of Hashable.hash(into:)(v4, v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_10040C554(uint64_t a1)
{
  unint64_t v2 = sub_10040C97C();
  dispatch thunk of Hashable.hash(into:)(a1, &type metadata for IDSGroupEncryptionDesiredMaterialKind, v2);
  uint64_t v3 = type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
  uint64_t v4 = sub_10040A2B0( &qword_1009B91C8,  type metadata accessor for IDSGroupEncryptionPublicIdentity,  (uint64_t)&unk_10071D2FC);
  return dispatch thunk of Hashable.hash(into:)(a1, v3, v4);
}

Swift::Int sub_10040C5F4(uint64_t a1)
{
  unint64_t v1 = sub_10040C97C();
  dispatch thunk of Hashable.hash(into:)(v5, &type metadata for IDSGroupEncryptionDesiredMaterialKind, v1);
  uint64_t v2 = type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
  uint64_t v3 = sub_10040A2B0( &qword_1009B91C8,  type metadata accessor for IDSGroupEncryptionPublicIdentity,  (uint64_t)&unk_10071D2FC);
  dispatch thunk of Hashable.hash(into:)(v5, v2, v3);
  return Hasher._finalize()();
}

uint64_t sub_10040C6A0(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  else {
    return 0LL;
  }
}

unint64_t sub_10040C70C(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_10040DAF8(a1, v4);
}

uint64_t sub_10040C73C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for IDSGroupEncryptionMaterialData(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v8, v9);
  __int128 v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *v3;
  uint64_t v13 = *(void *)(*v3 + 40LL);
  uint64_t v15 = sub_10040A2B0(&qword_1009B9288, v14, (uint64_t)&unk_10071C750);
  swift_bridgeObjectRetain(v12);
  uint64_t v29 = a2;
  uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v13, v6, v15);
  uint64_t v17 = -1LL << *(_BYTE *)(v12 + 32);
  unint64_t v18 = v16 & ~v17;
  if (((*(void *)(v12 + 56 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v18) & 1) != 0)
  {
    uint64_t v27 = v3;
    uint64_t v28 = a1;
    uint64_t v19 = ~v17;
    uint64_t v20 = *(void *)(v7 + 72);
    while (1)
    {
      sub_1003F5FC8( *(void *)(v12 + 48) + v20 * v18,  (uint64_t)v11,  type metadata accessor for IDSGroupEncryptionMaterialData);
      uint64_t v21 = sub_10040A2B0( &qword_1009B9290,  type metadata accessor for IDSGroupEncryptionMaterialData,  (uint64_t)&unk_10071C790);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v29, v6, v21);
      sub_1003F6050((uint64_t)v11, type metadata accessor for IDSGroupEncryptionMaterialData);
      if ((v22 & 1) != 0) {
        break;
      }
      unint64_t v18 = (v18 + 1) & v19;
      if (((*(void *)(v12 + 56 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v18) & 1) == 0)
      {
        swift_bridgeObjectRelease(v12);
        uint64_t v3 = v27;
        a1 = v28;
        goto LABEL_7;
      }
    }

    swift_bridgeObjectRelease(v12);
    sub_1003F6050(v29, type metadata accessor for IDSGroupEncryptionMaterialData);
    sub_1003F5FC8(*(void *)(*v27 + 48LL) + v20 * v18, v28, type metadata accessor for IDSGroupEncryptionMaterialData);
    return 0LL;
  }

  else
  {
    swift_bridgeObjectRelease(v12);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v24 = v29;
    sub_1003F5FC8(v29, (uint64_t)v11, type metadata accessor for IDSGroupEncryptionMaterialData);
    uint64_t v30 = *v3;
    void *v3 = 0x8000000000000000LL;
    sub_10040D354((uint64_t)v11, v18, isUniquelyReferenced_nonNull_native);
    uint64_t v25 = *v3;
    void *v3 = v30;
    swift_bridgeObjectRelease(v25);
    sub_1003F600C(v24, a1, type metadata accessor for IDSGroupEncryptionMaterialData);
    return 1LL;
  }

unint64_t sub_10040C97C()
{
  unint64_t result = qword_1009B91C0;
  if (!qword_1009B91C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10071C7E0, &type metadata for IDSGroupEncryptionDesiredMaterialKind);
    atomic_store(result, (unint64_t *)&qword_1009B91C0);
  }

  return result;
}

uint64_t sub_10040C9C0(uint64_t a1)
{
  uint64_t result = sub_10040A2B0( &qword_1009B91D0,  type metadata accessor for IDSGroupEncryptionDesiredPreKeyMaterialSet,  (uint64_t)&unk_100718554);
  *(void *)(a1 + _Block_object_dispose(va, 8) = result;
  return result;
}

uint64_t sub_10040C9FC()
{
  return sub_10040A2B0( &qword_1009B91D8,  type metadata accessor for IDSGroupEncryptionDesiredPreKeyMaterialSet,  (uint64_t)&unk_100718594);
}

void *sub_10040CA28(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v21 = *a2;
    void *v3 = *a2;
    uint64_t v3 = (void *)(v21 + ((v4 + 16LL) & ~(unint64_t)v4));
    swift_retain(v21);
  }

  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_BYTE *)(a1 + 4) = *((_BYTE *)a2 + 4);
    uint64_t v5 = *(int *)(a3 + 20);
    uint64_t v6 = (void *)(a1 + v5);
    uint64_t v7 = (uint64_t)a2 + v5;
    __n128 v8 = *(void **)((char *)a2 + v5);
    __n128 v9 = *(void **)((char *)a2 + v5 + 8);
    void *v6 = v8;
    v6[1] = v9;
    uint64_t v10 = (int *)type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
    uint64_t v11 = v10[6];
    uint64_t v12 = (char *)v6 + v11;
    uint64_t v13 = v7 + v11;
    uint64_t v14 = type metadata accessor for Date(0LL);
    uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16LL);
    id v16 = v8;
    id v17 = v9;
    v15(v12, v13, v14);
    uint64_t v18 = v10[7];
    uint64_t v19 = *(void **)(v7 + v18);
    *(void *)((char *)v6 + v1_Block_object_dispose(va, 8) = v19;
    *((_BYTE *)v6 + v10[8]) = *(_BYTE *)(v7 + v10[8]);
    id v20 = v19;
  }

  return v3;
}

void sub_10040CB18(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (id *)(a1 + *(int *)(a2 + 20));

  uint64_t v3 = type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
  int v4 = (char *)v2 + *(int *)(v3 + 24);
  uint64_t v5 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

uint64_t sub_10040CB88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (void *)(a1 + v4);
  uint64_t v6 = a2 + v4;
  uint64_t v7 = *(void **)(a2 + v4);
  __n128 v8 = *(void **)(a2 + v4 + 8);
  void *v5 = v7;
  v5[1] = v8;
  __n128 v9 = (int *)type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
  uint64_t v10 = v9[6];
  uint64_t v11 = (char *)v5 + v10;
  uint64_t v12 = v6 + v10;
  uint64_t v13 = type metadata accessor for Date(0LL);
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16LL);
  id v15 = v7;
  id v16 = v8;
  v14(v11, v12, v13);
  uint64_t v17 = v9[7];
  uint64_t v18 = *(void **)(v6 + v17);
  *(void *)((char *)v5 + v17) = v18;
  *((_BYTE *)v5 + v9[8]) = *(_BYTE *)(v6 + v9[8]);
  id v19 = v18;
  return a1;
}

uint64_t sub_10040CC4C(uint64_t a1, int *a2, uint64_t a3)
{
  int v4 = *a2;
  *(_BYTE *)(a1 + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)a1 = v4;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (void *)(a1 + v5);
  uint64_t v7 = (uint64_t)a2 + v5;
  __n128 v8 = *(void **)(a1 + v5);
  __n128 v9 = *(void **)((char *)a2 + v5);
  void *v6 = v9;
  id v10 = v9;

  uint64_t v11 = *(void **)(v7 + 8);
  uint64_t v12 = (void *)v6[1];
  v6[1] = v11;
  id v13 = v11;

  uint64_t v14 = (int *)type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
  uint64_t v15 = v14[6];
  id v16 = (char *)v6 + v15;
  uint64_t v17 = v7 + v15;
  uint64_t v18 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 24LL))(v16, v17, v18);
  uint64_t v19 = v14[7];
  id v20 = *(void **)(v7 + v19);
  uint64_t v21 = *(void **)((char *)v6 + v19);
  *(void *)((char *)v6 + v19) = v20;
  id v22 = v20;

  *((_BYTE *)v6 + v14[8]) = *(_BYTE *)(v7 + v14[8]);
  return a1;
}

uint64_t sub_10040CD1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  *(_OWORD *)(a1 + v4) = *(_OWORD *)(a2 + v4);
  uint64_t v7 = (int *)type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
  uint64_t v8 = v7[6];
  uint64_t v9 = v5 + v8;
  uint64_t v10 = v6 + v8;
  uint64_t v11 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32LL))(v9, v10, v11);
  *(void *)(v5 + v7[7]) = *(void *)(v6 + v7[7]);
  *(_BYTE *)(v5 + v7[8]) = *(_BYTE *)(v6 + v7[8]);
  return a1;
}

uint64_t sub_10040CDC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (void *)(a1 + v4);
  uint64_t v6 = (void *)(a2 + v4);
  uint64_t v7 = *(void **)(a1 + v4);
  void *v5 = *v6;

  uint64_t v8 = (void *)v5[1];
  v5[1] = v6[1];

  uint64_t v9 = (int *)type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
  uint64_t v10 = v9[6];
  uint64_t v11 = (char *)v5 + v10;
  uint64_t v12 = (char *)v6 + v10;
  uint64_t v13 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 40LL))(v11, v12, v13);
  uint64_t v14 = v9[7];
  uint64_t v15 = *(void **)((char *)v5 + v14);
  *(void *)((char *)v5 + v14) = *(void *)((char *)v6 + v14);

  *((_BYTE *)v5 + v9[8]) = *((_BYTE *)v6 + v9[8]);
  return a1;
}

uint64_t sub_10040CE84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10040CE90);
}

uint64_t sub_10040CE90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 252)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 4);
    if (v4 > 3) {
      return (v4 ^ 0xFF) + 1;
    }
    else {
      return 0LL;
    }
  }

  else
  {
    uint64_t v8 = type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 20),  a2,  v8);
  }

uint64_t sub_10040CF04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10040CF10);
}

uint64_t sub_10040CF10(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 252)
  {
    *(_BYTE *)(result + 4) = -(char)a2;
  }

  else
  {
    uint64_t v7 = type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 20),  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_10040CF80(uint64_t a1)
{
  v4[0] = &unk_100718620;
  uint64_t result = type metadata accessor for IDSGroupEncryptionPublicIdentity(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_10040CFF4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for IDSGroupEncryptionMaterialData(0LL);
  uint64_t v40 = *(void *)(v4 - 8);
  uint64_t v41 = v4;
  __chkstk_darwin(v5, v6);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_1003F5CB4(&qword_1009B9298);
  uint64_t v10 = static _SetStorage.resize(original:capacity:move:)(v9, a1, 1LL);
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16)) {
    goto LABEL_39;
  }
  uint64_t v37 = v2;
  uint64_t v12 = 1LL << *(_BYTE *)(v9 + 32);
  uint64_t v13 = *(void *)(v9 + 56);
  unint64_t v39 = (void *)(v9 + 56);
  if (v12 < 64) {
    uint64_t v14 = ~(-1LL << v12);
  }
  else {
    uint64_t v14 = -1LL;
  }
  unint64_t v15 = v14 & v13;
  int64_t v38 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v16 = v10 + 56;
  uint64_t result = swift_retain(v9);
  int64_t v18 = 0LL;
  while (1)
  {
    if (v15)
    {
      unint64_t v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v21 = v20 | (v18 << 6);
      goto LABEL_26;
    }

    int64_t v22 = v18 + 1;
    if (__OFADD__(v18, 1LL))
    {
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      return result;
    }

    if (v22 >= v38) {
      goto LABEL_35;
    }
    unint64_t v23 = v39[v22];
    ++v18;
    if (!v23)
    {
      int64_t v18 = v22 + 1;
      if (v22 + 1 >= v38) {
        goto LABEL_35;
      }
      unint64_t v23 = v39[v18];
      if (!v23)
      {
        int64_t v18 = v22 + 2;
        if (v22 + 2 >= v38) {
          goto LABEL_35;
        }
        unint64_t v23 = v39[v18];
        if (!v23) {
          break;
        }
      }
    }

uint64_t sub_10040D354(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v33 = a1;
  uint64_t v6 = type metadata accessor for IDSGroupEncryptionMaterialData(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v12 = *(void *)(*v3 + 16);
  unint64_t v13 = *(void *)(*v3 + 24);
  uint64_t v31 = v7;
  unint64_t v32 = v3;
  if (v13 > v12 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  uint64_t v14 = v12 + 1;
  if ((a3 & 1) != 0)
  {
    sub_10040CFF4(v14);
  }

  else
  {
    if (v13 > v12)
    {
      sub_10040D55C();
      goto LABEL_12;
    }

    sub_10040D77C(v14);
  }

  uint64_t v15 = *v3;
  uint64_t v16 = *(void *)(*v3 + 40);
  uint64_t v17 = sub_10040A2B0( &qword_1009B9288,  type metadata accessor for IDSGroupEncryptionMaterialData,  (uint64_t)&unk_10071C750);
  uint64_t v18 = dispatch thunk of Hashable._rawHashValue(seed:)(v16, v6, v17);
  uint64_t v19 = -1LL << *(_BYTE *)(v15 + 32);
  a2 = v18 & ~v19;
  if (((*(void *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v20 = ~v19;
    uint64_t v21 = *(void *)(v7 + 72);
    do
    {
      sub_1003F5FC8( *(void *)(v15 + 48) + v21 * a2,  (uint64_t)v11,  type metadata accessor for IDSGroupEncryptionMaterialData);
      uint64_t v22 = sub_10040A2B0( &qword_1009B9290,  type metadata accessor for IDSGroupEncryptionMaterialData,  (uint64_t)&unk_10071C790);
      char v23 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v33, v6, v22);
      sub_1003F6050((uint64_t)v11, type metadata accessor for IDSGroupEncryptionMaterialData);
      if ((v23 & 1) != 0) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v20;
    }

    while (((*(void *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0);
  }

void *sub_10040D55C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(type metadata accessor for IDSGroupEncryptionMaterialData(0LL) - 8);
  __chkstk_darwin(v3, v4);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1003F5CB4(&qword_1009B9298);
  uint64_t v7 = *v0;
  uint64_t v8 = static _SetStorage.copy(original:)(*v0);
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
    uint64_t result = (void *)swift_release(v7);
LABEL_30:
    uint64_t *v1 = v9;
    return result;
  }

  uint64_t v26 = v1;
  uint64_t result = (void *)(v8 + 56);
  uint64_t v11 = v7 + 56;
  unint64_t v12 = (unint64_t)((1LL << *(_BYTE *)(v9 + 32)) + 63) >> 6;
  int64_t v14 = 0LL;
  *(void *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v7 + 16);
  uint64_t v15 = 1LL << *(_BYTE *)(v7 + 32);
  uint64_t v16 = -1LL;
  if (v15 < 64) {
    uint64_t v16 = ~(-1LL << v15);
  }
  unint64_t v17 = v16 & *(void *)(v7 + 56);
  int64_t v18 = (unint64_t)(v15 + 63) >> 6;
  while (1)
  {
    if (v17)
    {
      unint64_t v19 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v20 = v19 | (v14 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
      __break(1u);
      goto LABEL_32;
    }

    if (v22 >= v18) {
      goto LABEL_28;
    }
    unint64_t v23 = *(void *)(v11 + 8 * v22);
    ++v14;
    if (!v23)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v18) {
        goto LABEL_28;
      }
      unint64_t v23 = *(void *)(v11 + 8 * v14);
      if (!v23)
      {
        int64_t v14 = v22 + 2;
        if (v22 + 2 >= v18) {
          goto LABEL_28;
        }
        unint64_t v23 = *(void *)(v11 + 8 * v14);
        if (!v23) {
          break;
        }
      }
    }

uint64_t sub_10040D77C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for IDSGroupEncryptionMaterialData(0LL);
  uint64_t v39 = *(void *)(v4 - 8);
  uint64_t v40 = v4;
  __chkstk_darwin(v5, v6);
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_1003F5CB4(&qword_1009B9298);
  uint64_t v10 = static _SetStorage.resize(original:capacity:move:)(v9, a1, 0LL);
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16))
  {
    uint64_t result = swift_release(v9);
LABEL_37:
    *uint64_t v2 = v11;
    return result;
  }

  uint64_t v12 = 1LL << *(_BYTE *)(v9 + 32);
  uint64_t v13 = *(void *)(v9 + 56);
  uint64_t v36 = v2;
  uint64_t v37 = v9 + 56;
  if (v12 < 64) {
    uint64_t v14 = ~(-1LL << v12);
  }
  else {
    uint64_t v14 = -1LL;
  }
  unint64_t v15 = v14 & v13;
  int64_t v38 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v16 = v10 + 56;
  uint64_t result = swift_retain(v9);
  int64_t v18 = 0LL;
  while (1)
  {
    if (v15)
    {
      unint64_t v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v21 = v20 | (v18 << 6);
      goto LABEL_26;
    }

    int64_t v22 = v18 + 1;
    if (__OFADD__(v18, 1LL))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }

    if (v22 >= v38) {
      goto LABEL_35;
    }
    unint64_t v23 = *(void *)(v37 + 8 * v22);
    ++v18;
    if (!v23)
    {
      int64_t v18 = v22 + 1;
      if (v22 + 1 >= v38) {
        goto LABEL_35;
      }
      unint64_t v23 = *(void *)(v37 + 8 * v18);
      if (!v23)
      {
        int64_t v18 = v22 + 2;
        if (v22 + 2 >= v38) {
          goto LABEL_35;
        }
        unint64_t v23 = *(void *)(v37 + 8 * v18);
        if (!v23) {
          break;
        }
      }
    }

uint64_t sub_10040DAA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1003F5CB4(&qword_1009B92A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

_OWORD *sub_10040DAE8(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

unint64_t sub_10040DAF8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0)
  {
    uint64_t v6 = ~v3;
    do
    {
      sub_10040DBBC(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      char v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_10040DBF8((uint64_t)v9);
      if ((v7 & 1) != 0) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v6;
    }

    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0);
  }

  return v4;
}

uint64_t sub_10040DBBC(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_10040DBF8(uint64_t a1)
{
  return a1;
}

uint64_t *sub_10040DC2C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    uint64_t v4 = swift_slowAlloc(*(void *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }

  return a2;
}

BOOL sub_10040DC6C(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

uint64_t sub_10040DC8C()
{
  uint64_t v1 = (unsigned __int8 *)(v0 + OBJC_IVAR____TtC17identityservicesd34IDSGroupEncryptionControllerMember_kind);
  swift_beginAccess(v0 + OBJC_IVAR____TtC17identityservicesd34IDSGroupEncryptionControllerMember_kind, v3, 0LL, 0LL);
  return *v1;
}

uint64_t sub_10040DCD0(char a1)
{
  char v2 = a1 & 1;
  uint64_t v3 = (_BYTE *)(v1 + OBJC_IVAR____TtC17identityservicesd34IDSGroupEncryptionControllerMember_kind);
  uint64_t result = swift_beginAccess( v1 + OBJC_IVAR____TtC17identityservicesd34IDSGroupEncryptionControllerMember_kind,  v5,  1LL,  0LL);
  _BYTE *v3 = v2;
  return result;
}

void *sub_10040DD20(uint64_t a1)
{
  return &j__swift_endAccess;
}

uint64_t sub_10040DDD0()
{
  uint64_t v1 = v0;
  *(void *)&v12[1] = 0LL;
  unint64_t v13 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(19LL);
  v2._countAndFlagsBits = 0x207265626D654D3CLL;
  v2._dispatch_queue_t object = (void *)0xE800000000000000LL;
  String.append(_:)(v2);
  id v3 = *(id *)((char *)v0 + OBJC_IVAR____TtC17identityservicesd34IDSGroupEncryptionControllerMember_uri);
  id v4 = [v3 description];
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  char v7 = v6;

  v8._countAndFlagsBits = v5;
  v8._dispatch_queue_t object = v7;
  String.append(_:)(v8);

  swift_bridgeObjectRelease(v7);
  v9._countAndFlagsBits = 0x3A646E696B20LL;
  v9._dispatch_queue_t object = (void *)0xE600000000000000LL;
  String.append(_:)(v9);
  *(void *)uint64_t v12 = (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x60LL))() & 1;
  _print_unlocked<A, B>(_:_:)( v12,  &v12[1],  &type metadata for IDSGroupEncryptionControllerParticipantType,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v10._countAndFlagsBits = 62LL;
  v10._dispatch_queue_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v10);
  return *(void *)&v12[1];
}

uint64_t sub_10040DF0C(uint64_t a1)
{
  if (!v10)
  {
    sub_10040E008((uint64_t)v9);
    goto LABEL_5;
  }

  uint64_t v2 = type metadata accessor for IDSGroupEncryptionControllerMember();
  if ((swift_dynamicCast(&v8, v9, (char *)&type metadata for Any + 8, v2, 6LL) & 1) == 0)
  {
LABEL_5:
    char v6 = 0;
    return v6 & 1;
  }

  id v3 = v8;
  sub_10040E068();
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC17identityservicesd34IDSGroupEncryptionControllerMember_uri);
  id v5 = *(id *)&v3[OBJC_IVAR____TtC17identityservicesd34IDSGroupEncryptionControllerMember_uri];
  char v6 = static NSObject.== infix(_:_:)(v5, v4);

  return v6 & 1;
}

uint64_t sub_10040DFC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1003F5CB4(&qword_1009B92B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10040E008(uint64_t a1)
{
  uint64_t v2 = sub_1003F5CB4(&qword_1009B92B8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for IDSGroupEncryptionControllerMember()
{
  return objc_opt_self(&OBJC_CLASS____TtC17identityservicesd34IDSGroupEncryptionControllerMember);
}

unint64_t sub_10040E068()
{
  unint64_t result = qword_1009B92C0;
  if (!qword_1009B92C0)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSObject);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1009B92C0);
  }

  return result;
}

id sub_10040E118(uint64_t a1, char a2)
{
  char v4 = a2 & 1;
  id v5 = (char *)objc_allocWithZone(v2);
  char v6 = &v5[OBJC_IVAR____TtC17identityservicesd34IDSGroupEncryptionControllerMember_kind];
  char *v6 = 1;
  *(void *)&v5[OBJC_IVAR____TtC17identityservicesd34IDSGroupEncryptionControllerMember_uri] = a1;
  swift_beginAccess(v6, v9, 1LL, 0LL);
  char *v6 = v4;
  v8.receiver = v5;
  v8.super_class = v2;
  return objc_msgSendSuper2(&v8, "init");
}

uint64_t sub_10040E1F0()
{
  return (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x60LL))() & 1;
}

uint64_t sub_10040E280(char a1)
{
  return (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x68LL))(a1 & 1);
}

uint64_t (*sub_10040E2A0(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0x60LL))() & 1;
  return sub_10040E2F0;
}

uint64_t sub_10040E2F0(uint64_t a1)
{
  return (*(uint64_t (**)(void))((swift_isaMask & **(void **)a1) + 0x68LL))(*(unsigned __int8 *)(a1 + 8));
}

void sub_10040E32C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  id v6 = v3;
  swift_bridgeObjectRetain_n(a3, 2LL);
  char v7 = v6;
  oslog = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v8))
  {
    uint64_t v9 = swift_slowAlloc(32LL, -1LL);
    uint64_t v10 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v11 = swift_slowAlloc(64LL, -1LL);
    uint64_t v20 = v11;
    *(_DWORD *)uint64_t v9 = 136315650;
    swift_bridgeObjectRetain(a3);
    uint64_t v19 = sub_1003FFBB0(a2, a3, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease_n(a3, 3LL);
    *(_WORD *)(v9 + 12) = 2112;
    uint64_t v12 = *(void **)((char *)v7 + OBJC_IVAR____TtC17identityservicesd34IDSGroupEncryptionControllerMember_uri);
    uint64_t v19 = (uint64_t)v12;
    id v13 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v9 + 14, v9 + 22);
    *uint64_t v10 = v12;

    *(_WORD *)(v9 + 22) = 2080;
    LOBYTE(v19) = (*(uint64_t (**)(void))((swift_isaMask & *v7) + 0x60LL))() & 1;
    uint64_t v14 = String.init<A>(describing:)(&v19, &type metadata for IDSGroupEncryptionControllerParticipantType);
    unint64_t v16 = v15;
    uint64_t v19 = sub_1003FFBB0(v14, v15, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v9 + 24, v9 + 32);

    swift_bridgeObjectRelease(v16);
    _os_log_impl((void *)&_mh_execute_header, oslog, v8, "%sMember: %@; kind=%s", (uint8_t *)v9, 0x20u);
    uint64_t v17 = sub_1003F5CB4(&qword_1009B92C8);
    swift_arrayDestroy(v10, 1LL, v17);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_arrayDestroy(v11, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a3, 2LL);
  }

id sub_10040E604()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for IDSGroupEncryptionControllerMember();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10040E644()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **v0) + 0x98LL))();
}

unint64_t sub_10040E680()
{
  unint64_t result = qword_1009B92D0;
  if (!qword_1009B92D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10071864C, &type metadata for IDSGroupEncryptionControllerParticipantType);
    atomic_store(result, (unint64_t *)&qword_1009B92D0);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for IDSGroupEncryptionControllerParticipantType( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_10040E710 + 4 * byte_100718645[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10040E744 + 4 * byte_100718640[v4]))();
}

uint64_t sub_10040E744(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10040E74C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10040E754LL);
  }
  return result;
}

uint64_t sub_10040E760(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10040E768LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_10040E76C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10040E774(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IDSGroupEncryptionControllerParticipantType()
{
  return &type metadata for IDSGroupEncryptionControllerParticipantType;
}

uint64_t type metadata accessor for IDSGroupEncryptionDesiredKeyValueMaterialSet(uint64_t a1)
{
  uint64_t result = qword_1009C15D0;
  if (!qword_1009C15D0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for IDSGroupEncryptionDesiredKeyValueMaterialSet);
  }
  return result;
}

uint64_t sub_10040E7DC()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10040DC2C(v0, qword_1009C75B8);
  sub_10040B7C0(v0, (uint64_t)qword_1009C75B8);
  return sub_10048ADB4(2u);
}

uint64_t sub_10040E828(uint64_t a1, uint64_t a2)
{
  char v4 = *(_BYTE *)(v2 + 4);
  LODWORD(v39) = *(_DWORD *)v2;
  int v3 = v39;
  BYTE4(v39) = v4;
  unint64_t v5 = sub_10040C97C();
  dispatch thunk of Hashable.hash(into:)(v37, &type metadata for IDSGroupEncryptionDesiredMaterialKind, v5);
  uint64_t v6 = *(void *)(v2 + 8);
  unint64_t v7 = *(void *)(v2 + 16);
  sub_1004028CC(v6, v7);
  Data.hash(into:)(v37, v6, v7);
  sub_100402A84(v6, v7);
  uint64_t v8 = type metadata accessor for IDSGroupEncryptionDesiredKeyValueMaterialSet(0LL);
  uint64_t v9 = type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
  uint64_t v10 = sub_10040A2B0( &qword_1009B91C8,  type metadata accessor for IDSGroupEncryptionPublicIdentity,  (uint64_t)&unk_10071D2FC);
  dispatch thunk of Hashable.hash(into:)(v37, v9, v10);
  Swift::UInt64 v11 = *(void *)(v2 + *(int *)(v8 + 28));
  Hasher._combine(_:)(v11);
  uint64_t v13 = type metadata accessor for UUID(0LL, v12);
  uint64_t v14 = sub_10040A2B0( &qword_1009B9300,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v37, v13, v14);
  __int128 v41 = v37[2];
  __int128 v42 = v37[3];
  uint64_t v43 = v38;
  __int128 v39 = v37[0];
  __int128 v40 = v37[1];
  Hasher.finalize()();
  uint64_t v35 = 0LL;
  unint64_t v36 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(76LL);
  v15._dispatch_queue_t object = (void *)0x800000010083EA30LL;
  v15._countAndFlagsBits = 0xD000000000000010LL;
  String.append(_:)(v15);
  v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  dispatch_queue_t object = v16._object;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(object);
  v18._countAndFlagsBits = 0xD000000000000012LL;
  v18._dispatch_queue_t object = (void *)0x800000010083EA50LL;
  String.append(_:)(v18);
  int v34 = HIDWORD(v11);
  v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
  uint64_t v20 = v19._object;
  String.append(_:)(v19);
  swift_bridgeObjectRelease(v20);
  v21._countAndFlagsBits = 0xD000000000000013LL;
  v21._dispatch_queue_t object = (void *)0x800000010083EA70LL;
  String.append(_:)(v21);
  uint64_t v22 = sub_10040A2B0( &qword_1009B91B8,  type metadata accessor for IDSGroupEncryptionPublicIdentity,  (uint64_t)&unk_10071D364);
  v23._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v9, v22);
  int64_t v24 = v23._object;
  String.append(_:)(v23);
  swift_bridgeObjectRelease(v24);
  v25._countAndFlagsBits = 0x3A79656B2029LL;
  v25._dispatch_queue_t object = (void *)0xE600000000000000LL;
  String.append(_:)(v25);
  int v33 = v3;
  LOBYTE(v34) = v4;
  v26._countAndFlagsBits = String.init<A>(describing:)(&v33, &type metadata for IDSGroupEncryptionDesiredMaterialKind);
  uint64_t v27 = v26._object;
  String.append(_:)(v26);
  swift_bridgeObjectRelease(v27);
  v28._countAndFlagsBits = 0x3A6174616420LL;
  v28._dispatch_queue_t object = (void *)0xE600000000000000LL;
  String.append(_:)(v28);
  sub_1004028CC(v6, v7);
  v29._countAndFlagsBits = Data.description.getter(v6, v7);
  unint64_t v30 = v29._object;
  String.append(_:)(v29);
  swift_bridgeObjectRelease(v30);
  sub_100402A84(v6, v7);
  v31._countAndFlagsBits = 62LL;
  v31._dispatch_queue_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v31);
  return v35;
}

id sub_10040EB60()
{
  uint64_t v1 = *((void *)v0 + 1);
  unint64_t v2 = *((void *)v0 + 2);
  if (*((_BYTE *)v0 + 4) == 2) {
    uint64_t v3 = *v0;
  }
  else {
    uint64_t v3 = 0LL;
  }
  uint64_t v4 = type metadata accessor for IDSGroupEncryptionDesiredKeyValueMaterialSet(0LL);
  unint64_t v5 = (char *)v0 + *(int *)(v4 + 24);
  uint64_t v6 = *(void **)&v5[*(int *)(type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL) + 28)];
  uint64_t v7 = *(void *)((char *)v0 + *(int *)(v4 + 28));
  id v8 = objc_allocWithZone((Class)&OBJC_CLASS___IDSServerDesiredEncryptedDataSet);
  sub_1004028CC(v1, v2);
  id v9 = v6;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  id v11 = [v8 initWithEncryptedData:isa type:v3 forPublicIdentity:v9 forParticipantID:v7];

  sub_100402A84(v1, v2);
  return v11;
}

void *sub_10040EC40(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v90 = type metadata accessor for IDSGroupEncryptionDesiredKeyValueMaterialSet(0LL);
  __chkstk_darwin(v4, v5);
  uint64_t v7 = (char *)&v86 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8, v9);
  uint64_t v94 = (uint64_t)&v86 - v10;
  __chkstk_darwin(v11, v12);
  uint64_t v92 = (uint64_t)&v86 - v13;
  __chkstk_darwin(v14, v15);
  uint64_t v93 = (uint64_t)&v86 - v16;
  uint64_t v91 = type metadata accessor for IDSGroupEncryptionMaterialData(0LL);
  __chkstk_darwin(v17, v18);
  uint64_t v95 = (uint64_t)&v86 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v20, v21);
  Swift::String v23 = (char *)&v86 - v22;
  __chkstk_darwin(v24, v25);
  uint64_t v27 = (char *)&v86 - v26;
  __chkstk_darwin(v28, v29);
  Swift::String v31 = (char *)&v86 - v30;
  uint64_t v32 = sub_1003F5CB4(&qword_1009B9308);
  __chkstk_darwin(v33, v34);
  unint64_t v36 = (unint64_t *)((char *)&v86 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v37, v38);
  __int128 v40 = (char *)&v86 - v39;
  uint64_t v99 = &_swiftEmptySetSingleton;
  sub_10040F410(a1, (os_log_t *)((char *)&v86 - v39));
  uint64_t v96 = v40;
  sub_100410FD0((uint64_t)v40, (uint64_t)v36, &qword_1009B9308);
  if (swift_getEnumCaseMultiPayload(v36, v32) == 1)
  {
    unint64_t v41 = *v36;
    if (qword_1009C1340 != -1) {
      swift_once(&qword_1009C1340, sub_10040E7DC);
    }
    uint64_t v42 = type metadata accessor for Logger(0LL);
    sub_10040B7C0(v42, (uint64_t)qword_1009C75B8);
    sub_1003F5FC8(v2, (uint64_t)v7, type metadata accessor for IDSGroupEncryptionDesiredKeyValueMaterialSet);
    sub_10040F920(v41);
    unint64_t v43 = sub_10040F920(v41);
    uint64_t v44 = (os_log_s *)Logger.logObject.getter(v43);
    os_log_type_t v45 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v44, v45))
    {
      uint64_t v46 = swift_slowAlloc(22LL, -1LL);
      uint64_t v47 = swift_slowAlloc(64LL, -1LL);
      uint64_t v98 = v47;
      *(_DWORD *)uint64_t v46 = 136315394;
      char v48 = v7[4];
      LODWORD(v97) = *(_DWORD *)v7;
      BYTE4(v97) = v48;
      uint64_t v49 = String.init<A>(describing:)(&v97, &type metadata for IDSGroupEncryptionDesiredMaterialKind);
      unint64_t v51 = v50;
      uint64_t v97 = sub_1003FFBB0(v49, v50, &v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98, v46 + 4, v46 + 12);
      swift_bridgeObjectRelease(v51);
      sub_1003F6050((uint64_t)v7, type metadata accessor for IDSGroupEncryptionDesiredKeyValueMaterialSet);
      *(_WORD *)(v46 + 12) = 2080;
      uint64_t v97 = v41;
      sub_10040F920(v41);
      uint64_t v52 = String.init<A>(describing:)(&v97, &type metadata for IDSGroupEncryptionDesiredKeyValueMaterialSet.DataError);
      unint64_t v54 = v53;
      uint64_t v97 = sub_1003FFBB0(v52, v53, &v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98, v46 + 14, v46 + 22);
      swift_bridgeObjectRelease(v54);
      sub_10040F930(v41);
      sub_10040F930(v41);
      _os_log_impl( (void *)&_mh_execute_header,  v44,  v45,  "materialData: could not get material data for material %s: %s",  (uint8_t *)v46,  0x16u);
      swift_arrayDestroy(v47, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v47, -1LL, -1LL);
      swift_slowDealloc(v46, -1LL, -1LL);
    }

    else
    {

      sub_10040F930(v41);
      sub_10040F930(v41);
      sub_1003F6050((uint64_t)v7, type metadata accessor for IDSGroupEncryptionDesiredKeyValueMaterialSet);
    }

    sub_10040F930(v41);
  }

  else
  {
    sub_1003F600C((uint64_t)v36, (uint64_t)v31, type metadata accessor for IDSGroupEncryptionMaterialData);
    sub_1003F5FC8((uint64_t)v31, (uint64_t)v23, type metadata accessor for IDSGroupEncryptionMaterialData);
    sub_10040C73C((uint64_t)v27, (uint64_t)v23);
    sub_1003F6050((uint64_t)v27, type metadata accessor for IDSGroupEncryptionMaterialData);
    uint64_t v55 = v31;
    if (qword_1009C1340 != -1) {
      swift_once(&qword_1009C1340, sub_10040E7DC);
    }
    uint64_t v56 = type metadata accessor for Logger(0LL);
    sub_10040B7C0(v56, (uint64_t)qword_1009C75B8);
    uint64_t v57 = v93;
    sub_1003F5FC8(v2, v93, type metadata accessor for IDSGroupEncryptionDesiredKeyValueMaterialSet);
    uint64_t v58 = v92;
    sub_1003F5FC8(v2, v92, type metadata accessor for IDSGroupEncryptionDesiredKeyValueMaterialSet);
    uint64_t v59 = v94;
    sub_1003F5FC8(v2, v94, type metadata accessor for IDSGroupEncryptionDesiredKeyValueMaterialSet);
    uint64_t v60 = (uint64_t)v31;
    uint64_t v61 = v95;
    uint64_t v62 = sub_1003F5FC8(v60, v95, type metadata accessor for IDSGroupEncryptionMaterialData);
    uint64_t v63 = (os_log_s *)Logger.logObject.getter(v62);
    os_log_type_t v64 = static os_log_type_t.info.getter();
    int v65 = v64;
    if (os_log_type_enabled(v63, v64))
    {
      uint64_t v66 = swift_slowAlloc(42LL, -1LL);
      uint64_t v88 = swift_slowAlloc(96LL, -1LL);
      uint64_t v98 = v88;
      *(_DWORD *)uint64_t v66 = 136315906;
      int v87 = v65;
      char v67 = *(_BYTE *)(v57 + 4);
      LODWORD(v97) = *(_DWORD *)v57;
      BYTE4(v97) = v67;
      uint64_t v89 = (uint64_t)v55;
      uint64_t v68 = String.init<A>(describing:)(&v97, &type metadata for IDSGroupEncryptionDesiredMaterialKind);
      os_log_t v86 = v63;
      unint64_t v70 = v69;
      uint64_t v97 = sub_1003FFBB0(v68, v69, &v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98, v66 + 4, v66 + 12);
      swift_bridgeObjectRelease(v70);
      sub_1003F6050(v57, type metadata accessor for IDSGroupEncryptionDesiredKeyValueMaterialSet);
      *(_WORD *)(v66 + 12) = 2048;
      uint64_t v71 = *(void *)(v58 + *(int *)(v90 + 28));
      sub_1003F6050(v58, type metadata accessor for IDSGroupEncryptionDesiredKeyValueMaterialSet);
      uint64_t v97 = v71;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98, v66 + 14, v66 + 22);
      uint64_t v72 = (uint64_t)v27;
      *(_WORD *)(v66 + 22) = 2080;
      uint64_t v73 = v59;
      uint64_t v74 = type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
      uint64_t v75 = sub_10040A2B0( &qword_1009B91B8,  type metadata accessor for IDSGroupEncryptionPublicIdentity,  (uint64_t)&unk_10071D364);
      uint64_t v76 = dispatch thunk of CustomStringConvertible.description.getter(v74, v75);
      unint64_t v78 = v77;
      uint64_t v97 = sub_1003FFBB0(v76, v77, &v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98, v66 + 24, v66 + 32);
      swift_bridgeObjectRelease(v78);
      sub_1003F6050(v73, type metadata accessor for IDSGroupEncryptionDesiredKeyValueMaterialSet);
      *(_WORD *)(v66 + 32) = 2080;
      sub_1003F5FC8(v61, v72, type metadata accessor for IDSGroupEncryptionMaterialData);
      uint64_t v79 = String.init<A>(describing:)(v72, v91);
      unint64_t v81 = v80;
      uint64_t v97 = sub_1003FFBB0(v79, v80, &v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98, v66 + 34, v66 + 42);
      swift_bridgeObjectRelease(v81);
      sub_1003F6050(v61, type metadata accessor for IDSGroupEncryptionMaterialData);
      os_log_t v82 = v86;
      _os_log_impl( (void *)&_mh_execute_header,  v86,  (os_log_type_t)v87,  "materialData: encrypted kv %s for participantID: %llu; for public identity: %s, data: %s",
        (uint8_t *)v66,
        0x2Au);
      uint64_t v83 = v88;
      swift_arrayDestroy(v88, 3LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v83, -1LL, -1LL);
      swift_slowDealloc(v66, -1LL, -1LL);

      uint64_t v84 = v89;
    }

    else
    {
      sub_1003F6050(v58, type metadata accessor for IDSGroupEncryptionDesiredKeyValueMaterialSet);

      sub_1003F6050(v61, type metadata accessor for IDSGroupEncryptionMaterialData);
      sub_1003F6050(v59, type metadata accessor for IDSGroupEncryptionDesiredKeyValueMaterialSet);
      sub_1003F6050(v57, type metadata accessor for IDSGroupEncryptionDesiredKeyValueMaterialSet);
      uint64_t v84 = (uint64_t)v55;
    }

    sub_1003F6050(v84, type metadata accessor for IDSGroupEncryptionMaterialData);
  }

  sub_10040F940((uint64_t)v96);
  return v99;
}

void sub_10040F410(void *a1@<X2>, void *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for IDSGroupEncryptionDesiredKeyValueMaterialSet(0LL);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_1009C1340 != -1) {
    swift_once(&qword_1009C1340, sub_10040E7DC);
  }
  uint64_t v11 = type metadata accessor for Logger(0LL);
  sub_10040B7C0(v11, (uint64_t)qword_1009C75B8);
  uint64_t v12 = sub_1003F5FC8(v2, (uint64_t)v10, type metadata accessor for IDSGroupEncryptionDesiredKeyValueMaterialSet);
  uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc(22LL, -1LL);
    uint64_t v59 = (uint64_t)a2;
    uint64_t v16 = v15;
    uint64_t v58 = swift_slowAlloc(64LL, -1LL);
    uint64_t v61 = v58;
    *(_DWORD *)uint64_t v16 = 136315394;
    uint64_t v60 = sub_1003FFBB0(0xD000000000000022LL, 0x800000010083EA90LL, &v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v16 + 4, v16 + 12);
    *(_WORD *)(v16 + 12) = 2080;
    uint64_t v56 = v16 + 14;
    uint64_t v17 = type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
    uint64_t v57 = (int *)v6;
    uint64_t v18 = v17;
    uint64_t v19 = sub_10040A2B0( &qword_1009B91B8,  type metadata accessor for IDSGroupEncryptionPublicIdentity,  (uint64_t)&unk_10071D364);
    uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter(v18, v19);
    unint64_t v22 = v21;
    uint64_t v60 = sub_1003FFBB0(v20, v21, &v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v56, v16 + 22);
    swift_bridgeObjectRelease(v22);
    uint64_t v23 = (uint64_t)v10;
    __n128 v24 = v57;
    sub_1003F6050(v23, type metadata accessor for IDSGroupEncryptionDesiredKeyValueMaterialSet);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "%s: encrypting for %s", (uint8_t *)v16, 0x16u);
    uint64_t v25 = v58;
    swift_arrayDestroy(v58, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1LL, -1LL);
    uint64_t v26 = v16;
    a2 = (void *)v59;
    swift_slowDealloc(v26, -1LL, -1LL);
  }

  else
  {
    sub_1003F6050((uint64_t)v10, type metadata accessor for IDSGroupEncryptionDesiredKeyValueMaterialSet);

    __n128 v24 = (int *)v6;
  }

  uint64_t v27 = a1[3];
  uint64_t v28 = a1[4];
  sub_10040A238(a1, v27);
  uint64_t v29 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, uint64_t))(v28 + 24))( *(void *)(v3 + 8),  *(void *)(v3 + 16),  v3 + v24[6],  v27,  v28);
  uint64_t v31 = v29;
  if ((v32 & 1) != 0)
  {
    *a2 = v29;
    uint64_t v53 = 1LL;
    goto LABEL_13;
  }

  unint64_t v33 = v30;
  if (*(_BYTE *)(v3 + 4) == 2) {
    int v34 = *(_DWORD *)v3;
  }
  else {
    int v34 = 0;
  }
  uint64_t v59 = sub_1003F5CB4(&qword_1009B9310);
  uint64_t v35 = (char *)a2 + *(int *)(v59 + 48);
  *(_DWORD *)a2 = v34;
  uint64_t v36 = v3 + v24[8];
  uint64_t v38 = type metadata accessor for UUID(0LL, v37);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v38 - 8) + 16LL))(v35, v36, v38);
  uint64_t v39 = sub_1003F5CB4((uint64_t *)&unk_1009B99C0);
  uint64_t inited = swift_initStackObject(v39, &v63);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100718500;
  uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSDSessionMessageRealTimeEncryptionEncryptedData);
  uint64_t v62 = v41;
  sub_1004028CC(v31, v33);
  AnyHashable.init<A>(_:)(&v61, &type metadata for String, &protocol witness table for String);
  *(void *)(inited + 96) = &type metadata for Data;
  *(void *)(inited + 72) = v31;
  *(void *)(inited + 80) = v33;
  uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSDSessionMessageRealTimeEncryptionWrapModeKey);
  uint64_t v62 = v42;
  sub_1004028CC(v31, v33);
  AnyHashable.init<A>(_:)(&v61, &type metadata for String, &protocol witness table for String);
  *(void *)(inited + 16_Block_object_dispose(va, 8) = &type metadata for Int;
  *(void *)(inited + 144) = 1LL;
  uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSRealTimeEncryptionParticipantID);
  uint64_t v62 = v43;
  AnyHashable.init<A>(_:)(&v61, &type metadata for String, &protocol witness table for String);
  uint64_t v44 = *(void *)(v3 + v24[7]);
  *(void *)(inited + 240) = &type metadata for UInt64;
  *(void *)(inited + 2swift_unknownObjectWeakDestroy(v0 + 16) = v44;
  unint64_t v45 = sub_10040C1F4(inited);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v45);
  id v47 = (id)JWEncodeDictionary(isa);

  if (v47)
  {
    char v48 = (void *)((char *)a2 + *(int *)(v59 + 64));
    uint64_t v49 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v47);
    uint64_t v51 = v50;

    sub_10040A268(v31, v33, 0);
    sub_10040A268(v31, v33, 0);
    *char v48 = v49;
    v48[1] = v51;
    uint64_t v52 = type metadata accessor for IDSGroupEncryptionMaterialData(0LL);
    swift_storeEnumTagMultiPayload(a2, v52, 2LL);
    uint64_t v53 = 0LL;
LABEL_13:
    uint64_t v54 = sub_1003F5CB4(&qword_1009B9308);
    swift_storeEnumTagMultiPayload(a2, v54, v53);
    return;
  }

  __break(1u);
}

unint64_t sub_10040F920(unint64_t result)
{
  if (result >= 2) {
    return swift_errorRetain();
  }
  return result;
}

unint64_t sub_10040F930(unint64_t result)
{
  if (result >= 2) {
    return swift_errorRelease();
  }
  return result;
}

uint64_t sub_10040F940(uint64_t a1)
{
  uint64_t v2 = sub_1003F5CB4(&qword_1009B9308);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

Swift::Int sub_10040F984()
{
  unint64_t v1 = sub_10040C97C();
  dispatch thunk of Hashable.hash(into:)(v9, &type metadata for IDSGroupEncryptionDesiredMaterialKind, v1);
  Data.hash(into:)(v9, *(void *)(v0 + 8), *(void *)(v0 + 16));
  uint64_t v2 = type metadata accessor for IDSGroupEncryptionDesiredKeyValueMaterialSet(0LL);
  uint64_t v3 = type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
  uint64_t v4 = sub_10040A2B0( &qword_1009B91C8,  type metadata accessor for IDSGroupEncryptionPublicIdentity,  (uint64_t)&unk_10071D2FC);
  dispatch thunk of Hashable.hash(into:)(v9, v3, v4);
  Hasher._combine(_:)(*(void *)(v0 + *(int *)(v2 + 28)));
  uint64_t v6 = type metadata accessor for UUID(0LL, v5);
  uint64_t v7 = sub_10040A2B0( &qword_1009B9300,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v9, v6, v7);
  return Hasher._finalize()();
}

uint64_t sub_10040FA98@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  *(_DWORD *)a7 = a1;
  *(_BYTE *)(a7 + 4) = BYTE4(a1);
  *(void *)(a7 + _Block_object_dispose(va, 8) = a2;
  *(void *)(a7 + swift_unknownObjectWeakDestroy(v0 + 16) = a3;
  uint64_t v11 = (int *)type metadata accessor for IDSGroupEncryptionDesiredKeyValueMaterialSet(0LL);
  sub_1003F600C(a4, a7 + v11[6], type metadata accessor for IDSGroupEncryptionPublicIdentity);
  *(void *)(a7 + v11[7]) = a5;
  uint64_t v12 = a7 + v11[8];
  uint64_t v14 = type metadata accessor for UUID(0LL, v13);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32LL))(v12, a6, v14);
}

uint64_t sub_10040FB3C(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = sub_10040C97C();
  dispatch thunk of Hashable.hash(into:)(a1, &type metadata for IDSGroupEncryptionDesiredMaterialKind, v5);
  Data.hash(into:)(a1, *(void *)(v2 + 8), *(void *)(v2 + 16));
  uint64_t v6 = type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
  uint64_t v7 = sub_10040A2B0( &qword_1009B91C8,  type metadata accessor for IDSGroupEncryptionPublicIdentity,  (uint64_t)&unk_10071D2FC);
  dispatch thunk of Hashable.hash(into:)(a1, v6, v7);
  Hasher._combine(_:)(*(void *)(v2 + *(int *)(a2 + 28)));
  uint64_t v9 = type metadata accessor for UUID(0LL, v8);
  uint64_t v10 = sub_10040A2B0( &qword_1009B9300,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  return dispatch thunk of Hashable.hash(into:)(a1, v9, v10);
}

Swift::Int sub_10040FC40(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_10040C97C();
  dispatch thunk of Hashable.hash(into:)(v11, &type metadata for IDSGroupEncryptionDesiredMaterialKind, v4);
  Data.hash(into:)(v11, *(void *)(v2 + 8), *(void *)(v2 + 16));
  uint64_t v5 = type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
  uint64_t v6 = sub_10040A2B0( &qword_1009B91C8,  type metadata accessor for IDSGroupEncryptionPublicIdentity,  (uint64_t)&unk_10071D2FC);
  dispatch thunk of Hashable.hash(into:)(v11, v5, v6);
  Hasher._combine(_:)(*(void *)(v2 + *(int *)(a2 + 28)));
  uint64_t v8 = type metadata accessor for UUID(0LL, v7);
  uint64_t v9 = sub_10040A2B0( &qword_1009B9300,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v11, v8, v9);
  return Hasher._finalize()();
}

void sub_10040FD48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

uint64_t sub_10040FDA8( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20, char a21, char a22, char a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37)
{
  uint64_t v42 = v39;
  __int16 v43 = v40;
  char v44 = BYTE2(v40);
  char v45 = BYTE3(v40);
  char v46 = BYTE4(v40);
  char v47 = BYTE5(v40);
  if (!v38)
  {
    __break(1u);
    JUMPOUT(0x10040FF8CLL);
  }

  uint64_t result = memcmp(v38, &v42, BYTE6(v40));
  BOOL *v37 = (_DWORD)result == 0;
  return result;
}

void sub_10040FFB0(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_10041000C()
{
  uint64_t v8 = v3;
  __int16 v9 = v4;
  char v10 = BYTE2(v4);
  char v11 = BYTE3(v4);
  char v12 = BYTE4(v4);
  char v13 = BYTE5(v4);
  sub_10040FD48((uint64_t)&v8, (uint64_t)&v8 + BYTE6(v4), v1, v0);
  sub_100402A84(v1, v0);
  if (!v2) {
    char v5 = v7;
  }
  return v5 & 1;
}

uint64_t sub_1004101D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }

    v11 += a1 - result;
  }

  BOOL v12 = __OFSUB__(a2, a1);
  uint64_t v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v14 = __DataStorage._length.getter();
  if (v14 >= v13) {
    uint64_t v15 = v13;
  }
  else {
    uint64_t v15 = v14;
  }
  uint64_t v16 = v11 + v15;
  if (v11) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0LL;
  }
  sub_10040FD48(v11, v17, a4, a5);
  if (!v5) {
    char v18 = v19;
  }
  return v18 & 1;
}

void sub_100410288(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }

uint64_t sub_1004102CC()
{
  return ((uint64_t (*)(void))((char *)&loc_100410300 + *((int *)qword_1004103C0 + (v0 >> 62))))();
}

uint64_t sub_100410310@<X0>(uint64_t a1@<X8>)
{
  if (a1 == BYTE6(v1))
  {
    if (a1 < 1)
    {
      char v5 = 1;
    }

    else
    {
      sub_1004028CC(v2, v1);
      sub_10040FFB0(v4, v3);
    }
  }

  else
  {
    char v5 = 0;
  }

  return v5 & 1;
}

uint64_t sub_1004103D0(unsigned int *a1, uint64_t a2)
{
  if ((sub_1004B5F64(*a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32)) & 1) != 0
    && (sub_100410288(*((void *)a1 + 1), *((void *)a1 + 2)), (v4 & 1) != 0)
    && (char v5 = (int *)type metadata accessor for IDSGroupEncryptionDesiredKeyValueMaterialSet(0LL),
        (sub_1004D3034((char *)a1 + v5[6], a2 + v5[6]) & 1) != 0)
    && *(void *)((char *)a1 + v5[7]) == *(void *)(a2 + v5[7]))
  {
    return static UUID.== infix(_:_:)((char *)a1 + v5[8], a2 + v5[8]);
  }

  else
  {
    return 0LL;
  }

uint64_t sub_10041047C(uint64_t a1)
{
  uint64_t result = sub_10040A2B0( &qword_1009B9318,  type metadata accessor for IDSGroupEncryptionDesiredKeyValueMaterialSet,  (uint64_t)&unk_1007187B4);
  *(void *)(a1 + _Block_object_dispose(va, 8) = result;
  return result;
}

uint64_t sub_1004104B8()
{
  return sub_10040A2B0( &qword_1009B9320,  type metadata accessor for IDSGroupEncryptionDesiredKeyValueMaterialSet,  (uint64_t)&unk_1007187F4);
}

void *sub_1004104E4(uint64_t a1, uint64_t *a2, int *a3)
{
  char v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v29 = *a2;
    void *v4 = *a2;
    char v4 = (void *)(v29 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v29);
  }

  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_BYTE *)(a1 + 4) = *((_BYTE *)a2 + 4);
    uint64_t v7 = a2[1];
    unint64_t v8 = a2[2];
    sub_1004028CC(v7, v8);
    v4[1] = v7;
    void v4[2] = v8;
    uint64_t v9 = a3[6];
    char v10 = (void *)((char *)v4 + v9);
    uint64_t v11 = (uint64_t)a2 + v9;
    uint64_t v13 = *(void **)((char *)a2 + v9);
    BOOL v12 = *(void **)((char *)a2 + v9 + 8);
    *char v10 = v13;
    v10[1] = v12;
    uint64_t v14 = (int *)type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
    uint64_t v15 = v14[6];
    uint64_t v31 = v11 + v15;
    char v32 = (char *)v10 + v15;
    uint64_t v16 = type metadata accessor for Date(0LL);
    uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16LL);
    id v18 = v13;
    id v19 = v12;
    v17(v32, v31, v16);
    uint64_t v20 = v14[7];
    unint64_t v21 = *(void **)(v11 + v20);
    *(void *)((char *)v10 + vmemset(v5, 170, 20) = v21;
    *((_BYTE *)v10 + v14[8]) = *(_BYTE *)(v11 + v14[8]);
    uint64_t v22 = a3[8];
    *(void *)((char *)v4 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    uint64_t v23 = (char *)v4 + v22;
    uint64_t v24 = (uint64_t)a2 + v22;
    uint64_t v26 = type metadata accessor for UUID(0LL, v25);
    uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v26 - 8) + 16LL);
    id v28 = v21;
    v27(v23, v24, v26);
  }

  return v4;
}

uint64_t sub_100410630(uint64_t a1, uint64_t a2)
{
  char v4 = (id *)(a1 + *(int *)(a2 + 24));

  uint64_t v5 = type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
  uint64_t v6 = (char *)v4 + *(int *)(v5 + 24);
  uint64_t v7 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v7 - 8) + 8LL))(v6, v7);

  uint64_t v8 = a1 + *(int *)(a2 + 32);
  uint64_t v10 = type metadata accessor for UUID(0LL, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8LL))(v8, v10);
}

uint64_t sub_1004106E0(uint64_t a1, uint64_t a2, int *a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  uint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  sub_1004028CC(v6, v7);
  *(void *)(a1 + _Block_object_dispose(va, 8) = v6;
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = a2 + v8;
  BOOL v12 = *(void **)(a2 + v8);
  uint64_t v11 = *(void **)(a2 + v8 + 8);
  *uint64_t v9 = v12;
  v9[1] = v11;
  uint64_t v13 = (int *)type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
  uint64_t v14 = v13[6];
  unint64_t v30 = (char *)v9 + v14;
  uint64_t v15 = v10 + v14;
  uint64_t v16 = type metadata accessor for Date(0LL);
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16LL);
  id v18 = v12;
  id v19 = v11;
  v17(v30, v15, v16);
  uint64_t v20 = v13[7];
  unint64_t v21 = *(void **)(v10 + v20);
  *(void *)((char *)v9 + vmemset(v5, 170, 20) = v21;
  *((_BYTE *)v9 + v13[8]) = *(_BYTE *)(v10 + v13[8]);
  uint64_t v22 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  uint64_t v23 = a1 + v22;
  uint64_t v24 = a2 + v22;
  uint64_t v26 = type metadata accessor for UUID(0LL, v25);
  uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 16LL);
  id v28 = v21;
  v27(v23, v24, v26);
  return a1;
}

uint64_t sub_10041080C(uint64_t a1, int *a2, int *a3)
{
  int v6 = *a2;
  *(_BYTE *)(a1 + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)a1 = v6;
  uint64_t v7 = *((void *)a2 + 1);
  unint64_t v8 = *((void *)a2 + 2);
  sub_1004028CC(v7, v8);
  uint64_t v9 = *(void *)(a1 + 8);
  unint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + _Block_object_dispose(va, 8) = v7;
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v8;
  sub_100402A84(v9, v10);
  uint64_t v11 = a3[6];
  BOOL v12 = (void *)(a1 + v11);
  uint64_t v13 = (uint64_t)a2 + v11;
  uint64_t v14 = *(void **)(a1 + v11);
  uint64_t v15 = *(void **)((char *)a2 + v11);
  void *v12 = v15;
  id v16 = v15;

  uint64_t v17 = *(void **)(v13 + 8);
  id v18 = (void *)v12[1];
  v12[1] = v17;
  id v19 = v17;

  uint64_t v20 = (int *)type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
  uint64_t v21 = v20[6];
  uint64_t v22 = (char *)v12 + v21;
  uint64_t v23 = v13 + v21;
  uint64_t v24 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 24LL))(v22, v23, v24);
  uint64_t v25 = v20[7];
  uint64_t v26 = *(void **)(v13 + v25);
  uint64_t v27 = *(void **)((char *)v12 + v25);
  *(void *)((char *)v12 + v25) = v26;
  id v28 = v26;

  *((_BYTE *)v12 + v20[8]) = *(_BYTE *)(v13 + v20[8]);
  *(void *)(a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  uint64_t v29 = a3[8];
  uint64_t v30 = a1 + v29;
  uint64_t v31 = (uint64_t)a2 + v29;
  uint64_t v33 = type metadata accessor for UUID(0LL, v32);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 24LL))(v30, v31, v33);
  return a1;
}

uint64_t sub_100410940(uint64_t a1, uint64_t a2, int *a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = *(_OWORD *)(a2 + 8);
  uint64_t v6 = a3[6];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  *(_OWORD *)(a1 + v6) = *(_OWORD *)(a2 + v6);
  uint64_t v9 = (int *)type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
  uint64_t v10 = v9[6];
  uint64_t v11 = v7 + v10;
  uint64_t v12 = v8 + v10;
  uint64_t v13 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32LL))(v11, v12, v13);
  *(void *)(v7 + v9[7]) = *(void *)(v8 + v9[7]);
  *(_BYTE *)(v7 + v9[8]) = *(_BYTE *)(v8 + v9[8]);
  uint64_t v14 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  uint64_t v18 = type metadata accessor for UUID(0LL, v17);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 32LL))(v15, v16, v18);
  return a1;
}

uint64_t sub_100410A30(uint64_t a1, uint64_t a2, int *a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = *(_OWORD *)(a2 + 8);
  sub_100402A84(v6, v7);
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  uint64_t v11 = *(void **)(a1 + v8);
  *uint64_t v9 = *v10;

  uint64_t v12 = (void *)v9[1];
  v9[1] = v10[1];

  uint64_t v13 = (int *)type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
  uint64_t v14 = v13[6];
  uint64_t v15 = (char *)v9 + v14;
  uint64_t v16 = (char *)v10 + v14;
  uint64_t v17 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 40LL))(v15, v16, v17);
  uint64_t v18 = v13[7];
  id v19 = *(void **)((char *)v9 + v18);
  *(void *)((char *)v9 + v1_Block_object_dispose(va, 8) = *(void *)((char *)v10 + v18);

  *((_BYTE *)v9 + v13[8]) = *((_BYTE *)v10 + v13[8]);
  uint64_t v20 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  uint64_t v24 = type metadata accessor for UUID(0LL, v23);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 40LL))(v21, v22, v24);
  return a1;
}

uint64_t sub_100410B4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100410B58);
}

uint64_t sub_100410B58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 252)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 4);
    if (v4 > 3) {
      return (v4 ^ 0xFF) + 1;
    }
    else {
      return 0LL;
    }
  }

  else
  {
    uint64_t v8 = type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
    uint64_t v10 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
    {
      uint64_t v11 = v8;
      uint64_t v12 = *(int *)(a3 + 24);
    }

    else
    {
      uint64_t v11 = type metadata accessor for UUID(0LL, v9);
      uint64_t v10 = *(void *)(v11 - 8);
      uint64_t v12 = *(int *)(a3 + 32);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1 + v12, a2, v11);
  }

uint64_t sub_100410BF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100410BFC);
}

uint64_t sub_100410BFC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 252)
  {
    *(_BYTE *)(result + 4) = -(char)a2;
  }

  else
  {
    uint64_t v8 = type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
    uint64_t v10 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v10 + 84) == a3)
    {
      uint64_t v11 = v8;
      uint64_t v12 = *(int *)(a4 + 24);
    }

    else
    {
      uint64_t v11 = type metadata accessor for UUID(0LL, v9);
      uint64_t v10 = *(void *)(v11 - 8);
      uint64_t v12 = *(int *)(a4 + 32);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v5 + v12, a2, a2, v11);
  }

  return result;
}

uint64_t sub_100410C94(uint64_t a1)
{
  v5[0] = &unk_100718850;
  v5[1] = &unk_100718868;
  uint64_t result = type metadata accessor for IDSGroupEncryptionPublicIdentity(319LL);
  if (v3 <= 0x3F)
  {
    void v5[2] = *(void *)(result - 8) + 64LL;
    v5[3] = (char *)&value witness table for Builtin.Int64 + 64;
    uint64_t result = type metadata accessor for UUID(319LL, v3);
    if (v4 <= 0x3F)
    {
      void v5[4] = *(void *)(result - 8) + 64LL;
      swift_initStructMetadata(a1, 256LL, 5LL, v5, a1 + 16);
      return 0LL;
    }
  }

  return result;
}

void *initializeBufferWithCopyOfBuffer for IDSGroupEncryptionDesiredKeyValueMaterialSet.DataError( void *a1, void *a2)
{
  uint64_t v3 = *a2;
  if (*a2 >= 0xFFFFFFFFuLL) {
    swift_errorRetain(*a2);
  }
  *a1 = v3;
  return a1;
}

unint64_t destroy for IDSGroupEncryptionDesiredKeyValueMaterialSet.DataError(unint64_t *a1)
{
  unint64_t result = *a1;
  if (result >= 0xFFFFFFFF) {
    return swift_errorRelease();
  }
  return result;
}

unint64_t *assignWithCopy for IDSGroupEncryptionDesiredKeyValueMaterialSet.DataError( unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  if (*a1 < 0xFFFFFFFF)
  {
    if (v3 >= 0xFFFFFFFF) {
      swift_errorRetain(*a2);
    }
    *a1 = v3;
  }

  else if (v3 < 0xFFFFFFFF)
  {
    ((void (*)(void))swift_errorRelease)();
    *a1 = *a2;
  }

  else
  {
    swift_errorRetain(*a2);
    unint64_t v4 = *a1;
    *a1 = v3;
    swift_errorRelease(v4);
  }

  return a1;
}

void *initializeWithTake for IDSGroupEncryptionDesiredKeyValueMaterialSet.DataError( void *result, void *a2)
{
  *unint64_t result = *a2;
  return result;
}

unint64_t *assignWithTake for IDSGroupEncryptionDesiredKeyValueMaterialSet.DataError( unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  if (v3 < 0xFFFFFFFF) {
    goto LABEL_6;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_errorRelease(v3);
LABEL_6:
    *a1 = v4;
    return a1;
  }

  *a1 = v4;
  swift_errorRelease(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for IDSGroupEncryptionDesiredKeyValueMaterialSet.DataError( uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFE && *((_BYTE *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  uint64_t v3 = *a1;
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for IDSGroupEncryptionDesiredKeyValueMaterialSet.DataError( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0LL;
    *(_DWORD *)unint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(_BYTE *)(result + _Block_object_dispose(va, 8) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(_BYTE *)(result + _Block_object_dispose(va, 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2 + 1;
    }
  }

  return result;
}

uint64_t sub_100410F34(uint64_t *a1)
{
  uint64_t v1 = *a1;
  return (v1 + 1);
}

void *sub_100410F4C(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }

  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }

  *unint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for IDSGroupEncryptionDesiredKeyValueMaterialSet.DataError()
{
  return &type metadata for IDSGroupEncryptionDesiredKeyValueMaterialSet.DataError;
}

void type metadata accessor for IDSQRProtoMaterialInfo_MaterialType()
{
  if (!qword_1009B93B8)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(0LL, &unk_1009054E0);
    if (!v1) {
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_1009B93B8);
    }
  }

uint64_t sub_100410FD0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_1003F5CB4(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

Class sub_100411030(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = (uint64_t *)(a1 + *a3);
  uint64_t v4 = *v3;
  unint64_t v5 = v3[1];
  sub_1004028CC(*v3, v5);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100402A84(v4, v5);
  return isa;
}

id sub_100411088(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = (char *)objc_allocWithZone(v5);
  uint64_t v12 = &v11[OBJC_IVAR____TtC17identityservicesd32IDSGlobalLinkP2PNegotiatedKeySet_serverSecret];
  *(void *)uint64_t v12 = a1;
  *((void *)v12 + 1) = a2;
  uint64_t v13 = &v11[OBJC_IVAR____TtC17identityservicesd32IDSGlobalLinkP2PNegotiatedKeySet_clientSecret];
  *(void *)uint64_t v13 = a3;
  *((void *)v13 + 1) = a4;
  *(void *)&v11[OBJC_IVAR____TtC17identityservicesd32IDSGlobalLinkP2PNegotiatedKeySet_counters] = a5;
  v15.receiver = v11;
  v15.super_class = v5;
  return objc_msgSendSuper2(&v15, "init");
}

uint64_t type metadata accessor for IDSGlobalLinkP2PNegotiatedKeySet()
{
  return objc_opt_self(&OBJC_CLASS____TtC17identityservicesd32IDSGlobalLinkP2PNegotiatedKeySet);
}

void sub_100411134(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }

uint64_t sub_10041118C(uint64_t a1)
{
  uint64_t v4 = BYTE6(v24);
  if (BYTE6(v24))
  {
    *(void *)(v3 - 104) = v2;
    uint64_t v5 = BYTE6(v24);
    uint64_t v6 = sub_100411D38(0LL, BYTE6(v24), 0);
    uint64_t v2 = *(void *)(v3 - 104);
    if ((_DWORD)v1)
    {
      if ((_DWORD)v1 == 1) {
        uint64_t v7 = (int)a1;
      }
      else {
        uint64_t v7 = *(void *)(a1 + 16);
      }
    }

    else
    {
      uint64_t v7 = 0LL;
    }

    *(void *)(v3 - 136) = v24 & 0x3FFFFFFFFFFFFFFFLL;
    *(void *)(v3 - 12_Block_object_dispose(va, 8) = v1;
    while (v5)
    {
      if ((_DWORD)v1)
      {
        if ((_DWORD)v1 == 1)
        {
          uint64_t v8 = ((uint64_t (*)(char *))__DataStorage._bytes.getter)(v6);
          if (!v8)
          {
            __break(1u);
LABEL_36:
            __break(1u);
          }

          uint64_t v9 = v8;
          uint64_t v10 = __DataStorage._offset.getter();
          uint64_t v11 = v7 - v10;
          if (__OFSUB__(v7, v10)) {
            goto LABEL_32;
          }
        }

        else
        {
          if (v7 < *(void *)(a1 + 16)) {
            goto LABEL_31;
          }
          if (v7 >= *(void *)(a1 + 24)) {
            goto LABEL_33;
          }
          uint64_t v13 = ((uint64_t (*)(char *))__DataStorage._bytes.getter)(v6);
          if (!v13) {
            goto LABEL_36;
          }
          uint64_t v9 = v13;
          uint64_t v14 = __DataStorage._offset.getter();
          uint64_t v11 = v7 - v14;
          if (__OFSUB__(v7, v14)) {
            goto LABEL_34;
          }
        }

        char v12 = *(_BYTE *)(v9 + v11);
      }

      else
      {
        if (v7 >= BYTE6(v24)) {
          goto LABEL_30;
        }
        *(void *)(v3 - 11_Block_object_dispose(va, 8) = a1;
        *(_WORD *)(v3 - 110) = v24;
        *(_BYTE *)(v3 - 10_Block_object_dispose(va, 8) = BYTE2(v24);
        *(_BYTE *)(v3 - 107) = BYTE3(v24);
        *(_BYTE *)(v3 - 106) = BYTE4(v24);
        *(_BYTE *)(v3 - 105) = BYTE5(v24);
        char v12 = *(_BYTE *)(v3 - 118 + v7);
      }

      uint64_t v15 = sub_1003F5CB4(&qword_1009B9518);
      uint64_t v16 = swift_allocObject(v15, 72LL, 7LL);
      *(_OWORD *)(v16 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1007184C0;
      *(void *)(v16 + 56) = &type metadata for UInt8;
      *(void *)(v16 + 64) = &protocol witness table for UInt8;
      *(_BYTE *)(v16 + 32) = v12;
      uint64_t v6 = (char *)((uint64_t (*)(uint64_t, unint64_t, uint64_t))String.init(format:_:))( 0x586868323025LL,  0xE600000000000000LL,  v16);
      uint64_t v17 = v6;
      uint64_t v19 = v18;
      *(void *)(v3 - 104) = v2;
      unint64_t v21 = *(void *)(v2 + 16);
      unint64_t v20 = *(void *)(v2 + 24);
      if (v21 >= v20 >> 1)
      {
        uint64_t v6 = sub_100411D38((char *)(v20 > 1), v21 + 1, 1);
        uint64_t v2 = *(void *)(v3 - 104);
      }

      *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v21 + 1;
      uint64_t v22 = v2 + 16 * v21;
      *(void *)(v22 + 32) = v17;
      *(void *)(v22 + 40) = v19;
      ++v7;
      --v5;
      --v4;
      uint64_t v1 = *(void *)(v3 - 128);
      if (!v4) {
        return v2;
      }
    }

    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    __break(1u);
    JUMPOUT(0x1004114A4LL);
  }

  return v2;
}

uint64_t sub_1004114D8()
{
  uint64_t v1 = v0;
  _StringGuts.grow(_:)(81LL);
  v2._countAndFlagsBits = 0xD000000000000029LL;
  v2._dispatch_queue_t object = (void *)0x800000010083EAC0LL;
  String.append(_:)(v2);
  uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC17identityservicesd32IDSGlobalLinkP2PNegotiatedKeySet_counters);
  uint64_t v4 = swift_bridgeObjectRetain(v3);
  v5._countAndFlagsBits = Array.description.getter(v4, &type metadata for UInt32);
  dispatch_queue_t object = v5._object;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(object);
  v7._dispatch_queue_t object = (void *)0x800000010083EAF0LL;
  v7._countAndFlagsBits = 0xD000000000000010LL;
  String.append(_:)(v7);
  sub_100411134( *(void *)(v1 + OBJC_IVAR____TtC17identityservicesd32IDSGlobalLinkP2PNegotiatedKeySet_serverSecret),  *(void *)(v1 + OBJC_IVAR____TtC17identityservicesd32IDSGlobalLinkP2PNegotiatedKeySet_serverSecret + 8));
  uint64_t v9 = v8;
  uint64_t v10 = sub_1003F5CB4(&qword_1009BAC90);
  unint64_t v11 = sub_1004116C0();
  uint64_t v12 = BidirectionalCollection<>.joined(separator:)(0LL, 0xE000000000000000LL, v10, v11);
  uint64_t v14 = v13;
  swift_bridgeObjectRelease(v9);
  v15._countAndFlagsBits = v12;
  v15._dispatch_queue_t object = v14;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(v14);
  v16._dispatch_queue_t object = (void *)0x800000010083EB10LL;
  v16._countAndFlagsBits = 0xD000000000000010LL;
  String.append(_:)(v16);
  sub_100411134( *(void *)(v1 + OBJC_IVAR____TtC17identityservicesd32IDSGlobalLinkP2PNegotiatedKeySet_clientSecret),  *(void *)(v1 + OBJC_IVAR____TtC17identityservicesd32IDSGlobalLinkP2PNegotiatedKeySet_clientSecret + 8));
  uint64_t v18 = v17;
  uint64_t v19 = BidirectionalCollection<>.joined(separator:)(0LL, 0xE000000000000000LL, v10, v11);
  unint64_t v21 = v20;
  swift_bridgeObjectRelease(v18);
  v22._countAndFlagsBits = v19;
  v22._dispatch_queue_t object = v21;
  String.append(_:)(v22);
  swift_bridgeObjectRelease(v21);
  v23._countAndFlagsBits = 15882LL;
  v23._dispatch_queue_t object = (void *)0xE200000000000000LL;
  String.append(_:)(v23);
  return 0LL;
}

unint64_t sub_1004116C0()
{
  unint64_t result = qword_1009B93E0;
  if (!qword_1009B93E0)
  {
    uint64_t v1 = sub_100401A88(&qword_1009BAC90);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1009B93E0);
  }

  return result;
}

unint64_t sub_100411718()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC17identityservicesd32IDSGlobalLinkP2PNegotiatedKeySet_counters);
  uint64_t v2 = swift_bridgeObjectRetain(v1);
  v3._countAndFlagsBits = Array.description.getter(v2, &type metadata for UInt32);
  dispatch_queue_t object = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(object);
  v5._countAndFlagsBits = 62LL;
  v5._dispatch_queue_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v5);
  return 0xD000000000000029LL;
}

id sub_1004117F8()
{
  return sub_100411CD0(type metadata accessor for IDSGlobalLinkP2PNegotiatedKeySet);
}

id sub_1004118A4(char a1, uint64_t a2, uint64_t a3)
{
  Swift::String v7 = objc_allocWithZone(v3);
  v7[OBJC_IVAR____TtC17identityservicesd30IDSGlobalLinkP2PNegotiatedKeys_isServer] = a1;
  *(void *)&v7[OBJC_IVAR____TtC17identityservicesd30IDSGlobalLinkP2PNegotiatedKeys_avc] = a2;
  *(void *)&v7[OBJC_IVAR____TtC17identityservicesd30IDSGlobalLinkP2PNegotiatedKeys_ids] = a3;
  v9.receiver = v7;
  v9.super_class = v3;
  return objc_msgSendSuper2(&v9, "init");
}

uint64_t type metadata accessor for IDSGlobalLinkP2PNegotiatedKeys()
{
  return objc_opt_self(&OBJC_CLASS____TtC17identityservicesd30IDSGlobalLinkP2PNegotiatedKeys);
}

uint64_t sub_100411938()
{
  uint64_t v1 = v0;
  _StringGuts.grow(_:)(56LL);
  v2._dispatch_queue_t object = (void *)0x800000010083EB70LL;
  v2._countAndFlagsBits = 0xD000000000000021LL;
  String.append(_:)(v2);
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC17identityservicesd30IDSGlobalLinkP2PNegotiatedKeys_isServer)) {
    uint64_t v3 = 0x726576726553LL;
  }
  else {
    uint64_t v3 = 0x746E65696C43LL;
  }
  unint64_t v4 = 0xE600000000000000LL;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease(0xE600000000000000LL);
  v5._countAndFlagsBits = 0x3D63766120200A29LL;
  v5._dispatch_queue_t object = (void *)0xE800000000000000LL;
  String.append(_:)(v5);
  id v6 =  [*(id *)(v0 + OBJC_IVAR____TtC17identityservicesd30IDSGlobalLinkP2PNegotiatedKeys_avc) sensitiveDescription];
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  objc_super v9 = v8;

  v10._countAndFlagsBits = v7;
  v10._dispatch_queue_t object = v9;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(v9);
  v11._countAndFlagsBits = 0x3D73646920200ALL;
  v11._dispatch_queue_t object = (void *)0xE700000000000000LL;
  String.append(_:)(v11);
  id v12 =  [*(id *)(v1 + OBJC_IVAR____TtC17identityservicesd30IDSGlobalLinkP2PNegotiatedKeys_ids) sensitiveDescription];
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  Swift::String v15 = v14;

  v16._countAndFlagsBits = v13;
  v16._dispatch_queue_t object = v15;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(v15);
  v17._countAndFlagsBits = 15882LL;
  v17._dispatch_queue_t object = (void *)0xE200000000000000LL;
  String.append(_:)(v17);
  return 0LL;
}

id sub_100411AD4(void *a1, uint64_t a2, void (*a3)(void))
{
  id v4 = a1;
  a3();
  uint64_t v6 = v5;

  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  return v7;
}

uint64_t sub_100411B2C()
{
  v10[0] = 0LL;
  v10[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(56LL);
  v1._dispatch_queue_t object = (void *)0x800000010083EB70LL;
  v1._countAndFlagsBits = 0xD000000000000021LL;
  String.append(_:)(v1);
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC17identityservicesd30IDSGlobalLinkP2PNegotiatedKeys_isServer)) {
    uint64_t v2 = 0x726576726553LL;
  }
  else {
    uint64_t v2 = 0x746E65696C43LL;
  }
  unint64_t v3 = 0xE600000000000000LL;
  String.append(_:)(*(Swift::String *)&v2);
  swift_bridgeObjectRelease(0xE600000000000000LL);
  v4._countAndFlagsBits = 0x3D63766120200A29LL;
  v4._dispatch_queue_t object = (void *)0xE800000000000000LL;
  String.append(_:)(v4);
  uint64_t v9 = *(void *)(v0 + OBJC_IVAR____TtC17identityservicesd30IDSGlobalLinkP2PNegotiatedKeys_avc);
  uint64_t v5 = sub_1003F5CB4(&qword_1009B9460);
  _print_unlocked<A, B>(_:_:)( &v9,  v10,  v5,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v6._countAndFlagsBits = 0x3D73646920200ALL;
  v6._dispatch_queue_t object = (void *)0xE700000000000000LL;
  String.append(_:)(v6);
  uint64_t v9 = *(void *)(v0 + OBJC_IVAR____TtC17identityservicesd30IDSGlobalLinkP2PNegotiatedKeys_ids);
  _print_unlocked<A, B>(_:_:)( &v9,  v10,  v5,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v7._countAndFlagsBits = 15882LL;
  v7._dispatch_queue_t object = (void *)0xE200000000000000LL;
  String.append(_:)(v7);
  return v10[0];
}

id sub_100411CC4()
{
  return sub_100411CD0(type metadata accessor for IDSGlobalLinkP2PNegotiatedKeys);
}

id sub_100411CD0(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, "dealloc");
}

char *sub_100411D38(char *a1, int64_t a2, char a3)
{
  unint64_t result = sub_100411D54(a1, a2, a3, *v3);
  objc_class *v3 = result;
  return result;
}

char *sub_100411D54(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_1003F5CB4((uint64_t *)&unk_1009B9520);
    Swift::String v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }

  else
  {
    Swift::String v11 = (char *)&_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v11 + 32;
  Swift::String v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8]) {
      memmove(v14, v15, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    swift_arrayInitWithCopy(v14);
  }

  swift_release(a4);
  return v11;
}

uint64_t type metadata accessor for IDSDSessionKeyValueDeliveryLocalEntry(uint64_t a1)
{
  return sub_100402020( a1,  (uint64_t *)&unk_1009C15E8,  (uint64_t)&nominal type descriptor for IDSDSessionKeyValueDeliveryLocalEntry);
}

unint64_t sub_100411E68(uint64_t a1)
{
  uint64_t v2 = sub_1003F5CB4(&qword_1009B9828);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v4, v5);
  int64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8)
  {
    uint64_t v10 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    uint64_t v26 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v26);
    return (unint64_t)v10;
  }

  sub_1003F5CB4(&qword_1009B9800);
  uint64_t v9 = static _DictionaryStorage.allocate(capacity:)(v8);
  uint64_t v10 = (void *)v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (!v11) {
    goto LABEL_9;
  }
  uint64_t v12 = *(int *)(v2 + 48);
  uint64_t v13 = v9 + 64;
  unint64_t v14 = (*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v28 = a1;
  uint64_t v15 = a1 + v14;
  uint64_t v16 = *(void *)(v3 + 72);
  swift_retain(v9);
  while (1)
  {
    sub_100410FD0(v15, (uint64_t)v7, &qword_1009B9828);
    unint64_t result = sub_100417CA0((uint64_t)v7, v17);
    if ((v19 & 1) != 0) {
      break;
    }
    unint64_t v20 = result;
    *(void *)(v13 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v21 = v10[6];
    uint64_t v22 = type metadata accessor for UUID(0LL, v19);
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v22 - 8) + 32LL))( v21 + *(void *)(*(void *)(v22 - 8) + 72LL) * v20,  v7,  v22);
    *(void *)(v10[7] + 8 * vmemset(v5, 170, 20) = *(void *)&v7[v12];
    uint64_t v23 = v10[2];
    BOOL v24 = __OFADD__(v23, 1LL);
    uint64_t v25 = v23 + 1;
    if (v24) {
      goto LABEL_12;
    }
    void v10[2] = v25;
    v15 += v16;
    if (!--v11)
    {
      swift_release(v10);
      uint64_t v26 = v28;
      goto LABEL_10;
    }
  }

  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_100411FFC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    __n128 v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_1003F5CB4(&qword_1009B9810);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  __n128 v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  uint64_t v6 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v7 = *v6;
    id v8 = (id)*(v6 - 1);
    swift_bridgeObjectRetain(v7);
    unint64_t result = sub_100417D64((uint64_t)v8);
    if ((v10 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v11 = 8 * result;
    *(void *)(v4[6] + v11) = v8;
    *(void *)(v4[7] + v11) = v7;
    uint64_t v12 = v4[2];
    BOOL v13 = __OFADD__(v12, 1LL);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    void v4[2] = v14;
    v6 += 2;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100412104(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    __n128 v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_1003F5CB4(&qword_1009B9818);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  __n128 v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  uint64_t v6 = (unint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v7 = *(v6 - 1);
    unint64_t v8 = *v6;
    id v9 = (id)*(v6 - 2);
    sub_1004028CC(v7, v8);
    unint64_t result = sub_100417D64((uint64_t)v9);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    *(void *)(v4[6] + 8 * result) = v9;
    uint64_t v12 = (uint64_t *)(v4[7] + 16 * result);
    uint64_t *v12 = v7;
    v12[1] = v8;
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v6 += 3;
    void v4[2] = v15;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t variable initialization expression of IDSDSessionKeyValueDelivery.l()
{
  return sub_10048ADB4(0xCu);
}

uint64_t variable initialization expression of IDSDSessionKeyValueDelivery.participantProvider()
{
  return 0LL;
}

uint64_t sub_100412230()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC17identityservicesd27IDSDSessionKeyValueDelivery_participantProvider;
  swift_beginAccess( v0 + OBJC_IVAR____TtC17identityservicesd27IDSDSessionKeyValueDelivery_participantProvider,  v3,  0LL,  0LL);
  return swift_unknownObjectWeakLoadStrong(v1);
}

uint64_t sub_10041227C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2 + OBJC_IVAR____TtC17identityservicesd27IDSDSessionKeyValueDelivery_participantProvider;
  swift_beginAccess(v5, v8, 1LL, 0LL);
  *(void *)(v5 + _Block_object_dispose(va, 8) = a2;
  swift_unknownObjectWeakAssign(v5, a1);
  return swift_unknownObjectRelease(a1, v6);
}

void (*sub_1004122E4(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC17identityservicesd27IDSDSessionKeyValueDelivery_participantProvider;
  void v3[5] = v1;
  void v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess(v1 + v4, v3, 33LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v5);
  uint64_t v7 = *(void *)(v5 + 8);
  void v3[3] = Strong;
  void v3[4] = v7;
  return sub_100412358;
}

void sub_100412358(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void *)(*(void *)a1 + 24LL);
  uint64_t v5 = *(void *)(*(void *)a1 + 32LL);
  uint64_t v6 = *(void *)(*(void *)a1 + 40LL) + *(void *)(*(void *)a1 + 48LL);
  *(void *)(v6 + _Block_object_dispose(va, 8) = v5;
  swift_unknownObjectWeakAssign(v6, v4);
  if ((a2 & 1) != 0)
  {
    swift_unknownObjectRelease(v3[3], v7);
    swift_endAccess(v3);
  }

  else
  {
    swift_endAccess(v3);
    swift_unknownObjectRelease(v4, v8);
  }

  free(v3);
}

uint64_t variable initialization expression of IDSDSessionKeyValueDelivery.state()
{
  v3[1] = sub_100411E68((uint64_t)&_swiftEmptyArrayStorage);
  v3[2] = sub_10041B96C((uint64_t)&_swiftEmptyArrayStorage);
  void v3[3] = sub_10041BA6C((uint64_t)&_swiftEmptyArrayStorage);
  sub_10041BBD8((uint64_t)v3, (uint64_t)v4);
  uint64_t v0 = sub_1003F5CB4((uint64_t *)&unk_1009B9590);
  uint64_t v1 = swift_allocObject(v0, 52LL, 7LL);
  *(_DWORD *)(v1 + 4_Block_object_dispose(va, 8) = 0;
  sub_10041BC18(v4, (void *)(v1 + 16));
  sub_10041BC28(v4);
  return v1;
}

id sub_100412468( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, void *a9)
{
  uint64_t v17 = a7[3];
  uint64_t v16 = a7[4];
  uint64_t v18 = sub_10041BC4C((uint64_t)a7, v17);
  id v21 = sub_10041BFB0(a1, a2, a3, a4, a5, a6, v18, a8, v19, v20, a9, v9, v17, v16);
  swift_unknownObjectRelease(a8, v22);

  swift_unknownObjectRelease(a1, v23);
  swift_unknownObjectRelease(a5, v24);
  sub_10040A648(a7);
  return v21;
}

id IDSDSessionKeyValueDelivery.__deallocating_deinit()
{
  uint64_t v1 = *(void *)&v0[OBJC_IVAR____TtC17identityservicesd27IDSDSessionKeyValueDelivery_state];
  swift_retain(v1);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 48));
  sub_1004125B0((void *)(v1 + 16));
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 48));
  swift_release(v1);
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for IDSDSessionKeyValueDelivery(0LL);
  return objc_msgSendSuper2(&v3, "dealloc");
}

uint64_t sub_1004125B0(void *a1)
{
  unint64_t v2 = sub_100411E68((uint64_t)&_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(a1[1]);
  a1[1] = v2;
  unint64_t v3 = sub_10041B96C((uint64_t)&_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(a1[2]);
  a1[2] = v3;
  unint64_t v4 = sub_10041BA6C((uint64_t)&_swiftEmptyArrayStorage);
  uint64_t result = swift_bridgeObjectRelease(a1[3]);
  a1[3] = v4;
  return result;
}

uint64_t sub_100412768(uint64_t a1)
{
  unint64_t v2 = sub_100411FFC((uint64_t)&_swiftEmptyArrayStorage);
  uint64_t v48 = a1 + 64;
  uint64_t v3 = 1LL << *(_BYTE *)(a1 + 32);
  if (v3 < 64) {
    uint64_t v4 = ~(-1LL << v3);
  }
  else {
    uint64_t v4 = -1LL;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v49 = (unint64_t)(v3 + 63) >> 6;
  uint64_t v50 = a1;
  swift_bridgeObjectRetain(a1);
  int64_t v6 = 0LL;
LABEL_6:
  unint64_t v54 = v2;
  if (!v5)
  {
    int64_t v10 = v6 + 1;
    if (__OFADD__(v6, 1LL)) {
      goto LABEL_60;
    }
    if (v10 >= v49) {
      goto LABEL_56;
    }
    unint64_t v11 = *(void *)(v48 + 8 * v10);
    int64_t v12 = v6 + 1;
    if (!v11)
    {
      int64_t v12 = v6 + 2;
      if (v6 + 2 >= v49) {
        goto LABEL_56;
      }
      unint64_t v11 = *(void *)(v48 + 8 * v12);
      if (!v11)
      {
        int64_t v12 = v6 + 3;
        if (v6 + 3 >= v49) {
          goto LABEL_56;
        }
        unint64_t v11 = *(void *)(v48 + 8 * v12);
        if (!v11)
        {
          uint64_t v13 = v6 + 4;
          if (v6 + 4 < v49)
          {
            unint64_t v11 = *(void *)(v48 + 8 * v13);
            if (v11)
            {
              int64_t v12 = v6 + 4;
              goto LABEL_21;
            }

            while (1)
            {
              int64_t v12 = v13 + 1;
              if (__OFADD__(v13, 1LL)) {
                goto LABEL_61;
              }
              if (v12 >= v49) {
                break;
              }
              unint64_t v11 = *(void *)(v48 + 8 * v12);
              ++v13;
              if (v11) {
                goto LABEL_21;
              }
            }
          }

uint64_t sub_100412C2C(uint64_t a1, Swift::UInt32 a2)
{
  uint64_t v3 = v2;
  sub_1003F5CB4(&qword_1009B9758);
  __chkstk_darwin(v6, v7);
  unint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for IDSDSessionKeyValueDeliveryLocalEntry(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(a1, 1LL, v10) == 1)
  {
    sub_10040A274(a1, &qword_1009B9758);
    unint64_t v16 = sub_100417D0C(a2);
    if ((v17 & 1) != 0)
    {
      unint64_t v18 = v16;
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
      uint64_t v20 = *v3;
      uint64_t v27 = *v3;
      uint64_t *v3 = 0x8000000000000000LL;
      if (!isUniquelyReferenced_nonNull_native)
      {
        sub_10041AA54();
        uint64_t v20 = v27;
      }

      sub_1003F600C( *(void *)(v20 + 56) + *(void *)(v11 + 72) * v18,  (uint64_t)v9,  type metadata accessor for IDSDSessionKeyValueDeliveryLocalEntry);
      sub_100419820(v18, v20);
      uint64_t v21 = *v3;
      uint64_t *v3 = v20;
      swift_bridgeObjectRelease(v21);
      uint64_t v22 = 0LL;
    }

    else
    {
      uint64_t v22 = 1LL;
    }

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, v22, 1LL, v10);
    return sub_10040A274((uint64_t)v9, &qword_1009B9758);
  }

  else
  {
    sub_1003F600C(a1, (uint64_t)v15, type metadata accessor for IDSDSessionKeyValueDeliveryLocalEntry);
    char v23 = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v27 = *v3;
    uint64_t *v3 = 0x8000000000000000LL;
    sub_100419F2C((uint64_t)v15, a2, v23);
    uint64_t v24 = *v3;
    uint64_t *v3 = v27;
    return swift_bridgeObjectRelease(v24);
  }

void IDSDSessionKeyValueDelivery.add(deliveryHandler:uuid:)(void *a1, uint64_t a2)
{
  unint64_t v5 = *(os_unfair_lock_s **)((char *)v2 + OBJC_IVAR____TtC17identityservicesd27IDSDSessionKeyValueDelivery_state);
  uint64_t v6 = (uint64_t)&v5[4];
  __n128 v7 = v5 + 12;
  os_unfair_lock_lock(v5 + 12);
  sub_100412E68(v6, v2, a2, a1);
  os_unfair_lock_unlock(v7);
}

void sub_100412E68(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = type metadata accessor for UUID(0LL, a2);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v10, v11);
  uint64_t v79 = (char *)&v76 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13, v14);
  unint64_t v81 = (char *)&v76 - v15;
  __chkstk_darwin(v16, v17);
  unint64_t v19 = (char *)&v76 - v18;
  uint64_t v20 = (char *)v6 + OBJC_IVAR____TtC17identityservicesd27IDSDSessionKeyValueDelivery_l;
  uint64_t v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16);
  uint64_t v80 = a3;
  uint64_t v22 = v21((char *)&v76 - v18, a3, v8);
  os_log_t v82 = v20;
  char v23 = (os_log_s *)Logger.logObject.getter(v22);
  os_log_type_t v24 = static os_log_type_t.default.getter();
  BOOL v25 = os_log_type_enabled(v23, v24);
  uint64_t v83 = (void (*)(char *, uint64_t, uint64_t))v21;
  if (v25)
  {
    uint64_t v26 = swift_slowAlloc(12LL, -1LL);
    unint64_t v78 = v6;
    uint64_t v27 = (uint8_t *)v26;
    uint64_t v28 = swift_slowAlloc(32LL, -1LL);
    uint64_t v76 = a1;
    uint64_t v29 = v28;
    uint64_t v85 = (void (*)(void, void, void))v28;
    *(_DWORD *)uint64_t v27 = 136315138;
    unint64_t v77 = a4;
    uint64_t v30 = sub_10040A2B0( &qword_1009B95C0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter(v8, v30);
    unint64_t v33 = v32;
    uint64_t v84 = sub_1003FFBB0(v31, v32, (uint64_t *)&v85);
    a4 = v77;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, &v85, v27 + 4, v27 + 12);
    swift_bridgeObjectRelease(v33);
    unint64_t v34 = *(void (**)(char *, uint64_t))(v9 + 8);
    v34(v19, v8);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "add delivery handler with uuid %s", v27, 0xCu);
    swift_arrayDestroy(v29, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v35 = v29;
    a1 = v76;
    swift_slowDealloc(v35, -1LL, -1LL);
    BOOL v36 = v27;
    uint64_t v6 = v78;
    swift_slowDealloc(v36, -1LL, -1LL);
  }

  else
  {

    unint64_t v34 = *(void (**)(char *, uint64_t))(v9 + 8);
    v34(v19, v8);
  }

  uint64_t v38 = (uint64_t)v81;
  uint64_t v39 = v80;
  char v40 = (void *)(a1 + 8);
  uint64_t v41 = *(void *)(a1 + 8);
  if (*(void *)(v41 + 16) && (unint64_t v42 = sub_100417CA0(v80, v37), (v43 & 1) != 0))
  {
    uint64_t v44 = *(void **)(*(void *)(v41 + 56) + 8 * v42);
    id v45 = v79;
    v83(v79, v39, v8);
    uint64_t v46 = swift_unknownObjectRetain_n(v44, 3LL);
    uint64_t v47 = (os_log_s *)Logger.logObject.getter(v46);
    os_log_type_t v48 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v47, v48))
    {
      uint64_t v49 = swift_slowAlloc(22LL, -1LL);
      uint64_t v83 = (void (*)(char *, uint64_t, uint64_t))swift_slowAlloc(64LL, -1LL);
      uint64_t v85 = (void (*)(void, void, void))v83;
      *(_DWORD *)uint64_t v49 = 136315394;
      uint64_t v50 = sub_10040A2B0( &qword_1009B95C0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v51 = dispatch thunk of CustomStringConvertible.description.getter(v8, v50);
      unint64_t v53 = v52;
      uint64_t v84 = sub_1003FFBB0(v51, v52, (uint64_t *)&v85);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, &v85, v49 + 4, v49 + 12);
      swift_bridgeObjectRelease(v53);
      v34(v45, v8);
      *(_WORD *)(v49 + 12) = 2080;
      id v54 = [v44 description];
      uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
      unint64_t v57 = v56;

      uint64_t v84 = sub_1003FFBB0(v55, v57, (uint64_t *)&v85);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, &v85, v49 + 14, v49 + 22);
      swift_unknownObjectRelease_n(v44, 2LL);
      swift_bridgeObjectRelease(v57);
      _os_log_impl( (void *)&_mh_execute_header,  v47,  v48,  "... already added handler with uuid %s: %s",  (uint8_t *)v49,  0x16u);
      uint64_t v58 = v83;
      swift_arrayDestroy(v83, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v58, -1LL, -1LL);
      swift_slowDealloc(v49, -1LL, -1LL);

      swift_unknownObjectRelease(v44, v59);
    }

    else
    {

      swift_unknownObjectRelease(v44, v75);
      v34(v45, v8);
      swift_unknownObjectRelease_n(v44, 2LL);
    }
  }

  else
  {
    v83((char *)v38, v39, v8);
    if (a4)
    {
      swift_unknownObjectRetain(a4, v60);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v40);
      uint64_t v85 = (void (*)(void, void, void))*v40;
      *char v40 = 0x8000000000000000LL;
      sub_100419B60((uint64_t)a4, v38, isUniquelyReferenced_nonNull_native);
      uint64_t v62 = *v40;
      *char v40 = v85;
      swift_bridgeObjectRelease(v62);
      uint64_t v63 = ((uint64_t (*)(uint64_t, uint64_t))v34)(v38, v8);
    }

    else
    {
      uint64_t v64 = sub_100418298(v38);
      v34((char *)v38, v8);
      uint64_t v63 = swift_unknownObjectRelease(v64, v65);
    }

    uint64_t v66 = (os_log_s *)Logger.logObject.getter(v63);
    os_log_type_t v67 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v66, v67))
    {
      uint64_t v68 = a1;
      unint64_t v69 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v69 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v66,  v67,  "sending all cached data to the new delivery handler",  v69,  2u);
      unint64_t v70 = v69;
      a1 = v68;
      swift_slowDealloc(v70, -1LL, -1LL);
    }

    if (a4)
    {
      uint64_t v71 = (*(uint64_t (**)(void))((swift_isaMask & *v6) + 0xB0LL))(*(void *)(a1 + 16));
      sub_10041D3C4(0LL, (unint64_t *)&unk_1009BACA0, &OBJC_CLASS___NSNumber_ptr);
      sub_1003F5CB4(&qword_1009B9798);
      sub_10041D320();
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v71);
      [a4 handleGroupSessionKeyValues:isa];
    }

    id v73 =  [*(id *)((char *)v6 + OBJC_IVAR____TtC17identityservicesd27IDSDSessionKeyValueDelivery_metricsCollector) keyValueDelivery];
    NSString v74 = String._bridgeToObjectiveC()();
    [v73 event:v74];
  }

void IDSDSessionKeyValueDelivery.remove(deliveryHandlerWithUUID:)(uint64_t a1)
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC17identityservicesd27IDSDSessionKeyValueDelivery_state);
  uint64_t v4 = (uint64_t)&v3[4];
  unint64_t v5 = v3 + 12;
  os_unfair_lock_lock(v3 + 12);
  sub_100413524(v4, v1, a1);
  os_unfair_lock_unlock(v5);
}

uint64_t sub_100413524(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for UUID(0LL, a2);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v7, v8);
  __n128 v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16))(v10, a3, v5);
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc(12LL, -1LL);
    uint64_t v24 = a1;
    uint64_t v15 = (uint8_t *)v14;
    uint64_t v16 = swift_slowAlloc(32LL, -1LL);
    uint64_t v27 = v16;
    *(_DWORD *)uint64_t v15 = 136315138;
    uint64_t v25 = a3;
    uint64_t v17 = sub_10040A2B0( &qword_1009B95C0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter(v5, v17);
    unint64_t v20 = v19;
    uint64_t v26 = sub_1003FFBB0(v18, v19, &v27);
    a3 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease(v20);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "remove delivery handler with uuid %s", v15, 0xCu);
    swift_arrayDestroy(v16, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1LL, -1LL);
    swift_slowDealloc(v15, -1LL, -1LL);
  }

  else
  {

    (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
  }

  uint64_t v21 = sub_100418298(a3);
  return swift_unknownObjectRelease(v21, v22);
}

uint64_t IDSDSessionKeyValueDelivery.addHandler(_:uuid:)()
{
  return (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xB8LL))();
}

uint64_t IDSDSessionKeyValueDelivery.removeHandler(_:)()
{
  return (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xC0LL))();
}

uint64_t sub_1004138E0(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = *(void *)((char *)v2 + OBJC_IVAR____TtC17identityservicesd27IDSDSessionKeyValueDelivery_groupID);
  unint64_t v3 = *(void *)((char *)v2 + OBJC_IVAR____TtC17identityservicesd27IDSDSessionKeyValueDelivery_groupID + 8);
  BOOL v5 = v4 == a1 && v3 == a2;
  if (v5
    || (_stringCompareWithSmolCheck(_:_:expecting:)( a1,  a2,  *(void *)((char *)v2 + OBJC_IVAR____TtC17identityservicesd27IDSDSessionKeyValueDelivery_groupID),  *(void *)((char *)v2 + OBJC_IVAR____TtC17identityservicesd27IDSDSessionKeyValueDelivery_groupID + 8),  0LL) & 1) != 0)
  {
    return (*(uint64_t (**)(void))((swift_isaMask & *v2) + 0xE0LL))();
  }

  swift_bridgeObjectRetain_n(a2, 2LL);
  uint64_t v9 = v2;
  __n128 v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc(32LL, -1LL);
    uint64_t v13 = swift_slowAlloc(96LL, -1LL);
    uint64_t v15 = v13;
    *(_DWORD *)uint64_t v12 = 136315650;
    uint64_t v14 = sub_1003FFBB0(0xD000000000000033LL, 0x800000010083ED70LL, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v12 + 4, v12 + 12);
    *(_WORD *)(v12 + 12) = 2080;
    swift_bridgeObjectRetain(a2);
    uint64_t v14 = sub_1003FFBB0(a1, a2, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v12 + 14, v12 + 22);
    swift_bridgeObjectRelease_n(a2, 3LL);
    *(_WORD *)(v12 + 22) = 2080;
    swift_bridgeObjectRetain(v3);
    uint64_t v14 = sub_1003FFBB0(v4, v3, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v12 + 24, v12 + 32);

    swift_bridgeObjectRelease(v3);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "%s: groupID doesn't match: %s, %s", (uint8_t *)v12, 0x20u);
    swift_arrayDestroy(v13, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1LL, -1LL);
    swift_slowDealloc(v12, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a2, 2LL);
  }

  return 0LL;
}

id IDSDSessionKeyValueDelivery.objcMaterials.getter()
{
  uint64_t v36 = (uint64_t)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v10, v11);
  uint64_t v14 = (char *)&v34 - v13;
  uint64_t v15 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v0) + 0xF0LL))(v12);
  id result = [objc_allocWithZone(NSMutableSet) init];
  int64_t v17 = 0LL;
  uint64_t v18 = *(void *)(v15 + 56);
  id v37 = result;
  uint64_t v38 = v15 + 56;
  uint64_t v19 = 1LL << *(_BYTE *)(v15 + 32);
  uint64_t v20 = -1LL;
  if (v19 < 64) {
    uint64_t v20 = ~(-1LL << v19);
  }
  unint64_t v21 = v20 & v18;
  int64_t v39 = (unint64_t)(v19 + 63) >> 6;
  uint64_t v22 = type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer;
  uint64_t v35 = v9;
  if ((v20 & v18) != 0) {
    goto LABEL_6;
  }
LABEL_7:
  int64_t v25 = v17 + 1;
  if (!__OFADD__(v17, 1LL))
  {
    if (v25 < v39)
    {
      unint64_t v26 = *(void *)(v38 + 8 * v25);
      ++v17;
      if (v26) {
        goto LABEL_20;
      }
      int64_t v17 = v25 + 1;
      if (v25 + 1 >= v39) {
        goto LABEL_24;
      }
      unint64_t v26 = *(void *)(v38 + 8 * v17);
      if (v26) {
        goto LABEL_20;
      }
      int64_t v17 = v25 + 2;
      if (v25 + 2 >= v39) {
        goto LABEL_24;
      }
      unint64_t v26 = *(void *)(v38 + 8 * v17);
      if (v26)
      {
LABEL_20:
        unint64_t v21 = (v26 - 1) & v26;
        for (unint64_t i = __clz(__rbit64(v26)) + (v17 << 6); ; unint64_t i = v23 | (v17 << 6))
        {
          sub_1003F5FC8(*(void *)(v15 + 48) + *(void *)(v5 + 72) * i, (uint64_t)v14, v22);
          sub_1003F600C((uint64_t)v14, (uint64_t)v9, v22);
          if (swift_getEnumCaseMultiPayload(v9, v4) == 1)
          {
            uint64_t v28 = (uint64_t)v9;
            uint64_t v29 = v14;
            uint64_t v30 = v22;
            uint64_t v31 = v36;
            sub_1003F600C(v28, v36, type metadata accessor for IDSGroupEncryptionDesiredKeyValueMaterialSet);
            id v32 = sub_10040EB60();
            [v37 addObject:v32];

            uint64_t v33 = v31;
            uint64_t v22 = v30;
            uint64_t v14 = v29;
            uint64_t v9 = v35;
            id result = (id)sub_1003F6050(v33, type metadata accessor for IDSGroupEncryptionDesiredKeyValueMaterialSet);
            if (!v21) {
              goto LABEL_7;
            }
          }

          else
          {
            id result = (id)sub_1003F6050((uint64_t)v9, v22);
            if (!v21) {
              goto LABEL_7;
            }
          }

void *sub_100413ED0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)((char *)v2 + OBJC_IVAR____TtC17identityservicesd27IDSDSessionKeyValueDelivery_groupID);
  uint64_t v4 = *(void *)((char *)v2 + OBJC_IVAR____TtC17identityservicesd27IDSDSessionKeyValueDelivery_groupID + 8);
  if (v3 == a1 && v4 == a2) {
    return (void *)(*(uint64_t (**)(void))((swift_isaMask & *v2) + 0xF0LL))();
  }
  uint64_t v6 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v3, v4, 0LL);
  if ((v6 & 1) != 0) {
    return (void *)(*(uint64_t (**)(void))((swift_isaMask & *v2) + 0xF0LL))();
  }
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    __n128 v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v11 = swift_slowAlloc(32LL, -1LL);
    uint64_t v13 = v11;
    *(_DWORD *)__n128 v10 = 136315138;
    uint64_t v12 = sub_1003FFBB0(0xD000000000000027LL, 0x800000010083EDB0LL, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13, v10 + 4, v10 + 12);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%s: group id mismatch", v10, 0xCu);
    swift_arrayDestroy(v11, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  return &_swiftEmptySetSingleton;
}

uint64_t sub_100414064()
{
  __n128 v1 = *(os_unfair_lock_s **)((char *)v0 + OBJC_IVAR____TtC17identityservicesd27IDSDSessionKeyValueDelivery_state);
  uint64_t v2 = (uint64_t)&v1[4];
  uint64_t v3 = v1 + 12;
  os_unfair_lock_lock(v1 + 12);
  sub_1004140C4(v2, v0, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

void sub_1004140C4(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = a2;
  uint64_t v150 = a3;
  uint64_t v5 = type metadata accessor for UUID(0LL, a2);
  uint64_t v172 = *(void *)(v5 - 8);
  __chkstk_darwin(v6, v7);
  uint64_t v171 = (char *)&v148 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v170 = type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer(0LL);
  __chkstk_darwin(v9, v10);
  uint64_t v169 = (uint64_t)&v148 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12, v13);
  uint64_t v168 = (uint64_t)&v148 - v14;
  sub_1003F5CB4(&qword_1009B97A8);
  __chkstk_darwin(v15, v16);
  uint64_t v18 = (char *)&v148 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
  uint64_t v184 = *(void *)(v19 - 8);
  uint64_t v185 = v19;
  __chkstk_darwin(v20, v21);
  uint64_t v167 = (uint64_t)&v148 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v23, v24);
  unint64_t v26 = (char *)&v148 - v25;
  uint64_t v27 = type metadata accessor for IDSDSessionKeyValueDeliveryLocalEntry(0LL);
  uint64_t v155 = *(void *)(v27 - 8);
  __chkstk_darwin(v28, v29);
  uint64_t v166 = (uint64_t)&v148 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v31, v32);
  uint64_t v175 = (uint64_t *)((char *)&v148 - v33);
  sub_1003F5CB4(&qword_1009B97B0);
  __chkstk_darwin(v34, v35);
  char v164 = (char *)&v148 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v37, v38);
  char v40 = (_DWORD *)((char *)&v148 - v39);
  uint64_t v193 = &_swiftEmptySetSingleton;
  uint64_t v41 = *(void *)(a1 + 24);
  uint64_t v42 = *(void *)(v41 + 64);
  uint64_t v151 = v41 + 64;
  uint64_t v43 = 1LL << *(_BYTE *)(v41 + 32);
  if (v43 < 64) {
    uint64_t v44 = ~(-1LL << v43);
  }
  else {
    uint64_t v44 = -1LL;
  }
  unint64_t v45 = v44 & v42;
  uint64_t v154 = OBJC_IVAR____TtC17identityservicesd27IDSDSessionKeyValueDelivery_pushTokensForCapabilityProvider;
  unint64_t v153 = (char *)v3 + OBJC_IVAR____TtC17identityservicesd27IDSDSessionKeyValueDelivery_groupID;
  uint64_t v165 = (char *)v3 + OBJC_IVAR____TtC17identityservicesd27IDSDSessionKeyValueDelivery_l;
  int64_t v152 = (unint64_t)(v43 + 63) >> 6;
  int64_t v149 = v152 - 1;
  uint64_t v156 = v41;
  __n128 v46 = swift_bridgeObjectRetain(v41);
  int64_t v158 = 0LL;
  v46.n128_u64[0] = 136315394LL;
  __n128 v160 = v46;
  uint64_t v159 = (char *)&type metadata for Any + 8;
  uint64_t v176 = (char *)&type metadata for Swift.AnyObject + 8;
  uint64_t v177 = v3;
  char v161 = v40;
  uint64_t v173 = v5;
  uint64_t v186 = v18;
  uint64_t v181 = v26;
  uint64_t v174 = v27;
LABEL_6:
  if (!v45)
  {
    int64_t v54 = v158 + 1;
    os_log_type_t v48 = v175;
    uint64_t v49 = v164;
    if (__OFADD__(v158, 1LL)) {
      goto LABEL_109;
    }
    if (v54 < v152)
    {
      unint64_t v55 = *(void *)(v151 + 8 * v54);
      if (v55)
      {
LABEL_12:
        uint64_t v163 = (v55 - 1) & v55;
        unint64_t v47 = __clz(__rbit64(v55)) + (v54 << 6);
        int64_t v158 = v54;
        goto LABEL_8;
      }

      int64_t v56 = v158 + 2;
      ++v158;
      if (v54 + 1 < v152)
      {
        unint64_t v55 = *(void *)(v151 + 8 * v56);
        if (v55)
        {
LABEL_15:
          int64_t v54 = v56;
          goto LABEL_12;
        }

        int64_t v158 = v54 + 1;
        if (v54 + 2 < v152)
        {
          unint64_t v55 = *(void *)(v151 + 8 * (v54 + 2));
          if (v55)
          {
            v54 += 2LL;
            goto LABEL_12;
          }

          int64_t v56 = v54 + 3;
          int64_t v158 = v54 + 2;
          if (v54 + 3 < v152)
          {
            unint64_t v55 = *(void *)(v151 + 8 * v56);
            if (v55) {
              goto LABEL_15;
            }
            while (1)
            {
              int64_t v54 = v56 + 1;
              if (__OFADD__(v56, 1LL)) {
                goto LABEL_110;
              }
              if (v54 >= v152) {
                break;
              }
              unint64_t v55 = *(void *)(v151 + 8 * v54);
              ++v56;
              if (v55) {
                goto LABEL_12;
              }
            }

            int64_t v158 = v149;
          }
        }
      }
    }

    uint64_t v57 = sub_1003F5CB4(&qword_1009B97B8);
    (*(void (**)(_DWORD *, uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 56LL))(v49, 1LL, 1LL, v57);
    uint64_t v163 = 0LL;
    goto LABEL_27;
  }

  uint64_t v163 = (v45 - 1) & v45;
  unint64_t v47 = __clz(__rbit64(v45)) | (v158 << 6);
  os_log_type_t v48 = v175;
  uint64_t v49 = v164;
LABEL_8:
  uint64_t v50 = *(void *)(v156 + 56);
  *uint64_t v49 = *(_DWORD *)(*(void *)(v156 + 48) + 4 * v47);
  uint64_t v51 = v50 + *(void *)(v155 + 72) * v47;
  uint64_t v52 = sub_1003F5CB4(&qword_1009B97B8);
  uint64_t v53 = v51;
  uint64_t v49 = v164;
  sub_1003F5FC8( v53,  (uint64_t)&v164[*(int *)(v52 + 48)],  type metadata accessor for IDSDSessionKeyValueDeliveryLocalEntry);
  (*(void (**)(_DWORD *, void, uint64_t, uint64_t))(*(void *)(v52 - 8) + 56LL))(v49, 0LL, 1LL, v52);
  char v40 = v161;
LABEL_27:
  sub_10041D378((uint64_t)v49, (uint64_t)v40, &qword_1009B97B0);
  uint64_t v58 = sub_1003F5CB4(&qword_1009B97B8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(*(void *)(v58 - 8) + 48LL))(v40, 1LL, v58) == 1)
  {
    swift_release(v156);
    void *v150 = v193;
    return;
  }

  unsigned int v179 = *v40;
  sub_1003F600C( (uint64_t)v40 + *(int *)(v58 + 48),  (uint64_t)v48,  type metadata accessor for IDSDSessionKeyValueDeliveryLocalEntry);
  uint64_t v59 = v48[4];
  if (v59)
  {
    uint64_t v60 = *(void **)((char *)v3 + v154);
    swift_bridgeObjectRetain(v48[4]);
    uint64_t v3 = v177;
    NSString v61 = String._bridgeToObjectiveC()();
    NSString v62 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v59);
    id v63 = [v60 pushTokensForGroupID:v61 capability:v62];

    uint64_t v64 = sub_10041D3C4(0LL, (unint64_t *)&qword_1009BBE30, &OBJC_CLASS___IDSPushToken_ptr);
    uint64_t v65 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v63, v64);
  }

  else
  {
    uint64_t v65 = 0LL;
  }

  uint64_t v66 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v3) + 0x90LL))();
  if (v66)
  {
    uint64_t v68 = v66;
    uint64_t v69 = v67;
    uint64_t ObjectType = swift_getObjectType(v66);
    uint64_t v71 = (*(uint64_t (**)(uint64_t, uint64_t))(v69 + 16))(ObjectType, v69);
    uint64_t v66 = (void *)swift_unknownObjectRelease(v68, v72);
  }

  else
  {
    uint64_t v71 = (uint64_t)&_swiftEmptySetSingleton;
    if (((unint64_t)&_swiftEmptyArrayStorage & 0xC000000000000000LL) != 0)
    {
      uint64_t v66 = (void *)_CocoaArrayWrapper.endIndex.getter(&_swiftEmptyArrayStorage);
      if (v66)
      {
        sub_10041C0F0((uint64_t)&_swiftEmptyArrayStorage);
        uint64_t v71 = (uint64_t)v66;
      }
    }
  }

  if ((v71 & 0xC000000000000001LL) != 0)
  {
    if (v71 < 0) {
      uint64_t v73 = v71;
    }
    else {
      uint64_t v73 = v71 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v74 = __CocoaSet.makeIterator()(v73);
    uint64_t v75 = type metadata accessor for IDSGroupEncryptionControllerParticipant(0LL);
    uint64_t v76 = sub_10040A2B0( (unint64_t *)&unk_1009B97C0,  type metadata accessor for IDSGroupEncryptionControllerParticipant,  (uint64_t)&protocol conformance descriptor for NSObject);
    uint64_t v66 = Set.Iterator.init(_cocoa:)(v194, v74, v75, v76);
    uint64_t v71 = v194[0];
    uint64_t v183 = v194[1];
    uint64_t v77 = v194[2];
    uint64_t v78 = v194[3];
    unint64_t v79 = v194[4];
  }

  else
  {
    uint64_t v78 = 0LL;
    uint64_t v80 = -1LL << *(_BYTE *)(v71 + 32);
    uint64_t v81 = *(void *)(v71 + 56);
    uint64_t v183 = v71 + 56;
    uint64_t v82 = ~v80;
    uint64_t v83 = -v80;
    if (v83 < 64) {
      uint64_t v84 = ~(-1LL << v83);
    }
    else {
      uint64_t v84 = -1LL;
    }
    unint64_t v79 = v84 & v81;
    uint64_t v77 = v82;
  }

  uint64_t v178 = v71 & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v162 = v77;
  int64_t v180 = (unint64_t)(v77 + 64) >> 6;
  uint64_t v85 = v65 & 0xFFFFFFFFFFFFFF8LL;
  uint64_t v187 = v65 & 0xFFFFFFFFFFFFFF8LL;
  if (v65 < 0) {
    uint64_t v85 = v65;
  }
  uint64_t v157 = v85;
  unint64_t v182 = v65 & 0xC000000000000001LL;
  uint64_t v188 = v71;
  uint64_t v189 = v65;
  while (1)
  {
    while (1)
    {
      if (v71 < 0)
      {
        uint64_t v88 = __CocoaSet.Iterator.next()(v66);
        if (!v88) {
          goto LABEL_5;
        }
        uint64_t v89 = v88;
        uint64_t v191 = v88;
        uint64_t v90 = type metadata accessor for IDSGroupEncryptionControllerParticipant(0LL);
        swift_unknownObjectRetain(v89, v91);
        swift_dynamicCast(&v192, &v191, v176, v90, 7LL);
        uint64_t v92 = v192;
        uint64_t v94 = (void *)swift_unknownObjectRelease(v89, v93);
        uint64_t v87 = v78;
        uint64_t v190 = v79;
        if (!v92) {
          goto LABEL_5;
        }
      }

      else
      {
        if (v79)
        {
          uint64_t v190 = (v79 - 1) & v79;
          unint64_t v86 = __clz(__rbit64(v79)) | (v78 << 6);
          uint64_t v87 = v78;
        }

        else
        {
          int64_t v95 = v78 + 1;
          if (__OFADD__(v78, 1LL))
          {
            __break(1u);
LABEL_107:
            __break(1u);
            goto LABEL_108;
          }

          if (v95 >= v180) {
            goto LABEL_5;
          }
          unint64_t v96 = *(void *)(v183 + 8 * v95);
          uint64_t v87 = v78 + 1;
          if (!v96)
          {
            uint64_t v87 = v78 + 2;
            if (v78 + 2 >= v180) {
              goto LABEL_5;
            }
            unint64_t v96 = *(void *)(v183 + 8 * v87);
            if (!v96)
            {
              uint64_t v87 = v78 + 3;
              if (v78 + 3 >= v180) {
                goto LABEL_5;
              }
              unint64_t v96 = *(void *)(v183 + 8 * v87);
              if (!v96)
              {
                uint64_t v87 = v78 + 4;
                if (v78 + 4 >= v180) {
                  goto LABEL_5;
                }
                unint64_t v96 = *(void *)(v183 + 8 * v87);
                if (!v96)
                {
                  uint64_t v97 = v78 + 5;
                  while (v180 != v97)
                  {
                    unint64_t v96 = *(void *)(v183 + 8 * v97++);
                    if (v96)
                    {
                      uint64_t v87 = v97 - 1;
                      goto LABEL_66;
                    }
                  }

LABEL_66:
          uint64_t v190 = (v96 - 1) & v96;
          unint64_t v86 = __clz(__rbit64(v96)) + (v87 << 6);
        }

        uint64_t v94 = *(id *)(*(void *)(v71 + 48) + 8 * v86);
        uint64_t v92 = v94;
        if (!v94) {
          goto LABEL_5;
        }
      }

      if (!v65) {
        goto LABEL_75;
      }
      uint64_t v98 = *(void **)((char *)v92
                     + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_pushToken);
      if ((unint64_t)v65 >> 62)
      {
        swift_bridgeObjectRetain_n(v65, 2LL);
        id v147 = v98;
        uint64_t v99 = _CocoaArrayWrapper.endIndex.getter(v157);
        if (!v99) {
          goto LABEL_46;
        }
      }

      else
      {
        uint64_t v99 = *(void *)(v187 + 16);
        swift_bridgeObjectRetain_n(v65, 2LL);
        id v100 = v98;
        if (!v99) {
          goto LABEL_46;
        }
      }

      if (v182) {
        id v101 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v65);
      }
      else {
        id v101 = *(id *)(v65 + 32);
      }
      unint64_t v102 = v101;
      sub_10041D3C4(0LL, (unint64_t *)&qword_1009BBE30, &OBJC_CLASS___IDSPushToken_ptr);
      char v103 = static NSObject.== infix(_:_:)(v102, v98);

      if ((v103 & 1) != 0) {
        goto LABEL_74;
      }
      uint64_t v65 = v189;
      if (v99 != 1) {
        break;
      }
LABEL_46:

      swift_bridgeObjectRelease_n(v65, 2LL);
      uint64_t v78 = v87;
      unint64_t v79 = v190;
      uint64_t v71 = v188;
    }

    if (!v182) {
      break;
    }
    uint64_t v132 = specialized _ArrayBuffer._getElementSlowPath(_:)(1LL, v189);
    char v133 = static NSObject.== infix(_:_:)(v132, v98);
    swift_unknownObjectRelease(v132, v134);
    if ((v133 & 1) == 0)
    {
      uint64_t v65 = v189;
      if (v99 != 2)
      {
        uint64_t v135 = 2LL;
        while (1)
        {
          uint64_t v136 = specialized _ArrayBuffer._getElementSlowPath(_:)(v135, v65);
          uint64_t v137 = v135 + 1;
          if (__OFADD__(v135, 1LL)) {
            goto LABEL_107;
          }
          uint64_t v138 = v136;
          char v139 = static NSObject.== infix(_:_:)(v136, v98);
          swift_unknownObjectRelease(v138, v140);
          if ((v139 & 1) != 0) {
            goto LABEL_74;
          }
          ++v135;
          uint64_t v65 = v189;
          if (v137 == v99) {
            goto LABEL_46;
          }
        }
      }

      goto LABEL_46;
    }

  int64_t v54 = 64LL;
LABEL_67:
  if (v10) {
    unint64_t v55 = 3.0;
  }
  else {
    unint64_t v55 = v9;
  }
  if (v65) {
    int64_t v56 = 420.0;
  }
  else {
    int64_t v56 = (double)v66;
  }
  if (v63) {
    uint64_t v57 = 3600.0;
  }
  else {
    uint64_t v57 = (double)v64;
  }
  uint64_t v58 = *(uint64_t (**)(uint64_t, unint64_t, unint64_t, unint64_t))(*(void *)a2 + 88LL);
  uint64_t v59 = v58(0x6C7070612E6D6F63LL, 0xED00007364692E65LL, 0xD000000000000019LL, 0x8000000100840A90LL);
  uint64_t v60 = (v59 == 2) | v59;
  NSString v61 = v58(0x6C7070612E6D6F63LL, 0xED00007364692E65LL, 0xD000000000000019LL, 0x8000000100840AB0LL);
  return (*(uint64_t (**)(uint64_t, void, void, void, double, double, double, double, double, double))(a3 + 160))( v54,  v60 & 1,  (v61 == 2) | (v61 & 1),  (v45 == 2) | v45 & 1u,  v56,  v57,  v55,  30.0,  v11,  v12);
}

  unsigned int v106 = sub_10041D3BC((uint64_t)v233);
  if ((v216 & 1) == 0)
  {
    unsigned int v107 = v229;
    unint64_t v108 = v212;
    static DispatchTime.now()(v106);
    uint64_t v17 = v208;
    + infix(_:_:)(v108);
    uint64_t v27 = *(_BYTE **)(v207 + 8);
    uint64_t v109 = v209;
    ((void (*)(_BYTE *, uint64_t))v27)(v108, v209);
    unint64_t v110 = swift_allocObject(&unk_100907538, 24LL, 7LL);
    *(void *)(v110 + swift_unknownObjectWeakDestroy(v0 + 16) = v107;
    uint64_t v239 = sub_1004B2944;
    v240 = (void *)v110;
    aBlock = _NSConcreteStackBlock;
    __int16 v236 = 1107296256LL;
    id v237 = sub_1003F8400;
    __int16 v238 = &unk_100907550;
    uint64_t v111 = _Block_copy(&aBlock);
    uint64_t v112 = v107;
    uint64_t v113 = v217;
    static DispatchQoS.unspecified.getter(v112);
    v247[0] = _swiftEmptyArrayStorage;
    uint64_t v114 = sub_10040A2B0( (unint64_t *)&unk_1009BAC40,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v115 = sub_1003F5CB4((uint64_t *)&unk_1009B9870);
    uint64_t v116 = sub_1004021DC((unint64_t *)&qword_1009BAC50, (uint64_t *)&unk_1009B9870);
    uint64_t v117 = v220;
    uint64_t v118 = v115;
    uint64_t v119 = v214;
    dispatch thunk of SetAlgebra.init<A>(_:)(v247, v118, v116, v214, v114);
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v17, v113, v117, v111);
    _Block_release(v111);
    (*(void (**)(_BYTE *, unint64_t))(v213 + 8))(v117, v119);
    (*(void (**)(_BYTE *, uint64_t))(v218 + 8))(v113, v219);
    ((void (*)(uint64_t, uint64_t))v27)(v17, v109);
    swift_release(v240);
  }

  unint64_t v120 = v245;
  if ((v245 & 0xC000000000000001LL) == 0)
  {
    if (!*(void *)(v245 + 16)) {
      goto LABEL_102;
    }
    uint64_t v128 = -1LL << *(_BYTE *)(v245 + 32);
    __n128 v31 = (_BYTE *)(v245 + 56);
    unint64_t v127 = ~v128;
    uint64_t v129 = -v128;
    if (v129 < 64) {
      unint64_t v130 = ~(-1LL << v129);
    }
    else {
      unint64_t v130 = -1LL;
    }
    __n128 v1 = v130 & *(void *)(v245 + 56);
    swift_bridgeObjectRetain(v245);
    uint64_t v2 = 0LL;
LABEL_79:
    __n128 v38 = (_BYTE *)(v120 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v233 = (void *)v127;
    for (i = (unint64_t)(v127 + 64) >> 6; (v120 & 0x8000000000000000LL) == 0; __n128 v1 = (unint64_t)v27)
    {
      if (v1)
      {
        uint64_t v27 = (_BYTE *)((v1 - 1) & v1);
        uint64_t v138 = __clz(__rbit64(v1)) | (v2 << 6);
        uint64_t v17 = v2;
      }

      else
      {
        char v139 = v2 + 1;
        if (__OFADD__(v2, 1LL)) {
          goto LABEL_129;
        }
        if (v139 >= i) {
          goto LABEL_103;
        }
        uint64_t v140 = *(void *)&v31[8 * v139];
        uint64_t v17 = v2 + 1;
        if (!v140)
        {
          uint64_t v17 = v2 + 2;
          if (v2 + 2 >= i) {
            goto LABEL_103;
          }
          uint64_t v140 = *(void *)&v31[8 * v17];
          if (!v140)
          {
            uint64_t v17 = v2 + 3;
            if (v2 + 3 >= i) {
              goto LABEL_103;
            }
            uint64_t v140 = *(void *)&v31[8 * v17];
            if (!v140)
            {
              uint64_t v17 = v2 + 4;
              if (v2 + 4 >= i) {
                goto LABEL_103;
              }
              uint64_t v140 = *(void *)&v31[8 * v17];
              if (!v140)
              {
                id v141 = v2 + 5;
                while (i != v141)
                {
                  uint64_t v140 = *(void *)&v31[8 * v141++];
                  if (v140)
                  {
                    uint64_t v17 = v141 - 1;
                    goto LABEL_98;
                  }
                }

                goto LABEL_103;
              }
            }
          }
        }

    __break(1u);
LABEL_67:
    __break(1u);
    goto LABEL_68;
  }

  uint64_t v17 = *(void *)(v8 - 368);
  uint64_t v18 = *(void *)(v17 + OBJC_IVAR____TtC17identityservicesd30IDSGlobalLinkP2PKeyNegotiation_localIdentities);
  uint64_t v19 = *(void *)(v18 + 16);
  *(void *)(v8 - 4swift_unknownObjectWeakDestroy(v0 + 16) = v19;
  if (!v19)
  {
    uint64_t v5 = 0LL;
    __n128 v6 = 0LL;
    __n128 v7 = 0LL;
    goto LABEL_47;
  }

  uint64_t v3 = *(void *)(v17 + OBJC_IVAR____TtC17identityservicesd30IDSGlobalLinkP2PKeyNegotiation_remoteIdentities);
  *(void *)(v8 - 424) = v3 & 0xFFFFFFFFFFFFFF8LL;
  __n128 v20 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  __n128 v21 = swift_bridgeObjectRetain(v18);
  while (1)
  {
    uint64_t v5 = 0LL;
    uint64_t v22 = 0LL;
    __n128 v23 = 0LL;
    __n128 v24 = 0LL;
    uint64_t v25 = v18 + 32;
    uint64_t v4 = v3 & 0xC000000000000001LL;
    *(void *)(v8 - 432) = v3 + 32;
    *(void *)(v8 - 32_Block_object_dispose(va, 8) = v8 - 152;
    unint64_t v26 = *(void *)(v8 - 208) + 40LL;
    v21.n128_u64[0] = 136315906LL;
    *(__n128 *)(v8 - 352) = v21;
    *(void *)(v8 - 360) = (char *)&type metadata for Any + 8;
    v21.n128_u64[0] = 136315394LL;
    *(__n128 *)(v8 - 3memset(v5, 170, 20) = v21;
    *(void *)(v8 - 376) = v18;
    *(void *)(v8 - 384) = v3;
    *(void *)(v8 - 456) = v20;
    *(void *)(v8 - 536) = v18 + 32;
    *(void *)(v8 - 464) = v3 & 0xC000000000000001LL;
    *(void *)(v8 - 472) = v26;
LABEL_14:
    if (v24 < *(void *)(v18 + 16)) {
      break;
    }
    __break(1u);
LABEL_87:
    __break(1u);
LABEL_88:
    *(void *)(v8 - 424) = v3 & 0xFFFFFFFFFFFFFF8LL;
    if (v3 < 0) {
      uint64_t v174 = v3;
    }
    else {
      uint64_t v174 = v3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v3);
    __n128 v20 = _CocoaArrayWrapper.endIndex.getter(v174);
    swift_bridgeObjectRelease(v3);
  }

  *(void *)(v8 - 40_Block_object_dispose(va, 8) = v24;
  uint64_t v27 = *(_OWORD *)(v25 + 16 * v24);
  *(_OWORD *)(v8 - 304) = v27;
  __n128 v6 = (id)v27;
  __n128 v7 = *(id *)(v8 - 296);
  sub_1004CEF5C(v22, v23);
  if (!v20) {
    goto LABEL_35;
  }
  swift_bridgeObjectRetain(v3);
  *(void *)(v8 - 24_Block_object_dispose(va, 8) = v6;
  *(void *)(v8 - 256) = v7;
  __n128 v28 = 0LL;
  *(void *)(v8 - 440) = v6;
  *(void *)(v8 - 44_Block_object_dispose(va, 8) = v7;
  while (1)
  {
    if (v4)
    {
      uint64_t v30 = (void (**)(uint64_t, uint64_t, unint64_t))specialized _ArrayBuffer._getElementSlowPath(_:)( v28,  v3);
    }

    else
    {
      if (v28 >= *(void *)(*(void *)(v8 - 424) + 16LL)) {
        goto LABEL_87;
      }
      uint64_t v30 = (void (**)(uint64_t, uint64_t, unint64_t))*(id *)(*(void *)(v8 - 432) + 8 * v28);
    }

    __n128 v29 = v30;

    if (__OFADD__(v28++, 1LL))
    {
      __break(1u);
      goto LABEL_84;
    }

    __n128 v32 = *(void *)(*(void *)(v8 - 208) + 16LL);
    if (v32) {
      break;
    }
LABEL_18:
    uint64_t v5 = v29;
    if (v28 == v20)
    {

      swift_bridgeObjectRelease(v3);
      uint64_t v5 = v29;
LABEL_35:
      __n128 v24 = *(void *)(v8 - 408) + 1LL;
      uint64_t v22 = v6;
      __n128 v23 = v7;
      uint64_t v25 = *(void *)(v8 - 536);
      if (v24 == *(void *)(v8 - 416))
      {
        swift_bridgeObjectRelease(*(void *)(v8 - 208));
        *(void *)(v8 - 20_Block_object_dispose(va, 8) = v18;
LABEL_47:
        uint64_t v104 = swift_bridgeObjectRelease(*(void *)(v8 - 208));
        uint64_t v105 = (os_log_s *)Logger.logObject.getter(v104);
        unsigned int v106 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v105, v106))
        {
          unsigned int v107 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          unint64_t v108 = swift_slowAlloc(32LL, -1LL);
          *(void *)(v8 - 160) = v108;
          *(_DWORD *)unsigned int v107 = 136315138;
          *(void *)(v8 - 12_Block_object_dispose(va, 8) = sub_1003FFBB0(0x2865766965636572LL, 0xEE00293A626F6C62LL, (uint64_t *)(v8 - 160));
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v8 - 128, v8 - 120, v107 + 4, v107 + 12);
          _os_log_impl((void *)&_mh_execute_header, v105, v106, "%s: remoteCounter is nil", v107, 0xCu);
          swift_arrayDestroy(v108, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v108, -1LL, -1LL);
          swift_slowDealloc(v107, -1LL, -1LL);
        }

        sub_1004CEF5C(v6, v7);
        return 0LL;
      }

      goto LABEL_14;
    }
  }

  *(void *)(v8 - 224) = v32;
  *(void *)(v8 - 392) = v28;
  *(void *)(v8 - 400) = v29;
  *(void *)(v8 - 240) = v29;
  swift_bridgeObjectRetain(*(void *)(v8 - 208));
  swift_beginAccess(v8 - 168, v8 - 120, 1LL, 0LL);
  uint64_t v33 = (unint64_t *)v26;
  while (1)
  {
    uint64_t v36 = *(v33 - 1);
    __n128 v35 = *v33;
    sub_1004028CC(v36, *v33);
    __n128 v37 = *(id *)(v8 - 248);
    __n128 v38 = *(id *)(v8 - 256);
    uint64_t v39 = *(id *)(v8 - 240);
    sub_1004028CC(v36, v35);
    char v40 = v37;
    uint64_t v41 = v38;
    uint64_t v42 = v39;
    uint64_t v43 = sub_1004028CC(v36, v35);
    uint64_t v44 = (os_log_s *)Logger.logObject.getter(v43);
    unint64_t v45 = static os_log_type_t.default.getter(v44);
    __n128 v46 = v45;
    unint64_t v47 = os_log_type_enabled(v44, v45);
    *(void *)(v8 - 232) = v40;
    *(void *)(v8 - 264) = v41;
    if (v47)
    {
      os_log_type_t v48 = swift_slowAlloc(42LL, -1LL);
      *(_DWORD *)(v8 - 272) = v46;
      uint64_t v49 = v48;
      uint64_t v50 = swift_slowAlloc(128LL, -1LL);
      *(void *)(v8 - 280) = v50;
      *(void *)(v8 - 12_Block_object_dispose(va, 8) = v50;
      *(_DWORD *)uint64_t v49 = *(_OWORD *)(v8 - 352);
      *(void *)(v8 - 28_Block_object_dispose(va, 8) = v44;
      *(void *)(v8 - 160) = sub_1003FFBB0(0x2865766965636572LL, 0xEE00293A626F6C62LL, (uint64_t *)(v8 - 128));
      uint64_t v51 = *(void *)(v8 - 328);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v8 - 160, v51, v49 + 4, v49 + 12);
      *(_WORD *)(v49 + 12) = 2080;
      *(_OWORD *)(v8 - 160) = *(_OWORD *)(v8 - 304);
      uint64_t v52 = sub_1004D0158();
      uint64_t v53 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for IDSGlobalLinkP2PKeyNegotiationLocalIdentity,  v52);
      unint64_t v55 = v54;
      *(void *)(v8 - 160) = sub_1003FFBB0(v53, v54, (uint64_t *)(v8 - 128));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v8 - 160, v51, v49 + 14, v49 + 22);

      swift_bridgeObjectRelease(v55);
      *(_WORD *)(v49 + 22) = 2080;
      *(void *)(v8 - 160) = v42;
      type metadata accessor for SecKey();
      uint64_t v57 = v56;
      uint64_t v58 = v42;
      uint64_t v59 = String.init<A>(describing:)(v8 - 160, v57);
      NSString v61 = v60;
      *(void *)(v8 - 160) = sub_1003FFBB0(v59, v60, (uint64_t *)(v8 - 128));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v8 - 160, v51, v49 + 24, v49 + 32);

      swift_bridgeObjectRelease(v61);
      *(_WORD *)(v49 + 32) = 2080;
      sub_1004028CC(v36, v35);
      NSString v62 = Data.description.getter(v36, v35);
      uint64_t v64 = v63;
      sub_100402A84(v36, v35);
      *(void *)(v8 - 160) = sub_1003FFBB0(v62, v64, (uint64_t *)(v8 - 128));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v8 - 160, v51, v49 + 34, v49 + 42);
      swift_bridgeObjectRelease(v64);
      sub_100402A84(v36, v35);
      sub_100402A84(v36, v35);
      uint64_t v65 = *(os_log_s **)(v8 - 288);
      _os_log_impl( (void *)&_mh_execute_header,  v65,  (os_log_type_t)*(_DWORD *)(v8 - 272),  "%s: attempting with localIdentity:%s remoteIdentity:%s blob:%s",  (uint8_t *)v49,  0x2Au);
      uint64_t v66 = *(void *)(v8 - 280);
      swift_arrayDestroy(v66, 4LL, *(void *)(v8 - 360));
      swift_slowDealloc(v66, -1LL, -1LL);
      swift_slowDealloc(v49, -1LL, -1LL);
    }

    else
    {

      sub_100402A84(v36, v35);
      sub_100402A84(v36, v35);
    }

    sub_1004CEF88(*(void *)(v8 - 216), v36, v35);
    unint64_t v26 = v67;
    *(_DWORD *)(v8 - 16_Block_object_dispose(va, 8) = v67;
    *(_BYTE *)(v8 - 164) = BYTE4(v67) & 1;
    uint64_t v68 = (os_log_s *)Logger.logObject.getter(v67);
    uint64_t v69 = static os_log_type_t.default.getter(v68);
    if (os_log_type_enabled(v68, v69)) {
      break;
    }
    sub_100402A84(v36, v35);

    if ((v26 & 0x100000000LL) == 0) {
      goto LABEL_37;
    }
LABEL_27:
    v33 += 2;
    __n128 v34 = *(void *)(v8 - 224) - 1LL;
    *(void *)(v8 - 224) = v34;
    if (!v34)
    {

      swift_bridgeObjectRelease(*(void *)(v8 - 208));
      __n128 v6 = *(id *)(v8 - 440);
      uint64_t v18 = *(void *)(v8 - 376);
      __n128 v7 = *(id *)(v8 - 448);
      uint64_t v3 = *(void *)(v8 - 384);
      __n128 v20 = *(void *)(v8 - 456);
      uint64_t v4 = *(void *)(v8 - 464);
      unint64_t v26 = *(void *)(v8 - 472);
      __n128 v28 = *(void *)(v8 - 392);
      __n128 v29 = *(void (***)(uint64_t, uint64_t, unint64_t))(v8 - 400);
      goto LABEL_18;
    }
  }

  unint64_t v70 = swift_slowAlloc(22LL, -1LL);
  uint64_t v71 = swift_slowAlloc(64LL, -1LL);
  *(void *)(v8 - 160) = v71;
  *(_DWORD *)unint64_t v70 = *(_OWORD *)(v8 - 320);
  *(void *)(v70 + 4) = sub_1003FFBB0(0x2865766965636572LL, 0xEE00293A626F6C62LL, (uint64_t *)(v8 - 160));
  *(_WORD *)(v70 + 12) = 2080;
  unint64_t v26 = *(unsigned int *)(v8 - 168);
  uint64_t v72 = *(unsigned __int8 *)(v8 - 164);
  *(_DWORD *)(v8 - 272) = v72;
  *(_DWORD *)(v8 - 12_Block_object_dispose(va, 8) = v26;
  *(_BYTE *)(v8 - 124) = v72;
  uint64_t v73 = sub_1003F5CB4(&qword_1009BBE80);
  uint64_t v74 = String.init<A>(describing:)(v8 - 128, v73);
  uint64_t v75 = v33;
  uint64_t v76 = v42;
  uint64_t v78 = v77;
  *(void *)(v70 + 14) = sub_1003FFBB0(v74, v77, (uint64_t *)(v8 - 160));
  unint64_t v79 = v78;
  uint64_t v42 = v76;
  uint64_t v33 = v75;
  swift_bridgeObjectRelease(v79);
  _os_log_impl((void *)&_mh_execute_header, v68, v69, "%s: result: %s", (uint8_t *)v70, 0x16u);
  swift_arrayDestroy(v71, 2LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v71, -1LL, -1LL);
  swift_slowDealloc(v70, -1LL, -1LL);
  sub_100402A84(v36, v35);

  if ((*(_DWORD *)(v8 - 272) & 1) != 0) {
    goto LABEL_27;
  }
LABEL_37:
  swift_bridgeObjectRelease(*(void *)(v8 - 376));
  swift_bridgeObjectRelease(*(void *)(v8 - 384));
  swift_bridgeObjectRelease_n(*(void *)(v8 - 208), 2LL);
  uint64_t v80 = *(void **)(v8 - 264);

  uint64_t v81 = *(void **)(v8 - 232);
  uint64_t v82 = *(uint64_t (**)(void))((swift_isaMask & **(void **)(v8 - 368)) + 0x80LL);
  uint64_t v3 = (uint64_t)v42;
  __n128 v6 = v81;
  __n128 v7 = v80;
  uint64_t v83 = v82();
  if (v83)
  {
    uint64_t v85 = (void *)v83;
    unint64_t v86 = v84;
    uint64_t ObjectType = swift_getObjectType(v83);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v86 + 8))(v26, ObjectType, v86);
  }

  *(void *)(v8 - 12_Block_object_dispose(va, 8) = 0LL;
  uint64_t v88 = SecKeyCopyExternalRepresentation((SecKeyRef)v7, (CFErrorRef *)(v8 - 128));
  if (v88)
  {
    uint64_t v89 = v88;
    *(_OWORD *)(v8 - 20_Block_object_dispose(va, 8) = xmmword_1007190F0;
    *(_OWORD *)(v8 - 160) = xmmword_1007190F0;
    static Data._conditionallyBridgeFromObjectiveC(_:result:)(v88, v8 - 160);

    uint64_t v4 = *(void *)(v8 - 152);
    if (v4 >> 60 != 15)
    {
      uint64_t v5 = *(void (***)(uint64_t, uint64_t, unint64_t))(v8 - 160);
      uint64_t v109 = SecKeyCopyExternalRepresentation((SecKeyRef)v6, (CFErrorRef *)(v8 - 128));
      if (!v109
        || (unint64_t v110 = v109,
            *(_OWORD *)(v8 - 160) = *(_OWORD *)(v8 - 208),
            static Data._conditionallyBridgeFromObjectiveC(_:result:)(v109, v8 - 160),
            v110,
            uint64_t v2 = *(void *)(v8 - 152),
            v2 >> 60 == 15))
      {
        uint64_t v111 = *(void **)(v8 - 128);
        if (!v111)
        {

          uint64_t v151 = (uint64_t)v5;
          int64_t v152 = v4;
LABEL_69:
          sub_10040AD00(v151, v152);
          goto LABEL_70;
        }

        uint64_t v112 = (os_log_s *)Logger.logObject.getter(v109);
        uint64_t v113 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v112, v113))
        {
          uint64_t v114 = swift_slowAlloc(22LL, -1LL);
          uint64_t v115 = swift_slowAlloc(64LL, -1LL);
          *(void *)(v8 - 224) = v4;
          *(void *)(v8 - 2swift_unknownObjectWeakDestroy(v0 + 16) = v115;
          *(void *)(v8 - 160) = v115;
          *(_DWORD *)uint64_t v114 = *(_OWORD *)(v8 - 320);
          *(void *)(v8 - 136) = sub_1003FFBB0(0x2865766965636572LL, 0xEE00293A626F6C62LL, (uint64_t *)(v8 - 160));
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v8 - 136, v8 - 128, v114 + 4, v114 + 12);
          *(_WORD *)(v114 + 12) = 2080;
          *(void *)(v8 - 232) = v114 + 14;
          uint64_t v116 = v5;
          uint64_t v117 = v6;
          uint64_t v118 = v111;
          *(void *)(v8 - 136) = v118;
          type metadata accessor for CFError(0LL);
          *(void *)(v8 - 20_Block_object_dispose(va, 8) = v7;
          unint64_t v120 = v119;
          os_log_type_t v121 = sub_10040A2B0( (unint64_t *)&qword_1009BB518,  (uint64_t (*)(uint64_t))type metadata accessor for CFError,  (uint64_t)&protocol conformance descriptor for CFErrorRef);
          uint64_t v122 = Error.localizedDescription.getter(v120, v121);
          uint64_t v124 = v123;

          __n128 v6 = v117;
          uint64_t v5 = (void (**)(uint64_t, uint64_t, unint64_t))v116;
          *(void *)(v8 - 136) = sub_1003FFBB0(v122, v124, (uint64_t *)(v8 - 160));
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v8 - 136, v8 - 128, *(void *)(v8 - 232), v114 + 22);
          uint64_t v125 = v124;
          __n128 v7 = *(id *)(v8 - 208);
          swift_bridgeObjectRelease(v125);
          _os_log_impl( (void *)&_mh_execute_header,  v112,  v113,  "%s: failed importing local public key: %s",  (uint8_t *)v114,  0x16u);
          unint64_t v126 = *(void *)(v8 - 216);
          swift_arrayDestroy(v126, 2LL, (char *)&type metadata for Any + 8);
          uint64_t v4 = *(void *)(v8 - 224);
          swift_slowDealloc(v126, -1LL, -1LL);
          swift_slowDealloc(v114, -1LL, -1LL);
        }

        unint64_t v127 = v111;
        uint64_t v128 = (uint64_t)v5;
        uint64_t v129 = v4;
        goto LABEL_62;
      }

      __n128 v1 = *(void *)(v8 - 160);
      unint64_t v130 = SecKeyCopyExternalRepresentation((SecKeyRef)v3, (CFErrorRef *)(v8 - 128));
      if (!v130
        || (unint64_t v131 = v130,
            *(_OWORD *)(v8 - 160) = *(_OWORD *)(v8 - 208),
            static Data._conditionallyBridgeFromObjectiveC(_:result:)(v130, v8 - 160),
            v131,
            uint64_t v132 = *(void *)(v8 - 152),
            v132 >> 60 == 15))
      {
        char v133 = *(void **)(v8 - 128);
        if (!v133)
        {
LABEL_68:

          sub_10040AD00((uint64_t)v5, v4);
          uint64_t v151 = v1;
          int64_t v152 = v2;
          goto LABEL_69;
        }

        *(void *)(v8 - 232) = v1;
        uint64_t v134 = (os_log_s *)Logger.logObject.getter(v130);
        uint64_t v135 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v134, v135))
        {
          uint64_t v136 = swift_slowAlloc(22LL, -1LL);
          *(void *)(v8 - 240) = v2;
          uint64_t v137 = v136;
          uint64_t v138 = swift_slowAlloc(64LL, -1LL);
          *(void *)(v8 - 224) = v4;
          *(void *)(v8 - 2swift_unknownObjectWeakDestroy(v0 + 16) = v138;
          *(void *)(v8 - 160) = v138;
          *(_DWORD *)uint64_t v137 = *(_OWORD *)(v8 - 320);
          *(void *)(v8 - 136) = sub_1003FFBB0(0x2865766965636572LL, 0xEE00293A626F6C62LL, (uint64_t *)(v8 - 160));
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v8 - 136, v8 - 128, v137 + 4, v137 + 12);
          *(_WORD *)(v137 + 12) = 2080;
          *(void *)(v8 - 24_Block_object_dispose(va, 8) = v137 + 14;
          char v139 = v5;
          uint64_t v140 = v6;
          id v141 = v133;
          *(void *)(v8 - 136) = v141;
          type metadata accessor for CFError(0LL);
          *(void *)(v8 - 20_Block_object_dispose(va, 8) = v7;
          uint64_t v143 = v142;
          uint64_t v144 = sub_10040A2B0( (unint64_t *)&qword_1009BB518,  (uint64_t (*)(uint64_t))type metadata accessor for CFError,  (uint64_t)&protocol conformance descriptor for CFErrorRef);
          id v145 = Error.localizedDescription.getter(v143, v144);
          id v147 = v146;

          __n128 v6 = v140;
          uint64_t v5 = (void (**)(uint64_t, uint64_t, unint64_t))v139;
          *(void *)(v8 - 136) = sub_1003FFBB0(v145, v147, (uint64_t *)(v8 - 160));
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v8 - 136, v8 - 128, *(void *)(v8 - 248), v137 + 22);
          uint64_t v148 = v147;
          __n128 v7 = *(id *)(v8 - 208);
          swift_bridgeObjectRelease(v148);
          _os_log_impl( (void *)&_mh_execute_header,  v134,  v135,  "%s: failed importing remote public key: %s",  (uint8_t *)v137,  0x16u);
          int64_t v149 = *(void *)(v8 - 216);
          swift_arrayDestroy(v149, 2LL, (char *)&type metadata for Any + 8);
          uint64_t v4 = *(void *)(v8 - 224);
          swift_slowDealloc(v149, -1LL, -1LL);
          uint64_t v150 = v137;
          uint64_t v2 = *(void *)(v8 - 240);
          swift_slowDealloc(v150, -1LL, -1LL);
        }

        unint64_t v127 = v133;
        sub_10040AD00((uint64_t)v5, v4);
        uint64_t v128 = *(void *)(v8 - 232);
        uint64_t v129 = v2;
LABEL_62:
        sub_10040AD00(v128, v129);

LABEL_70:
        goto LABEL_71;
      }

      *(void *)(v8 - 24_Block_object_dispose(va, 8) = v132;
      *(void *)(v8 - 240) = v2;
      *(void *)(v8 - 232) = v1;
      *(void *)(v8 - 256) = *(void *)(v8 - 160);
      *(void *)(v8 - 160) = v5;
      *(void *)(v8 - 152) = v4;
      sub_1004028CC((uint64_t)v5, v4);
      unint64_t v153 = *(void *)(v8 - 496);
      uint64_t v18 = 0LL;
      ((void (*)(uint64_t, void *, void *))P256.KeyAgreement.PrivateKey.init<A>(x963Representation:))( v8 - 160,  &type metadata for Data,  &protocol witness table for Data);
      uint64_t v156 = *(void *)(v8 - 488);
      uint64_t v157 = *(void *)(v8 - 480);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v156 + 56))(v153, 0LL, 1LL, v157);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v156 + 48))(v153, 1LL, v157) == 1)
      {
        int64_t v158 = sub_10040A274(v153, (uint64_t *)&unk_1009BBE60);
        uint64_t v159 = (os_log_s *)Logger.logObject.getter(v158);
        __n128 v160 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v159, v160))
        {
          *(void *)(v8 - 264) = v5;
          char v161 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v162 = swift_slowAlloc(32LL, -1LL);
          *(void *)(v8 - 160) = v162;
          *(_DWORD *)char v161 = 136315138;
          *(void *)(v8 - 136) = sub_1003FFBB0(0x2865766965636572LL, 0xEE00293A626F6C62LL, (uint64_t *)(v8 - 160));
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v8 - 136, v8 - 128, v161 + 4, v161 + 12);
          _os_log_impl((void *)&_mh_execute_header, v159, v160, "%s: failed to make private key", v161, 0xCu);
          swift_arrayDestroy(v162, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v162, -1LL, -1LL);
          swift_slowDealloc(v161, -1LL, -1LL);

          uint64_t v163 = *(void *)(v8 - 264);
        }

        else
        {

          uint64_t v163 = (uint64_t)v5;
        }

        sub_10040AD00(v163, v4);
        sub_10040AD00(*(void *)(v8 - 256), *(void *)(v8 - 248));
        sub_10040AD00(*(void *)(v8 - 232), *(void *)(v8 - 240));

        goto LABEL_71;
      }

      (*(void (**)(void, uint64_t, uint64_t))(v156 + 32))(*(void *)(v8 - 504), v153, v157);
      char v164 = *(void *)(v8 - 256);
      uint64_t v165 = *(void *)(v8 - 248);
      *(void *)(v8 - 160) = v164;
      *(void *)(v8 - 152) = v165;
      sub_1004028CC(v164, v165);
      __n128 v20 = *(void *)(v8 - 528);
      ((void (*)(uint64_t, void *, void *))P256.KeyAgreement.PublicKey.init<A>(x963Representation:))( v8 - 160,  &type metadata for Data,  &protocol witness table for Data);
      __n128 v29 = *(void (***)(uint64_t, uint64_t, unint64_t))(v8 - 520);
      __n128 v28 = *(void *)(v8 - 512);
      ((void (*)(uint64_t, void, uint64_t, unint64_t))v29[7])(v20, 0LL, 1LL, v28);
      if (((unsigned int (*)(uint64_t, uint64_t, unint64_t))v29[6])(v20, 1LL, v28) == 1)
      {
        uint64_t v166 = sub_10040A274(v20, &qword_1009BBE58);
        uint64_t v167 = (os_log_s *)Logger.logObject.getter(v166);
        uint64_t v168 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v167, v168))
        {
          *(void *)(v8 - 264) = v5;
          uint64_t v169 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v170 = swift_slowAlloc(32LL, -1LL);
          *(void *)(v8 - 160) = v170;
          *(_DWORD *)uint64_t v169 = 136315138;
          *(void *)(v8 - 136) = sub_1003FFBB0(0x2865766965636572LL, 0xEE00293A626F6C62LL, (uint64_t *)(v8 - 160));
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v8 - 136, v8 - 128, v169 + 4, v169 + 12);
          _os_log_impl((void *)&_mh_execute_header, v167, v168, "%s: failed to make public key", v169, 0xCu);
          swift_arrayDestroy(v170, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v170, -1LL, -1LL);
          swift_slowDealloc(v169, -1LL, -1LL);
          sub_10040AD00(*(void *)(v8 - 232), *(void *)(v8 - 240));

          sub_10040AD00(*(void *)(v8 - 256), *(void *)(v8 - 248));
          sub_10040AD00(*(void *)(v8 - 264), v4);
        }

        else
        {

          sub_10040AD00((uint64_t)v5, v4);
          sub_10040AD00(*(void *)(v8 - 256), *(void *)(v8 - 248));
          sub_10040AD00(*(void *)(v8 - 232), *(void *)(v8 - 240));
        }

        goto LABEL_98;
      }

uint64_t sub_100414FEC(int a1)
{
  if (a1 == 1) {
    return 5LL;
  }
  else {
    return 0LL;
  }
}

BOOL sub_100414FFC(int a1)
{
  return a1 == 5;
}

void IDSDSessionKeyValueDelivery.receive(dictionaryData:forType:fromParticipant:)( uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  sub_1003F5CB4(&qword_1009B95A0);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v132 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12, v13);
  __n128 v15 = (char *)&v132 - v14;
  uint64_t v16 = type metadata accessor for IDSGroupEncryptionFullIdentity(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v18, v19);
  uint64_t v141 = (uint64_t)&v132 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v21, v22);
  char v142 = (char *)&v132 - v23;
  __chkstk_darwin(v24, v25);
  uint64_t v27 = (char *)&v132 - v26;
  __chkstk_darwin(v28, v29);
  __n128 v31 = (char *)&v132 - v30;
  unsigned int v32 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v4) + 0x100LL))(a2);
  if (!v32)
  {
    uint64_t v64 = *(void **)((char *)v4 + OBJC_IVAR____TtC17identityservicesd27IDSDSessionKeyValueDelivery_metricsCollector);
    NSString v65 = String._bridgeToObjectiveC()();
    id v66 = [v64 error:v65];

    char v142 = (char *)String._bridgeToObjectiveC()();
    [v66 event:v142];

    return;
  }

  unsigned int v33 = v32;
  uint64_t v140 = a3;
  uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSDSessionMessageRealTimeEncryptionWrapModeKey);
  uint64_t v36 = v35;
  if (!*(void *)(a1 + 16) || (v139 = v33, unint64_t v37 = sub_100417D94(v34, v35), (v38 & 1) == 0))
  {
    uint64_t v40 = swift_bridgeObjectRelease(v36);
    goto LABEL_12;
  }

  uint64_t v39 = *(char **)(*(void *)(a1 + 56) + 8 * v37);
  swift_unknownObjectRetain(v39, v38);
  swift_bridgeObjectRelease(v36);
  uint64_t v143 = v39;
  uint64_t v40 = swift_dynamicCast(&v145, &v143, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for Int, 6LL);
  if ((v40 & 1) == 0)
  {
LABEL_12:
    uint64_t v41 = 0LL;
    goto LABEL_13;
  }

  uint64_t v41 = v145;
  if (v145 != (char *)1)
  {
LABEL_13:
    uint64_t v52 = (os_log_s *)Logger.logObject.getter(v40);
    os_log_type_t v53 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v52, v53))
    {
      uint64_t v54 = swift_slowAlloc(22LL, -1LL);
      uint64_t v55 = swift_slowAlloc(64LL, -1LL);
      id v145 = (char *)v55;
      *(_DWORD *)uint64_t v54 = 136315394;
      uint64_t v143 = (char *)sub_1003FFBB0(0xD000000000000030LL, 0x800000010083EE00LL, (uint64_t *)&v145);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, &v144, v54 + 4, v54 + 12);
      *(_WORD *)(v54 + 12) = 2080;
      uint64_t v143 = v41;
      LOBYTE(v144) = 0;
      uint64_t v56 = sub_1003F5CB4(&qword_1009B95A8);
      uint64_t v57 = String.init<A>(describing:)(&v143, v56);
      unint64_t v59 = v58;
      uint64_t v143 = (char *)sub_1003FFBB0(v57, v58, (uint64_t *)&v145);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, &v144, v54 + 14, v54 + 22);
      swift_bridgeObjectRelease(v59);
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "%s: unsupported wrapMode %s", (uint8_t *)v54, 0x16u);
      swift_arrayDestroy(v55, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v55, -1LL, -1LL);
      swift_slowDealloc(v54, -1LL, -1LL);
    }

    uint64_t v60 = *(void **)((char *)v4 + OBJC_IVAR____TtC17identityservicesd27IDSDSessionKeyValueDelivery_metricsCollector);
    NSString v61 = String._bridgeToObjectiveC()();
    id v62 = [v60 error:v61];

    NSString v63 = String._bridgeToObjectiveC()();
    [v62 event:v63];
    goto LABEL_16;
  }

  uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSDSessionMessageRealTimeEncryptionEncryptedData);
  uint64_t v44 = v43;
  if (*(void *)(a1 + 16) && (unint64_t v45 = sub_100417D94(v42, v43), (v46 & 1) != 0))
  {
    uint64_t v47 = *(void *)(*(void *)(a1 + 56) + 8 * v45);
    swift_unknownObjectRetain(v47, v46);
    swift_bridgeObjectRelease(v44);
    id v145 = (char *)v47;
    uint64_t v48 = swift_dynamicCast(&v143, &v145, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for Data, 6LL);
    if ((v48 & 1) != 0)
    {
      unint64_t v137 = v144;
      uint64_t v138 = v143;
      uint64_t v49 = *(void *)((char *)v4
                      + OBJC_IVAR____TtC17identityservicesd27IDSDSessionKeyValueDelivery_identityProvider
                      + 24);
      uint64_t v50 = *(void *)((char *)v4
                      + OBJC_IVAR____TtC17identityservicesd27IDSDSessionKeyValueDelivery_identityProvider
                      + 32);
      uint64_t v136 = (void *)((char *)v4 + OBJC_IVAR____TtC17identityservicesd27IDSDSessionKeyValueDelivery_identityProvider);
      sub_10040A238( (void *)((char *)v4 + OBJC_IVAR____TtC17identityservicesd27IDSDSessionKeyValueDelivery_identityProvider),  v49);
      (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v49, v50);
      uint64_t v51 = *(unsigned int (**)(void, void, void))(v17 + 48);
      if (v51(v15, 1LL, v16) == 1)
      {
        sub_10040A274((uint64_t)v15, &qword_1009B95A0);
      }

      else
      {
        sub_1003F600C((uint64_t)v15, (uint64_t)v31, type metadata accessor for IDSGroupEncryptionFullIdentity);
        uint64_t v71 = sub_1003F5FC8((uint64_t)v31, (uint64_t)v27, type metadata accessor for IDSGroupEncryptionFullIdentity);
        uint64_t v72 = (os_log_s *)Logger.logObject.getter(v71);
        os_log_type_t v73 = static os_log_type_t.default.getter();
        int v74 = v73;
        BOOL v75 = os_log_type_enabled(v72, v73);
        uint64_t v135 = v51;
        if (v75)
        {
          uint64_t v76 = swift_slowAlloc(22LL, -1LL);
          uint64_t v134 = (char *)swift_slowAlloc(64LL, -1LL);
          uint64_t v143 = v134;
          *(_DWORD *)uint64_t v76 = 136315394;
          int v133 = v74;
          id v145 = (char *)sub_1003FFBB0(0xD000000000000030LL, 0x800000010083EE00LL, (uint64_t *)&v143);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, &v146, v76 + 4, v76 + 12);
          *(_WORD *)(v76 + 12) = 2080;
          uint64_t v132 = v76 + 14;
          uint64_t v77 = sub_10040A2B0( &qword_1009B95B0,  type metadata accessor for IDSGroupEncryptionFullIdentity,  (uint64_t)&unk_10071D38C);
          uint64_t v78 = dispatch thunk of CustomStringConvertible.description.getter(v16, v77);
          unint64_t v80 = v79;
          id v145 = (char *)sub_1003FFBB0(v78, v79, (uint64_t *)&v143);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, &v146, v132, v76 + 22);
          swift_bridgeObjectRelease(v80);
          sub_1003F6050((uint64_t)v27, type metadata accessor for IDSGroupEncryptionFullIdentity);
          _os_log_impl( (void *)&_mh_execute_header,  v72,  (os_log_type_t)v133,  "%s: attempting to decrypt with identity %s",  (uint8_t *)v76,  0x16u);
          uint64_t v81 = v134;
          swift_arrayDestroy(v134, 2LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v81, -1LL, -1LL);
          swift_slowDealloc(v76, -1LL, -1LL);
        }

        else
        {

          sub_1003F6050((uint64_t)v27, type metadata accessor for IDSGroupEncryptionFullIdentity);
        }

        uint64_t v82 = *(void *)((char *)v4
                        + OBJC_IVAR____TtC17identityservicesd27IDSDSessionKeyValueDelivery_cryptoHandler
                        + 24);
        uint64_t v83 = *(void *)((char *)v4
                        + OBJC_IVAR____TtC17identityservicesd27IDSDSessionKeyValueDelivery_cryptoHandler
                        + 32);
        sub_10040A238( (void *)((char *)v4 + OBJC_IVAR____TtC17identityservicesd27IDSDSessionKeyValueDelivery_cryptoHandler),  v82);
        uint64_t v84 = (*(uint64_t (**)(char *, unint64_t, char *, uint64_t, uint64_t))(v83 + 32))( v138,  v137,  v31,  v82,  v83);
        unint64_t v86 = v85;
        char v88 = v87;
        sub_1003F6050((uint64_t)v31, type metadata accessor for IDSGroupEncryptionFullIdentity);
        if ((v88 & 1) == 0)
        {
LABEL_34:
          sub_1004028CC(v84, v86);
          sub_1004028CC(v84, v86);
          uint64_t v110 = sub_1004028CC(v84, v86);
          uint64_t v111 = (os_log_s *)Logger.logObject.getter(v110);
          os_log_type_t v112 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v111, v112))
          {
            uint64_t v113 = swift_slowAlloc(42LL, -1LL);
            char v142 = (char *)swift_slowAlloc(96LL, -1LL);
            uint64_t v143 = v142;
            *(_DWORD *)uint64_t v113 = 136315906;
            id v145 = (char *)sub_1003FFBB0(0xD000000000000030LL, 0x800000010083EE00LL, (uint64_t *)&v143);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, &v146, v113 + 4, v113 + 12);
            *(_WORD *)(v113 + 12) = 2080;
            sub_1004028CC(v84, v86);
            uint64_t v114 = Data.description.getter(v84, v86);
            unint64_t v116 = v115;
            sub_100402A84(v84, v86);
            id v145 = (char *)sub_1003FFBB0(v114, v116, (uint64_t *)&v143);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, &v146, v113 + 14, v113 + 22);
            swift_bridgeObjectRelease(v116);
            sub_100402A84(v84, v86);
            sub_100402A84(v84, v86);
            *(_WORD *)(v113 + 22) = 2080;
            uint64_t v117 = v139;
            LODWORD(v145) = v139;
            type metadata accessor for IDSGroupSessionClientDataKey(0LL);
            uint64_t v119 = String.init<A>(describing:)(&v145, v118);
            unint64_t v121 = v120;
            id v145 = (char *)sub_1003FFBB0(v119, v120, (uint64_t *)&v143);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, &v146, v113 + 24, v113 + 32);
            swift_bridgeObjectRelease(v121);
            *(_WORD *)(v113 + 32) = 2048;
            uint64_t v122 = v140;
            id v145 = (char *)v140;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, &v146, v113 + 34, v113 + 42);
            _os_log_impl( (void *)&_mh_execute_header,  v111,  v112,  "%s: received %s forKey: %s fromParticipant: %llu",  (uint8_t *)v113,  0x2Au);
            uint64_t v123 = v142;
            swift_arrayDestroy(v142, 3LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v123, -1LL, -1LL);
            swift_slowDealloc(v113, -1LL, -1LL);
          }

          else
          {

            sub_100402A84(v84, v86);
            sub_100402A84(v84, v86);
            uint64_t v122 = v140;
            uint64_t v117 = v139;
          }

          (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))((swift_isaMask & *v4) + 0x110LL))( v84,  v86,  v117,  v122);
          sub_10041C0C4(v84, v86, 0);
          sub_100402A84(v84, v86);
          sub_100402A84((uint64_t)v138, v137);
          return;
        }

        sub_10040A268(v84, v86, 1);
        uint64_t v51 = v135;
      }

      uint64_t v89 = v136[3];
      uint64_t v90 = v136[4];
      sub_10040A238(v136, v89);
      (*(void (**)(uint64_t, uint64_t))(v90 + 16))(v89, v90);
      if (v51(v11, 1LL, v16) == 1)
      {
        uint64_t v91 = sub_10040A274((uint64_t)v11, &qword_1009B95A0);
        uint64_t v84 = 0LL;
        unint64_t v86 = 0LL;
        unsigned __int8 v92 = -1;
LABEL_39:
        uint64_t v124 = (os_log_s *)Logger.logObject.getter(v91);
        os_log_type_t v125 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v124, v125))
        {
          unint64_t v126 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          unint64_t v127 = v86;
          uint64_t v128 = (char *)swift_slowAlloc(32LL, -1LL);
          uint64_t v143 = v128;
          *(_DWORD *)unint64_t v126 = 136315138;
          id v145 = (char *)sub_1003FFBB0(0xD000000000000030LL, 0x800000010083EE00LL, (uint64_t *)&v143);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, &v146, v126 + 4, v126 + 12);
          _os_log_impl((void *)&_mh_execute_header, v124, v125, "%s: failed CryptoHandler decrypt", v126, 0xCu);
          swift_arrayDestroy(v128, 1LL, (char *)&type metadata for Any + 8);
          uint64_t v129 = v128;
          unint64_t v86 = v127;
          swift_slowDealloc(v129, -1LL, -1LL);
          swift_slowDealloc(v126, -1LL, -1LL);
        }

        unint64_t v130 = *(void **)((char *)v4 + OBJC_IVAR____TtC17identityservicesd27IDSDSessionKeyValueDelivery_metricsCollector);
        NSString v131 = String._bridgeToObjectiveC()();
        id v62 = [v130 error:v131];

        NSString v63 = String._bridgeToObjectiveC()();
        [v62 event:v63];
        sub_10041C0C4(v84, v86, v92);
        sub_100402A84((uint64_t)v138, v137);
LABEL_16:

        return;
      }

      uint64_t v93 = (uint64_t)v142;
      sub_1003F600C((uint64_t)v11, (uint64_t)v142, type metadata accessor for IDSGroupEncryptionFullIdentity);
      uint64_t v94 = v141;
      uint64_t v95 = sub_1003F5FC8(v93, v141, type metadata accessor for IDSGroupEncryptionFullIdentity);
      unint64_t v96 = (os_log_s *)Logger.logObject.getter(v95);
      os_log_type_t v97 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v96, v97))
      {
        uint64_t v98 = swift_slowAlloc(22LL, -1LL);
        uint64_t v99 = (char *)swift_slowAlloc(64LL, -1LL);
        uint64_t v143 = v99;
        *(_DWORD *)uint64_t v98 = 136315394;
        id v145 = (char *)sub_1003FFBB0(0xD000000000000030LL, 0x800000010083EE00LL, (uint64_t *)&v143);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, &v146, v98 + 4, v98 + 12);
        *(_WORD *)(v98 + 12) = 2080;
        uint64_t v100 = sub_10040A2B0( &qword_1009B95B0,  type metadata accessor for IDSGroupEncryptionFullIdentity,  (uint64_t)&unk_10071D38C);
        uint64_t v101 = dispatch thunk of CustomStringConvertible.description.getter(v16, v100);
        unint64_t v103 = v102;
        id v145 = (char *)sub_1003FFBB0(v101, v102, (uint64_t *)&v143);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, &v146, v98 + 14, v98 + 22);
        swift_bridgeObjectRelease(v103);
        sub_1003F6050(v94, type metadata accessor for IDSGroupEncryptionFullIdentity);
        _os_log_impl( (void *)&_mh_execute_header,  v96,  v97,  "%s: could not CryptoHandler decrypt with current identity; trying with previous %s",
          (uint8_t *)v98,
          0x16u);
        swift_arrayDestroy(v99, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v99, -1LL, -1LL);
        swift_slowDealloc(v98, -1LL, -1LL);
      }

      else
      {

        sub_1003F6050(v94, type metadata accessor for IDSGroupEncryptionFullIdentity);
      }

      uint64_t v104 = *(void *)((char *)v4 + OBJC_IVAR____TtC17identityservicesd27IDSDSessionKeyValueDelivery_cryptoHandler
                                    + 24);
      uint64_t v105 = *(void *)((char *)v4 + OBJC_IVAR____TtC17identityservicesd27IDSDSessionKeyValueDelivery_cryptoHandler
                                    + 32);
      sub_10040A238( (void *)((char *)v4 + OBJC_IVAR____TtC17identityservicesd27IDSDSessionKeyValueDelivery_cryptoHandler),  v104);
      uint64_t v106 = (uint64_t)v142;
      uint64_t v84 = (*(uint64_t (**)(char *, unint64_t, char *, uint64_t, uint64_t))(v105 + 32))( v138,  v137,  v142,  v104,  v105);
      unint64_t v86 = v107;
      char v109 = v108;
      uint64_t v91 = sub_1003F6050(v106, type metadata accessor for IDSGroupEncryptionFullIdentity);
      if ((v109 & 1) != 0)
      {
        unsigned __int8 v92 = 1;
        goto LABEL_39;
      }

      goto LABEL_34;
    }
  }

  else
  {
    uint64_t v48 = swift_bridgeObjectRelease(v44);
  }

  uint64_t v67 = (os_log_s *)Logger.logObject.getter(v48);
  os_log_type_t v68 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v67, v68))
  {
    uint64_t v69 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    unint64_t v70 = (char *)swift_slowAlloc(32LL, -1LL);
    uint64_t v143 = v70;
    *(_DWORD *)uint64_t v69 = 136315138;
    id v145 = (char *)sub_1003FFBB0(0xD000000000000030LL, 0x800000010083EE00LL, (uint64_t *)&v143);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, &v146, v69 + 4, v69 + 12);
    _os_log_impl((void *)&_mh_execute_header, v67, v68, "%s: could not extract data", v69, 0xCu);
    swift_arrayDestroy(v70, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v70, -1LL, -1LL);
    swift_slowDealloc(v69, -1LL, -1LL);
  }
}

void IDSDSessionKeyValueDelivery.receive(unencryptedData:forKey:fromParticipant:)( uint64_t a1, unint64_t a2, Swift::UInt32 a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(a1);
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc(32LL, -1LL);
    uint64_t v22 = swift_slowAlloc(64LL, -1LL);
    uint64_t v24 = v22;
    *(_DWORD *)uint64_t v12 = 136315650;
    uint64_t v23 = sub_1003FFBB0(0xD000000000000030LL, 0x800000010083EE60LL, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v12 + 4, v12 + 12);
    *(_WORD *)(v12 + 12) = 2080;
    LODWORD(v23) = a3;
    type metadata accessor for IDSGroupSessionClientDataKey(0LL);
    uint64_t v14 = String.init<A>(describing:)(&v23, v13);
    unint64_t v16 = v15;
    uint64_t v23 = sub_1003FFBB0(v14, v15, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v12 + 14, v12 + 22);
    swift_bridgeObjectRelease(v16);
    *(_WORD *)(v12 + 22) = 2048;
    uint64_t v23 = a4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v12 + 24, v12 + 32);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "%s: key: %s participant: %llu", (uint8_t *)v12, 0x20u);
    swift_arrayDestroy(v22, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1LL, -1LL);
    swift_slowDealloc(v12, -1LL, -1LL);
  }

  id v17 =  [*(id *)((char *)v5 + OBJC_IVAR____TtC17identityservicesd27IDSDSessionKeyValueDelivery_metricsCollector) keyValueDelivery];
  NSString v18 = String._bridgeToObjectiveC()();
  [v17 event:v18];

  __n128 v19 = *(os_unfair_lock_s **)((char *)v5 + OBJC_IVAR____TtC17identityservicesd27IDSDSessionKeyValueDelivery_state);
  uint64_t v20 = (uint64_t)&v19[4];
  __n128 v21 = v19 + 12;
  os_unfair_lock_lock(v19 + 12);
  sub_10041625C(v20, a3, a4, a1, a2, v5);
  os_unfair_lock_unlock(v21);
}

void sub_10041625C(uint64_t a1, Swift::UInt32 a2, uint64_t a3, uint64_t a4, unint64_t a5, void *a6)
{
  char v88 = a6;
  uint64_t v91 = a3;
  sub_1003F5CB4(&qword_1009B9768);
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (char *)&v78 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14, v15);
  id v17 = (char *)&v78 - v16;
  uint64_t v18 = *(void *)(a1 + 16);
  if (*(void *)(v18 + 16) && (unint64_t v19 = sub_100417D0C(a2), (v20 & 1) != 0))
  {
    unint64_t v21 = *(void *)(*(void *)(v18 + 56) + 8 * v19);
    swift_bridgeObjectRetain(v21);
  }

  else
  {
    unint64_t v21 = sub_10041BC74(&_swiftEmptyArrayStorage);
  }

  sub_1004028CC(a4, a5);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v21);
  unint64_t v101 = v21;
  sub_100419DF0(a4, a5, v91, isUniquelyReferenced_nonNull_native);
  uint64_t v23 = v101;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  char v24 = swift_isUniquelyReferenced_nonNull_native(*(void *)(a1 + 16));
  unint64_t v101 = *(void *)(a1 + 16);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = 0x8000000000000000LL;
  sub_100419CBC(v23, a2, v24);
  uint64_t v25 = *(void *)(a1 + 16);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v101;
  swift_bridgeObjectRelease(v25);
  uint64_t v26 = *(void *)(a1 + 8);
  uint64_t v27 = *(void *)(v26 + 64);
  uint64_t v79 = v26 + 64;
  uint64_t v28 = 1LL << *(_BYTE *)(v26 + 32);
  uint64_t v29 = -1LL;
  if (v28 < 64) {
    uint64_t v29 = ~(-1LL << v28);
  }
  unint64_t v30 = v29 & v27;
  unint64_t v86 = &v99;
  uint64_t v89 = &v95;
  int64_t v80 = (unint64_t)(v28 + 63) >> 6;
  int64_t v78 = v80 - 1;
  uint64_t v85 = v26;
  swift_bridgeObjectRetain(v26);
  int64_t v92 = 0LL;
  uint64_t v84 = &v102;
  __int128 v90 = xmmword_1007184C0;
  uint64_t v83 = a4;
  Swift::UInt32 v82 = a2;
  char v87 = v13;
  uint64_t v81 = v17;
  while (1)
  {
    if (v30)
    {
      unint64_t v39 = __clz(__rbit64(v30));
      uint64_t v40 = (v30 - 1) & v30;
      unint64_t v41 = v39 | (v92 << 6);
LABEL_12:
      uint64_t v42 = v85;
      uint64_t v43 = *(void *)(v85 + 48);
      uint64_t v44 = type metadata accessor for UUID(0LL, v31);
      (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v44 - 8) + 16LL))( v13,  v43 + *(void *)(*(void *)(v44 - 8) + 72LL) * v41,  v44);
      uint64_t v45 = *(void *)(v42 + 56);
      uint64_t v46 = sub_1003F5CB4(&qword_1009B9770);
      uint64_t v47 = *(void *)(v45 + 8 * v41);
      *(void *)&v13[*(int *)(v46 + 48)] = v47;
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56LL))(v13, 0LL, 1LL, v46);
      swift_unknownObjectRetain(v47, v48);
      goto LABEL_31;
    }

    int64_t v49 = v92 + 1;
    if (__OFADD__(v92, 1LL)) {
      goto LABEL_47;
    }
    if (v49 < v80)
    {
      unint64_t v50 = *(void *)(v79 + 8 * v49);
      if (v50) {
        goto LABEL_16;
      }
      int64_t v51 = v92 + 2;
      ++v92;
      if (v49 + 1 < v80)
      {
        unint64_t v50 = *(void *)(v79 + 8 * v51);
        if (v50) {
          goto LABEL_19;
        }
        int64_t v92 = v49 + 1;
        if (v49 + 2 < v80)
        {
          unint64_t v50 = *(void *)(v79 + 8 * (v49 + 2));
          if (v50)
          {
            v49 += 2LL;
            goto LABEL_16;
          }

          int64_t v51 = v49 + 3;
          int64_t v92 = v49 + 2;
          if (v49 + 3 < v80) {
            break;
          }
        }
      }
    }

uint64_t IDSDSessionKeyValueDelivery.test_receive(_:for:fromParticipant:)()
{
  return (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0x110LL))();
}

uint64_t IDSDSessionKeyValueDelivery.send(_:for:encryption:capability:)( uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v7 + 64) = a6;
  *(void *)(v7 + 72) = v6;
  *(void *)(v7 + 4_Block_object_dispose(va, 8) = a2;
  *(void *)(v7 + 56) = a5;
  *(_DWORD *)(v7 + 1swift_unknownObjectWeakDestroy(v0 + 16) = a3;
  *(_DWORD *)(v7 + cut_arc_os_release(v1 - 120) = a4;
  *(void *)(v7 + 40) = a1;
  uint64_t v8 = type metadata accessor for UUID(0LL, a2);
  *(void *)(v7 + 80) = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  *(void *)(v7 + 8_Block_object_dispose(va, 8) = v9;
  unint64_t v10 = (*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v7 + 96) = swift_task_alloc(v10);
  *(void *)(v7 + 104) = swift_task_alloc(v10);
  return swift_task_switch(sub_100416AA8, 0LL, 0LL);
}

uint64_t sub_100416AA8()
{
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v2 = *(void *)(v0 + 104);
  uint64_t v3 = *(void *)(v0 + 80);
  uint64_t v4 = *(void *)(v0 + 88);
  UUID.init()();
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v2, v3);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v36 = *(void *)(v0 + 96);
    uint64_t v37 = *(void *)(v0 + 88);
    uint64_t v35 = *(void *)(v0 + 80);
    int v8 = *(_DWORD *)(v0 + 116);
    uint64_t v9 = swift_slowAlloc(32LL, -1LL);
    uint64_t v38 = swift_slowAlloc(96LL, -1LL);
    uint64_t v40 = (void *)v38;
    *(_DWORD *)uint64_t v9 = 136315650;
    *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_1003FFBB0(0xD000000000000022LL, 0x800000010083EEA0LL, (uint64_t *)&v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v9 + 4, v9 + 12);
    *(_DWORD *)(v0 + 112) = v8;
    *(_WORD *)(v9 + 12) = 2080;
    type metadata accessor for IDSGroupSessionClientDataKey(0LL);
    uint64_t v11 = String.init<A>(describing:)(v0 + 112, v10);
    unint64_t v13 = v12;
    *(void *)(v0 + 24) = sub_1003FFBB0(v11, v12, (uint64_t *)&v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v9 + 14, v9 + 22);
    swift_bridgeObjectRelease(v13);
    *(_WORD *)(v9 + 22) = 2080;
    uint64_t v14 = sub_10040A2B0( &qword_1009B95C0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter(v35, v14);
    unint64_t v17 = v16;
    *(void *)(v0 + 32) = sub_1003FFBB0(v15, v16, (uint64_t *)&v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v9 + 24, v9 + 32);
    swift_bridgeObjectRelease(v17);
    uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v37 + 8);
    v18(v36, v35);
    _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "%s: senddata called for key %s with data ID %s",  (uint8_t *)v9,  0x20u);
    swift_arrayDestroy(v38, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  else
  {
    uint64_t v20 = *(void *)(v0 + 88);
    uint64_t v19 = *(void *)(v0 + 96);
    uint64_t v21 = *(void *)(v0 + 80);

    uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
    v18(v19, v21);
  }

  uint64_t v22 = *(void *)(v0 + 104);
  uint64_t v23 = *(void *)(v0 + 72);
  __int128 v39 = *(_OWORD *)(v0 + 56);
  int v25 = *(_DWORD *)(v0 + 116);
  int v24 = *(_DWORD *)(v0 + 120);
  uint64_t v27 = *(void *)(v0 + 40);
  uint64_t v26 = *(void *)(v0 + 48);
  uint64_t v28 = *(os_unfair_lock_s **)(v23 + OBJC_IVAR____TtC17identityservicesd27IDSDSessionKeyValueDelivery_state);
  uint64_t v29 = swift_task_alloc(80LL);
  *(_DWORD *)(v29 + swift_unknownObjectWeakDestroy(v0 + 16) = v25;
  *(void *)(v29 + 24) = v27;
  *(void *)(v29 + 32) = v26;
  *(_DWORD *)(v29 + 40) = v24;
  *(_OWORD *)(v29 + 4_Block_object_dispose(va, 8) = v39;
  *(void *)(v29 + 64) = v22;
  *(void *)(v29 + 72) = v23;
  os_unfair_lock_lock(v28 + 12);
  sub_100416DF8( (uint64_t)&v28[4],  *(_DWORD *)(v29 + 16),  *(void *)(v29 + 24),  *(void *)(v29 + 32),  *(_DWORD *)(v29 + 40),  *(void *)(v29 + 48),  *(void *)(v29 + 56),  *(void *)(v29 + 64),  (uint64_t *)&v40,  *(void *)(v29 + 72));
  os_unfair_lock_unlock(v28 + 12);
  unint64_t v30 = v40;
  swift_task_dealloc(v29);
  if (v30)
  {
    [v30 updateServerDesiredKeyValueDeliveryMaterialsNeeded];
    swift_unknownObjectRelease(v30, v31);
  }

  uint64_t v32 = *(void *)(v0 + 96);
  uint64_t v33 = *(void *)(v0 + 104);
  v18(v33, *(void *)(v0 + 80));
  swift_task_dealloc(v33);
  swift_task_dealloc(v32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100416DF8@<X0>( uint64_t a1@<X0>, Swift::UInt32 a2@<W1>, uint64_t a3@<X2>, unint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10)
{
  Swift::UInt32 v29 = a2;
  uint64_t v31 = a9;
  uint64_t v30 = a10;
  sub_1003F5CB4(&qword_1009B9758);
  __chkstk_darwin(v17, v18);
  uint64_t v20 = (char *)&v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for IDSDSessionKeyValueDeliveryLocalEntry(0LL);
  uint64_t v22 = &v20[*(int *)(v21 + 28)];
  uint64_t v24 = type metadata accessor for UUID(0LL, v23);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 16LL))(v22, a8, v24);
  *(void *)uint64_t v20 = a3;
  *((void *)v20 + 1) = a4;
  *((_DWORD *)v20 + 4) = a5;
  *((void *)v20 + 3) = a6;
  *((void *)v20 + 4) = a7;
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56LL))(v20, 0LL, 1LL, v21);
  sub_1004028CC(a3, a4);
  swift_bridgeObjectRetain(a7);
  sub_100412C2C((uint64_t)v20, v29);
  id v25 =  [*(id *)(v30 + OBJC_IVAR____TtC17identityservicesd27IDSDSessionKeyValueDelivery_metricsCollector) keyValueDelivery];
  NSString v26 = String._bridgeToObjectiveC()();
  [v25 event:v26];

  uint64_t result = swift_unknownObjectWeakLoadStrong(a1);
  *uint64_t v31 = result;
  return result;
}

uint64_t sub_1004170E8(void *a1, int a2, int a3, void *a4, void *aBlock, void *a6)
{
  _BYTE v6[2] = a6;
  v6[3] = _Block_copy(aBlock);
  id v12 = a4;
  id v13 = a1;
  a6;
  uint64_t v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v16 = v15;

  void v6[4] = v14;
  void v6[5] = v16;
  if (a4)
  {
    a4 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(a4);
    uint64_t v18 = v17;
  }

  else
  {
    uint64_t v18 = 0LL;
  }

  v6[6] = v18;
  uint64_t v19 = (void *)swift_task_alloc(dword_1009B95BC);
  v6[7] = v19;
  *uint64_t v19 = v6;
  v19[1] = sub_1004171D8;
  return IDSDSessionKeyValueDelivery.send(_:for:encryption:capability:)(v14, v16, a2, a3, (uint64_t)a4, v18);
}

uint64_t sub_1004171D8()
{
  uint64_t v3 = *(void *)(*v1 + 48);
  uint64_t v2 = *(void *)(*v1 + 56);
  uint64_t v5 = *(void *)(*v1 + 32);
  unint64_t v4 = *(void *)(*v1 + 40);
  uint64_t v6 = *(void **)(*v1 + 16);
  uint64_t v7 = *v1;
  swift_task_dealloc(v2);

  swift_bridgeObjectRelease(v3);
  sub_100402A84(v5, v4);
  uint64_t v8 = *(void *)(v7 + 24);
  if (v0)
  {
    uint64_t v9 = (void *)_convertErrorToNSError(_:)(v0);
    swift_errorRelease(v0);
    (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v9);
  }

  else
  {
    (*(void (**)(void, void))(v8 + 16))(*(void *)(v7 + 24), 0LL);
  }

  _Block_release(*(const void **)(v7 + 24));
  return (*(uint64_t (**)(void))(v7 + 8))();
}

void IDSDSessionKeyValueDelivery.requestData(for:participantID:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC17identityservicesd27IDSDSessionKeyValueDelivery_state);
  uint64_t v6 = v5 + 4;
  uint64_t v7 = v5 + 12;
  os_unfair_lock_lock(v5 + 12);
  uint64_t Strong = (void *)swift_unknownObjectWeakLoadStrong(v6);
  os_unfair_lock_unlock(v7);
  if (Strong)
  {
    [Strong requestKeyValueDeliveryDataForKey:a1 participantID:a2];
    swift_unknownObjectRelease(Strong, v9);
  }

uint64_t sub_10041732C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = swift_unknownObjectWeakLoadStrong(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100417550(void *a1)
{
  uint64_t v2 = *(uint64_t (**)(_BYTE *))((swift_isaMask & *a1) + 0x130LL);
  id v3 = v1;
  unint64_t v4 = (uint64_t (*)(_BYTE *, void))v2(v13);
  uint64_t v6 = v5;
  uint64_t v7 = (void *)*v5;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v5);
  void *v6 = v7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v7 = sub_100417B94(0LL, v7[2] + 1LL, 1, v7);
    void *v6 = v7;
  }

  unint64_t v10 = v7[2];
  unint64_t v9 = v7[3];
  if (v10 >= v9 >> 1)
  {
    uint64_t v7 = sub_100417B94((void *)(v9 > 1), v10 + 1, 1, v7);
    void *v6 = v7;
  }

  void v7[2] = v10 + 1;
  uint64_t v11 = &v7[2 * v10];
  v11[4] = v3;
  void v11[5] = &off_100905568;
  return v4(v13, 0LL);
}

id IDSDSessionKeyValueDelivery.__allocating_init()()
{
  return [objc_allocWithZone(v0) init];
}

void IDSDSessionKeyValueDelivery.init()()
{
}

uint64_t sub_1004177C8()
{
  return (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xE8LL))();
}

Swift::Int sub_1004177E4()
{
  Swift::UInt32 v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100417828()
{
}

Swift::Int sub_100417850(uint64_t a1)
{
  Swift::UInt32 v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

BOOL sub_100417890(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

BOOL sub_1004178A4(void *a1, void *a2)
{
  return *a1 == *a2;
}

_DWORD *sub_1004178B8@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

void sub_1004178C8(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

void *sub_1004178D4@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(_BYTE *)(a2 + _Block_object_dispose(va, 8) = 0;
  return result;
}

void sub_1004178E4(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_1004178F0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  unint64_t v4 = (void *)swift_task_alloc(a3[1]);
  *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  void *v4 = v3;
  v4[1] = sub_10041D3FC;
  return v6();
}

uint64_t sub_100417944(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  uint64_t v5 = (void *)swift_task_alloc(a4[1]);
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  void *v5 = v4;
  v5[1] = sub_10041D3FC;
  return v7();
}

uint64_t sub_100417998(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1LL, v6) == 1)
  {
    sub_10040A274(a1, &qword_1009B9700);
    uint64_t v8 = 7168LL;
    uint64_t v9 = *(void *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      uint64_t v10 = *(void *)(a3 + 24);
      uint64_t ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9, v12);
      uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      uint64_t v15 = v14;
      swift_unknownObjectRelease(v9, v14);
      goto LABEL_6;
    }
  }

  else
  {
    unsigned __int8 v16 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    uint64_t v8 = v16 | 0x1C00LL;
    uint64_t v9 = *(void *)(a3 + 16);
    if (v9) {
      goto LABEL_3;
    }
  }

  uint64_t v13 = 0LL;
  uint64_t v15 = 0LL;
LABEL_6:
  uint64_t v17 = swift_allocObject(&unk_1009056E8, 32LL, 7LL);
  *(void *)(v17 + swift_unknownObjectWeakDestroy(v0 + 16) = a2;
  *(void *)(v17 + 24) = a3;
  if (v15 | v13)
  {
    v20[0] = 0LL;
    v20[1] = 0LL;
    uint64_t v18 = v20;
    v20[2] = v13;
    v20[3] = v15;
  }

  else
  {
    uint64_t v18 = 0LL;
  }

  return swift_task_create(v8, v18, (char *)&type metadata for () + 8, &unk_1009B9740, v17);
}

uint64_t sub_100417AE4(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  void *v4 = v2;
  v4[1] = sub_100417B48;
  return v6(a1);
}

uint64_t sub_100417B48()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

void *sub_100417B94(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_1003F5CB4(&qword_1009B9748);
      uint64_t v11 = (void *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 17;
      }
      _DWORD v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      uint64_t v14 = v11 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      uint64_t v11 = &_swiftEmptyArrayStorage;
      uint64_t v14 = &_swiftEmptyArrayStorage + 4;
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4]) {
          memmove(v14, a4 + 4, 16 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_10041D1D4(0LL, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

unint64_t sub_100417CA0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(v3 + 40);
  uint64_t v6 = type metadata accessor for UUID(0LL, a2);
  uint64_t v7 = sub_10040A2B0( &qword_1009B9300,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v8 = dispatch thunk of Hashable._rawHashValue(seed:)(v5, v6, v7);
  return sub_100417E28(a1, v8);
}

unint64_t sub_100417D0C(Swift::UInt32 a1)
{
  Swift::Int v3 = Hasher._finalize()();
  return sub_100417F68(a1, v3);
}

unint64_t sub_100417D64(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_100418004(a1, v4);
}

unint64_t sub_100417D94(uint64_t a1, uint64_t a2)
{
  Swift::Int v5 = Hasher._finalize()();
  return sub_10041811C(a1, a2, v5);
}

unint64_t sub_100417DF8(uint64_t a1)
{
  uint64_t v3 = static Hasher._hash(seed:_:)(*(void *)(v1 + 40), a1);
  return sub_1004181FC(a1, v3);
}

unint64_t sub_100417E28(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v20 = a1;
  uint64_t v5 = type metadata accessor for UUID(0LL, a2);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v12 = a2 & ~v11;
  if (((*(void *)(v3 + 64 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) != 0)
  {
    uint64_t v13 = ~v11;
    uint64_t v14 = *(void *)(v6 + 72);
    uint64_t v15 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v15(v10, *(void *)(v3 + 48) + v14 * v12, v5);
      uint64_t v16 = sub_10040A2B0( &qword_1009B9808,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      char v17 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v20, v5, v16);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
      if ((v17 & 1) != 0) {
        break;
      }
      unint64_t v12 = (v12 + 1) & v13;
    }

    while (((*(void *)(v3 + 64 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) != 0);
  }

  return v12;
}

unint64_t sub_100417F68(int a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0)
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(_DWORD *)(v7 + 4 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(_DWORD *)(v7 + 4 * result) == a1) {
          break;
        }
      }
    }
  }

  return result;
}

unint64_t sub_100418004(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
  {
    sub_10041D3C4(0LL, (unint64_t *)&unk_1009BACA0, &OBJC_CLASS___NSNumber_ptr);
    id v7 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    char v8 = static NSObject.== infix(_:_:)(v7, a1);

    if ((v8 & 1) == 0)
    {
      uint64_t v9 = ~v4;
      for (unint64_t i = (i + 1) & v9; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0; unint64_t i = (i + 1) & v9)
      {
        id v10 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v11 = static NSObject.== infix(_:_:)(v10, a1);

        if ((v11 & 1) != 0) {
          break;
        }
      }
    }
  }

  return i;
}

unint64_t sub_10041811C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    id v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }

      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }

  return v6;
}

unint64_t sub_1004181FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0)
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }

  return result;
}

uint64_t sub_100418298(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  swift_bridgeObjectRetain(*v2);
  unint64_t v6 = sub_100417CA0(a1, v5);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease(v4);
  if ((a1 & 1) == 0) {
    return 0LL;
  }
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v10 = *v2;
  uint64_t v16 = *v2;
  *uint64_t v2 = 0x8000000000000000LL;
  if (!(_DWORD)isUniquelyReferenced_nonNull_native)
  {
    sub_10041A4D4(isUniquelyReferenced_nonNull_native, v9);
    uint64_t v10 = v16;
  }

  uint64_t v11 = *(void *)(v10 + 48);
  uint64_t v12 = type metadata accessor for UUID(0LL, v9);
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v12 - 8) + 8LL))( v11 + *(void *)(*(void *)(v12 - 8) + 72LL) * v6,  v12);
  uint64_t v13 = *(void *)(*(void *)(v10 + 56) + 8 * v6);
  sub_100419580(v6, v10);
  uint64_t v14 = *v2;
  *uint64_t v2 = v10;
  swift_bridgeObjectRelease(v14);
  return v13;
}

Swift::Int sub_100418370(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_1003F5CB4(&qword_1009B9810);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  uint64_t v36 = v3;
  uint64_t v37 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v15 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }

    int64_t v23 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v23 >= v12) {
      break;
    }
    uint64_t v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v37 + 8 * v23);
    ++v15;
    if (!v25)
    {
      int64_t v15 = v23 + 1;
      if (v23 + 1 >= v12) {
        goto LABEL_36;
      }
      unint64_t v25 = *(void *)(v37 + 8 * v15);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_36:
          swift_release(v5);
          uint64_t v3 = v36;
          if ((a2 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = *(void *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v15 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v15 >= v12) {
              goto LABEL_36;
            }
            unint64_t v25 = *(void *)(v37 + 8 * v15);
            ++v26;
            if (v25) {
              goto LABEL_33;
            }
          }
        }

        int64_t v15 = v26;
      }
    }

Swift::Int sub_100418644(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_1003F5CB4(&qword_1009B9818);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    uint64_t v33 = v3;
    uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v10 = (void *)(v5 + 64);
    if (v9 < 64) {
      uint64_t v11 = ~(-1LL << v9);
    }
    else {
      uint64_t v11 = -1LL;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v13 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v14 = v7 + 64;
    Swift::Int result = swift_retain(v5);
    int64_t v16 = 0LL;
    while (1)
    {
      if (v12)
      {
        unint64_t v21 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v22 = v21 | (v16 << 6);
      }

      else
      {
        int64_t v23 = v16 + 1;
        if (__OFADD__(v16, 1LL))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }

        if (v23 >= v13) {
          goto LABEL_36;
        }
        unint64_t v24 = v10[v23];
        ++v16;
        if (!v24)
        {
          int64_t v16 = v23 + 1;
          if (v23 + 1 >= v13) {
            goto LABEL_36;
          }
          unint64_t v24 = v10[v16];
          if (!v24)
          {
            int64_t v25 = v23 + 2;
            if (v25 >= v13)
            {
LABEL_36:
              swift_release(v5);
              if ((a2 & 1) == 0)
              {
                Swift::Int result = swift_release(v5);
                uint64_t v3 = v33;
                goto LABEL_43;
              }

              uint64_t v32 = 1LL << *(_BYTE *)(v5 + 32);
              if (v32 >= 64) {
                bzero((void *)(v5 + 64), ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
              }
              else {
                *uint64_t v10 = -1LL << v32;
              }
              uint64_t v3 = v33;
              *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
              break;
            }

            unint64_t v24 = v10[v25];
            if (!v24)
            {
              while (1)
              {
                int64_t v16 = v25 + 1;
                if (__OFADD__(v25, 1LL)) {
                  goto LABEL_45;
                }
                if (v16 >= v13) {
                  goto LABEL_36;
                }
                unint64_t v24 = v10[v16];
                ++v25;
                if (v24) {
                  goto LABEL_33;
                }
              }
            }

            int64_t v16 = v25;
          }
        }

uint64_t sub_100418918(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID(0LL, a2);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_1003F5CB4(&qword_1009B9800);
  int v48 = a2;
  uint64_t v13 = static _DictionaryStorage.resize(original:capacity:move:)(v12, a1, a2);
  uint64_t v14 = v13;
  if (!*(void *)(v12 + 16)) {
    goto LABEL_43;
  }
  uint64_t v15 = 1LL << *(_BYTE *)(v12 + 32);
  uint64_t v16 = *(void *)(v12 + 64);
  uint64_t v46 = (void *)(v12 + 64);
  if (v15 < 64) {
    uint64_t v17 = ~(-1LL << v15);
  }
  else {
    uint64_t v17 = -1LL;
  }
  unint64_t v18 = v17 & v16;
  uint64_t v44 = v2;
  int64_t v45 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v19 = v13 + 64;
  uint64_t result = swift_retain(v12);
  int64_t v21 = 0LL;
  for (i = v12; ; uint64_t v12 = i)
  {
    if (v18)
    {
      unint64_t v23 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v24 = v23 | (v21 << 6);
      goto LABEL_24;
    }

    int64_t v25 = v21 + 1;
    if (__OFADD__(v21, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v25 >= v45) {
      break;
    }
    char v26 = v46;
    unint64_t v27 = v46[v25];
    ++v21;
    if (!v27)
    {
      int64_t v21 = v25 + 1;
      if (v25 + 1 >= v45) {
        goto LABEL_36;
      }
      unint64_t v27 = v46[v21];
      if (!v27)
      {
        int64_t v28 = v25 + 2;
        if (v28 >= v45)
        {
LABEL_36:
          swift_release(v12);
          uint64_t v3 = v44;
          if ((v48 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v27 = v46[v28];
        if (!v27)
        {
          while (1)
          {
            int64_t v21 = v28 + 1;
            if (__OFADD__(v28, 1LL)) {
              goto LABEL_45;
            }
            if (v21 >= v45) {
              goto LABEL_36;
            }
            unint64_t v27 = v46[v21];
            ++v28;
            if (v27) {
              goto LABEL_23;
            }
          }
        }

        int64_t v21 = v28;
      }
    }

Swift::Int sub_100418CAC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  Swift::Int v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_1003F5CB4(&qword_1009B9788);
  Swift::Int result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  Swift::Int v8 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v31 = v3;
    int64_t v9 = 0LL;
    uint64_t v33 = (void *)(v5 + 64);
    uint64_t v10 = 1LL << *(_BYTE *)(v5 + 32);
    if (v10 < 64) {
      uint64_t v11 = ~(-1LL << v10);
    }
    else {
      uint64_t v11 = -1LL;
    }
    unint64_t v12 = v11 & *(void *)(v5 + 64);
    int64_t v32 = (unint64_t)(v10 + 63) >> 6;
    Swift::Int v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v18 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v19 = v18 | (v9 << 6);
      }

      else
      {
        int64_t v20 = v9 + 1;
        if (__OFADD__(v9, 1LL))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }

        Swift::Int result = v5 + 64;
        if (v20 >= v32) {
          goto LABEL_36;
        }
        unint64_t v21 = v33[v20];
        ++v9;
        if (!v21)
        {
          int64_t v9 = v20 + 1;
          if (v20 + 1 >= v32) {
            goto LABEL_36;
          }
          unint64_t v21 = v33[v9];
          if (!v21)
          {
            int64_t v22 = v20 + 2;
            if (v22 >= v32)
            {
LABEL_36:
              if ((a2 & 1) == 0)
              {
                Swift::Int result = swift_release(v5);
                uint64_t v3 = v31;
                goto LABEL_43;
              }

              uint64_t v30 = 1LL << *(_BYTE *)(v5 + 32);
              if (v30 >= 64) {
                bzero(v33, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
              }
              else {
                *uint64_t v33 = -1LL << v30;
              }
              uint64_t v3 = v31;
              *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
              break;
            }

            unint64_t v21 = v33[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v9 = v22 + 1;
                if (__OFADD__(v22, 1LL)) {
                  goto LABEL_45;
                }
                if (v9 >= v32) {
                  goto LABEL_36;
                }
                unint64_t v21 = v33[v9];
                ++v22;
                if (v21) {
                  goto LABEL_33;
                }
              }
            }

            int64_t v9 = v22;
          }
        }

uint64_t sub_100418F7C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_1003F5CB4(&qword_1009B9778);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v31 = v3;
    int64_t v9 = 0LL;
    uint64_t v10 = (void *)(v5 + 64);
    uint64_t v11 = 1LL << *(_BYTE *)(v5 + 32);
    if (v11 < 64) {
      uint64_t v12 = ~(-1LL << v11);
    }
    else {
      uint64_t v12 = -1LL;
    }
    unint64_t v13 = v12 & *(void *)(v5 + 64);
    int64_t v14 = (unint64_t)(v11 + 63) >> 6;
    uint64_t v15 = result + 64;
    while (1)
    {
      if (v13)
      {
        unint64_t v20 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        unint64_t v21 = v20 | (v9 << 6);
      }

      else
      {
        int64_t v22 = v9 + 1;
        if (__OFADD__(v9, 1LL))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }

        if (v22 >= v14) {
          goto LABEL_36;
        }
        unint64_t v23 = v10[v22];
        ++v9;
        if (!v23)
        {
          int64_t v9 = v22 + 1;
          if (v22 + 1 >= v14) {
            goto LABEL_36;
          }
          unint64_t v23 = v10[v9];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v14)
            {
LABEL_36:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release(v5);
                uint64_t v3 = v31;
                goto LABEL_43;
              }

              uint64_t v30 = 1LL << *(_BYTE *)(v5 + 32);
              if (v30 >= 64) {
                bzero((void *)(v5 + 64), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
              }
              else {
                *uint64_t v10 = -1LL << v30;
              }
              uint64_t v3 = v31;
              *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
              break;
            }

            unint64_t v23 = v10[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v9 = v24 + 1;
                if (__OFADD__(v24, 1LL)) {
                  goto LABEL_45;
                }
                if (v9 >= v14) {
                  goto LABEL_36;
                }
                unint64_t v23 = v10[v9];
                ++v24;
                if (v23) {
                  goto LABEL_33;
                }
              }
            }

            int64_t v9 = v24;
          }
        }

Swift::Int sub_100419240(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v39 = *(void *)(type metadata accessor for IDSDSessionKeyValueDeliveryLocalEntry(0LL) - 8);
  __chkstk_darwin(v6, v7);
  int64_t v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Swift::Int v10 = *v3;
  if (*(void *)(*v3 + 24) > a1) {
    a1 = *(void *)(*v3 + 24);
  }
  sub_1003F5CB4(&qword_1009B9760);
  int v40 = a2;
  Swift::Int result = static _DictionaryStorage.resize(original:capacity:move:)(v10, a1, a2);
  Swift::Int v12 = result;
  if (*(void *)(v10 + 16))
  {
    int64_t v13 = 0LL;
    uint64_t v14 = *(void *)(v10 + 64);
    char v38 = (void *)(v10 + 64);
    uint64_t v15 = 1LL << *(_BYTE *)(v10 + 32);
    if (v15 < 64) {
      uint64_t v16 = ~(-1LL << v15);
    }
    else {
      uint64_t v16 = -1LL;
    }
    unint64_t v17 = v16 & v14;
    unint64_t v36 = v3;
    int64_t v37 = (unint64_t)(v15 + 63) >> 6;
    Swift::Int v18 = result + 64;
    while (1)
    {
      if (v17)
      {
        unint64_t v20 = __clz(__rbit64(v17));
        v17 &= v17 - 1;
        unint64_t v21 = v20 | (v13 << 6);
      }

      else
      {
        int64_t v22 = v13 + 1;
        if (__OFADD__(v13, 1LL))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }

        Swift::Int result = (Swift::Int)v38;
        if (v22 >= v37) {
          goto LABEL_36;
        }
        unint64_t v23 = v38[v22];
        ++v13;
        if (!v23)
        {
          int64_t v13 = v22 + 1;
          if (v22 + 1 >= v37) {
            goto LABEL_36;
          }
          unint64_t v23 = v38[v13];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v37)
            {
LABEL_36:
              if ((v40 & 1) == 0)
              {
                Swift::Int result = swift_release(v10);
                uint64_t v3 = v36;
                goto LABEL_43;
              }

              uint64_t v35 = 1LL << *(_BYTE *)(v10 + 32);
              if (v35 >= 64) {
                bzero(v38, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
              }
              else {
                *char v38 = -1LL << v35;
              }
              uint64_t v3 = v36;
              *(void *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
              break;
            }

            unint64_t v23 = v38[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v13 = v24 + 1;
                if (__OFADD__(v24, 1LL)) {
                  goto LABEL_45;
                }
                if (v13 >= v37) {
                  goto LABEL_36;
                }
                unint64_t v23 = v38[v13];
                ++v24;
                if (v23) {
                  goto LABEL_23;
                }
              }
            }

            int64_t v13 = v24;
          }
        }

unint64_t sub_100419580(int64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL, a2);
  uint64_t v40 = *(void *)(v4 - 8);
  unint64_t result = __chkstk_darwin(v5, v6);
  int64_t v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = a2 + 64;
  uint64_t v11 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v12 = (a1 + 1) & ~v11;
  if (((1LL << v12) & *(void *)(a2 + 64 + 8 * (v12 >> 6))) != 0)
  {
    uint64_t v13 = ~v11;
    unint64_t result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v11);
    if ((*(void *)(v10 + 8 * (v12 >> 6)) & (1LL << v12)) != 0)
    {
      unint64_t v39 = (result + 1) & v13;
      uint64_t v14 = *(void *)(v40 + 72);
      char v38 = *(void (**)(char *, unint64_t, uint64_t))(v40 + 16);
      uint64_t v15 = v13;
      do
      {
        uint64_t v16 = v10;
        uint64_t v17 = v14;
        int64_t v18 = v14 * v12;
        uint64_t v19 = v15;
        v38(v9, *(void *)(a2 + 48) + v14 * v12, v4);
        uint64_t v20 = *(void *)(a2 + 40);
        uint64_t v21 = sub_10040A2B0( &qword_1009B9300,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v22 = dispatch thunk of Hashable._rawHashValue(seed:)(v20, v4, v21);
        unint64_t result = (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v9, v4);
        uint64_t v15 = v19;
        unint64_t v23 = v22 & v19;
        if (a1 >= (uint64_t)v39)
        {
          if (v23 >= v39 && a1 >= (uint64_t)v23)
          {
LABEL_16:
            uint64_t v26 = *(void *)(a2 + 48);
            unint64_t result = v26 + v17 * a1;
            uint64_t v27 = v26 + v18;
            uint64_t v10 = v16;
            if (v17 * a1 < v18 || (uint64_t v14 = v17, result >= v27 + v17))
            {
              unint64_t result = swift_arrayInitWithTakeFrontToBack(result, v27, 1LL, v4);
LABEL_21:
              uint64_t v15 = v19;
              uint64_t v14 = v17;
            }

            else if (v17 * a1 != v18)
            {
              unint64_t result = swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }

            uint64_t v28 = *(void *)(a2 + 56);
            unint64_t v29 = (void *)(v28 + 8 * a1);
            unint64_t v30 = (void *)(v28 + 8 * v12);
            if (a1 != v12 || (a1 = v12, v29 >= v30 + 1))
            {
              *unint64_t v29 = *v30;
              a1 = v12;
            }

            goto LABEL_5;
          }
        }

        else if (v23 >= v39 || a1 >= (uint64_t)v23)
        {
          goto LABEL_16;
        }

        uint64_t v10 = v16;
        uint64_t v14 = v17;
LABEL_5:
        unint64_t v12 = (v12 + 1) & v15;
      }

      while (((*(void *)(v10 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) != 0);
    }

    char v31 = (uint64_t *)(v10 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v32 = *v31;
    uint64_t v33 = (-1LL << a1) - 1;
  }

  else
  {
    char v31 = (uint64_t *)(v10 + 8 * ((unint64_t)a1 >> 6));
    uint64_t v33 = *v31;
    uint64_t v32 = (-1LL << a1) - 1;
  }

  *char v31 = v33 & v32;
  uint64_t v34 = *(void *)(a2 + 16);
  BOOL v35 = __OFSUB__(v34, 1LL);
  uint64_t v36 = v34 - 1;
  if (v35)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = v36;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

unint64_t sub_100419820(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    unint64_t result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      while (1)
      {
        Swift::UInt32 v9 = *(_DWORD *)(*(void *)(a2 + 48) + 4 * v6);
        Hasher.init(_seed:)(v28, *(void *)(a2 + 40));
        Hasher._combine(_:)(v9);
        unint64_t result = Hasher._finalize()();
        unint64_t v10 = result & v7;
        if (v10 < v8) {
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v11 = *(void *)(a2 + 48);
        unint64_t v12 = (_DWORD *)(v11 + 4 * v3);
        uint64_t v13 = (_DWORD *)(v11 + 4 * v6);
        if (v3 != v6 || v12 >= v13 + 1) {
          _DWORD *v12 = *v13;
        }
        uint64_t v14 = *(void *)(a2 + 56);
        uint64_t v15 = type metadata accessor for IDSDSessionKeyValueDeliveryLocalEntry(0LL);
        uint64_t v16 = *(void *)(*(void *)(v15 - 8) + 72LL);
        int64_t v17 = v16 * v3;
        unint64_t result = v14 + v16 * v3;
        int64_t v18 = v16 * v6;
        uint64_t v19 = v14 + v16 * v6;
        unint64_t v20 = v19 + v16;
        if (v17 < v18 || result >= v20)
        {
          unint64_t result = swift_arrayInitWithTakeFrontToBack(result, v19, 1LL, v15);
        }

        else
        {
          int64_t v3 = v6;
          if (v17 == v18) {
            goto LABEL_6;
          }
          unint64_t result = swift_arrayInitWithTakeBackToFront();
        }

        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          goto LABEL_21;
        }
      }

      if (v10 < v8) {
        goto LABEL_6;
      }
LABEL_11:
      goto LABEL_12;
    }

id sub_100419A00(uint64_t a1, void *a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *v3;
  unint64_t v9 = sub_100417D64((uint64_t)a2);
  uint64_t v10 = *(void *)(v7 + 16);
  BOOL v11 = (v8 & 1) == 0;
  uint64_t v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v13 = v8;
  uint64_t v14 = *(void *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_10041A16C();
LABEL_7:
    uint64_t v15 = (void *)*v4;
    if ((v13 & 1) != 0)
    {
LABEL_8:
      uint64_t v16 = v15[7];
      id result = (id)swift_bridgeObjectRelease(*(void *)(v16 + 8 * v9));
      *(void *)(v16 + 8 * v9) = a1;
      return result;
    }

uint64_t sub_100419B60(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for UUID(0LL, a2);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v10, v11);
  char v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = (void *)*v3;
  unint64_t v17 = sub_100417CA0(a2, v15);
  uint64_t v18 = v14[2];
  BOOL v19 = (v16 & 1) == 0;
  uint64_t v20 = v18 + v19;
  if (__OFADD__(v18, v19))
  {
    __break(1u);
    goto LABEL_14;
  }

  char v21 = v16;
  uint64_t v22 = v14[3];
  if (v22 >= v20 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v23 = *v4;
    if ((v21 & 1) != 0)
    {
LABEL_8:
      uint64_t v24 = v23[7];
      uint64_t result = swift_unknownObjectRelease(*(void *)(v24 + 8 * v17), v16);
      *(void *)(v24 + 8 * v17) = a1;
      return result;
    }

    goto LABEL_11;
  }

  if (v22 >= v20 && (a3 & 1) == 0)
  {
    sub_10041A4D4(v20, v16);
    goto LABEL_7;
  }

  sub_100418918(v20, a3 & 1);
  unint64_t v27 = sub_100417CA0(a2, v26);
  if ((v21 & 1) != (v16 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }

  unint64_t v17 = v27;
  uint64_t v23 = *v4;
  if ((v21 & 1) != 0) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v13, a2, v8);
  return sub_10041A048(v17, (uint64_t)v13, a1, v23);
}

void sub_100419CBC(uint64_t a1, Swift::UInt32 a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_100417D0C(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= v13 && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_10041A704();
LABEL_7:
    uint64_t v16 = (void *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      swift_bridgeObjectRelease(*(void *)(v17 + 8 * v10));
      *(void *)(v17 + 8 * v10) = a1;
      return;
    }

uint64_t sub_100419DF0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_100417DF8(a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= result && (a4 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_10041A8A8();
LABEL_7:
    unint64_t v18 = (void *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      uint64_t v19 = v18[7] + 16 * v12;
      uint64_t result = sub_100402A84(*(void *)v19, *(void *)(v19 + 8));
      *(void *)uint64_t v19 = a1;
      *(void *)(v19 + _Block_object_dispose(va, 8) = a2;
      return result;
    }

uint64_t sub_100419F2C(uint64_t a1, Swift::UInt32 a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_100417D0C(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }

  else
  {
    char v14 = v9;
    uint64_t v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      char v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        uint64_t v17 = v16[7];
        uint64_t v18 = v17
            + *(void *)(*(void *)(type metadata accessor for IDSDSessionKeyValueDeliveryLocalEntry(0LL) - 8) + 72LL)
            * v10;
        return sub_10041D2DC(a1, v18);
      }

      return sub_10041A0E0(v10, a2, a1, v16);
    }

    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_10041AA54();
      goto LABEL_7;
    }

    sub_100419240(v13, a3 & 1);
    unint64_t v20 = sub_100417D0C(a2);
    if ((v14 & 1) == (v21 & 1))
    {
      unint64_t v10 = v20;
      char v16 = *v4;
      if ((v14 & 1) != 0) {
        goto LABEL_8;
      }
      return sub_10041A0E0(v10, a2, a1, v16);
    }
  }

  type metadata accessor for IDSGroupSessionClientDataKey(0LL);
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v22);
  __break(1u);
  return result;
}

uint64_t sub_10041A048(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = type metadata accessor for UUID(0LL, a2);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))( v8 + *(void *)(*(void *)(v9 - 8) + 72LL) * a1,  a2,  v9);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1LL);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

uint64_t sub_10041A0E0(unint64_t a1, int a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1LL << a1;
  *(_DWORD *)(a4[6] + 4 * a1) = a2;
  uint64_t v7 = a4[7];
  uint64_t v8 = type metadata accessor for IDSDSessionKeyValueDeliveryLocalEntry(0LL);
  uint64_t result = sub_1003F600C( a3,  v7 + *(void *)(*(void *)(v8 - 8) + 72LL) * a1,  type metadata accessor for IDSDSessionKeyValueDeliveryLocalEntry);
  uint64_t v10 = a4[2];
  BOOL v11 = __OFADD__(v10, 1LL);
  uint64_t v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    a4[2] = v12;
  }
  return result;
}

void *sub_10041A16C()
{
  uint64_t v1 = v0;
  sub_1003F5CB4(&qword_1009B9810);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v2);
    uint64_t *v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }

void *sub_10041A314()
{
  uint64_t v1 = v0;
  sub_1003F5CB4(&qword_1009B9818);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v2);
    uint64_t *v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }

void *sub_10041A4D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for UUID(0LL, a2);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v5, v6);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1003F5CB4(&qword_1009B9800);
  unint64_t v29 = v2;
  uint64_t v9 = *v2;
  uint64_t v10 = static _DictionaryStorage.copy(original:)(*v2);
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v9);
    *unint64_t v29 = v11;
    return result;
  }

  uint64_t result = (void *)(v10 + 64);
  unint64_t v13 = (unint64_t)((1LL << *(_BYTE *)(v11 + 32)) + 63) >> 6;
  uint64_t v30 = v9 + 64;
  int64_t v15 = 0LL;
  *(void *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v9 + 16);
  uint64_t v16 = 1LL << *(_BYTE *)(v9 + 32);
  uint64_t v17 = -1LL;
  if (v16 < 64) {
    uint64_t v17 = ~(-1LL << v16);
  }
  unint64_t v18 = v17 & *(void *)(v9 + 64);
  int64_t v31 = (unint64_t)(v16 + 63) >> 6;
  while (1)
  {
    if (v18)
    {
      unint64_t v19 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v20 = v19 | (v15 << 6);
      goto LABEL_12;
    }

    int64_t v25 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v25 >= v31) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v30 + 8 * v25);
    ++v15;
    if (!v26)
    {
      int64_t v15 = v25 + 1;
      if (v25 + 1 >= v31) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v30 + 8 * v15);
      if (!v26) {
        break;
      }
    }

void sub_10041A704()
{
  uint64_t v1 = v0;
  sub_1003F5CB4(&qword_1009B9788);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    uint64_t *v1 = v4;
    return;
  }

  __n128 v5 = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }

void *sub_10041A8A8()
{
  uint64_t v1 = v0;
  sub_1003F5CB4(&qword_1009B9778);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v2);
    uint64_t *v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }

void *sub_10041AA54()
{
  uint64_t v1 = v0;
  uint64_t v28 = *(void *)(type metadata accessor for IDSDSessionKeyValueDeliveryLocalEntry(0LL) - 8);
  __chkstk_darwin(v2, v3);
  __n128 v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1003F5CB4(&qword_1009B9760);
  uint64_t v6 = *v0;
  uint64_t v7 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = (void *)swift_release(v6);
LABEL_28:
    uint64_t *v1 = v8;
    return result;
  }

  unint64_t v26 = v1;
  uint64_t result = (void *)(v7 + 64);
  unint64_t v10 = (unint64_t)((1LL << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  uint64_t v27 = v6 + 64;
  int64_t v12 = 0LL;
  *(void *)(v8 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v6 + 16);
  uint64_t v13 = 1LL << *(_BYTE *)(v6 + 32);
  uint64_t v14 = -1LL;
  if (v13 < 64) {
    uint64_t v14 = ~(-1LL << v13);
  }
  unint64_t v15 = v14 & *(void *)(v6 + 64);
  int64_t v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      unint64_t v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v22 >= v16) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v27 + 8 * v22);
    ++v12;
    if (!v23)
    {
      int64_t v12 = v22 + 1;
      if (v22 + 1 >= v16) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v27 + 8 * v12);
      if (!v23) {
        break;
      }
    }

uint64_t sub_10041AC80(uint64_t a1, uint64_t a2)
{
  __n128 v3 = v2;
  uint64_t v6 = type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *v3;
  uint64_t v13 = *(void *)(*v3 + 40LL);
  uint64_t v15 = sub_10040A2B0((unint64_t *)&unk_1009B9980, v14, (uint64_t)&unk_10071BF14);
  swift_bridgeObjectRetain(v12);
  uint64_t v29 = a2;
  uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v13, v6, v15);
  uint64_t v17 = -1LL << *(_BYTE *)(v12 + 32);
  unint64_t v18 = v16 & ~v17;
  if (((*(void *)(v12 + 56 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v18) & 1) != 0)
  {
    uint64_t v27 = v3;
    uint64_t v28 = a1;
    uint64_t v19 = ~v17;
    uint64_t v20 = *(void *)(v7 + 72);
    while (1)
    {
      sub_1003F5FC8( *(void *)(v12 + 48) + v20 * v18,  (uint64_t)v11,  type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
      uint64_t v21 = sub_10040A2B0( (unint64_t *)&unk_1009B97E0,  type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer,  (uint64_t)&unk_10071BF7C);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v29, v6, v21);
      sub_1003F6050((uint64_t)v11, type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
      if ((v22 & 1) != 0) {
        break;
      }
      unint64_t v18 = (v18 + 1) & v19;
      if (((*(void *)(v12 + 56 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v18) & 1) == 0)
      {
        swift_bridgeObjectRelease(v12);
        __n128 v3 = v27;
        a1 = v28;
        goto LABEL_7;
      }
    }

    swift_bridgeObjectRelease(v12);
    sub_1003F6050(v29, type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
    sub_1003F5FC8( *(void *)(*v27 + 48LL) + v20 * v18,  v28,  type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
    return 0LL;
  }

  else
  {
    swift_bridgeObjectRelease(v12);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v24 = v29;
    sub_1003F5FC8(v29, (uint64_t)v11, type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
    uint64_t v30 = *v3;
    void *v3 = 0x8000000000000000LL;
    sub_10041B220((uint64_t)v11, v18, isUniquelyReferenced_nonNull_native);
    uint64_t v25 = *v3;
    void *v3 = v30;
    swift_bridgeObjectRelease(v25);
    sub_1003F600C(v24, a1, type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
    return 1LL;
  }

uint64_t sub_10041AEC0(uint64_t a1)
{
  __n128 v2 = v1;
  uint64_t v4 = type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer(0LL);
  uint64_t v40 = *(void *)(v4 - 8);
  uint64_t v41 = v4;
  __chkstk_darwin(v5, v6);
  __n128 v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_1003F5CB4((uint64_t *)&unk_1009BBE40);
  uint64_t v10 = static _SetStorage.resize(original:capacity:move:)(v9, a1, 1LL);
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16)) {
    goto LABEL_39;
  }
  uint64_t v37 = v2;
  uint64_t v12 = 1LL << *(_BYTE *)(v9 + 32);
  uint64_t v13 = *(void *)(v9 + 56);
  unint64_t v39 = (void *)(v9 + 56);
  if (v12 < 64) {
    uint64_t v14 = ~(-1LL << v12);
  }
  else {
    uint64_t v14 = -1LL;
  }
  unint64_t v15 = v14 & v13;
  int64_t v38 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v16 = v10 + 56;
  uint64_t result = swift_retain(v9);
  int64_t v18 = 0LL;
  while (1)
  {
    if (v15)
    {
      unint64_t v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v21 = v20 | (v18 << 6);
      goto LABEL_26;
    }

    int64_t v22 = v18 + 1;
    if (__OFADD__(v18, 1LL))
    {
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      return result;
    }

    if (v22 >= v38) {
      goto LABEL_35;
    }
    unint64_t v23 = v39[v22];
    ++v18;
    if (!v23)
    {
      int64_t v18 = v22 + 1;
      if (v22 + 1 >= v38) {
        goto LABEL_35;
      }
      unint64_t v23 = v39[v18];
      if (!v23)
      {
        int64_t v18 = v22 + 2;
        if (v22 + 2 >= v38) {
          goto LABEL_35;
        }
        unint64_t v23 = v39[v18];
        if (!v23) {
          break;
        }
      }
    }

uint64_t sub_10041B220(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v33 = a1;
  uint64_t v6 = type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v12 = *(void *)(*v3 + 16);
  unint64_t v13 = *(void *)(*v3 + 24);
  uint64_t v31 = v7;
  unint64_t v32 = v3;
  if (v13 > v12 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  uint64_t v14 = v12 + 1;
  if ((a3 & 1) != 0)
  {
    sub_10041AEC0(v14);
  }

  else
  {
    if (v13 > v12)
    {
      sub_10041B428();
      goto LABEL_12;
    }

    sub_10041B648(v14);
  }

  uint64_t v15 = *v3;
  uint64_t v16 = *(void *)(*v3 + 40);
  uint64_t v17 = sub_10040A2B0( (unint64_t *)&unk_1009B9980,  type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer,  (uint64_t)&unk_10071BF14);
  uint64_t v18 = dispatch thunk of Hashable._rawHashValue(seed:)(v16, v6, v17);
  uint64_t v19 = -1LL << *(_BYTE *)(v15 + 32);
  a2 = v18 & ~v19;
  if (((*(void *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v20 = ~v19;
    uint64_t v21 = *(void *)(v7 + 72);
    do
    {
      sub_1003F5FC8( *(void *)(v15 + 48) + v21 * a2,  (uint64_t)v11,  type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
      uint64_t v22 = sub_10040A2B0( (unint64_t *)&unk_1009B97E0,  type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer,  (uint64_t)&unk_10071BF7C);
      char v23 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v33, v6, v22);
      sub_1003F6050((uint64_t)v11, type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
      if ((v23 & 1) != 0) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v20;
    }

    while (((*(void *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0);
  }

void *sub_10041B428()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer(0LL) - 8);
  __chkstk_darwin(v3, v4);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1003F5CB4((uint64_t *)&unk_1009BBE40);
  uint64_t v7 = *v0;
  uint64_t v8 = static _SetStorage.copy(original:)(*v0);
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
    uint64_t result = (void *)swift_release(v7);
LABEL_30:
    uint64_t *v1 = v9;
    return result;
  }

  uint64_t v26 = v1;
  uint64_t result = (void *)(v8 + 56);
  uint64_t v11 = v7 + 56;
  unint64_t v12 = (unint64_t)((1LL << *(_BYTE *)(v9 + 32)) + 63) >> 6;
  int64_t v14 = 0LL;
  *(void *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v7 + 16);
  uint64_t v15 = 1LL << *(_BYTE *)(v7 + 32);
  uint64_t v16 = -1LL;
  if (v15 < 64) {
    uint64_t v16 = ~(-1LL << v15);
  }
  unint64_t v17 = v16 & *(void *)(v7 + 56);
  int64_t v18 = (unint64_t)(v15 + 63) >> 6;
  while (1)
  {
    if (v17)
    {
      unint64_t v19 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v20 = v19 | (v14 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
      __break(1u);
      goto LABEL_32;
    }

    if (v22 >= v18) {
      goto LABEL_28;
    }
    unint64_t v23 = *(void *)(v11 + 8 * v22);
    ++v14;
    if (!v23)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v18) {
        goto LABEL_28;
      }
      unint64_t v23 = *(void *)(v11 + 8 * v14);
      if (!v23)
      {
        int64_t v14 = v22 + 2;
        if (v22 + 2 >= v18) {
          goto LABEL_28;
        }
        unint64_t v23 = *(void *)(v11 + 8 * v14);
        if (!v23) {
          break;
        }
      }
    }

uint64_t sub_10041B648(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer(0LL);
  uint64_t v39 = *(void *)(v4 - 8);
  uint64_t v40 = v4;
  __chkstk_darwin(v5, v6);
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_1003F5CB4((uint64_t *)&unk_1009BBE40);
  uint64_t v10 = static _SetStorage.resize(original:capacity:move:)(v9, a1, 0LL);
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16))
  {
    uint64_t result = swift_release(v9);
LABEL_37:
    *uint64_t v2 = v11;
    return result;
  }

  uint64_t v12 = 1LL << *(_BYTE *)(v9 + 32);
  uint64_t v13 = *(void *)(v9 + 56);
  uint64_t v36 = v2;
  uint64_t v37 = v9 + 56;
  if (v12 < 64) {
    uint64_t v14 = ~(-1LL << v12);
  }
  else {
    uint64_t v14 = -1LL;
  }
  unint64_t v15 = v14 & v13;
  int64_t v38 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v16 = v10 + 56;
  uint64_t result = swift_retain(v9);
  int64_t v18 = 0LL;
  while (1)
  {
    if (v15)
    {
      unint64_t v20 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v21 = v20 | (v18 << 6);
      goto LABEL_26;
    }

    int64_t v22 = v18 + 1;
    if (__OFADD__(v18, 1LL))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }

    if (v22 >= v38) {
      goto LABEL_35;
    }
    unint64_t v23 = *(void *)(v37 + 8 * v22);
    ++v18;
    if (!v23)
    {
      int64_t v18 = v22 + 1;
      if (v22 + 1 >= v38) {
        goto LABEL_35;
      }
      unint64_t v23 = *(void *)(v37 + 8 * v18);
      if (!v23)
      {
        int64_t v18 = v22 + 2;
        if (v22 + 2 >= v38) {
          goto LABEL_35;
        }
        unint64_t v23 = *(void *)(v37 + 8 * v18);
        if (!v23) {
          break;
        }
      }
    }

unint64_t sub_10041B96C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  sub_1003F5CB4(&qword_1009B9788);
  __n128 v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v1);
  Swift::UInt32 v4 = *(_DWORD *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  unint64_t result = sub_100417D0C(v4);
  if ((v7 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain(v5);
    return (unint64_t)v3;
  }

  uint64_t v8 = (void *)(a1 + 56);
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    *(_DWORD *)(v3[6] + 4 * result) = v4;
    *(void *)(v3[7] + 8 * result) = v5;
    uint64_t v9 = v3[2];
    BOOL v10 = __OFADD__(v9, 1LL);
    uint64_t v11 = v9 + 1;
    if (v10) {
      break;
    }
    v3[2] = v11;
    if (!--v1) {
      goto LABEL_8;
    }
    uint64_t v12 = v8 + 2;
    Swift::UInt32 v4 = *((_DWORD *)v8 - 2);
    uint64_t v13 = *v8;
    swift_bridgeObjectRetain(v5);
    unint64_t result = sub_100417D0C(v4);
    uint64_t v8 = v12;
    uint64_t v5 = v13;
    if ((v14 & 1) != 0) {
      goto LABEL_7;
    }
  }

  __break(1u);
  return result;
}

unint64_t sub_10041BA6C(uint64_t a1)
{
  uint64_t v2 = sub_1003F5CB4(&qword_1009B9820);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v4, v5);
  char v7 = (Swift::UInt32 *)((char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    sub_1003F5CB4(&qword_1009B9760);
    uint64_t v9 = (void *)static _DictionaryStorage.allocate(capacity:)(v8);
    uint64_t v10 = (uint64_t)v7 + *(int *)(v2 + 48);
    uint64_t v11 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v12 = *(void *)(v3 + 72);
    while (1)
    {
      sub_100410FD0(v11, (uint64_t)v7, &qword_1009B9820);
      Swift::UInt32 v13 = *v7;
      unint64_t result = sub_100417D0C(*v7);
      if ((v15 & 1) != 0) {
        break;
      }
      unint64_t v16 = result;
      *(void *)((char *)v9 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
      *(_DWORD *)(v9[6] + 4 * result) = v13;
      uint64_t v17 = v9[7];
      uint64_t v18 = type metadata accessor for IDSDSessionKeyValueDeliveryLocalEntry(0LL);
      unint64_t result = sub_1003F600C( v10,  v17 + *(void *)(*(void *)(v18 - 8) + 72LL) * v16,  type metadata accessor for IDSDSessionKeyValueDeliveryLocalEntry);
      uint64_t v19 = v9[2];
      BOOL v20 = __OFADD__(v19, 1LL);
      uint64_t v21 = v19 + 1;
      if (v20) {
        goto LABEL_10;
      }
      v9[2] = v21;
      v11 += v12;
      if (!--v8) {
        return (unint64_t)v9;
      }
    }

    __break(1u);
LABEL_10:
    __break(1u);
  }

  else
  {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }

  return result;
}

uint64_t sub_10041BBD8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a2 + _Block_object_dispose(va, 8) = *(_OWORD *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  return a2;
}

void *sub_10041BC18(void *a1, void *a2)
{
  return initializeWithCopy for IDSDSessionKeyValueDelivery.State(a2, a1);
}

void *sub_10041BC28(void *a1)
{
  return a1;
}

uint64_t sub_10041BC4C(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }

  return result;
}

unint64_t sub_10041BC74(void *a1)
{
  uint64_t v1 = a1[2];
  if (!v1) {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  sub_1003F5CB4(&qword_1009B9778);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v1);
  uint64_t v5 = a1[4];
  uint64_t v4 = a1[5];
  unint64_t v6 = a1[6];
  unint64_t result = sub_100417DF8(v5);
  if ((v8 & 1) != 0)
  {
LABEL_7:
    __break(1u);
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }

  uint64_t v9 = a1 + 9;
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    *(void *)(v3[6] + 8 * result) = v5;
    uint64_t v10 = (uint64_t *)(v3[7] + 16 * result);
    *uint64_t v10 = v4;
    v10[1] = v6;
    uint64_t v11 = v3[2];
    BOOL v12 = __OFADD__(v11, 1LL);
    uint64_t v13 = v11 + 1;
    if (v12) {
      break;
    }
    v3[2] = v13;
    sub_1004028CC(v4, v6);
    if (!--v1) {
      return (unint64_t)v3;
    }
    uint64_t v5 = *(v9 - 2);
    uint64_t v4 = *(v9 - 1);
    unint64_t v6 = *v9;
    unint64_t result = sub_100417DF8(v5);
    v9 += 3;
    if ((v14 & 1) != 0) {
      goto LABEL_7;
    }
  }

  __break(1u);
  return result;
}

id sub_10041BD74( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12)
{
  v37[3] = a11;
  _OWORD v37[4] = a12;
  uint64_t v17 = sub_10040B2A8(v37);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a11 - 8) + 32LL))(v17, a7, a11);
  uint64_t v18 = a10;
  sub_10048ADB4(0xCu);
  uint64_t v19 = &v18[OBJC_IVAR____TtC17identityservicesd27IDSDSessionKeyValueDelivery_participantProvider];
  *((void *)v19 + 1) = 0LL;
  swift_unknownObjectWeakInit(v19, 0LL);
  uint64_t v20 = OBJC_IVAR____TtC17identityservicesd27IDSDSessionKeyValueDelivery_state;
  swift_unknownObjectWeakInit(v32, 0LL);
  unint64_t v33 = sub_100411E68((uint64_t)&_swiftEmptyArrayStorage);
  unint64_t v34 = sub_10041B96C((uint64_t)&_swiftEmptyArrayStorage);
  unint64_t v35 = sub_10041BA6C((uint64_t)&_swiftEmptyArrayStorage);
  sub_10041BBD8((uint64_t)v32, (uint64_t)v36);
  uint64_t v21 = sub_1003F5CB4((uint64_t *)&unk_1009B9590);
  uint64_t v22 = swift_allocObject(v21, 52LL, 7LL);
  *(_DWORD *)(v22 + 4_Block_object_dispose(va, 8) = 0;
  sub_10041BC18(v36, (void *)(v22 + 16));
  sub_10041BC28(v36);
  *(void *)&v18[v20] = v22;
  unint64_t v23 = &v18[OBJC_IVAR____TtC17identityservicesd27IDSDSessionKeyValueDelivery_groupID];
  *(void *)unint64_t v23 = a2;
  *((void *)v23 + 1) = a3;
  *(void *)&v18[OBJC_IVAR____TtC17identityservicesd27IDSDSessionKeyValueDelivery_metricsCollector] = a4;
  swift_beginAccess(v19, v36, 1LL, 0LL);
  *((void *)v19 + 1) = a6;
  swift_unknownObjectWeakAssign(v19, a5);
  sub_100401ACC( (uint64_t)v37,  (uint64_t)&v18[OBJC_IVAR____TtC17identityservicesd27IDSDSessionKeyValueDelivery_identityProvider]);
  *(void *)&v18[OBJC_IVAR____TtC17identityservicesd27IDSDSessionKeyValueDelivery_pushTokensForCapabilityProvider] = a8;
  sub_100401ACC( (uint64_t)a9,  (uint64_t)&v18[OBJC_IVAR____TtC17identityservicesd27IDSDSessionKeyValueDelivery_cryptoHandler]);
  id v24 = a4;
  swift_unknownObjectRetain(a8, v25);
  swift_retain(v22);
  os_unfair_lock_lock((os_unfair_lock_t)(v22 + 48));
  swift_unknownObjectWeakAssign(v22 + 16, a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(v22 + 48));

  swift_release(v22);
  v31.receiver = v18;
  v31.super_class = (Class)type metadata accessor for IDSDSessionKeyValueDelivery(0LL);
  id v26 = objc_msgSendSuper2(&v31, "init");
  sub_10040A648(a9);
  sub_10040A648(v37);
  return v26;
}

id sub_10041BFB0( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9, __n128 a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v25 = a6;
  uint64_t v26 = a8;
  unint64_t v23 = a4;
  uint64_t v24 = a5;
  uint64_t v18 = *(void *)(a13 - 8);
  __chkstk_darwin(a9, a10);
  uint64_t v20 = (char *)&v23 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v21 = objc_allocWithZone((Class)type metadata accessor for IDSDSessionKeyValueDelivery(0LL));
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, a7, a13);
  return sub_10041BD74(a1, a2, a3, v23, v24, v25, (uint64_t)v20, v26, a11, v21, a13, a14);
}

uint64_t type metadata accessor for IDSDSessionKeyValueDelivery(uint64_t a1)
{
  return sub_100402020(a1, qword_1009C15F8, (uint64_t)&nominal type descriptor for IDSDSessionKeyValueDelivery);
}

uint64_t sub_10041C0A0(uint64_t a1)
{
  return a1;
}

uint64_t sub_10041C0C4(uint64_t result, unint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255) {
    return sub_10040A268(result, a2, a3 & 1);
  }
  return result;
}

void type metadata accessor for IDSGroupSessionClientDataKey(uint64_t a1)
{
}

void sub_10041C0F0(uint64_t a1)
{
  uint64_t v1 = a1;
  unint64_t v2 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v6 = a1;
    }
    else {
      uint64_t v6 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v6);
    swift_bridgeObjectRelease(v1);
    if (v3)
    {
LABEL_3:
      sub_1003F5CB4((uint64_t *)&unk_1009B97D0);
      uint64_t v4 = (void *)static _SetStorage.allocate(capacity:)(v3);
      if (!v2) {
        goto LABEL_4;
      }
LABEL_11:
      if (v1 < 0) {
        uint64_t v7 = v1;
      }
      else {
        uint64_t v7 = v1 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v1);
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v7);
      swift_bridgeObjectRelease(v1);
      if (!v5) {
        return;
      }
      goto LABEL_15;
    }
  }

  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v3) {
      goto LABEL_3;
    }
  }

  uint64_t v4 = &_swiftEmptySetSingleton;
  if (v2) {
    goto LABEL_11;
  }
LABEL_4:
  uint64_t v5 = *(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (!v5) {
    return;
  }
LABEL_15:
  char v8 = (char *)(v4 + 7);
  uint64_t v45 = v5;
  if ((v1 & 0xC000000000000001LL) != 0)
  {
    uint64_t v9 = 0LL;
    uint64_t v43 = v1;
    while (1)
    {
      uint64_t v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v1);
      BOOL v11 = __OFADD__(v9++, 1LL);
      if (v11)
      {
        __break(1u);
        goto LABEL_43;
      }

      uint64_t v12 = v10;
      Swift::Int v13 = NSObject._rawHashValue(seed:)(v4[5]);
      uint64_t v14 = -1LL << *((_BYTE *)v4 + 32);
      unint64_t v15 = v13 & ~v14;
      unint64_t v16 = v15 >> 6;
      uint64_t v17 = *(void *)&v8[8 * (v15 >> 6)];
      uint64_t v18 = 1LL << v15;
      if (((1LL << v15) & v17) != 0)
      {
        type metadata accessor for IDSGroupEncryptionControllerParticipant(0LL);
        id v19 = *(id *)(v4[6] + 8 * v15);
        char v20 = static NSObject.== infix(_:_:)(v19, v12);

        if ((v20 & 1) != 0)
        {
LABEL_17:
          swift_unknownObjectRelease(v12, v21);
          uint64_t v1 = v43;
          goto LABEL_18;
        }

        uint64_t v22 = ~v14;
        while (1)
        {
          unint64_t v15 = (v15 + 1) & v22;
          unint64_t v16 = v15 >> 6;
          uint64_t v17 = *(void *)&v8[8 * (v15 >> 6)];
          uint64_t v18 = 1LL << v15;
          if ((v17 & (1LL << v15)) == 0) {
            break;
          }
          id v23 = *(id *)(v4[6] + 8 * v15);
          char v24 = static NSObject.== infix(_:_:)(v23, v12);

          if ((v24 & 1) != 0) {
            goto LABEL_17;
          }
        }

        uint64_t v1 = v43;
      }

      *(void *)&v8[8 * v16] = v18 | v17;
      *(void *)(v4[6] + 8 * v15) = v12;
      uint64_t v25 = v4[2];
      BOOL v11 = __OFADD__(v25, 1LL);
      uint64_t v26 = v25 + 1;
      if (v11) {
        goto LABEL_44;
      }
      void v4[2] = v26;
LABEL_18:
      if (v9 == v45) {
        return;
      }
    }
  }

  uint64_t v27 = 0LL;
  uint64_t v44 = *(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (v27 != v44)
  {
    Swift::Int v28 = v4[5];
    id v29 = *(id *)(v1 + 32 + 8 * v27);
    Swift::Int v30 = NSObject._rawHashValue(seed:)(v28);
    uint64_t v31 = -1LL << *((_BYTE *)v4 + 32);
    unint64_t v32 = v30 & ~v31;
    unint64_t v33 = v32 >> 6;
    uint64_t v34 = *(void *)&v8[8 * (v32 >> 6)];
    uint64_t v35 = 1LL << v32;
    if (((1LL << v32) & v34) != 0)
    {
      type metadata accessor for IDSGroupEncryptionControllerParticipant(0LL);
      id v36 = *(id *)(v4[6] + 8 * v32);
      char v37 = static NSObject.== infix(_:_:)(v36, v29);

      if ((v37 & 1) != 0) {
        goto LABEL_30;
      }
      uint64_t v38 = ~v31;
      unint64_t v32 = (v32 + 1) & v38;
      unint64_t v33 = v32 >> 6;
      uint64_t v34 = *(void *)&v8[8 * (v32 >> 6)];
      uint64_t v35 = 1LL << v32;
      if ((v34 & (1LL << v32)) != 0)
      {
        while (1)
        {
          id v39 = *(id *)(v4[6] + 8 * v32);
          char v40 = static NSObject.== infix(_:_:)(v39, v29);

          if ((v40 & 1) != 0) {
            break;
          }
          unint64_t v32 = (v32 + 1) & v38;
          unint64_t v33 = v32 >> 6;
          uint64_t v34 = *(void *)&v8[8 * (v32 >> 6)];
          uint64_t v35 = 1LL << v32;
          if ((v34 & (1LL << v32)) == 0) {
            goto LABEL_38;
          }
        }

id sub_10041C448( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  v34[3] = type metadata accessor for IDSGroupEncryptionIdentityController(0LL);
  v34[4] = &off_1009078C0;
  v34[0] = a7;
  unint64_t v15 = a10;
  sub_10048ADB4(0xCu);
  unint64_t v16 = &v15[OBJC_IVAR____TtC17identityservicesd27IDSDSessionKeyValueDelivery_participantProvider];
  *((void *)v16 + 1) = 0LL;
  swift_unknownObjectWeakInit(v16, 0LL);
  uint64_t v17 = OBJC_IVAR____TtC17identityservicesd27IDSDSessionKeyValueDelivery_state;
  swift_unknownObjectWeakInit(v29, 0LL);
  unint64_t v30 = sub_100411E68((uint64_t)&_swiftEmptyArrayStorage);
  unint64_t v31 = sub_10041B96C((uint64_t)&_swiftEmptyArrayStorage);
  unint64_t v32 = sub_10041BA6C((uint64_t)&_swiftEmptyArrayStorage);
  sub_10041BBD8((uint64_t)v29, (uint64_t)v33);
  uint64_t v18 = sub_1003F5CB4((uint64_t *)&unk_1009B9590);
  uint64_t v19 = swift_allocObject(v18, 52LL, 7LL);
  *(_DWORD *)(v19 + 4_Block_object_dispose(va, 8) = 0;
  sub_10041BC18(v33, (void *)(v19 + 16));
  sub_10041BC28(v33);
  *(void *)&v15[v17] = v19;
  char v20 = &v15[OBJC_IVAR____TtC17identityservicesd27IDSDSessionKeyValueDelivery_groupID];
  *(void *)char v20 = a2;
  *((void *)v20 + 1) = a3;
  *(void *)&v15[OBJC_IVAR____TtC17identityservicesd27IDSDSessionKeyValueDelivery_metricsCollector] = a4;
  swift_beginAccess(v16, v33, 1LL, 0LL);
  *((void *)v16 + 1) = a6;
  swift_unknownObjectWeakAssign(v16, a5);
  sub_100401ACC( (uint64_t)v34,  (uint64_t)&v15[OBJC_IVAR____TtC17identityservicesd27IDSDSessionKeyValueDelivery_identityProvider]);
  *(void *)&v15[OBJC_IVAR____TtC17identityservicesd27IDSDSessionKeyValueDelivery_pushTokensForCapabilityProvider] = a8;
  sub_100401ACC( (uint64_t)a9,  (uint64_t)&v15[OBJC_IVAR____TtC17identityservicesd27IDSDSessionKeyValueDelivery_cryptoHandler]);
  id v21 = a4;
  swift_unknownObjectRetain(a8, v22);
  swift_retain(v19);
  os_unfair_lock_lock((os_unfair_lock_t)(v19 + 48));
  swift_unknownObjectWeakAssign(v19 + 16, a1);
  os_unfair_lock_unlock((os_unfair_lock_t)(v19 + 48));

  swift_release(v19);
  v28.receiver = v15;
  v28.super_class = (Class)type metadata accessor for IDSDSessionKeyValueDelivery(0LL);
  id v23 = objc_msgSendSuper2(&v28, "init");
  sub_10040A648(a9);
  sub_10040A648(v34);
  return v23;
}

unint64_t sub_10041C678(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v17 + ((v5 + 16LL) & ~(unint64_t)v5);
    swift_retain(v17);
  }

  else
  {
    uint64_t v7 = *(void *)a2;
    unint64_t v8 = *(void *)(a2 + 8);
    sub_1004028CC(*(void *)a2, v8);
    *(void *)a1 = v7;
    *(void *)(a1 + _Block_object_dispose(va, 8) = v8;
    *(_DWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_DWORD *)(a2 + 16);
    uint64_t v9 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(void *)(a1 + 32) = v9;
    uint64_t v10 = *(int *)(a3 + 28);
    uint64_t v11 = a1 + v10;
    uint64_t v12 = a2 + v10;
    uint64_t v14 = type metadata accessor for UUID(0LL, v13);
    unint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(void *)(v14 - 8) + 16LL);
    __n128 v16 = swift_bridgeObjectRetain(v9);
    v15(v11, v12, v14, v16);
  }

  return a1;
}

uint64_t sub_10041C738(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 28);
  uint64_t v6 = type metadata accessor for UUID(0LL, v5);
  return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v6 - 8) + 8LL))(v4, v6);
}

uint64_t sub_10041C78C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  sub_1004028CC(*(void *)a2, v7);
  *(void *)a1 = v6;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v7;
  *(_DWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_DWORD *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v8;
  uint64_t v9 = *(int *)(a3 + 28);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v13 = type metadata accessor for UUID(0LL, v12);
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(void *)(v13 - 8) + 16LL);
  __n128 v15 = swift_bridgeObjectRetain(v8);
  v14(v10, v11, v13, v15);
  return a1;
}

uint64_t sub_10041C820(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  sub_1004028CC(*(void *)a2, v7);
  uint64_t v8 = *(void *)a1;
  unint64_t v9 = *(void *)(a1 + 8);
  *(void *)a1 = v6;
  *(void *)(a1 + _Block_object_dispose(va, 8) = v7;
  sub_100402A84(v8, v9);
  *(_DWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v10 = *(void *)(a2 + 32);
  uint64_t v11 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = *(int *)(a3 + 28);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v16 = type metadata accessor for UUID(0LL, v15);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 24LL))(v13, v14, v16);
  return a1;
}

uint64_t sub_10041C8C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_DWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UUID(0LL, a2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32LL))(v5, v6, v7);
  return a1;
}

uint64_t sub_10041C934(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_100402A84(v6, v7);
  *(_DWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_DWORD *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(int *)(a3 + 28);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v14 = type metadata accessor for UUID(0LL, v13);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 40LL))(v11, v12, v14);
  return a1;
}

uint64_t sub_10041C9BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10041C9C8);
}

uint64_t sub_10041C9C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 2147483646)
  {
    unint64_t v4 = *(void *)(a1 + 32);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }

  else
  {
    uint64_t v9 = type metadata accessor for UUID(0LL, a2);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48LL))( a1 + *(int *)(a3 + 28),  a2,  v9);
  }

uint64_t sub_10041CA50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10041CA5C);
}

uint64_t sub_10041CA5C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)(result + 32) = a2;
  }

  else
  {
    uint64_t v7 = type metadata accessor for UUID(0LL, a2);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 28),  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_10041CAD0(uint64_t a1, uint64_t a2)
{
  v5[0] = &unk_100718968;
  v5[1] = (char *)&value witness table for Builtin.Int32 + 64;
  void v5[2] = &unk_100718980;
  uint64_t result = type metadata accessor for UUID(319LL, a2);
  if (v4 <= 0x3F)
  {
    v5[3] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 4LL, v5, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_10041CB5C()
{
  return type metadata accessor for IDSDSessionKeyValueDelivery(0LL);
}

uint64_t sub_10041CB64(uint64_t a1)
{
  uint64_t result = type metadata accessor for Logger(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = &unk_1007189C0;
    void v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
    void v4[3] = &unk_1007189D8;
    void v4[4] = &unk_1007189F0;
    v4[5] = &unk_100718A08;
    v4[6] = &unk_1007189F0;
    void v4[7] = (char *)&value witness table for Builtin.NativeObject + 64;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 8LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for IDSDSessionKeyValueDelivery.State(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

uint64_t destroy for IDSDSessionKeyValueDelivery.State(void *a1)
{
  return swift_bridgeObjectRelease(a1[3]);
}

void *initializeWithCopy for IDSDSessionKeyValueDelivery.State(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  a1[1] = v4;
  a1[2] = v5;
  uint64_t v6 = a2[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

void *assignWithCopy for IDSDSessionKeyValueDelivery.State(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[2];
  uint64_t v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[3];
  uint64_t v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

__n128 initializeWithTake for IDSDSessionKeyValueDelivery.State(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = swift_unknownObjectWeakTakeInit(a1, a2);
  __n128 result = *(__n128 *)(a2 + 8);
  *(__n128 *)(v3 + _Block_object_dispose(va, 8) = result;
  *(void *)(v3 + 24) = *(void *)(a2 + 24);
  return result;
}

void *assignWithTake for IDSDSessionKeyValueDelivery.State(void *a1, void *a2)
{
  uint64_t v4 = *(void *)(swift_unknownObjectWeakTakeAssign() + 8);
  a1[1] = a2[1];
  swift_bridgeObjectRelease(v4);
  uint64_t v5 = a1[2];
  a1[2] = a2[2];
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a1[3];
  a1[3] = a2[3];
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for IDSDSessionKeyValueDelivery.State(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(__chkstk_darwin(v1, v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IDSDSessionKeyValueDelivery.State(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 32) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + _Block_object_dispose(va, 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for IDSDSessionKeyValueDelivery.State()
{
  return &type metadata for IDSDSessionKeyValueDelivery.State;
}

void type metadata accessor for IDSGroupSessionClientDataEncryption(uint64_t a1)
{
}

void type metadata accessor for IDSRealTimeEncryptionKMWrapMode(uint64_t a1)
{
}

void sub_10041CE8C(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(0LL, a3);
    if (!v5) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }

uint64_t sub_10041CED0()
{
  return sub_10040A2B0( &qword_1009B96F8,  (uint64_t (*)(uint64_t))type metadata accessor for IDSGroupSessionClientDataKey,  (uint64_t)&unk_100718B54);
}

uint64_t sub_10041CEFC()
{
  _Block_release(*(const void **)(v0 + 40));
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_10041CF38()
{
  unint64_t v2 = *(void **)(v0 + 16);
  int v3 = *(_DWORD *)(v0 + 24);
  int v4 = *(_DWORD *)(v0 + 28);
  uint64_t v5 = *(void **)(v0 + 32);
  uint64_t v6 = *(void **)(v0 + 40);
  uint64_t v7 = *(void **)(v0 + 48);
  uint64_t v8 = (void *)swift_task_alloc(dword_1009B970C);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v8;
  *uint64_t v8 = v1;
  v8[1] = sub_10041CFC8;
  return ((uint64_t (*)(void *, int, int, void *, void *, void *))((char *)&dword_1009B9708 + dword_1009B9708))( v2,  v3,  v4,  v5,  v6,  v7);
}

uint64_t sub_10041CFC8()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10041D014()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  int v4 = (int *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc(dword_1009BB5A4);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_10041D3FC;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_1009BB5A0 + dword_1009BB5A0))(v2, v3, v4);
}

uint64_t sub_10041D090(uint64_t a1, uint64_t a2)
{
  return swift_deallocObject(v2, 48LL, 7LL);
}

uint64_t sub_10041D0BC(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_1009BB5B4);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10041D3FC;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_1009BB5B0 + dword_1009BB5B0))( a1,  v4,  v5,  v6);
}

uint64_t sub_10041D140()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10041D164(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_1009BB5C4);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  void *v5 = v2;
  v5[1] = sub_10041CFC8;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1009BB5C0 + dword_1009BB5C0))(a1, v4);
}

uint64_t sub_10041D1D4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v6 = a4 + 16 * a1 + 32;
    unint64_t v7 = a3 + 16 * v4;
    if (v6 >= v7 || v6 + 16 * v4 <= a3)
    {
      sub_1003F5CB4(&qword_1009B9750);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_10041D2DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for IDSDSessionKeyValueDeliveryLocalEntry(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_10041D320()
{
  unint64_t result = qword_1009B97A0;
  if (!qword_1009B97A0)
  {
    uint64_t v1 = sub_10041D3C4(255LL, (unint64_t *)&unk_1009BACA0, &OBJC_CLASS___NSNumber_ptr);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_1009B97A0);
  }

  return result;
}

uint64_t sub_10041D378(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_1003F5CB4(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_10041D3BC(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

uint64_t sub_10041D3C4(uint64_t a1, unint64_t *a2, void *a3)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t v5 = objc_opt_self(*a3);
    uint64_t result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }

  return result;
}

uint64_t sub_10041D400()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_delegate;
  swift_beginAccess( v0 + OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_delegate,  v3,  0LL,  0LL);
  return swift_unknownObjectWeakLoadStrong(v1);
}

void sub_10041D44C(void *a1, uint64_t a2)
{
  uint64_t v5 = v2 + OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_delegate;
  swift_beginAccess(v5, v6, 1LL, 0LL);
  *(void *)(v5 + _Block_object_dispose(va, 8) = a2;
  swift_unknownObjectWeakAssign(v5, a1);
}

void (*sub_10041D4B0(void *a1))(id **a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_delegate;
  void v3[5] = v1;
  void v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess(v1 + v4, v3, 33LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v5);
  uint64_t v7 = *(void *)(v5 + 8);
  void v3[3] = Strong;
  void v3[4] = v7;
  return sub_10041D524;
}

void sub_10041D524(id **a1, char a2)
{
  uint64_t v3 = *a1;
  id v4 = (*a1)[3];
  id v5 = (*a1)[4];
  unint64_t v6 = (char *)(*a1)[6] + (void)(*a1)[5];
  *((void *)v6 + 1) = v5;
  swift_unknownObjectWeakAssign(v6, v4);
  if ((a2 & 1) != 0)
  {

    swift_endAccess(v3);
  }

  else
  {
    swift_endAccess(v3);
  }

  free(v3);
}

id sub_10041D594(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v11 = objc_allocWithZone(v5);
  return sub_10041D5F4(a1, a2, a3, a4, a5);
}

id sub_10041D5F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v43 = a4;
  uint64_t v44 = a5;
  uint64_t v41 = a2;
  uint64_t v42 = a3;
  char v40 = (void *)a1;
  uint64_t v39 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v6 = *(void *)(v39 - 8);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v16, v17);
  uint64_t v19 = (char *)v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v38 = OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_q;
  v37[0] = sub_10041D3C4(0LL, (unint64_t *)&qword_1009B9830, &OBJC_CLASS___OS_dispatch_queue_ptr);
  char v20 = v5;
  static DispatchQoS.unspecified.getter(v20);
  uint64_t v46 = _swiftEmptyArrayStorage;
  uint64_t v21 = sub_10040A2B0( &qword_1009B8E20,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v22 = sub_1003F5CB4((uint64_t *)&unk_1009B9840);
  uint64_t v23 = sub_1004021DC((unint64_t *)&qword_1009B8E28, (uint64_t *)&unk_1009B9840);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v46, v22, v23, v11, v21);
  (*(void (**)(char *, void, uint64_t))(v6 + 104))( v10,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v39);
  uint64_t v24 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000034LL,  0x800000010083F210LL,  v19,  v15,  v10,  0LL);
  *(void *)(v37[1] + v3_Block_object_dispose(va, 8) = v24;
  uint64_t v25 = &v20[OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_delegate];
  *((void *)v25 + 1) = 0LL;
  swift_unknownObjectWeakInit(v25, 0LL);
  sub_10048ADB4(2u);
  *(void *)&v20[OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_handlers] = _swiftEmptyArrayStorage;
  *(void *)&v20[OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_desired] = &_swiftEmptySetSingleton;
  *(void *)&v20[OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_currentlySent] = &_swiftEmptySetSingleton;
  *(void *)&v20[OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_currentlyAcked] = &_swiftEmptySetSingleton;
  uint64_t v26 = OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_lock;
  uint64_t v27 = sub_1003F5CB4((uint64_t *)&unk_1009B9860);
  uint64_t v28 = swift_allocObject(v27, 20LL, 7LL);
  *(_DWORD *)(v28 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
  *(void *)&v20[v26] = v28;
  *(void *)&v20[OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_setGenerationCount] = 0LL;
  *(void *)&v20[OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_sendGenerationCount] = 0LL;
  id v29 = v40;
  sub_100401ACC( (uint64_t)v40,  (uint64_t)&v20[OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_cryptoHandler]);
  unint64_t v30 = &v20[OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_service];
  uint64_t v31 = v42;
  *(void *)unint64_t v30 = v41;
  *((void *)v30 + 1) = v31;
  unint64_t v32 = &v20[OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_sessionID];
  uint64_t v33 = v44;
  *(void *)unint64_t v32 = v43;
  *((void *)v32 + 1) = v33;

  uint64_t v34 = (objc_class *)type metadata accessor for IDSGroupQUICMaterialExchangeController(0LL);
  v45.receiver = v20;
  v45.super_class = v34;
  id v35 = objc_msgSendSuper2(&v45, "init");
  sub_10040A648(v29);
  return v35;
}

uint64_t type metadata accessor for IDSGroupQUICMaterialExchangeController(uint64_t a1)
{
  uint64_t result = qword_1009C18C8;
  if (!qword_1009C18C8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for IDSGroupQUICMaterialExchangeController);
  }
  return result;
}

uint64_t sub_10041D948(uint64_t a1)
{
  uint64_t v2 = v1;
  id v4 = *(os_unfair_lock_s **)&v2[OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_lock];
  id v5 = v4 + 4;
  swift_retain(v4);
  os_unfair_lock_lock(v4 + 4);
  uint64_t v6 = OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_desired;
  uint64_t v7 = *(void *)&v2[OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_desired];
  *(void *)&v2[OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_desired] = a1;
  swift_bridgeObjectRetain(a1);
  uint64_t result = swift_bridgeObjectRelease(v7);
  uint64_t v9 = *(void *)&v2[OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_setGenerationCount];
  BOOL v10 = __OFADD__(v9, 1LL);
  uint64_t v11 = v9 + 1;
  if (v10)
  {
    __break(1u);
  }

  else
  {
    *(void *)&v2[OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_setGenerationCount] = v11;
    __n128 v12 = v2;
    __n128 v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = swift_slowAlloc(22LL, -1LL);
      uint64_t v16 = swift_slowAlloc(32LL, -1LL);
      uint64_t v20 = v16;
      *(_DWORD *)uint64_t v15 = 136315394;
      uint64_t v19 = sub_1003FFBB0(0xD000000000000017LL, 0x800000010083F430LL, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v15 + 4, v15 + 12);
      *(_WORD *)(v15 + 12) = 2048;
      uint64_t v19 = *(void *)(*(void *)&v2[v6] + 16LL);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v15 + 14, v15 + 22);

      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%s: desired: %ld", (uint8_t *)v15, 0x16u);
      swift_arrayDestroy(v16, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1LL, -1LL);
      uint64_t v17 = v15;
      id v5 = v4 + 4;
      swift_slowDealloc(v17, -1LL, -1LL);
    }

    else
    {
    }

    os_unfair_lock_unlock(v5);
    uint64_t v18 = swift_release(v4);
    return (*(uint64_t (**)(uint64_t))((swift_isaMask & *(void *)v12) + 0x188LL))(v18);
  }

  return result;
}

uint64_t sub_10041DB60()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v3, v4);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v9, v10);
  __n128 v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = *(void *)&v0[OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_q];
  uint64_t v13 = swift_allocObject(&unk_100905770, 24LL, 7LL);
  *(void *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = v0;
  aBlock[4] = sub_100422DF8;
  uint64_t v22 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1003F8400;
  aBlock[3] = &unk_100905788;
  os_log_type_t v14 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v0);
  uint64_t v20 = &_swiftEmptyArrayStorage;
  uint64_t v15 = sub_10040A2B0( (unint64_t *)&unk_1009BAC40,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v16 = sub_1003F5CB4((uint64_t *)&unk_1009B9870);
  uint64_t v17 = sub_1004021DC((unint64_t *)&qword_1009BAC50, (uint64_t *)&unk_1009B9870);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v20, v16, v17, v1, v15);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v12, v6, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v6, v1);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
  return swift_release(v22);
}

uint64_t sub_10041DD78()
{
  uint64_t v1 = v0;
  uint64_t v150 = (char *)type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer(0LL);
  v152.n128_u64[0] = *((void *)v150 - 1);
  __chkstk_darwin(v2, v3);
  uint64_t v5 = (uint64_t (*__ptr32 *)(int, int, id))((char *)&v134 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v6, v7);
  uint64_t v149 = (uint64_t)&v134 - v8;
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (uint64_t)&v134 - v11;
  __chkstk_darwin(v13, v14);
  uint64_t v151 = (uint64_t)&v134 - v15;
  uint64_t v137 = OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_lock;
  uint64_t v16 = *(os_unfair_lock_s **)&v0[OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_lock];
  swift_retain(v16);
  os_unfair_lock_lock(v16 + 4);
  swift_release(v16);
  uint64_t v17 = (os_log_s *)&v0[OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_l];
  uint64_t v138 = v1;
  uint64_t v18 = v1;
  unint64_t v153 = v17;
  uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
  os_log_type_t v20 = static os_log_type_t.default.getter();
  BOOL v21 = os_log_type_enabled(v19, v20);
  uint64_t v22 = &qword_1009C0F80[16];
  uint64_t v23 = &qword_1009C0F80[16];
  uint64_t v135 = v5;
  if (v21)
  {
    uint64_t v24 = swift_slowAlloc(32LL, -1LL);
    uint64_t v25 = swift_slowAlloc(32LL, -1LL);
    aBlock[0] = v25;
    *(_DWORD *)uint64_t v24 = 136315650;
    uint64_t v157 = sub_1003FFBB0(0xD00000000000001FLL, 0x800000010083F360LL, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v157, &v158, v24 + 4, v24 + 12);
    *(_WORD *)(v24 + 12) = 2048;
    uint64_t v157 = *(void *)(*(void *)&v18[OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_desired]
                     + 16LL);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v157, &v158, v24 + 14, v24 + 22);
    *(_WORD *)(v24 + 22) = 2048;
    uint64_t v26 = *(void *)(*(void *)&v18[OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_currentlySent]
                    + 16LL);

    uint64_t v157 = v26;
    uint64_t v23 = qword_1009C0F80 + 128;
    uint64_t v22 = qword_1009C0F80 + 128;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v157, &v158, v24 + 24, v24 + 32);

    _os_log_impl( (void *)&_mh_execute_header,  v19,  v20,  "%s: checking if we have materials to send (desired: %ld, currentlySent: %ld)",  (uint8_t *)v24,  0x20u);
    swift_arrayDestroy(v25, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1LL, -1LL);
    swift_slowDealloc(v24, -1LL, -1LL);
  }

  else
  {
  }

  uint64_t v27 = v22[275];
  uint64_t v28 = *(void *)&v18[v27];
  uint64_t v29 = v23[276];
  uint64_t v140 = v18;
  uint64_t v30 = *(void *)&v18[v29];
  if (*(void *)(v30 + 16) <= *(void *)(v28 + 16) >> 3)
  {
    aBlock[0] = v28;
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRetain(v30);
    sub_100422F60(v30);
    swift_bridgeObjectRelease(v30);
    unint64_t v32 = (void *)aBlock[0];
  }

  else
  {
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRetain(v30);
    unint64_t v32 = sub_1004233A8(v31, v28);
    swift_bridgeObjectRelease(v30);
  }

  if (v32[2])
  {
    uint64_t v141 = v27;
    uint64_t v139 = v29;
    swift_bridgeObjectRetain(v32);
    uint64_t v34 = (os_log_s *)Logger.logObject.getter(v33);
    os_log_type_t v35 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = swift_slowAlloc(22LL, -1LL);
      uint64_t v37 = swift_slowAlloc(32LL, -1LL);
      aBlock[0] = v37;
      *(_DWORD *)uint64_t v36 = 136315394;
      uint64_t v157 = sub_1003FFBB0(0xD00000000000001FLL, 0x800000010083F360LL, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v157, &v158, v36 + 4, v36 + 12);
      *(_WORD *)(v36 + 12) = 2048;
      uint64_t v157 = v32[2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v157, &v158, v36 + 14, v36 + 22);
      swift_bridgeObjectRelease(v32);
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "%s: %ld materials to send", (uint8_t *)v36, 0x16u);
      swift_arrayDestroy(v37, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v37, -1LL, -1LL);
      swift_slowDealloc(v36, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease(v32);
    }

    uint64_t v143 = (*(uint64_t (**)(void *))((swift_isaMask & *(void *)v140) + 0x198LL))(v32);
    uint64_t v41 = v40;
    uint64_t v42 = (os_log_s *)Logger.logObject.getter(v143);
    os_log_type_t v43 = static os_log_type_t.debug.getter();
    BOOL v44 = os_log_type_enabled(v42, v43);
    uint64_t v142 = (uint64_t)v32;
    uint64_t v134 = v41;
    if (v44)
    {
      objc_super v45 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v46 = swift_slowAlloc(32LL, -1LL);
      aBlock[0] = v46;
      *(_DWORD *)objc_super v45 = 136315138;
      uint64_t v157 = sub_1003FFBB0(0xD00000000000001FLL, 0x800000010083F360LL, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v157, &v158, v45 + 4, v45 + 12);
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "%s: previously sent", v45, 0xCu);
      swift_arrayDestroy(v46, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1LL, -1LL);
      swift_slowDealloc(v45, -1LL, -1LL);
    }

    uint64_t v47 = (os_log_s *)"_sendDesiredMaterialsIfNeeded()";
    int v48 = &off_100717000;
    uint64_t v49 = *(void *)&v140[v139];
    uint64_t v50 = *(void *)(v49 + 56);
    uint64_t v146 = v49 + 56;
    uint64_t v51 = 1LL << *(_BYTE *)(v49 + 32);
    uint64_t v52 = -1LL;
    if (v51 < 64) {
      uint64_t v52 = ~(-1LL << v51);
    }
    unint64_t v53 = v52 & v50;
    int64_t v147 = (unint64_t)(v51 + 63) >> 6;
    __n128 v54 = swift_bridgeObjectRetain(v49);
    int64_t v55 = 0LL;
    v54.n128_u64[0] = 136315394LL;
    __n128 v148 = v54;
    unint64_t v136 = (unint64_t)"sendGenerationCount";
    unint64_t v145 = 0x800000010083F360LL;
    unint64_t v144 = (char *)&type metadata for Any + 8;
    if (v53) {
      goto LABEL_19;
    }
LABEL_20:
    int64_t v58 = v55 + 1;
    if (!__OFADD__(v55, 1LL))
    {
      if (v58 >= v147) {
        goto LABEL_37;
      }
      unint64_t v59 = *(void *)(v146 + 8 * v58);
      ++v55;
      if (!v59)
      {
        int64_t v55 = v58 + 1;
        if (v58 + 1 >= v147) {
          goto LABEL_37;
        }
        unint64_t v59 = *(void *)(v146 + 8 * v55);
        if (!v59)
        {
          int64_t v55 = v58 + 2;
          if (v58 + 2 >= v147) {
            goto LABEL_37;
          }
          unint64_t v59 = *(void *)(v146 + 8 * v55);
          if (!v59)
          {
            int64_t v60 = v58 + 3;
            if (v60 < v147)
            {
              unint64_t v59 = *(void *)(v146 + 8 * v60);
              if (v59)
              {
                int64_t v55 = v60;
                goto LABEL_33;
              }

              while (1)
              {
                int64_t v55 = v60 + 1;
                if (__OFADD__(v60, 1LL)) {
                  goto LABEL_83;
                }
                if (v55 >= v147) {
                  break;
                }
                unint64_t v59 = *(void *)(v146 + 8 * v55);
                ++v60;
                if (v59) {
                  goto LABEL_33;
                }
              }
            }

void sub_10041F014(char a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v96 = a5;
  uint64_t v106 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v105 = *(void *)(v106 - 8);
  __chkstk_darwin(v9, v10);
  uint64_t v104 = (char *)&v93 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v103 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v102 = *(void *)(v103 - 8);
  __chkstk_darwin(v12, v13);
  uint64_t v101 = (char *)&v93 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v100 = *(void *)(type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet(0LL) - 8);
  __chkstk_darwin(v15, v16);
  uint64_t v98 = (uint64_t)&v93 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v99 = v17;
  __chkstk_darwin(v18, v19);
  uint64_t v108 = (uint64_t)&v93 - v20;
  uint64_t v21 = type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer(0LL);
  uint64_t v116 = *(void *)(v21 - 8);
  __chkstk_darwin(v22, v23);
  uint64_t v113 = (char *)&v93 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v25, v26);
  uint64_t v28 = (char *)&v93 - v27;
  __chkstk_darwin(v29, v30);
  unint64_t v32 = (char *)&v93 - v31;
  __chkstk_darwin(v33, v34);
  uint64_t v115 = (uint64_t)&v93 - v35;
  uint64_t v36 = OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_lock;
  uint64_t v37 = *(os_unfair_lock_s **)&a2[OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_lock];
  swift_retain(v37);
  os_unfair_lock_lock(v37 + 4);
  swift_release(v37);
  if (*(void *)&a2[OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_sendGenerationCount] != a3)
  {
    char v77 = *(os_unfair_lock_s **)&a2[v36];
LABEL_41:
    swift_retain(v77);
    os_unfair_lock_unlock(v77 + 4);
    swift_release(v77);
    return;
  }

  uint64_t v95 = v36;
  if ((a1 & 1) == 0)
  {
    uint64_t v78 = OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_currentlySent;
    uint64_t v79 = *(void *)&a2[OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_currentlySent];
    if (*(void *)(a4 + 16) <= *(void *)(v79 + 16) >> 3)
    {
      aBlock[0] = *(void *)&a2[OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_currentlySent];
      swift_bridgeObjectRetain(v79);
      sub_100422F60(a4);
      BOOL v80 = (void *)aBlock[0];
    }

    else
    {
      swift_bridgeObjectRetain(*(void *)&a2[OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_currentlySent]);
      BOOL v80 = sub_1004233A8(a4, v79);
    }

    uint64_t v91 = v95;
    uint64_t v92 = *(void *)&a2[v78];
    *(void *)&a2[v78] = v80;
    swift_bridgeObjectRelease(v92);
    char v77 = *(os_unfair_lock_s **)&a2[v91];
    goto LABEL_41;
  }

  uint64_t v94 = OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_sendGenerationCount;
  uint64_t v38 = *(void *)(a4 + 56);
  uint64_t v109 = a4 + 56;
  uint64_t v39 = 1LL << *(_BYTE *)(a4 + 32);
  if (v39 < 64) {
    uint64_t v40 = ~(-1LL << v39);
  }
  else {
    uint64_t v40 = -1LL;
  }
  unint64_t v41 = v40 & v38;
  uint64_t v114 = OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_currentlyAcked;
  uint64_t v97 = OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_q;
  int64_t v110 = (unint64_t)(v39 + 63) >> 6;
  swift_bridgeObjectRetain(a4);
  int64_t v42 = 0LL;
  uint64_t v111 = a4;
  uint64_t v112 = a2;
  uint64_t v43 = (uint64_t)v113;
  while (1)
  {
    if (v41)
    {
      uint64_t v118 = (v41 - 1) & v41;
      unint64_t v44 = __clz(__rbit64(v41)) | (v42 << 6);
      goto LABEL_24;
    }

    int64_t v45 = v42 + 1;
    if (__OFADD__(v42, 1LL))
    {
      __break(1u);
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }

    if (v45 >= v110) {
      goto LABEL_37;
    }
    unint64_t v46 = *(void *)(v109 + 8 * v45);
    ++v42;
    if (!v46)
    {
      int64_t v42 = v45 + 1;
      if (v45 + 1 >= v110) {
        goto LABEL_37;
      }
      unint64_t v46 = *(void *)(v109 + 8 * v42);
      if (!v46)
      {
        int64_t v42 = v45 + 2;
        if (v45 + 2 >= v110) {
          goto LABEL_37;
        }
        unint64_t v46 = *(void *)(v109 + 8 * v42);
        if (!v46) {
          break;
        }
      }
    }

uint64_t sub_10041F890(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer(0LL) - 8);
  __chkstk_darwin(v5, v6);
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9, v10);
  __n128 v12 = (char *)&v29 - v11;
  uint64_t result = __chkstk_darwin(v13, v14);
  uint64_t v17 = (char *)&v29 - v16;
  int64_t v18 = 0LL;
  uint64_t v19 = *(void *)(a1 + 56);
  uint64_t v29 = a1 + 56;
  uint64_t v30 = a2;
  uint64_t v20 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v21 = -1LL;
  if (v20 < 64) {
    uint64_t v21 = ~(-1LL << v20);
  }
  unint64_t v22 = v21 & v19;
  int64_t v23 = (unint64_t)(v20 + 63) >> 6;
  while (1)
  {
    if (v22)
    {
      unint64_t v24 = __clz(__rbit64(v22));
      v22 &= v22 - 1;
      unint64_t v25 = v24 | (v18 << 6);
      goto LABEL_5;
    }

    int64_t v26 = v18 + 1;
    if (__OFADD__(v18, 1LL))
    {
      __break(1u);
      goto LABEL_25;
    }

    if (v26 >= v23) {
      goto LABEL_23;
    }
    unint64_t v27 = *(void *)(v29 + 8 * v26);
    ++v18;
    if (!v27)
    {
      int64_t v18 = v26 + 1;
      if (v26 + 1 >= v23) {
        goto LABEL_23;
      }
      unint64_t v27 = *(void *)(v29 + 8 * v18);
      if (!v27)
      {
        int64_t v18 = v26 + 2;
        if (v26 + 2 >= v23) {
          goto LABEL_23;
        }
        unint64_t v27 = *(void *)(v29 + 8 * v18);
        if (!v27)
        {
          int64_t v18 = v26 + 3;
          if (v26 + 3 >= v23) {
            goto LABEL_23;
          }
          unint64_t v27 = *(void *)(v29 + 8 * v18);
          if (!v27) {
            break;
          }
        }
      }
    }

uint64_t sub_10041FAB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  v4(a2);
  return swift_release(v3);
}

void sub_10041FAF4(uint64_t a1)
{
  uint64_t v82 = *(void *)(type metadata accessor for IDSGroupEncryptionMaterialData(0LL) - 8);
  __chkstk_darwin(v3, v4);
  __n128 v6 = (char *)v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7, v8);
  __n128 v10 = (char *)v68 - v9;
  uint64_t v72 = *(void *)(type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer(0LL) - 8);
  __chkstk_darwin(v11, v12);
  uint64_t v78 = (uint64_t)v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14, v15);
  uint64_t v77 = (uint64_t)v68 - v16;
  __chkstk_darwin(v17, v18);
  uint64_t v20 = (char *)v68 - v19;
  __chkstk_darwin(v21, v22);
  uint64_t v71 = (uint64_t)v68 - v23;
  unint64_t v85 = (unint64_t)&_swiftEmptyArrayStorage;
  uint64_t v86 = &_swiftEmptySetSingleton;
  uint64_t v24 = *(void *)(a1 + 56);
  uint64_t v69 = a1 + 56;
  uint64_t v25 = 1LL << *(_BYTE *)(a1 + 32);
  if (v25 < 64) {
    uint64_t v26 = ~(-1LL << v25);
  }
  else {
    uint64_t v26 = -1LL;
  }
  unint64_t v27 = v26 & v24;
  uint64_t v83 = v1;
  v68[2] = v1 + OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_cryptoHandler;
  int64_t v70 = (unint64_t)(v25 + 63) >> 6;
  uint64_t v73 = a1;
  swift_bridgeObjectRetain(a1);
  int64_t v28 = 0LL;
  v68[1] = (char *)&type metadata for Any + 8;
  uint64_t v81 = v20;
  if (v27) {
    goto LABEL_51;
  }
LABEL_7:
  int64_t v29 = v28 + 1;
  if (!__OFADD__(v28, 1LL))
  {
    if (v29 < v70)
    {
      unint64_t v30 = *(void *)(v69 + 8 * v29);
      ++v28;
      if (v30) {
        goto LABEL_20;
      }
      int64_t v28 = v29 + 1;
      if (v29 + 1 >= v70) {
        goto LABEL_52;
      }
      unint64_t v30 = *(void *)(v69 + 8 * v28);
      if (v30) {
        goto LABEL_20;
      }
      int64_t v28 = v29 + 2;
      if (v29 + 2 >= v70) {
        goto LABEL_52;
      }
      unint64_t v30 = *(void *)(v69 + 8 * v28);
      if (v30)
      {
LABEL_20:
        unint64_t v27 = (v30 - 1) & v30;
        for (unint64_t i = __clz(__rbit64(v30)) + (v28 << 6); ; unint64_t i = v67 | (v28 << 6))
        {
          uint64_t v33 = v71;
          sub_1003F5FC8( *(void *)(v73 + 48) + *(void *)(v72 + 72) * i,  v71,  type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
          sub_1003F600C(v33, (uint64_t)v20, type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
          id v34 = [objc_allocWithZone(IDSQRProtoMaterial) init];
          if (!v34)
          {
            sub_1003F6050((uint64_t)v20, type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
            if (v27) {
              goto LABEL_51;
            }
            goto LABEL_7;
          }

          uint64_t v35 = v34;
          unint64_t v75 = v27;
          int64_t v76 = v28;
          uint64_t v36 = sub_1004867D8();
          id v74 = v35;
          [v35 setReceiverParticipantId:v36];
          sub_1004864A4();
          uint64_t v38 = v37;
          int64_t v39 = 0LL;
          uint64_t v84 = (uint64_t)&_swiftEmptyArrayStorage;
          uint64_t v40 = *(void *)(v37 + 56);
          uint64_t v79 = v37 + 56;
          uint64_t v41 = 1LL << *(_BYTE *)(v37 + 32);
          uint64_t v42 = v41 < 64 ? ~(-1LL << v41) : -1LL;
          unint64_t v43 = v42 & v40;
          int64_t v80 = (unint64_t)(v41 + 63) >> 6;
          while (1)
          {
            if (v43)
            {
              unint64_t v47 = __clz(__rbit64(v43));
              v43 &= v43 - 1;
              unint64_t v48 = v47 | (v39 << 6);
              goto LABEL_44;
            }

            int64_t v49 = v39 + 1;
            if (__OFADD__(v39, 1LL))
            {
              __break(1u);
LABEL_54:
              __break(1u);
              goto LABEL_55;
            }

            if (v49 >= v80) {
              goto LABEL_48;
            }
            unint64_t v50 = *(void *)(v79 + 8 * v49);
            ++v39;
            if (!v50)
            {
              int64_t v39 = v49 + 1;
              if (v49 + 1 >= v80) {
                goto LABEL_48;
              }
              unint64_t v50 = *(void *)(v79 + 8 * v39);
              if (!v50)
              {
                int64_t v39 = v49 + 2;
                if (v49 + 2 >= v80) {
                  goto LABEL_48;
                }
                unint64_t v50 = *(void *)(v79 + 8 * v39);
                if (!v50) {
                  break;
                }
              }
            }

uint64_t sub_100420134(uint64_t a1)
{
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v14 = a1;
    }
    else {
      uint64_t v14 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v14);
    swift_bridgeObjectRelease(a1);
  }

  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  __n128 v3 = &_swiftEmptyArrayStorage;
  if (!v2) {
    return (uint64_t)v3;
  }
  __n128 v17 = &_swiftEmptyArrayStorage;
  uint64_t result = sub_100425048(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000LL) == 0)
  {
    if ((a1 & 0xC000000000000001LL) != 0)
    {
      for (uint64_t i = 0LL; i != v2; ++i)
      {
        id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
        uint64_t v6 = sub_10041D3C4(0LL, (unint64_t *)&unk_1009B99B0, &OBJC_CLASS___IDSQRProtoMaterialInfo_ptr);
        swift_dynamicCast(v16, &v15, v6, (char *)&type metadata for Any + 8, 7LL);
        __n128 v3 = v17;
        if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0)
        {
          sub_100425048(0, v3[2] + 1LL, 1);
          __n128 v3 = v17;
        }

        unint64_t v8 = v3[2];
        unint64_t v7 = v3[3];
        if (v8 >= v7 >> 1)
        {
          sub_100425048(v7 > 1, v8 + 1, 1);
          __n128 v3 = v17;
        }

        v3[2] = v8 + 1;
        sub_10040DAE8(v16, &v3[4 * v8 + 4]);
      }
    }

    else
    {
      uint64_t v9 = (id *)(a1 + 32);
      uint64_t v10 = sub_10041D3C4(0LL, (unint64_t *)&unk_1009B99B0, &OBJC_CLASS___IDSQRProtoMaterialInfo_ptr);
      do
      {
        id v15 = *v9;
        id v11 = v15;
        swift_dynamicCast(v16, &v15, v10, (char *)&type metadata for Any + 8, 7LL);
        __n128 v3 = v17;
        if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0)
        {
          sub_100425048(0, v3[2] + 1LL, 1);
          __n128 v3 = v17;
        }

        unint64_t v13 = v3[2];
        unint64_t v12 = v3[3];
        if (v13 >= v12 >> 1)
        {
          sub_100425048(v12 > 1, v13 + 1, 1);
          __n128 v3 = v17;
        }

        v3[2] = v13 + 1;
        sub_10040DAE8(v16, &v3[4 * v13 + 4]);
        ++v9;
        --v2;
      }

      while (v2);
    }

    return (uint64_t)v3;
  }

  __break(1u);
  return result;
}

id sub_100420394(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for UUID(0LL, a2);
  unint64_t v106 = *(void *)(v5 - 8);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v101 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10, v11);
  unint64_t v13 = (char *)&v101 - v12;
  uint64_t v14 = type metadata accessor for String.Encoding(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v16, v17);
  uint64_t v19 = (char *)&v101 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (sub_100486744())
  {
    uint64_t v21 = *(void *)(v2 + OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_sessionID);
    uint64_t v20 = *(void *)(v2 + OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_sessionID + 8);
    static String.Encoding.utf8.getter();
    uint64_t v104 = v21;
    uint64_t v105 = v20;
    uint64_t v22 = String.data(using:allowLossyConversion:)(v19, 0LL, v21, v20);
    unint64_t v24 = v23;
    (*(void (**)(char *, uint64_t))(v15 + 8))(v19, v14);
    if (v24 >> 60 == 15)
    {
      return 0LL;
    }

    else
    {
      uint64_t v102 = v5;
      uint64_t v103 = v13;
      uint64_t v111 = v22;
      unint64_t v112 = v24;
      uint64_t v101 = a1;
      sub_1004B57EC();
      uint64_t v45 = v44;
      unint64_t v47 = v46;
      Data.append(_:)();
      sub_100402A84(v45, v47);
      uint64_t v48 = *(void *)(v3
                      + OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_cryptoHandler
                      + 24);
      uint64_t v49 = *(void *)(v3
                      + OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_cryptoHandler
                      + 32);
      sub_10040A238( (void *)(v3 + OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_cryptoHandler),  v48);
      uint64_t v51 = v111;
      unint64_t v50 = v112;
      uint64_t v52 = *(void *)(v3 + OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_service);
      uint64_t v53 = *(void *)(v3 + OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_service + 8);
      unint64_t v54 = *(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v49 + 64);
      sub_1004028CC(v111, v112);
      uint64_t v55 = v54(v51, v50, v52, v53, v48, v49);
      unint64_t v57 = v56;
      char v59 = v58;
      sub_100402A84(v51, v50);
      if ((v59 & 1) != 0)
      {
        swift_errorRetain(v55);
        uint64_t v88 = swift_errorRetain(v55);
        uint64_t v89 = (os_log_s *)Logger.logObject.getter(v88);
        os_log_type_t v90 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v89, v90))
        {
          uint64_t v91 = swift_slowAlloc(22LL, -1LL);
          unint64_t v106 = v50;
          uint64_t v92 = v91;
          uint64_t v93 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
          uint64_t v104 = swift_slowAlloc(32LL, -1LL);
          uint64_t v109 = v104;
          *(_DWORD *)uint64_t v92 = 136315394;
          uint64_t v107 = sub_1003FFBB0(0xD000000000000035LL, 0x800000010083F3F0LL, &v109);
          uint64_t v105 = v51;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, v108, v92 + 4, v92 + 12);
          *(_WORD *)(v92 + 12) = 2112;
          swift_errorRetain(v55);
          uint64_t v94 = v55;
          uint64_t v95 = _swift_stdlib_bridgeErrorToNSError(v55);
          uint64_t v107 = v95;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, v108, v92 + 14, v92 + 22);
          *uint64_t v93 = v95;
          sub_10040A268(v94, v57, 1);
          sub_10040A268(v94, v57, 1);
          _os_log_impl((void *)&_mh_execute_header, v89, v90, "%s: error signing: %@", (uint8_t *)v92, 0x16u);
          uint64_t v96 = sub_1003F5CB4(&qword_1009B92C8);
          swift_arrayDestroy(v93, 1LL, v96);
          swift_slowDealloc(v93, -1LL, -1LL);
          uint64_t v97 = v104;
          swift_arrayDestroy(v104, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v97, -1LL, -1LL);
          swift_slowDealloc(v92, -1LL, -1LL);

          sub_10040A268(v94, v57, 1);
          uint64_t v98 = v105;
          unint64_t v99 = v106;
        }

        else
        {
          sub_10040A268(v55, v57, 1);
          sub_10040A268(v55, v57, 1);
          swift_errorRelease(v55);

          uint64_t v98 = v51;
          unint64_t v99 = v50;
        }

        sub_100402A84(v98, v99);
        return 0LL;
      }

      else
      {
        id v60 = objc_allocWithZone(&OBJC_CLASS___IDSQRProtoMaterialInfo);
        sub_1004028CC(v55, v57);
        id v25 = [v60 init];
        if (v25)
        {
          uint64_t v61 = sub_1004B591C((uint64_t)v103);
          uint64_t v109 = UUID.uuid.getter(v61);
          LOWORD(v110) = v62;
          BYTE2(v110) = v63;
          BYTE3(v110) = v64;
          BYTE4(v110) = v65;
          BYTE5(v110) = v66;
          BYTE6(v110) = v67;
          HIBYTE(v110) = v68;
          uint64_t v69 = sub_100420C58((uint64_t)&v109, (uint64_t)&v111);
          unint64_t v71 = v70;
          Class isa = Data._bridgeToObjectiveC()().super.isa;
          sub_100402A84(v69, v71);
          [v25 setMaterialId:isa];

          sub_1004B5AE0();
          [v25 setMaterialType:v73];
          uint64_t v74 = sub_1003F5CB4((uint64_t *)&unk_1009B99C0);
          uint64_t inited = swift_initStackObject(v74, v108);
          *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100718500;
          uint64_t v109 = 0x64616F6C796170LL;
          unint64_t v110 = 0xE700000000000000LL;
          AnyHashable.init<A>(_:)(&v109, &type metadata for String, &protocol witness table for String);
          sub_1004B57EC();
          *(void *)(inited + 96) = &type metadata for Data;
          *(void *)(inited + 72) = v76;
          *(void *)(inited + 80) = v77;
          uint64_t v109 = 0x496E6F6973736573LL;
          unint64_t v110 = 0xE900000000000044LL;
          AnyHashable.init<A>(_:)(&v109, &type metadata for String, &protocol witness table for String);
          *(void *)(inited + 16_Block_object_dispose(va, 8) = &type metadata for String;
          uint64_t v78 = v105;
          *(void *)(inited + 144) = v104;
          *(void *)(inited + 152) = v78;
          uint64_t v109 = 0x727574616E676973LL;
          unint64_t v110 = 0xE900000000000065LL;
          swift_bridgeObjectRetain(v78);
          AnyHashable.init<A>(_:)(&v109, &type metadata for String, &protocol witness table for String);
          *(void *)(inited + 240) = &type metadata for Data;
          *(void *)(inited + 2swift_unknownObjectWeakDestroy(v0 + 16) = v55;
          *(void *)(inited + 224) = v57;
          unint64_t v79 = sub_10040C1F4(inited);
          Class v80 = Dictionary._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v79);
          Class v81 = (Class)(id)JWEncodeDictionary(v80);

          if (v81)
          {
            uint64_t v82 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v81);
            unint64_t v84 = v83;

            Class v81 = Data._bridgeToObjectiveC()().super.isa;
            sub_100402A84(v82, v84);
          }

          uint64_t v85 = v102;
          [v25 setMaterialContent:v81];

          [v25 setShortMaterialIdLength:sub_1004B5A08()];
          sub_10040A268(v55, v57, 0);
          (*(void (**)(char *, uint64_t))(v106 + 8))(v103, v85);
          uint64_t v86 = v111;
          unint64_t v87 = v112;
        }

        else
        {
          sub_10040A268(v55, v57, 0);
          sub_10040A268(v55, v57, 0);
          uint64_t v86 = v51;
          unint64_t v87 = v50;
        }

        sub_100402A84(v86, v87);
      }
    }
  }

  else
  {
    id v25 = [objc_allocWithZone(IDSQRProtoMaterialInfo) init];
    if (v25)
    {
      uint64_t v26 = sub_1004B591C((uint64_t)v9);
      uint64_t v111 = UUID.uuid.getter(v26);
      LOWORD(v112) = v27;
      BYTE2(v112) = v28;
      BYTE3(v112) = v29;
      BYTE4(v112) = v30;
      BYTE5(v112) = v31;
      BYTE6(v112) = v32;
      HIBYTE(v112) = v33;
      uint64_t v34 = sub_100420C58((uint64_t)&v111, (uint64_t)&v113);
      unint64_t v36 = v35;
      Class v37 = Data._bridgeToObjectiveC()().super.isa;
      sub_100402A84(v34, v36);
      [v25 setMaterialId:v37];

      sub_1004B5AE0();
      [v25 setMaterialType:v38];
      sub_1004B57EC();
      uint64_t v40 = v39;
      unint64_t v42 = v41;
      Class v43 = Data._bridgeToObjectiveC()().super.isa;
      sub_100402A84(v40, v42);
      [v25 setMaterialContent:v43];

      (*(void (**)(char *, uint64_t))(v106 + 8))(v9, v5);
    }
  }

  return v25;
}

uint64_t sub_100420C58(uint64_t a1, uint64_t a2)
{
  void v8[3] = &type metadata for UnsafeRawBufferPointer;
  void v8[4] = &protocol witness table for UnsafeRawBufferPointer;
  v8[0] = a1;
  v8[1] = a2;
  uint64_t v2 = sub_10040A238(v8, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  uint64_t v3 = (_BYTE *)*v2;
  if (*v2 && (__n128 v4 = (_BYTE *)v2[1], v5 = v4 - v3, v4 != v3))
  {
    if (v5 <= 14)
    {
      uint64_t v6 = sub_10040B3A0(v3, v4);
    }

    else if ((unint64_t)v5 >= 0x7FFFFFFF)
    {
      uint64_t v6 = sub_10040B460((uint64_t)v3, (uint64_t)v4);
    }

    else
    {
      uint64_t v6 = sub_10040B4D8((uint64_t)v3, (uint64_t)v4);
    }
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  sub_10040A648(v8);
  return v6;
}

void *sub_100420D10()
{
  uint64_t v35 = type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet(0LL);
  __chkstk_darwin(v1, v2);
  unint64_t v36 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10, v11);
  unint64_t v13 = (char *)&v31 - v12;
LABEL_2:
  uint64_t v14 = &_swiftEmptySetSingleton;
  while (1)
  {
    uint64_t v40 = v14;
    uint64_t v31 = OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_lock;
    uint64_t v15 = *(os_unfair_lock_s **)((char *)v0
                               + OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_lock);
    swift_retain(v15);
    os_unfair_lock_lock(v15 + 4);
    swift_release(v15);
    char v32 = v0;
    uint64_t v16 = *(uint64_t *)((char *)v0
                     + OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_currentlyAcked);
    uint64_t v17 = *(void *)(v16 + 56);
    uint64_t v37 = v16 + 56;
    uint64_t v18 = 1LL << *(_BYTE *)(v16 + 32);
    uint64_t v19 = -1LL;
    if (v18 < 64) {
      uint64_t v19 = ~(-1LL << v18);
    }
    unint64_t v20 = v19 & v17;
    uint64_t v34 = v36 + 8;
    int64_t v38 = (unint64_t)(v18 + 63) >> 6;
    swift_bridgeObjectRetain(v16);
    int64_t v21 = 0LL;
    char v33 = v9;
    uint64_t v22 = (uint64_t)v36;
    while (v20)
    {
      while (1)
      {
        unint64_t v23 = __clz(__rbit64(v20));
        v20 &= v20 - 1;
        unint64_t v24 = v23 | (v21 << 6);
LABEL_23:
        sub_1003F5FC8( *(void *)(v16 + 48) + *(void *)(v5 + 72) * v24,  (uint64_t)v13,  type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
        sub_1003F600C( (uint64_t)v13,  (uint64_t)v9,  type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
        sub_1003F600C((uint64_t)v9, v22, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
        uint64_t v0 = &v40;
        sub_100424C28((Swift::Int *)&v39, *(id *)&v34[*(int *)(v35 + 24)]);

        uint64_t v9 = v33;
        sub_1003F6050(v22, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
        if (!v20) {
          goto LABEL_9;
        }
      }

      sub_1003F6050((uint64_t)v9, type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
    }

uint64_t sub_10042108C(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_handlers);
  swift_beginAccess( v1 + OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_handlers,  v17,  0LL,  0LL);
  uint64_t v4 = *v3;
  uint64_t v5 = *(void *)(*v3 + 16LL);
  if (v5)
  {
    uint64_t v6 = v4 + 32;
    swift_bridgeObjectRetain(*v3);
    do
    {
      sub_100425540(v6, (uint64_t)v15);
      uint64_t Strong = swift_unknownObjectWeakLoadStrong(v15);
      if (Strong)
      {
        uint64_t v9 = Strong;
        swift_unknownObjectRelease(Strong, v8);
        sub_10041C0A0((uint64_t)v15);
        if (v9 == a1) {
          return swift_bridgeObjectRelease(v4);
        }
      }

      else
      {
        sub_10041C0A0((uint64_t)v15);
      }

      v6 += 8LL;
      --v5;
    }

    while (v5);
    swift_bridgeObjectRelease(v4);
  }

  swift_unknownObjectWeakInit(v16, a1);
  swift_beginAccess(v3, v15, 33LL, 0LL);
  __n128 v11 = (void *)*v3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  void *v3 = v11;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    __n128 v11 = sub_100422E30(0LL, v11[2] + 1LL, 1, (unint64_t)v11);
    void *v3 = v11;
  }

  unint64_t v14 = v11[2];
  unint64_t v13 = v11[3];
  if (v14 >= v13 >> 1)
  {
    __n128 v11 = sub_100422E30((void *)(v13 > 1), v14 + 1, 1, (unint64_t)v11);
    void *v3 = v11;
  }

  _DWORD v11[2] = v14 + 1;
  sub_100425550((uint64_t)v16, (uint64_t)&v11[v14 + 4]);
  return swift_endAccess(v15);
}

uint64_t sub_100421250(uint64_t a1)
{
  uint64_t v3 = (unint64_t *)(v1 + OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_handlers);
  swift_beginAccess(v3, v9, 33LL, 0LL);
  swift_unknownObjectRetain(a1, v4);
  uint64_t v5 = sub_100425650(v3, a1);
  uint64_t result = swift_unknownObjectRelease(a1, v6);
  int64_t v8 = *(void *)(*v3 + 16);
  if (v8 < v5)
  {
    __break(1u);
  }

  else
  {
    sub_1004258E4(v5, v8);
    return swift_endAccess(v9);
  }

  return result;
}

uint64_t sub_100421380()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_currentlySent);
  *(void *)(v0 + OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_currentlySent) = &_swiftEmptySetSingleton;
  return swift_bridgeObjectRelease(v1);
}

uint64_t sub_1004213BC()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_lock);
  swift_retain(v1);
  os_unfair_lock_lock(v1 + 4);
  sub_100425A6C(&v4);
  uint64_t v2 = v4;
  os_unfair_lock_unlock(v1 + 4);
  swift_release(v1);
  return v2;
}

void sub_10042148C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v187 = a2;
  uint64_t v183 = type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer(0LL);
  uint64_t v188 = *(void *)(v183 - 8);
  __chkstk_darwin(v7, v8);
  uint64_t v184 = (uint64_t)&v168 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10, v11);
  uint64_t v172 = (char *)&v168 - v12;
  __chkstk_darwin(v13, v14);
  uint64_t v179 = (uint64_t)&v168 - v15;
  __chkstk_darwin(v16, v17);
  uint64_t v185 = (uint64_t *)((char *)&v168 - v18);
  __chkstk_darwin(v19, v20);
  uint64_t v178 = (char *)&v168 - v21;
  __chkstk_darwin(v22, v23);
  uint64_t v180 = (uint64_t)&v168 - v24;
  __chkstk_darwin(v25, v26);
  uint64_t v186 = (uint64_t)&v168 - v27;
  __chkstk_darwin(v28, v29);
  uint64_t v175 = (char *)&v168 - v30;
  __chkstk_darwin(v31, v32);
  uint64_t v181 = (uint64_t *)((char *)&v168 - v33);
  uint64_t v169 = OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_lock;
  uint64_t v34 = *(os_unfair_lock_s **)&v3[OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_lock];
  swift_retain(v34);
  os_unfair_lock_lock(v34 + 4);
  swift_release(v34);
  uint64_t v35 = swift_bridgeObjectRetain_n(a3, 2LL);
  uint64_t v189 = a1;
  unint64_t v36 = (os_log_s *)Logger.logObject.getter(v35);
  os_log_type_t v37 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v36, v37))
  {
    int64_t v38 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v39 = swift_slowAlloc(32LL, -1LL);
    v191[0] = v39;
    *(_DWORD *)int64_t v38 = 136315138;
    swift_bridgeObjectRetain(a3);
    uint64_t v190 = sub_1003FFBB0(v187, a3, v191);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v190, v191, v38 + 4, v38 + 12);
    swift_bridgeObjectRelease_n(a3, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "%sQUICMaterialExchangeController", v38, 0xCu);
    swift_arrayDestroy(v39, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v39, -1LL, -1LL);
    swift_slowDealloc(v38, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(a3, 2LL);
  }

  swift_bridgeObjectRetain_n(a3, 2LL);
  uint64_t v40 = v4;
  unint64_t v41 = (os_log_s *)Logger.logObject.getter(v40);
  os_log_type_t v42 = static os_log_type_t.default.getter();
  BOOL v43 = os_log_type_enabled(v41, v42);
  uint64_t v170 = v4;
  if (v43)
  {
    os_log_type_t v44 = v42;
    uint64_t v45 = swift_slowAlloc(22LL, -1LL);
    uint64_t v46 = swift_slowAlloc(64LL, -1LL);
    v191[0] = v46;
    *(_DWORD *)uint64_t v45 = 136315394;
    swift_bridgeObjectRetain(a3);
    uint64_t v190 = sub_1003FFBB0(v187, a3, v191);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v190, v191, v45 + 4, v45 + 12);
    swift_bridgeObjectRelease_n(a3, 3LL);
    *(_WORD *)(v45 + 12) = 2080;
    uint64_t v48 = *(void *)&v40[OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_service];
    unint64_t v47 = *(void *)&v40[OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_service + 8];
    swift_bridgeObjectRetain(v47);
    uint64_t v190 = sub_1003FFBB0(v48, v47, v191);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v190, v191, v45 + 14, v45 + 22);

    swift_bridgeObjectRelease(v47);
    _os_log_impl((void *)&_mh_execute_header, v41, v44, "%s    service=%s", (uint8_t *)v45, 0x16u);
    swift_arrayDestroy(v46, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v46, -1LL, -1LL);
    swift_slowDealloc(v45, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a3, 2LL);
  }

  swift_bridgeObjectRetain_n(a3, 2LL);
  uint64_t v49 = v40;
  unint64_t v50 = (os_log_s *)Logger.logObject.getter(v49);
  os_log_type_t v51 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v50, v51))
  {
    uint64_t v52 = swift_slowAlloc(22LL, -1LL);
    uint64_t v53 = swift_slowAlloc(32LL, -1LL);
    v191[0] = v53;
    *(_DWORD *)uint64_t v52 = 136315394;
    swift_bridgeObjectRetain(a3);
    uint64_t v190 = sub_1003FFBB0(v187, a3, v191);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v190, v191, v52 + 4, v52 + 12);
    swift_bridgeObjectRelease_n(a3, 3LL);
    *(_WORD *)(v52 + 12) = 2048;
    uint64_t v54 = *(void *)&v49[OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_setGenerationCount];

    uint64_t v190 = v54;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v190, v191, v52 + 14, v52 + 22);

    _os_log_impl((void *)&_mh_execute_header, v50, v51, "%s    setGenerationCount=%ld", (uint8_t *)v52, 0x16u);
    swift_arrayDestroy(v53, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v53, -1LL, -1LL);
    swift_slowDealloc(v52, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(a3, 2LL);
  }

  swift_bridgeObjectRetain_n(a3, 2LL);
  uint64_t v55 = v49;
  unint64_t v56 = (os_log_s *)Logger.logObject.getter(v55);
  os_log_type_t v57 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v56, v57))
  {
    uint64_t v58 = swift_slowAlloc(22LL, -1LL);
    uint64_t v59 = swift_slowAlloc(32LL, -1LL);
    v191[0] = v59;
    *(_DWORD *)uint64_t v58 = 136315394;
    swift_bridgeObjectRetain(a3);
    uint64_t v190 = sub_1003FFBB0(v187, a3, v191);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v190, v191, v58 + 4, v58 + 12);
    swift_bridgeObjectRelease_n(a3, 3LL);
    *(_WORD *)(v58 + 12) = 2048;
    uint64_t v60 = *(void *)&v55[OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_sendGenerationCount];

    uint64_t v190 = v60;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v190, v191, v58 + 14, v58 + 22);

    _os_log_impl((void *)&_mh_execute_header, v56, v57, "%s    sendGenerationCount=%ld", (uint8_t *)v58, 0x16u);
    swift_arrayDestroy(v59, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v59, -1LL, -1LL);
    swift_slowDealloc(v58, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(a3, 2LL);
  }

  uint64_t v61 = swift_bridgeObjectRetain_n(a3, 2LL);
  __int16 v62 = (os_log_s *)Logger.logObject.getter(v61);
  os_log_type_t v63 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v62, v63))
  {
    char v64 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v65 = swift_slowAlloc(32LL, -1LL);
    v191[0] = v65;
    *(_DWORD *)char v64 = 136315138;
    swift_bridgeObjectRetain(a3);
    uint64_t v190 = sub_1003FFBB0(v187, a3, v191);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v190, v191, v64 + 4, v64 + 12);
    swift_bridgeObjectRelease_n(a3, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v62, v63, "%s    ", v64, 0xCu);
    swift_arrayDestroy(v65, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v65, -1LL, -1LL);
    swift_slowDealloc(v64, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(a3, 2LL);
  }

  uint64_t v66 = swift_bridgeObjectRetain_n(a3, 2LL);
  char v67 = (os_log_s *)Logger.logObject.getter(v66);
  os_log_type_t v68 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v67, v68))
  {
    uint64_t v69 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v70 = swift_slowAlloc(32LL, -1LL);
    v191[0] = v70;
    *(_DWORD *)uint64_t v69 = 136315138;
    swift_bridgeObjectRetain(a3);
    uint64_t v190 = sub_1003FFBB0(v187, a3, v191);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v190, v191, v69 + 4, v69 + 12);
    swift_bridgeObjectRelease_n(a3, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v67, v68, "%s    Desired Materials:", v69, 0xCu);
    swift_arrayDestroy(v70, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v70, -1LL, -1LL);
    swift_slowDealloc(v69, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(a3, 2LL);
  }

  uint64_t v71 = v186;
  uint64_t v72 = (uint64_t)v175;
  uint64_t v173 = v55;
  uint64_t v171 = OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_desired;
  uint64_t v73 = *(void *)&v55[OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_desired];
  uint64_t v74 = *(void *)(v73 + 56);
  uint64_t v176 = v73 + 56;
  uint64_t v75 = 1LL << *(_BYTE *)(v73 + 32);
  uint64_t v76 = -1LL;
  if (v75 < 64) {
    uint64_t v76 = ~(-1LL << v75);
  }
  unint64_t v77 = v76 & v74;
  uint64_t v177 = (char *)((unint64_t)(v75 + 63) >> 6);
  __n128 v78 = swift_bridgeObjectRetain(v73);
  uint64_t v79 = 0LL;
  v78.n128_u64[0] = 136315394LL;
  __n128 v182 = v78;
  uint64_t v174 = (char *)&type metadata for Any + 8;
  while (1)
  {
    if (v77)
    {
      unint64_t v80 = __clz(__rbit64(v77));
      v77 &= v77 - 1;
      unint64_t v81 = v80 | (v79 << 6);
      goto LABEL_40;
    }

    uint64_t v82 = v79 + 1;
    if (__OFADD__(v79, 1LL))
    {
      __break(1u);
LABEL_102:
      __break(1u);
LABEL_103:
      __break(1u);
      goto LABEL_104;
    }

    uint64_t v83 = (uint64_t)v178;
    unint64_t v84 = *(void *)(v176 + 8 * v82);
    ++v79;
    if (!v84)
    {
      uint64_t v79 = v82 + 1;
      unint64_t v84 = *(void *)(v176 + 8 * v79);
      if (!v84)
      {
        uint64_t v79 = v82 + 2;
        unint64_t v84 = *(void *)(v176 + 8 * v79);
        if (!v84) {
          break;
        }
      }
    }

LABEL_97:
        unint64_t v148 = (v152 - 1) & v152;
        unint64_t v150 = __clz(__rbit64(v152)) + (v144 << 6);
      }

      uint64_t v154 = v179;
      sub_1003F5FC8( v141[6] + *(void *)(v188 + 72) * v150,  v179,  type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
      sub_1003F600C(v154, v143, type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
      sub_1003F5FC8(v143, v137, type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
      uint64_t v155 = swift_bridgeObjectRetain_n(a3, 2LL);
      uint64_t v156 = v143;
      uint64_t v157 = (os_log_s *)Logger.logObject.getter(v155);
      os_log_type_t v158 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v157, v158))
      {
        uint64_t v159 = swift_slowAlloc(22LL, -1LL);
        uint64_t v160 = swift_slowAlloc(64LL, -1LL);
        v191[0] = v160;
        *(_DWORD *)uint64_t v159 = v182.n128_u32[0];
        swift_bridgeObjectRetain(a3);
        *(void *)(v159 + 4) = sub_1003FFBB0(v187, a3, v191);
        swift_bridgeObjectRelease_n(a3, 3LL);
        *(_WORD *)(v159 + 12) = 2080;
        uint64_t v161 = sub_10040A2B0( &qword_1009B9880,  type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer,  (uint64_t)&unk_10071BF54);
        uint64_t v162 = dispatch thunk of CustomStringConvertible.description.getter(v183, v161);
        unint64_t v164 = v163;
        *(void *)(v159 + 14) = sub_1003FFBB0(v162, v163, v191);
        swift_bridgeObjectRelease(v164);
        sub_1003F6050(v184, type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
        _os_log_impl((void *)&_mh_execute_header, v157, v158, "%s        %s", (uint8_t *)v159, 0x16u);
        swift_arrayDestroy(v160, 2LL, v180);
        uint64_t v165 = v160;
        uint64_t v141 = v181;
        swift_slowDealloc(v165, -1LL, -1LL);
        uint64_t v166 = v159;
        uint64_t v137 = v184;
        swift_slowDealloc(v166, -1LL, -1LL);
      }

      else
      {
        swift_bridgeObjectRelease_n(a3, 2LL);
        sub_1003F6050(v137, type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
      }

      sub_1003F6050(v156, type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
      uint64_t v143 = v156;
    }
  }

  unint64_t v118 = v181[v117];
  ++v113;
  if (v118) {
    goto LABEL_68;
  }
  uint64_t v113 = v117 + 1;
  if (v117 + 1 >= v186) {
    goto LABEL_71;
  }
  unint64_t v118 = v181[v113];
  if (v118) {
    goto LABEL_68;
  }
  uint64_t v113 = v117 + 2;
  if (v117 + 2 >= v186) {
    goto LABEL_71;
  }
  unint64_t v118 = v181[v113];
  if (v118)
  {
LABEL_68:
    unint64_t v112 = (v118 - 1) & v118;
    unint64_t v116 = __clz(__rbit64(v118)) + (v113 << 6);
    goto LABEL_69;
  }

  uint64_t v119 = v117 + 3;
  if (v119 >= v186) {
    goto LABEL_71;
  }
  unint64_t v118 = v181[v119];
  if (v118)
  {
    uint64_t v113 = v119;
    goto LABEL_68;
  }

  while (1)
  {
    uint64_t v113 = v119 + 1;
    if (__OFADD__(v119, 1LL)) {
      break;
    }
    if (v113 >= v186) {
      goto LABEL_71;
    }
    unint64_t v118 = v181[v113];
    ++v119;
    if (v118) {
      goto LABEL_68;
    }
  }

id sub_100422B2C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for IDSGroupQUICMaterialExchangeController(0LL);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100422C48()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **v0) + 0x180LL))();
}

uint64_t sub_100422C80()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **v0) + 0x1A8LL))();
}

uint64_t sub_100422CB8()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **v0) + 0x1B0LL))();
}

uint64_t sub_100422CF0()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **v0) + 0x1B8LL))();
}

uint64_t sub_100422D28(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))((swift_isaMask & **v2) + 0x1C8LL))(a1, a2 & 0xFFFFFFFFFFLL);
}

uint64_t sub_100422D64()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **v0) + 0x1C0LL))();
}

uint64_t sub_100422D9C()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **v0) + 0x1F0LL))();
}

uint64_t sub_100422DD4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100422DF8()
{
  return sub_10041DD78();
}

uint64_t sub_100422E18(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100422E28(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void *sub_100422E30(void *result, int64_t a2, char a3, unint64_t a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = *(void *)(a4 + 24);
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = *(void *)(a4 + 16);
    if (v7 <= v8) {
      uint64_t v9 = *(void *)(a4 + 16);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_1003F5CB4(&qword_1009B9998);
      __n128 v11 = (void *)swift_allocObject(v10, 8 * v9 + 32, 7LL);
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 25;
      }
      _DWORD v11[2] = v8;
      v11[3] = 2 * (v13 >> 3);
      __n128 v14 = v11 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      __n128 v11 = &_swiftEmptyArrayStorage;
      __n128 v14 = &_swiftEmptyArrayStorage + 4;
      if ((result & 1) != 0)
      {
LABEL_15:
        if ((unint64_t)v11 < a4 || (unint64_t)v14 >= a4 + 32 + 8 * v8)
        {
          swift_arrayInitWithTakeFrontToBack(v14, a4 + 32, v8, &type metadata for WeakHandler);
        }

        else if (v11 != (void *)a4)
        {
          swift_arrayInitWithTakeBackToFront(v14);
        }

        *(void *)(a4 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
        goto LABEL_26;
      }
    }

    sub_100425560(0LL, v8, (unint64_t)v14, a4);
LABEL_26:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

void sub_100422F60(uint64_t a1)
{
  unint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *(void *)(type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer(0LL) - 8);
  __chkstk_darwin(v8, v9);
  __n128 v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)&v27 - v14;
  if (!*(void *)(*(void *)v1 + 16LL)) {
    return;
  }
  uint64_t v16 = *(void *)(a1 + 56);
  uint64_t v28 = a1 + 56;
  uint64_t v17 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v18 = -1LL;
  if (v17 < 64) {
    uint64_t v18 = ~(-1LL << v17);
  }
  unint64_t v19 = v18 & v16;
  int64_t v20 = (unint64_t)(v17 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t v21 = 0LL;
  while (1)
  {
    if (v19)
    {
      unint64_t v22 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      unint64_t v23 = v22 | (v21 << 6);
      goto LABEL_6;
    }

    int64_t v24 = v21 + 1;
    if (__OFADD__(v21, 1LL))
    {
      __break(1u);
      goto LABEL_27;
    }

    if (v24 >= v20) {
      goto LABEL_24;
    }
    unint64_t v25 = *(void *)(v28 + 8 * v24);
    ++v21;
    if (!v25)
    {
      int64_t v21 = v24 + 1;
      if (v24 + 1 >= v20) {
        goto LABEL_24;
      }
      unint64_t v25 = *(void *)(v28 + 8 * v21);
      if (!v25)
      {
        int64_t v21 = v24 + 2;
        if (v24 + 2 >= v20) {
          goto LABEL_24;
        }
        unint64_t v25 = *(void *)(v28 + 8 * v21);
        if (!v25)
        {
          int64_t v21 = v24 + 3;
          if (v24 + 3 >= v20) {
            goto LABEL_24;
          }
          unint64_t v25 = *(void *)(v28 + 8 * v21);
          if (!v25) {
            break;
          }
        }
      }
    }

Swift::Int sub_1004231B4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_1003F5CB4((uint64_t *)&unk_1009B99A0);
    uint64_t v4 = static _SetStorage.convert(_:capacity:)(a1, a2);
    uint64_t v23 = v4;
    uint64_t v5 = __CocoaSet.makeIterator()(a1);
    uint64_t v6 = __CocoaSet.Iterator.next()(v5);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = sub_10041D3C4(0LL, (unint64_t *)&qword_1009BBE30, &OBJC_CLASS___IDSPushToken_ptr);
      do
      {
        uint64_t v21 = v7;
        swift_dynamicCast(&v22, &v21, (char *)&type metadata for Swift.AnyObject + 8, v8, 7LL);
        uint64_t v4 = v23;
        unint64_t v16 = *(void *)(v23 + 16);
        if (*(void *)(v23 + 24) <= v16)
        {
          sub_100423B6C(v16 + 1);
          uint64_t v4 = v23;
        }

        uint64_t v9 = v22;
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v4 + 40));
        uint64_t v11 = v4 + 56;
        uint64_t v12 = -1LL << *(_BYTE *)(v4 + 32);
        unint64_t v13 = result & ~v12;
        unint64_t v14 = v13 >> 6;
        if (((-1LL << v13) & ~*(void *)(v4 + 56 + 8 * (v13 >> 6))) != 0)
        {
          unint64_t v15 = __clz(__rbit64((-1LL << v13) & ~*(void *)(v4 + 56 + 8 * (v13 >> 6)))) | v13 & 0x7FFFFFFFFFFFFFC0LL;
        }

        else
        {
          char v17 = 0;
          unint64_t v18 = (unint64_t)(63 - v12) >> 6;
          do
          {
            if (++v14 == v18 && (v17 & 1) != 0)
            {
              __break(1u);
              return result;
            }

            BOOL v19 = v14 == v18;
            if (v14 == v18) {
              unint64_t v14 = 0LL;
            }
            v17 |= v19;
            uint64_t v20 = *(void *)(v11 + 8 * v14);
          }

          while (v20 == -1);
          unint64_t v15 = __clz(__rbit64(~v20)) + (v14 << 6);
        }

        *(void *)(v11 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
        *(void *)(*(void *)(v4 + 48) + 8 * v15) = v9;
        ++*(void *)(v4 + 16);
        uint64_t v7 = __CocoaSet.Iterator.next()(result);
      }

      while (v7);
    }

    swift_release(v5);
  }

  else
  {
    swift_unknownObjectRelease(a1, 0LL);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }

  return v4;
}

void *sub_1004233A8(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer(0LL);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13, v14);
  char v17 = (char *)&v58 - v16;
  if (!*(void *)(a2 + 16))
  {
    swift_release(a2);
    return &_swiftEmptySetSingleton;
  }

  uint64_t v61 = v7;
  uint64_t v62 = v15;
  uint64_t v18 = -1LL << *(_BYTE *)(a1 + 32);
  uint64_t v20 = a1 + 56;
  uint64_t v19 = *(void *)(a1 + 56);
  uint64_t v21 = ~v18;
  uint64_t v22 = -v18;
  if (v22 < 64) {
    uint64_t v23 = ~(-1LL << v22);
  }
  else {
    uint64_t v23 = -1LL;
  }
  uint64_t v65 = a1;
  uint64_t v66 = a1 + 56;
  unint64_t v24 = v23 & v19;
  uint64_t v67 = v21;
  int64_t v68 = 0LL;
  unint64_t v69 = v23 & v19;
  swift_bridgeObjectRetain(a1);
  unint64_t v25 = v24;
  int64_t v26 = 0LL;
  uint64_t v60 = (char *)(a2 + 56);
  while (1)
  {
    unint64_t v58 = v25;
    int64_t v59 = v26;
    if (v25)
    {
      uint64_t v63 = (v25 - 1) & v25;
      int64_t v64 = v26;
      unint64_t v27 = __clz(__rbit64(v25)) | (v26 << 6);
      uint64_t v28 = (uint64_t)v61;
LABEL_9:
      uint64_t v29 = *(void *)(a1 + 48);
      uint64_t v30 = a1;
      uint64_t v31 = v62;
      sub_1003F5FC8( v29 + *(void *)(v62 + 72) * v27,  v28,  type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
      uint64_t v32 = 0LL;
      goto LABEL_32;
    }

    int64_t v33 = v26 + 1;
    uint64_t v28 = (uint64_t)v61;
    if (__OFADD__(v26, 1LL)) {
      __break(1u);
    }
    int64_t v34 = (unint64_t)(v21 + 64) >> 6;
    if (v33 >= v34)
    {
LABEL_30:
      uint64_t v63 = 0LL;
      int64_t v64 = v26;
      goto LABEL_31;
    }

    unint64_t v35 = *(void *)(v20 + 8 * v33);
    if (v35) {
      goto LABEL_13;
    }
    v26 += 2LL;
    if (v33 + 1 >= v34)
    {
      int64_t v64 = v33;
    }

    else
    {
      unint64_t v35 = *(void *)(v20 + 8 * v26);
      if (v35) {
        goto LABEL_16;
      }
      if (v33 + 2 >= v34) {
        goto LABEL_30;
      }
      unint64_t v35 = *(void *)(v20 + 8 * (v33 + 2));
      if (v35)
      {
        v33 += 2LL;
        goto LABEL_13;
      }

      int64_t v26 = v33 + 3;
      if (v33 + 3 >= v34)
      {
        uint64_t v63 = 0LL;
        int64_t v64 = v33 + 2;
        goto LABEL_31;
      }

      unint64_t v35 = *(void *)(v20 + 8 * v26);
      if (v35)
      {
LABEL_16:
        int64_t v33 = v26;
LABEL_13:
        uint64_t v63 = (v35 - 1) & v35;
        int64_t v64 = v33;
        unint64_t v27 = __clz(__rbit64(v35)) + (v33 << 6);
        goto LABEL_9;
      }

      v33 += 4LL;
      if (v33 >= v34) {
        goto LABEL_30;
      }
      unint64_t v35 = *(void *)(v20 + 8 * v33);
      if (v35) {
        goto LABEL_13;
      }
      uint64_t v36 = v59 + 6;
      while (v34 != v36)
      {
        unint64_t v35 = *(void *)(v20 + 8 * v36++);
        if (v35)
        {
          int64_t v33 = v36 - 1;
          goto LABEL_13;
        }
      }

      int64_t v64 = v34 - 1;
    }

    uint64_t v63 = 0LL;
LABEL_31:
    uint64_t v32 = 1LL;
    uint64_t v30 = a1;
    uint64_t v31 = v62;
LABEL_32:
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 56))(v28, v32, 1LL, v8);
    uint64_t v65 = v30;
    uint64_t v66 = v20;
    uint64_t v67 = v21;
    int64_t v68 = v64;
    unint64_t v69 = v63;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v28, 1LL, v8) == 1)
    {
      sub_10041D3BC(v30);
      sub_100425F6C(v28);
      return (void *)a2;
    }

    sub_1003F600C(v28, (uint64_t)v17, type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
    uint64_t v37 = *(void *)(a2 + 40);
    uint64_t v38 = sub_10040A2B0( (unint64_t *)&unk_1009B9980,  type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer,  (uint64_t)&unk_10071BF14);
    uint64_t v39 = dispatch thunk of Hashable._rawHashValue(seed:)(v37, v8, v38);
    uint64_t v40 = -1LL << *(_BYTE *)(a2 + 32);
    unint64_t v41 = v39 & ~v40;
    os_log_type_t v42 = v60;
    if (((*(void *)&v60[(v41 >> 3) & 0xFFFFFFFFFFFFF8LL] >> v41) & 1) != 0) {
      break;
    }
LABEL_6:
    sub_1003F6050((uint64_t)v17, type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
    int64_t v26 = v68;
    unint64_t v25 = v69;
    a1 = v65;
    uint64_t v20 = v66;
    uint64_t v21 = v67;
  }

  uint64_t v43 = ~v40;
  uint64_t v44 = *(void *)(v62 + 72);
  while (1)
  {
    sub_1003F5FC8( *(void *)(a2 + 48) + v44 * v41,  (uint64_t)v12,  type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
    uint64_t v45 = sub_10040A2B0( (unint64_t *)&unk_1009B97E0,  type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer,  (uint64_t)&unk_10071BF7C);
    char v46 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v17, v8, v45);
    sub_1003F6050((uint64_t)v12, type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
    if ((v46 & 1) != 0) {
      break;
    }
    unint64_t v41 = (v41 + 1) & v43;
    if (((*(void *)&v42[(v41 >> 3) & 0xFFFFFFFFFFFFF8LL] >> v41) & 1) == 0) {
      goto LABEL_6;
    }
  }

  sub_1003F6050((uint64_t)v17, type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
  char v49 = *(_BYTE *)(a2 + 32);
  unsigned int v50 = v49 & 0x3F;
  unint64_t v51 = (1LL << v49) + 63;
  uint64_t v52 = v51 >> 6;
  size_t v53 = 8 * (v51 >> 6);
  if (v50 <= 0xD || swift_stdlib_isStackAllocationSafe(8 * (v51 >> 6), 8LL))
  {
    __chkstk_darwin(v47, v48);
    memcpy((char *)&v58 - ((v53 + 15) & 0x3FFFFFFFFFFFFFF0LL), v42, v53);
    uint64_t v54 = sub_100423E88((unint64_t *)((char *)&v58 - ((v53 + 15) & 0x3FFFFFFFFFFFFFF0LL)), v52, a2, v41, &v65);
    swift_release(a2);
    sub_10041D3BC(v65);
    return v54;
  }

  else
  {
    uint64_t v55 = (void *)swift_slowAlloc(v53, -1LL);
    memcpy(v55, v42, v53);
    unint64_t v56 = sub_100423E88((unint64_t *)v55, v52, a2, v41, &v65);
    swift_release(a2);
    sub_10041D3BC(v65);
    swift_slowDealloc(v55, -1LL, -1LL);
    return v56;
  }

uint64_t sub_10042393C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v7, v8);
  __n128 v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32 = v2;
  uint64_t v11 = *v2;
  uint64_t v12 = *(void *)(*v2 + 40);
  uint64_t v14 = sub_10040A2B0((unint64_t *)&unk_1009B9980, v13, (uint64_t)&unk_10071BF14);
  swift_bridgeObjectRetain(v11);
  uint64_t v33 = a1;
  uint64_t v15 = dispatch thunk of Hashable._rawHashValue(seed:)(v12, v5, v14);
  uint64_t v16 = -1LL << *(_BYTE *)(v11 + 32);
  unint64_t v17 = v15 & ~v16;
  if (((*(void *)(v11 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v17) & 1) != 0)
  {
    uint64_t v30 = v6;
    uint64_t v31 = a2;
    uint64_t v18 = ~v16;
    uint64_t v19 = *(void *)(v6 + 72);
    while (1)
    {
      sub_1003F5FC8( *(void *)(v11 + 48) + v19 * v17,  (uint64_t)v10,  type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
      uint64_t v20 = sub_10040A2B0( (unint64_t *)&unk_1009B97E0,  type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer,  (uint64_t)&unk_10071BF7C);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v33, v5, v20);
      sub_1003F6050((uint64_t)v10, type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
      if ((v21 & 1) != 0) {
        break;
      }
      unint64_t v17 = (v17 + 1) & v18;
      if (((*(void *)(v11 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v17) & 1) == 0)
      {
        swift_bridgeObjectRelease(v11);
        uint64_t v22 = 1LL;
        uint64_t v6 = v30;
        a2 = v31;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v22, 1LL, v5);
      }
    }

    swift_bridgeObjectRelease(v11);
    uint64_t v23 = v32;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v32);
    uint64_t v25 = *v23;
    uint64_t v34 = *v23;
    *uint64_t v23 = 0x8000000000000000LL;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_10041B428();
      uint64_t v25 = v34;
    }

    uint64_t v26 = *(void *)(v25 + 48) + v19 * v17;
    a2 = v31;
    sub_1003F600C(v26, v31, type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
    sub_1004249C4(v17);
    uint64_t v27 = *v23;
    *uint64_t v23 = v34;
    swift_bridgeObjectRelease(v27);
    uint64_t v22 = 0LL;
    uint64_t v6 = v30;
  }

  else
  {
    swift_bridgeObjectRelease(v11);
    uint64_t v22 = 1LL;
  }

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v22, 1LL, v5);
}

Swift::Int sub_100423B6C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_1003F5CB4((uint64_t *)&unk_1009B99A0);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v30 = v2;
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    __n128 v8 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1LL << v7);
    }
    else {
      uint64_t v9 = -1LL;
    }
    unint64_t v10 = v9 & *(void *)(v3 + 56);
    int64_t v11 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v12 = v5 + 56;
    Swift::Int result = swift_retain(v3);
    int64_t v14 = 0LL;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v14 << 6);
      }

      else
      {
        int64_t v18 = v14 + 1;
        if (__OFADD__(v14, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v18 >= v11) {
          goto LABEL_36;
        }
        unint64_t v19 = v8[v18];
        ++v14;
        if (!v19)
        {
          int64_t v14 = v18 + 1;
          if (v18 + 1 >= v11) {
            goto LABEL_36;
          }
          unint64_t v19 = v8[v14];
          if (!v19)
          {
            int64_t v14 = v18 + 2;
            if (v18 + 2 >= v11) {
              goto LABEL_36;
            }
            unint64_t v19 = v8[v14];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v11)
              {
LABEL_36:
                swift_release(v3);
                uint64_t v2 = v30;
                uint64_t v29 = 1LL << *(_BYTE *)(v3 + 32);
                if (v29 > 63) {
                  bzero((void *)(v3 + 56), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *__n128 v8 = -1LL << v29;
                }
                *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
                break;
              }

              unint64_t v19 = v8[v20];
              if (!v19)
              {
                while (1)
                {
                  int64_t v14 = v20 + 1;
                  if (__OFADD__(v20, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v14 >= v11) {
                    goto LABEL_36;
                  }
                  unint64_t v19 = v8[v14];
                  ++v20;
                  if (v19) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v14 = v20;
            }
          }
        }

unint64_t sub_100423E08(uint64_t a1, uint64_t a2)
{
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(a2 + 40));
  unint64_t result = _HashTable.nextHole(atOrAfter:)(v4 & ~(-1LL << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1LL << *(_BYTE *)(a2 + 32)));
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

void *sub_100423E88(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v55 = a2;
  sub_1003F5CB4(&qword_1009B9990);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer(0LL);
  uint64_t v60 = *(void *)(v13 - 8);
  __chkstk_darwin(v14, v15);
  unint64_t v17 = (char *)&v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t result = (void *)__chkstk_darwin(v18, v19);
  uint64_t v22 = (char *)&v54 - v21;
  uint64_t v23 = *(void *)(a3 + 16);
  uint64_t v24 = (a4 >> 3) & 0x1FFFFFFFFFFFFFF8LL;
  uint64_t v25 = *(unint64_t *)((char *)a1 + v24) & ((-1LL << a4) - 1);
  os_log_type_t v57 = a1;
  *(unint64_t *)((char *)a1 + v24) = v25;
  uint64_t v26 = v23 - 1;
  uint64_t v27 = a3;
  uint64_t v65 = a3 + 56;
  uint64_t v28 = (uint64_t)v12;
  unint64_t v58 = v12;
  int64_t v59 = a5;
  while (2)
  {
    uint64_t v56 = v26;
    do
    {
      while (1)
      {
        uint64_t v30 = *a5;
        uint64_t v29 = a5[1];
        uint64_t v31 = a5[2];
        int64_t v32 = a5[3];
        unint64_t v33 = a5[4];
        uint64_t v63 = v31;
        uint64_t v64 = v29;
        if (v33)
        {
          uint64_t v61 = (v33 - 1) & v33;
          int64_t v62 = v32;
          unint64_t v34 = __clz(__rbit64(v33)) | (v32 << 6);
          uint64_t v35 = v60;
LABEL_6:
          sub_1003F5FC8( *(void *)(v30 + 48) + *(void *)(v35 + 72) * v34,  v28,  type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
          uint64_t v36 = 0LL;
          goto LABEL_7;
        }

        int64_t v48 = v32 + 1;
        uint64_t v35 = v60;
        if (__OFADD__(v32, 1LL))
        {
          __break(1u);
          goto LABEL_41;
        }

        int64_t v49 = (unint64_t)(v31 + 64) >> 6;
        if (v48 >= v49)
        {
          uint64_t v61 = 0LL;
          int64_t v62 = v32;
          uint64_t v36 = 1LL;
          goto LABEL_7;
        }

        unint64_t v50 = *(void *)(v29 + 8 * v48);
        if (v50) {
          goto LABEL_16;
        }
        if (v32 + 2 >= v49) {
          goto LABEL_33;
        }
        unint64_t v50 = *(void *)(v29 + 8 * (v32 + 2));
        if (v50)
        {
          int64_t v48 = v32 + 2;
LABEL_16:
          uint64_t v61 = (v50 - 1) & v50;
          int64_t v62 = v48;
          unint64_t v34 = __clz(__rbit64(v50)) + (v48 << 6);
          goto LABEL_6;
        }

        if (v32 + 3 >= v49)
        {
          uint64_t v61 = 0LL;
          int64_t v62 = v32 + 2;
          uint64_t v36 = 1LL;
          goto LABEL_7;
        }

        unint64_t v50 = *(void *)(v29 + 8 * (v32 + 3));
        if (v50)
        {
          int64_t v48 = v32 + 3;
          goto LABEL_16;
        }

        int64_t v48 = v32 + 4;
        if (v32 + 4 < v49)
        {
          unint64_t v50 = *(void *)(v29 + 8 * v48);
          if (v50) {
            goto LABEL_16;
          }
          int64_t v48 = v49 - 1;
          uint64_t v53 = v32 + 5;
          while (v49 != v53)
          {
            unint64_t v50 = *(void *)(v29 + 8 * v53++);
            if (v50)
            {
              int64_t v48 = v53 - 1;
              goto LABEL_16;
            }
          }

uint64_t sub_1004242BC(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer(0LL);
  uint64_t v37 = *(void *)(v8 - 8);
  uint64_t v38 = v8;
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (!a3)
  {
    swift_release(a4);
    return (uint64_t)&_swiftEmptySetSingleton;
  }

  if (*(void *)(a4 + 16) == a3) {
    return a4;
  }
  sub_1003F5CB4((uint64_t *)&unk_1009BBE40);
  uint64_t result = static _SetStorage.allocate(capacity:)(a3);
  uint64_t v13 = result;
  uint64_t v35 = a1;
  uint64_t v36 = a2;
  if (a2 < 1) {
    unint64_t v15 = 0LL;
  }
  else {
    unint64_t v15 = *a1;
  }
  uint64_t v16 = 0LL;
  uint64_t v17 = result + 56;
  while (1)
  {
    if (v15)
    {
      unint64_t v18 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v19 = v18 | (v16 << 6);
    }

    else
    {
      uint64_t v20 = v16 + 1;
      if (__OFADD__(v16, 1LL)) {
        goto LABEL_40;
      }
      if (v20 >= v36)
      {
LABEL_37:
        swift_release(a4);
        return v13;
      }

      unint64_t v21 = v35[v20];
      ++v16;
      if (!v21)
      {
        uint64_t v16 = v20 + 1;
        if (v20 + 1 >= v36) {
          goto LABEL_37;
        }
        unint64_t v21 = v35[v16];
        if (!v21)
        {
          uint64_t v16 = v20 + 2;
          if (v20 + 2 >= v36) {
            goto LABEL_37;
          }
          unint64_t v21 = v35[v16];
          if (!v21)
          {
            uint64_t v22 = v20 + 3;
            if (v22 >= v36) {
              goto LABEL_37;
            }
            unint64_t v21 = v35[v22];
            if (!v21)
            {
              while (1)
              {
                uint64_t v16 = v22 + 1;
                if (__OFADD__(v22, 1LL)) {
                  goto LABEL_41;
                }
                if (v16 >= v36) {
                  goto LABEL_37;
                }
                unint64_t v21 = v35[v16];
                ++v22;
                if (v21) {
                  goto LABEL_24;
                }
              }
            }

            uint64_t v16 = v22;
          }
        }
      }

id sub_1004245A4()
{
  uint64_t v1 = v0;
  sub_1003F5CB4((uint64_t *)&unk_1009B99A0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (id)swift_release(v2);
    uint64_t *v1 = v4;
    return result;
  }

  id result = (id)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v18 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }

Swift::Int sub_10042474C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_1003F5CB4((uint64_t *)&unk_1009B99A0);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    Swift::Int result = swift_release(v3);
LABEL_38:
    *uint64_t v2 = v6;
    return result;
  }

  char v30 = v2;
  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v8 = v3 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1LL << v7);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v3 + 56);
  int64_t v11 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v12 = v5 + 56;
  Swift::Int result = swift_retain(v3);
  int64_t v14 = 0LL;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v14 << 6);
      goto LABEL_27;
    }

    int64_t v18 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v18 >= v11) {
      goto LABEL_36;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v18);
    ++v14;
    if (!v19)
    {
      int64_t v14 = v18 + 1;
      if (v18 + 1 >= v11) {
        goto LABEL_36;
      }
      unint64_t v19 = *(void *)(v8 + 8 * v14);
      if (!v19)
      {
        int64_t v14 = v18 + 2;
        if (v18 + 2 >= v11) {
          goto LABEL_36;
        }
        unint64_t v19 = *(void *)(v8 + 8 * v14);
        if (!v19) {
          break;
        }
      }
    }

uint64_t sub_1004249C4(int64_t a1)
{
  uint64_t v35 = type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer(0LL);
  uint64_t v3 = *(void *)(v35 - 8);
  uint64_t result = __chkstk_darwin(v4, v5);
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *v1;
  uint64_t v10 = *v1 + 56;
  uint64_t v11 = -1LL << *(_BYTE *)(*v1 + 32);
  unint64_t v12 = (a1 + 1) & ~v11;
  if (((1LL << v12) & *(void *)(v10 + 8 * (v12 >> 6))) != 0)
  {
    uint64_t v33 = v1;
    uint64_t v13 = ~v11;
    swift_retain(v9);
    uint64_t v14 = _HashTable.previousHole(before:)(a1, v10, v13);
    uint64_t v34 = v10;
    if ((*(void *)(v10 + 8 * (v12 >> 6)) & (1LL << v12)) != 0)
    {
      unint64_t v15 = (v14 + 1) & v13;
      uint64_t v16 = *(void *)(v3 + 72);
      do
      {
        int64_t v17 = v16 * v12;
        sub_1003F5FC8( *(void *)(v9 + 48) + v16 * v12,  (uint64_t)v8,  type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
        uint64_t v18 = *(void *)(v9 + 40);
        uint64_t v19 = sub_10040A2B0( (unint64_t *)&unk_1009B9980,  type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer,  (uint64_t)&unk_10071BF14);
        uint64_t v20 = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v35, v19);
        sub_1003F6050((uint64_t)v8, type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer);
        unint64_t v21 = v20 & v13;
        if (a1 >= (uint64_t)v15)
        {
        }

        else if (v21 < v15 && a1 < (uint64_t)v21)
        {
          goto LABEL_6;
        }

        uint64_t v24 = *(void *)(v9 + 48);
        int64_t v25 = v16 * a1;
        unint64_t v26 = v24 + v16 * a1;
        uint64_t v27 = v24 + v17;
        if (v16 * a1 < v17 || v26 >= v27 + v16)
        {
          swift_arrayInitWithTakeFrontToBack(v26, v27, 1LL, v35);
        }

        else
        {
          a1 = v12;
          if (v25 == v17) {
            goto LABEL_6;
          }
          swift_arrayInitWithTakeBackToFront();
        }

        a1 = v12;
LABEL_6:
        unint64_t v12 = (v12 + 1) & v13;
      }

      while (((*(void *)(v34 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) != 0);
    }

    *(void *)(v34 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << a1) - 1;
    uint64_t result = swift_release(v9);
    uint64_t v1 = v33;
  }

  else
  {
    *(void *)(v10 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << a1) - 1;
  }

  uint64_t v28 = *v1;
  uint64_t v29 = *(void *)(*v1 + 16);
  BOOL v30 = __OFSUB__(v29, 1LL);
  uint64_t v31 = v29 - 1;
  if (v30)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v28 + swift_unknownObjectWeakDestroy(v0 + 16) = v31;
    ++*(_DWORD *)(v28 + 36);
  }

  return result;
}

uint64_t sub_100424C28(Swift::Int *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001LL) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(*v2);
    id v8 = a2;
    uint64_t v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease(v6);

      uint64_t v33 = v9;
      uint64_t v10 = sub_10041D3C4(0LL, (unint64_t *)&qword_1009BBE30, &OBJC_CLASS___IDSPushToken_ptr);
      swift_unknownObjectRetain(v9, v11);
      swift_dynamicCast(&v34, &v33, (char *)&type metadata for Swift.AnyObject + 8, v10, 7LL);
      *a1 = v34;
      swift_unknownObjectRelease(v9, v12);
      return 0LL;
    }

    uint64_t result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1LL))
    {
      __break(1u);
      return result;
    }

    Swift::Int v25 = sub_1004231B4(v7, result + 1);
    Swift::Int v34 = v25;
    unint64_t v26 = *(void *)(v25 + 16);
    if (*(void *)(v25 + 24) <= v26)
    {
      uint64_t v31 = v26 + 1;
      id v32 = v8;
      sub_100423B6C(v31);
      uint64_t v27 = v34;
    }

    else
    {
      uint64_t v27 = v25;
      id v28 = v8;
    }

    sub_100423E08((uint64_t)v8, v27);
    uint64_t v30 = *v3;
    uint64_t *v3 = v27;
  }

  else
  {
    Swift::Int v14 = *(void *)(v6 + 40);
    swift_bridgeObjectRetain(v6);
    Swift::Int v15 = NSObject._rawHashValue(seed:)(v14);
    uint64_t v16 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v17 = v15 & ~v16;
    if (((*(void *)(v6 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v17) & 1) != 0)
    {
      sub_10041D3C4(0LL, (unint64_t *)&qword_1009BBE30, &OBJC_CLASS___IDSPushToken_ptr);
      id v18 = *(id *)(*(void *)(v6 + 48) + 8 * v17);
      char v19 = static NSObject.== infix(_:_:)(v18, a2);

      if ((v19 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease(v6);
        uint64_t v23 = *(void **)(*(void *)(*v3 + 48) + 8 * v17);
        *a1 = (Swift::Int)v23;
        id v24 = v23;
        return 0LL;
      }

      uint64_t v20 = ~v16;
      while (1)
      {
        unint64_t v17 = (v17 + 1) & v20;
        if (((*(void *)(v6 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v17) & 1) == 0) {
          break;
        }
        id v21 = *(id *)(*(void *)(v6 + 48) + 8 * v17);
        char v22 = static NSObject.== infix(_:_:)(v21, a2);

        if ((v22 & 1) != 0) {
          goto LABEL_12;
        }
      }
    }

    swift_bridgeObjectRelease(v6);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    Swift::Int v34 = *v3;
    uint64_t *v3 = 0x8000000000000000LL;
    id v8 = a2;
    sub_100424EC4((uint64_t)v8, v17, isUniquelyReferenced_nonNull_native);
    uint64_t v30 = *v3;
    uint64_t *v3 = v34;
  }

  swift_bridgeObjectRelease(v30);
  *a1 = (Swift::Int)v8;
  return 1LL;
}

void sub_100424EC4(uint64_t a1, unint64_t a2, char a3)
{
  __n128 v4 = v3;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100423B6C(v9);
  }

  else
  {
    if (v8 > v7)
    {
      sub_1004245A4();
      goto LABEL_14;
    }

    sub_10042474C(v9);
  }

  uint64_t v10 = *v3;
  Swift::Int v11 = NSObject._rawHashValue(seed:)(*(void *)(*v3 + 40));
  uint64_t v12 = -1LL << *(_BYTE *)(v10 + 32);
  a2 = v11 & ~v12;
  if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v13 = sub_10041D3C4(0LL, (unint64_t *)&qword_1009BBE30, &OBJC_CLASS___IDSPushToken_ptr);
    id v14 = *(id *)(*(void *)(v10 + 48) + 8 * a2);
    char v15 = static NSObject.== infix(_:_:)(v14, a1);

    if ((v15 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v13);
      __break(1u);
    }

    else
    {
      uint64_t v16 = ~v12;
      while (1)
      {
        a2 = (a2 + 1) & v16;
        if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
          break;
        }
        id v17 = *(id *)(*(void *)(v10 + 48) + 8 * a2);
        char v18 = static NSObject.== infix(_:_:)(v17, a1);

        if ((v18 & 1) != 0) {
          goto LABEL_13;
        }
      }
    }
  }

uint64_t sub_100425048(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_100425064(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_100425064(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_32;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_1003F5CB4(&qword_1009B9108);
    Swift::Int v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 1;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 5);
  }

  else
  {
    Swift::Int v11 = (char *)&_swiftEmptyArrayStorage;
  }

  id v14 = v11 + 32;
  char v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8]) {
      memmove(v14, v15, 32 * v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_30;
  }

  if (v15 >= &v14[32 * v8] || v14 >= &v15[32 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }

void *sub_1004251D0(unint64_t a1)
{
  return sub_100422E30(0LL, *(void *)(a1 + 16), 0, a1);
}

void sub_1004251E4(uint64_t a1)
{
  uint64_t v1 = a1;
  unint64_t v2 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v6 = a1;
    }
    else {
      uint64_t v6 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter(v6);
    swift_bridgeObjectRelease(v1);
    if (v3)
    {
LABEL_3:
      sub_1003F5CB4((uint64_t *)&unk_1009B99A0);
      __n128 v4 = (void *)static _SetStorage.allocate(capacity:)(v3);
      if (!v2) {
        goto LABEL_4;
      }
LABEL_11:
      if (v1 < 0) {
        uint64_t v7 = v1;
      }
      else {
        uint64_t v7 = v1 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v1);
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v7);
      swift_bridgeObjectRelease(v1);
      if (!v5) {
        return;
      }
      goto LABEL_15;
    }
  }

  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v3) {
      goto LABEL_3;
    }
  }

  __n128 v4 = &_swiftEmptySetSingleton;
  if (v2) {
    goto LABEL_11;
  }
LABEL_4:
  uint64_t v5 = *(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (!v5) {
    return;
  }
LABEL_15:
  uint64_t v8 = (char *)(v4 + 7);
  uint64_t v46 = v5;
  if ((v1 & 0xC000000000000001LL) != 0)
  {
    uint64_t v9 = 0LL;
    uint64_t v44 = v1;
    while (1)
    {
      while (1)
      {
        uint64_t v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(v9, v1);
        BOOL v11 = __OFADD__(v9++, 1LL);
        if (v11)
        {
          __break(1u);
          goto LABEL_42;
        }

        uint64_t v12 = v10;
        Swift::Int v13 = NSObject._rawHashValue(seed:)(v4[5]);
        uint64_t v14 = -1LL << *((_BYTE *)v4 + 32);
        unint64_t v15 = v13 & ~v14;
        unint64_t v16 = v15 >> 6;
        uint64_t v17 = *(void *)&v8[8 * (v15 >> 6)];
        uint64_t v18 = 1LL << v15;
        if (((1LL << v15) & v17) != 0) {
          break;
        }
LABEL_26:
        *(void *)&v8[8 * v16] = v18 | v17;
        *(void *)(v4[6] + 8 * v15) = v12;
        uint64_t v25 = v4[2];
        BOOL v11 = __OFADD__(v25, 1LL);
        uint64_t v26 = v25 + 1;
        if (v11) {
          goto LABEL_43;
        }
        void v4[2] = v26;
        if (v9 == v5) {
          return;
        }
      }

      sub_10041D3C4(0LL, (unint64_t *)&qword_1009BBE30, &OBJC_CLASS___IDSPushToken_ptr);
      id v19 = *(id *)(v4[6] + 8 * v15);
      char v20 = static NSObject.== infix(_:_:)(v19, v12);

      if ((v20 & 1) == 0)
      {
        uint64_t v22 = ~v14;
        while (1)
        {
          unint64_t v15 = (v15 + 1) & v22;
          unint64_t v16 = v15 >> 6;
          uint64_t v17 = *(void *)&v8[8 * (v15 >> 6)];
          uint64_t v18 = 1LL << v15;
          if ((v17 & (1LL << v15)) == 0) {
            break;
          }
          id v23 = *(id *)(v4[6] + 8 * v15);
          char v24 = static NSObject.== infix(_:_:)(v23, v12);

          if ((v24 & 1) != 0) {
            goto LABEL_17;
          }
        }

        uint64_t v1 = v44;
        uint64_t v5 = v46;
        goto LABEL_26;
      }

uint64_t sub_100425540(uint64_t a1, uint64_t a2)
{
  return swift_unknownObjectWeakCopyInit(a2, a1);
}

uint64_t sub_100425550(uint64_t a1, uint64_t a2)
{
  return swift_unknownObjectWeakTakeInit(a2, a1);
}

uint64_t sub_100425560(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_100425650(unint64_t *a1, uint64_t a2)
{
  unint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 16);
  if (!v3) {
    return 0LL;
  }
  swift_bridgeObjectRetain(*a1);
  unint64_t v6 = 0LL;
  for (uint64_t i = 40LL; ; i += 8LL)
  {
    uint64_t Strong = swift_unknownObjectWeakLoadStrong(v2 + i - 8);
    if (!Strong)
    {
      sub_100425540(v2 + i - 8, (uint64_t)v26);
      goto LABEL_7;
    }

    uint64_t v10 = Strong;
    swift_unknownObjectRelease(Strong, v9);
    sub_100425540(v2 + i - 8, (uint64_t)v26);
    if (v10 == a2) {
      break;
    }
LABEL_7:
    uint64_t v11 = swift_unknownObjectWeakLoadStrong(v26);
    sub_10041C0A0((uint64_t)v26);
    if (!v11) {
      goto LABEL_11;
    }
    swift_unknownObjectRelease(v11, v12);
    if (v3 == ++v6)
    {
      swift_bridgeObjectRelease(v2);
      return *(void *)(v2 + 16);
    }
  }

  sub_10041C0A0((uint64_t)v26);
LABEL_11:
  uint64_t result = swift_bridgeObjectRelease(v2);
  if (__OFADD__(v6, 1LL)) {
    goto LABEL_45;
  }
  unint64_t v14 = *(void *)(v2 + 16);
  if (v6 + 1 == v14) {
    return v6;
  }
  unint64_t v15 = v6 + 1;
  while (2)
  {
    if (v15 < v14)
    {
      sub_100425540(v2 + i, (uint64_t)v26);
      uint64_t v16 = swift_unknownObjectWeakLoadStrong(v26);
      if (v16)
      {
        uint64_t v18 = v16;
        swift_unknownObjectRelease(v16, v17);
        sub_100425540((uint64_t)v26, (uint64_t)v25);
        if (v18 == a2)
        {
          sub_10041C0A0((uint64_t)v25);
          goto LABEL_33;
        }
      }

      else
      {
        sub_100425540((uint64_t)v26, (uint64_t)v25);
      }

      uint64_t v19 = swift_unknownObjectWeakLoadStrong(v25);
      sub_10041C0A0((uint64_t)v25);
      if (v19)
      {
        swift_unknownObjectRelease(v19, v20);
        uint64_t result = sub_10041C0A0((uint64_t)v26);
        if (v15 != v6)
        {
          if ((v6 & 0x8000000000000000LL) != 0) {
            goto LABEL_40;
          }
          unint64_t v21 = *a1;
          unint64_t v22 = *(void *)(*a1 + 16);
          if (v6 >= v22) {
            goto LABEL_41;
          }
          uint64_t result = sub_100425540(v21 + 8 * v6 + 32, (uint64_t)v26);
          if (v15 >= v22) {
            goto LABEL_42;
          }
          sub_100425540(v21 + i, (uint64_t)v25);
          uint64_t result = swift_isUniquelyReferenced_nonNull_native(v21);
          *a1 = v21;
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)sub_1004251D0(v21);
            unint64_t v21 = result;
            *a1 = result;
          }

          if (v6 >= *(void *)(v21 + 16)) {
            goto LABEL_43;
          }
          uint64_t result = sub_100425FAC((uint64_t)v25, v21 + 8 * v6 + 32);
          if (v15 >= *(void *)(*a1 + 16)) {
            goto LABEL_44;
          }
          uint64_t result = sub_100425FAC((uint64_t)v26, *a1 + i);
        }

        if (__OFADD__(v6++, 1LL)) {
          goto LABEL_39;
        }
      }

      else
      {
LABEL_33:
        uint64_t result = sub_10041C0A0((uint64_t)v26);
      }

      unint64_t v24 = v15 + 1;
      if (__OFADD__(v15, 1LL)) {
        goto LABEL_38;
      }
      unint64_t v2 = *a1;
      unint64_t v14 = *(void *)(*a1 + 16);
      ++v15;
      i += 8LL;
      if (v24 == v14) {
        return v6;
      }
      continue;
    }

    break;
  }

  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
  return result;
}

uint64_t sub_1004258E4(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_24;
  }

  uint64_t v4 = (void *)*v2;
  int64_t v5 = *(void *)(*v2 + 16LL);
  if (v5 < a2)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0LL, v7))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }

  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t v4 = sub_100422E30(isUniquelyReferenced_nonNull_native, v11, 1, (unint64_t)v4);
  }

  uint64_t result = swift_arrayDestroy(&v4[a1 + 4], v7, &type metadata for WeakHandler);
  if (!v7) {
    goto LABEL_22;
  }
  uint64_t v13 = v4[2];
  uint64_t v14 = v13 - a2;
  if (__OFSUB__(v13, a2)) {
    goto LABEL_28;
  }
  if ((v14 & 0x8000000000000000LL) == 0)
  {
    uint64_t v15 = (uint64_t)&v4[a2 + 4];
    if (a1 < a2 || (unint64_t)&v4[a1 + 4] >= v15 + 8 * v14)
    {
      uint64_t result = swift_arrayInitWithTakeFrontToBack(&v4[a1 + 4], v15, v14, &type metadata for WeakHandler);
    }

    else if (a1 != a2)
    {
      uint64_t result = swift_arrayInitWithTakeBackToFront(&v4[a1 + 4]);
    }

    uint64_t v16 = v4[2];
    BOOL v17 = __OFADD__(v16, v8);
    uint64_t v18 = v16 - v7;
    if (!v17)
    {
      void v4[2] = v18;
LABEL_22:
      *unint64_t v2 = v4;
      return result;
    }

    goto LABEL_29;
  }

uint64_t sub_100425A6C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void **)(v1 + 16);
  uint64_t v4 = OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_desired;
  uint64_t v5 = *(void *)((char *)v3 + OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_desired);
  unint64_t v6 = *(uint64_t (**)(__n128))((swift_isaMask & *v3) + 0x198LL);
  __n128 v7 = swift_bridgeObjectRetain(v5);
  uint64_t v8 = v6(v7);
  uint64_t v10 = v9;
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v10);
  int64_t v11 = v3;
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v20 = a1;
    uint64_t v14 = swift_slowAlloc(22LL, -1LL);
    uint64_t v15 = swift_slowAlloc(32LL, -1LL);
    uint64_t v22 = v15;
    *(_DWORD *)uint64_t v14 = 136315394;
    uint64_t v21 = sub_1003FFBB0(0xD000000000000019LL, 0x800000010083F390LL, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v14 + 4, v14 + 12);
    *(_WORD *)(v14 + 12) = 2048;
    uint64_t v21 = *(void *)(*(void *)((char *)v3 + v4) + 16LL);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v14 + 14, v14 + 22);

    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%s: desired: %ld", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy(v15, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1LL, -1LL);
    uint64_t v16 = v14;
    a1 = v20;
    swift_slowDealloc(v16, -1LL, -1LL);
  }

  else
  {
  }

  uint64_t v17 = *(void *)((char *)v3 + v4);
  uint64_t v18 = *(void *)((char *)v11
                  + OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_currentlySent);
  *(void *)((char *)v11 + OBJC_IVAR____TtC17identityservicesd38IDSGroupQUICMaterialExchangeController_currentlySent) = v17;
  swift_bridgeObjectRetain(v17);
  uint64_t result = swift_bridgeObjectRelease(v18);
  *a1 = v8;
  return result;
}

uint64_t sub_100425C6C()
{
  return type metadata accessor for IDSGroupQUICMaterialExchangeController(0LL);
}

uint64_t sub_100425C74(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = &unk_100718C08;
  uint64_t result = type metadata accessor for Logger(319LL);
  if (v3 <= 0x3F)
  {
    void v4[2] = *(void *)(result - 8) + 64LL;
    void v4[3] = &unk_100718C20;
    void v4[4] = &unk_100718C38;
    v4[5] = &unk_100718C38;
    v4[6] = (char *)&value witness table for Builtin.BridgeObject + 64;
    void v4[7] = (char *)&value witness table for Builtin.BridgeObject + 64;
    void v4[8] = (char *)&value witness table for Builtin.BridgeObject + 64;
    void v4[9] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[10] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[11] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[12] = (char *)&value witness table for Builtin.Int64 + 64;
    return swift_updateClassMetadata2(a1, 256LL, 13LL, v4, a1 + 80);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for WeakHandler(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for WeakHandler(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + _Block_object_dispose(va, 8) = v3;
  return result;
}

ValueMetadata *type metadata accessor for WeakHandler()
{
  return &type metadata for WeakHandler;
}

uint64_t sub_100425DA8()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  swift_bridgeObjectRelease(*(void *)(v0 + 40));
  return swift_deallocObject(v0, 48LL, 7LL);
}

void sub_100425DDC(char a1)
{
}

uint64_t sub_100425DE8()
{
  uint64_t v1 = type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  uint64_t v7 = v0 + v4;
  swift_bridgeObjectRelease(*(void *)(v7 + 8));
  uint64_t v8 = (id *)(v7 + *(int *)(v1 + 24));

  uint64_t v9 = type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
  uint64_t v10 = (char *)v8 + *(int *)(v9 + 24);
  uint64_t v11 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v11 - 8) + 8LL))(v10, v11);

  return swift_deallocObject(v0, v5, v6);
}

void sub_100425EAC()
{
  uint64_t v1 = type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet(0LL);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80LL);
  uint64_t v3 = (*(uint64_t (**)(void))((swift_isaMask & **(void **)(v0 + 16)) + 0xB8LL))();
  if (v3)
  {
    uint64_t v5 = v4;
    id v7 = (id)v3;
    uint64_t ObjectType = swift_getObjectType(v3);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 8))( v0 + ((v2 + 24) & ~v2),  *(void *)(v0 + ((v2 + 24) & ~v2) + *(int *)(v1 + 28)),  ObjectType,  v5);
  }

uint64_t sub_100425F6C(uint64_t a1)
{
  uint64_t v2 = sub_1003F5CB4(&qword_1009B9990);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_100425FAC(uint64_t a1, uint64_t a2)
{
  return swift_unknownObjectWeakTakeAssign(a2, a1);
}

uint64_t sub_100425FD0@<X0>(uint64_t a1@<X8>)
{
  return sub_100426050( &OBJC_IVAR____TtC17identityservicesd55IDSGroupPushMaterialExchangeParticipantKeyMaterialState_sentKeyMaterial,  &qword_1009B99D8,  a1);
}

uint64_t sub_100425FE4(uint64_t a1)
{
  return sub_1004260C0( a1,  &OBJC_IVAR____TtC17identityservicesd55IDSGroupPushMaterialExchangeParticipantKeyMaterialState_sentKeyMaterial,  &qword_1009B99D8);
}

uint64_t (*sub_100425FF8(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

uint64_t sub_10042603C@<X0>(uint64_t a1@<X8>)
{
  return sub_100426050( &OBJC_IVAR____TtC17identityservicesd55IDSGroupPushMaterialExchangeParticipantKeyMaterialState_sendingKeyMaterial,  &qword_1009B99D8,  a1);
}

uint64_t sub_100426050@<X0>(void *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = v3 + *a1;
  swift_beginAccess(v6, v8, 0LL, 0LL);
  return sub_100410FD0(v6, a3, a2);
}

uint64_t sub_1004260AC(uint64_t a1)
{
  return sub_1004260C0( a1,  &OBJC_IVAR____TtC17identityservicesd55IDSGroupPushMaterialExchangeParticipantKeyMaterialState_sendingKeyMaterial,  &qword_1009B99D8);
}

uint64_t sub_1004260C0(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v6 = v3 + *a2;
  swift_beginAccess(v6, v8, 33LL, 0LL);
  sub_100427794(a1, v6, a3);
  return swift_endAccess(v8);
}

uint64_t (*sub_100426124(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_100426168@<X0>(uint64_t a1@<X8>)
{
  return sub_100426050( &OBJC_IVAR____TtC17identityservicesd55IDSGroupPushMaterialExchangeParticipantKeyMaterialState_desiredKeyMaterial,  &qword_1009B99D8,  a1);
}

uint64_t sub_10042617C(uint64_t a1)
{
  return sub_1004260C0( a1,  &OBJC_IVAR____TtC17identityservicesd55IDSGroupPushMaterialExchangeParticipantKeyMaterialState_desiredKeyMaterial,  &qword_1009B99D8);
}

uint64_t (*sub_100426190(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_1004261D4()
{
  uint64_t v1 = (unsigned __int8 *)(v0
                         + OBJC_IVAR____TtC17identityservicesd55IDSGroupPushMaterialExchangeParticipantKeyMaterialState_desiresCache);
  swift_beginAccess( v0 + OBJC_IVAR____TtC17identityservicesd55IDSGroupPushMaterialExchangeParticipantKeyMaterialState_desiresCache,  v3,  0LL,  0LL);
  return *v1;
}

uint64_t sub_100426218(char a1)
{
  uint64_t v3 = (_BYTE *)(v1
               + OBJC_IVAR____TtC17identityservicesd55IDSGroupPushMaterialExchangeParticipantKeyMaterialState_desiresCache);
  uint64_t result = swift_beginAccess(v3, v5, 1LL, 0LL);
  _BYTE *v3 = a1;
  return result;
}

uint64_t (*sub_100426260(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_1004262A4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v6, v7);
  uint64_t v67 = &v57[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v9, v10);
  uint64_t v60 = &v57[-v11];
  uint64_t v12 = sub_1003F5CB4(&qword_1009B99E0);
  __chkstk_darwin(v13, v14);
  uint64_t v65 = &v57[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v16, v17);
  char v19 = &v57[-v18];
  sub_1003F5CB4(&qword_1009B99D8);
  __chkstk_darwin(v20, v21);
  int64_t v59 = &v57[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v23, v24);
  uint64_t v64 = &v57[-v25];
  __chkstk_darwin(v26, v27);
  int64_t v62 = &v57[-v28];
  __chkstk_darwin(v29, v30);
  unint64_t v32 = &v57[-v31];
  __chkstk_darwin(v33, v34);
  id v36 = &v57[-v35];
  __chkstk_darwin(v37, v38);
  char v40 = &v57[-v39];
  uint64_t v66 = a1;
  sub_1003F5FC8(a1, (uint64_t)&v57[-v39], type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
  uint64_t v61 = *(uint64_t (**)(_BYTE *, void, uint64_t, uint64_t))(v5 + 56);
  uint64_t v41 = v61(v40, 0LL, 1LL, v4);
  (*(void (**)(uint64_t))(*(void *)v2 + 112LL))(v41);
  uint64_t v63 = v12;
  uint64_t v42 = (uint64_t)&v19[*(int *)(v12 + 48)];
  sub_100410FD0((uint64_t)v40, (uint64_t)v19, &qword_1009B99D8);
  sub_100410FD0((uint64_t)v36, v42, &qword_1009B99D8);
  uint64_t v43 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v43((uint64_t)v19, 1LL, v4) == 1)
  {
    sub_10040A274((uint64_t)v36, &qword_1009B99D8);
    sub_10040A274((uint64_t)v40, &qword_1009B99D8);
    if (v43(v42, 1LL, v4) == 1)
    {
      sub_10040A274((uint64_t)v19, &qword_1009B99D8);
      uint64_t v44 = v67;
      sub_1003F5FC8(v66, (uint64_t)v67, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
LABEL_14:
      sub_1003F6050((uint64_t)v44, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
      goto LABEL_15;
    }

    goto LABEL_6;
  }

  sub_100410FD0((uint64_t)v19, (uint64_t)v32, &qword_1009B99D8);
  if (v43(v42, 1LL, v4) == 1)
  {
    sub_10040A274((uint64_t)v36, &qword_1009B99D8);
    sub_10040A274((uint64_t)v40, &qword_1009B99D8);
    sub_1003F6050((uint64_t)v32, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
LABEL_6:
    sub_10040A274((uint64_t)v19, &qword_1009B99E0);
    uint64_t v44 = v67;
    sub_1003F5FC8(v66, (uint64_t)v67, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
    goto LABEL_7;
  }

  uint64_t v52 = v60;
  sub_1003F600C(v42, (uint64_t)v60, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
  uint64_t v53 = sub_10040A2B0( &qword_1009B99E8,  type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet,  (uint64_t)&unk_10071D1B4);
  int v58 = dispatch thunk of static Equatable.== infix(_:_:)(v32, v52, v4, v53);
  sub_1003F6050((uint64_t)v52, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
  sub_10040A274((uint64_t)v36, &qword_1009B99D8);
  sub_10040A274((uint64_t)v40, &qword_1009B99D8);
  sub_1003F6050((uint64_t)v32, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
  sub_10040A274((uint64_t)v19, &qword_1009B99D8);
  uint64_t v44 = v67;
  sub_1003F5FC8(v66, (uint64_t)v67, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
  if ((v58 & 1) != 0) {
    goto LABEL_14;
  }
LABEL_7:
  uint64_t v45 = v62;
  sub_1003F5FC8((uint64_t)v44, (uint64_t)v62, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
  uint64_t v46 = v61(v45, 0LL, 1LL, v4);
  uint64_t v47 = (uint64_t)v64;
  (*(void (**)(uint64_t))(*(void *)v2 + 136LL))(v46);
  int64_t v48 = v65;
  uint64_t v49 = (uint64_t)&v65[*(int *)(v63 + 48)];
  sub_100410FD0((uint64_t)v45, (uint64_t)v65, &qword_1009B99D8);
  sub_100410FD0(v47, v49, &qword_1009B99D8);
  if (v43((uint64_t)v48, 1LL, v4) == 1)
  {
    sub_10040A274(v47, &qword_1009B99D8);
    sub_10040A274((uint64_t)v45, &qword_1009B99D8);
    sub_1003F6050((uint64_t)v44, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
    if (v43(v49, 1LL, v4) == 1)
    {
      sub_10040A274((uint64_t)v48, &qword_1009B99D8);
LABEL_15:
      char v51 = 1;
      return v51 & 1;
    }
  }

  else
  {
    unint64_t v50 = v59;
    sub_100410FD0((uint64_t)v48, (uint64_t)v59, &qword_1009B99D8);
    if (v43(v49, 1LL, v4) != 1)
    {
      uint64_t v54 = v60;
      sub_1003F600C(v49, (uint64_t)v60, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
      uint64_t v55 = sub_10040A2B0( &qword_1009B99E8,  type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet,  (uint64_t)&unk_10071D1B4);
      char v51 = dispatch thunk of static Equatable.== infix(_:_:)(v50, v54, v4, v55);
      sub_1003F6050((uint64_t)v54, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
      sub_10040A274(v47, &qword_1009B99D8);
      sub_10040A274((uint64_t)v45, &qword_1009B99D8);
      sub_1003F6050((uint64_t)v44, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
      sub_1003F6050((uint64_t)v50, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
      sub_10040A274((uint64_t)v48, &qword_1009B99D8);
      return v51 & 1;
    }

    sub_10040A274(v47, &qword_1009B99D8);
    sub_10040A274((uint64_t)v45, &qword_1009B99D8);
    sub_1003F6050((uint64_t)v44, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
    sub_1003F6050((uint64_t)v50, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
  }

  sub_10040A274((uint64_t)v48, &qword_1009B99E0);
  char v51 = 0;
  return v51 & 1;
}

uint64_t sub_1004268BC(uint64_t a1)
{
  __n128 v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1003F5FC8(a1, (uint64_t)v6, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
  uint64_t v7 = type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet(0LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 0LL, 1LL, v7);
  return (*(uint64_t (**)(char *))(*(void *)v1 + 144LL))(v6);
}

uint64_t sub_100426964(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v5, v6);
  uint64_t v39 = (uint64_t)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_1003F5CB4(&qword_1009B99E0);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1003F5CB4(&qword_1009B99D8);
  __chkstk_darwin(v13, v14);
  char v40 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16, v17);
  char v19 = (char *)&v39 - v18;
  __chkstk_darwin(v20, v21);
  __n128 v23 = (char *)&v39 - v22;
  uint64_t v26 = __chkstk_darwin(v24, v25);
  uint64_t v28 = (char *)&v39 - v27;
  __n128 v29 = *(void (**)(uint64_t))(*(void *)v1 + 136LL);
  uint64_t v42 = v1;
  v29(v26);
  uint64_t v41 = a1;
  sub_1003F5FC8(a1, (uint64_t)v23, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
  __n128 v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
  v30(v23, 0LL, 1LL, v3);
  uint64_t v31 = (uint64_t)&v12[*(int *)(v8 + 48)];
  sub_100410FD0((uint64_t)v28, (uint64_t)v12, &qword_1009B99D8);
  sub_100410FD0((uint64_t)v23, v31, &qword_1009B99D8);
  unint64_t v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v32((uint64_t)v12, 1LL, v3) != 1)
  {
    sub_100410FD0((uint64_t)v12, (uint64_t)v19, &qword_1009B99D8);
    if (v32(v31, 1LL, v3) != 1)
    {
      uint64_t v34 = v39;
      sub_1003F600C(v31, v39, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
      uint64_t v35 = sub_10040A2B0( &qword_1009B99E8,  type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet,  (uint64_t)&unk_10071D1B4);
      char v36 = dispatch thunk of static Equatable.== infix(_:_:)(v19, v34, v3, v35);
      sub_1003F6050(v34, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
      sub_10040A274((uint64_t)v23, &qword_1009B99D8);
      sub_10040A274((uint64_t)v28, &qword_1009B99D8);
      sub_1003F6050((uint64_t)v19, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
      uint64_t result = sub_10040A274((uint64_t)v12, &qword_1009B99D8);
      if ((v36 & 1) == 0) {
        return result;
      }
      goto LABEL_8;
    }

    sub_10040A274((uint64_t)v23, &qword_1009B99D8);
    sub_10040A274((uint64_t)v28, &qword_1009B99D8);
    sub_1003F6050((uint64_t)v19, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
    return sub_10040A274((uint64_t)v12, &qword_1009B99E0);
  }

  sub_10040A274((uint64_t)v23, &qword_1009B99D8);
  sub_10040A274((uint64_t)v28, &qword_1009B99D8);
  if (v32(v31, 1LL, v3) != 1) {
    return sub_10040A274((uint64_t)v12, &qword_1009B99E0);
  }
  sub_10040A274((uint64_t)v12, &qword_1009B99D8);
LABEL_8:
  uint64_t v37 = (uint64_t)v40;
  v30(v40, 1LL, 1LL, v3);
  uint64_t v38 = v42;
  (*(void (**)(uint64_t))(*(void *)v42 + 144LL))(v37);
  sub_1003F5FC8(v41, v37, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
  v30((char *)v37, 0LL, 1LL, v3);
  return (*(uint64_t (**)(uint64_t))(*(void *)v38 + 120LL))(v37);
}

uint64_t sub_100426CEC()
{
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet(0LL);
  __n128 v6 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL);
  v6(v4, 1LL, 1LL, v5);
  (*(void (**)(char *))(*(void *)v0 + 144LL))(v4);
  v6(v4, 1LL, 1LL, v5);
  (*(void (**)(char *))(*(void *)v0 + 120LL))(v4);
  return (*(uint64_t (**)(uint64_t))(*(void *)v0 + 192LL))(1LL);
}

uint64_t sub_100426DB4()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_100426E20()
{
  uint64_t v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  uint64_t v2 = v1 + OBJC_IVAR____TtC17identityservicesd55IDSGroupPushMaterialExchangeParticipantKeyMaterialState_sentKeyMaterial;
  uint64_t v3 = type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet(0LL);
  uint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL);
  v4(v2, 1LL, 1LL, v3);
  v4( v1 + OBJC_IVAR____TtC17identityservicesd55IDSGroupPushMaterialExchangeParticipantKeyMaterialState_sendingKeyMaterial,  1LL,  1LL,  v3);
  v4( v1 + OBJC_IVAR____TtC17identityservicesd55IDSGroupPushMaterialExchangeParticipantKeyMaterialState_desiredKeyMaterial,  1LL,  1LL,  v3);
  *(_BYTE *)(v1
           + OBJC_IVAR____TtC17identityservicesd55IDSGroupPushMaterialExchangeParticipantKeyMaterialState_desiresCache) = 1;
  return v1;
}

uint64_t type metadata accessor for IDSGroupPushMaterialExchangeParticipantKeyMaterialState(uint64_t a1)
{
  return sub_100402020( a1,  (uint64_t *)&unk_1009C1980,  (uint64_t)&nominal type descriptor for IDSGroupPushMaterialExchangeParticipantKeyMaterialState);
}

uint64_t sub_100426EF0()
{
  return swift_retain(*(void *)(v0 + 40));
}

uint64_t sub_100426F24(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 40);
  *(void *)(v1 + 40) = a1;
  return swift_release(v3);
}

uint64_t (*sub_100426F68(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_100426FA4()
{
  return swift_retain(*(void *)(v0 + 48));
}

uint64_t sub_100426FD8(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 48);
  *(void *)(v1 + 4_Block_object_dispose(va, 8) = a1;
  return swift_release(v3);
}

uint64_t (*sub_10042701C(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_100427058(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = swift_allocObject(v3, 56LL, 7LL);
  sub_1004270AC(a1, a2, a3);
  return v7;
}

void *sub_1004270AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = type metadata accessor for IDSGroupPushMaterialExchangeParticipantKeyMaterialState(0LL);
  uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  uint64_t v6 = v5 + OBJC_IVAR____TtC17identityservicesd55IDSGroupPushMaterialExchangeParticipantKeyMaterialState_sentKeyMaterial;
  uint64_t v7 = type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet(0LL);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL);
  v8(v6, 1LL, 1LL, v7);
  v8( v5 + OBJC_IVAR____TtC17identityservicesd55IDSGroupPushMaterialExchangeParticipantKeyMaterialState_sendingKeyMaterial,  1LL,  1LL,  v7);
  v8( v5 + OBJC_IVAR____TtC17identityservicesd55IDSGroupPushMaterialExchangeParticipantKeyMaterialState_desiredKeyMaterial,  1LL,  1LL,  v7);
  *(_BYTE *)(v5
           + OBJC_IVAR____TtC17identityservicesd55IDSGroupPushMaterialExchangeParticipantKeyMaterialState_desiresCache) = 1;
  void v3[5] = v5;
  uint64_t v9 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v8( v9 + OBJC_IVAR____TtC17identityservicesd55IDSGroupPushMaterialExchangeParticipantKeyMaterialState_sentKeyMaterial,  1LL,  1LL,  v7);
  v8( v9 + OBJC_IVAR____TtC17identityservicesd55IDSGroupPushMaterialExchangeParticipantKeyMaterialState_sendingKeyMaterial,  1LL,  1LL,  v7);
  v8( v9 + OBJC_IVAR____TtC17identityservicesd55IDSGroupPushMaterialExchangeParticipantKeyMaterialState_desiredKeyMaterial,  1LL,  1LL,  v7);
  *(_BYTE *)(v9
           + OBJC_IVAR____TtC17identityservicesd55IDSGroupPushMaterialExchangeParticipantKeyMaterialState_desiresCache) = 1;
  void v3[6] = v9;
  v3[2] = a1;
  void v3[3] = a2;
  void v3[4] = a3;
  return v3;
}

uint64_t sub_100427210()
{
  uint64_t v1 = v0;
  uint64_t v29 = 0LL;
  unint64_t v30 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(77LL);
  v2._countAndFlagsBits = 0xD000000000000021LL;
  v2._dispatch_queue_t object = (void *)0x800000010083F450LL;
  String.append(_:)(v2);
  id v3 = *(id *)(v0 + 24);
  id v4 = [v3 description];
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  uint64_t v7 = v6;

  v8._countAndFlagsBits = v5;
  v8._dispatch_queue_t object = v7;
  String.append(_:)(v8);

  swift_bridgeObjectRelease(v7);
  v9._countAndFlagsBits = 32LL;
  v9._dispatch_queue_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v9);
  id v10 = *(id *)(v1 + 16);
  id v11 = [v10 description];
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  __n128 v14 = v13;

  v15._countAndFlagsBits = v12;
  v15._dispatch_queue_t object = v14;
  String.append(_:)(v15);

  swift_bridgeObjectRelease(v14);
  v16._countAndFlagsBits = 32LL;
  v16._dispatch_queue_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v16);
  uint64_t v28 = *(void *)(v1 + 32);
  v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
  dispatch_queue_t object = v17._object;
  String.append(_:)(v17);
  swift_bridgeObjectRelease(object);
  v19._dispatch_queue_t object = (void *)0x800000010083F480LL;
  v19._countAndFlagsBits = 0xD000000000000010LL;
  String.append(_:)(v19);
  uint64_t v28 = (*(uint64_t (**)(void))(*(void *)v1 + 120LL))();
  uint64_t v20 = type metadata accessor for IDSGroupPushMaterialExchangeParticipantKeyMaterialState(0LL);
  v21._countAndFlagsBits = String.init<A>(describing:)(&v28, v20);
  uint64_t v22 = v21._object;
  String.append(_:)(v21);
  swift_bridgeObjectRelease(v22);
  v23._countAndFlagsBits = 0x6D6B73202020200ALL;
  v23._dispatch_queue_t object = (void *)0xEF203A6574617453LL;
  String.append(_:)(v23);
  uint64_t v28 = (*(uint64_t (**)(void))(*(void *)v1 + 144LL))();
  v24._countAndFlagsBits = String.init<A>(describing:)(&v28, v20);
  __n128 v25 = v24._object;
  String.append(_:)(v24);
  swift_bridgeObjectRelease(v25);
  v26._countAndFlagsBits = 62LL;
  v26._dispatch_queue_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v26);
  return v29;
}

uint64_t sub_100427444(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v5, v6);
  Swift::String v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1003F5CB4(&qword_1009B99D8);
  uint64_t v11 = __chkstk_darwin(v9, v10);
  __n128 v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 120LL))(v11);
  (*(void (**)(uint64_t))(*(void *)v14 + 112LL))(v14);
  swift_release(v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v13, 1LL, v3))
  {
    sub_10040A274((uint64_t)v13, &qword_1009B99D8);
    char v15 = 0;
  }

  else
  {
    sub_1003F5FC8((uint64_t)v13, (uint64_t)v8, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
    sub_10040A274((uint64_t)v13, &qword_1009B99D8);
    uint64_t v16 = *((void *)v8 + 1);
    swift_bridgeObjectRetain(v16);
    sub_1003F6050((uint64_t)v8, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
    char v15 = sub_100427598(a1, v16);
    swift_bridgeObjectRelease(v16);
  }

  return v15 & 1;
}

uint64_t sub_100427598(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v6, v7);
  __n128 v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (*(void *)(a2 + 16)
    && (uint64_t v10 = *(void *)(a2 + 40),
        uint64_t v11 = sub_10040A2B0( &qword_1009B90D0,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent,  (uint64_t)&unk_100718E98),  v12 = dispatch thunk of Hashable._rawHashValue(seed:)(v10, v4, v11),  v13 = -1LL << *(_BYTE *)(a2 + 32),  v14 = v12 & ~v13,  ((*(void *)(a2 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v14) & 1) != 0))
  {
    uint64_t v15 = ~v13;
    uint64_t v16 = *(void *)(v5 + 72);
    do
    {
      sub_1003F5FC8( *(void *)(a2 + 48) + v16 * v14,  (uint64_t)v9,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      uint64_t v17 = sub_10040A2B0( &qword_1009B90D8,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent,  (uint64_t)&unk_100718ED8);
      char v18 = dispatch thunk of static Equatable.== infix(_:_:)(v9, a1, v4, v17);
      sub_1003F6050((uint64_t)v9, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      if ((v18 & 1) != 0) {
        break;
      }
      unint64_t v14 = (v14 + 1) & v15;
    }

    while (((*(void *)(a2 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v14) & 1) != 0);
  }

  else
  {
    char v18 = 0;
  }

  return v18 & 1;
}

uint64_t sub_100427708()
{
  swift_release(*(void *)(v0 + 40));
  swift_release(*(void *)(v0 + 48));
  return swift_deallocClassInstance(v0, 56LL, 7LL);
}

uint64_t sub_100427744()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 176LL))();
}

uint64_t sub_10042776C@<X0>(uint64_t a1@<X8>)
{
  return sub_100426050( &OBJC_IVAR____TtC17identityservicesd34IDSGroupPushMaterialExchangeMember_sentPublicIdentity,  &qword_1009B99F0,  a1);
}

uint64_t sub_100427780(uint64_t a1)
{
  return sub_1004260C0( a1,  &OBJC_IVAR____TtC17identityservicesd34IDSGroupPushMaterialExchangeMember_sentPublicIdentity,  &qword_1009B99F0);
}

uint64_t sub_100427794(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_1003F5CB4(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(a2, a1, v5);
  return a2;
}

uint64_t (*sub_1004277D8(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_10042781C(uint64_t a1)
{
  uint64_t v3 = swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  uint64_t v4 = v3 + OBJC_IVAR____TtC17identityservicesd34IDSGroupPushMaterialExchangeMember_sentPublicIdentity;
  uint64_t v5 = type metadata accessor for IDSGroupEncryptionDesiredPreKeyMaterialSet(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
  *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = a1;
  return v3;
}

uint64_t sub_10042788C()
{
  sub_10040A274( (uint64_t)v0 + OBJC_IVAR____TtC17identityservicesd34IDSGroupPushMaterialExchangeMember_sentPublicIdentity,  &qword_1009B99F0);
  return swift_deallocClassInstance(v0, *((unsigned int *)*v0 + 12), *((unsigned __int16 *)*v0 + 26));
}

uint64_t sub_1004278CC()
{
  return sub_100427CF4(&OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_delegate);
}

void sub_1004278D8(void *a1, uint64_t a2)
{
  uint64_t v5 = v2 + OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_delegate;
  swift_beginAccess(v5, v6, 1LL, 0LL);
  *(void *)(v5 + _Block_object_dispose(va, 8) = a2;
  swift_unknownObjectWeakAssign(v5, a1);
}

void (*sub_10042793C(void *a1))(id **a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_delegate;
  void v3[5] = v1;
  void v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess(v1 + v4, v3, 33LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v5);
  uint64_t v7 = *(void *)(v5 + 8);
  void v3[3] = Strong;
  void v3[4] = v7;
  return sub_10041D524;
}

unint64_t sub_1004279B0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_1003F5CB4(&qword_1009B9D88);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  __n128 v6 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v7 = *v6;
    id v8 = (id)*(v6 - 1);
    swift_retain(v7);
    unint64_t result = sub_100433024((uint64_t)v8);
    if ((v10 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v11 = 8 * result;
    *(void *)(v4[6] + v11) = v8;
    *(void *)(v4[7] + v11) = v7;
    uint64_t v12 = v4[2];
    BOOL v13 = __OFADD__(v12, 1LL);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    void v4[2] = v14;
    v6 += 2;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100427AB8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_1003F5CB4((uint64_t *)&unk_1009BCE40);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  uint64_t v6 = v3 + 64;
  uint64_t v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_100410FD0(v7, (uint64_t)&v16, &qword_1009B9D80);
    uint64_t v8 = v16;
    uint64_t v9 = v17;
    unint64_t result = sub_100417D94(v16, v17);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v12 = (uint64_t *)(v4[6] + 16 * result);
    uint64_t *v12 = v8;
    v12[1] = v9;
    unint64_t result = (unint64_t)sub_10040DAE8(&v18, (_OWORD *)(v4[7] + 32 * result));
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    void v4[2] = v15;
    v7 += 48LL;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100427BEC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_desiredPublicIdentity;
  swift_beginAccess(v3, v5, 0LL, 0LL);
  return sub_100410FD0(v3, a1, &qword_1009B99F0);
}

uint64_t sub_100427C44(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_desiredPublicIdentity;
  swift_beginAccess(v3, v5, 33LL, 0LL);
  sub_100427794(a1, v3, &qword_1009B99F0);
  return swift_endAccess(v5);
}

uint64_t (*sub_100427CA4(uint64_t a1))(void)
{
  return j_j__swift_endAccess;
}

uint64_t sub_100427CE8()
{
  return sub_100427CF4(&OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_cachedKeyPropagationProvider);
}

uint64_t sub_100427CF4(void *a1)
{
  uint64_t v2 = v1 + *a1;
  swift_beginAccess(v2, v4, 0LL, 0LL);
  return swift_unknownObjectWeakLoadStrong(v2);
}

uint64_t sub_100427D3C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2 + OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_cachedKeyPropagationProvider;
  swift_beginAccess(v5, v8, 1LL, 0LL);
  *(void *)(v5 + _Block_object_dispose(va, 8) = a2;
  swift_unknownObjectWeakAssign(v5, a1);
  return swift_unknownObjectRelease(a1, v6);
}

void (*sub_100427DA4(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_cachedKeyPropagationProvider;
  void v3[5] = v1;
  void v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess(v1 + v4, v3, 33LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v5);
  uint64_t v7 = *(void *)(v5 + 8);
  void v3[3] = Strong;
  void v3[4] = v7;
  return sub_100412358;
}

id sub_100427E18( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  id v17 = objc_allocWithZone(v8);
  id v18 = sub_100438750(a1, a2, a3, a4, a5, a6, a7, a8);
  swift_unknownObjectRelease(a5, v19);
  swift_unknownObjectRelease(a7, v20);
  return v18;
}

uint64_t sub_100427EB8(uint64_t a1)
{
  uint64_t v131 = OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_lock;
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_lock);
  swift_retain(v3);
  os_unfair_lock_lock(v3 + 4);
  swift_release(v3);
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v4 = a1;
    }
    else {
      uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v5 = __CocoaSet.count.getter(v4);
    uint64_t v6 = &_swiftEmptyArrayStorage;
    if (!v5) {
      goto LABEL_21;
    }
    uint64_t v7 = v5;
    uint64_t v137 = &_swiftEmptyArrayStorage;
    ((void (*)(void))specialized ContiguousArray.reserveCapacity(_:))();
    uint64_t v138 = __CocoaSet.startIndex.getter(v4);
    uint64_t v139 = v8;
    LOBYTE(v140) = 1;
    if ((v7 & 0x8000000000000000LL) == 0)
    {
LABEL_10:
      if (a1 < 0) {
        uint64_t v11 = a1;
      }
      else {
        uint64_t v11 = a1 & 0xFFFFFFFFFFFFFF8LL;
      }
      do
      {
        while (1)
        {
          sub_10043800C(v138, v139, v140, a1);
          id v18 = v17;
          id v19 = *(id *)&v17[OBJC_IVAR____TtC17identityservicesd34IDSGroupEncryptionControllerMember_uri];

          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          uint64_t v20 = v137[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v20);
          uint64_t v21 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v20, v19);
          specialized ContiguousArray._endMutation()(v21);
          if ((a1 & 0xC000000000000001LL) != 0) {
            break;
          }
          int64_t v12 = sub_100437F28(v138, v139, v140, a1);
          uint64_t v14 = v13;
          char v16 = v15;
          sub_1004398F4(v138, v139, v140);
          uint64_t v138 = v12;
          uint64_t v139 = v14;
          LOBYTE(v140) = v16 & 1;
          if (!--v7) {
            goto LABEL_20;
          }
        }

        if ((v140 & 1) == 0) {
          goto LABEL_120;
        }
        uint64_t v22 = __CocoaSet.Index.handleBitPattern.getter(v138, v139);
        if (v22) {
          uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v22);
        }
        else {
          uint64_t isUniquelyReferenced_nonNull_native = 1LL;
        }
        uint64_t v24 = sub_1003F5CB4(&qword_1009B99F8);
        __n128 v25 = (void (*)(void *, void))Set.Index._asCocoa.modify(v143, v24);
        __CocoaSet.formIndex(after:isUnique:)(v26, isUniquelyReferenced_nonNull_native, v11);
        v25(v143, 0LL);
        --v7;
      }

      while (v7);
LABEL_20:
      sub_1004398F4(v138, v139, v140);
      uint64_t v6 = v137;
      goto LABEL_21;
    }

    __break(1u);
  }

  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v6 = &_swiftEmptyArrayStorage;
  if (v7)
  {
    uint64_t v137 = &_swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v7);
    uint64_t v138 = sub_1004382EC(a1);
    uint64_t v139 = v9;
    LOBYTE(v140) = v10 & 1;
    goto LABEL_10;
  }

LABEL_69:
  unint64_t v84 = (void *)sub_10041D3BC(v32);
  uint64_t v85 = v130;
  if ((v130 & 0xC000000000000001LL) != 0)
  {
    if (v130 < 0) {
      uint64_t v86 = v130;
    }
    else {
      uint64_t v86 = v130 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v87 = __CocoaSet.makeIterator()(v86);
    uint64_t v88 = sub_10041D3C4(0LL, (unint64_t *)&unk_1009BC270, &OBJC_CLASS___IDSURI_ptr);
    uint64_t v89 = sub_100438928( (unint64_t *)&unk_1009BAC00,  (unint64_t *)&unk_1009BC270,  &OBJC_CLASS___IDSURI_ptr);
    unint64_t v84 = Set.Iterator.init(_cocoa:)(v143, v87, v88, v89);
    uint64_t v85 = v143[0];
    uint64_t v90 = v143[1];
    uint64_t v91 = v143[2];
    uint64_t v92 = v143[3];
    unint64_t v93 = v143[4];
  }

  else
  {
    uint64_t v92 = 0LL;
    uint64_t v94 = -1LL << *(_BYTE *)(v130 + 32);
    uint64_t v90 = v130 + 56;
    uint64_t v91 = ~v94;
    uint64_t v95 = -v94;
    if (v95 < 64) {
      uint64_t v96 = ~(-1LL << v95);
    }
    else {
      uint64_t v96 = -1LL;
    }
    unint64_t v93 = v96 & *(void *)(v130 + 56);
  }

  int64_t v97 = (unint64_t)(v91 + 64) >> 6;
  while (2)
  {
    uint64_t v105 = v92;
    if (v85 < 0)
    {
      uint64_t v108 = __CocoaSet.Iterator.next()(v84);
      if (!v108) {
        goto LABEL_113;
      }
      uint64_t v109 = v108;
      uint64_t v135 = v108;
      uint64_t v110 = sub_10041D3C4(0LL, (unint64_t *)&unk_1009BC270, &OBJC_CLASS___IDSURI_ptr);
      swift_unknownObjectRetain(v109, v111);
      swift_dynamicCast(v136, &v135, (char *)&type metadata for Swift.AnyObject + 8, v110, 7LL);
      id v112 = (id)v136[0];
      swift_unknownObjectRelease(v109, v113);
      if (!v112) {
        goto LABEL_113;
      }
      goto LABEL_103;
    }

    if (v93)
    {
      unint64_t v106 = __clz(__rbit64(v93));
      v93 &= v93 - 1;
      unint64_t v107 = v106 | (v92 << 6);
LABEL_102:
      id v112 = *(id *)(*(void *)(v85 + 48) + 8 * v107);
      if (!v112) {
        goto LABEL_113;
      }
LABEL_103:
      swift_beginAccess(v28, v136, 33LL, 0LL);
      uint64_t v117 = *v28;
      if ((*v28 & 0xC000000000000001LL) != 0)
      {
        if (v117 < 0) {
          uint64_t v118 = *v28;
        }
        else {
          uint64_t v118 = v117 & 0xFFFFFFFFFFFFFF8LL;
        }
        id v119 = v112;
        __n128 v120 = swift_bridgeObjectRetain(v117);
        uint64_t v121 = __CocoaDictionary.lookup(_:)(v119, v118, v120);
        if (!v121)
        {
          swift_bridgeObjectRelease(v117);
          goto LABEL_112;
        }

        swift_unknownObjectRelease(v121, v122);
        uint64_t v98 = __CocoaDictionary.count.getter(v118);
        Swift::Int v99 = sub_100434114(v118, v98);
        swift_retain(v99);
        unint64_t v100 = sub_100433024((uint64_t)v119);
        char v102 = v101;
        swift_release(v99);
        if ((v102 & 1) == 0) {
          goto LABEL_117;
        }
LABEL_80:

        uint64_t v103 = *(void *)(*(void *)(v99 + 56) + 8 * v100);
        sub_100434BD0(v100, v99);
        Swift::Int v104 = *v28;
        *uint64_t v28 = v99;
        swift_bridgeObjectRelease(v104);
      }

      else
      {
        id v123 = v112;
        swift_bridgeObjectRetain(v117);
        unint64_t v100 = sub_100433024((uint64_t)v123);
        char v125 = v124;
        swift_bridgeObjectRelease(v117);
        if ((v125 & 1) != 0)
        {
          char v126 = swift_isUniquelyReferenced_nonNull_native(*v28);
          Swift::Int v99 = *v28;
          uint64_t v135 = *v28;
          *uint64_t v28 = 0x8000000000000000LL;
          if ((v126 & 1) == 0)
          {
            sub_100435224();
            Swift::Int v99 = v135;
          }

          goto LABEL_80;
        }

    sub_1004D67B4(&v57, &v56, (uint64_t *)&v55);
    return 1LL;
  }

LABEL_112:
        uint64_t v103 = 0LL;
      }

      swift_endAccess(v136);
      swift_release(v103);

      continue;
    }

    break;
  }

  int64_t v114 = v92 + 1;
  if (__OFADD__(v92, 1LL)) {
    goto LABEL_119;
  }
  if (v114 >= v97) {
    goto LABEL_113;
  }
  unint64_t v115 = *(void *)(v90 + 8 * v114);
  ++v92;
  if (v115) {
    goto LABEL_101;
  }
  uint64_t v92 = v105 + 2;
  if (v105 + 2 >= v97) {
    goto LABEL_113;
  }
  unint64_t v115 = *(void *)(v90 + 8 * v92);
  if (v115) {
    goto LABEL_101;
  }
  uint64_t v92 = v105 + 3;
  if (v105 + 3 >= v97) {
    goto LABEL_113;
  }
  unint64_t v115 = *(void *)(v90 + 8 * v92);
  if (v115) {
    goto LABEL_101;
  }
  uint64_t v92 = v105 + 4;
  if (v105 + 4 >= v97) {
    goto LABEL_113;
  }
  unint64_t v115 = *(void *)(v90 + 8 * v92);
  if (v115)
  {
LABEL_101:
    unint64_t v93 = (v115 - 1) & v115;
    unint64_t v107 = __clz(__rbit64(v115)) + (v92 << 6);
    goto LABEL_102;
  }

  uint64_t v116 = v105 + 5;
  while (v97 != v116)
  {
    unint64_t v115 = *(void *)(v90 + 8 * v116++);
    if (v115)
    {
      uint64_t v92 = v116 - 1;
      goto LABEL_101;
    }
  }

void *sub_100428954(uint64_t a1)
{
  uint64_t v1 = a1;
  unint64_t v2 = a1 & 0xC000000000000001LL;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 >= 0) {
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    uint64_t v3 = __CocoaDictionary.count.getter(a1);
  }

  else
  {
    uint64_t v3 = *(void *)(a1 + 16);
  }

  uint64_t result = &_swiftEmptyArrayStorage;
  if (v3)
  {
    __n128 v33 = &_swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v3);
    uint64_t result = (void *)sub_100438374(v1);
    uint64_t v30 = result;
    uint64_t v31 = v5;
    char v32 = v6 & 1;
    if (v3 < 0)
    {
      __break(1u);
LABEL_21:
      __break(1u);
    }

    else
    {
      uint64_t v7 = v1 & 0xFFFFFFFFFFFFFF8LL;
      if (v1 < 0) {
        uint64_t v7 = v1;
      }
      uint64_t v28 = v7;
      do
      {
        while (1)
        {
          uint64_t v14 = (uint64_t)v30;
          uint64_t v15 = v31;
          char v16 = v32;
          sub_100438434(v29, (uint64_t)v30, v31, v32, v1);
          id v18 = v17;
          uint64_t v19 = v29[0];
          id v20 = *(id *)(v29[0] + 16LL);
          swift_release(v19);

          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          uint64_t v21 = v33[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v21);
          uint64_t v22 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v21, v20);
          uint64_t result = (void *)specialized ContiguousArray._endMutation()(v22);
          if (v2) {
            break;
          }
          sub_100437A80(v14, v15, v16, v1);
          uint64_t v9 = v8;
          uint64_t v11 = v10;
          char v13 = v12;
          sub_1004398F4(v14, v15, v16);
          uint64_t v30 = (void *)v9;
          uint64_t v31 = v11;
          char v32 = v13 & 1;
          if (!--v3) {
            goto LABEL_18;
          }
        }

        if ((v16 & 1) == 0) {
          goto LABEL_21;
        }
        uint64_t v23 = __CocoaDictionary.Index.handleBitPattern.getter(v14, v15);
        if (v23) {
          uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v23);
        }
        else {
          uint64_t isUniquelyReferenced_nonNull_native = 1LL;
        }
        uint64_t v25 = sub_1003F5CB4(&qword_1009B9A18);
        uint64_t v26 = (void (*)(void *, void))Dictionary.Index._asCocoa.modify(v29, v25);
        __CocoaDictionary.formIndex(after:isUnique:)(v27, isUniquelyReferenced_nonNull_native, v28);
        v26(v29, 0LL);
        --v3;
      }

      while (v3);
LABEL_18:
      sub_1004398F4((uint64_t)v30, v31, v32);
      return v33;
    }
  }

  return result;
}

void sub_100428B44(uint64_t a1)
{
  int64_t v1 = a1;
  unint64_t v2 = a1 & 0xC000000000000001LL;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 >= 0) {
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    uint64_t v3 = __CocoaDictionary.count.getter(a1);
  }

  else
  {
    uint64_t v3 = *(void *)(a1 + 16);
  }

  uint64_t v4 = sub_10041D3C4(0LL, (unint64_t *)&unk_1009BC270, &OBJC_CLASS___IDSURI_ptr);
  uint64_t v5 = sub_100438928((unint64_t *)&unk_1009BAC00, (unint64_t *)&unk_1009BC270, &OBJC_CLASS___IDSURI_ptr);
  uint64_t v25 = v4;
  v29[1] = (id)Set.init(minimumCapacity:)(v3, v4, v5);
  if (v2)
  {
    if (v1 < 0) {
      uint64_t v6 = v1;
    }
    else {
      uint64_t v6 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v7 = __CocoaDictionary.makeIterator()(v6);
    int64_t v27 = 0LL;
    uint64_t v8 = 0LL;
    unint64_t v9 = 0LL;
    int64_t v1 = v7 | 0x8000000000000000LL;
  }

  else
  {
    uint64_t v10 = -1LL << *(_BYTE *)(v1 + 32);
    int64_t v27 = v1 + 64;
    uint64_t v8 = ~v10;
    uint64_t v11 = -v10;
    if (v11 < 64) {
      uint64_t v12 = ~(-1LL << v11);
    }
    else {
      uint64_t v12 = -1LL;
    }
    unint64_t v9 = v12 & *(void *)(v1 + 64);
  }

  uint64_t v13 = 0LL;
  int64_t v26 = (unint64_t)(v8 + 64) >> 6;
  while (v1 < 0)
  {
    uint64_t v21 = __CocoaDictionary.Iterator.nextKey()();
    if (!v21) {
      goto LABEL_40;
    }
    uint64_t v23 = v21;
    uint64_t v28 = v21;
    swift_unknownObjectRetain(v21, v22);
    swift_dynamicCast(v29, &v28, (char *)&type metadata for Swift.AnyObject + 8, v25, 7LL);
    id v17 = v29[0];
    swift_unknownObjectRelease(v23, v24);
    if (!v17) {
      goto LABEL_40;
    }
    uint64_t v14 = v9;
    uint64_t v16 = v13;
LABEL_18:
    sub_100433318( (Swift::Int *)v29,  v17,  (unint64_t *)&unk_1009BC270,  &OBJC_CLASS___IDSURI_ptr,  &qword_1009B9D90);

    uint64_t v13 = v16;
    unint64_t v9 = v14;
  }

  if (v9)
  {
    uint64_t v14 = (v9 - 1) & v9;
    unint64_t v15 = __clz(__rbit64(v9)) | (v13 << 6);
    uint64_t v16 = v13;
LABEL_17:
    id v17 = *(id *)(*(void *)(v1 + 48) + 8 * v15);
    if (!v17) {
      goto LABEL_40;
    }
    goto LABEL_18;
  }

  int64_t v18 = v13 + 1;
  if (!__OFADD__(v13, 1LL))
  {
    if (v18 >= v26) {
      goto LABEL_40;
    }
    unint64_t v19 = *(void *)(v27 + 8 * v18);
    uint64_t v16 = v13 + 1;
    if (!v19)
    {
      uint64_t v16 = v13 + 2;
      if (v13 + 2 >= v26) {
        goto LABEL_40;
      }
      unint64_t v19 = *(void *)(v27 + 8 * v16);
      if (!v19)
      {
        uint64_t v16 = v13 + 3;
        if (v13 + 3 >= v26) {
          goto LABEL_40;
        }
        unint64_t v19 = *(void *)(v27 + 8 * v16);
        if (!v19)
        {
          uint64_t v16 = v13 + 4;
          if (v13 + 4 >= v26) {
            goto LABEL_40;
          }
          unint64_t v19 = *(void *)(v27 + 8 * v16);
          if (!v19)
          {
            uint64_t v16 = v13 + 5;
            if (v13 + 5 >= v26) {
              goto LABEL_40;
            }
            unint64_t v19 = *(void *)(v27 + 8 * v16);
            if (!v19)
            {
              uint64_t v20 = v13 + 6;
              while (v26 != v20)
              {
                unint64_t v19 = *(void *)(v27 + 8 * v20++);
                if (v19)
                {
                  uint64_t v16 = v20 - 1;
                  goto LABEL_36;
                }
              }

void *sub_100428E34(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = a1;
  if ((a1 & 0xC000000000000001LL) == 0)
  {
    uint64_t v4 = *(void *)(a1 + 16);
    if ((a2 & 0xC000000000000001LL) != 0) {
      goto LABEL_5;
    }
LABEL_11:
    if (v4 > *(void *)(v2 + 16) >> 3) {
      return sub_100433AD4(v3, v2);
    }
    goto LABEL_13;
  }

  if (a1 >= 0) {
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  }
  uint64_t v4 = __CocoaSet.count.getter(a1);
  if ((v2 & 0xC000000000000001LL) == 0) {
    goto LABEL_11;
  }
LABEL_5:
  if (v2 < 0) {
    uint64_t v5 = v2;
  }
  else {
    uint64_t v5 = v2 & 0xFFFFFFFFFFFFFF8LL;
  }
  if (v4 > __CocoaSet.count.getter(v5) / 8)
  {
    swift_bridgeObjectRetain(v2);
    uint64_t v6 = __CocoaSet.count.getter(v5);
    Swift::Int v7 = sub_1004338D4(v5, v6, &qword_1009B9D90, (unint64_t *)&unk_1009BC270, &OBJC_CLASS___IDSURI_ptr);
    swift_bridgeObjectRelease(v2);
    uint64_t v2 = v7;
    return sub_100433AD4(v3, v2);
  }

uint64_t sub_100428F40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  if (*(void *)(a1 + 24))
  {
    sub_10040DAE8((_OWORD *)a1, v11);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v10 = *v3;
    void *v3 = 0x8000000000000000LL;
    sub_10043508C(v11, a2, a3, isUniquelyReferenced_nonNull_native);
    uint64_t v8 = *v3;
    void *v4 = v10;
    swift_bridgeObjectRelease(a3);
    return swift_bridgeObjectRelease(v8);
  }

  else
  {
    sub_10040A274(a1, &qword_1009B92B8);
    sub_100434024(a2, a3, v11);
    swift_bridgeObjectRelease(a3);
    return sub_10040A274((uint64_t)v11, &qword_1009B92B8);
  }

uint64_t sub_100429014(uint64_t a1)
{
  uint64_t v3 = *(os_unfair_lock_s **)&v1[OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_lock];
  uint64_t v4 = v3 + 4;
  uint64_t v87 = v3;
  swift_retain(v3);
  lock = v4;
  os_unfair_lock_lock(v4);
  uint64_t v5 = v1;
  swift_bridgeObjectRetain_n(a1, 2LL);
  uint64_t v6 = v5;
  Swift::Int v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.default.getter();
  unint64_t v9 = &off_100717000;
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    uint64_t v92 = swift_slowAlloc(96LL, -1LL);
    v98[0] = v92;
    *(_DWORD *)uint64_t v10 = 136315650;
    uint64_t v11 = a1;
    uint64_t v96 = (char *)sub_1003FFBB0(0xD000000000000019LL, 0x800000010083F820LL, v98);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, v97, v10 + 4, v10 + 12);
    *(_WORD *)(v10 + 12) = 2080;
    uint64_t v12 = &v6[OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_participantsById];
    swift_beginAccess( &v6[OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_participantsById],  v94,  0LL,  0LL);
    uint64_t v13 = *(void *)v12;
    type metadata accessor for IDSGroupPushMaterialExchangeParticipant();
    __n128 v14 = swift_bridgeObjectRetain(v13);
    uint64_t v15 = Dictionary.Values.description.getter(v14);
    unint64_t v17 = v16;
    swift_bridgeObjectRelease(v13);
    uint64_t v96 = (char *)sub_1003FFBB0(v15, v17, v98);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, v97, v10 + 14, v10 + 22);

    swift_bridgeObjectRelease(v17);
    *(_WORD *)(v10 + 22) = 2080;
    uint64_t v18 = type metadata accessor for IDSGroupEncryptionControllerParticipant(0LL);
    uint64_t v19 = sub_10040A2B0( (unint64_t *)&unk_1009B97C0,  type metadata accessor for IDSGroupEncryptionControllerParticipant,  (uint64_t)&protocol conformance descriptor for NSObject);
    swift_bridgeObjectRetain(v11);
    uint64_t v21 = Set.description.getter(v20, v18, v19);
    unint64_t v23 = v22;
    swift_bridgeObjectRelease(v11);
    uint64_t v24 = v21;
    a1 = v11;
    uint64_t v96 = (char *)sub_1003FFBB0(v24, v23, v98);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, v97, v10 + 24, v10 + 32);
    swift_bridgeObjectRelease_n(v11, 2LL);
    unint64_t v25 = v23;
    unint64_t v9 = &off_100717000;
    swift_bridgeObjectRelease(v25);
    _os_log_impl( (void *)&_mh_execute_header,  v7,  v8,  "%s: updating active participants from %s to:%s)",  (uint8_t *)v10,  0x20u);
    swift_arrayDestroy(v92, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v92, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(a1, 2LL);
  }

  uint64_t v88 = v6;
  unint64_t v89 = sub_100438654(&_swiftEmptyArrayStorage);
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v26 = a1;
    }
    else {
      uint64_t v26 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v27 = __CocoaSet.makeIterator()(v26);
    uint64_t v28 = type metadata accessor for IDSGroupEncryptionControllerParticipant(0LL);
    uint64_t v29 = sub_10040A2B0( (unint64_t *)&unk_1009B97C0,  type metadata accessor for IDSGroupEncryptionControllerParticipant,  (uint64_t)&protocol conformance descriptor for NSObject);
    uint64_t v30 = Set.Iterator.init(_cocoa:)(v98, v27, v28, v29);
    a1 = v98[0];
    uint64_t v93 = v98[1];
    uint64_t v31 = v98[2];
    uint64_t v32 = v98[3];
    unint64_t v33 = v98[4];
  }

  else
  {
    uint64_t v34 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v93 = a1 + 56;
    uint64_t v31 = ~v34;
    uint64_t v35 = -v34;
    if (v35 < 64) {
      uint64_t v36 = ~(-1LL << v35);
    }
    else {
      uint64_t v36 = -1LL;
    }
    unint64_t v33 = v36 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    uint64_t v32 = 0LL;
  }

  int64_t v90 = (unint64_t)(v31 + 64) >> 6;
  int v91 = *((void *)v9 + 107);
  while (1)
  {
    uint64_t v37 = v32;
    if ((a1 & 0x8000000000000000LL) == 0) {
      break;
    }
    uint64_t v40 = __CocoaSet.Iterator.next()(v30);
    if (!v40) {
      goto LABEL_51;
    }
    uint64_t v41 = v40;
    uint64_t v95 = v40;
    uint64_t v42 = type metadata accessor for IDSGroupEncryptionControllerParticipant(0LL);
    swift_unknownObjectRetain(v41, v43);
    swift_dynamicCast(&v96, &v95, (char *)&type metadata for Swift.AnyObject + 8, v42, 7LL);
    uint64_t v44 = v96;
    swift_unknownObjectRelease(v41, v45);
    if (!v44) {
      goto LABEL_51;
    }
LABEL_37:
    unint64_t v49 = (uint64_t *)&v44[OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_allocatedURI];
    uint64_t v50 = *(void *)&v44[OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_allocatedURI + 8];
    id v51 = objc_allocWithZone(&OBJC_CLASS___IDSURI);
    swift_bridgeObjectRetain(v50);
    NSString v52 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v50);
    id v53 = [v51 initWithPrefixedURI:v52];

    if (v53)
    {
      uint64_t v85 = a1;
      uint64_t v63 = *(void *)&v44[OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_participantID];
      id v64 = *(id *)&v44[OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_pushToken];
      uint64_t v65 = sub_10042FB9C(v64, v53, v63);

      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v89);
      uint64_t v96 = (char *)v89;
      unint64_t v68 = sub_100417DF8(v63);
      uint64_t v69 = *(void *)(v89 + 16);
      BOOL v70 = (v67 & 1) == 0;
      uint64_t v71 = v69 + v70;
      if (__OFADD__(v69, v70)) {
        goto LABEL_53;
      }
      uint64_t v72 = (void *)v89;
      char v73 = v67;
      if (*(void *)(v89 + 24) >= v71)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1004353CC();
          uint64_t v72 = v96;
        }
      }

      else
      {
        sub_100434620(v71, isUniquelyReferenced_nonNull_native);
        uint64_t v74 = (uint64_t)v96;
        unint64_t v75 = sub_100417DF8(v63);
        if ((v73 & 1) != (v76 & 1)) {
          goto LABEL_55;
        }
        unint64_t v68 = v75;
        uint64_t v72 = (void *)v74;
      }

      uint64_t v77 = 8 * v68;
      unint64_t v89 = (unint64_t)v72;
      if ((v73 & 1) != 0)
      {
        uint64_t v78 = v72[7];
        swift_release(*(void *)(v78 + v77));
        *(void *)(v78 + v77) = v65;
      }

      else
      {
        v72[(v68 >> 6) + 8] |= 1LL << v68;
        *(void *)(v72[6] + 8 * v6_Block_object_dispose(va, 8) = v63;
        *(void *)(v72[7] + 8 * v6_Block_object_dispose(va, 8) = v65;
        uint64_t v79 = v72[2];
        BOOL v80 = __OFADD__(v79, 1LL);
        uint64_t v81 = v79 + 1;
        if (v80) {
          goto LABEL_54;
        }
        v72[2] = v81;
      }

      uint64_t v30 = (void *)swift_bridgeObjectRelease(0x8000000000000000LL);
      a1 = v85;
    }

    else
    {
      uint64_t v54 = v44;
      id v55 = (os_log_s *)Logger.logObject.getter(v54);
      uint64_t v56 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v55, (os_log_type_t)v56))
      {
        uint64_t v57 = swift_slowAlloc(32LL, -1LL);
        uint64_t v58 = a1;
        uint64_t v59 = swift_slowAlloc(64LL, -1LL);
        uint64_t v96 = (char *)v59;
        *(_DWORD *)uint64_t v57 = v91;
        *(void *)(v57 + 4) = sub_1003FFBB0(0xD000000000000019LL, 0x800000010083F820LL, (uint64_t *)&v96);
        *(_WORD *)(v57 + 12) = 2048;
        *(void *)(v57 + 14) = *(void *)&v54[OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_participantID];

        *(_WORD *)(v57 + 22) = 2080;
        uint64_t v60 = *v49;
        unint64_t v61 = v49[1];
        swift_bridgeObjectRetain(v61);
        *(void *)(v57 + 24) = sub_1003FFBB0(v60, v61, (uint64_t *)&v96);

        swift_bridgeObjectRelease(v61);
        _os_log_impl( (void *)&_mh_execute_header,  v55,  (os_log_type_t)v56,  "%s: participant %llu has no URI:%s)",  (uint8_t *)v57,  0x20u);
        swift_arrayDestroy(v59, 2LL, (char *)&type metadata for Any + 8);
        uint64_t v62 = v59;
        a1 = v58;
        swift_slowDealloc(v62, -1LL, -1LL);
        swift_slowDealloc(v57, -1LL, -1LL);
      }

      else
      {
      }
    }
  }

  if (v33)
  {
    unint64_t v38 = __clz(__rbit64(v33));
    v33 &= v33 - 1;
    unint64_t v39 = v38 | (v32 << 6);
LABEL_36:
    uint64_t v44 = (char *)*(id *)(*(void *)(a1 + 48) + 8 * v39);
    if (!v44) {
      goto LABEL_51;
    }
    goto LABEL_37;
  }

  int64_t v46 = v32 + 1;
  if (!__OFADD__(v32, 1LL))
  {
    if (v46 >= v90) {
      goto LABEL_51;
    }
    unint64_t v47 = *(void *)(v93 + 8 * v46);
    ++v32;
    if (!v47)
    {
      uint64_t v32 = v37 + 2;
      if (v37 + 2 >= v90) {
        goto LABEL_51;
      }
      unint64_t v47 = *(void *)(v93 + 8 * v32);
      if (!v47)
      {
        uint64_t v32 = v37 + 3;
        if (v37 + 3 >= v90) {
          goto LABEL_51;
        }
        unint64_t v47 = *(void *)(v93 + 8 * v32);
        if (!v47)
        {
          uint64_t v32 = v37 + 4;
          if (v37 + 4 >= v90) {
            goto LABEL_51;
          }
          unint64_t v47 = *(void *)(v93 + 8 * v32);
          if (!v47)
          {
            uint64_t v48 = v37 + 5;
            while (v90 != v48)
            {
              unint64_t v47 = *(void *)(v93 + 8 * v48++);
              if (v47)
              {
                uint64_t v32 = v48 - 1;
                goto LABEL_35;
              }
            }

uint64_t sub_1004298D0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v179 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v178 = *(void *)(v179 - 8);
  __chkstk_darwin(v4, v5);
  uint64_t v177 = (char *)&v171 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v176 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v175 = *(void *)(v176 - 8);
  __chkstk_darwin(v7, v8);
  uint64_t v174 = (char *)&v171 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v171 = *(void *)(type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL) - 8);
  __chkstk_darwin(v10, v11);
  uint64_t v173 = (uint64_t)&v171 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13, v14);
  uint64_t v180 = (uint64_t)&v171 - v15;
  uint64_t v172 = v16;
  __chkstk_darwin(v17, v18);
  uint64_t v181 = (uint64_t)&v171 - v19;
  sub_1003F5CB4(&qword_1009B99F0);
  __chkstk_darwin(v20, v21);
  __n128 v182 = (char *)&v171 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v23, v24);
  uint64_t v201 = (char *)&v171 - v25;
  __chkstk_darwin(v26, v27);
  uint64_t v197 = (uint64_t)&v171 - v28;
  uint64_t v29 = (uint64_t *)type metadata accessor for IDSGroupEncryptionDesiredPreKeyMaterialSet(0LL);
  uint64_t v198 = *(v29 - 1);
  __chkstk_darwin(v30, v31);
  uint64_t v189 = (uint64_t)&v171 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v33, v34);
  uint64_t v196 = (uint64_t)&v171 - v35;
  sub_1003F5CB4(&qword_1009B99D8);
  __chkstk_darwin(v36, v37);
  uint64_t v193 = (char *)&v171 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int64_t v39 = type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet(0LL);
  uint64_t v192 = *(void *)(v39 - 8);
  __chkstk_darwin(v40, v41);
  uint64_t v190 = (char *)&v171 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v43, v44);
  uint64_t v191 = (char *)&v171 - v45;
  __chkstk_darwin(v46, v47);
  unint64_t v49 = (char *)&v171 - v48;
  uint64_t v50 = type metadata accessor for IDSGroupEncryptionDesiredMaterialSetContainer(0LL);
  uint64_t v51 = *(void *)(v50 - 8);
  __chkstk_darwin(v52, v53);
  id v55 = (char *)&v171 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v56, v57);
  uint64_t v208 = (char *)&v171 - v58;
  uint64_t v59 = *(void *)(a1 + 56);
  uint64_t v206 = (void *)(a1 + 56);
  uint64_t v60 = a1;
  uint64_t v61 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v62 = -1LL;
  if (v61 < 64) {
    uint64_t v62 = ~(-1LL << v61);
  }
  uint64_t v63 = v62 & v59;
  int64_t v64 = OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_lock;
  uint64_t v195 = (char *)v2 + OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_l;
  int64_t v207 = (unint64_t)(v61 + 63) >> 6;
  uint64_t v187 = &v215;
  __n128 v65 = swift_bridgeObjectRetain(v60);
  v65.n128_u64[0] = 136315394LL;
  __n128 v185 = v65;
  unint64_t v188 = (unint64_t)"ata:desiredMaterial:)";
  unint64_t v184 = 0x800000010083F430LL;
  uint64_t v183 = (char *)&type metadata for Any + 8;
  v65.n128_u64[0] = 136315650LL;
  __n128 v186 = v65;
  uint64_t v194 = v2;
  uint64_t v199 = v29;
  int64_t v200 = v64;
  unint64_t v209 = v66;
  int64_t v204 = v39;
  id v205 = v49;
  uint64_t v203 = v50;
  uint64_t v202 = v51;
  if (v63)
  {
    unint64_t v67 = __clz(__rbit64(v63));
    goto LABEL_18;
  }

  if (v207 > 1)
  {
    unint64_t v68 = v206[1];
    uint64_t v69 = 1LL;
    if (v68) {
      goto LABEL_17;
    }
    uint64_t v69 = 2LL;
    if (v207 > 2)
    {
      unint64_t v68 = v206[2];
      if (v68) {
        goto LABEL_17;
      }
      uint64_t v69 = 3LL;
      if (v207 > 3)
      {
        unint64_t v68 = v206[3];
        if (!v68)
        {
          uint64_t v70 = 4LL;
          if (v207 > 4)
          {
            unint64_t v68 = v206[4];
            if (v68)
            {
              uint64_t v69 = 4LL;
              goto LABEL_17;
            }

            while (1)
            {
              uint64_t v69 = v70 + 1;
              if (__OFADD__(v70, 1LL)) {
                break;
              }
              if (v69 >= v207) {
                goto LABEL_19;
              }
              unint64_t v68 = v206[v69];
              ++v70;
              if (v68) {
                goto LABEL_17;
              }
            }

LABEL_92:
    __break(1u);
LABEL_93:
    if (v51 < 0) {
      uint64_t v170 = v51;
    }
    else {
      uint64_t v170 = v51 & 0xFFFFFFFFFFFFFF8LL;
    }
    int64_t v207 = v68;
    swift_bridgeObjectRetain(v51);
    int64_t v105 = _CocoaArrayWrapper.endIndex.getter(v170);
    swift_bridgeObjectRelease(v51);
    unint64_t v68 = v207;
    if (v105 < 1) {
      goto LABEL_97;
    }
LABEL_52:
    int64_t v207 = v68;
    uint64_t v208 = v49;
    unint64_t v209 = v64;
    uint64_t v106 = swift_bridgeObjectRetain_n(v51, 2LL);
    unint64_t v107 = (os_log_s *)Logger.logObject.getter(v106);
    os_log_type_t v108 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v107, v108))
    {
      uint64_t v109 = swift_slowAlloc(22LL, -1LL);
      uint64_t v110 = swift_slowAlloc(64LL, -1LL);
      aBlock[0] = v110;
      *(_DWORD *)uint64_t v109 = v185.n128_u32[0];
      uint64_t v210 = (void *)sub_1003FFBB0(0xD000000000000017LL, v188 | 0x8000000000000000LL, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v210, aBlock, v109 + 4, v109 + 12);
      *(_WORD *)(v109 + 12) = 2080;
      uint64_t v206 = (void *)(v109 + 14);
      uint64_t v111 = sub_10041D3C4(0LL, (unint64_t *)&unk_1009BC270, &OBJC_CLASS___IDSURI_ptr);
      swift_bridgeObjectRetain(v51);
      uint64_t v113 = Array.description.getter(v112, v111);
      unint64_t v115 = v114;
      swift_bridgeObjectRelease(v51);
      uint64_t v210 = (void *)sub_1003FFBB0(v113, v115, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v210, aBlock, v206, v109 + 22);
      swift_bridgeObjectRelease_n(v51, 2LL);
      swift_bridgeObjectRelease(v115);
      _os_log_impl((void *)&_mh_execute_header, v107, v108, "%s: Sending PreKey to %s", (uint8_t *)v109, 0x16u);
      swift_arrayDestroy(v110, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v110, -1LL, -1LL);
      swift_slowDealloc(v109, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(v51, 2LL);
    }

    aBlock[0] = (uint64_t)&_swiftEmptyArrayStorage;
    sub_100411D38(0LL, v105, 0);
    uint64_t v116 = 0LL;
    uint64_t v117 = aBlock[0];
    unint64_t v118 = v51 & 0xC000000000000001LL;
    do
    {
      if (v118) {
        id v119 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v116, v51);
      }
      else {
        id v119 = *(id *)(v51 + 8 * v116 + 32);
      }
      __n128 v120 = v119;
      id v121 = [v119 prefixedURI];
      uint64_t v122 = static String._unconditionallyBridgeFromObjectiveC(_:)(v121);
      uint64_t v124 = v123;

      aBlock[0] = v117;
      unint64_t v126 = *(void *)(v117 + 16);
      unint64_t v125 = *(void *)(v117 + 24);
      if (v126 >= v125 >> 1)
      {
        sub_100411D38((char *)(v125 > 1), v126 + 1, 1);
        uint64_t v117 = aBlock[0];
      }

      ++v116;
      *(void *)(v117 + swift_unknownObjectWeakDestroy(v0 + 16) = v126 + 1;
      uint64_t v127 = v117 + 16 * v126;
      *(void *)(v127 + 32) = v122;
      *(void *)(v127 + 40) = v124;
    }

    while (v105 != v116);
    uint64_t v128 = sub_100438988(v117);
    swift_bridgeObjectRelease(v117);
    Class isa = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v128);
    id v205 = [(id)objc_opt_self(IDSDestination) destinationWithStrings:isa];

    uint64_t v206 = (id)im_primary_queue(v130, v131);
    if (!v206)
    {
      __break(1u);
      JUMPOUT(0x10042B148LL);
    }

    uint64_t v132 = v173;
    sub_1003F5FC8(v181, v173, type metadata accessor for IDSGroupEncryptionPublicIdentity);
    uint64_t v133 = *(unsigned __int8 *)(v171 + 80);
    uint64_t v134 = (v133 + 40) & ~v133;
    unint64_t v135 = (v172 + v134 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v136 = (void *)swift_allocObject(&unk_100905940, v135 + 8, v133 | 7);
    uint64_t v137 = v194;
    uint64_t v138 = (uint64_t)v208;
    unint64_t v139 = v209;
    v136[2] = v194;
    void v136[3] = v138;
    v136[4] = v139;
    sub_1003F600C(v132, (uint64_t)v136 + v134, type metadata accessor for IDSGroupEncryptionPublicIdentity);
    id v140 = v205;
    *(void *)((char *)v136 + v135) = v205;
    aBlock[4] = (uint64_t)sub_100439560;
    uint64_t v212 = v136;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = (uint64_t)sub_1003F8400;
    aBlock[3] = (uint64_t)&unk_100905958;
    uint64_t v141 = _Block_copy(aBlock);
    id v142 = v137;
    sub_100439780(v138, v139);
    id v143 = v140;
    uint64_t v144 = v174;
    static DispatchQoS.unspecified.getter(v143);
    uint64_t v210 = &_swiftEmptyArrayStorage;
    uint64_t v145 = sub_10040A2B0( (unint64_t *)&unk_1009BAC40,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v146 = sub_1003F5CB4((uint64_t *)&unk_1009B9870);
    unint64_t v147 = sub_100439794();
    unint64_t v148 = v177;
    uint64_t v149 = v179;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v210, v146, v147, v179, v145);
    unint64_t v150 = v206;
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v144, v148, v141);
    _Block_release(v141);

    (*(void (**)(char *, uint64_t))(v178 + 8))(v148, v149);
    (*(void (**)(char *, uint64_t))(v175 + 8))(v144, v176);
    swift_release(v212);
    id v205 = v143;
    if (v207)
    {
      if (v51 < 0) {
        uint64_t v152 = v51;
      }
      else {
        uint64_t v152 = v51 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v51);
      uint64_t v151 = _CocoaArrayWrapper.endIndex.getter(v152);
      swift_bridgeObjectRelease(v51);
    }

    else
    {
      uint64_t v151 = *(void *)((v51 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    }

    uint64_t v153 = v189;
    if (v151)
    {
      if (v151 < 1)
      {
        __break(1u);
        JUMPOUT(0x10042B140LL);
      }

      for (uint64_t i = 0LL; v151 != i; ++i)
      {
        if (v118) {
          id v155 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v51);
        }
        else {
          id v155 = *(id *)(v51 + 8 * i + 32);
        }
        uint64_t v156 = v155;
        uint64_t v157 = *v29;
        if ((*v29 & 0xC000000000000001LL) != 0)
        {
          if (v157 < 0) {
            uint64_t v158 = *v29;
          }
          else {
            uint64_t v158 = v157 & 0xFFFFFFFFFFFFFF8LL;
          }
          __n128 v159 = swift_bridgeObjectRetain(*v29);
          uint64_t v160 = __CocoaDictionary.lookup(_:)(v156, v158, v159);
          if (v160)
          {
            uint64_t v161 = v160;
            uint64_t v210 = (void *)v160;
            uint64_t v162 = type metadata accessor for IDSGroupPushMaterialExchangeMember(0LL);
            swift_unknownObjectRetain(v161, v163);
            swift_dynamicCast(aBlock, &v210, (char *)&type metadata for Swift.AnyObject + 8, v162, 7LL);
            uint64_t v164 = aBlock[0];
            swift_unknownObjectRelease(v161, v165);
            goto LABEL_87;
          }
        }

        else
        {
          uint64_t v153 = v189;
          if (!*(void *)(v157 + 16)) {
            goto LABEL_74;
          }
          swift_bridgeObjectRetain(*v29);
          id v166 = v156;
          unint64_t v167 = sub_100433024((uint64_t)v166);
          if ((v168 & 1) != 0)
          {
            uint64_t v164 = *(void *)(*(void *)(v157 + 56) + 8 * v167);
            swift_retain(v164);

LABEL_87:
            swift_bridgeObjectRelease(v157);
            uint64_t v153 = v189;
            if (v164)
            {
              uint64_t v169 = v197;
              sub_1003F5FC8(v189, v197, type metadata accessor for IDSGroupEncryptionDesiredPreKeyMaterialSet);
              (*(void (**)(uint64_t, void, uint64_t, uint64_t *))(v198 + 56))(v169, 0LL, 1LL, v199);
              (*(void (**)(uint64_t))(*(void *)v164 + 104LL))(v169);
              swift_release(v164);
            }

            goto LABEL_74;
          }
        }

        swift_bridgeObjectRelease(v157);
        uint64_t v153 = v189;
LABEL_74:
      }
    }

    sub_10040AD00((uint64_t)v208, v209);
    swift_bridgeObjectRelease(v51);
    sub_1003F6050(v181, type metadata accessor for IDSGroupEncryptionPublicIdentity);
    sub_1003F6050(v153, type metadata accessor for IDSGroupEncryptionDesiredPreKeyMaterialSet);
    uint64_t v2 = v194;
    goto LABEL_48;
  }

uint64_t sub_10042B158(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for IDSGroupEncryptionDesiredPreKeyMaterialSet(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v6, v7);
  uint64_t v36 = (uint64_t)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_1003F5CB4(&qword_1009B9A30);
  __chkstk_darwin(v10, v11);
  __n128 v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1003F5CB4(&qword_1009B99F0);
  __chkstk_darwin(v14, v15);
  __n128 v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18, v19);
  __n128 v21 = (char *)&v35 - v20;
  uint64_t v24 = __chkstk_darwin(v22, v23);
  __n128 v26 = (char *)&v35 - v25;
  uint64_t v27 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96LL))(v24);
  (*(void (**)(uint64_t))((swift_isaMask & *a2) + 0xF0LL))(v27);
  uint64_t v28 = (uint64_t)&v13[*(int *)(v9 + 48)];
  sub_100410FD0((uint64_t)v26, (uint64_t)v13, &qword_1009B99F0);
  sub_100410FD0((uint64_t)v21, v28, &qword_1009B99F0);
  uint64_t v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v29((uint64_t)v13, 1LL, v4) != 1)
  {
    sub_100410FD0((uint64_t)v13, (uint64_t)v17, &qword_1009B99F0);
    if (v29(v28, 1LL, v4) != 1)
    {
      uint64_t v31 = v36;
      sub_1003F600C(v28, v36, type metadata accessor for IDSGroupEncryptionDesiredPreKeyMaterialSet);
      uint64_t v32 = sub_10040A2B0( &qword_1009B91D8,  type metadata accessor for IDSGroupEncryptionDesiredPreKeyMaterialSet,  (uint64_t)&unk_100718594);
      char v33 = dispatch thunk of static Equatable.== infix(_:_:)(v17, v31, v4, v32);
      sub_1003F6050(v31, type metadata accessor for IDSGroupEncryptionDesiredPreKeyMaterialSet);
      sub_10040A274((uint64_t)v21, &qword_1009B99F0);
      sub_10040A274((uint64_t)v26, &qword_1009B99F0);
      sub_1003F6050((uint64_t)v17, type metadata accessor for IDSGroupEncryptionDesiredPreKeyMaterialSet);
      sub_10040A274((uint64_t)v13, &qword_1009B99F0);
      char v30 = v33 ^ 1;
      return v30 & 1;
    }

    sub_10040A274((uint64_t)v21, &qword_1009B99F0);
    sub_10040A274((uint64_t)v26, &qword_1009B99F0);
    sub_1003F6050((uint64_t)v17, type metadata accessor for IDSGroupEncryptionDesiredPreKeyMaterialSet);
    goto LABEL_6;
  }

  sub_10040A274((uint64_t)v21, &qword_1009B99F0);
  sub_10040A274((uint64_t)v26, &qword_1009B99F0);
  if (v29(v28, 1LL, v4) != 1)
  {
LABEL_6:
    sub_10040A274((uint64_t)v13, &qword_1009B9A30);
    char v30 = 1;
    return v30 & 1;
  }

  sub_10040A274((uint64_t)v13, &qword_1009B99F0);
  char v30 = 0;
  return v30 & 1;
}

void sub_10042B464(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v10, v11);
  __n128 v13 = (char *)&v85 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v16, v17);
  uint64_t v94 = (os_log_s *)((char *)&v85 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  CFDataRef v19 = sub_1004D3220();
  if (v20 >> 60 == 15)
  {
    uint64_t v94 = (os_log_s *)Logger.logObject.getter(v19);
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v94, v21))
    {
      __n128 v22 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v23 = swift_slowAlloc(32LL, -1LL);
      *(void *)&__int128 v97 = v23;
      *(_DWORD *)__n128 v22 = 136315138;
      *(void *)&v96[0] = sub_1003FFBB0(0xD000000000000031LL, 0x800000010083F4A0LL, (uint64_t *)&v97);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v96, (char *)v96 + 8, v22 + 4, v22 + 12);
      _os_log_impl( (void *)&_mh_execute_header,  v94,  v21,  "%s: cannot send keyRecoveryRequest because we could not get public identity data",  v22,  0xCu);
      swift_arrayDestroy(v23, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1LL, -1LL);
      swift_slowDealloc(v22, -1LL, -1LL);
    }
  }

  else
  {
    uint64_t v92 = a2;
    uint64_t v85 = v15;
    uint64_t v86 = v14;
    __n128 v87 = v13;
    uint64_t v88 = v9;
    uint64_t v89 = v8;
    uint64_t v24 = (uint64_t)v19;
    unint64_t v25 = v20;
    uint64_t v26 = type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
    uint64_t v27 = sub_1004D2F38(*(_BYTE *)(a3 + *(int *)(v26 + 32)));
    uint64_t v28 = sub_1003F5CB4(&qword_1009B9A10);
    uint64_t inited = swift_initStackObject(v28, &v103);
    *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100718C70;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSFanoutMessageGroupIDKey);
    *(void *)(inited + 40) = v30;
    uint64_t v93 = v4;
    uint64_t v31 = *(void *)&v4[OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_groupID];
    uint64_t v32 = *(void *)&v4[OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_groupID + 8];
    *(void *)(inited + 72) = &type metadata for String;
    *(void *)(inited + 4_Block_object_dispose(va, 8) = v31;
    *(void *)(inited + 56) = v32;
    *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSDSessionMessageSessionID);
    *(void *)(inited + 8_Block_object_dispose(va, 8) = v33;
    uint64_t v34 = *a1;
    uint64_t v35 = a1[1];
    *(void *)(inited + cut_arc_os_release(v1 - 120) = &type metadata for String;
    *(void *)(inited + 96) = v34;
    *(void *)(inited + 104) = v35;
    *(void *)(inited + 12_Block_object_dispose(va, 8) = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSDSessionMessageRealTimeEncryptionPublicKey);
    *(void *)(inited + 136) = v36;
    *(void *)(inited + 16_Block_object_dispose(va, 8) = &type metadata for Data;
    *(void *)(inited + 144) = v24;
    *(void *)(inited + 152) = v25;
    *(void *)(inited + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSDSessionMessageRealTimeEncryptionWrapModeKey);
    *(void *)(inited + 184) = v37;
    *(void *)(inited + 2swift_unknownObjectWeakDestroy(v0 + 16) = &type metadata for Int;
    *(void *)(inited + 192) = v27;
    swift_bridgeObjectRetain(v32);
    swift_bridgeObjectRetain(v35);
    unint64_t v90 = v25;
    uint64_t v91 = v24;
    sub_100439780(v24, v25);
    unint64_t v38 = sub_100427AB8(inited);
    uint64_t v39 = type metadata accessor for IDSGroupEncryptionControllerParticipantKeyRecoveryRequest(0LL);
    if (*((_BYTE *)a1 + *(int *)(v39 + 28)) == 1)
    {
      uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSDSessionMessageRealTimeEncryptionMKMRecoveryRequestKey);
      uint64_t v42 = v41;
      uint64_t v99 = &type metadata for Bool;
      LOBYTE(v97) = 1;
      sub_10040DAE8(&v97, v96);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v38);
      unint64_t v95 = v38;
      sub_10043508C(v96, v40, v42, isUniquelyReferenced_nonNull_native);
      unint64_t v38 = v95;
      swift_bridgeObjectRelease(v42);
      swift_bridgeObjectRelease(0x8000000000000000LL);
    }

    uint64_t v44 = v92;
    if (*((_BYTE *)a1 + *(int *)(v39 + 32)) == 1)
    {
      uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSDSessionMessageRealTimeEncryptionSKMRecoveryRequestKey);
      uint64_t v47 = v46;
      uint64_t v99 = &type metadata for Bool;
      LOBYTE(v97) = 1;
      sub_10040DAE8(&v97, v96);
      char v48 = swift_isUniquelyReferenced_nonNull_native(v38);
      unint64_t v95 = v38;
      sub_10043508C(v96, v45, v47, v48);
      unint64_t v38 = v95;
      swift_bridgeObjectRelease(v47);
      swift_bridgeObjectRelease(0x8000000000000000LL);
    }

    unint64_t v49 = v93;
    NSString v50 = String._bridgeToObjectiveC()();
    id v51 = sub_1003B4704(v50);

    id v52 =  [*(id *)(v44 + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_pushToken) rawToken];
    uint64_t v53 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v52);
    unint64_t v55 = v54;

    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100402A84(v53, v55);
    __n128 v57 = (void *)_IDSCopyIDForTokenWithURI(isa, v51);

    if (v57)
    {
      uint64_t v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(v57);
      uint64_t v60 = v59;

      uint64_t v61 = sub_1003F5CB4((uint64_t *)&unk_1009B9520);
      uint64_t v62 = swift_initStackObject(v61, &v102);
      *(_OWORD *)(v62 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1007184C0;
      *(void *)(v62 + 32) = v58;
      *(void *)(v62 + 40) = v60;
      Swift::Int v63 = sub_100438CB8(v62);
      swift_setDeallocating(v62);
      swift_arrayDestroy(v62 + 32, 1LL, &type metadata for String);
      Class v64 = Set._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v63);
      id v65 = [(id)objc_opt_self(IDSDestination) destinationWithStrings:v64];

      id v68 = (id)im_primary_queue(v66, v67);
      if (v68)
      {
        uint64_t v69 = v68;
        uint64_t v70 = (void *)swift_allocObject(&unk_100905990, 40LL, 7LL);
        v70[2] = v49;
        v70[3] = v38;
        _BYTE v70[4] = v65;
        uint64_t v100 = sub_100439814;
        CFDataRef v101 = v70;
        *(void *)&__int128 v97 = _NSConcreteStackBlock;
        *((void *)&v97 + 1) = 1107296256LL;
        uint64_t v98 = sub_1003F8400;
        uint64_t v99 = &unk_1009059A8;
        uint64_t v71 = _Block_copy(&v97);
        id v72 = v49;
        id v73 = v65;
        uint64_t v74 = v94;
        static DispatchQoS.unspecified.getter(v73);
        *(void *)&v96[0] = &_swiftEmptyArrayStorage;
        uint64_t v75 = sub_10040A2B0( (unint64_t *)&unk_1009BAC40,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        uint64_t v76 = sub_1003F5CB4((uint64_t *)&unk_1009B9870);
        unint64_t v77 = sub_100439794();
        unint64_t v78 = v87;
        uint64_t v79 = v89;
        dispatch thunk of SetAlgebra.init<A>(_:)(v96, v76, v77, v89, v75);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v74, v78, v71);
        _Block_release(v71);

        sub_10040AD00(v91, v90);
        (*(void (**)(char *, uint64_t))(v88 + 8))(v78, v79);
        (*(void (**)(os_log_s *, uint64_t))(v85 + 8))(v74, v86);
        swift_release(v101);
      }

      else
      {
        __break(1u);
      }
    }

    else
    {
      uint64_t v80 = swift_bridgeObjectRelease(v38);
      int64_t v81 = (os_log_s *)Logger.logObject.getter(v80);
      os_log_type_t v82 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v81, v82))
      {
        int64_t v83 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v84 = swift_slowAlloc(32LL, -1LL);
        *(void *)&__int128 v97 = v84;
        *(_DWORD *)int64_t v83 = 136315138;
        *(void *)&v96[0] = sub_1003FFBB0(0xD000000000000031LL, 0x800000010083F4A0LL, (uint64_t *)&v97);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v96, (char *)v96 + 8, v83 + 4, v83 + 12);
        _os_log_impl( (void *)&_mh_execute_header,  v81,  v82,  "%s: cannot send keyRecoveryRequest because we could not get destination ID",  v83,  0xCu);
        swift_arrayDestroy(v84, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v84, -1LL, -1LL);
        swift_slowDealloc(v83, -1LL, -1LL);
      }

      sub_10040AD00(v91, v90);
    }
  }

uint64_t sub_10042BC5C(unsigned int *a1)
{
  return (*(uint64_t (**)(unint64_t))((swift_isaMask & *v1) + 0x168LL))(*a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32));
}

uint64_t sub_10042BC84(uint64_t a1, uint64_t *a2)
{
  if (BYTE4(a1))
  {
    uint64_t v3 = (os_log_s *)Logger.logObject.getter(a1);
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = swift_slowAlloc(22LL, -1LL);
      uint64_t v6 = swift_slowAlloc(64LL, -1LL);
      uint64_t v14 = v6;
      *(_DWORD *)uint64_t v5 = 136315394;
      uint64_t v13 = sub_1003FFBB0(0xD00000000000001BLL, 0x800000010083F4E0LL, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v5 + 4, v5 + 12);
      *(_WORD *)(v5 + 12) = 2080;
      LODWORD(v13) = a1;
      BYTE4(v13) = BYTE4(a1);
      uint64_t v7 = String.init<A>(describing:)(&v13, &type metadata for IDSGroupEncryptionDesiredMaterialKind);
      unint64_t v9 = v8;
      uint64_t v13 = sub_1003FFBB0(v7, v8, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v5 + 14, v5 + 22);
      swift_bridgeObjectRelease(v9);
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "%s: unknown kind %s", (uint8_t *)v5, 0x16u);
      swift_arrayDestroy(v6, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v6, -1LL, -1LL);
      swift_slowDealloc(v5, -1LL, -1LL);
    }

    return 0LL;
  }

  else
  {
    uint64_t v11 = *a2;
    if ((a1 & 1) != 0) {
      uint64_t v12 = *(uint64_t (**)(void))(v11 + 144);
    }
    else {
      uint64_t v12 = *(uint64_t (**)(void))(v11 + 120);
    }
    return v12();
  }

uint64_t sub_10042BE40(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_lock;
  uint64_t v7 = *(os_unfair_lock_s **)((char *)v3
                            + OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_lock);
  swift_retain(v7);
  os_unfair_lock_lock(v7 + 4);
  swift_release(v7);
  uint64_t v8 = *(void *)(a1 + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_allocatedURI + 8);
  id v9 = objc_allocWithZone(&OBJC_CLASS___IDSURI);
  swift_bridgeObjectRetain(v8);
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v8);
  id v11 = [v9 initWithPrefixedURI:v10];

  if (v11)
  {
    uint64_t v12 = sub_10042FB9C( *(void **)(a1 + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_pushToken),  v11,  *(void *)(a1 + OBJC_IVAR____TtC17identityservicesd39IDSGroupEncryptionControllerParticipant_participantID));
    uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))((swift_isaMask & *v3) + 0x168LL))(a2 & 0xFFFFFFFFFFLL, v12);
    if (v13)
    {
      uint64_t v14 = v13;
      (*(void (**)(uint64_t))(*(void *)v13 + 232LL))(v13);

      swift_release(v12);
      uint64_t v15 = v14;
    }

    else
    {

      uint64_t v15 = v12;
    }

    swift_release(v15);
  }

  __n128 v16 = *(os_unfair_lock_s **)((char *)v3 + v6);
  swift_retain(v16);
  os_unfair_lock_unlock(v16 + 4);
  return swift_release(v16);
}

void sub_10042BFAC(void *a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v512 = *(void *)(v2 - 8);
  uint64_t v513 = v2;
  __chkstk_darwin(v3, v4);
  v511 = (char *)&v504 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v509 = *(void *)(v6 - 8);
  uint64_t v510 = v6;
  __chkstk_darwin(v7, v8);
  v508 = (char *)&v504 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  uint64_t v550 = *(void *)(v10 - 8);
  uint64_t v551 = v10;
  __chkstk_darwin(v11, v12);
  v543 = (char *)&v504 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14, v15);
  uint64_t v540 = (uint64_t)&v504 - v16;
  __chkstk_darwin(v17, v18);
  v541 = (char *)&v504 - v19;
  __chkstk_darwin(v20, v21);
  uint64_t v546 = (uint64_t)&v504 - v22;
  __chkstk_darwin(v23, v24);
  v545 = (uint64_t *)((char *)&v504 - v25);
  __chkstk_darwin(v26, v27);
  v537 = (uint64_t *)((char *)&v504 - v28);
  __chkstk_darwin(v29, v30);
  v544 = (char *)&v504 - v31;
  __chkstk_darwin(v32, v33);
  uint64_t v505 = (uint64_t)&v504 - v34;
  __chkstk_darwin(v35, v36);
  uint64_t v507 = (uint64_t)&v504 - v37;
  __chkstk_darwin(v38, v39);
  uint64_t v518 = (uint64_t)&v504 - v40;
  __chkstk_darwin(v41, v42);
  uint64_t v504 = (uint64_t)&v504 - v43;
  __chkstk_darwin(v44, v45);
  uint64_t v506 = (uint64_t)&v504 - v46;
  __chkstk_darwin(v47, v48);
  uint64_t v517 = (uint64_t)&v504 - v49;
  sub_1003F5CB4(&qword_1009B8E08);
  __chkstk_darwin(v50, v51);
  uint64_t v519 = (uint64_t)&v504 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v53, v54);
  uint64_t v516 = (uint64_t)&v504 - v55;
  __chkstk_darwin(v56, v57);
  uint64_t v528 = (uint64_t)&v504 - v58;
  __chkstk_darwin(v59, v60);
  uint64_t v538 = (uint64_t)&v504 - v61;
  __chkstk_darwin(v62, v63);
  uint64_t v515 = (uint64_t)&v504 - v64;
  __chkstk_darwin(v65, v66);
  uint64_t v531 = (uint64_t)&v504 - v67;
  uint64_t v549 = type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet(0LL);
  *(void *)&__int128 v535 = *(void *)(v549 - 8);
  __chkstk_darwin(v68, v69);
  uint64_t v534 = (uint64_t)&v504 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v71, v72);
  v552 = (char *)&v504 - v73;
  __chkstk_darwin(v74, v75);
  v533 = (char *)&v504 - v76;
  __chkstk_darwin(v77, v78);
  uint64_t v524 = (uint64_t)&v504 - v79;
  __chkstk_darwin(v80, v81);
  v530 = (char *)&v504 - v82;
  __chkstk_darwin(v83, v84);
  uint64_t v514 = (uint64_t)&v504 - v85;
  __chkstk_darwin(v86, v87);
  uint64_t v89 = (char *)&v504 - v88;
  uint64_t v90 = sub_1003F5CB4(&qword_1009B99D8);
  __chkstk_darwin(v91, v92);
  uint64_t v539 = (uint64_t)&v504 - ((v93 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v94, v95);
  uint64_t v553 = (uint64_t)&v504 - v96;
  __chkstk_darwin(v97, v98);
  *(void *)&__int128 v532 = (char *)&v504 - v99;
  __chkstk_darwin(v100, v101);
  uint64_t v526 = (uint64_t)&v504 - v102;
  __chkstk_darwin(v103, v104);
  uint64_t v529 = (uint64_t)&v504 - v105;
  __chkstk_darwin(v106, v107);
  uint64_t v525 = (uint64_t)&v504 - v108;
  __chkstk_darwin(v109, v110);
  uint64_t v112 = (char *)&v504 - v111;
  uint64_t v115 = __chkstk_darwin(v113, v114);
  uint64_t v117 = (char *)&v504 - v116;
  v520 = *(uint64_t (**)(uint64_t))(*a1 + 120LL);
  uint64_t v118 = v520(v115);
  id v119 = *(uint64_t (**)(void))(*a1 + 144LL);
  v536 = a1;
  uint64_t v120 = v119();
  uint64_t v522 = swift_allocBox(v90);
  id v121 = *(void (**)(void))(*(void *)v118 + 160LL);
  uint64_t v548 = v122;
  v121();
  uint64_t v521 = swift_allocBox(v90);
  uint64_t v123 = *(uint64_t (**)(void))(*(void *)v120 + 160LL);
  v542 = v124;
  uint64_t v527 = v120;
  uint64_t v125 = v123();
  uint64_t v523 = v118;
  ((void (*)(uint64_t))v121)(v125);
  v554 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v535 + 48);
  if (v554(v117, 1LL, v549))
  {
    uint64_t v126 = (uint64_t)v89;
    uint64_t v127 = sub_10040A274((uint64_t)v117, &qword_1009B99D8);
    uint64_t v128 = &_swiftEmptySetSingleton;
  }

  else
  {
    sub_1003F5FC8((uint64_t)v117, (uint64_t)v89, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
    sub_10040A274((uint64_t)v117, &qword_1009B99D8);
    uint64_t v128 = (void *)*((void *)v89 + 1);
    swift_bridgeObjectRetain(v128);
    uint64_t v126 = (uint64_t)v89;
    uint64_t v127 = sub_1003F6050((uint64_t)v89, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
  }

  v568 = v128;
  uint64_t v129 = v527;
  ((void (*)(uint64_t))v123)(v127);
  uint64_t v130 = v549;
  unsigned int v131 = v554(v112, 1LL, v549);
  uint64_t v132 = v536;
  uint64_t v133 = (uint64_t)v541;
  uint64_t v134 = v548;
  if (v131)
  {
    sub_10040A274((uint64_t)v112, &qword_1009B99D8);
    unint64_t v135 = &_swiftEmptySetSingleton;
  }

  else
  {
    sub_1003F5FC8((uint64_t)v112, v126, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
    sub_10040A274((uint64_t)v112, &qword_1009B99D8);
    unint64_t v135 = *(void **)(v126 + 8);
    swift_bridgeObjectRetain(v135);
    uint64_t v132 = v536;
    sub_1003F6050(v126, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
  }

  v567 = v135;
  uint64_t v136 = v525;
  sub_100410FD0(v134, v525, &qword_1009B99D8);
  uint64_t v137 = v129;
  if (v554((char *)v136, 1LL, v130) == 1)
  {
    swift_bridgeObjectRelease(v568);
    sub_10040A274(v136, &qword_1009B99D8);
LABEL_11:
    uint64_t v140 = v535;
    uint64_t v141 = (uint64_t)v530;
    sub_10040A274(v134, &qword_1009B99D8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v140 + 56))(v134, 1LL, 1LL, v130);
    v568 = &_swiftEmptySetSingleton;
    goto LABEL_13;
  }

  uint64_t v138 = v514;
  sub_1003F600C(v136, v514, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
  uint64_t v139 = v523;
  if (((*(uint64_t (**)(uint64_t))(*(void *)v523 + 208LL))(v138) & 1) != 0)
  {
    sub_1003F6050(v138, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
    swift_bridgeObjectRelease(v568);
    goto LABEL_11;
  }

  (*(void (**)(uint64_t))(*(void *)v139 + 216LL))(v138);
  sub_1003F6050(v138, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
  uint64_t v140 = v535;
  uint64_t v141 = (uint64_t)v530;
LABEL_13:
  uint64_t v142 = v529;
  sub_100410FD0((uint64_t)v542, v529, &qword_1009B99D8);
  if (v554((char *)v142, 1LL, v130) == 1)
  {
    swift_bridgeObjectRelease(v567);
    sub_10040A274(v142, &qword_1009B99D8);
LABEL_17:
    id v143 = v542;
    sub_10040A274((uint64_t)v542, &qword_1009B99D8);
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(v140 + 56))(v143, 1LL, 1LL, v130);
    v567 = &_swiftEmptySetSingleton;
    goto LABEL_19;
  }

  sub_1003F600C(v142, v141, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v137 + 208LL))(v141) & 1) != 0)
  {
    sub_1003F6050(v141, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
    swift_bridgeObjectRelease(v567);
    goto LABEL_17;
  }

  (*(void (**)(uint64_t))(*(void *)v137 + 216LL))(v141);
  sub_1003F6050(v141, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
LABEL_19:
  uint64_t v144 = swift_allocObject(&unk_1009059E0, 24LL, 7LL);
  uint64_t v145 = sub_1003F5CB4(&qword_1009B9A10);
  uint64_t inited = swift_initStackObject(v145, v566);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100718C80;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSFanoutMessageGroupIDKey);
  *(void *)(inited + 40) = v147;
  unint64_t v148 = v547;
  uint64_t v149 = *(void *)((char *)v547 + OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_groupID);
  uint64_t v150 = *(void *)((char *)v547
                   + OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_groupID
                   + 8);
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 4_Block_object_dispose(va, 8) = v149;
  *(void *)(inited + 56) = v150;
  *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSDSessionMessageSessionID);
  *(void *)(inited + 8_Block_object_dispose(va, 8) = v151;
  uint64_t v152 = *(void *)((char *)v148 + OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_sessionID);
  uint64_t v153 = *(void *)((char *)v148
                   + OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_sessionID
                   + 8);
  *(void *)(inited + cut_arc_os_release(v1 - 120) = &type metadata for String;
  *(void *)(inited + 96) = v152;
  *(void *)(inited + 104) = v153;
  swift_bridgeObjectRetain(v150);
  swift_bridgeObjectRetain(v153);
  unint64_t v154 = sub_100427AB8(inited);
  v530 = (char *)v144;
  *(void *)(v144 + swift_unknownObjectWeakDestroy(v0 + 16) = v154;
  uint64_t v529 = v144 + 16;
  uint64_t v155 = v531;
  sub_10042EE54((uint64_t)v568, v531);
  uint64_t v156 = v548;
  uint64_t v157 = v526;
  sub_100410FD0(v548, v526, &qword_1009B99D8);
  unsigned int v158 = v554((char *)v157, 1LL, v130);
  uint64_t v159 = v532;
  if (v158 == 1)
  {
    sub_10040A274(v157, &qword_1009B99D8);
    LODWORD(v526) = 0;
  }

  else
  {
    uint64_t v160 = v524;
    sub_1003F600C(v157, v524, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
    uint64_t v161 = v155;
    uint64_t v162 = v515;
    sub_100410FD0(v161, v515, &qword_1009B8E08);
    int v163 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v550 + 48))(v162, 1LL, v551);
    uint64_t v164 = (uint64_t)v552;
    uint64_t v165 = (uint64_t)v533;
    if (v163 == 1)
    {
      sub_1003F6050(v160, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
      sub_10040A274(v162, &qword_1009B8E08);
      LODWORD(v526) = 0;
      uint64_t v166 = v528;
      uint64_t v167 = (uint64_t)v544;
      goto LABEL_33;
    }

    uint64_t v168 = v517;
    sub_1003F600C(v162, v517, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    uint64_t v169 = (uint64_t)v547 + OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_l;
    uint64_t v170 = v168;
    uint64_t v171 = v506;
    sub_1003F5FC8(v170, v506, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    uint64_t v172 = swift_retain_n(v132, 2LL);
    uint64_t v526 = v169;
    uint64_t v173 = (os_log_s *)Logger.logObject.getter(v172);
    os_log_type_t v174 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v173, v174))
    {
      uint64_t v175 = swift_slowAlloc(32LL, -1LL);
      *(void *)&__int128 v535 = swift_slowAlloc(96LL, -1LL);
      v558[0] = v535;
      *(_DWORD *)uint64_t v175 = 136315650;
      uint64_t v564 = sub_1003FFBB0(0xD00000000000002ELL, 0x800000010083F500LL, v558);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v564, v565, v175 + 4, v175 + 12);
      *(_WORD *)(v175 + 12) = 2080;
      uint64_t v176 = *(uint64_t (**)(uint64_t))(*v536 + 176LL);
      uint64_t v177 = swift_retain(v536);
      uint64_t v178 = v176(v177);
      unint64_t v180 = v179;
      swift_release(v536);
      uint64_t v564 = sub_1003FFBB0(v178, v180, v558);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v564, v565, v175 + 14, v175 + 22);
      swift_release_n(v536, 2LL);
      swift_bridgeObjectRelease(v180);
      *(_WORD *)(v175 + 22) = 2080;
      uint64_t v182 = type metadata accessor for UUID(0LL, v181);
      uint64_t v183 = sub_10040A2B0( &qword_1009B95C0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v184 = v182;
      uint64_t v133 = (uint64_t)v541;
      uint64_t v185 = dispatch thunk of CustomStringConvertible.description.getter(v184, v183);
      unint64_t v187 = v186;
      uint64_t v564 = sub_1003FFBB0(v185, v186, v558);
      uint64_t v132 = v536;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v564, v565, v175 + 24, v175 + 32);
      swift_bridgeObjectRelease(v187);
      sub_1003F6050(v171, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      _os_log_impl( (void *)&_mh_execute_header,  v173,  v174,  "%s: participant: %s should include MKI %s",  (uint8_t *)v175,  0x20u);
      uint64_t v188 = v535;
      swift_arrayDestroy(v535, 3LL, (char *)&type metadata for Any + 8);
      uint64_t v165 = (uint64_t)v533;
      swift_slowDealloc(v188, -1LL, -1LL);
      uint64_t v189 = v175;
      uint64_t v130 = v549;
      swift_slowDealloc(v189, -1LL, -1LL);
    }

    else
    {
      swift_release_n(v132, 2LL);

      sub_1003F6050(v171, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    }

    uint64_t v190 = v538;
    uint64_t v191 = v517;
    sub_10043592C(v517, v538);
    uint64_t v192 = v190;
    uint64_t v193 = v191;
    sub_10040A274(v192, &qword_1009B8E08);
    uint64_t v194 = v524;
    unint64_t v195 = sub_10042F48C(v193, v524 + *(int *)(v130 + 24));
    uint64_t v159 = v532;
    if (!v195)
    {
      sub_1003F6050(v193, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      sub_1003F6050(v194, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
      LODWORD(v526) = 0;
      uint64_t v166 = v528;
      uint64_t v167 = (uint64_t)v544;
      uint64_t v164 = (uint64_t)v552;
      goto LABEL_33;
    }

    unint64_t v196 = v195;
    uint64_t v197 = v504;
    sub_1003F5FC8(v193, v504, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    swift_retain_n(v132, 2LL);
    *(void *)&__int128 v535 = v196;
    uint64_t v198 = swift_bridgeObjectRetain_n(v196, 2LL);
    uint64_t v199 = (os_log_s *)Logger.logObject.getter(v198);
    os_log_type_t v200 = static os_log_type_t.default.getter();
    int v201 = v200;
    if (os_log_type_enabled(v199, v200))
    {
      uint64_t v202 = swift_slowAlloc(42LL, -1LL);
      uint64_t v526 = swift_slowAlloc(128LL, -1LL);
      v558[0] = v526;
      *(_DWORD *)uint64_t v202 = 136315906;
      LODWORD(v525) = v201;
      uint64_t v564 = sub_1003FFBB0(0xD00000000000002ELL, 0x800000010083F500LL, v558);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v564, v565, v202 + 4, v202 + 12);
      *(_WORD *)(v202 + 12) = 2080;
      uint64_t v203 = *(uint64_t (**)(uint64_t))(*v536 + 176LL);
      uint64_t v204 = swift_retain(v536);
      uint64_t v205 = v203(v204);
      unint64_t v207 = v206;
      swift_release(v536);
      uint64_t v564 = sub_1003FFBB0(v205, v207, v558);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v564, v565, v202 + 14, v202 + 22);
      swift_release_n(v536, 2LL);
      swift_bridgeObjectRelease(v207);
      *(_WORD *)(v202 + 22) = 2080;
      uint64_t v209 = type metadata accessor for UUID(0LL, v208);
      uint64_t v210 = sub_10040A2B0( &qword_1009B95C0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v211 = dispatch thunk of CustomStringConvertible.description.getter(v209, v210);
      unint64_t v213 = v212;
      uint64_t v564 = sub_1003FFBB0(v211, v212, v558);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v564, v565, v202 + 24, v202 + 32);
      swift_bridgeObjectRelease(v213);
      sub_1003F6050(v197, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      *(_WORD *)(v202 + 32) = 2080;
      uint64_t v214 = v535;
      __n128 v215 = swift_bridgeObjectRetain(v535);
      uint64_t v216 = Dictionary.description.getter(v215);
      unint64_t v218 = v217;
      swift_bridgeObjectRelease(v214);
      uint64_t v219 = v216;
      uint64_t v133 = (uint64_t)v541;
      uint64_t v564 = sub_1003FFBB0(v219, v218, v558);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v564, v565, v202 + 34, v202 + 42);
      swift_bridgeObjectRelease_n(v214, 2LL);
      unint64_t v220 = v218;
      uint64_t v159 = v532;
      swift_bridgeObjectRelease(v220);
      _os_log_impl( (void *)&_mh_execute_header,  v199,  (os_log_type_t)v525,  "%s: participant: %s, MKI: %s dict: %s",  (uint8_t *)v202,  0x2Au);
      uint64_t v221 = v526;
      uint64_t v132 = v536;
      swift_arrayDestroy(v526, 4LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v221, -1LL, -1LL);
      uint64_t v222 = v202;
      uint64_t v130 = v549;
      swift_slowDealloc(v222, -1LL, -1LL);
    }

    else
    {
      swift_release_n(v132, 2LL);

      sub_1003F6050(v197, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      swift_bridgeObjectRelease_n(v535, 2LL);
    }

    uint64_t v223 = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSDSessionMessageRealTimeEncryptionKeyMaterialKey);
    uint64_t v225 = v224;
    v559 = (void *)sub_1003F5CB4(&qword_1009B9A28);
    v558[0] = v535;
    sub_100428F40((uint64_t)v558, v223, v225);
    sub_1003F6050(v517, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    sub_1003F6050(v524, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
    LODWORD(v526) = 1;
  }

  uint64_t v166 = v528;
  uint64_t v167 = (uint64_t)v544;
  uint64_t v164 = (uint64_t)v552;
  uint64_t v165 = (uint64_t)v533;
LABEL_33:
  sub_10042EE54((uint64_t)v567, v166);
  sub_100410FD0((uint64_t)v542, v159, &qword_1009B99D8);
  if (v554((char *)v159, 1LL, v130) == 1)
  {
    uint64_t v226 = sub_10040A274(v159, &qword_1009B99D8);
  }

  else
  {
    sub_1003F600C(v159, v165, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
    uint64_t v228 = v166;
    uint64_t v229 = v516;
    sub_100410FD0(v228, v516, &qword_1009B8E08);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v550 + 48))(v229, 1LL, v551) == 1)
    {
      sub_1003F6050(v165, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
      uint64_t v226 = sub_10040A274(v229, &qword_1009B8E08);
    }

    else
    {
      uint64_t v230 = v518;
      sub_1003F600C(v229, v518, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      id v231 = (void *)((char *)v547 + OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_l);
      uint64_t v232 = v230;
      uint64_t v233 = v507;
      sub_1003F5FC8(v232, v507, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      uint64_t v234 = swift_retain_n(v132, 2LL);
      v542 = v231;
      double v235 = (os_log_s *)Logger.logObject.getter(v234);
      os_log_type_t v236 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v235, v236))
      {
        uint64_t v237 = swift_slowAlloc(32LL, -1LL);
        *(void *)&__int128 v535 = swift_slowAlloc(96LL, -1LL);
        v558[0] = v535;
        *(_DWORD *)uint64_t v237 = 136315650;
        uint64_t v564 = sub_1003FFBB0(0xD00000000000002ELL, 0x800000010083F500LL, v558);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v564, v565, v237 + 4, v237 + 12);
        *(_WORD *)(v237 + 12) = 2080;
        __int16 v238 = *(uint64_t (**)(uint64_t))(*v536 + 176LL);
        uint64_t v239 = swift_retain(v536);
        uint64_t v240 = v238(v239);
        unint64_t v242 = v241;
        swift_release(v536);
        uint64_t v564 = sub_1003FFBB0(v240, v242, v558);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v564, v565, v237 + 14, v237 + 22);
        swift_release_n(v536, 2LL);
        swift_bridgeObjectRelease(v242);
        *(_WORD *)(v237 + 22) = 2080;
        uint64_t v244 = type metadata accessor for UUID(0LL, v243);
        uint64_t v245 = sub_10040A2B0( &qword_1009B95C0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v246 = v244;
        uint64_t v133 = (uint64_t)v541;
        uint64_t v247 = dispatch thunk of CustomStringConvertible.description.getter(v246, v245);
        unint64_t v249 = v248;
        uint64_t v564 = sub_1003FFBB0(v247, v248, v558);
        uint64_t v132 = v536;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v564, v565, v237 + 24, v237 + 32);
        swift_bridgeObjectRelease(v249);
        sub_1003F6050(v233, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        _os_log_impl( (void *)&_mh_execute_header,  v235,  v236,  "%s: participant: %s should include SKI %s",  (uint8_t *)v237,  0x20u);
        uint64_t v250 = v535;
        swift_arrayDestroy(v535, 3LL, (char *)&type metadata for Any + 8);
        uint64_t v165 = (uint64_t)v533;
        swift_slowDealloc(v250, -1LL, -1LL);
        uint64_t v251 = v237;
        uint64_t v130 = v549;
        swift_slowDealloc(v251, -1LL, -1LL);
      }

      else
      {
        swift_release_n(v132, 2LL);

        sub_1003F6050(v233, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      }

      uint64_t v252 = v538;
      uint64_t v253 = v518;
      sub_10043592C(v518, v538);
      uint64_t v254 = v252;
      uint64_t v255 = v253;
      sub_10040A274(v254, &qword_1009B8E08);
      unint64_t v256 = sub_10042F7DC(v253, v165 + *(int *)(v130 + 24));
      if (v256)
      {
        uint64_t v257 = v256;
        uint64_t v258 = v505;
        sub_1003F5FC8(v255, v505, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        swift_retain_n(v132, 2LL);
        uint64_t v259 = swift_bridgeObjectRetain_n(v257, 2LL);
        v260 = (os_log_s *)Logger.logObject.getter(v259);
        os_log_type_t v261 = static os_log_type_t.default.getter();
        int v262 = v261;
        if (os_log_type_enabled(v260, v261))
        {
          uint64_t v263 = swift_slowAlloc(42LL, -1LL);
          v542 = (void *)swift_slowAlloc(128LL, -1LL);
          v558[0] = (uint64_t)v542;
          *(_DWORD *)uint64_t v263 = 136315906;
          LODWORD(v535) = v262;
          uint64_t v564 = sub_1003FFBB0(0xD00000000000002ELL, 0x800000010083F500LL, v558);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v564, v565, v263 + 4, v263 + 12);
          *(_WORD *)(v263 + 12) = 2080;
          uint64_t v264 = *(uint64_t (**)(uint64_t))(*v536 + 176LL);
          uint64_t v265 = swift_retain(v536);
          uint64_t v266 = v264(v265);
          unint64_t v268 = v267;
          swift_release(v536);
          uint64_t v564 = sub_1003FFBB0(v266, v268, v558);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v564, v565, v263 + 14, v263 + 22);
          swift_release_n(v536, 2LL);
          swift_bridgeObjectRelease(v268);
          *(_WORD *)(v263 + 22) = 2080;
          uint64_t v270 = type metadata accessor for UUID(0LL, v269);
          uint64_t v271 = sub_10040A2B0( &qword_1009B95C0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          uint64_t v272 = dispatch thunk of CustomStringConvertible.description.getter(v270, v271);
          unint64_t v274 = v273;
          uint64_t v564 = sub_1003FFBB0(v272, v273, v558);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v564, v565, v263 + 24, v263 + 32);
          swift_bridgeObjectRelease(v274);
          sub_1003F6050(v258, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
          *(_WORD *)(v263 + 32) = 2080;
          __n128 v275 = swift_bridgeObjectRetain(v257);
          uint64_t v276 = Dictionary.description.getter(v275);
          unint64_t v278 = v277;
          swift_bridgeObjectRelease(v257);
          uint64_t v279 = v276;
          uint64_t v133 = (uint64_t)v541;
          uint64_t v564 = sub_1003FFBB0(v279, v278, v558);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v564, v565, v263 + 34, v263 + 42);
          swift_bridgeObjectRelease_n(v257, 2LL);
          swift_bridgeObjectRelease(v278);
          _os_log_impl( (void *)&_mh_execute_header,  v260,  (os_log_type_t)v535,  "%s: participant: %s, SKI: %s dict: %s",  (uint8_t *)v263,  0x2Au);
          uint64_t v280 = v542;
          uint64_t v132 = v536;
          swift_arrayDestroy(v542, 4LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v280, -1LL, -1LL);
          uint64_t v281 = v263;
          uint64_t v130 = v549;
          swift_slowDealloc(v281, -1LL, -1LL);
        }

        else
        {
          swift_release_n(v132, 2LL);

          sub_1003F6050(v258, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
          swift_bridgeObjectRelease_n(v257, 2LL);
        }

        uint64_t v282 = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSDSessionMessageRealTimeEncryptionStableKeyMaterialKey);
        uint64_t v284 = v283;
        v559 = (void *)sub_1003F5CB4(&qword_1009B9A28);
        v558[0] = v257;
        sub_100428F40((uint64_t)v558, v282, v284);
        sub_1003F6050(v518, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        uint64_t v226 = sub_1003F6050((uint64_t)v533, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
        LODWORD(v526) = 1;
      }

      else
      {
        sub_1003F6050(v253, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        uint64_t v226 = sub_1003F6050(v165, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
      }

      uint64_t v167 = (uint64_t)v544;
      uint64_t v164 = (uint64_t)v552;
    }
  }

  v285 = v568;
  if (v568[2])
  {
    *(void *)&__int128 v535 = (char *)v547 + OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_l;
    v533 = v565;
    v542 = &_swiftEmptyArrayStorage;
    *(void *)&__int128 v227 = 136315650LL;
    __int128 v532 = v227;
    uint64_t v525 = 0x800000010083F500LL;
    uint64_t v524 = (uint64_t)&type metadata for Any + 8;
    uint64_t v286 = v553;
    while (1)
    {
      sub_100410FD0(v156, v286, &qword_1009B99D8);
      uint64_t v226 = sub_10040A274(v286, &qword_1009B99D8);
LABEL_50:
      v285 = v568;
      uint64_t v286 = v553;
      if (!v568[2]) {
        goto LABEL_85;
      }
    }

    sub_1003F600C(v286, v164, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
    unint64_t v287 = v285[7];
    char v288 = *((_BYTE *)v285 + 32);
    uint64_t v289 = 1LL << v288;
    if (v287)
    {
      uint64_t v290 = 0LL;
      goto LABEL_54;
    }

    unsigned int v314 = v288 & 0x3F;
    if (v314 >= 7)
    {
      unint64_t v287 = v285[8];
      if (v287)
      {
        uint64_t v290 = 1LL;
        goto LABEL_54;
      }

      if (v314 >= 8)
      {
        unint64_t v287 = v285[9];
        if (v287)
        {
          uint64_t v290 = 2LL;
        }

        else
        {
          unint64_t v287 = v285[10];
          if (v287)
          {
            uint64_t v290 = 3LL;
          }

          else
          {
            uint64_t v321 = 0LL;
            unint64_t v322 = (unint64_t)(v289 + 63) >> 6;
            if (v322 <= 4) {
              unint64_t v322 = 4LL;
            }
            unint64_t v323 = v322 - 4;
            do
            {
              if (v323 == v321) {
                goto LABEL_71;
              }
              unint64_t v287 = v285[v321++ + 11];
            }

            while (!v287);
            uint64_t v290 = v321 + 3;
          }
        }

LABEL_180:
                  __break(1u);
LABEL_181:
                  __break(1u);
LABEL_182:
                  __break(1u);
LABEL_183:
                  __break(1u);
                  goto LABEL_184;
                }

                uint64_t v348 = v339 + 4;
              }
            }
          }

LABEL_132:
  v403 = v542;
  if (v542[2])
  {
    uint64_t v404 = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSDSessionMessageRealTimeEncryptionKeyAllValidKeyMaterialsKey);
    uint64_t v406 = v405;
    v559 = (void *)sub_1003F5CB4(&qword_1009B9A20);
    v558[0] = (uint64_t)v403;
    swift_bridgeObjectRetain(v403);
    sub_100428F40((uint64_t)v558, v404, v406);
    LODWORD(v526) = 1;
  }

  uint64_t v407 = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSDSessionMessageRealTimeEncryptionKeyAllValidKeyMaterialsURIsKey);
  uint64_t v550 = v408;
  uint64_t v551 = v407;
  v409 = (void *)((char *)v547
                  + OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_membersByURI);
  swift_beginAccess( (char *)v547 + OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_membersByURI,  &v564,  0LL,  0LL);
  uint64_t v410 = *v409;
  v554 = (unsigned int (*)(char *, uint64_t, uint64_t))(*v409 & 0xC000000000000001LL);
  if (v554)
  {
    if (v410 < 0) {
      uint64_t v411 = v410;
    }
    else {
      uint64_t v411 = v410 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v410);
    uint64_t v412 = __CocoaDictionary.count.getter(v411);
  }

  else
  {
    uint64_t v412 = *(void *)(v410 + 16);
    swift_bridgeObjectRetain(v410);
  }

  if (v412)
  {
    v563 = &_swiftEmptyArrayStorage;
    sub_100411D38(0LL, v412 & ~(v412 >> 63), 0);
    if (v554)
    {
      if (v410 < 0) {
        uint64_t v413 = v410;
      }
      else {
        uint64_t v413 = v410 & 0xFFFFFFFFFFFFFF8LL;
      }
      uint64_t v414 = __CocoaDictionary.startIndex.getter(v413);
      char v416 = 1;
    }

    else
    {
      uint64_t v414 = sub_100437DD8(v410);
      char v416 = v418 & 1;
    }

    uint64_t v555 = v414;
    uint64_t v556 = v415;
    char v557 = v416;
    if (v412 < 0) {
      goto LABEL_181;
    }
    uint64_t v419 = v410 & 0xFFFFFFFFFFFFFF8LL;
    if (v410 < 0) {
      uint64_t v419 = v410;
    }
    v552 = (char *)v419;
    uint64_t v553 = v410;
    do
    {
      while (1)
      {
        uint64_t v427 = v555;
        uint64_t v426 = v556;
        char v428 = v557;
        sub_100437C1C(v555, v556, v557, v410);
        v430 = v429;
        id v431 = [v429 prefixedURI];
        uint64_t v432 = static String._unconditionallyBridgeFromObjectiveC(_:)(v431);
        uint64_t v434 = v433;

        v435 = v563;
        if ((swift_isUniquelyReferenced_nonNull_native(v563) & 1) == 0)
        {
          sub_100411D38(0LL, v435[2] + 1LL, 1);
          v435 = v563;
        }

        unint64_t v437 = v435[2];
        unint64_t v436 = v435[3];
        if (v437 >= v436 >> 1)
        {
          sub_100411D38((char *)(v436 > 1), v437 + 1, 1);
          v435 = v563;
        }

        v435[2] = v437 + 1;
        v438 = &v435[2 * v437];
        v438[4] = v432;
        v438[5] = v434;
        if (v554) {
          break;
        }
        uint64_t v410 = v553;
        sub_100437A80(v427, v426, v428, v553);
        uint64_t v421 = v420;
        uint64_t v423 = v422;
        char v425 = v424;
        sub_1004398F4(v427, v426, v428);
        uint64_t v555 = v421;
        uint64_t v556 = v423;
        char v557 = v425 & 1;
        if (!--v412) {
          goto LABEL_163;
        }
      }

      uint64_t v410 = v553;
      if ((v428 & 1) == 0) {
        goto LABEL_182;
      }
      uint64_t v439 = __CocoaDictionary.Index.handleBitPattern.getter(v427, v426);
      if (v439) {
        uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v439);
      }
      else {
        uint64_t isUniquelyReferenced_nonNull_native = 1LL;
      }
      uint64_t v441 = sub_1003F5CB4(&qword_1009B9A18);
      v442 = (void (*)(uint64_t *, void))Dictionary.Index._asCocoa.modify(v558, v441);
      __CocoaDictionary.formIndex(after:isUnique:)(v443, isUniquelyReferenced_nonNull_native, v552);
      v442(v558, 0LL);
      --v412;
    }

    while (v412);
LABEL_163:
    sub_1004398F4(v555, v556, v557);
    swift_bridgeObjectRelease(v410);
    v417 = v563;
  }

  else
  {
    swift_bridgeObjectRelease(v410);
    v417 = &_swiftEmptyArrayStorage;
  }

  v559 = (void *)sub_1003F5CB4(&qword_1009BAC90);
  v558[0] = (uint64_t)v417;
  uint64_t v444 = v529;
  sub_100428F40((uint64_t)v558, v551, v550);
  v445 = (unsigned int (*)(char *, uint64_t, uint64_t))((char *)v547
                                                               + OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_l);
  v446 = v530;
  uint64_t v447 = swift_retain_n(v530, 2LL);
  v554 = v445;
  v448 = (os_log_s *)Logger.logObject.getter(v447);
  os_log_type_t v449 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v448, v449))
  {
    uint64_t v450 = swift_slowAlloc(22LL, -1LL);
    v451 = v446;
    uint64_t v452 = swift_slowAlloc(64LL, -1LL);
    v558[0] = v452;
    *(_DWORD *)uint64_t v450 = 136315394;
    uint64_t v555 = sub_1003FFBB0(0xD00000000000002ELL, 0x800000010083F500LL, v558);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v555, &v556, v450 + 4, v450 + 12);
    *(_WORD *)(v450 + 12) = 2080;
    uint64_t v553 = v450 + 14;
    swift_beginAccess(v444, &v555, 0LL, 0LL);
    uint64_t v453 = *((void *)v451 + 2);
    __n128 v454 = swift_bridgeObjectRetain(v453);
    uint64_t v455 = Dictionary.description.getter(v454);
    unint64_t v457 = v456;
    swift_bridgeObjectRelease(v453);
    v563 = (void *)sub_1003FFBB0(v455, v457, v558);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v563, &v564, v553, v450 + 22);
    swift_release_n(v451, 2LL);
    swift_bridgeObjectRelease(v457);
    _os_log_impl((void *)&_mh_execute_header, v448, v449, "%s: message: %s", (uint8_t *)v450, 0x16u);
    swift_arrayDestroy(v452, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v452, -1LL, -1LL);
    swift_slowDealloc(v450, -1LL, -1LL);
  }

  else
  {
    swift_release_n(v446, 2LL);
  }

  v458 = v536;
  if (!(_DWORD)v526)
  {
    swift_bridgeObjectRelease(v542);
    swift_bridgeObjectRelease(v567);
    uint64_t v499 = swift_bridgeObjectRelease(v568);
    v500 = (os_log_s *)Logger.logObject.getter(v499);
    os_log_type_t v501 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v500, v501))
    {
      v502 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v503 = swift_slowAlloc(32LL, -1LL);
      v558[0] = v503;
      *(_DWORD *)v502 = 136315138;
      v563 = (void *)sub_1003FFBB0(0xD00000000000002ELL, 0x800000010083F500LL, v558);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v563, &v564, v502 + 4, v502 + 12);
      _os_log_impl( (void *)&_mh_execute_header,  v500,  v501,  "%s: do not need to send as there is no data to send",  v502,  0xCu);
      swift_arrayDestroy(v503, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v503, -1LL, -1LL);
      swift_slowDealloc(v502, -1LL, -1LL);
    }

    swift_release(v523);
    swift_release(v527);

    sub_10040A274(v528, &qword_1009B8E08);
    sub_10040A274(v531, &qword_1009B8E08);
    swift_release(v522);
    swift_release(v521);
    v498 = v530;
    goto LABEL_176;
  }

  uint64_t v459 = sub_1003F5CB4((uint64_t *)&unk_1009B9520);
  uint64_t v460 = swift_initStackObject(v459, &v562);
  *(_OWORD *)(v460 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1007184C0;
  id v461 = [(id)v458[2] rawToken];
  uint64_t v462 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v461);
  unint64_t v464 = v463;

  v465.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100402A84(v462, v464);
  NSString v466 = [(id)v458[3] prefixedURI];
  if (!v466)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
    uint64_t v468 = v467;
    NSString v466 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v468);
  }

  v469 = (void *)_IDSCopyIDForTokenWithURI(v465.super.isa, v466);

  if (!v469) {
    goto LABEL_183;
  }
  uint64_t v470 = static String._unconditionallyBridgeFromObjectiveC(_:)(v469);
  uint64_t v472 = v471;

  *(void *)(v460 + 32) = v470;
  *(void *)(v460 + 40) = v472;
  Swift::Int v473 = sub_100438CB8(v460);
  swift_setDeallocating(v460);
  swift_arrayDestroy(v460 + 32, 1LL, &type metadata for String);
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v473);
  id v475 = [(id)objc_opt_self(IDSDestination) destinationWithStrings:isa];

  v554 = (unsigned int (*)(char *, uint64_t, uint64_t))(id)im_primary_queue(v476, v477);
  if (v554)
  {
    swift_bridgeObjectRelease(v542);
    swift_bridgeObjectRelease(v567);
    swift_bridgeObjectRelease(v568);
    v478 = (char *)swift_allocObject(&unk_100905A08, 80LL, 7LL);
    v479 = v547;
    v480 = v530;
    *((void *)v478 + 2) = v547;
    *((void *)v478 + 3) = v480;
    uint64_t v481 = v522;
    uint64_t v482 = v523;
    *((void *)v478 + 4) = v475;
    *((void *)v478 + 5) = v481;
    v483 = v536;
    *((void *)v478 + 6) = v482;
    *((void *)v478 + 7) = v483;
    uint64_t v484 = v521;
    uint64_t v485 = v527;
    *((void *)v478 + _Block_object_dispose(va, 8) = v521;
    *((void *)v478 + 9) = v485;
    v560 = sub_10043995C;
    v561 = v478;
    v558[0] = (uint64_t)_NSConcreteStackBlock;
    v558[1] = 1107296256LL;
    v558[2] = (uint64_t)sub_1003F8400;
    v559 = &unk_100905A20;
    v486 = _Block_copy(v558);
    swift_retain(v483);
    swift_retain(v480);
    id v487 = v479;
    id v488 = v475;
    swift_retain(v481);
    swift_retain(v482);
    swift_retain(v484);
    uint64_t v489 = swift_retain(v485);
    v490 = v508;
    static DispatchQoS.unspecified.getter(v489);
    v563 = &_swiftEmptyArrayStorage;
    uint64_t v491 = sub_10040A2B0( (unint64_t *)&unk_1009BAC40,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v492 = sub_1003F5CB4((uint64_t *)&unk_1009B9870);
    unint64_t v493 = sub_100439794();
    v494 = v511;
    uint64_t v495 = v513;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v563, v492, v493, v513, v491);
    v496 = v554;
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v490, v494, v486);
    _Block_release(v486);

    swift_release(v482);
    swift_release(v485);

    (*(void (**)(char *, uint64_t))(v512 + 8))(v494, v495);
    (*(void (**)(char *, uint64_t))(v509 + 8))(v490, v510);
    sub_10040A274(v528, &qword_1009B8E08);
    sub_10040A274(v531, &qword_1009B8E08);
    v497 = v561;
    swift_release(v522);
    swift_release(v521);
    swift_release(v530);
    v498 = v497;
LABEL_176:
    swift_release(v498);
    return;
  }

uint64_t sub_10042EE54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100437E88(a1);
  if ((v6 & 1) != 0) {
    goto LABEL_8;
  }
  if (*(_DWORD *)(a1 + 36) != v5)
  {
    __break(1u);
LABEL_8:
    __break(1u);
    return result;
  }

  if (result == 1LL << *(_BYTE *)(a1 + 32))
  {
    uint64_t v7 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
    __n128 v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL);
    uint64_t v9 = a2;
    uint64_t v10 = 1LL;
  }

  else
  {
    sub_100438254(result, v5, a1, a2);
    uint64_t v7 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
    __n128 v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL);
    uint64_t v9 = a2;
    uint64_t v10 = 0LL;
  }

  return v8(v9, v10, 1LL, v7);
}

void sub_10042EEF4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v60 = a4;
  uint64_t v61 = a7;
  uint64_t v58 = a6;
  sub_1003F5CB4(&qword_1009B99D8);
  __chkstk_darwin(v11, v12);
  __n128 v14 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15, v16);
  __n128 v18 = (char *)&v57 - v17;
  uint64_t v19 = type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v21, v22);
  uint64_t v59 = (uint64_t)&v57 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v24, v25);
  __n128 v27 = (char *)&v57 - v26;
  uint64_t v28 = swift_projectBox(a1);
  uint64_t v29 = swift_projectBox(a5);
  swift_beginAccess(v28, v67, 0LL, 0LL);
  sub_100410FD0(v28, (uint64_t)v18, &qword_1009B99D8);
  __n128 v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
  if (v30(v18, 1LL, v19) == 1)
  {
    sub_10040A274((uint64_t)v18, &qword_1009B99D8);
  }

  else
  {
    sub_1003F600C((uint64_t)v18, (uint64_t)v27, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
    uint64_t v31 = *(os_unfair_lock_s **)((char *)a2
                               + OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_lock);
    swift_retain(v31);
    os_unfair_lock_lock(v31 + 4);
    (*(void (**)(char *))(*(void *)a3 + 224LL))(v27);
    os_unfair_lock_unlock(v31 + 4);
    uint64_t v32 = swift_release(v31);
    uint64_t v33 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *a2) + 0xA8LL))(v32);
    if (v33)
    {
      __n128 v35 = (void *)v33;
      uint64_t v36 = v34;
      uint64_t ObjectType = swift_getObjectType(v33);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 8))(v27, *(void *)(v60 + 32), ObjectType, v36);
    }

    sub_1003F6050((uint64_t)v27, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
  }

  uint64_t v38 = v61;
  swift_beginAccess(v29, v66, 0LL, 0LL);
  sub_100410FD0(v29, (uint64_t)v14, &qword_1009B99D8);
  if (v30(v14, 1LL, v19) == 1)
  {
    sub_10040A274((uint64_t)v14, &qword_1009B99D8);
  }

  else
  {
    uint64_t v39 = v59;
    sub_1003F600C((uint64_t)v14, v59, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
    uint64_t v40 = *(os_unfair_lock_s **)((char *)a2
                               + OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_lock);
    swift_retain(v40);
    os_unfair_lock_lock(v40 + 4);
    (*(void (**)(uint64_t))(*(void *)v58 + 224LL))(v39);
    os_unfair_lock_unlock(v40 + 4);
    uint64_t v41 = swift_release(v40);
    uint64_t v42 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *a2) + 0xA8LL))(v41);
    if (v42)
    {
      __n128 v44 = (void *)v42;
      uint64_t v45 = v43;
      uint64_t v46 = swift_getObjectType(v42);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v45 + 8))(v39, *(void *)(v60 + 32), v46, v45);
    }

    sub_1003F6050(v39, type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet);
  }

  uint64_t v47 = swift_retain_n(v38, 2LL);
  __n128 v48 = (os_log_s *)Logger.logObject.getter(v47);
  os_log_type_t v49 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v48, v49))
  {
    uint64_t v50 = swift_slowAlloc(22LL, -1LL);
    uint64_t v51 = swift_slowAlloc(64LL, -1LL);
    uint64_t v65 = v51;
    *(_DWORD *)uint64_t v50 = 136315394;
    uint64_t v63 = sub_1003FFBB0(0xD00000000000002ELL, 0x800000010083F500LL, &v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64, v50 + 4, v50 + 12);
    *(_WORD *)(v50 + 12) = 2080;
    swift_beginAccess(v38 + 16, &v63, 0LL, 0LL);
    uint64_t v52 = *(void *)(v38 + 16);
    __n128 v53 = swift_bridgeObjectRetain(v52);
    uint64_t v54 = Dictionary.description.getter(v53);
    unint64_t v56 = v55;
    swift_bridgeObjectRelease(v52);
    uint64_t v62 = sub_1003FFBB0(v54, v56, &v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v50 + 14, v50 + 22);
    swift_bridgeObjectRelease(v56);
    swift_release_n(v38, 2LL);
    _os_log_impl((void *)&_mh_execute_header, v48, v49, "%s: sent: %s", (uint8_t *)v50, 0x16u);
    swift_arrayDestroy(v51, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v51, -1LL, -1LL);
    swift_slowDealloc(v50, -1LL, -1LL);
  }

  else
  {

    swift_release_n(v38, 2LL);
  }

uint64_t sub_10042F3F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  uint64_t v10 = v9;
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(a4);
  uint64_t v13 = v12;
  swift_retain(v6);
  v7(a2, v8, v10, v11, v13);
  swift_release(v6);
  swift_bridgeObjectRelease(v10);
  return swift_bridgeObjectRelease(v13);
}

unint64_t sub_10042F48C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_cryptoHandler + 24);
  uint64_t v6 = *(void *)(v2 + OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_cryptoHandler + 32);
  sub_10040A238( (void *)(v2 + OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_cryptoHandler),  v5);
  uint64_t v7 = (int *)type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  uint64_t v8 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, uint64_t))(v6 + 8))( *(void *)(a1 + v7[7]),  *(void *)(a1 + v7[7] + 8),  a2,  v5,  v6);
  uint64_t v10 = v8;
  unint64_t v11 = v9;
  if ((v12 & 1) != 0)
  {
    sub_10040A268(v8, v9, 1);
    return 0LL;
  }

  else
  {
    uint64_t v13 = sub_1003F5CB4(&qword_1009B9A10);
    uint64_t inited = swift_initStackObject(v13, v47);
    *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100718C90;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSRealTimeEncryptionMKS);
    *(void *)(inited + 40) = v15;
    __n128 v16 = (uint64_t *)(a1 + v7[6]);
    uint64_t v17 = *v16;
    unint64_t v18 = v16[1];
    *(void *)(inited + 72) = &type metadata for Data;
    *(void *)(inited + 4_Block_object_dispose(va, 8) = v17;
    *(void *)(inited + 56) = v18;
    *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSRealTimeEncryptionMKM);
    *(void *)(inited + 8_Block_object_dispose(va, 8) = v19;
    *(void *)(inited + cut_arc_os_release(v1 - 120) = &type metadata for Data;
    *(void *)(inited + 96) = v10;
    *(void *)(inited + 104) = v11;
    *(void *)(inited + 12_Block_object_dispose(va, 8) = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSRealTimeEncryptionMKGC);
    *(void *)(inited + 136) = v20;
    int v21 = *(_DWORD *)(a1 + v7[10]);
    *(void *)(inited + 16_Block_object_dispose(va, 8) = &type metadata for UInt32;
    *(_DWORD *)(inited + 144) = v21;
    *(void *)(inited + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSDSessionMessageRealTimeEncryptionWrapModeKey);
    *(void *)(inited + 184) = v22;
    unsigned __int8 v23 = *(_BYTE *)(a2 + *(int *)(type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL) + 32));
    sub_1004028CC(v10, v11);
    sub_10040A25C(v10, v11, 0);
    sub_1004028CC(v17, v18);
    uint64_t v24 = sub_1004D2F38(v23);
    *(void *)(inited + 2swift_unknownObjectWeakDestroy(v0 + 16) = &type metadata for Int;
    *(void *)(inited + 192) = v24;
    *(void *)(inited + 224) = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSRealTimeEncryptionShortKILength);
    *(void *)(inited + 232) = v25;
    char v26 = *(_BYTE *)(a1 + v7[12]);
    *(void *)(inited + 264) = &type metadata for UInt8;
    *(_BYTE *)(inited + 240) = v26;
    unint64_t v27 = sub_100427AB8(inited);
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    id v29 = (id)IDSGetUUIDDataFromNSUUID(isa);

    if (v29)
    {
      uint64_t v30 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v29);
      unint64_t v32 = v31;

      uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSRealTimeEncryptionMKI);
      uint64_t v35 = v34;
      uint64_t v46 = &type metadata for Data;
      *(void *)&__int128 v45 = v30;
      *((void *)&v45 + 1) = v32;
      sub_10040DAE8(&v45, v44);
      sub_1004028CC(v30, v32);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v27);
      sub_10043508C(v44, v33, v35, isUniquelyReferenced_nonNull_native);
      swift_bridgeObjectRelease(v35);
      swift_bridgeObjectRelease(0x8000000000000000LL);
      sub_100402A84(v30, v32);
    }

    uint64_t v37 = (uint64_t *)(a1 + v7[13]);
    if (*((_BYTE *)v37 + 8) != 1)
    {
      uint64_t v38 = *v37;
      uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSRealTimeEncryptionParticipantID);
      uint64_t v41 = v40;
      uint64_t v46 = &type metadata for UInt64;
      *(void *)&__int128 v45 = v38;
      sub_10040DAE8(&v45, v44);
      char v42 = swift_isUniquelyReferenced_nonNull_native(v27);
      sub_10043508C(v44, v39, v41, v42);
      swift_bridgeObjectRelease(v41);
      swift_bridgeObjectRelease(0x8000000000000000LL);
    }

    sub_10040A268(v10, v11, 0);
    sub_10040A268(v10, v11, 0);
  }

  return v27;
}

unint64_t sub_10042F7DC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_cryptoHandler + 24);
  uint64_t v6 = *(void *)(v2 + OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_cryptoHandler + 32);
  sub_10040A238( (void *)(v2 + OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_cryptoHandler),  v5);
  uint64_t v7 = (int *)type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  uint64_t v8 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, uint64_t))(v6 + 8))( *(void *)(a1 + v7[7]),  *(void *)(a1 + v7[7] + 8),  a2,  v5,  v6);
  uint64_t v10 = v8;
  unint64_t v11 = v9;
  if ((v12 & 1) != 0)
  {
    sub_10040A268(v8, v9, 1);
    return 0LL;
  }

  else
  {
    uint64_t v13 = sub_1003F5CB4(&qword_1009B9A10);
    uint64_t inited = swift_initStackObject(v13, v45);
    *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100718C70;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSRealTimeEncryptionSKS);
    *(void *)(inited + 40) = v15;
    __n128 v16 = (uint64_t *)(a1 + v7[6]);
    uint64_t v17 = *v16;
    unint64_t v18 = v16[1];
    *(void *)(inited + 72) = &type metadata for Data;
    *(void *)(inited + 4_Block_object_dispose(va, 8) = v17;
    *(void *)(inited + 56) = v18;
    *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSRealTimeEncryptionSKM);
    *(void *)(inited + 8_Block_object_dispose(va, 8) = v19;
    *(void *)(inited + cut_arc_os_release(v1 - 120) = &type metadata for Data;
    *(void *)(inited + 96) = v10;
    *(void *)(inited + 104) = v11;
    *(void *)(inited + 12_Block_object_dispose(va, 8) = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSRealTimeEncryptionSKGC);
    *(void *)(inited + 136) = v20;
    int v21 = *(_DWORD *)(a1 + v7[10]);
    *(void *)(inited + 16_Block_object_dispose(va, 8) = &type metadata for UInt32;
    *(_DWORD *)(inited + 144) = v21;
    *(void *)(inited + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSDSessionMessageRealTimeEncryptionWrapModeKey);
    *(void *)(inited + 184) = v22;
    unsigned __int8 v23 = *(_BYTE *)(a2 + *(int *)(type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL) + 32));
    sub_1004028CC(v10, v11);
    sub_10040A25C(v10, v11, 0);
    sub_1004028CC(v17, v18);
    uint64_t v24 = sub_1004D2F38(v23);
    *(void *)(inited + 2swift_unknownObjectWeakDestroy(v0 + 16) = &type metadata for Int;
    *(void *)(inited + 192) = v24;
    unint64_t v25 = sub_100427AB8(inited);
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    id v27 = (id)IDSGetUUIDDataFromNSUUID(isa);

    if (v27)
    {
      uint64_t v28 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v27);
      unint64_t v30 = v29;

      uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSRealTimeEncryptionSKI);
      uint64_t v33 = v32;
      __n128 v44 = &type metadata for Data;
      *(void *)&__int128 v43 = v28;
      *((void *)&v43 + 1) = v30;
      sub_10040DAE8(&v43, v42);
      sub_1004028CC(v28, v30);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v25);
      sub_10043508C(v42, v31, v33, isUniquelyReferenced_nonNull_native);
      swift_bridgeObjectRelease(v33);
      swift_bridgeObjectRelease(0x8000000000000000LL);
      sub_100402A84(v28, v30);
    }

    uint64_t v35 = (uint64_t *)(a1 + v7[13]);
    if (*((_BYTE *)v35 + 8) != 1)
    {
      uint64_t v36 = *v35;
      uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSRealTimeEncryptionParticipantID);
      uint64_t v39 = v38;
      __n128 v44 = &type metadata for UInt64;
      *(void *)&__int128 v43 = v36;
      sub_10040DAE8(&v43, v42);
      char v40 = swift_isUniquelyReferenced_nonNull_native(v25);
      sub_10043508C(v42, v37, v39, v40);
      swift_bridgeObjectRelease(v39);
      swift_bridgeObjectRelease(0x8000000000000000LL);
    }

    sub_10040A268(v10, v11, 0);
    sub_10040A268(v10, v11, 0);
  }

  return v25;
}

uint64_t sub_10042FB00(void *a1, void *a2, uint64_t a3)
{
  uint64_t v7 = OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_lock;
  uint64_t v8 = *(os_unfair_lock_s **)(v3 + OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_lock);
  swift_retain(v8);
  os_unfair_lock_lock(v8 + 4);
  swift_release(v8);
  uint64_t v9 = sub_10042FB9C(a1, a2, a3);
  uint64_t v10 = *(os_unfair_lock_s **)(v3 + v7);
  swift_retain(v10);
  os_unfair_lock_unlock(v10 + 4);
  swift_release(v10);
  return v9;
}

uint64_t sub_10042FB9C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v7 = (uint64_t *)(v3 + OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_participantsById);
  swift_beginAccess( v3 + OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_participantsById,  v30,  0LL,  0LL);
  uint64_t v8 = *v7;
  if (*(void *)(*v7 + 16) && (unint64_t v9 = sub_100417DF8(a3), (v10 & 1) != 0))
  {
    uint64_t v11 = *(void *)(*(void *)(v8 + 56) + 8 * v9);
    swift_retain(v11);
  }

  else
  {
    uint64_t v12 = type metadata accessor for IDSGroupPushMaterialExchangeParticipant();
    uint64_t v11 = swift_allocObject(v12, 56LL, 7LL);
    sub_1004270AC((uint64_t)a1, (uint64_t)a2, a3);
    swift_beginAccess(v7, v29, 33LL, 0LL);
    id v13 = a1;
    id v14 = a2;
    swift_retain(v11);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v7);
    uint64_t v28 = *v7;
    *uint64_t v7 = 0x8000000000000000LL;
    sub_100434F54(v11, a3, isUniquelyReferenced_nonNull_native);
    uint64_t v16 = *v7;
    *uint64_t v7 = v28;
    swift_bridgeObjectRelease(v16);
    swift_endAccess(v29);
    uint64_t v17 = swift_retain_n(v11, 2LL);
    unint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = swift_slowAlloc(22LL, -1LL);
      uint64_t v21 = swift_slowAlloc(64LL, -1LL);
      v29[0] = v21;
      *(_DWORD *)uint64_t v20 = 136315394;
      uint64_t v28 = sub_1003FFBB0(0xD000000000000034LL, 0x800000010083F7E0LL, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, v29, v20 + 4, v20 + 12);
      *(_WORD *)(v20 + 12) = 2080;
      uint64_t v22 = *(uint64_t (**)(uint64_t))(*(void *)v11 + 176LL);
      uint64_t v23 = swift_retain(v11);
      uint64_t v24 = v22(v23);
      unint64_t v26 = v25;
      swift_release(v11);
      uint64_t v28 = sub_1003FFBB0(v24, v26, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, v29, v20 + 14, v20 + 22);
      swift_release_n(v11, 2LL);
      swift_bridgeObjectRelease(v26);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "%s: creating %s", (uint8_t *)v20, 0x16u);
      swift_arrayDestroy(v21, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1LL, -1LL);
      swift_slowDealloc(v20, -1LL, -1LL);
    }

    else
    {
      swift_release_n(v11, 2LL);
    }
  }

  return v11;
}

uint64_t sub_10042FE58(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_lock;
  uint64_t v5 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_lock);
  swift_retain(v5);
  os_unfair_lock_lock(v5 + 4);
  swift_release(v5);
  uint64_t v6 = (uint64_t *)(v2 + OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_participantsById);
  swift_beginAccess( v2 + OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_participantsById,  v23,  0LL,  0LL);
  uint64_t v7 = *v6;
  v21[2] = a1;
  swift_bridgeObjectRetain(v7);
  uint64_t v8 = sub_100430060((uint64_t)sub_100439B1C, (uint64_t)v21, v7);
  uint64_t v9 = v8;
  if (!((unint64_t)v8 >> 62))
  {
    uint64_t v10 = *(void *)((v8 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v10) {
      goto LABEL_3;
    }
LABEL_13:
    swift_bridgeObjectRelease(v9);
    unint64_t v18 = &_swiftEmptyArrayStorage;
LABEL_14:
    uint64_t v19 = sub_100438A1C( (uint64_t)v18,  (unint64_t *)&qword_1009BBE30,  &OBJC_CLASS___IDSPushToken_ptr,  (unint64_t *)&qword_1009BC4C0,  (uint64_t *)&unk_1009B99A0);
    swift_bridgeObjectRelease(v18);
    uint64_t v20 = *(os_unfair_lock_s **)(v2 + v4);
    swift_retain(v20);
    os_unfair_lock_unlock(v20 + 4);
    swift_release(v20);
    return v19;
  }

  if (v8 >= 0) {
    v8 &= 0xFFFFFFFFFFFFFF8uLL;
  }
  uint64_t v10 = _CocoaArrayWrapper.endIndex.getter(v8);
  if (!v10) {
    goto LABEL_13;
  }
LABEL_3:
  uint64_t v22 = &_swiftEmptyArrayStorage;
  uint64_t result = specialized ContiguousArray.reserveCapacity(_:)(v10);
  if ((v10 & 0x8000000000000000LL) == 0)
  {
    uint64_t v12 = 0LL;
    do
    {
      if ((v9 & 0xC000000000000001LL) != 0)
      {
        uint64_t v13 = specialized _ArrayBuffer._getElementSlowPath(_:)(v12, v9);
      }

      else
      {
        uint64_t v13 = *(void *)(v9 + 8 * v12 + 32);
        swift_retain(v13);
      }

      ++v12;
      id v14 = *(id *)(v13 + 16);
      uint64_t v15 = swift_release(v13);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v15);
      uint64_t v16 = v22[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v16);
      uint64_t v17 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v16, v14);
      specialized ContiguousArray._endMutation()(v17);
    }

    while (v10 != v12);
    unint64_t v18 = v22;
    swift_bridgeObjectRelease(v9);
    goto LABEL_14;
  }

  __break(1u);
  return result;
}

uint64_t sub_100430060(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t (*)(uint64_t *))result;
  int64_t v6 = 0LL;
  uint64_t v23 = &_swiftEmptyArrayStorage;
  uint64_t v7 = *(void *)(a3 + 64);
  uint64_t v20 = a3 + 64;
  uint64_t v8 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v9 = -1LL;
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  unint64_t v10 = v9 & v7;
  int64_t v21 = (unint64_t)(v8 + 63) >> 6;
  if ((v9 & v7) != 0) {
    goto LABEL_6;
  }
LABEL_7:
  if (__OFADD__(v6++, 1LL))
  {
    __break(1u);
    goto LABEL_31;
  }

  if (v6 >= v21) {
    goto LABEL_29;
  }
  unint64_t v16 = *(void *)(v20 + 8 * v6);
  if (v16) {
    goto LABEL_19;
  }
  int64_t v17 = v6 + 1;
  if (v6 + 1 >= v21)
  {
LABEL_29:
    swift_release(a3);
    return (uint64_t)v23;
  }

  unint64_t v16 = *(void *)(v20 + 8 * v17);
  if (!v16)
  {
    int64_t v17 = v6 + 2;
    if (v6 + 2 >= v21) {
      goto LABEL_29;
    }
    unint64_t v16 = *(void *)(v20 + 8 * v17);
    if (!v16)
    {
      int64_t v17 = v6 + 3;
      if (v6 + 3 >= v21) {
        goto LABEL_29;
      }
      unint64_t v16 = *(void *)(v20 + 8 * v17);
      if (!v16)
      {
        int64_t v17 = v6 + 4;
        if (v6 + 4 < v21)
        {
          unint64_t v16 = *(void *)(v20 + 8 * v17);
          if (v16) {
            goto LABEL_18;
          }
          while (1)
          {
            int64_t v6 = v17 + 1;
            if (__OFADD__(v17, 1LL)) {
              break;
            }
            if (v6 >= v21) {
              goto LABEL_29;
            }
            unint64_t v16 = *(void *)(v20 + 8 * v6);
            ++v17;
            if (v16) {
              goto LABEL_19;
            }
          }

void sub_100430294(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v7 = type metadata accessor for IDSGroupEncryptionDesiredKeyMaterialSet(0LL);
  uint64_t v338 = *(void *)(v7 - 8);
  uint64_t v339 = v7;
  __chkstk_darwin(v8, v9);
  uint64_t v333 = (uint64_t)&v304 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1003F5CB4(&qword_1009B99D8);
  __chkstk_darwin(v11, v12);
  uint64_t v326 = (char *)&v304 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14, v15);
  char v325 = (char *)&v304 - v16;
  __chkstk_darwin(v17, v18);
  uint64_t v324 = (char *)&v304 - v19;
  __chkstk_darwin(v20, v21);
  unint64_t v323 = (char *)&v304 - v22;
  __chkstk_darwin(v23, v24);
  unint64_t v322 = (char *)&v304 - v25;
  __chkstk_darwin(v26, v27);
  uint64_t v321 = (char *)&v304 - v28;
  uint64_t v317 = type metadata accessor for IDSGroupEncryptionDesiredPreKeyMaterialSet(0LL);
  uint64_t v316 = *(void *)(v317 - 8);
  __chkstk_darwin(v29, v30);
  uint64_t v306 = (uint64_t)&v304 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v315 = sub_1003F5CB4(&qword_1009B9A30);
  __chkstk_darwin(v32, v33);
  uint64_t v327 = (uint64_t)&v304 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v319 = (char *)sub_1003F5CB4(&qword_1009B99F0);
  __chkstk_darwin(v35, v36);
  uint64_t v307 = (uint64_t)&v304 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v38, v39);
  uint64_t v308 = (uint64_t)&v304 - v40;
  __chkstk_darwin(v41, v42);
  uint64_t v337 = (uint64_t *)((char *)&v304 - v43);
  __chkstk_darwin(v44, v45);
  double v318 = (char *)&v304 - v46;
  unint64_t v305 = v3;
  uint64_t v304 = OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_lock;
  uint64_t v47 = *(os_unfair_lock_s **)&v3[OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_lock];
  swift_retain(v47);
  os_unfair_lock_lock(v47 + 4);
  swift_release(v47);
  uint64_t v48 = swift_bridgeObjectRetain_n(a3, 2LL);
  os_log_type_t v49 = (os_log_s *)Logger.logObject.getter(v48);
  os_log_type_t v50 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v49, v50))
  {
    uint64_t v51 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v52 = swift_slowAlloc(32LL, -1LL);
    uint64_t v349 = v52;
    *(_DWORD *)uint64_t v51 = 136315138;
    swift_bridgeObjectRetain(a3);
    unint64_t v347 = (void *)sub_1003FFBB0(a2, a3, &v349);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v347, v348, v51 + 4, v51 + 12);
    swift_bridgeObjectRelease_n(a3, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v49, v50, "%sPushExchangeController", v51, 0xCu);
    swift_arrayDestroy(v52, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v52, -1LL, -1LL);
    swift_slowDealloc(v51, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(a3, 2LL);
  }

  swift_bridgeObjectRetain_n(a3, 2LL);
  __n128 v53 = v305;
  uint64_t v54 = (os_log_s *)Logger.logObject.getter(v53);
  os_log_type_t v55 = static os_log_type_t.default.getter();
  BOOL v56 = os_log_type_enabled(v54, v55);
  uint64_t v340 = a1;
  v320.n128_u64[0] = (unint64_t)v53;
  if (v56)
  {
    uint64_t v57 = swift_slowAlloc(22LL, -1LL);
    uint64_t v58 = swift_slowAlloc(64LL, -1LL);
    uint64_t v349 = v58;
    *(_DWORD *)uint64_t v57 = 136315394;
    swift_bridgeObjectRetain(a3);
    unint64_t v347 = (void *)sub_1003FFBB0(a2, a3, &v349);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v347, v348, v57 + 4, v57 + 12);
    uint64_t v59 = swift_bridgeObjectRelease_n(a3, 3LL);
    *(_WORD *)(v57 + 12) = 2080;
    uint64_t v60 = v318;
    (*(void (**)(uint64_t))((swift_isaMask & *(void *)v320.n128_u64[0]) + 0xF0LL))(v59);
    uint64_t v61 = String.init<A>(describing:)(v60, v319);
    unint64_t v63 = v62;
    unint64_t v347 = (void *)sub_1003FFBB0(v61, v62, &v349);
    uint64_t v64 = (void *)v320.n128_u64[0];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v347, v348, v57 + 14, v57 + 22);

    swift_bridgeObjectRelease(v63);
    _os_log_impl((void *)&_mh_execute_header, v54, v55, "%s    desiredPublicIdentity: %s", (uint8_t *)v57, 0x16u);
    swift_arrayDestroy(v58, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v58, -1LL, -1LL);
    swift_slowDealloc(v57, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a3, 2LL);
  }

  uint64_t v65 = v308;
  uint64_t v66 = swift_bridgeObjectRetain_n(a3, 2LL);
  uint64_t v67 = (os_log_s *)Logger.logObject.getter(v66);
  os_log_type_t v68 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v67, v68))
  {
    __n128 v69 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v70 = swift_slowAlloc(32LL, -1LL);
    uint64_t v349 = v70;
    *(_DWORD *)__n128 v69 = 136315138;
    swift_bridgeObjectRetain(a3);
    unint64_t v347 = (void *)sub_1003FFBB0(a2, a3, &v349);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v347, v348, v69 + 4, v69 + 12);
    swift_bridgeObjectRelease_n(a3, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v67, v68, "%s    ", v69, 0xCu);
    swift_arrayDestroy(v70, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v70, -1LL, -1LL);
    swift_slowDealloc(v69, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(a3, 2LL);
  }

  uint64_t v71 = swift_bridgeObjectRetain_n(a3, 2LL);
  __n128 v72 = (os_log_s *)Logger.logObject.getter(v71);
  os_log_type_t v73 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v72, v73))
  {
    __n128 v74 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v75 = swift_slowAlloc(32LL, -1LL);
    uint64_t v349 = v75;
    *(_DWORD *)__n128 v74 = 136315138;
    swift_bridgeObjectRetain(a3);
    unint64_t v347 = (void *)sub_1003FFBB0(a2, a3, &v349);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v347, v348, v74 + 4, v74 + 12);
    swift_bridgeObjectRelease_n(a3, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v72, v73, "%s    Members:", v74, 0xCu);
    swift_arrayDestroy(v75, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v75, -1LL, -1LL);
    swift_slowDealloc(v74, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(a3, 2LL);
  }

  uint64_t v76 = (void *)v320.n128_u64[0];
  __n128 v77 = (uint64_t *)(v320.n128_u64[0]
                  + OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_membersByURI);
  swift_beginAccess( v320.n128_u64[0] + OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_membersByURI,  &v349,  0LL,  0LL);
  uint64_t v78 = *v77;
  if ((*v77 & 0xC000000000000001LL) != 0)
  {
    if (v78 < 0) {
      uint64_t v79 = *v77;
    }
    else {
      uint64_t v79 = v78 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v80 = __CocoaDictionary.makeIterator()(v79);
    uint64_t v312 = 0LL;
    uint64_t v81 = 0LL;
    unint64_t v82 = 0LL;
    unint64_t v83 = v80 | 0x8000000000000000LL;
  }

  else
  {
    uint64_t v84 = -1LL << *(_BYTE *)(v78 + 32);
    uint64_t v81 = ~v84;
    uint64_t v85 = *(void *)(v78 + 64);
    uint64_t v312 = v78 + 64;
    uint64_t v86 = -v84;
    if (v86 < 64) {
      uint64_t v87 = ~(-1LL << v86);
    }
    else {
      uint64_t v87 = -1LL;
    }
    unint64_t v82 = v87 & v85;
    unint64_t v83 = v78;
  }

  __n128 v88 = swift_bridgeObjectRetain(v78);
  uint64_t v89 = 0LL;
  uint64_t v310 = v83 & 0x7FFFFFFFFFFFFFFFLL;
  int64_t v311 = (unint64_t)(v81 + 64) >> 6;
  v341.n128_u64[0] = (unint64_t)&v345;
  v88.n128_u64[0] = 136315906LL;
  __n128 v314 = v88;
  uint64_t v313 = (char *)&type metadata for Any + 8;
  uint64_t v309 = (char *)&type metadata for Swift.AnyObject + 8;
  uint64_t v329 = v81;
  int64_t v328 = v83;
  uint64_t v334 = a2;
  if ((v83 & 0x8000000000000000LL) == 0) {
    goto LABEL_28;
  }
LABEL_25:
  uint64_t v90 = __CocoaDictionary.Iterator.next()();
  if (!v90)
  {
    unint64_t v83 = v328;
    goto LABEL_59;
  }

  uint64_t v92 = v90;
  uint64_t v93 = v91;
  uint64_t v344 = v90;
  uint64_t v94 = sub_10041D3C4(0LL, (unint64_t *)&unk_1009BC270, &OBJC_CLASS___IDSURI_ptr);
  swift_unknownObjectRetain(v92, v95);
  uint64_t v96 = v309;
  swift_dynamicCast(&v347, &v344, v309, v94, 7LL);
  id v97 = v347;
  swift_unknownObjectRelease(v92, v98);
  uint64_t v344 = v93;
  uint64_t v99 = type metadata accessor for IDSGroupPushMaterialExchangeMember(0LL);
  swift_unknownObjectRetain(v93, v100);
  swift_dynamicCast(&v347, &v344, v96, v99, 7LL);
  __n128 v101 = v347;
  swift_unknownObjectRelease(v93, v102);
  uint64_t v342 = v82;
  unint64_t v343 = v89;
  unint64_t v83 = v328;
  if (v97)
  {
    while (1)
    {

      swift_retain_n(v101, 6LL);
      swift_bridgeObjectRetain_n(a3, 2LL);
      __n128 v109 = v76;
      __n128 v110 = (void *)Logger.logObject.getter(v109);
      int v111 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled((os_log_t)v110, (os_log_type_t)v111))
      {

        swift_bridgeObjectRelease_n(a3, 2LL);
        swift_release_n(v101, 7LL);
        unint64_t v82 = v342;
        uint64_t v89 = v343;
        if ((v83 & 0x8000000000000000LL) != 0) {
          goto LABEL_25;
        }
        goto LABEL_28;
      }

      LODWORD(v332) = v111;
      os_log_t v336 = (os_log_t)v110;
      uint64_t v112 = swift_slowAlloc(42LL, -1LL);
      __n128 v113 = (char *)swift_slowAlloc(8LL, -1LL);
      uint64_t v335 = swift_slowAlloc(96LL, -1LL);
      unint64_t v347 = (void *)v335;
      *(_DWORD *)uint64_t v112 = v314.n128_u32[0];
      swift_bridgeObjectRetain(a3);
      uint64_t v344 = sub_1003FFBB0(a2, a3, (uint64_t *)&v347);
      unint64_t v114 = v341.n128_u64[0];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v344, v341.n128_u64[0], v112 + 4, v112 + 12);
      swift_bridgeObjectRelease_n(a3, 3LL);
      *(_WORD *)(v112 + 12) = 2112;
      uint64_t v115 = (void *)v101[2];
      uint64_t v344 = (uint64_t)v115;
      id v116 = v115;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v344, v114, v112 + 14, v112 + 22);
      __int128 v331 = v113;
      *(void *)__n128 v113 = v115;
      uint64_t v117 = swift_release_n(v101, 2LL);
      *(_WORD *)(v112 + 22) = 2080;
      uint64_t v118 = (uint64_t)v337;
      v330.n128_u64[0] = *(void *)(*v101 + 96LL);
      uint64_t v119 = ((uint64_t (*)(uint64_t))v330.n128_u64[0])(v117);
      (*(void (**)(uint64_t))((swift_isaMask & *v109) + 0xF0LL))(v119);
      uint64_t v120 = v327;
      uint64_t v121 = v327 + *(int *)(v315 + 48);
      sub_100410FD0(v118, v327, &qword_1009B99F0);
      sub_100410FD0(v65, v121, &qword_1009B99F0);
      uint64_t v122 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v316 + 48);
      uint64_t v123 = v317;
      if (v122(v120, 1LL, v317) == 1) {
        break;
      }
      uint64_t v125 = v307;
      sub_100410FD0(v120, v307, &qword_1009B99F0);
      if (v122(v121, 1LL, v123) == 1)
      {
        sub_1003F6050(v125, type metadata accessor for IDSGroupEncryptionDesiredPreKeyMaterialSet);
        a2 = v334;
        uint64_t v65 = v308;
LABEL_51:
        sub_10040A274(v327, &qword_1009B9A30);
        sub_10040A274(v65, &qword_1009B99F0);
        sub_10040A274((uint64_t)v337, &qword_1009B99F0);
        goto LABEL_54;
      }

      uint64_t v126 = v121;
      uint64_t v127 = v306;
      sub_1003F600C(v126, v306, type metadata accessor for IDSGroupEncryptionDesiredPreKeyMaterialSet);
      uint64_t v128 = sub_10040A2B0( &qword_1009B91D8,  type metadata accessor for IDSGroupEncryptionDesiredPreKeyMaterialSet,  (uint64_t)&unk_100718594);
      char v129 = dispatch thunk of static Equatable.== infix(_:_:)(v125, v127, v123, v128);
      sub_1003F6050(v125, type metadata accessor for IDSGroupEncryptionDesiredPreKeyMaterialSet);
      sub_1003F6050(v127, type metadata accessor for IDSGroupEncryptionDesiredPreKeyMaterialSet);
      sub_10040A274(v120, &qword_1009B99F0);
      uint64_t v65 = v308;
      sub_10040A274(v308, &qword_1009B99F0);
      sub_10040A274((uint64_t)v337, &qword_1009B99F0);
      a2 = v334;
      if ((v129 & 1) != 0) {
        goto LABEL_53;
      }
LABEL_54:
      unint64_t v130 = 0xE500000000000000LL;
      uint64_t v131 = 0x656C617473LL;
LABEL_55:
      unint64_t v82 = v342;
      uint64_t v344 = sub_1003FFBB0(v131, v130, (uint64_t *)&v347);
      unint64_t v132 = v341.n128_u64[0];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v344, v341.n128_u64[0], v112 + 24, v112 + 32);

      swift_release_n(v101, 2LL);
      uint64_t v133 = swift_bridgeObjectRelease(v130);
      *(_WORD *)(v112 + 32) = 2080;
      uint64_t v134 = v318;
      ((void (*)(uint64_t))v330.n128_u64[0])(v133);
      uint64_t v135 = String.init<A>(describing:)(v134, v319);
      unint64_t v137 = v136;
      uint64_t v344 = sub_1003FFBB0(v135, v136, (uint64_t *)&v347);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v344, v132, v112 + 34, v112 + 42);
      swift_release_n(v101, 2LL);
      swift_bridgeObjectRelease(v137);
      os_log_t v138 = v336;
      _os_log_impl( (void *)&_mh_execute_header,  v336,  (os_log_type_t)v332,  "%s        %@: %s; sentPublicIdentity: %s",
        (uint8_t *)v112,
        0x2Au);
      uint64_t v139 = sub_1003F5CB4(&qword_1009B92C8);
      uint64_t v140 = v331;
      swift_arrayDestroy(v331, 1LL, v139);
      swift_slowDealloc(v140, -1LL, -1LL);
      uint64_t v141 = v335;
      swift_arrayDestroy(v335, 3LL, v313);
      swift_slowDealloc(v141, -1LL, -1LL);
      swift_slowDealloc(v112, -1LL, -1LL);

      swift_release(v101);
      uint64_t v89 = v343;
      uint64_t v76 = (void *)v320.n128_u64[0];
      unint64_t v83 = v328;
      if (v328 < 0) {
        goto LABEL_25;
      }
LABEL_28:
      if (v82)
      {
        uint64_t v342 = (v82 - 1) & v82;
        unint64_t v343 = v89;
        unint64_t v103 = __clz(__rbit64(v82)) | ((void)v89 << 6);
      }

      else
      {
        int64_t v104 = (int64_t)(v89 + 1);
        if (__OFADD__(v89, 1LL)) {
          goto LABEL_139;
        }
        if (v104 >= v311) {
          goto LABEL_59;
        }
        unint64_t v105 = *(void *)(v312 + 8 * v104);
        __n128 v106 = v89 + 1;
        if (!v105)
        {
          __n128 v106 = v89 + 2;
          unint64_t v105 = *(void *)(v312 + 8LL * (void)v106);
          if (!v105)
          {
            __n128 v106 = v89 + 3;
            unint64_t v105 = *(void *)(v312 + 8LL * (void)v106);
            if (!v105)
            {
              __n128 v106 = v89 + 4;
              unint64_t v105 = *(void *)(v312 + 8LL * (void)v106);
              if (!v105)
              {
                __n128 v107 = v89 + 5;
                while ((char *)v311 != v107)
                {
                  unint64_t v105 = *(void *)(v312 + 8LL * (void)v107++);
                  if (v105)
                  {
                    __n128 v106 = v107 - 1;
                    goto LABEL_43;
                  }
                }

                goto LABEL_59;
              }
            }
          }
        }

id sub_100432CA0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for IDSGroupPushMaterialExchangeController(0LL);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100432DC4()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **v0) + 0x150LL))();
}

uint64_t sub_100432DFC()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **v0) + 0x1A0LL))();
}

uint64_t sub_100432E34()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **v0) + 0x158LL))();
}

uint64_t sub_100432E6C()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **v0) + 0x140LL))();
}

uint64_t sub_100432EA4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))((swift_isaMask & **v2) + 0x170LL))(a1, a2 & 0xFFFFFFFFFFLL);
}

uint64_t sub_100432EE0()
{
  return (*(uint64_t (**)(void))((swift_isaMask & **v0) + 0x148LL))();
}

void *sub_100432F18(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }

  unint64_t v6 = a4[3];
  uint64_t v7 = v6 >> 1;
  if (v7 + 0x4000000000000000LL >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
LABEL_8:
    uint64_t v8 = a4[2];
    if (v7 <= v8) {
      uint64_t v9 = a4[2];
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      uint64_t v10 = sub_1003F5CB4(&qword_1009B9D70);
      __n128 v11 = (void *)swift_allocObject(v10, 8 * v9 + 32, 7LL);
      int64_t v12 = j__malloc_size(v11);
      uint64_t v13 = v12 - 32;
      if (v12 < 32) {
        uint64_t v13 = v12 - 25;
      }
      _OWORD v11[2] = v8;
      v11[3] = 2 * (v13 >> 3);
      __n128 v14 = v11 + 4;
      if ((v5 & 1) != 0) {
        goto LABEL_15;
      }
    }

    else
    {
      __n128 v11 = &_swiftEmptyArrayStorage;
      __n128 v14 = &_swiftEmptyArrayStorage + 4;
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v8 + 4]) {
          memmove(v14, a4 + 4, 8 * v8);
        }
        a4[2] = 0LL;
        goto LABEL_24;
      }
    }

    sub_100438BB0(0LL, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }

  __break(1u);
  return result;
}

unint64_t sub_100433024(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_100433054(a1, v4);
}

unint64_t sub_100433054(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
  {
    sub_10041D3C4(0LL, (unint64_t *)&unk_1009BC270, &OBJC_CLASS___IDSURI_ptr);
    id v7 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    char v8 = static NSObject.== infix(_:_:)(v7, a1);

    if ((v8 & 1) == 0)
    {
      uint64_t v9 = ~v4;
      for (unint64_t i = (i + 1) & v9; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0; unint64_t i = (i + 1) & v9)
      {
        id v10 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v11 = static NSObject.== infix(_:_:)(v10, a1);

        if ((v11 & 1) != 0) {
          break;
        }
      }
    }
  }

  return i;
}

uint64_t sub_10043316C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)(v24, *(void *)(*v3 + 40LL));
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v24, a2, a3);
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1LL << *(_BYTE *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0)
  {
    uint64_t v11 = *(void *)(v7 + 48);
    int64_t v12 = (void *)(v11 + 16 * v10);
    uint64_t v13 = v12[1];
    BOOL v14 = *v12 == a2 && v13 == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v12, v13, a2, a3, 0LL) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v7);
      __n128 v15 = (uint64_t *)(*(void *)(*v3 + 48LL) + 16 * v10);
      uint64_t v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain(v16);
      return 0LL;
    }

    uint64_t v18 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v18;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) == 0) {
        break;
      }
      uint64_t v19 = (void *)(v11 + 16 * v10);
      uint64_t v20 = v19[1];
      BOOL v21 = *v19 == a2 && v20 == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, a2, a3, 0LL) & 1) != 0) {
        goto LABEL_7;
      }
    }
  }

  swift_bridgeObjectRelease(v7);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v24[0] = *v3;
  void *v3 = 0x8000000000000000LL;
  swift_bridgeObjectRetain(a3);
  sub_1004374C4(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  uint64_t v23 = *v3;
  void *v3 = v24[0];
  swift_bridgeObjectRelease(v23);
  *a1 = a2;
  a1[1] = a3;
  return 1LL;
}

uint64_t sub_100433318(Swift::Int *a1, void *a2, unint64_t *a3, void *a4, uint64_t *a5)
{
  uint64_t v9 = v5;
  uint64_t v12 = *v5;
  if ((*v5 & 0xC000000000000001LL) != 0)
  {
    if (v12 < 0) {
      uint64_t v13 = *v5;
    }
    else {
      uint64_t v13 = v12 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(*v5);
    id v14 = a2;
    uint64_t v15 = __CocoaSet.member(for:)();

    if (v15)
    {
      swift_bridgeObjectRelease(v12);

      uint64_t v44 = v15;
      uint64_t v16 = sub_10041D3C4(0LL, a3, a4);
      swift_unknownObjectRetain(v15, v17);
      swift_dynamicCast(&v45, &v44, (char *)&type metadata for Swift.AnyObject + 8, v16, 7LL);
      *a1 = v45;
      swift_unknownObjectRelease(v15, v18);
      return 0LL;
    }

    uint64_t result = __CocoaSet.count.getter(v13);
    if (__OFADD__(result, 1LL))
    {
      __break(1u);
      return result;
    }

    Swift::Int v31 = sub_1004338D4(v13, result + 1, a5, a3, a4);
    Swift::Int v45 = v31;
    unint64_t v32 = *(void *)(v31 + 16);
    if (*(void *)(v31 + 24) <= v32)
    {
      uint64_t v38 = v32 + 1;
      id v39 = v14;
      sub_100435E38(v38, a5);
      uint64_t v33 = v45;
    }

    else
    {
      uint64_t v33 = v31;
      id v34 = v14;
    }

    sub_100423E08((uint64_t)v14, v33);
    uint64_t v40 = *v9;
    *uint64_t v9 = v33;
    swift_bridgeObjectRelease(v40);
    *a1 = (Swift::Int)v14;
  }

  else
  {
    Swift::Int v20 = *(void *)(v12 + 40);
    swift_bridgeObjectRetain(v12);
    Swift::Int v21 = NSObject._rawHashValue(seed:)(v20);
    uint64_t v22 = -1LL << *(_BYTE *)(v12 + 32);
    unint64_t v23 = v21 & ~v22;
    __n128 v41 = a4;
    if (((*(void *)(v12 + 56 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v23) & 1) != 0)
    {
      sub_10041D3C4(0LL, a3, a4);
      id v24 = *(id *)(*(void *)(v12 + 48) + 8 * v23);
      char v25 = static NSObject.== infix(_:_:)(v24, a2);

      if ((v25 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease(v12);
        __n128 v29 = *(void **)(*(void *)(*v9 + 48) + 8 * v23);
        *a1 = (Swift::Int)v29;
        id v30 = v29;
        return 0LL;
      }

      uint64_t v26 = ~v22;
      while (1)
      {
        unint64_t v23 = (v23 + 1) & v26;
        if (((*(void *)(v12 + 56 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v23) & 1) == 0) {
          break;
        }
        id v27 = *(id *)(*(void *)(v12 + 48) + 8 * v23);
        char v28 = static NSObject.== infix(_:_:)(v27, a2);

        if ((v28 & 1) != 0) {
          goto LABEL_12;
        }
      }
    }

    swift_bridgeObjectRelease(v12);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v9);
    Swift::Int v45 = *v9;
    *uint64_t v9 = 0x8000000000000000LL;
    id v36 = a2;
    sub_10043765C((uint64_t)v36, v23, isUniquelyReferenced_nonNull_native, a5, a3, v41);
    uint64_t v37 = *v9;
    *uint64_t v9 = v45;
    swift_bridgeObjectRelease(v37);
    *a1 = (Swift::Int)v36;
  }

  return 1LL;
}

void sub_1004335E0(uint64_t a1)
{
  uint64_t v3 = *v1;
  if ((*v1 & 0xC000000000000001LL) == 0)
  {
    if (!*(void *)(v3 + 16)) {
      return;
    }
LABEL_8:
    if ((a1 & 0xC000000000000001LL) != 0)
    {
      if (a1 < 0) {
        uint64_t v5 = a1;
      }
      else {
        uint64_t v5 = a1 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(a1);
      uint64_t v6 = __CocoaSet.makeIterator()(v5);
      uint64_t v7 = sub_10041D3C4(0LL, (unint64_t *)&unk_1009BC270, &OBJC_CLASS___IDSURI_ptr);
      uint64_t v8 = sub_100438928( (unint64_t *)&unk_1009BAC00,  (unint64_t *)&unk_1009BC270,  &OBJC_CLASS___IDSURI_ptr);
      uint64_t v9 = Set.Iterator.init(_cocoa:)(v33, v6, v7, v8);
      a1 = v33[0];
      uint64_t v30 = v33[1];
      uint64_t v10 = v33[2];
      uint64_t v11 = v33[3];
      unint64_t v12 = v33[4];
    }

    else
    {
      uint64_t v13 = -1LL << *(_BYTE *)(a1 + 32);
      uint64_t v30 = a1 + 56;
      uint64_t v10 = ~v13;
      uint64_t v14 = -v13;
      if (v14 < 64) {
        uint64_t v15 = ~(-1LL << v14);
      }
      else {
        uint64_t v15 = -1LL;
      }
      unint64_t v12 = v15 & *(void *)(a1 + 56);
      swift_bridgeObjectRetain(a1);
      uint64_t v11 = 0LL;
    }

    int64_t v16 = (unint64_t)(v10 + 64) >> 6;
    if (a1 < 0) {
      goto LABEL_20;
    }
    while (1)
    {
      if (v12)
      {
        uint64_t v17 = (v12 - 1) & v12;
        unint64_t v18 = __clz(__rbit64(v12)) | (v11 << 6);
        uint64_t v19 = v11;
      }

      else
      {
        int64_t v26 = v11 + 1;
        if (__OFADD__(v11, 1LL))
        {
          __break(1u);
          return;
        }

        if (v26 >= v16) {
          goto LABEL_42;
        }
        unint64_t v27 = *(void *)(v30 + 8 * v26);
        uint64_t v19 = v11 + 1;
        if (!v27)
        {
          uint64_t v19 = v11 + 2;
          if (v11 + 2 >= v16) {
            goto LABEL_42;
          }
          unint64_t v27 = *(void *)(v30 + 8 * v19);
          if (!v27)
          {
            uint64_t v19 = v11 + 3;
            if (v11 + 3 >= v16) {
              goto LABEL_42;
            }
            unint64_t v27 = *(void *)(v30 + 8 * v19);
            if (!v27)
            {
              uint64_t v19 = v11 + 4;
              if (v11 + 4 >= v16) {
                goto LABEL_42;
              }
              unint64_t v27 = *(void *)(v30 + 8 * v19);
              if (!v27)
              {
                uint64_t v19 = v11 + 5;
                if (v11 + 5 >= v16) {
                  goto LABEL_42;
                }
                unint64_t v27 = *(void *)(v30 + 8 * v19);
                if (!v27)
                {
                  uint64_t v28 = v11 + 6;
                  while (v16 != v28)
                  {
                    unint64_t v27 = *(void *)(v30 + 8 * v28++);
                    if (v27)
                    {
                      uint64_t v19 = v28 - 1;
                      goto LABEL_38;
                    }
                  }

Swift::Int sub_1004338D4(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, void *a5)
{
  if (a2)
  {
    sub_1003F5CB4(a3);
    uint64_t v10 = static _SetStorage.convert(_:capacity:)(a1, a2);
    uint64_t v29 = v10;
    uint64_t v11 = __CocoaSet.makeIterator()(a1);
    uint64_t v12 = __CocoaSet.Iterator.next()(v11);
    if (v12)
    {
      uint64_t v13 = v12;
      uint64_t v14 = sub_10041D3C4(0LL, a4, a5);
      do
      {
        uint64_t v27 = v13;
        swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v14, 7LL);
        uint64_t v10 = v29;
        unint64_t v22 = *(void *)(v29 + 16);
        if (*(void *)(v29 + 24) <= v22)
        {
          sub_100435E38(v22 + 1, a3);
          uint64_t v10 = v29;
        }

        uint64_t v15 = v28;
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v10 + 40));
        uint64_t v17 = v10 + 56;
        uint64_t v18 = -1LL << *(_BYTE *)(v10 + 32);
        unint64_t v19 = result & ~v18;
        unint64_t v20 = v19 >> 6;
        if (((-1LL << v19) & ~*(void *)(v10 + 56 + 8 * (v19 >> 6))) != 0)
        {
          unint64_t v21 = __clz(__rbit64((-1LL << v19) & ~*(void *)(v10 + 56 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0LL;
        }

        else
        {
          char v23 = 0;
          unint64_t v24 = (unint64_t)(63 - v18) >> 6;
          do
          {
            if (++v20 == v24 && (v23 & 1) != 0)
            {
              __break(1u);
              return result;
            }

            BOOL v25 = v20 == v24;
            if (v20 == v24) {
              unint64_t v20 = 0LL;
            }
            v23 |= v25;
            uint64_t v26 = *(void *)(v17 + 8 * v20);
          }

          while (v26 == -1);
          unint64_t v21 = __clz(__rbit64(~v26)) + (v20 << 6);
        }

        *(void *)(v17 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v21;
        *(void *)(*(void *)(v10 + 48) + 8 * v21) = v15;
        ++*(void *)(v10 + 16);
        uint64_t v13 = __CocoaSet.Iterator.next()(result);
      }

      while (v13);
    }

    swift_release(v11);
  }

  else
  {
    swift_unknownObjectRelease(a1, 0LL);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }

  return v10;
}

void *sub_100433AD4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (!*(void *)(a2 + 16))
  {
    swift_release(a2);
    return &_swiftEmptySetSingleton;
  }

  uint64_t v3 = a1;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v4 = a1;
    }
    else {
      uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v5 = __CocoaSet.makeIterator()(v4);
    uint64_t v6 = sub_10041D3C4(0LL, (unint64_t *)&unk_1009BC270, &OBJC_CLASS___IDSURI_ptr);
    uint64_t v7 = sub_100438928((unint64_t *)&unk_1009BAC00, (unint64_t *)&unk_1009BC270, &OBJC_CLASS___IDSURI_ptr);
    uint64_t v8 = Set.Iterator.init(_cocoa:)(v58, v5, v6, v7);
    uint64_t v3 = v58[0];
    uint64_t v9 = v58[1];
    uint64_t v11 = v58[2];
    int64_t v10 = v58[3];
    unint64_t v12 = v58[4];
  }

  else
  {
    uint64_t v13 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v9 = a1 + 56;
    uint64_t v11 = ~v13;
    uint64_t v14 = -v13;
    if (v14 < 64) {
      uint64_t v15 = ~(-1LL << v14);
    }
    else {
      uint64_t v15 = -1LL;
    }
    unint64_t v12 = v15 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    int64_t v10 = 0LL;
  }

  uint64_t v53 = v3;
  uint64_t v54 = v9;
  uint64_t v55 = v11;
  int64_t v56 = v10;
  unint64_t v57 = v12;
  uint64_t v16 = v2 + 56;
  while (1)
  {
    if ((v3 & 0x8000000000000000LL) == 0)
    {
      if (v12)
      {
        uint64_t v17 = (v12 - 1) & v12;
        unint64_t v18 = __clz(__rbit64(v12)) | (v10 << 6);
LABEL_17:
        unint64_t v19 = *(void **)(*(void *)(v3 + 48) + 8 * v18);
        id v20 = v19;
        goto LABEL_18;
      }

      int64_t v34 = v10 + 1;
      if (__OFADD__(v10, 1LL)) {
        __break(1u);
      }
      int64_t v35 = (unint64_t)(v11 + 64) >> 6;
      if (v34 >= v35)
      {
        unint64_t v19 = 0LL;
        uint64_t v17 = 0LL;
        goto LABEL_18;
      }

      unint64_t v36 = *(void *)(v54 + 8 * v34);
      if (v36)
      {
LABEL_31:
        uint64_t v17 = (v36 - 1) & v36;
        unint64_t v18 = __clz(__rbit64(v36)) + (v34 << 6);
        int64_t v10 = v34;
        goto LABEL_17;
      }

      int64_t v37 = v10 + 2;
      if (v10 + 2 >= v35) {
        goto LABEL_47;
      }
      unint64_t v36 = *(void *)(v54 + 8 * v37);
      if (v36)
      {
LABEL_35:
        int64_t v34 = v37;
        goto LABEL_31;
      }

      if (v10 + 3 < v35)
      {
        unint64_t v36 = *(void *)(v54 + 8 * (v10 + 3));
        if (v36)
        {
          int64_t v34 = v10 + 3;
          goto LABEL_31;
        }

        int64_t v37 = v10 + 4;
        if (v10 + 4 >= v35)
        {
          unint64_t v19 = 0LL;
          uint64_t v17 = 0LL;
          v10 += 3LL;
LABEL_18:
          int64_t v56 = v10;
          unint64_t v57 = v17;
          if (!v19) {
            goto LABEL_56;
          }
          goto LABEL_22;
        }

        unint64_t v36 = *(void *)(v54 + 8 * v37);
        if (v36) {
          goto LABEL_35;
        }
        int64_t v34 = v10 + 5;
        if (v10 + 5 < v35)
        {
          unint64_t v36 = *(void *)(v54 + 8 * v34);
          if (v36) {
            goto LABEL_31;
          }
          int64_t v34 = v35 - 1;
          int64_t v38 = v10 + 6;
          while (v35 != v38)
          {
            unint64_t v36 = *(void *)(v54 + 8 * v38++);
            if (v36)
            {
              int64_t v34 = v38 - 1;
              goto LABEL_31;
            }
          }

double sub_100434024@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v4;
  swift_bridgeObjectRetain(*v4);
  unint64_t v9 = sub_100417D94(a1, a2);
  LOBYTE(a2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    uint64_t v12 = *v4;
    uint64_t v15 = *v4;
    uint64_t *v4 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10043556C();
      uint64_t v12 = v15;
    }

    swift_bridgeObjectRelease(*(void *)(*(void *)(v12 + 48) + 16 * v9 + 8));
    sub_10040DAE8((_OWORD *)(*(void *)(v12 + 56) + 32 * v9), a3);
    sub_100434D80(v9, v12);
    uint64_t v13 = *v4;
    uint64_t *v4 = v12;
    swift_bridgeObjectRelease(v13);
  }

  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }

  return result;
}

Swift::Int sub_100434114(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_1003F5CB4(&qword_1009B9D88);
    uint64_t v4 = static _DictionaryStorage.convert(_:capacity:)(a1, a2);
    uint64_t v30 = v4;
    uint64_t v5 = __CocoaDictionary.makeIterator()(a1);
    uint64_t v6 = __CocoaDictionary.Iterator.next()();
    if (v6)
    {
      uint64_t v8 = v6;
      uint64_t v9 = v7;
      uint64_t v10 = sub_10041D3C4(0LL, (unint64_t *)&unk_1009BC270, &OBJC_CLASS___IDSURI_ptr);
      do
      {
        uint64_t v28 = v8;
        swift_dynamicCast(&v29, &v28, (char *)&type metadata for Swift.AnyObject + 8, v10, 7LL);
        uint64_t v27 = v9;
        uint64_t v21 = type metadata accessor for IDSGroupPushMaterialExchangeMember(0LL);
        swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v21, 7LL);
        uint64_t v4 = v30;
        unint64_t v22 = *(void *)(v30 + 16);
        if (*(void *)(v30 + 24) <= v22)
        {
          sub_10043434C(v22 + 1, 1LL);
          uint64_t v4 = v30;
        }

        uint64_t v12 = v28;
        uint64_t v11 = v29;
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v4 + 40));
        uint64_t v14 = v4 + 64;
        uint64_t v15 = -1LL << *(_BYTE *)(v4 + 32);
        unint64_t v16 = result & ~v15;
        unint64_t v17 = v16 >> 6;
        if (((-1LL << v16) & ~*(void *)(v4 + 64 + 8 * (v16 >> 6))) != 0)
        {
          unint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v4 + 64 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
        }

        else
        {
          char v23 = 0;
          unint64_t v24 = (unint64_t)(63 - v15) >> 6;
          do
          {
            if (++v17 == v24 && (v23 & 1) != 0)
            {
              __break(1u);
              return result;
            }

            BOOL v25 = v17 == v24;
            if (v17 == v24) {
              unint64_t v17 = 0LL;
            }
            v23 |= v25;
            uint64_t v26 = *(void *)(v14 + 8 * v17);
          }

          while (v26 == -1);
          unint64_t v18 = __clz(__rbit64(~v26)) + (v17 << 6);
        }

        *(void *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
        uint64_t v19 = 8 * v18;
        *(void *)(*(void *)(v4 + 48) + v19) = v11;
        *(void *)(*(void *)(v4 + 56) + v19) = v12;
        ++*(void *)(v4 + 16);
        uint64_t v8 = __CocoaDictionary.Iterator.next()();
        uint64_t v9 = v20;
      }

      while (v8);
    }

    swift_release(v5);
  }

  else
  {
    swift_unknownObjectRelease(a1, 0LL);
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }

  return v4;
}

Swift::Int sub_10043434C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_1003F5CB4(&qword_1009B9D88);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
  unint64_t v36 = v3;
  uint64_t v37 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v7 + 64;
  Swift::Int result = swift_retain(v5);
  int64_t v15 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }

    int64_t v23 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }

    if (v23 >= v12) {
      break;
    }
    unint64_t v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v37 + 8 * v23);
    ++v15;
    if (!v25)
    {
      int64_t v15 = v23 + 1;
      if (v23 + 1 >= v12) {
        goto LABEL_36;
      }
      unint64_t v25 = *(void *)(v37 + 8 * v15);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_36:
          swift_release(v5);
          uint64_t v3 = v36;
          if ((a2 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }

        unint64_t v25 = *(void *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v15 = v26 + 1;
            if (__OFADD__(v26, 1LL)) {
              goto LABEL_45;
            }
            if (v15 >= v12) {
              goto LABEL_36;
            }
            unint64_t v25 = *(void *)(v37 + 8 * v15);
            ++v26;
            if (v25) {
              goto LABEL_33;
            }
          }
        }

        int64_t v15 = v26;
      }
    }

uint64_t sub_100434620(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_1003F5CB4(&qword_1009B9D78);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v9 = 0LL;
    uint64_t v10 = (uint64_t *)(v5 + 64);
    uint64_t v11 = 1LL << *(_BYTE *)(v5 + 32);
    uint64_t v33 = -1LL << v11;
    uint64_t v34 = v11;
    if (v11 < 64) {
      uint64_t v12 = ~(-1LL << v11);
    }
    else {
      uint64_t v12 = -1LL;
    }
    unint64_t v13 = v12 & *(void *)(v5 + 64);
    int64_t v35 = (unint64_t)(v11 + 63) >> 6;
    uint64_t v14 = result + 64;
    while (1)
    {
      if (v13)
      {
        unint64_t v20 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        unint64_t v21 = v20 | (v9 << 6);
      }

      else
      {
        int64_t v22 = v9 + 1;
        if (__OFADD__(v9, 1LL))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }

        if (v22 >= v35) {
          goto LABEL_36;
        }
        unint64_t v23 = v10[v22];
        ++v9;
        if (!v23)
        {
          int64_t v9 = v22 + 1;
          if (v22 + 1 >= v35) {
            goto LABEL_36;
          }
          unint64_t v23 = v10[v9];
          if (!v23)
          {
            int64_t v24 = v22 + 2;
            if (v24 >= v35)
            {
LABEL_36:
              if ((a2 & 1) != 0)
              {
                if (v34 >= 64) {
                  bzero((void *)(v5 + 64), 8 * v35);
                }
                else {
                  *uint64_t v10 = v33;
                }
                *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
              }

              break;
            }

            unint64_t v23 = v10[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v9 = v24 + 1;
                if (__OFADD__(v24, 1LL)) {
                  goto LABEL_44;
                }
                if (v9 >= v35) {
                  goto LABEL_36;
                }
                unint64_t v23 = v10[v9];
                ++v24;
                if (v23) {
                  goto LABEL_33;
                }
              }
            }

            int64_t v9 = v24;
          }
        }

uint64_t sub_1004348D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *(void *)(*v2 + 24);
  }
  sub_1003F5CB4((uint64_t *)&unk_1009BCE40);
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    uint64_t v34 = v3;
    uint64_t v9 = 1LL << *(_BYTE *)(v5 + 32);
    unint64_t v36 = (void *)(v5 + 64);
    if (v9 < 64) {
      uint64_t v10 = ~(-1LL << v9);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v35 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = v7 + 64;
    uint64_t result = swift_retain(v5);
    int64_t v14 = 0LL;
    while (1)
    {
      if (v11)
      {
        unint64_t v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v18 = v17 | (v14 << 6);
      }

      else
      {
        int64_t v19 = v14 + 1;
        if (__OFADD__(v14, 1LL))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }

        if (v19 >= v35) {
          goto LABEL_37;
        }
        unint64_t v20 = v36[v19];
        ++v14;
        if (!v20)
        {
          int64_t v14 = v19 + 1;
          if (v19 + 1 >= v35) {
            goto LABEL_37;
          }
          unint64_t v20 = v36[v14];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v35)
            {
LABEL_37:
              swift_release(v5);
              uint64_t v3 = v34;
              if ((a2 & 1) != 0)
              {
                uint64_t v33 = 1LL << *(_BYTE *)(v5 + 32);
                if (v33 >= 64) {
                  bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  void *v36 = -1LL << v33;
                }
                *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
              }

              break;
            }

            unint64_t v20 = v36[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v14 = v21 + 1;
                if (__OFADD__(v21, 1LL)) {
                  goto LABEL_44;
                }
                if (v14 >= v35) {
                  goto LABEL_37;
                }
                unint64_t v20 = v36[v14];
                ++v21;
                if (v20) {
                  goto LABEL_24;
                }
              }
            }

            int64_t v14 = v21;
          }
        }

void sub_100434BD0(unint64_t a1, uint64_t a2)
{
  int64_t v3 = a1;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (a1 + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t v8 = _HashTable.previousHole(before:)(a1, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::Int v10 = *(void *)(a2 + 40);
        id v11 = *(id *)(*(void *)(a2 + 48) + 8 * v6);
        Swift::Int v12 = NSObject._rawHashValue(seed:)(v10);

        Swift::Int v13 = v12 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v3 >= v13)
          {
LABEL_16:
            uint64_t v16 = *(void *)(a2 + 48);
            unint64_t v17 = (void *)(v16 + 8 * v3);
            unint64_t v18 = (void *)(v16 + 8 * v6);
            if (v3 != v6 || v17 >= v18 + 1) {
              *unint64_t v17 = *v18;
            }
            uint64_t v19 = *(void *)(a2 + 56);
            unint64_t v20 = (void *)(v19 + 8 * v3);
            int64_t v21 = (void *)(v19 + 8 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v20 >= v21 + 1))
            {
              *unint64_t v20 = *v21;
              int64_t v3 = v6;
            }
          }
        }

        else if (v13 >= v9 || v3 >= v13)
        {
          goto LABEL_16;
        }

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    int64_t v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v23 = *v22;
    uint64_t v24 = (-1LL << v3) - 1;
  }

  else
  {
    int64_t v22 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    uint64_t v24 = *v22;
    uint64_t v23 = (-1LL << a1) - 1;
  }

  *int64_t v22 = v24 & v23;
  uint64_t v25 = *(void *)(a2 + 16);
  BOOL v26 = __OFSUB__(v25, 1LL);
  uint64_t v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }

unint64_t sub_100434D80(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Swift::Int v10 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v11 = *v10;
        uint64_t v12 = v10[1];
        Hasher.init(_seed:)(v27, *(void *)(a2 + 40));
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v27, v11, v12);
        Swift::Int v13 = Hasher._finalize()();
        uint64_t result = swift_bridgeObjectRelease(v12);
        unint64_t v14 = v13 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v14 < v8) {
            goto LABEL_5;
          }
        }

        else if (v14 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v14)
        {
LABEL_11:
          uint64_t v15 = *(void *)(a2 + 48);
          uint64_t v16 = (_OWORD *)(v15 + 16 * v3);
          unint64_t v17 = (_OWORD *)(v15 + 16 * v6);
          if (v3 != v6 || v16 >= v17 + 1) {
            *uint64_t v16 = *v17;
          }
          uint64_t v18 = *(void *)(a2 + 56);
          uint64_t v19 = (_OWORD *)(v18 + 32 * v3);
          unint64_t v20 = (_OWORD *)(v18 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v19 >= v20 + 2))
          {
            __int128 v9 = v20[1];
            *uint64_t v19 = *v20;
            v19[1] = v9;
            int64_t v3 = v6;
          }
        }

uint64_t sub_100434F54(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = sub_100417DF8(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0) {
    goto LABEL_7;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1004353CC();
LABEL_7:
    uint64_t v16 = (void *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      uint64_t result = swift_release(*(void *)(v17 + 8 * v10));
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }

void sub_10043508C(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_100417D94(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }

  else
  {
    char v16 = v11;
    uint64_t v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      char v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        uint64_t v19 = (void *)(v18[7] + 32 * v12);
        sub_10040A648(v19);
        sub_10040DAE8(a1, v19);
        return;
      }

      goto LABEL_11;
    }

    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_10043556C();
      goto LABEL_7;
    }

    sub_1004348D4(v15, a4 & 1);
    unint64_t v20 = sub_100417D94(a2, a3);
    if ((v16 & 1) == (v21 & 1))
    {
      unint64_t v12 = v20;
      char v18 = *v5;
      if ((v16 & 1) != 0) {
        goto LABEL_8;
      }
LABEL_11:
      sub_1004351BC(v12, a2, a3, a1, v18);
      swift_bridgeObjectRetain(a3);
      return;
    }
  }

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

_OWORD *sub_1004351BC(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1LL << a1;
  unint64_t v6 = (void *)(a5[6] + 16 * a1);
  void *v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_10040DAE8(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

void *sub_100435224()
{
  uint64_t v1 = v0;
  sub_1003F5CB4(&qword_1009B9D88);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v2);
    uint64_t *v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }

void *sub_1004353CC()
{
  uint64_t v1 = v0;
  sub_1003F5CB4(&qword_1009B9D78);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v2);
    uint64_t *v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }

void sub_10043556C()
{
  uint64_t v1 = v0;
  sub_1003F5CB4((uint64_t *)&unk_1009BCE40);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    swift_release(v2);
LABEL_28:
    uint64_t *v1 = v4;
    return;
  }

  BOOL v25 = v1;
  uint64_t v5 = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }

uint64_t sub_100435750(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  if ((*v1 & 0xC000000000000001LL) != 0)
  {
    if (v4 < 0) {
      uint64_t v5 = *v1;
    }
    else {
      uint64_t v5 = v4 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v4);
    id v6 = a1;
    char v7 = __CocoaSet.contains(_:)();

    if ((v7 & 1) != 0)
    {
      uint64_t v8 = sub_1004366A0(v5, (uint64_t)v6);
      swift_bridgeObjectRelease(v4);
      return v8;
    }

uint64_t sub_10043592C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v7, v8);
  Swift::Int v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32 = v2;
  uint64_t v11 = *v2;
  uint64_t v12 = *(void *)(*v2 + 40);
  uint64_t v14 = sub_10040A2B0(&qword_1009B90D0, v13, (uint64_t)&unk_100718E98);
  swift_bridgeObjectRetain(v11);
  uint64_t v33 = a1;
  uint64_t v15 = dispatch thunk of Hashable._rawHashValue(seed:)(v12, v5, v14);
  uint64_t v16 = -1LL << *(_BYTE *)(v11 + 32);
  unint64_t v17 = v15 & ~v16;
  if (((*(void *)(v11 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v17) & 1) != 0)
  {
    uint64_t v30 = v6;
    uint64_t v31 = a2;
    uint64_t v18 = ~v16;
    uint64_t v19 = *(void *)(v6 + 72);
    while (1)
    {
      sub_1003F5FC8( *(void *)(v11 + 48) + v19 * v17,  (uint64_t)v10,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      uint64_t v20 = sub_10040A2B0( &qword_1009B90D8,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent,  (uint64_t)&unk_100718ED8);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v33, v5, v20);
      sub_1003F6050((uint64_t)v10, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
      if ((v21 & 1) != 0) {
        break;
      }
      unint64_t v17 = (v17 + 1) & v18;
      if (((*(void *)(v11 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v17) & 1) == 0)
      {
        swift_bridgeObjectRelease(v11);
        uint64_t v22 = 1LL;
        uint64_t v6 = v30;
        a2 = v31;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v22, 1LL, v5);
      }
    }

    swift_bridgeObjectRelease(v11);
    unint64_t v23 = v32;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v32);
    uint64_t v25 = *v23;
    uint64_t v34 = *v23;
    *unint64_t v23 = 0x8000000000000000LL;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1004011B0();
      uint64_t v25 = v34;
    }

    uint64_t v26 = *(void *)(v25 + 48) + v19 * v17;
    a2 = v31;
    sub_1003F600C(v26, v31, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
    sub_100437260(v17);
    uint64_t v27 = *v23;
    *unint64_t v23 = v34;
    swift_bridgeObjectRelease(v27);
    uint64_t v22 = 0LL;
    uint64_t v6 = v30;
  }

  else
  {
    swift_bridgeObjectRelease(v11);
    uint64_t v22 = 1LL;
  }

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v22, 1LL, v5);
}

Swift::Int sub_100435B5C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_1003F5CB4(&qword_1009BB0E0);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    uint64_t v32 = v2;
    uint64_t v33 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v8 = ~(-1LL << v7);
    }
    else {
      uint64_t v8 = -1LL;
    }
    unint64_t v9 = v8 & *(void *)(v3 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = v5 + 56;
    Swift::Int result = swift_retain(v3);
    int64_t v13 = 0LL;
    while (1)
    {
      if (v9)
      {
        unint64_t v16 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }

      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v18 >= v10) {
          goto LABEL_36;
        }
        unint64_t v19 = v33[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v10) {
            goto LABEL_36;
          }
          unint64_t v19 = v33[v13];
          if (!v19)
          {
            int64_t v13 = v18 + 2;
            if (v18 + 2 >= v10) {
              goto LABEL_36;
            }
            unint64_t v19 = v33[v13];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v10)
              {
LABEL_36:
                swift_release(v3);
                uint64_t v2 = v32;
                uint64_t v31 = 1LL << *(_BYTE *)(v3 + 32);
                if (v31 > 63) {
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *uint64_t v33 = -1LL << v31;
                }
                *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
                break;
              }

              unint64_t v19 = v33[v20];
              if (!v19)
              {
                while (1)
                {
                  int64_t v13 = v20 + 1;
                  if (__OFADD__(v20, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v13 >= v10) {
                    goto LABEL_36;
                  }
                  unint64_t v19 = v33[v13];
                  ++v20;
                  if (v19) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v13 = v20;
            }
          }
        }

Swift::Int sub_100435E38(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = *(void *)(*v2 + 24);
  }
  sub_1003F5CB4(a2);
  uint64_t v6 = static _SetStorage.resize(original:capacity:move:)(v4, v5, 1LL);
  uint64_t v7 = v6;
  if (*(void *)(v4 + 16))
  {
    uint64_t v31 = v3;
    uint64_t v8 = 1LL << *(_BYTE *)(v4 + 32);
    unint64_t v9 = (void *)(v4 + 56);
    if (v8 < 64) {
      uint64_t v10 = ~(-1LL << v8);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & *(void *)(v4 + 56);
    int64_t v12 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v13 = v6 + 56;
    Swift::Int result = swift_retain(v4);
    int64_t v15 = 0LL;
    while (1)
    {
      if (v11)
      {
        unint64_t v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v18 = v17 | (v15 << 6);
      }

      else
      {
        int64_t v19 = v15 + 1;
        if (__OFADD__(v15, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v19 >= v12) {
          goto LABEL_36;
        }
        unint64_t v20 = v9[v19];
        ++v15;
        if (!v20)
        {
          int64_t v15 = v19 + 1;
          if (v19 + 1 >= v12) {
            goto LABEL_36;
          }
          unint64_t v20 = v9[v15];
          if (!v20)
          {
            int64_t v15 = v19 + 2;
            if (v19 + 2 >= v12) {
              goto LABEL_36;
            }
            unint64_t v20 = v9[v15];
            if (!v20)
            {
              int64_t v21 = v19 + 3;
              if (v21 >= v12)
              {
LABEL_36:
                swift_release(v4);
                uint64_t v3 = v31;
                uint64_t v30 = 1LL << *(_BYTE *)(v4 + 32);
                if (v30 > 63) {
                  bzero((void *)(v4 + 56), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *unint64_t v9 = -1LL << v30;
                }
                *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
                break;
              }

              unint64_t v20 = v9[v21];
              if (!v20)
              {
                while (1)
                {
                  int64_t v15 = v21 + 1;
                  if (__OFADD__(v21, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v15 >= v12) {
                    goto LABEL_36;
                  }
                  unint64_t v20 = v9[v15];
                  ++v21;
                  if (v20) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v15 = v21;
            }
          }
        }

void sub_1004360D0(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v5 = a5;
  uint64_t v7 = *(void *)(a3 + 16);
  *(unint64_t *)((char *)a1 + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << a4) - 1;
  uint64_t v8 = v7 - 1;
  uint64_t v42 = a3 + 56;
  while (2)
  {
    uint64_t v39 = v8;
    do
    {
      while (1)
      {
        if ((*v5 & 0x8000000000000000LL) == 0)
        {
          int64_t v10 = v5[3];
          unint64_t v9 = v5[4];
          if (v9)
          {
            uint64_t v11 = (v9 - 1) & v9;
            unint64_t v12 = __clz(__rbit64(v9)) | (v10 << 6);
LABEL_7:
            uint64_t v13 = *(void **)(*(void *)(*v5 + 48LL) + 8 * v12);
            id v14 = v13;
            goto LABEL_8;
          }

          int64_t v32 = v10 + 1;
          if (__OFADD__(v10, 1LL))
          {
            __break(1u);
            goto LABEL_47;
          }

          int64_t v33 = (unint64_t)(v5[2] + 64LL) >> 6;
          if (v32 >= v33)
          {
            uint64_t v13 = 0LL;
            uint64_t v11 = 0LL;
            goto LABEL_8;
          }

          uint64_t v34 = v5[1];
          unint64_t v35 = *(void *)(v34 + 8 * v32);
          if (v35)
          {
LABEL_22:
            uint64_t v11 = (v35 - 1) & v35;
            unint64_t v12 = __clz(__rbit64(v35)) + (v32 << 6);
            int64_t v10 = v32;
            goto LABEL_7;
          }

          if (v10 + 2 < v33)
          {
            unint64_t v35 = *(void *)(v34 + 8 * (v10 + 2));
            if (v35)
            {
              int64_t v32 = v10 + 2;
              goto LABEL_22;
            }

            if (v10 + 3 >= v33)
            {
              uint64_t v13 = 0LL;
              uint64_t v11 = 0LL;
              v10 += 2LL;
              goto LABEL_8;
            }

            unint64_t v35 = *(void *)(v34 + 8 * (v10 + 3));
            if (v35)
            {
              int64_t v32 = v10 + 3;
              goto LABEL_22;
            }

            int64_t v32 = v10 + 4;
            if (v10 + 4 >= v33)
            {
              uint64_t v13 = 0LL;
              uint64_t v11 = 0LL;
              v10 += 3LL;
LABEL_8:
              v5[3] = v10;
              void v5[4] = v11;
              if (!v13) {
                goto LABEL_45;
              }
              goto LABEL_12;
            }

            unint64_t v35 = *(void *)(v34 + 8 * v32);
            if (v35) {
              goto LABEL_22;
            }
            int64_t v32 = v33 - 1;
            int64_t v37 = v10 + 5;
            while (v33 != v37)
            {
              unint64_t v35 = *(void *)(v34 + 8 * v37++);
              if (v35)
              {
                int64_t v32 = v37 - 1;
                goto LABEL_22;
              }
            }
          }

          uint64_t v13 = 0LL;
          uint64_t v11 = 0LL;
          int64_t v10 = v32;
          goto LABEL_8;
        }

        uint64_t v15 = __CocoaSet.Iterator.next()(a1);
        if (!v15
          || (uint64_t v16 = v15,
              uint64_t v43 = v15,
              uint64_t v17 = sub_10041D3C4(0LL, (unint64_t *)&unk_1009BC270, &OBJC_CLASS___IDSURI_ptr),
              swift_unknownObjectRetain(v16, v18),
              swift_dynamicCast(&v44, &v43, (char *)&type metadata for Swift.AnyObject + 8, v17, 7LL),
              uint64_t v13 = v44,
              swift_unknownObjectRelease(v16, v19),
              !v13))
        {
LABEL_45:
          swift_retain(a3);
          sub_100436444(a1, a2, v39, a3);
          return;
        }

Swift::Int sub_100436444(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    unint64_t v9 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release(v4);
    return (Swift::Int)v9;
  }

  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_1003F5CB4(&qword_1009B9D90);
  Swift::Int result = static _SetStorage.allocate(capacity:)(v5);
  unint64_t v9 = (void *)result;
  unint64_t v29 = a1;
  if (a2 < 1) {
    unint64_t v10 = 0LL;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0LL;
  Swift::Int v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }

    uint64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1LL)) {
      goto LABEL_39;
    }
    if (v15 >= a2) {
      goto LABEL_36;
    }
    unint64_t v16 = v29[v15];
    ++v11;
    if (!v16)
    {
      uint64_t v11 = v15 + 1;
      if (v15 + 1 >= a2) {
        goto LABEL_36;
      }
      unint64_t v16 = v29[v11];
      if (!v16)
      {
        uint64_t v11 = v15 + 2;
        if (v15 + 2 >= a2) {
          goto LABEL_36;
        }
        unint64_t v16 = v29[v11];
        if (!v16) {
          break;
        }
      }
    }

uint64_t sub_1004366A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRelease(*v3);
  uint64_t v6 = __CocoaSet.count.getter(a1);
  uint64_t v8 = swift_unknownObjectRetain(a1, v7);
  Swift::Int v9 = sub_1004338D4(v8, v6, &qword_1009B9D90, (unint64_t *)&unk_1009BC270, &OBJC_CLASS___IDSURI_ptr);
  Swift::Int v20 = v9;
  Swift::Int v10 = *(void *)(v9 + 40);
  swift_retain(v9);
  Swift::Int v11 = NSObject._rawHashValue(seed:)(v10);
  uint64_t v12 = -1LL << *(_BYTE *)(v9 + 32);
  unint64_t v13 = v11 & ~v12;
  if (((*(void *)(v9 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) != 0)
  {
    sub_10041D3C4(0LL, (unint64_t *)&unk_1009BC270, &OBJC_CLASS___IDSURI_ptr);
    id v14 = *(id *)(*(void *)(v9 + 48) + 8 * v13);
    char v15 = static NSObject.== infix(_:_:)(v14, a2);

    if ((v15 & 1) != 0)
    {
LABEL_6:
      swift_release(v9);
      Swift::Int v9 = *(void *)(*(void *)(v9 + 48) + 8 * v13);
      sub_1004370C0(v13);
      if ((static NSObject.== infix(_:_:)(a2, v9) & 1) != 0)
      {
        Swift::Int *v3 = v20;
        return v9;
      }

      __break(1u);
    }

    else
    {
      uint64_t v16 = ~v12;
      while (1)
      {
        unint64_t v13 = (v13 + 1) & v16;
        if (((*(void *)(v9 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) == 0) {
          break;
        }
        id v17 = *(id *)(*(void *)(v9 + 48) + 8 * v13);
        char v18 = static NSObject.== infix(_:_:)(v17, a2);

        if ((v18 & 1) != 0) {
          goto LABEL_6;
        }
      }
    }

    swift_release(v9);
    __break(1u);
  }

  uint64_t result = swift_release(v9);
  __break(1u);
  return result;
}

void sub_100436850()
{
  uint64_t v1 = v0;
  sub_1003F5CB4(&qword_1009BB0E0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    uint64_t *v1 = v4;
    return;
  }

  uint64_t v5 = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }

id sub_100436A00(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_1003F5CB4(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _SetStorage.copy(original:)(*v1);
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_28:
    id result = (id)swift_release(v3);
    *uint64_t v2 = v5;
    return result;
  }

  id result = (id)(v4 + 56);
  uint64_t v7 = v3 + 56;
  unint64_t v8 = (unint64_t)((1LL << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  int64_t v10 = 0LL;
  *(void *)(v5 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 56);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }

    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v19 >= v14) {
      goto LABEL_28;
    }
    unint64_t v20 = *(void *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v20 = *(void *)(v7 + 8 * v10);
      if (!v20)
      {
        int64_t v10 = v19 + 2;
        if (v19 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v20 = *(void *)(v7 + 8 * v10);
        if (!v20) {
          break;
        }
      }
    }

Swift::Int sub_100436BA0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_1003F5CB4(&qword_1009BB0E0);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    Swift::Int result = swift_release(v3);
LABEL_38:
    *uint64_t v2 = v6;
    return result;
  }

  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v8 = v3 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1LL << v7);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v3 + 56);
  char v31 = v2;
  int64_t v32 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = v5 + 56;
  Swift::Int result = swift_retain(v3);
  int64_t v13 = 0LL;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v13 << 6);
      goto LABEL_27;
    }

    int64_t v18 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v18 >= v32) {
      goto LABEL_36;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v18);
    ++v13;
    if (!v19)
    {
      int64_t v13 = v18 + 1;
      if (v18 + 1 >= v32) {
        goto LABEL_36;
      }
      unint64_t v19 = *(void *)(v8 + 8 * v13);
      if (!v19)
      {
        int64_t v13 = v18 + 2;
        if (v18 + 2 >= v32) {
          goto LABEL_36;
        }
        unint64_t v19 = *(void *)(v8 + 8 * v13);
        if (!v19) {
          break;
        }
      }
    }

Swift::Int sub_100436E4C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = *(void *)(*v2 + 24);
  }
  sub_1003F5CB4(a2);
  uint64_t v6 = static _SetStorage.resize(original:capacity:move:)(v4, v5, 0LL);
  uint64_t v7 = v6;
  if (!*(void *)(v4 + 16))
  {
    Swift::Int result = swift_release(v4);
LABEL_38:
    uint64_t *v3 = v7;
    return result;
  }

  char v31 = v3;
  uint64_t v8 = 1LL << *(_BYTE *)(v4 + 32);
  uint64_t v9 = v4 + 56;
  if (v8 < 64) {
    uint64_t v10 = ~(-1LL << v8);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v4 + 56);
  int64_t v12 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v13 = v6 + 56;
  Swift::Int result = swift_retain(v4);
  int64_t v15 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v17 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v18 = v17 | (v15 << 6);
      goto LABEL_27;
    }

    int64_t v19 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v19 >= v12) {
      goto LABEL_36;
    }
    unint64_t v20 = *(void *)(v9 + 8 * v19);
    ++v15;
    if (!v20)
    {
      int64_t v15 = v19 + 1;
      if (v19 + 1 >= v12) {
        goto LABEL_36;
      }
      unint64_t v20 = *(void *)(v9 + 8 * v15);
      if (!v20)
      {
        int64_t v15 = v19 + 2;
        if (v19 + 2 >= v12) {
          goto LABEL_36;
        }
        unint64_t v20 = *(void *)(v9 + 8 * v15);
        if (!v20) {
          break;
        }
      }
    }

unint64_t sub_1004370C0(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56LL;
  uint64_t v5 = -1LL << *(_BYTE *)(*v1 + 32LL);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain(*v1);
    uint64_t v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::Int v10 = *(void *)(v3 + 40);
        id v11 = *(id *)(*(void *)(v3 + 48) + 8 * v6);
        Swift::Int v12 = NSObject._rawHashValue(seed:)(v10);

        Swift::Int v13 = v12 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v2 >= v13)
          {
LABEL_16:
            uint64_t v16 = *(void *)(v3 + 48);
            unint64_t v17 = (void *)(v16 + 8 * v2);
            unint64_t v18 = (void *)(v16 + 8 * v6);
            if (v2 != v6 || (int64_t v2 = v6, v17 >= v18 + 1))
            {
              *unint64_t v17 = *v18;
              int64_t v2 = v6;
            }
          }
        }

        else if (v13 >= v9 || v2 >= v13)
        {
          goto LABEL_16;
        }

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << v2) - 1;
    Swift::Int result = swift_release(v3);
  }

  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << result) - 1;
  }

  uint64_t v19 = *(void *)(v3 + 16);
  BOOL v20 = __OFSUB__(v19, 1LL);
  uint64_t v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = v21;
    ++*(_DWORD *)(v3 + 36);
  }

  return result;
}

uint64_t sub_100437260(int64_t a1)
{
  uint64_t v35 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  uint64_t v3 = *(void *)(v35 - 8);
  uint64_t result = __chkstk_darwin(v4, v5);
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *v1;
  uint64_t v10 = *v1 + 56;
  uint64_t v11 = -1LL << *(_BYTE *)(*v1 + 32);
  unint64_t v12 = (a1 + 1) & ~v11;
  if (((1LL << v12) & *(void *)(v10 + 8 * (v12 >> 6))) != 0)
  {
    int64_t v33 = v1;
    uint64_t v13 = ~v11;
    swift_retain(v9);
    uint64_t v14 = _HashTable.previousHole(before:)(a1, v10, v13);
    uint64_t v34 = v10;
    if ((*(void *)(v10 + 8 * (v12 >> 6)) & (1LL << v12)) != 0)
    {
      unint64_t v15 = (v14 + 1) & v13;
      uint64_t v16 = *(void *)(v3 + 72);
      do
      {
        int64_t v17 = v16 * v12;
        sub_1003F5FC8( *(void *)(v9 + 48) + v16 * v12,  (uint64_t)v8,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        uint64_t v18 = *(void *)(v9 + 40);
        uint64_t v19 = sub_10040A2B0( &qword_1009B90D0,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent,  (uint64_t)&unk_100718E98);
        uint64_t v20 = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v35, v19);
        sub_1003F6050((uint64_t)v8, type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
        unint64_t v21 = v20 & v13;
        if (a1 >= (uint64_t)v15)
        {
        }

        else if (v21 < v15 && a1 < (uint64_t)v21)
        {
          goto LABEL_6;
        }

        uint64_t v24 = *(void *)(v9 + 48);
        int64_t v25 = v16 * a1;
        unint64_t v26 = v24 + v16 * a1;
        uint64_t v27 = v24 + v17;
        if (v16 * a1 < v17 || v26 >= v27 + v16)
        {
          swift_arrayInitWithTakeFrontToBack(v26, v27, 1LL, v35);
        }

        else
        {
          a1 = v12;
          if (v25 == v17) {
            goto LABEL_6;
          }
          swift_arrayInitWithTakeBackToFront(v26);
        }

        a1 = v12;
LABEL_6:
        unint64_t v12 = (v12 + 1) & v13;
      }

      while (((*(void *)(v34 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) != 0);
    }

    *(void *)(v34 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << a1) - 1;
    uint64_t result = swift_release(v9);
    uint64_t v1 = v33;
  }

  else
  {
    *(void *)(v10 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << a1) - 1;
  }

  uint64_t v28 = *v1;
  uint64_t v29 = *(void *)(*v1 + 16);
  BOOL v30 = __OFSUB__(v29, 1LL);
  uint64_t v31 = v29 - 1;
  if (v30)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v28 + swift_unknownObjectWeakDestroy(v0 + 16) = v31;
    ++*(_DWORD *)(v28 + 36);
  }

  return result;
}

void sub_1004374C4(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  __n128 v5 = v4;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  uint64_t v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_100435B5C(v11);
  }

  else
  {
    if (v10 > v9)
    {
      sub_100436850();
      goto LABEL_22;
    }

    sub_100436BA0(v11);
  }

  uint64_t v12 = *v4;
  Hasher.init(_seed:)(v29, *(void *)(*v4 + 40));
  String.hash(into:)(v29, a1, a2);
  Swift::Int v13 = Hasher._finalize()();
  uint64_t v14 = -1LL << *(_BYTE *)(v12 + 32);
  a3 = v13 & ~v14;
  uint64_t v15 = v12 + 56;
  if (((*(void *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) != 0)
  {
    uint64_t v16 = *(void *)(v12 + 48);
    int64_t v17 = (void *)(v16 + 16 * a3);
    uint64_t v18 = v17[1];
    BOOL v19 = *v17 == a1 && v18 == a2;
    if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0LL) & 1) != 0)
    {
LABEL_21:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }

    else
    {
      uint64_t v20 = ~v14;
      while (1)
      {
        a3 = (a3 + 1) & v20;
        if (((*(void *)(v15 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) == 0) {
          break;
        }
        unint64_t v21 = (void *)(v16 + 16 * a3);
        uint64_t v22 = v21[1];
        BOOL v23 = *v21 == a1 && v22 == a2;
        if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v21, v22, a1, a2, 0LL) & 1) != 0) {
          goto LABEL_21;
        }
      }
    }
  }

void sub_10043765C(uint64_t a1, unint64_t a2, char a3, uint64_t *a4, unint64_t *a5, void *a6)
{
  unint64_t v9 = v6;
  unint64_t v12 = *(void *)(*v6 + 16);
  unint64_t v13 = *(void *)(*v6 + 24);
  if (v13 > v12 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v14 = v12 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100435E38(v14, a4);
  }

  else
  {
    if (v13 > v12)
    {
      sub_100436A00(a4);
      goto LABEL_14;
    }

    sub_100436E4C(v14, a4);
  }

  uint64_t v15 = *v6;
  Swift::Int v16 = NSObject._rawHashValue(seed:)(*(void *)(*v6 + 40));
  uint64_t v17 = -1LL << *(_BYTE *)(v15 + 32);
  a2 = v16 & ~v17;
  if (((*(void *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v18 = sub_10041D3C4(0LL, a5, a6);
    id v19 = *(id *)(*(void *)(v15 + 48) + 8 * a2);
    char v20 = static NSObject.== infix(_:_:)(v19, a1);

    if ((v20 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v18);
      __break(1u);
    }

    else
    {
      uint64_t v21 = ~v17;
      while (1)
      {
        a2 = (a2 + 1) & v21;
        if (((*(void *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
          break;
        }
        id v22 = *(id *)(*(void *)(v15 + 48) + 8 * a2);
        char v23 = static NSObject.== infix(_:_:)(v22, a1);

        if ((v23 & 1) != 0) {
          goto LABEL_13;
        }
      }
    }
  }

Swift::Int sub_1004377EC(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain(a4);
    return v4;
  }

  sub_1003F5CB4(&qword_1009B9D88);
  Swift::Int result = static _DictionaryStorage.allocate(capacity:)(v5);
  Swift::Int v8 = result;
  uint64_t v31 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0LL;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0LL;
  Swift::Int v11 = result + 64;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
    }

    else
    {
      uint64_t v14 = v10 + 1;
      if (__OFADD__(v10, 1LL)) {
        goto LABEL_40;
      }
      if (v14 >= v31) {
        return v8;
      }
      unint64_t v15 = a1[v14];
      ++v10;
      if (!v15)
      {
        uint64_t v10 = v14 + 1;
        if (v14 + 1 >= v31) {
          return v8;
        }
        unint64_t v15 = a1[v10];
        if (!v15)
        {
          uint64_t v10 = v14 + 2;
          if (v14 + 2 >= v31) {
            return v8;
          }
          unint64_t v15 = a1[v10];
          if (!v15)
          {
            uint64_t v16 = v14 + 3;
            if (v16 >= v31) {
              return v8;
            }
            unint64_t v15 = a1[v16];
            if (!v15)
            {
              while (1)
              {
                uint64_t v10 = v16 + 1;
                if (__OFADD__(v16, 1LL)) {
                  goto LABEL_41;
                }
                if (v10 >= v31) {
                  return v8;
                }
                unint64_t v15 = a1[v10];
                ++v16;
                if (v15) {
                  goto LABEL_24;
                }
              }
            }

            uint64_t v10 = v16;
          }
        }
      }

void sub_100437A80(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  if ((a3 & 1) == 0)
  {
    if (a1 < 0 || -(-1LL << *(_BYTE *)(a4 + 32)) <= a1)
    {
      __break(1u);
    }

    else if (((*(void *)(a4 + 64 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a1) & 1) != 0)
    {
      if (*(_DWORD *)(a4 + 36) == (_DWORD)a2)
      {
        _HashTable.occupiedBucket(after:)(a1);
        return;
      }

      goto LABEL_12;
    }

    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  if (__CocoaDictionary.Index.age.getter(a1, a2) != *(_DWORD *)(a4 + 36))
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  uint64_t v6 = __CocoaDictionary.Index.key.getter(a1, a2);
  uint64_t v15 = v6;
  sub_100439DE0(a1, a2, 1);
  uint64_t v7 = sub_10041D3C4(0LL, (unint64_t *)&unk_1009BC270, &OBJC_CLASS___IDSURI_ptr);
  swift_unknownObjectRetain(v6, v8);
  swift_dynamicCast(&v16, &v15, (char *)&type metadata for Swift.AnyObject + 8, v7, 7LL);
  unint64_t v9 = v16;
  swift_unknownObjectRelease(v6, v10);
  sub_100433024((uint64_t)v9);
  char v12 = v11;

  if ((v12 & 1) != 0)
  {
    uint64_t v13 = __CocoaDictionary.Index.dictionary.getter(a1, a2);
    __CocoaDictionary.index(after:)(a1, a2, v13);
    sub_1004398F4(a1, a2, 1);
    swift_unknownObjectRelease(v13, v14);
    return;
  }

void sub_100437C1C(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  unint64_t v6 = a1;
  if ((a4 & 0xC000000000000001LL) == 0)
  {
    if ((a3 & 1) != 0) {
      goto LABEL_13;
    }
    if (a1 < 0 || 1LL << *(_BYTE *)(a4 + 32) <= a1)
    {
      __break(1u);
    }

    else if (((*(void *)(a4 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8LL) + 64) >> a1) & 1) != 0)
    {
      if (*(_DWORD *)(a4 + 36) == (_DWORD)a2)
      {
LABEL_15:
        id v19 = *(id *)(*(void *)(a4 + 48) + 8 * v6);
        return;
      }

      __break(1u);
LABEL_13:
      if (__CocoaDictionary.Index.age.getter(a1, a2) == *(_DWORD *)(a4 + 36))
      {
        uint64_t v12 = __CocoaDictionary.Index.key.getter(v6, a2);
        uint64_t v20 = v12;
        uint64_t v13 = sub_10041D3C4(0LL, (unint64_t *)&unk_1009BC270, &OBJC_CLASS___IDSURI_ptr);
        swift_unknownObjectRetain(v12, v14);
        swift_dynamicCast(&v21, &v20, (char *)&type metadata for Swift.AnyObject + 8, v13, 7LL);
        uint64_t v15 = v21;
        swift_unknownObjectRelease(v12, v16);
        unint64_t v6 = sub_100433024((uint64_t)v15);
        char v18 = v17;

        if ((v18 & 1) != 0) {
          goto LABEL_15;
        }
LABEL_19:
        __break(1u);
        goto LABEL_20;
      }

uint64_t sub_100437DD8(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0LL;
    return __clz(__rbit64(v1)) + v2;
  }

  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1LL << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64LL;
    return __clz(__rbit64(v1)) + v2;
  }

  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 80);
  if (v1)
  {
    uint64_t v2 = 128LL;
    return __clz(__rbit64(v1)) + v2;
  }

  unint64_t v1 = *(void *)(a1 + 88);
  if (v1)
  {
    uint64_t v2 = 192LL;
    return __clz(__rbit64(v1)) + v2;
  }

  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 4) {
    unint64_t v7 = 4LL;
  }
  unint64_t v8 = v7 - 4;
  uint64_t v9 = (unint64_t *)(a1 + 96);
  uint64_t v2 = 192LL;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64LL;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }

  return v3;
}

uint64_t sub_100437E88(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0LL;
    return __clz(__rbit64(v1)) + v2;
  }

  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1LL << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64LL;
    return __clz(__rbit64(v1)) + v2;
  }

  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128LL;
    return __clz(__rbit64(v1)) + v2;
  }

  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3LL;
  }
  unint64_t v8 = v7 - 3;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128LL;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64LL;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }

  return v3;
}

int64_t sub_100437F28(int64_t result, int a2, char a3, uint64_t a4)
{
  if ((a3 & 1) != 0) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (Swift::Int result = 1LL << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }

  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }

  unint64_t v8 = v7 & (-2LL << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0LL;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }

  return result;
}

void sub_10043800C(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  unint64_t v7 = a1;
  if ((a4 & 0xC000000000000001LL) == 0)
  {
    if ((a3 & 1) != 0) {
      goto LABEL_13;
    }
    if (a1 < 0 || 1LL << *(_BYTE *)(a4 + 32) <= a1)
    {
      __break(1u);
    }

    else if (((*(void *)(a4 + (((unint64_t)a1 >> 3) & 0xFFFFFFFFFFFFF8LL) + 56) >> a1) & 1) != 0)
    {
      if (*(_DWORD *)(a4 + 36) == (_DWORD)a2) {
        goto LABEL_20;
      }
      __break(1u);
LABEL_13:
      if (__CocoaSet.Index.age.getter(a1, a2) == *(_DWORD *)(a4 + 36))
      {
        uint64_t v13 = __CocoaSet.Index.element.getter(v7, a2);
        uint64_t v25 = v13;
        uint64_t v14 = type metadata accessor for IDSGroupEncryptionControllerMember();
        swift_unknownObjectRetain(v13, v15);
        swift_dynamicCast(&v26, &v25, (char *)&type metadata for Swift.AnyObject + 8, v14, 7LL);
        unint64_t v4 = v26;
        swift_unknownObjectRelease(v13, v16);
        Swift::Int v17 = NSObject._rawHashValue(seed:)(*(void *)(a4 + 40));
        uint64_t v18 = -1LL << *(_BYTE *)(a4 + 32);
        unint64_t v7 = v17 & ~v18;
        if (((*(void *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v7) & 1) != 0)
        {
          id v19 = *(id *)(*(void *)(a4 + 48) + 8 * v7);
          char v20 = static NSObject.== infix(_:_:)(v19, v4);

          if ((v20 & 1) == 0)
          {
            uint64_t v21 = ~v18;
            do
            {
              unint64_t v7 = (v7 + 1) & v21;
              if (((*(void *)(a4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v7) & 1) == 0) {
                goto LABEL_24;
              }
              id v22 = *(id *)(*(void *)(a4 + 48) + 8 * v7);
              char v23 = static NSObject.== infix(_:_:)(v22, v4);
            }

            while ((v23 & 1) == 0);
          }

LABEL_20:
          id v24 = *(id *)(*(void *)(a4 + 48) + 8 * v7);
          return;
        }

uint64_t sub_100438254@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  if (result < 0 || (uint64_t v4 = result, 1LL << *(_BYTE *)(a3 + 32) <= result))
  {
    __break(1u);
    goto LABEL_7;
  }

  if (((*(void *)(a3 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8LL) + 56) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  if (*(_DWORD *)(a3 + 36) == a2)
  {
    uint64_t v6 = *(void *)(a3 + 48);
    uint64_t v7 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
    return sub_1003F5FC8( v6 + *(void *)(*(void *)(v7 - 8) + 72LL) * v4,  a4,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent);
  }

uint64_t sub_1004382EC(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0LL;
    return __clz(__rbit64(v1)) + v2;
  }

  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1LL << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64LL;
    return __clz(__rbit64(v1)) + v2;
  }

  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2LL;
  }
  unint64_t v8 = v7 - 2;
  uint64_t v9 = (unint64_t *)(a1 + 72);
  uint64_t v2 = 64LL;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64LL;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }

  return v3;
}

uint64_t sub_100438374(uint64_t a1)
{
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 >= 0) {
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    return __CocoaDictionary.startIndex.getter(a1);
  }

  unint64_t v2 = *(void *)(a1 + 64);
  if (v2)
  {
    uint64_t v3 = 0LL;
    return __clz(__rbit64(v2)) + v3;
  }

  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v1 = 1LL << v5;
  if (v6 < 7) {
    return v1;
  }
  unint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    uint64_t v3 = 64LL;
    return __clz(__rbit64(v2)) + v3;
  }

  unint64_t v7 = (unint64_t)(v1 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2LL;
  }
  unint64_t v8 = v7 - 2;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v3 = 64LL;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v2 = v10;
    --v8;
    v3 += 64LL;
    if (v10) {
      return __clz(__rbit64(v2)) + v3;
    }
  }

  return v1;
}

void sub_100438434(void *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  unint64_t v7 = a2;
  if ((a5 & 0xC000000000000001LL) == 0)
  {
    if ((a4 & 1) != 0) {
      goto LABEL_13;
    }
    if (a2 < 0 || 1LL << *(_BYTE *)(a5 + 32) <= a2)
    {
      __break(1u);
    }

    else if (((*(void *)(a5 + (((unint64_t)a2 >> 3) & 0xFFFFFFFFFFFFF8LL) + 64) >> a2) & 1) != 0)
    {
      if (*(_DWORD *)(a5 + 36) == (_DWORD)a3)
      {
LABEL_15:
        unint64_t v26 = *(void **)(*(void *)(a5 + 48) + 8 * v7);
        uint64_t v27 = *(void *)(*(void *)(a5 + 56) + 8 * v7);
        *a1 = v27;
        v26;
        swift_retain(v27);
        return;
      }

      __break(1u);
LABEL_13:
      if (__CocoaDictionary.Index.age.getter(a2, a3) == *(_DWORD *)(a5 + 36))
      {
        uint64_t v19 = __CocoaDictionary.Index.key.getter(v7, a3);
        uint64_t v28 = v19;
        uint64_t v20 = sub_10041D3C4(0LL, (unint64_t *)&unk_1009BC270, &OBJC_CLASS___IDSURI_ptr);
        swift_unknownObjectRetain(v19, v21);
        swift_dynamicCast(&v29, &v28, (char *)&type metadata for Swift.AnyObject + 8, v20, 7LL);
        id v22 = v29;
        swift_unknownObjectRelease(v19, v23);
        unint64_t v7 = sub_100433024((uint64_t)v22);
        char v25 = v24;

        if ((v25 & 1) != 0) {
          goto LABEL_15;
        }
LABEL_20:
        __break(1u);
        goto LABEL_21;
      }

unint64_t sub_100438654(void *a1)
{
  uint64_t v1 = a1[2];
  if (!v1) {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  sub_1003F5CB4(&qword_1009B9D78);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v1);
  uint64_t v5 = a1[4];
  uint64_t v4 = a1[5];
  unint64_t result = sub_100417DF8(v5);
  if ((v7 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_retain(v4);
    return (unint64_t)v3;
  }

  unint64_t v8 = a1 + 7;
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v9 = 8 * result;
    *(void *)(v3[6] + v9) = v5;
    *(void *)(v3[7] + v9) = v4;
    uint64_t v10 = v3[2];
    BOOL v11 = __OFADD__(v10, 1LL);
    uint64_t v12 = v10 + 1;
    if (v11) {
      break;
    }
    v3[2] = v12;
    if (!--v1) {
      goto LABEL_8;
    }
    uint64_t v13 = v8 + 2;
    uint64_t v5 = *(v8 - 1);
    uint64_t v14 = *v8;
    swift_retain(v4);
    unint64_t result = sub_100417DF8(v5);
    unint64_t v8 = v13;
    uint64_t v4 = v14;
    if ((v15 & 1) != 0) {
      goto LABEL_7;
    }
  }

  __break(1u);
  return result;
}

id sub_100438750( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v16 = v8;
  sub_10048ADB4(2u);
  uint64_t v17 = &v16[OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_delegate];
  *((void *)v17 + 1) = 0LL;
  swift_unknownObjectWeakInit(v17, 0LL);
  uint64_t v18 = OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_participantsById;
  *(void *)&v16[v18] = sub_100438654(_swiftEmptyArrayStorage);
  uint64_t v19 = OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_membersByURI;
  *(void *)&v16[v19] = sub_1004279B0((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v20 = &v16[OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_desiredPublicIdentity];
  uint64_t v21 = type metadata accessor for IDSGroupEncryptionDesiredPreKeyMaterialSet(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56LL))(v20, 1LL, 1LL, v21);
  uint64_t v22 = OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_lock;
  uint64_t v23 = sub_1003F5CB4((uint64_t *)&unk_1009B9860);
  uint64_t v24 = swift_allocObject(v23, 20LL, 7LL);
  *(_DWORD *)(v24 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
  *(void *)&v16[v22] = v24;
  char v25 = &v16[OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_cachedKeyPropagationProvider];
  *((void *)v25 + 1) = 0LL;
  swift_unknownObjectWeakInit(v25, 0LL);
  unint64_t v26 = &v16[OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_groupID];
  *(void *)unint64_t v26 = a1;
  *((void *)v26 + 1) = a2;
  uint64_t v27 = &v16[OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_sessionID];
  *(void *)uint64_t v27 = a3;
  *((void *)v27 + 1) = a4;
  *(void *)&v16[OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_pushHandler] = a7;
  sub_100401ACC( (uint64_t)a8,  (uint64_t)&v16[OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_cryptoHandler]);
  swift_beginAccess(v25, v33, 1LL, 0LL);
  *((void *)v25 + 1) = a6;
  swift_unknownObjectWeakAssign(v25, a5);
  swift_unknownObjectRetain(a7, v28);

  v32.receiver = v16;
  v32.super_class = (Class)type metadata accessor for IDSGroupPushMaterialExchangeController(0LL);
  id v29 = objc_msgSendSuper2(&v32, "init");
  sub_10040A648(a8);
  return v29;
}

uint64_t sub_100438928(unint64_t *a1, unint64_t *a2, void *a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = sub_10041D3C4(255LL, a2, a3);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v5);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t type metadata accessor for IDSGroupPushMaterialExchangeMember(uint64_t a1)
{
  return sub_100402020( a1,  (uint64_t *)&unk_1009C1990,  (uint64_t)&nominal type descriptor for IDSGroupPushMaterialExchangeMember);
}

uint64_t sub_10043897C(uint64_t a1, uint64_t a2)
{
  return sub_10042B158(a2, *(void **)(v2 + 16));
}

uint64_t sub_100438988(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = Set.init(minimumCapacity:)(v2, &type metadata for String, &protocol witness table for String);
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = *v4;
      swift_bridgeObjectRetain(*v4);
      sub_10043316C(v7, v5, v6);
      swift_bridgeObjectRelease(v7[1]);
      v4 += 2;
      --v2;
    }

    while (v2);
    return v8;
  }

  return result;
}

uint64_t sub_100438A1C(uint64_t a1, unint64_t *a2, void *a3, unint64_t *a4, uint64_t *a5)
{
  unint64_t v10 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v21 = a1;
    }
    else {
      uint64_t v21 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter(v21);
    swift_bridgeObjectRelease(a1);
  }

  else
  {
    uint64_t v11 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v12 = sub_10041D3C4(0LL, a2, a3);
  uint64_t v13 = sub_100438928(a4, a2, a3);
  uint64_t result = Set.init(minimumCapacity:)(v11, v12, v13);
  uint64_t v23 = result;
  if (v10)
  {
    if (a1 < 0) {
      uint64_t v16 = a1;
    }
    else {
      uint64_t v16 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter(v16);
    uint64_t result = swift_bridgeObjectRelease(a1);
    if (!v15) {
      return v23;
    }
  }

  else
  {
    uint64_t v15 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v15) {
      return v23;
    }
  }

  if (v15 >= 1)
  {
    if ((a1 & 0xC000000000000001LL) != 0)
    {
      for (uint64_t i = 0LL; i != v15; ++i)
      {
        uint64_t v18 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
        sub_100433318((Swift::Int *)&v22, v18, a2, a3, a5);
      }
    }

    else
    {
      uint64_t v19 = (void **)(a1 + 32);
      do
      {
        uint64_t v20 = *v19++;
        sub_100433318((Swift::Int *)&v22, v20, a2, a3, a5);

        --v15;
      }

      while (v15);
    }

    return v23;
  }

  __break(1u);
  return result;
}

uint64_t sub_100438BB0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }

  else
  {
    if (v4 < 0)
    {
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
      goto LABEL_9;
    }

    unint64_t v6 = a4 + 8 * a1 + 32;
    unint64_t v7 = a3 + 8 * v4;
    if (v6 >= v7 || v6 + 8 * v4 <= a3)
    {
      sub_1003F5CB4(&qword_1009B9A28);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_9:
  __break(1u);
  return result;
}

Swift::Int sub_100438CB8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_1003F5CB4(&qword_1009BB0E0);
    uint64_t v3 = static _SetStorage.allocate(capacity:)(v1);
    uint64_t v4 = 0LL;
    uint64_t v5 = v3 + 56;
    uint64_t v27 = a1 + 32;
    while (1)
    {
      unint64_t v6 = (uint64_t *)(v27 + 16 * v4);
      uint64_t v8 = *v6;
      uint64_t v7 = v6[1];
      Hasher.init(_seed:)(v28, *(void *)(v3 + 40));
      swift_bridgeObjectRetain(v7);
      String.hash(into:)(v28, v8, v7);
      Swift::Int result = Hasher._finalize()();
      uint64_t v10 = -1LL << *(_BYTE *)(v3 + 32);
      unint64_t v11 = result & ~v10;
      unint64_t v12 = v11 >> 6;
      uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
      uint64_t v14 = 1LL << v11;
      if (((1LL << v11) & v13) != 0)
      {
        uint64_t v15 = *(void *)(v3 + 48);
        uint64_t v16 = (void *)(v15 + 16 * v11);
        uint64_t v17 = v16[1];
        BOOL v18 = *v16 == v8 && v17 == v7;
        if (v18 || (Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v8, v7, 0LL), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease(v7);
          goto LABEL_4;
        }

        uint64_t v19 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v19;
          unint64_t v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
          uint64_t v14 = 1LL << v11;
          if ((v13 & (1LL << v11)) == 0) {
            break;
          }
          uint64_t v20 = (void *)(v15 + 16 * v11);
          uint64_t v21 = v20[1];
          if (*v20 != v8 || v21 != v7)
          {
            Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v8, v7, 0LL);
            if ((result & 1) == 0) {
              continue;
            }
          }

          goto LABEL_3;
        }
      }

      *(void *)(v5 + 8 * v12) = v14 | v13;
      uint64_t v23 = (void *)(*(void *)(v3 + 48) + 16 * v11);
      *uint64_t v23 = v8;
      v23[1] = v7;
      uint64_t v24 = *(void *)(v3 + 16);
      BOOL v25 = __OFADD__(v24, 1LL);
      uint64_t v26 = v24 + 1;
      if (v25)
      {
        __break(1u);
        return result;
      }

      *(void *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = v26;
LABEL_4:
      if (++v4 == v1) {
        return v3;
      }
    }
  }

  return (Swift::Int)&_swiftEmptySetSingleton;
}

uint64_t sub_100438E58(uint64_t result, uint64_t a2, uint64_t a3, uint64_t (*a4)(id, uint64_t))
{
  uint64_t v20 = (unint64_t *)result;
  uint64_t v21 = 0LL;
  int64_t v6 = 0LL;
  uint64_t v7 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v8 = -1LL;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  unint64_t v9 = v8 & *(void *)(a3 + 64);
  int64_t v23 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      unint64_t v10 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v11 = v10 | (v6 << 6);
      goto LABEL_5;
    }

    int64_t v15 = v6 + 1;
    if (__OFADD__(v6, 1LL))
    {
      __break(1u);
      goto LABEL_26;
    }

    if (v15 >= v23) {
      return sub_1004377EC(v20, a2, v21, a3);
    }
    unint64_t v16 = *(void *)(v22 + 8 * v15);
    ++v6;
    if (!v16)
    {
      int64_t v6 = v15 + 1;
      if (v15 + 1 >= v23) {
        return sub_1004377EC(v20, a2, v21, a3);
      }
      unint64_t v16 = *(void *)(v22 + 8 * v6);
      if (!v16)
      {
        int64_t v6 = v15 + 2;
        if (v15 + 2 >= v23) {
          return sub_1004377EC(v20, a2, v21, a3);
        }
        unint64_t v16 = *(void *)(v22 + 8 * v6);
        if (!v16) {
          break;
        }
      }
    }

uint64_t sub_10043904C(uint64_t a1, uint64_t (*a2)(id, uint64_t), uint64_t a3, __n128 a4, __n128 a5)
{
  char v9 = *(_BYTE *)(a1 + 32);
  unsigned int v10 = v9 & 0x3F;
  unint64_t v11 = (1LL << v9) + 63;
  uint64_t v12 = v11 >> 6;
  size_t v13 = 8 * (v11 >> 6);
  if (v10 <= 0xD || (swift_stdlib_isStackAllocationSafe(8 * (v11 >> 6), 8LL) & 1) != 0)
  {
    __chkstk_darwin(a4, a5);
    bzero((char *)&v17 - ((v13 + 15) & 0x3FFFFFFFFFFFFFF0LL), v13);
    uint64_t v14 = sub_100438E58((uint64_t)&v17 - ((v13 + 15) & 0x3FFFFFFFFFFFFFF0LL), v12, a1, a2);
    if (v5) {
      swift_willThrow(v14);
    }
    else {
      return v14;
    }
  }

  else
  {
    int64_t v15 = (void *)swift_slowAlloc(v13, -1LL);
    bzero(v15, v13);
    a3 = sub_100438E58((uint64_t)v15, v12, a1, a2);
    swift_slowDealloc(v15, -1LL, -1LL);
  }

  return a3;
}

Swift::Int sub_1004391BC( uint64_t a1, uint64_t (*a2)(id, uint64_t), uint64_t a3, __n128 a4, __n128 a5)
{
  uint64_t v6 = a1;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    uint64_t v7 = &_swiftEmptyDictionarySingleton;
    uint64_t v39 = &_swiftEmptyDictionarySingleton;
    if (a1 >= 0) {
      a1 &= 0xFFFFFFFFFFFFFF8uLL;
    }
    uint64_t v8 = __CocoaDictionary.makeIterator()(a1);
    uint64_t v9 = __CocoaDictionary.Iterator.next()();
    if (v9)
    {
      uint64_t v11 = v9;
      uint64_t v12 = v10;
      uint64_t v35 = v8;
      uint64_t v13 = sub_10041D3C4(0LL, (unint64_t *)&unk_1009BC270, &OBJC_CLASS___IDSURI_ptr);
      do
      {
        uint64_t v36 = v11;
        swift_dynamicCast(&v37, &v36, (char *)&type metadata for Swift.AnyObject + 8, v13, 7LL);
        uint64_t v36 = v12;
        uint64_t v17 = type metadata accessor for IDSGroupPushMaterialExchangeMember(0LL);
        swift_dynamicCast(&v38, &v36, (char *)&type metadata for Swift.AnyObject + 8, v17, 7LL);
        uint64_t v18 = v38;
        id v19 = v37;
        swift_retain(v18);
        char v20 = a2(v19, v18);

        swift_release(v18);
        if ((v20 & 1) != 0)
        {
          uint64_t v21 = v39;
          unint64_t v22 = v39[2];
          if (v39[3] <= v22)
          {
            uint64_t v24 = v22 + 1;
            id v25 = v19;
            swift_retain(v18);
            sub_10043434C(v24, 1LL);
            uint64_t v21 = v39;
          }

          else
          {
            id v23 = v19;
            swift_retain(v18);
          }

          Swift::Int result = NSObject._rawHashValue(seed:)(v21[5]);
          uint64_t v27 = v21 + 8;
          uint64_t v28 = -1LL << *((_BYTE *)v21 + 32);
          unint64_t v29 = result & ~v28;
          unint64_t v30 = v29 >> 6;
          if (((-1LL << v29) & ~v21[(v29 >> 6) + 8]) != 0)
          {
            unint64_t v14 = __clz(__rbit64((-1LL << v29) & ~v21[(v29 >> 6) + 8])) | v29 & 0x7FFFFFFFFFFFFFC0LL;
          }

          else
          {
            char v31 = 0;
            unint64_t v32 = (unint64_t)(63 - v28) >> 6;
            do
            {
              if (++v30 == v32 && (v31 & 1) != 0)
              {
                __break(1u);
                return result;
              }

              BOOL v33 = v30 == v32;
              if (v30 == v32) {
                unint64_t v30 = 0LL;
              }
              v31 |= v33;
              uint64_t v34 = v27[v30];
            }

            while (v34 == -1);
            unint64_t v14 = __clz(__rbit64(~v34)) + (v30 << 6);
          }

          *(void *)((char *)v27 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
          uint64_t v15 = 8 * v14;
          *(void *)(v21[6] + v15) = v19;
          *(void *)(v21[7] + v15) = v18;
          ++v21[2];
        }

        swift_release(v18);

        uint64_t v11 = __CocoaDictionary.Iterator.next()();
        uint64_t v12 = v16;
      }

      while (v11);
      uint64_t v7 = v39;
      uint64_t v8 = v35;
    }

    id v37 = 0LL;
    uint64_t v38 = 0LL;
    sub_10041D3BC(v8 | 0x8000000000000000LL);
  }

  else
  {
    uint64_t v7 = (void *)sub_10043904C(a1, a2, a3, a4, a5);
    swift_bridgeObjectRelease(v6);
  }

  return (Swift::Int)v7;
}

uint64_t sub_100439494()
{
  uint64_t v1 = type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;

  sub_100402A84(*(void *)(v0 + 24), *(void *)(v0 + 32));
  uint64_t v7 = v0 + v4;

  uint64_t v8 = v0 + v4 + *(int *)(v1 + 24);
  uint64_t v9 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(v8, v9);

  return swift_deallocObject(v0, v6 + 8, v5);
}

void sub_100439560()
{
  uint64_t v1 = type metadata accessor for IDSGroupEncryptionPublicIdentity(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 40LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = v0[2];
  uint64_t v5 = v0[3];
  unint64_t v6 = v0[4];
  id v23 = (char *)v0 + v3;
  uint64_t v24 = *(void *)((char *)v0 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFF8LL));
  uint64_t v7 = *(void **)(v4 + OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_pushHandler);
  uint64_t v8 = sub_1003F5CB4(&qword_1009B9A10);
  uint64_t inited = swift_initStackObject(v8, v25);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_100718C70;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSFanoutMessageGroupIDKey);
  *(void *)(inited + 40) = v10;
  uint64_t v11 = *(void *)(v4 + OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_groupID);
  uint64_t v12 = *(void *)(v4 + OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_groupID + 8);
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 4_Block_object_dispose(va, 8) = v11;
  *(void *)(inited + 56) = v12;
  *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSDSessionMessageSessionID);
  *(void *)(inited + 8_Block_object_dispose(va, 8) = v13;
  uint64_t v15 = *(void *)(v4 + OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_sessionID);
  uint64_t v14 = *(void *)(v4 + OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_sessionID + 8);
  *(void *)(inited + cut_arc_os_release(v1 - 120) = &type metadata for String;
  *(void *)(inited + 96) = v15;
  *(void *)(inited + 104) = v14;
  *(void *)(inited + 12_Block_object_dispose(va, 8) = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSDSessionMessageRealTimeEncryptionPublicKey);
  *(void *)(inited + 136) = v16;
  *(void *)(inited + 16_Block_object_dispose(va, 8) = &type metadata for Data;
  *(void *)(inited + 144) = v5;
  *(void *)(inited + 152) = v6;
  *(void *)(inited + 176) = static String._unconditionallyBridgeFromObjectiveC(_:)(IDSDSessionMessageRealTimeEncryptionWrapModeKey);
  *(void *)(inited + 184) = v17;
  LOBYTE(v1) = v23[*(int *)(v1 + 32)];
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v14);
  sub_1004028CC(v5, v6);
  uint64_t v18 = sub_1004D2F38(v1);
  *(void *)(inited + 2swift_unknownObjectWeakDestroy(v0 + 16) = &type metadata for Int;
  *(void *)(inited + 192) = v18;
  unint64_t v19 = sub_100427AB8(inited);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v19);
  NSString v21 = String._bridgeToObjectiveC()();
  NSString v22 = String._bridgeToObjectiveC()();
  [v7 sendPreKeyMessage:isa toDestination:v24 forGroup:v21 sessionID:v22];
}

uint64_t sub_100439768(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100439778(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100439780(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_1004028CC(result, a2);
  }
  return result;
}

unint64_t sub_100439794()
{
  unint64_t result = qword_1009BAC50;
  if (!qword_1009BAC50)
  {
    uint64_t v1 = sub_100401A88((uint64_t *)&unk_1009B9870);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1009BAC50);
  }

  return result;
}

uint64_t sub_1004397E0()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 24));
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_100439814()
{
  uint64_t v1 = *(void *)(v0 + 32);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  NSString v3 = String._bridgeToObjectiveC()();
  NSString v4 = String._bridgeToObjectiveC()();
  [v2 sendKeyMaterialRequestMessage:isa toDestination:v1 forGroup:v3 sessionID:v4];
}

uint64_t sub_1004398D0()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1004398F4(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return swift_bridgeObjectRelease(result);
  }
  return result;
}

uint64_t sub_100439900()
{
  swift_release(*(void *)(v0 + 24));
  swift_release(*(void *)(v0 + 40));
  swift_release(*(void *)(v0 + 48));
  swift_release(*(void *)(v0 + 56));
  swift_release(*(void *)(v0 + 64));
  swift_release(*(void *)(v0 + 72));
  return swift_deallocObject(v0, 80LL, 7LL);
}

void sub_10043995C()
{
  uint64_t v2 = (char *)v0[2];
  uint64_t v1 = v0[3];
  uint64_t v3 = v0[5];
  uint64_t v5 = v0[6];
  uint64_t v4 = v0[7];
  uint64_t v7 = v0[8];
  uint64_t v6 = v0[9];
  uint64_t v16 = *(void **)&v2[OBJC_IVAR____TtC17identityservicesd38IDSGroupPushMaterialExchangeController_pushHandler];
  uint64_t v17 = v0[4];
  swift_beginAccess(v1 + 16, v20, 0LL, 0LL);
  uint64_t v8 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain(v8);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v8);
  NSString v14 = String._bridgeToObjectiveC()();
  NSString v9 = String._bridgeToObjectiveC()();
  uint64_t v10 = (void *)swift_allocObject(&unk_100905AA8, 72LL, 7LL);
  void v10[2] = v3;
  v10[3] = v2;
  void v10[4] = v5;
  v10[5] = v4;
  v10[6] = v7;
  void v10[7] = v6;
  v10[8] = v1;
  aBlock[4] = sub_100439E40;
  unint64_t v19 = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10042F3F8;
  aBlock[3] = &unk_100905AC0;
  uint64_t v11 = _Block_copy(aBlock);
  uint64_t v12 = v19;
  swift_retain(v3);
  uint64_t v13 = v2;
  swift_retain(v5);
  swift_retain(v4);
  swift_retain(v7);
  swift_retain(v6);
  swift_retain(v1);
  swift_release(v12);
  [v16 sendKeyMaterialMessage:isa toDestination:v17 forGroup:v14 sessionID:v9 completion:v11];
  _Block_release(v11);
}

uint64_t sub_100439B1C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)a1 + 184LL))(*(void *)(v1 + 16)) & 1;
}

uint64_t type metadata accessor for IDSGroupPushMaterialExchangeController(uint64_t a1)
{
  return sub_100402020( a1,  qword_1009C19A0,  (uint64_t)&nominal type descriptor for IDSGroupPushMaterialExchangeController);
}

uint64_t sub_100439B6C()
{
  return type metadata accessor for IDSGroupPushMaterialExchangeParticipantKeyMaterialState(0LL);
}

void sub_100439B74(uint64_t a1)
{
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(v2 - 8) + 64LL;
    v4[1] = v4[0];
    void v4[2] = v4[0];
    void v4[3] = &unk_100718D28;
    swift_updateClassMetadata2(a1, 256LL, 4LL, v4, a1 + 80);
  }

uint64_t type metadata accessor for IDSGroupPushMaterialExchangeParticipant()
{
  return objc_opt_self(&OBJC_CLASS____TtC17identityservicesd39IDSGroupPushMaterialExchangeParticipant);
}

uint64_t sub_100439C1C()
{
  return type metadata accessor for IDSGroupPushMaterialExchangeMember(0LL);
}

void sub_100439C24(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  sub_100439CB0( 319LL,  (unint64_t *)&unk_1009B9CA8,  type metadata accessor for IDSGroupEncryptionDesiredPreKeyMaterialSet);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(v2 - 8) + 64LL;
    swift_updateClassMetadata2(a1, 256LL, 2LL, v4, a1 + 80);
  }

void sub_100439CB0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  if (!*a2)
  {
    uint64_t v5 = a3(255LL);
    unint64_t v6 = type metadata accessor for Optional(a1, v5);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }

uint64_t sub_100439CFC()
{
  return type metadata accessor for IDSGroupPushMaterialExchangeController(0LL);
}

void sub_100439D04(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger(319LL);
  if (v3 <= 0x3F)
  {
    v6[0] = *(void *)(v2 - 8) + 64LL;
    v6[1] = &unk_100718E28;
    _BYTE v6[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v6[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    sub_100439CB0( 319LL,  (unint64_t *)&unk_1009B9CA8,  type metadata accessor for IDSGroupEncryptionDesiredPreKeyMaterialSet);
    if (v5 <= 0x3F)
    {
      void v6[4] = *(void *)(v4 - 8) + 64LL;
      void v6[5] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[6] = &unk_100718E40;
      v6[7] = &unk_100718E40;
      v6[8] = &unk_100718E58;
      v6[9] = &unk_100718E70;
      v6[10] = &unk_100718E28;
      swift_updateClassMetadata2(a1, 256LL, 11LL, v6, a1 + 80);
    }
  }

uint64_t sub_100439DE0(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return swift_bridgeObjectRetain(result);
  }
  return result;
}

uint64_t sub_100439DEC()
{
  swift_release(*(void *)(v0 + 32));
  swift_release(*(void *)(v0 + 40));
  swift_release(*(void *)(v0 + 48));
  swift_release(*(void *)(v0 + 56));
  swift_release(*(void *)(v0 + 64));
  return swift_deallocObject(v0, 72LL, 7LL);
}

void sub_100439E40()
{
}

void *sub_100439E6C()
{
  return &unk_100718E94;
}

unint64_t sub_100439E78(unsigned int a1, uint64_t a2)
{
  return a1 | (unint64_t)(a2 << 32);
}

uint64_t type metadata accessor for IDSGroupEncryptionKeyMaterialContent(uint64_t a1)
{
  uint64_t result = qword_1009C1B30;
  if (!qword_1009C1B30) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for IDSGroupEncryptionKeyMaterialContent);
  }
  return result;
}

uint64_t sub_100439EC4()
{
  uint64_t v1 = v0;
  uint64_t v2 = (int *)type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  uint64_t v3 = UUID.getData.getter();
  unint64_t v5 = v4;
  sub_10043B9D4(v3, v4);
  uint64_t v7 = v6;
  sub_100402A84(v3, v5);
  if (*(void *)(v7 + 16) == 16LL)
  {
    int v8 = *(unsigned __int8 *)(v7 + 38);
    swift_release(v7);
    if (!v8)
    {
      uint64_t v110 = 0LL;
      unint64_t v111 = 0xE000000000000000LL;
      _StringGuts.grow(_:)(190LL);
      uint64_t v113 = 0LL;
      unint64_t v114 = 0xE000000000000000LL;
      v9._countAndFlagsBits = 0xD00000000000002DLL;
      v9._dispatch_queue_t object = (void *)0x800000010083F980LL;
      String.append(_:)(v9);
      if (*v1) {
        uint64_t v10 = 1702195828LL;
      }
      else {
        uint64_t v10 = 0x65736C6166LL;
      }
      if (*v1) {
        unint64_t v11 = 0xE400000000000000LL;
      }
      else {
        unint64_t v11 = 0xE500000000000000LL;
      }
      unint64_t v12 = v11;
      String.append(_:)(*(Swift::String *)&v10);
      swift_bridgeObjectRelease(v11);
      v13._countAndFlagsBits = 0x203A6469202CLL;
      v13._dispatch_queue_t object = (void *)0xE600000000000000LL;
      String.append(_:)(v13);
      uint64_t v15 = type metadata accessor for UUID(0LL, v14);
      uint64_t v16 = sub_10040A2B0( &qword_1009B95C0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v15, v16);
      dispatch_queue_t object = v17._object;
      String.append(_:)(v17);
      swift_bridgeObjectRelease(object);
      v19._dispatch_queue_t object = (void *)0x800000010083FA10LL;
      v19._countAndFlagsBits = 0xD000000000000010LL;
      String.append(_:)(v19);
      uint64_t v110 = sub_10043A74C();
      unint64_t v111 = v20;
      char v112 = v21 & 1;
      uint64_t v22 = sub_1003F5CB4(&qword_1009B9DA8);
      v23._countAndFlagsBits = String.init<A>(describing:)(&v110, v22);
      uint64_t v24 = v23._object;
      String.append(_:)(v23);
      swift_bridgeObjectRelease(v24);
      v25._countAndFlagsBits = 0x3A746C6173202C5DLL;
      v25._dispatch_queue_t object = (void *)0xE900000000000020LL;
      String.append(_:)(v25);
      uint64_t v26 = (uint64_t *)&v1[v2[6]];
      uint64_t v27 = *v26;
      unint64_t v28 = v26[1];
      sub_1004028CC(*v26, v28);
      v29._countAndFlagsBits = Data.description.getter(v27, v28);
      unint64_t v30 = v29._object;
      String.append(_:)(v29);
      swift_bridgeObjectRelease(v30);
      sub_100402A84(v27, v28);
      v31._countAndFlagsBits = 0x203A79656B202CLL;
      v31._dispatch_queue_t object = (void *)0xE700000000000000LL;
      String.append(_:)(v31);
      unint64_t v32 = (uint64_t *)&v1[v2[7]];
      uint64_t v33 = *v32;
      unint64_t v34 = v32[1];
      sub_1004028CC(*v32, v34);
      v35._countAndFlagsBits = Data.description.getter(v33, v34);
      uint64_t v36 = v35._object;
      String.append(_:)(v35);
      swift_bridgeObjectRelease(v36);
      sub_100402A84(v33, v34);
      v37._dispatch_queue_t object = (void *)0xEB00000000203A64LL;
      v37._countAndFlagsBits = 0x657461657263202CLL;
      String.append(_:)(v37);
      uint64_t v38 = type metadata accessor for Date(0LL);
      uint64_t v39 = sub_10040A2B0( &qword_1009B9D98,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
      v40._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v38, v39);
      char v41 = v40._object;
      String.append(_:)(v40);
      swift_bridgeObjectRelease(v41);
      v42._countAndFlagsBits = 0x4970756F7267202CLL;
      v42._dispatch_queue_t object = (void *)0xEB00000000203A44LL;
      String.append(_:)(v42);
      uint64_t v43 = (uint64_t *)&v1[v2[9]];
      uint64_t v44 = *v43;
      size_t v45 = (void *)v43[1];
      swift_bridgeObjectRetain(v45);
      v46._countAndFlagsBits = v44;
      v46._dispatch_queue_t object = v45;
      String.append(_:)(v46);
      swift_bridgeObjectRelease(v45);
      v47._countAndFlagsBits = 0xD000000000000015LL;
      v47._dispatch_queue_t object = (void *)0x800000010083F9B0LL;
      String.append(_:)(v47);
      LODWORD(v110) = *(_DWORD *)&v1[v2[10]];
      v48._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt32,  &protocol witness table for UInt32);
      uint64_t v49 = v48._object;
      String.append(_:)(v48);
      swift_bridgeObjectRelease(v49);
      v50._countAndFlagsBits = 0xD000000000000011LL;
      v50._dispatch_queue_t object = (void *)0x800000010083F9D0LL;
      String.append(_:)(v50);
      uint64_t v51 = &v1[v2[13]];
      uint64_t v52 = *(void *)v51;
      LOBYTE(v51) = v51[8];
      uint64_t v110 = v52;
      LOBYTE(v111) = (_BYTE)v51;
      uint64_t v53 = sub_1003F5CB4(&qword_1009B9DA0);
      v54._countAndFlagsBits = String.init<A>(describing:)(&v110, v53);
      uint64_t v55 = v54._object;
      String.append(_:)(v54);
      swift_bridgeObjectRelease(v55);
      v56._dispatch_queue_t object = (void *)0x800000010083F9F0LL;
      v56._countAndFlagsBits = 0xD000000000000010LL;
      String.append(_:)(v56);
      LODWORD(v110) = *(_DWORD *)&v1[v2[11]];
      v57._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
      uint64_t v58 = v57._object;
      String.append(_:)(v57);
      swift_bridgeObjectRelease(v58);
      v59._countAndFlagsBits = 0x3A6C696B6D73202CLL;
      v59._dispatch_queue_t object = (void *)0xE900000000000020LL;
      String.append(_:)(v59);
      LOBYTE(v110) = v1[v2[12]];
      v60._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt8,  &protocol witness table for UInt8);
      uint64_t v61 = v60._object;
      String.append(_:)(v60);
      swift_bridgeObjectRelease(v61);
      return v113;
    }
  }

  else
  {
    swift_release(v7);
  }

  uint64_t v110 = 0LL;
  unint64_t v111 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(171LL);
  v63._countAndFlagsBits = 0xD00000000000002DLL;
  v63._dispatch_queue_t object = (void *)0x800000010083F980LL;
  String.append(_:)(v63);
  if (*v1) {
    uint64_t v64 = 1702195828LL;
  }
  else {
    uint64_t v64 = 0x65736C6166LL;
  }
  if (*v1) {
    unint64_t v65 = 0xE400000000000000LL;
  }
  else {
    unint64_t v65 = 0xE500000000000000LL;
  }
  unint64_t v66 = v65;
  String.append(_:)(*(Swift::String *)&v64);
  swift_bridgeObjectRelease(v65);
  v67._countAndFlagsBits = 0x203A6469202CLL;
  v67._dispatch_queue_t object = (void *)0xE600000000000000LL;
  String.append(_:)(v67);
  uint64_t v69 = type metadata accessor for UUID(0LL, v68);
  uint64_t v70 = sub_10040A2B0( &qword_1009B95C0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  v71._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v69, v70);
  __n128 v72 = v71._object;
  String.append(_:)(v71);
  swift_bridgeObjectRelease(v72);
  v73._countAndFlagsBits = 0x203A746C6173202CLL;
  v73._dispatch_queue_t object = (void *)0xE800000000000000LL;
  String.append(_:)(v73);
  __n128 v74 = (uint64_t *)&v1[v2[6]];
  uint64_t v75 = *v74;
  unint64_t v76 = v74[1];
  sub_1004028CC(*v74, v76);
  v77._countAndFlagsBits = Data.description.getter(v75, v76);
  uint64_t v78 = v77._object;
  String.append(_:)(v77);
  swift_bridgeObjectRelease(v78);
  sub_100402A84(v75, v76);
  v79._countAndFlagsBits = 0x203A79656B202CLL;
  v79._dispatch_queue_t object = (void *)0xE700000000000000LL;
  String.append(_:)(v79);
  uint64_t v80 = (uint64_t *)&v1[v2[7]];
  uint64_t v81 = *v80;
  unint64_t v82 = v80[1];
  sub_1004028CC(*v80, v82);
  v83._countAndFlagsBits = Data.description.getter(v81, v82);
  uint64_t v84 = v83._object;
  String.append(_:)(v83);
  swift_bridgeObjectRelease(v84);
  sub_100402A84(v81, v82);
  v85._dispatch_queue_t object = (void *)0xEB00000000203A64LL;
  v85._countAndFlagsBits = 0x657461657263202CLL;
  String.append(_:)(v85);
  uint64_t v86 = type metadata accessor for Date(0LL);
  uint64_t v87 = sub_10040A2B0( &qword_1009B9D98,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  v88._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v86, v87);
  uint64_t v89 = v88._object;
  String.append(_:)(v88);
  swift_bridgeObjectRelease(v89);
  v90._countAndFlagsBits = 0x4970756F7267202CLL;
  v90._dispatch_queue_t object = (void *)0xEB00000000203A44LL;
  String.append(_:)(v90);
  uint64_t v91 = (uint64_t *)&v1[v2[9]];
  uint64_t v92 = *v91;
  uint64_t v93 = (void *)v91[1];
  swift_bridgeObjectRetain(v93);
  v94._countAndFlagsBits = v92;
  v94._dispatch_queue_t object = v93;
  String.append(_:)(v94);
  swift_bridgeObjectRelease(v93);
  v95._countAndFlagsBits = 0xD000000000000015LL;
  v95._dispatch_queue_t object = (void *)0x800000010083F9B0LL;
  String.append(_:)(v95);
  LODWORD(v113) = *(_DWORD *)&v1[v2[10]];
  v96._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt32,  &protocol witness table for UInt32);
  id v97 = v96._object;
  String.append(_:)(v96);
  swift_bridgeObjectRelease(v97);
  v98._countAndFlagsBits = 0xD000000000000011LL;
  v98._dispatch_queue_t object = (void *)0x800000010083F9D0LL;
  String.append(_:)(v98);
  uint64_t v99 = &v1[v2[13]];
  uint64_t v100 = *(void *)v99;
  LOBYTE(v99) = v99[8];
  uint64_t v113 = v100;
  LOBYTE(v114) = (_BYTE)v99;
  uint64_t v101 = sub_1003F5CB4(&qword_1009B9DA0);
  v102._countAndFlagsBits = String.init<A>(describing:)(&v113, v101);
  unint64_t v103 = v102._object;
  String.append(_:)(v102);
  swift_bridgeObjectRelease(v103);
  v104._dispatch_queue_t object = (void *)0x800000010083F9F0LL;
  v104._countAndFlagsBits = 0xD000000000000010LL;
  String.append(_:)(v104);
  LODWORD(v113) = *(_DWORD *)&v1[v2[11]];
  v105._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
  __n128 v106 = v105._object;
  String.append(_:)(v105);
  swift_bridgeObjectRelease(v106);
  v107._countAndFlagsBits = 0x3A6C696B6D73202CLL;
  v107._dispatch_queue_t object = (void *)0xE900000000000020LL;
  String.append(_:)(v107);
  LOBYTE(v113) = v1[v2[12]];
  v108._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt8,  &protocol witness table for UInt8);
  __n128 v109 = v108._object;
  String.append(_:)(v108);
  swift_bridgeObjectRelease(v109);
  return v110;
}

uint64_t sub_10043A74C()
{
  uint64_t v0 = UUID.getData.getter();
  unint64_t v2 = v1;
  sub_10043B9D4(v0, v1);
  uint64_t v4 = v3;
  sub_100402A84(v0, v2);
  if (*(void *)(v4 + 16) != 16LL)
  {
LABEL_5:
    swift_release(v4);
    return 0LL;
  }

  int v5 = *(unsigned __int8 *)(v4 + 38);
  swift_release(v4);
  if (!v5)
  {
    uint64_t v6 = UUID.getData.getter();
    unint64_t v8 = v7;
    sub_10043B9D4(v6, v7);
    uint64_t v4 = v9;
    sub_100402A84(v6, v8);
    if (*(void *)(v4 + 16) == 16LL)
    {
      unint64_t v10 = *(unsigned __int8 *)(v4 + 33);
      uint64_t v11 = v10 & 0xF;
      uint64_t v12 = (v10 >> 4) | (16LL * *(unsigned __int8 *)(v4 + 32));
      swift_release(v4);
      return v12 | (v11 << 32);
    }

    goto LABEL_5;
  }

  return 0LL;
}

id sub_10043A878()
{
  uint64_t v1 = v0;
  sub_1003F5CB4(&qword_1009BC130);
  __chkstk_darwin(v2, v3);
  int v5 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1003F5CB4(&qword_1009B90E8);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v10 = (int *)type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  uint64_t v11 = (uint64_t *)&v0[v10[7]];
  uint64_t v13 = *v11;
  unint64_t v12 = v11[1];
  uint64_t v14 = (uint64_t *)&v0[v10[6]];
  uint64_t v16 = *v14;
  unint64_t v15 = v14[1];
  Swift::String v54 = &v1[v10[5]];
  Swift::String v17 = v54;
  unint64_t v55 = v12;
  uint64_t v19 = type metadata accessor for UUID(0LL, v18);
  uint64_t v20 = *(void *)(v19 - 8);
  (*(void (**)(char *, unsigned __int8 *, uint64_t))(v20 + 16))(v9, v17, v19);
  char v21 = *(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56);
  uint64_t v52 = v9;
  v21(v9, 0LL, 1LL, v19);
  uint64_t v22 = v10[8];
  Swift::String v23 = (uint64_t *)&v1[v10[9]];
  uint64_t v24 = v23[1];
  uint64_t v51 = *v23;
  int v57 = *v1;
  Swift::String v25 = &v1[v22];
  uint64_t v26 = type metadata accessor for Date(0LL);
  uint64_t v27 = *(void *)(v26 - 8);
  (*(void (**)(char *, unsigned __int8 *, uint64_t))(v27 + 16))(v5, v25, v26);
  unint64_t v28 = *(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56);
  uint64_t v53 = v5;
  v28(v5, 0LL, 1LL, v26);
  int v50 = *(_DWORD *)&v1[v10[10]];
  Swift::String v29 = &v1[v10[13]];
  if (v29[8]) {
    uint64_t v30 = 0LL;
  }
  else {
    uint64_t v30 = *(void *)v29;
  }
  uint64_t v49 = v30;
  uint64_t v31 = v13;
  uint64_t v32 = v13;
  unint64_t v33 = v55;
  sub_1004028CC(v32, v55);
  uint64_t v58 = v16;
  sub_1004028CC(v16, v15);
  uint64_t v56 = v24;
  swift_bridgeObjectRetain(v24);
  uint64_t v34 = UUID.getData.getter();
  unint64_t v36 = v35;
  sub_10043B9D4(v34, v35);
  uint64_t v38 = v37;
  sub_100402A84(v34, v36);
  if (*(void *)(v38 + 16) == 16LL)
  {
    int v39 = *(unsigned __int8 *)(v38 + 38);
    swift_release(v38);
    if (v39) {
      char v40 = 0;
    }
    else {
      char v40 = v1[v10[12]];
    }
  }

  else
  {
    swift_release(v38);
    char v40 = 0;
  }

  uint64_t v41 = v31;
  uint64_t v43 = (uint64_t)v52;
  uint64_t v42 = (uint64_t)v53;
  uint64_t v44 = v51;
  int v45 = v50;
  uint64_t v46 = v49;
  id v47 = objc_allocWithZone(&OBJC_CLASS___IDSGroupEncryptionKeyMaterial);
  id result = sub_10043B70C(v41, v33, v58, v15, v43, v44, v56, v57, v42, v45, v46, v40);
  if (!result) {
    __break(1u);
  }
  return result;
}

uint64_t sub_10043AB1C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  uint64_t v3 = UUID.getData.getter();
  unint64_t v5 = v4;
  sub_10043B9D4(v3, v4);
  uint64_t v7 = v6;
  sub_100402A84(v3, v5);
  if (*(void *)(v7 + 16) != 16LL) {
    return swift_release(v7);
  }
  int v8 = *(unsigned __int8 *)(v7 + 38);
  uint64_t result = swift_release(v7);
  if (!v8)
  {
    uint64_t v10 = v1 + *(int *)(v2 + 52);
    if (*(_BYTE *)(v10 + 8) == 1)
    {
      uint64_t result = sub_10043A74C();
      if ((v12 & 1) == 0)
      {
        *(void *)uint64_t v10 = v11;
        *(_BYTE *)(v10 + _Block_object_dispose(va, 8) = 0;
      }
    }
  }

  return result;
}

uint64_t sub_10043ABD8@<X0>(unint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = static Array._allocateBufferUninitialized(minimumCapacity:)(16LL, &type metadata for UInt8);
  *(void *)(v6 + swift_unknownObjectWeakDestroy(v0 + 16) = 16LL;
  *(void *)(v6 + 34) = 0LL;
  uint64_t v7 = (_BYTE *)(v6 + 34);
  *(void *)(v6 + 40) = 0LL;
  if ((a1 & 0xFFFFF000) != 0)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  uint64_t v8 = v6;
  *(_BYTE *)(v6 + 32) = a1 >> 4;
  *(_BYTE *)(v6 + 33) = BYTE4(a1) & 0xF | (16 * a1);
  unint64_t v17 = bswap64(a2);
  uint64_t v18 = &_swiftEmptyArrayStorage;
  sub_10043ADBC((char *)&v17, (char *)&v18);
  uint64_t v9 = v18;
  if (*((void *)v18 + 2) != 8LL)
  {
    swift_bridgeObjectRelease(v8);
    uint64_t v15 = type metadata accessor for UUID(0LL, v14);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL))(a3, 1LL, 1LL, v15);
    return swift_bridgeObjectRelease(v9);
  }

  unint64_t v10 = *(void *)(v8 + 16);
  if (v10 < 3) {
    goto LABEL_15;
  }
  *uint64_t v7 = v18[32];
  if (v10 == 3)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  *(_BYTE *)(v8 + 35) = v9[33];
  if (v10 < 5)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  *(_BYTE *)(v8 + 36) = v9[34];
  if (v10 == 5)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  *(_BYTE *)(v8 + 37) = v9[35];
  if (v10 < 8)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  *(_BYTE *)(v8 + 39) = v9[36];
  if (v10 == 8)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

  *(_BYTE *)(v8 + 40) = v9[37];
  if (v10 < 0xA)
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
  }

  *(_BYTE *)(v8 + 41) = v9[38];
  if (v10 == 10) {
    goto LABEL_22;
  }
  *(_BYTE *)(v8 + 42) = v9[39];
  uint64_t v11 = sub_10043BB3C(v8);
  unint64_t v13 = v12;
  swift_bridgeObjectRelease(v8);
  static UUID.initFrom(data:)(v11, v13);
  sub_100402A84(v11, v13);
  return swift_bridgeObjectRelease(v9);
}

char *sub_10043ADBC(char *result, char *a2)
{
  int64_t v5 = a2 - result;
  if (result) {
    int64_t v6 = a2 - result;
  }
  else {
    int64_t v6 = 0LL;
  }
  uint64_t v7 = (char *)*v2;
  int64_t v8 = *(void *)(*v2 + 16LL);
  int64_t v9 = v8 + v6;
  if (__OFADD__(v8, v6))
  {
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

  uint64_t v3 = a2;
  uint64_t v4 = result;
  uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!(_DWORD)result || (int64_t v10 = *((void *)v7 + 3) >> 1, v10 < v9))
  {
    if (v8 <= v9) {
      int64_t v11 = v8 + v6;
    }
    else {
      int64_t v11 = v8;
    }
    uint64_t result = sub_10043B8EC(result, v11, 1, v7);
    uint64_t v7 = result;
    int64_t v10 = *((void *)result + 3) >> 1;
  }

  uint64_t v12 = *((void *)v7 + 2);
  int64_t v13 = v10 - v12;
  int64_t v14 = 0LL;
  if (v4 && v3 && v4 < v3 && v10 != v12)
  {
    if (v5 >= v13) {
      int64_t v14 = v10 - v12;
    }
    else {
      int64_t v14 = v5;
    }
    if (v14 < 0)
    {
      __break(1u);
      return result;
    }

    uint64_t result = (char *)memmove(&v7[v12 + 32], v4, v14);
    v4 += v14;
  }

  if (v14 < v6) {
    goto LABEL_27;
  }
  if (v14)
  {
    uint64_t v15 = *((void *)v7 + 2);
    BOOL v16 = __OFADD__(v15, v14);
    int64_t v17 = v15 + v14;
    if (v16)
    {
      __break(1u);
      goto LABEL_33;
    }

    *((void *)v7 + 2) = v17;
  }

  if (v14 != v13) {
    goto LABEL_25;
  }
LABEL_28:
  int64_t v17 = *((void *)v7 + 2);
  if (!v4)
  {
LABEL_33:
    if (!v3) {
      goto LABEL_25;
    }
    uint64_t v4 = 0LL;
    goto LABEL_35;
  }

  if (!v3 || v4 != v3)
  {
LABEL_35:
    char v20 = *v4;
    uint64_t v18 = v4 + 1;
    char v19 = v20;
    while (1)
    {
      while (1)
      {
        unint64_t v21 = *((void *)v7 + 3);
        int64_t v22 = v21 >> 1;
        uint64_t v23 = v17 + 1;
        uint64_t v26 = v7;
        int64_t v27 = v17;
        uint64_t result = sub_10043B8EC((char *)(v21 > 1), v17 + 1, 1, v26);
        int64_t v17 = v27;
        uint64_t v7 = result;
        int64_t v22 = *((void *)result + 3) >> 1;
        if (v17 < v22) {
          goto LABEL_39;
        }
LABEL_36:
        *((void *)v7 + 2) = v17;
      }

      if (v17 >= v22) {
        goto LABEL_36;
      }
LABEL_39:
      v7[v17 + 32] = v19;
      if (v3 && v3 == v18)
      {
LABEL_49:
        *((void *)v7 + 2) = v23;
        break;
      }

      uint64_t v24 = 0LL;
      while (1)
      {
        uint64_t v25 = (uint64_t)&v18[v24 + 1];
        char v19 = v18[v24];
        if (~v17 + v22 == v24) {
          break;
        }
        v7[v17 + 33 + v24++] = v19;
        if (v3 && (char *)v25 == v3)
        {
          uint64_t v23 = v17 + v24 + 1;
          goto LABEL_49;
        }
      }

      v18 += v24 + 1;
      int64_t v17 = v22;
      *((void *)v7 + 2) = v22;
    }
  }

uint64_t sub_10043AFC0@<X0>(int a1@<W0>, _BYTE *a2@<X8>)
{
  uint64_t v3 = v2;
  int v85 = a1;
  uint64_t v93 = a2;
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v83 = *(void *)(v4 - 8);
  uint64_t v84 = v4;
  __chkstk_darwin(v5, v6);
  Swift::String v88 = (char *)&v80 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for UUID(0LL, v8);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v11, v12);
  uint64_t v87 = (char *)&v80 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14, v15);
  uint64_t v86 = (char *)&v80 - v16;
  sub_1003F5CB4(&qword_1009B90E8);
  __chkstk_darwin(v17, v18);
  uint64_t v90 = (uint64_t)&v80 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v20, v21);
  uint64_t v23 = (char *)&v80 - v22;
  __chkstk_darwin(v24, v25);
  int64_t v27 = (char *)&v80 - v26;
  uint64_t v91 = v10;
  uint64_t v92 = v9;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))((char *)&v80 - v26, 1LL, 1LL, v9);
  unint64_t v28 = (int *)type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  uint64_t v29 = UUID.getData.getter();
  unint64_t v31 = v30;
  sub_10043B9D4(v29, v30);
  uint64_t v33 = v32;
  sub_100402A84(v29, v31);
  if (*(void *)(v33 + 16) != 16LL)
  {
    swift_release(v33);
    goto LABEL_7;
  }

  int v34 = *(unsigned __int8 *)(v33 + 38);
  swift_release(v33);
  if (v34)
  {
LABEL_7:
    type metadata accessor for IDSHKDFWrapper();
    uint64_t v38 = UUID.getData.getter();
    unint64_t v40 = v39;
    uint64_t v41 = ((uint64_t (*)(void))sub_10043CB3C)();
    unint64_t v43 = v42;
    sub_100402A84(v38, v40);
    static UUID.initFrom(data:)(v41, v43);
    sub_100402A84(v41, v43);
    goto LABEL_8;
  }

  uint64_t v35 = sub_10043A74C();
  if ((v37 & 1) != 0 || HIDWORD(v35) >= 0xF)
  {
    uint64_t v55 = (uint64_t)v27;
    goto LABEL_13;
  }

  sub_10043ABD8((unint64_t)&_mh_execute_header + v35, v36, (uint64_t)v23);
LABEL_8:
  sub_10043BBD4((uint64_t)v27);
  sub_10043BC14((uint64_t)v23, (uint64_t)v27);
  type metadata accessor for IDSHKDFWrapper();
  uint64_t v44 = &v3[v28[9]];
  uint64_t v45 = *(void *)v44;
  uint64_t v46 = *((void *)v44 + 1);
  uint64_t v47 = sub_10043CB3C(*(void *)&v3[v28[6]], *(void *)&v3[v28[6] + 8], *(void *)v44, v46);
  unint64_t v89 = v48;
  uint64_t v49 = sub_10043C61C(*(void *)&v3[v28[7]], *(void *)&v3[v28[7] + 8], v45, v46);
  unint64_t v51 = v50;
  uint64_t v52 = v90;
  sub_10043BC5C((uint64_t)v27, v90);
  uint64_t v53 = v91;
  uint64_t v54 = v92;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v91 + 48))(v52, 1LL, v92) == 1)
  {
    sub_10043BBD4((uint64_t)v27);
    sub_100402A84(v47, v89);
    sub_100402A84(v49, v51);
    uint64_t v55 = v52;
LABEL_13:
    sub_10043BBD4(v55);
    return (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, int *))(*((void *)v28 - 1) + 56LL))( v93,  1LL,  1LL,  v28);
  }

  uint64_t v80 = v49;
  unint64_t v81 = v51;
  uint64_t v82 = v47;
  uint64_t v56 = v53;
  int v57 = *(void (**)(char *, uint64_t, uint64_t))(v53 + 32);
  uint64_t v58 = v86;
  v57(v86, v52, v54);
  LODWORD(v90) = *v3;
  Swift::String v59 = v87;
  uint64_t v60 = (*(uint64_t (**)(char *, char *, uint64_t))(v56 + 16))(v87, v58, v54);
  uint64_t v61 = v88;
  static Date.now.getter(v60);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v58, v54);
  uint64_t result = sub_10043BBD4((uint64_t)v27);
  int v63 = *(_DWORD *)&v3[v28[11]];
  int v64 = v63 + 1;
  if (__OFADD__(v63, 1))
  {
    __break(1u);
  }

  else
  {
    unint64_t v65 = v61;
    uint64_t v66 = v54;
    uint64_t v69 = v44;
    uint64_t v67 = *(void *)v44;
    uint64_t v68 = *((void *)v69 + 1);
    uint64_t v70 = v28[13];
    unsigned __int8 v71 = v3[v28[12]];
    uint64_t v72 = *(void *)&v3[v70];
    LODWORD(v91) = v3[v70 + 8];
    Swift::String v73 = v93;
    *uint64_t v93 = v90;
    v57(&v73[v28[5]], (uint64_t)v59, v66);
    __n128 v74 = (uint64_t *)&v73[v28[6]];
    unint64_t v75 = v89;
    uint64_t *v74 = v82;
    v74[1] = v75;
    unint64_t v76 = (uint64_t *)&v73[v28[7]];
    unint64_t v77 = v81;
    uint64_t *v76 = v80;
    v76[1] = v77;
    (*(void (**)(_BYTE *, char *, uint64_t))(v83 + 32))(&v73[v28[8]], v65, v84);
    uint64_t v78 = &v73[v28[9]];
    *uint64_t v78 = v67;
    v78[1] = v68;
    *(_DWORD *)&v73[v28[10]] = v85;
    *(_DWORD *)&v73[v28[11]] = v64;
    v73[v28[12]] = v71;
    Swift::String v79 = &v73[v28[13]];
    *(void *)Swift::String v79 = v72;
    v79[8] = v91;
    (*(void (**)(_BYTE *, void, uint64_t, int *))(*((void *)v28 - 1) + 56LL))(v73, 0LL, 1LL, v28);
    return swift_bridgeObjectRetain(v68);
  }

  return result;
}

uint64_t sub_10043B45C@<X0>( char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _BYTE *a9@<X8>, uint64_t a10, int a11, int a12, char a13, uint64_t a14, char a15)
{
  *a9 = a1;
  __n128 v21 = (int *)type metadata accessor for IDSGroupEncryptionKeyMaterialContent(0LL);
  uint64_t v22 = &a9[v21[5]];
  uint64_t v24 = type metadata accessor for UUID(0LL, v23);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 32LL))(v22, a2, v24);
  __n128 v25 = &a9[v21[6]];
  *__n128 v25 = a3;
  v25[1] = a4;
  uint64_t v26 = &a9[v21[7]];
  *uint64_t v26 = a5;
  v26[1] = a6;
  int64_t v27 = &a9[v21[8]];
  uint64_t v28 = type metadata accessor for Date(0LL);
  uint64_t result = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(v28 - 8) + 32LL))(v27, a7, v28);
  uint64_t v30 = &a9[v21[9]];
  void *v30 = a8;
  v30[1] = a10;
  *(_DWORD *)&a9[v21[10]] = a11;
  *(_DWORD *)&a9[v21[11]] = a12;
  a9[v21[12]] = a13;
  unint64_t v31 = &a9[v21[13]];
  *(void *)unint64_t v31 = a14;
  v31[8] = a15 & 1;
  return result;
}

Swift::Int sub_10043B5A8()
{
  uint64_t v1 = type metadata accessor for UUID(0LL, v0);
  uint64_t v2 = sub_10040A2B0( &qword_1009B9300,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v4, v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_10043B620(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for UUID(0LL, a2);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9300,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  return dispatch thunk of Hashable.hash(into:)(a1, v3, v4);
}

Swift::Int sub_10043B684(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID(0LL, v1);
  uint64_t v3 = sub_10040A2B0( &qword_1009B9300,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v5, v2, v3);
  return Hasher._finalize()();
}

uint64_t sub_10043B6F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static UUID.== infix(_:_:)(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20));
}

id sub_10043B70C( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, int a10, uint64_t a11, char a12)
{
  if (a2 >> 60 == 15)
  {
    Class isa = 0LL;
  }

  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_10040AD00(a1, a2);
  }

  if (a4 >> 60 == 15)
  {
    Class v18 = 0LL;
  }

  else
  {
    Class v18 = Data._bridgeToObjectiveC()().super.isa;
    sub_10040AD00(a3, a4);
  }

  uint64_t v19 = type metadata accessor for UUID(0LL, a2);
  uint64_t v20 = *(void *)(v19 - 8);
  Class v21 = 0LL;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(a5, 1LL, v19) != 1)
  {
    Class v21 = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(a5, v19);
  }

  if (a7)
  {
    NSString v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a7);
  }

  else
  {
    NSString v22 = 0LL;
  }

  uint64_t v23 = type metadata accessor for Date(0LL);
  uint64_t v24 = *(void *)(v23 - 8);
  Class v25 = 0LL;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(a9, 1LL, v23) != 1)
  {
    Class v25 = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(a9, v23);
  }

  LOBYTE(v29) = a12;
  LODWORD(v2_Block_object_dispose(va, 8) = a10;
  id v26 = [v32 initWithKeyMaterial:isa keySalt:v18 keyIndex:v21 groupID:v22 isGeneratedLocally:a8 & 1 createdAt:v25 generationCounter:v28 participantID:a11 shor tKeyIndexLength:v29];

  return v26;
}

char *sub_10043B8EC(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_1003F5CB4((uint64_t *)&unk_1009B97F0);
    __n128 v11 = (char *)swift_allocObject(v10, v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * v12 - 64;
  }

  else
  {
    __n128 v11 = (char *)&_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  __n128 v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8]) {
      memmove(v13, v14, v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v13, v14, v8);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

void sub_10043B9D4(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

void *sub_10043BA50()
{
  if (BYTE6(v0))
  {
    uint64_t v6 = sub_1003F5CB4((uint64_t *)&unk_1009B97F0);
    __n128 v4 = (void *)swift_allocObject(v6, BYTE6(v0) + 32LL, 7LL);
    size_t v7 = j__malloc_size(v4);
    void v4[2] = BYTE6(v0);
    void v4[3] = 2 * v7 - 64;
    sub_1004028CC(v2, v0);
    uint64_t v8 = ((uint64_t (*)(uint64_t, void *, void, uint64_t, unint64_t))Data._copyContents(initializing:))( v3,  v4 + 4,  BYTE6(v0),  v2,  v0);
    sub_100402A84(v2, v0);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v1);
    if (v8 != BYTE6(v0))
    {
      __break(1u);
      JUMPOUT(0x10043BB24LL);
    }
  }

  return v4;
}

uint64_t sub_10043BB3C(uint64_t a1)
{
  uint64_t v9 = sub_1003F5CB4(&qword_1009B9E50);
  unint64_t v10 = sub_10043C5D0();
  v8[0] = a1;
  uint64_t v2 = sub_10040A238(v8, v9);
  uint64_t v3 = (_BYTE *)(*v2 + 32LL);
  __n128 v4 = &v3[*(void *)(*v2 + 16LL)];
  swift_bridgeObjectRetain(a1);
  sub_10040B170(v3, v4, &v7);
  uint64_t v5 = v7;
  sub_10040A648(v8);
  return v5;
}

uint64_t sub_10043BBD4(uint64_t a1)
{
  uint64_t v2 = sub_1003F5CB4(&qword_1009B90E8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10043BC14(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1003F5CB4(&qword_1009B90E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10043BC5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1003F5CB4(&qword_1009B90E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10043BCA4()
{
  return sub_10040A2B0( &qword_1009B90D8,  type metadata accessor for IDSGroupEncryptionKeyMaterialContent,  (uint64_t)&unk_100718ED8);
}

uint64_t getEnumTagSinglePayload for IDSGroupEncryptionKeyMaterialShortKIInfo(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for IDSGroupEncryptionKeyMaterialShortKIInfo( uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for IDSGroupEncryptionKeyMaterialShortKIInfo()
{
  return &type metadata for IDSGroupEncryptionKeyMaterialShortKIInfo;
}

void *sub_10043BD28(_BYTE *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v34 = *a2;
    void *v4 = *a2;
    uint64_t v4 = (void *)(v34 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v34);
  }

  else
  {
    *a1 = *(_BYTE *)a2;
    uint64_t v7 = a3[5];
    uint64_t v8 = &a1[v7];
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for UUID(0LL, a2);
    (*(void (**)(_BYTE *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL))(v8, v9, v10);
    uint64_t v11 = a3[6];
    size_t v12 = (void *)((char *)v4 + v11);
    uint64_t v13 = (void *)((char *)a2 + v11);
    uint64_t v14 = *v13;
    unint64_t v15 = v13[1];
    sub_1004028CC(*v13, v15);
    uint64_t *v12 = v14;
    v12[1] = v15;
    uint64_t v16 = a3[7];
    __n128 v17 = (void *)((char *)v4 + v16);
    Class v18 = (void *)((char *)a2 + v16);
    uint64_t v19 = *v18;
    unint64_t v20 = v18[1];
    sub_1004028CC(*v18, v20);
    *__n128 v17 = v19;
    v17[1] = v20;
    uint64_t v21 = a3[8];
    NSString v22 = (char *)v4 + v21;
    uint64_t v23 = (char *)a2 + v21;
    uint64_t v24 = type metadata accessor for Date(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 16LL))(v22, v23, v24);
    uint64_t v25 = a3[9];
    uint64_t v26 = a3[10];
    int64_t v27 = (void *)((char *)v4 + v25);
    uint64_t v28 = (void *)((char *)a2 + v25);
    uint64_t v29 = v28[1];
    void *v27 = *v28;
    v27[1] = v29;
    *(_DWORD *)((char *)v4 + v26) = *(_DWORD *)((char *)a2 + v26);
    uint64_t v30 = a3[12];
    *(_DWORD *)((char *)v4 + a3[11]) = *(_DWORD *)((char *)a2 + a3[11]);
    *((_BYTE *)v4 + v30) = *((_BYTE *)a2 + v30);
    uint64_t v31 = a3[13];
    id v32 = (char *)v4 + v31;
    uint64_t v33 = (char *)a2 + v31;
    char v32[8] = v33[8];
    *(void *)id v32 = *(void *)v33;
    swift_bridgeObjectRetain(v29);
  }

  return v4;
}

uint64_t sub_10043BE7C(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for UUID(0LL, a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  sub_100402A84(*(void *)(a1 + a2[6]), *(void *)(a1 + a2[6] + 8));
  sub_100402A84(*(void *)(a1 + a2[7]), *(void *)(a1 + a2[7] + 8));
  uint64_t v6 = a1 + a2[8];
  uint64_t v7 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL))(v6, v7);
  return swift_bridgeObjectRelease(*(void *)(a1 + a2[9] + 8));
}

_BYTE *sub_10043BF18(_BYTE *a1, _BYTE *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for UUID(0LL, a2);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v9 - 8) + 16LL))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (uint64_t *)&a1[v10];
  size_t v12 = (uint64_t *)&a2[v10];
  uint64_t v13 = *v12;
  unint64_t v14 = v12[1];
  sub_1004028CC(*v12, v14);
  *uint64_t v11 = v13;
  v11[1] = v14;
  uint64_t v15 = a3[7];
  uint64_t v16 = (uint64_t *)&a1[v15];
  __n128 v17 = (uint64_t *)&a2[v15];
  uint64_t v18 = *v17;
  unint64_t v19 = v17[1];
  sub_1004028CC(*v17, v19);
  *uint64_t v16 = v18;
  v16[1] = v19;
  uint64_t v20 = a3[8];
  uint64_t v21 = &a1[v20];
  NSString v22 = &a2[v20];
  uint64_t v23 = type metadata accessor for Date(0LL);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v23 - 8) + 16LL))(v21, v22, v23);
  uint64_t v24 = a3[9];
  uint64_t v25 = a3[10];
  uint64_t v26 = &a1[v24];
  int64_t v27 = &a2[v24];
  uint64_t v28 = v27[1];
  *uint64_t v26 = *v27;
  v26[1] = v28;
  *(_DWORD *)&a1[v25] = *(_DWORD *)&a2[v25];
  uint64_t v29 = a3[12];
  *(_DWORD *)&a1[a3[11]] = *(_DWORD *)&a2[a3[11]];
  a1[v29] = a2[v29];
  uint64_t v30 = a3[13];
  uint64_t v31 = &a1[v30];
  id v32 = &a2[v30];
  v31[8] = v32[8];
  *(void *)uint64_t v31 = *(void *)v32;
  swift_bridgeObjectRetain(v28);
  return a1;
}

_BYTE *sub_10043C040(_BYTE *a1, _BYTE *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for UUID(0LL, a2);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v9 - 8) + 24LL))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (uint64_t *)&a1[v10];
  size_t v12 = (uint64_t *)&a2[v10];
  uint64_t v13 = *v12;
  unint64_t v14 = v12[1];
  sub_1004028CC(*v12, v14);
  uint64_t v15 = *v11;
  unint64_t v16 = v11[1];
  *uint64_t v11 = v13;
  v11[1] = v14;
  sub_100402A84(v15, v16);
  uint64_t v17 = a3[7];
  uint64_t v18 = (uint64_t *)&a1[v17];
  unint64_t v19 = (uint64_t *)&a2[v17];
  uint64_t v20 = *v19;
  unint64_t v21 = v19[1];
  sub_1004028CC(*v19, v21);
  uint64_t v22 = *v18;
  unint64_t v23 = v18[1];
  *uint64_t v18 = v20;
  v18[1] = v21;
  sub_100402A84(v22, v23);
  uint64_t v24 = a3[8];
  uint64_t v25 = &a1[v24];
  uint64_t v26 = &a2[v24];
  uint64_t v27 = type metadata accessor for Date(0LL);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v27 - 8) + 24LL))(v25, v26, v27);
  uint64_t v28 = a3[9];
  uint64_t v29 = &a1[v28];
  uint64_t v30 = &a2[v28];
  *uint64_t v29 = *v30;
  uint64_t v31 = v30[1];
  uint64_t v32 = v29[1];
  v29[1] = v31;
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRelease(v32);
  *(_DWORD *)&a1[a3[10]] = *(_DWORD *)&a2[a3[10]];
  *(_DWORD *)&a1[a3[11]] = *(_DWORD *)&a2[a3[11]];
  a1[a3[12]] = a2[a3[12]];
  uint64_t v33 = a3[13];
  uint64_t v34 = &a1[v33];
  uint64_t v35 = &a2[v33];
  uint64_t v36 = *(void *)v35;
  v34[8] = v35[8];
  *(void *)uint64_t v34 = v36;
  return a1;
}

_BYTE *sub_10043C194(_BYTE *a1, _BYTE *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for UUID(0LL, a2);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *(_OWORD *)&a1[a3[6]] = *(_OWORD *)&a2[a3[6]];
  *(_OWORD *)&a1[v10] = *(_OWORD *)&a2[v10];
  uint64_t v11 = a3[8];
  size_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  uint64_t v14 = type metadata accessor for Date(0LL);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v14 - 8) + 32LL))(v12, v13, v14);
  uint64_t v15 = a3[10];
  *(_OWORD *)&a1[a3[9]] = *(_OWORD *)&a2[a3[9]];
  *(_DWORD *)&a1[v15] = *(_DWORD *)&a2[v15];
  uint64_t v16 = a3[12];
  *(_DWORD *)&a1[a3[11]] = *(_DWORD *)&a2[a3[11]];
  a1[v16] = a2[v16];
  uint64_t v17 = a3[13];
  uint64_t v18 = &a1[v17];
  unint64_t v19 = &a2[v17];
  v18[8] = v19[8];
  *(void *)uint64_t v18 = *(void *)v19;
  return a1;
}

_BYTE *sub_10043C284(_BYTE *a1, _BYTE *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for UUID(0LL, a2);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v9 - 8) + 40LL))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = *(void *)&a1[v10];
  unint64_t v12 = *(void *)&a1[v10 + 8];
  *(_OWORD *)&a1[v10] = *(_OWORD *)&a2[v10];
  sub_100402A84(v11, v12);
  uint64_t v13 = a3[7];
  uint64_t v14 = *(void *)&a1[v13];
  unint64_t v15 = *(void *)&a1[v13 + 8];
  *(_OWORD *)&a1[v13] = *(_OWORD *)&a2[v13];
  sub_100402A84(v14, v15);
  uint64_t v16 = a3[8];
  uint64_t v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  uint64_t v19 = type metadata accessor for Date(0LL);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v19 - 8) + 40LL))(v17, v18, v19);
  uint64_t v20 = a3[9];
  unint64_t v21 = &a1[v20];
  uint64_t v22 = (uint64_t *)&a2[v20];
  uint64_t v24 = *v22;
  uint64_t v23 = v22[1];
  uint64_t v25 = v21[1];
  *unint64_t v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease(v25);
  uint64_t v26 = a3[11];
  *(_DWORD *)&a1[a3[10]] = *(_DWORD *)&a2[a3[10]];
  *(_DWORD *)&a1[v26] = *(_DWORD *)&a2[v26];
  uint64_t v27 = a3[13];
  a1[a3[12]] = a2[a3[12]];
  uint64_t v28 = &a1[v27];
  uint64_t v29 = &a2[v27];
  *(void *)uint64_t v28 = *(void *)v29;
  v28[8] = v29[8];
  return a1;
}

uint64_t sub_10043C3A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10043C3AC);
}

uint64_t sub_10043C3AC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL, a2);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }

  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v10;
    uint64_t v9 = a3[8];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }

  unint64_t v12 = *(void *)(a1 + a3[9] + 8);
  if (v12 >= 0xFFFFFFFF) {
    LODWORD(v12) = -1;
  }
  return (v12 + 1);
}

uint64_t sub_10043C454(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10043C460);
}

uint64_t sub_10043C460(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for UUID(0LL, a2);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a4[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }

  uint64_t result = type metadata accessor for Date(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a4[8];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }

  *(void *)(a1 + a4[9] + _Block_object_dispose(va, 8) = (a2 - 1);
  return result;
}

uint64_t sub_10043C504(uint64_t a1, uint64_t a2)
{
  v6[0] = &unk_100718F88;
  uint64_t result = type metadata accessor for UUID(319LL, a2);
  if (v4 <= 0x3F)
  {
    v6[1] = *(void *)(result - 8) + 64LL;
    _BYTE v6[2] = &unk_100718FA0;
    v6[3] = &unk_100718FA0;
    uint64_t result = type metadata accessor for Date(319LL);
    if (v5 <= 0x3F)
    {
      void v6[4] = *(void *)(result - 8) + 64LL;
      void v6[5] = &unk_100718FB8;
      v6[6] = (char *)&value witness table for Builtin.Int32 + 64;
      v6[7] = (char *)&value witness table for Builtin.Int32 + 64;
      v6[8] = (char *)&value witness table for Builtin.Int8 + 64;
      v6[9] = &unk_100718FD0;
      swift_initStructMetadata(a1, 256LL, 10LL, v6, a1 + 16);
      return 0LL;
    }
  }

  return result;
}

unint64_t sub_10043C5D0()
{
  unint64_t result = qword_1009B9E58;
  if (!qword_1009B9E58)
  {
    uint64_t v1 = sub_100401A88(&qword_1009B9E50);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1009B9E58);
  }

  return result;
}

uint64_t sub_10043C620(uint64_t a1, unint64_t a2)
{
  *(void *)&__int128 v21 = a1;
  *((void *)&v21 + 1) = a2;
  swift_bridgeObjectRetain(a2);
  uint64_t v2 = sub_1003F5CB4(&qword_1009B9E88);
  if (!swift_dynamicCast(v19, &v21, &type metadata for String.UTF8View, v2, 6LL))
  {
    uint64_t v20 = 0LL;
    memset(v19, 0, sizeof(v19));
    sub_10043D700((uint64_t)v19);
    if ((a2 & 0x1000000000000000LL) != 0) {
      goto LABEL_20;
    }
    if ((a2 & 0x2000000000000000LL) != 0)
    {
      v22[0] = a1;
      v22[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      uint64_t v7 = (char *)v22 + (HIBYTE(a2) & 0xF);
      uint64_t v8 = v22;
    }

    else
    {
      if ((a1 & 0x1000000000000000LL) != 0)
      {
        uint64_t v5 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v6 = a1 & 0xFFFFFFFFFFFFLL;
      }

      else
      {
        uint64_t v5 = _StringObject.sharedUTF8.getter(a1, a2);
      }

      if (v5) {
        uint64_t v7 = (_BYTE *)(v5 + v6);
      }
      else {
        uint64_t v7 = 0LL;
      }
      uint64_t v8 = (_BYTE *)v5;
    }

    uint64_t v9 = sub_10043D278(v8, v7);
    unint64_t v11 = v10;
    if (v10 >> 60 != 15)
    {
      swift_bridgeObjectRelease(a2);
      *(void *)&v19[0] = v9;
      *((void *)&v19[0] + 1) = v11;
      return *(void *)&v19[0];
    }

    if ((a2 & 0x1000000000000000LL) != 0)
    {
LABEL_20:
      Swift::Int v12 = String.UTF8View._foreignCount()();
    }

    else if ((a2 & 0x2000000000000000LL) != 0)
    {
      Swift::Int v12 = HIBYTE(a2) & 0xF;
    }

    else
    {
      Swift::Int v12 = a1 & 0xFFFFFFFFFFFFLL;
    }

    *(void *)&v19[0] = sub_10040B2E4(v12);
    *((void *)&v19[0] + 1) = v13;
    __chkstk_darwin(v14, v15);
    sub_10043CCC8();
    __asm { BR              X12 }
  }

  sub_10043D79C(v19, (uint64_t)v22);
  uint64_t v3 = v23;
  uint64_t v4 = v24;
  sub_10040A238(v22, v23);
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)( &v21,  sub_10040B170,  0LL,  &type metadata for Data._Representation,  v3,  v4);
  swift_bridgeObjectRelease(a2);
  v19[0] = v21;
  sub_10040A648(v22);
  return *(void *)&v19[0];
}

uint64_t sub_10043CB1C@<X0>(size_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_10043CB40(a1, a2, a3);
}

uint64_t sub_10043CB40@<X0>(size_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  size_t v4 = sub_10043D1C8(a1, a2);
  uint64_t v5 = sub_10043BB3C(v4);
  uint64_t v7 = v6;
  uint64_t result = swift_release(v4);
  *a3 = v5;
  a3[1] = v7;
  return result;
}

Class sub_10043CBA0( uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t (*a5)(uint64_t, unint64_t, uint64_t, uint64_t))
{
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a3);
  unint64_t v12 = v11;

  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  uint64_t v15 = v14;

  uint64_t v16 = a5(v10, v12, v13, v15);
  unint64_t v18 = v17;
  swift_bridgeObjectRelease(v15);
  sub_100402A84(v10, v12);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100402A84(v16, v18);
  return isa;
}

id sub_10043CC98()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for IDSHKDFWrapper();
  return objc_msgSendSuper2(&v2, "dealloc");
}

void sub_10043CCC8()
{
  __asm { BR              X11 }

void *sub_10043CD28@<X0>(uint64_t a1@<X8>)
{
  void *(*v3)(void **__return_ptr, uint64_t *, char *);
  uint64_t v4;
  void *result;
  unint64_t v6;
  void *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  id v8 = v4;
  LOWORD(v9) = a1;
  BYTE2(v9) = BYTE2(a1);
  HIBYTE(v9) = BYTE3(a1);
  uint64_t v10 = BYTE4(a1);
  unint64_t v11 = BYTE5(a1);
  unint64_t v12 = BYTE6(a1);
  uint64_t result = v3(&v7, &v8, (char *)&v8 + BYTE6(a1));
  if (!v2) {
    uint64_t result = v7;
  }
  uint64_t v6 = v9 | ((unint64_t)v10 << 32) | ((unint64_t)v11 << 40) | ((unint64_t)v12 << 48);
  void *v1 = v8;
  v1[1] = v6;
  return result;
}

void *sub_10043CFB8( void *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t result = a1(&v6, a3, a4 - a3);
    if (v4) {
      return result;
    }
    return (void *)v6;
  }

  uint64_t result = a1(&v6, 0LL, 0LL);
  if (!v4) {
    return (void *)v6;
  }
  return result;
}

char *sub_10043D01C(uint64_t a1, uint64_t a2, void *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t result = (char *)__DataStorage._bytes.getter();
  if (!result) {
    goto LABEL_12;
  }
  id v8 = result;
  uint64_t result = (char *)__DataStorage._offset.getter();
  uint64_t v9 = a1 - (void)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }

  BOOL v10 = __OFSUB__(a2, a1);
  uint64_t v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }

  uint64_t v12 = __DataStorage._length.getter();
  if (v12 >= v11) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v12;
  }
  uint64_t result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3) {
    return (char *)v14;
  }
  return result;
}

uint64_t sub_10043D0C8(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5 = a1;
  unint64_t v6 = a1 >> 16;
  uint64_t v7 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000LL) == 0 || (a2 & 0x800000000000000LL) != 0)
  {
    uint64_t v13 = String.UTF16View.index(_:offsetBy:)(15LL, v6, a2);
    uint64_t v14 = v13 + (v7 << 16);
    unint64_t v15 = v13 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    unint64_t v16 = v14 & 0xFFFFFFFFFFFF0000LL;
    if (!v7) {
      unint64_t v16 = v15;
    }
    return v16 | 4;
  }

  else
  {
    uint64_t v8 = String.UTF8View._foreignIndex(_:offsetBy:)(15LL, v6);
    uint64_t v9 = v8 + (v7 << 16);
    unint64_t v10 = v8 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    unint64_t v11 = v9 & 0xFFFFFFFFFFFF0000LL;
    if (!v7) {
      unint64_t v11 = v10;
    }
    return v11 | 8;
  }

uint64_t sub_10043D140@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v8 = *a3;
    uint64_t v7 = a3[1];
    swift_bridgeObjectRetain(v7);
    uint64_t result = _StringGuts.copyUTF8(into:)(v5, a2, v8, v7);
    if ((v9 & 1) == 0)
    {
      uint64_t v10 = result;
      uint64_t result = swift_bridgeObjectRelease(v7);
      *a4 = 0LL;
      a4[1] = 0xE000000000000000LL;
      a4[2] = 15LL;
      a4[3] = v10;
      return result;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

size_t sub_10043D1C8(size_t result, unint64_t a2)
{
  if (!result) {
    return (size_t)&_swiftEmptyArrayStorage;
  }
  uint64_t v3 = (const void *)result;
  int64_t v4 = a2 - result;
  if (a2 == result) {
    return (size_t)&_swiftEmptyArrayStorage;
  }
  if (v4 < 1)
  {
    uint64_t v5 = &_swiftEmptyArrayStorage;
    if (!a2) {
      goto LABEL_13;
    }
  }

  else
  {
    uint64_t v6 = sub_1003F5CB4((uint64_t *)&unk_1009B97F0);
    uint64_t v5 = (void *)swift_allocObject(v6, v4 + 32, 7LL);
    uint64_t result = j__malloc_size(v5);
    void v5[2] = v4;
    v5[3] = 2 * result - 64;
    if (!a2) {
      goto LABEL_13;
    }
  }

  if ((unint64_t)v3 < a2)
  {
    if ((v4 & 0x8000000000000000LL) == 0)
    {
      memmove(v5 + 4, v3, v4);
      return (size_t)v5;
    }

    __break(1u);
  }

_BYTE *sub_10043D278(_BYTE *result, _BYTE *a2)
{
  if (result)
  {
    uint64_t v2 = a2 - result;
    if (a2 == result)
    {
      return 0LL;
    }

    else if (v2 <= 14)
    {
      return (_BYTE *)sub_10040B3A0(result, a2);
    }

    else if ((unint64_t)v2 >= 0x7FFFFFFF)
    {
      return (_BYTE *)sub_10040B460((uint64_t)result, (uint64_t)a2);
    }

    else
    {
      return (_BYTE *)sub_10040B4D8((uint64_t)result, (uint64_t)a2);
    }
  }

  return result;
}

void sub_10043D2DC(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v13 = a1;
  unint64_t v14 = a2;
  sub_1004028CC(a1, a2);
  SymmetricKey.init<A>(data:)(&v13, &type metadata for Data, &protocol witness table for Data);
  swift_bridgeObjectRetain(a4);
  uint64_t v13 = sub_10043C620(a3, a4);
  unint64_t v14 = v12;
  __asm { BR              X9 }

uint64_t sub_10043D3CC()
{
  uint64_t v8 = BYTE6(v3);
  uint64_t v9 = type metadata accessor for SHA256(0LL);
  unint64_t v10 = sub_10043D674();
  unint64_t v11 = sub_10043D6BC();
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, void *, unint64_t, unint64_t))static HKDF.deriveKey<A>(inputKeyMaterial:info:outputByteCount:))( v2,  v7 - 96,  v8,  v9,  &type metadata for Data,  v10,  v11);
  sub_100402A84(v4, v5);
  ((void (*)(uint64_t (*)@<X0>(size_t@<X0>, unint64_t@<X1>, uint64_t *@<X8>), void, void *))SymmetricKey.withUnsafeBytes<A>(_:))( sub_10043CB1C,  0LL,  &type metadata for Data);
  unint64_t v12 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v12(v1, v0);
  v12(v2, v0);
  return *(void *)(v7 - 96);
}

void sub_10043D4B8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  __asm { BR              X10 }

uint64_t sub_10043D564()
{
  uint64_t v7 = BYTE6(v4);
  uint64_t v8 = type metadata accessor for SHA256(0LL);
  unint64_t v9 = sub_10043D674();
  unint64_t v10 = sub_10043D6BC();
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, void *, void *, unint64_t, void *, unint64_t))static HKDF.expand<A, B>(pseudoRandomKey:info:outputByteCount:))( v6 - 96,  v6 - 112,  v7,  v8,  &type metadata for Data,  &type metadata for Data,  v9,  &protocol witness table for Data,  v10);
  sub_100402A84(v2, v3);
  ((void (*)(uint64_t (*)@<X0>(size_t@<X0>, unint64_t@<X1>, uint64_t *@<X8>), void, void *))SymmetricKey.withUnsafeBytes<A>(_:))( sub_10043CB1C,  0LL,  &type metadata for Data);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v1, v0);
  return *(void *)(v6 - 96);
}

uint64_t type metadata accessor for IDSHKDFWrapper()
{
  return objc_opt_self(&OBJC_CLASS____TtC17identityservicesd14IDSHKDFWrapper);
}

unint64_t sub_10043D674()
{
  unint64_t result = qword_1009B9118;
  if (!qword_1009B9118)
  {
    uint64_t v1 = type metadata accessor for SHA256(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for SHA256, v1);
    atomic_store(result, (unint64_t *)&qword_1009B9118);
  }

  return result;
}

unint64_t sub_10043D6BC()
{
  unint64_t result = qword_1009BBF30;
  if (!qword_1009BBF30)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_1009BBF30);
  }

  return result;
}

uint64_t sub_10043D700(uint64_t a1)
{
  uint64_t v2 = sub_1003F5CB4(&qword_1009B9E90);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void *sub_10043D740@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *(uint64_t **)(v3 + 16);
  uint64_t v7 = *v5;
  uint64_t v6 = v5[1];
  v13[0] = v7;
  v13[1] = v6;
  v12[2] = v13;
  unint64_t result = sub_10043CFB8( (void *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_10043D7B4,  (uint64_t)v12,  a1,  a2);
  *a3 = result;
  a3[1] = v9;
  a3[2] = v10;
  a3[3] = v11;
  return result;
}

uint64_t sub_10043D79C(__int128 *a1, uint64_t a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  return a2;
}

uint64_t sub_10043D7B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return sub_10043D140(a1, a2, *(uint64_t **)(v3 + 16), a3);
}

uint64_t sub_10043D7D0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  v5._dispatch_queue_t object = (void *)0x800000010083FA70LL;
  v5._countAndFlagsBits = 0xD000000000000038LL;
  String.append(_:)(v5);
  sub_1004028CC(a2, a3);
  v6._countAndFlagsBits = Data.description.getter(a2, a3);
  dispatch_queue_t object = v6._object;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(object);
  sub_100402A84(a2, a3);
  v8._countAndFlagsBits = 62LL;
  v8._dispatch_queue_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v8);
  return 0LL;
}

unint64_t sub_10043D888(char a1)
{
  return a1 & 1 | ((unint64_t)(a1 & 1) << 40) | (unint64_t)&_mh_execute_header;
}

void *sub_10043D898(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  char v6 = BYTE5(a2);
  uint64_t v7 = sub_1003F5CB4(&qword_1009B9E98);
  uint64_t v8 = type metadata accessor for IDSGroupEncryptionMaterialData(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 72);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = (v11 + 32) & ~v11;
  uint64_t v13 = swift_allocObject(v7, v12 + v10, v11 | 7);
  *(_OWORD *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1007184C0;
  uint64_t v14 = v13 + v12;
  *(_BYTE *)uint64_t v14 = v6 & 1;
  *(void *)(v14 + _Block_object_dispose(va, 8) = a3;
  *(void *)(v14 + swift_unknownObjectWeakDestroy(v0 + 16) = a4;
  swift_storeEnumTagMultiPayload(v14, v8, 1LL);
  sub_1004028CC(a3, a4);
  unint64_t v15 = sub_10043DE40(v13);
  swift_setDeallocating(v13);
  swift_arrayDestroy(v14, 1LL, v8);
  swift_deallocClassInstance(v13, 32LL, 7LL);
  return v15;
}

void sub_10043D980(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if ((sub_1004B5F64(a1 & 0xFFFFFFFFFFLL) & 1) != 0 && sub_1004B7430((a1 >> 40) & 1, (a4 >> 40) & 1)) {
    sub_100410288(a2, a3);
  }
}

void *sub_10043DA08()
{
  char v1 = *(_BYTE *)(v0 + 5);
  uint64_t v2 = *(void *)(v0 + 8);
  unint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = sub_1003F5CB4(&qword_1009B9E98);
  uint64_t v5 = type metadata accessor for IDSGroupEncryptionMaterialData(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 72);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = (v8 + 32) & ~v8;
  uint64_t v10 = swift_allocObject(v4, v9 + v7, v8 | 7);
  *(_OWORD *)(v10 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1007184C0;
  uint64_t v11 = v10 + v9;
  *(_BYTE *)uint64_t v11 = v1;
  *(void *)(v11 + _Block_object_dispose(va, 8) = v2;
  *(void *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  swift_storeEnumTagMultiPayload(v11, v5, 1LL);
  sub_1004028CC(v2, v3);
  uint64_t v12 = sub_10043DE40(v10);
  swift_setDeallocating(v10);
  swift_arrayDestroy(v11, 1LL, v5);
  swift_deallocClassInstance(v10, 32LL, 7LL);
  return v12;
}

uint64_t sub_10043DAE8()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 16);
  _StringGuts.grow(_:)(59LL);
  v3._dispatch_queue_t object = (void *)0x800000010083FA70LL;
  v3._countAndFlagsBits = 0xD000000000000038LL;
  String.append(_:)(v3);
  v4._countAndFlagsBits = Data.description.getter(v1, v2);
  dispatch_queue_t object = v4._object;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(object);
  v6._countAndFlagsBits = 62LL;
  v6._dispatch_queue_t object = (void *)0xE100000000000000LL;
  String.append(_:)(v6);
  return 0LL;
}

Swift::Int sub_10043DB84()
{
  uint64_t v1 = *(void *)(v0 + 8);
  unint64_t v2 = *(void *)(v0 + 16);
  Hasher.init(_seed:)(v6, 0LL);
  unint64_t v3 = sub_10040C97C();
  dispatch thunk of Hashable.hash(into:)(v6, &type metadata for IDSGroupEncryptionDesiredMaterialKind, v3);
  unint64_t v4 = sub_10043E048();
  dispatch thunk of Hashable.hash(into:)(v6, &type metadata for IDSGroupEncryptionBlobKind, v4);
  sub_1004028CC(v1, v2);
  Data.hash(into:)(v6, v1, v2);
  sub_100402A84(v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_10043DC44(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  unint64_t v4 = *(void *)(v1 + 16);
  unint64_t v5 = sub_10040C97C();
  dispatch thunk of Hashable.hash(into:)(a1, &type metadata for IDSGroupEncryptionDesiredMaterialKind, v5);
  unint64_t v6 = sub_10043E048();
  dispatch thunk of Hashable.hash(into:)(a1, &type metadata for IDSGroupEncryptionBlobKind, v6);
  sub_1004028CC(v3, v4);
  Data.hash(into:)(a1, v3, v4);
  return sub_100402A84(v3, v4);
}

Swift::Int sub_10043DCF4(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 8);
  unint64_t v3 = *(void *)(v1 + 16);
  Hasher.init(_seed:)(v7, a1);
  unint64_t v4 = sub_10040C97C();
  dispatch thunk of Hashable.hash(into:)(v7, &type metadata for IDSGroupEncryptionDesiredMaterialKind, v4);
  unint64_t v5 = sub_10043E048();
  dispatch thunk of Hashable.hash(into:)(v7, &type metadata for IDSGroupEncryptionBlobKind, v5);
  sub_1004028CC(v2, v3);
  Data.hash(into:)(v7, v2, v3);
  sub_100402A84(v2, v3);
  return Hasher._finalize()();
}

void sub_10043DDB0(unsigned int *a1, uint64_t a2)
{
  int v2 = *((unsigned __int8 *)a1 + 5);
  uint64_t v3 = *((void *)a1 + 1);
  uint64_t v4 = *((void *)a1 + 2);
  int v5 = *(unsigned __int8 *)(a2 + 5);
}

void *sub_10043DE40(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for IDSGroupEncryptionMaterialData(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v4, v5);
  uint64_t v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v32 - v10;
  uint64_t v12 = *(void *)(a1 + 16);
  if (v12)
  {
    sub_1003F5CB4(&qword_1009B9298);
    uint64_t v13 = static _SetStorage.allocate(capacity:)(v12);
    uint64_t v14 = 0LL;
    uint64_t v15 = v13 + 56;
    uint64_t v16 = *(unsigned __int8 *)(v3 + 80);
    uint64_t v32 = v12;
    uint64_t v33 = a1 + ((v16 + 32) & ~v16);
    uint64_t v17 = *(void *)(v3 + 72);
    while (1)
    {
      sub_10043E2F8(v33 + v17 * v14, (uint64_t)v11);
      uint64_t v18 = *(void *)(v13 + 40);
      uint64_t v19 = sub_10043E33C(&qword_1009B9288, (uint64_t)&unk_10071C750);
      uint64_t v20 = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v2, v19);
      uint64_t v21 = ~(-1LL << *(_BYTE *)(v13 + 32));
      unint64_t v22 = v20 & v21;
      unint64_t v23 = (v20 & (unint64_t)v21) >> 6;
      uint64_t v24 = *(void *)(v15 + 8 * v23);
      uint64_t v25 = 1LL << (v20 & v21);
      if ((v25 & v24) != 0)
      {
        while (1)
        {
          sub_10043E2F8(*(void *)(v13 + 48) + v22 * v17, (uint64_t)v7);
          uint64_t v26 = sub_10043E33C(&qword_1009B9290, (uint64_t)&unk_10071C790);
          char v27 = dispatch thunk of static Equatable.== infix(_:_:)(v7, v11, v2, v26);
          sub_10043E37C((uint64_t)v7);
          if ((v27 & 1) != 0) {
            break;
          }
          unint64_t v22 = (v22 + 1) & v21;
          unint64_t v23 = v22 >> 6;
          uint64_t v24 = *(void *)(v15 + 8 * (v22 >> 6));
          uint64_t v25 = 1LL << v22;
          if ((v24 & (1LL << v22)) == 0) {
            goto LABEL_8;
          }
        }

        sub_10043E37C((uint64_t)v11);
      }

      else
      {
LABEL_8:
        *(void *)(v15 + 8 * v23) = v25 | v24;
        unint64_t result = (void *)sub_10043E3B8((uint64_t)v11, *(void *)(v13 + 48) + v22 * v17);
        uint64_t v29 = *(void *)(v13 + 16);
        BOOL v30 = __OFADD__(v29, 1LL);
        uint64_t v31 = v29 + 1;
        if (v30)
        {
          __break(1u);
          return result;
        }

        *(void *)(v13 + swift_unknownObjectWeakDestroy(v0 + 16) = v31;
      }

      if (++v14 == v32) {
        return (void *)v13;
      }
    }
  }

  return &_swiftEmptySetSingleton;
}

unint64_t sub_10043E048()
{
  unint64_t result = qword_1009B9EA0;
  if (!qword_1009B9EA0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10071C6A8, &type metadata for IDSGroupEncryptionBlobKind);
    atomic_store(result, (unint64_t *)&qword_1009B9EA0);
  }

  return result;
}

unint64_t sub_10043E08C(uint64_t a1)
{
  unint64_t result = sub_10043E0B0();
  *(void *)(a1 + _Block_object_dispose(va, 8) = result;
  return result;
}

unint64_t sub_10043E0B0()
{
  unint64_t result = qword_1009B9EA8;
  if (!qword_1009B9EA8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100719054, &type metadata for IDSGroupEncryptionDesiredBlobMaterialSet);
    atomic_store(result, (unint64_t *)&qword_1009B9EA8);
  }

  return result;
}

unint64_t sub_10043E0F8()
{
  unint64_t result = qword_1009B9EB0;
  if (!qword_1009B9EB0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100719094, &type metadata for IDSGroupEncryptionDesiredBlobMaterialSet);
    atomic_store(result, (unint64_t *)&qword_1009B9EB0);
  }

  return result;
}

uint64_t destroy for IDSGroupEncryptionDesiredBlobMaterialSet(uint64_t a1)
{
  return sub_100402A84(*(void *)(a1 + 8), *(void *)(a1 + 16));
}

uint64_t _s17identityservicesd40IDSGroupEncryptionDesiredBlobMaterialSetVwCP_0(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5) = *(_BYTE *)(a2 + 5);
  uint64_t v3 = *(void *)(a2 + 8);
  unint64_t v4 = *(void *)(a2 + 16);
  sub_1004028CC(v3, v4);
  *(void *)(a1 + _Block_object_dispose(va, 8) = v3;
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v4;
  return a1;
}

uint64_t assignWithCopy for IDSGroupEncryptionDesiredBlobMaterialSet(uint64_t a1, int *a2)
{
  int v3 = *a2;
  *(_BYTE *)(a1 + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)a1 = v3;
  *(_BYTE *)(a1 + 5) = *((_BYTE *)a2 + 5);
  uint64_t v4 = *((void *)a2 + 1);
  unint64_t v5 = *((void *)a2 + 2);
  sub_1004028CC(v4, v5);
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + _Block_object_dispose(va, 8) = v4;
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v5;
  sub_100402A84(v6, v7);
  return a1;
}

__n128 initializeWithTake for IDSGroupEncryptionDesiredBlobMaterialSet(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for IDSGroupEncryptionDesiredBlobMaterialSet(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5) = *(_BYTE *)(a2 + 5);
  uint64_t v3 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + _Block_object_dispose(va, 8) = *(_OWORD *)(a2 + 8);
  sub_100402A84(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for IDSGroupEncryptionDesiredBlobMaterialSet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 5);
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for IDSGroupEncryptionDesiredBlobMaterialSet( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + _Block_object_dispose(va, 8) = 0LL;
    *(void *)(result + swift_unknownObjectWeakDestroy(v0 + 16) = 0LL;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFF) {
      *(_BYTE *)(result + 24) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 5) = a2 + 1;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for IDSGroupEncryptionDesiredBlobMaterialSet()
{
  return &type metadata for IDSGroupEncryptionDesiredBlobMaterialSet;
}

uint64_t sub_10043E2F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for IDSGroupEncryptionMaterialData(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10043E33C(unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = type metadata accessor for IDSGroupEncryptionMaterialData(255LL);
    uint64_t result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_10043E37C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for IDSGroupEncryptionMaterialData(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10043E3B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for IDSGroupEncryptionMaterialData(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_10043E3FC()
{
  unint64_t result = qword_1009B9EC0;
  if (!qword_1009B9EC0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100719EB8, &type metadata for SDPersistenceMigrationPlan.SDPersistenceSchemaV1);
    atomic_store(result, (unint64_t *)&qword_1009B9EC0);
  }

  return result;
}

uint64_t sub_10043E440()
{
  uint64_t v6 = v0;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719198);
  uint64_t v2 = sub_10040A2B0( &qword_1009B9EC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable,  (uint64_t)&unk_10071A018);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  uint64_t v3 = swift_getKeyPath(&unk_100719198);
  uint64_t v4 = sub_10040A2B0( &qword_1009BC840,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable,  (uint64_t)&unk_100719F18);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for String);
  swift_release(v3);
  return v6;
}

uint64_t sub_10043E51C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  v9[0] = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719198);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9EC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable,  (uint64_t)&unk_10071A018);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_100719198);
  uint64_t v6 = sub_10040A2B0( &qword_1009BC840,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable,  (uint64_t)&unk_100719F18);
  PersistentModel.getValue<A>(forKey:)(v9, v5, v6, &protocol witness table for String);
  uint64_t result = swift_release(v5);
  uint64_t v8 = v9[1];
  *a2 = v9[0];
  a2[1] = v8;
  return result;
}

uint64_t sub_10043E600(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v9 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719198);
  v8[2] = v9;
  void v8[3] = v3;
  void v8[4] = v2;
  uint64_t v5 = sub_10040A2B0( &qword_1009B9EC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable,  (uint64_t)&unk_10071A018);
  __n128 v6 = swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v9,  KeyPath,  sub_100459E0C,  v8,  (char *)&type metadata for () + 8,  v5,  v6);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_10043E6C4()
{
  uint64_t v6 = v0;
  uint64_t KeyPath = swift_getKeyPath(&unk_1007191C0);
  uint64_t v2 = sub_10040A2B0( &qword_1009B9EC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable,  (uint64_t)&unk_10071A018);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  uint64_t v3 = swift_getKeyPath(&unk_1007191C0);
  uint64_t v4 = sub_10040A2B0( &qword_1009BC840,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable,  (uint64_t)&unk_100719F18);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for String);
  swift_release(v3);
  return v6;
}

uint64_t sub_10043E7A0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  v9[0] = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_1007191C0);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9EC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable,  (uint64_t)&unk_10071A018);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_1007191C0);
  uint64_t v6 = sub_10040A2B0( &qword_1009BC840,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable,  (uint64_t)&unk_100719F18);
  PersistentModel.getValue<A>(forKey:)(v9, v5, v6, &protocol witness table for String);
  uint64_t result = swift_release(v5);
  uint64_t v8 = v9[1];
  *a2 = v9[0];
  a2[1] = v8;
  return result;
}

uint64_t sub_10043E884(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v9 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_1007191C0);
  v8[2] = v9;
  void v8[3] = v3;
  void v8[4] = v2;
  uint64_t v5 = sub_10040A2B0( &qword_1009B9EC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable,  (uint64_t)&unk_10071A018);
  __n128 v6 = swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v9,  KeyPath,  sub_10045A49C,  v8,  (char *)&type metadata for () + 8,  v5,  v6);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_10043E948()
{
  uint64_t v6 = v0;
  uint64_t KeyPath = swift_getKeyPath(&unk_1007191E8);
  uint64_t v2 = sub_10040A2B0( &qword_1009B9EC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable,  (uint64_t)&unk_10071A018);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  uint64_t v3 = swift_getKeyPath(&unk_1007191E8);
  uint64_t v4 = sub_10040A2B0( &qword_1009BC840,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable,  (uint64_t)&unk_100719F18);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for String);
  swift_release(v3);
  return v6;
}

uint64_t sub_10043EA24@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  v9[0] = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_1007191E8);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9EC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable,  (uint64_t)&unk_10071A018);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_1007191E8);
  uint64_t v6 = sub_10040A2B0( &qword_1009BC840,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable,  (uint64_t)&unk_100719F18);
  PersistentModel.getValue<A>(forKey:)(v9, v5, v6, &protocol witness table for String);
  uint64_t result = swift_release(v5);
  uint64_t v8 = v9[1];
  *a2 = v9[0];
  a2[1] = v8;
  return result;
}

uint64_t sub_10043EB08(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v9 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_1007191E8);
  v8[2] = v9;
  void v8[3] = v3;
  void v8[4] = v2;
  uint64_t v5 = sub_10040A2B0( &qword_1009B9EC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable,  (uint64_t)&unk_10071A018);
  __n128 v6 = swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v9,  KeyPath,  sub_10045A488,  v8,  (char *)&type metadata for () + 8,  v5,  v6);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_10043EBCC()
{
  uint64_t v7 = v0;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719210);
  uint64_t v2 = sub_10040A2B0( &qword_1009B9EC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable,  (uint64_t)&unk_10071A018);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v2);
  swift_release(KeyPath);
  uint64_t v3 = swift_getKeyPath(&unk_100719210);
  uint64_t v4 = sub_10040A2B0( &qword_1009BC840,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable,  (uint64_t)&unk_100719F18);
  uint64_t v5 = sub_10045119C( &qword_1009B9ED8,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.getValue<A>(forKey:)(&v7, v3, v4, v5);
  swift_release(v3);
  return v7;
}

double sub_10043ECC4@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  *(void *)&__int128 v9 = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719210);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9EC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable,  (uint64_t)&unk_10071A018);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_100719210);
  uint64_t v6 = sub_10040A2B0( &qword_1009BC840,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable,  (uint64_t)&unk_100719F18);
  uint64_t v7 = sub_10045119C( &qword_1009B9ED8,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.getValue<A>(forKey:)(&v9, v5, v6, v7);
  swift_release(v5);
  double result = *(double *)&v9;
  *a2 = v9;
  return result;
}

uint64_t sub_10043EDC4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v9 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719210);
  v8[2] = v9;
  void v8[3] = v3;
  void v8[4] = v2;
  uint64_t v5 = sub_10040A2B0( &qword_1009B9EC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable,  (uint64_t)&unk_10071A018);
  __n128 v6 = swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v9,  KeyPath,  sub_10045A474,  v8,  (char *)&type metadata for () + 8,  v5,  v6);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_10043EE88()
{
  uint64_t v7 = v0;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719238);
  uint64_t v2 = sub_10040A2B0( &qword_1009B9EC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable,  (uint64_t)&unk_10071A018);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v2);
  swift_release(KeyPath);
  uint64_t v3 = swift_getKeyPath(&unk_100719238);
  uint64_t v4 = sub_10040A2B0( &qword_1009BC840,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable,  (uint64_t)&unk_100719F18);
  uint64_t v5 = sub_10045119C( &qword_1009B9ED8,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.getValue<A>(forKey:)(&v7, v3, v4, v5);
  swift_release(v3);
  return v7;
}

double sub_10043EF80@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  *(void *)&__int128 v9 = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719238);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9EC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable,  (uint64_t)&unk_10071A018);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_100719238);
  uint64_t v6 = sub_10040A2B0( &qword_1009BC840,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable,  (uint64_t)&unk_100719F18);
  uint64_t v7 = sub_10045119C( &qword_1009B9ED8,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.getValue<A>(forKey:)(&v9, v5, v6, v7);
  swift_release(v5);
  double result = *(double *)&v9;
  *a2 = v9;
  return result;
}

uint64_t sub_10043F080(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v9 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719238);
  v8[2] = v9;
  void v8[3] = v3;
  void v8[4] = v2;
  uint64_t v5 = sub_10040A2B0( &qword_1009B9EC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable,  (uint64_t)&unk_10071A018);
  __n128 v6 = swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v9,  KeyPath,  sub_10045A460,  v8,  (char *)&type metadata for () + 8,  v5,  v6);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_10043F144()
{
  uint64_t v7 = v0;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719260);
  uint64_t v2 = sub_10040A2B0( &qword_1009B9EC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable,  (uint64_t)&unk_10071A018);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v2);
  swift_release(KeyPath);
  uint64_t v3 = swift_getKeyPath(&unk_100719260);
  uint64_t v4 = sub_10040A2B0( &qword_1009BC840,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable,  (uint64_t)&unk_100719F18);
  uint64_t v5 = sub_1004512D8( &qword_1009B9EF0,  (void (*)(void))sub_100451340,  (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.getValue<A>(forKey:)(&v7, v3, v4, v5);
  swift_release(v3);
  return v7;
}

double sub_10043F23C@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  *(void *)&__int128 v9 = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719260);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9EC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable,  (uint64_t)&unk_10071A018);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_100719260);
  uint64_t v6 = sub_10040A2B0( &qword_1009BC840,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable,  (uint64_t)&unk_100719F18);
  uint64_t v7 = sub_1004512D8( &qword_1009B9EF0,  (void (*)(void))sub_100451340,  (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.getValue<A>(forKey:)(&v9, v5, v6, v7);
  swift_release(v5);
  double result = *(double *)&v9;
  *a2 = v9;
  return result;
}

uint64_t sub_10043F33C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v9 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719260);
  v8[2] = v9;
  void v8[3] = v2;
  void v8[4] = v3;
  sub_100439780(v2, v3);
  uint64_t v5 = sub_10040A2B0( &qword_1009B9EC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable,  (uint64_t)&unk_10071A018);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v9,  KeyPath,  sub_10045A44C,  v8,  (char *)&type metadata for () + 8,  v5,  v6);
  sub_10040AD00(v2, v3);
  return swift_release(KeyPath);
}

uint64_t sub_10043F404(uint64_t a1, unint64_t a2)
{
  uint64_t KeyPath = swift_getKeyPath(&unk_100719260);
  uint64_t v10 = v2;
  uint64_t v11 = a1;
  unint64_t v12 = a2;
  uint64_t v6 = sub_10040A2B0( &qword_1009B9EC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable,  (uint64_t)&unk_10071A018);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v13,  KeyPath,  sub_100451384,  &v9,  (char *)&type metadata for () + 8,  v6,  v7);
  sub_10040AD00(a1, a2);
  return swift_release(KeyPath);
}

uint64_t sub_10043F4C4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, uint64_t (*a6)(uint64_t), uint64_t a7)
{
  uint64_t KeyPath = swift_getKeyPath(a4);
  v16[0] = a2;
  v16[1] = a3;
  uint64_t v13 = sub_10040A2B0(a5, a6, a7);
  uint64_t v14 = sub_1004512D8( &qword_1009B9EE8,  (void (*)(void))sub_100451294,  (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, v16, v13, v14);
  return swift_release(KeyPath);
}

uint64_t sub_10043F574()
{
  uint64_t v8 = v0;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719288);
  uint64_t v2 = sub_10040A2B0( &qword_1009B9EC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable,  (uint64_t)&unk_10071A018);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v2);
  swift_release(KeyPath);
  uint64_t v3 = swift_getKeyPath(&unk_100719288);
  uint64_t v4 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice(0LL);
  uint64_t v5 = sub_10040A2B0( &qword_1009BC840,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable,  (uint64_t)&unk_100719F18);
  unint64_t v6 = sub_1004513E4();
  PersistentModel.getValue<A, B>(forKey:)(&v8, v3, v4, v5, v6);
  swift_release(v3);
  return v8;
}

uint64_t sub_10043F664@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v10 = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719288);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9EC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable,  (uint64_t)&unk_10071A018);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v10, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_100719288);
  uint64_t v6 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice(0LL);
  uint64_t v7 = sub_10040A2B0( &qword_1009BC840,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable,  (uint64_t)&unk_100719F18);
  unint64_t v8 = sub_1004513E4();
  PersistentModel.getValue<A, B>(forKey:)(&v10, v5, v6, v7, v8);
  uint64_t result = swift_release(v5);
  *a2 = v10;
  return result;
}

uint64_t sub_10043F75C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v8 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719288);
  uint64_t v7[2] = v8;
  v7[3] = v2;
  uint64_t v4 = sub_10040A2B0( &qword_1009B9EC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable,  (uint64_t)&unk_10071A018);
  __n128 v5 = swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v8,  KeyPath,  sub_10045A1E0,  v7,  (char *)&type metadata for () + 8,  v4,  v5);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_10043F814(uint64_t a1)
{
  uint64_t KeyPath = swift_getKeyPath(&unk_100719288);
  uint64_t v8 = v1;
  uint64_t v9 = a1;
  uint64_t v4 = sub_10040A2B0( &qword_1009B9EC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable,  (uint64_t)&unk_10071A018);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v10,  KeyPath,  sub_100451478,  &v7,  (char *)&type metadata for () + 8,  v4,  v5);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(a1);
}

uint64_t sub_10043F8C0(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath = swift_getKeyPath(&unk_100719288);
  uint64_t v8 = a2;
  uint64_t v4 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice(0LL);
  uint64_t v5 = sub_10040A2B0( &qword_1009BC840,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable,  (uint64_t)&unk_100719F18);
  unint64_t v6 = sub_1004513E4();
  PersistentModel.setValue<A, B>(forKey:to:)(KeyPath, &v8, v4, v5, v6);
  return swift_release(KeyPath);
}

void *sub_10043F954( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9)
{
  uint64_t v17 = sub_1004514A0(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  sub_10040AD00(a9, *((unint64_t *)&a9 + 1));
  return v17;
}

uint64_t sub_10043FA08(uint64_t a1)
{
  return sub_100441DEC(a1, (void (*)(uint64_t))sub_10043FA14);
}

void *sub_10043FA14(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  v2[6] = sub_1003F5CB4(&qword_1009B9F18);
  uint64_t v5 = sub_10040A2B0( &qword_1009BC840,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable,  (uint64_t)&unk_100719F18);
  *(void *)&__int128 v28 = v4;
  *((void *)&v28 + 1) = v4;
  uint64_t v29 = v5;
  uint64_t v30 = v5;
  v2[7] = swift_getOpaqueTypeConformance2( &v28,  &opaque type descriptor for <<opaque return type of static PersistentModel.createBackingData<A>()>>,  1LL);
  sub_10040B2A8(v2 + 3);
  static PersistentModel.createBackingData<A>()(v4, v4, v5, v5);
  sub_100401ACC((uint64_t)(v2 + 3), (uint64_t)&v28);
  uint64_t v6 = v30;
  uint64_t v7 = v31;
  sub_10040A238(&v28, v30);
  uint64_t KeyPath = swift_getKeyPath(&unk_100719210);
  __int128 v27 = 0uLL;
  uint64_t v9 = sub_1003F5CB4(&qword_1009B9A38);
  uint64_t v10 = sub_10045119C( &qword_1009B9ED0,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <A> A?);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(KeyPath, &v27, v9, v10, v6, v7);
  swift_release(KeyPath);
  sub_10040A648(&v28);
  *((_BYTE *)v2 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
  sub_100401ACC((uint64_t)(v2 + 3), (uint64_t)&v28);
  uint64_t v11 = v30;
  uint64_t v12 = v31;
  sub_10040A238(&v28, v30);
  uint64_t v13 = swift_getKeyPath(&unk_100719238);
  __int128 v27 = 0uLL;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v13, &v27, v9, v10, v11, v12);
  swift_release(v13);
  sub_10040A648(&v28);
  *((_BYTE *)v2 + 17) = 0;
  sub_100401ACC((uint64_t)(v2 + 3), (uint64_t)&v28);
  uint64_t v14 = v30;
  uint64_t v15 = v31;
  sub_10040A238(&v28, v30);
  uint64_t v16 = swift_getKeyPath(&unk_100719260);
  __int128 v27 = xmmword_1007190F0;
  uint64_t v17 = sub_1003F5CB4(&qword_1009B9EE0);
  uint64_t v18 = sub_1004512D8( &qword_1009B9EE8,  (void (*)(void))sub_100451294,  (uint64_t)&protocol conformance descriptor for <A> A?);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v16, &v27, v17, v18, v14, v15);
  swift_release(v16);
  sub_10040A648(&v28);
  *((_BYTE *)v2 + 1_Block_object_dispose(va, 8) = 0;
  sub_100401ACC((uint64_t)(v2 + 3), (uint64_t)&v28);
  uint64_t v19 = v30;
  uint64_t v20 = v31;
  sub_10040A238(&v28, v30);
  uint64_t v21 = swift_getKeyPath(&unk_100719288);
  *(void *)&__int128 v27 = &_swiftEmptyArrayStorage;
  uint64_t v22 = sub_1003F5CB4(&qword_1009B9EF8);
  uint64_t v23 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice(0LL);
  unint64_t v24 = sub_1004513E4();
  dispatch thunk of BackingData.setValue<A, B>(forKey:to:)(v21, &v27, v22, v23, v24, v19, v20);
  swift_release(v21);
  uint64_t v25 = sub_10040A648(&v28);
  *((_BYTE *)v2 + 19) = 0;
  ObservationRegistrar.init()(v25);
  *((_DWORD *)v2 + 4) = 0;
  sub_100401ACC((uint64_t)a1, (uint64_t)&v28);
  swift_beginAccess(v2 + 3, &v27, 33LL, 0LL);
  sub_10040A648(v2 + 3);
  sub_10043D79C(&v28, (uint64_t)(v2 + 3));
  swift_endAccess(&v27);
  sub_10040A648(a1);
  return v2;
}

uint64_t sub_10043FD4C()
{
  return sub_10044D5F0(OBJC_IVAR____TtCOO17identityservicesd26SDPersistenceMigrationPlan21SDPersistenceSchemaV121IDSQuerySDAddressable___observationRegistrar);
}

uint64_t sub_10043FD58()
{
  uint64_t v7 = v0;
  uint64_t KeyPath = swift_getKeyPath(&unk_1007192B0);
  uint64_t v2 = sub_10040A2B0( &qword_1009B9F20,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A134);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v2);
  swift_release(KeyPath);
  uint64_t v3 = swift_getKeyPath(&unk_1007192B0);
  uint64_t v4 = sub_10040A2B0( (unint64_t *)&unk_1009BC900,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A034);
  unint64_t v5 = sub_100451340();
  PersistentModel.getValue<A>(forKey:)(&v7, v3, v4, v5);
  swift_release(v3);
  return v7;
}

double sub_10043FE38@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  *(void *)&__int128 v9 = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_1007192B0);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9F20,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A134);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_1007192B0);
  uint64_t v6 = sub_10040A2B0( (unint64_t *)&unk_1009BC900,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A034);
  unint64_t v7 = sub_100451340();
  PersistentModel.getValue<A>(forKey:)(&v9, v5, v6, v7);
  swift_release(v5);
  double result = *(double *)&v9;
  *a2 = v9;
  return result;
}

uint64_t sub_10043FF20(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v9 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_1007192B0);
  v8[2] = v9;
  void v8[3] = v2;
  void v8[4] = v3;
  sub_1004028CC(v2, v3);
  uint64_t v5 = sub_10040A2B0( &qword_1009B9F20,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A134);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v9,  KeyPath,  sub_100459D40,  v8,  (char *)&type metadata for () + 8,  v5,  v6);
  sub_100402A84(v2, v3);
  return swift_release(KeyPath);
}

uint64_t sub_10043FFE8()
{
  uint64_t v6 = v0;
  uint64_t KeyPath = swift_getKeyPath(&unk_1007192D8);
  uint64_t v2 = sub_10040A2B0( &qword_1009B9F20,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A134);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  uint64_t v3 = swift_getKeyPath(&unk_1007192D8);
  uint64_t v4 = sub_10040A2B0( (unint64_t *)&unk_1009BC900,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A034);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for String);
  swift_release(v3);
  return v6;
}

uint64_t sub_1004400C4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  v9[0] = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_1007192D8);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9F20,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A134);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_1007192D8);
  uint64_t v6 = sub_10040A2B0( (unint64_t *)&unk_1009BC900,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A034);
  PersistentModel.getValue<A>(forKey:)(v9, v5, v6, &protocol witness table for String);
  uint64_t result = swift_release(v5);
  uint64_t v8 = v9[1];
  *a2 = v9[0];
  a2[1] = v8;
  return result;
}

uint64_t sub_1004401A8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v9 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_1007192D8);
  v8[2] = v9;
  void v8[3] = v3;
  void v8[4] = v2;
  uint64_t v5 = sub_10040A2B0( &qword_1009B9F20,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A134);
  __n128 v6 = swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v9,  KeyPath,  sub_10045A438,  v8,  (char *)&type metadata for () + 8,  v5,  v6);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_10044026C()
{
  uint64_t v7 = v0;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719300);
  uint64_t v2 = sub_10040A2B0( &qword_1009B9F20,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A134);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v2);
  swift_release(KeyPath);
  uint64_t v3 = swift_getKeyPath(&unk_100719300);
  uint64_t v4 = sub_10040A2B0( (unint64_t *)&unk_1009BC900,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A034);
  unint64_t v5 = sub_100451340();
  PersistentModel.getValue<A>(forKey:)(&v7, v3, v4, v5);
  swift_release(v3);
  return v7;
}

double sub_10044034C@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  *(void *)&__int128 v9 = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719300);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9F20,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A134);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_100719300);
  uint64_t v6 = sub_10040A2B0( (unint64_t *)&unk_1009BC900,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A034);
  unint64_t v7 = sub_100451340();
  PersistentModel.getValue<A>(forKey:)(&v9, v5, v6, v7);
  swift_release(v5);
  double result = *(double *)&v9;
  *a2 = v9;
  return result;
}

uint64_t sub_100440434(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v9 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719300);
  v8[2] = v9;
  void v8[3] = v2;
  void v8[4] = v3;
  sub_1004028CC(v2, v3);
  uint64_t v5 = sub_10040A2B0( &qword_1009B9F20,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A134);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v9,  KeyPath,  sub_10045A424,  v8,  (char *)&type metadata for () + 8,  v5,  v6);
  sub_100402A84(v2, v3);
  return swift_release(KeyPath);
}

uint64_t sub_1004404FC()
{
  uint64_t v7 = v0;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719328);
  uint64_t v2 = sub_10040A2B0( &qword_1009B9F20,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A134);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v2);
  swift_release(KeyPath);
  uint64_t v3 = swift_getKeyPath(&unk_100719328);
  uint64_t v4 = sub_10040A2B0( (unint64_t *)&unk_1009BC900,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A034);
  unint64_t v5 = sub_100451340();
  PersistentModel.getValue<A>(forKey:)(&v7, v3, v4, v5);
  swift_release(v3);
  return v7;
}

double sub_1004405DC@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  *(void *)&__int128 v9 = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719328);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9F20,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A134);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_100719328);
  uint64_t v6 = sub_10040A2B0( (unint64_t *)&unk_1009BC900,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A034);
  unint64_t v7 = sub_100451340();
  PersistentModel.getValue<A>(forKey:)(&v9, v5, v6, v7);
  swift_release(v5);
  double result = *(double *)&v9;
  *a2 = v9;
  return result;
}

uint64_t sub_1004406C4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v9 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719328);
  v8[2] = v9;
  void v8[3] = v2;
  void v8[4] = v3;
  sub_1004028CC(v2, v3);
  uint64_t v5 = sub_10040A2B0( &qword_1009B9F20,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A134);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v9,  KeyPath,  sub_10045A410,  v8,  (char *)&type metadata for () + 8,  v5,  v6);
  sub_100402A84(v2, v3);
  return swift_release(KeyPath);
}

uint64_t sub_10044078C()
{
  uint64_t v7 = v0;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719350);
  uint64_t v2 = sub_10040A2B0( &qword_1009B9F20,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A134);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v2);
  swift_release(KeyPath);
  uint64_t v3 = swift_getKeyPath(&unk_100719350);
  uint64_t v4 = sub_10040A2B0( (unint64_t *)&unk_1009BC900,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A034);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for Bool);
  swift_release(v3);
  return v6;
}

uint64_t sub_100440868@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v9 = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719350);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9F20,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A134);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_100719350);
  uint64_t v6 = sub_10040A2B0( (unint64_t *)&unk_1009BC900,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A034);
  PersistentModel.getValue<A>(forKey:)(&v8, v5, v6, &protocol witness table for Bool);
  uint64_t result = swift_release(v5);
  *a2 = v8;
  return result;
}

uint64_t sub_10044094C(char *a1, uint64_t *a2)
{
  char v2 = *a1;
  uint64_t v9 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719350);
  uint64_t v7[2] = v9;
  char v8 = v2;
  uint64_t v4 = sub_10040A2B0( &qword_1009B9F20,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A134);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v9,  KeyPath,  sub_10045A1CC,  v7,  (char *)&type metadata for () + 8,  v4,  v5);
  return swift_release(KeyPath);
}

uint64_t sub_1004409F4()
{
  uint64_t v7 = v0;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719378);
  uint64_t v2 = sub_10040A2B0( &qword_1009B9F20,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A134);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v2);
  swift_release(KeyPath);
  uint64_t v3 = swift_getKeyPath(&unk_100719378);
  uint64_t v4 = sub_10040A2B0( (unint64_t *)&unk_1009BC900,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A034);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for Bool);
  swift_release(v3);
  return v6;
}

uint64_t sub_100440AD0@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v9 = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719378);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9F20,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A134);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_100719378);
  uint64_t v6 = sub_10040A2B0( (unint64_t *)&unk_1009BC900,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A034);
  PersistentModel.getValue<A>(forKey:)(&v8, v5, v6, &protocol witness table for Bool);
  uint64_t result = swift_release(v5);
  *a2 = v8;
  return result;
}

uint64_t sub_100440BB4(char *a1, uint64_t *a2)
{
  char v2 = *a1;
  uint64_t v9 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719378);
  uint64_t v7[2] = v9;
  char v8 = v2;
  uint64_t v4 = sub_10040A2B0( &qword_1009B9F20,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A134);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v9,  KeyPath,  sub_10045A1B8,  v7,  (char *)&type metadata for () + 8,  v4,  v5);
  return swift_release(KeyPath);
}

uint64_t sub_100440C5C()
{
  uint64_t v7 = v0;
  uint64_t KeyPath = swift_getKeyPath(&unk_1007193A0);
  uint64_t v2 = sub_10040A2B0( &qword_1009B9F20,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A134);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v2);
  swift_release(KeyPath);
  uint64_t v3 = swift_getKeyPath(&unk_1007193A0);
  uint64_t v4 = sub_10040A2B0( (unint64_t *)&unk_1009BC900,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A034);
  uint64_t v5 = sub_10045119C( &qword_1009B9ED8,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.getValue<A>(forKey:)(&v7, v3, v4, v5);
  swift_release(v3);
  return v7;
}

double sub_100440D54@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  *(void *)&__int128 v9 = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_1007193A0);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9F20,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A134);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_1007193A0);
  uint64_t v6 = sub_10040A2B0( (unint64_t *)&unk_1009BC900,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A034);
  uint64_t v7 = sub_10045119C( &qword_1009B9ED8,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.getValue<A>(forKey:)(&v9, v5, v6, v7);
  swift_release(v5);
  double result = *(double *)&v9;
  *a2 = v9;
  return result;
}

uint64_t sub_100440E54(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v9 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_1007193A0);
  v8[2] = v9;
  void v8[3] = v3;
  void v8[4] = v2;
  uint64_t v5 = sub_10040A2B0( &qword_1009B9F20,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A134);
  __n128 v6 = swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v9,  KeyPath,  sub_10045A3FC,  v8,  (char *)&type metadata for () + 8,  v5,  v6);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_100440F18()
{
  uint64_t v7 = v0;
  uint64_t KeyPath = swift_getKeyPath(&unk_1007193C8);
  uint64_t v2 = sub_10040A2B0( &qword_1009B9F20,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A134);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v2);
  swift_release(KeyPath);
  uint64_t v3 = swift_getKeyPath(&unk_1007193C8);
  uint64_t v4 = sub_10040A2B0( (unint64_t *)&unk_1009BC900,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A034);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for Bool);
  swift_release(v3);
  return v6;
}

uint64_t sub_100440FF4@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v9 = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_1007193C8);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9F20,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A134);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_1007193C8);
  uint64_t v6 = sub_10040A2B0( (unint64_t *)&unk_1009BC900,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A034);
  PersistentModel.getValue<A>(forKey:)(&v8, v5, v6, &protocol witness table for Bool);
  uint64_t result = swift_release(v5);
  *a2 = v8;
  return result;
}

uint64_t sub_1004410D8(char *a1, uint64_t *a2)
{
  char v2 = *a1;
  uint64_t v9 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_1007193C8);
  uint64_t v7[2] = v9;
  char v8 = v2;
  uint64_t v4 = sub_10040A2B0( &qword_1009B9F20,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A134);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v9,  KeyPath,  sub_10045A1A4,  v7,  (char *)&type metadata for () + 8,  v4,  v5);
  return swift_release(KeyPath);
}

uint64_t sub_100441180()
{
  return sub_10044118C((uint64_t)&unk_1007193F0);
}

uint64_t sub_10044118C(uint64_t a1)
{
  uint64_t v9 = v1;
  uint64_t KeyPath = swift_getKeyPath(a1);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9F20,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A134);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(a1);
  uint64_t v6 = sub_10040A2B0( (unint64_t *)&unk_1009BC900,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A034);
  uint64_t v7 = sub_1004512D8( &qword_1009B9EF0,  (void (*)(void))sub_100451340,  (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.getValue<A>(forKey:)(&v9, v5, v6, v7);
  swift_release(v5);
  return v9;
}

double sub_10044127C@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_100441288(a1, (uint64_t)&unk_1007193F0, a2);
}

double sub_100441288@<D0>(void *a1@<X0>, uint64_t a2@<X3>, _OWORD *a3@<X8>)
{
  *(void *)&__int128 v11 = *a1;
  uint64_t KeyPath = swift_getKeyPath(a2);
  uint64_t v6 = sub_10040A2B0( &qword_1009B9F20,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A134);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v11, KeyPath, v6);
  swift_release(KeyPath);
  uint64_t v7 = swift_getKeyPath(a2);
  uint64_t v8 = sub_10040A2B0( (unint64_t *)&unk_1009BC900,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A034);
  uint64_t v9 = sub_1004512D8( &qword_1009B9EF0,  (void (*)(void))sub_100451340,  (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.getValue<A>(forKey:)(&v11, v7, v8, v9);
  swift_release(v7);
  double result = *(double *)&v11;
  *a3 = v11;
  return result;
}

uint64_t sub_100441384(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v9 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_1007193F0);
  v8[2] = v9;
  void v8[3] = v2;
  void v8[4] = v3;
  sub_100439780(v2, v3);
  uint64_t v5 = sub_10040A2B0( &qword_1009B9F20,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A134);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v9,  KeyPath,  sub_10045A3E8,  v8,  (char *)&type metadata for () + 8,  v5,  v6);
  sub_10040AD00(v2, v3);
  return swift_release(KeyPath);
}

uint64_t sub_10044144C()
{
  return sub_10044118C((uint64_t)&unk_100719418);
}

double sub_100441458@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_100441288(a1, (uint64_t)&unk_100719418, a2);
}

uint64_t sub_100441464(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v9 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719418);
  v8[2] = v9;
  void v8[3] = v2;
  void v8[4] = v3;
  sub_100439780(v2, v3);
  uint64_t v5 = sub_10040A2B0( &qword_1009B9F20,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A134);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v9,  KeyPath,  sub_10045A3D4,  v8,  (char *)&type metadata for () + 8,  v5,  v6);
  sub_10040AD00(v2, v3);
  return swift_release(KeyPath);
}

double sub_10044152C@<D0>(uint64_t a1@<X8>)
{
  *(void *)&v16[0] = v1;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719440);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9F20,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A134);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v16, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_100719440);
  uint64_t v6 = sub_10040A2B0( (unint64_t *)&unk_1009BC900,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A034);
  unint64_t v7 = sub_1004521F8();
  PersistentModel.getValue<A>(forKey:)(v16, v5, v6, v7);
  swift_release(v5);
  __int16 v8 = v17;
  char v9 = v18;
  double result = *(double *)v16;
  __int128 v11 = v16[1];
  __int128 v12 = v19;
  __int128 v13 = v20;
  __int128 v14 = v21;
  __int128 v15 = v22;
  *(_OWORD *)a1 = v16[0];
  *(_OWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = v11;
  *(_WORD *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 34) = v9;
  *(_OWORD *)(a1 + 40) = v12;
  *(_OWORD *)(a1 + 56) = v13;
  *(_OWORD *)(a1 + 72) = v14;
  *(_OWORD *)(a1 + 8_Block_object_dispose(va, 8) = v15;
  return result;
}

double sub_100441644@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)&v16[0] = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719440);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9F20,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A134);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v16, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_100719440);
  uint64_t v6 = sub_10040A2B0( (unint64_t *)&unk_1009BC900,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A034);
  unint64_t v7 = sub_1004521F8();
  PersistentModel.getValue<A>(forKey:)(v16, v5, v6, v7);
  swift_release(v5);
  __int16 v8 = v17;
  char v9 = v18;
  double result = *(double *)v16;
  __int128 v11 = v16[1];
  __int128 v12 = v19;
  __int128 v13 = v20;
  __int128 v14 = v21;
  __int128 v15 = v22;
  *(_OWORD *)a2 = v16[0];
  *(_OWORD *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = v11;
  *(_WORD *)(a2 + 32) = v8;
  *(_BYTE *)(a2 + 34) = v9;
  *(_OWORD *)(a2 + 40) = v12;
  *(_OWORD *)(a2 + 56) = v13;
  *(_OWORD *)(a2 + 72) = v14;
  *(_OWORD *)(a2 + 8_Block_object_dispose(va, 8) = v15;
  return result;
}

uint64_t sub_10044175C(uint64_t a1, uint64_t *a2)
{
  __int128 v2 = *(_OWORD *)(a1 + 80);
  v11[4] = *(_OWORD *)(a1 + 64);
  void v11[5] = v2;
  uint64_t v12 = *(void *)(a1 + 96);
  __int128 v3 = *(_OWORD *)(a1 + 16);
  v11[0] = *(_OWORD *)a1;
  v11[1] = v3;
  __int128 v4 = *(_OWORD *)(a1 + 48);
  _OWORD v11[2] = *(_OWORD *)(a1 + 32);
  v11[3] = v4;
  uint64_t v10 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719440);
  void v9[2] = v10;
  v9[3] = v11;
  sub_100452264((uint64_t *)v11, (void (*)(uint64_t, uint64_t))sub_100439780);
  uint64_t v6 = sub_10040A2B0( &qword_1009B9F20,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A134);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v10,  KeyPath,  sub_10045A190,  v9,  (char *)&type metadata for () + 8,  v6,  v7);
  sub_100452264((uint64_t *)v11, (void (*)(uint64_t, uint64_t))sub_10040AD00);
  return swift_release(KeyPath);
}

uint64_t sub_100441840(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath = swift_getKeyPath(&unk_100719440);
  __int128 v4 = *(_OWORD *)(a2 + 80);
  void v10[4] = *(_OWORD *)(a2 + 64);
  v10[5] = v4;
  uint64_t v11 = *(void *)(a2 + 96);
  __int128 v5 = *(_OWORD *)(a2 + 16);
  v10[0] = *(_OWORD *)a2;
  v10[1] = v5;
  __int128 v6 = *(_OWORD *)(a2 + 48);
  void v10[2] = *(_OWORD *)(a2 + 32);
  v10[3] = v6;
  uint64_t v7 = sub_10040A2B0( (unint64_t *)&unk_1009BC900,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A034);
  unint64_t v8 = sub_1004521B4();
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, v10, v7, v8);
  return swift_release(KeyPath);
}

uint64_t sub_1004418E0()
{
  uint64_t v8 = v0;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719468);
  uint64_t v2 = sub_10040A2B0( &qword_1009B9F20,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A134);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v2);
  swift_release(KeyPath);
  uint64_t v3 = swift_getKeyPath(&unk_100719468);
  uint64_t v4 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable(0LL);
  uint64_t v5 = sub_10040A2B0( (unint64_t *)&unk_1009BC900,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A034);
  unint64_t v6 = sub_100452310();
  PersistentModel.getValue<A, B>(forKey:)(&v8, v3, v4, v5, v6);
  swift_release(v3);
  return v8;
}

uint64_t sub_1004419D0@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v10 = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719468);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9F20,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A134);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v10, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_100719468);
  uint64_t v6 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable(0LL);
  uint64_t v7 = sub_10040A2B0( (unint64_t *)&unk_1009BC900,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A034);
  unint64_t v8 = sub_100452310();
  PersistentModel.getValue<A, B>(forKey:)(&v10, v5, v6, v7, v8);
  uint64_t result = swift_release(v5);
  *a2 = v10;
  return result;
}

uint64_t sub_100441AC8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v8 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719468);
  uint64_t v7[2] = v8;
  void v7[3] = v2;
  uint64_t v4 = sub_10040A2B0( &qword_1009B9F20,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A134);
  __n128 v5 = swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v8,  KeyPath,  sub_10045A17C,  v7,  (char *)&type metadata for () + 8,  v4,  v5);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_100441B80(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath = swift_getKeyPath(&unk_100719468);
  uint64_t v8 = a2;
  uint64_t v4 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable(0LL);
  uint64_t v5 = sub_10040A2B0( (unint64_t *)&unk_1009BC900,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A034);
  unint64_t v6 = sub_100452310();
  PersistentModel.setValue<A, B>(forKey:to:)(KeyPath, &v8, v4, v5, v6);
  return swift_release(KeyPath);
}

void *sub_100441C14( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, char a7, char a8, __int128 a9, char a10, __int128 a11, __int128 a12, __int128 *a13)
{
  uint64_t v16 = sub_1004523CC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
  sub_100452264((uint64_t *)a13, (void (*)(uint64_t, uint64_t))sub_10040AD00);
  sub_10040AD00(a12, *((unint64_t *)&a12 + 1));
  sub_10040AD00(a11, *((unint64_t *)&a11 + 1));
  sub_100402A84(a5, a6);
  sub_100402A84(a3, a4);
  return v16;
}

void sub_100441D18(uint64_t *a1, char a2, void (*a3)(uint64_t, void *))
{
  uint64_t v4 = (void *)*a1;
  uint64_t v5 = *a1 + 40;
  if ((a2 & 1) != 0)
  {
    unint64_t v6 = (void *)(v4[16] + 24LL);
    sub_100401ACC(*a1, v5);
    swift_beginAccess(v6, v4 + 13, 33LL, 0LL);
    sub_10040A648(v6);
    a3(v5, v6);
    swift_endAccess(v4 + 13);
    sub_10040A648(v4);
  }

  else
  {
    uint64_t v7 = (void *)(v4[16] + 24LL);
    swift_beginAccess(v7, v5, 33LL, 0LL);
    sub_10040A648(v7);
    a3((uint64_t)v4, v7);
    swift_endAccess(v5);
  }

  free(v4);
}

uint64_t sub_100441DE0(uint64_t a1)
{
  return sub_100441DEC(a1, (void (*)(uint64_t))sub_100441E34);
}

uint64_t sub_100441DEC(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v5 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  a2(a1);
  return v5;
}

void *sub_100441E34(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  v2[6] = sub_1003F5CB4(&qword_1009B9F58);
  uint64_t v4 = sub_10040A2B0( (unint64_t *)&unk_1009BC900,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDDevice,  (uint64_t)&unk_10071A034);
  *(void *)&__int128 v37 = v3;
  *((void *)&v37 + 1) = v3;
  uint64_t v38 = v4;
  uint64_t v39 = v4;
  v2[7] = swift_getOpaqueTypeConformance2( &v37,  &opaque type descriptor for <<opaque return type of static PersistentModel.createBackingData<A>()>>,  1LL);
  sub_10040B2A8(v2 + 3);
  static PersistentModel.createBackingData<A>()(v3, v3, v4, v4);
  sub_100401ACC((uint64_t)(v2 + 3), (uint64_t)&v37);
  uint64_t v5 = v39;
  uint64_t v6 = v40;
  sub_10040A238(&v37, v39);
  uint64_t KeyPath = swift_getKeyPath(&unk_100719350);
  LOBYTE(v36) = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)( KeyPath,  &v36,  &type metadata for Bool,  &protocol witness table for Bool,  v5,  v6);
  swift_release(KeyPath);
  sub_10040A648(&v37);
  sub_100401ACC((uint64_t)(v2 + 3), (uint64_t)&v37);
  uint64_t v8 = v39;
  uint64_t v9 = v40;
  sub_10040A238(&v37, v39);
  uint64_t v10 = swift_getKeyPath(&unk_100719378);
  LOBYTE(v36) = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)( v10,  &v36,  &type metadata for Bool,  &protocol witness table for Bool,  v8,  v9);
  swift_release(v10);
  sub_10040A648(&v37);
  sub_100401ACC((uint64_t)(v2 + 3), (uint64_t)&v37);
  uint64_t v11 = v39;
  uint64_t v12 = v40;
  sub_10040A238(&v37, v39);
  uint64_t v13 = swift_getKeyPath(&unk_1007193A0);
  __int128 v36 = 0uLL;
  uint64_t v14 = sub_1003F5CB4(&qword_1009B9A38);
  uint64_t v15 = sub_10045119C( &qword_1009B9ED0,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <A> A?);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v13, &v36, v14, v15, v11, v12);
  swift_release(v13);
  sub_10040A648(&v37);
  *((_BYTE *)v2 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
  sub_100401ACC((uint64_t)(v2 + 3), (uint64_t)&v37);
  uint64_t v16 = v39;
  uint64_t v17 = v40;
  sub_10040A238(&v37, v39);
  uint64_t v18 = swift_getKeyPath(&unk_1007193C8);
  LOBYTE(v36) = 0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)( v18,  &v36,  &type metadata for Bool,  &protocol witness table for Bool,  v16,  v17);
  swift_release(v18);
  sub_10040A648(&v37);
  sub_100401ACC((uint64_t)(v2 + 3), (uint64_t)&v37);
  uint64_t v19 = v39;
  uint64_t v20 = v40;
  sub_10040A238(&v37, v39);
  uint64_t v21 = swift_getKeyPath(&unk_1007193F0);
  __int128 v36 = xmmword_1007190F0;
  uint64_t v22 = sub_1003F5CB4(&qword_1009B9EE0);
  uint64_t v23 = sub_1004512D8( &qword_1009B9EE8,  (void (*)(void))sub_100451294,  (uint64_t)&protocol conformance descriptor for <A> A?);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v21, &v36, v22, v23, v19, v20);
  swift_release(v21);
  sub_10040A648(&v37);
  *((_BYTE *)v2 + 17) = 0;
  sub_100401ACC((uint64_t)(v2 + 3), (uint64_t)&v37);
  uint64_t v24 = v39;
  uint64_t v25 = v40;
  sub_10040A238(&v37, v39);
  uint64_t v26 = swift_getKeyPath(&unk_100719418);
  __int128 v36 = xmmword_1007190F0;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v26, &v36, v22, v23, v24, v25);
  swift_release(v26);
  sub_10040A648(&v37);
  *((_BYTE *)v2 + 1_Block_object_dispose(va, 8) = 0;
  sub_100401ACC((uint64_t)(v2 + 3), (uint64_t)&v37);
  uint64_t v27 = v39;
  uint64_t v28 = v40;
  sub_10040A238(&v37, v39);
  uint64_t v29 = swift_getKeyPath(&unk_100719468);
  *(void *)&__int128 v36 = &_swiftEmptyArrayStorage;
  uint64_t v30 = sub_1003F5CB4(&qword_1009B9F38);
  uint64_t v31 = type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDAddressable(0LL);
  unint64_t v32 = sub_100452310();
  dispatch thunk of BackingData.setValue<A, B>(forKey:to:)(v29, &v36, v30, v31, v32, v27, v28);
  swift_release(v29);
  uint64_t v33 = sub_10040A648(&v37);
  *((_BYTE *)v2 + 19) = 0;
  ObservationRegistrar.init()(v33);
  *((_DWORD *)v2 + 4) = 0;
  sub_100401ACC((uint64_t)a1, (uint64_t)&v37);
  swift_beginAccess(v2 + 3, &v36, 33LL, 0LL);
  sub_10040A648(v2 + 3);
  sub_10043D79C(&v37, (uint64_t)(v2 + 3));
  swift_endAccess(&v36);
  sub_10040A648(a1);
  return v2;
}

uint64_t sub_10044229C()
{
  return sub_10044D5F0(OBJC_IVAR____TtCOO17identityservicesd26SDPersistenceMigrationPlan21SDPersistenceSchemaV116IDSQuerySDDevice___observationRegistrar);
}

uint64_t sub_1004422A8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1004422E8 + 4 * byte_100719180[a1]))( 0x626167676F4C746BLL,  0xEE0061746144656CLL);
}

unint64_t sub_1004422E8()
{
  return 0xD000000000000011LL;
}

BOOL sub_10044239C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1004423B0()
{
  return sub_1004422A8(*v0);
}

uint64_t sub_1004423B8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1004537F0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1004423DC()
{
  return 0LL;
}

void sub_1004423E8(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

uint64_t sub_1004423F4(uint64_t a1)
{
  unint64_t v2 = sub_100453764();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10044241C(uint64_t a1)
{
  unint64_t v2 = sub_100453764();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100442444(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_1003F5CB4(&qword_1009B9F60);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  sub_10040A238(a1, v11);
  unint64_t v13 = sub_100453764();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.DeviceIdentityContainer.CodingKeys,  &type metadata for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.DeviceIdentityContainer.CodingKeys,  v13,  v11,  v12);
  sub_1004537A8(v3, (uint64_t)v26);
  sub_1004537A8((uint64_t)v26, (uint64_t)v20);
  char v19 = 0;
  unint64_t v14 = sub_100451294();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v20, &v19, v5, &type metadata for Data, v14);
  if (!v2)
  {
    sub_1004537A8(v3 + 16, (uint64_t)v25);
    sub_1004537A8((uint64_t)v25, (uint64_t)v20);
    char v19 = 1;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v20, &v19, v5, &type metadata for Data, v14);
    uint64_t v15 = *(unsigned __int16 *)(v3 + 32);
    v20[0] = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v15, v20, v5);
    uint64_t v16 = *(unsigned __int8 *)(v3 + 34);
    v20[0] = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v20, v5);
    sub_1004537A8(v3 + 40, (uint64_t)v24);
    sub_1004537A8((uint64_t)v24, (uint64_t)v20);
    char v19 = 4;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v20, &v19, v5, &type metadata for Data, v14);
    sub_1004537A8(v3 + 56, (uint64_t)v23);
    sub_1004537A8((uint64_t)v23, (uint64_t)v20);
    char v19 = 5;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v20, &v19, v5, &type metadata for Data, v14);
    sub_1004537A8(v3 + 72, (uint64_t)v22);
    sub_1004537A8((uint64_t)v22, (uint64_t)v20);
    char v19 = 6;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v20, &v19, v5, &type metadata for Data, v14);
    sub_1004537A8(v3 + 88, (uint64_t)v21);
    sub_1004537A8((uint64_t)v21, (uint64_t)v20);
    char v19 = 7;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v20, &v19, v5, &type metadata for Data, v14);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v10, v5);
}

__n128 sub_100442728@<Q0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, __int16 a5@<W4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, __int128 a10, __n128 a11, uint64_t a12, uint64_t a13)
{
  __n128 result = a11;
  *(void *)a9 = a1;
  *(void *)(a9 + _Block_object_dispose(va, 8) = a2;
  *(void *)(a9 + swift_unknownObjectWeakDestroy(v0 + 16) = a3;
  *(void *)(a9 + 24) = a4;
  *(_WORD *)(a9 + 32) = a5;
  *(_BYTE *)(a9 + 34) = a6;
  *(void *)(a9 + 40) = a7;
  *(void *)(a9 + 4_Block_object_dispose(va, 8) = a8;
  *(_OWORD *)(a9 + 56) = a10;
  *(__n128 *)(a9 + 72) = a11;
  *(void *)(a9 + 8_Block_object_dispose(va, 8) = a12;
  *(void *)(a9 + 96) = a13;
  return result;
}

__n128 sub_100442754@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v7[5];
    *(_OWORD *)(a2 + 64) = v7[4];
    *(_OWORD *)(a2 + 80) = v5;
    *(void *)(a2 + 96) = v8;
    __int128 v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + swift_unknownObjectWeakDestroy(v0 + 16) = v6;
    __n128 result = (__n128)v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(__n128 *)(a2 + 4_Block_object_dispose(va, 8) = result;
  }

  return result;
}

uint64_t sub_1004427B0(void *a1)
{
  return sub_100442444(a1);
}

BOOL sub_1004427F8(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a1 + 80);
  v11[4] = *(_OWORD *)(a1 + 64);
  void v11[5] = v2;
  uint64_t v12 = *(void *)(a1 + 96);
  __int128 v3 = *(_OWORD *)(a1 + 16);
  v11[0] = *(_OWORD *)a1;
  v11[1] = v3;
  __int128 v4 = *(_OWORD *)(a1 + 48);
  _OWORD v11[2] = *(_OWORD *)(a1 + 32);
  v11[3] = v4;
  __int128 v5 = *(_OWORD *)(a2 + 16);
  v13[0] = *(_OWORD *)a2;
  v13[1] = v5;
  __int128 v6 = *(_OWORD *)(a2 + 32);
  __int128 v7 = *(_OWORD *)(a2 + 48);
  __int128 v8 = *(_OWORD *)(a2 + 64);
  __int128 v9 = *(_OWORD *)(a2 + 80);
  uint64_t v14 = *(void *)(a2 + 96);
  v13[4] = v8;
  void v13[5] = v9;
  void v13[2] = v6;
  v13[3] = v7;
  return sub_1004533BC((uint64_t)v11, (uint64_t)v13);
}

uint64_t sub_100442860()
{
  uint64_t v7 = v0;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719490);
  uint64_t v2 = sub_10040A2B0( &qword_1009B9F68,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A250);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v2);
  swift_release(KeyPath);
  uint64_t v3 = swift_getKeyPath(&unk_100719490);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9F70,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A150);
  unint64_t v5 = sub_100451340();
  PersistentModel.getValue<A>(forKey:)(&v7, v3, v4, v5);
  swift_release(v3);
  return v7;
}

double sub_100442940@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  *(void *)&__int128 v9 = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719490);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9F68,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A250);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_100719490);
  uint64_t v6 = sub_10040A2B0( &qword_1009B9F70,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A150);
  unint64_t v7 = sub_100451340();
  PersistentModel.getValue<A>(forKey:)(&v9, v5, v6, v7);
  swift_release(v5);
  double result = *(double *)&v9;
  *a2 = v9;
  return result;
}

uint64_t sub_100442A28(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v9 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719490);
  v8[2] = v9;
  void v8[3] = v2;
  void v8[4] = v3;
  sub_1004028CC(v2, v3);
  uint64_t v5 = sub_10040A2B0( &qword_1009B9F68,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A250);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v9,  KeyPath,  sub_100459D0C,  v8,  (char *)&type metadata for () + 8,  v5,  v6);
  sub_100402A84(v2, v3);
  return swift_release(KeyPath);
}

uint64_t sub_100442AF0()
{
  uint64_t v6 = v0;
  uint64_t KeyPath = swift_getKeyPath(&unk_1007194B8);
  uint64_t v2 = sub_10040A2B0( &qword_1009B9F68,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A250);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  uint64_t v3 = swift_getKeyPath(&unk_1007194B8);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9F70,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A150);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for String);
  swift_release(v3);
  return v6;
}

uint64_t sub_100442BCC@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  v9[0] = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_1007194B8);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9F68,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A250);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_1007194B8);
  uint64_t v6 = sub_10040A2B0( &qword_1009B9F70,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A150);
  PersistentModel.getValue<A>(forKey:)(v9, v5, v6, &protocol witness table for String);
  uint64_t result = swift_release(v5);
  uint64_t v8 = v9[1];
  *a2 = v9[0];
  a2[1] = v8;
  return result;
}

uint64_t sub_100442CB0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v9 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_1007194B8);
  v8[2] = v9;
  void v8[3] = v3;
  void v8[4] = v2;
  uint64_t v5 = sub_10040A2B0( &qword_1009B9F68,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A250);
  __n128 v6 = swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v9,  KeyPath,  sub_10045A3C0,  v8,  (char *)&type metadata for () + 8,  v5,  v6);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_100442D74()
{
  uint64_t v6 = v0;
  uint64_t KeyPath = swift_getKeyPath(&unk_1007194E0);
  uint64_t v2 = sub_10040A2B0( &qword_1009B9F68,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A250);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  uint64_t v3 = swift_getKeyPath(&unk_1007194E0);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9F70,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A150);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for String);
  swift_release(v3);
  return v6;
}

uint64_t sub_100442E50@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  v9[0] = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_1007194E0);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9F68,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A250);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_1007194E0);
  uint64_t v6 = sub_10040A2B0( &qword_1009B9F70,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A150);
  PersistentModel.getValue<A>(forKey:)(v9, v5, v6, &protocol witness table for String);
  uint64_t result = swift_release(v5);
  uint64_t v8 = v9[1];
  *a2 = v9[0];
  a2[1] = v8;
  return result;
}

uint64_t sub_100442F34(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v9 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_1007194E0);
  v8[2] = v9;
  void v8[3] = v3;
  void v8[4] = v2;
  uint64_t v5 = sub_10040A2B0( &qword_1009B9F68,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A250);
  __n128 v6 = swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v9,  KeyPath,  sub_10045A3AC,  v8,  (char *)&type metadata for () + 8,  v5,  v6);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_100442FF8()
{
  uint64_t v6 = v0;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719508);
  uint64_t v2 = sub_10040A2B0( &qword_1009B9F68,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A250);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  uint64_t v3 = swift_getKeyPath(&unk_100719508);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9F70,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A150);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for String);
  swift_release(v3);
  return v6;
}

uint64_t sub_1004430D4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  v9[0] = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719508);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9F68,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A250);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_100719508);
  uint64_t v6 = sub_10040A2B0( &qword_1009B9F70,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A150);
  PersistentModel.getValue<A>(forKey:)(v9, v5, v6, &protocol witness table for String);
  uint64_t result = swift_release(v5);
  uint64_t v8 = v9[1];
  *a2 = v9[0];
  a2[1] = v8;
  return result;
}

uint64_t sub_1004431B8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v9 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719508);
  v8[2] = v9;
  void v8[3] = v3;
  void v8[4] = v2;
  uint64_t v5 = sub_10040A2B0( &qword_1009B9F68,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A250);
  __n128 v6 = swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v9,  KeyPath,  sub_10045A398,  v8,  (char *)&type metadata for () + 8,  v5,  v6);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_10044327C()
{
  uint64_t v7 = v0;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719530);
  uint64_t v2 = sub_10040A2B0( &qword_1009B9F68,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A250);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v2);
  swift_release(KeyPath);
  uint64_t v3 = swift_getKeyPath(&unk_100719530);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9F70,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A150);
  unint64_t v5 = sub_100451340();
  PersistentModel.getValue<A>(forKey:)(&v7, v3, v4, v5);
  swift_release(v3);
  return v7;
}

double sub_10044335C@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  *(void *)&__int128 v9 = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719530);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9F68,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A250);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_100719530);
  uint64_t v6 = sub_10040A2B0( &qword_1009B9F70,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A150);
  unint64_t v7 = sub_100451340();
  PersistentModel.getValue<A>(forKey:)(&v9, v5, v6, v7);
  swift_release(v5);
  double result = *(double *)&v9;
  *a2 = v9;
  return result;
}

uint64_t sub_100443444(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v9 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719530);
  v8[2] = v9;
  void v8[3] = v2;
  void v8[4] = v3;
  sub_1004028CC(v2, v3);
  uint64_t v5 = sub_10040A2B0( &qword_1009B9F68,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A250);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v9,  KeyPath,  sub_10045A384,  v8,  (char *)&type metadata for () + 8,  v5,  v6);
  sub_100402A84(v2, v3);
  return swift_release(KeyPath);
}

uint64_t sub_10044350C()
{
  uint64_t v7 = v0;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719558);
  uint64_t v2 = sub_10040A2B0( &qword_1009B9F68,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A250);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v2);
  swift_release(KeyPath);
  uint64_t v3 = swift_getKeyPath(&unk_100719558);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9F70,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A150);
  unint64_t v5 = sub_100451340();
  PersistentModel.getValue<A>(forKey:)(&v7, v3, v4, v5);
  swift_release(v3);
  return v7;
}

double sub_1004435EC@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  *(void *)&__int128 v9 = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719558);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9F68,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A250);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_100719558);
  uint64_t v6 = sub_10040A2B0( &qword_1009B9F70,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A150);
  unint64_t v7 = sub_100451340();
  PersistentModel.getValue<A>(forKey:)(&v9, v5, v6, v7);
  swift_release(v5);
  double result = *(double *)&v9;
  *a2 = v9;
  return result;
}

uint64_t sub_1004436D4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v9 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719558);
  v8[2] = v9;
  void v8[3] = v2;
  void v8[4] = v3;
  sub_1004028CC(v2, v3);
  uint64_t v5 = sub_10040A2B0( &qword_1009B9F68,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A250);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v9,  KeyPath,  sub_10045A370,  v8,  (char *)&type metadata for () + 8,  v5,  v6);
  sub_100402A84(v2, v3);
  return swift_release(KeyPath);
}

uint64_t sub_10044379C@<X0>(void *a1@<X8>)
{
  uint64_t v9 = v1;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719580);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9F68,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A250);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_100719580);
  uint64_t v6 = sub_10040A2B0( &qword_1009B9F70,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A150);
  uint64_t v7 = sub_10040A2B0( &qword_1009BAD20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  PersistentModel.getValue<A>(forKey:)(a1, v5, v6, v7);
  return swift_release(v5);
}

uint64_t sub_100443894@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v9 = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719580);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9F68,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A250);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_100719580);
  uint64_t v6 = sub_10040A2B0( &qword_1009B9F70,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A150);
  uint64_t v7 = sub_10040A2B0( &qword_1009BAD20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  PersistentModel.getValue<A>(forKey:)(a2, v5, v6, v7);
  return swift_release(v5);
}

uint64_t sub_10044398C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = &v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v9, a1, v4);
  uint64_t v18 = *a2;
  uint64_t v10 = v18;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719580);
  uint64_t v16 = v10;
  uint64_t v17 = v9;
  uint64_t v12 = sub_10040A2B0( &qword_1009B9F68,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A250);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v18,  KeyPath,  sub_10045A168,  v15,  (char *)&type metadata for () + 8,  v12,  v13);
  swift_release(KeyPath);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v9, v4);
}

uint64_t sub_100443A98@<X0>(void *a1@<X8>)
{
  uint64_t v9 = v1;
  uint64_t KeyPath = swift_getKeyPath(&unk_1007195A8);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9F68,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A250);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_1007195A8);
  uint64_t v6 = sub_10040A2B0( &qword_1009B9F70,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A150);
  uint64_t v7 = sub_10040A2B0( &qword_1009BAD20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  PersistentModel.getValue<A>(forKey:)(a1, v5, v6, v7);
  return swift_release(v5);
}

uint64_t sub_100443B90@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v9 = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_1007195A8);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9F68,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A250);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_1007195A8);
  uint64_t v6 = sub_10040A2B0( &qword_1009B9F70,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A150);
  uint64_t v7 = sub_10040A2B0( &qword_1009BAD20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  PersistentModel.getValue<A>(forKey:)(a2, v5, v6, v7);
  return swift_release(v5);
}

uint64_t sub_100443C88(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = &v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v9, a1, v4);
  uint64_t v18 = *a2;
  uint64_t v10 = v18;
  uint64_t KeyPath = swift_getKeyPath(&unk_1007195A8);
  uint64_t v16 = v10;
  uint64_t v17 = v9;
  uint64_t v12 = sub_10040A2B0( &qword_1009B9F68,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A250);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v18,  KeyPath,  sub_10045A154,  v15,  (char *)&type metadata for () + 8,  v12,  v13);
  swift_release(KeyPath);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v9, v4);
}

double sub_100443D94()
{
  double v6 = v0;
  uint64_t KeyPath = swift_getKeyPath(&unk_1007195D0);
  uint64_t v2 = sub_10040A2B0( &qword_1009B9F68,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A250);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  uint64_t v3 = swift_getKeyPath(&unk_1007195D0);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9F70,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A150);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for Double);
  swift_release(v3);
  return v6;
}

double sub_100443E70@<D0>(double *a1@<X0>, double *a2@<X8>)
{
  double v8 = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_1007195D0);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9F68,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A250);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_1007195D0);
  uint64_t v6 = sub_10040A2B0( &qword_1009B9F70,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A150);
  PersistentModel.getValue<A>(forKey:)(&v8, v5, v6, &protocol witness table for Double);
  swift_release(v5);
  double result = v8;
  *a2 = v8;
  return result;
}

uint64_t sub_100443F54(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v8 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_1007195D0);
  uint64_t v7[2] = v8;
  void v7[3] = v2;
  uint64_t v4 = sub_10040A2B0( &qword_1009B9F68,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A250);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v8,  KeyPath,  sub_10045A140,  v7,  (char *)&type metadata for () + 8,  v4,  v5);
  return swift_release(KeyPath);
}

uint64_t sub_100444004(double a1)
{
  uint64_t KeyPath = swift_getKeyPath(&unk_1007195D0);
  double v5 = a1;
  uint64_t v3 = sub_10040A2B0( &qword_1009B9F70,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A150);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, &v5, v3, &protocol witness table for Double);
  return swift_release(KeyPath);
}

uint64_t *sub_100444084( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, void *a6, uint64_t a7, unint64_t a8, double a9, uint64_t a10, unint64_t a11, char *a12, char *a13)
{
  uint64_t v20 = sub_100454474(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
  sub_100402A84(a10, a11);
  sub_100402A84(a7, a8);
  return v20;
}

uint64_t sub_100444154(uint64_t a1)
{
  return sub_100441DEC(a1, (void (*)(uint64_t))sub_100444160);
}

void *sub_100444160(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  void v2[5] = sub_1003F5CB4(&qword_1009B9F78);
  uint64_t v5 = sub_10040A2B0( &qword_1009B9F70,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSession,  (uint64_t)&unk_10071A150);
  *(void *)&__int128 v12 = v4;
  *((void *)&v12 + 1) = v4;
  uint64_t v13 = v5;
  uint64_t v14 = v5;
  v2[6] = swift_getOpaqueTypeConformance2( &v12,  &opaque type descriptor for <<opaque return type of static PersistentModel.createBackingData<A>()>>,  1LL);
  sub_10040B2A8(v2 + 2);
  static PersistentModel.createBackingData<A>()(v4, v4, v5, v5);
  sub_100401ACC((uint64_t)(v2 + 2), (uint64_t)&v12);
  uint64_t v6 = v14;
  uint64_t v7 = v15;
  sub_10040A238(&v12, v14);
  uint64_t KeyPath = swift_getKeyPath(&unk_1007195D0);
  v11[0] = 0LL;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)( KeyPath,  v11,  &type metadata for Double,  &protocol witness table for Double,  v6,  v7);
  swift_release(KeyPath);
  uint64_t v9 = sub_10040A648(&v12);
  ObservationRegistrar.init()(v9);
  sub_100401ACC((uint64_t)a1, (uint64_t)&v12);
  swift_beginAccess(v2 + 2, v11, 33LL, 0LL);
  sub_10040A648(v2 + 2);
  sub_10043D79C(&v12, (uint64_t)(v2 + 2));
  swift_endAccess(v11);
  sub_10040A648(a1);
  return v2;
}

uint64_t sub_1004442D4()
{
  return sub_10044FD58(OBJC_IVAR____TtCOO17identityservicesd26SDPersistenceMigrationPlan21SDPersistenceSchemaV117IDSQuerySDSession___observationRegistrar);
}

uint64_t sub_1004442E0()
{
  uint64_t v7 = v0;
  uint64_t KeyPath = swift_getKeyPath(&unk_1007195F8);
  uint64_t v2 = sub_10040A2B0( &qword_1009B9F80,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDPublicIdentity,  (uint64_t)&unk_10071A36C);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v2);
  swift_release(KeyPath);
  uint64_t v3 = swift_getKeyPath(&unk_1007195F8);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9F88,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDPublicIdentity,  (uint64_t)&unk_10071A26C);
  unint64_t v5 = sub_100451340();
  PersistentModel.getValue<A>(forKey:)(&v7, v3, v4, v5);
  swift_release(v3);
  return v7;
}

double sub_1004443C0@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  *(void *)&__int128 v9 = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_1007195F8);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9F80,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDPublicIdentity,  (uint64_t)&unk_10071A36C);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_1007195F8);
  uint64_t v6 = sub_10040A2B0( &qword_1009B9F88,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDPublicIdentity,  (uint64_t)&unk_10071A26C);
  unint64_t v7 = sub_100451340();
  PersistentModel.getValue<A>(forKey:)(&v9, v5, v6, v7);
  swift_release(v5);
  double result = *(double *)&v9;
  *a2 = v9;
  return result;
}

uint64_t sub_1004444A8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v9 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_1007195F8);
  v8[2] = v9;
  void v8[3] = v2;
  void v8[4] = v3;
  sub_1004028CC(v2, v3);
  uint64_t v5 = sub_10040A2B0( &qword_1009B9F80,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDPublicIdentity,  (uint64_t)&unk_10071A36C);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v9,  KeyPath,  sub_100459CD8,  v8,  (char *)&type metadata for () + 8,  v5,  v6);
  sub_100402A84(v2, v3);
  return swift_release(KeyPath);
}

uint64_t sub_100444570()
{
  uint64_t v6 = v0;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719620);
  uint64_t v2 = sub_10040A2B0( &qword_1009B9F80,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDPublicIdentity,  (uint64_t)&unk_10071A36C);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  uint64_t v3 = swift_getKeyPath(&unk_100719620);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9F88,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDPublicIdentity,  (uint64_t)&unk_10071A26C);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for String);
  swift_release(v3);
  return v6;
}

uint64_t sub_10044464C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  v9[0] = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719620);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9F80,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDPublicIdentity,  (uint64_t)&unk_10071A36C);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_100719620);
  uint64_t v6 = sub_10040A2B0( &qword_1009B9F88,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDPublicIdentity,  (uint64_t)&unk_10071A26C);
  PersistentModel.getValue<A>(forKey:)(v9, v5, v6, &protocol witness table for String);
  uint64_t result = swift_release(v5);
  uint64_t v8 = v9[1];
  *a2 = v9[0];
  a2[1] = v8;
  return result;
}

uint64_t sub_100444730(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v9 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719620);
  v8[2] = v9;
  void v8[3] = v3;
  void v8[4] = v2;
  uint64_t v5 = sub_10040A2B0( &qword_1009B9F80,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDPublicIdentity,  (uint64_t)&unk_10071A36C);
  __n128 v6 = swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v9,  KeyPath,  sub_10045A35C,  v8,  (char *)&type metadata for () + 8,  v5,  v6);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_1004447F4()
{
  uint64_t v7 = v0;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719648);
  uint64_t v2 = sub_10040A2B0( &qword_1009B9F80,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDPublicIdentity,  (uint64_t)&unk_10071A36C);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v2);
  swift_release(KeyPath);
  uint64_t v3 = swift_getKeyPath(&unk_100719648);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9F88,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDPublicIdentity,  (uint64_t)&unk_10071A26C);
  unint64_t v5 = sub_100451340();
  PersistentModel.getValue<A>(forKey:)(&v7, v3, v4, v5);
  swift_release(v3);
  return v7;
}

double sub_1004448D4@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  *(void *)&__int128 v9 = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719648);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9F80,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDPublicIdentity,  (uint64_t)&unk_10071A36C);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_100719648);
  uint64_t v6 = sub_10040A2B0( &qword_1009B9F88,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDPublicIdentity,  (uint64_t)&unk_10071A26C);
  unint64_t v7 = sub_100451340();
  PersistentModel.getValue<A>(forKey:)(&v9, v5, v6, v7);
  swift_release(v5);
  double result = *(double *)&v9;
  *a2 = v9;
  return result;
}

uint64_t sub_1004449BC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v9 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719648);
  v8[2] = v9;
  void v8[3] = v2;
  void v8[4] = v3;
  sub_1004028CC(v2, v3);
  uint64_t v5 = sub_10040A2B0( &qword_1009B9F80,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDPublicIdentity,  (uint64_t)&unk_10071A36C);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v9,  KeyPath,  sub_10045A348,  v8,  (char *)&type metadata for () + 8,  v5,  v6);
  sub_100402A84(v2, v3);
  return swift_release(KeyPath);
}

uint64_t sub_100444A84()
{
  uint64_t v6 = v0;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719670);
  uint64_t v2 = sub_10040A2B0( &qword_1009B9F80,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDPublicIdentity,  (uint64_t)&unk_10071A36C);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  uint64_t v3 = swift_getKeyPath(&unk_100719670);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9F88,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDPublicIdentity,  (uint64_t)&unk_10071A26C);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for String);
  swift_release(v3);
  return v6;
}

uint64_t sub_100444B60@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  v9[0] = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719670);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9F80,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDPublicIdentity,  (uint64_t)&unk_10071A36C);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_100719670);
  uint64_t v6 = sub_10040A2B0( &qword_1009B9F88,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDPublicIdentity,  (uint64_t)&unk_10071A26C);
  PersistentModel.getValue<A>(forKey:)(v9, v5, v6, &protocol witness table for String);
  uint64_t result = swift_release(v5);
  uint64_t v8 = v9[1];
  *a2 = v9[0];
  a2[1] = v8;
  return result;
}

uint64_t sub_100444C44(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v9 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719670);
  v8[2] = v9;
  void v8[3] = v3;
  void v8[4] = v2;
  uint64_t v5 = sub_10040A2B0( &qword_1009B9F80,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDPublicIdentity,  (uint64_t)&unk_10071A36C);
  __n128 v6 = swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v9,  KeyPath,  sub_10045A334,  v8,  (char *)&type metadata for () + 8,  v5,  v6);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_100444D08()
{
  uint64_t v7 = v0;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719698);
  uint64_t v2 = sub_10040A2B0( &qword_1009B9F80,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDPublicIdentity,  (uint64_t)&unk_10071A36C);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v2);
  swift_release(KeyPath);
  uint64_t v3 = swift_getKeyPath(&unk_100719698);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9F88,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDPublicIdentity,  (uint64_t)&unk_10071A26C);
  unint64_t v5 = sub_100451340();
  PersistentModel.getValue<A>(forKey:)(&v7, v3, v4, v5);
  swift_release(v3);
  return v7;
}

double sub_100444DE8@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  *(void *)&__int128 v9 = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719698);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9F80,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDPublicIdentity,  (uint64_t)&unk_10071A36C);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_100719698);
  uint64_t v6 = sub_10040A2B0( &qword_1009B9F88,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDPublicIdentity,  (uint64_t)&unk_10071A26C);
  unint64_t v7 = sub_100451340();
  PersistentModel.getValue<A>(forKey:)(&v9, v5, v6, v7);
  swift_release(v5);
  double result = *(double *)&v9;
  *a2 = v9;
  return result;
}

uint64_t sub_100444ED0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v9 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719698);
  v8[2] = v9;
  void v8[3] = v2;
  void v8[4] = v3;
  sub_1004028CC(v2, v3);
  uint64_t v5 = sub_10040A2B0( &qword_1009B9F80,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDPublicIdentity,  (uint64_t)&unk_10071A36C);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v9,  KeyPath,  sub_10045A320,  v8,  (char *)&type metadata for () + 8,  v5,  v6);
  sub_100402A84(v2, v3);
  return swift_release(KeyPath);
}

uint64_t sub_100444F98@<X0>(void *a1@<X8>)
{
  uint64_t v9 = v1;
  uint64_t KeyPath = swift_getKeyPath(&unk_1007196C0);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9F80,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDPublicIdentity,  (uint64_t)&unk_10071A36C);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_1007196C0);
  uint64_t v6 = sub_10040A2B0( &qword_1009B9F88,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDPublicIdentity,  (uint64_t)&unk_10071A26C);
  uint64_t v7 = sub_10040A2B0( &qword_1009BAD20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  PersistentModel.getValue<A>(forKey:)(a1, v5, v6, v7);
  return swift_release(v5);
}

uint64_t sub_100445090@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v9 = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_1007196C0);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9F80,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDPublicIdentity,  (uint64_t)&unk_10071A36C);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_1007196C0);
  uint64_t v6 = sub_10040A2B0( &qword_1009B9F88,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDPublicIdentity,  (uint64_t)&unk_10071A26C);
  uint64_t v7 = sub_10040A2B0( &qword_1009BAD20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  PersistentModel.getValue<A>(forKey:)(a2, v5, v6, v7);
  return swift_release(v5);
}

uint64_t sub_100445188(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = &v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v9, a1, v4);
  uint64_t v18 = *a2;
  uint64_t v10 = v18;
  uint64_t KeyPath = swift_getKeyPath(&unk_1007196C0);
  uint64_t v16 = v10;
  uint64_t v17 = v9;
  uint64_t v12 = sub_10040A2B0( &qword_1009B9F80,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDPublicIdentity,  (uint64_t)&unk_10071A36C);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v18,  KeyPath,  sub_10045A12C,  v15,  (char *)&type metadata for () + 8,  v12,  v13);
  swift_release(KeyPath);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v9, v4);
}

uint64_t *sub_100445294( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, void *a6, uint64_t a7, unint64_t a8)
{
  uint64_t v17 = sub_100455110(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_100402A84(a7, a8);
  sub_100402A84(a3, a4);
  return v17;
}

void sub_100445344(uint64_t *a1, char a2, void (*a3)(uint64_t, void *))
{
  uint64_t v4 = (void *)*a1;
  uint64_t v5 = *a1 + 40;
  if ((a2 & 1) != 0)
  {
    __n128 v6 = (void *)(v4[16] + 16LL);
    sub_100401ACC(*a1, v5);
    swift_beginAccess(v6, v4 + 13, 33LL, 0LL);
    sub_10040A648(v6);
    a3(v5, v6);
    swift_endAccess(v4 + 13);
    sub_10040A648(v4);
  }

  else
  {
    __n128 v7 = (void *)(v4[16] + 16LL);
    swift_beginAccess(v7, v5, 33LL, 0LL);
    sub_10040A648(v7);
    a3((uint64_t)v4, v7);
    swift_endAccess(v5);
  }

  free(v4);
}

uint64_t sub_10044540C(uint64_t a1)
{
  return sub_100441DEC(a1, (void (*)(uint64_t))sub_100445418);
}

void *sub_100445418(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  void v2[5] = sub_1003F5CB4(&qword_1009B9F90);
  uint64_t v5 = sub_10040A2B0( &qword_1009B9F88,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDPublicIdentity,  (uint64_t)&unk_10071A26C);
  *(void *)&__int128 v9 = v4;
  *((void *)&v9 + 1) = v4;
  uint64_t v10 = v5;
  uint64_t v11 = v5;
  v2[6] = swift_getOpaqueTypeConformance2( &v9,  &opaque type descriptor for <<opaque return type of static PersistentModel.createBackingData<A>()>>,  1LL);
  sub_10040B2A8(v2 + 2);
  uint64_t v6 = static PersistentModel.createBackingData<A>()(v4, v4, v5, v5);
  ObservationRegistrar.init()(v6);
  sub_100401ACC((uint64_t)a1, (uint64_t)&v9);
  swift_beginAccess(v2 + 2, v8, 33LL, 0LL);
  sub_10040A648(v2 + 2);
  sub_10043D79C(&v9, (uint64_t)(v2 + 2));
  swift_endAccess(v8);
  sub_10040A648(a1);
  return v2;
}

uint64_t sub_100445520()
{
  return sub_10044FD58(&OBJC_IVAR____TtCOO17identityservicesd26SDPersistenceMigrationPlan21SDPersistenceSchemaV124IDSQuerySDPublicIdentity___observationRegistrar);
}

uint64_t sub_10044552C()
{
  uint64_t v6 = v0;
  uint64_t KeyPath = swift_getKeyPath(&unk_1007196E8);
  uint64_t v2 = sub_10040A2B0( &qword_1009B9F98,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDShortHandle,  (uint64_t)&unk_10071A488);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  uint64_t v3 = swift_getKeyPath(&unk_1007196E8);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9FA0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDShortHandle,  (uint64_t)&unk_10071A388);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for String);
  swift_release(v3);
  return v6;
}

uint64_t sub_100445608@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  v9[0] = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_1007196E8);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9F98,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDShortHandle,  (uint64_t)&unk_10071A488);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_1007196E8);
  uint64_t v6 = sub_10040A2B0( &qword_1009B9FA0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDShortHandle,  (uint64_t)&unk_10071A388);
  PersistentModel.getValue<A>(forKey:)(v9, v5, v6, &protocol witness table for String);
  uint64_t result = swift_release(v5);
  uint64_t v8 = v9[1];
  *a2 = v9[0];
  a2[1] = v8;
  return result;
}

uint64_t sub_1004456EC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v9 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_1007196E8);
  v8[2] = v9;
  void v8[3] = v3;
  void v8[4] = v2;
  uint64_t v5 = sub_10040A2B0( &qword_1009B9F98,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDShortHandle,  (uint64_t)&unk_10071A488);
  __n128 v6 = swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v9,  KeyPath,  sub_10045A30C,  v8,  (char *)&type metadata for () + 8,  v5,  v6);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_1004457B0()
{
  uint64_t v6 = v0;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719710);
  uint64_t v2 = sub_10040A2B0( &qword_1009B9F98,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDShortHandle,  (uint64_t)&unk_10071A488);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  uint64_t v3 = swift_getKeyPath(&unk_100719710);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9FA0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDShortHandle,  (uint64_t)&unk_10071A388);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for String);
  swift_release(v3);
  return v6;
}

uint64_t sub_10044588C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  v9[0] = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719710);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9F98,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDShortHandle,  (uint64_t)&unk_10071A488);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_100719710);
  uint64_t v6 = sub_10040A2B0( &qword_1009B9FA0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDShortHandle,  (uint64_t)&unk_10071A388);
  PersistentModel.getValue<A>(forKey:)(v9, v5, v6, &protocol witness table for String);
  uint64_t result = swift_release(v5);
  uint64_t v8 = v9[1];
  *a2 = v9[0];
  a2[1] = v8;
  return result;
}

uint64_t sub_100445970(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v9 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719710);
  v8[2] = v9;
  void v8[3] = v3;
  void v8[4] = v2;
  uint64_t v5 = sub_10040A2B0( &qword_1009B9F98,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDShortHandle,  (uint64_t)&unk_10071A488);
  __n128 v6 = swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v9,  KeyPath,  sub_10045A2F8,  v8,  (char *)&type metadata for () + 8,  v5,  v6);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_100445A34@<X0>(void *a1@<X8>)
{
  uint64_t v9 = v1;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719738);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9F98,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDShortHandle,  (uint64_t)&unk_10071A488);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_100719738);
  uint64_t v6 = sub_10040A2B0( &qword_1009B9FA0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDShortHandle,  (uint64_t)&unk_10071A388);
  uint64_t v7 = sub_1004559B0( &qword_1009B9FB0,  &qword_1009BAD20,  (uint64_t)&protocol conformance descriptor for Date,  (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.getValue<A>(forKey:)(a1, v5, v6, v7);
  return swift_release(v5);
}

uint64_t sub_100445B34@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v9 = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719738);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9F98,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDShortHandle,  (uint64_t)&unk_10071A488);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_100719738);
  uint64_t v6 = sub_10040A2B0( &qword_1009B9FA0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDShortHandle,  (uint64_t)&unk_10071A388);
  uint64_t v7 = sub_1004559B0( &qword_1009B9FB0,  &qword_1009BAD20,  (uint64_t)&protocol conformance descriptor for Date,  (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.getValue<A>(forKey:)(a2, v5, v6, v7);
  return swift_release(v5);
}

uint64_t sub_100445C34(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  sub_100455A7C(a1, (uint64_t)v7);
  uint64_t v16 = *a2;
  uint64_t v8 = v16;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719738);
  uint64_t v14 = v8;
  uint64_t v15 = v7;
  uint64_t v10 = sub_10040A2B0( &qword_1009B9F98,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDShortHandle,  (uint64_t)&unk_10071A488);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v16,  KeyPath,  sub_100459ED4,  v13,  (char *)&type metadata for () + 8,  v10,  v11);
  swift_release(KeyPath);
  return sub_100455970((uint64_t)v7);
}

uint64_t sub_100445D28(uint64_t a1)
{
  uint64_t KeyPath = swift_getKeyPath(&unk_100719738);
  uint64_t v8 = v1;
  uint64_t v9 = a1;
  uint64_t v4 = sub_10040A2B0( &qword_1009B9F98,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDShortHandle,  (uint64_t)&unk_10071A488);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v10,  KeyPath,  sub_100455A34,  &v7,  (char *)&type metadata for () + 8,  v4,  v5);
  swift_release(KeyPath);
  return sub_100455970(a1);
}

uint64_t sub_100445DD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  sub_100445E38(a1, a2, a3, a4);
  return v9;
}

void *sub_100445E38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 v5 = v4;
  uint64_t v29 = a3;
  uint64_t v30 = a4;
  uint64_t v8 = *v4;
  sub_1003F5CB4(&qword_1009BC130);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v5[6] = sub_1003F5CB4(&qword_1009B9FB8);
  uint64_t v13 = sub_10040A2B0( &qword_1009B9FA0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDShortHandle,  (uint64_t)&unk_10071A388);
  v36[0] = v8;
  v36[1] = v8;
  v36[2] = v13;
  uint64_t v37 = v13;
  void v5[7] = swift_getOpaqueTypeConformance2( v36,  &opaque type descriptor for <<opaque return type of static PersistentModel.createBackingData<A>()>>,  1LL);
  sub_10040B2A8(v5 + 3);
  uint64_t v14 = static PersistentModel.createBackingData<A>()(v8, v8, v13, v13);
  *((_BYTE *)v5 + swift_unknownObjectWeakDestroy(v0 + 16) = 1;
  v28[1] = (char *)v5
         + OBJC_IVAR____TtCOO17identityservicesd26SDPersistenceMigrationPlan21SDPersistenceSchemaV121IDSQuerySDShortHandle___observationRegistrar[0];
  ObservationRegistrar.init()(v14);
  sub_100401ACC((uint64_t)(v5 + 3), (uint64_t)v36);
  uint64_t v15 = v37;
  uint64_t v16 = v38;
  sub_10040A238(v36, v37);
  uint64_t KeyPath = swift_getKeyPath(&unk_1007196E8);
  uint64_t v34 = a1;
  uint64_t v35 = a2;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)( KeyPath,  &v34,  &type metadata for String,  &protocol witness table for String,  v15,  v16);
  swift_bridgeObjectRelease(a2);
  swift_release(KeyPath);
  sub_10040A648(v36);
  sub_100401ACC((uint64_t)(v5 + 3), (uint64_t)v36);
  uint64_t v18 = v37;
  uint64_t v19 = v38;
  sub_10040A238(v36, v37);
  uint64_t v20 = swift_getKeyPath(&unk_100719710);
  uint64_t v21 = v30;
  uint64_t v34 = v29;
  uint64_t v35 = v30;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)( v20,  &v34,  &type metadata for String,  &protocol witness table for String,  v18,  v19);
  swift_bridgeObjectRelease(v21);
  swift_release(v20);
  uint64_t v22 = sub_10040A648(v36);
  Date.init()(v22);
  uint64_t v23 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56LL))(v12, 0LL, 1LL, v23);
  v36[0] = v5;
  uint64_t v24 = swift_getKeyPath(&unk_100719738);
  unint64_t v32 = v5;
  uint64_t v33 = v12;
  uint64_t v25 = sub_10040A2B0( &qword_1009B9F98,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDShortHandle,  (uint64_t)&unk_10071A488);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( v36,  v24,  sub_100459ED4,  v31,  (char *)&type metadata for () + 8,  v25,  v26);
  swift_release(v24);
  sub_100455970((uint64_t)v12);
  return v5;
}

uint64_t sub_1004460D4(uint64_t a1)
{
  return sub_100441DEC(a1, (void (*)(uint64_t))sub_1004460E0);
}

void *sub_1004460E0(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  v2[6] = sub_1003F5CB4(&qword_1009B9FB8);
  uint64_t v5 = sub_10040A2B0( &qword_1009B9FA0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDShortHandle,  (uint64_t)&unk_10071A388);
  *(void *)&__int128 v9 = v4;
  *((void *)&v9 + 1) = v4;
  uint64_t v10 = v5;
  uint64_t v11 = v5;
  v2[7] = swift_getOpaqueTypeConformance2( &v9,  &opaque type descriptor for <<opaque return type of static PersistentModel.createBackingData<A>()>>,  1LL);
  sub_10040B2A8(v2 + 3);
  uint64_t v6 = static PersistentModel.createBackingData<A>()(v4, v4, v5, v5);
  *((_BYTE *)v2 + swift_unknownObjectWeakDestroy(v0 + 16) = 1;
  ObservationRegistrar.init()(v6);
  *((_BYTE *)v2 + swift_unknownObjectWeakDestroy(v0 + 16) = 0;
  sub_100401ACC((uint64_t)a1, (uint64_t)&v9);
  swift_beginAccess(v2 + 3, v8, 33LL, 0LL);
  sub_10040A648(v2 + 3);
  sub_10043D79C(&v9, (uint64_t)(v2 + 3));
  swift_endAccess(v8);
  sub_10040A648(a1);
  return v2;
}

uint64_t sub_1004461F4()
{
  return sub_10044D5F0(OBJC_IVAR____TtCOO17identityservicesd26SDPersistenceMigrationPlan21SDPersistenceSchemaV121IDSQuerySDShortHandle___observationRegistrar);
}

uint64_t sub_100446200()
{
  uint64_t v7 = v0;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719760);
  uint64_t v2 = sub_10040A2B0( &qword_1009B9FC0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A5A4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v2);
  swift_release(KeyPath);
  uint64_t v3 = swift_getKeyPath(&unk_100719760);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9FC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A4A4);
  unint64_t v5 = sub_100451340();
  PersistentModel.getValue<A>(forKey:)(&v7, v3, v4, v5);
  swift_release(v3);
  return v7;
}

double sub_1004462E0@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  *(void *)&__int128 v9 = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719760);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9FC0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A5A4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_100719760);
  uint64_t v6 = sub_10040A2B0( &qword_1009B9FC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A4A4);
  unint64_t v7 = sub_100451340();
  PersistentModel.getValue<A>(forKey:)(&v9, v5, v6, v7);
  swift_release(v5);
  double result = *(double *)&v9;
  *a2 = v9;
  return result;
}

uint64_t sub_1004463C8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v9 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719760);
  v8[2] = v9;
  void v8[3] = v2;
  void v8[4] = v3;
  sub_1004028CC(v2, v3);
  uint64_t v5 = sub_10040A2B0( &qword_1009B9FC0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A5A4);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v9,  KeyPath,  sub_100459CA4,  v8,  (char *)&type metadata for () + 8,  v5,  v6);
  sub_100402A84(v2, v3);
  return swift_release(KeyPath);
}

uint64_t sub_100446490()
{
  uint64_t v7 = v0;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719788);
  uint64_t v2 = sub_10040A2B0( &qword_1009B9FC0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A5A4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v2);
  swift_release(KeyPath);
  uint64_t v3 = swift_getKeyPath(&unk_100719788);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9FC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A4A4);
  unint64_t v5 = sub_100451340();
  PersistentModel.getValue<A>(forKey:)(&v7, v3, v4, v5);
  swift_release(v3);
  return v7;
}

double sub_100446570@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  *(void *)&__int128 v9 = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719788);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9FC0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A5A4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_100719788);
  uint64_t v6 = sub_10040A2B0( &qword_1009B9FC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A4A4);
  unint64_t v7 = sub_100451340();
  PersistentModel.getValue<A>(forKey:)(&v9, v5, v6, v7);
  swift_release(v5);
  double result = *(double *)&v9;
  *a2 = v9;
  return result;
}

uint64_t sub_100446658(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v9 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719788);
  v8[2] = v9;
  void v8[3] = v2;
  void v8[4] = v3;
  sub_1004028CC(v2, v3);
  uint64_t v5 = sub_10040A2B0( &qword_1009B9FC0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A5A4);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v9,  KeyPath,  sub_10045A2E4,  v8,  (char *)&type metadata for () + 8,  v5,  v6);
  sub_100402A84(v2, v3);
  return swift_release(KeyPath);
}

uint64_t sub_100446720()
{
  uint64_t v7 = v0;
  uint64_t KeyPath = swift_getKeyPath(&unk_1007197B0);
  uint64_t v2 = sub_10040A2B0( &qword_1009B9FC0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A5A4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v2);
  swift_release(KeyPath);
  uint64_t v3 = swift_getKeyPath(&unk_1007197B0);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9FC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A4A4);
  unint64_t v5 = sub_100451340();
  PersistentModel.getValue<A>(forKey:)(&v7, v3, v4, v5);
  swift_release(v3);
  return v7;
}

double sub_100446800@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  *(void *)&__int128 v9 = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_1007197B0);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9FC0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A5A4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_1007197B0);
  uint64_t v6 = sub_10040A2B0( &qword_1009B9FC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A4A4);
  unint64_t v7 = sub_100451340();
  PersistentModel.getValue<A>(forKey:)(&v9, v5, v6, v7);
  swift_release(v5);
  double result = *(double *)&v9;
  *a2 = v9;
  return result;
}

uint64_t sub_1004468E8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v9 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_1007197B0);
  v8[2] = v9;
  void v8[3] = v2;
  void v8[4] = v3;
  sub_1004028CC(v2, v3);
  uint64_t v5 = sub_10040A2B0( &qword_1009B9FC0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A5A4);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v9,  KeyPath,  sub_10045A2D0,  v8,  (char *)&type metadata for () + 8,  v5,  v6);
  sub_100402A84(v2, v3);
  return swift_release(KeyPath);
}

uint64_t sub_1004469B0()
{
  uint64_t v6 = v0;
  uint64_t KeyPath = swift_getKeyPath(&unk_1007197D8);
  uint64_t v2 = sub_10040A2B0( &qword_1009B9FC0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A5A4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  uint64_t v3 = swift_getKeyPath(&unk_1007197D8);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9FC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A4A4);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for String);
  swift_release(v3);
  return v6;
}

uint64_t sub_100446A8C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  v9[0] = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_1007197D8);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9FC0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A5A4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_1007197D8);
  uint64_t v6 = sub_10040A2B0( &qword_1009B9FC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A4A4);
  PersistentModel.getValue<A>(forKey:)(v9, v5, v6, &protocol witness table for String);
  uint64_t result = swift_release(v5);
  uint64_t v8 = v9[1];
  *a2 = v9[0];
  a2[1] = v8;
  return result;
}

uint64_t sub_100446B70(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v9 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_1007197D8);
  v8[2] = v9;
  void v8[3] = v3;
  void v8[4] = v2;
  uint64_t v5 = sub_10040A2B0( &qword_1009B9FC0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A5A4);
  __n128 v6 = swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v9,  KeyPath,  sub_10045A2BC,  v8,  (char *)&type metadata for () + 8,  v5,  v6);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_100446C34()
{
  uint64_t v6 = v0;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719800);
  uint64_t v2 = sub_10040A2B0( &qword_1009B9FC0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A5A4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  uint64_t v3 = swift_getKeyPath(&unk_100719800);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9FC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A4A4);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for String);
  swift_release(v3);
  return v6;
}

uint64_t sub_100446D10@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  v9[0] = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719800);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9FC0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A5A4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_100719800);
  uint64_t v6 = sub_10040A2B0( &qword_1009B9FC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A4A4);
  PersistentModel.getValue<A>(forKey:)(v9, v5, v6, &protocol witness table for String);
  uint64_t result = swift_release(v5);
  uint64_t v8 = v9[1];
  *a2 = v9[0];
  a2[1] = v8;
  return result;
}

uint64_t sub_100446DF4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v9 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719800);
  v8[2] = v9;
  void v8[3] = v3;
  void v8[4] = v2;
  uint64_t v5 = sub_10040A2B0( &qword_1009B9FC0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A5A4);
  __n128 v6 = swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v9,  KeyPath,  sub_10045A2A8,  v8,  (char *)&type metadata for () + 8,  v5,  v6);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_100446EB8()
{
  uint64_t v7 = v0;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719828);
  uint64_t v2 = sub_10040A2B0( &qword_1009B9FC0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A5A4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v2);
  swift_release(KeyPath);
  uint64_t v3 = swift_getKeyPath(&unk_100719828);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9FC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A4A4);
  unint64_t v5 = sub_100451340();
  PersistentModel.getValue<A>(forKey:)(&v7, v3, v4, v5);
  swift_release(v3);
  return v7;
}

double sub_100446F98@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  *(void *)&__int128 v9 = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719828);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9FC0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A5A4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_100719828);
  uint64_t v6 = sub_10040A2B0( &qword_1009B9FC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A4A4);
  unint64_t v7 = sub_100451340();
  PersistentModel.getValue<A>(forKey:)(&v9, v5, v6, v7);
  swift_release(v5);
  double result = *(double *)&v9;
  *a2 = v9;
  return result;
}

uint64_t sub_100447080(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v9 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719828);
  v8[2] = v9;
  void v8[3] = v2;
  void v8[4] = v3;
  sub_1004028CC(v2, v3);
  uint64_t v5 = sub_10040A2B0( &qword_1009B9FC0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A5A4);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v9,  KeyPath,  sub_10045A294,  v8,  (char *)&type metadata for () + 8,  v5,  v6);
  sub_100402A84(v2, v3);
  return swift_release(KeyPath);
}

uint64_t sub_100447148@<X0>(void *a1@<X8>)
{
  uint64_t v9 = v1;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719850);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9FC0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A5A4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_100719850);
  uint64_t v6 = sub_10040A2B0( &qword_1009B9FC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A4A4);
  uint64_t v7 = sub_10040A2B0( &qword_1009BAD20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  PersistentModel.getValue<A>(forKey:)(a1, v5, v6, v7);
  return swift_release(v5);
}

uint64_t sub_100447240@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v9 = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719850);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9FC0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A5A4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_100719850);
  uint64_t v6 = sub_10040A2B0( &qword_1009B9FC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A4A4);
  uint64_t v7 = sub_10040A2B0( &qword_1009BAD20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  PersistentModel.getValue<A>(forKey:)(a2, v5, v6, v7);
  return swift_release(v5);
}

uint64_t sub_100447338(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = &v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v9, a1, v4);
  uint64_t v18 = *a2;
  uint64_t v10 = v18;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719850);
  uint64_t v16 = v10;
  uint64_t v17 = v9;
  uint64_t v12 = sub_10040A2B0( &qword_1009B9FC0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A5A4);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v18,  KeyPath,  sub_10045A118,  v15,  (char *)&type metadata for () + 8,  v12,  v13);
  swift_release(KeyPath);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v9, v4);
}

uint64_t sub_100447444()
{
  uint64_t v7 = v0;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719878);
  uint64_t v2 = sub_10040A2B0( &qword_1009B9FC0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A5A4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v2);
  swift_release(KeyPath);
  uint64_t v3 = swift_getKeyPath(&unk_100719878);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9FC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A4A4);
  unint64_t v5 = sub_100451340();
  PersistentModel.getValue<A>(forKey:)(&v7, v3, v4, v5);
  swift_release(v3);
  return v7;
}

double sub_100447524@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  *(void *)&__int128 v9 = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719878);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9FC0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A5A4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_100719878);
  uint64_t v6 = sub_10040A2B0( &qword_1009B9FC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A4A4);
  unint64_t v7 = sub_100451340();
  PersistentModel.getValue<A>(forKey:)(&v9, v5, v6, v7);
  swift_release(v5);
  double result = *(double *)&v9;
  *a2 = v9;
  return result;
}

uint64_t sub_10044760C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v9 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719878);
  v8[2] = v9;
  void v8[3] = v2;
  void v8[4] = v3;
  sub_1004028CC(v2, v3);
  uint64_t v5 = sub_10040A2B0( &qword_1009B9FC0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A5A4);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v9,  KeyPath,  sub_10045A280,  v8,  (char *)&type metadata for () + 8,  v5,  v6);
  sub_100402A84(v2, v3);
  return swift_release(KeyPath);
}

uint64_t sub_1004476D4(uint64_t a1, unint64_t a2)
{
  uint64_t KeyPath = swift_getKeyPath(&unk_100719878);
  uint64_t v10 = v2;
  uint64_t v11 = a1;
  unint64_t v12 = a2;
  uint64_t v6 = sub_10040A2B0( &qword_1009B9FC0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A5A4);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v13,  KeyPath,  sub_100455EC8,  &v9,  (char *)&type metadata for () + 8,  v6,  v7);
  sub_100402A84(a1, a2);
  return swift_release(KeyPath);
}

uint64_t sub_100447794( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, uint64_t (*a6)(uint64_t), uint64_t a7)
{
  uint64_t KeyPath = swift_getKeyPath(a4);
  v16[0] = a2;
  v16[1] = a3;
  uint64_t v13 = sub_10040A2B0(a5, a6, a7);
  unint64_t v14 = sub_100451294();
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, v16, v13, v14);
  return swift_release(KeyPath);
}

uint64_t sub_10044782C()
{
  uint64_t v7 = v0;
  uint64_t KeyPath = swift_getKeyPath(&unk_1007198A0);
  uint64_t v2 = sub_10040A2B0( &qword_1009B9FC0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A5A4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v2);
  swift_release(KeyPath);
  uint64_t v3 = swift_getKeyPath(&unk_1007198A0);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9FC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A4A4);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for Bool);
  swift_release(v3);
  return v6;
}

uint64_t sub_100447908@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v9 = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_1007198A0);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9FC0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A5A4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_1007198A0);
  uint64_t v6 = sub_10040A2B0( &qword_1009B9FC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A4A4);
  PersistentModel.getValue<A>(forKey:)(&v8, v5, v6, &protocol witness table for Bool);
  uint64_t result = swift_release(v5);
  *a2 = v8;
  return result;
}

uint64_t sub_1004479EC(char *a1, uint64_t *a2)
{
  char v2 = *a1;
  uint64_t v9 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_1007198A0);
  uint64_t v7[2] = v9;
  char v8 = v2;
  uint64_t v4 = sub_10040A2B0( &qword_1009B9FC0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A5A4);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v9,  KeyPath,  sub_10045A104,  v7,  (char *)&type metadata for () + 8,  v4,  v5);
  return swift_release(KeyPath);
}

uint64_t sub_100447A94()
{
  uint64_t v7 = v0;
  uint64_t KeyPath = swift_getKeyPath(&unk_1007198C8);
  uint64_t v2 = sub_10040A2B0( &qword_1009B9FC0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A5A4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v2);
  swift_release(KeyPath);
  uint64_t v3 = swift_getKeyPath(&unk_1007198C8);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9FC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A4A4);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for Bool);
  swift_release(v3);
  return v6;
}

uint64_t sub_100447B70@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v9 = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_1007198C8);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9FC0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A5A4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_1007198C8);
  uint64_t v6 = sub_10040A2B0( &qword_1009B9FC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A4A4);
  PersistentModel.getValue<A>(forKey:)(&v8, v5, v6, &protocol witness table for Bool);
  uint64_t result = swift_release(v5);
  *a2 = v8;
  return result;
}

uint64_t sub_100447C54(char *a1, uint64_t *a2)
{
  char v2 = *a1;
  uint64_t v9 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_1007198C8);
  uint64_t v7[2] = v9;
  char v8 = v2;
  uint64_t v4 = sub_10040A2B0( &qword_1009B9FC0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A5A4);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v9,  KeyPath,  sub_10045A0F0,  v7,  (char *)&type metadata for () + 8,  v4,  v5);
  return swift_release(KeyPath);
}

uint64_t sub_100447CFC(char a1)
{
  uint64_t KeyPath = swift_getKeyPath(&unk_1007198C8);
  uint64_t v8 = v1;
  char v9 = a1;
  uint64_t v4 = sub_10040A2B0( &qword_1009B9FC0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A5A4);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v10,  KeyPath,  sub_100455F60,  &v7,  (char *)&type metadata for () + 8,  v4,  v5);
  return swift_release(KeyPath);
}

uint64_t sub_100447DA4@<X0>(void *a1@<X8>)
{
  uint64_t v9 = v1;
  uint64_t KeyPath = swift_getKeyPath(&unk_1007198F0);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9FC0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A5A4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_1007198F0);
  uint64_t v6 = sub_10040A2B0( &qword_1009B9FC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A4A4);
  uint64_t v7 = sub_1004559B0( &qword_1009B9FB0,  &qword_1009BAD20,  (uint64_t)&protocol conformance descriptor for Date,  (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.getValue<A>(forKey:)(a1, v5, v6, v7);
  return swift_release(v5);
}

uint64_t sub_100447EA4@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v9 = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_1007198F0);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9FC0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A5A4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_1007198F0);
  uint64_t v6 = sub_10040A2B0( &qword_1009B9FC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A4A4);
  uint64_t v7 = sub_1004559B0( &qword_1009B9FB0,  &qword_1009BAD20,  (uint64_t)&protocol conformance descriptor for Date,  (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.getValue<A>(forKey:)(a2, v5, v6, v7);
  return swift_release(v5);
}

uint64_t sub_100447FA4(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  sub_100455A7C(a1, (uint64_t)v7);
  uint64_t v16 = *a2;
  uint64_t v8 = v16;
  uint64_t KeyPath = swift_getKeyPath(&unk_1007198F0);
  uint64_t v14 = v8;
  uint64_t v15 = v7;
  uint64_t v10 = sub_10040A2B0( &qword_1009B9FC0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A5A4);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v16,  KeyPath,  sub_10045A0DC,  v13,  (char *)&type metadata for () + 8,  v10,  v11);
  swift_release(KeyPath);
  return sub_100455970((uint64_t)v7);
}

uint64_t sub_100448098(uint64_t a1)
{
  uint64_t KeyPath = swift_getKeyPath(&unk_1007198F0);
  uint64_t v8 = v1;
  uint64_t v9 = a1;
  uint64_t v4 = sub_10040A2B0( &qword_1009B9FC0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A5A4);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v10,  KeyPath,  sub_100455FAC,  &v7,  (char *)&type metadata for () + 8,  v4,  v5);
  swift_release(KeyPath);
  return sub_100455970(a1);
}

uint64_t sub_100448144( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t (*a5)(uint64_t), uint64_t a6)
{
  uint64_t KeyPath = swift_getKeyPath(a3);
  uint64_t v11 = sub_10040A2B0(a4, a5, a6);
  uint64_t v12 = sub_1004559B0( &qword_1009B9FA8,  &qword_1009BAD00,  (uint64_t)&protocol conformance descriptor for Date,  (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, a2, v11, v12);
  return swift_release(KeyPath);
}

uint64_t sub_1004481E0()
{
  uint64_t v7 = v0;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719918);
  uint64_t v2 = sub_10040A2B0( &qword_1009B9FC0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A5A4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v2);
  swift_release(KeyPath);
  uint64_t v3 = swift_getKeyPath(&unk_100719918);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9FC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A4A4);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for Bool);
  swift_release(v3);
  return v6;
}

uint64_t sub_1004482BC@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v9 = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719918);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9FC0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A5A4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_100719918);
  uint64_t v6 = sub_10040A2B0( &qword_1009B9FC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A4A4);
  PersistentModel.getValue<A>(forKey:)(&v8, v5, v6, &protocol witness table for Bool);
  uint64_t result = swift_release(v5);
  *a2 = v8;
  return result;
}

uint64_t sub_1004483A0(char *a1, uint64_t *a2)
{
  char v2 = *a1;
  uint64_t v9 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719918);
  uint64_t v7[2] = v9;
  char v8 = v2;
  uint64_t v4 = sub_10040A2B0( &qword_1009B9FC0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A5A4);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v9,  KeyPath,  sub_10045A0C8,  v7,  (char *)&type metadata for () + 8,  v4,  v5);
  return swift_release(KeyPath);
}

uint64_t sub_100448448()
{
  uint64_t v7 = v0;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719940);
  uint64_t v2 = sub_10040A2B0( &qword_1009B9FC0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A5A4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v2);
  swift_release(KeyPath);
  uint64_t v3 = swift_getKeyPath(&unk_100719940);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9FC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A4A4);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for Bool);
  swift_release(v3);
  return v6;
}

uint64_t sub_100448524@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v9 = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719940);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9FC0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A5A4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_100719940);
  uint64_t v6 = sub_10040A2B0( &qword_1009B9FC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A4A4);
  PersistentModel.getValue<A>(forKey:)(&v8, v5, v6, &protocol witness table for Bool);
  uint64_t result = swift_release(v5);
  *a2 = v8;
  return result;
}

uint64_t sub_100448608(char *a1, uint64_t *a2)
{
  char v2 = *a1;
  uint64_t v9 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719940);
  uint64_t v7[2] = v9;
  char v8 = v2;
  uint64_t v4 = sub_10040A2B0( &qword_1009B9FC0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A5A4);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v9,  KeyPath,  sub_10045A0B4,  v7,  (char *)&type metadata for () + 8,  v4,  v5);
  return swift_release(KeyPath);
}

uint64_t sub_1004486B0(char a1)
{
  uint64_t KeyPath = swift_getKeyPath(&unk_100719940);
  uint64_t v8 = v1;
  char v9 = a1;
  uint64_t v4 = sub_10040A2B0( &qword_1009B9FC0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A5A4);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v10,  KeyPath,  sub_100456040,  &v7,  (char *)&type metadata for () + 8,  v4,  v5);
  return swift_release(KeyPath);
}

uint64_t sub_100448758( uint64_t a1, char a2, uint64_t a3, unint64_t *a4, uint64_t (*a5)(uint64_t), uint64_t a6)
{
  uint64_t KeyPath = swift_getKeyPath(a3);
  char v13 = a2;
  uint64_t v11 = sub_10040A2B0(a4, a5, a6);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, &v13, v11, &protocol witness table for Bool);
  return swift_release(KeyPath);
}

uint64_t sub_1004487E0@<X0>(void *a1@<X8>)
{
  uint64_t v9 = v1;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719968);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9FC0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A5A4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_100719968);
  uint64_t v6 = sub_10040A2B0( &qword_1009B9FC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A4A4);
  uint64_t v7 = sub_1004559B0( &qword_1009B9FB0,  &qword_1009BAD20,  (uint64_t)&protocol conformance descriptor for Date,  (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.getValue<A>(forKey:)(a1, v5, v6, v7);
  return swift_release(v5);
}

uint64_t sub_1004488E0@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v9 = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719968);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9FC0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A5A4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_100719968);
  uint64_t v6 = sub_10040A2B0( &qword_1009B9FC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A4A4);
  uint64_t v7 = sub_1004559B0( &qword_1009B9FB0,  &qword_1009BAD20,  (uint64_t)&protocol conformance descriptor for Date,  (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.getValue<A>(forKey:)(a2, v5, v6, v7);
  return swift_release(v5);
}

uint64_t sub_1004489E0(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  sub_100455A7C(a1, (uint64_t)v7);
  uint64_t v16 = *a2;
  uint64_t v8 = v16;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719968);
  uint64_t v14 = v8;
  uint64_t v15 = v7;
  uint64_t v10 = sub_10040A2B0( &qword_1009B9FC0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A5A4);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v16,  KeyPath,  sub_10045A0A0,  v13,  (char *)&type metadata for () + 8,  v10,  v11);
  swift_release(KeyPath);
  return sub_100455970((uint64_t)v7);
}

uint64_t sub_100448AD4(uint64_t a1)
{
  uint64_t KeyPath = swift_getKeyPath(&unk_100719968);
  uint64_t v8 = v1;
  uint64_t v9 = a1;
  uint64_t v4 = sub_10040A2B0( &qword_1009B9FC0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A5A4);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v10,  KeyPath,  sub_10045608C,  &v7,  (char *)&type metadata for () + 8,  v4,  v5);
  swift_release(KeyPath);
  return sub_100455970(a1);
}

uint64_t sub_100448B80()
{
  uint64_t v7 = v0;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719990);
  uint64_t v2 = sub_10040A2B0( &qword_1009B9FC0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A5A4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v2);
  swift_release(KeyPath);
  uint64_t v3 = swift_getKeyPath(&unk_100719990);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9FC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A4A4);
  uint64_t v5 = sub_10045119C( &qword_1009B9ED8,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.getValue<A>(forKey:)(&v7, v3, v4, v5);
  swift_release(v3);
  return v7;
}

double sub_100448C78@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  *(void *)&__int128 v9 = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719990);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9FC0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A5A4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_100719990);
  uint64_t v6 = sub_10040A2B0( &qword_1009B9FC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A4A4);
  uint64_t v7 = sub_10045119C( &qword_1009B9ED8,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.getValue<A>(forKey:)(&v9, v5, v6, v7);
  swift_release(v5);
  double result = *(double *)&v9;
  *a2 = v9;
  return result;
}

uint64_t sub_100448D78(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v9 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719990);
  v8[2] = v9;
  void v8[3] = v3;
  void v8[4] = v2;
  uint64_t v5 = sub_10040A2B0( &qword_1009B9FC0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A5A4);
  __n128 v6 = swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v9,  KeyPath,  sub_10045A26C,  v8,  (char *)&type metadata for () + 8,  v5,  v6);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_100448E3C(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath = swift_getKeyPath(&unk_100719990);
  uint64_t v10 = v2;
  uint64_t v11 = a1;
  uint64_t v12 = a2;
  uint64_t v6 = sub_10040A2B0( &qword_1009B9FC0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A5A4);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v13,  KeyPath,  sub_1004560D4,  &v9,  (char *)&type metadata for () + 8,  v6,  v7);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(a2);
}

uint64_t sub_100448EF8@<X0>(void *a1@<X8>)
{
  uint64_t v9 = v1;
  uint64_t KeyPath = swift_getKeyPath(&unk_1007199B8);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9FC0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A5A4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_1007199B8);
  uint64_t v6 = sub_10040A2B0( &qword_1009B9FC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A4A4);
  uint64_t v7 = sub_1004559B0( &qword_1009B9FB0,  &qword_1009BAD20,  (uint64_t)&protocol conformance descriptor for Date,  (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.getValue<A>(forKey:)(a1, v5, v6, v7);
  return swift_release(v5);
}

uint64_t sub_100448FF8@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v9 = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_1007199B8);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9FC0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A5A4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_1007199B8);
  uint64_t v6 = sub_10040A2B0( &qword_1009B9FC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A4A4);
  uint64_t v7 = sub_1004559B0( &qword_1009B9FB0,  &qword_1009BAD20,  (uint64_t)&protocol conformance descriptor for Date,  (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.getValue<A>(forKey:)(a2, v5, v6, v7);
  return swift_release(v5);
}

uint64_t sub_1004490F8(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  sub_100455A7C(a1, (uint64_t)v7);
  uint64_t v16 = *a2;
  uint64_t v8 = v16;
  uint64_t KeyPath = swift_getKeyPath(&unk_1007199B8);
  uint64_t v14 = v8;
  uint64_t v15 = v7;
  uint64_t v10 = sub_10040A2B0( &qword_1009B9FC0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A5A4);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v16,  KeyPath,  sub_10045A08C,  v13,  (char *)&type metadata for () + 8,  v10,  v11);
  swift_release(KeyPath);
  return sub_100455970((uint64_t)v7);
}

uint64_t sub_1004491EC(uint64_t a1)
{
  uint64_t KeyPath = swift_getKeyPath(&unk_1007199B8);
  uint64_t v8 = v1;
  uint64_t v9 = a1;
  uint64_t v4 = sub_10040A2B0( &qword_1009B9FC0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A5A4);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v10,  KeyPath,  sub_100456120,  &v7,  (char *)&type metadata for () + 8,  v4,  v5);
  swift_release(KeyPath);
  return sub_100455970(a1);
}

uint64_t sub_100449298@<X0>(void *a1@<X8>)
{
  uint64_t v9 = v1;
  uint64_t KeyPath = swift_getKeyPath(&unk_1007199E0);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9FC0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A5A4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_1007199E0);
  uint64_t v6 = sub_10040A2B0( &qword_1009B9FC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A4A4);
  uint64_t v7 = sub_1004559B0( &qword_1009B9FB0,  &qword_1009BAD20,  (uint64_t)&protocol conformance descriptor for Date,  (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.getValue<A>(forKey:)(a1, v5, v6, v7);
  return swift_release(v5);
}

uint64_t sub_100449398@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v9 = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_1007199E0);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9FC0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A5A4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_1007199E0);
  uint64_t v6 = sub_10040A2B0( &qword_1009B9FC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A4A4);
  uint64_t v7 = sub_1004559B0( &qword_1009B9FB0,  &qword_1009BAD20,  (uint64_t)&protocol conformance descriptor for Date,  (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.getValue<A>(forKey:)(a2, v5, v6, v7);
  return swift_release(v5);
}

uint64_t sub_100449498(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  sub_100455A7C(a1, (uint64_t)v7);
  uint64_t v16 = *a2;
  uint64_t v8 = v16;
  uint64_t KeyPath = swift_getKeyPath(&unk_1007199E0);
  uint64_t v14 = v8;
  uint64_t v15 = v7;
  uint64_t v10 = sub_10040A2B0( &qword_1009B9FC0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A5A4);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v16,  KeyPath,  sub_10045A078,  v13,  (char *)&type metadata for () + 8,  v10,  v11);
  swift_release(KeyPath);
  return sub_100455970((uint64_t)v7);
}

uint64_t sub_10044958C(uint64_t a1)
{
  uint64_t KeyPath = swift_getKeyPath(&unk_1007199E0);
  uint64_t v8 = v1;
  uint64_t v9 = a1;
  uint64_t v4 = sub_10040A2B0( &qword_1009B9FC0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A5A4);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v10,  KeyPath,  sub_100456168,  &v7,  (char *)&type metadata for () + 8,  v4,  v5);
  swift_release(KeyPath);
  return sub_100455970(a1);
}

uint64_t sub_100449638@<X0>(void *a1@<X8>)
{
  uint64_t v9 = v1;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719A08);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9FC0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A5A4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_100719A08);
  uint64_t v6 = sub_10040A2B0( &qword_1009B9FC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A4A4);
  uint64_t v7 = sub_1004559B0( &qword_1009B9FB0,  &qword_1009BAD20,  (uint64_t)&protocol conformance descriptor for Date,  (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.getValue<A>(forKey:)(a1, v5, v6, v7);
  return swift_release(v5);
}

uint64_t sub_100449738@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v9 = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719A08);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9FC0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A5A4);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_100719A08);
  uint64_t v6 = sub_10040A2B0( &qword_1009B9FC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A4A4);
  uint64_t v7 = sub_1004559B0( &qword_1009B9FB0,  &qword_1009BAD20,  (uint64_t)&protocol conformance descriptor for Date,  (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.getValue<A>(forKey:)(a2, v5, v6, v7);
  return swift_release(v5);
}

uint64_t sub_100449838(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  sub_100455A7C(a1, (uint64_t)v7);
  uint64_t v16 = *a2;
  uint64_t v8 = v16;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719A08);
  uint64_t v14 = v8;
  uint64_t v15 = v7;
  uint64_t v10 = sub_10040A2B0( &qword_1009B9FC0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A5A4);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v16,  KeyPath,  sub_10045A064,  v13,  (char *)&type metadata for () + 8,  v10,  v11);
  swift_release(KeyPath);
  return sub_100455970((uint64_t)v7);
}

uint64_t sub_10044992C(uint64_t a1)
{
  uint64_t KeyPath = swift_getKeyPath(&unk_100719A08);
  uint64_t v8 = v1;
  uint64_t v9 = a1;
  uint64_t v4 = sub_10040A2B0( &qword_1009B9FC0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A5A4);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v10,  KeyPath,  sub_1004561B0,  &v7,  (char *)&type metadata for () + 8,  v4,  v5);
  swift_release(KeyPath);
  return sub_100455970(a1);
}

void *sub_1004499D8( uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, unint64_t a10, char *a11, uint64_t a12, unint64_t a13, unsigned __int8 a14, unsigned __int8 a15, unsigned __int8 a16, unsigned __int8 a17)
{
  uint64_t v18 = sub_1004561F8(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
  sub_100402A84(a12, a13);
  sub_100402A84(a9, a10);
  sub_100402A84(a3, a4);
  sub_100402A84(a1, a2);
  return v18;
}

uint64_t sub_100449AD8(uint64_t a1)
{
  return sub_100441DEC(a1, (void (*)(uint64_t))sub_100449AE4);
}

void *sub_100449AE4(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  v2[6] = sub_1003F5CB4(&qword_1009B9FD0);
  uint64_t v5 = sub_10040A2B0( &qword_1009B9FC8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSQuerySDSenderKeyDistribution,  (uint64_t)&unk_10071A4A4);
  *(void *)&__int128 v9 = v4;
  *((void *)&v9 + 1) = v4;
  uint64_t v10 = v5;
  uint64_t v11 = v5;
  v2[7] = swift_getOpaqueTypeConformance2( &v9,  &opaque type descriptor for <<opaque return type of static PersistentModel.createBackingData<A>()>>,  1LL);
  sub_10040B2A8(v2 + 3);
  uint64_t v6 = static PersistentModel.createBackingData<A>()(v4, v4, v5, v5);
  *((_DWORD *)v2 + 4) = 16843009;
  *((_WORD *)v2 + 10) = 257;
  ObservationRegistrar.init()(v6);
  *((_WORD *)v2 + 10) = 0;
  *((_DWORD *)v2 + 4) = 0;
  sub_100401ACC((uint64_t)a1, (uint64_t)&v9);
  swift_beginAccess(v2 + 3, v8, 33LL, 0LL);
  sub_10040A648(v2 + 3);
  sub_10043D79C(&v9, (uint64_t)(v2 + 3));
  swift_endAccess(v8);
  sub_10040A648(a1);
  return v2;
}

uint64_t sub_100449C04()
{
  return sub_10044D5F0(OBJC_IVAR____TtCOO17identityservicesd26SDPersistenceMigrationPlan21SDPersistenceSchemaV131IDSQuerySDSenderKeyDistribution___observationRegistrar);
}

uint64_t sub_100449C10()
{
  uint64_t v6 = v0;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719A30);
  uint64_t v2 = sub_10040A2B0( &qword_1009B9FD8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSGroupEncryptionKeyRollIndex,  (uint64_t)&unk_10071A6C0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  uint64_t v3 = swift_getKeyPath(&unk_100719A30);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9FE0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSGroupEncryptionKeyRollIndex,  (uint64_t)&unk_10071A5C0);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for UInt64);
  swift_release(v3);
  return v6;
}

uint64_t sub_100449CEC@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v8 = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719A30);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9FD8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSGroupEncryptionKeyRollIndex,  (uint64_t)&unk_10071A6C0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_100719A30);
  uint64_t v6 = sub_10040A2B0( &qword_1009B9FE0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSGroupEncryptionKeyRollIndex,  (uint64_t)&unk_10071A5C0);
  PersistentModel.getValue<A>(forKey:)(&v8, v5, v6, &protocol witness table for UInt64);
  uint64_t result = swift_release(v5);
  *a2 = v8;
  return result;
}

uint64_t sub_100449DD0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v8 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719A30);
  uint64_t v7[2] = v8;
  void v7[3] = v2;
  uint64_t v4 = sub_10040A2B0( &qword_1009B9FD8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSGroupEncryptionKeyRollIndex,  (uint64_t)&unk_10071A6C0);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v8,  KeyPath,  sub_10045A050,  v7,  (char *)&type metadata for () + 8,  v4,  v5);
  return swift_release(KeyPath);
}

uint64_t sub_100449E74(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath = swift_getKeyPath(&unk_100719A30);
  uint64_t v6 = a2;
  uint64_t v4 = sub_10040A2B0( &qword_1009B9FE0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSGroupEncryptionKeyRollIndex,  (uint64_t)&unk_10071A5C0);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, &v6, v4, &protocol witness table for UInt64);
  return swift_release(KeyPath);
}

uint64_t sub_100449EF4()
{
  uint64_t v7 = v0;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719A58);
  uint64_t v2 = sub_10040A2B0( &qword_1009B9FD8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSGroupEncryptionKeyRollIndex,  (uint64_t)&unk_10071A6C0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v2);
  swift_release(KeyPath);
  uint64_t v3 = swift_getKeyPath(&unk_100719A58);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9FE0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSGroupEncryptionKeyRollIndex,  (uint64_t)&unk_10071A5C0);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for UInt32);
  swift_release(v3);
  return v6;
}

uint64_t sub_100449FD0@<X0>(uint64_t *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v9 = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719A58);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9FD8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSGroupEncryptionKeyRollIndex,  (uint64_t)&unk_10071A6C0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_100719A58);
  uint64_t v6 = sub_10040A2B0( &qword_1009B9FE0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSGroupEncryptionKeyRollIndex,  (uint64_t)&unk_10071A5C0);
  PersistentModel.getValue<A>(forKey:)(&v8, v5, v6, &protocol witness table for UInt32);
  uint64_t result = swift_release(v5);
  *a2 = v8;
  return result;
}

uint64_t sub_10044A0B4(int *a1, uint64_t *a2)
{
  int v2 = *a1;
  uint64_t v9 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719A58);
  uint64_t v7[2] = v9;
  int v8 = v2;
  uint64_t v4 = sub_10040A2B0( &qword_1009B9FD8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSGroupEncryptionKeyRollIndex,  (uint64_t)&unk_10071A6C0);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v9,  KeyPath,  sub_10045A03C,  v7,  (char *)&type metadata for () + 8,  v4,  v5);
  return swift_release(KeyPath);
}

uint64_t sub_10044A15C(uint64_t a1, int a2)
{
  uint64_t KeyPath = swift_getKeyPath(&unk_100719A58);
  int v6 = a2;
  uint64_t v4 = sub_10040A2B0( &qword_1009B9FE0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSGroupEncryptionKeyRollIndex,  (uint64_t)&unk_10071A5C0);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, &v6, v4, &protocol witness table for UInt32);
  return swift_release(KeyPath);
}

uint64_t sub_10044A1DC@<X0>(void *a1@<X8>)
{
  uint64_t v9 = v1;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719A80);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9FD8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSGroupEncryptionKeyRollIndex,  (uint64_t)&unk_10071A6C0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_100719A80);
  uint64_t v6 = sub_10040A2B0( &qword_1009B9FE0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSGroupEncryptionKeyRollIndex,  (uint64_t)&unk_10071A5C0);
  uint64_t v7 = sub_10040A2B0( &qword_1009BAD20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  PersistentModel.getValue<A>(forKey:)(a1, v5, v6, v7);
  return swift_release(v5);
}

uint64_t sub_10044A2D4@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v9 = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719A80);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9FD8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSGroupEncryptionKeyRollIndex,  (uint64_t)&unk_10071A6C0);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_100719A80);
  uint64_t v6 = sub_10040A2B0( &qword_1009B9FE0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSGroupEncryptionKeyRollIndex,  (uint64_t)&unk_10071A5C0);
  uint64_t v7 = sub_10040A2B0( &qword_1009BAD20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  PersistentModel.getValue<A>(forKey:)(a2, v5, v6, v7);
  return swift_release(v5);
}

uint64_t sub_10044A3CC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = &v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v9, a1, v4);
  uint64_t v18 = *a2;
  uint64_t v10 = v18;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719A80);
  uint64_t v16 = v10;
  uint64_t v17 = v9;
  uint64_t v12 = sub_10040A2B0( &qword_1009B9FD8,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSGroupEncryptionKeyRollIndex,  (uint64_t)&unk_10071A6C0);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v18,  KeyPath,  sub_10045A028,  v15,  (char *)&type metadata for () + 8,  v12,  v13);
  swift_release(KeyPath);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v9, v4);
}

uint64_t sub_10044A4D8(uint64_t a1, int a2, char *a3)
{
  uint64_t v7 = swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  sub_10044A52C(a1, a2, a3);
  return v7;
}

void *sub_10044A52C(uint64_t a1, int a2, char *a3)
{
  uint64_t v4 = v3;
  uint64_t v29 = a3;
  HIDWORD(v2_Block_object_dispose(va, 8) = a2;
  uint64_t v6 = *v3;
  uint64_t v7 = type metadata accessor for Date(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v4[5] = sub_1003F5CB4(&qword_1009B9FE8);
  uint64_t v13 = sub_10040A2B0( &qword_1009B9FE0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSGroupEncryptionKeyRollIndex,  (uint64_t)&unk_10071A5C0);
  v31[0] = v6;
  v31[1] = v6;
  v31[2] = v13;
  uint64_t v32 = v13;
  v4[6] = swift_getOpaqueTypeConformance2( v31,  &opaque type descriptor for <<opaque return type of static PersistentModel.createBackingData<A>()>>,  1LL);
  sub_10040B2A8(v4 + 2);
  uint64_t v14 = static PersistentModel.createBackingData<A>()(v6, v6, v13, v13);
  ObservationRegistrar.init()(v14);
  sub_100401ACC((uint64_t)(v4 + 2), (uint64_t)v31);
  uint64_t v16 = v32;
  uint64_t v15 = v33;
  sub_10040A238(v31, v32);
  uint64_t KeyPath = swift_getKeyPath(&unk_100719A30);
  uint64_t v30 = a1;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)( KeyPath,  &v30,  &type metadata for UInt64,  &protocol witness table for UInt64,  v16,  v15);
  swift_release(KeyPath);
  sub_10040A648(v31);
  sub_100401ACC((uint64_t)(v4 + 2), (uint64_t)v31);
  uint64_t v18 = v32;
  uint64_t v19 = v33;
  sub_10040A238(v31, v32);
  uint64_t v20 = swift_getKeyPath(&unk_100719A58);
  LODWORD(v30) = HIDWORD(v28);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)( v20,  &v30,  &type metadata for UInt32,  &protocol witness table for UInt32,  v18,  v19);
  swift_release(v20);
  sub_10040A648(v31);
  uint64_t v21 = v29;
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v12, v29, v7);
  sub_100401ACC((uint64_t)(v4 + 2), (uint64_t)v31);
  uint64_t v22 = v32;
  uint64_t v23 = v33;
  sub_10040A238(v31, v32);
  uint64_t v24 = swift_getKeyPath(&unk_100719A80);
  uint64_t v25 = sub_10040A2B0( &qword_1009BAD00,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)(v24, v12, v7, v25, v22, v23);
  swift_release(v24);
  __n128 v26 = *(void (**)(char *, uint64_t))(v8 + 8);
  v26(v12, v7);
  sub_10040A648(v31);
  v26(v21, v7);
  return v4;
}

uint64_t sub_10044A7BC()
{
  return sub_10044FD58(OBJC_IVAR____TtCOO17identityservicesd26SDPersistenceMigrationPlan21SDPersistenceSchemaV130IDSGroupEncryptionKeyRollIndex___observationRegistrar);
}

uint64_t sub_10044A7C8()
{
  uint64_t v6 = v0;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719AA8);
  uint64_t v2 = sub_10040A2B0( &qword_1009B9FF0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSOffGridDeliveryDonatedHandle,  (uint64_t)&unk_10071A7DC);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  uint64_t v3 = swift_getKeyPath(&unk_100719AA8);
  uint64_t v4 = sub_10040A2B0( (unint64_t *)&unk_1009BC920,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSOffGridDeliveryDonatedHandle,  (uint64_t)&unk_10071A6DC);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for String);
  swift_release(v3);
  return v6;
}

uint64_t sub_10044A8A4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  v9[0] = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719AA8);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9FF0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSOffGridDeliveryDonatedHandle,  (uint64_t)&unk_10071A7DC);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_100719AA8);
  uint64_t v6 = sub_10040A2B0( (unint64_t *)&unk_1009BC920,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSOffGridDeliveryDonatedHandle,  (uint64_t)&unk_10071A6DC);
  PersistentModel.getValue<A>(forKey:)(v9, v5, v6, &protocol witness table for String);
  uint64_t result = swift_release(v5);
  uint64_t v8 = v9[1];
  *a2 = v9[0];
  a2[1] = v8;
  return result;
}

uint64_t sub_10044A988(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v9 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719AA8);
  v8[2] = v9;
  void v8[3] = v3;
  void v8[4] = v2;
  uint64_t v5 = sub_10040A2B0( &qword_1009B9FF0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSOffGridDeliveryDonatedHandle,  (uint64_t)&unk_10071A7DC);
  __n128 v6 = swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v9,  KeyPath,  sub_100459C70,  v8,  (char *)&type metadata for () + 8,  v5,  v6);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_10044AA4C()
{
  uint64_t v6 = v0;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719AD0);
  uint64_t v2 = sub_10040A2B0( &qword_1009B9FF0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSOffGridDeliveryDonatedHandle,  (uint64_t)&unk_10071A7DC);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  uint64_t v3 = swift_getKeyPath(&unk_100719AD0);
  uint64_t v4 = sub_10040A2B0( (unint64_t *)&unk_1009BC920,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSOffGridDeliveryDonatedHandle,  (uint64_t)&unk_10071A6DC);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for String);
  swift_release(v3);
  return v6;
}

uint64_t sub_10044AB28@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  v9[0] = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719AD0);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9FF0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSOffGridDeliveryDonatedHandle,  (uint64_t)&unk_10071A7DC);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_100719AD0);
  uint64_t v6 = sub_10040A2B0( (unint64_t *)&unk_1009BC920,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSOffGridDeliveryDonatedHandle,  (uint64_t)&unk_10071A6DC);
  PersistentModel.getValue<A>(forKey:)(v9, v5, v6, &protocol witness table for String);
  uint64_t result = swift_release(v5);
  uint64_t v8 = v9[1];
  *a2 = v9[0];
  a2[1] = v8;
  return result;
}

uint64_t sub_10044AC0C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v9 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719AD0);
  v8[2] = v9;
  void v8[3] = v3;
  void v8[4] = v2;
  uint64_t v5 = sub_10040A2B0( &qword_1009B9FF0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSOffGridDeliveryDonatedHandle,  (uint64_t)&unk_10071A7DC);
  __n128 v6 = swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v9,  KeyPath,  sub_10045A258,  v8,  (char *)&type metadata for () + 8,  v5,  v6);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_10044ACD0()
{
  uint64_t v6 = v0;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719AF8);
  uint64_t v2 = sub_10040A2B0( &qword_1009B9FF0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSOffGridDeliveryDonatedHandle,  (uint64_t)&unk_10071A7DC);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  uint64_t v3 = swift_getKeyPath(&unk_100719AF8);
  uint64_t v4 = sub_10040A2B0( (unint64_t *)&unk_1009BC920,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSOffGridDeliveryDonatedHandle,  (uint64_t)&unk_10071A6DC);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for String);
  swift_release(v3);
  return v6;
}

uint64_t sub_10044ADAC@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  v9[0] = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719AF8);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9FF0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSOffGridDeliveryDonatedHandle,  (uint64_t)&unk_10071A7DC);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_100719AF8);
  uint64_t v6 = sub_10040A2B0( (unint64_t *)&unk_1009BC920,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSOffGridDeliveryDonatedHandle,  (uint64_t)&unk_10071A6DC);
  PersistentModel.getValue<A>(forKey:)(v9, v5, v6, &protocol witness table for String);
  uint64_t result = swift_release(v5);
  uint64_t v8 = v9[1];
  *a2 = v9[0];
  a2[1] = v8;
  return result;
}

uint64_t sub_10044AE90(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v9 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719AF8);
  v8[2] = v9;
  void v8[3] = v3;
  void v8[4] = v2;
  uint64_t v5 = sub_10040A2B0( &qword_1009B9FF0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSOffGridDeliveryDonatedHandle,  (uint64_t)&unk_10071A7DC);
  __n128 v6 = swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v9,  KeyPath,  sub_10045A244,  v8,  (char *)&type metadata for () + 8,  v5,  v6);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_10044AF54()
{
  uint64_t v6 = v0;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719B20);
  uint64_t v2 = sub_10040A2B0( &qword_1009B9FF0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSOffGridDeliveryDonatedHandle,  (uint64_t)&unk_10071A7DC);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  uint64_t v3 = swift_getKeyPath(&unk_100719B20);
  uint64_t v4 = sub_10040A2B0( (unint64_t *)&unk_1009BC920,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSOffGridDeliveryDonatedHandle,  (uint64_t)&unk_10071A6DC);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for Int);
  swift_release(v3);
  return v6;
}

uint64_t sub_10044B030@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v8 = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719B20);
  uint64_t v4 = sub_10040A2B0( &qword_1009B9FF0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSOffGridDeliveryDonatedHandle,  (uint64_t)&unk_10071A7DC);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_100719B20);
  uint64_t v6 = sub_10040A2B0( (unint64_t *)&unk_1009BC920,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSOffGridDeliveryDonatedHandle,  (uint64_t)&unk_10071A6DC);
  PersistentModel.getValue<A>(forKey:)(&v8, v5, v6, &protocol witness table for Int);
  uint64_t result = swift_release(v5);
  *a2 = v8;
  return result;
}

uint64_t sub_10044B114(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v8 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719B20);
  uint64_t v7[2] = v8;
  void v7[3] = v2;
  uint64_t v4 = sub_10040A2B0( &qword_1009B9FF0,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSOffGridDeliveryDonatedHandle,  (uint64_t)&unk_10071A7DC);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v8,  KeyPath,  sub_10045A014,  v7,  (char *)&type metadata for () + 8,  v4,  v5);
  return swift_release(KeyPath);
}

uint64_t sub_10044B1B8(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath = swift_getKeyPath(&unk_100719B20);
  uint64_t v6 = a2;
  uint64_t v4 = sub_10040A2B0( (unint64_t *)&unk_1009BC920,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSOffGridDeliveryDonatedHandle,  (uint64_t)&unk_10071A6DC);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, &v6, v4, &protocol witness table for Int);
  return swift_release(KeyPath);
}

uint64_t sub_10044B238(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v11 = swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  sub_10044B2A4(a1, a2, a3, a4, a5);
  return v11;
}

void *sub_10044B2A4(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v6 = v5;
  __n128 v10 = (void *)*v5;
  void v6[5] = sub_1003F5CB4(&qword_1009B9FF8);
  uint64_t v11 = sub_10040A2B0( (unint64_t *)&unk_1009BC920,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSOffGridDeliveryDonatedHandle,  (uint64_t)&unk_10071A6DC);
  uint64_t v34 = (uint64_t)v10;
  uint64_t v35 = v10;
  uint64_t v36 = v11;
  uint64_t v37 = v11;
  v6[6] = swift_getOpaqueTypeConformance2( &v34,  &opaque type descriptor for <<opaque return type of static PersistentModel.createBackingData<A>()>>,  1LL);
  sub_10040B2A8(v6 + 2);
  uint64_t v12 = static PersistentModel.createBackingData<A>()(v10, v10, v11, v11);
  ObservationRegistrar.init()(v12);
  sub_100401ACC((uint64_t)(v6 + 2), (uint64_t)&v34);
  uint64_t v13 = v37;
  uint64_t v14 = v38;
  sub_10040A238(&v34, v37);
  uint64_t KeyPath = swift_getKeyPath(&unk_100719AD0);
  uint64_t v32 = a1;
  uint64_t v33 = a2;
  swift_bridgeObjectRetain(a2);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)( KeyPath,  &v32,  &type metadata for String,  &protocol witness table for String,  v13,  v14);
  swift_bridgeObjectRelease(a2);
  swift_release(KeyPath);
  sub_10040A648(&v34);
  sub_100401ACC((uint64_t)(v6 + 2), (uint64_t)&v34);
  uint64_t v16 = v37;
  uint64_t v17 = v38;
  sub_10040A238(&v34, v37);
  uint64_t v18 = swift_getKeyPath(&unk_100719AF8);
  uint64_t v32 = a3;
  uint64_t v33 = a4;
  swift_bridgeObjectRetain(a4);
  dispatch thunk of BackingData.setValue<A>(forKey:to:)( v18,  &v32,  &type metadata for String,  &protocol witness table for String,  v16,  v17);
  swift_bridgeObjectRelease(a4);
  swift_release(v18);
  sub_10040A648(&v34);
  sub_100401ACC((uint64_t)(v6 + 2), (uint64_t)&v34);
  uint64_t v19 = v37;
  uint64_t v20 = v38;
  sub_10040A238(&v34, v37);
  uint64_t v21 = swift_getKeyPath(&unk_100719B20);
  uint64_t v32 = a5;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)( v21,  &v32,  &type metadata for Int,  &protocol witness table for Int,  v19,  v20);
  swift_release(v21);
  sub_10040A648(&v34);
  uint64_t v34 = a3;
  uint64_t v35 = a4;
  swift_bridgeObjectRetain(a4);
  v22._countAndFlagsBits = a1;
  v22._dispatch_queue_t object = a2;
  String.append(_:)(v22);
  swift_bridgeObjectRelease(a4);
  swift_bridgeObjectRelease(a2);
  uint64_t v24 = v34;
  uint64_t v23 = v35;
  sub_100401ACC((uint64_t)(v6 + 2), (uint64_t)&v34);
  uint64_t v25 = v37;
  uint64_t v26 = v38;
  sub_10040A238(&v34, v37);
  uint64_t v27 = swift_getKeyPath(&unk_100719AA8);
  uint64_t v32 = v24;
  uint64_t v33 = v23;
  dispatch thunk of BackingData.setValue<A>(forKey:to:)( v27,  &v32,  &type metadata for String,  &protocol witness table for String,  v25,  v26);
  swift_bridgeObjectRelease(v23);
  swift_release(v27);
  sub_10040A648(&v34);
  return v6;
}

uint64_t sub_10044B580(uint64_t a1)
{
  return sub_100441DEC(a1, (void (*)(uint64_t))sub_10044B58C);
}

void *sub_10044B58C(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  void v2[5] = sub_1003F5CB4(&qword_1009B9FF8);
  uint64_t v5 = sub_10040A2B0( (unint64_t *)&unk_1009BC920,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSOffGridDeliveryDonatedHandle,  (uint64_t)&unk_10071A6DC);
  *(void *)&__int128 v9 = v4;
  *((void *)&v9 + 1) = v4;
  uint64_t v10 = v5;
  uint64_t v11 = v5;
  v2[6] = swift_getOpaqueTypeConformance2( &v9,  &opaque type descriptor for <<opaque return type of static PersistentModel.createBackingData<A>()>>,  1LL);
  sub_10040B2A8(v2 + 2);
  uint64_t v6 = static PersistentModel.createBackingData<A>()(v4, v4, v5, v5);
  ObservationRegistrar.init()(v6);
  sub_100401ACC((uint64_t)a1, (uint64_t)&v9);
  swift_beginAccess(v2 + 2, v8, 33LL, 0LL);
  sub_10040A648(v2 + 2);
  sub_10043D79C(&v9, (uint64_t)(v2 + 2));
  swift_endAccess(v8);
  sub_10040A648(a1);
  return v2;
}

uint64_t sub_10044B694()
{
  return sub_10044FD58(&OBJC_IVAR____TtCOO17identityservicesd26SDPersistenceMigrationPlan21SDPersistenceSchemaV131IDSOffGridDeliveryDonatedHandle___observationRegistrar);
}

uint64_t sub_10044B6A0()
{
  uint64_t v6 = v0;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719B48);
  uint64_t v2 = sub_10040A2B0( &qword_1009BA000,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSRegistrationEvent,  (uint64_t)&unk_10071A8F8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  uint64_t v3 = swift_getKeyPath(&unk_100719B48);
  uint64_t v4 = sub_10040A2B0( &qword_1009BC540,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSRegistrationEvent,  (uint64_t)&unk_10071A7F8);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for UInt);
  swift_release(v3);
  return v6;
}

uint64_t sub_10044B77C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v8 = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719B48);
  uint64_t v4 = sub_10040A2B0( &qword_1009BA000,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSRegistrationEvent,  (uint64_t)&unk_10071A8F8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_100719B48);
  uint64_t v6 = sub_10040A2B0( &qword_1009BC540,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSRegistrationEvent,  (uint64_t)&unk_10071A7F8);
  PersistentModel.getValue<A>(forKey:)(&v8, v5, v6, &protocol witness table for UInt);
  uint64_t result = swift_release(v5);
  *a2 = v8;
  return result;
}

uint64_t sub_10044B860(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v8 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719B48);
  uint64_t v7[2] = v8;
  void v7[3] = v2;
  uint64_t v4 = sub_10040A2B0( &qword_1009BA000,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSRegistrationEvent,  (uint64_t)&unk_10071A8F8);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v8,  KeyPath,  sub_10045A000,  v7,  (char *)&type metadata for () + 8,  v4,  v5);
  return swift_release(KeyPath);
}

uint64_t sub_10044B904(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath = swift_getKeyPath(&unk_100719B48);
  uint64_t v6 = a2;
  uint64_t v4 = sub_10040A2B0( &qword_1009BC540,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSRegistrationEvent,  (uint64_t)&unk_10071A7F8);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, &v6, v4, &protocol witness table for UInt);
  return swift_release(KeyPath);
}

uint64_t sub_10044B984()
{
  uint64_t v6 = v0;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719B70);
  uint64_t v2 = sub_10040A2B0( &qword_1009BA000,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSRegistrationEvent,  (uint64_t)&unk_10071A8F8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  uint64_t v3 = swift_getKeyPath(&unk_100719B70);
  uint64_t v4 = sub_10040A2B0( &qword_1009BC540,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSRegistrationEvent,  (uint64_t)&unk_10071A7F8);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for String);
  swift_release(v3);
  return v6;
}

uint64_t sub_10044BA60@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  v9[0] = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719B70);
  uint64_t v4 = sub_10040A2B0( &qword_1009BA000,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSRegistrationEvent,  (uint64_t)&unk_10071A8F8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_100719B70);
  uint64_t v6 = sub_10040A2B0( &qword_1009BC540,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSRegistrationEvent,  (uint64_t)&unk_10071A7F8);
  PersistentModel.getValue<A>(forKey:)(v9, v5, v6, &protocol witness table for String);
  uint64_t result = swift_release(v5);
  uint64_t v8 = v9[1];
  *a2 = v9[0];
  a2[1] = v8;
  return result;
}

uint64_t sub_10044BB44(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v9 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719B70);
  v8[2] = v9;
  void v8[3] = v3;
  void v8[4] = v2;
  uint64_t v5 = sub_10040A2B0( &qword_1009BA000,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSRegistrationEvent,  (uint64_t)&unk_10071A8F8);
  __n128 v6 = swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v9,  KeyPath,  sub_10045A230,  v8,  (char *)&type metadata for () + 8,  v5,  v6);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_10044BC08@<X0>(void *a1@<X8>)
{
  uint64_t v9 = v1;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719B98);
  uint64_t v4 = sub_10040A2B0( &qword_1009BA000,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSRegistrationEvent,  (uint64_t)&unk_10071A8F8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_100719B98);
  uint64_t v6 = sub_10040A2B0( &qword_1009BC540,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSRegistrationEvent,  (uint64_t)&unk_10071A7F8);
  uint64_t v7 = sub_1004559B0( &qword_1009B9FB0,  &qword_1009BAD20,  (uint64_t)&protocol conformance descriptor for Date,  (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.getValue<A>(forKey:)(a1, v5, v6, v7);
  return swift_release(v5);
}

uint64_t sub_10044BD08@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v9 = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719B98);
  uint64_t v4 = sub_10040A2B0( &qword_1009BA000,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSRegistrationEvent,  (uint64_t)&unk_10071A8F8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_100719B98);
  uint64_t v6 = sub_10040A2B0( &qword_1009BC540,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSRegistrationEvent,  (uint64_t)&unk_10071A7F8);
  uint64_t v7 = sub_1004559B0( &qword_1009B9FB0,  &qword_1009BAD20,  (uint64_t)&protocol conformance descriptor for Date,  (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.getValue<A>(forKey:)(a2, v5, v6, v7);
  return swift_release(v5);
}

uint64_t sub_10044BE08(uint64_t a1, uint64_t *a2)
{
  uint64_t v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  sub_100455A7C(a1, (uint64_t)v7);
  uint64_t v16 = *a2;
  uint64_t v8 = v16;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719B98);
  uint64_t v14 = v8;
  uint64_t v15 = v7;
  uint64_t v10 = sub_10040A2B0( &qword_1009BA000,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSRegistrationEvent,  (uint64_t)&unk_10071A8F8);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v16,  KeyPath,  sub_100459FEC,  v13,  (char *)&type metadata for () + 8,  v10,  v11);
  swift_release(KeyPath);
  return sub_100455970((uint64_t)v7);
}

uint64_t sub_10044BEFC@<X0>(void *a1@<X8>)
{
  uint64_t v9 = v1;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719BC0);
  uint64_t v4 = sub_10040A2B0( &qword_1009BA000,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSRegistrationEvent,  (uint64_t)&unk_10071A8F8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_100719BC0);
  uint64_t v6 = sub_10040A2B0( &qword_1009BC540,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSRegistrationEvent,  (uint64_t)&unk_10071A7F8);
  uint64_t v7 = sub_10040A2B0( &qword_1009BAD20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  PersistentModel.getValue<A>(forKey:)(a1, v5, v6, v7);
  return swift_release(v5);
}

uint64_t sub_10044BFF4@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v9 = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719BC0);
  uint64_t v4 = sub_10040A2B0( &qword_1009BA000,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSRegistrationEvent,  (uint64_t)&unk_10071A8F8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_100719BC0);
  uint64_t v6 = sub_10040A2B0( &qword_1009BC540,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSRegistrationEvent,  (uint64_t)&unk_10071A7F8);
  uint64_t v7 = sub_10040A2B0( &qword_1009BAD20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  PersistentModel.getValue<A>(forKey:)(a2, v5, v6, v7);
  return swift_release(v5);
}

uint64_t sub_10044C0EC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = &v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v9, a1, v4);
  uint64_t v18 = *a2;
  uint64_t v10 = v18;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719BC0);
  uint64_t v16 = v10;
  uint64_t v17 = v9;
  uint64_t v12 = sub_10040A2B0( &qword_1009BA000,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSRegistrationEvent,  (uint64_t)&unk_10071A8F8);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v18,  KeyPath,  sub_100459FD8,  v15,  (char *)&type metadata for () + 8,  v12,  v13);
  swift_release(KeyPath);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v9, v4);
}

uint64_t sub_10044C1F8( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t (*a5)(uint64_t), uint64_t a6)
{
  uint64_t KeyPath = swift_getKeyPath(a3);
  uint64_t v11 = sub_10040A2B0(a4, a5, a6);
  uint64_t v12 = sub_10040A2B0( &qword_1009BAD00,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, a2, v11, v12);
  return swift_release(KeyPath);
}

uint64_t sub_10044C28C()
{
  uint64_t v6 = v0;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719BE8);
  uint64_t v2 = sub_10040A2B0( &qword_1009BA000,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSRegistrationEvent,  (uint64_t)&unk_10071A8F8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  uint64_t v3 = swift_getKeyPath(&unk_100719BE8);
  uint64_t v4 = sub_10040A2B0( &qword_1009BC540,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSRegistrationEvent,  (uint64_t)&unk_10071A7F8);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for Int);
  swift_release(v3);
  return v6;
}

uint64_t sub_10044C368@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v8 = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719BE8);
  uint64_t v4 = sub_10040A2B0( &qword_1009BA000,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSRegistrationEvent,  (uint64_t)&unk_10071A8F8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_100719BE8);
  uint64_t v6 = sub_10040A2B0( &qword_1009BC540,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSRegistrationEvent,  (uint64_t)&unk_10071A7F8);
  PersistentModel.getValue<A>(forKey:)(&v8, v5, v6, &protocol witness table for Int);
  uint64_t result = swift_release(v5);
  *a2 = v8;
  return result;
}

uint64_t sub_10044C44C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v8 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719BE8);
  uint64_t v7[2] = v8;
  void v7[3] = v2;
  uint64_t v4 = sub_10040A2B0( &qword_1009BA000,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSRegistrationEvent,  (uint64_t)&unk_10071A8F8);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v8,  KeyPath,  sub_100459FC4,  v7,  (char *)&type metadata for () + 8,  v4,  v5);
  return swift_release(KeyPath);
}

uint64_t sub_10044C4F0(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath = swift_getKeyPath(&unk_100719BE8);
  uint64_t v6 = a2;
  uint64_t v4 = sub_10040A2B0( &qword_1009BC540,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSRegistrationEvent,  (uint64_t)&unk_10071A7F8);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, &v6, v4, &protocol witness table for Int);
  return swift_release(KeyPath);
}

uint64_t sub_10044C570()
{
  uint64_t v6 = v0;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719C10);
  uint64_t v2 = sub_10040A2B0( &qword_1009BA000,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSRegistrationEvent,  (uint64_t)&unk_10071A8F8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v6, KeyPath, v2);
  swift_release(KeyPath);
  uint64_t v3 = swift_getKeyPath(&unk_100719C10);
  uint64_t v4 = sub_10040A2B0( &qword_1009BC540,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSRegistrationEvent,  (uint64_t)&unk_10071A7F8);
  PersistentModel.getValue<A>(forKey:)(&v6, v3, v4, &protocol witness table for UInt);
  swift_release(v3);
  return v6;
}

uint64_t sub_10044C64C@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v8 = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719C10);
  uint64_t v4 = sub_10040A2B0( &qword_1009BA000,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSRegistrationEvent,  (uint64_t)&unk_10071A8F8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v8, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_100719C10);
  uint64_t v6 = sub_10040A2B0( &qword_1009BC540,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSRegistrationEvent,  (uint64_t)&unk_10071A7F8);
  PersistentModel.getValue<A>(forKey:)(&v8, v5, v6, &protocol witness table for UInt);
  uint64_t result = swift_release(v5);
  *a2 = v8;
  return result;
}

uint64_t sub_10044C730(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v8 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719C10);
  uint64_t v7[2] = v8;
  void v7[3] = v2;
  uint64_t v4 = sub_10040A2B0( &qword_1009BA000,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSRegistrationEvent,  (uint64_t)&unk_10071A8F8);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v8,  KeyPath,  sub_100459FB0,  v7,  (char *)&type metadata for () + 8,  v4,  v5);
  return swift_release(KeyPath);
}

uint64_t sub_10044C7D4(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath = swift_getKeyPath(&unk_100719C10);
  uint64_t v6 = a2;
  uint64_t v4 = sub_10040A2B0( &qword_1009BC540,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSRegistrationEvent,  (uint64_t)&unk_10071A7F8);
  PersistentModel.setValue<A>(forKey:to:)(KeyPath, &v6, v4, &protocol witness table for UInt);
  return swift_release(KeyPath);
}

uint64_t sub_10044C854()
{
  uint64_t v7 = v0;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719C38);
  uint64_t v2 = sub_10040A2B0( &qword_1009BA000,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSRegistrationEvent,  (uint64_t)&unk_10071A8F8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v2);
  swift_release(KeyPath);
  uint64_t v3 = swift_getKeyPath(&unk_100719C38);
  uint64_t v4 = sub_10040A2B0( &qword_1009BC540,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSRegistrationEvent,  (uint64_t)&unk_10071A7F8);
  uint64_t v5 = sub_10045119C( &qword_1009B9ED8,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.getValue<A>(forKey:)(&v7, v3, v4, v5);
  swift_release(v3);
  return v7;
}

double sub_10044C94C@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  *(void *)&__int128 v9 = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719C38);
  uint64_t v4 = sub_10040A2B0( &qword_1009BA000,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSRegistrationEvent,  (uint64_t)&unk_10071A8F8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_100719C38);
  uint64_t v6 = sub_10040A2B0( &qword_1009BC540,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSRegistrationEvent,  (uint64_t)&unk_10071A7F8);
  uint64_t v7 = sub_10045119C( &qword_1009B9ED8,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.getValue<A>(forKey:)(&v9, v5, v6, v7);
  swift_release(v5);
  double result = *(double *)&v9;
  *a2 = v9;
  return result;
}

uint64_t sub_10044CA4C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v9 = *a2;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719C38);
  v8[2] = v9;
  void v8[3] = v3;
  void v8[4] = v2;
  uint64_t v5 = sub_10040A2B0( &qword_1009BA000,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSRegistrationEvent,  (uint64_t)&unk_10071A8F8);
  __n128 v6 = swift_bridgeObjectRetain(v2);
  ObservationRegistrar.withMutation<A, B, C>(of:keyPath:_:)( &v9,  KeyPath,  sub_10045A21C,  v8,  (char *)&type metadata for () + 8,  v5,  v6);
  swift_release(KeyPath);
  return swift_bridgeObjectRelease(v2);
}

uint64_t sub_10044CB10()
{
  uint64_t v7 = v0;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719C60);
  uint64_t v2 = sub_10040A2B0( &qword_1009BA000,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSRegistrationEvent,  (uint64_t)&unk_10071A8F8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v7, KeyPath, v2);
  swift_release(KeyPath);
  uint64_t v3 = swift_getKeyPath(&unk_100719C60);
  uint64_t v4 = sub_10040A2B0( &qword_1009BC540,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSRegistrationEvent,  (uint64_t)&unk_10071A7F8);
  uint64_t v5 = sub_10045119C( &qword_1009B9ED8,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.getValue<A>(forKey:)(&v7, v3, v4, v5);
  swift_release(v3);
  return v7;
}

double sub_10044CC08@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  *(void *)&__int128 v9 = *a1;
  uint64_t KeyPath = swift_getKeyPath(&unk_100719C60);
  uint64_t v4 = sub_10040A2B0( &qword_1009BA000,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSRegistrationEvent,  (uint64_t)&unk_10071A8F8);
  ObservationRegistrar.access<A, B>(_:keyPath:)(&v9, KeyPath, v4);
  swift_release(KeyPath);
  uint64_t v5 = swift_getKeyPath(&unk_100719C60);
  uint64_t v6 = sub_10040A2B0( &qword_1009BC540,  type metadata accessor for SDPersistenceMigrationPlan.SDPersistenceSchemaV1.IDSRegistrationEvent,  (uint64_t)&unk_10071A7F8);
  uint64_t v7 = sub_10045119C( &qword_1009B9ED8,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <A> A?);
  PersistentModel.getValue<A>(forKey:)(&v9, v5, v6, v7);
  swift_release(v5);
  double result = *(double *)&v9;
  *a2 = v9;
  return result;
}